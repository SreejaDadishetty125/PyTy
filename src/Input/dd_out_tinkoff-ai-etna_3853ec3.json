[
  {
    "project": "tinkoff-ai/etna",
    "commit": "3853ec3d0bb1f705dbbd1e3ef28233b0959f2c5b",
    "filename": "etna/ensembles/voting_ensemble.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/tinkoff-ai-etna/etna/ensembles/voting_ensemble.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "etna/ensembles/voting_ensemble.py:91:17 Incompatible parameter type [6]: Expected `typing.Sized` for 1st positional only parameter to call `len` but got `Iterable[float]`.",
    "message": " Expected `typing.Sized` for 1st positional only parameter to call `len` but got `Iterable[float]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 91,
    "warning_line": "        elif len(weights) != pipelines_number:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @staticmethod\n    def _process_weights(weights: Optional[Iterable[float]], pipelines_number: int) -> List[float]:\n        \"\"\"Process weights: if weights are not given, set them with default values, normalize weights.\"\"\"\n",
        "source_code_len": 224,
        "target_code": "    @staticmethod\n    def _process_weights(weights: Optional[List[float]], pipelines_number: int) -> List[float]:\n        \"\"\"Process weights: if weights are not given, set them with default values, normalize weights.\"\"\"\n",
        "target_code_len": 220,
        "diff_format": "@@ -86,3 +85,3 @@\n     @staticmethod\n-    def _process_weights(weights: Optional[Iterable[float]], pipelines_number: int) -> List[float]:\n+    def _process_weights(weights: Optional[List[float]], pipelines_number: int) -> List[float]:\n         \"\"\"Process weights: if weights are not given, set them with default values, normalize weights.\"\"\"\n",
        "source_code_with_indent": "    <DED>@staticmethod\n    def _process_weights(weights: Optional[Iterable[float]], pipelines_number: int) -> List[float]:\n        <IND>\"\"\"Process weights: if weights are not given, set them with default values, normalize weights.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@staticmethod\n    def _process_weights(weights: Optional[List[float]], pipelines_number: int) -> List[float]:\n        <IND>\"\"\"Process weights: if weights are not given, set them with default values, normalize weights.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "tinkoff-ai/etna",
    "commit": "3853ec3d0bb1f705dbbd1e3ef28233b0959f2c5b",
    "filename": "etna/pipeline/autoregressive_pipeline.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/tinkoff-ai-etna/etna/pipeline/autoregressive_pipeline.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "etna/pipeline/autoregressive_pipeline.py:90:25 Incompatible parameter type [6]: Expected `typing.Sequence[etna.transforms.base.Transform]` for 1st positional only parameter to call `etna.datasets.tsdataset.TSDataset.fit_transform` but got `Iterable[etna.transforms.base.Transform]`.",
    "message": " Expected `typing.Sequence[etna.transforms.base.Transform]` for 1st positional only parameter to call `etna.datasets.tsdataset.TSDataset.fit_transform` but got `Iterable[etna.transforms.base.Transform]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 90,
    "warning_line": "        ts.fit_transform(self.transforms)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from copy import deepcopy\nfrom typing import Iterable\n\n",
        "source_code_len": 55,
        "target_code": "from copy import deepcopy\nfrom typing import Sequence\n\n",
        "target_code_len": 55,
        "diff_format": "@@ -2,3 +2,3 @@\n from copy import deepcopy\n-from typing import Iterable\n+from typing import Sequence\n \n",
        "source_code_with_indent": "from copy import deepcopy\nfrom typing import Iterable\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from copy import deepcopy\nfrom typing import Sequence\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __init__(self, model: Model, horizon: int, transforms: Iterable[Transform] = (), step: int = 1):\n        \"\"\"\n",
        "source_code_len": 118,
        "target_code": "\n    def __init__(self, model: Model, horizon: int, transforms: Sequence[Transform] = (), step: int = 1):\n        \"\"\"\n",
        "target_code_len": 118,
        "diff_format": "@@ -52,3 +52,3 @@\n \n-    def __init__(self, model: Model, horizon: int, transforms: Iterable[Transform] = (), step: int = 1):\n+    def __init__(self, model: Model, horizon: int, transforms: Sequence[Transform] = (), step: int = 1):\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    def __init__(self, model: Model, horizon: int, transforms: Iterable[Transform] = (), step: int = 1):\n        <IND>",
        "target_code_with_indent": "\n    def __init__(self, model: Model, horizon: int, transforms: Sequence[Transform] = (), step: int = 1):\n        <IND>"
      }
    ]
  },
  {
    "project": "tinkoff-ai/etna",
    "commit": "3853ec3d0bb1f705dbbd1e3ef28233b0959f2c5b",
    "filename": "etna/pipeline/autoregressive_pipeline.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/tinkoff-ai-etna/etna/pipeline/autoregressive_pipeline.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "etna/pipeline/autoregressive_pipeline.py:119:12 Incompatible attribute type [8]: Attribute `transforms` declared in class `etna.datasets.tsdataset.TSDataset` has type `typing.Optional[typing.Sequence[etna.transforms.base.Transform]]` but is used as type `Iterable[etna.transforms.base.Transform]`.",
    "message": " Attribute `transforms` declared in class `etna.datasets.tsdataset.TSDataset` has type `typing.Optional[typing.Sequence[etna.transforms.base.Transform]]` but is used as type `Iterable[etna.transforms.base.Transform]`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 119,
    "warning_line": "            current_ts.transforms = self.transforms",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from copy import deepcopy\nfrom typing import Iterable\n\n",
        "source_code_len": 55,
        "target_code": "from copy import deepcopy\nfrom typing import Sequence\n\n",
        "target_code_len": 55,
        "diff_format": "@@ -2,3 +2,3 @@\n from copy import deepcopy\n-from typing import Iterable\n+from typing import Sequence\n \n",
        "source_code_with_indent": "from copy import deepcopy\nfrom typing import Iterable\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from copy import deepcopy\nfrom typing import Sequence\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __init__(self, model: Model, horizon: int, transforms: Iterable[Transform] = (), step: int = 1):\n        \"\"\"\n",
        "source_code_len": 118,
        "target_code": "\n    def __init__(self, model: Model, horizon: int, transforms: Sequence[Transform] = (), step: int = 1):\n        \"\"\"\n",
        "target_code_len": 118,
        "diff_format": "@@ -52,3 +52,3 @@\n \n-    def __init__(self, model: Model, horizon: int, transforms: Iterable[Transform] = (), step: int = 1):\n+    def __init__(self, model: Model, horizon: int, transforms: Sequence[Transform] = (), step: int = 1):\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    def __init__(self, model: Model, horizon: int, transforms: Iterable[Transform] = (), step: int = 1):\n        <IND>",
        "target_code_with_indent": "\n    def __init__(self, model: Model, horizon: int, transforms: Sequence[Transform] = (), step: int = 1):\n        <IND>"
      }
    ]
  },
  {
    "project": "tinkoff-ai/etna",
    "commit": "3853ec3d0bb1f705dbbd1e3ef28233b0959f2c5b",
    "filename": "etna/pipeline/autoregressive_pipeline.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/tinkoff-ai-etna/etna/pipeline/autoregressive_pipeline.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "etna/pipeline/autoregressive_pipeline.py:135:32 Incompatible parameter type [6]: Expected `typing.Sequence[etna.transforms.base.Transform]` for 1st positional only parameter to call `etna.datasets.tsdataset.TSDataset.transform` but got `Iterable[etna.transforms.base.Transform]`.",
    "message": " Expected `typing.Sequence[etna.transforms.base.Transform]` for 1st positional only parameter to call `etna.datasets.tsdataset.TSDataset.transform` but got `Iterable[etna.transforms.base.Transform]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 135,
    "warning_line": "        prediction_ts.transform(self.transforms)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from copy import deepcopy\nfrom typing import Iterable\n\n",
        "source_code_len": 55,
        "target_code": "from copy import deepcopy\nfrom typing import Sequence\n\n",
        "target_code_len": 55,
        "diff_format": "@@ -2,3 +2,3 @@\n from copy import deepcopy\n-from typing import Iterable\n+from typing import Sequence\n \n",
        "source_code_with_indent": "from copy import deepcopy\nfrom typing import Iterable\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from copy import deepcopy\nfrom typing import Sequence\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __init__(self, model: Model, horizon: int, transforms: Iterable[Transform] = (), step: int = 1):\n        \"\"\"\n",
        "source_code_len": 118,
        "target_code": "\n    def __init__(self, model: Model, horizon: int, transforms: Sequence[Transform] = (), step: int = 1):\n        \"\"\"\n",
        "target_code_len": 118,
        "diff_format": "@@ -52,3 +52,3 @@\n \n-    def __init__(self, model: Model, horizon: int, transforms: Iterable[Transform] = (), step: int = 1):\n+    def __init__(self, model: Model, horizon: int, transforms: Sequence[Transform] = (), step: int = 1):\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    def __init__(self, model: Model, horizon: int, transforms: Iterable[Transform] = (), step: int = 1):\n        <IND>",
        "target_code_with_indent": "\n    def __init__(self, model: Model, horizon: int, transforms: Sequence[Transform] = (), step: int = 1):\n        <IND>"
      }
    ]
  },
  {
    "project": "tinkoff-ai/etna",
    "commit": "3853ec3d0bb1f705dbbd1e3ef28233b0959f2c5b",
    "filename": "etna/pipeline/pipeline.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/tinkoff-ai-etna/etna/pipeline/pipeline.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "etna/pipeline/pipeline.py:111:30 Incompatible parameter type [6]: Expected `typing.Sequence[Transform]` for 1st positional only parameter to call `etna.datasets.tsdataset.TSDataset.fit_transform` but got `Iterable[Transform]`.",
    "message": " Expected `typing.Sequence[Transform]` for 1st positional only parameter to call `etna.datasets.tsdataset.TSDataset.fit_transform` but got `Iterable[Transform]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 111,
    "warning_line": "        self.ts.fit_transform(self.transforms)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import Dict\nfrom typing import Iterable\nfrom typing import List\nfrom typing import Optional\nfrom typing import Tuple\n",
        "source_code_len": 129,
        "target_code": "from typing import Dict\nfrom typing import List\nfrom typing import Optional\nfrom typing import Sequence\nfrom typing import Tuple\n",
        "target_code_len": 129,
        "diff_format": "@@ -5,5 +5,5 @@\n from typing import Dict\n-from typing import Iterable\n from typing import List\n from typing import Optional\n+from typing import Sequence\n from typing import Tuple\n",
        "source_code_with_indent": "from typing import Dict\nfrom typing import Iterable\nfrom typing import List\nfrom typing import Optional\nfrom typing import Tuple\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Dict\nfrom typing import List\nfrom typing import Optional\nfrom typing import Sequence\nfrom typing import Tuple\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        model: Model,\n        transforms: Iterable[Transform] = (),\n        horizon: int = 1,\n",
        "source_code_len": 94,
        "target_code": "        model: Model,\n        transforms: Sequence[Transform] = (),\n        horizon: int = 1,\n",
        "target_code_len": 94,
        "diff_format": "@@ -39,3 +39,3 @@\n         model: Model,\n-        transforms: Iterable[Transform] = (),\n+        transforms: Sequence[Transform] = (),\n         horizon: int = 1,\n",
        "source_code_with_indent": "        model: Model,\n        transforms: Iterable[Transform] = (),\n        horizon: int = 1,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        model: Model,\n        transforms: Sequence[Transform] = (),\n        horizon: int = 1,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]