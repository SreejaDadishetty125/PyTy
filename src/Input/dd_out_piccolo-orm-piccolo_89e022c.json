[
  {
    "project": "piccolo-orm/piccolo",
    "commit": "89e022c887df105f21b44cf5ddb7928057125a31",
    "filename": "piccolo/table.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/piccolo-orm-piccolo/piccolo/table.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "piccolo/table.py:91:16 Incompatible attribute type [8]: Attribute `_table` declared in class `piccolo.columns.base.ColumnMeta` has type `t.Optional[Table]` but is used as type `t.Type[Table]`.",
    "message": " Attribute `_table` declared in class `piccolo.columns.base.ColumnMeta` has type `t.Optional[Table]` but is used as type `t.Type[Table]`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 91,
    "warning_line": "                column._meta._table = cls",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "                column._meta._name = attribute_name\n                column._meta._table = cls\n\n",
        "source_code_len": 95,
        "target_code": "                column._meta._name = attribute_name\n                # Mypy wrongly thinks cls is a Table instance:\n                column._meta._table = cls  # type: ignore\n\n",
        "target_code_len": 174,
        "diff_format": "@@ -90,3 +98,4 @@\n                 column._meta._name = attribute_name\n-                column._meta._table = cls\n+                # Mypy wrongly thinks cls is a Table instance:\n+                column._meta._table = cls  # type: ignore\n \n",
        "source_code_with_indent": "                <DED>column._meta._name = attribute_name\n                column._meta._table = cls\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                <DED>column._meta._name = attribute_name\n                # Mypy wrongly thinks cls is a Table instance:\n                column._meta._table = cls  # type: ignore\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "piccolo-orm/piccolo",
    "commit": "89e022c887df105f21b44cf5ddb7928057125a31",
    "filename": "piccolo/table.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/piccolo-orm-piccolo/piccolo/table.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "piccolo/table.py:134:29 Incompatible parameter type [6]: Expected `piccolo.columns.base.Column` for 1st positional only parameter to call `t.MutableMapping.pop` but got `str`.",
    "message": " Expected `piccolo.columns.base.Column` for 1st positional only parameter to call `t.MutableMapping.pop` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 134,
    "warning_line": "            _id = kwargs.pop(\"id\")",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            # pre-existing row\n            kwargs = {\n                i: getattr(self, i._meta.name, None) for i in cls._meta.columns\n            }\n            _id = kwargs.pop(\"id\")\n            return cls.update().values(kwargs).where(cls.id == _id)\n        else:\n",
        "source_code_len": 265,
        "target_code": "            # pre-existing row\n            kwargs: t.Dict[Column, t.Any] = {\n                i: getattr(self, i._meta.name, None)\n                for i in cls._meta.columns\n                if i._meta.name != \"id\"\n            }\n            return cls.update().values(kwargs).where(cls.id == self.id)\n        else:\n",
        "target_code_len": 313,
        "diff_format": "@@ -130,7 +141,8 @@\n             # pre-existing row\n-            kwargs = {\n-                i: getattr(self, i._meta.name, None) for i in cls._meta.columns\n+            kwargs: t.Dict[Column, t.Any] = {\n+                i: getattr(self, i._meta.name, None)\n+                for i in cls._meta.columns\n+                if i._meta.name != \"id\"\n             }\n-            _id = kwargs.pop(\"id\")\n-            return cls.update().values(kwargs).where(cls.id == _id)\n+            return cls.update().values(kwargs).where(cls.id == self.id)\n         else:\n",
        "source_code_with_indent": "            # pre-existing row\n            <IND>kwargs = {\n                i: getattr(self, i._meta.name, None) for i in cls._meta.columns\n            }\n            _id = kwargs.pop(\"id\")\n            return cls.update().values(kwargs).where(cls.id == _id)\n        <DED>else:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            # pre-existing row\n            <IND>kwargs: t.Dict[Column, t.Any] = {\n                i: getattr(self, i._meta.name, None)\n                for i in cls._meta.columns\n                if i._meta.name != \"id\"\n            }\n            return cls.update().values(kwargs).where(cls.id == self.id)\n        <DED>else:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "piccolo-orm/piccolo",
    "commit": "89e022c887df105f21b44cf5ddb7928057125a31",
    "filename": "piccolo/table.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/piccolo-orm-piccolo/piccolo/table.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "piccolo/table.py:149:8 Incompatible attribute type [8]: Attribute `id` declared in class `Table` has type `piccolo.columns.column_types.PrimaryKey` but is used as type `None`.",
    "message": " Attribute `id` declared in class `Table` has type `piccolo.columns.column_types.PrimaryKey` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 149,
    "warning_line": "        self.id = None",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n        self.id = None\n\n",
        "source_code_len": 25,
        "target_code": "\n        self.id = None  # type: ignore\n\n",
        "target_code_len": 41,
        "diff_format": "@@ -148,3 +160,3 @@\n \n-        self.id = None\n+        self.id = None  # type: ignore\n \n",
        "source_code_with_indent": "\n        <DED>self.id = None\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        <DED>self.id = None  # type: ignore\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "piccolo-orm/piccolo",
    "commit": "89e022c887df105f21b44cf5ddb7928057125a31",
    "filename": "piccolo/table.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/piccolo-orm-piccolo/piccolo/table.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "piccolo/table.py:301:30 Incompatible parameter type [6]: Expected `QueryString` for 2nd parameter `base` to call `piccolo.query.base.Query.__init__` but got `str`.",
    "message": " Expected `QueryString` for 2nd parameter `base` to call `piccolo.query.base.Query.__init__` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 301,
    "warning_line": "        return Raw(table=cls, base=f'CREATE TABLE \"{cls._meta.tablename}\"()')",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"\"\"\n        return Raw(table=cls, base=f'CREATE TABLE \"{cls._meta.tablename}\"()')\n\n",
        "source_code_len": 91,
        "target_code": "        \"\"\"\n        return Raw(\n            table=cls,\n            base=QueryString(f'CREATE TABLE \"{cls._meta.tablename}\"()'),\n        )\n\n",
        "target_code_len": 139,
        "diff_format": "@@ -300,3 +314,6 @@\n         \"\"\"\n-        return Raw(table=cls, base=f'CREATE TABLE \"{cls._meta.tablename}\"()')\n+        return Raw(\n+            table=cls,\n+            base=QueryString(f'CREATE TABLE \"{cls._meta.tablename}\"()'),\n+        )\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n        return Raw(table=cls, base=f'CREATE TABLE \"{cls._meta.tablename}\"()')\n\n",
        "target_code_with_indent": "\n        return Raw(\n            table=cls,\n            base=QueryString(f'CREATE TABLE \"{cls._meta.tablename}\"()'),\n        )\n\n"
      }
    ]
  }
]