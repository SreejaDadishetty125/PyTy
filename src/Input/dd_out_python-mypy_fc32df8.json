[
  {
    "project": "python/mypy",
    "commit": "fc32df8b1ce001868bc196693974dac9aa2c08f0",
    "filename": "mypy/meet.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-mypy/mypy/meet.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mypy/meet.py:42:8 Incompatible return type [7]: Expected `Type` but got `typing.Type[Void]`.",
    "message": " Expected `Type` but got `typing.Type[Void]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 42,
    "warning_line": "        return Void",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    elif not isinstance(s, AnyType) and is_subtype(s, t):\n        return Void\n    else:\n",
        "source_code_len": 88,
        "target_code": "    elif not isinstance(s, AnyType) and is_subtype(s, t):\n        return Void()\n    else:\n",
        "target_code_len": 90,
        "diff_format": "@@ -41,3 +41,3 @@\n     elif not isinstance(s, AnyType) and is_subtype(s, t):\n-        return Void\n+        return Void()\n     else:\n",
        "source_code_with_indent": "    <DED>elif not isinstance(s, AnyType) and is_subtype(s, t):\n        <IND>return Void\n    <DED>else:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>elif not isinstance(s, AnyType) and is_subtype(s, t):\n        <IND>return Void()\n    <DED>else:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "python/mypy",
    "commit": "fc32df8b1ce001868bc196693974dac9aa2c08f0",
    "filename": "mypy/treetransform.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-mypy/mypy/treetransform.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mypy/treetransform.py:369:29 Incompatible parameter type [6]: Expected `List[List[Type]]` for 3rd positional only parameter to call `GeneratorExpr.__init__` but got `List[Type]`.",
    "message": " Expected `List[List[Type]]` for 3rd positional only parameter to call `GeneratorExpr.__init__` but got `List[Type]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 369,
    "warning_line": "                             self.optional_types(node.types),",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                             [self.names(index) for index in node.indices],\n                             self.optional_types(node.types),\n                             [self.node(s) for s in node.sequences],\n",
        "source_code_len": 207,
        "target_code": "                             [self.names(index) for index in node.indices],\n                             [self.optional_types(t) for t in node.types],\n                             [self.node(s) for s in node.sequences],\n",
        "target_code_len": 220,
        "diff_format": "@@ -368,3 +368,3 @@\n                              [self.names(index) for index in node.indices],\n-                             self.optional_types(node.types),\n+                             [self.optional_types(t) for t in node.types],\n                              [self.node(s) for s in node.sequences],\n",
        "source_code_with_indent": "                             [self.names(index) for index in node.indices],\n                             self.optional_types(node.types),\n                             [self.node(s) for s in node.sequences],\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                             [self.names(index) for index in node.indices],\n                             [self.optional_types(t) for t in node.types],\n                             [self.node(s) for s in node.sequences],\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "python/mypy",
    "commit": "fc32df8b1ce001868bc196693974dac9aa2c08f0",
    "filename": "mypy/typeanal.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-mypy/mypy/typeanal.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mypy/typeanal.py:214:4 Inconsistent override [14]: `mypy.typeanal.TypeAnalyserPass3.visit_union_type` overrides method defined in `TypeVisitor` inconsistently. Parameter of type `TupleType` is not a supertype of the overridden parameter `UnionType`.",
    "message": " `mypy.typeanal.TypeAnalyserPass3.visit_union_type` overrides method defined in `TypeVisitor` inconsistently. Parameter of type `TupleType` is not a supertype of the overridden parameter `UnionType`.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 214,
    "warning_line": "    def visit_union_type(self, t: TupleType) -> None:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def visit_union_type(self, t: TupleType) -> None:\n        for item in t.items:\n",
        "source_code_len": 84,
        "target_code": "\n    def visit_union_type(self, t: UnionType) -> None:\n        for item in t.items:\n",
        "target_code_len": 84,
        "diff_format": "@@ -213,3 +213,3 @@\n \n-    def visit_union_type(self, t: TupleType) -> None:\n+    def visit_union_type(self, t: UnionType) -> None:\n         for item in t.items:\n",
        "source_code_with_indent": "\n    <DED><DED>def visit_union_type(self, t: TupleType) -> None:\n        <IND>for item in t.items:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED><DED>def visit_union_type(self, t: UnionType) -> None:\n        <IND>for item in t.items:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "python/mypy",
    "commit": "fc32df8b1ce001868bc196693974dac9aa2c08f0",
    "filename": "mypy/types.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-mypy/mypy/types.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mypy/types.py:407:12 Incompatible return type [7]: Expected `Type` but got `typing.Type[Void]`.",
    "message": " Expected `Type` but got `typing.Type[Void]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 407,
    "warning_line": "            return Void",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        else:\n            return Void\n\n    @classmethod\n    def make_simplified_union(cls, items: List[Type], line: int = -1, repr: Any = None) -> Type:\n        while any(isinstance(typ, UnionType) for typ in items):\n",
        "source_code_len": 217,
        "target_code": "        else:\n            return Void()\n\n    @staticmethod\n    def make_simplified_union(items: List[Type], line: int = -1, repr: Any = None) -> Type:\n        while any(isinstance(typ, UnionType) for typ in items):\n",
        "target_code_len": 215,
        "diff_format": "@@ -406,6 +406,6 @@\n         else:\n-            return Void\n-\n-    @classmethod\n-    def make_simplified_union(cls, items: List[Type], line: int = -1, repr: Any = None) -> Type:\n+            return Void()\n+\n+    @staticmethod\n+    def make_simplified_union(items: List[Type], line: int = -1, repr: Any = None) -> Type:\n         while any(isinstance(typ, UnionType) for typ in items):\n",
        "source_code_with_indent": "        <DED>else:\n            <IND>return Void\n\n    <DED><DED>@classmethod\n    def make_simplified_union(cls, items: List[Type], line: int = -1, repr: Any = None) -> Type:\n        <IND>while any(isinstance(typ, UnionType) for typ in items):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>else:\n            <IND>return Void()\n\n    <DED><DED>@staticmethod\n    def make_simplified_union(items: List[Type], line: int = -1, repr: Any = None) -> Type:\n        <IND>while any(isinstance(typ, UnionType) for typ in items):\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        simplified_set = [items[i] for i in range(len(items)) if i not in removed]\n        return cls.make_union(simplified_set)\n\n",
        "source_code_len": 130,
        "target_code": "        simplified_set = [items[i] for i in range(len(items)) if i not in removed]\n        return UnionType.make_union(simplified_set)\n\n",
        "target_code_len": 136,
        "diff_format": "@@ -427,3 +427,3 @@\n         simplified_set = [items[i] for i in range(len(items)) if i not in removed]\n-        return cls.make_union(simplified_set)\n+        return UnionType.make_union(simplified_set)\n \n",
        "source_code_with_indent": "        <DED><DED>simplified_set = [items[i] for i in range(len(items)) if i not in removed]\n        return cls.make_union(simplified_set)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED><DED>simplified_set = [items[i] for i in range(len(items)) if i not in removed]\n        return UnionType.make_union(simplified_set)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "python/mypy",
    "commit": "fc32df8b1ce001868bc196693974dac9aa2c08f0",
    "filename": "mypy/types.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-mypy/mypy/types.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mypy/types.py:557:4 Inconsistent override [14]: `mypy.types.TypeTranslator.visit_union_type` overrides method defined in `TypeVisitor` inconsistently. Parameter of type `TupleType` is not a supertype of the overridden parameter `UnionType`.",
    "message": " `mypy.types.TypeTranslator.visit_union_type` overrides method defined in `TypeVisitor` inconsistently. Parameter of type `TupleType` is not a supertype of the overridden parameter `UnionType`.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 557,
    "warning_line": "    def visit_union_type(self, t: TupleType) -> Type:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    \n    def visit_union_type(self, t: TupleType) -> Type:\n        return UnionType(self.translate_types(t.items), t.line, t.repr)\n",
        "source_code_len": 131,
        "target_code": "    \n    def visit_union_type(self, t: UnionType) -> Type:\n        return UnionType(self.translate_types(t.items), t.line, t.repr)\n",
        "target_code_len": 131,
        "diff_format": "@@ -556,3 +556,3 @@\n     \n-    def visit_union_type(self, t: TupleType) -> Type:\n+    def visit_union_type(self, t: UnionType) -> Type:\n         return UnionType(self.translate_types(t.items), t.line, t.repr)\n",
        "source_code_with_indent": "    \n    <DED>def visit_union_type(self, t: TupleType) -> Type:\n        <IND>return UnionType(self.translate_types(t.items), t.line, t.repr)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    \n    <DED>def visit_union_type(self, t: UnionType) -> Type:\n        <IND>return UnionType(self.translate_types(t.items), t.line, t.repr)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "python/mypy",
    "commit": "fc32df8b1ce001868bc196693974dac9aa2c08f0",
    "filename": "mypy/types.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-mypy/mypy/types.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mypy/types.py:758:4 Inconsistent override [14]: `mypy.types.TypeQuery.visit_union_type` overrides method defined in `TypeVisitor` inconsistently. Parameter of type `TupleType` is not a supertype of the overridden parameter `UnionType`.",
    "message": " `mypy.types.TypeQuery.visit_union_type` overrides method defined in `TypeVisitor` inconsistently. Parameter of type `TupleType` is not a supertype of the overridden parameter `UnionType`.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 758,
    "warning_line": "    def visit_union_type(self, t: TupleType) -> bool:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    \n    def visit_union_type(self, t: TupleType) -> bool:\n        return self.query_types(t.items)\n",
        "source_code_len": 100,
        "target_code": "    \n    def visit_union_type(self, t: UnionType) -> bool:\n        return self.query_types(t.items)\n",
        "target_code_len": 100,
        "diff_format": "@@ -757,3 +757,3 @@\n     \n-    def visit_union_type(self, t: TupleType) -> bool:\n+    def visit_union_type(self, t: UnionType) -> bool:\n         return self.query_types(t.items)\n",
        "source_code_with_indent": "    \n    <DED>def visit_union_type(self, t: TupleType) -> bool:\n        <IND>return self.query_types(t.items)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    \n    <DED>def visit_union_type(self, t: UnionType) -> bool:\n        <IND>return self.query_types(t.items)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]