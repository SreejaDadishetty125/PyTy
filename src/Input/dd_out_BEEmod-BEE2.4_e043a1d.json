[
  {
    "project": "BEEmod/BEE2.4",
    "commit": "e043a1d843e027f067a291204bdec56050734844",
    "filename": "src/pygtrie.pyi",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/BEEmod-BEE2.4/src/pygtrie.pyi",
    "file_hunks_size": 16,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/pygtrie.pyi:69:10 Unsupported operand [58]: `|` is not supported for operand types `typing.Type[_Node]` and `typing.Type[_NoChildren]`.",
    "message": " `|` is not supported for operand types `typing.Type[_Node]` and `typing.Type[_NoChildren]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 69,
    "warning_line": "AnyNode = _Node | _NoChildren | _OneChild",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import (\n    Any, Set, TypeVar, Iterator, Literal, NoReturn,\n    Generic, MutableMapping, overload, Mapping, Iterable, Callable,\n",
        "source_code_len": 141,
        "target_code": "from typing import (\n    Any, Set, TypeVar, Iterator, Literal, NoReturn, Union, Type,\n    Generic, MutableMapping, overload, Mapping, Iterable, Callable,\n",
        "target_code_len": 154,
        "diff_format": "@@ -3,3 +3,3 @@\n from typing import (\n-    Any, Set, TypeVar, Iterator, Literal, NoReturn,\n+    Any, Set, TypeVar, Iterator, Literal, NoReturn, Union, Type,\n     Generic, MutableMapping, overload, Mapping, Iterable, Callable,\n",
        "source_code_with_indent": "from typing import (\n    Any, Set, TypeVar, Iterator, Literal, NoReturn,\n    Generic, MutableMapping, overload, Mapping, Iterable, Callable,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import (\n    Any, Set, TypeVar, Iterator, Literal, NoReturn, Union, Type,\n    Generic, MutableMapping, overload, Mapping, Iterable, Callable,\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def copy(self, make_copy: Any): ...\n    \nAnyNode = _Node | _NoChildren | _OneChild\n\n",
        "source_code_len": 88,
        "target_code": "    def copy(self, make_copy: Any): ...\n\nAnyNode = Union[_Node, _NoChildren, _OneChild]\n\n",
        "target_code_len": 89,
        "diff_format": "@@ -67,4 +69,4 @@\n     def copy(self, make_copy: Any): ...\n-    \n-AnyNode = _Node | _NoChildren | _OneChild\n+\n+AnyNode = Union[_Node, _NoChildren, _OneChild]\n \n",
        "source_code_with_indent": "    def copy(self, make_copy: Any): ...\n    \n<DED>AnyNode = _Node | _NoChildren | _OneChild\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def copy(self, make_copy: Any): ...\n\n<DED>AnyNode = Union[_Node, _NoChildren, _OneChild]\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "    def __nonzero__(self) -> bool: ...\n    __hash__: None\n    HAS_VALUE: int\n",
        "source_code_len": 77,
        "target_code": "    def __nonzero__(self) -> bool: ...\n    __hash__ = None  # type: ignore\n    HAS_VALUE: int\n",
        "target_code_len": 94,
        "diff_format": "@@ -109,3 +105,3 @@\n     def __nonzero__(self) -> bool: ...\n-    __hash__: None\n+    __hash__ = None  # type: ignore\n     HAS_VALUE: int\n",
        "source_code_with_indent": "    def __nonzero__(self) -> bool: ...\n    __hash__: None\n    HAS_VALUE: int\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def __nonzero__(self) -> bool: ...\n    __hash__ = None  # type: ignore\n    HAS_VALUE: int\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "BEEmod/BEE2.4",
    "commit": "e043a1d843e027f067a291204bdec56050734844",
    "filename": "src/pygtrie.pyi",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/BEEmod-BEE2.4/src/pygtrie.pyi",
    "file_hunks_size": 16,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/pygtrie.pyi:100:4 Inconsistent override [15]: `src.pygtrie.Trie.__iter__` overrides method defined in `Iterable` inconsistently. Returned type `typing.List[Variable[KeyT]]` is not a subtype of the overridden return `Iterator[typing.Any]`.",
    "message": " `src.pygtrie.Trie.__iter__` overrides method defined in `Iterable` inconsistently. Returned type `typing.List[Variable[KeyT]]` is not a subtype of the overridden return `Iterator[typing.Any]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 100,
    "warning_line": "    def __iter__(self) -> list[KeyT]: ...",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import (\n    Any, Set, TypeVar, Iterator, Literal, NoReturn,\n    Generic, MutableMapping, overload, Mapping, Iterable, Callable,\n",
        "source_code_len": 141,
        "target_code": "from typing import (\n    Any, Set, TypeVar, Iterator, Literal, NoReturn, Union, Type,\n    Generic, MutableMapping, overload, Mapping, Iterable, Callable,\n",
        "target_code_len": 154,
        "diff_format": "@@ -3,3 +3,3 @@\n from typing import (\n-    Any, Set, TypeVar, Iterator, Literal, NoReturn,\n+    Any, Set, TypeVar, Iterator, Literal, NoReturn, Union, Type,\n     Generic, MutableMapping, overload, Mapping, Iterable, Callable,\n",
        "source_code_with_indent": "from typing import (\n    Any, Set, TypeVar, Iterator, Literal, NoReturn,\n    Generic, MutableMapping, overload, Mapping, Iterable, Callable,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import (\n    Any, Set, TypeVar, Iterator, Literal, NoReturn, Union, Type,\n    Generic, MutableMapping, overload, Mapping, Iterable, Callable,\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def copy(self, make_copy: Any): ...\n    \nAnyNode = _Node | _NoChildren | _OneChild\n\n",
        "source_code_len": 88,
        "target_code": "    def copy(self, make_copy: Any): ...\n\nAnyNode = Union[_Node, _NoChildren, _OneChild]\n\n",
        "target_code_len": 89,
        "diff_format": "@@ -67,4 +69,4 @@\n     def copy(self, make_copy: Any): ...\n-    \n-AnyNode = _Node | _NoChildren | _OneChild\n+\n+AnyNode = Union[_Node, _NoChildren, _OneChild]\n \n",
        "source_code_with_indent": "    def copy(self, make_copy: Any): ...\n    \n<DED>AnyNode = _Node | _NoChildren | _OneChild\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def copy(self, make_copy: Any): ...\n\n<DED>AnyNode = Union[_Node, _NoChildren, _OneChild]\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @classmethod\n    def fromkeys(cls: type[TrieT], keys: Iterable[KeyT]) -> TrieT[KeyT, None]: ...\n    @overload\n    @classmethod\n    def fromkeys(cls: type[TrieT], keys: Iterable[KeyT], value: ValueT) -> TrieT[KeyT, ValueT]: ...\n    \n    def __iter__(self) -> list[KeyT]: ...\n    def iteritems(self, prefix: KeyT = ..., shallow: bool = ...) -> Iterator[tuple[KeyT, ValueT]]: ...\n",
        "source_code_len": 381,
        "target_code": "    @classmethod\n    def fromkeys(cls: Type[TrieT], keys: Iterable[KeyT]) -> TrieT: ...\n    @overload\n    @classmethod\n    def fromkeys(cls: Type[TrieT], keys: Iterable[KeyT], value: ValueT) -> TrieT: ...\n\n    def __iter__(self) -> Iterator[KeyT]: ...\n    def iteritems(self, prefix: KeyT = ..., shallow: bool = ...) -> Iterator[tuple[KeyT, ValueT]]: ...\n",
        "target_code_len": 355,
        "diff_format": "@@ -94,8 +90,8 @@\n     @classmethod\n-    def fromkeys(cls: type[TrieT], keys: Iterable[KeyT]) -> TrieT[KeyT, None]: ...\n+    def fromkeys(cls: Type[TrieT], keys: Iterable[KeyT]) -> TrieT: ...\n     @overload\n     @classmethod\n-    def fromkeys(cls: type[TrieT], keys: Iterable[KeyT], value: ValueT) -> TrieT[KeyT, ValueT]: ...\n-    \n-    def __iter__(self) -> list[KeyT]: ...\n+    def fromkeys(cls: Type[TrieT], keys: Iterable[KeyT], value: ValueT) -> TrieT: ...\n+\n+    def __iter__(self) -> Iterator[KeyT]: ...\n     def iteritems(self, prefix: KeyT = ..., shallow: bool = ...) -> Iterator[tuple[KeyT, ValueT]]: ...\n",
        "source_code_with_indent": "    @classmethod\n    def fromkeys(cls: type[TrieT], keys: Iterable[KeyT]) -> TrieT[KeyT, None]: ...\n    @overload\n    @classmethod\n    def fromkeys(cls: type[TrieT], keys: Iterable[KeyT], value: ValueT) -> TrieT[KeyT, ValueT]: ...\n    \n    def __iter__(self) -> list[KeyT]: ...\n    def iteritems(self, prefix: KeyT = ..., shallow: bool = ...) -> Iterator[tuple[KeyT, ValueT]]: ...\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    @classmethod\n    def fromkeys(cls: Type[TrieT], keys: Iterable[KeyT]) -> TrieT: ...\n    @overload\n    @classmethod\n    def fromkeys(cls: Type[TrieT], keys: Iterable[KeyT], value: ValueT) -> TrieT: ...\n\n    def __iter__(self) -> Iterator[KeyT]: ...\n    def iteritems(self, prefix: KeyT = ..., shallow: bool = ...) -> Iterator[tuple[KeyT, ValueT]]: ...\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "    def __nonzero__(self) -> bool: ...\n    __hash__: None\n    HAS_VALUE: int\n",
        "source_code_len": 77,
        "target_code": "    def __nonzero__(self) -> bool: ...\n    __hash__ = None  # type: ignore\n    HAS_VALUE: int\n",
        "target_code_len": 94,
        "diff_format": "@@ -109,3 +105,3 @@\n     def __nonzero__(self) -> bool: ...\n-    __hash__: None\n+    __hash__ = None  # type: ignore\n     HAS_VALUE: int\n",
        "source_code_with_indent": "    def __nonzero__(self) -> bool: ...\n    __hash__: None\n    HAS_VALUE: int\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def __nonzero__(self) -> bool: ...\n    __hash__ = None  # type: ignore\n    HAS_VALUE: int\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "BEEmod/BEE2.4",
    "commit": "e043a1d843e027f067a291204bdec56050734844",
    "filename": "src/pygtrie.pyi",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/BEEmod-BEE2.4/src/pygtrie.pyi",
    "file_hunks_size": 16,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "src/pygtrie.pyi:104:4 Inconsistent override [15]: `src.pygtrie.Trie.items` overrides method defined in `Mapping` inconsistently. Returned type `typing.List[typing.Tuple[Variable[KeyT], Variable[ValueT]]]` is not a subtype of the overridden return `typing.AbstractSet[typing.Tuple[typing.Any, typing.Any]]`.",
    "message": " `src.pygtrie.Trie.items` overrides method defined in `Mapping` inconsistently. Returned type `typing.List[typing.Tuple[Variable[KeyT], Variable[ValueT]]]` is not a subtype of the overridden return `typing.AbstractSet[typing.Tuple[typing.Any, typing.Any]]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 104,
    "warning_line": "    def items(self, prefix: KeyT = ..., shallow: bool = ...) -> list[tuple[KeyT, ValueT]]: ...",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "    def itervalues(self, prefix: KeyT = ..., shallow: bool = ...) -> Iterator[ValueT]: ...\n    def items(self, prefix: KeyT = ..., shallow: bool = ...) -> list[tuple[KeyT, ValueT]]: ...\n    def keys(self, prefix: KeyT = ..., shallow: bool = ...) -> list[KeyT]: ...\n    def values(self, prefix: KeyT = ..., shallow: bool = ...) -> list[ValueT]: ...\n    def __len__(self) -> int: ...\n",
        "source_code_len": 382,
        "target_code": "    def itervalues(self, prefix: KeyT = ..., shallow: bool = ...) -> Iterator[ValueT]: ...\n    def items(self, prefix: KeyT = ..., shallow: bool = ...) -> list[tuple[KeyT, ValueT]]: ...  # type: ignore  # Py2\n    def keys(self, prefix: KeyT = ..., shallow: bool = ...) -> list[KeyT]: ...  # type: ignore  # Py2\n    def values(self, prefix: KeyT = ..., shallow: bool = ...) -> list[ValueT]: ...  # type: ignore  # Py2\n    def __len__(self) -> int: ...\n",
        "target_code_len": 451,
        "diff_format": "@@ -103,5 +99,5 @@\n     def itervalues(self, prefix: KeyT = ..., shallow: bool = ...) -> Iterator[ValueT]: ...\n-    def items(self, prefix: KeyT = ..., shallow: bool = ...) -> list[tuple[KeyT, ValueT]]: ...\n-    def keys(self, prefix: KeyT = ..., shallow: bool = ...) -> list[KeyT]: ...\n-    def values(self, prefix: KeyT = ..., shallow: bool = ...) -> list[ValueT]: ...\n+    def items(self, prefix: KeyT = ..., shallow: bool = ...) -> list[tuple[KeyT, ValueT]]: ...  # type: ignore  # Py2\n+    def keys(self, prefix: KeyT = ..., shallow: bool = ...) -> list[KeyT]: ...  # type: ignore  # Py2\n+    def values(self, prefix: KeyT = ..., shallow: bool = ...) -> list[ValueT]: ...  # type: ignore  # Py2\n     def __len__(self) -> int: ...\n",
        "source_code_with_indent": "    def itervalues(self, prefix: KeyT = ..., shallow: bool = ...) -> Iterator[ValueT]: ...\n    def items(self, prefix: KeyT = ..., shallow: bool = ...) -> list[tuple[KeyT, ValueT]]: ...\n    def keys(self, prefix: KeyT = ..., shallow: bool = ...) -> list[KeyT]: ...\n    def values(self, prefix: KeyT = ..., shallow: bool = ...) -> list[ValueT]: ...\n    def __len__(self) -> int: ...\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def itervalues(self, prefix: KeyT = ..., shallow: bool = ...) -> Iterator[ValueT]: ...\n    def items(self, prefix: KeyT = ..., shallow: bool = ...) -> list[tuple[KeyT, ValueT]]: ...  # type: ignore  # Py2\n    def keys(self, prefix: KeyT = ..., shallow: bool = ...) -> list[KeyT]: ...  # type: ignore  # Py2\n    def values(self, prefix: KeyT = ..., shallow: bool = ...) -> list[ValueT]: ...  # type: ignore  # Py2\n    def __len__(self) -> int: ...\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "BEEmod/BEE2.4",
    "commit": "e043a1d843e027f067a291204bdec56050734844",
    "filename": "src/pygtrie.pyi",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/BEEmod-BEE2.4/src/pygtrie.pyi",
    "file_hunks_size": 16,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "src/pygtrie.pyi:105:4 Inconsistent override [15]: `src.pygtrie.Trie.keys` overrides method defined in `Mapping` inconsistently. Returned type `typing.List[Variable[KeyT]]` is not a subtype of the overridden return `typing.AbstractSet[typing.Any]`.",
    "message": " `src.pygtrie.Trie.keys` overrides method defined in `Mapping` inconsistently. Returned type `typing.List[Variable[KeyT]]` is not a subtype of the overridden return `typing.AbstractSet[typing.Any]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 105,
    "warning_line": "    def keys(self, prefix: KeyT = ..., shallow: bool = ...) -> list[KeyT]: ...",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "    def itervalues(self, prefix: KeyT = ..., shallow: bool = ...) -> Iterator[ValueT]: ...\n    def items(self, prefix: KeyT = ..., shallow: bool = ...) -> list[tuple[KeyT, ValueT]]: ...\n    def keys(self, prefix: KeyT = ..., shallow: bool = ...) -> list[KeyT]: ...\n    def values(self, prefix: KeyT = ..., shallow: bool = ...) -> list[ValueT]: ...\n    def __len__(self) -> int: ...\n",
        "source_code_len": 382,
        "target_code": "    def itervalues(self, prefix: KeyT = ..., shallow: bool = ...) -> Iterator[ValueT]: ...\n    def items(self, prefix: KeyT = ..., shallow: bool = ...) -> list[tuple[KeyT, ValueT]]: ...  # type: ignore  # Py2\n    def keys(self, prefix: KeyT = ..., shallow: bool = ...) -> list[KeyT]: ...  # type: ignore  # Py2\n    def values(self, prefix: KeyT = ..., shallow: bool = ...) -> list[ValueT]: ...  # type: ignore  # Py2\n    def __len__(self) -> int: ...\n",
        "target_code_len": 451,
        "diff_format": "@@ -103,5 +99,5 @@\n     def itervalues(self, prefix: KeyT = ..., shallow: bool = ...) -> Iterator[ValueT]: ...\n-    def items(self, prefix: KeyT = ..., shallow: bool = ...) -> list[tuple[KeyT, ValueT]]: ...\n-    def keys(self, prefix: KeyT = ..., shallow: bool = ...) -> list[KeyT]: ...\n-    def values(self, prefix: KeyT = ..., shallow: bool = ...) -> list[ValueT]: ...\n+    def items(self, prefix: KeyT = ..., shallow: bool = ...) -> list[tuple[KeyT, ValueT]]: ...  # type: ignore  # Py2\n+    def keys(self, prefix: KeyT = ..., shallow: bool = ...) -> list[KeyT]: ...  # type: ignore  # Py2\n+    def values(self, prefix: KeyT = ..., shallow: bool = ...) -> list[ValueT]: ...  # type: ignore  # Py2\n     def __len__(self) -> int: ...\n",
        "source_code_with_indent": "    def itervalues(self, prefix: KeyT = ..., shallow: bool = ...) -> Iterator[ValueT]: ...\n    def items(self, prefix: KeyT = ..., shallow: bool = ...) -> list[tuple[KeyT, ValueT]]: ...\n    def keys(self, prefix: KeyT = ..., shallow: bool = ...) -> list[KeyT]: ...\n    def values(self, prefix: KeyT = ..., shallow: bool = ...) -> list[ValueT]: ...\n    def __len__(self) -> int: ...\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def itervalues(self, prefix: KeyT = ..., shallow: bool = ...) -> Iterator[ValueT]: ...\n    def items(self, prefix: KeyT = ..., shallow: bool = ...) -> list[tuple[KeyT, ValueT]]: ...  # type: ignore  # Py2\n    def keys(self, prefix: KeyT = ..., shallow: bool = ...) -> list[KeyT]: ...  # type: ignore  # Py2\n    def values(self, prefix: KeyT = ..., shallow: bool = ...) -> list[ValueT]: ...  # type: ignore  # Py2\n    def __len__(self) -> int: ...\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "BEEmod/BEE2.4",
    "commit": "e043a1d843e027f067a291204bdec56050734844",
    "filename": "src/pygtrie.pyi",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/BEEmod-BEE2.4/src/pygtrie.pyi",
    "file_hunks_size": 16,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "src/pygtrie.pyi:106:4 Inconsistent override [15]: `src.pygtrie.Trie.values` overrides method defined in `Mapping` inconsistently. Returned type `typing.List[Variable[ValueT]]` is not a subtype of the overridden return `typing.ValuesView[typing.Any]`.",
    "message": " `src.pygtrie.Trie.values` overrides method defined in `Mapping` inconsistently. Returned type `typing.List[Variable[ValueT]]` is not a subtype of the overridden return `typing.ValuesView[typing.Any]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 106,
    "warning_line": "    def values(self, prefix: KeyT = ..., shallow: bool = ...) -> list[ValueT]: ...",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "    def itervalues(self, prefix: KeyT = ..., shallow: bool = ...) -> Iterator[ValueT]: ...\n    def items(self, prefix: KeyT = ..., shallow: bool = ...) -> list[tuple[KeyT, ValueT]]: ...\n    def keys(self, prefix: KeyT = ..., shallow: bool = ...) -> list[KeyT]: ...\n    def values(self, prefix: KeyT = ..., shallow: bool = ...) -> list[ValueT]: ...\n    def __len__(self) -> int: ...\n",
        "source_code_len": 382,
        "target_code": "    def itervalues(self, prefix: KeyT = ..., shallow: bool = ...) -> Iterator[ValueT]: ...\n    def items(self, prefix: KeyT = ..., shallow: bool = ...) -> list[tuple[KeyT, ValueT]]: ...  # type: ignore  # Py2\n    def keys(self, prefix: KeyT = ..., shallow: bool = ...) -> list[KeyT]: ...  # type: ignore  # Py2\n    def values(self, prefix: KeyT = ..., shallow: bool = ...) -> list[ValueT]: ...  # type: ignore  # Py2\n    def __len__(self) -> int: ...\n",
        "target_code_len": 451,
        "diff_format": "@@ -103,5 +99,5 @@\n     def itervalues(self, prefix: KeyT = ..., shallow: bool = ...) -> Iterator[ValueT]: ...\n-    def items(self, prefix: KeyT = ..., shallow: bool = ...) -> list[tuple[KeyT, ValueT]]: ...\n-    def keys(self, prefix: KeyT = ..., shallow: bool = ...) -> list[KeyT]: ...\n-    def values(self, prefix: KeyT = ..., shallow: bool = ...) -> list[ValueT]: ...\n+    def items(self, prefix: KeyT = ..., shallow: bool = ...) -> list[tuple[KeyT, ValueT]]: ...  # type: ignore  # Py2\n+    def keys(self, prefix: KeyT = ..., shallow: bool = ...) -> list[KeyT]: ...  # type: ignore  # Py2\n+    def values(self, prefix: KeyT = ..., shallow: bool = ...) -> list[ValueT]: ...  # type: ignore  # Py2\n     def __len__(self) -> int: ...\n",
        "source_code_with_indent": "    def itervalues(self, prefix: KeyT = ..., shallow: bool = ...) -> Iterator[ValueT]: ...\n    def items(self, prefix: KeyT = ..., shallow: bool = ...) -> list[tuple[KeyT, ValueT]]: ...\n    def keys(self, prefix: KeyT = ..., shallow: bool = ...) -> list[KeyT]: ...\n    def values(self, prefix: KeyT = ..., shallow: bool = ...) -> list[ValueT]: ...\n    def __len__(self) -> int: ...\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def itervalues(self, prefix: KeyT = ..., shallow: bool = ...) -> Iterator[ValueT]: ...\n    def items(self, prefix: KeyT = ..., shallow: bool = ...) -> list[tuple[KeyT, ValueT]]: ...  # type: ignore  # Py2\n    def keys(self, prefix: KeyT = ..., shallow: bool = ...) -> list[KeyT]: ...  # type: ignore  # Py2\n    def values(self, prefix: KeyT = ..., shallow: bool = ...) -> list[ValueT]: ...  # type: ignore  # Py2\n    def __len__(self) -> int: ...\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "BEEmod/BEE2.4",
    "commit": "e043a1d843e027f067a291204bdec56050734844",
    "filename": "src/pygtrie.pyi",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/BEEmod-BEE2.4/src/pygtrie.pyi",
    "file_hunks_size": 16,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "src/pygtrie.pyi:110:4 Inconsistent override [15]: `__hash__` overrides attribute defined in `object` inconsistently. Type `None` is not a subtype of the overridden attribute `BoundMethod[typing.Callable(object.__hash__)[[Named(self, object)], int], typing.Type[Trie]]`.",
    "message": " `__hash__` overrides attribute defined in `object` inconsistently. Type `None` is not a subtype of the overridden attribute `BoundMethod[typing.Callable(object.__hash__)[[Named(self, object)], int], typing.Type[Trie]]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 110,
    "warning_line": "    __hash__: None",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "    def __nonzero__(self) -> bool: ...\n    __hash__: None\n    HAS_VALUE: int\n",
        "source_code_len": 77,
        "target_code": "    def __nonzero__(self) -> bool: ...\n    __hash__ = None  # type: ignore\n    HAS_VALUE: int\n",
        "target_code_len": 94,
        "diff_format": "@@ -109,3 +105,3 @@\n     def __nonzero__(self) -> bool: ...\n-    __hash__: None\n+    __hash__ = None  # type: ignore\n     HAS_VALUE: int\n",
        "source_code_with_indent": "    def __nonzero__(self) -> bool: ...\n    __hash__: None\n    HAS_VALUE: int\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def __nonzero__(self) -> bool: ...\n    __hash__ = None  # type: ignore\n    HAS_VALUE: int\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "BEEmod/BEE2.4",
    "commit": "e043a1d843e027f067a291204bdec56050734844",
    "filename": "src/pygtrie.pyi",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/BEEmod-BEE2.4/src/pygtrie.pyi",
    "file_hunks_size": 16,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/pygtrie.pyi:139:8 Inconsistent override [15]: `src.pygtrie.Trie._Step.__bool__` overrides method defined in `Trie._NoneStep` inconsistently. Returned type `bool` is not a subtype of the overridden return `typing_extensions.Literal[False]`.",
    "message": " `src.pygtrie.Trie._Step.__bool__` overrides method defined in `Trie._NoneStep` inconsistently. Returned type `bool` is not a subtype of the overridden return `typing_extensions.Literal[False]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 139,
    "warning_line": "        def __bool__(self) -> bool: ...",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        def has_subtrie(self) -> bool: ...\n        def get(self, default: T = None) -> ValueT | T: ...\n        def set(self, value: ValueT) -> None: ...\n        def setdefault(self, value: ValueT) -> ValueT: ...\n        @property\n        def key(self) -> KeyT: ...\n        @property\n        def value(self) -> ValueT: ...\n        @value.setter\n        def value(self, value: ValueT) -> None: ...\n    \n    def walk_towards(self, key: KeyT) -> Iterator[_Step[KeyT, ValueT]]: ...\n",
        "source_code_len": 477,
        "target_code": "        def has_subtrie(self) -> bool: ...\n\n        def get(self, default: T = None) -> Union[Value2T, T]: ...\n        def set(self, value: Value2T) -> None: ...\n        def setdefault(self, value: Value2T) -> Value2T: ...\n        @property\n        def key(self) -> Key2T: ...\n        @property\n        def value(self) -> Value2T: ...\n        @value.setter\n        def value(self, value: Value2T) -> None: ...\n    class _NoneStep(_Step[None, None]): ...\n\n    def walk_towards(self, key: KeyT) -> Iterator[_Step[KeyT, ValueT]]: ...\n",
        "target_code_len": 531,
        "diff_format": "@@ -144,12 +132,14 @@\n         def has_subtrie(self) -> bool: ...\n-        def get(self, default: T = None) -> ValueT | T: ...\n-        def set(self, value: ValueT) -> None: ...\n-        def setdefault(self, value: ValueT) -> ValueT: ...\n+\n+        def get(self, default: T = None) -> Union[Value2T, T]: ...\n+        def set(self, value: Value2T) -> None: ...\n+        def setdefault(self, value: Value2T) -> Value2T: ...\n         @property\n-        def key(self) -> KeyT: ...\n+        def key(self) -> Key2T: ...\n         @property\n-        def value(self) -> ValueT: ...\n+        def value(self) -> Value2T: ...\n         @value.setter\n-        def value(self, value: ValueT) -> None: ...\n-    \n+        def value(self, value: Value2T) -> None: ...\n+    class _NoneStep(_Step[None, None]): ...\n+\n     def walk_towards(self, key: KeyT) -> Iterator[_Step[KeyT, ValueT]]: ...\n",
        "source_code_with_indent": "        def has_subtrie(self) -> bool: ...\n        def get(self, default: T = None) -> ValueT | T: ...\n        def set(self, value: ValueT) -> None: ...\n        def setdefault(self, value: ValueT) -> ValueT: ...\n        @property\n        def key(self) -> KeyT: ...\n        @property\n        def value(self) -> ValueT: ...\n        @value.setter\n        def value(self, value: ValueT) -> None: ...\n    \n    <DED>def walk_towards(self, key: KeyT) -> Iterator[_Step[KeyT, ValueT]]: ...\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        def has_subtrie(self) -> bool: ...\n\n        def get(self, default: T = None) -> Union[Value2T, T]: ...\n        def set(self, value: Value2T) -> None: ...\n        def setdefault(self, value: Value2T) -> Value2T: ...\n        @property\n        def key(self) -> Key2T: ...\n        @property\n        def value(self) -> Value2T: ...\n        @value.setter\n        def value(self, value: Value2T) -> None: ...\n    <DED>class _NoneStep(_Step[None, None]): ...\n\n    def walk_towards(self, key: KeyT) -> Iterator[_Step[KeyT, ValueT]]: ...\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "BEEmod/BEE2.4",
    "commit": "e043a1d843e027f067a291204bdec56050734844",
    "filename": "src/pygtrie.pyi",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/BEEmod-BEE2.4/src/pygtrie.pyi",
    "file_hunks_size": 16,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/pygtrie.pyi:140:8 Inconsistent override [15]: `src.pygtrie.Trie._Step.__nonzero__` overrides method defined in `Trie._NoneStep` inconsistently. Returned type `bool` is not a subtype of the overridden return `typing_extensions.Literal[False]`.",
    "message": " `src.pygtrie.Trie._Step.__nonzero__` overrides method defined in `Trie._NoneStep` inconsistently. Returned type `bool` is not a subtype of the overridden return `typing_extensions.Literal[False]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 140,
    "warning_line": "        def __nonzero__(self) -> bool: ...",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        def has_subtrie(self) -> bool: ...\n        def get(self, default: T = None) -> ValueT | T: ...\n        def set(self, value: ValueT) -> None: ...\n        def setdefault(self, value: ValueT) -> ValueT: ...\n        @property\n        def key(self) -> KeyT: ...\n        @property\n        def value(self) -> ValueT: ...\n        @value.setter\n        def value(self, value: ValueT) -> None: ...\n    \n    def walk_towards(self, key: KeyT) -> Iterator[_Step[KeyT, ValueT]]: ...\n",
        "source_code_len": 477,
        "target_code": "        def has_subtrie(self) -> bool: ...\n\n        def get(self, default: T = None) -> Union[Value2T, T]: ...\n        def set(self, value: Value2T) -> None: ...\n        def setdefault(self, value: Value2T) -> Value2T: ...\n        @property\n        def key(self) -> Key2T: ...\n        @property\n        def value(self) -> Value2T: ...\n        @value.setter\n        def value(self, value: Value2T) -> None: ...\n    class _NoneStep(_Step[None, None]): ...\n\n    def walk_towards(self, key: KeyT) -> Iterator[_Step[KeyT, ValueT]]: ...\n",
        "target_code_len": 531,
        "diff_format": "@@ -144,12 +132,14 @@\n         def has_subtrie(self) -> bool: ...\n-        def get(self, default: T = None) -> ValueT | T: ...\n-        def set(self, value: ValueT) -> None: ...\n-        def setdefault(self, value: ValueT) -> ValueT: ...\n+\n+        def get(self, default: T = None) -> Union[Value2T, T]: ...\n+        def set(self, value: Value2T) -> None: ...\n+        def setdefault(self, value: Value2T) -> Value2T: ...\n         @property\n-        def key(self) -> KeyT: ...\n+        def key(self) -> Key2T: ...\n         @property\n-        def value(self) -> ValueT: ...\n+        def value(self) -> Value2T: ...\n         @value.setter\n-        def value(self, value: ValueT) -> None: ...\n-    \n+        def value(self, value: Value2T) -> None: ...\n+    class _NoneStep(_Step[None, None]): ...\n+\n     def walk_towards(self, key: KeyT) -> Iterator[_Step[KeyT, ValueT]]: ...\n",
        "source_code_with_indent": "        def has_subtrie(self) -> bool: ...\n        def get(self, default: T = None) -> ValueT | T: ...\n        def set(self, value: ValueT) -> None: ...\n        def setdefault(self, value: ValueT) -> ValueT: ...\n        @property\n        def key(self) -> KeyT: ...\n        @property\n        def value(self) -> ValueT: ...\n        @value.setter\n        def value(self, value: ValueT) -> None: ...\n    \n    <DED>def walk_towards(self, key: KeyT) -> Iterator[_Step[KeyT, ValueT]]: ...\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        def has_subtrie(self) -> bool: ...\n\n        def get(self, default: T = None) -> Union[Value2T, T]: ...\n        def set(self, value: Value2T) -> None: ...\n        def setdefault(self, value: Value2T) -> Value2T: ...\n        @property\n        def key(self) -> Key2T: ...\n        @property\n        def value(self) -> Value2T: ...\n        @value.setter\n        def value(self, value: Value2T) -> None: ...\n    <DED>class _NoneStep(_Step[None, None]): ...\n\n    def walk_towards(self, key: KeyT) -> Iterator[_Step[KeyT, ValueT]]: ...\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]