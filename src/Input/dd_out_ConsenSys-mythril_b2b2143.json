[
  {
    "project": "ConsenSys/mythril",
    "commit": "b2b21431cd255c33fed711aee2d1d749b3968474",
    "filename": "mythril/laser/ethereum/call.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ConsenSys-mythril/mythril/laser/ethereum/call.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mythril/laser/ethereum/call.py:221:37 Call error [29]: `Union[typing.Callable[..., typing.Any], typing.Tuple[int, int]]` is not a function.",
    "message": " `Union[typing.Callable[..., typing.Any], typing.Tuple[int, int]]` is not a function.",
    "rule_id": "Call error [29]",
    "warning_line_no": 221,
    "warning_line": "    native_gas_min, native_gas_max = OPCODE_GAS[\"NATIVE_COST\"](",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import logging\nfrom typing import Union, List\nfrom z3 import Z3Exception\n\nfrom mythril.laser.ethereum import natives\n",
        "source_code_len": 117,
        "target_code": "import logging\nfrom typing import Union, List, cast, Callable\nfrom z3 import Z3Exception\nfrom mythril.laser.smt import BitVec\nfrom mythril.laser.ethereum import natives\n",
        "target_code_len": 169,
        "diff_format": "@@ -5,5 +5,5 @@\n import logging\n-from typing import Union, List\n+from typing import Union, List, cast, Callable\n from z3 import Z3Exception\n-\n+from mythril.laser.smt import BitVec\n from mythril.laser.ethereum import natives\n",
        "source_code_with_indent": "import logging\nfrom typing import Union, List\nfrom z3 import Z3Exception\n\nfrom mythril.laser.ethereum import natives\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import logging\nfrom typing import Union, List, cast, Callable\nfrom z3 import Z3Exception\nfrom mythril.laser.smt import BitVec\nfrom mythril.laser.ethereum import natives\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    call_address_int = int(callee_address, 16)\n    native_gas_min, native_gas_max = OPCODE_GAS[\"NATIVE_COST\"](\n        global_state.mstate.calculate_extension_size(mem_out_start, mem_out_sz),\n",
        "source_code_len": 192,
        "target_code": "    call_address_int = int(callee_address, 16)\n    native_gas_min, native_gas_max = cast(Callable, OPCODE_GAS[\"NATIVE_COST\"])(\n        global_state.mstate.calculate_extension_size(mem_out_start, mem_out_sz),\n",
        "target_code_len": 208,
        "diff_format": "@@ -220,3 +226,3 @@\n     call_address_int = int(callee_address, 16)\n-    native_gas_min, native_gas_max = OPCODE_GAS[\"NATIVE_COST\"](\n+    native_gas_min, native_gas_max = cast(Callable, OPCODE_GAS[\"NATIVE_COST\"])(\n         global_state.mstate.calculate_extension_size(mem_out_start, mem_out_sz),\n",
        "source_code_with_indent": "    call_address_int = int(callee_address, 16)\n    native_gas_min, native_gas_max = OPCODE_GAS[\"NATIVE_COST\"](\n        global_state.mstate.calculate_extension_size(mem_out_start, mem_out_sz),\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    call_address_int = int(callee_address, 16)\n    native_gas_min, native_gas_max = cast(Callable, OPCODE_GAS[\"NATIVE_COST\"])(\n        global_state.mstate.calculate_extension_size(mem_out_start, mem_out_sz),\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ConsenSys/mythril",
    "commit": "b2b21431cd255c33fed711aee2d1d749b3968474",
    "filename": "mythril/laser/ethereum/instructions.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ConsenSys-mythril/mythril/laser/ethereum/instructions.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mythril/laser/ethereum/instructions.py:888:27 Call error [29]: `Union[typing.Callable[..., typing.Any], Tuple[int, int]]` is not a function.",
    "message": " `Union[typing.Callable[..., typing.Any], Tuple[int, int]]` is not a function.",
    "rule_id": "Call error [29]",
    "warning_line_no": 888,
    "warning_line": "        min_gas, max_gas = OPCODE_GAS[\"SHA3_FUNC\"](length)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            )\n            state.min_gas_used += OPCODE_GAS[\"SHA3\"][0]\n            state.max_gas_used += OPCODE_GAS[\"SHA3\"][1]\n            return [global_state]\n\n        min_gas, max_gas = OPCODE_GAS[\"SHA3_FUNC\"](length)\n        state.min_gas_used += min_gas\n",
        "source_code_len": 258,
        "target_code": "            )\n            gas_tuple = cast(Tuple, OPCODE_GAS[\"SHA3\"])\n            state.min_gas_used += gas_tuple[0]\n            state.max_gas_used += gas_tuple[1]\n            return [global_state]\n\n        min_gas, max_gas = cast(Callable, OPCODE_GAS[\"SHA3_FUNC\"])(length)\n        state.min_gas_used += min_gas\n",
        "target_code_len": 312,
        "diff_format": "@@ -883,7 +885,8 @@\n             )\n-            state.min_gas_used += OPCODE_GAS[\"SHA3\"][0]\n-            state.max_gas_used += OPCODE_GAS[\"SHA3\"][1]\n-            return [global_state]\n-\n-        min_gas, max_gas = OPCODE_GAS[\"SHA3_FUNC\"](length)\n+            gas_tuple = cast(Tuple, OPCODE_GAS[\"SHA3\"])\n+            state.min_gas_used += gas_tuple[0]\n+            state.max_gas_used += gas_tuple[1]\n+            return [global_state]\n+\n+        min_gas, max_gas = cast(Callable, OPCODE_GAS[\"SHA3_FUNC\"])(length)\n         state.min_gas_used += min_gas\n",
        "source_code_with_indent": "            )\n            state.min_gas_used += OPCODE_GAS[\"SHA3\"][0]\n            state.max_gas_used += OPCODE_GAS[\"SHA3\"][1]\n            return [global_state]\n\n        <DED>min_gas, max_gas = OPCODE_GAS[\"SHA3_FUNC\"](length)\n        state.min_gas_used += min_gas\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            )\n            gas_tuple = cast(Tuple, OPCODE_GAS[\"SHA3\"])\n            state.min_gas_used += gas_tuple[0]\n            state.max_gas_used += gas_tuple[1]\n            return [global_state]\n\n        <DED>min_gas, max_gas = cast(Callable, OPCODE_GAS[\"SHA3_FUNC\"])(length)\n        state.min_gas_used += min_gas\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ConsenSys/mythril",
    "commit": "b2b21431cd255c33fed711aee2d1d749b3968474",
    "filename": "mythril/laser/ethereum/instructions.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ConsenSys-mythril/mythril/laser/ethereum/instructions.py",
    "file_hunks_size": 8,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mythril/laser/ethereum/instructions.py:1301:60 Incompatible parameter type [6]: Expected `int` for 1st positional only parameter to call `mythril.laser.ethereum.state.account.Storage.__setitem__` but got `Union[int, str]`.",
    "message": " Expected `int` for 1st positional only parameter to call `mythril.laser.ethereum.state.account.Storage.__setitem__` but got `Union[int, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1301,
    "warning_line": "            global_state.environment.active_account.storage[index] = data"
  },
  {
    "project": "ConsenSys/mythril",
    "commit": "b2b21431cd255c33fed711aee2d1d749b3968474",
    "filename": "mythril/laser/ethereum/instructions.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ConsenSys-mythril/mythril/laser/ethereum/instructions.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mythril/laser/ethereum/instructions.py:1357:42 Incompatible parameter type [6]: Expected `mythril.laser.smt.expression.Expression` for 1st positional only parameter to call `mythril.laser.smt.expression.simplify` but got `bool`.",
    "message": " Expected `mythril.laser.smt.expression.Expression` for 1st positional only parameter to call `mythril.laser.smt.expression.simplify` but got `bool`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1357,
    "warning_line": "                    else is_true(simplify(condition))",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                    if type(condition) == bool\n                    else is_true(simplify(condition))\n                )\n",
        "source_code_len": 119,
        "target_code": "                    if type(condition) == bool\n                    else is_true(simplify(cast(Bool, condition)))\n                )\n",
        "target_code_len": 131,
        "diff_format": "@@ -1356,3 +1365,3 @@\n                     if type(condition) == bool\n-                    else is_true(simplify(condition))\n+                    else is_true(simplify(cast(Bool, condition)))\n                 )\n",
        "source_code_with_indent": "                    if type(condition) == bool\n                    else is_true(simplify(condition))\n                )\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                    if type(condition) == bool\n                    else is_true(simplify(cast(Bool, condition)))\n                )\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ConsenSys/mythril",
    "commit": "b2b21431cd255c33fed711aee2d1d749b3968474",
    "filename": "mythril/laser/ethereum/instructions.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ConsenSys-mythril/mythril/laser/ethereum/instructions.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mythril/laser/ethereum/instructions.py:1374:30 Incompatible parameter type [6]: Expected `mythril.laser.smt.bool.Bool` for 2nd positional only parameter to call `mythril.laser.smt.bool.Or` but got `bool`.",
    "message": " Expected `mythril.laser.smt.bool.Bool` for 2nd positional only parameter to call `mythril.laser.smt.bool.Or` but got `bool`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1374,
    "warning_line": "                new = Or(new, key_argument != index_argument)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n                new = Or(new, key_argument != index_argument)\n\n",
        "source_code_len": 64,
        "target_code": "\n                new = Or(new, cast(Bool, key_argument != index_argument))\n\n",
        "target_code_len": 76,
        "diff_format": "@@ -1373,3 +1382,3 @@\n \n-                new = Or(new, key_argument != index_argument)\n+                new = Or(new, cast(Bool, key_argument != index_argument))\n \n",
        "source_code_with_indent": "\n                new = Or(new, key_argument != index_argument)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n                new = Or(new, cast(Bool, key_argument != index_argument))\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ConsenSys/mythril",
    "commit": "b2b21431cd255c33fed711aee2d1d749b3968474",
    "filename": "mythril/laser/ethereum/state/account.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ConsenSys-mythril/mythril/laser/ethereum/state/account.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mythril/laser/ethereum/state/account.py:40:73 Incompatible parameter type [6]: Expected `Union[_SupportsTrunc, bytes, str, typing.SupportsInt, typing_extensions.SupportsIndex]` for 1st positional only parameter to call `int.__new__` but got `Union[int, slice, str]`.",
    "message": " Expected `Union[_SupportsTrunc, bytes, str, typing.SupportsInt, typing_extensions.SupportsIndex]` for 1st positional only parameter to call `int.__new__` but got `Union[int, slice, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 40,
    "warning_line": "                                contract_address=self.address, index=int(item)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __getitem__(self, item: Union[str, int, slice]) -> Any:\n        try:\n",
        "source_code_len": 78,
        "target_code": "\n    def __getitem__(self, item: Union[str, int]) -> Any:\n        try:\n",
        "target_code_len": 71,
        "diff_format": "@@ -26,3 +26,3 @@\n \n-    def __getitem__(self, item: Union[str, int, slice]) -> Any:\n+    def __getitem__(self, item: Union[str, int]) -> Any:\n         try:\n",
        "source_code_with_indent": "\n    <DED>def __getitem__(self, item: Union[str, int, slice]) -> Any:\n        <IND>try:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def __getitem__(self, item: Union[str, int]) -> Any:\n        <IND>try:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]