[
  {
    "project": "python/mypy",
    "commit": "074dadac7ee7c32243e414391f33208e3932d6de",
    "filename": "mypy/nodes.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-mypy/mypy/nodes.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mypy/nodes.py:638:4 Incompatible attribute type [8]: Attribute `expr` declared in class `YieldStmt` has type `Node` but is used as type `None`.",
    "message": " Attribute `expr` declared in class `YieldStmt` has type `Node` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 638,
    "warning_line": "    expr = None  # type: Node",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "        return visitor.visit_assert_stmt(self)\n\n\nclass YieldStmt(Node):\n    expr = None  # type: Node\n\n    def __init__(self, expr: Node) -> None:\n        self.expr = expr\n\n    def accept(self, visitor: NodeVisitor[T]) -> T:\n        return visitor.visit_yield_stmt(self)\n\n\nclass YieldFromStmt(Node):\n    expr = None  # type: Node\n\n    def __init__(self, expr: Node) -> None:\n        self.expr = expr\n\n    def accept(self, visitor: NodeVisitor[T]) -> T:\n        return visitor.visit_yield_from_stmt(self)\n\n",
        "source_code_len": 505,
        "target_code": "        return visitor.visit_assert_stmt(self)\n\n",
        "target_code_len": 48,
        "diff_format": "@@ -634,22 +634,2 @@\n         return visitor.visit_assert_stmt(self)\n-\n-\n-class YieldStmt(Node):\n-    expr = None  # type: Node\n-\n-    def __init__(self, expr: Node) -> None:\n-        self.expr = expr\n-\n-    def accept(self, visitor: NodeVisitor[T]) -> T:\n-        return visitor.visit_yield_stmt(self)\n-\n-\n-class YieldFromStmt(Node):\n-    expr = None  # type: Node\n-\n-    def __init__(self, expr: Node) -> None:\n-        self.expr = expr\n-\n-    def accept(self, visitor: NodeVisitor[T]) -> T:\n-        return visitor.visit_yield_from_stmt(self)\n \n",
        "source_code_with_indent": "        <IND>return visitor.visit_assert_stmt(self)\n\n\n<DED><DED>class YieldStmt(Node):\n    <IND>expr = None  # type: Node\n\n    def __init__(self, expr: Node) -> None:\n        <IND>self.expr = expr\n\n    <DED>def accept(self, visitor: NodeVisitor[T]) -> T:\n        <IND>return visitor.visit_yield_stmt(self)\n\n\n<DED><DED>class YieldFromStmt(Node):\n    <IND>expr = None  # type: Node\n\n    def __init__(self, expr: Node) -> None:\n        <IND>self.expr = expr\n\n    <DED>def accept(self, visitor: NodeVisitor[T]) -> T:\n        <IND>return visitor.visit_yield_from_stmt(self)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>return visitor.visit_assert_stmt(self)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "python/mypy",
    "commit": "074dadac7ee7c32243e414391f33208e3932d6de",
    "filename": "mypy/nodes.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-mypy/mypy/nodes.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mypy/nodes.py:648:4 Incompatible attribute type [8]: Attribute `expr` declared in class `YieldFromStmt` has type `Node` but is used as type `None`.",
    "message": " Attribute `expr` declared in class `YieldFromStmt` has type `Node` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 648,
    "warning_line": "    expr = None  # type: Node",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "        return visitor.visit_assert_stmt(self)\n\n\nclass YieldStmt(Node):\n    expr = None  # type: Node\n\n    def __init__(self, expr: Node) -> None:\n        self.expr = expr\n\n    def accept(self, visitor: NodeVisitor[T]) -> T:\n        return visitor.visit_yield_stmt(self)\n\n\nclass YieldFromStmt(Node):\n    expr = None  # type: Node\n\n    def __init__(self, expr: Node) -> None:\n        self.expr = expr\n\n    def accept(self, visitor: NodeVisitor[T]) -> T:\n        return visitor.visit_yield_from_stmt(self)\n\n",
        "source_code_len": 505,
        "target_code": "        return visitor.visit_assert_stmt(self)\n\n",
        "target_code_len": 48,
        "diff_format": "@@ -634,22 +634,2 @@\n         return visitor.visit_assert_stmt(self)\n-\n-\n-class YieldStmt(Node):\n-    expr = None  # type: Node\n-\n-    def __init__(self, expr: Node) -> None:\n-        self.expr = expr\n-\n-    def accept(self, visitor: NodeVisitor[T]) -> T:\n-        return visitor.visit_yield_stmt(self)\n-\n-\n-class YieldFromStmt(Node):\n-    expr = None  # type: Node\n-\n-    def __init__(self, expr: Node) -> None:\n-        self.expr = expr\n-\n-    def accept(self, visitor: NodeVisitor[T]) -> T:\n-        return visitor.visit_yield_from_stmt(self)\n \n",
        "source_code_with_indent": "        <IND>return visitor.visit_assert_stmt(self)\n\n\n<DED><DED>class YieldStmt(Node):\n    <IND>expr = None  # type: Node\n\n    def __init__(self, expr: Node) -> None:\n        <IND>self.expr = expr\n\n    <DED>def accept(self, visitor: NodeVisitor[T]) -> T:\n        <IND>return visitor.visit_yield_stmt(self)\n\n\n<DED><DED>class YieldFromStmt(Node):\n    <IND>expr = None  # type: Node\n\n    def __init__(self, expr: Node) -> None:\n        <IND>self.expr = expr\n\n    <DED>def accept(self, visitor: NodeVisitor[T]) -> T:\n        <IND>return visitor.visit_yield_from_stmt(self)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>return visitor.visit_assert_stmt(self)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "python/mypy",
    "commit": "074dadac7ee7c32243e414391f33208e3932d6de",
    "filename": "mypy/parse.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-mypy/mypy/parse.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mypy/parse.py:969:25 Incompatible parameter type [6]: Expected `Node` for 1st positional only parameter to call `YieldStmt.__init__` but got `None`.",
    "message": " Expected `Node` for 1st positional only parameter to call `YieldStmt.__init__` but got `None`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 969,
    "warning_line": "        node = YieldStmt(expr)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "            stmt = self.parse_assert_stmt()\n        elif ts == 'yield':\n            stmt = self.parse_yield_stmt()\n        elif ts == 'del':\n",
        "source_code_len": 141,
        "target_code": "            stmt = self.parse_assert_stmt()\n        elif ts == 'del':\n",
        "target_code_len": 70,
        "diff_format": "@@ -881,4 +881,2 @@\n             stmt = self.parse_assert_stmt()\n-        elif ts == 'yield':\n-            stmt = self.parse_yield_stmt()\n         elif ts == 'del':\n",
        "source_code_with_indent": "            <IND>stmt = self.parse_assert_stmt()\n        <DED>elif ts == 'yield':\n            <IND>stmt = self.parse_yield_stmt()\n        <DED>elif ts == 'del':\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <IND>stmt = self.parse_assert_stmt()\n        <DED>elif ts == 'del':\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def parse_yield_stmt(self) -> Union[YieldStmt, YieldFromStmt]:\n        self.expect('yield')\n        expr = None\n        node = YieldStmt(expr)\n        if not isinstance(self.current(), Break):\n",
        "source_code_len": 198,
        "target_code": "\n    def parse_yield_or_yield_from_expr(self) -> Union[YieldFromExpr, YieldExpr]:\n        self.expect(\"yield\")\n        expr = None\n        node = YieldExpr(expr)  # type: Union[YieldFromExpr, YieldExpr]\n        if not isinstance(self.current(), Break):\n",
        "target_code_len": 253,
        "diff_format": "@@ -965,6 +963,6 @@\n \n-    def parse_yield_stmt(self) -> Union[YieldStmt, YieldFromStmt]:\n-        self.expect('yield')\n+    def parse_yield_or_yield_from_expr(self) -> Union[YieldFromExpr, YieldExpr]:\n+        self.expect(\"yield\")\n         expr = None\n-        node = YieldStmt(expr)\n+        node = YieldExpr(expr)  # type: Union[YieldFromExpr, YieldExpr]\n         if not isinstance(self.current(), Break):\n",
        "source_code_with_indent": "\n    <DED>def parse_yield_stmt(self) -> Union[YieldStmt, YieldFromStmt]:\n        <IND>self.expect('yield')\n        expr = None\n        node = YieldStmt(expr)\n        if not isinstance(self.current(), Break):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def parse_yield_or_yield_from_expr(self) -> Union[YieldFromExpr, YieldExpr]:\n        <IND>self.expect(\"yield\")\n        expr = None\n        node = YieldExpr(expr)  # type: Union[YieldFromExpr, YieldExpr]\n        if not isinstance(self.current(), Break):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "python/mypy",
    "commit": "074dadac7ee7c32243e414391f33208e3932d6de",
    "filename": "mypy/parse.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-mypy/mypy/parse.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mypy/parse.py:983:8 Incompatible variable type [9]: node is declared to have type `Union[YieldExpr, YieldFromExpr]` but is used as type `None`.",
    "message": " node is declared to have type `Union[YieldExpr, YieldFromExpr]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 983,
    "warning_line": "        node = None  # type: Union[YieldFromExpr, YieldExpr]",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "            stmt = self.parse_assert_stmt()\n        elif ts == 'yield':\n            stmt = self.parse_yield_stmt()\n        elif ts == 'del':\n",
        "source_code_len": 141,
        "target_code": "            stmt = self.parse_assert_stmt()\n        elif ts == 'del':\n",
        "target_code_len": 70,
        "diff_format": "@@ -881,4 +881,2 @@\n             stmt = self.parse_assert_stmt()\n-        elif ts == 'yield':\n-            stmt = self.parse_yield_stmt()\n         elif ts == 'del':\n",
        "source_code_with_indent": "            <IND>stmt = self.parse_assert_stmt()\n        <DED>elif ts == 'yield':\n            <IND>stmt = self.parse_yield_stmt()\n        <DED>elif ts == 'del':\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <IND>stmt = self.parse_assert_stmt()\n        <DED>elif ts == 'del':\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def parse_yield_stmt(self) -> Union[YieldStmt, YieldFromStmt]:\n        self.expect('yield')\n        expr = None\n        node = YieldStmt(expr)\n        if not isinstance(self.current(), Break):\n",
        "source_code_len": 198,
        "target_code": "\n    def parse_yield_or_yield_from_expr(self) -> Union[YieldFromExpr, YieldExpr]:\n        self.expect(\"yield\")\n        expr = None\n        node = YieldExpr(expr)  # type: Union[YieldFromExpr, YieldExpr]\n        if not isinstance(self.current(), Break):\n",
        "target_code_len": 253,
        "diff_format": "@@ -965,6 +963,6 @@\n \n-    def parse_yield_stmt(self) -> Union[YieldStmt, YieldFromStmt]:\n-        self.expect('yield')\n+    def parse_yield_or_yield_from_expr(self) -> Union[YieldFromExpr, YieldExpr]:\n+        self.expect(\"yield\")\n         expr = None\n-        node = YieldStmt(expr)\n+        node = YieldExpr(expr)  # type: Union[YieldFromExpr, YieldExpr]\n         if not isinstance(self.current(), Break):\n",
        "source_code_with_indent": "\n    <DED>def parse_yield_stmt(self) -> Union[YieldStmt, YieldFromStmt]:\n        <IND>self.expect('yield')\n        expr = None\n        node = YieldStmt(expr)\n        if not isinstance(self.current(), Break):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def parse_yield_or_yield_from_expr(self) -> Union[YieldFromExpr, YieldExpr]:\n        <IND>self.expect(\"yield\")\n        expr = None\n        node = YieldExpr(expr)  # type: Union[YieldFromExpr, YieldExpr]\n        if not isinstance(self.current(), Break):\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                self.expect(\"from\")\n                expr = self.parse_expression()  # Here comes when yield from is not assigned\n                node_from = YieldFromStmt(expr)\n                return node_from  # return here, we've gotted the type\n            else:\n                expr = self.parse_expression()\n                node = YieldStmt(expr)\n        return node\n\n    def parse_yield_or_yield_from_expr(self) -> Union[YieldFromExpr, YieldExpr]:\n        self.expect(\"yield\")\n        node = None  # type: Union[YieldFromExpr, YieldExpr]\n        if self.current_str() == \"from\":\n            self.expect(\"from\")\n            expr = self.parse_expression()  # Here comes when yield from is assigned to a variable\n            node = YieldFromExpr(expr)\n        else:\n            if self.current_str() == ')':\n                node = YieldExpr(None)\n            else:\n                expr = self.parse_expression()\n                node = YieldExpr(expr)\n        return node\n",
        "source_code_len": 974,
        "target_code": "                self.expect(\"from\")\n                expr = self.parse_expression()  # Here comes when yield from is assigned to a variable\n                node = YieldFromExpr(expr)\n            else:\n                if self.current_str() == ')':\n                    node = YieldExpr(None)\n                else:\n                    expr = self.parse_expression()\n                    node = YieldExpr(expr)\n        return node\n",
        "target_code_len": 425,
        "diff_format": "@@ -972,23 +970,10 @@\n                 self.expect(\"from\")\n-                expr = self.parse_expression()  # Here comes when yield from is not assigned\n-                node_from = YieldFromStmt(expr)\n-                return node_from  # return here, we've gotted the type\n+                expr = self.parse_expression()  # Here comes when yield from is assigned to a variable\n+                node = YieldFromExpr(expr)\n             else:\n-                expr = self.parse_expression()\n-                node = YieldStmt(expr)\n-        return node\n-\n-    def parse_yield_or_yield_from_expr(self) -> Union[YieldFromExpr, YieldExpr]:\n-        self.expect(\"yield\")\n-        node = None  # type: Union[YieldFromExpr, YieldExpr]\n-        if self.current_str() == \"from\":\n-            self.expect(\"from\")\n-            expr = self.parse_expression()  # Here comes when yield from is assigned to a variable\n-            node = YieldFromExpr(expr)\n-        else:\n-            if self.current_str() == ')':\n-                node = YieldExpr(None)\n-            else:\n-                expr = self.parse_expression()\n-                node = YieldExpr(expr)\n+                if self.current_str() == ')':\n+                    node = YieldExpr(None)\n+                else:\n+                    expr = self.parse_expression()\n+                    node = YieldExpr(expr)\n         return node\n",
        "source_code_with_indent": "                <IND>self.expect(\"from\")\n                expr = self.parse_expression()  # Here comes when yield from is not assigned\n                node_from = YieldFromStmt(expr)\n                return node_from  # return here, we've gotted the type\n            <DED>else:\n                <IND>expr = self.parse_expression()\n                node = YieldStmt(expr)\n        <DED><DED>return node\n\n    <DED>def parse_yield_or_yield_from_expr(self) -> Union[YieldFromExpr, YieldExpr]:\n        <IND>self.expect(\"yield\")\n        node = None  # type: Union[YieldFromExpr, YieldExpr]\n        if self.current_str() == \"from\":\n            <IND>self.expect(\"from\")\n            expr = self.parse_expression()  # Here comes when yield from is assigned to a variable\n            node = YieldFromExpr(expr)\n        <DED>else:\n            <IND>if self.current_str() == ')':\n                <IND>node = YieldExpr(None)\n            <DED>else:\n                <IND>expr = self.parse_expression()\n                node = YieldExpr(expr)\n        <DED><DED>return node\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                <IND>self.expect(\"from\")\n                expr = self.parse_expression()  # Here comes when yield from is assigned to a variable\n                node = YieldFromExpr(expr)\n            <DED>else:\n                <IND>if self.current_str() == ')':\n                    <IND>node = YieldExpr(None)\n                <DED>else:\n                    <IND>expr = self.parse_expression()\n                    node = YieldExpr(expr)\n        <DED><DED><DED>return node\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "python/mypy",
    "commit": "074dadac7ee7c32243e414391f33208e3932d6de",
    "filename": "mypy/semanal.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-mypy/mypy/semanal.py",
    "file_hunks_size": 5,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mypy/semanal.py:1507:4 Inconsistent override [14]: `mypy.semanal.SemanticAnalyzer.visit_yield_stmt` overrides method defined in `NodeVisitor` inconsistently. Could not find parameter `o` in overriding signature.",
    "message": " `mypy.semanal.SemanticAnalyzer.visit_yield_stmt` overrides method defined in `NodeVisitor` inconsistently. Could not find parameter `o` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 1507,
    "warning_line": "    def visit_yield_stmt(self, s: YieldStmt) -> None:"
  },
  {
    "project": "python/mypy",
    "commit": "074dadac7ee7c32243e414391f33208e3932d6de",
    "filename": "mypy/semanal.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-mypy/mypy/semanal.py",
    "file_hunks_size": 5,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mypy/semanal.py:1515:4 Inconsistent override [14]: `mypy.semanal.SemanticAnalyzer.visit_yield_from_stmt` overrides method defined in `NodeVisitor` inconsistently. Could not find parameter `o` in overriding signature.",
    "message": " `mypy.semanal.SemanticAnalyzer.visit_yield_from_stmt` overrides method defined in `NodeVisitor` inconsistently. Could not find parameter `o` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 1515,
    "warning_line": "    def visit_yield_from_stmt(self, s: YieldFromStmt) -> None:"
  },
  {
    "project": "python/mypy",
    "commit": "074dadac7ee7c32243e414391f33208e3932d6de",
    "filename": "mypy/traverser.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-mypy/mypy/traverser.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mypy/traverser.py:224:8 Incompatible return type [7]: Expected `Variable[T]` but got implicit return value of `None`.",
    "message": " Expected `Variable[T]` but got implicit return value of `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 224,
    "warning_line": "        o.expr.accept(self)"
  },
  {
    "project": "python/mypy",
    "commit": "074dadac7ee7c32243e414391f33208e3932d6de",
    "filename": "mypy/traverser.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-mypy/mypy/traverser.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mypy/traverser.py:227:8 Incompatible return type [7]: Expected `Variable[T]` but got implicit return value of `None`.",
    "message": " Expected `Variable[T]` but got implicit return value of `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 227,
    "warning_line": "        self.visit_func(o)"
  },
  {
    "project": "python/mypy",
    "commit": "074dadac7ee7c32243e414391f33208e3932d6de",
    "filename": "mypy/treetransform.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-mypy/mypy/treetransform.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mypy/treetransform.py:243:4 Inconsistent override [14]: `mypy.treetransform.TransformVisitor.visit_yield_stmt` overrides method defined in `NodeVisitor` inconsistently. Could not find parameter `o` in overriding signature.",
    "message": " `mypy.treetransform.TransformVisitor.visit_yield_stmt` overrides method defined in `NodeVisitor` inconsistently. Could not find parameter `o` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 243,
    "warning_line": "    def visit_yield_stmt(self, node: YieldStmt) -> Node:"
  },
  {
    "project": "python/mypy",
    "commit": "074dadac7ee7c32243e414391f33208e3932d6de",
    "filename": "mypy/treetransform.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-mypy/mypy/treetransform.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mypy/treetransform.py:246:4 Inconsistent override [14]: `mypy.treetransform.TransformVisitor.visit_yield_from_stmt` overrides method defined in `NodeVisitor` inconsistently. Could not find parameter `o` in overriding signature.",
    "message": " `mypy.treetransform.TransformVisitor.visit_yield_from_stmt` overrides method defined in `NodeVisitor` inconsistently. Could not find parameter `o` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 246,
    "warning_line": "    def visit_yield_from_stmt(self, node: YieldFromStmt) -> Node:"
  }
]