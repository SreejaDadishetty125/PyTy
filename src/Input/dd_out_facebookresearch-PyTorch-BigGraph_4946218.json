[
  {
    "project": "facebookresearch/PyTorch-BigGraph",
    "commit": "494621838606d5a17a103ee18fbc5f9acbcaf1d3",
    "filename": "torchbiggraph/config.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/facebookresearch-PyTorch-BigGraph/torchbiggraph/config.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "torchbiggraph/config.py:508:4 Incompatible variable type [9]: overrides is declared to have type `Optional[List[List[str]]]` but is used as type `typing.Iterator[typing.Any]`.",
    "message": " overrides is declared to have type `Optional[List[List[str]]]` but is used as type `typing.Iterator[typing.Any]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 508,
    "warning_line": "    overrides = chain.from_iterable(overrides)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def override_config_dict(config_dict: Any, overrides: Optional[List[List[str]]]) -> Any:\n    if overrides is None:\n        overrides = []\n    overrides = chain.from_iterable(overrides)\n    for override in overrides:\n        try:\n",
        "source_code_len": 229,
        "target_code": "def override_config_dict(config_dict: Any, overrides: Optional[List[List[str]]]) -> Any:\n    for override in chain.from_iterable(overrides or ()):\n        try:\n",
        "target_code_len": 160,
        "diff_format": "@@ -505,6 +505,3 @@\n def override_config_dict(config_dict: Any, overrides: Optional[List[List[str]]]) -> Any:\n-    if overrides is None:\n-        overrides = []\n-    overrides = chain.from_iterable(overrides)\n-    for override in overrides:\n+    for override in chain.from_iterable(overrides or ()):\n         try:\n",
        "source_code_with_indent": "<DED><DED><DED>def override_config_dict(config_dict: Any, overrides: Optional[List[List[str]]]) -> Any:\n    <IND>if overrides is None:\n        <IND>overrides = []\n    <DED>overrides = chain.from_iterable(overrides)\n    for override in overrides:\n        <IND>try:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED><DED><DED>def override_config_dict(config_dict: Any, overrides: Optional[List[List[str]]]) -> Any:\n    <IND>for override in chain.from_iterable(overrides or ()):\n        <IND>try:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "facebookresearch/PyTorch-BigGraph",
    "commit": "494621838606d5a17a103ee18fbc5f9acbcaf1d3",
    "filename": "torchbiggraph/converters/importers.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/facebookresearch-PyTorch-BigGraph/torchbiggraph/converters/importers.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "torchbiggraph/converters/importers.py:407:4 Incompatible return type [7]: Expected `Tuple[Dict[str, EntitySchema], List[RelationSchema], str, bool]` but got `Tuple[Dict[typing.Any, typing.Any], List[typing.Any], str, List[typing.Any], bool]`.",
    "message": " Expected `Tuple[Dict[str, EntitySchema], List[RelationSchema], str, bool]` but got `Tuple[Dict[typing.Any, typing.Any], List[typing.Any], str, List[typing.Any], bool]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 407,
    "warning_line": "    return entities, relations, entity_path, edge_paths, dynamic_relations",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    config_dict: Any,\n) -> Tuple[Dict[str, EntitySchema], List[RelationSchema], str, bool]:\n    entities_config = config_dict.get(\"entities\")\n",
        "source_code_len": 142,
        "target_code": "    config_dict: Any,\n) -> Tuple[Dict[str, EntitySchema], List[RelationSchema], str, List[str], bool]:\n    entities_config = config_dict.get(\"entities\")\n",
        "target_code_len": 153,
        "diff_format": "@@ -378,3 +380,3 @@\n     config_dict: Any,\n-) -> Tuple[Dict[str, EntitySchema], List[RelationSchema], str, bool]:\n+) -> Tuple[Dict[str, EntitySchema], List[RelationSchema], str, List[str], bool]:\n     entities_config = config_dict.get(\"entities\")\n",
        "source_code_with_indent": "    config_dict: Any,\n) -> Tuple[Dict[str, EntitySchema], List[RelationSchema], str, bool]:\n    <IND>entities_config = config_dict.get(\"entities\")\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    config_dict: Any,\n) -> Tuple[Dict[str, EntitySchema], List[RelationSchema], str, List[str], bool]:\n    <IND>entities_config = config_dict.get(\"entities\")\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "facebookresearch/PyTorch-BigGraph",
    "commit": "494621838606d5a17a103ee18fbc5f9acbcaf1d3",
    "filename": "torchbiggraph/converters/utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/facebookresearch-PyTorch-BigGraph/torchbiggraph/converters/utils.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "torchbiggraph/converters/utils.py:32:8 Incompatible return type [7]: Expected `str` but got `Path`.",
    "message": " Expected `str` but got `Path`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 32,
    "warning_line": "        return fpath",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef extract_gzip(gzip_path: Path, remove_finished: bool = False) -> str:\n    print(f\"Extracting {gzip_path}\")\n",
        "source_code_len": 111,
        "target_code": "\ndef extract_gzip(gzip_path: Path, remove_finished: bool = False) -> Path:\n    print(f\"Extracting {gzip_path}\")\n",
        "target_code_len": 112,
        "diff_format": "@@ -19,3 +19,3 @@\n \n-def extract_gzip(gzip_path: Path, remove_finished: bool = False) -> str:\n+def extract_gzip(gzip_path: Path, remove_finished: bool = False) -> Path:\n     print(f\"Extracting {gzip_path}\")\n",
        "source_code_with_indent": "\ndef extract_gzip(gzip_path: Path, remove_finished: bool = False) -> str:\n    <IND>print(f\"Extracting {gzip_path}\")\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\ndef extract_gzip(gzip_path: Path, remove_finished: bool = False) -> Path:\n    <IND>print(f\"Extracting {gzip_path}\")\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "facebookresearch/PyTorch-BigGraph",
    "commit": "494621838606d5a17a103ee18fbc5f9acbcaf1d3",
    "filename": "torchbiggraph/converters/utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/facebookresearch-PyTorch-BigGraph/torchbiggraph/converters/utils.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "torchbiggraph/converters/utils.py:39:4 Incompatible return type [7]: Expected `str` but got `Path`.",
    "message": " Expected `str` but got `Path`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 39,
    "warning_line": "    return fpath",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef extract_gzip(gzip_path: Path, remove_finished: bool = False) -> str:\n    print(f\"Extracting {gzip_path}\")\n",
        "source_code_len": 111,
        "target_code": "\ndef extract_gzip(gzip_path: Path, remove_finished: bool = False) -> Path:\n    print(f\"Extracting {gzip_path}\")\n",
        "target_code_len": 112,
        "diff_format": "@@ -19,3 +19,3 @@\n \n-def extract_gzip(gzip_path: Path, remove_finished: bool = False) -> str:\n+def extract_gzip(gzip_path: Path, remove_finished: bool = False) -> Path:\n     print(f\"Extracting {gzip_path}\")\n",
        "source_code_with_indent": "\ndef extract_gzip(gzip_path: Path, remove_finished: bool = False) -> str:\n    <IND>print(f\"Extracting {gzip_path}\")\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\ndef extract_gzip(gzip_path: Path, remove_finished: bool = False) -> Path:\n    <IND>print(f\"Extracting {gzip_path}\")\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "facebookresearch/PyTorch-BigGraph",
    "commit": "494621838606d5a17a103ee18fbc5f9acbcaf1d3",
    "filename": "torchbiggraph/converters/utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/facebookresearch-PyTorch-BigGraph/torchbiggraph/converters/utils.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "torchbiggraph/converters/utils.py:88:4 Incompatible return type [7]: Expected `str` but got `Path`.",
    "message": " Expected `str` but got `Path`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 88,
    "warning_line": "    return fpath",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef download_url(url: str, root: Path, filename: Optional[str] = None) -> str:\n    \"\"\"Download a file from a url and place it in root.\n",
        "source_code_len": 136,
        "target_code": "\ndef download_url(url: str, root: Path, filename: Optional[str] = None) -> Path:\n    \"\"\"Download a file from a url and place it in root.\n",
        "target_code_len": 137,
        "diff_format": "@@ -57,3 +57,3 @@\n \n-def download_url(url: str, root: Path, filename: Optional[str] = None) -> str:\n+def download_url(url: str, root: Path, filename: Optional[str] = None) -> Path:\n     \"\"\"Download a file from a url and place it in root.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>def download_url(url: str, root: Path, filename: Optional[str] = None) -> str:\n    <IND>",
        "target_code_with_indent": "\n<DED>def download_url(url: str, root: Path, filename: Optional[str] = None) -> Path:\n    <IND>"
      }
    ]
  },
  {
    "project": "facebookresearch/PyTorch-BigGraph",
    "commit": "494621838606d5a17a103ee18fbc5f9acbcaf1d3",
    "filename": "torchbiggraph/graph_storages.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/facebookresearch-PyTorch-BigGraph/torchbiggraph/graph_storages.py",
    "file_hunks_size": 17,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "torchbiggraph/graph_storages.py:227:8 Incompatible return type [7]: Expected `None` but got `bool`.",
    "message": " Expected `None` but got `bool`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 227,
    "warning_line": "        return self.get_count_file().is_file()",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @abstractmethod\n    def has_count(self) -> None:\n        pass\n",
        "source_code_len": 66,
        "target_code": "    @abstractmethod\n    def has_count(self) -> bool:\n        pass\n",
        "target_code_len": 66,
        "diff_format": "@@ -74,3 +77,3 @@\n     @abstractmethod\n-    def has_count(self) -> None:\n+    def has_count(self) -> bool:\n         pass\n",
        "source_code_with_indent": "    <DED>@abstractmethod\n    def has_count(self) -> None:\n        <IND>pass\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@abstractmethod\n    def has_count(self) -> bool:\n        <IND>pass\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def has_count(self) -> None:\n        return self.get_count_file().is_file()\n",
        "source_code_len": 81,
        "target_code": "\n    def has_count(self) -> bool:\n        return self.get_count_file().is_file()\n",
        "target_code_len": 81,
        "diff_format": "@@ -225,3 +230,3 @@\n \n-    def has_count(self) -> None:\n+    def has_count(self) -> bool:\n         return self.get_count_file().is_file()\n",
        "source_code_with_indent": "\n    <DED>def has_count(self) -> None:\n        <IND>return self.get_count_file().is_file()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def has_count(self) -> bool:\n        <IND>return self.get_count_file().is_file()\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "facebookresearch/PyTorch-BigGraph",
    "commit": "494621838606d5a17a103ee18fbc5f9acbcaf1d3",
    "filename": "torchbiggraph/graph_storages.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/facebookresearch-PyTorch-BigGraph/torchbiggraph/graph_storages.py",
    "file_hunks_size": 17,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "torchbiggraph/graph_storages.py:348:4 Inconsistent override [14]: `torchbiggraph.graph_storages.FileEdgeAppender.append_edges` overrides method defined in `AbstractEdgeAppender` inconsistently. Could not find parameter `edges` in overriding signature.",
    "message": " `torchbiggraph.graph_storages.FileEdgeAppender.append_edges` overrides method defined in `AbstractEdgeAppender` inconsistently. Could not find parameter `edges` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 348,
    "warning_line": "    def append_edges(self, edgelist: EdgeList) -> None:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @abstractmethod\n    def append_edges(self, edges: EdgeList) -> None:\n        pass\n",
        "source_code_len": 86,
        "target_code": "    @abstractmethod\n    def append_edges(self, edgelist: EdgeList) -> None:\n        pass\n",
        "target_code_len": 89,
        "diff_format": "@@ -100,3 +103,3 @@\n     @abstractmethod\n-    def append_edges(self, edges: EdgeList) -> None:\n+    def append_edges(self, edgelist: EdgeList) -> None:\n         pass\n",
        "source_code_with_indent": "    <IND>@abstractmethod\n    def append_edges(self, edges: EdgeList) -> None:\n        <IND>pass\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <IND>@abstractmethod\n    def append_edges(self, edgelist: EdgeList) -> None:\n        <IND>pass\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "facebookresearch/PyTorch-BigGraph",
    "commit": "494621838606d5a17a103ee18fbc5f9acbcaf1d3",
    "filename": "torchbiggraph/graph_storages.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/facebookresearch-PyTorch-BigGraph/torchbiggraph/graph_storages.py",
    "file_hunks_size": 17,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "torchbiggraph/graph_storages.py:477:12 Incompatible return type [7]: Expected `ContextManager[AbstractEdgeAppender]` but got `typing.Generator[FileEdgeAppender, None, None]`.",
    "message": " Expected `ContextManager[AbstractEdgeAppender]` but got `typing.Generator[FileEdgeAppender, None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 477,
    "warning_line": "            yield appender",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from types import TracebackType\nfrom typing import ContextManager, Dict, List, Optional, Type\n\n",
        "source_code_len": 95,
        "target_code": "from types import TracebackType\nfrom typing import ContextManager, Dict, Iterator, List, Optional, Type\n\n",
        "target_code_len": 105,
        "diff_format": "@@ -15,3 +15,3 @@\n from types import TracebackType\n-from typing import ContextManager, Dict, List, Optional, Type\n+from typing import ContextManager, Dict, Iterator, List, Optional, Type\n \n",
        "source_code_with_indent": "from types import TracebackType\nfrom typing import ContextManager, Dict, List, Optional, Type\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from types import TracebackType\nfrom typing import ContextManager, Dict, Iterator, List, Optional, Type\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from torchbiggraph.tensorlist import TensorList\nfrom torchbiggraph.util import CouldNotLoadData, allocate_shared_tensor, div_roundup\n",
        "source_code_len": 133,
        "target_code": "from torchbiggraph.tensorlist import TensorList\nfrom torchbiggraph.types import Partition\nfrom torchbiggraph.util import CouldNotLoadData, allocate_shared_tensor, div_roundup\n",
        "target_code_len": 175,
        "diff_format": "@@ -24,2 +24,3 @@\n from torchbiggraph.tensorlist import TensorList\n+from torchbiggraph.types import Partition\n from torchbiggraph.util import CouldNotLoadData, allocate_shared_tensor, div_roundup\n",
        "source_code_with_indent": "from torchbiggraph.tensorlist import TensorList\nfrom torchbiggraph.util import CouldNotLoadData, allocate_shared_tensor, div_roundup\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from torchbiggraph.tensorlist import TensorList\nfrom torchbiggraph.types import Partition\nfrom torchbiggraph.util import CouldNotLoadData, allocate_shared_tensor, div_roundup\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @abstractmethod\n    def has_count(self) -> None:\n        pass\n",
        "source_code_len": 66,
        "target_code": "    @abstractmethod\n    def has_count(self) -> bool:\n        pass\n",
        "target_code_len": 66,
        "diff_format": "@@ -74,3 +77,3 @@\n     @abstractmethod\n-    def has_count(self) -> None:\n+    def has_count(self) -> bool:\n         pass\n",
        "source_code_with_indent": "    <DED>@abstractmethod\n    def has_count(self) -> None:\n        <IND>pass\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@abstractmethod\n    def has_count(self) -> bool:\n        <IND>pass\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def has_count(self) -> None:\n        return self.get_count_file().is_file()\n",
        "source_code_len": 81,
        "target_code": "\n    def has_count(self) -> bool:\n        return self.get_count_file().is_file()\n",
        "target_code_len": 81,
        "diff_format": "@@ -225,3 +230,3 @@\n \n-    def has_count(self) -> None:\n+    def has_count(self) -> bool:\n         return self.get_count_file().is_file()\n",
        "source_code_with_indent": "\n    <DED>def has_count(self) -> None:\n        <IND>return self.get_count_file().is_file()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def has_count(self) -> bool:\n        <IND>return self.get_count_file().is_file()\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def save_edges_by_appending(\n        self, lhs_p: int, rhs_p: int\n    ) -> ContextManager[AbstractEdgeAppender]:\n        file_path = self.get_edges_file(lhs_p, rhs_p)\n",
        "source_code_len": 171,
        "target_code": "    def save_edges_by_appending(\n        self, lhs_p: Partition, rhs_p: Partition\n    ) -> Iterator[AbstractEdgeAppender]:\n        file_path = self.get_edges_file(lhs_p, rhs_p)\n",
        "target_code_len": 177,
        "diff_format": "@@ -468,4 +473,4 @@\n     def save_edges_by_appending(\n-        self, lhs_p: int, rhs_p: int\n-    ) -> ContextManager[AbstractEdgeAppender]:\n+        self, lhs_p: Partition, rhs_p: Partition\n+    ) -> Iterator[AbstractEdgeAppender]:\n         file_path = self.get_edges_file(lhs_p, rhs_p)\n",
        "source_code_with_indent": "    def save_edges_by_appending(\n        self, lhs_p: int, rhs_p: int\n    ) -> ContextManager[AbstractEdgeAppender]:\n        <IND>file_path = self.get_edges_file(lhs_p, rhs_p)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def save_edges_by_appending(\n        self, lhs_p: Partition, rhs_p: Partition\n    ) -> Iterator[AbstractEdgeAppender]:\n        <IND>file_path = self.get_edges_file(lhs_p, rhs_p)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "facebookresearch/PyTorch-BigGraph",
    "commit": "494621838606d5a17a103ee18fbc5f9acbcaf1d3",
    "filename": "torchbiggraph/partitionserver.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/facebookresearch-PyTorch-BigGraph/torchbiggraph/partitionserver.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "torchbiggraph/partitionserver.py:71:8 Incompatible parameter type [6]: Expected `Optional[List[int]]` for 2nd parameter `group_idxs` to call `ParameterServer.__init__` but got `range`.",
    "message": " Expected `Optional[List[int]]` for 2nd parameter `group_idxs` to call `ParameterServer.__init__` but got `range`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 71,
    "warning_line": "        group_idxs=group_idxs_for_partition_servers,"
  },
  {
    "project": "facebookresearch/PyTorch-BigGraph",
    "commit": "494621838606d5a17a103ee18fbc5f9acbcaf1d3",
    "filename": "torchbiggraph/train.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/facebookresearch-PyTorch-BigGraph/torchbiggraph/train.py",
    "file_hunks_size": 15,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "torchbiggraph/train.py:409:24 Incompatible parameter type [6]: Expected `Optional[List[int]]` for 2nd parameter `group_idxs` to call `ParameterServer.__init__` but got `range`.",
    "message": " Expected `Optional[List[int]]` for 2nd parameter `group_idxs` to call `ParameterServer.__init__` but got `range`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 409,
    "warning_line": "                        group_idxs=group_idxs_for_partition_servers,"
  },
  {
    "project": "facebookresearch/PyTorch-BigGraph",
    "commit": "494621838606d5a17a103ee18fbc5f9acbcaf1d3",
    "filename": "torchbiggraph/util.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/facebookresearch-PyTorch-BigGraph/torchbiggraph/util.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "torchbiggraph/util.py:65:4 Inconsistent override [14]: `torchbiggraph.util.BucketLogger.process` overrides method defined in `logging.LoggerAdapter` inconsistently. Parameter of type `Dict[str, typing.Any]` is not a supertype of the overridden parameter `typing.MutableMapping[str, typing.Any]`.",
    "message": " `torchbiggraph.util.BucketLogger.process` overrides method defined in `logging.LoggerAdapter` inconsistently. Parameter of type `Dict[str, typing.Any]` is not a supertype of the overridden parameter `typing.MutableMapping[str, typing.Any]`.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 65,
    "warning_line": "    def process(self, msg: str, kwargs: Dict[str, Any]) -> Tuple[str, Dict[str, Any]]:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from functools import partial\nfrom typing import Any, Callable, Dict, Iterable, List, Optional, Set, Tuple, TypeVar\n\n",
        "source_code_len": 117,
        "target_code": "from functools import partial\nfrom typing import (\n    Any,\n    Callable,\n    Dict,\n    Iterable,\n    List,\n    Mapping,\n    MutableMapping,\n    Optional,\n    Set,\n    Tuple,\n    TypeVar,\n)\n\n",
        "target_code_len": 191,
        "diff_format": "@@ -16,3 +16,15 @@\n from functools import partial\n-from typing import Any, Callable, Dict, Iterable, List, Optional, Set, Tuple, TypeVar\n+from typing import (\n+    Any,\n+    Callable,\n+    Dict,\n+    Iterable,\n+    List,\n+    Mapping,\n+    MutableMapping,\n+    Optional,\n+    Set,\n+    Tuple,\n+    TypeVar,\n+)\n \n",
        "source_code_with_indent": "from functools import partial\nfrom typing import Any, Callable, Dict, Iterable, List, Optional, Set, Tuple, TypeVar\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from functools import partial\nfrom typing import (\n    Any,\n    Callable,\n    Dict,\n    Iterable,\n    List,\n    Mapping,\n    MutableMapping,\n    Optional,\n    Set,\n    Tuple,\n    TypeVar,\n)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def process(self, msg: str, kwargs: Dict[str, Any]) -> Tuple[str, Dict[str, Any]]:\n        bucket: Bucket = self.extra[\"bucket\"]\n",
        "source_code_len": 134,
        "target_code": "\n    def process(\n        self, msg: str, kwargs: MutableMapping[str, Any]\n    ) -> Tuple[str, MutableMapping[str, Any]]:\n        bucket: Bucket = self.extra[\"bucket\"]\n",
        "target_code_len": 168,
        "diff_format": "@@ -64,3 +76,5 @@\n \n-    def process(self, msg: str, kwargs: Dict[str, Any]) -> Tuple[str, Dict[str, Any]]:\n+    def process(\n+        self, msg: str, kwargs: MutableMapping[str, Any]\n+    ) -> Tuple[str, MutableMapping[str, Any]]:\n         bucket: Bucket = self.extra[\"bucket\"]\n",
        "source_code_with_indent": "\n    <DED>def process(self, msg: str, kwargs: Dict[str, Any]) -> Tuple[str, Dict[str, Any]]:\n        <IND>bucket: Bucket = self.extra[\"bucket\"]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def process(\n        self, msg: str, kwargs: MutableMapping[str, Any]\n    ) -> Tuple[str, MutableMapping[str, Any]]:\n        <IND>bucket: Bucket = self.extra[\"bucket\"]\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]