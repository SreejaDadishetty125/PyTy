[
  {
    "project": "missionpinball/mpf",
    "commit": "4dbcd2cdbc16939332b76efdfeb1ae3a0ede0278",
    "filename": "mpf/assets/show.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/missionpinball-mpf/mpf/assets/show.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mpf/assets/show.py:135:40 Incompatible parameter type [6]: Expected `typing.Iterable[Variable[_T]]` for 1st positional only parameter to call `enumerate.__init__` but got `Optional[Dict[typing.Any, typing.Any]]`.",
    "message": " Expected `typing.Iterable[Variable[_T]]` for 1st positional only parameter to call `enumerate.__init__` but got `Optional[Dict[typing.Any, typing.Any]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 135,
    "warning_line": "        for step_num, step in enumerate(data):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from mpf.exceptions.config_file_error import ConfigFileError\n\n",
        "source_code_len": 62,
        "target_code": "from mpf.exceptions.config_file_error import ConfigFileError\n\nMYPY = False\nif MYPY:   # pragma: no cover\n    from typing import NoReturn     # pylint: disable-msg=cyclic-import,unused-import\n\n",
        "target_code_len": 192,
        "diff_format": "@@ -10,2 +10,6 @@\n from mpf.exceptions.config_file_error import ConfigFileError\n+\n+MYPY = False\n+if MYPY:   # pragma: no cover\n+    from typing import NoReturn     # pylint: disable-msg=cyclic-import,unused-import\n \n",
        "source_code_with_indent": "from mpf.exceptions.config_file_error import ConfigFileError\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from mpf.exceptions.config_file_error import ConfigFileError\n\nMYPY = False\nif MYPY:   # pragma: no cover\n    <IND>from typing import NoReturn     # pylint: disable-msg=cyclic-import,unused-import\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _show_validation_error(self, msg, error_code):  # pragma: no cover\n        raise ConfigFileError(\"Show {}: {}\".format(self.name, msg), error_code, \"show\", self.name)\n",
        "source_code_len": 175,
        "target_code": "\n    def _show_validation_error(self, msg, error_code) -> \"NoReturn\":  # pragma: no cover\n        raise ConfigFileError(\"Show {}: {}\".format(self.name, msg), error_code, \"show\", self.name)\n",
        "target_code_len": 189,
        "diff_format": "@@ -177,3 +181,3 @@\n \n-    def _show_validation_error(self, msg, error_code):  # pragma: no cover\n+    def _show_validation_error(self, msg, error_code) -> \"NoReturn\":  # pragma: no cover\n         raise ConfigFileError(\"Show {}: {}\".format(self.name, msg), error_code, \"show\", self.name)\n",
        "source_code_with_indent": "\n    <DED>def _show_validation_error(self, msg, error_code):  # pragma: no cover\n        <IND>raise ConfigFileError(\"Show {}: {}\".format(self.name, msg), error_code, \"show\", self.name)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def _show_validation_error(self, msg, error_code) -> \"NoReturn\":  # pragma: no cover\n        <IND>raise ConfigFileError(\"Show {}: {}\".format(self.name, msg), error_code, \"show\", self.name)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "missionpinball/mpf",
    "commit": "4dbcd2cdbc16939332b76efdfeb1ae3a0ede0278",
    "filename": "mpf/core/delays.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/missionpinball-mpf/mpf/core/delays.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mpf/core/delays.py:144:24 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `DelayManager.remove` but got `Union[str, uuid.UUID]`.",
    "message": " Expected `str` for 1st positional only parameter to call `DelayManager.remove` but got `Union[str, uuid.UUID]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 144,
    "warning_line": "            self.remove(name)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def reset(self, ms: int, callback: Callable[..., None], name: Union[str, uuid.UUID],\n              **kwargs) -> str:\n",
        "source_code_len": 122,
        "target_code": "\n    def reset(self, ms: int, callback: Callable[..., None], name: str,\n              **kwargs) -> str:\n",
        "target_code_len": 104,
        "diff_format": "@@ -120,3 +120,3 @@\n \n-    def reset(self, ms: int, callback: Callable[..., None], name: Union[str, uuid.UUID],\n+    def reset(self, ms: int, callback: Callable[..., None], name: str,\n               **kwargs) -> str:\n",
        "source_code_with_indent": "\n    <DED>def reset(self, ms: int, callback: Callable[..., None], name: Union[str, uuid.UUID],\n              **kwargs) -> str:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def reset(self, ms: int, callback: Callable[..., None], name: str,\n              **kwargs) -> str:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "missionpinball/mpf",
    "commit": "4dbcd2cdbc16939332b76efdfeb1ae3a0ede0278",
    "filename": "mpf/core/delays.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/missionpinball-mpf/mpf/core/delays.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mpf/core/delays.py:146:38 Incompatible parameter type [6]: Expected `str` for 3rd positional only parameter to call `DelayManager.add` but got `Union[str, uuid.UUID]`.",
    "message": " Expected `str` for 3rd positional only parameter to call `DelayManager.add` but got `Union[str, uuid.UUID]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 146,
    "warning_line": "        return self.add(ms, callback, name, **kwargs)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def reset(self, ms: int, callback: Callable[..., None], name: Union[str, uuid.UUID],\n              **kwargs) -> str:\n",
        "source_code_len": 122,
        "target_code": "\n    def reset(self, ms: int, callback: Callable[..., None], name: str,\n              **kwargs) -> str:\n",
        "target_code_len": 104,
        "diff_format": "@@ -120,3 +120,3 @@\n \n-    def reset(self, ms: int, callback: Callable[..., None], name: Union[str, uuid.UUID],\n+    def reset(self, ms: int, callback: Callable[..., None], name: str,\n               **kwargs) -> str:\n",
        "source_code_with_indent": "\n    <DED>def reset(self, ms: int, callback: Callable[..., None], name: Union[str, uuid.UUID],\n              **kwargs) -> str:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def reset(self, ms: int, callback: Callable[..., None], name: str,\n              **kwargs) -> str:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "missionpinball/mpf",
    "commit": "4dbcd2cdbc16939332b76efdfeb1ae3a0ede0278",
    "filename": "mpf/core/device.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/missionpinball-mpf/mpf/core/device.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mpf/core/device.py:44:8 Incompatible attribute type [8]: Attribute `platform` declared in class `Device` has type `SmartVirtualHardwarePlatform` but is used as type `None`.",
    "message": " Attribute `platform` declared in class `Device` has type `SmartVirtualHardwarePlatform` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 44,
    "warning_line": "        self.platform = None    # type: SmartVirtualHardwarePlatform",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import List, Any\n\n",
        "source_code_len": 31,
        "target_code": "\nfrom typing import List, Any, Optional\n\n",
        "target_code_len": 41,
        "diff_format": "@@ -3,3 +3,3 @@\n \n-from typing import List, Any\n+from typing import List, Any, Optional\n \n",
        "source_code_with_indent": "\nfrom typing import List, Any\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import List, Any, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    from mpf.core.mode import Mode      # pylint: disable-msg=cyclic-import,unused-import\n    from mpf.platforms.smart_virtual import SmartVirtualHardwarePlatform    # pylint: disable-msg=cyclic-import,unused-import; # noqa\n\n",
        "source_code_len": 225,
        "target_code": "    from mpf.core.mode import Mode      # pylint: disable-msg=cyclic-import,unused-import\n    from mpf.core.platform import BasePlatform    # pylint: disable-msg=cyclic-import,unused-import; # noqa\n\n",
        "target_code_len": 199,
        "diff_format": "@@ -11,3 +11,3 @@\n     from mpf.core.mode import Mode      # pylint: disable-msg=cyclic-import,unused-import\n-    from mpf.platforms.smart_virtual import SmartVirtualHardwarePlatform    # pylint: disable-msg=cyclic-import,unused-import; # noqa\n+    from mpf.core.platform import BasePlatform    # pylint: disable-msg=cyclic-import,unused-import; # noqa\n \n",
        "source_code_with_indent": "    <IND>from mpf.core.mode import Mode      # pylint: disable-msg=cyclic-import,unused-import\n    from mpf.platforms.smart_virtual import SmartVirtualHardwarePlatform    # pylint: disable-msg=cyclic-import,unused-import; # noqa\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <IND>from mpf.core.mode import Mode      # pylint: disable-msg=cyclic-import,unused-import\n    from mpf.core.platform import BasePlatform    # pylint: disable-msg=cyclic-import,unused-import; # noqa\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self.tags = []          # type: List[str]\n        self.platform = None    # type: SmartVirtualHardwarePlatform\n        \"\"\"List of tags applied to this device.\"\"\"\n\n        self.label = None       # type: str\n        self.config = dict()    # type: Any\n",
        "source_code_len": 259,
        "target_code": "        self.tags = []          # type: List[str]\n        self.platform = None    # type: Optional[BasePlatform]\n        \"\"\"List of tags applied to this device.\"\"\"\n\n        self.label = None       # type: Optional[str]\n        self.config = dict()    # type: Any\n",
        "target_code_len": 263,
        "diff_format": "@@ -43,6 +43,6 @@\n         self.tags = []          # type: List[str]\n-        self.platform = None    # type: SmartVirtualHardwarePlatform\n+        self.platform = None    # type: Optional[BasePlatform]\n         \"\"\"List of tags applied to this device.\"\"\"\n \n-        self.label = None       # type: str\n+        self.label = None       # type: Optional[str]\n         self.config = dict()    # type: Any\n",
        "source_code_with_indent": "        self.tags = []          # type: List[str]\n        self.platform = None    # type: SmartVirtualHardwarePlatform\n        \"\"\"List of tags applied to this device.\"\"\"\n\n        self.label = None       # type: str\n        self.config = dict()    # type: Any\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self.tags = []          # type: List[str]\n        self.platform = None    # type: Optional[BasePlatform]\n        \"\"\"List of tags applied to this device.\"\"\"\n\n        self.label = None       # type: Optional[str]\n        self.config = dict()    # type: Any\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "missionpinball/mpf",
    "commit": "4dbcd2cdbc16939332b76efdfeb1ae3a0ede0278",
    "filename": "mpf/core/device.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/missionpinball-mpf/mpf/core/device.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mpf/core/device.py:47:8 Incompatible attribute type [8]: Attribute `label` declared in class `Device` has type `str` but is used as type `None`.",
    "message": " Attribute `label` declared in class `Device` has type `str` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 47,
    "warning_line": "        self.label = None       # type: str",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import List, Any\n\n",
        "source_code_len": 31,
        "target_code": "\nfrom typing import List, Any, Optional\n\n",
        "target_code_len": 41,
        "diff_format": "@@ -3,3 +3,3 @@\n \n-from typing import List, Any\n+from typing import List, Any, Optional\n \n",
        "source_code_with_indent": "\nfrom typing import List, Any\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import List, Any, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    from mpf.core.mode import Mode      # pylint: disable-msg=cyclic-import,unused-import\n    from mpf.platforms.smart_virtual import SmartVirtualHardwarePlatform    # pylint: disable-msg=cyclic-import,unused-import; # noqa\n\n",
        "source_code_len": 225,
        "target_code": "    from mpf.core.mode import Mode      # pylint: disable-msg=cyclic-import,unused-import\n    from mpf.core.platform import BasePlatform    # pylint: disable-msg=cyclic-import,unused-import; # noqa\n\n",
        "target_code_len": 199,
        "diff_format": "@@ -11,3 +11,3 @@\n     from mpf.core.mode import Mode      # pylint: disable-msg=cyclic-import,unused-import\n-    from mpf.platforms.smart_virtual import SmartVirtualHardwarePlatform    # pylint: disable-msg=cyclic-import,unused-import; # noqa\n+    from mpf.core.platform import BasePlatform    # pylint: disable-msg=cyclic-import,unused-import; # noqa\n \n",
        "source_code_with_indent": "    <IND>from mpf.core.mode import Mode      # pylint: disable-msg=cyclic-import,unused-import\n    from mpf.platforms.smart_virtual import SmartVirtualHardwarePlatform    # pylint: disable-msg=cyclic-import,unused-import; # noqa\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <IND>from mpf.core.mode import Mode      # pylint: disable-msg=cyclic-import,unused-import\n    from mpf.core.platform import BasePlatform    # pylint: disable-msg=cyclic-import,unused-import; # noqa\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self.tags = []          # type: List[str]\n        self.platform = None    # type: SmartVirtualHardwarePlatform\n        \"\"\"List of tags applied to this device.\"\"\"\n\n        self.label = None       # type: str\n        self.config = dict()    # type: Any\n",
        "source_code_len": 259,
        "target_code": "        self.tags = []          # type: List[str]\n        self.platform = None    # type: Optional[BasePlatform]\n        \"\"\"List of tags applied to this device.\"\"\"\n\n        self.label = None       # type: Optional[str]\n        self.config = dict()    # type: Any\n",
        "target_code_len": 263,
        "diff_format": "@@ -43,6 +43,6 @@\n         self.tags = []          # type: List[str]\n-        self.platform = None    # type: SmartVirtualHardwarePlatform\n+        self.platform = None    # type: Optional[BasePlatform]\n         \"\"\"List of tags applied to this device.\"\"\"\n \n-        self.label = None       # type: str\n+        self.label = None       # type: Optional[str]\n         self.config = dict()    # type: Any\n",
        "source_code_with_indent": "        self.tags = []          # type: List[str]\n        self.platform = None    # type: SmartVirtualHardwarePlatform\n        \"\"\"List of tags applied to this device.\"\"\"\n\n        self.label = None       # type: str\n        self.config = dict()    # type: Any\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self.tags = []          # type: List[str]\n        self.platform = None    # type: Optional[BasePlatform]\n        \"\"\"List of tags applied to this device.\"\"\"\n\n        self.label = None       # type: Optional[str]\n        self.config = dict()    # type: Any\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "missionpinball/mpf",
    "commit": "4dbcd2cdbc16939332b76efdfeb1ae3a0ede0278",
    "filename": "mpf/core/enable_disable_mixin.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/missionpinball-mpf/mpf/core/enable_disable_mixin.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mpf/core/enable_disable_mixin.py:27:8 Incompatible attribute type [8]: Attribute `_enabled` declared in class `EnableDisableMixin` has type `bool` but is used as type `None`.",
    "message": " Attribute `_enabled` declared in class `EnableDisableMixin` has type `bool` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 27,
    "warning_line": "        self._enabled = None    # type: bool",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\"\"\"Implements enable and disable events for devices.\"\"\"\nimport abc\n",
        "source_code_len": 67,
        "target_code": "\"\"\"Implements enable and disable events for devices.\"\"\"\nfrom typing import Optional\n\nimport abc\n",
        "target_code_len": 96,
        "diff_format": "@@ -1,2 +1,4 @@\n \"\"\"Implements enable and disable events for devices.\"\"\"\n+from typing import Optional\n+\n import abc\n",
        "source_code_with_indent": "\"\"\"Implements enable and disable events for devices.\"\"\"\nimport abc\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\"\"\"Implements enable and disable events for devices.\"\"\"\nfrom typing import Optional\n\nimport abc\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    from mpf.core.mode import Mode  # pylint: disable-msg=cyclic-import,unused-import\n\n",
        "source_code_len": 87,
        "target_code": "    from mpf.core.mode import Mode  # pylint: disable-msg=cyclic-import,unused-import\n    from mpf.core.player import Player  # pylint: disable-msg=cyclic-import,unused-import\n\n",
        "target_code_len": 177,
        "diff_format": "@@ -15,2 +17,3 @@\n     from mpf.core.mode import Mode  # pylint: disable-msg=cyclic-import,unused-import\n+    from mpf.core.player import Player  # pylint: disable-msg=cyclic-import,unused-import\n \n",
        "source_code_with_indent": "    <IND>from mpf.core.mode import Mode  # pylint: disable-msg=cyclic-import,unused-import\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <IND>from mpf.core.mode import Mode  # pylint: disable-msg=cyclic-import,unused-import\n    from mpf.core.player import Player  # pylint: disable-msg=cyclic-import,unused-import\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"\"\"Remember the enable state.\"\"\"\n        self._enabled = None    # type: bool\n        self.player = None\n        super().__init__(machine, name)\n",
        "source_code_len": 153,
        "target_code": "        \"\"\"Remember the enable state.\"\"\"\n        self._enabled = None    # type: Optional[bool]\n        self.player = None      # type: Optional[Player]\n        super().__init__(machine, name)\n",
        "target_code_len": 193,
        "diff_format": "@@ -26,4 +29,4 @@\n         \"\"\"Remember the enable state.\"\"\"\n-        self._enabled = None    # type: bool\n-        self.player = None\n+        self._enabled = None    # type: Optional[bool]\n+        self.player = None      # type: Optional[Player]\n         super().__init__(machine, name)\n",
        "source_code_with_indent": "        <IND>\"\"\"Remember the enable state.\"\"\"\n        self._enabled = None    # type: bool\n        self.player = None\n        super().__init__(machine, name)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>\"\"\"Remember the enable state.\"\"\"\n        self._enabled = None    # type: Optional[bool]\n        self.player = None      # type: Optional[Player]\n        super().__init__(machine, name)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "missionpinball/mpf",
    "commit": "4dbcd2cdbc16939332b76efdfeb1ae3a0ede0278",
    "filename": "mpf/core/events.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/missionpinball-mpf/mpf/core/events.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mpf/core/events.py:794:8 Incompatible attribute type [8]: Attribute `event` declared in class `QueuedEvent` has type `asyncio.locks.Event` but is used as type `None`.",
    "message": " Attribute `event` declared in class `QueuedEvent` has type `asyncio.locks.Event` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 794,
    "warning_line": "        self.event = None   # type: asyncio.Event",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self.waiter = False\n        self.event = None   # type: asyncio.Event\n\n",
        "source_code_len": 79,
        "target_code": "        self.waiter = False\n        self.event = None   # type: Optional[asyncio.Event]\n\n",
        "target_code_len": 89,
        "diff_format": "@@ -793,3 +793,3 @@\n         self.waiter = False\n-        self.event = None   # type: asyncio.Event\n+        self.event = None   # type: Optional[asyncio.Event]\n \n",
        "source_code_with_indent": "        self.waiter = False\n        self.event = None   # type: asyncio.Event\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self.waiter = False\n        self.event = None   # type: Optional[asyncio.Event]\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "missionpinball/mpf",
    "commit": "4dbcd2cdbc16939332b76efdfeb1ae3a0ede0278",
    "filename": "mpf/core/light_controller.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/missionpinball-mpf/mpf/core/light_controller.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mpf/core/light_controller.py:36:8 Incompatible attribute type [8]: Attribute `_monitor_update_task` declared in class `LightController` has type `asyncio.tasks.Task[typing.Any]` but is used as type `None`.",
    "message": " Attribute `_monitor_update_task` declared in class `LightController` has type `asyncio.tasks.Task[typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 36,
    "warning_line": "        self._monitor_update_task = None                    # type: asyncio.Task",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import Dict\n\n",
        "source_code_len": 26,
        "target_code": "\nfrom typing import Dict, Optional\n\n",
        "target_code_len": 36,
        "diff_format": "@@ -3,3 +3,3 @@\n \n-from typing import Dict\n+from typing import Dict, Optional\n \n",
        "source_code_with_indent": "\nfrom typing import Dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import Dict, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        self._monitor_update_task = None                    # type: asyncio.Task\n\n",
        "source_code_len": 83,
        "target_code": "\n        self._monitor_update_task = None                    # type: Optional[asyncio.Task]\n\n",
        "target_code_len": 93,
        "diff_format": "@@ -35,3 +35,3 @@\n \n-        self._monitor_update_task = None                    # type: asyncio.Task\n+        self._monitor_update_task = None                    # type: Optional[asyncio.Task]\n \n",
        "source_code_with_indent": "\n        self._monitor_update_task = None                    # type: asyncio.Task\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        self._monitor_update_task = None                    # type: Optional[asyncio.Task]\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "missionpinball/mpf",
    "commit": "4dbcd2cdbc16939332b76efdfeb1ae3a0ede0278",
    "filename": "mpf/core/placeholder_manager.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/missionpinball-mpf/mpf/core/placeholder_manager.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "mpf/core/placeholder_manager.py:727:12 Incompatible return type [7]: Expected `FloatTemplate` but got `NativeTypeTemplate`.",
    "message": " Expected `FloatTemplate` but got `NativeTypeTemplate`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 727,
    "warning_line": "            return NativeTypeTemplate(value, self.machine)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        else:\n            return NativeTypeTemplate(value, self.machine)\n\n",
        "source_code_len": 74,
        "target_code": "        else:\n            return NativeTypeTemplate(value, self.machine)  # type: ignore\n\n",
        "target_code_len": 90,
        "diff_format": "@@ -726,3 +726,3 @@\n         else:\n-            return NativeTypeTemplate(value, self.machine)\n+            return NativeTypeTemplate(value, self.machine)  # type: ignore\n \n",
        "source_code_with_indent": "        <DED>else:\n            <IND>return NativeTypeTemplate(value, self.machine)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>else:\n            <IND>return NativeTypeTemplate(value, self.machine)  # type: ignore\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "missionpinball/mpf",
    "commit": "4dbcd2cdbc16939332b76efdfeb1ae3a0ede0278",
    "filename": "mpf/core/placeholder_manager.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/missionpinball-mpf/mpf/core/placeholder_manager.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "mpf/core/placeholder_manager.py:739:12 Incompatible return type [7]: Expected `IntTemplate` but got `NativeTypeTemplate`.",
    "message": " Expected `IntTemplate` but got `NativeTypeTemplate`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 739,
    "warning_line": "            return NativeTypeTemplate(value, self.machine)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        else:\n            return NativeTypeTemplate(value, self.machine)\n\n",
        "source_code_len": 74,
        "target_code": "        else:\n            return NativeTypeTemplate(value, self.machine)  # type: ignore\n\n",
        "target_code_len": 90,
        "diff_format": "@@ -738,3 +738,3 @@\n         else:\n-            return NativeTypeTemplate(value, self.machine)\n+            return NativeTypeTemplate(value, self.machine)  # type: ignore\n \n",
        "source_code_with_indent": "        <DED>else:\n            <IND>return NativeTypeTemplate(value, self.machine)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>else:\n            <IND>return NativeTypeTemplate(value, self.machine)  # type: ignore\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "missionpinball/mpf",
    "commit": "4dbcd2cdbc16939332b76efdfeb1ae3a0ede0278",
    "filename": "mpf/core/placeholder_manager.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/missionpinball-mpf/mpf/core/placeholder_manager.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "mpf/core/placeholder_manager.py:746:12 Incompatible return type [7]: Expected `BoolTemplate` but got `NativeTypeTemplate`.",
    "message": " Expected `BoolTemplate` but got `NativeTypeTemplate`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 746,
    "warning_line": "            return NativeTypeTemplate(template_str, self.machine)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        if isinstance(template_str, bool):\n            return NativeTypeTemplate(template_str, self.machine)\n        return BoolTemplate(self._parse_template(template_str), template_str, self, default_value)\n",
        "source_code_len": 208,
        "target_code": "        if isinstance(template_str, bool):\n            return NativeTypeTemplate(template_str, self.machine)   # type: ignore\n        return BoolTemplate(self._parse_template(template_str), template_str, self, default_value)\n",
        "target_code_len": 225,
        "diff_format": "@@ -745,3 +745,3 @@\n         if isinstance(template_str, bool):\n-            return NativeTypeTemplate(template_str, self.machine)\n+            return NativeTypeTemplate(template_str, self.machine)   # type: ignore\n         return BoolTemplate(self._parse_template(template_str), template_str, self, default_value)\n",
        "source_code_with_indent": "        if isinstance(template_str, bool):\n            <IND>return NativeTypeTemplate(template_str, self.machine)\n        <DED>return BoolTemplate(self._parse_template(template_str), template_str, self, default_value)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        if isinstance(template_str, bool):\n            <IND>return NativeTypeTemplate(template_str, self.machine)   # type: ignore\n        <DED>return BoolTemplate(self._parse_template(template_str), template_str, self, default_value)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "missionpinball/mpf",
    "commit": "4dbcd2cdbc16939332b76efdfeb1ae3a0ede0278",
    "filename": "mpf/core/rgb_color.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/missionpinball-mpf/mpf/core/rgb_color.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mpf/core/rgb_color.py:448:23 Incompatible variable type [9]: name is declared to have type `str` but is used as type `None`.",
    "message": " name is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 448,
    "warning_line": "    def __init__(self, name: str = None) -> None:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __init__(self, name: str = None) -> None:\n        \"\"\"Create a linear correction profile that does not alter color values by default.\n",
        "source_code_len": 142,
        "target_code": "\n    def __init__(self, name: str) -> None:\n        \"\"\"Create a linear correction profile that does not alter color values by default.\n",
        "target_code_len": 135,
        "diff_format": "@@ -447,3 +447,3 @@\n \n-    def __init__(self, name: str = None) -> None:\n+    def __init__(self, name: str) -> None:\n         \"\"\"Create a linear correction profile that does not alter color values by default.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    def __init__(self, name: str = None) -> None:\n        <IND>",
        "target_code_with_indent": "\n    def __init__(self, name: str) -> None:\n        <IND>"
      }
    ]
  },
  {
    "project": "missionpinball/mpf",
    "commit": "4dbcd2cdbc16939332b76efdfeb1ae3a0ede0278",
    "filename": "mpf/core/utility_functions.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/missionpinball-mpf/mpf/core/utility_functions.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mpf/core/utility_functions.py:86:12 Incompatible return type [7]: Expected `Dict[typing.Any, typing.Any]` but got `List[typing.Any]`.",
    "message": " Expected `Dict[typing.Any, typing.Any]` but got `List[typing.Any]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 86,
    "warning_line": "            return source_dict",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @staticmethod\n    def keys_to_lower(source_dict) -> dict:\n        \"\"\"Convert the keys of a dictionary to lowercase.\n",
        "source_code_len": 120,
        "target_code": "    @staticmethod\n    def keys_to_lower(source_dict) -> Union[dict, list]:\n        \"\"\"Convert the keys of a dictionary to lowercase.\n",
        "target_code_len": 133,
        "diff_format": "@@ -62,3 +62,3 @@\n     @staticmethod\n-    def keys_to_lower(source_dict) -> dict:\n+    def keys_to_lower(source_dict) -> Union[dict, list]:\n         \"\"\"Convert the keys of a dictionary to lowercase.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "    <DED>@staticmethod\n    def keys_to_lower(source_dict) -> dict:\n        <IND>",
        "target_code_with_indent": "    <DED>@staticmethod\n    def keys_to_lower(source_dict) -> Union[dict, list]:\n        <IND>"
      }
    ]
  },
  {
    "project": "missionpinball/mpf",
    "commit": "4dbcd2cdbc16939332b76efdfeb1ae3a0ede0278",
    "filename": "mpf/devices/achievement_group.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/missionpinball-mpf/mpf/devices/achievement_group.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mpf/devices/achievement_group.py:36:8 Incompatible attribute type [8]: Attribute `_show` declared in class `AchievementGroup` has type `RunningShow` but is used as type `None`.",
    "message": " Attribute `_show` declared in class `AchievementGroup` has type `RunningShow` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 36,
    "warning_line": "        self._show = None       # type: RunningShow",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\"\"\"An achievement group which manages and groups achievements.\"\"\"\nfrom random import choice\n\nfrom mpf.core.events import event_handler\nfrom mpf.core.machine import MachineController\n",
        "source_code_len": 182,
        "target_code": "\"\"\"An achievement group which manages and groups achievements.\"\"\"\nfrom typing import Optional, List\n\nfrom random import choice\n\nfrom mpf.core.events import event_handler, EventHandlerKey\nfrom mpf.core.machine import MachineController\n",
        "target_code_len": 234,
        "diff_format": "@@ -1,5 +1,7 @@\n \"\"\"An achievement group which manages and groups achievements.\"\"\"\n+from typing import Optional, List\n+\n from random import choice\n \n-from mpf.core.events import event_handler\n+from mpf.core.events import event_handler, EventHandlerKey\n from mpf.core.machine import MachineController\n",
        "source_code_with_indent": "\"\"\"An achievement group which manages and groups achievements.\"\"\"\nfrom random import choice\n\nfrom mpf.core.events import event_handler\nfrom mpf.core.machine import MachineController\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\"\"\"An achievement group which manages and groups achievements.\"\"\"\nfrom typing import Optional, List\n\nfrom random import choice\n\nfrom mpf.core.events import event_handler, EventHandlerKey\nfrom mpf.core.machine import MachineController\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        self._show = None       # type: RunningShow\n\n",
        "source_code_len": 54,
        "target_code": "\n        self._show = None       # type: Optional[RunningShow]\n\n",
        "target_code_len": 64,
        "diff_format": "@@ -35,3 +37,3 @@\n \n-        self._show = None       # type: RunningShow\n+        self._show = None       # type: Optional[RunningShow]\n \n",
        "source_code_with_indent": "\n        self._show = None       # type: RunningShow\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        self._show = None       # type: Optional[RunningShow]\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "missionpinball/mpf",
    "commit": "4dbcd2cdbc16939332b76efdfeb1ae3a0ede0278",
    "filename": "mpf/devices/achievement_group.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/missionpinball-mpf/mpf/devices/achievement_group.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mpf/devices/achievement_group.py:40:8 Incompatible attribute type [8]: Attribute `_selected_member` declared in class `AchievementGroup` has type `Achievement` but is used as type `None`.",
    "message": " Attribute `_selected_member` declared in class `AchievementGroup` has type `Achievement` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 40,
    "warning_line": "        self._selected_member = None    # type: Achievement",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\"\"\"An achievement group which manages and groups achievements.\"\"\"\nfrom random import choice\n\nfrom mpf.core.events import event_handler\nfrom mpf.core.machine import MachineController\n",
        "source_code_len": 182,
        "target_code": "\"\"\"An achievement group which manages and groups achievements.\"\"\"\nfrom typing import Optional, List\n\nfrom random import choice\n\nfrom mpf.core.events import event_handler, EventHandlerKey\nfrom mpf.core.machine import MachineController\n",
        "target_code_len": 234,
        "diff_format": "@@ -1,5 +1,7 @@\n \"\"\"An achievement group which manages and groups achievements.\"\"\"\n+from typing import Optional, List\n+\n from random import choice\n \n-from mpf.core.events import event_handler\n+from mpf.core.events import event_handler, EventHandlerKey\n from mpf.core.machine import MachineController\n",
        "source_code_with_indent": "\"\"\"An achievement group which manages and groups achievements.\"\"\"\nfrom random import choice\n\nfrom mpf.core.events import event_handler\nfrom mpf.core.machine import MachineController\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\"\"\"An achievement group which manages and groups achievements.\"\"\"\nfrom typing import Optional, List\n\nfrom random import choice\n\nfrom mpf.core.events import event_handler, EventHandlerKey\nfrom mpf.core.machine import MachineController\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self._loaded = False\n        self._selected_member = None    # type: Achievement\n        self._rotation_in_progress = False\n        self._handlers = []\n\n",
        "source_code_len": 161,
        "target_code": "        self._loaded = False\n        self._selected_member = None    # type: Optional[Achievement]\n        self._rotation_in_progress = False\n        self._handlers = []             # type: List[EventHandlerKey]\n\n",
        "target_code_len": 213,
        "diff_format": "@@ -39,5 +41,5 @@\n         self._loaded = False\n-        self._selected_member = None    # type: Achievement\n+        self._selected_member = None    # type: Optional[Achievement]\n         self._rotation_in_progress = False\n-        self._handlers = []\n+        self._handlers = []             # type: List[EventHandlerKey]\n \n",
        "source_code_with_indent": "        self._loaded = False\n        self._selected_member = None    # type: Achievement\n        self._rotation_in_progress = False\n        self._handlers = []\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self._loaded = False\n        self._selected_member = None    # type: Optional[Achievement]\n        self._rotation_in_progress = False\n        self._handlers = []             # type: List[EventHandlerKey]\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "missionpinball/mpf",
    "commit": "4dbcd2cdbc16939332b76efdfeb1ae3a0ede0278",
    "filename": "mpf/devices/autofire.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/missionpinball-mpf/mpf/devices/autofire.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mpf/devices/autofire.py:43:8 Incompatible attribute type [8]: Attribute `_rule` declared in class `AutofireCoil` has type `HardwareRule` but is used as type `None`.",
    "message": " Attribute `_rule` declared in class `AutofireCoil` has type `HardwareRule` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 43,
    "warning_line": "        self._rule = None       # type: HardwareRule",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    from mpf.core.machine import MachineController  # pylint: disable-msg=cyclic-import,unused-import\n    from typing import List     # pylint: disable-msg=cyclic-import,unused-import\n\n",
        "source_code_len": 185,
        "target_code": "    from mpf.core.machine import MachineController  # pylint: disable-msg=cyclic-import,unused-import\n    from typing import List, Optional  # pylint: disable-msg=cyclic-import,unused-import\n\n",
        "target_code_len": 192,
        "diff_format": "@@ -11,3 +11,3 @@\n     from mpf.core.machine import MachineController  # pylint: disable-msg=cyclic-import,unused-import\n-    from typing import List     # pylint: disable-msg=cyclic-import,unused-import\n+    from typing import List, Optional  # pylint: disable-msg=cyclic-import,unused-import\n \n",
        "source_code_with_indent": "    <IND>from mpf.core.machine import MachineController  # pylint: disable-msg=cyclic-import,unused-import\n    from typing import List     # pylint: disable-msg=cyclic-import,unused-import\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <IND>from mpf.core.machine import MachineController  # pylint: disable-msg=cyclic-import,unused-import\n    from typing import List, Optional  # pylint: disable-msg=cyclic-import,unused-import\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self._enabled = False\n        self._rule = None       # type: HardwareRule\n        super().__init__(machine, name)\n",
        "source_code_len": 123,
        "target_code": "        self._enabled = False\n        self._rule = None       # type: Optional[HardwareRule]\n        super().__init__(machine, name)\n",
        "target_code_len": 133,
        "diff_format": "@@ -42,3 +42,3 @@\n         self._enabled = False\n-        self._rule = None       # type: HardwareRule\n+        self._rule = None       # type: Optional[HardwareRule]\n         super().__init__(machine, name)\n",
        "source_code_with_indent": "        self._enabled = False\n        self._rule = None       # type: HardwareRule\n        super().__init__(machine, name)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self._enabled = False\n        self._rule = None       # type: Optional[HardwareRule]\n        super().__init__(machine, name)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "missionpinball/mpf",
    "commit": "4dbcd2cdbc16939332b76efdfeb1ae3a0ede0278",
    "filename": "mpf/devices/ball_device/outgoing_balls_handler.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/missionpinball-mpf/mpf/devices/ball_device/outgoing_balls_handler.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mpf/devices/ball_device/outgoing_balls_handler.py:24:8 Incompatible attribute type [8]: Attribute `max_tries` declared in class `OutgoingBall` has type `int` but is used as type `None`.",
    "message": " Attribute `max_tries` declared in class `OutgoingBall` has type `int` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 24,
    "warning_line": "        self.max_tries = None               # type: int",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"\"\"Initialise outgoing ball.\"\"\"\n        self.max_tries = None               # type: int\n        self.eject_timeout = None           # type: int\n        self.target = target                # type: BallDevice\n        self.player_controlled = None              # type: bool\n        self.already_left = False           # type: bool\n",
        "source_code_len": 336,
        "target_code": "        \"\"\"Initialise outgoing ball.\"\"\"\n        self.max_tries = 0                  # type: int\n        self.eject_timeout = 0              # type: int\n        self.target = target                # type: BallDevice\n        self.player_controlled = False      # type: bool\n        self.already_left = False           # type: bool\n",
        "target_code_len": 329,
        "diff_format": "@@ -23,6 +23,6 @@\n         \"\"\"Initialise outgoing ball.\"\"\"\n-        self.max_tries = None               # type: int\n-        self.eject_timeout = None           # type: int\n+        self.max_tries = 0                  # type: int\n+        self.eject_timeout = 0              # type: int\n         self.target = target                # type: BallDevice\n-        self.player_controlled = None              # type: bool\n+        self.player_controlled = False      # type: bool\n         self.already_left = False           # type: bool\n",
        "source_code_with_indent": "        <IND>\"\"\"Initialise outgoing ball.\"\"\"\n        self.max_tries = None               # type: int\n        self.eject_timeout = None           # type: int\n        self.target = target                # type: BallDevice\n        self.player_controlled = None              # type: bool\n        self.already_left = False           # type: bool\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>\"\"\"Initialise outgoing ball.\"\"\"\n        self.max_tries = 0                  # type: int\n        self.eject_timeout = 0              # type: int\n        self.target = target                # type: BallDevice\n        self.player_controlled = False      # type: bool\n        self.already_left = False           # type: bool\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "missionpinball/mpf",
    "commit": "4dbcd2cdbc16939332b76efdfeb1ae3a0ede0278",
    "filename": "mpf/devices/ball_device/outgoing_balls_handler.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/missionpinball-mpf/mpf/devices/ball_device/outgoing_balls_handler.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mpf/devices/ball_device/outgoing_balls_handler.py:25:8 Incompatible attribute type [8]: Attribute `eject_timeout` declared in class `OutgoingBall` has type `int` but is used as type `None`.",
    "message": " Attribute `eject_timeout` declared in class `OutgoingBall` has type `int` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 25,
    "warning_line": "        self.eject_timeout = None           # type: int",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"\"\"Initialise outgoing ball.\"\"\"\n        self.max_tries = None               # type: int\n        self.eject_timeout = None           # type: int\n        self.target = target                # type: BallDevice\n        self.player_controlled = None              # type: bool\n        self.already_left = False           # type: bool\n",
        "source_code_len": 336,
        "target_code": "        \"\"\"Initialise outgoing ball.\"\"\"\n        self.max_tries = 0                  # type: int\n        self.eject_timeout = 0              # type: int\n        self.target = target                # type: BallDevice\n        self.player_controlled = False      # type: bool\n        self.already_left = False           # type: bool\n",
        "target_code_len": 329,
        "diff_format": "@@ -23,6 +23,6 @@\n         \"\"\"Initialise outgoing ball.\"\"\"\n-        self.max_tries = None               # type: int\n-        self.eject_timeout = None           # type: int\n+        self.max_tries = 0                  # type: int\n+        self.eject_timeout = 0              # type: int\n         self.target = target                # type: BallDevice\n-        self.player_controlled = None              # type: bool\n+        self.player_controlled = False      # type: bool\n         self.already_left = False           # type: bool\n",
        "source_code_with_indent": "        <IND>\"\"\"Initialise outgoing ball.\"\"\"\n        self.max_tries = None               # type: int\n        self.eject_timeout = None           # type: int\n        self.target = target                # type: BallDevice\n        self.player_controlled = None              # type: bool\n        self.already_left = False           # type: bool\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>\"\"\"Initialise outgoing ball.\"\"\"\n        self.max_tries = 0                  # type: int\n        self.eject_timeout = 0              # type: int\n        self.target = target                # type: BallDevice\n        self.player_controlled = False      # type: bool\n        self.already_left = False           # type: bool\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "missionpinball/mpf",
    "commit": "4dbcd2cdbc16939332b76efdfeb1ae3a0ede0278",
    "filename": "mpf/devices/ball_device/outgoing_balls_handler.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/missionpinball-mpf/mpf/devices/ball_device/outgoing_balls_handler.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mpf/devices/ball_device/outgoing_balls_handler.py:27:8 Incompatible attribute type [8]: Attribute `player_controlled` declared in class `OutgoingBall` has type `bool` but is used as type `None`.",
    "message": " Attribute `player_controlled` declared in class `OutgoingBall` has type `bool` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 27,
    "warning_line": "        self.player_controlled = None              # type: bool",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"\"\"Initialise outgoing ball.\"\"\"\n        self.max_tries = None               # type: int\n        self.eject_timeout = None           # type: int\n        self.target = target                # type: BallDevice\n        self.player_controlled = None              # type: bool\n        self.already_left = False           # type: bool\n",
        "source_code_len": 336,
        "target_code": "        \"\"\"Initialise outgoing ball.\"\"\"\n        self.max_tries = 0                  # type: int\n        self.eject_timeout = 0              # type: int\n        self.target = target                # type: BallDevice\n        self.player_controlled = False      # type: bool\n        self.already_left = False           # type: bool\n",
        "target_code_len": 329,
        "diff_format": "@@ -23,6 +23,6 @@\n         \"\"\"Initialise outgoing ball.\"\"\"\n-        self.max_tries = None               # type: int\n-        self.eject_timeout = None           # type: int\n+        self.max_tries = 0                  # type: int\n+        self.eject_timeout = 0              # type: int\n         self.target = target                # type: BallDevice\n-        self.player_controlled = None              # type: bool\n+        self.player_controlled = False      # type: bool\n         self.already_left = False           # type: bool\n",
        "source_code_with_indent": "        <IND>\"\"\"Initialise outgoing ball.\"\"\"\n        self.max_tries = None               # type: int\n        self.eject_timeout = None           # type: int\n        self.target = target                # type: BallDevice\n        self.player_controlled = None              # type: bool\n        self.already_left = False           # type: bool\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>\"\"\"Initialise outgoing ball.\"\"\"\n        self.max_tries = 0                  # type: int\n        self.eject_timeout = 0              # type: int\n        self.target = target                # type: BallDevice\n        self.player_controlled = False      # type: bool\n        self.already_left = False           # type: bool\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "missionpinball/mpf",
    "commit": "4dbcd2cdbc16939332b76efdfeb1ae3a0ede0278",
    "filename": "mpf/devices/ball_device/outgoing_balls_handler.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/missionpinball-mpf/mpf/devices/ball_device/outgoing_balls_handler.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mpf/devices/ball_device/outgoing_balls_handler.py:42:8 Incompatible attribute type [8]: Attribute `_current_target` declared in class `OutgoingBallsHandler` has type `BallDevice` but is used as type `None`.",
    "message": " Attribute `_current_target` declared in class `OutgoingBallsHandler` has type `BallDevice` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 42,
    "warning_line": "        self._current_target = None     # type: BallDevice",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import List\n\n",
        "source_code_len": 26,
        "target_code": "\nfrom typing import List, Optional\n\n",
        "target_code_len": 36,
        "diff_format": "@@ -3,3 +3,3 @@\n \n-from typing import List\n+from typing import List, Optional\n \n",
        "source_code_with_indent": "\nfrom typing import List\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import List, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self._eject_queue = asyncio.Queue(loop=self.machine.clock.loop)     # type: asyncio.Queue\n        self._current_target = None     # type: BallDevice\n        self._cancel_future = None      # type: asyncio.Future\n        self._incoming_ball_which_may_skip = asyncio.Event(loop=self.machine.clock.loop)\n",
        "source_code_len": 309,
        "target_code": "        self._eject_queue = asyncio.Queue(loop=self.machine.clock.loop)     # type: asyncio.Queue\n        self._current_target = None     # type: Optional[BallDevice]\n        self._cancel_future = None      # type: Optional[asyncio.Future]\n        self._incoming_ball_which_may_skip = asyncio.Event(loop=self.machine.clock.loop)\n",
        "target_code_len": 329,
        "diff_format": "@@ -41,4 +41,4 @@\n         self._eject_queue = asyncio.Queue(loop=self.machine.clock.loop)     # type: asyncio.Queue\n-        self._current_target = None     # type: BallDevice\n-        self._cancel_future = None      # type: asyncio.Future\n+        self._current_target = None     # type: Optional[BallDevice]\n+        self._cancel_future = None      # type: Optional[asyncio.Future]\n         self._incoming_ball_which_may_skip = asyncio.Event(loop=self.machine.clock.loop)\n",
        "source_code_with_indent": "        self._eject_queue = asyncio.Queue(loop=self.machine.clock.loop)     # type: asyncio.Queue\n        self._current_target = None     # type: BallDevice\n        self._cancel_future = None      # type: asyncio.Future\n        self._incoming_ball_which_may_skip = asyncio.Event(loop=self.machine.clock.loop)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self._eject_queue = asyncio.Queue(loop=self.machine.clock.loop)     # type: asyncio.Queue\n        self._current_target = None     # type: Optional[BallDevice]\n        self._cancel_future = None      # type: Optional[asyncio.Future]\n        self._incoming_ball_which_may_skip = asyncio.Event(loop=self.machine.clock.loop)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "missionpinball/mpf",
    "commit": "4dbcd2cdbc16939332b76efdfeb1ae3a0ede0278",
    "filename": "mpf/devices/ball_device/outgoing_balls_handler.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/missionpinball-mpf/mpf/devices/ball_device/outgoing_balls_handler.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mpf/devices/ball_device/outgoing_balls_handler.py:43:8 Incompatible attribute type [8]: Attribute `_cancel_future` declared in class `OutgoingBallsHandler` has type `asyncio.futures.Future[typing.Any]` but is used as type `None`.",
    "message": " Attribute `_cancel_future` declared in class `OutgoingBallsHandler` has type `asyncio.futures.Future[typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 43,
    "warning_line": "        self._cancel_future = None      # type: asyncio.Future",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import List\n\n",
        "source_code_len": 26,
        "target_code": "\nfrom typing import List, Optional\n\n",
        "target_code_len": 36,
        "diff_format": "@@ -3,3 +3,3 @@\n \n-from typing import List\n+from typing import List, Optional\n \n",
        "source_code_with_indent": "\nfrom typing import List\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import List, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self._eject_queue = asyncio.Queue(loop=self.machine.clock.loop)     # type: asyncio.Queue\n        self._current_target = None     # type: BallDevice\n        self._cancel_future = None      # type: asyncio.Future\n        self._incoming_ball_which_may_skip = asyncio.Event(loop=self.machine.clock.loop)\n",
        "source_code_len": 309,
        "target_code": "        self._eject_queue = asyncio.Queue(loop=self.machine.clock.loop)     # type: asyncio.Queue\n        self._current_target = None     # type: Optional[BallDevice]\n        self._cancel_future = None      # type: Optional[asyncio.Future]\n        self._incoming_ball_which_may_skip = asyncio.Event(loop=self.machine.clock.loop)\n",
        "target_code_len": 329,
        "diff_format": "@@ -41,4 +41,4 @@\n         self._eject_queue = asyncio.Queue(loop=self.machine.clock.loop)     # type: asyncio.Queue\n-        self._current_target = None     # type: BallDevice\n-        self._cancel_future = None      # type: asyncio.Future\n+        self._current_target = None     # type: Optional[BallDevice]\n+        self._cancel_future = None      # type: Optional[asyncio.Future]\n         self._incoming_ball_which_may_skip = asyncio.Event(loop=self.machine.clock.loop)\n",
        "source_code_with_indent": "        self._eject_queue = asyncio.Queue(loop=self.machine.clock.loop)     # type: asyncio.Queue\n        self._current_target = None     # type: BallDevice\n        self._cancel_future = None      # type: asyncio.Future\n        self._incoming_ball_which_may_skip = asyncio.Event(loop=self.machine.clock.loop)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self._eject_queue = asyncio.Queue(loop=self.machine.clock.loop)     # type: asyncio.Queue\n        self._current_target = None     # type: Optional[BallDevice]\n        self._cancel_future = None      # type: Optional[asyncio.Future]\n        self._incoming_ball_which_may_skip = asyncio.Event(loop=self.machine.clock.loop)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "missionpinball/mpf",
    "commit": "4dbcd2cdbc16939332b76efdfeb1ae3a0ede0278",
    "filename": "mpf/devices/ball_device/outgoing_balls_handler.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/missionpinball-mpf/mpf/devices/ball_device/outgoing_balls_handler.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mpf/devices/ball_device/outgoing_balls_handler.py:49:8 Incompatible attribute type [8]: Attribute `_eject_future` declared in class `OutgoingBallsHandler` has type `asyncio.futures.Future[typing.Any]` but is used as type `None`.",
    "message": " Attribute `_eject_future` declared in class `OutgoingBallsHandler` has type `asyncio.futures.Future[typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 49,
    "warning_line": "        self._eject_future = None       # type: asyncio.Future",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import List\n\n",
        "source_code_len": 26,
        "target_code": "\nfrom typing import List, Optional\n\n",
        "target_code_len": 36,
        "diff_format": "@@ -3,3 +3,3 @@\n \n-from typing import List\n+from typing import List, Optional\n \n",
        "source_code_with_indent": "\nfrom typing import List\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import List, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self._incoming_ball_which_may_skip_obj = []     # type: List[IncomingBall]\n        self._eject_future = None       # type: asyncio.Future\n\n",
        "source_code_len": 147,
        "target_code": "        self._incoming_ball_which_may_skip_obj = []     # type: List[IncomingBall]\n        self._eject_future = None       # type: Optional[asyncio.Future]\n\n",
        "target_code_len": 157,
        "diff_format": "@@ -48,3 +48,3 @@\n         self._incoming_ball_which_may_skip_obj = []     # type: List[IncomingBall]\n-        self._eject_future = None       # type: asyncio.Future\n+        self._eject_future = None       # type: Optional[asyncio.Future]\n \n",
        "source_code_with_indent": "        self._incoming_ball_which_may_skip_obj = []     # type: List[IncomingBall]\n        self._eject_future = None       # type: asyncio.Future\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self._incoming_ball_which_may_skip_obj = []     # type: List[IncomingBall]\n        self._eject_future = None       # type: Optional[asyncio.Future]\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "missionpinball/mpf",
    "commit": "4dbcd2cdbc16939332b76efdfeb1ae3a0ede0278",
    "filename": "mpf/devices/ball_device/physical_ball_counter.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/missionpinball-mpf/mpf/devices/ball_device/physical_ball_counter.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mpf/devices/ball_device/physical_ball_counter.py:188:8 Incompatible attribute type [8]: Attribute `_last_count` declared in class `PhysicalBallCounter` has type `int` but is used as type `None`.",
    "message": " Attribute `_last_count` declared in class `PhysicalBallCounter` has type `int` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 188,
    "warning_line": "        self._last_count = None                     # type: int",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import List\nfrom mpf.core.utility_functions import Util\n",
        "source_code_len": 69,
        "target_code": "\nfrom typing import List, Optional\nfrom mpf.core.utility_functions import Util\n",
        "target_code_len": 79,
        "diff_format": "@@ -6,3 +6,3 @@\n \n-from typing import List\n+from typing import List, Optional\n from mpf.core.utility_functions import Util\n",
        "source_code_with_indent": "\nfrom typing import List\nfrom mpf.core.utility_functions import Util\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import List, Optional\nfrom mpf.core.utility_functions import Util\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        self._last_count = None                     # type: int\n        self._count_stable = asyncio.Event(loop=self.machine.clock.loop)\n",
        "source_code_len": 138,
        "target_code": "\n        self._last_count = None                     # type: Optional[int]\n        self._count_stable = asyncio.Event(loop=self.machine.clock.loop)\n",
        "target_code_len": 148,
        "diff_format": "@@ -187,3 +187,3 @@\n \n-        self._last_count = None                     # type: int\n+        self._last_count = None                     # type: Optional[int]\n         self._count_stable = asyncio.Event(loop=self.machine.clock.loop)\n",
        "source_code_with_indent": "\n        self._last_count = None                     # type: int\n        self._count_stable = asyncio.Event(loop=self.machine.clock.loop)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        self._last_count = None                     # type: Optional[int]\n        self._count_stable = asyncio.Event(loop=self.machine.clock.loop)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "missionpinball/mpf",
    "commit": "4dbcd2cdbc16939332b76efdfeb1ae3a0ede0278",
    "filename": "mpf/devices/ball_save.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/missionpinball-mpf/mpf/devices/ball_save.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mpf/devices/ball_save.py:31:8 Incompatible attribute type [8]: Attribute `unlimited_saves` declared in class `BallSave` has type `bool` but is used as type `None`.",
    "message": " Attribute `unlimited_saves` declared in class `BallSave` has type `bool` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 31,
    "warning_line": "        self.unlimited_saves = None         # type: bool",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"\"\"Initialise ball save.\"\"\"\n        self.unlimited_saves = None         # type: bool\n        self.source_playfield = None        # type: Playfield\n        super().__init__(machine, name)\n",
        "source_code_len": 195,
        "target_code": "        \"\"\"Initialise ball save.\"\"\"\n        self.unlimited_saves = None         # type: Optional[bool]\n        self.source_playfield = None        # type: Optional[Playfield]\n        super().__init__(machine, name)\n",
        "target_code_len": 215,
        "diff_format": "@@ -30,4 +30,4 @@\n         \"\"\"Initialise ball save.\"\"\"\n-        self.unlimited_saves = None         # type: bool\n-        self.source_playfield = None        # type: Playfield\n+        self.unlimited_saves = None         # type: Optional[bool]\n+        self.source_playfield = None        # type: Optional[Playfield]\n         super().__init__(machine, name)\n",
        "source_code_with_indent": "        <IND>\"\"\"Initialise ball save.\"\"\"\n        self.unlimited_saves = None         # type: bool\n        self.source_playfield = None        # type: Playfield\n        super().__init__(machine, name)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>\"\"\"Initialise ball save.\"\"\"\n        self.unlimited_saves = None         # type: Optional[bool]\n        self.source_playfield = None        # type: Optional[Playfield]\n        super().__init__(machine, name)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "missionpinball/mpf",
    "commit": "4dbcd2cdbc16939332b76efdfeb1ae3a0ede0278",
    "filename": "mpf/devices/ball_save.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/missionpinball-mpf/mpf/devices/ball_save.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mpf/devices/ball_save.py:32:8 Incompatible attribute type [8]: Attribute `source_playfield` declared in class `BallSave` has type `Playfield` but is used as type `None`.",
    "message": " Attribute `source_playfield` declared in class `BallSave` has type `Playfield` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 32,
    "warning_line": "        self.source_playfield = None        # type: Playfield",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"\"\"Initialise ball save.\"\"\"\n        self.unlimited_saves = None         # type: bool\n        self.source_playfield = None        # type: Playfield\n        super().__init__(machine, name)\n",
        "source_code_len": 195,
        "target_code": "        \"\"\"Initialise ball save.\"\"\"\n        self.unlimited_saves = None         # type: Optional[bool]\n        self.source_playfield = None        # type: Optional[Playfield]\n        super().__init__(machine, name)\n",
        "target_code_len": 215,
        "diff_format": "@@ -30,4 +30,4 @@\n         \"\"\"Initialise ball save.\"\"\"\n-        self.unlimited_saves = None         # type: bool\n-        self.source_playfield = None        # type: Playfield\n+        self.unlimited_saves = None         # type: Optional[bool]\n+        self.source_playfield = None        # type: Optional[Playfield]\n         super().__init__(machine, name)\n",
        "source_code_with_indent": "        <IND>\"\"\"Initialise ball save.\"\"\"\n        self.unlimited_saves = None         # type: bool\n        self.source_playfield = None        # type: Playfield\n        super().__init__(machine, name)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>\"\"\"Initialise ball save.\"\"\"\n        self.unlimited_saves = None         # type: Optional[bool]\n        self.source_playfield = None        # type: Optional[Playfield]\n        super().__init__(machine, name)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "missionpinball/mpf",
    "commit": "4dbcd2cdbc16939332b76efdfeb1ae3a0ede0278",
    "filename": "mpf/devices/digital_output.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/missionpinball-mpf/mpf/devices/digital_output.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mpf/devices/digital_output.py:31:8 Incompatible attribute type [8]: Attribute `hw_driver` declared in class `DigitalOutput` has type `Union[DriverPlatformInterface, LightPlatformInterface]` but is used as type `None`.",
    "message": " Attribute `hw_driver` declared in class `DigitalOutput` has type `Union[DriverPlatformInterface, LightPlatformInterface]` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 31,
    "warning_line": "        self.hw_driver = None           # type: Union[DriverPlatformInterface, LightPlatformInterface]",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\"\"\"A digital output on either a light or driver platform.\"\"\"\nfrom typing import Union\n\n",
        "source_code_len": 87,
        "target_code": "\"\"\"A digital output on either a light or driver platform.\"\"\"\nfrom typing import Union, Optional\n\n",
        "target_code_len": 97,
        "diff_format": "@@ -1,3 +1,3 @@\n \"\"\"A digital output on either a light or driver platform.\"\"\"\n-from typing import Union\n+from typing import Union, Optional\n \n",
        "source_code_with_indent": "\"\"\"A digital output on either a light or driver platform.\"\"\"\nfrom typing import Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\"\"\"A digital output on either a light or driver platform.\"\"\"\nfrom typing import Union, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"\"\"Initialise digital output.\"\"\"\n        self.hw_driver = None           # type: Union[DriverPlatformInterface, LightPlatformInterface]\n        self.platform = None            # type: Union[DriverPlatform, LightsPlatform]\n        self.type = None                # type: str\n        super().__init__(machine, name)\n",
        "source_code_len": 322,
        "target_code": "        \"\"\"Initialise digital output.\"\"\"\n        self.hw_driver = None           # type: Optional[Union[DriverPlatformInterface, LightPlatformInterface]]\n        self.platform = None            # type: Optional[Union[DriverPlatform, LightsPlatform]]\n        self.type = None                # type: Optional[str]\n        super().__init__(machine, name)\n",
        "target_code_len": 352,
        "diff_format": "@@ -30,5 +30,5 @@\n         \"\"\"Initialise digital output.\"\"\"\n-        self.hw_driver = None           # type: Union[DriverPlatformInterface, LightPlatformInterface]\n-        self.platform = None            # type: Union[DriverPlatform, LightsPlatform]\n-        self.type = None                # type: str\n+        self.hw_driver = None           # type: Optional[Union[DriverPlatformInterface, LightPlatformInterface]]\n+        self.platform = None            # type: Optional[Union[DriverPlatform, LightsPlatform]]\n+        self.type = None                # type: Optional[str]\n         super().__init__(machine, name)\n",
        "source_code_with_indent": "        <IND>\"\"\"Initialise digital output.\"\"\"\n        self.hw_driver = None           # type: Union[DriverPlatformInterface, LightPlatformInterface]\n        self.platform = None            # type: Union[DriverPlatform, LightsPlatform]\n        self.type = None                # type: str\n        super().__init__(machine, name)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>\"\"\"Initialise digital output.\"\"\"\n        self.hw_driver = None           # type: Optional[Union[DriverPlatformInterface, LightPlatformInterface]]\n        self.platform = None            # type: Optional[Union[DriverPlatform, LightsPlatform]]\n        self.type = None                # type: Optional[str]\n        super().__init__(machine, name)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "missionpinball/mpf",
    "commit": "4dbcd2cdbc16939332b76efdfeb1ae3a0ede0278",
    "filename": "mpf/devices/digital_output.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/missionpinball-mpf/mpf/devices/digital_output.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mpf/devices/digital_output.py:32:8 Incompatible attribute type [8]: Attribute `platform` declared in class `DigitalOutput` has type `Union[DriverPlatform, LightsPlatform]` but is used as type `None`.",
    "message": " Attribute `platform` declared in class `DigitalOutput` has type `Union[DriverPlatform, LightsPlatform]` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 32,
    "warning_line": "        self.platform = None            # type: Union[DriverPlatform, LightsPlatform]",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\"\"\"A digital output on either a light or driver platform.\"\"\"\nfrom typing import Union\n\n",
        "source_code_len": 87,
        "target_code": "\"\"\"A digital output on either a light or driver platform.\"\"\"\nfrom typing import Union, Optional\n\n",
        "target_code_len": 97,
        "diff_format": "@@ -1,3 +1,3 @@\n \"\"\"A digital output on either a light or driver platform.\"\"\"\n-from typing import Union\n+from typing import Union, Optional\n \n",
        "source_code_with_indent": "\"\"\"A digital output on either a light or driver platform.\"\"\"\nfrom typing import Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\"\"\"A digital output on either a light or driver platform.\"\"\"\nfrom typing import Union, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"\"\"Initialise digital output.\"\"\"\n        self.hw_driver = None           # type: Union[DriverPlatformInterface, LightPlatformInterface]\n        self.platform = None            # type: Union[DriverPlatform, LightsPlatform]\n        self.type = None                # type: str\n        super().__init__(machine, name)\n",
        "source_code_len": 322,
        "target_code": "        \"\"\"Initialise digital output.\"\"\"\n        self.hw_driver = None           # type: Optional[Union[DriverPlatformInterface, LightPlatformInterface]]\n        self.platform = None            # type: Optional[Union[DriverPlatform, LightsPlatform]]\n        self.type = None                # type: Optional[str]\n        super().__init__(machine, name)\n",
        "target_code_len": 352,
        "diff_format": "@@ -30,5 +30,5 @@\n         \"\"\"Initialise digital output.\"\"\"\n-        self.hw_driver = None           # type: Union[DriverPlatformInterface, LightPlatformInterface]\n-        self.platform = None            # type: Union[DriverPlatform, LightsPlatform]\n-        self.type = None                # type: str\n+        self.hw_driver = None           # type: Optional[Union[DriverPlatformInterface, LightPlatformInterface]]\n+        self.platform = None            # type: Optional[Union[DriverPlatform, LightsPlatform]]\n+        self.type = None                # type: Optional[str]\n         super().__init__(machine, name)\n",
        "source_code_with_indent": "        <IND>\"\"\"Initialise digital output.\"\"\"\n        self.hw_driver = None           # type: Union[DriverPlatformInterface, LightPlatformInterface]\n        self.platform = None            # type: Union[DriverPlatform, LightsPlatform]\n        self.type = None                # type: str\n        super().__init__(machine, name)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>\"\"\"Initialise digital output.\"\"\"\n        self.hw_driver = None           # type: Optional[Union[DriverPlatformInterface, LightPlatformInterface]]\n        self.platform = None            # type: Optional[Union[DriverPlatform, LightsPlatform]]\n        self.type = None                # type: Optional[str]\n        super().__init__(machine, name)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "missionpinball/mpf",
    "commit": "4dbcd2cdbc16939332b76efdfeb1ae3a0ede0278",
    "filename": "mpf/devices/digital_output.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/missionpinball-mpf/mpf/devices/digital_output.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mpf/devices/digital_output.py:33:8 Incompatible attribute type [8]: Attribute `type` declared in class `DigitalOutput` has type `str` but is used as type `None`.",
    "message": " Attribute `type` declared in class `DigitalOutput` has type `str` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 33,
    "warning_line": "        self.type = None                # type: str",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\"\"\"A digital output on either a light or driver platform.\"\"\"\nfrom typing import Union\n\n",
        "source_code_len": 87,
        "target_code": "\"\"\"A digital output on either a light or driver platform.\"\"\"\nfrom typing import Union, Optional\n\n",
        "target_code_len": 97,
        "diff_format": "@@ -1,3 +1,3 @@\n \"\"\"A digital output on either a light or driver platform.\"\"\"\n-from typing import Union\n+from typing import Union, Optional\n \n",
        "source_code_with_indent": "\"\"\"A digital output on either a light or driver platform.\"\"\"\nfrom typing import Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\"\"\"A digital output on either a light or driver platform.\"\"\"\nfrom typing import Union, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"\"\"Initialise digital output.\"\"\"\n        self.hw_driver = None           # type: Union[DriverPlatformInterface, LightPlatformInterface]\n        self.platform = None            # type: Union[DriverPlatform, LightsPlatform]\n        self.type = None                # type: str\n        super().__init__(machine, name)\n",
        "source_code_len": 322,
        "target_code": "        \"\"\"Initialise digital output.\"\"\"\n        self.hw_driver = None           # type: Optional[Union[DriverPlatformInterface, LightPlatformInterface]]\n        self.platform = None            # type: Optional[Union[DriverPlatform, LightsPlatform]]\n        self.type = None                # type: Optional[str]\n        super().__init__(machine, name)\n",
        "target_code_len": 352,
        "diff_format": "@@ -30,5 +30,5 @@\n         \"\"\"Initialise digital output.\"\"\"\n-        self.hw_driver = None           # type: Union[DriverPlatformInterface, LightPlatformInterface]\n-        self.platform = None            # type: Union[DriverPlatform, LightsPlatform]\n-        self.type = None                # type: str\n+        self.hw_driver = None           # type: Optional[Union[DriverPlatformInterface, LightPlatformInterface]]\n+        self.platform = None            # type: Optional[Union[DriverPlatform, LightsPlatform]]\n+        self.type = None                # type: Optional[str]\n         super().__init__(machine, name)\n",
        "source_code_with_indent": "        <IND>\"\"\"Initialise digital output.\"\"\"\n        self.hw_driver = None           # type: Union[DriverPlatformInterface, LightPlatformInterface]\n        self.platform = None            # type: Union[DriverPlatform, LightsPlatform]\n        self.type = None                # type: str\n        super().__init__(machine, name)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>\"\"\"Initialise digital output.\"\"\"\n        self.hw_driver = None           # type: Optional[Union[DriverPlatformInterface, LightPlatformInterface]]\n        self.platform = None            # type: Optional[Union[DriverPlatform, LightsPlatform]]\n        self.type = None                # type: Optional[str]\n        super().__init__(machine, name)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "missionpinball/mpf",
    "commit": "4dbcd2cdbc16939332b76efdfeb1ae3a0ede0278",
    "filename": "mpf/devices/driver.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/missionpinball-mpf/mpf/devices/driver.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mpf/devices/driver.py:36:8 Incompatible attribute type [8]: Attribute `hw_driver` declared in class `Driver` has type `DriverPlatformInterface` but is used as type `None`.",
    "message": " Attribute `hw_driver` declared in class `Driver` has type `DriverPlatformInterface` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 36,
    "warning_line": "        self.hw_driver = None   # type: DriverPlatformInterface",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"\"\"Initialise driver.\"\"\"\n        self.hw_driver = None   # type: DriverPlatformInterface\n        super().__init__(machine, name)\n        self.delay = DelayManager(self.machine)\n        self.platform = None                # type: DriverPlatform\n\n",
        "source_code_len": 253,
        "target_code": "        \"\"\"Initialise driver.\"\"\"\n        self.hw_driver = None   # type: Optional[DriverPlatformInterface]\n        super().__init__(machine, name)\n        self.delay = DelayManager(self.machine)\n        self.platform = None                # type: Optional[DriverPlatform]\n\n",
        "target_code_len": 273,
        "diff_format": "@@ -35,6 +35,6 @@\n         \"\"\"Initialise driver.\"\"\"\n-        self.hw_driver = None   # type: DriverPlatformInterface\n+        self.hw_driver = None   # type: Optional[DriverPlatformInterface]\n         super().__init__(machine, name)\n         self.delay = DelayManager(self.machine)\n-        self.platform = None                # type: DriverPlatform\n+        self.platform = None                # type: Optional[DriverPlatform]\n \n",
        "source_code_with_indent": "        <IND>\"\"\"Initialise driver.\"\"\"\n        self.hw_driver = None   # type: DriverPlatformInterface\n        super().__init__(machine, name)\n        self.delay = DelayManager(self.machine)\n        self.platform = None                # type: DriverPlatform\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>\"\"\"Initialise driver.\"\"\"\n        self.hw_driver = None   # type: Optional[DriverPlatformInterface]\n        super().__init__(machine, name)\n        self.delay = DelayManager(self.machine)\n        self.platform = None                # type: Optional[DriverPlatform]\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "missionpinball/mpf",
    "commit": "4dbcd2cdbc16939332b76efdfeb1ae3a0ede0278",
    "filename": "mpf/devices/driver.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/missionpinball-mpf/mpf/devices/driver.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mpf/devices/driver.py:39:8 Incompatible attribute type [8]: Attribute `platform` declared in class `Driver` has type `DriverPlatform` but is used as type `None`.",
    "message": " Attribute `platform` declared in class `Driver` has type `DriverPlatform` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 39,
    "warning_line": "        self.platform = None                # type: DriverPlatform",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"\"\"Initialise driver.\"\"\"\n        self.hw_driver = None   # type: DriverPlatformInterface\n        super().__init__(machine, name)\n        self.delay = DelayManager(self.machine)\n        self.platform = None                # type: DriverPlatform\n\n",
        "source_code_len": 253,
        "target_code": "        \"\"\"Initialise driver.\"\"\"\n        self.hw_driver = None   # type: Optional[DriverPlatformInterface]\n        super().__init__(machine, name)\n        self.delay = DelayManager(self.machine)\n        self.platform = None                # type: Optional[DriverPlatform]\n\n",
        "target_code_len": 273,
        "diff_format": "@@ -35,6 +35,6 @@\n         \"\"\"Initialise driver.\"\"\"\n-        self.hw_driver = None   # type: DriverPlatformInterface\n+        self.hw_driver = None   # type: Optional[DriverPlatformInterface]\n         super().__init__(machine, name)\n         self.delay = DelayManager(self.machine)\n-        self.platform = None                # type: DriverPlatform\n+        self.platform = None                # type: Optional[DriverPlatform]\n \n",
        "source_code_with_indent": "        <IND>\"\"\"Initialise driver.\"\"\"\n        self.hw_driver = None   # type: DriverPlatformInterface\n        super().__init__(machine, name)\n        self.delay = DelayManager(self.machine)\n        self.platform = None                # type: DriverPlatform\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>\"\"\"Initialise driver.\"\"\"\n        self.hw_driver = None   # type: Optional[DriverPlatformInterface]\n        super().__init__(machine, name)\n        self.delay = DelayManager(self.machine)\n        self.platform = None                # type: Optional[DriverPlatform]\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "missionpinball/mpf",
    "commit": "4dbcd2cdbc16939332b76efdfeb1ae3a0ede0278",
    "filename": "mpf/devices/drop_target.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/missionpinball-mpf/mpf/devices/drop_target.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mpf/devices/drop_target.py:36:8 Incompatible attribute type [8]: Attribute `reset_coil` declared in class `DropTarget` has type `Driver` but is used as type `None`.",
    "message": " Attribute `reset_coil` declared in class `DropTarget` has type `Driver` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 36,
    "warning_line": "        self.reset_coil = None              # type: Driver",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\"\"\"Contains the base classes for drop targets and drop target banks.\"\"\"\nfrom typing import List\nfrom typing import Set\n",
        "source_code_len": 119,
        "target_code": "\"\"\"Contains the base classes for drop targets and drop target banks.\"\"\"\nfrom typing import List, Optional\nfrom typing import Set\n",
        "target_code_len": 129,
        "diff_format": "@@ -1,3 +1,3 @@\n \"\"\"Contains the base classes for drop targets and drop target banks.\"\"\"\n-from typing import List\n+from typing import List, Optional\n from typing import Set\n",
        "source_code_with_indent": "\"\"\"Contains the base classes for drop targets and drop target banks.\"\"\"\nfrom typing import List\nfrom typing import Set\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\"\"\"Contains the base classes for drop targets and drop target banks.\"\"\"\nfrom typing import List, Optional\nfrom typing import Set\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"\"\"Initialise drop target.\"\"\"\n        self.reset_coil = None              # type: Driver\n        self.knockdown_coil = None          # type: Driver\n        self.banks = set()                  # type: Set[DropTargetBank]\n",
        "source_code_len": 228,
        "target_code": "        \"\"\"Initialise drop target.\"\"\"\n        self.reset_coil = None              # type: Optional[Driver]\n        self.knockdown_coil = None          # type: Optional[Driver]\n        self.banks = set()                  # type: Set[DropTargetBank]\n",
        "target_code_len": 248,
        "diff_format": "@@ -35,4 +35,4 @@\n         \"\"\"Initialise drop target.\"\"\"\n-        self.reset_coil = None              # type: Driver\n-        self.knockdown_coil = None          # type: Driver\n+        self.reset_coil = None              # type: Optional[Driver]\n+        self.knockdown_coil = None          # type: Optional[Driver]\n         self.banks = set()                  # type: Set[DropTargetBank]\n",
        "source_code_with_indent": "        <IND>\"\"\"Initialise drop target.\"\"\"\n        self.reset_coil = None              # type: Driver\n        self.knockdown_coil = None          # type: Driver\n        self.banks = set()                  # type: Set[DropTargetBank]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>\"\"\"Initialise drop target.\"\"\"\n        self.reset_coil = None              # type: Optional[Driver]\n        self.knockdown_coil = None          # type: Optional[Driver]\n        self.banks = set()                  # type: Set[DropTargetBank]\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "missionpinball/mpf",
    "commit": "4dbcd2cdbc16939332b76efdfeb1ae3a0ede0278",
    "filename": "mpf/devices/drop_target.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/missionpinball-mpf/mpf/devices/drop_target.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mpf/devices/drop_target.py:37:8 Incompatible attribute type [8]: Attribute `knockdown_coil` declared in class `DropTarget` has type `Driver` but is used as type `None`.",
    "message": " Attribute `knockdown_coil` declared in class `DropTarget` has type `Driver` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 37,
    "warning_line": "        self.knockdown_coil = None          # type: Driver",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\"\"\"Contains the base classes for drop targets and drop target banks.\"\"\"\nfrom typing import List\nfrom typing import Set\n",
        "source_code_len": 119,
        "target_code": "\"\"\"Contains the base classes for drop targets and drop target banks.\"\"\"\nfrom typing import List, Optional\nfrom typing import Set\n",
        "target_code_len": 129,
        "diff_format": "@@ -1,3 +1,3 @@\n \"\"\"Contains the base classes for drop targets and drop target banks.\"\"\"\n-from typing import List\n+from typing import List, Optional\n from typing import Set\n",
        "source_code_with_indent": "\"\"\"Contains the base classes for drop targets and drop target banks.\"\"\"\nfrom typing import List\nfrom typing import Set\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\"\"\"Contains the base classes for drop targets and drop target banks.\"\"\"\nfrom typing import List, Optional\nfrom typing import Set\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"\"\"Initialise drop target.\"\"\"\n        self.reset_coil = None              # type: Driver\n        self.knockdown_coil = None          # type: Driver\n        self.banks = set()                  # type: Set[DropTargetBank]\n",
        "source_code_len": 228,
        "target_code": "        \"\"\"Initialise drop target.\"\"\"\n        self.reset_coil = None              # type: Optional[Driver]\n        self.knockdown_coil = None          # type: Optional[Driver]\n        self.banks = set()                  # type: Set[DropTargetBank]\n",
        "target_code_len": 248,
        "diff_format": "@@ -35,4 +35,4 @@\n         \"\"\"Initialise drop target.\"\"\"\n-        self.reset_coil = None              # type: Driver\n-        self.knockdown_coil = None          # type: Driver\n+        self.reset_coil = None              # type: Optional[Driver]\n+        self.knockdown_coil = None          # type: Optional[Driver]\n         self.banks = set()                  # type: Set[DropTargetBank]\n",
        "source_code_with_indent": "        <IND>\"\"\"Initialise drop target.\"\"\"\n        self.reset_coil = None              # type: Driver\n        self.knockdown_coil = None          # type: Driver\n        self.banks = set()                  # type: Set[DropTargetBank]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>\"\"\"Initialise drop target.\"\"\"\n        self.reset_coil = None              # type: Optional[Driver]\n        self.knockdown_coil = None          # type: Optional[Driver]\n        self.banks = set()                  # type: Set[DropTargetBank]\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "missionpinball/mpf",
    "commit": "4dbcd2cdbc16939332b76efdfeb1ae3a0ede0278",
    "filename": "mpf/devices/drop_target.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/missionpinball-mpf/mpf/devices/drop_target.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mpf/devices/drop_target.py:301:8 Incompatible attribute type [8]: Attribute `reset_coil` declared in class `DropTargetBank` has type `Driver` but is used as type `None`.",
    "message": " Attribute `reset_coil` declared in class `DropTargetBank` has type `Driver` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 301,
    "warning_line": "        self.reset_coil = None              # type: Driver",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\"\"\"Contains the base classes for drop targets and drop target banks.\"\"\"\nfrom typing import List\nfrom typing import Set\n",
        "source_code_len": 119,
        "target_code": "\"\"\"Contains the base classes for drop targets and drop target banks.\"\"\"\nfrom typing import List, Optional\nfrom typing import Set\n",
        "target_code_len": 129,
        "diff_format": "@@ -1,3 +1,3 @@\n \"\"\"Contains the base classes for drop targets and drop target banks.\"\"\"\n-from typing import List\n+from typing import List, Optional\n from typing import Set\n",
        "source_code_with_indent": "\"\"\"Contains the base classes for drop targets and drop target banks.\"\"\"\nfrom typing import List\nfrom typing import Set\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\"\"\"Contains the base classes for drop targets and drop target banks.\"\"\"\nfrom typing import List, Optional\nfrom typing import Set\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self.drop_targets = list()          # type: List[DropTarget]\n        self.reset_coil = None              # type: Driver\n        self.reset_coils = set()            # type: Set[Driver]\n",
        "source_code_len": 192,
        "target_code": "        self.drop_targets = list()          # type: List[DropTarget]\n        self.reset_coil = None              # type: Optional[Driver]\n        self.reset_coils = set()            # type: Set[Driver]\n",
        "target_code_len": 202,
        "diff_format": "@@ -300,3 +300,3 @@\n         self.drop_targets = list()          # type: List[DropTarget]\n-        self.reset_coil = None              # type: Driver\n+        self.reset_coil = None              # type: Optional[Driver]\n         self.reset_coils = set()            # type: Set[Driver]\n",
        "source_code_with_indent": "        self.drop_targets = list()          # type: List[DropTarget]\n        self.reset_coil = None              # type: Driver\n        self.reset_coils = set()            # type: Set[Driver]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self.drop_targets = list()          # type: List[DropTarget]\n        self.reset_coil = None              # type: Optional[Driver]\n        self.reset_coils = set()            # type: Set[Driver]\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "missionpinball/mpf",
    "commit": "4dbcd2cdbc16939332b76efdfeb1ae3a0ede0278",
    "filename": "mpf/devices/extra_ball.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/missionpinball-mpf/mpf/devices/extra_ball.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mpf/devices/extra_ball.py:25:8 Incompatible attribute type [8]: Attribute `player` declared in class `ExtraBall` has type `Player` but is used as type `None`.",
    "message": " Attribute `player` declared in class `ExtraBall` has type `Player` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 25,
    "warning_line": "        self.player = None  # type: Player",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\"\"\"Device that implements an extra ball.\"\"\"\nfrom mpf.core.events import event_handler\n",
        "source_code_len": 86,
        "target_code": "\"\"\"Device that implements an extra ball.\"\"\"\nfrom typing import Optional\n\nfrom mpf.core.events import event_handler\n",
        "target_code_len": 115,
        "diff_format": "@@ -1,2 +1,4 @@\n \"\"\"Device that implements an extra ball.\"\"\"\n+from typing import Optional\n+\n from mpf.core.events import event_handler\n",
        "source_code_with_indent": "\"\"\"Device that implements an extra ball.\"\"\"\nfrom mpf.core.events import event_handler\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\"\"\"Device that implements an extra ball.\"\"\"\nfrom typing import Optional\n\nfrom mpf.core.events import event_handler\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        super().__init__(machine, name)\n        self.player = None  # type: Player\n        \"\"\"The current player\"\"\"\n        self.group = None  # type: ExtraBallGroup\n        \"\"\"The ExtraBallGroup this ExtraBall belongs to, or None.\"\"\"\n",
        "source_code_len": 235,
        "target_code": "        super().__init__(machine, name)\n        self.player = None  # type: Optional[Player]\n        \"\"\"The current player\"\"\"\n        self.group = None   # type: Optional[ExtraBallGroup]\n        \"\"\"The ExtraBallGroup this ExtraBall belongs to, or None.\"\"\"\n",
        "target_code_len": 256,
        "diff_format": "@@ -24,5 +26,5 @@\n         super().__init__(machine, name)\n-        self.player = None  # type: Player\n+        self.player = None  # type: Optional[Player]\n         \"\"\"The current player\"\"\"\n-        self.group = None  # type: ExtraBallGroup\n+        self.group = None   # type: Optional[ExtraBallGroup]\n         \"\"\"The ExtraBallGroup this ExtraBall belongs to, or None.\"\"\"\n",
        "source_code_with_indent": "        super().__init__(machine, name)\n        self.player = None  # type: Player\n        \"\"\"The current player\"\"\"\n        self.group = None  # type: ExtraBallGroup\n        \"\"\"The ExtraBallGroup this ExtraBall belongs to, or None.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        super().__init__(machine, name)\n        self.player = None  # type: Optional[Player]\n        \"\"\"The current player\"\"\"\n        self.group = None   # type: Optional[ExtraBallGroup]\n        \"\"\"The ExtraBallGroup this ExtraBall belongs to, or None.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "missionpinball/mpf",
    "commit": "4dbcd2cdbc16939332b76efdfeb1ae3a0ede0278",
    "filename": "mpf/devices/extra_ball.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/missionpinball-mpf/mpf/devices/extra_ball.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mpf/devices/extra_ball.py:27:8 Incompatible attribute type [8]: Attribute `group` declared in class `ExtraBall` has type `ExtraBallGroup` but is used as type `None`.",
    "message": " Attribute `group` declared in class `ExtraBall` has type `ExtraBallGroup` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 27,
    "warning_line": "        self.group = None  # type: ExtraBallGroup",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\"\"\"Device that implements an extra ball.\"\"\"\nfrom mpf.core.events import event_handler\n",
        "source_code_len": 86,
        "target_code": "\"\"\"Device that implements an extra ball.\"\"\"\nfrom typing import Optional\n\nfrom mpf.core.events import event_handler\n",
        "target_code_len": 115,
        "diff_format": "@@ -1,2 +1,4 @@\n \"\"\"Device that implements an extra ball.\"\"\"\n+from typing import Optional\n+\n from mpf.core.events import event_handler\n",
        "source_code_with_indent": "\"\"\"Device that implements an extra ball.\"\"\"\nfrom mpf.core.events import event_handler\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\"\"\"Device that implements an extra ball.\"\"\"\nfrom typing import Optional\n\nfrom mpf.core.events import event_handler\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        super().__init__(machine, name)\n        self.player = None  # type: Player\n        \"\"\"The current player\"\"\"\n        self.group = None  # type: ExtraBallGroup\n        \"\"\"The ExtraBallGroup this ExtraBall belongs to, or None.\"\"\"\n",
        "source_code_len": 235,
        "target_code": "        super().__init__(machine, name)\n        self.player = None  # type: Optional[Player]\n        \"\"\"The current player\"\"\"\n        self.group = None   # type: Optional[ExtraBallGroup]\n        \"\"\"The ExtraBallGroup this ExtraBall belongs to, or None.\"\"\"\n",
        "target_code_len": 256,
        "diff_format": "@@ -24,5 +26,5 @@\n         super().__init__(machine, name)\n-        self.player = None  # type: Player\n+        self.player = None  # type: Optional[Player]\n         \"\"\"The current player\"\"\"\n-        self.group = None  # type: ExtraBallGroup\n+        self.group = None   # type: Optional[ExtraBallGroup]\n         \"\"\"The ExtraBallGroup this ExtraBall belongs to, or None.\"\"\"\n",
        "source_code_with_indent": "        super().__init__(machine, name)\n        self.player = None  # type: Player\n        \"\"\"The current player\"\"\"\n        self.group = None  # type: ExtraBallGroup\n        \"\"\"The ExtraBallGroup this ExtraBall belongs to, or None.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        super().__init__(machine, name)\n        self.player = None  # type: Optional[Player]\n        \"\"\"The current player\"\"\"\n        self.group = None   # type: Optional[ExtraBallGroup]\n        \"\"\"The ExtraBallGroup this ExtraBall belongs to, or None.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "missionpinball/mpf",
    "commit": "4dbcd2cdbc16939332b76efdfeb1ae3a0ede0278",
    "filename": "mpf/devices/extra_ball_group.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/missionpinball-mpf/mpf/devices/extra_ball_group.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mpf/devices/extra_ball_group.py:24:8 Incompatible attribute type [8]: Attribute `player` declared in class `ExtraBallGroup` has type `Player` but is used as type `None`.",
    "message": " Attribute `player` declared in class `ExtraBallGroup` has type `Player` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 24,
    "warning_line": "        self.player = None  # type: Player",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\"\"\"Device that implements an extra ball group.\"\"\"\nfrom mpf.core.events import event_handler\n",
        "source_code_len": 92,
        "target_code": "\"\"\"Device that implements an extra ball group.\"\"\"\nfrom typing import Optional\n\nfrom mpf.core.events import event_handler\n",
        "target_code_len": 121,
        "diff_format": "@@ -1,2 +1,4 @@\n \"\"\"Device that implements an extra ball group.\"\"\"\n+from typing import Optional\n+\n from mpf.core.events import event_handler\n",
        "source_code_with_indent": "\"\"\"Device that implements an extra ball group.\"\"\"\nfrom mpf.core.events import event_handler\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\"\"\"Device that implements an extra ball group.\"\"\"\nfrom typing import Optional\n\nfrom mpf.core.events import event_handler\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        self.player = None  # type: Player\n        self.machine.events.add_handler('player_added',\n",
        "source_code_len": 100,
        "target_code": "\n        self.player = None  # type: Optional[Player]\n        self.machine.events.add_handler('player_added',\n",
        "target_code_len": 110,
        "diff_format": "@@ -23,3 +25,3 @@\n \n-        self.player = None  # type: Player\n+        self.player = None  # type: Optional[Player]\n         self.machine.events.add_handler('player_added',\n",
        "source_code_with_indent": "\n        self.player = None  # type: Player\n        self.machine.events.add_handler('player_added',\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        self.player = None  # type: Optional[Player]\n        self.machine.events.add_handler('player_added',\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "missionpinball/mpf",
    "commit": "4dbcd2cdbc16939332b76efdfeb1ae3a0ede0278",
    "filename": "mpf/devices/logic_blocks.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/missionpinball-mpf/mpf/devices/logic_blocks.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mpf/devices/logic_blocks.py:38:8 Incompatible attribute type [8]: Attribute `_state` declared in class `LogicBlock` has type `LogicBlockState` but is used as type `None`.",
    "message": " Attribute `_state` declared in class `LogicBlock` has type `LogicBlockState` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 38,
    "warning_line": "        self._state = None          # type: LogicBlockState",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\"\"\"Logic Blocks devices.\"\"\"\nfrom typing import Any, List\n\n",
        "source_code_len": 58,
        "target_code": "\"\"\"Logic Blocks devices.\"\"\"\nfrom typing import Any, List, Optional\n\n",
        "target_code_len": 68,
        "diff_format": "@@ -1,3 +1,3 @@\n \"\"\"Logic Blocks devices.\"\"\"\n-from typing import Any, List\n+from typing import Any, List, Optional\n \n",
        "source_code_with_indent": "\"\"\"Logic Blocks devices.\"\"\"\nfrom typing import Any, List\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\"\"\"Logic Blocks devices.\"\"\"\nfrom typing import Any, List, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        super().__init__(machine, name)\n        self._state = None          # type: LogicBlockState\n        self._start_enabled = None  # type: bool\n\n",
        "source_code_len": 150,
        "target_code": "        super().__init__(machine, name)\n        self._state = None          # type: Optional[LogicBlockState]\n        self._start_enabled = None  # type: Optional[bool]\n\n",
        "target_code_len": 170,
        "diff_format": "@@ -37,4 +37,4 @@\n         super().__init__(machine, name)\n-        self._state = None          # type: LogicBlockState\n-        self._start_enabled = None  # type: bool\n+        self._state = None          # type: Optional[LogicBlockState]\n+        self._start_enabled = None  # type: Optional[bool]\n \n",
        "source_code_with_indent": "        super().__init__(machine, name)\n        self._state = None          # type: LogicBlockState\n        self._start_enabled = None  # type: bool\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        super().__init__(machine, name)\n        self._state = None          # type: Optional[LogicBlockState]\n        self._start_enabled = None  # type: Optional[bool]\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "missionpinball/mpf",
    "commit": "4dbcd2cdbc16939332b76efdfeb1ae3a0ede0278",
    "filename": "mpf/devices/logic_blocks.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/missionpinball-mpf/mpf/devices/logic_blocks.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mpf/devices/logic_blocks.py:39:8 Incompatible attribute type [8]: Attribute `_start_enabled` declared in class `LogicBlock` has type `bool` but is used as type `None`.",
    "message": " Attribute `_start_enabled` declared in class `LogicBlock` has type `bool` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 39,
    "warning_line": "        self._start_enabled = None  # type: bool",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\"\"\"Logic Blocks devices.\"\"\"\nfrom typing import Any, List\n\n",
        "source_code_len": 58,
        "target_code": "\"\"\"Logic Blocks devices.\"\"\"\nfrom typing import Any, List, Optional\n\n",
        "target_code_len": 68,
        "diff_format": "@@ -1,3 +1,3 @@\n \"\"\"Logic Blocks devices.\"\"\"\n-from typing import Any, List\n+from typing import Any, List, Optional\n \n",
        "source_code_with_indent": "\"\"\"Logic Blocks devices.\"\"\"\nfrom typing import Any, List\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\"\"\"Logic Blocks devices.\"\"\"\nfrom typing import Any, List, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        super().__init__(machine, name)\n        self._state = None          # type: LogicBlockState\n        self._start_enabled = None  # type: bool\n\n",
        "source_code_len": 150,
        "target_code": "        super().__init__(machine, name)\n        self._state = None          # type: Optional[LogicBlockState]\n        self._start_enabled = None  # type: Optional[bool]\n\n",
        "target_code_len": 170,
        "diff_format": "@@ -37,4 +37,4 @@\n         super().__init__(machine, name)\n-        self._state = None          # type: LogicBlockState\n-        self._start_enabled = None  # type: bool\n+        self._state = None          # type: Optional[LogicBlockState]\n+        self._start_enabled = None  # type: Optional[bool]\n \n",
        "source_code_with_indent": "        super().__init__(machine, name)\n        self._state = None          # type: LogicBlockState\n        self._start_enabled = None  # type: bool\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        super().__init__(machine, name)\n        self._state = None          # type: Optional[LogicBlockState]\n        self._start_enabled = None  # type: Optional[bool]\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "missionpinball/mpf",
    "commit": "4dbcd2cdbc16939332b76efdfeb1ae3a0ede0278",
    "filename": "mpf/devices/segment_display.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/missionpinball-mpf/mpf/devices/segment_display.py",
    "file_hunks_size": 5,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mpf/devices/segment_display.py:29:8 Incompatible attribute type [8]: Attribute `hw_display` declared in class `SegmentDisplay` has type `SegmentDisplayPlatformInterface` but is used as type `None`.",
    "message": " Attribute `hw_display` declared in class `SegmentDisplay` has type `SegmentDisplayPlatformInterface` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 29,
    "warning_line": "        self.hw_display = None              # type: SegmentDisplayPlatformInterface"
  },
  {
    "project": "missionpinball/mpf",
    "commit": "4dbcd2cdbc16939332b76efdfeb1ae3a0ede0278",
    "filename": "mpf/devices/segment_display.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/missionpinball-mpf/mpf/devices/segment_display.py",
    "file_hunks_size": 5,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mpf/devices/segment_display.py:32:8 Incompatible attribute type [8]: Attribute `_current_placeholder` declared in class `SegmentDisplay` has type `TextTemplate` but is used as type `None`.",
    "message": " Attribute `_current_placeholder` declared in class `SegmentDisplay` has type `TextTemplate` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 32,
    "warning_line": "        self._current_placeholder = None    # type: TextTemplate"
  },
  {
    "project": "missionpinball/mpf",
    "commit": "4dbcd2cdbc16939332b76efdfeb1ae3a0ede0278",
    "filename": "mpf/devices/segment_display.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/missionpinball-mpf/mpf/devices/segment_display.py",
    "file_hunks_size": 5,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mpf/devices/segment_display.py:69:8 Incompatible attribute type [8]: Attribute `text` declared in class `SegmentDisplay` has type `str` but is used as type `None`.",
    "message": " Attribute `text` declared in class `SegmentDisplay` has type `str` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 69,
    "warning_line": "        self.text = None"
  },
  {
    "project": "missionpinball/mpf",
    "commit": "4dbcd2cdbc16939332b76efdfeb1ae3a0ede0278",
    "filename": "mpf/devices/segment_display.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/missionpinball-mpf/mpf/devices/segment_display.py",
    "file_hunks_size": 5,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mpf/devices/segment_display.py:84:16 Incompatible attribute type [8]: Attribute `_current_placeholder` declared in class `SegmentDisplay` has type `TextTemplate` but is used as type `None`.",
    "message": " Attribute `_current_placeholder` declared in class `SegmentDisplay` has type `TextTemplate` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 84,
    "warning_line": "                self._current_placeholder = None"
  },
  {
    "project": "missionpinball/mpf",
    "commit": "4dbcd2cdbc16939332b76efdfeb1ae3a0ede0278",
    "filename": "mpf/devices/switch.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/missionpinball-mpf/mpf/devices/switch.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mpf/devices/switch.py:32:8 Incompatible attribute type [8]: Attribute `hw_switch` declared in class `Switch` has type `SwitchPlatformInterface` but is used as type `None`.",
    "message": " Attribute `hw_switch` declared in class `Switch` has type `SwitchPlatformInterface` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 32,
    "warning_line": "        self.hw_switch = None   # type: SwitchPlatformInterface",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\"\"\"Contains the Switch parent class.\"\"\"\nfrom functools import partial\n",
        "source_code_len": 70,
        "target_code": "\"\"\"Contains the Switch parent class.\"\"\"\nfrom typing import Optional, Dict, List\n\nfrom functools import partial\n",
        "target_code_len": 111,
        "diff_format": "@@ -1,2 +1,4 @@\n \"\"\"Contains the Switch parent class.\"\"\"\n+from typing import Optional, Dict, List\n+\n from functools import partial\n",
        "source_code_with_indent": "\"\"\"Contains the Switch parent class.\"\"\"\nfrom functools import partial\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\"\"\"Contains the Switch parent class.\"\"\"\nfrom typing import Optional, Dict, List\n\nfrom functools import partial\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"\"\"Initialise switch.\"\"\"\n        self.hw_switch = None   # type: SwitchPlatformInterface\n        self.platform = None    # type: SwitchPlatform\n        super().__init__(machine, name)\n",
        "source_code_len": 192,
        "target_code": "        \"\"\"Initialise switch.\"\"\"\n        self.hw_switch = None   # type: Optional[SwitchPlatformInterface]\n        self.platform = None    # type: Optional[SwitchPlatform]\n        super().__init__(machine, name)\n",
        "target_code_len": 212,
        "diff_format": "@@ -31,4 +33,4 @@\n         \"\"\"Initialise switch.\"\"\"\n-        self.hw_switch = None   # type: SwitchPlatformInterface\n-        self.platform = None    # type: SwitchPlatform\n+        self.hw_switch = None   # type: Optional[SwitchPlatformInterface]\n+        self.platform = None    # type: Optional[SwitchPlatform]\n         super().__init__(machine, name)\n",
        "source_code_with_indent": "        <IND>\"\"\"Initialise switch.\"\"\"\n        self.hw_switch = None   # type: SwitchPlatformInterface\n        self.platform = None    # type: SwitchPlatform\n        super().__init__(machine, name)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>\"\"\"Initialise switch.\"\"\"\n        self.hw_switch = None   # type: Optional[SwitchPlatformInterface]\n        self.platform = None    # type: Optional[SwitchPlatform]\n        super().__init__(machine, name)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "missionpinball/mpf",
    "commit": "4dbcd2cdbc16939332b76efdfeb1ae3a0ede0278",
    "filename": "mpf/devices/switch.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/missionpinball-mpf/mpf/devices/switch.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mpf/devices/switch.py:33:8 Incompatible attribute type [8]: Attribute `platform` declared in class `Switch` has type `SwitchPlatform` but is used as type `None`.",
    "message": " Attribute `platform` declared in class `Switch` has type `SwitchPlatform` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 33,
    "warning_line": "        self.platform = None    # type: SwitchPlatform",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\"\"\"Contains the Switch parent class.\"\"\"\nfrom functools import partial\n",
        "source_code_len": 70,
        "target_code": "\"\"\"Contains the Switch parent class.\"\"\"\nfrom typing import Optional, Dict, List\n\nfrom functools import partial\n",
        "target_code_len": 111,
        "diff_format": "@@ -1,2 +1,4 @@\n \"\"\"Contains the Switch parent class.\"\"\"\n+from typing import Optional, Dict, List\n+\n from functools import partial\n",
        "source_code_with_indent": "\"\"\"Contains the Switch parent class.\"\"\"\nfrom functools import partial\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\"\"\"Contains the Switch parent class.\"\"\"\nfrom typing import Optional, Dict, List\n\nfrom functools import partial\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"\"\"Initialise switch.\"\"\"\n        self.hw_switch = None   # type: SwitchPlatformInterface\n        self.platform = None    # type: SwitchPlatform\n        super().__init__(machine, name)\n",
        "source_code_len": 192,
        "target_code": "        \"\"\"Initialise switch.\"\"\"\n        self.hw_switch = None   # type: Optional[SwitchPlatformInterface]\n        self.platform = None    # type: Optional[SwitchPlatform]\n        super().__init__(machine, name)\n",
        "target_code_len": 212,
        "diff_format": "@@ -31,4 +33,4 @@\n         \"\"\"Initialise switch.\"\"\"\n-        self.hw_switch = None   # type: SwitchPlatformInterface\n-        self.platform = None    # type: SwitchPlatform\n+        self.hw_switch = None   # type: Optional[SwitchPlatformInterface]\n+        self.platform = None    # type: Optional[SwitchPlatform]\n         super().__init__(machine, name)\n",
        "source_code_with_indent": "        <IND>\"\"\"Initialise switch.\"\"\"\n        self.hw_switch = None   # type: SwitchPlatformInterface\n        self.platform = None    # type: SwitchPlatform\n        super().__init__(machine, name)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>\"\"\"Initialise switch.\"\"\"\n        self.hw_switch = None   # type: Optional[SwitchPlatformInterface]\n        self.platform = None    # type: Optional[SwitchPlatform]\n        super().__init__(machine, name)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "missionpinball/mpf",
    "commit": "4dbcd2cdbc16939332b76efdfeb1ae3a0ede0278",
    "filename": "mpf/platforms/base_serial_communicator.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/missionpinball-mpf/mpf/platforms/base_serial_communicator.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mpf/platforms/base_serial_communicator.py:36:8 Incompatible attribute type [8]: Attribute `reader` declared in class `BaseSerialCommunicator` has type `asyncio.streams.StreamReader` but is used as type `None`.",
    "message": " Attribute `reader` declared in class `BaseSerialCommunicator` has type `asyncio.streams.StreamReader` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 36,
    "warning_line": "        self.reader = None      # type: asyncio.StreamReader",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\"\"\"Base class for serial communicator.\"\"\"\nimport asyncio\n",
        "source_code_len": 57,
        "target_code": "\"\"\"Base class for serial communicator.\"\"\"\nfrom typing import Optional\n\nimport asyncio\n",
        "target_code_len": 86,
        "diff_format": "@@ -1,2 +1,4 @@\n \"\"\"Base class for serial communicator.\"\"\"\n+from typing import Optional\n+\n import asyncio\n",
        "source_code_with_indent": "\"\"\"Base class for serial communicator.\"\"\"\nimport asyncio\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\"\"\"Base class for serial communicator.\"\"\"\nfrom typing import Optional\n\nimport asyncio\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self.xonxoff = xonxoff\n        self.reader = None      # type: asyncio.StreamReader\n        self.writer = None      # type: asyncio.StreamWriter\n        self.read_task = None\n",
        "source_code_len": 183,
        "target_code": "        self.xonxoff = xonxoff\n        self.reader = None      # type: Optional[asyncio.StreamReader]\n        self.writer = None      # type: Optional[asyncio.StreamWriter]\n        self.read_task = None\n",
        "target_code_len": 203,
        "diff_format": "@@ -35,4 +37,4 @@\n         self.xonxoff = xonxoff\n-        self.reader = None      # type: asyncio.StreamReader\n-        self.writer = None      # type: asyncio.StreamWriter\n+        self.reader = None      # type: Optional[asyncio.StreamReader]\n+        self.writer = None      # type: Optional[asyncio.StreamWriter]\n         self.read_task = None\n",
        "source_code_with_indent": "        self.xonxoff = xonxoff\n        self.reader = None      # type: asyncio.StreamReader\n        self.writer = None      # type: asyncio.StreamWriter\n        self.read_task = None\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self.xonxoff = xonxoff\n        self.reader = None      # type: Optional[asyncio.StreamReader]\n        self.writer = None      # type: Optional[asyncio.StreamWriter]\n        self.read_task = None\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "missionpinball/mpf",
    "commit": "4dbcd2cdbc16939332b76efdfeb1ae3a0ede0278",
    "filename": "mpf/platforms/base_serial_communicator.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/missionpinball-mpf/mpf/platforms/base_serial_communicator.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mpf/platforms/base_serial_communicator.py:37:8 Incompatible attribute type [8]: Attribute `writer` declared in class `BaseSerialCommunicator` has type `asyncio.streams.StreamWriter` but is used as type `None`.",
    "message": " Attribute `writer` declared in class `BaseSerialCommunicator` has type `asyncio.streams.StreamWriter` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 37,
    "warning_line": "        self.writer = None      # type: asyncio.StreamWriter",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\"\"\"Base class for serial communicator.\"\"\"\nimport asyncio\n",
        "source_code_len": 57,
        "target_code": "\"\"\"Base class for serial communicator.\"\"\"\nfrom typing import Optional\n\nimport asyncio\n",
        "target_code_len": 86,
        "diff_format": "@@ -1,2 +1,4 @@\n \"\"\"Base class for serial communicator.\"\"\"\n+from typing import Optional\n+\n import asyncio\n",
        "source_code_with_indent": "\"\"\"Base class for serial communicator.\"\"\"\nimport asyncio\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\"\"\"Base class for serial communicator.\"\"\"\nfrom typing import Optional\n\nimport asyncio\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self.xonxoff = xonxoff\n        self.reader = None      # type: asyncio.StreamReader\n        self.writer = None      # type: asyncio.StreamWriter\n        self.read_task = None\n",
        "source_code_len": 183,
        "target_code": "        self.xonxoff = xonxoff\n        self.reader = None      # type: Optional[asyncio.StreamReader]\n        self.writer = None      # type: Optional[asyncio.StreamWriter]\n        self.read_task = None\n",
        "target_code_len": 203,
        "diff_format": "@@ -35,4 +37,4 @@\n         self.xonxoff = xonxoff\n-        self.reader = None      # type: asyncio.StreamReader\n-        self.writer = None      # type: asyncio.StreamWriter\n+        self.reader = None      # type: Optional[asyncio.StreamReader]\n+        self.writer = None      # type: Optional[asyncio.StreamWriter]\n         self.read_task = None\n",
        "source_code_with_indent": "        self.xonxoff = xonxoff\n        self.reader = None      # type: asyncio.StreamReader\n        self.writer = None      # type: asyncio.StreamWriter\n        self.read_task = None\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self.xonxoff = xonxoff\n        self.reader = None      # type: Optional[asyncio.StreamReader]\n        self.writer = None      # type: Optional[asyncio.StreamWriter]\n        self.read_task = None\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "missionpinball/mpf",
    "commit": "4dbcd2cdbc16939332b76efdfeb1ae3a0ede0278",
    "filename": "mpf/platforms/interfaces/light_platform_interface.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/missionpinball-mpf/mpf/platforms/interfaces/light_platform_interface.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mpf/platforms/interfaces/light_platform_interface.py:66:8 Incompatible attribute type [8]: Attribute `task` declared in class `LightPlatformDirectFade` has type `asyncio.tasks.Task[typing.Any]` but is used as type `None`.",
    "message": " Attribute `task` declared in class `LightPlatformDirectFade` has type `asyncio.tasks.Task[typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 66,
    "warning_line": "        self.task = None    # type: asyncio.Task",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import Any\n\n",
        "source_code_len": 25,
        "target_code": "\nfrom typing import Any, Optional\n\n",
        "target_code_len": 35,
        "diff_format": "@@ -6,3 +6,3 @@\n \n-from typing import Any\n+from typing import Any, Optional\n \n",
        "source_code_with_indent": "\nfrom typing import Any\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import Any, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self.loop = loop\n        self.task = None    # type: asyncio.Task\n\n",
        "source_code_len": 75,
        "target_code": "        self.loop = loop\n        self.task = None    # type: Optional[asyncio.Task]\n\n",
        "target_code_len": 85,
        "diff_format": "@@ -65,3 +65,3 @@\n         self.loop = loop\n-        self.task = None    # type: asyncio.Task\n+        self.task = None    # type: Optional[asyncio.Task]\n \n",
        "source_code_with_indent": "        self.loop = loop\n        self.task = None    # type: asyncio.Task\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self.loop = loop\n        self.task = None    # type: Optional[asyncio.Task]\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "missionpinball/mpf",
    "commit": "4dbcd2cdbc16939332b76efdfeb1ae3a0ede0278",
    "filename": "mpf/platforms/openpixel.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/missionpinball-mpf/mpf/platforms/openpixel.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mpf/platforms/openpixel.py:33:8 Incompatible attribute type [8]: Attribute `opc_client` declared in class `OpenpixelHardwarePlatform` has type `OpenPixelClient` but is used as type `None`.",
    "message": " Attribute `opc_client` declared in class `OpenpixelHardwarePlatform` has type `OpenPixelClient` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 33,
    "warning_line": "        self.opc_client = None      # type: OpenPixelClient",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\"\"\"\nimport logging\n",
        "source_code_len": 19,
        "target_code": "\"\"\"\nfrom typing import Optional\n\nimport logging\n",
        "target_code_len": 48,
        "diff_format": "@@ -5,2 +5,4 @@\n \"\"\"\n+from typing import Optional\n+\n import logging\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\nimport logging\n",
        "target_code_with_indent": "\nfrom typing import Optional\n\nimport logging\n"
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self.log.debug(\"Configuring Open Pixel hardware interface.\")\n        self.opc_client = None      # type: OpenPixelClient\n        self.features['tickless'] = True\n",
        "source_code_len": 170,
        "target_code": "        self.log.debug(\"Configuring Open Pixel hardware interface.\")\n        self.opc_client = None      # type: Optional[OpenPixelClient]\n        self.features['tickless'] = True\n",
        "target_code_len": 180,
        "diff_format": "@@ -32,3 +34,3 @@\n         self.log.debug(\"Configuring Open Pixel hardware interface.\")\n-        self.opc_client = None      # type: OpenPixelClient\n+        self.opc_client = None      # type: Optional[OpenPixelClient]\n         self.features['tickless'] = True\n",
        "source_code_with_indent": "        self.log.debug(\"Configuring Open Pixel hardware interface.\")\n        self.opc_client = None      # type: OpenPixelClient\n        self.features['tickless'] = True\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self.log.debug(\"Configuring Open Pixel hardware interface.\")\n        self.opc_client = None      # type: Optional[OpenPixelClient]\n        self.features['tickless'] = True\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "missionpinball/mpf",
    "commit": "4dbcd2cdbc16939332b76efdfeb1ae3a0ede0278",
    "filename": "mpf/platforms/system11.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/missionpinball-mpf/mpf/platforms/system11.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mpf/platforms/system11.py:30:8 Incompatible attribute type [8]: Attribute `platform` declared in class `System11OverlayPlatform` has type `DriverPlatform` but is used as type `None`.",
    "message": " Attribute `platform` declared in class `System11OverlayPlatform` has type `DriverPlatform` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 30,
    "warning_line": "        self.platform = None            # type: DriverPlatform",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        self.platform = None            # type: DriverPlatform\n\n",
        "source_code_len": 65,
        "target_code": "\n        self.platform = None            # type: Optional[DriverPlatform]\n\n",
        "target_code_len": 75,
        "diff_format": "@@ -29,3 +29,3 @@\n \n-        self.platform = None            # type: DriverPlatform\n+        self.platform = None            # type: Optional[DriverPlatform]\n \n",
        "source_code_with_indent": "\n        self.platform = None            # type: DriverPlatform\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        self.platform = None            # type: Optional[DriverPlatform]\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]