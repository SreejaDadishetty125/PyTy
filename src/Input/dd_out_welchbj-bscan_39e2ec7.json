[
  {
    "project": "welchbj/bscan",
    "commit": "39e2ec7b9dcab179629f26afb47e55fb83d1e0a5",
    "filename": "bscan/scans.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/welchbj-bscan/bscan/scans.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bscan/scans.py:56:38 Incompatible parameter type [6]: Expected `List[ParsedService]` for 2nd positional only parameter to call `_print_unmatched_services` but got `Set[ParsedService]`.",
    "message": " Expected `List[ParsedService]` for 2nd positional only parameter to call `_print_unmatched_services` but got `Set[ParsedService]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 56,
    "warning_line": "    _print_unmatched_services(target, qs_unmatched_services)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def _print_unmatched_services(target: str,\n                              unmatched_services: List[ParsedService]) -> None:\n    \"\"\"Print information about unmatched services.\"\"\"\n",
        "source_code_len": 177,
        "target_code": "def _print_unmatched_services(target: str,\n                              unmatched_services: Set[ParsedService]) -> None:\n    \"\"\"Print information about unmatched services.\"\"\"\n",
        "target_code_len": 176,
        "diff_format": "@@ -244,3 +253,3 @@\n def _print_unmatched_services(target: str,\n-                              unmatched_services: List[ParsedService]) -> None:\n+                              unmatched_services: Set[ParsedService]) -> None:\n     \"\"\"Print information about unmatched services.\"\"\"\n",
        "source_code_with_indent": "<DED><DED>def _print_unmatched_services(target: str,\n                              unmatched_services: List[ParsedService]) -> None:\n    <IND>\"\"\"Print information about unmatched services.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED><DED>def _print_unmatched_services(target: str,\n                              unmatched_services: Set[ParsedService]) -> None:\n    <IND>\"\"\"Print information about unmatched services.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "welchbj/bscan",
    "commit": "39e2ec7b9dcab179629f26afb47e55fb83d1e0a5",
    "filename": "bscan/scans.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/welchbj-bscan/bscan/scans.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bscan/scans.py:62:21 Incompatible parameter type [6]: Expected `typing.Coroutine[typing.Any, typing.Any, None]` for 1st positional only parameter to call `list.append` but got `typing.Coroutine[typing.Any, typing.Any, Set[ParsedService]]`.",
    "message": " Expected `typing.Coroutine[typing.Any, typing.Any, None]` for 1st positional only parameter to call `list.append` but got `typing.Coroutine[typing.Any, typing.Any, Set[ParsedService]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 62,
    "warning_line": "        scans.append(run_nmap_ts(target))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import (\n    Generator,\n    List,\n",
        "source_code_len": 46,
        "target_code": "from typing import (\n    Any,\n    AsyncGenerator,\n    Coroutine,\n    List,\n",
        "target_code_len": 75,
        "diff_format": "@@ -8,3 +8,5 @@\n from typing import (\n-    Generator,\n+    Any,\n+    AsyncGenerator,\n+    Coroutine,\n     List,\n",
        "source_code_with_indent": "from typing import (\n    Generator,\n    List,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import (\n    Any,\n    AsyncGenerator,\n    Coroutine,\n    List,\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    # run the ts and scans based on qs-found ports\n    scan_cmds = [js.build_scans() for js in qs_joined_services]\n    scans = [run_service_s(target, cmd) for cmd in chain(*scan_cmds)]\n    if do_thorough:\n",
        "source_code_len": 205,
        "target_code": "    # run the ts and scans based on qs-found ports\n    scan_cmds: List[List[str]] = \\\n        [js.build_scans() for js in qs_joined_services]\n    scans: List[Coroutine[Any, Any, Any]] = \\\n        [run_service_s(target, cmd) for cmd in chain(*scan_cmds)]\n    if do_thorough:\n",
        "target_code_len": 274,
        "diff_format": "@@ -58,4 +60,6 @@\n     # run the ts and scans based on qs-found ports\n-    scan_cmds = [js.build_scans() for js in qs_joined_services]\n-    scans = [run_service_s(target, cmd) for cmd in chain(*scan_cmds)]\n+    scan_cmds: List[List[str]] = \\\n+        [js.build_scans() for js in qs_joined_services]\n+    scans: List[Coroutine[Any, Any, Any]] = \\\n+        [run_service_s(target, cmd) for cmd in chain(*scan_cmds)]\n     if do_thorough:\n",
        "source_code_with_indent": "    # run the ts and scans based on qs-found ports\n    scan_cmds = [js.build_scans() for js in qs_joined_services]\n    scans = [run_service_s(target, cmd) for cmd in chain(*scan_cmds)]\n    if do_thorough:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent_exact_match": false,
        "target_code_with_indent": "    # run the ts and scans based on qs-found ports\n    scan_cmds: List[List[str]] =        [js.build_scans() for js in qs_joined_services]\n    scans: List[Coroutine[Any, Any, Any]] =        [run_service_s(target, cmd) for cmd in chain(*scan_cmds)]\n    if do_thorough:\n"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nasync def proc_spawn(target: str, cmd: str) -> Generator[str, None, None]:\n    \"\"\"Asynchronously yield lines from stdout of a spawned subprocess.\"\"\"\n",
        "source_code_len": 150,
        "target_code": "\nasync def proc_spawn(target: str, cmd: str) -> AsyncGenerator[str, None]:\n    \"\"\"Asynchronously yield lines from stdout of a spawned subprocess.\"\"\"\n",
        "target_code_len": 149,
        "diff_format": "@@ -172,3 +177,3 @@\n \n-async def proc_spawn(target: str, cmd: str) -> Generator[str, None, None]:\n+async def proc_spawn(target: str, cmd: str) -> AsyncGenerator[str, None]:\n     \"\"\"Asynchronously yield lines from stdout of a spawned subprocess.\"\"\"\n",
        "source_code_with_indent": "\n<DED>async def proc_spawn(target: str, cmd: str) -> Generator[str, None, None]:\n    <IND>\"\"\"Asynchronously yield lines from stdout of a spawned subprocess.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>async def proc_spawn(target: str, cmd: str) -> AsyncGenerator[str, None]:\n    <IND>\"\"\"Asynchronously yield lines from stdout of a spawned subprocess.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "welchbj/bscan",
    "commit": "39e2ec7b9dcab179629f26afb47e55fb83d1e0a5",
    "filename": "bscan/scans.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/welchbj-bscan/bscan/scans.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bscan/scans.py:69:19 Unsupported operand [58]: `-` is not supported for operand types `typing.Optional[Set[typing.Any]]` and `Set[ParsedService]`.",
    "message": " `-` is not supported for operand types `typing.Optional[Set[typing.Any]]` and `Set[ParsedService]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 69,
    "warning_line": "    new_services = ts_parsed_services - qs_parsed_services",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import (\n    Generator,\n    List,\n",
        "source_code_len": 46,
        "target_code": "from typing import (\n    Any,\n    AsyncGenerator,\n    Coroutine,\n    List,\n",
        "target_code_len": 75,
        "diff_format": "@@ -8,3 +8,5 @@\n from typing import (\n-    Generator,\n+    Any,\n+    AsyncGenerator,\n+    Coroutine,\n     List,\n",
        "source_code_with_indent": "from typing import (\n    Generator,\n    List,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import (\n    Any,\n    AsyncGenerator,\n    Coroutine,\n    List,\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    # run the ts and scans based on qs-found ports\n    scan_cmds = [js.build_scans() for js in qs_joined_services]\n    scans = [run_service_s(target, cmd) for cmd in chain(*scan_cmds)]\n    if do_thorough:\n",
        "source_code_len": 205,
        "target_code": "    # run the ts and scans based on qs-found ports\n    scan_cmds: List[List[str]] = \\\n        [js.build_scans() for js in qs_joined_services]\n    scans: List[Coroutine[Any, Any, Any]] = \\\n        [run_service_s(target, cmd) for cmd in chain(*scan_cmds)]\n    if do_thorough:\n",
        "target_code_len": 274,
        "diff_format": "@@ -58,4 +60,6 @@\n     # run the ts and scans based on qs-found ports\n-    scan_cmds = [js.build_scans() for js in qs_joined_services]\n-    scans = [run_service_s(target, cmd) for cmd in chain(*scan_cmds)]\n+    scan_cmds: List[List[str]] = \\\n+        [js.build_scans() for js in qs_joined_services]\n+    scans: List[Coroutine[Any, Any, Any]] = \\\n+        [run_service_s(target, cmd) for cmd in chain(*scan_cmds)]\n     if do_thorough:\n",
        "source_code_with_indent": "    # run the ts and scans based on qs-found ports\n    scan_cmds = [js.build_scans() for js in qs_joined_services]\n    scans = [run_service_s(target, cmd) for cmd in chain(*scan_cmds)]\n    if do_thorough:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent_exact_match": false,
        "target_code_with_indent": "    # run the ts and scans based on qs-found ports\n    scan_cmds: List[List[str]] =        [js.build_scans() for js in qs_joined_services]\n    scans: List[Coroutine[Any, Any, Any]] =        [run_service_s(target, cmd) for cmd in chain(*scan_cmds)]\n    if do_thorough:\n"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nasync def proc_spawn(target: str, cmd: str) -> Generator[str, None, None]:\n    \"\"\"Asynchronously yield lines from stdout of a spawned subprocess.\"\"\"\n",
        "source_code_len": 150,
        "target_code": "\nasync def proc_spawn(target: str, cmd: str) -> AsyncGenerator[str, None]:\n    \"\"\"Asynchronously yield lines from stdout of a spawned subprocess.\"\"\"\n",
        "target_code_len": 149,
        "diff_format": "@@ -172,3 +177,3 @@\n \n-async def proc_spawn(target: str, cmd: str) -> Generator[str, None, None]:\n+async def proc_spawn(target: str, cmd: str) -> AsyncGenerator[str, None]:\n     \"\"\"Asynchronously yield lines from stdout of a spawned subprocess.\"\"\"\n",
        "source_code_with_indent": "\n<DED>async def proc_spawn(target: str, cmd: str) -> Generator[str, None, None]:\n    <IND>\"\"\"Asynchronously yield lines from stdout of a spawned subprocess.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>async def proc_spawn(target: str, cmd: str) -> AsyncGenerator[str, None]:\n    <IND>\"\"\"Asynchronously yield lines from stdout of a spawned subprocess.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "welchbj/bscan",
    "commit": "39e2ec7b9dcab179629f26afb47e55fb83d1e0a5",
    "filename": "bscan/scans.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/welchbj-bscan/bscan/scans.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bscan/scans.py:74:42 Incompatible parameter type [6]: Expected `List[ParsedService]` for 2nd positional only parameter to call `_print_unmatched_services` but got `Set[ParsedService]`.",
    "message": " Expected `List[ParsedService]` for 2nd positional only parameter to call `_print_unmatched_services` but got `Set[ParsedService]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 74,
    "warning_line": "        _print_unmatched_services(target, ts_unmatched_services)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def _print_unmatched_services(target: str,\n                              unmatched_services: List[ParsedService]) -> None:\n    \"\"\"Print information about unmatched services.\"\"\"\n",
        "source_code_len": 177,
        "target_code": "def _print_unmatched_services(target: str,\n                              unmatched_services: Set[ParsedService]) -> None:\n    \"\"\"Print information about unmatched services.\"\"\"\n",
        "target_code_len": 176,
        "diff_format": "@@ -244,3 +253,3 @@\n def _print_unmatched_services(target: str,\n-                              unmatched_services: List[ParsedService]) -> None:\n+                              unmatched_services: Set[ParsedService]) -> None:\n     \"\"\"Print information about unmatched services.\"\"\"\n",
        "source_code_with_indent": "<DED><DED>def _print_unmatched_services(target: str,\n                              unmatched_services: List[ParsedService]) -> None:\n    <IND>\"\"\"Print information about unmatched services.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED><DED>def _print_unmatched_services(target: str,\n                              unmatched_services: Set[ParsedService]) -> None:\n    <IND>\"\"\"Print information about unmatched services.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "welchbj/bscan",
    "commit": "39e2ec7b9dcab179629f26afb47e55fb83d1e0a5",
    "filename": "bscan/scans.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/welchbj-bscan/bscan/scans.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bscan/scans.py:181:8 Incompatible return type [7]: Expected `Generator[str, None, None]` but got `typing.AsyncGenerator[typing.Any, None]`.",
    "message": " Expected `Generator[str, None, None]` but got `typing.AsyncGenerator[typing.Any, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 181,
    "warning_line": "        yield line.decode('utf-8').strip()",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import (\n    Generator,\n    List,\n",
        "source_code_len": 46,
        "target_code": "from typing import (\n    Any,\n    AsyncGenerator,\n    Coroutine,\n    List,\n",
        "target_code_len": 75,
        "diff_format": "@@ -8,3 +8,5 @@\n from typing import (\n-    Generator,\n+    Any,\n+    AsyncGenerator,\n+    Coroutine,\n     List,\n",
        "source_code_with_indent": "from typing import (\n    Generator,\n    List,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import (\n    Any,\n    AsyncGenerator,\n    Coroutine,\n    List,\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    # run the ts and scans based on qs-found ports\n    scan_cmds = [js.build_scans() for js in qs_joined_services]\n    scans = [run_service_s(target, cmd) for cmd in chain(*scan_cmds)]\n    if do_thorough:\n",
        "source_code_len": 205,
        "target_code": "    # run the ts and scans based on qs-found ports\n    scan_cmds: List[List[str]] = \\\n        [js.build_scans() for js in qs_joined_services]\n    scans: List[Coroutine[Any, Any, Any]] = \\\n        [run_service_s(target, cmd) for cmd in chain(*scan_cmds)]\n    if do_thorough:\n",
        "target_code_len": 274,
        "diff_format": "@@ -58,4 +60,6 @@\n     # run the ts and scans based on qs-found ports\n-    scan_cmds = [js.build_scans() for js in qs_joined_services]\n-    scans = [run_service_s(target, cmd) for cmd in chain(*scan_cmds)]\n+    scan_cmds: List[List[str]] = \\\n+        [js.build_scans() for js in qs_joined_services]\n+    scans: List[Coroutine[Any, Any, Any]] = \\\n+        [run_service_s(target, cmd) for cmd in chain(*scan_cmds)]\n     if do_thorough:\n",
        "source_code_with_indent": "    # run the ts and scans based on qs-found ports\n    scan_cmds = [js.build_scans() for js in qs_joined_services]\n    scans = [run_service_s(target, cmd) for cmd in chain(*scan_cmds)]\n    if do_thorough:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent_exact_match": false,
        "target_code_with_indent": "    # run the ts and scans based on qs-found ports\n    scan_cmds: List[List[str]] =        [js.build_scans() for js in qs_joined_services]\n    scans: List[Coroutine[Any, Any, Any]] =        [run_service_s(target, cmd) for cmd in chain(*scan_cmds)]\n    if do_thorough:\n"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nasync def proc_spawn(target: str, cmd: str) -> Generator[str, None, None]:\n    \"\"\"Asynchronously yield lines from stdout of a spawned subprocess.\"\"\"\n",
        "source_code_len": 150,
        "target_code": "\nasync def proc_spawn(target: str, cmd: str) -> AsyncGenerator[str, None]:\n    \"\"\"Asynchronously yield lines from stdout of a spawned subprocess.\"\"\"\n",
        "target_code_len": 149,
        "diff_format": "@@ -172,3 +177,3 @@\n \n-async def proc_spawn(target: str, cmd: str) -> Generator[str, None, None]:\n+async def proc_spawn(target: str, cmd: str) -> AsyncGenerator[str, None]:\n     \"\"\"Asynchronously yield lines from stdout of a spawned subprocess.\"\"\"\n",
        "source_code_with_indent": "\n<DED>async def proc_spawn(target: str, cmd: str) -> Generator[str, None, None]:\n    <IND>\"\"\"Asynchronously yield lines from stdout of a spawned subprocess.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>async def proc_spawn(target: str, cmd: str) -> AsyncGenerator[str, None]:\n    <IND>\"\"\"Asynchronously yield lines from stdout of a spawned subprocess.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "welchbj/bscan",
    "commit": "39e2ec7b9dcab179629f26afb47e55fb83d1e0a5",
    "filename": "bscan/scans.py",
    "min_patch_found": false,
    "full_warning_msg": "bscan/scans.py:224:29 Incompatible parameter type [6]: Expected `Variable[typing.AnyStr <: [str, bytes]]` for 1st positional only parameter to call `re.finditer` but got `object`.",
    "exception": "too many values to unpack (expected 2)",
    "dd_fail": true
  }
]