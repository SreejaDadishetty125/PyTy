[
  {
    "project": "pytorch/ignite",
    "commit": "96689c5f010c39115b76eaa3281af10fbc631ab0",
    "filename": "ignite/contrib/engines/common.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pytorch-ignite/ignite/contrib/engines/common.py",
    "file_hunks_size": 25,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ignite/contrib/engines/common.py:167:49 Incompatible parameter type [6]: Expected `Union[typing.Callable[..., typing.Any], BaseSaveHandler]` for 2nd positional only parameter to call `ignite.handlers.checkpoint.Checkpoint.__init__` but got `Union[typing.Callable[..., typing.Any], None, BaseSaveHandler]`.",
    "message": " Expected `Union[typing.Callable[..., typing.Any], BaseSaveHandler]` for 2nd positional only parameter to call `ignite.handlers.checkpoint.Checkpoint.__init__` but got `Union[typing.Callable[..., typing.Any], None, BaseSaveHandler]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 167,
    "warning_line": "        checkpoint_handler = Checkpoint(to_save, save_handler, filename_prefix=\"training\", **kwargs)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from functools import partial\nfrom typing import Any, Callable, Dict, Iterable, Mapping, Optional, Sequence, Union\n\n",
        "source_code_len": 116,
        "target_code": "from functools import partial\nfrom typing import Any, Callable, Dict, Iterable, Mapping, Optional, Sequence, Tuple, Union, cast\n\n",
        "target_code_len": 129,
        "diff_format": "@@ -3,3 +3,3 @@\n from functools import partial\n-from typing import Any, Callable, Dict, Iterable, Mapping, Optional, Sequence, Union\n+from typing import Any, Callable, Dict, Iterable, Mapping, Optional, Sequence, Tuple, Union, cast\n \n",
        "source_code_with_indent": "from functools import partial\nfrom typing import Any, Callable, Dict, Iterable, Mapping, Optional, Sequence, Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from functools import partial\nfrom typing import Any, Callable, Dict, Iterable, Mapping, Optional, Sequence, Tuple, Union, cast\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        checkpoint_handler = Checkpoint(to_save, save_handler, filename_prefix=\"training\", **kwargs)\n        trainer.add_event_handler(Events.ITERATION_COMPLETED(every=save_every_iters), checkpoint_handler)\n",
        "source_code_len": 208,
        "target_code": "\n        checkpoint_handler = Checkpoint(\n            to_save, cast(Union[Callable, BaseSaveHandler], save_handler), filename_prefix=\"training\", **kwargs\n        )\n        trainer.add_event_handler(Events.ITERATION_COMPLETED(every=save_every_iters), checkpoint_handler)\n",
        "target_code_len": 270,
        "diff_format": "@@ -166,3 +183,5 @@\n \n-        checkpoint_handler = Checkpoint(to_save, save_handler, filename_prefix=\"training\", **kwargs)\n+        checkpoint_handler = Checkpoint(\n+            to_save, cast(Union[Callable, BaseSaveHandler], save_handler), filename_prefix=\"training\", **kwargs\n+        )\n         trainer.add_event_handler(Events.ITERATION_COMPLETED(every=save_every_iters), checkpoint_handler)\n",
        "source_code_with_indent": "\n        <DED>checkpoint_handler = Checkpoint(to_save, save_handler, filename_prefix=\"training\", **kwargs)\n        trainer.add_event_handler(Events.ITERATION_COMPLETED(every=save_every_iters), checkpoint_handler)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        <DED>checkpoint_handler = Checkpoint(\n            to_save, cast(Union[Callable, BaseSaveHandler], save_handler), filename_prefix=\"training\", **kwargs\n        )\n        trainer.add_event_handler(Events.ITERATION_COMPLETED(every=save_every_iters), checkpoint_handler)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pytorch/ignite",
    "commit": "96689c5f010c39115b76eaa3281af10fbc631ab0",
    "filename": "ignite/contrib/engines/common.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pytorch-ignite/ignite/contrib/engines/common.py",
    "file_hunks_size": 25,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "ignite/contrib/engines/common.py:171:46 Incompatible parameter type [6]: Expected `Union[ignite.engine.events.EventEnum, str]` for 3rd parameter `event_name` to call `ignite.contrib.metrics.gpu_info.GpuInfo.attach` but got `ignite.engine.events.CallableEventWithFilter`.",
    "message": " Expected `Union[ignite.engine.events.EventEnum, str]` for 3rd parameter `event_name` to call `ignite.contrib.metrics.gpu_info.GpuInfo.attach` but got `ignite.engine.events.CallableEventWithFilter`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 171,
    "warning_line": "        GpuInfo().attach(trainer, name=\"gpu\", event_name=Events.ITERATION_COMPLETED(every=log_every_iters))",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "    if with_gpu_stats:\n        GpuInfo().attach(trainer, name=\"gpu\", event_name=Events.ITERATION_COMPLETED(every=log_every_iters))\n\n",
        "source_code_len": 132,
        "target_code": "    if with_gpu_stats:\n        GpuInfo().attach(\n            trainer, name=\"gpu\", event_name=Events.ITERATION_COMPLETED(every=log_every_iters)  # type: ignore[arg-type]\n        )\n\n",
        "target_code_len": 180,
        "diff_format": "@@ -170,3 +189,5 @@\n     if with_gpu_stats:\n-        GpuInfo().attach(trainer, name=\"gpu\", event_name=Events.ITERATION_COMPLETED(every=log_every_iters))\n+        GpuInfo().attach(\n+            trainer, name=\"gpu\", event_name=Events.ITERATION_COMPLETED(every=log_every_iters)  # type: ignore[arg-type]\n+        )\n \n",
        "source_code_with_indent": "    <DED>if with_gpu_stats:\n        <IND>GpuInfo().attach(trainer, name=\"gpu\", event_name=Events.ITERATION_COMPLETED(every=log_every_iters))\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>if with_gpu_stats:\n        <IND>GpuInfo().attach(\n            trainer, name=\"gpu\", event_name=Events.ITERATION_COMPLETED(every=log_every_iters)  # type: ignore[arg-type]\n        )\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pytorch/ignite",
    "commit": "96689c5f010c39115b76eaa3281af10fbc631ab0",
    "filename": "ignite/contrib/engines/common.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pytorch-ignite/ignite/contrib/engines/common.py",
    "file_hunks_size": 25,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ignite/contrib/engines/common.py:196:45 Incompatible parameter type [6]: Expected `ignite.engine.events.Events` for 3rd parameter `event_name` to call `ignite.contrib.handlers.tqdm_logger.ProgressBar.attach` but got `ignite.engine.events.CallableEventWithFilter`.",
    "message": " Expected `ignite.engine.events.Events` for 3rd parameter `event_name` to call `ignite.contrib.handlers.tqdm_logger.ProgressBar.attach` but got `ignite.engine.events.CallableEventWithFilter`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 196,
    "warning_line": "                trainer, metric_names=\"all\", event_name=Events.ITERATION_COMPLETED(every=log_every_iters)"
  },
  {
    "project": "pytorch/ignite",
    "commit": "96689c5f010c39115b76eaa3281af10fbc631ab0",
    "filename": "ignite/contrib/engines/common.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pytorch-ignite/ignite/contrib/engines/common.py",
    "file_hunks_size": 25,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ignite/contrib/engines/common.py:336:48 Incompatible parameter type [6]: Expected `Union[Dict[str, ignite.engine.engine.Engine], ignite.engine.engine.Engine]` for 4th positional only parameter to call `_setup_logging` but got `Union[None, Dict[str, ignite.engine.engine.Engine], ignite.engine.engine.Engine]`.",
    "message": " Expected `Union[Dict[str, ignite.engine.engine.Engine], ignite.engine.engine.Engine]` for 4th positional only parameter to call `_setup_logging` but got `Union[None, Dict[str, ignite.engine.engine.Engine], ignite.engine.engine.Engine]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 336,
    "warning_line": "    _setup_logging(logger, trainer, optimizers, evaluators, log_every_iters)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    trainer: Engine,\n    optimizers: Union[Optimizer, Dict[str, Optimizer]],\n    evaluators: Union[Engine, Dict[str, Engine]],\n    log_every_iters: int,\n):\n    if optimizers is not None:\n",
        "source_code_len": 187,
        "target_code": "    trainer: Engine,\n    optimizers: Optional[Union[Optimizer, Dict[str, Optimizer], Dict[None, Optimizer]]],\n    evaluators: Optional[Union[Engine, Dict[str, Engine]]],\n    log_every_iters: int,\n) -> None:\n    if optimizers is not None:\n",
        "target_code_len": 238,
        "diff_format": "@@ -264,6 +285,6 @@\n     trainer: Engine,\n-    optimizers: Union[Optimizer, Dict[str, Optimizer]],\n-    evaluators: Union[Engine, Dict[str, Engine]],\n+    optimizers: Optional[Union[Optimizer, Dict[str, Optimizer], Dict[None, Optimizer]]],\n+    evaluators: Optional[Union[Engine, Dict[str, Engine]]],\n     log_every_iters: int,\n-):\n+) -> None:\n     if optimizers is not None:\n",
        "source_code_with_indent": "    trainer: Engine,\n    optimizers: Union[Optimizer, Dict[str, Optimizer]],\n    evaluators: Union[Engine, Dict[str, Engine]],\n    log_every_iters: int,\n):\n    <IND>if optimizers is not None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    trainer: Engine,\n    optimizers: Optional[Union[Optimizer, Dict[str, Optimizer], Dict[None, Optimizer]]],\n    evaluators: Optional[Union[Engine, Dict[str, Engine]]],\n    log_every_iters: int,\n) -> None:\n    <IND>if optimizers is not None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pytorch/ignite",
    "commit": "96689c5f010c39115b76eaa3281af10fbc631ab0",
    "filename": "ignite/contrib/engines/common.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pytorch-ignite/ignite/contrib/engines/common.py",
    "file_hunks_size": 25,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ignite/contrib/engines/common.py:367:48 Incompatible parameter type [6]: Expected `Union[Dict[str, ignite.engine.engine.Engine], ignite.engine.engine.Engine]` for 4th positional only parameter to call `_setup_logging` but got `Union[None, Dict[str, ignite.engine.engine.Engine], ignite.engine.engine.Engine]`.",
    "message": " Expected `Union[Dict[str, ignite.engine.engine.Engine], ignite.engine.engine.Engine]` for 4th positional only parameter to call `_setup_logging` but got `Union[None, Dict[str, ignite.engine.engine.Engine], ignite.engine.engine.Engine]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 367,
    "warning_line": "    _setup_logging(logger, trainer, optimizers, evaluators, log_every_iters)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    trainer: Engine,\n    optimizers: Union[Optimizer, Dict[str, Optimizer]],\n    evaluators: Union[Engine, Dict[str, Engine]],\n    log_every_iters: int,\n):\n    if optimizers is not None:\n",
        "source_code_len": 187,
        "target_code": "    trainer: Engine,\n    optimizers: Optional[Union[Optimizer, Dict[str, Optimizer], Dict[None, Optimizer]]],\n    evaluators: Optional[Union[Engine, Dict[str, Engine]]],\n    log_every_iters: int,\n) -> None:\n    if optimizers is not None:\n",
        "target_code_len": 238,
        "diff_format": "@@ -264,6 +285,6 @@\n     trainer: Engine,\n-    optimizers: Union[Optimizer, Dict[str, Optimizer]],\n-    evaluators: Union[Engine, Dict[str, Engine]],\n+    optimizers: Optional[Union[Optimizer, Dict[str, Optimizer], Dict[None, Optimizer]]],\n+    evaluators: Optional[Union[Engine, Dict[str, Engine]]],\n     log_every_iters: int,\n-):\n+) -> None:\n     if optimizers is not None:\n",
        "source_code_with_indent": "    trainer: Engine,\n    optimizers: Union[Optimizer, Dict[str, Optimizer]],\n    evaluators: Union[Engine, Dict[str, Engine]],\n    log_every_iters: int,\n):\n    <IND>if optimizers is not None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    trainer: Engine,\n    optimizers: Optional[Union[Optimizer, Dict[str, Optimizer], Dict[None, Optimizer]]],\n    evaluators: Optional[Union[Engine, Dict[str, Engine]]],\n    log_every_iters: int,\n) -> None:\n    <IND>if optimizers is not None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pytorch/ignite",
    "commit": "96689c5f010c39115b76eaa3281af10fbc631ab0",
    "filename": "ignite/contrib/engines/common.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pytorch-ignite/ignite/contrib/engines/common.py",
    "file_hunks_size": 25,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ignite/contrib/engines/common.py:398:48 Incompatible parameter type [6]: Expected `Union[Dict[str, ignite.engine.engine.Engine], ignite.engine.engine.Engine]` for 4th positional only parameter to call `_setup_logging` but got `Union[None, Dict[str, ignite.engine.engine.Engine], ignite.engine.engine.Engine]`.",
    "message": " Expected `Union[Dict[str, ignite.engine.engine.Engine], ignite.engine.engine.Engine]` for 4th positional only parameter to call `_setup_logging` but got `Union[None, Dict[str, ignite.engine.engine.Engine], ignite.engine.engine.Engine]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 398,
    "warning_line": "    _setup_logging(logger, trainer, optimizers, evaluators, log_every_iters)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    trainer: Engine,\n    optimizers: Union[Optimizer, Dict[str, Optimizer]],\n    evaluators: Union[Engine, Dict[str, Engine]],\n    log_every_iters: int,\n):\n    if optimizers is not None:\n",
        "source_code_len": 187,
        "target_code": "    trainer: Engine,\n    optimizers: Optional[Union[Optimizer, Dict[str, Optimizer], Dict[None, Optimizer]]],\n    evaluators: Optional[Union[Engine, Dict[str, Engine]]],\n    log_every_iters: int,\n) -> None:\n    if optimizers is not None:\n",
        "target_code_len": 238,
        "diff_format": "@@ -264,6 +285,6 @@\n     trainer: Engine,\n-    optimizers: Union[Optimizer, Dict[str, Optimizer]],\n-    evaluators: Union[Engine, Dict[str, Engine]],\n+    optimizers: Optional[Union[Optimizer, Dict[str, Optimizer], Dict[None, Optimizer]]],\n+    evaluators: Optional[Union[Engine, Dict[str, Engine]]],\n     log_every_iters: int,\n-):\n+) -> None:\n     if optimizers is not None:\n",
        "source_code_with_indent": "    trainer: Engine,\n    optimizers: Union[Optimizer, Dict[str, Optimizer]],\n    evaluators: Union[Engine, Dict[str, Engine]],\n    log_every_iters: int,\n):\n    <IND>if optimizers is not None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    trainer: Engine,\n    optimizers: Optional[Union[Optimizer, Dict[str, Optimizer], Dict[None, Optimizer]]],\n    evaluators: Optional[Union[Engine, Dict[str, Engine]]],\n    log_every_iters: int,\n) -> None:\n    <IND>if optimizers is not None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pytorch/ignite",
    "commit": "96689c5f010c39115b76eaa3281af10fbc631ab0",
    "filename": "ignite/contrib/engines/common.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pytorch-ignite/ignite/contrib/engines/common.py",
    "file_hunks_size": 25,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ignite/contrib/engines/common.py:429:48 Incompatible parameter type [6]: Expected `Union[Dict[str, ignite.engine.engine.Engine], ignite.engine.engine.Engine]` for 4th positional only parameter to call `_setup_logging` but got `Union[None, Dict[str, ignite.engine.engine.Engine], ignite.engine.engine.Engine]`.",
    "message": " Expected `Union[Dict[str, ignite.engine.engine.Engine], ignite.engine.engine.Engine]` for 4th positional only parameter to call `_setup_logging` but got `Union[None, Dict[str, ignite.engine.engine.Engine], ignite.engine.engine.Engine]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 429,
    "warning_line": "    _setup_logging(logger, trainer, optimizers, evaluators, log_every_iters)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    trainer: Engine,\n    optimizers: Union[Optimizer, Dict[str, Optimizer]],\n    evaluators: Union[Engine, Dict[str, Engine]],\n    log_every_iters: int,\n):\n    if optimizers is not None:\n",
        "source_code_len": 187,
        "target_code": "    trainer: Engine,\n    optimizers: Optional[Union[Optimizer, Dict[str, Optimizer], Dict[None, Optimizer]]],\n    evaluators: Optional[Union[Engine, Dict[str, Engine]]],\n    log_every_iters: int,\n) -> None:\n    if optimizers is not None:\n",
        "target_code_len": 238,
        "diff_format": "@@ -264,6 +285,6 @@\n     trainer: Engine,\n-    optimizers: Union[Optimizer, Dict[str, Optimizer]],\n-    evaluators: Union[Engine, Dict[str, Engine]],\n+    optimizers: Optional[Union[Optimizer, Dict[str, Optimizer], Dict[None, Optimizer]]],\n+    evaluators: Optional[Union[Engine, Dict[str, Engine]]],\n     log_every_iters: int,\n-):\n+) -> None:\n     if optimizers is not None:\n",
        "source_code_with_indent": "    trainer: Engine,\n    optimizers: Union[Optimizer, Dict[str, Optimizer]],\n    evaluators: Union[Engine, Dict[str, Engine]],\n    log_every_iters: int,\n):\n    <IND>if optimizers is not None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    trainer: Engine,\n    optimizers: Optional[Union[Optimizer, Dict[str, Optimizer], Dict[None, Optimizer]]],\n    evaluators: Optional[Union[Engine, Dict[str, Engine]]],\n    log_every_iters: int,\n) -> None:\n    <IND>if optimizers is not None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pytorch/ignite",
    "commit": "96689c5f010c39115b76eaa3281af10fbc631ab0",
    "filename": "ignite/contrib/engines/common.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pytorch-ignite/ignite/contrib/engines/common.py",
    "file_hunks_size": 25,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ignite/contrib/engines/common.py:460:48 Incompatible parameter type [6]: Expected `Union[Dict[str, ignite.engine.engine.Engine], ignite.engine.engine.Engine]` for 4th positional only parameter to call `_setup_logging` but got `Union[None, Dict[str, ignite.engine.engine.Engine], ignite.engine.engine.Engine]`.",
    "message": " Expected `Union[Dict[str, ignite.engine.engine.Engine], ignite.engine.engine.Engine]` for 4th positional only parameter to call `_setup_logging` but got `Union[None, Dict[str, ignite.engine.engine.Engine], ignite.engine.engine.Engine]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 460,
    "warning_line": "    _setup_logging(logger, trainer, optimizers, evaluators, log_every_iters)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    trainer: Engine,\n    optimizers: Union[Optimizer, Dict[str, Optimizer]],\n    evaluators: Union[Engine, Dict[str, Engine]],\n    log_every_iters: int,\n):\n    if optimizers is not None:\n",
        "source_code_len": 187,
        "target_code": "    trainer: Engine,\n    optimizers: Optional[Union[Optimizer, Dict[str, Optimizer], Dict[None, Optimizer]]],\n    evaluators: Optional[Union[Engine, Dict[str, Engine]]],\n    log_every_iters: int,\n) -> None:\n    if optimizers is not None:\n",
        "target_code_len": 238,
        "diff_format": "@@ -264,6 +285,6 @@\n     trainer: Engine,\n-    optimizers: Union[Optimizer, Dict[str, Optimizer]],\n-    evaluators: Union[Engine, Dict[str, Engine]],\n+    optimizers: Optional[Union[Optimizer, Dict[str, Optimizer], Dict[None, Optimizer]]],\n+    evaluators: Optional[Union[Engine, Dict[str, Engine]]],\n     log_every_iters: int,\n-):\n+) -> None:\n     if optimizers is not None:\n",
        "source_code_with_indent": "    trainer: Engine,\n    optimizers: Union[Optimizer, Dict[str, Optimizer]],\n    evaluators: Union[Engine, Dict[str, Engine]],\n    log_every_iters: int,\n):\n    <IND>if optimizers is not None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    trainer: Engine,\n    optimizers: Optional[Union[Optimizer, Dict[str, Optimizer], Dict[None, Optimizer]]],\n    evaluators: Optional[Union[Engine, Dict[str, Engine]]],\n    log_every_iters: int,\n) -> None:\n    <IND>if optimizers is not None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pytorch/ignite",
    "commit": "96689c5f010c39115b76eaa3281af10fbc631ab0",
    "filename": "ignite/contrib/engines/common.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pytorch-ignite/ignite/contrib/engines/common.py",
    "file_hunks_size": 25,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ignite/contrib/engines/common.py:491:48 Incompatible parameter type [6]: Expected `Union[Dict[str, ignite.engine.engine.Engine], ignite.engine.engine.Engine]` for 4th positional only parameter to call `_setup_logging` but got `Union[None, Dict[str, ignite.engine.engine.Engine], ignite.engine.engine.Engine]`.",
    "message": " Expected `Union[Dict[str, ignite.engine.engine.Engine], ignite.engine.engine.Engine]` for 4th positional only parameter to call `_setup_logging` but got `Union[None, Dict[str, ignite.engine.engine.Engine], ignite.engine.engine.Engine]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 491,
    "warning_line": "    _setup_logging(logger, trainer, optimizers, evaluators, log_every_iters)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    trainer: Engine,\n    optimizers: Union[Optimizer, Dict[str, Optimizer]],\n    evaluators: Union[Engine, Dict[str, Engine]],\n    log_every_iters: int,\n):\n    if optimizers is not None:\n",
        "source_code_len": 187,
        "target_code": "    trainer: Engine,\n    optimizers: Optional[Union[Optimizer, Dict[str, Optimizer], Dict[None, Optimizer]]],\n    evaluators: Optional[Union[Engine, Dict[str, Engine]]],\n    log_every_iters: int,\n) -> None:\n    if optimizers is not None:\n",
        "target_code_len": 238,
        "diff_format": "@@ -264,6 +285,6 @@\n     trainer: Engine,\n-    optimizers: Union[Optimizer, Dict[str, Optimizer]],\n-    evaluators: Union[Engine, Dict[str, Engine]],\n+    optimizers: Optional[Union[Optimizer, Dict[str, Optimizer], Dict[None, Optimizer]]],\n+    evaluators: Optional[Union[Engine, Dict[str, Engine]]],\n     log_every_iters: int,\n-):\n+) -> None:\n     if optimizers is not None:\n",
        "source_code_with_indent": "    trainer: Engine,\n    optimizers: Union[Optimizer, Dict[str, Optimizer]],\n    evaluators: Union[Engine, Dict[str, Engine]],\n    log_every_iters: int,\n):\n    <IND>if optimizers is not None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    trainer: Engine,\n    optimizers: Optional[Union[Optimizer, Dict[str, Optimizer], Dict[None, Optimizer]]],\n    evaluators: Optional[Union[Engine, Dict[str, Engine]]],\n    log_every_iters: int,\n) -> None:\n    <IND>if optimizers is not None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pytorch/ignite",
    "commit": "96689c5f010c39115b76eaa3281af10fbc631ab0",
    "filename": "ignite/contrib/engines/common.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pytorch-ignite/ignite/contrib/engines/common.py",
    "file_hunks_size": 25,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ignite/contrib/engines/common.py:522:48 Incompatible parameter type [6]: Expected `Union[Dict[str, ignite.engine.engine.Engine], ignite.engine.engine.Engine]` for 4th positional only parameter to call `_setup_logging` but got `Union[None, Dict[str, ignite.engine.engine.Engine], ignite.engine.engine.Engine]`.",
    "message": " Expected `Union[Dict[str, ignite.engine.engine.Engine], ignite.engine.engine.Engine]` for 4th positional only parameter to call `_setup_logging` but got `Union[None, Dict[str, ignite.engine.engine.Engine], ignite.engine.engine.Engine]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 522,
    "warning_line": "    _setup_logging(logger, trainer, optimizers, evaluators, log_every_iters)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    trainer: Engine,\n    optimizers: Union[Optimizer, Dict[str, Optimizer]],\n    evaluators: Union[Engine, Dict[str, Engine]],\n    log_every_iters: int,\n):\n    if optimizers is not None:\n",
        "source_code_len": 187,
        "target_code": "    trainer: Engine,\n    optimizers: Optional[Union[Optimizer, Dict[str, Optimizer], Dict[None, Optimizer]]],\n    evaluators: Optional[Union[Engine, Dict[str, Engine]]],\n    log_every_iters: int,\n) -> None:\n    if optimizers is not None:\n",
        "target_code_len": 238,
        "diff_format": "@@ -264,6 +285,6 @@\n     trainer: Engine,\n-    optimizers: Union[Optimizer, Dict[str, Optimizer]],\n-    evaluators: Union[Engine, Dict[str, Engine]],\n+    optimizers: Optional[Union[Optimizer, Dict[str, Optimizer], Dict[None, Optimizer]]],\n+    evaluators: Optional[Union[Engine, Dict[str, Engine]]],\n     log_every_iters: int,\n-):\n+) -> None:\n     if optimizers is not None:\n",
        "source_code_with_indent": "    trainer: Engine,\n    optimizers: Union[Optimizer, Dict[str, Optimizer]],\n    evaluators: Union[Engine, Dict[str, Engine]],\n    log_every_iters: int,\n):\n    <IND>if optimizers is not None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    trainer: Engine,\n    optimizers: Optional[Union[Optimizer, Dict[str, Optimizer], Dict[None, Optimizer]]],\n    evaluators: Optional[Union[Engine, Dict[str, Engine]]],\n    log_every_iters: int,\n) -> None:\n    <IND>if optimizers is not None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]