[
  {
    "project": "AllenCellModeling/aicsimageio",
    "commit": "74ddc82d5db5b3263da62d20a27cea4384959f2c",
    "filename": "aicsimageio/aics_image.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/AllenCellModeling-aicsimageio/aicsimageio/aics_image.py",
    "file_hunks_size": 20,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "aicsimageio/aics_image.py:53:16 Incompatible return type [7]: Expected `Reader` but got `typing.Union[typing.Type[readers.default_reader.DefaultReader], typing.Type[readers.ome_tiff_reader.OmeTiffReader], typing.Type[readers.tiff_reader.TiffReader]]`.",
    "message": " Expected `Reader` but got `typing.Union[typing.Type[readers.default_reader.DefaultReader], typing.Type[readers.ome_tiff_reader.OmeTiffReader], typing.Type[readers.tiff_reader.TiffReader]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 53,
    "warning_line": "                return ReaderClass"
  },
  {
    "project": "AllenCellModeling/aicsimageio",
    "commit": "74ddc82d5db5b3263da62d20a27cea4384959f2c",
    "filename": "aicsimageio/aics_image.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/AllenCellModeling-aicsimageio/aicsimageio/aics_image.py",
    "file_hunks_size": 20,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "aicsimageio/aics_image.py:145:23 Call error [29]: `Reader` is not a function.",
    "message": " `Reader` is not a function.",
    "rule_id": "Call error [29]",
    "warning_line_no": 145,
    "warning_line": "        self._reader = ReaderClass(image, **kwargs)"
  },
  {
    "project": "AllenCellModeling/aicsimageio",
    "commit": "74ddc82d5db5b3263da62d20a27cea4384959f2c",
    "filename": "aicsimageio/aics_image.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/AllenCellModeling-aicsimageio/aicsimageio/aics_image.py",
    "file_hunks_size": 20,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "aicsimageio/aics_image.py:661:33 Incompatible parameter type [6]: Expected `Optional[str]` for 2nd positional only parameter to call `_construct_img` but got `Optional[int]`.",
    "message": " Expected `Optional[str]` for 2nd positional only parameter to call `_construct_img` but got `Optional[int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 661,
    "warning_line": "    return _construct_img(image, scene_id, **kwargs).xarray_data",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    image: types.ImageLike,\n    scene_id: Optional[int] = None,\n    **kwargs,\n) -> xr.DataArray:\n",
        "source_code_len": 97,
        "target_code": "    image: types.ImageLike,\n    scene_id: Optional[str] = None,\n    **kwargs: Any,\n) -> xr.DataArray:\n",
        "target_code_len": 102,
        "diff_format": "@@ -638,4 +639,4 @@\n     image: types.ImageLike,\n-    scene_id: Optional[int] = None,\n-    **kwargs,\n+    scene_id: Optional[str] = None,\n+    **kwargs: Any,\n ) -> xr.DataArray:\n",
        "source_code_with_indent": "    image: types.ImageLike,\n    scene_id: Optional[int] = None,\n    **kwargs,\n) -> xr.DataArray:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    image: types.ImageLike,\n    scene_id: Optional[str] = None,\n    **kwargs: Any,\n) -> xr.DataArray:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "AllenCellModeling/aicsimageio",
    "commit": "74ddc82d5db5b3263da62d20a27cea4384959f2c",
    "filename": "aicsimageio/aics_image.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/AllenCellModeling-aicsimageio/aicsimageio/aics_image.py",
    "file_hunks_size": 20,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "aicsimageio/aics_image.py:688:33 Incompatible parameter type [6]: Expected `Optional[str]` for 2nd positional only parameter to call `_construct_img` but got `Optional[int]`.",
    "message": " Expected `Optional[str]` for 2nd positional only parameter to call `_construct_img` but got `Optional[int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 688,
    "warning_line": "    return _construct_img(image, scene_id, **kwargs).data",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    image: types.ImageLike,\n    scene_id: Optional[int] = None,\n    **kwargs,\n) -> np.ndarray:\n",
        "source_code_len": 95,
        "target_code": "    image: types.ImageLike,\n    scene_id: Optional[str] = None,\n    **kwargs: Any,\n) -> np.ndarray:\n",
        "target_code_len": 100,
        "diff_format": "@@ -665,4 +666,4 @@\n     image: types.ImageLike,\n-    scene_id: Optional[int] = None,\n-    **kwargs,\n+    scene_id: Optional[str] = None,\n+    **kwargs: Any,\n ) -> np.ndarray:\n",
        "source_code_with_indent": "    image: types.ImageLike,\n    scene_id: Optional[int] = None,\n    **kwargs,\n) -> np.ndarray:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    image: types.ImageLike,\n    scene_id: Optional[str] = None,\n    **kwargs: Any,\n) -> np.ndarray:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "AllenCellModeling/aicsimageio",
    "commit": "74ddc82d5db5b3263da62d20a27cea4384959f2c",
    "filename": "aicsimageio/metadata/utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/AllenCellModeling-aicsimageio/aicsimageio/metadata/utils.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "aicsimageio/metadata/utils.py:115:49 Incompatible parameter type [6]: Expected `Union[int, str]` for 1st positional only parameter to call `generate_ome_image_id` but got `typing.Optional[str]`.",
    "message": " Expected `Union[int, str]` for 1st positional only parameter to call `generate_ome_image_id` but got `typing.Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 115,
    "warning_line": "            ome_image_id = generate_ome_image_id(image_id)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        image_id = image.get(\"ID\")\n        if not image_id.startswith(\"Image\"):\n            ome_image_id = generate_ome_image_id(image_id)\n            image.set(\"ID\", ome_image_id)\n            metadata_changes.append(\n                f\"Updated attribute 'ID' from '{image_id}' to '{ome_image_id}' \"\n                f\"on Image element at position {image_index}\"\n            )\n\n",
        "source_code_len": 376,
        "target_code": "        image_id = image.get(\"ID\")\n        if image_id is not None:\n            found_image_id = image_id\n\n            if not found_image_id.startswith(\"Image\"):\n                ome_image_id = generate_ome_image_id(found_image_id)\n                image.set(\"ID\", ome_image_id)\n                metadata_changes.append(\n                    f\"Updated attribute 'ID' from '{found_image_id}' to \"\n                    f\"'{ome_image_id}' on Image element at position {image_index}.\"\n                )\n\n",
        "target_code_len": 495,
        "diff_format": "@@ -113,9 +113,12 @@\n         image_id = image.get(\"ID\")\n-        if not image_id.startswith(\"Image\"):\n-            ome_image_id = generate_ome_image_id(image_id)\n-            image.set(\"ID\", ome_image_id)\n-            metadata_changes.append(\n-                f\"Updated attribute 'ID' from '{image_id}' to '{ome_image_id}' \"\n-                f\"on Image element at position {image_index}\"\n-            )\n+        if image_id is not None:\n+            found_image_id = image_id\n+\n+            if not found_image_id.startswith(\"Image\"):\n+                ome_image_id = generate_ome_image_id(found_image_id)\n+                image.set(\"ID\", ome_image_id)\n+                metadata_changes.append(\n+                    f\"Updated attribute 'ID' from '{found_image_id}' to \"\n+                    f\"'{ome_image_id}' on Image element at position {image_index}.\"\n+                )\n \n",
        "source_code_with_indent": "        <IND>image_id = image.get(\"ID\")\n        if not image_id.startswith(\"Image\"):\n            <IND>ome_image_id = generate_ome_image_id(image_id)\n            image.set(\"ID\", ome_image_id)\n            metadata_changes.append(\n                f\"Updated attribute 'ID' from '{image_id}' to '{ome_image_id}' \"\n                f\"on Image element at position {image_index}\"\n            )\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>image_id = image.get(\"ID\")\n        if image_id is not None:\n            <IND>found_image_id = image_id\n\n            if not found_image_id.startswith(\"Image\"):\n                <IND>ome_image_id = generate_ome_image_id(found_image_id)\n                image.set(\"ID\", ome_image_id)\n                metadata_changes.append(\n                    f\"Updated attribute 'ID' from '{found_image_id}' to \"\n                    f\"'{ome_image_id}' on Image element at position {image_index}.\"\n                )\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "AllenCellModeling/aicsimageio",
    "commit": "74ddc82d5db5b3263da62d20a27cea4384959f2c",
    "filename": "aicsimageio/readers/tiff_reader.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/AllenCellModeling-aicsimageio/aicsimageio/readers/tiff_reader.py",
    "file_hunks_size": 12,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "aicsimageio/readers/tiff_reader.py:157:4 Inconsistent override [14]: `aicsimageio.readers.tiff_reader.TiffReader._guess_dim_order` overrides method defined in `Reader` inconsistently. Could not find parameter `shape` in overriding signature.",
    "message": " `aicsimageio.readers.tiff_reader.TiffReader._guess_dim_order` overrides method defined in `Reader` inconsistently. Could not find parameter `shape` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 157,
    "warning_line": "    def _guess_dim_order(self, tiff: TiffFile) -> List[str]:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _guess_dim_order(self, tiff: TiffFile) -> List[str]:\n        scene = tiff.series[self.current_scene_index]\n",
        "source_code_len": 116,
        "target_code": "\n    def _guess_tiff_dim_order(self, tiff: TiffFile) -> List[str]:\n        scene = tiff.series[self.current_scene_index]\n",
        "target_code_len": 121,
        "diff_format": "@@ -156,3 +156,3 @@\n \n-    def _guess_dim_order(self, tiff: TiffFile) -> List[str]:\n+    def _guess_tiff_dim_order(self, tiff: TiffFile) -> List[str]:\n         scene = tiff.series[self.current_scene_index]\n",
        "source_code_with_indent": "\n    <DED>def _guess_dim_order(self, tiff: TiffFile) -> List[str]:\n        <IND>scene = tiff.series[self.current_scene_index]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def _guess_tiff_dim_order(self, tiff: TiffFile) -> List[str]:\n        <IND>scene = tiff.series[self.current_scene_index]\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                # Get / guess dims\n                dims = self._guess_dim_order(tiff)\n\n",
        "source_code_len": 87,
        "target_code": "                # Get / guess dims\n                dims = self._guess_tiff_dim_order(tiff)\n\n",
        "target_code_len": 92,
        "diff_format": "@@ -307,3 +307,3 @@\n                 # Get / guess dims\n-                dims = self._guess_dim_order(tiff)\n+                dims = self._guess_tiff_dim_order(tiff)\n \n",
        "source_code_with_indent": "                # Get / guess dims\n                <IND>dims = self._guess_dim_order(tiff)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                # Get / guess dims\n                <IND>dims = self._guess_tiff_dim_order(tiff)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "AllenCellModeling/aicsimageio",
    "commit": "74ddc82d5db5b3263da62d20a27cea4384959f2c",
    "filename": "aicsimageio/readers/tiff_reader.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/AllenCellModeling-aicsimageio/aicsimageio/readers/tiff_reader.py",
    "file_hunks_size": 12,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "aicsimageio/readers/tiff_reader.py:157:4 Inconsistent override [15]: `aicsimageio.readers.tiff_reader.TiffReader._guess_dim_order` overrides method defined in `Reader` inconsistently. Returned type `List[str]` is not a subtype of the overridden return `str`.",
    "message": " `aicsimageio.readers.tiff_reader.TiffReader._guess_dim_order` overrides method defined in `Reader` inconsistently. Returned type `List[str]` is not a subtype of the overridden return `str`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 157,
    "warning_line": "    def _guess_dim_order(self, tiff: TiffFile) -> List[str]:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _guess_dim_order(self, tiff: TiffFile) -> List[str]:\n        scene = tiff.series[self.current_scene_index]\n",
        "source_code_len": 116,
        "target_code": "\n    def _guess_tiff_dim_order(self, tiff: TiffFile) -> List[str]:\n        scene = tiff.series[self.current_scene_index]\n",
        "target_code_len": 121,
        "diff_format": "@@ -156,3 +156,3 @@\n \n-    def _guess_dim_order(self, tiff: TiffFile) -> List[str]:\n+    def _guess_tiff_dim_order(self, tiff: TiffFile) -> List[str]:\n         scene = tiff.series[self.current_scene_index]\n",
        "source_code_with_indent": "\n    <DED>def _guess_dim_order(self, tiff: TiffFile) -> List[str]:\n        <IND>scene = tiff.series[self.current_scene_index]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def _guess_tiff_dim_order(self, tiff: TiffFile) -> List[str]:\n        <IND>scene = tiff.series[self.current_scene_index]\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                # Get / guess dims\n                dims = self._guess_dim_order(tiff)\n\n",
        "source_code_len": 87,
        "target_code": "                # Get / guess dims\n                dims = self._guess_tiff_dim_order(tiff)\n\n",
        "target_code_len": 92,
        "diff_format": "@@ -307,3 +307,3 @@\n                 # Get / guess dims\n-                dims = self._guess_dim_order(tiff)\n+                dims = self._guess_tiff_dim_order(tiff)\n \n",
        "source_code_with_indent": "                # Get / guess dims\n                <IND>dims = self._guess_dim_order(tiff)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                # Get / guess dims\n                <IND>dims = self._guess_tiff_dim_order(tiff)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "AllenCellModeling/aicsimageio",
    "commit": "74ddc82d5db5b3263da62d20a27cea4384959f2c",
    "filename": "aicsimageio/readers/tiff_reader.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/AllenCellModeling-aicsimageio/aicsimageio/readers/tiff_reader.py",
    "file_hunks_size": 12,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "aicsimageio/readers/tiff_reader.py:216:8 Incompatible variable type [9]: selected_scene_dims is declared to have type `List[str]` but is used as type `str`.",
    "message": " selected_scene_dims is declared to have type `List[str]` but is used as type `str`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 216,
    "warning_line": "        selected_scene_dims = \"\".join(selected_scene_dims)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def _create_dask_array(\n        self, tiff: TiffFile, selected_scene_dims: List[str]\n    ) -> da.Array:\n",
        "source_code_len": 108,
        "target_code": "    def _create_dask_array(\n        self, tiff: TiffFile, selected_scene_dims_list: List[str]\n    ) -> da.Array:\n",
        "target_code_len": 113,
        "diff_format": "@@ -187,3 +187,3 @@\n     def _create_dask_array(\n-        self, tiff: TiffFile, selected_scene_dims: List[str]\n+        self, tiff: TiffFile, selected_scene_dims_list: List[str]\n     ) -> da.Array:\n",
        "source_code_with_indent": "    <DED>def _create_dask_array(\n        self, tiff: TiffFile, selected_scene_dims: List[str]\n    ) -> da.Array:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def _create_dask_array(\n        self, tiff: TiffFile, selected_scene_dims_list: List[str]\n    ) -> da.Array:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "AllenCellModeling/aicsimageio",
    "commit": "74ddc82d5db5b3263da62d20a27cea4384959f2c",
    "filename": "aicsimageio/readers/tiff_reader.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/AllenCellModeling-aicsimageio/aicsimageio/readers/tiff_reader.py",
    "file_hunks_size": 12,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "aicsimageio/readers/tiff_reader.py:317:42 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `TiffReader._get_coords` but got `List[str]`.",
    "message": " Expected `str` for 1st positional only parameter to call `TiffReader._get_coords` but got `List[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 317,
    "warning_line": "                coords = self._get_coords(dims, image_data.shape)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import Dict, List, Tuple, Union\n\n",
        "source_code_len": 46,
        "target_code": "\nfrom typing import Any, Dict, List, Tuple, Union\n\n",
        "target_code_len": 51,
        "diff_format": "@@ -3,3 +3,3 @@\n \n-from typing import Dict, List, Tuple, Union\n+from typing import Any, Dict, List, Tuple, Union\n \n",
        "source_code_with_indent": "\nfrom typing import Dict, List, Tuple, Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import Any, Dict, List, Tuple, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _guess_dim_order(self, tiff: TiffFile) -> List[str]:\n        scene = tiff.series[self.current_scene_index]\n",
        "source_code_len": 116,
        "target_code": "\n    def _guess_tiff_dim_order(self, tiff: TiffFile) -> List[str]:\n        scene = tiff.series[self.current_scene_index]\n",
        "target_code_len": 121,
        "diff_format": "@@ -156,3 +156,3 @@\n \n-    def _guess_dim_order(self, tiff: TiffFile) -> List[str]:\n+    def _guess_tiff_dim_order(self, tiff: TiffFile) -> List[str]:\n         scene = tiff.series[self.current_scene_index]\n",
        "source_code_with_indent": "\n    <DED>def _guess_dim_order(self, tiff: TiffFile) -> List[str]:\n        <IND>scene = tiff.series[self.current_scene_index]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def _guess_tiff_dim_order(self, tiff: TiffFile) -> List[str]:\n        <IND>scene = tiff.series[self.current_scene_index]\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def _get_coords(\n        dims: str,\n        shape: Tuple[int],\n    ) -> Dict[str, Union[List, types.ArrayLike]]:\n        # Use dims for coord determination\n        coords = {}\n\n",
        "source_code_len": 181,
        "target_code": "    def _get_coords(\n        dims: List[str],\n        shape: Tuple[int, ...],\n    ) -> Dict[str, Any]:\n        # Use dims for coord determination\n        coords: Dict[str, Any] = {}\n\n",
        "target_code_len": 183,
        "diff_format": "@@ -172,7 +172,7 @@\n     def _get_coords(\n-        dims: str,\n-        shape: Tuple[int],\n-    ) -> Dict[str, Union[List, types.ArrayLike]]:\n+        dims: List[str],\n+        shape: Tuple[int, ...],\n+    ) -> Dict[str, Any]:\n         # Use dims for coord determination\n-        coords = {}\n+        coords: Dict[str, Any] = {}\n \n",
        "source_code_with_indent": "    def _get_coords(\n        dims: str,\n        shape: Tuple[int],\n    ) -> Dict[str, Union[List, types.ArrayLike]]:\n        # Use dims for coord determination\n        <IND>coords = {}\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def _get_coords(\n        dims: List[str],\n        shape: Tuple[int, ...],\n    ) -> Dict[str, Any]:\n        # Use dims for coord determination\n        <IND>coords: Dict[str, Any] = {}\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                # Get / guess dims\n                dims = self._guess_dim_order(tiff)\n\n",
        "source_code_len": 87,
        "target_code": "                # Get / guess dims\n                dims = self._guess_tiff_dim_order(tiff)\n\n",
        "target_code_len": 92,
        "diff_format": "@@ -307,3 +307,3 @@\n                 # Get / guess dims\n-                dims = self._guess_dim_order(tiff)\n+                dims = self._guess_tiff_dim_order(tiff)\n \n",
        "source_code_with_indent": "                # Get / guess dims\n                <IND>dims = self._guess_dim_order(tiff)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                # Get / guess dims\n                <IND>dims = self._guess_tiff_dim_order(tiff)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                # Get / guess dims\n                dims = self._guess_dim_order(tiff)\n\n",
        "source_code_len": 87,
        "target_code": "                # Get / guess dims\n                dims = self._guess_tiff_dim_order(tiff)\n\n",
        "target_code_len": 92,
        "diff_format": "@@ -348,3 +348,3 @@\n                 # Get / guess dims\n-                dims = self._guess_dim_order(tiff)\n+                dims = self._guess_tiff_dim_order(tiff)\n \n",
        "source_code_with_indent": "                # Get / guess dims\n                <IND>dims = self._guess_dim_order(tiff)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                # Get / guess dims\n                <IND>dims = self._guess_tiff_dim_order(tiff)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "AllenCellModeling/aicsimageio",
    "commit": "74ddc82d5db5b3263da62d20a27cea4384959f2c",
    "filename": "aicsimageio/readers/tiff_reader.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/AllenCellModeling-aicsimageio/aicsimageio/readers/tiff_reader.py",
    "file_hunks_size": 12,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "aicsimageio/readers/tiff_reader.py:358:42 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `TiffReader._get_coords` but got `List[str]`.",
    "message": " Expected `str` for 1st positional only parameter to call `TiffReader._get_coords` but got `List[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 358,
    "warning_line": "                coords = self._get_coords(dims, image_data.shape)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import Dict, List, Tuple, Union\n\n",
        "source_code_len": 46,
        "target_code": "\nfrom typing import Any, Dict, List, Tuple, Union\n\n",
        "target_code_len": 51,
        "diff_format": "@@ -3,3 +3,3 @@\n \n-from typing import Dict, List, Tuple, Union\n+from typing import Any, Dict, List, Tuple, Union\n \n",
        "source_code_with_indent": "\nfrom typing import Dict, List, Tuple, Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import Any, Dict, List, Tuple, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _guess_dim_order(self, tiff: TiffFile) -> List[str]:\n        scene = tiff.series[self.current_scene_index]\n",
        "source_code_len": 116,
        "target_code": "\n    def _guess_tiff_dim_order(self, tiff: TiffFile) -> List[str]:\n        scene = tiff.series[self.current_scene_index]\n",
        "target_code_len": 121,
        "diff_format": "@@ -156,3 +156,3 @@\n \n-    def _guess_dim_order(self, tiff: TiffFile) -> List[str]:\n+    def _guess_tiff_dim_order(self, tiff: TiffFile) -> List[str]:\n         scene = tiff.series[self.current_scene_index]\n",
        "source_code_with_indent": "\n    <DED>def _guess_dim_order(self, tiff: TiffFile) -> List[str]:\n        <IND>scene = tiff.series[self.current_scene_index]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def _guess_tiff_dim_order(self, tiff: TiffFile) -> List[str]:\n        <IND>scene = tiff.series[self.current_scene_index]\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def _get_coords(\n        dims: str,\n        shape: Tuple[int],\n    ) -> Dict[str, Union[List, types.ArrayLike]]:\n        # Use dims for coord determination\n        coords = {}\n\n",
        "source_code_len": 181,
        "target_code": "    def _get_coords(\n        dims: List[str],\n        shape: Tuple[int, ...],\n    ) -> Dict[str, Any]:\n        # Use dims for coord determination\n        coords: Dict[str, Any] = {}\n\n",
        "target_code_len": 183,
        "diff_format": "@@ -172,7 +172,7 @@\n     def _get_coords(\n-        dims: str,\n-        shape: Tuple[int],\n-    ) -> Dict[str, Union[List, types.ArrayLike]]:\n+        dims: List[str],\n+        shape: Tuple[int, ...],\n+    ) -> Dict[str, Any]:\n         # Use dims for coord determination\n-        coords = {}\n+        coords: Dict[str, Any] = {}\n \n",
        "source_code_with_indent": "    def _get_coords(\n        dims: str,\n        shape: Tuple[int],\n    ) -> Dict[str, Union[List, types.ArrayLike]]:\n        # Use dims for coord determination\n        <IND>coords = {}\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def _get_coords(\n        dims: List[str],\n        shape: Tuple[int, ...],\n    ) -> Dict[str, Any]:\n        # Use dims for coord determination\n        <IND>coords: Dict[str, Any] = {}\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                # Get / guess dims\n                dims = self._guess_dim_order(tiff)\n\n",
        "source_code_len": 87,
        "target_code": "                # Get / guess dims\n                dims = self._guess_tiff_dim_order(tiff)\n\n",
        "target_code_len": 92,
        "diff_format": "@@ -307,3 +307,3 @@\n                 # Get / guess dims\n-                dims = self._guess_dim_order(tiff)\n+                dims = self._guess_tiff_dim_order(tiff)\n \n",
        "source_code_with_indent": "                # Get / guess dims\n                <IND>dims = self._guess_dim_order(tiff)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                # Get / guess dims\n                <IND>dims = self._guess_tiff_dim_order(tiff)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                # Get / guess dims\n                dims = self._guess_dim_order(tiff)\n\n",
        "source_code_len": 87,
        "target_code": "                # Get / guess dims\n                dims = self._guess_tiff_dim_order(tiff)\n\n",
        "target_code_len": 92,
        "diff_format": "@@ -348,3 +348,3 @@\n                 # Get / guess dims\n-                dims = self._guess_dim_order(tiff)\n+                dims = self._guess_tiff_dim_order(tiff)\n \n",
        "source_code_with_indent": "                # Get / guess dims\n                <IND>dims = self._guess_dim_order(tiff)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                # Get / guess dims\n                <IND>dims = self._guess_tiff_dim_order(tiff)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "AllenCellModeling/aicsimageio",
    "commit": "74ddc82d5db5b3263da62d20a27cea4384959f2c",
    "filename": "aicsimageio/tests/image_container_test_utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/AllenCellModeling-aicsimageio/aicsimageio/tests/image_container_test_utils.py",
    "file_hunks_size": 6,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "aicsimageio/tests/image_container_test_utils.py:60:22 Call error [29]: `ClassVar[Union[Reader, aicsimageio.aics_image.AICSImage]]` is not a function.",
    "message": " `ClassVar[Union[Reader, aicsimageio.aics_image.AICSImage]]` is not a function.",
    "rule_id": "Call error [29]",
    "warning_line_no": 60,
    "warning_line": "    image_container = ImageContainer(uri)"
  },
  {
    "project": "AllenCellModeling/aicsimageio",
    "commit": "74ddc82d5db5b3263da62d20a27cea4384959f2c",
    "filename": "aicsimageio/tests/image_container_test_utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/AllenCellModeling-aicsimageio/aicsimageio/tests/image_container_test_utils.py",
    "file_hunks_size": 6,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "aicsimageio/tests/image_container_test_utils.py:126:22 Call error [29]: `ClassVar[Union[Reader, aicsimageio.aics_image.AICSImage]]` is not a function.",
    "message": " `ClassVar[Union[Reader, aicsimageio.aics_image.AICSImage]]` is not a function.",
    "rule_id": "Call error [29]",
    "warning_line_no": 126,
    "warning_line": "    image_container = ImageContainer(uri)"
  }
]