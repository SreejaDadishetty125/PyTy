[
  {
    "project": "edgedb/edgedb",
    "commit": "034b4b9a095ee71fdab9e5a643398264011ebbc5",
    "filename": "edb/edgeql/ast.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/ast.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/ast.py:1306:8 Incompatible return type [7]: Expected `bool` but got implicit return value of `None`.",
    "message": " Expected `bool` but got implicit return value of `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 1306,
    "warning_line": "        return False",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef has_ddl_subcommand(\n",
        "source_code_len": 25,
        "target_code": "\ndef get_ddl_subcommand(\n    ddlcmd: DDLOperation,\n    cmdtype: typing.Type[DDLOperation],\n) -> typing.Optional[DDLOperation]:\n    for cmd in ddlcmd.commands:\n        if isinstance(cmd, cmdtype):\n            return cmd\n    else:\n        return None\n\n\ndef has_ddl_subcommand(\n",
        "target_code_len": 275,
        "diff_format": "@@ -1297,2 +1297,13 @@\n \n+def get_ddl_subcommand(\n+    ddlcmd: DDLOperation,\n+    cmdtype: typing.Type[DDLOperation],\n+) -> typing.Optional[DDLOperation]:\n+    for cmd in ddlcmd.commands:\n+        if isinstance(cmd, cmdtype):\n+            return cmd\n+    else:\n+        return None\n+\n+\n def has_ddl_subcommand(\n",
        "source_code_with_indent": "\n<DED>def has_ddl_subcommand(\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def get_ddl_subcommand(\n    ddlcmd: DDLOperation,\n    cmdtype: typing.Type[DDLOperation],\n) -> typing.Optional[DDLOperation]:\n    <IND>for cmd in ddlcmd.commands:\n        <IND>if isinstance(cmd, cmdtype):\n            <IND>return cmd\n    <DED><DED>else:\n        <IND>return None\n\n\n<DED><DED>def has_ddl_subcommand(\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": ") -> bool:\n    for cmd in ddlcmd.commands:\n        if isinstance(cmd, cmdtype):\n            return True\n    else:\n        return False\n",
        "source_code_len": 135,
        "target_code": ") -> bool:\n    return bool(get_ddl_subcommand(ddlcmd, cmdtype))\n",
        "target_code_len": 64,
        "diff_format": "@@ -1301,6 +1312,2 @@\n ) -> bool:\n-    for cmd in ddlcmd.commands:\n-        if isinstance(cmd, cmdtype):\n-            return True\n-    else:\n-        return False\n+    return bool(get_ddl_subcommand(ddlcmd, cmdtype))\n",
        "source_code_with_indent": ") -> bool:\n    <IND>for cmd in ddlcmd.commands:\n        <IND>if isinstance(cmd, cmdtype):\n            <IND>return True\n    <DED><DED>else:\n        <IND>return False\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": ") -> bool:\n    <IND>return bool(get_ddl_subcommand(ddlcmd, cmdtype))\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]