[
  {
    "project": "commitizen-tools/commitizen",
    "commit": "cdfe112d373cd20dff6da9dacb3b13de9a7507e6",
    "filename": "commitizen/commands/check.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/commitizen-tools-commitizen/commitizen/commands/check.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "commitizen/commands/check.py:25:8 Incompatible attribute type [8]: Attribute `commit_msg_file` declared in class `Check` has type `str` but is used as type `typing.Optional[str]`.",
    "message": " Attribute `commit_msg_file` declared in class `Check` has type `str` but is used as type `typing.Optional[str]`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 25,
    "warning_line": "        self.commit_msg_file: str = arguments.get(\"commit_msg_file\")",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import re\nfrom typing import Dict\n\n",
        "source_code_len": 35,
        "target_code": "import re\nfrom typing import Dict, Optional\n\n",
        "target_code_len": 45,
        "diff_format": "@@ -2,3 +2,3 @@\n import re\n-from typing import Dict\n+from typing import Dict, Optional\n \n",
        "source_code_with_indent": "import re\nfrom typing import Dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import re\nfrom typing import Dict, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"\"\"\n        self.commit_msg_file: str = arguments.get(\"commit_msg_file\")\n        self.rev_range: str = arguments.get(\"rev_range\")\n\n",
        "source_code_len": 139,
        "target_code": "        \"\"\"\n        self.commit_msg_file: Optional[str] = arguments.get(\"commit_msg_file\")\n        self.rev_range: Optional[str] = arguments.get(\"rev_range\")\n\n",
        "target_code_len": 159,
        "diff_format": "@@ -24,4 +24,4 @@\n         \"\"\"\n-        self.commit_msg_file: str = arguments.get(\"commit_msg_file\")\n-        self.rev_range: str = arguments.get(\"rev_range\")\n+        self.commit_msg_file: Optional[str] = arguments.get(\"commit_msg_file\")\n+        self.rev_range: Optional[str] = arguments.get(\"rev_range\")\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n        self.commit_msg_file: str = arguments.get(\"commit_msg_file\")\n        self.rev_range: str = arguments.get(\"rev_range\")\n\n",
        "target_code_with_indent": "\n        self.commit_msg_file: Optional[str] = arguments.get(\"commit_msg_file\")\n        self.rev_range: Optional[str] = arguments.get(\"rev_range\")\n\n"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            return True\n        return re.match(pattern, commit_msg)\n",
        "source_code_len": 69,
        "target_code": "            return True\n        return bool(re.match(pattern, commit_msg))\n",
        "target_code_len": 75,
        "diff_format": "@@ -78,2 +78,2 @@\n             return True\n-        return re.match(pattern, commit_msg)\n+        return bool(re.match(pattern, commit_msg))\n",
        "source_code_with_indent": "            <IND>return True\n        <DED>return re.match(pattern, commit_msg)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <IND>return True\n        <DED>return bool(re.match(pattern, commit_msg))\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "commitizen-tools/commitizen",
    "commit": "cdfe112d373cd20dff6da9dacb3b13de9a7507e6",
    "filename": "commitizen/commands/check.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/commitizen-tools-commitizen/commitizen/commands/check.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "commitizen/commands/check.py:26:8 Incompatible attribute type [8]: Attribute `rev_range` declared in class `Check` has type `str` but is used as type `typing.Optional[str]`.",
    "message": " Attribute `rev_range` declared in class `Check` has type `str` but is used as type `typing.Optional[str]`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 26,
    "warning_line": "        self.rev_range: str = arguments.get(\"rev_range\")",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import re\nfrom typing import Dict\n\n",
        "source_code_len": 35,
        "target_code": "import re\nfrom typing import Dict, Optional\n\n",
        "target_code_len": 45,
        "diff_format": "@@ -2,3 +2,3 @@\n import re\n-from typing import Dict\n+from typing import Dict, Optional\n \n",
        "source_code_with_indent": "import re\nfrom typing import Dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import re\nfrom typing import Dict, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"\"\"\n        self.commit_msg_file: str = arguments.get(\"commit_msg_file\")\n        self.rev_range: str = arguments.get(\"rev_range\")\n\n",
        "source_code_len": 139,
        "target_code": "        \"\"\"\n        self.commit_msg_file: Optional[str] = arguments.get(\"commit_msg_file\")\n        self.rev_range: Optional[str] = arguments.get(\"rev_range\")\n\n",
        "target_code_len": 159,
        "diff_format": "@@ -24,4 +24,4 @@\n         \"\"\"\n-        self.commit_msg_file: str = arguments.get(\"commit_msg_file\")\n-        self.rev_range: str = arguments.get(\"rev_range\")\n+        self.commit_msg_file: Optional[str] = arguments.get(\"commit_msg_file\")\n+        self.rev_range: Optional[str] = arguments.get(\"rev_range\")\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n        self.commit_msg_file: str = arguments.get(\"commit_msg_file\")\n        self.rev_range: str = arguments.get(\"rev_range\")\n\n",
        "target_code_with_indent": "\n        self.commit_msg_file: Optional[str] = arguments.get(\"commit_msg_file\")\n        self.rev_range: Optional[str] = arguments.get(\"rev_range\")\n\n"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            return True\n        return re.match(pattern, commit_msg)\n",
        "source_code_len": 69,
        "target_code": "            return True\n        return bool(re.match(pattern, commit_msg))\n",
        "target_code_len": 75,
        "diff_format": "@@ -78,2 +78,2 @@\n             return True\n-        return re.match(pattern, commit_msg)\n+        return bool(re.match(pattern, commit_msg))\n",
        "source_code_with_indent": "            <IND>return True\n        <DED>return re.match(pattern, commit_msg)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <IND>return True\n        <DED>return bool(re.match(pattern, commit_msg))\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "commitizen-tools/commitizen",
    "commit": "cdfe112d373cd20dff6da9dacb3b13de9a7507e6",
    "filename": "commitizen/commands/check.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/commitizen-tools-commitizen/commitizen/commands/check.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "commitizen/commands/check.py:79:8 Incompatible return type [7]: Expected `bool` but got `typing.Optional[typing.Match[str]]`.",
    "message": " Expected `bool` but got `typing.Optional[typing.Match[str]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 79,
    "warning_line": "        return re.match(pattern, commit_msg)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            return True\n        return re.match(pattern, commit_msg)\n",
        "source_code_len": 69,
        "target_code": "            return True\n        return bool(re.match(pattern, commit_msg))\n",
        "target_code_len": 75,
        "diff_format": "@@ -78,2 +78,2 @@\n             return True\n-        return re.match(pattern, commit_msg)\n+        return bool(re.match(pattern, commit_msg))\n",
        "source_code_with_indent": "            <IND>return True\n        <DED>return re.match(pattern, commit_msg)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <IND>return True\n        <DED>return bool(re.match(pattern, commit_msg))\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]