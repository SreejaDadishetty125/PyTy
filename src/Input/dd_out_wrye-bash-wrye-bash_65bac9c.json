[
  {
    "project": "wrye-bash/wrye-bash",
    "commit": "65bac9cf90d11d24003971cbe457a93e7138c211",
    "filename": "Mopy/bash/basher/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/wrye-bash-wrye-bash/Mopy/bash/basher/__init__.py",
    "file_hunks_size": 42,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "Mopy/bash/basher/__init__.py:124:0 Incompatible variable type [9]: settings is declared to have type `bolt.Settings` but is used as type `None`.",
    "message": " settings is declared to have type `bolt.Settings` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 124,
    "warning_line": "settings = None # type: bolt.Settings",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import time\nfrom collections import OrderedDict, namedtuple\nfrom functools import partial, reduce\nfrom itertools import izip\n\n",
        "source_code_len": 126,
        "target_code": "import time\nfrom collections import OrderedDict, namedtuple, defaultdict\nfrom functools import partial, reduce\nfrom typing import Optional\n\n",
        "target_code_len": 140,
        "diff_format": "@@ -60,5 +58,5 @@\n import time\n-from collections import OrderedDict, namedtuple\n+from collections import OrderedDict, namedtuple, defaultdict\n from functools import partial, reduce\n-from itertools import izip\n+from typing import Optional\n \n",
        "source_code_with_indent": "import time\nfrom collections import OrderedDict, namedtuple\nfrom functools import partial, reduce\nfrom itertools import izip\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import time\nfrom collections import OrderedDict, namedtuple, defaultdict\nfrom functools import partial, reduce\nfrom typing import Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "#  - Make sure that python root directory is in PATH, so can access dll's.\n# NOTE: See:\n# https://docs.python.org/3/library/os.html#file-names-command-line-arguments-and-environment-variables\n# and here:\n# https://docs.python.org/2.7/library/os.html#os.environ\n# It's not obvious from the 2.7 version, but environment variables\n# are bytes encoded using the filesystem encoding.  On Python 3, these are\n# actually unicode and encoded/decoded using the file system encoding.\n# We now automatically handle encoding/decoding of values, but\n# on Python 2 sys.prefix is still a bytes object.\n# PY3: Remove the version used for python 2.7\nif sys.version_info >= (3,0):\n    _prefix = sys.prefix\nelse:\n    _prefix = sys.prefix.decode(bolt.Path.sys_fs_enc)\n_env_path = env.get_env_var(u'PATH')\nif sys.prefix not in set(_env_path.split(u';')):\n    env.set_env_var(u'PATH', _env_path + u';' + _prefix)\n\n# Settings --------------------------------------------------------------------\nsettings = None # type: bolt.Settings\n\n",
        "source_code_len": 1011,
        "target_code": "#  - Make sure that python root directory is in PATH, so can access dll's.\n_env_path = os.environ[u'PATH']\nif sys.prefix not in set(_env_path.split(u';')):\n    os.environ[u'PATH'] = _env_path + u';' + sys.prefix\n\n# Settings --------------------------------------------------------------------\nsettings = None # type: Optional[bolt.Settings]\n\n",
        "target_code_len": 342,
        "diff_format": "@@ -104,22 +101,8 @@\n #  - Make sure that python root directory is in PATH, so can access dll's.\n-# NOTE: See:\n-# https://docs.python.org/3/library/os.html#file-names-command-line-arguments-and-environment-variables\n-# and here:\n-# https://docs.python.org/2.7/library/os.html#os.environ\n-# It's not obvious from the 2.7 version, but environment variables\n-# are bytes encoded using the filesystem encoding.  On Python 3, these are\n-# actually unicode and encoded/decoded using the file system encoding.\n-# We now automatically handle encoding/decoding of values, but\n-# on Python 2 sys.prefix is still a bytes object.\n-# PY3: Remove the version used for python 2.7\n-if sys.version_info >= (3,0):\n-    _prefix = sys.prefix\n-else:\n-    _prefix = sys.prefix.decode(bolt.Path.sys_fs_enc)\n-_env_path = env.get_env_var(u'PATH')\n+_env_path = os.environ[u'PATH']\n if sys.prefix not in set(_env_path.split(u';')):\n-    env.set_env_var(u'PATH', _env_path + u';' + _prefix)\n+    os.environ[u'PATH'] = _env_path + u';' + sys.prefix\n \n # Settings --------------------------------------------------------------------\n-settings = None # type: bolt.Settings\n+settings = None # type: Optional[bolt.Settings]\n \n",
        "source_code_with_indent": "#  - Make sure that python root directory is in PATH, so can access dll's.\n# NOTE: See:\n# https://docs.python.org/3/library/os.html#file-names-command-line-arguments-and-environment-variables\n# and here:\n# https://docs.python.org/2.7/library/os.html#os.environ\n# It's not obvious from the 2.7 version, but environment variables\n# are bytes encoded using the filesystem encoding.  On Python 3, these are\n# actually unicode and encoded/decoded using the file system encoding.\n# We now automatically handle encoding/decoding of values, but\n# on Python 2 sys.prefix is still a bytes object.\n# PY3: Remove the version used for python 2.7\n<DED>if sys.version_info >= (3,0):\n    <IND>_prefix = sys.prefix\n<DED>else:\n    <IND>_prefix = sys.prefix.decode(bolt.Path.sys_fs_enc)\n<DED>_env_path = env.get_env_var(u'PATH')\nif sys.prefix not in set(_env_path.split(u';')):\n    <IND>env.set_env_var(u'PATH', _env_path + u';' + _prefix)\n\n# Settings --------------------------------------------------------------------\n<DED>settings = None # type: bolt.Settings\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "#  - Make sure that python root directory is in PATH, so can access dll's.\n<DED>_env_path = os.environ[u'PATH']\nif sys.prefix not in set(_env_path.split(u';')):\n    <IND>os.environ[u'PATH'] = _env_path + u';' + sys.prefix\n\n# Settings --------------------------------------------------------------------\n<DED>settings = None # type: Optional[bolt.Settings]\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "wrye-bash/wrye-bash",
    "commit": "65bac9cf90d11d24003971cbe457a93e7138c211",
    "filename": "Mopy/bash/basher/frames.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/wrye-bash-wrye-bash/Mopy/bash/basher/frames.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "Mopy/bash/basher/frames.py:296:10 Unbound name [10]: Name `xrange` is used but not defined in the current scope.",
    "message": " Name `xrange` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 296,
    "warning_line": "_UPDATE = xrange(8)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, \\\n_UPDATE = xrange(8)\n\n",
        "source_code_len": 94,
        "target_code": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, \\\n_UPDATE = range(8)\n\n",
        "target_code_len": 93,
        "diff_format": "@@ -295,3 +295,3 @@\n _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, \\\n-_UPDATE = xrange(8)\n+_UPDATE = range(8)\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "<DED><DED>_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT,_UPDATE = xrange(8)\n\n",
        "target_code_with_indent": "<DED><DED>_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT,_UPDATE = range(8)\n\n"
      }
    ]
  },
  {
    "project": "wrye-bash/wrye-bash",
    "commit": "65bac9cf90d11d24003971cbe457a93e7138c211",
    "filename": "Mopy/bash/basher/gui_patchers.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/wrye-bash-wrye-bash/Mopy/bash/basher/gui_patchers.py",
    "file_hunks_size": 18,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "Mopy/bash/basher/gui_patchers.py:522:18 Unbound name [10]: Name `unicode` is used but not defined in the current scope.",
    "message": " Name `unicode` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 522,
    "warning_line": "_label_formats = {unicode: u'%s', float: u'%4.2f', int: u'%d', long: u'%d'}"
  },
  {
    "project": "wrye-bash/wrye-bash",
    "commit": "65bac9cf90d11d24003971cbe457a93e7138c211",
    "filename": "Mopy/bash/basher/gui_patchers.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/wrye-bash-wrye-bash/Mopy/bash/basher/gui_patchers.py",
    "file_hunks_size": 18,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "Mopy/bash/basher/gui_patchers.py:522:63 Unbound name [10]: Name `long` is used but not defined in the current scope.",
    "message": " Name `long` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 522,
    "warning_line": "_label_formats = {unicode: u'%s', float: u'%4.2f', int: u'%d', long: u'%d'}"
  },
  {
    "project": "wrye-bash/wrye-bash",
    "commit": "65bac9cf90d11d24003971cbe457a93e7138c211",
    "filename": "Mopy/bash/bolt.py",
    "min_patch_found": false,
    "full_warning_msg": "Mopy/bash/bolt.py:306:12 Unbound name [10]: Name `unicode` is used but not defined in the current scope.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "wrye-bash/wrye-bash",
    "commit": "65bac9cf90d11d24003971cbe457a93e7138c211",
    "filename": "Mopy/bash/bolt.py",
    "min_patch_found": false,
    "full_warning_msg": "Mopy/bash/bolt.py:1804:16 Incompatible parameter type [6]: Expected `typing.Mapping[str, typing_extensions.Literal['%d']]` for 1st positional only parameter to call `dict.update` but got `typing.Mapping[str, typing.Union[typing_extensions.Literal['\"%s\"'], typing_extensions.Literal['%f']]]`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "wrye-bash/wrye-bash",
    "commit": "65bac9cf90d11d24003971cbe457a93e7138c211",
    "filename": "Mopy/bash/bosh/__init__.py",
    "min_patch_found": false,
    "full_warning_msg": "Mopy/bash/bosh/__init__.py:3579:21 Unbound name [10]: Name `unicode` is used but not defined in the current scope.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "wrye-bash/wrye-bash",
    "commit": "65bac9cf90d11d24003971cbe457a93e7138c211",
    "filename": "Mopy/bash/bosh/bain.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/wrye-bash-wrye-bash/Mopy/bash/bosh/bain.py",
    "file_hunks_size": 53,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "Mopy/bash/bosh/bain.py:50:9 Unbound name [10]: Name `unicode` is used but not defined in the current scope.",
    "message": " Name `unicode` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 50,
    "warning_line": "os_sep = unicode(os.path.sep) # PY3: already unicode",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nos_sep = unicode(os.path.sep) # PY3: already unicode\n\n",
        "source_code_len": 55,
        "target_code": "\nos_sep = os.path.sep\n\n",
        "target_code_len": 23,
        "diff_format": "@@ -49,3 +48,3 @@\n \n-os_sep = unicode(os.path.sep) # PY3: already unicode\n+os_sep = os.path.sep\n \n",
        "source_code_with_indent": "\nos_sep = unicode(os.path.sep) # PY3: already unicode\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nos_sep = os.path.sep\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "wrye-bash/wrye-bash",
    "commit": "65bac9cf90d11d24003971cbe457a93e7138c211",
    "filename": "Mopy/bash/brec/advanced_elements.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/wrye-bash-wrye-bash/Mopy/bash/brec/advanced_elements.py",
    "file_hunks_size": 26,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "Mopy/bash/brec/advanced_elements.py:495:42 Invalid type [31]: Expression `collections.OrderedDict[(unicode, slice.__or__(int))]` is not a valid type.",
    "message": " Expression `collections.OrderedDict[(unicode, slice.__or__(int))]` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 495,
    "warning_line": "    _attr_indexes = OrderedDict() # type: OrderedDict[unicode, slice | int]"
  },
  {
    "project": "wrye-bash/wrye-bash",
    "commit": "65bac9cf90d11d24003971cbe457a93e7138c211",
    "filename": "Mopy/bash/brec/utils_constants.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/wrye-bash-wrye-bash/Mopy/bash/brec/utils_constants.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "Mopy/bash/brec/utils_constants.py:45:18 Unbound name [10]: Name `unicode` is used but not defined in the current scope.",
    "message": " Name `unicode` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 45,
    "warning_line": "class FixedString(unicode):",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nclass FixedString(unicode):\n    \"\"\"An action for MelStructs that will decode and encode a fixed-length\n",
        "source_code_len": 104,
        "target_code": "\nclass FixedString(str):\n    \"\"\"An action for MelStructs that will decode and encode a fixed-length\n",
        "target_code_len": 100,
        "diff_format": "@@ -44,3 +42,3 @@\n \n-class FixedString(unicode):\n+class FixedString(str):\n     \"\"\"An action for MelStructs that will decode and encode a fixed-length\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>class FixedString(unicode):\n    <IND>",
        "target_code_with_indent": "\n<DED>class FixedString(str):\n    <IND>"
      }
    ]
  },
  {
    "project": "wrye-bash/wrye-bash",
    "commit": "65bac9cf90d11d24003971cbe457a93e7138c211",
    "filename": "Mopy/bash/game/oblivion/records.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/wrye-bash-wrye-bash/Mopy/bash/game/oblivion/records.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "Mopy/bash/game/oblivion/records.py:1390:44 Unbound name [10]: Name `xrange` is used but not defined in the current scope.",
    "message": " Name `xrange` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 1390,
    "warning_line": "                   (u'skills', [0 for _x in xrange(21)]), u'health',",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        MelNpcData(b'DATA', [u'21B', u'H', u'2s', u'8B'],\n                   (u'skills', [0 for _x in xrange(21)]), u'health',\n                   u'unused2', (u'attributes', [0 for _y in xrange(8)])),\n        MelFid(b'HNAM', 'hair'),\n",
        "source_code_len": 234,
        "target_code": "        MelNpcData(b'DATA', [u'21B', u'H', u'2s', u'8B'],\n                   (u'skills', [0 for _x in range(21)]), u'health',\n                   u'unused2', (u'attributes', [0 for _y in range(8)])),\n        MelFid(b'HNAM', 'hair'),\n",
        "target_code_len": 232,
        "diff_format": "@@ -1389,4 +1387,4 @@\n         MelNpcData(b'DATA', [u'21B', u'H', u'2s', u'8B'],\n-                   (u'skills', [0 for _x in xrange(21)]), u'health',\n-                   u'unused2', (u'attributes', [0 for _y in xrange(8)])),\n+                   (u'skills', [0 for _x in range(21)]), u'health',\n+                   u'unused2', (u'attributes', [0 for _y in range(8)])),\n         MelFid(b'HNAM', 'hair'),\n",
        "source_code_with_indent": "        MelNpcData(b'DATA', [u'21B', u'H', u'2s', u'8B'],\n                   (u'skills', [0 for _x in xrange(21)]), u'health',\n                   u'unused2', (u'attributes', [0 for _y in xrange(8)])),\n        MelFid(b'HNAM', 'hair'),\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        MelNpcData(b'DATA', [u'21B', u'H', u'2s', u'8B'],\n                   (u'skills', [0 for _x in range(21)]), u'health',\n                   u'unused2', (u'attributes', [0 for _y in range(8)])),\n        MelFid(b'HNAM', 'hair'),\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "wrye-bash/wrye-bash",
    "commit": "65bac9cf90d11d24003971cbe457a93e7138c211",
    "filename": "Mopy/bash/patcher/patchers/multitweak_names.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/wrye-bash-wrye-bash/Mopy/bash/patcher/patchers/multitweak_names.py",
    "file_hunks_size": 17,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "Mopy/bash/patcher/patchers/multitweak_names.py:384:29 Unbound name [10]: Name `xrange` is used but not defined in the current scope.",
    "message": " Name `xrange` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 384,
    "warning_line": "    _valid_ingestibles = set(xrange(10, 14))",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    _example_code = u'F'\n    _valid_ingestibles = set(xrange(10, 14))\n\n",
        "source_code_len": 71,
        "target_code": "    _example_code = u'F'\n    _valid_ingestibles = set(range(10, 14))\n\n",
        "target_code_len": 70,
        "diff_format": "@@ -383,3 +381,3 @@\n     _example_code = u'F'\n-    _valid_ingestibles = set(xrange(10, 14))\n+    _valid_ingestibles = set(range(10, 14))\n \n",
        "source_code_with_indent": "    _example_code = u'F'\n    _valid_ingestibles = set(xrange(10, 14))\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    _example_code = u'F'\n    _valid_ingestibles = set(range(10, 14))\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "wrye-bash/wrye-bash",
    "commit": "65bac9cf90d11d24003971cbe457a93e7138c211",
    "filename": "Mopy/bash/tests/test_bosh/test_cosaves.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/wrye-bash-wrye-bash/Mopy/bash/tests/test_bosh/test_cosaves.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "Mopy/bash/tests/test_bosh/test_cosaves.py:116:55 Unbound name [10]: Name `unicode` is used but not defined in the current scope.",
    "message": " Name `unicode` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 116,
    "warning_line": "            assert isinstance(test_log.out.getvalue(), unicode)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            curr_cosave.dump_to_log(test_log, sv_masters)\n            assert isinstance(test_log.out.getvalue(), unicode)\n            # Remapping should make the new filename appear in the log\n",
        "source_code_len": 193,
        "target_code": "            curr_cosave.dump_to_log(test_log, sv_masters)\n            assert isinstance(test_log.out.getvalue(), str)\n            # Remapping should make the new filename appear in the log\n",
        "target_code_len": 189,
        "diff_format": "@@ -115,3 +115,3 @@\n             curr_cosave.dump_to_log(test_log, sv_masters)\n-            assert isinstance(test_log.out.getvalue(), unicode)\n+            assert isinstance(test_log.out.getvalue(), str)\n             # Remapping should make the new filename appear in the log\n",
        "source_code_with_indent": "            curr_cosave.dump_to_log(test_log, sv_masters)\n            assert isinstance(test_log.out.getvalue(), unicode)\n            # Remapping should make the new filename appear in the log\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            curr_cosave.dump_to_log(test_log, sv_masters)\n            assert isinstance(test_log.out.getvalue(), str)\n            # Remapping should make the new filename appear in the log\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "wrye-bash/wrye-bash",
    "commit": "65bac9cf90d11d24003971cbe457a93e7138c211",
    "filename": "Mopy/bash/tests/utils/generate_meta.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/wrye-bash-wrye-bash/Mopy/bash/tests/utils/generate_meta.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "Mopy/bash/tests/utils/generate_meta.py:120:55 Unbound name [10]: Name `unicode` is used but not defined in the current scope.",
    "message": " Name `unicode` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 120,
    "warning_line": "    parser.add_argument(u'target_file_or_folder', type=unicode,",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    parser = argparse.ArgumentParser()\n    parser.add_argument(u'target_file_or_folder', type=unicode,\n                        help=u'the file to generate a .meta file for')\n",
        "source_code_len": 174,
        "target_code": "    parser = argparse.ArgumentParser()\n    parser.add_argument(u'target_file_or_folder', type=str,\n                        help=u'the file to generate a .meta file for')\n",
        "target_code_len": 170,
        "diff_format": "@@ -119,3 +117,3 @@\n     parser = argparse.ArgumentParser()\n-    parser.add_argument(u'target_file_or_folder', type=unicode,\n+    parser.add_argument(u'target_file_or_folder', type=str,\n                         help=u'the file to generate a .meta file for')\n",
        "source_code_with_indent": "    <IND>parser = argparse.ArgumentParser()\n    parser.add_argument(u'target_file_or_folder', type=unicode,\n                        help=u'the file to generate a .meta file for')\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <IND>parser = argparse.ArgumentParser()\n    parser.add_argument(u'target_file_or_folder', type=str,\n                        help=u'the file to generate a .meta file for')\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]