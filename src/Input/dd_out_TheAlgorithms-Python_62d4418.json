[
  {
    "project": "TheAlgorithms/Python",
    "commit": "62d44188516521fd14e9a4e1f18957ea4eaeeb37",
    "filename": "graphs/bfs_shortest_path.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/graphs/bfs_shortest_path.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "graphs/bfs_shortest_path.py:56:20 Incompatible return type [7]: Expected `str` but got `typing.List[typing.Any]`.",
    "message": " Expected `str` but got `typing.List[typing.Any]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 56,
    "warning_line": "                    return new_path",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\"\"\"\ngraph = {\n    \"A\": [\"B\", \"C\", \"E\"],\n",
        "source_code_len": 40,
        "target_code": "\"\"\"\ndemo_graph = {\n    \"A\": [\"B\", \"C\", \"E\"],\n",
        "target_code_len": 45,
        "diff_format": "@@ -6,3 +6,3 @@\n \"\"\"\n-graph = {\n+demo_graph = {\n     \"A\": [\"B\", \"C\", \"E\"],\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\ngraph = {\n    \"A\": [\"B\", \"C\", \"E\"],\n",
        "target_code_with_indent": "\ndemo_graph = {\n    \"A\": [\"B\", \"C\", \"E\"],\n"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef bfs_shortest_path(graph: dict, start, goal) -> str:\n    \"\"\"Find shortest path between `start` and `goal` nodes.\n",
        "source_code_len": 117,
        "target_code": "\ndef bfs_shortest_path(graph: dict, start, goal) -> list[str]:\n    \"\"\"Find shortest path between `start` and `goal` nodes.\n",
        "target_code_len": 123,
        "diff_format": "@@ -17,3 +17,3 @@\n \n-def bfs_shortest_path(graph: dict, start, goal) -> str:\n+def bfs_shortest_path(graph: dict, start, goal) -> list[str]:\n     \"\"\"Find shortest path between `start` and `goal` nodes.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\ndef bfs_shortest_path(graph: dict, start, goal) -> str:\n    <IND>",
        "target_code_with_indent": "\ndef bfs_shortest_path(graph: dict, start, goal) -> list[str]:\n    <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    if start == goal:\n        return \"That was easy! Start = goal\"\n\n",
        "source_code_len": 68,
        "target_code": "    if start == goal:\n        return [start]\n\n",
        "target_code_len": 46,
        "diff_format": "@@ -37,3 +41,3 @@\n     if start == goal:\n-        return \"That was easy! Start = goal\"\n+        return [start]\n \n",
        "source_code_with_indent": "    if start == goal:\n        <IND>return \"That was easy! Start = goal\"\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    if start == goal:\n        <IND>return [start]\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    # in case there's no path between the 2 nodes\n    return \"So sorry, but a connecting path doesn't exist :(\"\n\n",
        "source_code_len": 113,
        "target_code": "    # in case there's no path between the 2 nodes\n    return []\n\n",
        "target_code_len": 65,
        "diff_format": "@@ -61,3 +65,3 @@\n     # in case there's no path between the 2 nodes\n-    return \"So sorry, but a connecting path doesn't exist :(\"\n+    return []\n \n",
        "source_code_with_indent": "    # in case there's no path between the 2 nodes\n    <DED><DED>return \"So sorry, but a connecting path doesn't exist :(\"\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    # in case there's no path between the 2 nodes\n    <DED><DED>return []\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "if __name__ == \"__main__\":\n    print(bfs_shortest_path(graph, \"G\", \"D\"))  # returns ['G', 'C', 'A', 'B', 'D']\n    print(bfs_shortest_path_distance(graph, \"G\", \"D\"))  # returns 4\n",
        "source_code_len": 178,
        "target_code": "if __name__ == \"__main__\":\n    print(bfs_shortest_path(demo_graph, \"G\", \"D\"))  # returns ['G', 'C', 'A', 'B', 'D']\n    print(bfs_shortest_path_distance(demo_graph, \"G\", \"D\"))  # returns 4\n",
        "target_code_len": 188,
        "diff_format": "@@ -104,3 +108,3 @@\n if __name__ == \"__main__\":\n-    print(bfs_shortest_path(graph, \"G\", \"D\"))  # returns ['G', 'C', 'A', 'B', 'D']\n-    print(bfs_shortest_path_distance(graph, \"G\", \"D\"))  # returns 4\n+    print(bfs_shortest_path(demo_graph, \"G\", \"D\"))  # returns ['G', 'C', 'A', 'B', 'D']\n+    print(bfs_shortest_path_distance(demo_graph, \"G\", \"D\"))  # returns 4\n",
        "source_code_with_indent": "<DED>if __name__ == \"__main__\":\n    <IND>print(bfs_shortest_path(graph, \"G\", \"D\"))  # returns ['G', 'C', 'A', 'B', 'D']\n    print(bfs_shortest_path_distance(graph, \"G\", \"D\"))  # returns 4\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED>if __name__ == \"__main__\":\n    <IND>print(bfs_shortest_path(demo_graph, \"G\", \"D\"))  # returns ['G', 'C', 'A', 'B', 'D']\n    print(bfs_shortest_path_distance(demo_graph, \"G\", \"D\"))  # returns 4\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]