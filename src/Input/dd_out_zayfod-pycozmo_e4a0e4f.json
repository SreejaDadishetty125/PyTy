[
  {
    "project": "zayfod/pycozmo",
    "commit": "e4a0e4f83c6d4cfd0970029de38601c6df993e91",
    "filename": "pycozmo/anim_encoder.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/zayfod-pycozmo/pycozmo/anim_encoder.py",
    "file_hunks_size": 35,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pycozmo/anim_encoder.py:79:34 Incompatible variable type [9]: keyframes is declared to have type `List[AnimKeyframe]` but is used as type `typing.Tuple[]`.",
    "message": " keyframes is declared to have type `List[AnimKeyframe]` but is used as type `typing.Tuple[]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 79,
    "warning_line": "    def __init__(self, name: str, keyframes: List[AnimKeyframe] = ()):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import List, Union, Dict, TextIO, BinaryIO\nfrom abc import ABC\n",
        "source_code_len": 76,
        "target_code": "\nfrom typing import Union, Dict, TextIO, BinaryIO, Iterable\nfrom abc import ABC\n",
        "target_code_len": 80,
        "diff_format": "@@ -10,3 +10,3 @@\n \n-from typing import List, Union, Dict, TextIO, BinaryIO\n+from typing import Union, Dict, TextIO, BinaryIO, Iterable\n from abc import ABC\n",
        "source_code_with_indent": "\nfrom typing import List, Union, Dict, TextIO, BinaryIO\nfrom abc import ABC\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import Union, Dict, TextIO, BinaryIO, Iterable\nfrom abc import ABC\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __init__(self, name: str, keyframes: List[AnimKeyframe] = ()):\n        super().__init__()\n",
        "source_code_len": 99,
        "target_code": "\n    def __init__(self, name: str, keyframes: Iterable[AnimKeyframe] = ()):\n        super().__init__()\n",
        "target_code_len": 103,
        "diff_format": "@@ -78,3 +78,3 @@\n \n-    def __init__(self, name: str, keyframes: List[AnimKeyframe] = ()):\n+    def __init__(self, name: str, keyframes: Iterable[AnimKeyframe] = ()):\n         super().__init__()\n",
        "source_code_with_indent": "\n    def __init__(self, name: str, keyframes: List[AnimKeyframe] = ()):\n        <IND>super().__init__()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    def __init__(self, name: str, keyframes: Iterable[AnimKeyframe] = ()):\n        <IND>super().__init__()\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __init__(self, clips: List[AnimClip] = ()):\n        super().__init__()\n",
        "source_code_len": 80,
        "target_code": "\n    def __init__(self, clips: Iterable[AnimClip] = ()):\n        super().__init__()\n",
        "target_code_len": 84,
        "diff_format": "@@ -334,3 +334,3 @@\n \n-    def __init__(self, clips: List[AnimClip] = ()):\n+    def __init__(self, clips: Iterable[AnimClip] = ()):\n         super().__init__()\n",
        "source_code_with_indent": "\n    def __init__(self, clips: List[AnimClip] = ()):\n        <IND>super().__init__()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    def __init__(self, clips: Iterable[AnimClip] = ()):\n        <IND>super().__init__()\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                 scale_y: float = 1.0,\n                 left_eye: List[float] = (),\n                 right_eye: List[float] = ()):\n        super().__init__()\n",
        "source_code_len": 158,
        "target_code": "                 scale_y: float = 1.0,\n                 left_eye: Iterable[float] = (),\n                 right_eye: Iterable[float] = ()):\n        super().__init__()\n",
        "target_code_len": 166,
        "diff_format": "@@ -850,4 +850,4 @@\n                  scale_y: float = 1.0,\n-                 left_eye: List[float] = (),\n-                 right_eye: List[float] = ()):\n+                 left_eye: Iterable[float] = (),\n+                 right_eye: Iterable[float] = ()):\n         super().__init__()\n",
        "source_code_with_indent": "                 scale_y: float = 1.0,\n                 left_eye: List[float] = (),\n                 right_eye: List[float] = ()):\n        <IND>super().__init__()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                 scale_y: float = 1.0,\n                 left_eye: Iterable[float] = (),\n                 right_eye: Iterable[float] = ()):\n        <IND>super().__init__()\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self.scale_y = float(scale_y)  # float = 1.0\n        assert(len(left_eye) == 19)\n        self.left_eye = list(left_eye)  # [float]\n        assert (len(right_eye) == 19)\n        self.right_eye = list(right_eye)  # [float]\n\n",
        "source_code_len": 230,
        "target_code": "        self.scale_y = float(scale_y)  # float = 1.0\n        self.left_eye = list(left_eye)  # [float]\n        assert len(self.left_eye) == 19\n        self.right_eye = list(right_eye)  # [float]\n        assert len(self.right_eye) == 19\n\n",
        "target_code_len": 237,
        "diff_format": "@@ -859,6 +859,6 @@\n         self.scale_y = float(scale_y)  # float = 1.0\n-        assert(len(left_eye) == 19)\n         self.left_eye = list(left_eye)  # [float]\n-        assert (len(right_eye) == 19)\n+        assert len(self.left_eye) == 19\n         self.right_eye = list(right_eye)  # [float]\n+        assert len(self.right_eye) == 19\n \n",
        "source_code_with_indent": "        self.scale_y = float(scale_y)  # float = 1.0\n        assert(len(left_eye) == 19)\n        self.left_eye = list(left_eye)  # [float]\n        assert (len(right_eye) == 19)\n        self.right_eye = list(right_eye)  # [float]\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self.scale_y = float(scale_y)  # float = 1.0\n        self.left_eye = list(left_eye)  # [float]\n        assert len(self.left_eye) == 19\n        self.right_eye = list(right_eye)  # [float]\n        assert len(self.right_eye) == 19\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                 trigger_time_ms: int = 0,\n                 audio_event_ids: List[int] = (),\n                 volume: float = 1.0,\n                 probabilities: List[float] = (),\n                 has_alts: bool = True):\n",
        "source_code_len": 222,
        "target_code": "                 trigger_time_ms: int = 0,\n                 audio_event_ids: Iterable[int] = (),\n                 volume: float = 1.0,\n                 probabilities: Iterable[float] = (),\n                 has_alts: bool = True):\n",
        "target_code_len": 230,
        "diff_format": "@@ -934,5 +934,5 @@\n                  trigger_time_ms: int = 0,\n-                 audio_event_ids: List[int] = (),\n+                 audio_event_ids: Iterable[int] = (),\n                  volume: float = 1.0,\n-                 probabilities: List[float] = (),\n+                 probabilities: Iterable[float] = (),\n                  has_alts: bool = True):\n",
        "source_code_with_indent": "                 trigger_time_ms: int = 0,\n                 audio_event_ids: List[int] = (),\n                 volume: float = 1.0,\n                 probabilities: List[float] = (),\n                 has_alts: bool = True):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                 trigger_time_ms: int = 0,\n                 audio_event_ids: Iterable[int] = (),\n                 volume: float = 1.0,\n                 probabilities: Iterable[float] = (),\n                 has_alts: bool = True):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "zayfod/pycozmo",
    "commit": "e4a0e4f83c6d4cfd0970029de38601c6df993e91",
    "filename": "pycozmo/anim_encoder.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/zayfod-pycozmo/pycozmo/anim_encoder.py",
    "file_hunks_size": 35,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pycozmo/anim_encoder.py:335:23 Incompatible variable type [9]: clips is declared to have type `List[AnimClip]` but is used as type `typing.Tuple[]`.",
    "message": " clips is declared to have type `List[AnimClip]` but is used as type `typing.Tuple[]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 335,
    "warning_line": "    def __init__(self, clips: List[AnimClip] = ()):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import List, Union, Dict, TextIO, BinaryIO\nfrom abc import ABC\n",
        "source_code_len": 76,
        "target_code": "\nfrom typing import Union, Dict, TextIO, BinaryIO, Iterable\nfrom abc import ABC\n",
        "target_code_len": 80,
        "diff_format": "@@ -10,3 +10,3 @@\n \n-from typing import List, Union, Dict, TextIO, BinaryIO\n+from typing import Union, Dict, TextIO, BinaryIO, Iterable\n from abc import ABC\n",
        "source_code_with_indent": "\nfrom typing import List, Union, Dict, TextIO, BinaryIO\nfrom abc import ABC\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import Union, Dict, TextIO, BinaryIO, Iterable\nfrom abc import ABC\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __init__(self, name: str, keyframes: List[AnimKeyframe] = ()):\n        super().__init__()\n",
        "source_code_len": 99,
        "target_code": "\n    def __init__(self, name: str, keyframes: Iterable[AnimKeyframe] = ()):\n        super().__init__()\n",
        "target_code_len": 103,
        "diff_format": "@@ -78,3 +78,3 @@\n \n-    def __init__(self, name: str, keyframes: List[AnimKeyframe] = ()):\n+    def __init__(self, name: str, keyframes: Iterable[AnimKeyframe] = ()):\n         super().__init__()\n",
        "source_code_with_indent": "\n    def __init__(self, name: str, keyframes: List[AnimKeyframe] = ()):\n        <IND>super().__init__()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    def __init__(self, name: str, keyframes: Iterable[AnimKeyframe] = ()):\n        <IND>super().__init__()\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __init__(self, clips: List[AnimClip] = ()):\n        super().__init__()\n",
        "source_code_len": 80,
        "target_code": "\n    def __init__(self, clips: Iterable[AnimClip] = ()):\n        super().__init__()\n",
        "target_code_len": 84,
        "diff_format": "@@ -334,3 +334,3 @@\n \n-    def __init__(self, clips: List[AnimClip] = ()):\n+    def __init__(self, clips: Iterable[AnimClip] = ()):\n         super().__init__()\n",
        "source_code_with_indent": "\n    def __init__(self, clips: List[AnimClip] = ()):\n        <IND>super().__init__()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    def __init__(self, clips: Iterable[AnimClip] = ()):\n        <IND>super().__init__()\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                 scale_y: float = 1.0,\n                 left_eye: List[float] = (),\n                 right_eye: List[float] = ()):\n        super().__init__()\n",
        "source_code_len": 158,
        "target_code": "                 scale_y: float = 1.0,\n                 left_eye: Iterable[float] = (),\n                 right_eye: Iterable[float] = ()):\n        super().__init__()\n",
        "target_code_len": 166,
        "diff_format": "@@ -850,4 +850,4 @@\n                  scale_y: float = 1.0,\n-                 left_eye: List[float] = (),\n-                 right_eye: List[float] = ()):\n+                 left_eye: Iterable[float] = (),\n+                 right_eye: Iterable[float] = ()):\n         super().__init__()\n",
        "source_code_with_indent": "                 scale_y: float = 1.0,\n                 left_eye: List[float] = (),\n                 right_eye: List[float] = ()):\n        <IND>super().__init__()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                 scale_y: float = 1.0,\n                 left_eye: Iterable[float] = (),\n                 right_eye: Iterable[float] = ()):\n        <IND>super().__init__()\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self.scale_y = float(scale_y)  # float = 1.0\n        assert(len(left_eye) == 19)\n        self.left_eye = list(left_eye)  # [float]\n        assert (len(right_eye) == 19)\n        self.right_eye = list(right_eye)  # [float]\n\n",
        "source_code_len": 230,
        "target_code": "        self.scale_y = float(scale_y)  # float = 1.0\n        self.left_eye = list(left_eye)  # [float]\n        assert len(self.left_eye) == 19\n        self.right_eye = list(right_eye)  # [float]\n        assert len(self.right_eye) == 19\n\n",
        "target_code_len": 237,
        "diff_format": "@@ -859,6 +859,6 @@\n         self.scale_y = float(scale_y)  # float = 1.0\n-        assert(len(left_eye) == 19)\n         self.left_eye = list(left_eye)  # [float]\n-        assert (len(right_eye) == 19)\n+        assert len(self.left_eye) == 19\n         self.right_eye = list(right_eye)  # [float]\n+        assert len(self.right_eye) == 19\n \n",
        "source_code_with_indent": "        self.scale_y = float(scale_y)  # float = 1.0\n        assert(len(left_eye) == 19)\n        self.left_eye = list(left_eye)  # [float]\n        assert (len(right_eye) == 19)\n        self.right_eye = list(right_eye)  # [float]\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self.scale_y = float(scale_y)  # float = 1.0\n        self.left_eye = list(left_eye)  # [float]\n        assert len(self.left_eye) == 19\n        self.right_eye = list(right_eye)  # [float]\n        assert len(self.right_eye) == 19\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                 trigger_time_ms: int = 0,\n                 audio_event_ids: List[int] = (),\n                 volume: float = 1.0,\n                 probabilities: List[float] = (),\n                 has_alts: bool = True):\n",
        "source_code_len": 222,
        "target_code": "                 trigger_time_ms: int = 0,\n                 audio_event_ids: Iterable[int] = (),\n                 volume: float = 1.0,\n                 probabilities: Iterable[float] = (),\n                 has_alts: bool = True):\n",
        "target_code_len": 230,
        "diff_format": "@@ -934,5 +934,5 @@\n                  trigger_time_ms: int = 0,\n-                 audio_event_ids: List[int] = (),\n+                 audio_event_ids: Iterable[int] = (),\n                  volume: float = 1.0,\n-                 probabilities: List[float] = (),\n+                 probabilities: Iterable[float] = (),\n                  has_alts: bool = True):\n",
        "source_code_with_indent": "                 trigger_time_ms: int = 0,\n                 audio_event_ids: List[int] = (),\n                 volume: float = 1.0,\n                 probabilities: List[float] = (),\n                 has_alts: bool = True):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                 trigger_time_ms: int = 0,\n                 audio_event_ids: Iterable[int] = (),\n                 volume: float = 1.0,\n                 probabilities: Iterable[float] = (),\n                 has_alts: bool = True):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "zayfod/pycozmo",
    "commit": "e4a0e4f83c6d4cfd0970029de38601c6df993e91",
    "filename": "pycozmo/anim_encoder.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/zayfod-pycozmo/pycozmo/anim_encoder.py",
    "file_hunks_size": 35,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pycozmo/anim_encoder.py:851:17 Incompatible variable type [9]: left_eye is declared to have type `List[float]` but is used as type `typing.Tuple[]`.",
    "message": " left_eye is declared to have type `List[float]` but is used as type `typing.Tuple[]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 851,
    "warning_line": "                 left_eye: List[float] = (),",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import List, Union, Dict, TextIO, BinaryIO\nfrom abc import ABC\n",
        "source_code_len": 76,
        "target_code": "\nfrom typing import Union, Dict, TextIO, BinaryIO, Iterable\nfrom abc import ABC\n",
        "target_code_len": 80,
        "diff_format": "@@ -10,3 +10,3 @@\n \n-from typing import List, Union, Dict, TextIO, BinaryIO\n+from typing import Union, Dict, TextIO, BinaryIO, Iterable\n from abc import ABC\n",
        "source_code_with_indent": "\nfrom typing import List, Union, Dict, TextIO, BinaryIO\nfrom abc import ABC\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import Union, Dict, TextIO, BinaryIO, Iterable\nfrom abc import ABC\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __init__(self, name: str, keyframes: List[AnimKeyframe] = ()):\n        super().__init__()\n",
        "source_code_len": 99,
        "target_code": "\n    def __init__(self, name: str, keyframes: Iterable[AnimKeyframe] = ()):\n        super().__init__()\n",
        "target_code_len": 103,
        "diff_format": "@@ -78,3 +78,3 @@\n \n-    def __init__(self, name: str, keyframes: List[AnimKeyframe] = ()):\n+    def __init__(self, name: str, keyframes: Iterable[AnimKeyframe] = ()):\n         super().__init__()\n",
        "source_code_with_indent": "\n    def __init__(self, name: str, keyframes: List[AnimKeyframe] = ()):\n        <IND>super().__init__()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    def __init__(self, name: str, keyframes: Iterable[AnimKeyframe] = ()):\n        <IND>super().__init__()\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __init__(self, clips: List[AnimClip] = ()):\n        super().__init__()\n",
        "source_code_len": 80,
        "target_code": "\n    def __init__(self, clips: Iterable[AnimClip] = ()):\n        super().__init__()\n",
        "target_code_len": 84,
        "diff_format": "@@ -334,3 +334,3 @@\n \n-    def __init__(self, clips: List[AnimClip] = ()):\n+    def __init__(self, clips: Iterable[AnimClip] = ()):\n         super().__init__()\n",
        "source_code_with_indent": "\n    def __init__(self, clips: List[AnimClip] = ()):\n        <IND>super().__init__()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    def __init__(self, clips: Iterable[AnimClip] = ()):\n        <IND>super().__init__()\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                 scale_y: float = 1.0,\n                 left_eye: List[float] = (),\n                 right_eye: List[float] = ()):\n        super().__init__()\n",
        "source_code_len": 158,
        "target_code": "                 scale_y: float = 1.0,\n                 left_eye: Iterable[float] = (),\n                 right_eye: Iterable[float] = ()):\n        super().__init__()\n",
        "target_code_len": 166,
        "diff_format": "@@ -850,4 +850,4 @@\n                  scale_y: float = 1.0,\n-                 left_eye: List[float] = (),\n-                 right_eye: List[float] = ()):\n+                 left_eye: Iterable[float] = (),\n+                 right_eye: Iterable[float] = ()):\n         super().__init__()\n",
        "source_code_with_indent": "                 scale_y: float = 1.0,\n                 left_eye: List[float] = (),\n                 right_eye: List[float] = ()):\n        <IND>super().__init__()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                 scale_y: float = 1.0,\n                 left_eye: Iterable[float] = (),\n                 right_eye: Iterable[float] = ()):\n        <IND>super().__init__()\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self.scale_y = float(scale_y)  # float = 1.0\n        assert(len(left_eye) == 19)\n        self.left_eye = list(left_eye)  # [float]\n        assert (len(right_eye) == 19)\n        self.right_eye = list(right_eye)  # [float]\n\n",
        "source_code_len": 230,
        "target_code": "        self.scale_y = float(scale_y)  # float = 1.0\n        self.left_eye = list(left_eye)  # [float]\n        assert len(self.left_eye) == 19\n        self.right_eye = list(right_eye)  # [float]\n        assert len(self.right_eye) == 19\n\n",
        "target_code_len": 237,
        "diff_format": "@@ -859,6 +859,6 @@\n         self.scale_y = float(scale_y)  # float = 1.0\n-        assert(len(left_eye) == 19)\n         self.left_eye = list(left_eye)  # [float]\n-        assert (len(right_eye) == 19)\n+        assert len(self.left_eye) == 19\n         self.right_eye = list(right_eye)  # [float]\n+        assert len(self.right_eye) == 19\n \n",
        "source_code_with_indent": "        self.scale_y = float(scale_y)  # float = 1.0\n        assert(len(left_eye) == 19)\n        self.left_eye = list(left_eye)  # [float]\n        assert (len(right_eye) == 19)\n        self.right_eye = list(right_eye)  # [float]\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self.scale_y = float(scale_y)  # float = 1.0\n        self.left_eye = list(left_eye)  # [float]\n        assert len(self.left_eye) == 19\n        self.right_eye = list(right_eye)  # [float]\n        assert len(self.right_eye) == 19\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                 trigger_time_ms: int = 0,\n                 audio_event_ids: List[int] = (),\n                 volume: float = 1.0,\n                 probabilities: List[float] = (),\n                 has_alts: bool = True):\n",
        "source_code_len": 222,
        "target_code": "                 trigger_time_ms: int = 0,\n                 audio_event_ids: Iterable[int] = (),\n                 volume: float = 1.0,\n                 probabilities: Iterable[float] = (),\n                 has_alts: bool = True):\n",
        "target_code_len": 230,
        "diff_format": "@@ -934,5 +934,5 @@\n                  trigger_time_ms: int = 0,\n-                 audio_event_ids: List[int] = (),\n+                 audio_event_ids: Iterable[int] = (),\n                  volume: float = 1.0,\n-                 probabilities: List[float] = (),\n+                 probabilities: Iterable[float] = (),\n                  has_alts: bool = True):\n",
        "source_code_with_indent": "                 trigger_time_ms: int = 0,\n                 audio_event_ids: List[int] = (),\n                 volume: float = 1.0,\n                 probabilities: List[float] = (),\n                 has_alts: bool = True):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                 trigger_time_ms: int = 0,\n                 audio_event_ids: Iterable[int] = (),\n                 volume: float = 1.0,\n                 probabilities: Iterable[float] = (),\n                 has_alts: bool = True):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "zayfod/pycozmo",
    "commit": "e4a0e4f83c6d4cfd0970029de38601c6df993e91",
    "filename": "pycozmo/anim_encoder.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/zayfod-pycozmo/pycozmo/anim_encoder.py",
    "file_hunks_size": 35,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pycozmo/anim_encoder.py:852:17 Incompatible variable type [9]: right_eye is declared to have type `List[float]` but is used as type `typing.Tuple[]`.",
    "message": " right_eye is declared to have type `List[float]` but is used as type `typing.Tuple[]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 852,
    "warning_line": "                 right_eye: List[float] = ()):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import List, Union, Dict, TextIO, BinaryIO\nfrom abc import ABC\n",
        "source_code_len": 76,
        "target_code": "\nfrom typing import Union, Dict, TextIO, BinaryIO, Iterable\nfrom abc import ABC\n",
        "target_code_len": 80,
        "diff_format": "@@ -10,3 +10,3 @@\n \n-from typing import List, Union, Dict, TextIO, BinaryIO\n+from typing import Union, Dict, TextIO, BinaryIO, Iterable\n from abc import ABC\n",
        "source_code_with_indent": "\nfrom typing import List, Union, Dict, TextIO, BinaryIO\nfrom abc import ABC\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import Union, Dict, TextIO, BinaryIO, Iterable\nfrom abc import ABC\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __init__(self, name: str, keyframes: List[AnimKeyframe] = ()):\n        super().__init__()\n",
        "source_code_len": 99,
        "target_code": "\n    def __init__(self, name: str, keyframes: Iterable[AnimKeyframe] = ()):\n        super().__init__()\n",
        "target_code_len": 103,
        "diff_format": "@@ -78,3 +78,3 @@\n \n-    def __init__(self, name: str, keyframes: List[AnimKeyframe] = ()):\n+    def __init__(self, name: str, keyframes: Iterable[AnimKeyframe] = ()):\n         super().__init__()\n",
        "source_code_with_indent": "\n    def __init__(self, name: str, keyframes: List[AnimKeyframe] = ()):\n        <IND>super().__init__()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    def __init__(self, name: str, keyframes: Iterable[AnimKeyframe] = ()):\n        <IND>super().__init__()\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __init__(self, clips: List[AnimClip] = ()):\n        super().__init__()\n",
        "source_code_len": 80,
        "target_code": "\n    def __init__(self, clips: Iterable[AnimClip] = ()):\n        super().__init__()\n",
        "target_code_len": 84,
        "diff_format": "@@ -334,3 +334,3 @@\n \n-    def __init__(self, clips: List[AnimClip] = ()):\n+    def __init__(self, clips: Iterable[AnimClip] = ()):\n         super().__init__()\n",
        "source_code_with_indent": "\n    def __init__(self, clips: List[AnimClip] = ()):\n        <IND>super().__init__()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    def __init__(self, clips: Iterable[AnimClip] = ()):\n        <IND>super().__init__()\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                 scale_y: float = 1.0,\n                 left_eye: List[float] = (),\n                 right_eye: List[float] = ()):\n        super().__init__()\n",
        "source_code_len": 158,
        "target_code": "                 scale_y: float = 1.0,\n                 left_eye: Iterable[float] = (),\n                 right_eye: Iterable[float] = ()):\n        super().__init__()\n",
        "target_code_len": 166,
        "diff_format": "@@ -850,4 +850,4 @@\n                  scale_y: float = 1.0,\n-                 left_eye: List[float] = (),\n-                 right_eye: List[float] = ()):\n+                 left_eye: Iterable[float] = (),\n+                 right_eye: Iterable[float] = ()):\n         super().__init__()\n",
        "source_code_with_indent": "                 scale_y: float = 1.0,\n                 left_eye: List[float] = (),\n                 right_eye: List[float] = ()):\n        <IND>super().__init__()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                 scale_y: float = 1.0,\n                 left_eye: Iterable[float] = (),\n                 right_eye: Iterable[float] = ()):\n        <IND>super().__init__()\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self.scale_y = float(scale_y)  # float = 1.0\n        assert(len(left_eye) == 19)\n        self.left_eye = list(left_eye)  # [float]\n        assert (len(right_eye) == 19)\n        self.right_eye = list(right_eye)  # [float]\n\n",
        "source_code_len": 230,
        "target_code": "        self.scale_y = float(scale_y)  # float = 1.0\n        self.left_eye = list(left_eye)  # [float]\n        assert len(self.left_eye) == 19\n        self.right_eye = list(right_eye)  # [float]\n        assert len(self.right_eye) == 19\n\n",
        "target_code_len": 237,
        "diff_format": "@@ -859,6 +859,6 @@\n         self.scale_y = float(scale_y)  # float = 1.0\n-        assert(len(left_eye) == 19)\n         self.left_eye = list(left_eye)  # [float]\n-        assert (len(right_eye) == 19)\n+        assert len(self.left_eye) == 19\n         self.right_eye = list(right_eye)  # [float]\n+        assert len(self.right_eye) == 19\n \n",
        "source_code_with_indent": "        self.scale_y = float(scale_y)  # float = 1.0\n        assert(len(left_eye) == 19)\n        self.left_eye = list(left_eye)  # [float]\n        assert (len(right_eye) == 19)\n        self.right_eye = list(right_eye)  # [float]\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self.scale_y = float(scale_y)  # float = 1.0\n        self.left_eye = list(left_eye)  # [float]\n        assert len(self.left_eye) == 19\n        self.right_eye = list(right_eye)  # [float]\n        assert len(self.right_eye) == 19\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                 trigger_time_ms: int = 0,\n                 audio_event_ids: List[int] = (),\n                 volume: float = 1.0,\n                 probabilities: List[float] = (),\n                 has_alts: bool = True):\n",
        "source_code_len": 222,
        "target_code": "                 trigger_time_ms: int = 0,\n                 audio_event_ids: Iterable[int] = (),\n                 volume: float = 1.0,\n                 probabilities: Iterable[float] = (),\n                 has_alts: bool = True):\n",
        "target_code_len": 230,
        "diff_format": "@@ -934,5 +934,5 @@\n                  trigger_time_ms: int = 0,\n-                 audio_event_ids: List[int] = (),\n+                 audio_event_ids: Iterable[int] = (),\n                  volume: float = 1.0,\n-                 probabilities: List[float] = (),\n+                 probabilities: Iterable[float] = (),\n                  has_alts: bool = True):\n",
        "source_code_with_indent": "                 trigger_time_ms: int = 0,\n                 audio_event_ids: List[int] = (),\n                 volume: float = 1.0,\n                 probabilities: List[float] = (),\n                 has_alts: bool = True):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                 trigger_time_ms: int = 0,\n                 audio_event_ids: Iterable[int] = (),\n                 volume: float = 1.0,\n                 probabilities: Iterable[float] = (),\n                 has_alts: bool = True):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "zayfod/pycozmo",
    "commit": "e4a0e4f83c6d4cfd0970029de38601c6df993e91",
    "filename": "pycozmo/anim_encoder.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/zayfod-pycozmo/pycozmo/anim_encoder.py",
    "file_hunks_size": 35,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pycozmo/anim_encoder.py:935:17 Incompatible variable type [9]: audio_event_ids is declared to have type `List[int]` but is used as type `typing.Tuple[]`.",
    "message": " audio_event_ids is declared to have type `List[int]` but is used as type `typing.Tuple[]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 935,
    "warning_line": "                 audio_event_ids: List[int] = (),",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import List, Union, Dict, TextIO, BinaryIO\nfrom abc import ABC\n",
        "source_code_len": 76,
        "target_code": "\nfrom typing import Union, Dict, TextIO, BinaryIO, Iterable\nfrom abc import ABC\n",
        "target_code_len": 80,
        "diff_format": "@@ -10,3 +10,3 @@\n \n-from typing import List, Union, Dict, TextIO, BinaryIO\n+from typing import Union, Dict, TextIO, BinaryIO, Iterable\n from abc import ABC\n",
        "source_code_with_indent": "\nfrom typing import List, Union, Dict, TextIO, BinaryIO\nfrom abc import ABC\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import Union, Dict, TextIO, BinaryIO, Iterable\nfrom abc import ABC\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __init__(self, name: str, keyframes: List[AnimKeyframe] = ()):\n        super().__init__()\n",
        "source_code_len": 99,
        "target_code": "\n    def __init__(self, name: str, keyframes: Iterable[AnimKeyframe] = ()):\n        super().__init__()\n",
        "target_code_len": 103,
        "diff_format": "@@ -78,3 +78,3 @@\n \n-    def __init__(self, name: str, keyframes: List[AnimKeyframe] = ()):\n+    def __init__(self, name: str, keyframes: Iterable[AnimKeyframe] = ()):\n         super().__init__()\n",
        "source_code_with_indent": "\n    def __init__(self, name: str, keyframes: List[AnimKeyframe] = ()):\n        <IND>super().__init__()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    def __init__(self, name: str, keyframes: Iterable[AnimKeyframe] = ()):\n        <IND>super().__init__()\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __init__(self, clips: List[AnimClip] = ()):\n        super().__init__()\n",
        "source_code_len": 80,
        "target_code": "\n    def __init__(self, clips: Iterable[AnimClip] = ()):\n        super().__init__()\n",
        "target_code_len": 84,
        "diff_format": "@@ -334,3 +334,3 @@\n \n-    def __init__(self, clips: List[AnimClip] = ()):\n+    def __init__(self, clips: Iterable[AnimClip] = ()):\n         super().__init__()\n",
        "source_code_with_indent": "\n    def __init__(self, clips: List[AnimClip] = ()):\n        <IND>super().__init__()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    def __init__(self, clips: Iterable[AnimClip] = ()):\n        <IND>super().__init__()\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                 scale_y: float = 1.0,\n                 left_eye: List[float] = (),\n                 right_eye: List[float] = ()):\n        super().__init__()\n",
        "source_code_len": 158,
        "target_code": "                 scale_y: float = 1.0,\n                 left_eye: Iterable[float] = (),\n                 right_eye: Iterable[float] = ()):\n        super().__init__()\n",
        "target_code_len": 166,
        "diff_format": "@@ -850,4 +850,4 @@\n                  scale_y: float = 1.0,\n-                 left_eye: List[float] = (),\n-                 right_eye: List[float] = ()):\n+                 left_eye: Iterable[float] = (),\n+                 right_eye: Iterable[float] = ()):\n         super().__init__()\n",
        "source_code_with_indent": "                 scale_y: float = 1.0,\n                 left_eye: List[float] = (),\n                 right_eye: List[float] = ()):\n        <IND>super().__init__()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                 scale_y: float = 1.0,\n                 left_eye: Iterable[float] = (),\n                 right_eye: Iterable[float] = ()):\n        <IND>super().__init__()\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self.scale_y = float(scale_y)  # float = 1.0\n        assert(len(left_eye) == 19)\n        self.left_eye = list(left_eye)  # [float]\n        assert (len(right_eye) == 19)\n        self.right_eye = list(right_eye)  # [float]\n\n",
        "source_code_len": 230,
        "target_code": "        self.scale_y = float(scale_y)  # float = 1.0\n        self.left_eye = list(left_eye)  # [float]\n        assert len(self.left_eye) == 19\n        self.right_eye = list(right_eye)  # [float]\n        assert len(self.right_eye) == 19\n\n",
        "target_code_len": 237,
        "diff_format": "@@ -859,6 +859,6 @@\n         self.scale_y = float(scale_y)  # float = 1.0\n-        assert(len(left_eye) == 19)\n         self.left_eye = list(left_eye)  # [float]\n-        assert (len(right_eye) == 19)\n+        assert len(self.left_eye) == 19\n         self.right_eye = list(right_eye)  # [float]\n+        assert len(self.right_eye) == 19\n \n",
        "source_code_with_indent": "        self.scale_y = float(scale_y)  # float = 1.0\n        assert(len(left_eye) == 19)\n        self.left_eye = list(left_eye)  # [float]\n        assert (len(right_eye) == 19)\n        self.right_eye = list(right_eye)  # [float]\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self.scale_y = float(scale_y)  # float = 1.0\n        self.left_eye = list(left_eye)  # [float]\n        assert len(self.left_eye) == 19\n        self.right_eye = list(right_eye)  # [float]\n        assert len(self.right_eye) == 19\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                 trigger_time_ms: int = 0,\n                 audio_event_ids: List[int] = (),\n                 volume: float = 1.0,\n                 probabilities: List[float] = (),\n                 has_alts: bool = True):\n",
        "source_code_len": 222,
        "target_code": "                 trigger_time_ms: int = 0,\n                 audio_event_ids: Iterable[int] = (),\n                 volume: float = 1.0,\n                 probabilities: Iterable[float] = (),\n                 has_alts: bool = True):\n",
        "target_code_len": 230,
        "diff_format": "@@ -934,5 +934,5 @@\n                  trigger_time_ms: int = 0,\n-                 audio_event_ids: List[int] = (),\n+                 audio_event_ids: Iterable[int] = (),\n                  volume: float = 1.0,\n-                 probabilities: List[float] = (),\n+                 probabilities: Iterable[float] = (),\n                  has_alts: bool = True):\n",
        "source_code_with_indent": "                 trigger_time_ms: int = 0,\n                 audio_event_ids: List[int] = (),\n                 volume: float = 1.0,\n                 probabilities: List[float] = (),\n                 has_alts: bool = True):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                 trigger_time_ms: int = 0,\n                 audio_event_ids: Iterable[int] = (),\n                 volume: float = 1.0,\n                 probabilities: Iterable[float] = (),\n                 has_alts: bool = True):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "zayfod/pycozmo",
    "commit": "e4a0e4f83c6d4cfd0970029de38601c6df993e91",
    "filename": "pycozmo/anim_encoder.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/zayfod-pycozmo/pycozmo/anim_encoder.py",
    "file_hunks_size": 35,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pycozmo/anim_encoder.py:937:17 Incompatible variable type [9]: probabilities is declared to have type `List[float]` but is used as type `typing.Tuple[]`.",
    "message": " probabilities is declared to have type `List[float]` but is used as type `typing.Tuple[]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 937,
    "warning_line": "                 probabilities: List[float] = (),",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import List, Union, Dict, TextIO, BinaryIO\nfrom abc import ABC\n",
        "source_code_len": 76,
        "target_code": "\nfrom typing import Union, Dict, TextIO, BinaryIO, Iterable\nfrom abc import ABC\n",
        "target_code_len": 80,
        "diff_format": "@@ -10,3 +10,3 @@\n \n-from typing import List, Union, Dict, TextIO, BinaryIO\n+from typing import Union, Dict, TextIO, BinaryIO, Iterable\n from abc import ABC\n",
        "source_code_with_indent": "\nfrom typing import List, Union, Dict, TextIO, BinaryIO\nfrom abc import ABC\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import Union, Dict, TextIO, BinaryIO, Iterable\nfrom abc import ABC\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __init__(self, name: str, keyframes: List[AnimKeyframe] = ()):\n        super().__init__()\n",
        "source_code_len": 99,
        "target_code": "\n    def __init__(self, name: str, keyframes: Iterable[AnimKeyframe] = ()):\n        super().__init__()\n",
        "target_code_len": 103,
        "diff_format": "@@ -78,3 +78,3 @@\n \n-    def __init__(self, name: str, keyframes: List[AnimKeyframe] = ()):\n+    def __init__(self, name: str, keyframes: Iterable[AnimKeyframe] = ()):\n         super().__init__()\n",
        "source_code_with_indent": "\n    def __init__(self, name: str, keyframes: List[AnimKeyframe] = ()):\n        <IND>super().__init__()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    def __init__(self, name: str, keyframes: Iterable[AnimKeyframe] = ()):\n        <IND>super().__init__()\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __init__(self, clips: List[AnimClip] = ()):\n        super().__init__()\n",
        "source_code_len": 80,
        "target_code": "\n    def __init__(self, clips: Iterable[AnimClip] = ()):\n        super().__init__()\n",
        "target_code_len": 84,
        "diff_format": "@@ -334,3 +334,3 @@\n \n-    def __init__(self, clips: List[AnimClip] = ()):\n+    def __init__(self, clips: Iterable[AnimClip] = ()):\n         super().__init__()\n",
        "source_code_with_indent": "\n    def __init__(self, clips: List[AnimClip] = ()):\n        <IND>super().__init__()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    def __init__(self, clips: Iterable[AnimClip] = ()):\n        <IND>super().__init__()\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                 scale_y: float = 1.0,\n                 left_eye: List[float] = (),\n                 right_eye: List[float] = ()):\n        super().__init__()\n",
        "source_code_len": 158,
        "target_code": "                 scale_y: float = 1.0,\n                 left_eye: Iterable[float] = (),\n                 right_eye: Iterable[float] = ()):\n        super().__init__()\n",
        "target_code_len": 166,
        "diff_format": "@@ -850,4 +850,4 @@\n                  scale_y: float = 1.0,\n-                 left_eye: List[float] = (),\n-                 right_eye: List[float] = ()):\n+                 left_eye: Iterable[float] = (),\n+                 right_eye: Iterable[float] = ()):\n         super().__init__()\n",
        "source_code_with_indent": "                 scale_y: float = 1.0,\n                 left_eye: List[float] = (),\n                 right_eye: List[float] = ()):\n        <IND>super().__init__()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                 scale_y: float = 1.0,\n                 left_eye: Iterable[float] = (),\n                 right_eye: Iterable[float] = ()):\n        <IND>super().__init__()\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self.scale_y = float(scale_y)  # float = 1.0\n        assert(len(left_eye) == 19)\n        self.left_eye = list(left_eye)  # [float]\n        assert (len(right_eye) == 19)\n        self.right_eye = list(right_eye)  # [float]\n\n",
        "source_code_len": 230,
        "target_code": "        self.scale_y = float(scale_y)  # float = 1.0\n        self.left_eye = list(left_eye)  # [float]\n        assert len(self.left_eye) == 19\n        self.right_eye = list(right_eye)  # [float]\n        assert len(self.right_eye) == 19\n\n",
        "target_code_len": 237,
        "diff_format": "@@ -859,6 +859,6 @@\n         self.scale_y = float(scale_y)  # float = 1.0\n-        assert(len(left_eye) == 19)\n         self.left_eye = list(left_eye)  # [float]\n-        assert (len(right_eye) == 19)\n+        assert len(self.left_eye) == 19\n         self.right_eye = list(right_eye)  # [float]\n+        assert len(self.right_eye) == 19\n \n",
        "source_code_with_indent": "        self.scale_y = float(scale_y)  # float = 1.0\n        assert(len(left_eye) == 19)\n        self.left_eye = list(left_eye)  # [float]\n        assert (len(right_eye) == 19)\n        self.right_eye = list(right_eye)  # [float]\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self.scale_y = float(scale_y)  # float = 1.0\n        self.left_eye = list(left_eye)  # [float]\n        assert len(self.left_eye) == 19\n        self.right_eye = list(right_eye)  # [float]\n        assert len(self.right_eye) == 19\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                 trigger_time_ms: int = 0,\n                 audio_event_ids: List[int] = (),\n                 volume: float = 1.0,\n                 probabilities: List[float] = (),\n                 has_alts: bool = True):\n",
        "source_code_len": 222,
        "target_code": "                 trigger_time_ms: int = 0,\n                 audio_event_ids: Iterable[int] = (),\n                 volume: float = 1.0,\n                 probabilities: Iterable[float] = (),\n                 has_alts: bool = True):\n",
        "target_code_len": 230,
        "diff_format": "@@ -934,5 +934,5 @@\n                  trigger_time_ms: int = 0,\n-                 audio_event_ids: List[int] = (),\n+                 audio_event_ids: Iterable[int] = (),\n                  volume: float = 1.0,\n-                 probabilities: List[float] = (),\n+                 probabilities: Iterable[float] = (),\n                  has_alts: bool = True):\n",
        "source_code_with_indent": "                 trigger_time_ms: int = 0,\n                 audio_event_ids: List[int] = (),\n                 volume: float = 1.0,\n                 probabilities: List[float] = (),\n                 has_alts: bool = True):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                 trigger_time_ms: int = 0,\n                 audio_event_ids: Iterable[int] = (),\n                 volume: float = 1.0,\n                 probabilities: Iterable[float] = (),\n                 has_alts: bool = True):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]