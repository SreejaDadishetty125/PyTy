[
  {
    "project": "raiden-network/raiden",
    "commit": "6df0292256037bbef853ece92275bcdd9d98ac59",
    "filename": "raiden/transfer/utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/raiden-network-raiden/raiden/transfer/utils/__init__.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "raiden/transfer/utils.py:109:4 Incompatible return type [7]: Expected `typing.Tuple[Variable[_T_co](covariant)]` but got `typing.Tuple[Secret, PaymentAmount, PaymentID]`.",
    "message": " Expected `typing.Tuple[Variable[_T_co](covariant)]` but got `typing.Tuple[Secret, PaymentAmount, PaymentID]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 109,
    "warning_line": "    return secret, amount, payment_id",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "    return state_change.secrethash == transfer_secrethash\n\n\ndef encrypt_secret(\n    secret: Optional[Secret],\n    target_metadata: Optional[AddressMetadata],\n    amount: Union[PaymentAmount, PaymentWithFeeAmount],\n    payment_identifier: PaymentID,\n) -> Optional[EncryptedSecret]:\n    if not target_metadata or not secret:\n        return None\n\n    message = target_metadata[\"user_id\"].encode()\n    signature = Signature(decode_hex(target_metadata[\"displayname\"]))\n\n    public_key = get_public_key(message, signature)\n    encrypted_secret = None\n    if public_key:\n        to_encrypt = {\n            \"secret\": encode_hex(secret),\n            \"amount\": amount,\n            \"payment_identifier\": payment_identifier,\n        }\n        encrypted_secret = EncryptedSecret(\n            encrypt(public_key.to_hex(), json.dumps(to_encrypt).encode())\n        )\n    return encrypted_secret\n\n\ndef decrypt_secret(\n    encrypted_secret: EncryptedSecret, private_key: PrivateKey\n) -> Tuple[Secret, PaymentAmount, PaymentID]:\n    try:\n        secret_dict = json.loads(decrypt(private_key, encrypted_secret).decode())\n    except (ValueError, json.JSONDecodeError):\n        raise InvalidSecret\n    secret = Secret(decode_hex(secret_dict[\"secret\"]))\n    amount = PaymentAmount(secret_dict[\"amount\"])\n    payment_id = PaymentID(secret_dict[\"payment_identifier\"])\n    return secret, amount, payment_id\n",
        "source_code_len": 1381,
        "target_code": "    return state_change.secrethash == transfer_secrethash\n",
        "target_code_len": 58,
        "diff_format": "@@ -70,40 +56,1 @@\n     return state_change.secrethash == transfer_secrethash\n-\n-\n-def encrypt_secret(\n-    secret: Optional[Secret],\n-    target_metadata: Optional[AddressMetadata],\n-    amount: Union[PaymentAmount, PaymentWithFeeAmount],\n-    payment_identifier: PaymentID,\n-) -> Optional[EncryptedSecret]:\n-    if not target_metadata or not secret:\n-        return None\n-\n-    message = target_metadata[\"user_id\"].encode()\n-    signature = Signature(decode_hex(target_metadata[\"displayname\"]))\n-\n-    public_key = get_public_key(message, signature)\n-    encrypted_secret = None\n-    if public_key:\n-        to_encrypt = {\n-            \"secret\": encode_hex(secret),\n-            \"amount\": amount,\n-            \"payment_identifier\": payment_identifier,\n-        }\n-        encrypted_secret = EncryptedSecret(\n-            encrypt(public_key.to_hex(), json.dumps(to_encrypt).encode())\n-        )\n-    return encrypted_secret\n-\n-\n-def decrypt_secret(\n-    encrypted_secret: EncryptedSecret, private_key: PrivateKey\n-) -> Tuple[Secret, PaymentAmount, PaymentID]:\n-    try:\n-        secret_dict = json.loads(decrypt(private_key, encrypted_secret).decode())\n-    except (ValueError, json.JSONDecodeError):\n-        raise InvalidSecret\n-    secret = Secret(decode_hex(secret_dict[\"secret\"]))\n-    amount = PaymentAmount(secret_dict[\"amount\"])\n-    payment_id = PaymentID(secret_dict[\"payment_identifier\"])\n-    return secret, amount, payment_id\n",
        "source_code_with_indent": "    <IND>return state_change.secrethash == transfer_secrethash\n\n\n<DED>def encrypt_secret(\n    secret: Optional[Secret],\n    target_metadata: Optional[AddressMetadata],\n    amount: Union[PaymentAmount, PaymentWithFeeAmount],\n    payment_identifier: PaymentID,\n) -> Optional[EncryptedSecret]:\n    <IND>if not target_metadata or not secret:\n        <IND>return None\n\n    <DED>message = target_metadata[\"user_id\"].encode()\n    signature = Signature(decode_hex(target_metadata[\"displayname\"]))\n\n    public_key = get_public_key(message, signature)\n    encrypted_secret = None\n    if public_key:\n        <IND>to_encrypt = {\n            \"secret\": encode_hex(secret),\n            \"amount\": amount,\n            \"payment_identifier\": payment_identifier,\n        }\n        encrypted_secret = EncryptedSecret(\n            encrypt(public_key.to_hex(), json.dumps(to_encrypt).encode())\n        )\n    <DED>return encrypted_secret\n\n\n<DED>def decrypt_secret(\n    encrypted_secret: EncryptedSecret, private_key: PrivateKey\n) -> Tuple[Secret, PaymentAmount, PaymentID]:\n    <IND>try:\n        <IND>secret_dict = json.loads(decrypt(private_key, encrypted_secret).decode())\n    <DED>except (ValueError, json.JSONDecodeError):\n        <IND>raise InvalidSecret\n    <DED>secret = Secret(decode_hex(secret_dict[\"secret\"]))\n    amount = PaymentAmount(secret_dict[\"amount\"])\n    payment_id = PaymentID(secret_dict[\"payment_identifier\"])\n    return secret, amount, payment_id\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <IND>return state_change.secrethash == transfer_secrethash\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]