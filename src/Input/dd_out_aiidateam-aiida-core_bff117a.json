[
  {
    "project": "aiidateam/aiida-core",
    "commit": "bff117ade95bf237b5fdeb8dc57530c945aaa036",
    "filename": "aiida/orm/nodes/repository.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/aiidateam-aiida-core/aiida/orm/nodes/repository.py",
    "file_hunks_size": 1,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "aiida/orm/nodes/repository.py:126:16 Incompatible return type [7]: Expected `io.BufferedReader` but got `typing.Generator[io.StringIO, None, None]`.",
    "message": " Expected `io.BufferedReader` but got `typing.Generator[io.StringIO, None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 126,
    "warning_line": "                yield io.StringIO(handle.read().decode('utf-8'))"
  },
  {
    "project": "aiidateam/aiida-core",
    "commit": "bff117ade95bf237b5fdeb8dc57530c945aaa036",
    "filename": "aiida/orm/nodes/repository.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/aiidateam-aiida-core/aiida/orm/nodes/repository.py",
    "file_hunks_size": 1,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "aiida/orm/nodes/repository.py:128:16 Incompatible return type [7]: Expected `io.BufferedReader` but got `typing.Generator[bytes, None, None]`.",
    "message": " Expected `io.BufferedReader` but got `typing.Generator[bytes, None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 128,
    "warning_line": "                yield handle"
  },
  {
    "project": "aiidateam/aiida-core",
    "commit": "bff117ade95bf237b5fdeb8dc57530c945aaa036",
    "filename": "aiida/repository/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/aiidateam-aiida-core/aiida/repository/__init__.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "aiida/repository/__init__.py:16:11 Unbound name [10]: Name `backend` is used but not defined in the current scope.",
    "message": " Name `backend` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 16,
    "warning_line": "__all__ = (backend.__all__ + common.__all__ + repository.__all__)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n__all__ = (backend.__all__ + common.__all__ + repository.__all__)\n",
        "source_code_len": 67,
        "target_code": "\n__all__ = (backend.__all__ + common.__all__ + repository.__all__)  # type: ignore[name-defined]\n",
        "target_code_len": 97,
        "diff_format": "@@ -15,2 +15,2 @@\n \n-__all__ = (backend.__all__ + common.__all__ + repository.__all__)\n+__all__ = (backend.__all__ + common.__all__ + repository.__all__)  # type: ignore[name-defined]\n",
        "source_code_with_indent": "\n__all__ = (backend.__all__ + common.__all__ + repository.__all__)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n__all__ = (backend.__all__ + common.__all__ + repository.__all__)  # type: ignore[name-defined]\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "aiidateam/aiida-core",
    "commit": "bff117ade95bf237b5fdeb8dc57530c945aaa036",
    "filename": "aiida/repository/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/aiidateam-aiida-core/aiida/repository/__init__.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "aiida/repository/__init__.py:16:29 Unbound name [10]: Name `common` is used but not defined in the current scope.",
    "message": " Name `common` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 16,
    "warning_line": "__all__ = (backend.__all__ + common.__all__ + repository.__all__)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n__all__ = (backend.__all__ + common.__all__ + repository.__all__)\n",
        "source_code_len": 67,
        "target_code": "\n__all__ = (backend.__all__ + common.__all__ + repository.__all__)  # type: ignore[name-defined]\n",
        "target_code_len": 97,
        "diff_format": "@@ -15,2 +15,2 @@\n \n-__all__ = (backend.__all__ + common.__all__ + repository.__all__)\n+__all__ = (backend.__all__ + common.__all__ + repository.__all__)  # type: ignore[name-defined]\n",
        "source_code_with_indent": "\n__all__ = (backend.__all__ + common.__all__ + repository.__all__)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n__all__ = (backend.__all__ + common.__all__ + repository.__all__)  # type: ignore[name-defined]\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "aiidateam/aiida-core",
    "commit": "bff117ade95bf237b5fdeb8dc57530c945aaa036",
    "filename": "aiida/repository/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/aiidateam-aiida-core/aiida/repository/__init__.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "aiida/repository/__init__.py:16:46 Unbound name [10]: Name `repository` is used but not defined in the current scope.",
    "message": " Name `repository` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 16,
    "warning_line": "__all__ = (backend.__all__ + common.__all__ + repository.__all__)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n__all__ = (backend.__all__ + common.__all__ + repository.__all__)\n",
        "source_code_len": 67,
        "target_code": "\n__all__ = (backend.__all__ + common.__all__ + repository.__all__)  # type: ignore[name-defined]\n",
        "target_code_len": 97,
        "diff_format": "@@ -15,2 +15,2 @@\n \n-__all__ = (backend.__all__ + common.__all__ + repository.__all__)\n+__all__ = (backend.__all__ + common.__all__ + repository.__all__)  # type: ignore[name-defined]\n",
        "source_code_with_indent": "\n__all__ = (backend.__all__ + common.__all__ + repository.__all__)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n__all__ = (backend.__all__ + common.__all__ + repository.__all__)  # type: ignore[name-defined]\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "aiidateam/aiida-core",
    "commit": "bff117ade95bf237b5fdeb8dc57530c945aaa036",
    "filename": "aiida/repository/backend/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/aiidateam-aiida-core/aiida/repository/backend/__init__.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "aiida/repository/backend/__init__.py:8:11 Unbound name [10]: Name `abstract` is used but not defined in the current scope.",
    "message": " Name `abstract` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 8,
    "warning_line": "__all__ = (abstract.__all__ + disk_object_store.__all__ + sandbox.__all__)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n__all__ = (abstract.__all__ + disk_object_store.__all__ + sandbox.__all__)\n",
        "source_code_len": 76,
        "target_code": "\n__all__ = (abstract.__all__ + disk_object_store.__all__ + sandbox.__all__)  # type: ignore[name-defined]\n",
        "target_code_len": 106,
        "diff_format": "@@ -7,2 +7,2 @@\n \n-__all__ = (abstract.__all__ + disk_object_store.__all__ + sandbox.__all__)\n+__all__ = (abstract.__all__ + disk_object_store.__all__ + sandbox.__all__)  # type: ignore[name-defined]\n",
        "source_code_with_indent": "\n__all__ = (abstract.__all__ + disk_object_store.__all__ + sandbox.__all__)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n__all__ = (abstract.__all__ + disk_object_store.__all__ + sandbox.__all__)  # type: ignore[name-defined]\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "aiidateam/aiida-core",
    "commit": "bff117ade95bf237b5fdeb8dc57530c945aaa036",
    "filename": "aiida/repository/backend/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/aiidateam-aiida-core/aiida/repository/backend/__init__.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "aiida/repository/backend/__init__.py:8:30 Unbound name [10]: Name `disk_object_store` is used but not defined in the current scope.",
    "message": " Name `disk_object_store` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 8,
    "warning_line": "__all__ = (abstract.__all__ + disk_object_store.__all__ + sandbox.__all__)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n__all__ = (abstract.__all__ + disk_object_store.__all__ + sandbox.__all__)\n",
        "source_code_len": 76,
        "target_code": "\n__all__ = (abstract.__all__ + disk_object_store.__all__ + sandbox.__all__)  # type: ignore[name-defined]\n",
        "target_code_len": 106,
        "diff_format": "@@ -7,2 +7,2 @@\n \n-__all__ = (abstract.__all__ + disk_object_store.__all__ + sandbox.__all__)\n+__all__ = (abstract.__all__ + disk_object_store.__all__ + sandbox.__all__)  # type: ignore[name-defined]\n",
        "source_code_with_indent": "\n__all__ = (abstract.__all__ + disk_object_store.__all__ + sandbox.__all__)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n__all__ = (abstract.__all__ + disk_object_store.__all__ + sandbox.__all__)  # type: ignore[name-defined]\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "aiidateam/aiida-core",
    "commit": "bff117ade95bf237b5fdeb8dc57530c945aaa036",
    "filename": "aiida/repository/backend/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/aiidateam-aiida-core/aiida/repository/backend/__init__.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "aiida/repository/backend/__init__.py:8:58 Unbound name [10]: Name `sandbox` is used but not defined in the current scope.",
    "message": " Name `sandbox` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 8,
    "warning_line": "__all__ = (abstract.__all__ + disk_object_store.__all__ + sandbox.__all__)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n__all__ = (abstract.__all__ + disk_object_store.__all__ + sandbox.__all__)\n",
        "source_code_len": 76,
        "target_code": "\n__all__ = (abstract.__all__ + disk_object_store.__all__ + sandbox.__all__)  # type: ignore[name-defined]\n",
        "target_code_len": 106,
        "diff_format": "@@ -7,2 +7,2 @@\n \n-__all__ = (abstract.__all__ + disk_object_store.__all__ + sandbox.__all__)\n+__all__ = (abstract.__all__ + disk_object_store.__all__ + sandbox.__all__)  # type: ignore[name-defined]\n",
        "source_code_with_indent": "\n__all__ = (abstract.__all__ + disk_object_store.__all__ + sandbox.__all__)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n__all__ = (abstract.__all__ + disk_object_store.__all__ + sandbox.__all__)  # type: ignore[name-defined]\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "aiidateam/aiida-core",
    "commit": "bff117ade95bf237b5fdeb8dc57530c945aaa036",
    "filename": "aiida/repository/backend/abstract.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/aiidateam-aiida-core/aiida/repository/backend/abstract.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "aiida/repository/backend/abstract.py:66:12 Incompatible return type [7]: Expected `str` but got implicit return value of `None`.",
    "message": " Expected `str` but got implicit return value of `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 66,
    "warning_line": "            raise TypeError(f'handle does not seem to be a byte stream: {type(handle)}.')",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @staticmethod\n    def is_readable_byte_stream(handle):\n        return hasattr(handle, 'read') and hasattr(handle, 'mode') and 'b' in handle.mode\n\n    def put_object_from_filelike(self, handle: io.BufferedIOBase) -> str:\n        \"\"\"Store the byte contents of a file in the repository.\n",
        "source_code_len": 288,
        "target_code": "    @staticmethod\n    def is_readable_byte_stream(handle) -> bool:\n        return hasattr(handle, 'read') and hasattr(handle, 'mode') and 'b' in handle.mode\n\n    def put_object_from_filelike(self, handle: typing.BinaryIO) -> str:\n        \"\"\"Store the byte contents of a file in the repository.\n",
        "target_code_len": 294,
        "diff_format": "@@ -55,6 +55,6 @@\n     @staticmethod\n-    def is_readable_byte_stream(handle):\n+    def is_readable_byte_stream(handle) -> bool:\n         return hasattr(handle, 'read') and hasattr(handle, 'mode') and 'b' in handle.mode\n \n-    def put_object_from_filelike(self, handle: io.BufferedIOBase) -> str:\n+    def put_object_from_filelike(self, handle: typing.BinaryIO) -> str:\n         \"\"\"Store the byte contents of a file in the repository.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "    <DED>@staticmethod\n    def is_readable_byte_stream(handle):\n        <IND>return hasattr(handle, 'read') and hasattr(handle, 'mode') and 'b' in handle.mode\n\n    <DED>def put_object_from_filelike(self, handle: io.BufferedIOBase) -> str:\n        <IND>",
        "target_code_with_indent": "    <DED>@staticmethod\n    def is_readable_byte_stream(handle) -> bool:\n        <IND>return hasattr(handle, 'read') and hasattr(handle, 'mode') and 'b' in handle.mode\n\n    <DED>def put_object_from_filelike(self, handle: typing.BinaryIO) -> str:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            raise TypeError(f'handle does not seem to be a byte stream: {type(handle)}.')\n\n",
        "source_code_len": 91,
        "target_code": "            raise TypeError(f'handle does not seem to be a byte stream: {type(handle)}.')\n        return self._put_object_from_filelike(handle)\n\n    @abc.abstractmethod\n    def _put_object_from_filelike(self, handle: typing.BinaryIO) -> str:\n        pass\n\n",
        "target_code_len": 256,
        "diff_format": "@@ -66,2 +67,7 @@\n             raise TypeError(f'handle does not seem to be a byte stream: {type(handle)}.')\n+        return self._put_object_from_filelike(handle)\n+\n+    @abc.abstractmethod\n+    def _put_object_from_filelike(self, handle: typing.BinaryIO) -> str:\n+        pass\n \n",
        "source_code_with_indent": "            <IND>raise TypeError(f'handle does not seem to be a byte stream: {type(handle)}.')\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <IND>raise TypeError(f'handle does not seem to be a byte stream: {type(handle)}.')\n        <DED>return self._put_object_from_filelike(handle)\n\n    <DED>@abc.abstractmethod\n    def _put_object_from_filelike(self, handle: typing.BinaryIO) -> str:\n        <IND>pass\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "aiidateam/aiida-core",
    "commit": "bff117ade95bf237b5fdeb8dc57530c945aaa036",
    "filename": "aiida/repository/backend/abstract.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/aiidateam-aiida-core/aiida/repository/backend/abstract.py",
    "file_hunks_size": 5,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "aiida/repository/backend/abstract.py:99:12 Incompatible return type [7]: Expected `io.BufferedIOBase` but got implicit return value of `None`.",
    "message": " Expected `io.BufferedIOBase` but got implicit return value of `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 99,
    "warning_line": "            raise FileNotFoundError(f'object with key `{key}` does not exist.')"
  },
  {
    "project": "aiidateam/aiida-core",
    "commit": "bff117ade95bf237b5fdeb8dc57530c945aaa036",
    "filename": "aiida/repository/backend/abstract.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/aiidateam-aiida-core/aiida/repository/backend/abstract.py",
    "file_hunks_size": 5,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "aiida/repository/backend/abstract.py:123:37 Incompatible parameter type [6]: Expected `typing.BinaryIO` for 1st positional only parameter to call `chunked_file_hash` but got `io.BufferedIOBase`.",
    "message": " Expected `typing.BinaryIO` for 1st positional only parameter to call `chunked_file_hash` but got `io.BufferedIOBase`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 123,
    "warning_line": "            return chunked_file_hash(handle, hashlib.sha256)"
  },
  {
    "project": "aiidateam/aiida-core",
    "commit": "bff117ade95bf237b5fdeb8dc57530c945aaa036",
    "filename": "aiida/repository/backend/sandbox.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/aiidateam-aiida-core/aiida/repository/backend/sandbox.py",
    "file_hunks_size": 6,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "aiida/repository/backend/sandbox.py:111:12 Incompatible return type [7]: Expected `io.BufferedIOBase` but got `typing.Generator[typing.Any, None, None]`.",
    "message": " Expected `io.BufferedIOBase` but got `typing.Generator[typing.Any, None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 111,
    "warning_line": "            yield handle"
  },
  {
    "project": "aiidateam/aiida-core",
    "commit": "bff117ade95bf237b5fdeb8dc57530c945aaa036",
    "filename": "aiida/repository/repository.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/aiidateam-aiida-core/aiida/repository/repository.py",
    "file_hunks_size": 29,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "aiida/repository/repository.py:108:77 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `aiida.repository.backend.abstract.AbstractRepositoryBackend.get_object_hash` but got `typing.Optional[str]`.",
    "message": " Expected `str` for 1st positional only parameter to call `aiida.repository.backend.abstract.AbstractRepositoryBackend.get_object_hash` but got `typing.Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 108,
    "warning_line": "                objects[str(root / filename)] = self.backend.get_object_hash(key)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                key = self.get_file(root / filename).key\n                objects[str(root / filename)] = self.backend.get_object_hash(key)\n",
        "source_code_len": 139,
        "target_code": "                key = self.get_file(root / filename).key\n                assert key is not None, 'Expected FileType.File to have a key'\n                objects[str(root / filename)] = self.backend.get_object_hash(key)\n",
        "target_code_len": 218,
        "diff_format": "@@ -107,2 +105,3 @@\n                 key = self.get_file(root / filename).key\n+                assert key is not None, 'Expected FileType.File to have a key'\n                 objects[str(root / filename)] = self.backend.get_object_hash(key)\n",
        "source_code_with_indent": "                <IND>key = self.get_file(root / filename).key\n                objects[str(root / filename)] = self.backend.get_object_hash(key)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                <IND>key = self.get_file(root / filename).key\n                assert key is not None, 'Expected FileType.File to have a key'\n                objects[str(root / filename)] = self.backend.get_object_hash(key)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "aiidateam/aiida-core",
    "commit": "bff117ade95bf237b5fdeb8dc57530c945aaa036",
    "filename": "aiida/repository/repository.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/aiidateam-aiida-core/aiida/repository/repository.py",
    "file_hunks_size": 29,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "aiida/repository/repository.py:113:26 Incompatible variable type [9]: path is declared to have type `typing.Union[pathlib.Path, str]` but is used as type `None`.",
    "message": " path is declared to have type `typing.Union[pathlib.Path, str]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 113,
    "warning_line": "    def _pre_process_path(path: FilePath = None) -> typing.Union[pathlib.Path, None]:"
  },
  {
    "project": "aiidateam/aiida-core",
    "commit": "bff117ade95bf237b5fdeb8dc57530c945aaa036",
    "filename": "aiida/repository/repository.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/aiidateam-aiida-core/aiida/repository/repository.py",
    "file_hunks_size": 29,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "aiida/repository/repository.py:178:8 Incompatible variable type [9]: path is declared to have type `typing.Union[pathlib.Path, str]` but is used as type `typing.Optional[pathlib.Path]`.",
    "message": " path is declared to have type `typing.Union[pathlib.Path, str]` but is used as type `typing.Optional[pathlib.Path]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 178,
    "warning_line": "        path = self._pre_process_path(path)"
  },
  {
    "project": "aiidateam/aiida-core",
    "commit": "bff117ade95bf237b5fdeb8dc57530c945aaa036",
    "filename": "aiida/repository/repository.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/aiidateam-aiida-core/aiida/repository/repository.py",
    "file_hunks_size": 29,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "aiida/repository/repository.py:208:25 Incompatible variable type [9]: path is declared to have type `typing.Union[pathlib.Path, str]` but is used as type `None`.",
    "message": " path is declared to have type `typing.Union[pathlib.Path, str]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 208,
    "warning_line": "    def get_object(self, path: FilePath = None) -> File:"
  },
  {
    "project": "aiidateam/aiida-core",
    "commit": "bff117ade95bf237b5fdeb8dc57530c945aaa036",
    "filename": "aiida/repository/repository.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/aiidateam-aiida-core/aiida/repository/repository.py",
    "file_hunks_size": 29,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "aiida/repository/repository.py:216:8 Incompatible variable type [9]: path is declared to have type `typing.Union[pathlib.Path, str]` but is used as type `typing.Optional[pathlib.Path]`.",
    "message": " path is declared to have type `typing.Union[pathlib.Path, str]` but is used as type `typing.Optional[pathlib.Path]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 216,
    "warning_line": "        path = self._pre_process_path(path)"
  },
  {
    "project": "aiidateam/aiida-core",
    "commit": "bff117ade95bf237b5fdeb8dc57530c945aaa036",
    "filename": "aiida/repository/repository.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/aiidateam-aiida-core/aiida/repository/repository.py",
    "file_hunks_size": 29,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "aiida/repository/repository.py:230:28 Incompatible variable type [9]: path is declared to have type `typing.Union[pathlib.Path, str]` but is used as type `None`.",
    "message": " path is declared to have type `typing.Union[pathlib.Path, str]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 230,
    "warning_line": "    def get_directory(self, path: FilePath = None) -> File:"
  },
  {
    "project": "aiidateam/aiida-core",
    "commit": "bff117ade95bf237b5fdeb8dc57530c945aaa036",
    "filename": "aiida/repository/repository.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/aiidateam-aiida-core/aiida/repository/repository.py",
    "file_hunks_size": 29,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "aiida/repository/repository.py:258:8 Incompatible variable type [9]: path is declared to have type `typing.Union[pathlib.Path, str]` but is used as type `typing.Optional[pathlib.Path]`.",
    "message": " path is declared to have type `typing.Union[pathlib.Path, str]` but is used as type `typing.Optional[pathlib.Path]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 258,
    "warning_line": "        path = self._pre_process_path(path)"
  },
  {
    "project": "aiidateam/aiida-core",
    "commit": "bff117ade95bf237b5fdeb8dc57530c945aaa036",
    "filename": "aiida/repository/repository.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/aiidateam-aiida-core/aiida/repository/repository.py",
    "file_hunks_size": 29,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "aiida/repository/repository.py:267:27 Incompatible variable type [9]: path is declared to have type `typing.Union[pathlib.Path, str]` but is used as type `None`.",
    "message": " path is declared to have type `typing.Union[pathlib.Path, str]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 267,
    "warning_line": "    def list_objects(self, path: FilePath = None) -> typing.List[File]:"
  },
  {
    "project": "aiidateam/aiida-core",
    "commit": "bff117ade95bf237b5fdeb8dc57530c945aaa036",
    "filename": "aiida/repository/repository.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/aiidateam-aiida-core/aiida/repository/repository.py",
    "file_hunks_size": 29,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "aiida/repository/repository.py:279:32 Incompatible variable type [9]: path is declared to have type `typing.Union[pathlib.Path, str]` but is used as type `None`.",
    "message": " path is declared to have type `typing.Union[pathlib.Path, str]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 279,
    "warning_line": "    def list_object_names(self, path: FilePath = None) -> typing.List[str]:"
  },
  {
    "project": "aiidateam/aiida-core",
    "commit": "bff117ade95bf237b5fdeb8dc57530c945aaa036",
    "filename": "aiida/repository/repository.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/aiidateam-aiida-core/aiida/repository/repository.py",
    "file_hunks_size": 29,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "aiida/repository/repository.py:297:8 Incompatible variable type [9]: path is declared to have type `typing.Union[pathlib.Path, str]` but is used as type `typing.Optional[pathlib.Path]`.",
    "message": " path is declared to have type `typing.Union[pathlib.Path, str]` but is used as type `typing.Optional[pathlib.Path]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 297,
    "warning_line": "        path = self._pre_process_path(path)"
  },
  {
    "project": "aiidateam/aiida-core",
    "commit": "bff117ade95bf237b5fdeb8dc57530c945aaa036",
    "filename": "aiida/repository/repository.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/aiidateam-aiida-core/aiida/repository/repository.py",
    "file_hunks_size": 29,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "aiida/repository/repository.py:299:26 Incompatible parameter type [6]: Expected `pathlib.Path` for 1st positional only parameter to call `Repository._insert_file` but got `typing.Union[pathlib.Path, str]`.",
    "message": " Expected `pathlib.Path` for 1st positional only parameter to call `Repository._insert_file` but got `typing.Union[pathlib.Path, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 299,
    "warning_line": "        self._insert_file(path, key)"
  },
  {
    "project": "aiidateam/aiida-core",
    "commit": "bff117ade95bf237b5fdeb8dc57530c945aaa036",
    "filename": "aiida/repository/repository.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/aiidateam-aiida-core/aiida/repository/repository.py",
    "file_hunks_size": 29,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "aiida/repository/repository.py:311:55 Incompatible variable type [9]: path is declared to have type `typing.Union[pathlib.Path, str]` but is used as type `None`.",
    "message": " path is declared to have type `typing.Union[pathlib.Path, str]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 311,
    "warning_line": "    def put_object_from_tree(self, filepath: FilePath, path: FilePath = None):"
  },
  {
    "project": "aiidateam/aiida-core",
    "commit": "bff117ade95bf237b5fdeb8dc57530c945aaa036",
    "filename": "aiida/repository/repository.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/aiidateam-aiida-core/aiida/repository/repository.py",
    "file_hunks_size": 29,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "aiida/repository/repository.py:321:8 Incompatible variable type [9]: path is declared to have type `typing.Union[pathlib.Path, str]` but is used as type `typing.Optional[pathlib.Path]`.",
    "message": " path is declared to have type `typing.Union[pathlib.Path, str]` but is used as type `typing.Optional[pathlib.Path]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 321,
    "warning_line": "        path = self._pre_process_path(path)"
  },
  {
    "project": "aiidateam/aiida-core",
    "commit": "bff117ade95bf237b5fdeb8dc57530c945aaa036",
    "filename": "aiida/repository/repository.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/aiidateam-aiida-core/aiida/repository/repository.py",
    "file_hunks_size": 29,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "aiida/repository/repository.py:381:31 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `aiida.repository.backend.abstract.AbstractRepositoryBackend.open` but got `typing.Optional[str]`.",
    "message": " Expected `str` for 1st positional only parameter to call `aiida.repository.backend.abstract.AbstractRepositoryBackend.open` but got `typing.Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 381,
    "warning_line": "        with self.backend.open(self.get_file(path).key) as handle:"
  },
  {
    "project": "aiidateam/aiida-core",
    "commit": "bff117ade95bf237b5fdeb8dc57530c945aaa036",
    "filename": "aiida/repository/repository.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/aiidateam-aiida-core/aiida/repository/repository.py",
    "file_hunks_size": 29,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "aiida/repository/repository.py:382:12 Incompatible return type [7]: Expected `io.BufferedReader` but got `typing.Generator[io.BufferedIOBase, None, None]`.",
    "message": " Expected `io.BufferedReader` but got `typing.Generator[io.BufferedIOBase, None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 382,
    "warning_line": "            yield handle"
  },
  {
    "project": "aiidateam/aiida-core",
    "commit": "bff117ade95bf237b5fdeb8dc57530c945aaa036",
    "filename": "aiida/repository/repository.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/aiidateam-aiida-core/aiida/repository/repository.py",
    "file_hunks_size": 29,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "aiida/repository/repository.py:393:47 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `aiida.repository.backend.abstract.AbstractRepositoryBackend.get_object_content` but got `typing.Optional[str]`.",
    "message": " Expected `str` for 1st positional only parameter to call `aiida.repository.backend.abstract.AbstractRepositoryBackend.get_object_content` but got `typing.Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 393,
    "warning_line": "        return self.backend.get_object_content(self.get_file(path).key)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"\"\"\n        return self.backend.get_object_content(self.get_file(path).key)\n\n    def delete_object(self, path: FilePath, hard_delete: bool = False):\n        \"\"\"Soft delete the object from the repository.\n",
        "source_code_len": 212,
        "target_code": "        \"\"\"\n        key = self.get_file(path).key\n        assert key is not None, 'Expected FileType.File to have a key'\n        return self.backend.get_object_content(key)\n\n    def delete_object(self, path: FilePath, hard_delete: bool = False) -> None:\n        \"\"\"Soft delete the object from the repository.\n",
        "target_code_len": 309,
        "diff_format": "@@ -392,5 +389,7 @@\n         \"\"\"\n-        return self.backend.get_object_content(self.get_file(path).key)\n-\n-    def delete_object(self, path: FilePath, hard_delete: bool = False):\n+        key = self.get_file(path).key\n+        assert key is not None, 'Expected FileType.File to have a key'\n+        return self.backend.get_object_content(key)\n+\n+    def delete_object(self, path: FilePath, hard_delete: bool = False) -> None:\n         \"\"\"Soft delete the object from the repository.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n        return self.backend.get_object_content(self.get_file(path).key)\n\n    <DED>def delete_object(self, path: FilePath, hard_delete: bool = False):\n        <IND>",
        "target_code_with_indent": "\n        key = self.get_file(path).key\n        assert key is not None, 'Expected FileType.File to have a key'\n        return self.backend.get_object_content(key)\n\n    <DED>def delete_object(self, path: FilePath, hard_delete: bool = False) -> None:\n        <IND>"
      }
    ]
  },
  {
    "project": "aiidateam/aiida-core",
    "commit": "bff117ade95bf237b5fdeb8dc57530c945aaa036",
    "filename": "aiida/repository/repository.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/aiidateam-aiida-core/aiida/repository/repository.py",
    "file_hunks_size": 29,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "aiida/repository/repository.py:408:8 Incompatible variable type [9]: path is declared to have type `typing.Union[pathlib.Path, str]` but is used as type `typing.Optional[pathlib.Path]`.",
    "message": " path is declared to have type `typing.Union[pathlib.Path, str]` but is used as type `typing.Optional[pathlib.Path]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 408,
    "warning_line": "        path = self._pre_process_path(path)"
  },
  {
    "project": "aiidateam/aiida-core",
    "commit": "bff117ade95bf237b5fdeb8dc57530c945aaa036",
    "filename": "aiida/repository/repository.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/aiidateam-aiida-core/aiida/repository/repository.py",
    "file_hunks_size": 29,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "aiida/repository/repository.py:415:39 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `aiida.repository.backend.abstract.AbstractRepositoryBackend.delete_object` but got `typing.Optional[str]`.",
    "message": " Expected `str` for 1st positional only parameter to call `aiida.repository.backend.abstract.AbstractRepositoryBackend.delete_object` but got `typing.Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 415,
    "warning_line": "            self.backend.delete_object(file_object.key)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        if hard_delete:\n            self.backend.delete_object(file_object.key)\n",
        "source_code_len": 80,
        "target_code": "        if hard_delete:\n            assert file_object.key is not None, 'Expected FileType.File to have a key'\n            self.backend.delete_object(file_object.key)\n",
        "target_code_len": 167,
        "diff_format": "@@ -414,2 +413,3 @@\n         if hard_delete:\n+            assert file_object.key is not None, 'Expected FileType.File to have a key'\n             self.backend.delete_object(file_object.key)\n",
        "source_code_with_indent": "        <DED>if hard_delete:\n            <IND>self.backend.delete_object(file_object.key)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>if hard_delete:\n            <IND>assert file_object.key is not None, 'Expected FileType.File to have a key'\n            self.backend.delete_object(file_object.key)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "aiidateam/aiida-core",
    "commit": "bff117ade95bf237b5fdeb8dc57530c945aaa036",
    "filename": "aiida/repository/repository.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/aiidateam-aiida-core/aiida/repository/repository.py",
    "file_hunks_size": 29,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "aiida/repository/repository.py:452:50 Incompatible parameter type [6]: Expected `io.BufferedReader` for 1st positional only parameter to call `Repository.put_object_from_filelike` but got `bytes`.",
    "message": " Expected `io.BufferedReader` for 1st positional only parameter to call `Repository.put_object_from_filelike` but got `bytes`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 452,
    "warning_line": "                    self.put_object_from_filelike(handle, root / filename)"
  },
  {
    "project": "aiidateam/aiida-core",
    "commit": "bff117ade95bf237b5fdeb8dc57530c945aaa036",
    "filename": "aiida/repository/repository.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/aiidateam-aiida-core/aiida/repository/repository.py",
    "file_hunks_size": 29,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "aiida/repository/repository.py:454:19 Incompatible variable type [9]: path is declared to have type `typing.Union[pathlib.Path, str]` but is used as type `None`.",
    "message": " path is declared to have type `typing.Union[pathlib.Path, str]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 454,
    "warning_line": "    def walk(self, path: FilePath = None) -> typing.Tuple[pathlib.Path, typing.List[str], typing.List[str]]:"
  },
  {
    "project": "aiidateam/aiida-core",
    "commit": "bff117ade95bf237b5fdeb8dc57530c945aaa036",
    "filename": "aiida/repository/repository.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/aiidateam-aiida-core/aiida/repository/repository.py",
    "file_hunks_size": 29,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "aiida/repository/repository.py:465:8 Incompatible variable type [9]: path is declared to have type `typing.Union[pathlib.Path, str]` but is used as type `typing.Optional[pathlib.Path]`.",
    "message": " path is declared to have type `typing.Union[pathlib.Path, str]` but is used as type `typing.Optional[pathlib.Path]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 465,
    "warning_line": "        path = self._pre_process_path(path)"
  },
  {
    "project": "aiidateam/aiida-core",
    "commit": "bff117ade95bf237b5fdeb8dc57530c945aaa036",
    "filename": "aiida/repository/repository.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/aiidateam-aiida-core/aiida/repository/repository.py",
    "file_hunks_size": 29,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "aiida/repository/repository.py:473:16 Incompatible return type [7]: Expected `typing.Tuple[pathlib.Path, typing.List[str], typing.List[str]]` but got `typing.Generator[typing.Union[typing.List[str], pathlib.Path], None, None]`.",
    "message": " Expected `typing.Tuple[pathlib.Path, typing.List[str], typing.List[str]]` but got `typing.Generator[typing.Union[typing.List[str], pathlib.Path], None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 473,
    "warning_line": "                yield from self.walk(path / dirname)"
  },
  {
    "project": "aiidateam/aiida-core",
    "commit": "bff117ade95bf237b5fdeb8dc57530c945aaa036",
    "filename": "aiida/repository/repository.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/aiidateam-aiida-core/aiida/repository/repository.py",
    "file_hunks_size": 29,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "aiida/repository/repository.py:473:37 Unsupported operand [58]: `/` is not supported for operand types `typing.Union[pathlib.Path, str]` and `str`.",
    "message": " `/` is not supported for operand types `typing.Union[pathlib.Path, str]` and `str`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 473,
    "warning_line": "                yield from self.walk(path / dirname)"
  },
  {
    "project": "aiidateam/aiida-core",
    "commit": "bff117ade95bf237b5fdeb8dc57530c945aaa036",
    "filename": "aiida/repository/repository.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/aiidateam-aiida-core/aiida/repository/repository.py",
    "file_hunks_size": 29,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "aiida/repository/repository.py:475:8 Incompatible return type [7]: Expected `typing.Tuple[pathlib.Path, typing.List[str], typing.List[str]]` but got `typing.Generator[typing.Tuple[typing.Union[pathlib.Path, str], typing.List[str], typing.List[str]], None, None]`.",
    "message": " Expected `typing.Tuple[pathlib.Path, typing.List[str], typing.List[str]]` but got `typing.Generator[typing.Tuple[typing.Union[pathlib.Path, str], typing.List[str], typing.List[str]], None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 475,
    "warning_line": "        yield path, dirnames, filenames"
  }
]