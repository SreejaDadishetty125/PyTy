[
  {
    "project": "freqtrade/freqtrade",
    "commit": "53a57f2c81f05c6bf7f2ce3cf5bd5cc95d591464",
    "filename": "freqtrade/optimize/backtesting.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/freqtrade-freqtrade/freqtrade/optimize/backtesting.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "freqtrade/optimize/backtesting.py:384:49 Incompatible parameter type [6]: Expected `freqtrade.persistence.models.Trade` for 1st positional only parameter to call `list.append` but got `LocalTrade`.",
    "message": " Expected `freqtrade.persistence.models.Trade` for 1st positional only parameter to call `list.append` but got `LocalTrade`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 384,
    "warning_line": "                        open_trades[pair].append(trade)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _get_close_rate(self, sell_row: Tuple, trade: Trade, sell: SellCheckTuple,\n                        trade_dur: int) -> float:\n",
        "source_code_len": 134,
        "target_code": "\n    def _get_close_rate(self, sell_row: Tuple, trade: LocalTrade, sell: SellCheckTuple,\n                        trade_dur: int) -> float:\n",
        "target_code_len": 139,
        "diff_format": "@@ -213,3 +213,3 @@\n \n-    def _get_close_rate(self, sell_row: Tuple, trade: Trade, sell: SellCheckTuple,\n+    def _get_close_rate(self, sell_row: Tuple, trade: LocalTrade, sell: SellCheckTuple,\n                         trade_dur: int) -> float:\n",
        "source_code_with_indent": "\n    <DED>def _get_close_rate(self, sell_row: Tuple, trade: Trade, sell: SellCheckTuple,\n                        trade_dur: int) -> float:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def _get_close_rate(self, sell_row: Tuple, trade: LocalTrade, sell: SellCheckTuple,\n                        trade_dur: int) -> float:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n    def _get_sell_trade_entry(self, trade: Trade, sell_row: Tuple) -> Optional[Trade]:\n\n        sell = self.strategy.should_sell(trade, sell_row[OPEN_IDX], sell_row[DATE_IDX],\n                                         sell_row[BUY_IDX], sell_row[SELL_IDX],\n                                         low=sell_row[LOW_IDX], high=sell_row[HIGH_IDX])\n",
        "source_code_len": 346,
        "target_code": "\n    def _get_sell_trade_entry(self, trade: LocalTrade, sell_row: Tuple) -> Optional[LocalTrade]:\n\n        sell = self.strategy.should_sell(trade, sell_row[OPEN_IDX],  # type: ignore\n                                         sell_row[DATE_IDX], sell_row[BUY_IDX], sell_row[SELL_IDX],\n                                         low=sell_row[LOW_IDX], high=sell_row[HIGH_IDX])\n",
        "target_code_len": 372,
        "diff_format": "@@ -253,6 +253,6 @@\n \n-    def _get_sell_trade_entry(self, trade: Trade, sell_row: Tuple) -> Optional[Trade]:\n-\n-        sell = self.strategy.should_sell(trade, sell_row[OPEN_IDX], sell_row[DATE_IDX],\n-                                         sell_row[BUY_IDX], sell_row[SELL_IDX],\n+    def _get_sell_trade_entry(self, trade: LocalTrade, sell_row: Tuple) -> Optional[LocalTrade]:\n+\n+        sell = self.strategy.should_sell(trade, sell_row[OPEN_IDX],  # type: ignore\n+                                         sell_row[DATE_IDX], sell_row[BUY_IDX], sell_row[SELL_IDX],\n                                          low=sell_row[LOW_IDX], high=sell_row[HIGH_IDX])\n",
        "source_code_with_indent": "\n    <DED><DED>def _get_sell_trade_entry(self, trade: Trade, sell_row: Tuple) -> Optional[Trade]:\n\n        <IND>sell = self.strategy.should_sell(trade, sell_row[OPEN_IDX], sell_row[DATE_IDX],\n                                         sell_row[BUY_IDX], sell_row[SELL_IDX],\n                                         low=sell_row[LOW_IDX], high=sell_row[HIGH_IDX])\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED><DED>def _get_sell_trade_entry(self, trade: LocalTrade, sell_row: Tuple) -> Optional[LocalTrade]:\n\n        <IND>sell = self.strategy.should_sell(trade, sell_row[OPEN_IDX],  # type: ignore\n                                         sell_row[DATE_IDX], sell_row[BUY_IDX], sell_row[SELL_IDX],\n                                         low=sell_row[LOW_IDX], high=sell_row[HIGH_IDX])\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        open_trades: Dict[str, List[Trade]] = defaultdict(list)\n        open_trade_count = 0\n",
        "source_code_len": 94,
        "target_code": "\n        open_trades: Dict[str, List[LocalTrade]] = defaultdict(list)\n        open_trade_count = 0\n",
        "target_code_len": 99,
        "diff_format": "@@ -344,3 +344,3 @@\n \n-        open_trades: Dict[str, List[Trade]] = defaultdict(list)\n+        open_trades: Dict[str, List[LocalTrade]] = defaultdict(list)\n         open_trade_count = 0\n",
        "source_code_with_indent": "\n        open_trades: Dict[str, List[Trade]] = defaultdict(list)\n        open_trade_count = 0\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        open_trades: Dict[str, List[LocalTrade]] = defaultdict(list)\n        open_trade_count = 0\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "freqtrade/freqtrade",
    "commit": "53a57f2c81f05c6bf7f2ce3cf5bd5cc95d591464",
    "filename": "freqtrade/optimize/backtesting.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/freqtrade-freqtrade/freqtrade/optimize/backtesting.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "freqtrade/optimize/backtesting.py:403:18 Incompatible parameter type [6]: Expected `typing.Iterable[freqtrade.persistence.models.Trade]` for 1st positional only parameter to call `list.__iadd__` but got `List[LocalTrade]`.",
    "message": " Expected `typing.Iterable[freqtrade.persistence.models.Trade]` for 1st positional only parameter to call `list.__iadd__` but got `List[LocalTrade]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 403,
    "warning_line": "        trades += self.handle_left_open(open_trades, data=data)"
  },
  {
    "project": "freqtrade/freqtrade",
    "commit": "53a57f2c81f05c6bf7f2ce3cf5bd5cc95d591464",
    "filename": "freqtrade/optimize/backtesting.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/freqtrade-freqtrade/freqtrade/optimize/backtesting.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "freqtrade/optimize/backtesting.py:403:40 Incompatible parameter type [6]: Expected `Dict[str, List[LocalTrade]]` for 1st positional only parameter to call `Backtesting.handle_left_open` but got `Dict[str, List[freqtrade.persistence.models.Trade]]`.",
    "message": " Expected `Dict[str, List[LocalTrade]]` for 1st positional only parameter to call `Backtesting.handle_left_open` but got `Dict[str, List[freqtrade.persistence.models.Trade]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 403,
    "warning_line": "        trades += self.handle_left_open(open_trades, data=data)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _get_close_rate(self, sell_row: Tuple, trade: Trade, sell: SellCheckTuple,\n                        trade_dur: int) -> float:\n",
        "source_code_len": 134,
        "target_code": "\n    def _get_close_rate(self, sell_row: Tuple, trade: LocalTrade, sell: SellCheckTuple,\n                        trade_dur: int) -> float:\n",
        "target_code_len": 139,
        "diff_format": "@@ -213,3 +213,3 @@\n \n-    def _get_close_rate(self, sell_row: Tuple, trade: Trade, sell: SellCheckTuple,\n+    def _get_close_rate(self, sell_row: Tuple, trade: LocalTrade, sell: SellCheckTuple,\n                         trade_dur: int) -> float:\n",
        "source_code_with_indent": "\n    <DED>def _get_close_rate(self, sell_row: Tuple, trade: Trade, sell: SellCheckTuple,\n                        trade_dur: int) -> float:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def _get_close_rate(self, sell_row: Tuple, trade: LocalTrade, sell: SellCheckTuple,\n                        trade_dur: int) -> float:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n    def _get_sell_trade_entry(self, trade: Trade, sell_row: Tuple) -> Optional[Trade]:\n\n        sell = self.strategy.should_sell(trade, sell_row[OPEN_IDX], sell_row[DATE_IDX],\n                                         sell_row[BUY_IDX], sell_row[SELL_IDX],\n                                         low=sell_row[LOW_IDX], high=sell_row[HIGH_IDX])\n",
        "source_code_len": 346,
        "target_code": "\n    def _get_sell_trade_entry(self, trade: LocalTrade, sell_row: Tuple) -> Optional[LocalTrade]:\n\n        sell = self.strategy.should_sell(trade, sell_row[OPEN_IDX],  # type: ignore\n                                         sell_row[DATE_IDX], sell_row[BUY_IDX], sell_row[SELL_IDX],\n                                         low=sell_row[LOW_IDX], high=sell_row[HIGH_IDX])\n",
        "target_code_len": 372,
        "diff_format": "@@ -253,6 +253,6 @@\n \n-    def _get_sell_trade_entry(self, trade: Trade, sell_row: Tuple) -> Optional[Trade]:\n-\n-        sell = self.strategy.should_sell(trade, sell_row[OPEN_IDX], sell_row[DATE_IDX],\n-                                         sell_row[BUY_IDX], sell_row[SELL_IDX],\n+    def _get_sell_trade_entry(self, trade: LocalTrade, sell_row: Tuple) -> Optional[LocalTrade]:\n+\n+        sell = self.strategy.should_sell(trade, sell_row[OPEN_IDX],  # type: ignore\n+                                         sell_row[DATE_IDX], sell_row[BUY_IDX], sell_row[SELL_IDX],\n                                          low=sell_row[LOW_IDX], high=sell_row[HIGH_IDX])\n",
        "source_code_with_indent": "\n    <DED><DED>def _get_sell_trade_entry(self, trade: Trade, sell_row: Tuple) -> Optional[Trade]:\n\n        <IND>sell = self.strategy.should_sell(trade, sell_row[OPEN_IDX], sell_row[DATE_IDX],\n                                         sell_row[BUY_IDX], sell_row[SELL_IDX],\n                                         low=sell_row[LOW_IDX], high=sell_row[HIGH_IDX])\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED><DED>def _get_sell_trade_entry(self, trade: LocalTrade, sell_row: Tuple) -> Optional[LocalTrade]:\n\n        <IND>sell = self.strategy.should_sell(trade, sell_row[OPEN_IDX],  # type: ignore\n                                         sell_row[DATE_IDX], sell_row[BUY_IDX], sell_row[SELL_IDX],\n                                         low=sell_row[LOW_IDX], high=sell_row[HIGH_IDX])\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        open_trades: Dict[str, List[Trade]] = defaultdict(list)\n        open_trade_count = 0\n",
        "source_code_len": 94,
        "target_code": "\n        open_trades: Dict[str, List[LocalTrade]] = defaultdict(list)\n        open_trade_count = 0\n",
        "target_code_len": 99,
        "diff_format": "@@ -344,3 +344,3 @@\n \n-        open_trades: Dict[str, List[Trade]] = defaultdict(list)\n+        open_trades: Dict[str, List[LocalTrade]] = defaultdict(list)\n         open_trade_count = 0\n",
        "source_code_with_indent": "\n        open_trades: Dict[str, List[Trade]] = defaultdict(list)\n        open_trade_count = 0\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        open_trades: Dict[str, List[LocalTrade]] = defaultdict(list)\n        open_trade_count = 0\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "freqtrade/freqtrade",
    "commit": "53a57f2c81f05c6bf7f2ce3cf5bd5cc95d591464",
    "filename": "freqtrade/plugins/protections/cooldown_period.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/freqtrade-freqtrade/freqtrade/plugins/protections/cooldown_period.py",
    "file_hunks_size": 1,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "freqtrade/plugins/protections/cooldown_period.py:49:44 Incompatible parameter type [6]: Expected `typing.List[freqtrade.persistence.models.Trade]` for 1st positional only parameter to call `freqtrade.plugins.protections.iprotection.IProtection.calculate_lock_end` but got `typing.List[freqtrade.persistence.models.LocalTrade]`.",
    "message": " Expected `typing.List[freqtrade.persistence.models.Trade]` for 1st positional only parameter to call `freqtrade.plugins.protections.iprotection.IProtection.calculate_lock_end` but got `typing.List[freqtrade.persistence.models.LocalTrade]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 49,
    "warning_line": "            until = self.calculate_lock_end([trade], self._stop_duration)"
  },
  {
    "project": "freqtrade/freqtrade",
    "commit": "53a57f2c81f05c6bf7f2ce3cf5bd5cc95d591464",
    "filename": "freqtrade/plugins/protections/low_profit_pairs.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/freqtrade-freqtrade/freqtrade/plugins/protections/low_profit_pairs.py",
    "file_hunks_size": 1,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "freqtrade/plugins/protections/low_profit_pairs.py:61:44 Incompatible parameter type [6]: Expected `typing.List[freqtrade.persistence.models.Trade]` for 1st positional only parameter to call `freqtrade.plugins.protections.iprotection.IProtection.calculate_lock_end` but got `typing.List[freqtrade.persistence.models.LocalTrade]`.",
    "message": " Expected `typing.List[freqtrade.persistence.models.Trade]` for 1st positional only parameter to call `freqtrade.plugins.protections.iprotection.IProtection.calculate_lock_end` but got `typing.List[freqtrade.persistence.models.LocalTrade]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 61,
    "warning_line": "            until = self.calculate_lock_end(trades, self._stop_duration)"
  },
  {
    "project": "freqtrade/freqtrade",
    "commit": "53a57f2c81f05c6bf7f2ce3cf5bd5cc95d591464",
    "filename": "freqtrade/plugins/protections/low_profit_pairs.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/freqtrade-freqtrade/freqtrade/plugins/protections/low_profit_pairs.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "freqtrade/plugins/protections/low_profit_pairs.py:63:45 Incompatible parameter type [6]: Expected `float` for 1st positional only parameter to call `LowProfitPairs._reason` but got `typing.Union[None, float, int]`.",
    "message": " Expected `float` for 1st positional only parameter to call `LowProfitPairs._reason` but got `typing.Union[None, float, int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 63,
    "warning_line": "            return True, until, self._reason(profit)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        profit = sum(trade.close_profit for trade in trades)\n        if profit < self._required_profit:\n",
        "source_code_len": 105,
        "target_code": "\n        profit = sum(trade.close_profit for trade in trades if trade.close_profit)\n        if profit < self._required_profit:\n",
        "target_code_len": 127,
        "diff_format": "@@ -55,3 +55,3 @@\n \n-        profit = sum(trade.close_profit for trade in trades)\n+        profit = sum(trade.close_profit for trade in trades if trade.close_profit)\n         if profit < self._required_profit:\n",
        "source_code_with_indent": "\n        <DED>profit = sum(trade.close_profit for trade in trades)\n        if profit < self._required_profit:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        <DED>profit = sum(trade.close_profit for trade in trades if trade.close_profit)\n        if profit < self._required_profit:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "freqtrade/freqtrade",
    "commit": "53a57f2c81f05c6bf7f2ce3cf5bd5cc95d591464",
    "filename": "freqtrade/plugins/protections/max_drawdown_protection.py",
    "min_patch_found": false,
    "full_warning_msg": "freqtrade/plugins/protections/max_drawdown_protection.py:66:44 Incompatible parameter type [6]: Expected `typing.List[freqtrade.persistence.models.Trade]` for 1st positional only parameter to call `freqtrade.plugins.protections.iprotection.IProtection.calculate_lock_end` but got `typing.List[freqtrade.persistence.models.LocalTrade]`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "freqtrade/freqtrade",
    "commit": "53a57f2c81f05c6bf7f2ce3cf5bd5cc95d591464",
    "filename": "freqtrade/plugins/protections/stoploss_guard.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/freqtrade-freqtrade/freqtrade/plugins/protections/stoploss_guard.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "freqtrade/plugins/protections/stoploss_guard.py:59:26 Unsupported operand [58]: `<` is not supported for operand types `typing.Optional[float]` and `int`.",
    "message": " `<` is not supported for operand types `typing.Optional[float]` and `int`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 59,
    "warning_line": "                      and trade.close_profit < 0)]",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                    SellType.STOPLOSS_ON_EXCHANGE.value)\n                      and trade.close_profit < 0)]\n\n",
        "source_code_len": 109,
        "target_code": "                    SellType.STOPLOSS_ON_EXCHANGE.value)\n                      and trade.close_profit and trade.close_profit < 0)]\n\n",
        "target_code_len": 132,
        "diff_format": "@@ -58,3 +58,3 @@\n                     SellType.STOPLOSS_ON_EXCHANGE.value)\n-                      and trade.close_profit < 0)]\n+                      and trade.close_profit and trade.close_profit < 0)]\n \n",
        "source_code_with_indent": "                    SellType.STOPLOSS_ON_EXCHANGE.value)\n                      and trade.close_profit < 0)]\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                    SellType.STOPLOSS_ON_EXCHANGE.value)\n                      and trade.close_profit and trade.close_profit < 0)]\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "freqtrade/freqtrade",
    "commit": "53a57f2c81f05c6bf7f2ce3cf5bd5cc95d591464",
    "filename": "freqtrade/plugins/protections/stoploss_guard.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/freqtrade-freqtrade/freqtrade/plugins/protections/stoploss_guard.py",
    "file_hunks_size": 1,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "freqtrade/plugins/protections/stoploss_guard.py:66:40 Incompatible parameter type [6]: Expected `typing.List[freqtrade.persistence.models.Trade]` for 1st positional only parameter to call `freqtrade.plugins.protections.iprotection.IProtection.calculate_lock_end` but got `typing.List[freqtrade.persistence.models.LocalTrade]`.",
    "message": " Expected `typing.List[freqtrade.persistence.models.Trade]` for 1st positional only parameter to call `freqtrade.plugins.protections.iprotection.IProtection.calculate_lock_end` but got `typing.List[freqtrade.persistence.models.LocalTrade]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 66,
    "warning_line": "        until = self.calculate_lock_end(trades, self._stop_duration)"
  }
]