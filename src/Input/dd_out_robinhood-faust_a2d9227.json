[
  {
    "project": "robinhood/faust",
    "commit": "a2d9227f0bdd13324aa5b2c13143268b72a65fe5",
    "filename": "faust/app.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/robinhood-faust/faust/app.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "faust/app.py:223:48 Incompatible parameter type [6]: Expected `ModelT` for 2nd positional only parameter to call `AsyncSerializerT.dumps_value` but got `Union[ModelT, bytes]`.",
    "message": " Expected `ModelT` for 2nd positional only parameter to call `AsyncSerializerT.dumps_value` but got `Union[ModelT, bytes]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 223,
    "warning_line": "            return await ser.dumps_value(topic, value)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    async def dumps_value(self, topic: str, value: V) -> bytes:\n        try:\n            ser = self._get_serializer(value._options.serializer)\n        except KeyError:\n            return value.dumps()\n        else:\n            return await ser.dumps_value(topic, value)\n\n",
        "source_code_len": 271,
        "target_code": "    async def dumps_value(self, topic: str, value: V) -> bytes:\n        if isinstance(value, ModelT):\n            try:\n                ser = self._get_serializer(value._options.serializer)\n            except KeyError:\n                return value.dumps()\n            else:\n                return await ser.dumps_value(topic, value)\n        return value\n\n",
        "target_code_len": 354,
        "diff_format": "@@ -217,8 +218,10 @@\n     async def dumps_value(self, topic: str, value: V) -> bytes:\n-        try:\n-            ser = self._get_serializer(value._options.serializer)\n-        except KeyError:\n-            return value.dumps()\n-        else:\n-            return await ser.dumps_value(topic, value)\n+        if isinstance(value, ModelT):\n+            try:\n+                ser = self._get_serializer(value._options.serializer)\n+            except KeyError:\n+                return value.dumps()\n+            else:\n+                return await ser.dumps_value(topic, value)\n+        return value\n \n",
        "source_code_with_indent": "    <DED>async def dumps_value(self, topic: str, value: V) -> bytes:\n        <IND>try:\n            <IND>ser = self._get_serializer(value._options.serializer)\n        <DED>except KeyError:\n            <IND>return value.dumps()\n        <DED>else:\n            <IND>return await ser.dumps_value(topic, value)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>async def dumps_value(self, topic: str, value: V) -> bytes:\n        <IND>if isinstance(value, ModelT):\n            <IND>try:\n                <IND>ser = self._get_serializer(value._options.serializer)\n            <DED>except KeyError:\n                <IND>return value.dumps()\n            <DED>else:\n                <IND>return await ser.dumps_value(topic, value)\n        <DED><DED>return value\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "robinhood/faust",
    "commit": "a2d9227f0bdd13324aa5b2c13143268b72a65fe5",
    "filename": "faust/utils/collections.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/robinhood-faust/faust/utils/collections.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "faust/utils/collections.py:19:8 Incompatible return type [7]: Expected `ItemsView[typing.Any, typing.Any]` but got `typing.AbstractSet[typing.Tuple[typing.Any, typing.Any]]`.",
    "message": " Expected `ItemsView[typing.Any, typing.Any]` but got `typing.AbstractSet[typing.Tuple[typing.Any, typing.Any]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 19,
    "warning_line": "        return self.data.items()",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import ItemsView, KeysView, MutableMapping, ValuesView\nfrom collections import UserDict\n",
        "source_code_len": 100,
        "target_code": "from typing import (\n    Any, ItemsView, Iterator, KeysView, MutableMapping, ValuesView, cast,\n)\nfrom collections import UserDict\n",
        "target_code_len": 130,
        "diff_format": "@@ -1,2 +1,4 @@\n-from typing import ItemsView, KeysView, MutableMapping, ValuesView\n+from typing import (\n+    Any, ItemsView, Iterator, KeysView, MutableMapping, ValuesView, cast,\n+)\n from collections import UserDict\n",
        "source_code_with_indent": "from typing import ItemsView, KeysView, MutableMapping, ValuesView\nfrom collections import UserDict\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import (\n    Any, ItemsView, Iterator, KeysView, MutableMapping, ValuesView, cast,\n)\nfrom collections import UserDict\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def items(self) -> ItemsView:\n        # MutableMapping.items is slow\n        return self.data.items()\n\n    def keys(self) -> KeysView:\n        # MutableMapping.keys is slow\n        return self.data.keys()\n\n    def values(self) -> ValuesView:\n        # MutableMapping.values is slow\n        return self.data.values()\n",
        "source_code_len": 320,
        "target_code": "    def items(self) -> ItemsView:\n        return cast(ItemsView, self.data.items())\n\n    def keys(self) -> KeysView:\n        return cast(KeysView, self.data.keys())\n\n    def values(self) -> ValuesView:\n        return self.data.values()\n",
        "target_code_len": 236,
        "diff_format": "@@ -17,11 +36,8 @@\n     def items(self) -> ItemsView:\n-        # MutableMapping.items is slow\n-        return self.data.items()\n+        return cast(ItemsView, self.data.items())\n \n     def keys(self) -> KeysView:\n-        # MutableMapping.keys is slow\n-        return self.data.keys()\n+        return cast(KeysView, self.data.keys())\n \n     def values(self) -> ValuesView:\n-        # MutableMapping.values is slow\n         return self.data.values()\n",
        "source_code_with_indent": "    <DED>def items(self) -> ItemsView:\n        # MutableMapping.items is slow\n        <IND>return self.data.items()\n\n    <DED>def keys(self) -> KeysView:\n        # MutableMapping.keys is slow\n        <IND>return self.data.keys()\n\n    <DED>def values(self) -> ValuesView:\n        # MutableMapping.values is slow\n        <IND>return self.data.values()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def items(self) -> ItemsView:\n        <IND>return cast(ItemsView, self.data.items())\n\n    <DED>def keys(self) -> KeysView:\n        <IND>return cast(KeysView, self.data.keys())\n\n    <DED>def values(self) -> ValuesView:\n        <IND>return self.data.values()\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "robinhood/faust",
    "commit": "a2d9227f0bdd13324aa5b2c13143268b72a65fe5",
    "filename": "faust/utils/collections.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/robinhood-faust/faust/utils/collections.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "faust/utils/collections.py:23:8 Incompatible return type [7]: Expected `KeysView[typing.Any]` but got `typing.AbstractSet[typing.Any]`.",
    "message": " Expected `KeysView[typing.Any]` but got `typing.AbstractSet[typing.Any]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 23,
    "warning_line": "        return self.data.keys()",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import ItemsView, KeysView, MutableMapping, ValuesView\nfrom collections import UserDict\n",
        "source_code_len": 100,
        "target_code": "from typing import (\n    Any, ItemsView, Iterator, KeysView, MutableMapping, ValuesView, cast,\n)\nfrom collections import UserDict\n",
        "target_code_len": 130,
        "diff_format": "@@ -1,2 +1,4 @@\n-from typing import ItemsView, KeysView, MutableMapping, ValuesView\n+from typing import (\n+    Any, ItemsView, Iterator, KeysView, MutableMapping, ValuesView, cast,\n+)\n from collections import UserDict\n",
        "source_code_with_indent": "from typing import ItemsView, KeysView, MutableMapping, ValuesView\nfrom collections import UserDict\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import (\n    Any, ItemsView, Iterator, KeysView, MutableMapping, ValuesView, cast,\n)\nfrom collections import UserDict\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def items(self) -> ItemsView:\n        # MutableMapping.items is slow\n        return self.data.items()\n\n    def keys(self) -> KeysView:\n        # MutableMapping.keys is slow\n        return self.data.keys()\n\n    def values(self) -> ValuesView:\n        # MutableMapping.values is slow\n        return self.data.values()\n",
        "source_code_len": 320,
        "target_code": "    def items(self) -> ItemsView:\n        return cast(ItemsView, self.data.items())\n\n    def keys(self) -> KeysView:\n        return cast(KeysView, self.data.keys())\n\n    def values(self) -> ValuesView:\n        return self.data.values()\n",
        "target_code_len": 236,
        "diff_format": "@@ -17,11 +36,8 @@\n     def items(self) -> ItemsView:\n-        # MutableMapping.items is slow\n-        return self.data.items()\n+        return cast(ItemsView, self.data.items())\n \n     def keys(self) -> KeysView:\n-        # MutableMapping.keys is slow\n-        return self.data.keys()\n+        return cast(KeysView, self.data.keys())\n \n     def values(self) -> ValuesView:\n-        # MutableMapping.values is slow\n         return self.data.values()\n",
        "source_code_with_indent": "    <DED>def items(self) -> ItemsView:\n        # MutableMapping.items is slow\n        <IND>return self.data.items()\n\n    <DED>def keys(self) -> KeysView:\n        # MutableMapping.keys is slow\n        <IND>return self.data.keys()\n\n    <DED>def values(self) -> ValuesView:\n        # MutableMapping.values is slow\n        <IND>return self.data.values()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def items(self) -> ItemsView:\n        <IND>return cast(ItemsView, self.data.items())\n\n    <DED>def keys(self) -> KeysView:\n        <IND>return cast(KeysView, self.data.keys())\n\n    <DED>def values(self) -> ValuesView:\n        <IND>return self.data.values()\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]