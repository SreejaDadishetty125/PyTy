[
  {
    "project": "optuna/optuna",
    "commit": "e7ac8f98e8b51c5be4c8ad9b8229701b8ee4d256",
    "filename": "optuna/samplers/_tpe/sampler.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/optuna-optuna/optuna/samplers/_tpe/sampler.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "optuna/samplers/_tpe/sampler.py:807:4 Incompatible return type [7]: Expected `Tuple[Dict[str, List[float]], List[Tuple[float, List[float]]]]` but got `Tuple[Dict[str, List[Optional[float]]], List[typing.Any]]`.",
    "message": " Expected `Tuple[Dict[str, List[float]], List[Tuple[float, List[float]]]]` but got `Tuple[Dict[str, List[Optional[float]]], List[typing.Any]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 807,
    "warning_line": "    return values, scores",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        trial_id: int,\n        config_vals: Dict[str, List[float]],\n        loss_vals: List[Tuple[float, List[float]]],\n",
        "source_code_len": 120,
        "target_code": "        trial_id: int,\n        config_vals: Dict[str, List[Optional[float]]],\n        loss_vals: List[Tuple[float, List[float]]],\n",
        "target_code_len": 130,
        "diff_format": "@@ -444,3 +444,3 @@\n         trial_id: int,\n-        config_vals: Dict[str, List[float]],\n+        config_vals: Dict[str, List[Optional[float]]],\n         loss_vals: List[Tuple[float, List[float]]],\n",
        "source_code_with_indent": "        trial_id: int,\n        config_vals: Dict[str, List[float]],\n        loss_vals: List[Tuple[float, List[float]]],\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        trial_id: int,\n        config_vals: Dict[str, List[Optional[float]]],\n        loss_vals: List[Tuple[float, List[float]]],\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    constant_liar: bool = False,  # TODO(hvy): Remove default value and fix unit tests.\n) -> Tuple[Dict[str, List[float]], List[Tuple[float, List[float]]]]:\n    \"\"\"Get observation pairs from the study.\n",
        "source_code_len": 202,
        "target_code": "    constant_liar: bool = False,  # TODO(hvy): Remove default value and fix unit tests.\n) -> Tuple[Dict[str, List[Optional[float]]], List[Tuple[float, List[float]]]]:\n    \"\"\"Get observation pairs from the study.\n",
        "target_code_len": 212,
        "diff_format": "@@ -724,3 +728,3 @@\n     constant_liar: bool = False,  # TODO(hvy): Remove default value and fix unit tests.\n-) -> Tuple[Dict[str, List[float]], List[Tuple[float, List[float]]]]:\n+) -> Tuple[Dict[str, List[Optional[float]]], List[Tuple[float, List[float]]]]:\n     \"\"\"Get observation pairs from the study.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "    constant_liar: bool = False,  # TODO(hvy): Remove default value and fix unit tests.\n) -> Tuple[Dict[str, List[float]], List[Tuple[float, List[float]]]]:\n    <IND>",
        "target_code_with_indent": "    constant_liar: bool = False,  # TODO(hvy): Remove default value and fix unit tests.\n) -> Tuple[Dict[str, List[Optional[float]]], List[Tuple[float, List[float]]]]:\n    <IND>"
      }
    ]
  }
]