[
  {
    "project": "TheAlgorithms/Python",
    "commit": "e9882e41ba7a1d1fbdc12362a522a1b646497192",
    "filename": "matrix/matrix_operation.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/matrix/matrix_operation.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "matrix/matrix_operation.py:20:8 Incompatible return type [7]: Expected `typing.List[typing.List[typing.Any]]` but got implicit return value of `None`.",
    "message": " Expected `typing.List[typing.List[typing.Any]]` but got implicit return value of `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 20,
    "warning_line": "        return [[sum(t) for t in zip(*m)] for m in zip(*matrix_s)]",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        return [[sum(t) for t in zip(*m)] for m in zip(*matrix_s)]\n\n",
        "source_code_len": 68,
        "target_code": "        return [[sum(t) for t in zip(*m)] for m in zip(*matrix_s)]\n    raise TypeError(\"Expected a matrix, got int/list instead\")\n\n",
        "target_code_len": 131,
        "diff_format": "@@ -20,2 +24,3 @@\n         return [[sum(t) for t in zip(*m)] for m in zip(*matrix_s)]\n+    raise TypeError(\"Expected a matrix, got int/list instead\")\n \n",
        "source_code_with_indent": "        <DED>return [[sum(t) for t in zip(*m)] for m in zip(*matrix_s)]\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>return [[sum(t) for t in zip(*m)] for m in zip(*matrix_s)]\n    <DED>raise TypeError(\"Expected a matrix, got int/list instead\")\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "TheAlgorithms/Python",
    "commit": "e9882e41ba7a1d1fbdc12362a522a1b646497192",
    "filename": "matrix/matrix_operation.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/matrix/matrix_operation.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "matrix/matrix_operation.py:35:8 Incompatible return type [7]: Expected `typing.List[typing.List[typing.Any]]` but got implicit return value of `None`.",
    "message": " Expected `typing.List[typing.List[typing.Any]]` but got implicit return value of `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 35,
    "warning_line": "        return [[i - j for i, j in zip(*m)] for m in zip(matrix_a, matrix_b)]",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        return [[i - j for i, j in zip(*m)] for m in zip(matrix_a, matrix_b)]\n\n\ndef scalar_multiply(matrix: list[list], n: int) -> list[list]:\n    \"\"\"\n",
        "source_code_len": 151,
        "target_code": "        return [[i - j for i, j in zip(*m)] for m in zip(matrix_a, matrix_b)]\n    raise TypeError(\"Expected a matrix, got int/list instead\")\n\n\ndef scalar_multiply(matrix: list[list], n: int | float) -> list[list]:\n    \"\"\"\n",
        "target_code_len": 222,
        "diff_format": "@@ -35,5 +44,6 @@\n         return [[i - j for i, j in zip(*m)] for m in zip(matrix_a, matrix_b)]\n+    raise TypeError(\"Expected a matrix, got int/list instead\")\n \n \n-def scalar_multiply(matrix: list[list], n: int) -> list[list]:\n+def scalar_multiply(matrix: list[list], n: int | float) -> list[list]:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "        <IND>return [[i - j for i, j in zip(*m)] for m in zip(matrix_a, matrix_b)]\n\n\n<DED><DED>def scalar_multiply(matrix: list[list], n: int) -> list[list]:\n    <IND>",
        "target_code_with_indent": "        <IND>return [[i - j for i, j in zip(*m)] for m in zip(matrix_a, matrix_b)]\n    <DED>raise TypeError(\"Expected a matrix, got int/list instead\")\n\n\n<DED>def scalar_multiply(matrix: list[list], n: int | float) -> list[list]:\n    <IND>"
      }
    ]
  },
  {
    "project": "TheAlgorithms/Python",
    "commit": "e9882e41ba7a1d1fbdc12362a522a1b646497192",
    "filename": "matrix/matrix_operation.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/matrix/matrix_operation.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "matrix/matrix_operation.py:91:12 Incompatible return type [7]: Expected `typing.List[typing.List[typing.Any]]` but got `map[typing.List[Variable[_T]]]`.",
    "message": " Expected `typing.List[typing.List[typing.Any]]` but got `map[typing.List[Variable[_T]]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 91,
    "warning_line": "            return map(list, zip(*matrix))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef transpose(matrix: list[list], return_map: bool = True) -> list[list]:\n    \"\"\"\n",
        "source_code_len": 83,
        "target_code": "\ndef transpose(matrix: list[list], return_map: bool = True) -> list[list] | map[list]:\n    \"\"\"\n",
        "target_code_len": 95,
        "diff_format": "@@ -81,3 +91,3 @@\n \n-def transpose(matrix: list[list], return_map: bool = True) -> list[list]:\n+def transpose(matrix: list[list], return_map: bool = True) -> list[list] | map[list]:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>def transpose(matrix: list[list], return_map: bool = True) -> list[list]:\n    <IND>",
        "target_code_with_indent": "\n<DED>def transpose(matrix: list[list], return_map: bool = True) -> list[list] | map[list]:\n    <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            return list(map(list, zip(*matrix)))\n\n",
        "source_code_len": 50,
        "target_code": "            return list(map(list, zip(*matrix)))\n    raise TypeError(\"Expected a matrix, got int/list instead\")\n\n",
        "target_code_len": 113,
        "diff_format": "@@ -93,2 +107,3 @@\n             return list(map(list, zip(*matrix)))\n+    raise TypeError(\"Expected a matrix, got int/list instead\")\n \n",
        "source_code_with_indent": "            <IND>return list(map(list, zip(*matrix)))\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <IND>return list(map(list, zip(*matrix)))\n    <DED><DED>raise TypeError(\"Expected a matrix, got int/list instead\")\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    ]\n    adjugate = transpose(cofactors)\n    return scalar_multiply(adjugate, 1 / det)\n",
        "source_code_len": 88,
        "target_code": "    ]\n    adjugate = list(transpose(cofactors))\n    return scalar_multiply(adjugate, 1 / det)\n",
        "target_code_len": 94,
        "diff_format": "@@ -140,3 +155,3 @@\n     ]\n-    adjugate = transpose(cofactors)\n+    adjugate = list(transpose(cofactors))\n     return scalar_multiply(adjugate, 1 / det)\n",
        "source_code_with_indent": "    ]\n    adjugate = transpose(cofactors)\n    return scalar_multiply(adjugate, 1 / det)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    ]\n    adjugate = list(transpose(cofactors))\n    return scalar_multiply(adjugate, 1 / det)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "TheAlgorithms/Python",
    "commit": "e9882e41ba7a1d1fbdc12362a522a1b646497192",
    "filename": "matrix/matrix_operation.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/matrix/matrix_operation.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "matrix/matrix_operation.py:93:12 Incompatible return type [7]: Expected `typing.List[typing.List[typing.Any]]` but got implicit return value of `None`.",
    "message": " Expected `typing.List[typing.List[typing.Any]]` but got implicit return value of `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 93,
    "warning_line": "            return list(map(list, zip(*matrix)))",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            return list(map(list, zip(*matrix)))\n\n",
        "source_code_len": 50,
        "target_code": "            return list(map(list, zip(*matrix)))\n    raise TypeError(\"Expected a matrix, got int/list instead\")\n\n",
        "target_code_len": 113,
        "diff_format": "@@ -93,2 +107,3 @@\n             return list(map(list, zip(*matrix)))\n+    raise TypeError(\"Expected a matrix, got int/list instead\")\n \n",
        "source_code_with_indent": "            <IND>return list(map(list, zip(*matrix)))\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <IND>return list(map(list, zip(*matrix)))\n    <DED><DED>raise TypeError(\"Expected a matrix, got int/list instead\")\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "TheAlgorithms/Python",
    "commit": "e9882e41ba7a1d1fbdc12362a522a1b646497192",
    "filename": "matrix/matrix_operation.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/matrix/matrix_operation.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "matrix/matrix_operation.py:130:8 Incompatible return type [7]: Expected `typing.List[typing.List[typing.Any]]` but got `None`.",
    "message": " Expected `typing.List[typing.List[typing.Any]]` but got `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 130,
    "warning_line": "        return None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef inverse(matrix: list[list]) -> list[list]:\n    \"\"\"\n",
        "source_code_len": 56,
        "target_code": "\ndef inverse(matrix: list[list]) -> list[list] | None:\n    \"\"\"\n",
        "target_code_len": 63,
        "diff_format": "@@ -120,3 +135,3 @@\n \n-def inverse(matrix: list[list]) -> list[list]:\n+def inverse(matrix: list[list]) -> list[list] | None:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>def inverse(matrix: list[list]) -> list[list]:\n    <IND>",
        "target_code_with_indent": "\n<DED>def inverse(matrix: list[list]) -> list[list] | None:\n    <IND>"
      }
    ]
  },
  {
    "project": "TheAlgorithms/Python",
    "commit": "e9882e41ba7a1d1fbdc12362a522a1b646497192",
    "filename": "matrix/matrix_operation.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/matrix/matrix_operation.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "matrix/matrix_operation.py:142:37 Incompatible parameter type [6]: Expected `int` for 2nd positional only parameter to call `scalar_multiply` but got `float`.",
    "message": " Expected `int` for 2nd positional only parameter to call `scalar_multiply` but got `float`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 142,
    "warning_line": "    return scalar_multiply(adjugate, 1 / det)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        return [[i - j for i, j in zip(*m)] for m in zip(matrix_a, matrix_b)]\n\n\ndef scalar_multiply(matrix: list[list], n: int) -> list[list]:\n    \"\"\"\n",
        "source_code_len": 151,
        "target_code": "        return [[i - j for i, j in zip(*m)] for m in zip(matrix_a, matrix_b)]\n    raise TypeError(\"Expected a matrix, got int/list instead\")\n\n\ndef scalar_multiply(matrix: list[list], n: int | float) -> list[list]:\n    \"\"\"\n",
        "target_code_len": 222,
        "diff_format": "@@ -35,5 +44,6 @@\n         return [[i - j for i, j in zip(*m)] for m in zip(matrix_a, matrix_b)]\n+    raise TypeError(\"Expected a matrix, got int/list instead\")\n \n \n-def scalar_multiply(matrix: list[list], n: int) -> list[list]:\n+def scalar_multiply(matrix: list[list], n: int | float) -> list[list]:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "        <IND>return [[i - j for i, j in zip(*m)] for m in zip(matrix_a, matrix_b)]\n\n\n<DED><DED>def scalar_multiply(matrix: list[list], n: int) -> list[list]:\n    <IND>",
        "target_code_with_indent": "        <IND>return [[i - j for i, j in zip(*m)] for m in zip(matrix_a, matrix_b)]\n    <DED>raise TypeError(\"Expected a matrix, got int/list instead\")\n\n\n<DED>def scalar_multiply(matrix: list[list], n: int | float) -> list[list]:\n    <IND>"
      }
    ]
  },
  {
    "project": "TheAlgorithms/Python",
    "commit": "e9882e41ba7a1d1fbdc12362a522a1b646497192",
    "filename": "matrix/matrix_operation.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/matrix/matrix_operation.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "matrix/matrix_operation.py:152:4 Incompatible return type [7]: Expected `typing.List[typing.Any]` but got `typing.Tuple[int, int]`.",
    "message": " Expected `typing.List[typing.Any]` but got `typing.Tuple[int, int]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 152,
    "warning_line": "    return len(matrix), len(matrix[0])",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def _check_not_integer(matrix: list[list]) -> bool:\n    if not isinstance(matrix, int) and not isinstance(matrix[0], int):\n        return True\n    raise TypeError(\"Expected a matrix, got int/list instead\")\n\n\ndef _shape(matrix: list[list]) -> list:\n    return len(matrix), len(matrix[0])\n",
        "source_code_len": 287,
        "target_code": "def _check_not_integer(matrix: list[list]) -> bool:\n    return not isinstance(matrix, int) and not isinstance(matrix[0], int)\n\n\ndef _shape(matrix: list[list]) -> tuple[int, int]:\n    return len(matrix), len(matrix[0])\n",
        "target_code_len": 218,
        "diff_format": "@@ -145,8 +160,6 @@\n def _check_not_integer(matrix: list[list]) -> bool:\n-    if not isinstance(matrix, int) and not isinstance(matrix[0], int):\n-        return True\n-    raise TypeError(\"Expected a matrix, got int/list instead\")\n+    return not isinstance(matrix, int) and not isinstance(matrix[0], int)\n \n \n-def _shape(matrix: list[list]) -> list:\n+def _shape(matrix: list[list]) -> tuple[int, int]:\n     return len(matrix), len(matrix[0])\n",
        "source_code_with_indent": "<DED>def _check_not_integer(matrix: list[list]) -> bool:\n    <IND>if not isinstance(matrix, int) and not isinstance(matrix[0], int):\n        <IND>return True\n    <DED>raise TypeError(\"Expected a matrix, got int/list instead\")\n\n\n<DED>def _shape(matrix: list[list]) -> list:\n    <IND>return len(matrix), len(matrix[0])\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED>def _check_not_integer(matrix: list[list]) -> bool:\n    <IND>return not isinstance(matrix, int) and not isinstance(matrix[0], int)\n\n\n<DED>def _shape(matrix: list[list]) -> tuple[int, int]:\n    <IND>return len(matrix), len(matrix[0])\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _verify_matrix_sizes(matrix_a: list[list], matrix_b: list[list]) -> tuple[list]:\n    shape = _shape(matrix_a) + _shape(matrix_b)\n",
        "source_code_len": 134,
        "target_code": "\ndef _verify_matrix_sizes(\n    matrix_a: list[list], matrix_b: list[list]\n) -> tuple[tuple, tuple]:\n    shape = _shape(matrix_a) + _shape(matrix_b)\n",
        "target_code_len": 148,
        "diff_format": "@@ -154,3 +167,5 @@\n \n-def _verify_matrix_sizes(matrix_a: list[list], matrix_b: list[list]) -> tuple[list]:\n+def _verify_matrix_sizes(\n+    matrix_a: list[list], matrix_b: list[list]\n+) -> tuple[tuple, tuple]:\n     shape = _shape(matrix_a) + _shape(matrix_b)\n",
        "source_code_with_indent": "\n<DED>def _verify_matrix_sizes(matrix_a: list[list], matrix_b: list[list]) -> tuple[list]:\n    <IND>shape = _shape(matrix_a) + _shape(matrix_b)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def _verify_matrix_sizes(\n    matrix_a: list[list], matrix_b: list[list]\n) -> tuple[tuple, tuple]:\n    <IND>shape = _shape(matrix_a) + _shape(matrix_b)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "TheAlgorithms/Python",
    "commit": "e9882e41ba7a1d1fbdc12362a522a1b646497192",
    "filename": "matrix/matrix_operation.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/matrix/matrix_operation.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "matrix/matrix_operation.py:162:4 Incompatible return type [7]: Expected `typing.Tuple[typing.List[typing.Any]]` but got `typing.Tuple[typing.Tuple[typing.Any, typing.Any], typing.Tuple[typing.Any, typing.Any]]`.",
    "message": " Expected `typing.Tuple[typing.List[typing.Any]]` but got `typing.Tuple[typing.Tuple[typing.Any, typing.Any], typing.Tuple[typing.Any, typing.Any]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 162,
    "warning_line": "    return (shape[0], shape[2]), (shape[1], shape[3])",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _verify_matrix_sizes(matrix_a: list[list], matrix_b: list[list]) -> tuple[list]:\n    shape = _shape(matrix_a) + _shape(matrix_b)\n",
        "source_code_len": 134,
        "target_code": "\ndef _verify_matrix_sizes(\n    matrix_a: list[list], matrix_b: list[list]\n) -> tuple[tuple, tuple]:\n    shape = _shape(matrix_a) + _shape(matrix_b)\n",
        "target_code_len": 148,
        "diff_format": "@@ -154,3 +167,5 @@\n \n-def _verify_matrix_sizes(matrix_a: list[list], matrix_b: list[list]) -> tuple[list]:\n+def _verify_matrix_sizes(\n+    matrix_a: list[list], matrix_b: list[list]\n+) -> tuple[tuple, tuple]:\n     shape = _shape(matrix_a) + _shape(matrix_b)\n",
        "source_code_with_indent": "\n<DED>def _verify_matrix_sizes(matrix_a: list[list], matrix_b: list[list]) -> tuple[list]:\n    <IND>shape = _shape(matrix_a) + _shape(matrix_b)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def _verify_matrix_sizes(\n    matrix_a: list[list], matrix_b: list[list]\n) -> tuple[tuple, tuple]:\n    <IND>shape = _shape(matrix_a) + _shape(matrix_b)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]