[
  {
    "project": "bocadilloproject/bocadillo",
    "commit": "14f24dda63735b4b9d2a9f1b116468738e1d6988",
    "filename": "bocadillo/api.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/bocadilloproject-bocadillo/bocadillo/api.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bocadillo/api.py:131:28 Incompatible parameter type [6]: Expected `str` for 1st parameter `media_type` to call `Media.__init__` but got `Optional[str]`.",
    "message": " Expected `str` for 1st parameter `media_type` to call `Media.__init__` but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 131,
    "warning_line": "        self._media = Media(media_type=media_type)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        gzip_min_size: int = 1024,\n        media_type: Optional[str] = Media.JSON,\n    ):\n",
        "source_code_len": 90,
        "target_code": "        gzip_min_size: int = 1024,\n        media_type: str = Media.JSON,\n    ):\n",
        "target_code_len": 80,
        "diff_format": "@@ -107,3 +107,3 @@\n         gzip_min_size: int = 1024,\n-        media_type: Optional[str] = Media.JSON,\n+        media_type: str = Media.JSON,\n     ):\n",
        "source_code_with_indent": "        gzip_min_size: int = 1024,\n        media_type: Optional[str] = Media.JSON,\n    ):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        gzip_min_size: int = 1024,\n        media_type: str = Media.JSON,\n    ):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "bocadilloproject/bocadillo",
    "commit": "14f24dda63735b4b9d2a9f1b116468738e1d6988",
    "filename": "bocadillo/api.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/bocadilloproject-bocadillo/bocadillo/api.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bocadillo/api.py:138:39 Incompatible parameter type [6]: Expected `typing.Callable[[Request, Response, Exception], None]` for 2nd parameter `handler` to call `ServerErrorMiddleware.__init__` but got `typing.Callable(error_to_text)[[Named(req, Request), Named(res, Response), Named(exc, HTTPError)], typing.Coroutine[typing.Any, typing.Any, typing.Any]]`.",
    "message": " Expected `typing.Callable[[Request, Response, Exception], None]` for 2nd parameter `handler` to call `ServerErrorMiddleware.__init__` but got `typing.Callable(error_to_text)[[Named(req, Request), Named(res, Response), Named(exc, HTTPError)], typing.Coroutine[typing.Any, typing.Any, typing.Any]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 138,
    "warning_line": "            self.exception_middleware, handler=error_to_text, debug=self._debug"
  },
  {
    "project": "bocadilloproject/bocadillo",
    "commit": "14f24dda63735b4b9d2a9f1b116468738e1d6988",
    "filename": "bocadillo/api.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/bocadilloproject-bocadillo/bocadillo/api.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bocadillo/api.py:140:42 Incompatible parameter type [6]: Expected `typing.Callable[[Request, Response, Exception], None]` for 2nd positional only parameter to call `API.add_error_handler` but got `typing.Callable(error_to_text)[[Named(req, Request), Named(res, Response), Named(exc, HTTPError)], typing.Coroutine[typing.Any, typing.Any, typing.Any]]`.",
    "message": " Expected `typing.Callable[[Request, Response, Exception], None]` for 2nd positional only parameter to call `API.add_error_handler` but got `typing.Callable(error_to_text)[[Named(req, Request), Named(res, Response), Named(exc, HTTPError)], typing.Coroutine[typing.Any, typing.Any, typing.Any]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 140,
    "warning_line": "        self.add_error_handler(HTTPError, error_to_text)"
  },
  {
    "project": "bocadilloproject/bocadillo",
    "commit": "14f24dda63735b4b9d2a9f1b116468738e1d6988",
    "filename": "bocadillo/hooks.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/bocadilloproject-bocadillo/bocadillo/hooks.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bocadillo/hooks.py:53:56 Incompatible parameter type [6]: Expected `typing.Callable[[Request, Response, typing.Any], Awaitable[None]]` for 3rd positional only parameter to call `_with_hook` but got `Union[typing.Callable[[Request, Response, typing.Any], Awaitable[None]], Type[View]]`.",
    "message": " Expected `typing.Callable[[Request, Response, typing.Any], Awaitable[None]]` for 3rd positional only parameter to call `_with_hook` but got `Union[typing.Callable[[Request, Response, typing.Any], Awaitable[None]], Type[View]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 53,
    "warning_line": "                return _with_hook(hook_type, hook_func, handler)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                return view_cls\n            else:\n                return _with_hook(hook_type, hook_func, handler)\n\n",
        "source_code_len": 116,
        "target_code": "                return view_cls\n            return _with_hook(hook_type, hook_func, handler)\n\n",
        "target_code_len": 94,
        "diff_format": "@@ -51,4 +51,3 @@\n                 return view_cls\n-            else:\n-                return _with_hook(hook_type, hook_func, handler)\n+            return _with_hook(hook_type, hook_func, handler)\n \n",
        "source_code_with_indent": "                <DED>return view_cls\n            <DED>else:\n                <IND>return _with_hook(hook_type, hook_func, handler)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                <DED>return view_cls\n            <DED>return _with_hook(hook_type, hook_func, handler)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "bocadilloproject/bocadillo",
    "commit": "14f24dda63735b4b9d2a9f1b116468738e1d6988",
    "filename": "bocadillo/response.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/bocadilloproject-bocadillo/bocadillo/response.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bocadillo/response.py:29:8 Incompatible attribute type [8]: Attribute `status_code` declared in class `Response` has type `int` but is used as type `None`.",
    "message": " Attribute `status_code` declared in class `Response` has type `int` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 29,
    "warning_line": "        self.status_code: int = None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import inspect\nfrom typing import AnyStr, Any, Callable, Coroutine, Optional, AsyncIterable\n\n",
        "source_code_len": 93,
        "target_code": "import inspect\nfrom typing import (\n    AnyStr,\n    Any,\n    Callable,\n    Coroutine,\n    Optional,\n    AsyncIterable,\n    Dict,\n)\n\n",
        "target_code_len": 132,
        "diff_format": "@@ -1,3 +1,11 @@\n import inspect\n-from typing import AnyStr, Any, Callable, Coroutine, Optional, AsyncIterable\n+from typing import (\n+    AnyStr,\n+    Any,\n+    Callable,\n+    Coroutine,\n+    Optional,\n+    AsyncIterable,\n+    Dict,\n+)\n \n",
        "source_code_with_indent": "import inspect\nfrom typing import AnyStr, Any, Callable, Coroutine, Optional, AsyncIterable\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import inspect\nfrom typing import (\n    AnyStr,\n    Any,\n    Callable,\n    Coroutine,\n    Optional,\n    AsyncIterable,\n    Dict,\n)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self.request = request\n        self._content: AnyStr = None\n        self.status_code: int = None\n        self.headers = {}\n        self._media = media\n        self._background: BackgroundFunc = None\n        self._generator: AsyncIterable[bytes] = None\n        self.chunked = False\n",
        "source_code_len": 289,
        "target_code": "        self.request = request\n        self._content: Optional[AnyStr] = None\n        self.status_code: Optional[int] = None\n        self.headers: Dict[str, str] = {}\n        self._media = media\n        self._background: Optional[BackgroundFunc] = None\n        self._generator: Optional[AsyncIterable[bytes]] = None\n        self.chunked = False\n",
        "target_code_len": 345,
        "diff_format": "@@ -27,8 +35,8 @@\n         self.request = request\n-        self._content: AnyStr = None\n-        self.status_code: int = None\n-        self.headers = {}\n+        self._content: Optional[AnyStr] = None\n+        self.status_code: Optional[int] = None\n+        self.headers: Dict[str, str] = {}\n         self._media = media\n-        self._background: BackgroundFunc = None\n-        self._generator: AsyncIterable[bytes] = None\n+        self._background: Optional[BackgroundFunc] = None\n+        self._generator: Optional[AsyncIterable[bytes]] = None\n         self.chunked = False\n",
        "source_code_with_indent": "        <IND>self.request = request\n        self._content: AnyStr = None\n        self.status_code: int = None\n        self.headers = {}\n        self._media = media\n        self._background: BackgroundFunc = None\n        self._generator: AsyncIterable[bytes] = None\n        self.chunked = False\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>self.request = request\n        self._content: Optional[AnyStr] = None\n        self.status_code: Optional[int] = None\n        self.headers: Dict[str, str] = {}\n        self._media = media\n        self._background: Optional[BackgroundFunc] = None\n        self._generator: Optional[AsyncIterable[bytes]] = None\n        self.chunked = False\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "bocadilloproject/bocadillo",
    "commit": "14f24dda63735b4b9d2a9f1b116468738e1d6988",
    "filename": "bocadillo/response.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/bocadilloproject-bocadillo/bocadillo/response.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bocadillo/response.py:32:8 Incompatible attribute type [8]: Attribute `_background` declared in class `Response` has type `typing.Callable[..., Coroutine[typing.Any, typing.Any, typing.Any]]` but is used as type `None`.",
    "message": " Attribute `_background` declared in class `Response` has type `typing.Callable[..., Coroutine[typing.Any, typing.Any, typing.Any]]` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 32,
    "warning_line": "        self._background: BackgroundFunc = None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import inspect\nfrom typing import AnyStr, Any, Callable, Coroutine, Optional, AsyncIterable\n\n",
        "source_code_len": 93,
        "target_code": "import inspect\nfrom typing import (\n    AnyStr,\n    Any,\n    Callable,\n    Coroutine,\n    Optional,\n    AsyncIterable,\n    Dict,\n)\n\n",
        "target_code_len": 132,
        "diff_format": "@@ -1,3 +1,11 @@\n import inspect\n-from typing import AnyStr, Any, Callable, Coroutine, Optional, AsyncIterable\n+from typing import (\n+    AnyStr,\n+    Any,\n+    Callable,\n+    Coroutine,\n+    Optional,\n+    AsyncIterable,\n+    Dict,\n+)\n \n",
        "source_code_with_indent": "import inspect\nfrom typing import AnyStr, Any, Callable, Coroutine, Optional, AsyncIterable\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import inspect\nfrom typing import (\n    AnyStr,\n    Any,\n    Callable,\n    Coroutine,\n    Optional,\n    AsyncIterable,\n    Dict,\n)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self.request = request\n        self._content: AnyStr = None\n        self.status_code: int = None\n        self.headers = {}\n        self._media = media\n        self._background: BackgroundFunc = None\n        self._generator: AsyncIterable[bytes] = None\n        self.chunked = False\n",
        "source_code_len": 289,
        "target_code": "        self.request = request\n        self._content: Optional[AnyStr] = None\n        self.status_code: Optional[int] = None\n        self.headers: Dict[str, str] = {}\n        self._media = media\n        self._background: Optional[BackgroundFunc] = None\n        self._generator: Optional[AsyncIterable[bytes]] = None\n        self.chunked = False\n",
        "target_code_len": 345,
        "diff_format": "@@ -27,8 +35,8 @@\n         self.request = request\n-        self._content: AnyStr = None\n-        self.status_code: int = None\n-        self.headers = {}\n+        self._content: Optional[AnyStr] = None\n+        self.status_code: Optional[int] = None\n+        self.headers: Dict[str, str] = {}\n         self._media = media\n-        self._background: BackgroundFunc = None\n-        self._generator: AsyncIterable[bytes] = None\n+        self._background: Optional[BackgroundFunc] = None\n+        self._generator: Optional[AsyncIterable[bytes]] = None\n         self.chunked = False\n",
        "source_code_with_indent": "        <IND>self.request = request\n        self._content: AnyStr = None\n        self.status_code: int = None\n        self.headers = {}\n        self._media = media\n        self._background: BackgroundFunc = None\n        self._generator: AsyncIterable[bytes] = None\n        self.chunked = False\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>self.request = request\n        self._content: Optional[AnyStr] = None\n        self.status_code: Optional[int] = None\n        self.headers: Dict[str, str] = {}\n        self._media = media\n        self._background: Optional[BackgroundFunc] = None\n        self._generator: Optional[AsyncIterable[bytes]] = None\n        self.chunked = False\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "bocadilloproject/bocadillo",
    "commit": "14f24dda63735b4b9d2a9f1b116468738e1d6988",
    "filename": "bocadillo/response.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/bocadilloproject-bocadillo/bocadillo/response.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bocadillo/response.py:33:8 Incompatible attribute type [8]: Attribute `_generator` declared in class `Response` has type `AsyncIterable[bytes]` but is used as type `None`.",
    "message": " Attribute `_generator` declared in class `Response` has type `AsyncIterable[bytes]` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 33,
    "warning_line": "        self._generator: AsyncIterable[bytes] = None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import inspect\nfrom typing import AnyStr, Any, Callable, Coroutine, Optional, AsyncIterable\n\n",
        "source_code_len": 93,
        "target_code": "import inspect\nfrom typing import (\n    AnyStr,\n    Any,\n    Callable,\n    Coroutine,\n    Optional,\n    AsyncIterable,\n    Dict,\n)\n\n",
        "target_code_len": 132,
        "diff_format": "@@ -1,3 +1,11 @@\n import inspect\n-from typing import AnyStr, Any, Callable, Coroutine, Optional, AsyncIterable\n+from typing import (\n+    AnyStr,\n+    Any,\n+    Callable,\n+    Coroutine,\n+    Optional,\n+    AsyncIterable,\n+    Dict,\n+)\n \n",
        "source_code_with_indent": "import inspect\nfrom typing import AnyStr, Any, Callable, Coroutine, Optional, AsyncIterable\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import inspect\nfrom typing import (\n    AnyStr,\n    Any,\n    Callable,\n    Coroutine,\n    Optional,\n    AsyncIterable,\n    Dict,\n)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self.request = request\n        self._content: AnyStr = None\n        self.status_code: int = None\n        self.headers = {}\n        self._media = media\n        self._background: BackgroundFunc = None\n        self._generator: AsyncIterable[bytes] = None\n        self.chunked = False\n",
        "source_code_len": 289,
        "target_code": "        self.request = request\n        self._content: Optional[AnyStr] = None\n        self.status_code: Optional[int] = None\n        self.headers: Dict[str, str] = {}\n        self._media = media\n        self._background: Optional[BackgroundFunc] = None\n        self._generator: Optional[AsyncIterable[bytes]] = None\n        self.chunked = False\n",
        "target_code_len": 345,
        "diff_format": "@@ -27,8 +35,8 @@\n         self.request = request\n-        self._content: AnyStr = None\n-        self.status_code: int = None\n-        self.headers = {}\n+        self._content: Optional[AnyStr] = None\n+        self.status_code: Optional[int] = None\n+        self.headers: Dict[str, str] = {}\n         self._media = media\n-        self._background: BackgroundFunc = None\n-        self._generator: AsyncIterable[bytes] = None\n+        self._background: Optional[BackgroundFunc] = None\n+        self._generator: Optional[AsyncIterable[bytes]] = None\n         self.chunked = False\n",
        "source_code_with_indent": "        <IND>self.request = request\n        self._content: AnyStr = None\n        self.status_code: int = None\n        self.headers = {}\n        self._media = media\n        self._background: BackgroundFunc = None\n        self._generator: AsyncIterable[bytes] = None\n        self.chunked = False\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>self.request = request\n        self._content: Optional[AnyStr] = None\n        self.status_code: Optional[int] = None\n        self.headers: Dict[str, str] = {}\n        self._media = media\n        self._background: Optional[BackgroundFunc] = None\n        self._generator: Optional[AsyncIterable[bytes]] = None\n        self.chunked = False\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "bocadilloproject/bocadillo",
    "commit": "14f24dda63735b4b9d2a9f1b116468738e1d6988",
    "filename": "bocadillo/routing.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/bocadilloproject-bocadillo/bocadillo/routing.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bocadillo/routing.py:118:34 Incompatible parameter type [6]: Expected `BaseRoute` for 1st positional only parameter to call `BaseRouter._get_key` but got `Variable[_T]`.",
    "message": " Expected `BaseRoute` for 1st positional only parameter to call `BaseRouter._get_key` but got `Variable[_T]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 118,
    "warning_line": "        self.routes[self._get_key(route)] = route",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _get_key(self, route: BaseRoute) -> str:\n        raise NotImplementedError\n",
        "source_code_len": 84,
        "target_code": "\n    def _get_key(self, route: _T) -> str:\n        raise NotImplementedError\n",
        "target_code_len": 77,
        "diff_format": "@@ -109,3 +109,3 @@\n \n-    def _get_key(self, route: BaseRoute) -> str:\n+    def _get_key(self, route: _T) -> str:\n         raise NotImplementedError\n",
        "source_code_with_indent": "\n    <DED>def _get_key(self, route: BaseRoute) -> str:\n        <IND>raise NotImplementedError\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def _get_key(self, route: _T) -> str:\n        <IND>raise NotImplementedError\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "bocadilloproject/bocadillo",
    "commit": "14f24dda63735b4b9d2a9f1b116468738e1d6988",
    "filename": "bocadillo/routing.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/bocadilloproject-bocadillo/bocadillo/routing.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bocadillo/routing.py:189:4 Inconsistent override [14]: `bocadillo.routing.HTTPRouter._get_key` overrides method defined in `BaseRouter` inconsistently. Parameter of type `HTTPRoute` is not a supertype of the overridden parameter `BaseRoute`.",
    "message": " `bocadillo.routing.HTTPRouter._get_key` overrides method defined in `BaseRouter` inconsistently. Parameter of type `HTTPRoute` is not a supertype of the overridden parameter `BaseRoute`.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 189,
    "warning_line": "    def _get_key(self, route: HTTPRoute) -> str:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _get_key(self, route: BaseRoute) -> str:\n        raise NotImplementedError\n",
        "source_code_len": 84,
        "target_code": "\n    def _get_key(self, route: _T) -> str:\n        raise NotImplementedError\n",
        "target_code_len": 77,
        "diff_format": "@@ -109,3 +109,3 @@\n \n-    def _get_key(self, route: BaseRoute) -> str:\n+    def _get_key(self, route: _T) -> str:\n         raise NotImplementedError\n",
        "source_code_with_indent": "\n    <DED>def _get_key(self, route: BaseRoute) -> str:\n        <IND>raise NotImplementedError\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def _get_key(self, route: _T) -> str:\n        <IND>raise NotImplementedError\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "bocadilloproject/bocadillo",
    "commit": "14f24dda63735b4b9d2a9f1b116468738e1d6988",
    "filename": "bocadillo/routing.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/bocadilloproject-bocadillo/bocadillo/routing.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bocadillo/routing.py:307:4 Inconsistent override [14]: `bocadillo.routing.WebSocketRouter._get_key` overrides method defined in `BaseRouter` inconsistently. Parameter of type `WebSocketRoute` is not a supertype of the overridden parameter `BaseRoute`.",
    "message": " `bocadillo.routing.WebSocketRouter._get_key` overrides method defined in `BaseRouter` inconsistently. Parameter of type `WebSocketRoute` is not a supertype of the overridden parameter `BaseRoute`.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 307,
    "warning_line": "    def _get_key(self, route: WebSocketRoute) -> str:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _get_key(self, route: BaseRoute) -> str:\n        raise NotImplementedError\n",
        "source_code_len": 84,
        "target_code": "\n    def _get_key(self, route: _T) -> str:\n        raise NotImplementedError\n",
        "target_code_len": 77,
        "diff_format": "@@ -109,3 +109,3 @@\n \n-    def _get_key(self, route: BaseRoute) -> str:\n+    def _get_key(self, route: _T) -> str:\n         raise NotImplementedError\n",
        "source_code_with_indent": "\n    <DED>def _get_key(self, route: BaseRoute) -> str:\n        <IND>raise NotImplementedError\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def _get_key(self, route: _T) -> str:\n        <IND>raise NotImplementedError\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "bocadilloproject/bocadillo",
    "commit": "14f24dda63735b4b9d2a9f1b116468738e1d6988",
    "filename": "bocadillo/templates.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/bocadilloproject-bocadillo/bocadillo/templates.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bocadillo/templates.py:95:8 Incompatible return type [7]: Expected `Coroutine[typing.Any, typing.Any, typing.Any]` but got `str`.",
    "message": " Expected `Coroutine[typing.Any, typing.Any, typing.Any]` but got `str`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 95,
    "warning_line": "        return await self._get_template(name_).render_async(context)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    async def template(\n        self, name_: str, context: dict = None, **kwargs\n    ) -> Coroutine:\n        \"\"\"Render a template asynchronously.\n",
        "source_code_len": 147,
        "target_code": "\n    async def template(self, name_: str, context: dict = None, **kwargs) -> str:\n        \"\"\"Render a template asynchronously.\n",
        "target_code_len": 127,
        "diff_format": "@@ -75,5 +76,3 @@\n \n-    async def template(\n-        self, name_: str, context: dict = None, **kwargs\n-    ) -> Coroutine:\n+    async def template(self, name_: str, context: dict = None, **kwargs) -> str:\n         \"\"\"Render a template asynchronously.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>async def template(\n        self, name_: str, context: dict = None, **kwargs\n    ) -> Coroutine:\n        <IND>",
        "target_code_with_indent": "\n    <DED>async def template(self, name_: str, context: dict = None, **kwargs) -> str:\n        <IND>"
      }
    ]
  },
  {
    "project": "bocadilloproject/bocadillo",
    "commit": "14f24dda63735b4b9d2a9f1b116468738e1d6988",
    "filename": "bocadillo/views.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/bocadilloproject-bocadillo/bocadillo/views.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bocadillo/views.py:83:12 Incompatible return type [7]: Expected `typing.Callable[[bocadillo.request.Request, bocadillo.response.Response, typing.Any], typing.Awaitable[None]]` but got `Optional[typing.Callable[[bocadillo.request.Request, bocadillo.response.Response, typing.Any], typing.Awaitable[None]]]`.",
    "message": " Expected `typing.Callable[[bocadillo.request.Request, bocadillo.response.Response, typing.Any], typing.Awaitable[None]]` but got `Optional[typing.Callable[[bocadillo.request.Request, bocadillo.response.Response, typing.Any], typing.Awaitable[None]]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 83,
    "warning_line": "            return self.handle",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        try:\n            return self.handle\n        except AttributeError:\n",
        "source_code_len": 75,
        "target_code": "        try:\n            return getattr(self, \"handle\")\n        except AttributeError:\n",
        "target_code_len": 87,
        "diff_format": "@@ -82,3 +81,3 @@\n         try:\n-            return self.handle\n+            return getattr(self, \"handle\")\n         except AttributeError:\n",
        "source_code_with_indent": "        <IND>try:\n            <IND>return self.handle\n        <DED>except AttributeError:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>try:\n            <IND>return getattr(self, \"handle\")\n        <DED>except AttributeError:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "bocadilloproject/bocadillo",
    "commit": "14f24dda63735b4b9d2a9f1b116468738e1d6988",
    "filename": "bocadillo/websockets.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/bocadilloproject-bocadillo/bocadillo/websockets.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bocadillo/websockets.py:58:12 Incompatible variable type [9]: caught_close_codes is declared to have type `Optional[Tuple[int]]` but is used as type `typing.List[int]`.",
    "message": " caught_close_codes is declared to have type `Optional[Tuple[int]]` but is used as type `typing.List[int]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 58,
    "warning_line": "            caught_close_codes = list(WEBSOCKET_CLOSE_CODES)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        send_type: Optional[str] = None,\n        caught_close_codes: Optional[Tuple[int]] = None,\n    ):\n",
        "source_code_len": 105,
        "target_code": "        send_type: Optional[str] = None,\n        caught_close_codes: Optional[Tuple[int, ...]] = None,\n    ):\n",
        "target_code_len": 110,
        "diff_format": "@@ -45,3 +45,3 @@\n         send_type: Optional[str] = None,\n-        caught_close_codes: Optional[Tuple[int]] = None,\n+        caught_close_codes: Optional[Tuple[int, ...]] = None,\n     ):\n",
        "source_code_with_indent": "        send_type: Optional[str] = None,\n        caught_close_codes: Optional[Tuple[int]] = None,\n    ):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        send_type: Optional[str] = None,\n        caught_close_codes: Optional[Tuple[int, ...]] = None,\n    ):\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        if caught_close_codes is all:\n            caught_close_codes = list(WEBSOCKET_CLOSE_CODES)\n        self.caught_close_codes = caught_close_codes\n",
        "source_code_len": 152,
        "target_code": "        if caught_close_codes is all:\n            caught_close_codes = tuple(WEBSOCKET_CLOSE_CODES)\n        self.caught_close_codes = caught_close_codes\n",
        "target_code_len": 153,
        "diff_format": "@@ -57,3 +57,3 @@\n         if caught_close_codes is all:\n-            caught_close_codes = list(WEBSOCKET_CLOSE_CODES)\n+            caught_close_codes = tuple(WEBSOCKET_CLOSE_CODES)\n         self.caught_close_codes = caught_close_codes\n",
        "source_code_with_indent": "        <DED>if caught_close_codes is all:\n            <IND>caught_close_codes = list(WEBSOCKET_CLOSE_CODES)\n        <DED>self.caught_close_codes = caught_close_codes\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>if caught_close_codes is all:\n            <IND>caught_close_codes = tuple(WEBSOCKET_CLOSE_CODES)\n        <DED>self.caught_close_codes = caught_close_codes\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "bocadilloproject/bocadillo",
    "commit": "14f24dda63735b4b9d2a9f1b116468738e1d6988",
    "filename": "bocadillo/websockets.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/bocadilloproject-bocadillo/bocadillo/websockets.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bocadillo/websockets.py:59:8 Incompatible attribute type [8]: Attribute `caught_close_codes` declared in class `WebSocket` has type `Optional[Tuple[int]]` but is used as type `Union[Tuple[int, int], Tuple[int]]`.",
    "message": " Attribute `caught_close_codes` declared in class `WebSocket` has type `Optional[Tuple[int]]` but is used as type `Union[Tuple[int, int], Tuple[int]]`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 59,
    "warning_line": "        self.caught_close_codes = caught_close_codes",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        send_type: Optional[str] = None,\n        caught_close_codes: Optional[Tuple[int]] = None,\n    ):\n",
        "source_code_len": 105,
        "target_code": "        send_type: Optional[str] = None,\n        caught_close_codes: Optional[Tuple[int, ...]] = None,\n    ):\n",
        "target_code_len": 110,
        "diff_format": "@@ -45,3 +45,3 @@\n         send_type: Optional[str] = None,\n-        caught_close_codes: Optional[Tuple[int]] = None,\n+        caught_close_codes: Optional[Tuple[int, ...]] = None,\n     ):\n",
        "source_code_with_indent": "        send_type: Optional[str] = None,\n        caught_close_codes: Optional[Tuple[int]] = None,\n    ):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        send_type: Optional[str] = None,\n        caught_close_codes: Optional[Tuple[int, ...]] = None,\n    ):\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        if caught_close_codes is all:\n            caught_close_codes = list(WEBSOCKET_CLOSE_CODES)\n        self.caught_close_codes = caught_close_codes\n",
        "source_code_len": 152,
        "target_code": "        if caught_close_codes is all:\n            caught_close_codes = tuple(WEBSOCKET_CLOSE_CODES)\n        self.caught_close_codes = caught_close_codes\n",
        "target_code_len": 153,
        "diff_format": "@@ -57,3 +57,3 @@\n         if caught_close_codes is all:\n-            caught_close_codes = list(WEBSOCKET_CLOSE_CODES)\n+            caught_close_codes = tuple(WEBSOCKET_CLOSE_CODES)\n         self.caught_close_codes = caught_close_codes\n",
        "source_code_with_indent": "        <DED>if caught_close_codes is all:\n            <IND>caught_close_codes = list(WEBSOCKET_CLOSE_CODES)\n        <DED>self.caught_close_codes = caught_close_codes\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>if caught_close_codes is all:\n            <IND>caught_close_codes = tuple(WEBSOCKET_CLOSE_CODES)\n        <DED>self.caught_close_codes = caught_close_codes\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]