[
  {
    "project": "robinhood/faust",
    "commit": "a208a2f54dfcc68078d4f074399764a7076ecfcd",
    "filename": "faust/primitives.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/robinhood-faust/faust/primitives.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "faust/primitives.py:15:4 Incompatible return type [7]: Expected `AsyncIterable[faust.types.models.Event]` but got `typing.Generator[typing.Any, None, None]`.",
    "message": " Expected `AsyncIterable[faust.types.models.Event]` but got `typing.Generator[typing.Any, None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 15,
    "warning_line": "    return (await _do_through(topic, new_stream, event) async for event in s)"
  },
  {
    "project": "robinhood/faust",
    "commit": "a208a2f54dfcc68078d4f074399764a7076ecfcd",
    "filename": "faust/types/streams.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/robinhood-faust/faust/types/streams.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "faust/types/streams.py:52:19 Incompatible variable type [9]: coroutine is declared to have type `Union[typing.Callable[[faust.types.coroutines.InputStreamT], AsyncIterable[Event]], typing.Callable[[faust.types.coroutines.InputStreamT], typing.Coroutine[Event, None, None]], typing.Callable[[faust.types.coroutines.InputStreamT], typing.Generator[Event, None, None]]]` but is used as type `None`.",
    "message": " coroutine is declared to have type `Union[typing.Callable[[faust.types.coroutines.InputStreamT], AsyncIterable[Event]], typing.Callable[[faust.types.coroutines.InputStreamT], typing.Coroutine[Event, None, None]], typing.Callable[[faust.types.coroutines.InputStreamT], typing.Generator[Event, None, None]]]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 52,
    "warning_line": "                   coroutine: StreamCoroutine = None,"
  },
  {
    "project": "robinhood/faust",
    "commit": "a208a2f54dfcc68078d4f074399764a7076ecfcd",
    "filename": "faust/types/streams.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/robinhood-faust/faust/types/streams.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "faust/types/streams.py:121:24 Incompatible variable type [9]: coroutine is declared to have type `Union[typing.Callable[[faust.types.coroutines.InputStreamT], AsyncIterable[Event]], typing.Callable[[faust.types.coroutines.InputStreamT], typing.Coroutine[Event, None, None]], typing.Callable[[faust.types.coroutines.InputStreamT], typing.Generator[Event, None, None]]]` but is used as type `None`.",
    "message": " coroutine is declared to have type `Union[typing.Callable[[faust.types.coroutines.InputStreamT], AsyncIterable[Event]], typing.Callable[[faust.types.coroutines.InputStreamT], typing.Coroutine[Event, None, None]], typing.Callable[[faust.types.coroutines.InputStreamT], typing.Generator[Event, None, None]]]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 121,
    "warning_line": "                        coroutine: StreamCoroutine = None) -> None:"
  },
  {
    "project": "robinhood/faust",
    "commit": "a208a2f54dfcc68078d4f074399764a7076ecfcd",
    "filename": "faust/types/streams.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/robinhood-faust/faust/types/streams.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "faust/types/streams.py:155:4 Inconsistent override [15]: `faust.types.streams.StreamT.__aiter__` overrides method defined in `AsyncIterable` inconsistently. Returned type `typing.Coroutine[typing.Any, typing.Any, StreamT[typing.Any]]` is not a subtype of the overridden return `typing.AsyncIterator[typing.Any]`.",
    "message": " `faust.types.streams.StreamT.__aiter__` overrides method defined in `AsyncIterable` inconsistently. Returned type `typing.Coroutine[typing.Any, typing.Any, StreamT[typing.Any]]` is not a subtype of the overridden return `typing.AsyncIterator[typing.Any]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 155,
    "warning_line": "    async def __aiter__(self) -> 'StreamT':",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @abc.abstractmethod\n    async def __aiter__(self) -> 'StreamT':\n        ...\n",
        "source_code_len": 80,
        "target_code": "    @abc.abstractmethod\n    async def __aiter__(self):\n        ...\n",
        "target_code_len": 67,
        "diff_format": "@@ -154,3 +154,3 @@\n     @abc.abstractmethod\n-    async def __aiter__(self) -> 'StreamT':\n+    async def __aiter__(self):\n         ...\n",
        "source_code_with_indent": "    <DED>@abc.abstractmethod\n    async def __aiter__(self) -> 'StreamT':\n        <IND>...\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@abc.abstractmethod\n    async def __aiter__(self):\n        <IND>...\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]