[
  {
    "project": "certsocietegenerale/event2timeline",
    "commit": "9026747d6e31dc750935f8825345c11d6df8da0e",
    "filename": "event2timeline.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/certsocietegenerale-event2timeline/event2timeline.py",
    "file_hunks_size": 18,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "event2timeline.py:238:50 Unbound name [10]: Name `time_begin` is used but not defined in the current scope.",
    "message": " Name `time_begin` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 238,
    "warning_line": "\tprint \"[*] Collected sessions from %s to %s\" % ((time_begin), (time_end))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\t\tprint \"[*] %s sessions found (%s lines parsed)\" % (len(sessions), count)\n\n\t\treturn sessions\n\n\t\t# print \"[*] Session logs: %s\" % len(session_list)\n\t\t# session_list = list(set(session_list)) # uniq\n\t\t# print \"[*] Unique sessions: %s\" % len(session_list)\n\n\t\t# sessions = []\n\t\t# for s in session_list:\n\t\t# \tsessions.append({'ID': s})\n\n\t\t# users = {}\n\n\t\t# for s in sessions:\n\t\t# \ts['log_entries'] = [l for l in logs if is_session(s['ID'], l)]\n\t\t\t\n\t\t# \ts['dates'] = []\n\t\t# \ts['timestamps'] = []\n\t\t# \tfor l in s['log_entries']:\n\t\t# \t\ts['dates'].append(parse(l['Date&Time']))\n\t\t# \t\ts['timestamps'].append(calendar.timegm(parse(l['Date&Time']).timetuple()))\n\t\t# \t\tif l['Event'] in [\"540\", \"538\", \"528\", \"551\"] :\n\t\t# \t\t\ttry:\n\t\t# \t\t\t\ts['user'] = re.search(\"tilisateur\\W+([\\w\\.\\-$]+)\\n\", l['Description']).group(1)\n\t\t# \t\t\t\t#print s['user']\n\t\t# \t\t\texcept Exception, e:\t\n\t\t# \t\t\t\tprint \"[-] User not found for session\"\n\t\t# \t\t\t\tprint l\n\t\t# \t\t\t\texit()\n\n\t\t# \ts['dates'].sort()\n\t\t\n\t\t# \tif users.get(s['user']) == None:\n\t\t# \t\tusers[s['user']] = []\n\t\t# \tusers[s['user']].append(s)\n\t\t\n\t\tlanes = [u for u in users]\n\n\t\titems = []\n\t\tfor i, usr in enumerate(users):\n\t\t\tfor l in get_logons(users[usr]):\n\t\t\t\tif l['end'] - l['start'] < datetime.timedelta(seconds=10):\n\t\t\t\t\tl['end'] = l['start'] + datetime.timedelta(seconds=10)\n\t\t\t\titems.append({'lane': i, 'id':str(l['start'])[-8:], 'start': str(l['start']), 'end': str(l['end'])})\n\t\t\t\n\n\t\ttime_begin = min([i['start'] for i in items])\n",
        "source_code_len": 1459,
        "target_code": "\t\tprint \"[*] %s sessions found (%s lines parsed)\" % (len(sessions), count)\n\t\treturn sessions\n\ndef sessions2timeline(sessions):\n\n\t\t# generate session list by user\n\t\tuser_sessions = {}\n\t\tfor sid in [s for s in sessions if sessions[s].get('username', None) != None]:\n\t\t\ts = sessions[sid]\n\t\t\t\n\t\t\tif user_sessions.get(s['username'], None) == None:\n\t\t\t\tuser_sessions[s['username']] = {}\n\t\t\t\n\t\t\tuser_sessions[s['username']][sid] = s\n\t\t\t\n\t\tprint \"[*] Unique users: %s\" % len(user_sessions)\n\t\t\t\t\n\t\tlanes = [u for u in user_sessions]\n\n\t\titems = []\n\t\tfor i, username in enumerate(user_sessions):\n\n\t\t\tfor user_session in get_sessions(user_sessions[username]):\n\t\t\t\tif user_session['end'] - user_session['start'] < datetime.timedelta(seconds=10):\n\t\t\t\t\tuser_session['end'] = user_session['start'] + datetime.timedelta(seconds=10)\n\n\t\t\t\titems.append({'info': user_session['info'],'lane': i, 'start': str(user_session['start']), 'end': str(user_session['end'])})\n\t\t\t\n\t\ttime_begin = min([i['start'] for i in items])\n",
        "target_code_len": 997,
        "diff_format": "@@ -151,48 +165,29 @@\n \t\tprint \"[*] %s sessions found (%s lines parsed)\" % (len(sessions), count)\n-\n \t\treturn sessions\n \n-\t\t# print \"[*] Session logs: %s\" % len(session_list)\n-\t\t# session_list = list(set(session_list)) # uniq\n-\t\t# print \"[*] Unique sessions: %s\" % len(session_list)\n-\n-\t\t# sessions = []\n-\t\t# for s in session_list:\n-\t\t# \tsessions.append({'ID': s})\n-\n-\t\t# users = {}\n-\n-\t\t# for s in sessions:\n-\t\t# \ts['log_entries'] = [l for l in logs if is_session(s['ID'], l)]\n-\t\t\t\n-\t\t# \ts['dates'] = []\n-\t\t# \ts['timestamps'] = []\n-\t\t# \tfor l in s['log_entries']:\n-\t\t# \t\ts['dates'].append(parse(l['Date&Time']))\n-\t\t# \t\ts['timestamps'].append(calendar.timegm(parse(l['Date&Time']).timetuple()))\n-\t\t# \t\tif l['Event'] in [\"540\", \"538\", \"528\", \"551\"] :\n-\t\t# \t\t\ttry:\n-\t\t# \t\t\t\ts['user'] = re.search(\"tilisateur\\W+([\\w\\.\\-$]+)\\n\", l['Description']).group(1)\n-\t\t# \t\t\t\t#print s['user']\n-\t\t# \t\t\texcept Exception, e:\t\n-\t\t# \t\t\t\tprint \"[-] User not found for session\"\n-\t\t# \t\t\t\tprint l\n-\t\t# \t\t\t\texit()\n-\n-\t\t# \ts['dates'].sort()\n-\t\t\n-\t\t# \tif users.get(s['user']) == None:\n-\t\t# \t\tusers[s['user']] = []\n-\t\t# \tusers[s['user']].append(s)\n-\t\t\n-\t\tlanes = [u for u in users]\n+def sessions2timeline(sessions):\n+\n+\t\t# generate session list by user\n+\t\tuser_sessions = {}\n+\t\tfor sid in [s for s in sessions if sessions[s].get('username', None) != None]:\n+\t\t\ts = sessions[sid]\n+\t\t\t\n+\t\t\tif user_sessions.get(s['username'], None) == None:\n+\t\t\t\tuser_sessions[s['username']] = {}\n+\t\t\t\n+\t\t\tuser_sessions[s['username']][sid] = s\n+\t\t\t\n+\t\tprint \"[*] Unique users: %s\" % len(user_sessions)\n+\t\t\t\t\n+\t\tlanes = [u for u in user_sessions]\n \n \t\titems = []\n-\t\tfor i, usr in enumerate(users):\n-\t\t\tfor l in get_logons(users[usr]):\n-\t\t\t\tif l['end'] - l['start'] < datetime.timedelta(seconds=10):\n-\t\t\t\t\tl['end'] = l['start'] + datetime.timedelta(seconds=10)\n-\t\t\t\titems.append({'lane': i, 'id':str(l['start'])[-8:], 'start': str(l['start']), 'end': str(l['end'])})\n-\t\t\t\n-\n+\t\tfor i, username in enumerate(user_sessions):\n+\n+\t\t\tfor user_session in get_sessions(user_sessions[username]):\n+\t\t\t\tif user_session['end'] - user_session['start'] < datetime.timedelta(seconds=10):\n+\t\t\t\t\tuser_session['end'] = user_session['start'] + datetime.timedelta(seconds=10)\n+\n+\t\t\t\titems.append({'info': user_session['info'],'lane': i, 'start': str(user_session['start']), 'end': str(user_session['end'])})\n+\t\t\t\n \t\ttime_begin = min([i['start'] for i in items])\n",
        "source_code_with_indent": "  <DED><DED>print \"[*] %s sessions found (%s lines parsed)\" % (len(sessions), count)\n\n  return sessions\n\n  # print \"[*] Session logs: %s\" % len(session_list)\n  # session_list = list(set(session_list)) # uniq\n  # print \"[*] Unique sessions: %s\" % len(session_list)\n\n  # sessions = []\n  # for s in session_list:\n  # \tsessions.append({'ID': s})\n\n  # users = {}\n\n  # for s in sessions:\n  # \ts['log_entries'] = [l for l in logs if is_session(s['ID'], l)]\n   \n  # \ts['dates'] = []\n  # \ts['timestamps'] = []\n  # \tfor l in s['log_entries']:\n  # \t\ts['dates'].append(parse(l['Date&Time']))\n  # \t\ts['timestamps'].append(calendar.timegm(parse(l['Date&Time']).timetuple()))\n  # \t\tif l['Event'] in [\"540\", \"538\", \"528\", \"551\"] :\n  # \t\t\ttry:\n  # \t\t\t\ts['user'] = re.search(\"tilisateur\\W+([\\w\\.\\-$]+)\\n\", l['Description']).group(1)\n  # \t\t\t\t#print s['user']\n  # \t\t\texcept Exception, e:\t\n  # \t\t\t\tprint \"[-] User not found for session\"\n  # \t\t\t\tprint l\n  # \t\t\t\texit()\n\n  # \ts['dates'].sort()\n  \n  # \tif users.get(s['user']) == None:\n  # \t\tusers[s['user']] = []\n  # \tusers[s['user']].append(s)\n  \n  lanes = [u for u in users]\n\n  items = []\n  for i, usr in enumerate(users):\n\t\t\t<IND>for l in get_logons(users[usr]):\n\t\t\t\t<IND>if l['end'] - l['start'] < datetime.timedelta(seconds=10):\n\t\t\t\t\t<IND>l['end'] = l['start'] + datetime.timedelta(seconds=10)\n    <DED>items.append({'lane': i, 'id':str(l['start'])[-8:], 'start': str(l['start']), 'end': str(l['end'])})\n   \n\n  <DED><DED>time_begin = min([i['start'] for i in items])\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "  <DED><DED>print \"[*] %s sessions found (%s lines parsed)\" % (len(sessions), count)\n  return sessions\n\n<DED><DED>def sessions2timeline(sessions):\n\n  # generate session list by user\n\t\t<IND>user_sessions = {}\n  for sid in [s for s in sessions if sessions[s].get('username', None) != None]:\n\t\t\t<IND>s = sessions[sid]\n   \n   if user_sessions.get(s['username'], None) == None:\n\t\t\t\t<IND>user_sessions[s['username']] = {}\n   \n   <DED>user_sessions[s['username']][sid] = s\n   \n  <DED>print \"[*] Unique users: %s\" % len(user_sessions)\n    \n  lanes = [u for u in user_sessions]\n\n  items = []\n  for i, username in enumerate(user_sessions):\n\n\t\t\t<IND>for user_session in get_sessions(user_sessions[username]):\n\t\t\t\t<IND>if user_session['end'] - user_session['start'] < datetime.timedelta(seconds=10):\n\t\t\t\t\t<IND>user_session['end'] = user_session['start'] + datetime.timedelta(seconds=10)\n\n    <DED>items.append({'info': user_session['info'],'lane': i, 'start': str(user_session['start']), 'end': str(user_session['end'])})\n   \n  <DED><DED>time_begin = min([i['start'] for i in items])\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\tif options.csv:\n\t\tlogs = import_csv(options.eventlogfile)\n\telif options.evtx:\n\t\tlogs = import_xml(options.eventlogfile)\n\telse:\n",
        "source_code_len": 128,
        "target_code": "\tif options.csv:\n\t\tsessions = import_csv(options.eventlogfile)\n\telif options.evtx:\n\t\tsessions = import_xml(options.eventlogfile)\n\telse:\n",
        "target_code_len": 136,
        "diff_format": "@@ -229,5 +257,5 @@\n \tif options.csv:\n-\t\tlogs = import_csv(options.eventlogfile)\n+\t\tsessions = import_csv(options.eventlogfile)\n \telif options.evtx:\n-\t\tlogs = import_xml(options.eventlogfile)\n+\t\tsessions = import_xml(options.eventlogfile)\n \telse:\n",
        "source_code_with_indent": " <DED>if options.csv:\n\t\t<IND>logs = import_csv(options.eventlogfile)\n <DED>elif options.evtx:\n\t\t<IND>logs = import_xml(options.eventlogfile)\n <DED>else:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": " <DED>if options.csv:\n\t\t<IND>sessions = import_csv(options.eventlogfile)\n <DED>elif options.evtx:\n\t\t<IND>sessions = import_xml(options.eventlogfile)\n <DED>else:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n\t\n\n\tprint \"[*] Collected sessions from %s to %s\" % ((time_begin), (time_end))\n\n",
        "source_code_len": 80,
        "target_code": "\n\ttimeline = sessions2timeline(sessions)\n\n\tprint \"[*] Mapped %s sessions from %s to %s\" % (len(timeline['items']), timeline['time_begin'], timeline['time_end'])\n\n\n",
        "target_code_len": 163,
        "diff_format": "@@ -235,5 +263,6 @@\n \n-\t\n-\n-\tprint \"[*] Collected sessions from %s to %s\" % ((time_begin), (time_end))\n+\ttimeline = sessions2timeline(sessions)\n+\n+\tprint \"[*] Mapped %s sessions from %s to %s\" % (len(timeline['items']), timeline['time_begin'], timeline['time_end'])\n+\n \n",
        "source_code_with_indent": "\n \n\n <DED>print \"[*] Collected sessions from %s to %s\" % ((time_begin), (time_end))\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n <DED>timeline = sessions2timeline(sessions)\n\n print \"[*] Mapped %s sessions from %s to %s\" % (len(timeline['items']), timeline['time_begin'], timeline['time_end'])\n\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "certsocietegenerale/event2timeline",
    "commit": "9026747d6e31dc750935f8825345c11d6df8da0e",
    "filename": "event2timeline.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/certsocietegenerale-event2timeline/event2timeline.py",
    "file_hunks_size": 18,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "event2timeline.py:238:64 Unbound name [10]: Name `time_end` is used but not defined in the current scope.",
    "message": " Name `time_end` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 238,
    "warning_line": "\tprint \"[*] Collected sessions from %s to %s\" % ((time_begin), (time_end))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\t\tprint \"[*] %s sessions found (%s lines parsed)\" % (len(sessions), count)\n\n\t\treturn sessions\n\n\t\t# print \"[*] Session logs: %s\" % len(session_list)\n\t\t# session_list = list(set(session_list)) # uniq\n\t\t# print \"[*] Unique sessions: %s\" % len(session_list)\n\n\t\t# sessions = []\n\t\t# for s in session_list:\n\t\t# \tsessions.append({'ID': s})\n\n\t\t# users = {}\n\n\t\t# for s in sessions:\n\t\t# \ts['log_entries'] = [l for l in logs if is_session(s['ID'], l)]\n\t\t\t\n\t\t# \ts['dates'] = []\n\t\t# \ts['timestamps'] = []\n\t\t# \tfor l in s['log_entries']:\n\t\t# \t\ts['dates'].append(parse(l['Date&Time']))\n\t\t# \t\ts['timestamps'].append(calendar.timegm(parse(l['Date&Time']).timetuple()))\n\t\t# \t\tif l['Event'] in [\"540\", \"538\", \"528\", \"551\"] :\n\t\t# \t\t\ttry:\n\t\t# \t\t\t\ts['user'] = re.search(\"tilisateur\\W+([\\w\\.\\-$]+)\\n\", l['Description']).group(1)\n\t\t# \t\t\t\t#print s['user']\n\t\t# \t\t\texcept Exception, e:\t\n\t\t# \t\t\t\tprint \"[-] User not found for session\"\n\t\t# \t\t\t\tprint l\n\t\t# \t\t\t\texit()\n\n\t\t# \ts['dates'].sort()\n\t\t\n\t\t# \tif users.get(s['user']) == None:\n\t\t# \t\tusers[s['user']] = []\n\t\t# \tusers[s['user']].append(s)\n\t\t\n\t\tlanes = [u for u in users]\n\n\t\titems = []\n\t\tfor i, usr in enumerate(users):\n\t\t\tfor l in get_logons(users[usr]):\n\t\t\t\tif l['end'] - l['start'] < datetime.timedelta(seconds=10):\n\t\t\t\t\tl['end'] = l['start'] + datetime.timedelta(seconds=10)\n\t\t\t\titems.append({'lane': i, 'id':str(l['start'])[-8:], 'start': str(l['start']), 'end': str(l['end'])})\n\t\t\t\n\n\t\ttime_begin = min([i['start'] for i in items])\n",
        "source_code_len": 1459,
        "target_code": "\t\tprint \"[*] %s sessions found (%s lines parsed)\" % (len(sessions), count)\n\t\treturn sessions\n\ndef sessions2timeline(sessions):\n\n\t\t# generate session list by user\n\t\tuser_sessions = {}\n\t\tfor sid in [s for s in sessions if sessions[s].get('username', None) != None]:\n\t\t\ts = sessions[sid]\n\t\t\t\n\t\t\tif user_sessions.get(s['username'], None) == None:\n\t\t\t\tuser_sessions[s['username']] = {}\n\t\t\t\n\t\t\tuser_sessions[s['username']][sid] = s\n\t\t\t\n\t\tprint \"[*] Unique users: %s\" % len(user_sessions)\n\t\t\t\t\n\t\tlanes = [u for u in user_sessions]\n\n\t\titems = []\n\t\tfor i, username in enumerate(user_sessions):\n\n\t\t\tfor user_session in get_sessions(user_sessions[username]):\n\t\t\t\tif user_session['end'] - user_session['start'] < datetime.timedelta(seconds=10):\n\t\t\t\t\tuser_session['end'] = user_session['start'] + datetime.timedelta(seconds=10)\n\n\t\t\t\titems.append({'info': user_session['info'],'lane': i, 'start': str(user_session['start']), 'end': str(user_session['end'])})\n\t\t\t\n\t\ttime_begin = min([i['start'] for i in items])\n",
        "target_code_len": 997,
        "diff_format": "@@ -151,48 +165,29 @@\n \t\tprint \"[*] %s sessions found (%s lines parsed)\" % (len(sessions), count)\n-\n \t\treturn sessions\n \n-\t\t# print \"[*] Session logs: %s\" % len(session_list)\n-\t\t# session_list = list(set(session_list)) # uniq\n-\t\t# print \"[*] Unique sessions: %s\" % len(session_list)\n-\n-\t\t# sessions = []\n-\t\t# for s in session_list:\n-\t\t# \tsessions.append({'ID': s})\n-\n-\t\t# users = {}\n-\n-\t\t# for s in sessions:\n-\t\t# \ts['log_entries'] = [l for l in logs if is_session(s['ID'], l)]\n-\t\t\t\n-\t\t# \ts['dates'] = []\n-\t\t# \ts['timestamps'] = []\n-\t\t# \tfor l in s['log_entries']:\n-\t\t# \t\ts['dates'].append(parse(l['Date&Time']))\n-\t\t# \t\ts['timestamps'].append(calendar.timegm(parse(l['Date&Time']).timetuple()))\n-\t\t# \t\tif l['Event'] in [\"540\", \"538\", \"528\", \"551\"] :\n-\t\t# \t\t\ttry:\n-\t\t# \t\t\t\ts['user'] = re.search(\"tilisateur\\W+([\\w\\.\\-$]+)\\n\", l['Description']).group(1)\n-\t\t# \t\t\t\t#print s['user']\n-\t\t# \t\t\texcept Exception, e:\t\n-\t\t# \t\t\t\tprint \"[-] User not found for session\"\n-\t\t# \t\t\t\tprint l\n-\t\t# \t\t\t\texit()\n-\n-\t\t# \ts['dates'].sort()\n-\t\t\n-\t\t# \tif users.get(s['user']) == None:\n-\t\t# \t\tusers[s['user']] = []\n-\t\t# \tusers[s['user']].append(s)\n-\t\t\n-\t\tlanes = [u for u in users]\n+def sessions2timeline(sessions):\n+\n+\t\t# generate session list by user\n+\t\tuser_sessions = {}\n+\t\tfor sid in [s for s in sessions if sessions[s].get('username', None) != None]:\n+\t\t\ts = sessions[sid]\n+\t\t\t\n+\t\t\tif user_sessions.get(s['username'], None) == None:\n+\t\t\t\tuser_sessions[s['username']] = {}\n+\t\t\t\n+\t\t\tuser_sessions[s['username']][sid] = s\n+\t\t\t\n+\t\tprint \"[*] Unique users: %s\" % len(user_sessions)\n+\t\t\t\t\n+\t\tlanes = [u for u in user_sessions]\n \n \t\titems = []\n-\t\tfor i, usr in enumerate(users):\n-\t\t\tfor l in get_logons(users[usr]):\n-\t\t\t\tif l['end'] - l['start'] < datetime.timedelta(seconds=10):\n-\t\t\t\t\tl['end'] = l['start'] + datetime.timedelta(seconds=10)\n-\t\t\t\titems.append({'lane': i, 'id':str(l['start'])[-8:], 'start': str(l['start']), 'end': str(l['end'])})\n-\t\t\t\n-\n+\t\tfor i, username in enumerate(user_sessions):\n+\n+\t\t\tfor user_session in get_sessions(user_sessions[username]):\n+\t\t\t\tif user_session['end'] - user_session['start'] < datetime.timedelta(seconds=10):\n+\t\t\t\t\tuser_session['end'] = user_session['start'] + datetime.timedelta(seconds=10)\n+\n+\t\t\t\titems.append({'info': user_session['info'],'lane': i, 'start': str(user_session['start']), 'end': str(user_session['end'])})\n+\t\t\t\n \t\ttime_begin = min([i['start'] for i in items])\n",
        "source_code_with_indent": "  <DED><DED>print \"[*] %s sessions found (%s lines parsed)\" % (len(sessions), count)\n\n  return sessions\n\n  # print \"[*] Session logs: %s\" % len(session_list)\n  # session_list = list(set(session_list)) # uniq\n  # print \"[*] Unique sessions: %s\" % len(session_list)\n\n  # sessions = []\n  # for s in session_list:\n  # \tsessions.append({'ID': s})\n\n  # users = {}\n\n  # for s in sessions:\n  # \ts['log_entries'] = [l for l in logs if is_session(s['ID'], l)]\n   \n  # \ts['dates'] = []\n  # \ts['timestamps'] = []\n  # \tfor l in s['log_entries']:\n  # \t\ts['dates'].append(parse(l['Date&Time']))\n  # \t\ts['timestamps'].append(calendar.timegm(parse(l['Date&Time']).timetuple()))\n  # \t\tif l['Event'] in [\"540\", \"538\", \"528\", \"551\"] :\n  # \t\t\ttry:\n  # \t\t\t\ts['user'] = re.search(\"tilisateur\\W+([\\w\\.\\-$]+)\\n\", l['Description']).group(1)\n  # \t\t\t\t#print s['user']\n  # \t\t\texcept Exception, e:\t\n  # \t\t\t\tprint \"[-] User not found for session\"\n  # \t\t\t\tprint l\n  # \t\t\t\texit()\n\n  # \ts['dates'].sort()\n  \n  # \tif users.get(s['user']) == None:\n  # \t\tusers[s['user']] = []\n  # \tusers[s['user']].append(s)\n  \n  lanes = [u for u in users]\n\n  items = []\n  for i, usr in enumerate(users):\n\t\t\t<IND>for l in get_logons(users[usr]):\n\t\t\t\t<IND>if l['end'] - l['start'] < datetime.timedelta(seconds=10):\n\t\t\t\t\t<IND>l['end'] = l['start'] + datetime.timedelta(seconds=10)\n    <DED>items.append({'lane': i, 'id':str(l['start'])[-8:], 'start': str(l['start']), 'end': str(l['end'])})\n   \n\n  <DED><DED>time_begin = min([i['start'] for i in items])\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "  <DED><DED>print \"[*] %s sessions found (%s lines parsed)\" % (len(sessions), count)\n  return sessions\n\n<DED><DED>def sessions2timeline(sessions):\n\n  # generate session list by user\n\t\t<IND>user_sessions = {}\n  for sid in [s for s in sessions if sessions[s].get('username', None) != None]:\n\t\t\t<IND>s = sessions[sid]\n   \n   if user_sessions.get(s['username'], None) == None:\n\t\t\t\t<IND>user_sessions[s['username']] = {}\n   \n   <DED>user_sessions[s['username']][sid] = s\n   \n  <DED>print \"[*] Unique users: %s\" % len(user_sessions)\n    \n  lanes = [u for u in user_sessions]\n\n  items = []\n  for i, username in enumerate(user_sessions):\n\n\t\t\t<IND>for user_session in get_sessions(user_sessions[username]):\n\t\t\t\t<IND>if user_session['end'] - user_session['start'] < datetime.timedelta(seconds=10):\n\t\t\t\t\t<IND>user_session['end'] = user_session['start'] + datetime.timedelta(seconds=10)\n\n    <DED>items.append({'info': user_session['info'],'lane': i, 'start': str(user_session['start']), 'end': str(user_session['end'])})\n   \n  <DED><DED>time_begin = min([i['start'] for i in items])\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\tif options.csv:\n\t\tlogs = import_csv(options.eventlogfile)\n\telif options.evtx:\n\t\tlogs = import_xml(options.eventlogfile)\n\telse:\n",
        "source_code_len": 128,
        "target_code": "\tif options.csv:\n\t\tsessions = import_csv(options.eventlogfile)\n\telif options.evtx:\n\t\tsessions = import_xml(options.eventlogfile)\n\telse:\n",
        "target_code_len": 136,
        "diff_format": "@@ -229,5 +257,5 @@\n \tif options.csv:\n-\t\tlogs = import_csv(options.eventlogfile)\n+\t\tsessions = import_csv(options.eventlogfile)\n \telif options.evtx:\n-\t\tlogs = import_xml(options.eventlogfile)\n+\t\tsessions = import_xml(options.eventlogfile)\n \telse:\n",
        "source_code_with_indent": " <DED>if options.csv:\n\t\t<IND>logs = import_csv(options.eventlogfile)\n <DED>elif options.evtx:\n\t\t<IND>logs = import_xml(options.eventlogfile)\n <DED>else:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": " <DED>if options.csv:\n\t\t<IND>sessions = import_csv(options.eventlogfile)\n <DED>elif options.evtx:\n\t\t<IND>sessions = import_xml(options.eventlogfile)\n <DED>else:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n\t\n\n\tprint \"[*] Collected sessions from %s to %s\" % ((time_begin), (time_end))\n\n",
        "source_code_len": 80,
        "target_code": "\n\ttimeline = sessions2timeline(sessions)\n\n\tprint \"[*] Mapped %s sessions from %s to %s\" % (len(timeline['items']), timeline['time_begin'], timeline['time_end'])\n\n\n",
        "target_code_len": 163,
        "diff_format": "@@ -235,5 +263,6 @@\n \n-\t\n-\n-\tprint \"[*] Collected sessions from %s to %s\" % ((time_begin), (time_end))\n+\ttimeline = sessions2timeline(sessions)\n+\n+\tprint \"[*] Mapped %s sessions from %s to %s\" % (len(timeline['items']), timeline['time_begin'], timeline['time_end'])\n+\n \n",
        "source_code_with_indent": "\n \n\n <DED>print \"[*] Collected sessions from %s to %s\" % ((time_begin), (time_end))\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n <DED>timeline = sessions2timeline(sessions)\n\n print \"[*] Mapped %s sessions from %s to %s\" % (len(timeline['items']), timeline['time_begin'], timeline['time_end'])\n\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "certsocietegenerale/event2timeline",
    "commit": "9026747d6e31dc750935f8825345c11d6df8da0e",
    "filename": "event2timeline.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/certsocietegenerale-event2timeline/event2timeline.py",
    "file_hunks_size": 18,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "event2timeline.py:242:36 Unbound name [10]: Name `lanes` is used but not defined in the current scope.",
    "message": " Name `lanes` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 242,
    "warning_line": "\tjs.write(\"var lanes = %s,\\n\" % str(lanes))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\t\tprint \"[*] %s sessions found (%s lines parsed)\" % (len(sessions), count)\n\n\t\treturn sessions\n\n\t\t# print \"[*] Session logs: %s\" % len(session_list)\n\t\t# session_list = list(set(session_list)) # uniq\n\t\t# print \"[*] Unique sessions: %s\" % len(session_list)\n\n\t\t# sessions = []\n\t\t# for s in session_list:\n\t\t# \tsessions.append({'ID': s})\n\n\t\t# users = {}\n\n\t\t# for s in sessions:\n\t\t# \ts['log_entries'] = [l for l in logs if is_session(s['ID'], l)]\n\t\t\t\n\t\t# \ts['dates'] = []\n\t\t# \ts['timestamps'] = []\n\t\t# \tfor l in s['log_entries']:\n\t\t# \t\ts['dates'].append(parse(l['Date&Time']))\n\t\t# \t\ts['timestamps'].append(calendar.timegm(parse(l['Date&Time']).timetuple()))\n\t\t# \t\tif l['Event'] in [\"540\", \"538\", \"528\", \"551\"] :\n\t\t# \t\t\ttry:\n\t\t# \t\t\t\ts['user'] = re.search(\"tilisateur\\W+([\\w\\.\\-$]+)\\n\", l['Description']).group(1)\n\t\t# \t\t\t\t#print s['user']\n\t\t# \t\t\texcept Exception, e:\t\n\t\t# \t\t\t\tprint \"[-] User not found for session\"\n\t\t# \t\t\t\tprint l\n\t\t# \t\t\t\texit()\n\n\t\t# \ts['dates'].sort()\n\t\t\n\t\t# \tif users.get(s['user']) == None:\n\t\t# \t\tusers[s['user']] = []\n\t\t# \tusers[s['user']].append(s)\n\t\t\n\t\tlanes = [u for u in users]\n\n\t\titems = []\n\t\tfor i, usr in enumerate(users):\n\t\t\tfor l in get_logons(users[usr]):\n\t\t\t\tif l['end'] - l['start'] < datetime.timedelta(seconds=10):\n\t\t\t\t\tl['end'] = l['start'] + datetime.timedelta(seconds=10)\n\t\t\t\titems.append({'lane': i, 'id':str(l['start'])[-8:], 'start': str(l['start']), 'end': str(l['end'])})\n\t\t\t\n\n\t\ttime_begin = min([i['start'] for i in items])\n",
        "source_code_len": 1459,
        "target_code": "\t\tprint \"[*] %s sessions found (%s lines parsed)\" % (len(sessions), count)\n\t\treturn sessions\n\ndef sessions2timeline(sessions):\n\n\t\t# generate session list by user\n\t\tuser_sessions = {}\n\t\tfor sid in [s for s in sessions if sessions[s].get('username', None) != None]:\n\t\t\ts = sessions[sid]\n\t\t\t\n\t\t\tif user_sessions.get(s['username'], None) == None:\n\t\t\t\tuser_sessions[s['username']] = {}\n\t\t\t\n\t\t\tuser_sessions[s['username']][sid] = s\n\t\t\t\n\t\tprint \"[*] Unique users: %s\" % len(user_sessions)\n\t\t\t\t\n\t\tlanes = [u for u in user_sessions]\n\n\t\titems = []\n\t\tfor i, username in enumerate(user_sessions):\n\n\t\t\tfor user_session in get_sessions(user_sessions[username]):\n\t\t\t\tif user_session['end'] - user_session['start'] < datetime.timedelta(seconds=10):\n\t\t\t\t\tuser_session['end'] = user_session['start'] + datetime.timedelta(seconds=10)\n\n\t\t\t\titems.append({'info': user_session['info'],'lane': i, 'start': str(user_session['start']), 'end': str(user_session['end'])})\n\t\t\t\n\t\ttime_begin = min([i['start'] for i in items])\n",
        "target_code_len": 997,
        "diff_format": "@@ -151,48 +165,29 @@\n \t\tprint \"[*] %s sessions found (%s lines parsed)\" % (len(sessions), count)\n-\n \t\treturn sessions\n \n-\t\t# print \"[*] Session logs: %s\" % len(session_list)\n-\t\t# session_list = list(set(session_list)) # uniq\n-\t\t# print \"[*] Unique sessions: %s\" % len(session_list)\n-\n-\t\t# sessions = []\n-\t\t# for s in session_list:\n-\t\t# \tsessions.append({'ID': s})\n-\n-\t\t# users = {}\n-\n-\t\t# for s in sessions:\n-\t\t# \ts['log_entries'] = [l for l in logs if is_session(s['ID'], l)]\n-\t\t\t\n-\t\t# \ts['dates'] = []\n-\t\t# \ts['timestamps'] = []\n-\t\t# \tfor l in s['log_entries']:\n-\t\t# \t\ts['dates'].append(parse(l['Date&Time']))\n-\t\t# \t\ts['timestamps'].append(calendar.timegm(parse(l['Date&Time']).timetuple()))\n-\t\t# \t\tif l['Event'] in [\"540\", \"538\", \"528\", \"551\"] :\n-\t\t# \t\t\ttry:\n-\t\t# \t\t\t\ts['user'] = re.search(\"tilisateur\\W+([\\w\\.\\-$]+)\\n\", l['Description']).group(1)\n-\t\t# \t\t\t\t#print s['user']\n-\t\t# \t\t\texcept Exception, e:\t\n-\t\t# \t\t\t\tprint \"[-] User not found for session\"\n-\t\t# \t\t\t\tprint l\n-\t\t# \t\t\t\texit()\n-\n-\t\t# \ts['dates'].sort()\n-\t\t\n-\t\t# \tif users.get(s['user']) == None:\n-\t\t# \t\tusers[s['user']] = []\n-\t\t# \tusers[s['user']].append(s)\n-\t\t\n-\t\tlanes = [u for u in users]\n+def sessions2timeline(sessions):\n+\n+\t\t# generate session list by user\n+\t\tuser_sessions = {}\n+\t\tfor sid in [s for s in sessions if sessions[s].get('username', None) != None]:\n+\t\t\ts = sessions[sid]\n+\t\t\t\n+\t\t\tif user_sessions.get(s['username'], None) == None:\n+\t\t\t\tuser_sessions[s['username']] = {}\n+\t\t\t\n+\t\t\tuser_sessions[s['username']][sid] = s\n+\t\t\t\n+\t\tprint \"[*] Unique users: %s\" % len(user_sessions)\n+\t\t\t\t\n+\t\tlanes = [u for u in user_sessions]\n \n \t\titems = []\n-\t\tfor i, usr in enumerate(users):\n-\t\t\tfor l in get_logons(users[usr]):\n-\t\t\t\tif l['end'] - l['start'] < datetime.timedelta(seconds=10):\n-\t\t\t\t\tl['end'] = l['start'] + datetime.timedelta(seconds=10)\n-\t\t\t\titems.append({'lane': i, 'id':str(l['start'])[-8:], 'start': str(l['start']), 'end': str(l['end'])})\n-\t\t\t\n-\n+\t\tfor i, username in enumerate(user_sessions):\n+\n+\t\t\tfor user_session in get_sessions(user_sessions[username]):\n+\t\t\t\tif user_session['end'] - user_session['start'] < datetime.timedelta(seconds=10):\n+\t\t\t\t\tuser_session['end'] = user_session['start'] + datetime.timedelta(seconds=10)\n+\n+\t\t\t\titems.append({'info': user_session['info'],'lane': i, 'start': str(user_session['start']), 'end': str(user_session['end'])})\n+\t\t\t\n \t\ttime_begin = min([i['start'] for i in items])\n",
        "source_code_with_indent": "  <DED><DED>print \"[*] %s sessions found (%s lines parsed)\" % (len(sessions), count)\n\n  return sessions\n\n  # print \"[*] Session logs: %s\" % len(session_list)\n  # session_list = list(set(session_list)) # uniq\n  # print \"[*] Unique sessions: %s\" % len(session_list)\n\n  # sessions = []\n  # for s in session_list:\n  # \tsessions.append({'ID': s})\n\n  # users = {}\n\n  # for s in sessions:\n  # \ts['log_entries'] = [l for l in logs if is_session(s['ID'], l)]\n   \n  # \ts['dates'] = []\n  # \ts['timestamps'] = []\n  # \tfor l in s['log_entries']:\n  # \t\ts['dates'].append(parse(l['Date&Time']))\n  # \t\ts['timestamps'].append(calendar.timegm(parse(l['Date&Time']).timetuple()))\n  # \t\tif l['Event'] in [\"540\", \"538\", \"528\", \"551\"] :\n  # \t\t\ttry:\n  # \t\t\t\ts['user'] = re.search(\"tilisateur\\W+([\\w\\.\\-$]+)\\n\", l['Description']).group(1)\n  # \t\t\t\t#print s['user']\n  # \t\t\texcept Exception, e:\t\n  # \t\t\t\tprint \"[-] User not found for session\"\n  # \t\t\t\tprint l\n  # \t\t\t\texit()\n\n  # \ts['dates'].sort()\n  \n  # \tif users.get(s['user']) == None:\n  # \t\tusers[s['user']] = []\n  # \tusers[s['user']].append(s)\n  \n  lanes = [u for u in users]\n\n  items = []\n  for i, usr in enumerate(users):\n\t\t\t<IND>for l in get_logons(users[usr]):\n\t\t\t\t<IND>if l['end'] - l['start'] < datetime.timedelta(seconds=10):\n\t\t\t\t\t<IND>l['end'] = l['start'] + datetime.timedelta(seconds=10)\n    <DED>items.append({'lane': i, 'id':str(l['start'])[-8:], 'start': str(l['start']), 'end': str(l['end'])})\n   \n\n  <DED><DED>time_begin = min([i['start'] for i in items])\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "  <DED><DED>print \"[*] %s sessions found (%s lines parsed)\" % (len(sessions), count)\n  return sessions\n\n<DED><DED>def sessions2timeline(sessions):\n\n  # generate session list by user\n\t\t<IND>user_sessions = {}\n  for sid in [s for s in sessions if sessions[s].get('username', None) != None]:\n\t\t\t<IND>s = sessions[sid]\n   \n   if user_sessions.get(s['username'], None) == None:\n\t\t\t\t<IND>user_sessions[s['username']] = {}\n   \n   <DED>user_sessions[s['username']][sid] = s\n   \n  <DED>print \"[*] Unique users: %s\" % len(user_sessions)\n    \n  lanes = [u for u in user_sessions]\n\n  items = []\n  for i, username in enumerate(user_sessions):\n\n\t\t\t<IND>for user_session in get_sessions(user_sessions[username]):\n\t\t\t\t<IND>if user_session['end'] - user_session['start'] < datetime.timedelta(seconds=10):\n\t\t\t\t\t<IND>user_session['end'] = user_session['start'] + datetime.timedelta(seconds=10)\n\n    <DED>items.append({'info': user_session['info'],'lane': i, 'start': str(user_session['start']), 'end': str(user_session['end'])})\n   \n  <DED><DED>time_begin = min([i['start'] for i in items])\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\tif options.csv:\n\t\tlogs = import_csv(options.eventlogfile)\n\telif options.evtx:\n\t\tlogs = import_xml(options.eventlogfile)\n\telse:\n",
        "source_code_len": 128,
        "target_code": "\tif options.csv:\n\t\tsessions = import_csv(options.eventlogfile)\n\telif options.evtx:\n\t\tsessions = import_xml(options.eventlogfile)\n\telse:\n",
        "target_code_len": 136,
        "diff_format": "@@ -229,5 +257,5 @@\n \tif options.csv:\n-\t\tlogs = import_csv(options.eventlogfile)\n+\t\tsessions = import_csv(options.eventlogfile)\n \telif options.evtx:\n-\t\tlogs = import_xml(options.eventlogfile)\n+\t\tsessions = import_xml(options.eventlogfile)\n \telse:\n",
        "source_code_with_indent": " <DED>if options.csv:\n\t\t<IND>logs = import_csv(options.eventlogfile)\n <DED>elif options.evtx:\n\t\t<IND>logs = import_xml(options.eventlogfile)\n <DED>else:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": " <DED>if options.csv:\n\t\t<IND>sessions = import_csv(options.eventlogfile)\n <DED>elif options.evtx:\n\t\t<IND>sessions = import_xml(options.eventlogfile)\n <DED>else:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n\t\n\n\tprint \"[*] Collected sessions from %s to %s\" % ((time_begin), (time_end))\n\n",
        "source_code_len": 80,
        "target_code": "\n\ttimeline = sessions2timeline(sessions)\n\n\tprint \"[*] Mapped %s sessions from %s to %s\" % (len(timeline['items']), timeline['time_begin'], timeline['time_end'])\n\n\n",
        "target_code_len": 163,
        "diff_format": "@@ -235,5 +263,6 @@\n \n-\t\n-\n-\tprint \"[*] Collected sessions from %s to %s\" % ((time_begin), (time_end))\n+\ttimeline = sessions2timeline(sessions)\n+\n+\tprint \"[*] Mapped %s sessions from %s to %s\" % (len(timeline['items']), timeline['time_begin'], timeline['time_end'])\n+\n \n",
        "source_code_with_indent": "\n \n\n <DED>print \"[*] Collected sessions from %s to %s\" % ((time_begin), (time_end))\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n <DED>timeline = sessions2timeline(sessions)\n\n print \"[*] Mapped %s sessions from %s to %s\" % (len(timeline['items']), timeline['time_begin'], timeline['time_end'])\n\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n\tjs.write(\"var lanes = %s,\\n\" % str(lanes))\n\tjs.write(\"laneLength = lanes.length,\\n\")\n\tjs.write(\"items = %s,\\n\" % items)\n\tjs.write(\"timeBegin = \\'%s\\',\\n\" % time_begin)\n\tjs.write(\"timeEnd = \\'%s\\';\\n\" % time_end)\n\n",
        "source_code_len": 215,
        "target_code": "\n\tjs.write(\"var lanes = %s,\\n\" % str(timeline['lanes']))\n\tjs.write(\"laneLength = lanes.length,\\n\")\n\tjs.write(\"items = %s,\\n\" % timeline['items'])\n\tjs.write(\"timeBegin = \\'%s\\',\\n\" % timeline['time_begin'])\n\tjs.write(\"timeEnd = \\'%s\\';\\n\" % timeline['time_end'])\n\n",
        "target_code_len": 263,
        "diff_format": "@@ -241,7 +270,7 @@\n \n-\tjs.write(\"var lanes = %s,\\n\" % str(lanes))\n+\tjs.write(\"var lanes = %s,\\n\" % str(timeline['lanes']))\n \tjs.write(\"laneLength = lanes.length,\\n\")\n-\tjs.write(\"items = %s,\\n\" % items)\n-\tjs.write(\"timeBegin = \\'%s\\',\\n\" % time_begin)\n-\tjs.write(\"timeEnd = \\'%s\\';\\n\" % time_end)\n+\tjs.write(\"items = %s,\\n\" % timeline['items'])\n+\tjs.write(\"timeBegin = \\'%s\\',\\n\" % timeline['time_begin'])\n+\tjs.write(\"timeEnd = \\'%s\\';\\n\" % timeline['time_end'])\n \n",
        "source_code_with_indent": "\n js.write(\"var lanes = %s,\\n\" % str(lanes))\n js.write(\"laneLength = lanes.length,\\n\")\n js.write(\"items = %s,\\n\" % items)\n js.write(\"timeBegin = \\'%s\\',\\n\" % time_begin)\n js.write(\"timeEnd = \\'%s\\';\\n\" % time_end)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n js.write(\"var lanes = %s,\\n\" % str(timeline['lanes']))\n js.write(\"laneLength = lanes.length,\\n\")\n js.write(\"items = %s,\\n\" % timeline['items'])\n js.write(\"timeBegin = \\'%s\\',\\n\" % timeline['time_begin'])\n js.write(\"timeEnd = \\'%s\\';\\n\" % timeline['time_end'])\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "certsocietegenerale/event2timeline",
    "commit": "9026747d6e31dc750935f8825345c11d6df8da0e",
    "filename": "event2timeline.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/certsocietegenerale-event2timeline/event2timeline.py",
    "file_hunks_size": 18,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "event2timeline.py:244:28 Unbound name [10]: Name `items` is used but not defined in the current scope.",
    "message": " Name `items` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 244,
    "warning_line": "\tjs.write(\"items = %s,\\n\" % items)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\t\tprint \"[*] %s sessions found (%s lines parsed)\" % (len(sessions), count)\n\n\t\treturn sessions\n\n\t\t# print \"[*] Session logs: %s\" % len(session_list)\n\t\t# session_list = list(set(session_list)) # uniq\n\t\t# print \"[*] Unique sessions: %s\" % len(session_list)\n\n\t\t# sessions = []\n\t\t# for s in session_list:\n\t\t# \tsessions.append({'ID': s})\n\n\t\t# users = {}\n\n\t\t# for s in sessions:\n\t\t# \ts['log_entries'] = [l for l in logs if is_session(s['ID'], l)]\n\t\t\t\n\t\t# \ts['dates'] = []\n\t\t# \ts['timestamps'] = []\n\t\t# \tfor l in s['log_entries']:\n\t\t# \t\ts['dates'].append(parse(l['Date&Time']))\n\t\t# \t\ts['timestamps'].append(calendar.timegm(parse(l['Date&Time']).timetuple()))\n\t\t# \t\tif l['Event'] in [\"540\", \"538\", \"528\", \"551\"] :\n\t\t# \t\t\ttry:\n\t\t# \t\t\t\ts['user'] = re.search(\"tilisateur\\W+([\\w\\.\\-$]+)\\n\", l['Description']).group(1)\n\t\t# \t\t\t\t#print s['user']\n\t\t# \t\t\texcept Exception, e:\t\n\t\t# \t\t\t\tprint \"[-] User not found for session\"\n\t\t# \t\t\t\tprint l\n\t\t# \t\t\t\texit()\n\n\t\t# \ts['dates'].sort()\n\t\t\n\t\t# \tif users.get(s['user']) == None:\n\t\t# \t\tusers[s['user']] = []\n\t\t# \tusers[s['user']].append(s)\n\t\t\n\t\tlanes = [u for u in users]\n\n\t\titems = []\n\t\tfor i, usr in enumerate(users):\n\t\t\tfor l in get_logons(users[usr]):\n\t\t\t\tif l['end'] - l['start'] < datetime.timedelta(seconds=10):\n\t\t\t\t\tl['end'] = l['start'] + datetime.timedelta(seconds=10)\n\t\t\t\titems.append({'lane': i, 'id':str(l['start'])[-8:], 'start': str(l['start']), 'end': str(l['end'])})\n\t\t\t\n\n\t\ttime_begin = min([i['start'] for i in items])\n",
        "source_code_len": 1459,
        "target_code": "\t\tprint \"[*] %s sessions found (%s lines parsed)\" % (len(sessions), count)\n\t\treturn sessions\n\ndef sessions2timeline(sessions):\n\n\t\t# generate session list by user\n\t\tuser_sessions = {}\n\t\tfor sid in [s for s in sessions if sessions[s].get('username', None) != None]:\n\t\t\ts = sessions[sid]\n\t\t\t\n\t\t\tif user_sessions.get(s['username'], None) == None:\n\t\t\t\tuser_sessions[s['username']] = {}\n\t\t\t\n\t\t\tuser_sessions[s['username']][sid] = s\n\t\t\t\n\t\tprint \"[*] Unique users: %s\" % len(user_sessions)\n\t\t\t\t\n\t\tlanes = [u for u in user_sessions]\n\n\t\titems = []\n\t\tfor i, username in enumerate(user_sessions):\n\n\t\t\tfor user_session in get_sessions(user_sessions[username]):\n\t\t\t\tif user_session['end'] - user_session['start'] < datetime.timedelta(seconds=10):\n\t\t\t\t\tuser_session['end'] = user_session['start'] + datetime.timedelta(seconds=10)\n\n\t\t\t\titems.append({'info': user_session['info'],'lane': i, 'start': str(user_session['start']), 'end': str(user_session['end'])})\n\t\t\t\n\t\ttime_begin = min([i['start'] for i in items])\n",
        "target_code_len": 997,
        "diff_format": "@@ -151,48 +165,29 @@\n \t\tprint \"[*] %s sessions found (%s lines parsed)\" % (len(sessions), count)\n-\n \t\treturn sessions\n \n-\t\t# print \"[*] Session logs: %s\" % len(session_list)\n-\t\t# session_list = list(set(session_list)) # uniq\n-\t\t# print \"[*] Unique sessions: %s\" % len(session_list)\n-\n-\t\t# sessions = []\n-\t\t# for s in session_list:\n-\t\t# \tsessions.append({'ID': s})\n-\n-\t\t# users = {}\n-\n-\t\t# for s in sessions:\n-\t\t# \ts['log_entries'] = [l for l in logs if is_session(s['ID'], l)]\n-\t\t\t\n-\t\t# \ts['dates'] = []\n-\t\t# \ts['timestamps'] = []\n-\t\t# \tfor l in s['log_entries']:\n-\t\t# \t\ts['dates'].append(parse(l['Date&Time']))\n-\t\t# \t\ts['timestamps'].append(calendar.timegm(parse(l['Date&Time']).timetuple()))\n-\t\t# \t\tif l['Event'] in [\"540\", \"538\", \"528\", \"551\"] :\n-\t\t# \t\t\ttry:\n-\t\t# \t\t\t\ts['user'] = re.search(\"tilisateur\\W+([\\w\\.\\-$]+)\\n\", l['Description']).group(1)\n-\t\t# \t\t\t\t#print s['user']\n-\t\t# \t\t\texcept Exception, e:\t\n-\t\t# \t\t\t\tprint \"[-] User not found for session\"\n-\t\t# \t\t\t\tprint l\n-\t\t# \t\t\t\texit()\n-\n-\t\t# \ts['dates'].sort()\n-\t\t\n-\t\t# \tif users.get(s['user']) == None:\n-\t\t# \t\tusers[s['user']] = []\n-\t\t# \tusers[s['user']].append(s)\n-\t\t\n-\t\tlanes = [u for u in users]\n+def sessions2timeline(sessions):\n+\n+\t\t# generate session list by user\n+\t\tuser_sessions = {}\n+\t\tfor sid in [s for s in sessions if sessions[s].get('username', None) != None]:\n+\t\t\ts = sessions[sid]\n+\t\t\t\n+\t\t\tif user_sessions.get(s['username'], None) == None:\n+\t\t\t\tuser_sessions[s['username']] = {}\n+\t\t\t\n+\t\t\tuser_sessions[s['username']][sid] = s\n+\t\t\t\n+\t\tprint \"[*] Unique users: %s\" % len(user_sessions)\n+\t\t\t\t\n+\t\tlanes = [u for u in user_sessions]\n \n \t\titems = []\n-\t\tfor i, usr in enumerate(users):\n-\t\t\tfor l in get_logons(users[usr]):\n-\t\t\t\tif l['end'] - l['start'] < datetime.timedelta(seconds=10):\n-\t\t\t\t\tl['end'] = l['start'] + datetime.timedelta(seconds=10)\n-\t\t\t\titems.append({'lane': i, 'id':str(l['start'])[-8:], 'start': str(l['start']), 'end': str(l['end'])})\n-\t\t\t\n-\n+\t\tfor i, username in enumerate(user_sessions):\n+\n+\t\t\tfor user_session in get_sessions(user_sessions[username]):\n+\t\t\t\tif user_session['end'] - user_session['start'] < datetime.timedelta(seconds=10):\n+\t\t\t\t\tuser_session['end'] = user_session['start'] + datetime.timedelta(seconds=10)\n+\n+\t\t\t\titems.append({'info': user_session['info'],'lane': i, 'start': str(user_session['start']), 'end': str(user_session['end'])})\n+\t\t\t\n \t\ttime_begin = min([i['start'] for i in items])\n",
        "source_code_with_indent": "  <DED><DED>print \"[*] %s sessions found (%s lines parsed)\" % (len(sessions), count)\n\n  return sessions\n\n  # print \"[*] Session logs: %s\" % len(session_list)\n  # session_list = list(set(session_list)) # uniq\n  # print \"[*] Unique sessions: %s\" % len(session_list)\n\n  # sessions = []\n  # for s in session_list:\n  # \tsessions.append({'ID': s})\n\n  # users = {}\n\n  # for s in sessions:\n  # \ts['log_entries'] = [l for l in logs if is_session(s['ID'], l)]\n   \n  # \ts['dates'] = []\n  # \ts['timestamps'] = []\n  # \tfor l in s['log_entries']:\n  # \t\ts['dates'].append(parse(l['Date&Time']))\n  # \t\ts['timestamps'].append(calendar.timegm(parse(l['Date&Time']).timetuple()))\n  # \t\tif l['Event'] in [\"540\", \"538\", \"528\", \"551\"] :\n  # \t\t\ttry:\n  # \t\t\t\ts['user'] = re.search(\"tilisateur\\W+([\\w\\.\\-$]+)\\n\", l['Description']).group(1)\n  # \t\t\t\t#print s['user']\n  # \t\t\texcept Exception, e:\t\n  # \t\t\t\tprint \"[-] User not found for session\"\n  # \t\t\t\tprint l\n  # \t\t\t\texit()\n\n  # \ts['dates'].sort()\n  \n  # \tif users.get(s['user']) == None:\n  # \t\tusers[s['user']] = []\n  # \tusers[s['user']].append(s)\n  \n  lanes = [u for u in users]\n\n  items = []\n  for i, usr in enumerate(users):\n\t\t\t<IND>for l in get_logons(users[usr]):\n\t\t\t\t<IND>if l['end'] - l['start'] < datetime.timedelta(seconds=10):\n\t\t\t\t\t<IND>l['end'] = l['start'] + datetime.timedelta(seconds=10)\n    <DED>items.append({'lane': i, 'id':str(l['start'])[-8:], 'start': str(l['start']), 'end': str(l['end'])})\n   \n\n  <DED><DED>time_begin = min([i['start'] for i in items])\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "  <DED><DED>print \"[*] %s sessions found (%s lines parsed)\" % (len(sessions), count)\n  return sessions\n\n<DED><DED>def sessions2timeline(sessions):\n\n  # generate session list by user\n\t\t<IND>user_sessions = {}\n  for sid in [s for s in sessions if sessions[s].get('username', None) != None]:\n\t\t\t<IND>s = sessions[sid]\n   \n   if user_sessions.get(s['username'], None) == None:\n\t\t\t\t<IND>user_sessions[s['username']] = {}\n   \n   <DED>user_sessions[s['username']][sid] = s\n   \n  <DED>print \"[*] Unique users: %s\" % len(user_sessions)\n    \n  lanes = [u for u in user_sessions]\n\n  items = []\n  for i, username in enumerate(user_sessions):\n\n\t\t\t<IND>for user_session in get_sessions(user_sessions[username]):\n\t\t\t\t<IND>if user_session['end'] - user_session['start'] < datetime.timedelta(seconds=10):\n\t\t\t\t\t<IND>user_session['end'] = user_session['start'] + datetime.timedelta(seconds=10)\n\n    <DED>items.append({'info': user_session['info'],'lane': i, 'start': str(user_session['start']), 'end': str(user_session['end'])})\n   \n  <DED><DED>time_begin = min([i['start'] for i in items])\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\tif options.csv:\n\t\tlogs = import_csv(options.eventlogfile)\n\telif options.evtx:\n\t\tlogs = import_xml(options.eventlogfile)\n\telse:\n",
        "source_code_len": 128,
        "target_code": "\tif options.csv:\n\t\tsessions = import_csv(options.eventlogfile)\n\telif options.evtx:\n\t\tsessions = import_xml(options.eventlogfile)\n\telse:\n",
        "target_code_len": 136,
        "diff_format": "@@ -229,5 +257,5 @@\n \tif options.csv:\n-\t\tlogs = import_csv(options.eventlogfile)\n+\t\tsessions = import_csv(options.eventlogfile)\n \telif options.evtx:\n-\t\tlogs = import_xml(options.eventlogfile)\n+\t\tsessions = import_xml(options.eventlogfile)\n \telse:\n",
        "source_code_with_indent": " <DED>if options.csv:\n\t\t<IND>logs = import_csv(options.eventlogfile)\n <DED>elif options.evtx:\n\t\t<IND>logs = import_xml(options.eventlogfile)\n <DED>else:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": " <DED>if options.csv:\n\t\t<IND>sessions = import_csv(options.eventlogfile)\n <DED>elif options.evtx:\n\t\t<IND>sessions = import_xml(options.eventlogfile)\n <DED>else:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n\t\n\n\tprint \"[*] Collected sessions from %s to %s\" % ((time_begin), (time_end))\n\n",
        "source_code_len": 80,
        "target_code": "\n\ttimeline = sessions2timeline(sessions)\n\n\tprint \"[*] Mapped %s sessions from %s to %s\" % (len(timeline['items']), timeline['time_begin'], timeline['time_end'])\n\n\n",
        "target_code_len": 163,
        "diff_format": "@@ -235,5 +263,6 @@\n \n-\t\n-\n-\tprint \"[*] Collected sessions from %s to %s\" % ((time_begin), (time_end))\n+\ttimeline = sessions2timeline(sessions)\n+\n+\tprint \"[*] Mapped %s sessions from %s to %s\" % (len(timeline['items']), timeline['time_begin'], timeline['time_end'])\n+\n \n",
        "source_code_with_indent": "\n \n\n <DED>print \"[*] Collected sessions from %s to %s\" % ((time_begin), (time_end))\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n <DED>timeline = sessions2timeline(sessions)\n\n print \"[*] Mapped %s sessions from %s to %s\" % (len(timeline['items']), timeline['time_begin'], timeline['time_end'])\n\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n\tjs.write(\"var lanes = %s,\\n\" % str(lanes))\n\tjs.write(\"laneLength = lanes.length,\\n\")\n\tjs.write(\"items = %s,\\n\" % items)\n\tjs.write(\"timeBegin = \\'%s\\',\\n\" % time_begin)\n\tjs.write(\"timeEnd = \\'%s\\';\\n\" % time_end)\n\n",
        "source_code_len": 215,
        "target_code": "\n\tjs.write(\"var lanes = %s,\\n\" % str(timeline['lanes']))\n\tjs.write(\"laneLength = lanes.length,\\n\")\n\tjs.write(\"items = %s,\\n\" % timeline['items'])\n\tjs.write(\"timeBegin = \\'%s\\',\\n\" % timeline['time_begin'])\n\tjs.write(\"timeEnd = \\'%s\\';\\n\" % timeline['time_end'])\n\n",
        "target_code_len": 263,
        "diff_format": "@@ -241,7 +270,7 @@\n \n-\tjs.write(\"var lanes = %s,\\n\" % str(lanes))\n+\tjs.write(\"var lanes = %s,\\n\" % str(timeline['lanes']))\n \tjs.write(\"laneLength = lanes.length,\\n\")\n-\tjs.write(\"items = %s,\\n\" % items)\n-\tjs.write(\"timeBegin = \\'%s\\',\\n\" % time_begin)\n-\tjs.write(\"timeEnd = \\'%s\\';\\n\" % time_end)\n+\tjs.write(\"items = %s,\\n\" % timeline['items'])\n+\tjs.write(\"timeBegin = \\'%s\\',\\n\" % timeline['time_begin'])\n+\tjs.write(\"timeEnd = \\'%s\\';\\n\" % timeline['time_end'])\n \n",
        "source_code_with_indent": "\n js.write(\"var lanes = %s,\\n\" % str(lanes))\n js.write(\"laneLength = lanes.length,\\n\")\n js.write(\"items = %s,\\n\" % items)\n js.write(\"timeBegin = \\'%s\\',\\n\" % time_begin)\n js.write(\"timeEnd = \\'%s\\';\\n\" % time_end)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n js.write(\"var lanes = %s,\\n\" % str(timeline['lanes']))\n js.write(\"laneLength = lanes.length,\\n\")\n js.write(\"items = %s,\\n\" % timeline['items'])\n js.write(\"timeBegin = \\'%s\\',\\n\" % timeline['time_begin'])\n js.write(\"timeEnd = \\'%s\\';\\n\" % timeline['time_end'])\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]