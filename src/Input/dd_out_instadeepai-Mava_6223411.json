[
  {
    "project": "instadeepai/Mava",
    "commit": "6223411fa6bb6217a85a8a9feea314dfa26ea4d9",
    "filename": "mava/specs.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/instadeepai-Mava/mava/specs.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mava/specs.py:51:8 Incompatible return type [7]: Expected `List[str]` but got `typing.Tuple[List[str], List[str]]`.",
    "message": " Expected `List[str]` but got `typing.Tuple[List[str], List[str]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 51,
    "warning_line": "        return self.get_agent_ids(), self.get_agent_types()",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\"\"\"\nfrom typing import Any, Dict, List, NamedTuple\n\n",
        "source_code_len": 52,
        "target_code": "\"\"\"\nfrom typing import Dict, List, Tuple\n\n",
        "target_code_len": 42,
        "diff_format": "@@ -7,3 +7,3 @@\n \"\"\"\n-from typing import Any, Dict, List, NamedTuple\n+from typing import Dict, List, Tuple\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\nfrom typing import Any, Dict, List, NamedTuple\n\n",
        "target_code_with_indent": "\nfrom typing import Dict, List, Tuple\n\n"
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def get_agent_info(self) -> List[str]:\n        return self.get_agent_ids(), self.get_agent_types()\n",
        "source_code_len": 104,
        "target_code": "\n    def get_agent_info(self) -> Tuple[List[str], List[str]]:\n        return self.get_agent_ids(), self.get_agent_types()\n",
        "target_code_len": 122,
        "diff_format": "@@ -49,3 +50,3 @@\n \n-    def get_agent_info(self) -> List[str]:\n+    def get_agent_info(self) -> Tuple[List[str], List[str]]:\n         return self.get_agent_ids(), self.get_agent_types()\n",
        "source_code_with_indent": "\n    <DED>def get_agent_info(self) -> List[str]:\n        <IND>return self.get_agent_ids(), self.get_agent_types()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def get_agent_info(self) -> Tuple[List[str], List[str]]:\n        <IND>return self.get_agent_ids(), self.get_agent_types()\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "instadeepai/Mava",
    "commit": "6223411fa6bb6217a85a8a9feea314dfa26ea4d9",
    "filename": "mava/systems/system.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/instadeepai-Mava/mava/systems/system.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mava/systems/system.py:118:4 Inconsistent override [14]: `mava.systems.system.System.observe` overrides method defined in `mava.core.Executor` inconsistently. Could not find parameter `actions` in overriding signature.",
    "message": " `mava.systems.system.System.observe` overrides method defined in `mava.core.Executor` inconsistently. Could not find parameter `actions` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 118,
    "warning_line": "    def observe(self, action: types.NestedArray, next_timestep: dm_env.TimeStep):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def observe(self, action: types.NestedArray, next_timestep: dm_env.TimeStep):\n        self._num_observations += 1\n        self._actor.observe(action, next_timestep)\n\n",
        "source_code_len": 171,
        "target_code": "\n    def observe(\n        self, actions: Dict[str, types.NestedArray], next_timestep: dm_env.TimeStep\n    ):\n        self._num_observations += 1\n        self._executor.observe(actions, next_timestep)\n\n",
        "target_code_len": 201,
        "diff_format": "@@ -117,5 +89,7 @@\n \n-    def observe(self, action: types.NestedArray, next_timestep: dm_env.TimeStep):\n+    def observe(\n+        self, actions: Dict[str, types.NestedArray], next_timestep: dm_env.TimeStep\n+    ):\n         self._num_observations += 1\n-        self._actor.observe(action, next_timestep)\n+        self._executor.observe(actions, next_timestep)\n \n",
        "source_code_with_indent": "\n    <DED>def observe(self, action: types.NestedArray, next_timestep: dm_env.TimeStep):\n        <IND>self._num_observations += 1\n        self._actor.observe(action, next_timestep)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def observe(\n        self, actions: Dict[str, types.NestedArray], next_timestep: dm_env.TimeStep\n    ):\n        <IND>self._num_observations += 1\n        self._executor.observe(actions, next_timestep)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "instadeepai/Mava",
    "commit": "6223411fa6bb6217a85a8a9feea314dfa26ea4d9",
    "filename": "setup.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/instadeepai-Mava/setup.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "setup.py:25:41 Incompatible parameter type [6]: Expected `importlib.machinery.ModuleSpec` for 1st positional only parameter to call `import_util.module_from_spec` but got `typing.Optional[importlib.machinery.ModuleSpec]`.",
    "message": " Expected `importlib.machinery.ModuleSpec` for 1st positional only parameter to call `import_util.module_from_spec` but got `typing.Optional[importlib.machinery.ModuleSpec]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 25,
    "warning_line": "_metadata = import_util.module_from_spec(spec)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "spec = import_util.spec_from_file_location(\"_metadata\", \"mava/_metadata.py\")\n_metadata = import_util.module_from_spec(spec)\nspec.loader.exec_module(_metadata)\n\n",
        "source_code_len": 160,
        "target_code": "spec = import_util.spec_from_file_location(\"_metadata\", \"mava/_metadata.py\")\n_metadata = import_util.module_from_spec(spec)  # type: ignore\nspec.loader.exec_module(_metadata)  # type: ignore\n\n",
        "target_code_len": 192,
        "diff_format": "@@ -24,4 +24,4 @@\n spec = import_util.spec_from_file_location(\"_metadata\", \"mava/_metadata.py\")\n-_metadata = import_util.module_from_spec(spec)\n-spec.loader.exec_module(_metadata)\n+_metadata = import_util.module_from_spec(spec)  # type: ignore\n+spec.loader.exec_module(_metadata)  # type: ignore\n \n",
        "source_code_with_indent": "spec = import_util.spec_from_file_location(\"_metadata\", \"mava/_metadata.py\")\n_metadata = import_util.module_from_spec(spec)\nspec.loader.exec_module(_metadata)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "spec = import_util.spec_from_file_location(\"_metadata\", \"mava/_metadata.py\")\n_metadata = import_util.module_from_spec(spec)  # type: ignore\nspec.loader.exec_module(_metadata)  # type: ignore\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]