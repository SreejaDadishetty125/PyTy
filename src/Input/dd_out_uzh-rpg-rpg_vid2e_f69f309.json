[
  {
    "project": "uzh-rpg/rpg_vid2e",
    "commit": "f69f30932e4e5d2a8a267940fd3ff5bb8010c8c9",
    "filename": "upsampling/utils/utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/uzh-rpg-rpg_vid2e/upsampling/utils/utils.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "upsampling/utils/utils.py:36:4 Incompatible return type [7]: Expected `typing.Optional[int]` but got `float`.",
    "message": " Expected `typing.Optional[int]` but got `float`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 36,
    "warning_line": "    return fps",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef fps_from_file(fps_file) -> Union[None, int]:\n    assert os.path.isfile(fps_file)\n",
        "source_code_len": 86,
        "target_code": "\ndef fps_from_file(fps_file) -> float:\n    assert os.path.isfile(fps_file)\n",
        "target_code_len": 75,
        "diff_format": "@@ -30,3 +30,3 @@\n \n-def fps_from_file(fps_file) -> Union[None, int]:\n+def fps_from_file(fps_file) -> float:\n     assert os.path.isfile(fps_file)\n",
        "source_code_with_indent": "\n<DED>def fps_from_file(fps_file) -> Union[None, int]:\n    <IND>assert os.path.isfile(fps_file)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def fps_from_file(fps_file) -> float:\n    <IND>assert os.path.isfile(fps_file)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "uzh-rpg/rpg_vid2e",
    "commit": "f69f30932e4e5d2a8a267940fd3ff5bb8010c8c9",
    "filename": "upsampling/utils/utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/uzh-rpg-rpg_vid2e/upsampling/utils/utils.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "upsampling/utils/utils.py:45:43 Incompatible parameter type [6]: Expected `float` for 2nd positional only parameter to call `ImageSequence.__init__` but got `typing.Optional[int]`.",
    "message": " Expected `float` for 2nd positional only parameter to call `ImageSequence.__init__` but got `typing.Optional[int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 45,
    "warning_line": "            return ImageSequence(imgs_dir, fps)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef fps_from_file(fps_file) -> Union[None, int]:\n    assert os.path.isfile(fps_file)\n",
        "source_code_len": 86,
        "target_code": "\ndef fps_from_file(fps_file) -> float:\n    assert os.path.isfile(fps_file)\n",
        "target_code_len": 75,
        "diff_format": "@@ -30,3 +30,3 @@\n \n-def fps_from_file(fps_file) -> Union[None, int]:\n+def fps_from_file(fps_file) -> float:\n     assert os.path.isfile(fps_file)\n",
        "source_code_with_indent": "\n<DED>def fps_from_file(fps_file) -> Union[None, int]:\n    <IND>assert os.path.isfile(fps_file)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def fps_from_file(fps_file) -> float:\n    <IND>assert os.path.isfile(fps_file)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "uzh-rpg/rpg_vid2e",
    "commit": "f69f30932e4e5d2a8a267940fd3ff5bb8010c8c9",
    "filename": "upsampling/utils/utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/uzh-rpg-rpg_vid2e/upsampling/utils/utils.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "upsampling/utils/utils.py:48:41 Incompatible parameter type [6]: Expected `float` for 2nd positional only parameter to call `VideoSequence.__init__` but got `typing.Optional[int]`.",
    "message": " Expected `float` for 2nd positional only parameter to call `VideoSequence.__init__` but got `typing.Optional[int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 48,
    "warning_line": "        return VideoSequence(video_file, fps)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef fps_from_file(fps_file) -> Union[None, int]:\n    assert os.path.isfile(fps_file)\n",
        "source_code_len": 86,
        "target_code": "\ndef fps_from_file(fps_file) -> float:\n    assert os.path.isfile(fps_file)\n",
        "target_code_len": 75,
        "diff_format": "@@ -30,3 +30,3 @@\n \n-def fps_from_file(fps_file) -> Union[None, int]:\n+def fps_from_file(fps_file) -> float:\n     assert os.path.isfile(fps_file)\n",
        "source_code_with_indent": "\n<DED>def fps_from_file(fps_file) -> Union[None, int]:\n    <IND>assert os.path.isfile(fps_file)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def fps_from_file(fps_file) -> float:\n    <IND>assert os.path.isfile(fps_file)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]