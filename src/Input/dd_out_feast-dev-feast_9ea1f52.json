[
  {
    "project": "feast-dev/feast",
    "commit": "9ea1f52387b5596954df7f64ce2f54678bf4ccff",
    "filename": "sdk/python/feast/loaders/file.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/feast-dev-feast/sdk/python/feast/loaders/file.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "sdk/python/feast/loaders/file.py:86:30 Incompatible parameter type [6]: Expected `str` for 1st parameter `bucket` to call `_get_files` but got `Optional[str]`.",
    "message": " Expected `str` for 1st parameter `bucket` to call `_get_files` but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 86,
    "warning_line": "            return _get_files(bucket=input_source_uri.hostname, uri=input_source_uri)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            # Wildcard path\n            return _get_files(bucket=input_source_uri.hostname, uri=input_source_uri)\n        else:\n",
        "source_code_len": 128,
        "target_code": "            # Wildcard path\n            return _get_files(\n                bucket=str(input_source_uri.hostname), uri=input_source_uri\n            )\n        else:\n",
        "target_code_len": 163,
        "diff_format": "@@ -85,3 +85,5 @@\n             # Wildcard path\n-            return _get_files(bucket=input_source_uri.hostname, uri=input_source_uri)\n+            return _get_files(\n+                bucket=str(input_source_uri.hostname), uri=input_source_uri\n+            )\n         else:\n",
        "source_code_with_indent": "            # Wildcard path\n            <IND>return _get_files(bucket=input_source_uri.hostname, uri=input_source_uri)\n        <DED>else:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            # Wildcard path\n            <IND>return _get_files(\n                bucket=str(input_source_uri.hostname), uri=input_source_uri\n            )\n        <DED>else:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "feast-dev/feast",
    "commit": "9ea1f52387b5596954df7f64ce2f54678bf4ccff",
    "filename": "sdk/python/feast/loaders/file.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/feast-dev-feast/sdk/python/feast/loaders/file.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "sdk/python/feast/loaders/file.py:99:25 Incompatible parameter type [6]: Expected `str` for 2nd positional only parameter to call `upload_file_to_gcs` but got `Optional[str]`.",
    "message": " Expected `str` for 2nd positional only parameter to call `upload_file_to_gcs` but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 99,
    "warning_line": "            source_path, uri.hostname, str(uri.path).strip(\"/\") + \"/\" + file_name",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        upload_file_to_gcs(\n            source_path, uri.hostname, str(uri.path).strip(\"/\") + \"/\" + file_name\n        )\n",
        "source_code_len": 120,
        "target_code": "        upload_file_to_gcs(\n            source_path, str(uri.hostname), str(uri.path).strip(\"/\") + \"/\" + file_name\n        )\n",
        "target_code_len": 125,
        "diff_format": "@@ -98,3 +100,3 @@\n         upload_file_to_gcs(\n-            source_path, uri.hostname, str(uri.path).strip(\"/\") + \"/\" + file_name\n+            source_path, str(uri.hostname), str(uri.path).strip(\"/\") + \"/\" + file_name\n         )\n",
        "source_code_with_indent": "        <IND>upload_file_to_gcs(\n            source_path, uri.hostname, str(uri.path).strip(\"/\") + \"/\" + file_name\n        )\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>upload_file_to_gcs(\n            source_path, str(uri.hostname), str(uri.path).strip(\"/\") + \"/\" + file_name\n        )\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "feast-dev/feast",
    "commit": "9ea1f52387b5596954df7f64ce2f54678bf4ccff",
    "filename": "sdk/python/feast/type_map.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/feast-dev-feast/sdk/python/feast/type_map.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "sdk/python/feast/type_map.py:455:4 Incompatible return type [7]: Expected `Timestamp` but got `List[typing.Any]`.",
    "message": " Expected `Timestamp` but got `List[typing.Any]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 455,
    "warning_line": "    return proto_column",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef pa_column_to_timestamp_proto_column(column: pa.lib.ChunkedArray) -> Timestamp:\n    if not isinstance(column.type, TimestampType):\n",
        "source_code_len": 135,
        "target_code": "\ndef pa_column_to_timestamp_proto_column(column: pa.lib.ChunkedArray) -> List[Timestamp]:\n    if not isinstance(column.type, TimestampType):\n",
        "target_code_len": 141,
        "diff_format": "@@ -445,3 +445,3 @@\n \n-def pa_column_to_timestamp_proto_column(column: pa.lib.ChunkedArray) -> Timestamp:\n+def pa_column_to_timestamp_proto_column(column: pa.lib.ChunkedArray) -> List[Timestamp]:\n     if not isinstance(column.type, TimestampType):\n",
        "source_code_with_indent": "\n<DED>def pa_column_to_timestamp_proto_column(column: pa.lib.ChunkedArray) -> Timestamp:\n    <IND>if not isinstance(column.type, TimestampType):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def pa_column_to_timestamp_proto_column(column: pa.lib.ChunkedArray) -> List[Timestamp]:\n    <IND>if not isinstance(column.type, TimestampType):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "feast-dev/feast",
    "commit": "9ea1f52387b5596954df7f64ce2f54678bf4ccff",
    "filename": "sdk/python/feast/wait.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/feast-dev-feast/sdk/python/feast/wait.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "sdk/python/feast/wait.py:43:45 Unsupported operand [58]: `<=` is not supported for operand types `float` and `Optional[int]`.",
    "message": " `<=` is not supported for operand types `float` and `Optional[int]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 43,
    "warning_line": "    while not is_success and elapsed_secs <= timeout_secs:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    retry_fn: Callable[[], Tuple[Any, bool]],\n    timeout_secs: Optional[int] = None,\n    timeout_msg: Optional[str] = \"Timeout while waiting for retry_fn() to return True\",\n    max_interval_secs: Optional[int] = int(defaults[CONFIG_MAX_WAIT_INTERVAL_KEY]),\n) -> Any:\n",
        "source_code_len": 268,
        "target_code": "    retry_fn: Callable[[], Tuple[Any, bool]],\n    timeout_secs: int = 0,\n    timeout_msg: Optional[str] = \"Timeout while waiting for retry_fn() to return True\",\n    max_interval_secs: int = int(defaults[CONFIG_MAX_WAIT_INTERVAL_KEY]),\n) -> Any:\n",
        "target_code_len": 245,
        "diff_format": "@@ -23,5 +23,5 @@\n     retry_fn: Callable[[], Tuple[Any, bool]],\n-    timeout_secs: Optional[int] = None,\n+    timeout_secs: int = 0,\n     timeout_msg: Optional[str] = \"Timeout while waiting for retry_fn() to return True\",\n-    max_interval_secs: Optional[int] = int(defaults[CONFIG_MAX_WAIT_INTERVAL_KEY]),\n+    max_interval_secs: int = int(defaults[CONFIG_MAX_WAIT_INTERVAL_KEY]),\n ) -> Any:\n",
        "source_code_with_indent": "    retry_fn: Callable[[], Tuple[Any, bool]],\n    timeout_secs: Optional[int] = None,\n    timeout_msg: Optional[str] = \"Timeout while waiting for retry_fn() to return True\",\n    max_interval_secs: Optional[int] = int(defaults[CONFIG_MAX_WAIT_INTERVAL_KEY]),\n) -> Any:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    retry_fn: Callable[[], Tuple[Any, bool]],\n    timeout_secs: int = 0,\n    timeout_msg: Optional[str] = \"Timeout while waiting for retry_fn() to return True\",\n    max_interval_secs: int = int(defaults[CONFIG_MAX_WAIT_INTERVAL_KEY]),\n) -> Any:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "feast-dev/feast",
    "commit": "9ea1f52387b5596954df7f64ce2f54678bf4ccff",
    "filename": "sdk/python/feast/wait.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/feast-dev-feast/sdk/python/feast/wait.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "sdk/python/feast/wait.py:46:28 Unsupported operand [58]: `-` is not supported for operand types `Optional[int]` and `float`.",
    "message": " `-` is not supported for operand types `Optional[int]` and `float`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 46,
    "warning_line": "        till_timeout_secs = timeout_secs - elapsed_secs",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    retry_fn: Callable[[], Tuple[Any, bool]],\n    timeout_secs: Optional[int] = None,\n    timeout_msg: Optional[str] = \"Timeout while waiting for retry_fn() to return True\",\n    max_interval_secs: Optional[int] = int(defaults[CONFIG_MAX_WAIT_INTERVAL_KEY]),\n) -> Any:\n",
        "source_code_len": 268,
        "target_code": "    retry_fn: Callable[[], Tuple[Any, bool]],\n    timeout_secs: int = 0,\n    timeout_msg: Optional[str] = \"Timeout while waiting for retry_fn() to return True\",\n    max_interval_secs: int = int(defaults[CONFIG_MAX_WAIT_INTERVAL_KEY]),\n) -> Any:\n",
        "target_code_len": 245,
        "diff_format": "@@ -23,5 +23,5 @@\n     retry_fn: Callable[[], Tuple[Any, bool]],\n-    timeout_secs: Optional[int] = None,\n+    timeout_secs: int = 0,\n     timeout_msg: Optional[str] = \"Timeout while waiting for retry_fn() to return True\",\n-    max_interval_secs: Optional[int] = int(defaults[CONFIG_MAX_WAIT_INTERVAL_KEY]),\n+    max_interval_secs: int = int(defaults[CONFIG_MAX_WAIT_INTERVAL_KEY]),\n ) -> Any:\n",
        "source_code_with_indent": "    retry_fn: Callable[[], Tuple[Any, bool]],\n    timeout_secs: Optional[int] = None,\n    timeout_msg: Optional[str] = \"Timeout while waiting for retry_fn() to return True\",\n    max_interval_secs: Optional[int] = int(defaults[CONFIG_MAX_WAIT_INTERVAL_KEY]),\n) -> Any:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    retry_fn: Callable[[], Tuple[Any, bool]],\n    timeout_secs: int = 0,\n    timeout_msg: Optional[str] = \"Timeout while waiting for retry_fn() to return True\",\n    max_interval_secs: int = int(defaults[CONFIG_MAX_WAIT_INTERVAL_KEY]),\n) -> Any:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "feast-dev/feast",
    "commit": "9ea1f52387b5596954df7f64ce2f54678bf4ccff",
    "filename": "sdk/python/feast/wait.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/feast-dev-feast/sdk/python/feast/wait.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "sdk/python/feast/wait.py:47:39 Incompatible parameter type [6]: Expected `Variable[_typeshed.SupportsLessThanT (bound to _typeshed.SupportsLessThan)]` for 2nd positional only parameter to call `min` but got `Optional[int]`.",
    "message": " Expected `Variable[_typeshed.SupportsLessThanT (bound to _typeshed.SupportsLessThan)]` for 2nd positional only parameter to call `min` but got `Optional[int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 47,
    "warning_line": "        wait_secs = min(wait_secs * 2, max_interval_secs, till_timeout_secs)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    retry_fn: Callable[[], Tuple[Any, bool]],\n    timeout_secs: Optional[int] = None,\n    timeout_msg: Optional[str] = \"Timeout while waiting for retry_fn() to return True\",\n    max_interval_secs: Optional[int] = int(defaults[CONFIG_MAX_WAIT_INTERVAL_KEY]),\n) -> Any:\n",
        "source_code_len": 268,
        "target_code": "    retry_fn: Callable[[], Tuple[Any, bool]],\n    timeout_secs: int = 0,\n    timeout_msg: Optional[str] = \"Timeout while waiting for retry_fn() to return True\",\n    max_interval_secs: int = int(defaults[CONFIG_MAX_WAIT_INTERVAL_KEY]),\n) -> Any:\n",
        "target_code_len": 245,
        "diff_format": "@@ -23,5 +23,5 @@\n     retry_fn: Callable[[], Tuple[Any, bool]],\n-    timeout_secs: Optional[int] = None,\n+    timeout_secs: int = 0,\n     timeout_msg: Optional[str] = \"Timeout while waiting for retry_fn() to return True\",\n-    max_interval_secs: Optional[int] = int(defaults[CONFIG_MAX_WAIT_INTERVAL_KEY]),\n+    max_interval_secs: int = int(defaults[CONFIG_MAX_WAIT_INTERVAL_KEY]),\n ) -> Any:\n",
        "source_code_with_indent": "    retry_fn: Callable[[], Tuple[Any, bool]],\n    timeout_secs: Optional[int] = None,\n    timeout_msg: Optional[str] = \"Timeout while waiting for retry_fn() to return True\",\n    max_interval_secs: Optional[int] = int(defaults[CONFIG_MAX_WAIT_INTERVAL_KEY]),\n) -> Any:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    retry_fn: Callable[[], Tuple[Any, bool]],\n    timeout_secs: int = 0,\n    timeout_msg: Optional[str] = \"Timeout while waiting for retry_fn() to return True\",\n    max_interval_secs: int = int(defaults[CONFIG_MAX_WAIT_INTERVAL_KEY]),\n) -> Any:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "feast-dev/feast",
    "commit": "9ea1f52387b5596954df7f64ce2f54678bf4ccff",
    "filename": "sdk/python/feast/wait.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/feast-dev-feast/sdk/python/feast/wait.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "sdk/python/feast/wait.py:53:41 Unsupported operand [58]: `>` is not supported for operand types `float` and `Optional[int]`.",
    "message": " `>` is not supported for operand types `float` and `Optional[int]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 53,
    "warning_line": "    if not is_success and elapsed_secs > timeout_secs:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    retry_fn: Callable[[], Tuple[Any, bool]],\n    timeout_secs: Optional[int] = None,\n    timeout_msg: Optional[str] = \"Timeout while waiting for retry_fn() to return True\",\n    max_interval_secs: Optional[int] = int(defaults[CONFIG_MAX_WAIT_INTERVAL_KEY]),\n) -> Any:\n",
        "source_code_len": 268,
        "target_code": "    retry_fn: Callable[[], Tuple[Any, bool]],\n    timeout_secs: int = 0,\n    timeout_msg: Optional[str] = \"Timeout while waiting for retry_fn() to return True\",\n    max_interval_secs: int = int(defaults[CONFIG_MAX_WAIT_INTERVAL_KEY]),\n) -> Any:\n",
        "target_code_len": 245,
        "diff_format": "@@ -23,5 +23,5 @@\n     retry_fn: Callable[[], Tuple[Any, bool]],\n-    timeout_secs: Optional[int] = None,\n+    timeout_secs: int = 0,\n     timeout_msg: Optional[str] = \"Timeout while waiting for retry_fn() to return True\",\n-    max_interval_secs: Optional[int] = int(defaults[CONFIG_MAX_WAIT_INTERVAL_KEY]),\n+    max_interval_secs: int = int(defaults[CONFIG_MAX_WAIT_INTERVAL_KEY]),\n ) -> Any:\n",
        "source_code_with_indent": "    retry_fn: Callable[[], Tuple[Any, bool]],\n    timeout_secs: Optional[int] = None,\n    timeout_msg: Optional[str] = \"Timeout while waiting for retry_fn() to return True\",\n    max_interval_secs: Optional[int] = int(defaults[CONFIG_MAX_WAIT_INTERVAL_KEY]),\n) -> Any:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    retry_fn: Callable[[], Tuple[Any, bool]],\n    timeout_secs: int = 0,\n    timeout_msg: Optional[str] = \"Timeout while waiting for retry_fn() to return True\",\n    max_interval_secs: int = int(defaults[CONFIG_MAX_WAIT_INTERVAL_KEY]),\n) -> Any:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]