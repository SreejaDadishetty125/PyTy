[
  {
    "project": "asyml/texar-pytorch",
    "commit": "72efe4ef23bbca2c83da5741e03bfd5f24acb0e3",
    "filename": "texar/torch/run/executor.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/asyml-texar-pytorch/texar/torch/run/executor.py",
    "file_hunks_size": 25,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "texar/torch/run/executor.py:957:27 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `IO.write` but got `Optional[str]`.",
    "message": " Expected `str` for 1st positional only parameter to call `IO.write` but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 957,
    "warning_line": "                dest.write(plain_str)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "                # Erase color codes if the destination is not a terminal.\n                dest.write(plain_str)\n            if newline:\n",
        "source_code_len": 136,
        "target_code": "                # Erase color codes if the destination is not a terminal.\n                dest.write(plain_str)  # type: ignore\n            if newline:\n",
        "target_code_len": 152,
        "diff_format": "@@ -956,3 +971,3 @@\n                 # Erase color codes if the destination is not a terminal.\n-                dest.write(plain_str)\n+                dest.write(plain_str)  # type: ignore\n             if newline:\n",
        "source_code_with_indent": "                # Erase color codes if the destination is not a terminal.\n                <DED>dest.write(plain_str)\n            <DED>if newline:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                # Erase color codes if the destination is not a terminal.\n                <DED>dest.write(plain_str)  # type: ignore\n            <DED>if newline:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "asyml/texar-pytorch",
    "commit": "72efe4ef23bbca2c83da5741e03bfd5f24acb0e3",
    "filename": "texar/torch/run/executor.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/asyml-texar-pytorch/texar/torch/run/executor.py",
    "file_hunks_size": 25,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "texar/torch/run/executor.py:1687:36 Incompatible parameter type [6]: Expected `Union[DataBase[typing.Any, typing.Any], Dict[str, DataBase[typing.Any, typing.Any]], typing.Sequence[DataBase[typing.Any, typing.Any]]]` for 1st positional only parameter to call `DataIterator.__init__` but got `Optional[DataBase[typing.Any, typing.Any]]`.",
    "message": " Expected `Union[DataBase[typing.Any, typing.Any], Dict[str, DataBase[typing.Any, typing.Any]], typing.Sequence[DataBase[typing.Any, typing.Any]]]` for 1st positional only parameter to call `DataIterator.__init__` but got `Optional[DataBase[typing.Any, typing.Any]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1687,
    "warning_line": "            iterator = DataIterator(self.valid_data, self.batching_strategy)"
  },
  {
    "project": "asyml/texar-pytorch",
    "commit": "72efe4ef23bbca2c83da5741e03bfd5f24acb0e3",
    "filename": "texar/torch/run/executor.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/asyml-texar-pytorch/texar/torch/run/executor.py",
    "file_hunks_size": 25,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "texar/torch/run/executor.py:1689:36 Incompatible parameter type [6]: Expected `Union[DataBase[typing.Any, typing.Any], Dict[str, DataBase[typing.Any, typing.Any]], typing.Sequence[DataBase[typing.Any, typing.Any]]]` for 1st positional only parameter to call `DataIterator.__init__` but got `Optional[DataBase[typing.Any, typing.Any]]`.",
    "message": " Expected `Union[DataBase[typing.Any, typing.Any], Dict[str, DataBase[typing.Any, typing.Any]], typing.Sequence[DataBase[typing.Any, typing.Any]]]` for 1st positional only parameter to call `DataIterator.__init__` but got `Optional[DataBase[typing.Any, typing.Any]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1689,
    "warning_line": "            iterator = DataIterator(self.valid_data)"
  },
  {
    "project": "asyml/texar-pytorch",
    "commit": "72efe4ef23bbca2c83da5741e03bfd5f24acb0e3",
    "filename": "texar/torch/run/executor.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/asyml-texar-pytorch/texar/torch/run/executor.py",
    "file_hunks_size": 25,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "texar/torch/run/executor.py:1692:43 Incompatible parameter type [6]: Expected `typing.Sized` for 1st positional only parameter to call `len` but got `Optional[DataBase[typing.Any, typing.Any]]`.",
    "message": " Expected `typing.Sized` for 1st positional only parameter to call `len` but got `Optional[DataBase[typing.Any, typing.Any]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1692,
    "warning_line": "            data_size: Optional[int] = len(self.valid_data)"
  },
  {
    "project": "asyml/texar-pytorch",
    "commit": "72efe4ef23bbca2c83da5741e03bfd5f24acb0e3",
    "filename": "texar/torch/run/executor_utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/asyml-texar-pytorch/texar/torch/run/executor_utils.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "texar/torch/run/executor_utils.py:335:20 Incompatible return type [7]: Expected `List[str]` but got `typing.Generator[str, None, None]`.",
    "message": " Expected `List[str]` but got `typing.Generator[str, None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 335,
    "warning_line": "                    yield f\"id {start}\"",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import (\n    Any, Counter as CounterType, Dict, List, NamedTuple, Optional, Tuple, Type,\n    TypeVar, Union, Callable)\n\n",
        "source_code_len": 132,
        "target_code": "from typing import (\n    Any, Callable, Counter as CounterType, Dict, Iterator, List, NamedTuple,\n    Optional, Tuple, Type, TypeVar, Union)\n\n",
        "target_code_len": 142,
        "diff_format": "@@ -4,4 +4,4 @@\n from typing import (\n-    Any, Counter as CounterType, Dict, List, NamedTuple, Optional, Tuple, Type,\n-    TypeVar, Union, Callable)\n+    Any, Callable, Counter as CounterType, Dict, Iterator, List, NamedTuple,\n+    Optional, Tuple, Type, TypeVar, Union)\n \n",
        "source_code_with_indent": "from typing import (\n    Any, Counter as CounterType, Dict, List, NamedTuple, Optional, Tuple, Type,\n    TypeVar, Union, Callable)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import (\n    Any, Callable, Counter as CounterType, Dict, Iterator, List, NamedTuple,\n    Optional, Tuple, Type, TypeVar, Union)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _convert_id(keys: List[str]) -> List[str]:\n    start = end = None\n",
        "source_code_len": 71,
        "target_code": "\ndef _convert_id(keys: List[str]) -> Iterator[str]:\n    start = end = None\n",
        "target_code_len": 75,
        "diff_format": "@@ -326,3 +327,3 @@\n \n-def _convert_id(keys: List[str]) -> List[str]:\n+def _convert_id(keys: List[str]) -> Iterator[str]:\n     start = end = None\n",
        "source_code_with_indent": "\n<DED>def _convert_id(keys: List[str]) -> List[str]:\n    <IND>start = end = None\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def _convert_id(keys: List[str]) -> Iterator[str]:\n    <IND>start = end = None\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "asyml/texar-pytorch",
    "commit": "72efe4ef23bbca2c83da5741e03bfd5f24acb0e3",
    "filename": "texar/torch/run/executor_utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/asyml-texar-pytorch/texar/torch/run/executor_utils.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "texar/torch/run/executor_utils.py:337:20 Incompatible return type [7]: Expected `List[str]` but got `typing.Generator[str, None, None]`.",
    "message": " Expected `List[str]` but got `typing.Generator[str, None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 337,
    "warning_line": "                    yield f\"ids {start}-{end}\"",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import (\n    Any, Counter as CounterType, Dict, List, NamedTuple, Optional, Tuple, Type,\n    TypeVar, Union, Callable)\n\n",
        "source_code_len": 132,
        "target_code": "from typing import (\n    Any, Callable, Counter as CounterType, Dict, Iterator, List, NamedTuple,\n    Optional, Tuple, Type, TypeVar, Union)\n\n",
        "target_code_len": 142,
        "diff_format": "@@ -4,4 +4,4 @@\n from typing import (\n-    Any, Counter as CounterType, Dict, List, NamedTuple, Optional, Tuple, Type,\n-    TypeVar, Union, Callable)\n+    Any, Callable, Counter as CounterType, Dict, Iterator, List, NamedTuple,\n+    Optional, Tuple, Type, TypeVar, Union)\n \n",
        "source_code_with_indent": "from typing import (\n    Any, Counter as CounterType, Dict, List, NamedTuple, Optional, Tuple, Type,\n    TypeVar, Union, Callable)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import (\n    Any, Callable, Counter as CounterType, Dict, Iterator, List, NamedTuple,\n    Optional, Tuple, Type, TypeVar, Union)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _convert_id(keys: List[str]) -> List[str]:\n    start = end = None\n",
        "source_code_len": 71,
        "target_code": "\ndef _convert_id(keys: List[str]) -> Iterator[str]:\n    start = end = None\n",
        "target_code_len": 75,
        "diff_format": "@@ -326,3 +327,3 @@\n \n-def _convert_id(keys: List[str]) -> List[str]:\n+def _convert_id(keys: List[str]) -> Iterator[str]:\n     start = end = None\n",
        "source_code_with_indent": "\n<DED>def _convert_id(keys: List[str]) -> List[str]:\n    <IND>start = end = None\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def _convert_id(keys: List[str]) -> Iterator[str]:\n    <IND>start = end = None\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "asyml/texar-pytorch",
    "commit": "72efe4ef23bbca2c83da5741e03bfd5f24acb0e3",
    "filename": "texar/torch/run/executor_utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/asyml-texar-pytorch/texar/torch/run/executor_utils.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "texar/torch/run/executor_utils.py:342:16 Incompatible return type [7]: Expected `List[str]` but got `typing.Generator[str, None, None]`.",
    "message": " Expected `List[str]` but got `typing.Generator[str, None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 342,
    "warning_line": "                yield key",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import (\n    Any, Counter as CounterType, Dict, List, NamedTuple, Optional, Tuple, Type,\n    TypeVar, Union, Callable)\n\n",
        "source_code_len": 132,
        "target_code": "from typing import (\n    Any, Callable, Counter as CounterType, Dict, Iterator, List, NamedTuple,\n    Optional, Tuple, Type, TypeVar, Union)\n\n",
        "target_code_len": 142,
        "diff_format": "@@ -4,4 +4,4 @@\n from typing import (\n-    Any, Counter as CounterType, Dict, List, NamedTuple, Optional, Tuple, Type,\n-    TypeVar, Union, Callable)\n+    Any, Callable, Counter as CounterType, Dict, Iterator, List, NamedTuple,\n+    Optional, Tuple, Type, TypeVar, Union)\n \n",
        "source_code_with_indent": "from typing import (\n    Any, Counter as CounterType, Dict, List, NamedTuple, Optional, Tuple, Type,\n    TypeVar, Union, Callable)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import (\n    Any, Callable, Counter as CounterType, Dict, Iterator, List, NamedTuple,\n    Optional, Tuple, Type, TypeVar, Union)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _convert_id(keys: List[str]) -> List[str]:\n    start = end = None\n",
        "source_code_len": 71,
        "target_code": "\ndef _convert_id(keys: List[str]) -> Iterator[str]:\n    start = end = None\n",
        "target_code_len": 75,
        "diff_format": "@@ -326,3 +327,3 @@\n \n-def _convert_id(keys: List[str]) -> List[str]:\n+def _convert_id(keys: List[str]) -> Iterator[str]:\n     start = end = None\n",
        "source_code_with_indent": "\n<DED>def _convert_id(keys: List[str]) -> List[str]:\n    <IND>start = end = None\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def _convert_id(keys: List[str]) -> Iterator[str]:\n    <IND>start = end = None\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "asyml/texar-pytorch",
    "commit": "72efe4ef23bbca2c83da5741e03bfd5f24acb0e3",
    "filename": "texar/torch/run/executor_utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/asyml-texar-pytorch/texar/torch/run/executor_utils.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "texar/torch/run/executor_utils.py:345:12 Incompatible return type [7]: Expected `List[str]` but got `typing.Generator[str, None, None]`.",
    "message": " Expected `List[str]` but got `typing.Generator[str, None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 345,
    "warning_line": "            yield f\"id {start}\"",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import (\n    Any, Counter as CounterType, Dict, List, NamedTuple, Optional, Tuple, Type,\n    TypeVar, Union, Callable)\n\n",
        "source_code_len": 132,
        "target_code": "from typing import (\n    Any, Callable, Counter as CounterType, Dict, Iterator, List, NamedTuple,\n    Optional, Tuple, Type, TypeVar, Union)\n\n",
        "target_code_len": 142,
        "diff_format": "@@ -4,4 +4,4 @@\n from typing import (\n-    Any, Counter as CounterType, Dict, List, NamedTuple, Optional, Tuple, Type,\n-    TypeVar, Union, Callable)\n+    Any, Callable, Counter as CounterType, Dict, Iterator, List, NamedTuple,\n+    Optional, Tuple, Type, TypeVar, Union)\n \n",
        "source_code_with_indent": "from typing import (\n    Any, Counter as CounterType, Dict, List, NamedTuple, Optional, Tuple, Type,\n    TypeVar, Union, Callable)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import (\n    Any, Callable, Counter as CounterType, Dict, Iterator, List, NamedTuple,\n    Optional, Tuple, Type, TypeVar, Union)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _convert_id(keys: List[str]) -> List[str]:\n    start = end = None\n",
        "source_code_len": 71,
        "target_code": "\ndef _convert_id(keys: List[str]) -> Iterator[str]:\n    start = end = None\n",
        "target_code_len": 75,
        "diff_format": "@@ -326,3 +327,3 @@\n \n-def _convert_id(keys: List[str]) -> List[str]:\n+def _convert_id(keys: List[str]) -> Iterator[str]:\n     start = end = None\n",
        "source_code_with_indent": "\n<DED>def _convert_id(keys: List[str]) -> List[str]:\n    <IND>start = end = None\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def _convert_id(keys: List[str]) -> Iterator[str]:\n    <IND>start = end = None\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "asyml/texar-pytorch",
    "commit": "72efe4ef23bbca2c83da5741e03bfd5f24acb0e3",
    "filename": "texar/torch/run/executor_utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/asyml-texar-pytorch/texar/torch/run/executor_utils.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "texar/torch/run/executor_utils.py:347:12 Incompatible return type [7]: Expected `List[str]` but got `typing.Generator[str, None, None]`.",
    "message": " Expected `List[str]` but got `typing.Generator[str, None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 347,
    "warning_line": "            yield f\"ids {start}-{end}\"",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import (\n    Any, Counter as CounterType, Dict, List, NamedTuple, Optional, Tuple, Type,\n    TypeVar, Union, Callable)\n\n",
        "source_code_len": 132,
        "target_code": "from typing import (\n    Any, Callable, Counter as CounterType, Dict, Iterator, List, NamedTuple,\n    Optional, Tuple, Type, TypeVar, Union)\n\n",
        "target_code_len": 142,
        "diff_format": "@@ -4,4 +4,4 @@\n from typing import (\n-    Any, Counter as CounterType, Dict, List, NamedTuple, Optional, Tuple, Type,\n-    TypeVar, Union, Callable)\n+    Any, Callable, Counter as CounterType, Dict, Iterator, List, NamedTuple,\n+    Optional, Tuple, Type, TypeVar, Union)\n \n",
        "source_code_with_indent": "from typing import (\n    Any, Counter as CounterType, Dict, List, NamedTuple, Optional, Tuple, Type,\n    TypeVar, Union, Callable)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import (\n    Any, Callable, Counter as CounterType, Dict, Iterator, List, NamedTuple,\n    Optional, Tuple, Type, TypeVar, Union)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _convert_id(keys: List[str]) -> List[str]:\n    start = end = None\n",
        "source_code_len": 71,
        "target_code": "\ndef _convert_id(keys: List[str]) -> Iterator[str]:\n    start = end = None\n",
        "target_code_len": 75,
        "diff_format": "@@ -326,3 +327,3 @@\n \n-def _convert_id(keys: List[str]) -> List[str]:\n+def _convert_id(keys: List[str]) -> Iterator[str]:\n     start = end = None\n",
        "source_code_with_indent": "\n<DED>def _convert_id(keys: List[str]) -> List[str]:\n    <IND>start = end = None\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def _convert_id(keys: List[str]) -> Iterator[str]:\n    <IND>start = end = None\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "asyml/texar-pytorch",
    "commit": "72efe4ef23bbca2c83da5741e03bfd5f24acb0e3",
    "filename": "texar/torch/run/metric/base_metric.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/asyml-texar-pytorch/texar/torch/run/metric/base_metric.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "texar/torch/run/metric/base_metric.py:41:8 Incompatible return type [7]: Expected `str` but got `Optional[str]`.",
    "message": " Expected `str` but got `Optional[str]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 41,
    "warning_line": "        return self._pred_name",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @property\n    def pred_name(self) -> str:\n        return self._pred_name\n",
        "source_code_len": 77,
        "target_code": "    @property\n    def pred_name(self) -> Optional[str]:\n        return self._pred_name\n",
        "target_code_len": 87,
        "diff_format": "@@ -39,3 +39,3 @@\n     @property\n-    def pred_name(self) -> str:\n+    def pred_name(self) -> Optional[str]:\n         return self._pred_name\n",
        "source_code_with_indent": "    <DED>@property\n    def pred_name(self) -> str:\n        <IND>return self._pred_name\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@property\n    def pred_name(self) -> Optional[str]:\n        <IND>return self._pred_name\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "asyml/texar-pytorch",
    "commit": "72efe4ef23bbca2c83da5741e03bfd5f24acb0e3",
    "filename": "texar/torch/run/metric/generation.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/asyml-texar-pytorch/texar/torch/run/metric/generation.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "texar/torch/run/metric/generation.py:69:4 Inconsistent override [14]: `texar.torch.run.metric.generation.BLEU.add` overrides method defined in `StreamingMetric` inconsistently. Parameter of type `List[str]` is not a supertype of the overridden parameter `List[typing.Union[List[str], str]]`.",
    "message": " `texar.torch.run.metric.generation.BLEU.add` overrides method defined in `StreamingMetric` inconsistently. Parameter of type `List[str]` is not a supertype of the overridden parameter `List[typing.Union[List[str], str]]`.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 69,
    "warning_line": "    def add(self, predicted: List[str], labels: List[str]) -> None:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def add(self, predicted: List[str], labels: List[str]) -> None:\n        for (reference, hypothesis) in zip(labels, predicted):\n",
        "source_code_len": 132,
        "target_code": "\n    def add(self, predicted: List[MaybeList[str]],\n            labels: List[MaybeList[str]]) -> None:\n        for (reference, hypothesis) in zip(labels, predicted):\n",
        "target_code_len": 166,
        "diff_format": "@@ -68,3 +68,4 @@\n \n-    def add(self, predicted: List[str], labels: List[str]) -> None:\n+    def add(self, predicted: List[MaybeList[str]],\n+            labels: List[MaybeList[str]]) -> None:\n         for (reference, hypothesis) in zip(labels, predicted):\n",
        "source_code_with_indent": "\n    <DED>def add(self, predicted: List[str], labels: List[str]) -> None:\n        <IND>for (reference, hypothesis) in zip(labels, predicted):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def add(self, predicted: List[MaybeList[str]],\n            labels: List[MaybeList[str]]) -> None:\n        <IND>for (reference, hypothesis) in zip(labels, predicted):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]