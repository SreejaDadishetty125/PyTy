[
  {
    "project": "trezor/trezor-firmware",
    "commit": "1a0b5909142b0b7827891428c3db31864a064492",
    "filename": "python/src/trezorlib/_internal/firmware_headers.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/trezor-trezor-firmware/python/src/trezorlib/_internal/firmware_headers.py",
    "file_hunks_size": 12,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/src/trezorlib/_internal/firmware_headers.py:68:8 Incompatible return type [7]: Expected `Optional[bool]` but got `Status`.",
    "message": " Expected `Optional[bool]` but got `Status`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 68,
    "warning_line": "        return Status.MISSING",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    header: c.Container, m: int, pubkeys: List[bytes], is_devel: bool\n) -> Optional[bool]:\n    if all_zero(header.signature) and header.sigmask == 0:\n",
        "source_code_len": 150,
        "target_code": "    header: c.Container, m: int, pubkeys: List[bytes], is_devel: bool\n) -> Status:\n    if all_zero(header.signature) and header.sigmask == 0:\n",
        "target_code_len": 142,
        "diff_format": "@@ -65,3 +65,3 @@\n     header: c.Container, m: int, pubkeys: List[bytes], is_devel: bool\n-) -> Optional[bool]:\n+) -> Status:\n     if all_zero(header.signature) and header.sigmask == 0:\n",
        "source_code_with_indent": "    header: c.Container, m: int, pubkeys: List[bytes], is_devel: bool\n) -> Optional[bool]:\n    <IND>if all_zero(header.signature) and header.sigmask == 0:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    header: c.Container, m: int, pubkeys: List[bytes], is_devel: bool\n) -> Status:\n    <IND>if all_zero(header.signature) and header.sigmask == 0:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "trezor/trezor-firmware",
    "commit": "1a0b5909142b0b7827891428c3db31864a064492",
    "filename": "python/src/trezorlib/_internal/firmware_headers.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/trezor-trezor-firmware/python/src/trezorlib/_internal/firmware_headers.py",
    "file_hunks_size": 12,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/src/trezorlib/_internal/firmware_headers.py:72:8 Incompatible return type [7]: Expected `Optional[bool]` but got `typing.Union[Status, Status]`.",
    "message": " Expected `Optional[bool]` but got `typing.Union[Status, Status]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 72,
    "warning_line": "        return Status.VALID if not is_devel else Status.DEVEL",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    header: c.Container, m: int, pubkeys: List[bytes], is_devel: bool\n) -> Optional[bool]:\n    if all_zero(header.signature) and header.sigmask == 0:\n",
        "source_code_len": 150,
        "target_code": "    header: c.Container, m: int, pubkeys: List[bytes], is_devel: bool\n) -> Status:\n    if all_zero(header.signature) and header.sigmask == 0:\n",
        "target_code_len": 142,
        "diff_format": "@@ -65,3 +65,3 @@\n     header: c.Container, m: int, pubkeys: List[bytes], is_devel: bool\n-) -> Optional[bool]:\n+) -> Status:\n     if all_zero(header.signature) and header.sigmask == 0:\n",
        "source_code_with_indent": "    header: c.Container, m: int, pubkeys: List[bytes], is_devel: bool\n) -> Optional[bool]:\n    <IND>if all_zero(header.signature) and header.sigmask == 0:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    header: c.Container, m: int, pubkeys: List[bytes], is_devel: bool\n) -> Status:\n    <IND>if all_zero(header.signature) and header.sigmask == 0:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "trezor/trezor-firmware",
    "commit": "1a0b5909142b0b7827891428c3db31864a064492",
    "filename": "python/src/trezorlib/_internal/firmware_headers.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/trezor-trezor-firmware/python/src/trezorlib/_internal/firmware_headers.py",
    "file_hunks_size": 12,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/src/trezorlib/_internal/firmware_headers.py:74:8 Incompatible return type [7]: Expected `Optional[bool]` but got `Status`.",
    "message": " Expected `Optional[bool]` but got `Status`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 74,
    "warning_line": "        return Status.INVALID",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    header: c.Container, m: int, pubkeys: List[bytes], is_devel: bool\n) -> Optional[bool]:\n    if all_zero(header.signature) and header.sigmask == 0:\n",
        "source_code_len": 150,
        "target_code": "    header: c.Container, m: int, pubkeys: List[bytes], is_devel: bool\n) -> Status:\n    if all_zero(header.signature) and header.sigmask == 0:\n",
        "target_code_len": 142,
        "diff_format": "@@ -65,3 +65,3 @@\n     header: c.Container, m: int, pubkeys: List[bytes], is_devel: bool\n-) -> Optional[bool]:\n+) -> Status:\n     if all_zero(header.signature) and header.sigmask == 0:\n",
        "source_code_with_indent": "    header: c.Container, m: int, pubkeys: List[bytes], is_devel: bool\n) -> Optional[bool]:\n    <IND>if all_zero(header.signature) and header.sigmask == 0:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    header: c.Container, m: int, pubkeys: List[bytes], is_devel: bool\n) -> Status:\n    <IND>if all_zero(header.signature) and header.sigmask == 0:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "trezor/trezor-firmware",
    "commit": "1a0b5909142b0b7827891428c3db31864a064492",
    "filename": "python/src/trezorlib/_internal/firmware_headers.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/trezor-trezor-firmware/python/src/trezorlib/_internal/firmware_headers.py",
    "file_hunks_size": 12,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/src/trezorlib/_internal/firmware_headers.py:200:8 Incompatible return type [7]: Expected `Status` but got `Optional[bool]`.",
    "message": " Expected `Status` but got `Optional[bool]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 200,
    "warning_line": "        return _check_signature_any(",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    header: c.Container, m: int, pubkeys: List[bytes], is_devel: bool\n) -> Optional[bool]:\n    if all_zero(header.signature) and header.sigmask == 0:\n",
        "source_code_len": 150,
        "target_code": "    header: c.Container, m: int, pubkeys: List[bytes], is_devel: bool\n) -> Status:\n    if all_zero(header.signature) and header.sigmask == 0:\n",
        "target_code_len": 142,
        "diff_format": "@@ -65,3 +65,3 @@\n     header: c.Container, m: int, pubkeys: List[bytes], is_devel: bool\n-) -> Optional[bool]:\n+) -> Status:\n     if all_zero(header.signature) and header.sigmask == 0:\n",
        "source_code_with_indent": "    header: c.Container, m: int, pubkeys: List[bytes], is_devel: bool\n) -> Optional[bool]:\n    <IND>if all_zero(header.signature) and header.sigmask == 0:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    header: c.Container, m: int, pubkeys: List[bytes], is_devel: bool\n) -> Status:\n    <IND>if all_zero(header.signature) and header.sigmask == 0:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "trezor/trezor-firmware",
    "commit": "1a0b5909142b0b7827891428c3db31864a064492",
    "filename": "python/src/trezorlib/_internal/firmware_headers.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/trezor-trezor-firmware/python/src/trezorlib/_internal/firmware_headers.py",
    "file_hunks_size": 12,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/src/trezorlib/_internal/firmware_headers.py:309:8 Incompatible return type [7]: Expected `Status` but got `Optional[bool]`.",
    "message": " Expected `Status` but got `Optional[bool]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 309,
    "warning_line": "        return _check_signature_any(",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    header: c.Container, m: int, pubkeys: List[bytes], is_devel: bool\n) -> Optional[bool]:\n    if all_zero(header.signature) and header.sigmask == 0:\n",
        "source_code_len": 150,
        "target_code": "    header: c.Container, m: int, pubkeys: List[bytes], is_devel: bool\n) -> Status:\n    if all_zero(header.signature) and header.sigmask == 0:\n",
        "target_code_len": 142,
        "diff_format": "@@ -65,3 +65,3 @@\n     header: c.Container, m: int, pubkeys: List[bytes], is_devel: bool\n-) -> Optional[bool]:\n+) -> Status:\n     if all_zero(header.signature) and header.sigmask == 0:\n",
        "source_code_with_indent": "    header: c.Container, m: int, pubkeys: List[bytes], is_devel: bool\n) -> Optional[bool]:\n    <IND>if all_zero(header.signature) and header.sigmask == 0:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    header: c.Container, m: int, pubkeys: List[bytes], is_devel: bool\n) -> Status:\n    <IND>if all_zero(header.signature) and header.sigmask == 0:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "trezor/trezor-firmware",
    "commit": "1a0b5909142b0b7827891428c3db31864a064492",
    "filename": "python/src/trezorlib/_internal/firmware_headers.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/trezor-trezor-firmware/python/src/trezorlib/_internal/firmware_headers.py",
    "file_hunks_size": 12,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/src/trezorlib/_internal/firmware_headers.py:345:8 Incompatible return type [7]: Expected `Status` but got `Optional[bool]`.",
    "message": " Expected `Status` but got `Optional[bool]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 345,
    "warning_line": "        return _check_signature_any(",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    header: c.Container, m: int, pubkeys: List[bytes], is_devel: bool\n) -> Optional[bool]:\n    if all_zero(header.signature) and header.sigmask == 0:\n",
        "source_code_len": 150,
        "target_code": "    header: c.Container, m: int, pubkeys: List[bytes], is_devel: bool\n) -> Status:\n    if all_zero(header.signature) and header.sigmask == 0:\n",
        "target_code_len": 142,
        "diff_format": "@@ -65,3 +65,3 @@\n     header: c.Container, m: int, pubkeys: List[bytes], is_devel: bool\n-) -> Optional[bool]:\n+) -> Status:\n     if all_zero(header.signature) and header.sigmask == 0:\n",
        "source_code_with_indent": "    header: c.Container, m: int, pubkeys: List[bytes], is_devel: bool\n) -> Optional[bool]:\n    <IND>if all_zero(header.signature) and header.sigmask == 0:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    header: c.Container, m: int, pubkeys: List[bytes], is_devel: bool\n) -> Status:\n    <IND>if all_zero(header.signature) and header.sigmask == 0:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "trezor/trezor-firmware",
    "commit": "1a0b5909142b0b7827891428c3db31864a064492",
    "filename": "python/src/trezorlib/btc.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/trezor-trezor-firmware/python/src/trezorlib/btc.py",
    "file_hunks_size": 17,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/src/trezorlib/btc.py:200:4 Incompatible variable type [9]: details is declared to have type `messages.SignTx` but is used as type `None`.",
    "message": " details is declared to have type `messages.SignTx` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 200,
    "warning_line": "    details: messages.SignTx = None,"
  },
  {
    "project": "trezor/trezor-firmware",
    "commit": "1a0b5909142b0b7827891428c3db31864a064492",
    "filename": "python/src/trezorlib/btc.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/trezor-trezor-firmware/python/src/trezorlib/btc.py",
    "file_hunks_size": 17,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/src/trezorlib/btc.py:201:4 Incompatible variable type [9]: prev_txes is declared to have type `Dict[bytes, messages.TransactionType]` but is used as type `None`.",
    "message": " prev_txes is declared to have type `Dict[bytes, messages.TransactionType]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 201,
    "warning_line": "    prev_txes: Dict[bytes, messages.TransactionType] = None,"
  },
  {
    "project": "trezor/trezor-firmware",
    "commit": "1a0b5909142b0b7827891428c3db31864a064492",
    "filename": "python/src/trezorlib/btc.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/trezor-trezor-firmware/python/src/trezorlib/btc.py",
    "file_hunks_size": 17,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/src/trezorlib/btc.py:264:8 Incompatible parameter type [6]: Expected `typing.Optional[typing.List[messages.TxInputType]]` for 1st parameter `inputs` to call `messages.TransactionType.__init__` but got `Sequence[messages.TxInputType]`.",
    "message": " Expected `typing.Optional[typing.List[messages.TxInputType]]` for 1st parameter `inputs` to call `messages.TransactionType.__init__` but got `Sequence[messages.TxInputType]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 264,
    "warning_line": "        inputs=inputs,"
  },
  {
    "project": "trezor/trezor-firmware",
    "commit": "1a0b5909142b0b7827891428c3db31864a064492",
    "filename": "python/src/trezorlib/btc.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/trezor-trezor-firmware/python/src/trezorlib/btc.py",
    "file_hunks_size": 17,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/src/trezorlib/btc.py:265:8 Incompatible parameter type [6]: Expected `typing.Optional[typing.List[messages.TxOutputType]]` for 2nd parameter `outputs` to call `messages.TransactionType.__init__` but got `Sequence[messages.TxOutputType]`.",
    "message": " Expected `typing.Optional[typing.List[messages.TxOutputType]]` for 2nd parameter `outputs` to call `messages.TransactionType.__init__` but got `Sequence[messages.TxOutputType]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 265,
    "warning_line": "        outputs=outputs,"
  },
  {
    "project": "trezor/trezor-firmware",
    "commit": "1a0b5909142b0b7827891428c3db31864a064492",
    "filename": "python/src/trezorlib/btc.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/trezor-trezor-firmware/python/src/trezorlib/btc.py",
    "file_hunks_size": 17,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/src/trezorlib/btc.py:331:4 Incompatible return type [7]: Expected `Tuple[Sequence[bytes], bytes]` but got `Tuple[typing.List[None], bytes]`.",
    "message": " Expected `Tuple[Sequence[bytes], bytes]` but got `Tuple[typing.List[None], bytes]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 331,
    "warning_line": "    return signatures, serialized_tx"
  },
  {
    "project": "trezor/trezor-firmware",
    "commit": "1a0b5909142b0b7827891428c3db31864a064492",
    "filename": "python/src/trezorlib/cardano.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/trezor-trezor-firmware/python/src/trezorlib/cardano.py",
    "file_hunks_size": 38,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/src/trezorlib/cardano.py:95:4 Incompatible variable type [9]: address_n_staking is declared to have type `List[int]` but is used as type `None`.",
    "message": " address_n_staking is declared to have type `List[int]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 95,
    "warning_line": "    address_n_staking: List[int] = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    address_n: List[int],\n    address_n_staking: List[int] = None,\n    staking_key_hash: bytes = None,\n    block_index: int = None,\n    tx_index: int = None,\n    certificate_index: int = None,\n    script_payment_hash: bytes = None,\n    script_staking_hash: bytes = None,\n) -> messages.CardanoAddressParametersType:\n",
        "source_code_len": 315,
        "target_code": "    address_n: List[int],\n    address_n_staking: Optional[List[int]] = None,\n    staking_key_hash: Optional[bytes] = None,\n    block_index: Optional[int] = None,\n    tx_index: Optional[int] = None,\n    certificate_index: Optional[int] = None,\n    script_payment_hash: Optional[bytes] = None,\n    script_staking_hash: Optional[bytes] = None,\n) -> messages.CardanoAddressParametersType:\n",
        "target_code_len": 385,
        "diff_format": "@@ -94,9 +109,9 @@\n     address_n: List[int],\n-    address_n_staking: List[int] = None,\n-    staking_key_hash: bytes = None,\n-    block_index: int = None,\n-    tx_index: int = None,\n-    certificate_index: int = None,\n-    script_payment_hash: bytes = None,\n-    script_staking_hash: bytes = None,\n+    address_n_staking: Optional[List[int]] = None,\n+    staking_key_hash: Optional[bytes] = None,\n+    block_index: Optional[int] = None,\n+    tx_index: Optional[int] = None,\n+    certificate_index: Optional[int] = None,\n+    script_payment_hash: Optional[bytes] = None,\n+    script_staking_hash: Optional[bytes] = None,\n ) -> messages.CardanoAddressParametersType:\n",
        "source_code_with_indent": "    address_n: List[int],\n    address_n_staking: List[int] = None,\n    staking_key_hash: bytes = None,\n    block_index: int = None,\n    tx_index: int = None,\n    certificate_index: int = None,\n    script_payment_hash: bytes = None,\n    script_staking_hash: bytes = None,\n) -> messages.CardanoAddressParametersType:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    address_n: List[int],\n    address_n_staking: Optional[List[int]] = None,\n    staking_key_hash: Optional[bytes] = None,\n    block_index: Optional[int] = None,\n    tx_index: Optional[int] = None,\n    certificate_index: Optional[int] = None,\n    script_payment_hash: Optional[bytes] = None,\n    script_staking_hash: Optional[bytes] = None,\n) -> messages.CardanoAddressParametersType:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def _create_certificate_pointer(\n    block_index: int, tx_index: int, certificate_index: int\n) -> messages.CardanoBlockchainPointerType:\n",
        "source_code_len": 137,
        "target_code": "def _create_certificate_pointer(\n    block_index: Optional[int],\n    tx_index: Optional[int],\n    certificate_index: Optional[int],\n) -> messages.CardanoBlockchainPointerType:\n",
        "target_code_len": 176,
        "diff_format": "@@ -124,3 +139,5 @@\n def _create_certificate_pointer(\n-    block_index: int, tx_index: int, certificate_index: int\n+    block_index: Optional[int],\n+    tx_index: Optional[int],\n+    certificate_index: Optional[int],\n ) -> messages.CardanoBlockchainPointerType:\n",
        "source_code_with_indent": "<DED>def _create_certificate_pointer(\n    block_index: int, tx_index: int, certificate_index: int\n) -> messages.CardanoBlockchainPointerType:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED>def _create_certificate_pointer(\n    block_index: Optional[int],\n    tx_index: Optional[int],\n    certificate_index: Optional[int],\n) -> messages.CardanoBlockchainPointerType:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "trezor/trezor-firmware",
    "commit": "1a0b5909142b0b7827891428c3db31864a064492",
    "filename": "python/src/trezorlib/cardano.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/trezor-trezor-firmware/python/src/trezorlib/cardano.py",
    "file_hunks_size": 38,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/src/trezorlib/cardano.py:96:4 Incompatible variable type [9]: staking_key_hash is declared to have type `bytes` but is used as type `None`.",
    "message": " staking_key_hash is declared to have type `bytes` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 96,
    "warning_line": "    staking_key_hash: bytes = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    address_n: List[int],\n    address_n_staking: List[int] = None,\n    staking_key_hash: bytes = None,\n    block_index: int = None,\n    tx_index: int = None,\n    certificate_index: int = None,\n    script_payment_hash: bytes = None,\n    script_staking_hash: bytes = None,\n) -> messages.CardanoAddressParametersType:\n",
        "source_code_len": 315,
        "target_code": "    address_n: List[int],\n    address_n_staking: Optional[List[int]] = None,\n    staking_key_hash: Optional[bytes] = None,\n    block_index: Optional[int] = None,\n    tx_index: Optional[int] = None,\n    certificate_index: Optional[int] = None,\n    script_payment_hash: Optional[bytes] = None,\n    script_staking_hash: Optional[bytes] = None,\n) -> messages.CardanoAddressParametersType:\n",
        "target_code_len": 385,
        "diff_format": "@@ -94,9 +109,9 @@\n     address_n: List[int],\n-    address_n_staking: List[int] = None,\n-    staking_key_hash: bytes = None,\n-    block_index: int = None,\n-    tx_index: int = None,\n-    certificate_index: int = None,\n-    script_payment_hash: bytes = None,\n-    script_staking_hash: bytes = None,\n+    address_n_staking: Optional[List[int]] = None,\n+    staking_key_hash: Optional[bytes] = None,\n+    block_index: Optional[int] = None,\n+    tx_index: Optional[int] = None,\n+    certificate_index: Optional[int] = None,\n+    script_payment_hash: Optional[bytes] = None,\n+    script_staking_hash: Optional[bytes] = None,\n ) -> messages.CardanoAddressParametersType:\n",
        "source_code_with_indent": "    address_n: List[int],\n    address_n_staking: List[int] = None,\n    staking_key_hash: bytes = None,\n    block_index: int = None,\n    tx_index: int = None,\n    certificate_index: int = None,\n    script_payment_hash: bytes = None,\n    script_staking_hash: bytes = None,\n) -> messages.CardanoAddressParametersType:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    address_n: List[int],\n    address_n_staking: Optional[List[int]] = None,\n    staking_key_hash: Optional[bytes] = None,\n    block_index: Optional[int] = None,\n    tx_index: Optional[int] = None,\n    certificate_index: Optional[int] = None,\n    script_payment_hash: Optional[bytes] = None,\n    script_staking_hash: Optional[bytes] = None,\n) -> messages.CardanoAddressParametersType:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def _create_certificate_pointer(\n    block_index: int, tx_index: int, certificate_index: int\n) -> messages.CardanoBlockchainPointerType:\n",
        "source_code_len": 137,
        "target_code": "def _create_certificate_pointer(\n    block_index: Optional[int],\n    tx_index: Optional[int],\n    certificate_index: Optional[int],\n) -> messages.CardanoBlockchainPointerType:\n",
        "target_code_len": 176,
        "diff_format": "@@ -124,3 +139,5 @@\n def _create_certificate_pointer(\n-    block_index: int, tx_index: int, certificate_index: int\n+    block_index: Optional[int],\n+    tx_index: Optional[int],\n+    certificate_index: Optional[int],\n ) -> messages.CardanoBlockchainPointerType:\n",
        "source_code_with_indent": "<DED>def _create_certificate_pointer(\n    block_index: int, tx_index: int, certificate_index: int\n) -> messages.CardanoBlockchainPointerType:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED>def _create_certificate_pointer(\n    block_index: Optional[int],\n    tx_index: Optional[int],\n    certificate_index: Optional[int],\n) -> messages.CardanoBlockchainPointerType:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "trezor/trezor-firmware",
    "commit": "1a0b5909142b0b7827891428c3db31864a064492",
    "filename": "python/src/trezorlib/cardano.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/trezor-trezor-firmware/python/src/trezorlib/cardano.py",
    "file_hunks_size": 38,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/src/trezorlib/cardano.py:97:4 Incompatible variable type [9]: block_index is declared to have type `int` but is used as type `None`.",
    "message": " block_index is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 97,
    "warning_line": "    block_index: int = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    address_n: List[int],\n    address_n_staking: List[int] = None,\n    staking_key_hash: bytes = None,\n    block_index: int = None,\n    tx_index: int = None,\n    certificate_index: int = None,\n    script_payment_hash: bytes = None,\n    script_staking_hash: bytes = None,\n) -> messages.CardanoAddressParametersType:\n",
        "source_code_len": 315,
        "target_code": "    address_n: List[int],\n    address_n_staking: Optional[List[int]] = None,\n    staking_key_hash: Optional[bytes] = None,\n    block_index: Optional[int] = None,\n    tx_index: Optional[int] = None,\n    certificate_index: Optional[int] = None,\n    script_payment_hash: Optional[bytes] = None,\n    script_staking_hash: Optional[bytes] = None,\n) -> messages.CardanoAddressParametersType:\n",
        "target_code_len": 385,
        "diff_format": "@@ -94,9 +109,9 @@\n     address_n: List[int],\n-    address_n_staking: List[int] = None,\n-    staking_key_hash: bytes = None,\n-    block_index: int = None,\n-    tx_index: int = None,\n-    certificate_index: int = None,\n-    script_payment_hash: bytes = None,\n-    script_staking_hash: bytes = None,\n+    address_n_staking: Optional[List[int]] = None,\n+    staking_key_hash: Optional[bytes] = None,\n+    block_index: Optional[int] = None,\n+    tx_index: Optional[int] = None,\n+    certificate_index: Optional[int] = None,\n+    script_payment_hash: Optional[bytes] = None,\n+    script_staking_hash: Optional[bytes] = None,\n ) -> messages.CardanoAddressParametersType:\n",
        "source_code_with_indent": "    address_n: List[int],\n    address_n_staking: List[int] = None,\n    staking_key_hash: bytes = None,\n    block_index: int = None,\n    tx_index: int = None,\n    certificate_index: int = None,\n    script_payment_hash: bytes = None,\n    script_staking_hash: bytes = None,\n) -> messages.CardanoAddressParametersType:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    address_n: List[int],\n    address_n_staking: Optional[List[int]] = None,\n    staking_key_hash: Optional[bytes] = None,\n    block_index: Optional[int] = None,\n    tx_index: Optional[int] = None,\n    certificate_index: Optional[int] = None,\n    script_payment_hash: Optional[bytes] = None,\n    script_staking_hash: Optional[bytes] = None,\n) -> messages.CardanoAddressParametersType:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def _create_certificate_pointer(\n    block_index: int, tx_index: int, certificate_index: int\n) -> messages.CardanoBlockchainPointerType:\n",
        "source_code_len": 137,
        "target_code": "def _create_certificate_pointer(\n    block_index: Optional[int],\n    tx_index: Optional[int],\n    certificate_index: Optional[int],\n) -> messages.CardanoBlockchainPointerType:\n",
        "target_code_len": 176,
        "diff_format": "@@ -124,3 +139,5 @@\n def _create_certificate_pointer(\n-    block_index: int, tx_index: int, certificate_index: int\n+    block_index: Optional[int],\n+    tx_index: Optional[int],\n+    certificate_index: Optional[int],\n ) -> messages.CardanoBlockchainPointerType:\n",
        "source_code_with_indent": "<DED>def _create_certificate_pointer(\n    block_index: int, tx_index: int, certificate_index: int\n) -> messages.CardanoBlockchainPointerType:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED>def _create_certificate_pointer(\n    block_index: Optional[int],\n    tx_index: Optional[int],\n    certificate_index: Optional[int],\n) -> messages.CardanoBlockchainPointerType:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "trezor/trezor-firmware",
    "commit": "1a0b5909142b0b7827891428c3db31864a064492",
    "filename": "python/src/trezorlib/cardano.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/trezor-trezor-firmware/python/src/trezorlib/cardano.py",
    "file_hunks_size": 38,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/src/trezorlib/cardano.py:98:4 Incompatible variable type [9]: tx_index is declared to have type `int` but is used as type `None`.",
    "message": " tx_index is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 98,
    "warning_line": "    tx_index: int = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    address_n: List[int],\n    address_n_staking: List[int] = None,\n    staking_key_hash: bytes = None,\n    block_index: int = None,\n    tx_index: int = None,\n    certificate_index: int = None,\n    script_payment_hash: bytes = None,\n    script_staking_hash: bytes = None,\n) -> messages.CardanoAddressParametersType:\n",
        "source_code_len": 315,
        "target_code": "    address_n: List[int],\n    address_n_staking: Optional[List[int]] = None,\n    staking_key_hash: Optional[bytes] = None,\n    block_index: Optional[int] = None,\n    tx_index: Optional[int] = None,\n    certificate_index: Optional[int] = None,\n    script_payment_hash: Optional[bytes] = None,\n    script_staking_hash: Optional[bytes] = None,\n) -> messages.CardanoAddressParametersType:\n",
        "target_code_len": 385,
        "diff_format": "@@ -94,9 +109,9 @@\n     address_n: List[int],\n-    address_n_staking: List[int] = None,\n-    staking_key_hash: bytes = None,\n-    block_index: int = None,\n-    tx_index: int = None,\n-    certificate_index: int = None,\n-    script_payment_hash: bytes = None,\n-    script_staking_hash: bytes = None,\n+    address_n_staking: Optional[List[int]] = None,\n+    staking_key_hash: Optional[bytes] = None,\n+    block_index: Optional[int] = None,\n+    tx_index: Optional[int] = None,\n+    certificate_index: Optional[int] = None,\n+    script_payment_hash: Optional[bytes] = None,\n+    script_staking_hash: Optional[bytes] = None,\n ) -> messages.CardanoAddressParametersType:\n",
        "source_code_with_indent": "    address_n: List[int],\n    address_n_staking: List[int] = None,\n    staking_key_hash: bytes = None,\n    block_index: int = None,\n    tx_index: int = None,\n    certificate_index: int = None,\n    script_payment_hash: bytes = None,\n    script_staking_hash: bytes = None,\n) -> messages.CardanoAddressParametersType:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    address_n: List[int],\n    address_n_staking: Optional[List[int]] = None,\n    staking_key_hash: Optional[bytes] = None,\n    block_index: Optional[int] = None,\n    tx_index: Optional[int] = None,\n    certificate_index: Optional[int] = None,\n    script_payment_hash: Optional[bytes] = None,\n    script_staking_hash: Optional[bytes] = None,\n) -> messages.CardanoAddressParametersType:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def _create_certificate_pointer(\n    block_index: int, tx_index: int, certificate_index: int\n) -> messages.CardanoBlockchainPointerType:\n",
        "source_code_len": 137,
        "target_code": "def _create_certificate_pointer(\n    block_index: Optional[int],\n    tx_index: Optional[int],\n    certificate_index: Optional[int],\n) -> messages.CardanoBlockchainPointerType:\n",
        "target_code_len": 176,
        "diff_format": "@@ -124,3 +139,5 @@\n def _create_certificate_pointer(\n-    block_index: int, tx_index: int, certificate_index: int\n+    block_index: Optional[int],\n+    tx_index: Optional[int],\n+    certificate_index: Optional[int],\n ) -> messages.CardanoBlockchainPointerType:\n",
        "source_code_with_indent": "<DED>def _create_certificate_pointer(\n    block_index: int, tx_index: int, certificate_index: int\n) -> messages.CardanoBlockchainPointerType:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED>def _create_certificate_pointer(\n    block_index: Optional[int],\n    tx_index: Optional[int],\n    certificate_index: Optional[int],\n) -> messages.CardanoBlockchainPointerType:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "trezor/trezor-firmware",
    "commit": "1a0b5909142b0b7827891428c3db31864a064492",
    "filename": "python/src/trezorlib/cardano.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/trezor-trezor-firmware/python/src/trezorlib/cardano.py",
    "file_hunks_size": 38,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/src/trezorlib/cardano.py:99:4 Incompatible variable type [9]: certificate_index is declared to have type `int` but is used as type `None`.",
    "message": " certificate_index is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 99,
    "warning_line": "    certificate_index: int = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    address_n: List[int],\n    address_n_staking: List[int] = None,\n    staking_key_hash: bytes = None,\n    block_index: int = None,\n    tx_index: int = None,\n    certificate_index: int = None,\n    script_payment_hash: bytes = None,\n    script_staking_hash: bytes = None,\n) -> messages.CardanoAddressParametersType:\n",
        "source_code_len": 315,
        "target_code": "    address_n: List[int],\n    address_n_staking: Optional[List[int]] = None,\n    staking_key_hash: Optional[bytes] = None,\n    block_index: Optional[int] = None,\n    tx_index: Optional[int] = None,\n    certificate_index: Optional[int] = None,\n    script_payment_hash: Optional[bytes] = None,\n    script_staking_hash: Optional[bytes] = None,\n) -> messages.CardanoAddressParametersType:\n",
        "target_code_len": 385,
        "diff_format": "@@ -94,9 +109,9 @@\n     address_n: List[int],\n-    address_n_staking: List[int] = None,\n-    staking_key_hash: bytes = None,\n-    block_index: int = None,\n-    tx_index: int = None,\n-    certificate_index: int = None,\n-    script_payment_hash: bytes = None,\n-    script_staking_hash: bytes = None,\n+    address_n_staking: Optional[List[int]] = None,\n+    staking_key_hash: Optional[bytes] = None,\n+    block_index: Optional[int] = None,\n+    tx_index: Optional[int] = None,\n+    certificate_index: Optional[int] = None,\n+    script_payment_hash: Optional[bytes] = None,\n+    script_staking_hash: Optional[bytes] = None,\n ) -> messages.CardanoAddressParametersType:\n",
        "source_code_with_indent": "    address_n: List[int],\n    address_n_staking: List[int] = None,\n    staking_key_hash: bytes = None,\n    block_index: int = None,\n    tx_index: int = None,\n    certificate_index: int = None,\n    script_payment_hash: bytes = None,\n    script_staking_hash: bytes = None,\n) -> messages.CardanoAddressParametersType:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    address_n: List[int],\n    address_n_staking: Optional[List[int]] = None,\n    staking_key_hash: Optional[bytes] = None,\n    block_index: Optional[int] = None,\n    tx_index: Optional[int] = None,\n    certificate_index: Optional[int] = None,\n    script_payment_hash: Optional[bytes] = None,\n    script_staking_hash: Optional[bytes] = None,\n) -> messages.CardanoAddressParametersType:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def _create_certificate_pointer(\n    block_index: int, tx_index: int, certificate_index: int\n) -> messages.CardanoBlockchainPointerType:\n",
        "source_code_len": 137,
        "target_code": "def _create_certificate_pointer(\n    block_index: Optional[int],\n    tx_index: Optional[int],\n    certificate_index: Optional[int],\n) -> messages.CardanoBlockchainPointerType:\n",
        "target_code_len": 176,
        "diff_format": "@@ -124,3 +139,5 @@\n def _create_certificate_pointer(\n-    block_index: int, tx_index: int, certificate_index: int\n+    block_index: Optional[int],\n+    tx_index: Optional[int],\n+    certificate_index: Optional[int],\n ) -> messages.CardanoBlockchainPointerType:\n",
        "source_code_with_indent": "<DED>def _create_certificate_pointer(\n    block_index: int, tx_index: int, certificate_index: int\n) -> messages.CardanoBlockchainPointerType:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED>def _create_certificate_pointer(\n    block_index: Optional[int],\n    tx_index: Optional[int],\n    certificate_index: Optional[int],\n) -> messages.CardanoBlockchainPointerType:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "trezor/trezor-firmware",
    "commit": "1a0b5909142b0b7827891428c3db31864a064492",
    "filename": "python/src/trezorlib/cardano.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/trezor-trezor-firmware/python/src/trezorlib/cardano.py",
    "file_hunks_size": 38,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/src/trezorlib/cardano.py:100:4 Incompatible variable type [9]: script_payment_hash is declared to have type `bytes` but is used as type `None`.",
    "message": " script_payment_hash is declared to have type `bytes` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 100,
    "warning_line": "    script_payment_hash: bytes = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    address_n: List[int],\n    address_n_staking: List[int] = None,\n    staking_key_hash: bytes = None,\n    block_index: int = None,\n    tx_index: int = None,\n    certificate_index: int = None,\n    script_payment_hash: bytes = None,\n    script_staking_hash: bytes = None,\n) -> messages.CardanoAddressParametersType:\n",
        "source_code_len": 315,
        "target_code": "    address_n: List[int],\n    address_n_staking: Optional[List[int]] = None,\n    staking_key_hash: Optional[bytes] = None,\n    block_index: Optional[int] = None,\n    tx_index: Optional[int] = None,\n    certificate_index: Optional[int] = None,\n    script_payment_hash: Optional[bytes] = None,\n    script_staking_hash: Optional[bytes] = None,\n) -> messages.CardanoAddressParametersType:\n",
        "target_code_len": 385,
        "diff_format": "@@ -94,9 +109,9 @@\n     address_n: List[int],\n-    address_n_staking: List[int] = None,\n-    staking_key_hash: bytes = None,\n-    block_index: int = None,\n-    tx_index: int = None,\n-    certificate_index: int = None,\n-    script_payment_hash: bytes = None,\n-    script_staking_hash: bytes = None,\n+    address_n_staking: Optional[List[int]] = None,\n+    staking_key_hash: Optional[bytes] = None,\n+    block_index: Optional[int] = None,\n+    tx_index: Optional[int] = None,\n+    certificate_index: Optional[int] = None,\n+    script_payment_hash: Optional[bytes] = None,\n+    script_staking_hash: Optional[bytes] = None,\n ) -> messages.CardanoAddressParametersType:\n",
        "source_code_with_indent": "    address_n: List[int],\n    address_n_staking: List[int] = None,\n    staking_key_hash: bytes = None,\n    block_index: int = None,\n    tx_index: int = None,\n    certificate_index: int = None,\n    script_payment_hash: bytes = None,\n    script_staking_hash: bytes = None,\n) -> messages.CardanoAddressParametersType:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    address_n: List[int],\n    address_n_staking: Optional[List[int]] = None,\n    staking_key_hash: Optional[bytes] = None,\n    block_index: Optional[int] = None,\n    tx_index: Optional[int] = None,\n    certificate_index: Optional[int] = None,\n    script_payment_hash: Optional[bytes] = None,\n    script_staking_hash: Optional[bytes] = None,\n) -> messages.CardanoAddressParametersType:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def _create_certificate_pointer(\n    block_index: int, tx_index: int, certificate_index: int\n) -> messages.CardanoBlockchainPointerType:\n",
        "source_code_len": 137,
        "target_code": "def _create_certificate_pointer(\n    block_index: Optional[int],\n    tx_index: Optional[int],\n    certificate_index: Optional[int],\n) -> messages.CardanoBlockchainPointerType:\n",
        "target_code_len": 176,
        "diff_format": "@@ -124,3 +139,5 @@\n def _create_certificate_pointer(\n-    block_index: int, tx_index: int, certificate_index: int\n+    block_index: Optional[int],\n+    tx_index: Optional[int],\n+    certificate_index: Optional[int],\n ) -> messages.CardanoBlockchainPointerType:\n",
        "source_code_with_indent": "<DED>def _create_certificate_pointer(\n    block_index: int, tx_index: int, certificate_index: int\n) -> messages.CardanoBlockchainPointerType:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED>def _create_certificate_pointer(\n    block_index: Optional[int],\n    tx_index: Optional[int],\n    certificate_index: Optional[int],\n) -> messages.CardanoBlockchainPointerType:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "trezor/trezor-firmware",
    "commit": "1a0b5909142b0b7827891428c3db31864a064492",
    "filename": "python/src/trezorlib/cardano.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/trezor-trezor-firmware/python/src/trezorlib/cardano.py",
    "file_hunks_size": 38,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/src/trezorlib/cardano.py:101:4 Incompatible variable type [9]: script_staking_hash is declared to have type `bytes` but is used as type `None`.",
    "message": " script_staking_hash is declared to have type `bytes` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 101,
    "warning_line": "    script_staking_hash: bytes = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    address_n: List[int],\n    address_n_staking: List[int] = None,\n    staking_key_hash: bytes = None,\n    block_index: int = None,\n    tx_index: int = None,\n    certificate_index: int = None,\n    script_payment_hash: bytes = None,\n    script_staking_hash: bytes = None,\n) -> messages.CardanoAddressParametersType:\n",
        "source_code_len": 315,
        "target_code": "    address_n: List[int],\n    address_n_staking: Optional[List[int]] = None,\n    staking_key_hash: Optional[bytes] = None,\n    block_index: Optional[int] = None,\n    tx_index: Optional[int] = None,\n    certificate_index: Optional[int] = None,\n    script_payment_hash: Optional[bytes] = None,\n    script_staking_hash: Optional[bytes] = None,\n) -> messages.CardanoAddressParametersType:\n",
        "target_code_len": 385,
        "diff_format": "@@ -94,9 +109,9 @@\n     address_n: List[int],\n-    address_n_staking: List[int] = None,\n-    staking_key_hash: bytes = None,\n-    block_index: int = None,\n-    tx_index: int = None,\n-    certificate_index: int = None,\n-    script_payment_hash: bytes = None,\n-    script_staking_hash: bytes = None,\n+    address_n_staking: Optional[List[int]] = None,\n+    staking_key_hash: Optional[bytes] = None,\n+    block_index: Optional[int] = None,\n+    tx_index: Optional[int] = None,\n+    certificate_index: Optional[int] = None,\n+    script_payment_hash: Optional[bytes] = None,\n+    script_staking_hash: Optional[bytes] = None,\n ) -> messages.CardanoAddressParametersType:\n",
        "source_code_with_indent": "    address_n: List[int],\n    address_n_staking: List[int] = None,\n    staking_key_hash: bytes = None,\n    block_index: int = None,\n    tx_index: int = None,\n    certificate_index: int = None,\n    script_payment_hash: bytes = None,\n    script_staking_hash: bytes = None,\n) -> messages.CardanoAddressParametersType:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    address_n: List[int],\n    address_n_staking: Optional[List[int]] = None,\n    staking_key_hash: Optional[bytes] = None,\n    block_index: Optional[int] = None,\n    tx_index: Optional[int] = None,\n    certificate_index: Optional[int] = None,\n    script_payment_hash: Optional[bytes] = None,\n    script_staking_hash: Optional[bytes] = None,\n) -> messages.CardanoAddressParametersType:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def _create_certificate_pointer(\n    block_index: int, tx_index: int, certificate_index: int\n) -> messages.CardanoBlockchainPointerType:\n",
        "source_code_len": 137,
        "target_code": "def _create_certificate_pointer(\n    block_index: Optional[int],\n    tx_index: Optional[int],\n    certificate_index: Optional[int],\n) -> messages.CardanoBlockchainPointerType:\n",
        "target_code_len": 176,
        "diff_format": "@@ -124,3 +139,5 @@\n def _create_certificate_pointer(\n-    block_index: int, tx_index: int, certificate_index: int\n+    block_index: Optional[int],\n+    tx_index: Optional[int],\n+    certificate_index: Optional[int],\n ) -> messages.CardanoBlockchainPointerType:\n",
        "source_code_with_indent": "<DED>def _create_certificate_pointer(\n    block_index: int, tx_index: int, certificate_index: int\n) -> messages.CardanoBlockchainPointerType:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED>def _create_certificate_pointer(\n    block_index: Optional[int],\n    tx_index: Optional[int],\n    certificate_index: Optional[int],\n) -> messages.CardanoBlockchainPointerType:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "trezor/trezor-firmware",
    "commit": "1a0b5909142b0b7827891428c3db31864a064492",
    "filename": "python/src/trezorlib/cardano.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/trezor-trezor-firmware/python/src/trezorlib/cardano.py",
    "file_hunks_size": 38,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/src/trezorlib/cardano.py:265:8 Incompatible parameter type [6]: Expected `messages.CardanoAddressType` for 1st positional only parameter to call `create_address_parameters` but got `int`.",
    "message": " Expected `messages.CardanoAddressType` for 1st positional only parameter to call `create_address_parameters` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 265,
    "warning_line": "        int(address_parameters[\"addressType\"]),",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    return create_address_parameters(\n        int(address_parameters[\"addressType\"]),\n        payment_path,\n",
        "source_code_len": 108,
        "target_code": "    return create_address_parameters(\n        messages.CardanoAddressType(address_parameters[\"addressType\"]),\n        payment_path,\n",
        "target_code_len": 132,
        "diff_format": "@@ -264,3 +282,3 @@\n     return create_address_parameters(\n-        int(address_parameters[\"addressType\"]),\n+        messages.CardanoAddressType(address_parameters[\"addressType\"]),\n         payment_path,\n",
        "source_code_with_indent": "    return create_address_parameters(\n        int(address_parameters[\"addressType\"]),\n        payment_path,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    return create_address_parameters(\n        messages.CardanoAddressType(address_parameters[\"addressType\"]),\n        payment_path,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "trezor/trezor-firmware",
    "commit": "1a0b5909142b0b7827891428c3db31864a064492",
    "filename": "python/src/trezorlib/cardano.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/trezor-trezor-firmware/python/src/trezorlib/cardano.py",
    "file_hunks_size": 38,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/src/trezorlib/cardano.py:268:8 Incompatible parameter type [6]: Expected `bytes` for 4th positional only parameter to call `create_address_parameters` but got `Optional[bytes]`.",
    "message": " Expected `bytes` for 4th positional only parameter to call `create_address_parameters` but got `Optional[bytes]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 268,
    "warning_line": "        staking_key_hash_bytes,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    address_n: List[int],\n    address_n_staking: List[int] = None,\n    staking_key_hash: bytes = None,\n    block_index: int = None,\n    tx_index: int = None,\n    certificate_index: int = None,\n    script_payment_hash: bytes = None,\n    script_staking_hash: bytes = None,\n) -> messages.CardanoAddressParametersType:\n",
        "source_code_len": 315,
        "target_code": "    address_n: List[int],\n    address_n_staking: Optional[List[int]] = None,\n    staking_key_hash: Optional[bytes] = None,\n    block_index: Optional[int] = None,\n    tx_index: Optional[int] = None,\n    certificate_index: Optional[int] = None,\n    script_payment_hash: Optional[bytes] = None,\n    script_staking_hash: Optional[bytes] = None,\n) -> messages.CardanoAddressParametersType:\n",
        "target_code_len": 385,
        "diff_format": "@@ -94,9 +109,9 @@\n     address_n: List[int],\n-    address_n_staking: List[int] = None,\n-    staking_key_hash: bytes = None,\n-    block_index: int = None,\n-    tx_index: int = None,\n-    certificate_index: int = None,\n-    script_payment_hash: bytes = None,\n-    script_staking_hash: bytes = None,\n+    address_n_staking: Optional[List[int]] = None,\n+    staking_key_hash: Optional[bytes] = None,\n+    block_index: Optional[int] = None,\n+    tx_index: Optional[int] = None,\n+    certificate_index: Optional[int] = None,\n+    script_payment_hash: Optional[bytes] = None,\n+    script_staking_hash: Optional[bytes] = None,\n ) -> messages.CardanoAddressParametersType:\n",
        "source_code_with_indent": "    address_n: List[int],\n    address_n_staking: List[int] = None,\n    staking_key_hash: bytes = None,\n    block_index: int = None,\n    tx_index: int = None,\n    certificate_index: int = None,\n    script_payment_hash: bytes = None,\n    script_staking_hash: bytes = None,\n) -> messages.CardanoAddressParametersType:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    address_n: List[int],\n    address_n_staking: Optional[List[int]] = None,\n    staking_key_hash: Optional[bytes] = None,\n    block_index: Optional[int] = None,\n    tx_index: Optional[int] = None,\n    certificate_index: Optional[int] = None,\n    script_payment_hash: Optional[bytes] = None,\n    script_staking_hash: Optional[bytes] = None,\n) -> messages.CardanoAddressParametersType:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def _create_certificate_pointer(\n    block_index: int, tx_index: int, certificate_index: int\n) -> messages.CardanoBlockchainPointerType:\n",
        "source_code_len": 137,
        "target_code": "def _create_certificate_pointer(\n    block_index: Optional[int],\n    tx_index: Optional[int],\n    certificate_index: Optional[int],\n) -> messages.CardanoBlockchainPointerType:\n",
        "target_code_len": 176,
        "diff_format": "@@ -124,3 +139,5 @@\n def _create_certificate_pointer(\n-    block_index: int, tx_index: int, certificate_index: int\n+    block_index: Optional[int],\n+    tx_index: Optional[int],\n+    certificate_index: Optional[int],\n ) -> messages.CardanoBlockchainPointerType:\n",
        "source_code_with_indent": "<DED>def _create_certificate_pointer(\n    block_index: int, tx_index: int, certificate_index: int\n) -> messages.CardanoBlockchainPointerType:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED>def _create_certificate_pointer(\n    block_index: Optional[int],\n    tx_index: Optional[int],\n    certificate_index: Optional[int],\n) -> messages.CardanoBlockchainPointerType:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "trezor/trezor-firmware",
    "commit": "1a0b5909142b0b7827891428c3db31864a064492",
    "filename": "python/src/trezorlib/cardano.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/trezor-trezor-firmware/python/src/trezorlib/cardano.py",
    "file_hunks_size": 38,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/src/trezorlib/cardano.py:272:8 Incompatible parameter type [6]: Expected `bytes` for 8th positional only parameter to call `create_address_parameters` but got `Optional[bytes]`.",
    "message": " Expected `bytes` for 8th positional only parameter to call `create_address_parameters` but got `Optional[bytes]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 272,
    "warning_line": "        script_payment_hash,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    address_n: List[int],\n    address_n_staking: List[int] = None,\n    staking_key_hash: bytes = None,\n    block_index: int = None,\n    tx_index: int = None,\n    certificate_index: int = None,\n    script_payment_hash: bytes = None,\n    script_staking_hash: bytes = None,\n) -> messages.CardanoAddressParametersType:\n",
        "source_code_len": 315,
        "target_code": "    address_n: List[int],\n    address_n_staking: Optional[List[int]] = None,\n    staking_key_hash: Optional[bytes] = None,\n    block_index: Optional[int] = None,\n    tx_index: Optional[int] = None,\n    certificate_index: Optional[int] = None,\n    script_payment_hash: Optional[bytes] = None,\n    script_staking_hash: Optional[bytes] = None,\n) -> messages.CardanoAddressParametersType:\n",
        "target_code_len": 385,
        "diff_format": "@@ -94,9 +109,9 @@\n     address_n: List[int],\n-    address_n_staking: List[int] = None,\n-    staking_key_hash: bytes = None,\n-    block_index: int = None,\n-    tx_index: int = None,\n-    certificate_index: int = None,\n-    script_payment_hash: bytes = None,\n-    script_staking_hash: bytes = None,\n+    address_n_staking: Optional[List[int]] = None,\n+    staking_key_hash: Optional[bytes] = None,\n+    block_index: Optional[int] = None,\n+    tx_index: Optional[int] = None,\n+    certificate_index: Optional[int] = None,\n+    script_payment_hash: Optional[bytes] = None,\n+    script_staking_hash: Optional[bytes] = None,\n ) -> messages.CardanoAddressParametersType:\n",
        "source_code_with_indent": "    address_n: List[int],\n    address_n_staking: List[int] = None,\n    staking_key_hash: bytes = None,\n    block_index: int = None,\n    tx_index: int = None,\n    certificate_index: int = None,\n    script_payment_hash: bytes = None,\n    script_staking_hash: bytes = None,\n) -> messages.CardanoAddressParametersType:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    address_n: List[int],\n    address_n_staking: Optional[List[int]] = None,\n    staking_key_hash: Optional[bytes] = None,\n    block_index: Optional[int] = None,\n    tx_index: Optional[int] = None,\n    certificate_index: Optional[int] = None,\n    script_payment_hash: Optional[bytes] = None,\n    script_staking_hash: Optional[bytes] = None,\n) -> messages.CardanoAddressParametersType:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def _create_certificate_pointer(\n    block_index: int, tx_index: int, certificate_index: int\n) -> messages.CardanoBlockchainPointerType:\n",
        "source_code_len": 137,
        "target_code": "def _create_certificate_pointer(\n    block_index: Optional[int],\n    tx_index: Optional[int],\n    certificate_index: Optional[int],\n) -> messages.CardanoBlockchainPointerType:\n",
        "target_code_len": 176,
        "diff_format": "@@ -124,3 +139,5 @@\n def _create_certificate_pointer(\n-    block_index: int, tx_index: int, certificate_index: int\n+    block_index: Optional[int],\n+    tx_index: Optional[int],\n+    certificate_index: Optional[int],\n ) -> messages.CardanoBlockchainPointerType:\n",
        "source_code_with_indent": "<DED>def _create_certificate_pointer(\n    block_index: int, tx_index: int, certificate_index: int\n) -> messages.CardanoBlockchainPointerType:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED>def _create_certificate_pointer(\n    block_index: Optional[int],\n    tx_index: Optional[int],\n    certificate_index: Optional[int],\n) -> messages.CardanoBlockchainPointerType:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "trezor/trezor-firmware",
    "commit": "1a0b5909142b0b7827891428c3db31864a064492",
    "filename": "python/src/trezorlib/cardano.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/trezor-trezor-firmware/python/src/trezorlib/cardano.py",
    "file_hunks_size": 38,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/src/trezorlib/cardano.py:273:8 Incompatible parameter type [6]: Expected `bytes` for 9th positional only parameter to call `create_address_parameters` but got `Optional[bytes]`.",
    "message": " Expected `bytes` for 9th positional only parameter to call `create_address_parameters` but got `Optional[bytes]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 273,
    "warning_line": "        script_staking_hash,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    address_n: List[int],\n    address_n_staking: List[int] = None,\n    staking_key_hash: bytes = None,\n    block_index: int = None,\n    tx_index: int = None,\n    certificate_index: int = None,\n    script_payment_hash: bytes = None,\n    script_staking_hash: bytes = None,\n) -> messages.CardanoAddressParametersType:\n",
        "source_code_len": 315,
        "target_code": "    address_n: List[int],\n    address_n_staking: Optional[List[int]] = None,\n    staking_key_hash: Optional[bytes] = None,\n    block_index: Optional[int] = None,\n    tx_index: Optional[int] = None,\n    certificate_index: Optional[int] = None,\n    script_payment_hash: Optional[bytes] = None,\n    script_staking_hash: Optional[bytes] = None,\n) -> messages.CardanoAddressParametersType:\n",
        "target_code_len": 385,
        "diff_format": "@@ -94,9 +109,9 @@\n     address_n: List[int],\n-    address_n_staking: List[int] = None,\n-    staking_key_hash: bytes = None,\n-    block_index: int = None,\n-    tx_index: int = None,\n-    certificate_index: int = None,\n-    script_payment_hash: bytes = None,\n-    script_staking_hash: bytes = None,\n+    address_n_staking: Optional[List[int]] = None,\n+    staking_key_hash: Optional[bytes] = None,\n+    block_index: Optional[int] = None,\n+    tx_index: Optional[int] = None,\n+    certificate_index: Optional[int] = None,\n+    script_payment_hash: Optional[bytes] = None,\n+    script_staking_hash: Optional[bytes] = None,\n ) -> messages.CardanoAddressParametersType:\n",
        "source_code_with_indent": "    address_n: List[int],\n    address_n_staking: List[int] = None,\n    staking_key_hash: bytes = None,\n    block_index: int = None,\n    tx_index: int = None,\n    certificate_index: int = None,\n    script_payment_hash: bytes = None,\n    script_staking_hash: bytes = None,\n) -> messages.CardanoAddressParametersType:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    address_n: List[int],\n    address_n_staking: Optional[List[int]] = None,\n    staking_key_hash: Optional[bytes] = None,\n    block_index: Optional[int] = None,\n    tx_index: Optional[int] = None,\n    certificate_index: Optional[int] = None,\n    script_payment_hash: Optional[bytes] = None,\n    script_staking_hash: Optional[bytes] = None,\n) -> messages.CardanoAddressParametersType:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def _create_certificate_pointer(\n    block_index: int, tx_index: int, certificate_index: int\n) -> messages.CardanoBlockchainPointerType:\n",
        "source_code_len": 137,
        "target_code": "def _create_certificate_pointer(\n    block_index: Optional[int],\n    tx_index: Optional[int],\n    certificate_index: Optional[int],\n) -> messages.CardanoBlockchainPointerType:\n",
        "target_code_len": 176,
        "diff_format": "@@ -124,3 +139,5 @@\n def _create_certificate_pointer(\n-    block_index: int, tx_index: int, certificate_index: int\n+    block_index: Optional[int],\n+    tx_index: Optional[int],\n+    certificate_index: Optional[int],\n ) -> messages.CardanoBlockchainPointerType:\n",
        "source_code_with_indent": "<DED>def _create_certificate_pointer(\n    block_index: int, tx_index: int, certificate_index: int\n) -> messages.CardanoBlockchainPointerType:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED>def _create_certificate_pointer(\n    block_index: Optional[int],\n    tx_index: Optional[int],\n    certificate_index: Optional[int],\n) -> messages.CardanoBlockchainPointerType:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "trezor/trezor-firmware",
    "commit": "1a0b5909142b0b7827891428c3db31864a064492",
    "filename": "python/src/trezorlib/cardano.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/trezor-trezor-firmware/python/src/trezorlib/cardano.py",
    "file_hunks_size": 38,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/src/trezorlib/cardano.py:434:12 Incompatible parameter type [6]: Expected `messages.CardanoPoolRelayType` for 1st parameter `type` to call `messages.CardanoPoolRelayParameters.__init__` but got `int`.",
    "message": " Expected `messages.CardanoPoolRelayType` for 1st parameter `type` to call `messages.CardanoPoolRelayParameters.__init__` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 434,
    "warning_line": "            type=pool_relay_type,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _parse_pool_relay(pool_relay) -> messages.CardanoPoolRelayParameters:\n    pool_relay_type = int(pool_relay[\"type\"])\n\n",
        "source_code_len": 122,
        "target_code": "\ndef _parse_pool_relay(pool_relay: dict) -> messages.CardanoPoolRelayParameters:\n    pool_relay_type = messages.CardanoPoolRelayType(pool_relay[\"type\"])\n\n",
        "target_code_len": 154,
        "diff_format": "@@ -417,4 +436,4 @@\n \n-def _parse_pool_relay(pool_relay) -> messages.CardanoPoolRelayParameters:\n-    pool_relay_type = int(pool_relay[\"type\"])\n+def _parse_pool_relay(pool_relay: dict) -> messages.CardanoPoolRelayParameters:\n+    pool_relay_type = messages.CardanoPoolRelayType(pool_relay[\"type\"])\n \n",
        "source_code_with_indent": "\n<DED>def _parse_pool_relay(pool_relay) -> messages.CardanoPoolRelayParameters:\n    <IND>pool_relay_type = int(pool_relay[\"type\"])\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def _parse_pool_relay(pool_relay: dict) -> messages.CardanoPoolRelayParameters:\n    <IND>pool_relay_type = messages.CardanoPoolRelayType(pool_relay[\"type\"])\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "trezor/trezor-firmware",
    "commit": "1a0b5909142b0b7827891428c3db31864a064492",
    "filename": "python/src/trezorlib/cardano.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/trezor-trezor-firmware/python/src/trezorlib/cardano.py",
    "file_hunks_size": 38,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/src/trezorlib/cardano.py:441:12 Incompatible parameter type [6]: Expected `messages.CardanoPoolRelayType` for 1st parameter `type` to call `messages.CardanoPoolRelayParameters.__init__` but got `int`.",
    "message": " Expected `messages.CardanoPoolRelayType` for 1st parameter `type` to call `messages.CardanoPoolRelayParameters.__init__` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 441,
    "warning_line": "            type=pool_relay_type,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _parse_pool_relay(pool_relay) -> messages.CardanoPoolRelayParameters:\n    pool_relay_type = int(pool_relay[\"type\"])\n\n",
        "source_code_len": 122,
        "target_code": "\ndef _parse_pool_relay(pool_relay: dict) -> messages.CardanoPoolRelayParameters:\n    pool_relay_type = messages.CardanoPoolRelayType(pool_relay[\"type\"])\n\n",
        "target_code_len": 154,
        "diff_format": "@@ -417,4 +436,4 @@\n \n-def _parse_pool_relay(pool_relay) -> messages.CardanoPoolRelayParameters:\n-    pool_relay_type = int(pool_relay[\"type\"])\n+def _parse_pool_relay(pool_relay: dict) -> messages.CardanoPoolRelayParameters:\n+    pool_relay_type = messages.CardanoPoolRelayType(pool_relay[\"type\"])\n \n",
        "source_code_with_indent": "\n<DED>def _parse_pool_relay(pool_relay) -> messages.CardanoPoolRelayParameters:\n    <IND>pool_relay_type = int(pool_relay[\"type\"])\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def _parse_pool_relay(pool_relay: dict) -> messages.CardanoPoolRelayParameters:\n    <IND>pool_relay_type = messages.CardanoPoolRelayType(pool_relay[\"type\"])\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "trezor/trezor-firmware",
    "commit": "1a0b5909142b0b7827891428c3db31864a064492",
    "filename": "python/src/trezorlib/cardano.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/trezor-trezor-firmware/python/src/trezorlib/cardano.py",
    "file_hunks_size": 38,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/src/trezorlib/cardano.py:447:12 Incompatible parameter type [6]: Expected `messages.CardanoPoolRelayType` for 1st parameter `type` to call `messages.CardanoPoolRelayParameters.__init__` but got `int`.",
    "message": " Expected `messages.CardanoPoolRelayType` for 1st parameter `type` to call `messages.CardanoPoolRelayParameters.__init__` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 447,
    "warning_line": "            type=pool_relay_type,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _parse_pool_relay(pool_relay) -> messages.CardanoPoolRelayParameters:\n    pool_relay_type = int(pool_relay[\"type\"])\n\n",
        "source_code_len": 122,
        "target_code": "\ndef _parse_pool_relay(pool_relay: dict) -> messages.CardanoPoolRelayParameters:\n    pool_relay_type = messages.CardanoPoolRelayType(pool_relay[\"type\"])\n\n",
        "target_code_len": 154,
        "diff_format": "@@ -417,4 +436,4 @@\n \n-def _parse_pool_relay(pool_relay) -> messages.CardanoPoolRelayParameters:\n-    pool_relay_type = int(pool_relay[\"type\"])\n+def _parse_pool_relay(pool_relay: dict) -> messages.CardanoPoolRelayParameters:\n+    pool_relay_type = messages.CardanoPoolRelayType(pool_relay[\"type\"])\n \n",
        "source_code_with_indent": "\n<DED>def _parse_pool_relay(pool_relay) -> messages.CardanoPoolRelayParameters:\n    <IND>pool_relay_type = int(pool_relay[\"type\"])\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def _parse_pool_relay(pool_relay: dict) -> messages.CardanoPoolRelayParameters:\n    <IND>pool_relay_type = messages.CardanoPoolRelayType(pool_relay[\"type\"])\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "trezor/trezor-firmware",
    "commit": "1a0b5909142b0b7827891428c3db31864a064492",
    "filename": "python/src/trezorlib/cardano.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/trezor-trezor-firmware/python/src/trezorlib/cardano.py",
    "file_hunks_size": 38,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/src/trezorlib/cardano.py:475:8 Incompatible return type [7]: Expected `messages.CardanoTxAuxiliaryData` but got `None`.",
    "message": " Expected `messages.CardanoTxAuxiliaryData` but got `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 475,
    "warning_line": "        return None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef parse_auxiliary_data(auxiliary_data) -> messages.CardanoTxAuxiliaryData:\n    if auxiliary_data is None:\n",
        "source_code_len": 109,
        "target_code": "\ndef parse_auxiliary_data(\n    auxiliary_data: Optional[dict],\n) -> Optional[messages.CardanoTxAuxiliaryData]:\n    if auxiliary_data is None:\n",
        "target_code_len": 142,
        "diff_format": "@@ -472,3 +491,5 @@\n \n-def parse_auxiliary_data(auxiliary_data) -> messages.CardanoTxAuxiliaryData:\n+def parse_auxiliary_data(\n+    auxiliary_data: Optional[dict],\n+) -> Optional[messages.CardanoTxAuxiliaryData]:\n     if auxiliary_data is None:\n",
        "source_code_with_indent": "\n<DED>def parse_auxiliary_data(auxiliary_data) -> messages.CardanoTxAuxiliaryData:\n    <IND>if auxiliary_data is None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def parse_auxiliary_data(\n    auxiliary_data: Optional[dict],\n) -> Optional[messages.CardanoTxAuxiliaryData]:\n    <IND>if auxiliary_data is None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "trezor/trezor-firmware",
    "commit": "1a0b5909142b0b7827891428c3db31864a064492",
    "filename": "python/src/trezorlib/cardano.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/trezor-trezor-firmware/python/src/trezorlib/cardano.py",
    "file_hunks_size": 38,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/src/trezorlib/cardano.py:501:20 Incompatible parameter type [6]: Expected `str` for 2nd positional only parameter to call `_parse_address_parameters` but got `ValueError`.",
    "message": " Expected `str` for 2nd positional only parameter to call `_parse_address_parameters` but got `ValueError`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 501,
    "warning_line": "                    AUXILIARY_DATA_MISSING_FIELDS_ERROR,",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                    catalyst_registration[\"reward_address_parameters\"],\n                    AUXILIARY_DATA_MISSING_FIELDS_ERROR,\n                ),\n",
        "source_code_len": 148,
        "target_code": "                    catalyst_registration[\"reward_address_parameters\"],\n                    str(AUXILIARY_DATA_MISSING_FIELDS_ERROR),\n                ),\n",
        "target_code_len": 153,
        "diff_format": "@@ -500,3 +521,3 @@\n                     catalyst_registration[\"reward_address_parameters\"],\n-                    AUXILIARY_DATA_MISSING_FIELDS_ERROR,\n+                    str(AUXILIARY_DATA_MISSING_FIELDS_ERROR),\n                 ),\n",
        "source_code_with_indent": "                    catalyst_registration[\"reward_address_parameters\"],\n                    AUXILIARY_DATA_MISSING_FIELDS_ERROR,\n                ),\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                    catalyst_registration[\"reward_address_parameters\"],\n                    str(AUXILIARY_DATA_MISSING_FIELDS_ERROR),\n                ),\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "trezor/trezor-firmware",
    "commit": "1a0b5909142b0b7827891428c3db31864a064492",
    "filename": "python/src/trezorlib/cardano.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/trezor-trezor-firmware/python/src/trezorlib/cardano.py",
    "file_hunks_size": 38,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/src/trezorlib/cardano.py:664:4 Incompatible variable type [9]: certificates is declared to have type `List[Tuple[messages.CardanoTxCertificate, Optional[Tuple[List[messages.CardanoPoolOwner], List[messages.CardanoPoolRelayParameters]]]]]` but is used as type `Tuple[]`.",
    "message": " certificates is declared to have type `List[Tuple[messages.CardanoTxCertificate, Optional[Tuple[List[messages.CardanoPoolOwner], List[messages.CardanoPoolRelayParameters]]]]]` but is used as type `Tuple[]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 664,
    "warning_line": "    certificates: List[CertificateWithPoolOwnersAndRelays] = (),",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from itertools import chain\nfrom typing import Dict, Iterator, List, Optional, Tuple, Union\n\n",
        "source_code_len": 93,
        "target_code": "from itertools import chain\nfrom typing import (\n    TYPE_CHECKING,\n    Any,\n    Dict,\n    Iterable,\n    Iterator,\n    List,\n    Optional,\n    Sequence,\n    Tuple,\n    Union,\n)\n\n",
        "target_code_len": 178,
        "diff_format": "@@ -18,3 +18,14 @@\n from itertools import chain\n-from typing import Dict, Iterator, List, Optional, Tuple, Union\n+from typing import (\n+    TYPE_CHECKING,\n+    Any,\n+    Dict,\n+    Iterable,\n+    Iterator,\n+    List,\n+    Optional,\n+    Sequence,\n+    Tuple,\n+    Union,\n+)\n \n",
        "source_code_with_indent": "from itertools import chain\nfrom typing import Dict, Iterator, List, Optional, Tuple, Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from itertools import chain\nfrom typing import (\n    TYPE_CHECKING,\n    Any,\n    Dict,\n    Iterable,\n    Iterator,\n    List,\n    Optional,\n    Sequence,\n    Tuple,\n    Union,\n)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def _get_witness_requests(\n    inputs: List[InputWithPath],\n    certificates: List[CertificateWithPoolOwnersAndRelays],\n    withdrawals: List[messages.CardanoTxWithdrawal],\n    additional_witness_requests: List[Path],\n    signing_mode: messages.CardanoTxSigningMode,\n",
        "source_code_len": 267,
        "target_code": "def _get_witness_requests(\n    inputs: Sequence[InputWithPath],\n    certificates: Sequence[CertificateWithPoolOwnersAndRelays],\n    withdrawals: Sequence[messages.CardanoTxWithdrawal],\n    additional_witness_requests: Sequence[Path],\n    signing_mode: messages.CardanoTxSigningMode,\n",
        "target_code_len": 283,
        "diff_format": "@@ -528,6 +549,6 @@\n def _get_witness_requests(\n-    inputs: List[InputWithPath],\n-    certificates: List[CertificateWithPoolOwnersAndRelays],\n-    withdrawals: List[messages.CardanoTxWithdrawal],\n-    additional_witness_requests: List[Path],\n+    inputs: Sequence[InputWithPath],\n+    certificates: Sequence[CertificateWithPoolOwnersAndRelays],\n+    withdrawals: Sequence[messages.CardanoTxWithdrawal],\n+    additional_witness_requests: Sequence[Path],\n     signing_mode: messages.CardanoTxSigningMode,\n",
        "source_code_with_indent": "<DED>def _get_witness_requests(\n    inputs: List[InputWithPath],\n    certificates: List[CertificateWithPoolOwnersAndRelays],\n    withdrawals: List[messages.CardanoTxWithdrawal],\n    additional_witness_requests: List[Path],\n    signing_mode: messages.CardanoTxSigningMode,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED>def _get_witness_requests(\n    inputs: Sequence[InputWithPath],\n    certificates: Sequence[CertificateWithPoolOwnersAndRelays],\n    withdrawals: Sequence[messages.CardanoTxWithdrawal],\n    additional_witness_requests: Sequence[Path],\n    signing_mode: messages.CardanoTxSigningMode,\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def _get_certificate_items(\n    certificates: List[CertificateWithPoolOwnersAndRelays],\n) -> Iterator[CertificateItem]:\n",
        "source_code_len": 120,
        "target_code": "def _get_certificate_items(\n    certificates: Sequence[CertificateWithPoolOwnersAndRelays],\n) -> Iterator[CertificateItem]:\n",
        "target_code_len": 124,
        "diff_format": "@@ -586,3 +607,3 @@\n def _get_certificate_items(\n-    certificates: List[CertificateWithPoolOwnersAndRelays],\n+    certificates: Sequence[CertificateWithPoolOwnersAndRelays],\n ) -> Iterator[CertificateItem]:\n",
        "source_code_with_indent": "<DED><DED><DED>def _get_certificate_items(\n    certificates: List[CertificateWithPoolOwnersAndRelays],\n) -> Iterator[CertificateItem]:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED><DED><DED>def _get_certificate_items(\n    certificates: Sequence[CertificateWithPoolOwnersAndRelays],\n) -> Iterator[CertificateItem]:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _get_mint_items(mint: List[AssetGroupWithTokens]) -> Iterator[MintItem]:\n    yield messages.CardanoTxMint(asset_groups_count=len(mint))\n",
        "source_code_len": 141,
        "target_code": "\ndef _get_mint_items(mint: Sequence[AssetGroupWithTokens]) -> Iterator[MintItem]:\n    yield messages.CardanoTxMint(asset_groups_count=len(mint))\n",
        "target_code_len": 145,
        "diff_format": "@@ -596,3 +617,3 @@\n \n-def _get_mint_items(mint: List[AssetGroupWithTokens]) -> Iterator[MintItem]:\n+def _get_mint_items(mint: Sequence[AssetGroupWithTokens]) -> Iterator[MintItem]:\n     yield messages.CardanoTxMint(asset_groups_count=len(mint))\n",
        "source_code_with_indent": "\n<DED><DED><DED>def _get_mint_items(mint: List[AssetGroupWithTokens]) -> Iterator[MintItem]:\n    <IND>yield messages.CardanoTxMint(asset_groups_count=len(mint))\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED><DED><DED>def _get_mint_items(mint: Sequence[AssetGroupWithTokens]) -> Iterator[MintItem]:\n    <IND>yield messages.CardanoTxMint(asset_groups_count=len(mint))\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    validity_interval_start: Optional[int],\n    certificates: List[CertificateWithPoolOwnersAndRelays] = (),\n    withdrawals: List[messages.CardanoTxWithdrawal] = (),\n    protocol_magic: int = PROTOCOL_MAGICS[\"mainnet\"],\n    network_id: int = NETWORK_IDS[\"mainnet\"],\n    auxiliary_data: messages.CardanoTxAuxiliaryData = None,\n    mint: List[AssetGroupWithTokens] = (),\n    additional_witness_requests: List[Path] = (),\n    derivation_type: messages.CardanoDerivationType = messages.CardanoDerivationType.ICARUS,\n) -> SignTxResponse:\n    UNEXPECTED_RESPONSE_ERROR = exceptions.TrezorException(\"Unexpected response\")\n",
        "source_code_len": 616,
        "target_code": "    validity_interval_start: Optional[int],\n    certificates: Sequence[CertificateWithPoolOwnersAndRelays] = (),\n    withdrawals: Sequence[messages.CardanoTxWithdrawal] = (),\n    protocol_magic: int = PROTOCOL_MAGICS[\"mainnet\"],\n    network_id: int = NETWORK_IDS[\"mainnet\"],\n    auxiliary_data: Optional[messages.CardanoTxAuxiliaryData] = None,\n    mint: Sequence[AssetGroupWithTokens] = (),\n    additional_witness_requests: Sequence[Path] = (),\n    derivation_type: messages.CardanoDerivationType = messages.CardanoDerivationType.ICARUS,\n) -> Dict[str, Any]:\n    UNEXPECTED_RESPONSE_ERROR = exceptions.TrezorException(\"Unexpected response\")\n",
        "target_code_len": 642,
        "diff_format": "@@ -663,11 +684,11 @@\n     validity_interval_start: Optional[int],\n-    certificates: List[CertificateWithPoolOwnersAndRelays] = (),\n-    withdrawals: List[messages.CardanoTxWithdrawal] = (),\n+    certificates: Sequence[CertificateWithPoolOwnersAndRelays] = (),\n+    withdrawals: Sequence[messages.CardanoTxWithdrawal] = (),\n     protocol_magic: int = PROTOCOL_MAGICS[\"mainnet\"],\n     network_id: int = NETWORK_IDS[\"mainnet\"],\n-    auxiliary_data: messages.CardanoTxAuxiliaryData = None,\n-    mint: List[AssetGroupWithTokens] = (),\n-    additional_witness_requests: List[Path] = (),\n+    auxiliary_data: Optional[messages.CardanoTxAuxiliaryData] = None,\n+    mint: Sequence[AssetGroupWithTokens] = (),\n+    additional_witness_requests: Sequence[Path] = (),\n     derivation_type: messages.CardanoDerivationType = messages.CardanoDerivationType.ICARUS,\n-) -> SignTxResponse:\n+) -> Dict[str, Any]:\n     UNEXPECTED_RESPONSE_ERROR = exceptions.TrezorException(\"Unexpected response\")\n",
        "source_code_with_indent": "    validity_interval_start: Optional[int],\n    certificates: List[CertificateWithPoolOwnersAndRelays] = (),\n    withdrawals: List[messages.CardanoTxWithdrawal] = (),\n    protocol_magic: int = PROTOCOL_MAGICS[\"mainnet\"],\n    network_id: int = NETWORK_IDS[\"mainnet\"],\n    auxiliary_data: messages.CardanoTxAuxiliaryData = None,\n    mint: List[AssetGroupWithTokens] = (),\n    additional_witness_requests: List[Path] = (),\n    derivation_type: messages.CardanoDerivationType = messages.CardanoDerivationType.ICARUS,\n) -> SignTxResponse:\n    <IND>UNEXPECTED_RESPONSE_ERROR = exceptions.TrezorException(\"Unexpected response\")\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    validity_interval_start: Optional[int],\n    certificates: Sequence[CertificateWithPoolOwnersAndRelays] = (),\n    withdrawals: Sequence[messages.CardanoTxWithdrawal] = (),\n    protocol_magic: int = PROTOCOL_MAGICS[\"mainnet\"],\n    network_id: int = NETWORK_IDS[\"mainnet\"],\n    auxiliary_data: Optional[messages.CardanoTxAuxiliaryData] = None,\n    mint: Sequence[AssetGroupWithTokens] = (),\n    additional_witness_requests: Sequence[Path] = (),\n    derivation_type: messages.CardanoDerivationType = messages.CardanoDerivationType.ICARUS,\n) -> Dict[str, Any]:\n    <IND>UNEXPECTED_RESPONSE_ERROR = exceptions.TrezorException(\"Unexpected response\")\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "trezor/trezor-firmware",
    "commit": "1a0b5909142b0b7827891428c3db31864a064492",
    "filename": "python/src/trezorlib/cardano.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/trezor-trezor-firmware/python/src/trezorlib/cardano.py",
    "file_hunks_size": 38,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/src/trezorlib/cardano.py:665:4 Incompatible variable type [9]: withdrawals is declared to have type `List[messages.CardanoTxWithdrawal]` but is used as type `Tuple[]`.",
    "message": " withdrawals is declared to have type `List[messages.CardanoTxWithdrawal]` but is used as type `Tuple[]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 665,
    "warning_line": "    withdrawals: List[messages.CardanoTxWithdrawal] = (),",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from itertools import chain\nfrom typing import Dict, Iterator, List, Optional, Tuple, Union\n\n",
        "source_code_len": 93,
        "target_code": "from itertools import chain\nfrom typing import (\n    TYPE_CHECKING,\n    Any,\n    Dict,\n    Iterable,\n    Iterator,\n    List,\n    Optional,\n    Sequence,\n    Tuple,\n    Union,\n)\n\n",
        "target_code_len": 178,
        "diff_format": "@@ -18,3 +18,14 @@\n from itertools import chain\n-from typing import Dict, Iterator, List, Optional, Tuple, Union\n+from typing import (\n+    TYPE_CHECKING,\n+    Any,\n+    Dict,\n+    Iterable,\n+    Iterator,\n+    List,\n+    Optional,\n+    Sequence,\n+    Tuple,\n+    Union,\n+)\n \n",
        "source_code_with_indent": "from itertools import chain\nfrom typing import Dict, Iterator, List, Optional, Tuple, Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from itertools import chain\nfrom typing import (\n    TYPE_CHECKING,\n    Any,\n    Dict,\n    Iterable,\n    Iterator,\n    List,\n    Optional,\n    Sequence,\n    Tuple,\n    Union,\n)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def _get_witness_requests(\n    inputs: List[InputWithPath],\n    certificates: List[CertificateWithPoolOwnersAndRelays],\n    withdrawals: List[messages.CardanoTxWithdrawal],\n    additional_witness_requests: List[Path],\n    signing_mode: messages.CardanoTxSigningMode,\n",
        "source_code_len": 267,
        "target_code": "def _get_witness_requests(\n    inputs: Sequence[InputWithPath],\n    certificates: Sequence[CertificateWithPoolOwnersAndRelays],\n    withdrawals: Sequence[messages.CardanoTxWithdrawal],\n    additional_witness_requests: Sequence[Path],\n    signing_mode: messages.CardanoTxSigningMode,\n",
        "target_code_len": 283,
        "diff_format": "@@ -528,6 +549,6 @@\n def _get_witness_requests(\n-    inputs: List[InputWithPath],\n-    certificates: List[CertificateWithPoolOwnersAndRelays],\n-    withdrawals: List[messages.CardanoTxWithdrawal],\n-    additional_witness_requests: List[Path],\n+    inputs: Sequence[InputWithPath],\n+    certificates: Sequence[CertificateWithPoolOwnersAndRelays],\n+    withdrawals: Sequence[messages.CardanoTxWithdrawal],\n+    additional_witness_requests: Sequence[Path],\n     signing_mode: messages.CardanoTxSigningMode,\n",
        "source_code_with_indent": "<DED>def _get_witness_requests(\n    inputs: List[InputWithPath],\n    certificates: List[CertificateWithPoolOwnersAndRelays],\n    withdrawals: List[messages.CardanoTxWithdrawal],\n    additional_witness_requests: List[Path],\n    signing_mode: messages.CardanoTxSigningMode,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED>def _get_witness_requests(\n    inputs: Sequence[InputWithPath],\n    certificates: Sequence[CertificateWithPoolOwnersAndRelays],\n    withdrawals: Sequence[messages.CardanoTxWithdrawal],\n    additional_witness_requests: Sequence[Path],\n    signing_mode: messages.CardanoTxSigningMode,\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def _get_certificate_items(\n    certificates: List[CertificateWithPoolOwnersAndRelays],\n) -> Iterator[CertificateItem]:\n",
        "source_code_len": 120,
        "target_code": "def _get_certificate_items(\n    certificates: Sequence[CertificateWithPoolOwnersAndRelays],\n) -> Iterator[CertificateItem]:\n",
        "target_code_len": 124,
        "diff_format": "@@ -586,3 +607,3 @@\n def _get_certificate_items(\n-    certificates: List[CertificateWithPoolOwnersAndRelays],\n+    certificates: Sequence[CertificateWithPoolOwnersAndRelays],\n ) -> Iterator[CertificateItem]:\n",
        "source_code_with_indent": "<DED><DED><DED>def _get_certificate_items(\n    certificates: List[CertificateWithPoolOwnersAndRelays],\n) -> Iterator[CertificateItem]:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED><DED><DED>def _get_certificate_items(\n    certificates: Sequence[CertificateWithPoolOwnersAndRelays],\n) -> Iterator[CertificateItem]:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _get_mint_items(mint: List[AssetGroupWithTokens]) -> Iterator[MintItem]:\n    yield messages.CardanoTxMint(asset_groups_count=len(mint))\n",
        "source_code_len": 141,
        "target_code": "\ndef _get_mint_items(mint: Sequence[AssetGroupWithTokens]) -> Iterator[MintItem]:\n    yield messages.CardanoTxMint(asset_groups_count=len(mint))\n",
        "target_code_len": 145,
        "diff_format": "@@ -596,3 +617,3 @@\n \n-def _get_mint_items(mint: List[AssetGroupWithTokens]) -> Iterator[MintItem]:\n+def _get_mint_items(mint: Sequence[AssetGroupWithTokens]) -> Iterator[MintItem]:\n     yield messages.CardanoTxMint(asset_groups_count=len(mint))\n",
        "source_code_with_indent": "\n<DED><DED><DED>def _get_mint_items(mint: List[AssetGroupWithTokens]) -> Iterator[MintItem]:\n    <IND>yield messages.CardanoTxMint(asset_groups_count=len(mint))\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED><DED><DED>def _get_mint_items(mint: Sequence[AssetGroupWithTokens]) -> Iterator[MintItem]:\n    <IND>yield messages.CardanoTxMint(asset_groups_count=len(mint))\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    validity_interval_start: Optional[int],\n    certificates: List[CertificateWithPoolOwnersAndRelays] = (),\n    withdrawals: List[messages.CardanoTxWithdrawal] = (),\n    protocol_magic: int = PROTOCOL_MAGICS[\"mainnet\"],\n    network_id: int = NETWORK_IDS[\"mainnet\"],\n    auxiliary_data: messages.CardanoTxAuxiliaryData = None,\n    mint: List[AssetGroupWithTokens] = (),\n    additional_witness_requests: List[Path] = (),\n    derivation_type: messages.CardanoDerivationType = messages.CardanoDerivationType.ICARUS,\n) -> SignTxResponse:\n    UNEXPECTED_RESPONSE_ERROR = exceptions.TrezorException(\"Unexpected response\")\n",
        "source_code_len": 616,
        "target_code": "    validity_interval_start: Optional[int],\n    certificates: Sequence[CertificateWithPoolOwnersAndRelays] = (),\n    withdrawals: Sequence[messages.CardanoTxWithdrawal] = (),\n    protocol_magic: int = PROTOCOL_MAGICS[\"mainnet\"],\n    network_id: int = NETWORK_IDS[\"mainnet\"],\n    auxiliary_data: Optional[messages.CardanoTxAuxiliaryData] = None,\n    mint: Sequence[AssetGroupWithTokens] = (),\n    additional_witness_requests: Sequence[Path] = (),\n    derivation_type: messages.CardanoDerivationType = messages.CardanoDerivationType.ICARUS,\n) -> Dict[str, Any]:\n    UNEXPECTED_RESPONSE_ERROR = exceptions.TrezorException(\"Unexpected response\")\n",
        "target_code_len": 642,
        "diff_format": "@@ -663,11 +684,11 @@\n     validity_interval_start: Optional[int],\n-    certificates: List[CertificateWithPoolOwnersAndRelays] = (),\n-    withdrawals: List[messages.CardanoTxWithdrawal] = (),\n+    certificates: Sequence[CertificateWithPoolOwnersAndRelays] = (),\n+    withdrawals: Sequence[messages.CardanoTxWithdrawal] = (),\n     protocol_magic: int = PROTOCOL_MAGICS[\"mainnet\"],\n     network_id: int = NETWORK_IDS[\"mainnet\"],\n-    auxiliary_data: messages.CardanoTxAuxiliaryData = None,\n-    mint: List[AssetGroupWithTokens] = (),\n-    additional_witness_requests: List[Path] = (),\n+    auxiliary_data: Optional[messages.CardanoTxAuxiliaryData] = None,\n+    mint: Sequence[AssetGroupWithTokens] = (),\n+    additional_witness_requests: Sequence[Path] = (),\n     derivation_type: messages.CardanoDerivationType = messages.CardanoDerivationType.ICARUS,\n-) -> SignTxResponse:\n+) -> Dict[str, Any]:\n     UNEXPECTED_RESPONSE_ERROR = exceptions.TrezorException(\"Unexpected response\")\n",
        "source_code_with_indent": "    validity_interval_start: Optional[int],\n    certificates: List[CertificateWithPoolOwnersAndRelays] = (),\n    withdrawals: List[messages.CardanoTxWithdrawal] = (),\n    protocol_magic: int = PROTOCOL_MAGICS[\"mainnet\"],\n    network_id: int = NETWORK_IDS[\"mainnet\"],\n    auxiliary_data: messages.CardanoTxAuxiliaryData = None,\n    mint: List[AssetGroupWithTokens] = (),\n    additional_witness_requests: List[Path] = (),\n    derivation_type: messages.CardanoDerivationType = messages.CardanoDerivationType.ICARUS,\n) -> SignTxResponse:\n    <IND>UNEXPECTED_RESPONSE_ERROR = exceptions.TrezorException(\"Unexpected response\")\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    validity_interval_start: Optional[int],\n    certificates: Sequence[CertificateWithPoolOwnersAndRelays] = (),\n    withdrawals: Sequence[messages.CardanoTxWithdrawal] = (),\n    protocol_magic: int = PROTOCOL_MAGICS[\"mainnet\"],\n    network_id: int = NETWORK_IDS[\"mainnet\"],\n    auxiliary_data: Optional[messages.CardanoTxAuxiliaryData] = None,\n    mint: Sequence[AssetGroupWithTokens] = (),\n    additional_witness_requests: Sequence[Path] = (),\n    derivation_type: messages.CardanoDerivationType = messages.CardanoDerivationType.ICARUS,\n) -> Dict[str, Any]:\n    <IND>UNEXPECTED_RESPONSE_ERROR = exceptions.TrezorException(\"Unexpected response\")\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "trezor/trezor-firmware",
    "commit": "1a0b5909142b0b7827891428c3db31864a064492",
    "filename": "python/src/trezorlib/cardano.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/trezor-trezor-firmware/python/src/trezorlib/cardano.py",
    "file_hunks_size": 38,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/src/trezorlib/cardano.py:668:4 Incompatible variable type [9]: auxiliary_data is declared to have type `messages.CardanoTxAuxiliaryData` but is used as type `None`.",
    "message": " auxiliary_data is declared to have type `messages.CardanoTxAuxiliaryData` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 668,
    "warning_line": "    auxiliary_data: messages.CardanoTxAuxiliaryData = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from itertools import chain\nfrom typing import Dict, Iterator, List, Optional, Tuple, Union\n\n",
        "source_code_len": 93,
        "target_code": "from itertools import chain\nfrom typing import (\n    TYPE_CHECKING,\n    Any,\n    Dict,\n    Iterable,\n    Iterator,\n    List,\n    Optional,\n    Sequence,\n    Tuple,\n    Union,\n)\n\n",
        "target_code_len": 178,
        "diff_format": "@@ -18,3 +18,14 @@\n from itertools import chain\n-from typing import Dict, Iterator, List, Optional, Tuple, Union\n+from typing import (\n+    TYPE_CHECKING,\n+    Any,\n+    Dict,\n+    Iterable,\n+    Iterator,\n+    List,\n+    Optional,\n+    Sequence,\n+    Tuple,\n+    Union,\n+)\n \n",
        "source_code_with_indent": "from itertools import chain\nfrom typing import Dict, Iterator, List, Optional, Tuple, Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from itertools import chain\nfrom typing import (\n    TYPE_CHECKING,\n    Any,\n    Dict,\n    Iterable,\n    Iterator,\n    List,\n    Optional,\n    Sequence,\n    Tuple,\n    Union,\n)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def _get_witness_requests(\n    inputs: List[InputWithPath],\n    certificates: List[CertificateWithPoolOwnersAndRelays],\n    withdrawals: List[messages.CardanoTxWithdrawal],\n    additional_witness_requests: List[Path],\n    signing_mode: messages.CardanoTxSigningMode,\n",
        "source_code_len": 267,
        "target_code": "def _get_witness_requests(\n    inputs: Sequence[InputWithPath],\n    certificates: Sequence[CertificateWithPoolOwnersAndRelays],\n    withdrawals: Sequence[messages.CardanoTxWithdrawal],\n    additional_witness_requests: Sequence[Path],\n    signing_mode: messages.CardanoTxSigningMode,\n",
        "target_code_len": 283,
        "diff_format": "@@ -528,6 +549,6 @@\n def _get_witness_requests(\n-    inputs: List[InputWithPath],\n-    certificates: List[CertificateWithPoolOwnersAndRelays],\n-    withdrawals: List[messages.CardanoTxWithdrawal],\n-    additional_witness_requests: List[Path],\n+    inputs: Sequence[InputWithPath],\n+    certificates: Sequence[CertificateWithPoolOwnersAndRelays],\n+    withdrawals: Sequence[messages.CardanoTxWithdrawal],\n+    additional_witness_requests: Sequence[Path],\n     signing_mode: messages.CardanoTxSigningMode,\n",
        "source_code_with_indent": "<DED>def _get_witness_requests(\n    inputs: List[InputWithPath],\n    certificates: List[CertificateWithPoolOwnersAndRelays],\n    withdrawals: List[messages.CardanoTxWithdrawal],\n    additional_witness_requests: List[Path],\n    signing_mode: messages.CardanoTxSigningMode,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED>def _get_witness_requests(\n    inputs: Sequence[InputWithPath],\n    certificates: Sequence[CertificateWithPoolOwnersAndRelays],\n    withdrawals: Sequence[messages.CardanoTxWithdrawal],\n    additional_witness_requests: Sequence[Path],\n    signing_mode: messages.CardanoTxSigningMode,\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def _get_certificate_items(\n    certificates: List[CertificateWithPoolOwnersAndRelays],\n) -> Iterator[CertificateItem]:\n",
        "source_code_len": 120,
        "target_code": "def _get_certificate_items(\n    certificates: Sequence[CertificateWithPoolOwnersAndRelays],\n) -> Iterator[CertificateItem]:\n",
        "target_code_len": 124,
        "diff_format": "@@ -586,3 +607,3 @@\n def _get_certificate_items(\n-    certificates: List[CertificateWithPoolOwnersAndRelays],\n+    certificates: Sequence[CertificateWithPoolOwnersAndRelays],\n ) -> Iterator[CertificateItem]:\n",
        "source_code_with_indent": "<DED><DED><DED>def _get_certificate_items(\n    certificates: List[CertificateWithPoolOwnersAndRelays],\n) -> Iterator[CertificateItem]:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED><DED><DED>def _get_certificate_items(\n    certificates: Sequence[CertificateWithPoolOwnersAndRelays],\n) -> Iterator[CertificateItem]:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _get_mint_items(mint: List[AssetGroupWithTokens]) -> Iterator[MintItem]:\n    yield messages.CardanoTxMint(asset_groups_count=len(mint))\n",
        "source_code_len": 141,
        "target_code": "\ndef _get_mint_items(mint: Sequence[AssetGroupWithTokens]) -> Iterator[MintItem]:\n    yield messages.CardanoTxMint(asset_groups_count=len(mint))\n",
        "target_code_len": 145,
        "diff_format": "@@ -596,3 +617,3 @@\n \n-def _get_mint_items(mint: List[AssetGroupWithTokens]) -> Iterator[MintItem]:\n+def _get_mint_items(mint: Sequence[AssetGroupWithTokens]) -> Iterator[MintItem]:\n     yield messages.CardanoTxMint(asset_groups_count=len(mint))\n",
        "source_code_with_indent": "\n<DED><DED><DED>def _get_mint_items(mint: List[AssetGroupWithTokens]) -> Iterator[MintItem]:\n    <IND>yield messages.CardanoTxMint(asset_groups_count=len(mint))\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED><DED><DED>def _get_mint_items(mint: Sequence[AssetGroupWithTokens]) -> Iterator[MintItem]:\n    <IND>yield messages.CardanoTxMint(asset_groups_count=len(mint))\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    validity_interval_start: Optional[int],\n    certificates: List[CertificateWithPoolOwnersAndRelays] = (),\n    withdrawals: List[messages.CardanoTxWithdrawal] = (),\n    protocol_magic: int = PROTOCOL_MAGICS[\"mainnet\"],\n    network_id: int = NETWORK_IDS[\"mainnet\"],\n    auxiliary_data: messages.CardanoTxAuxiliaryData = None,\n    mint: List[AssetGroupWithTokens] = (),\n    additional_witness_requests: List[Path] = (),\n    derivation_type: messages.CardanoDerivationType = messages.CardanoDerivationType.ICARUS,\n) -> SignTxResponse:\n    UNEXPECTED_RESPONSE_ERROR = exceptions.TrezorException(\"Unexpected response\")\n",
        "source_code_len": 616,
        "target_code": "    validity_interval_start: Optional[int],\n    certificates: Sequence[CertificateWithPoolOwnersAndRelays] = (),\n    withdrawals: Sequence[messages.CardanoTxWithdrawal] = (),\n    protocol_magic: int = PROTOCOL_MAGICS[\"mainnet\"],\n    network_id: int = NETWORK_IDS[\"mainnet\"],\n    auxiliary_data: Optional[messages.CardanoTxAuxiliaryData] = None,\n    mint: Sequence[AssetGroupWithTokens] = (),\n    additional_witness_requests: Sequence[Path] = (),\n    derivation_type: messages.CardanoDerivationType = messages.CardanoDerivationType.ICARUS,\n) -> Dict[str, Any]:\n    UNEXPECTED_RESPONSE_ERROR = exceptions.TrezorException(\"Unexpected response\")\n",
        "target_code_len": 642,
        "diff_format": "@@ -663,11 +684,11 @@\n     validity_interval_start: Optional[int],\n-    certificates: List[CertificateWithPoolOwnersAndRelays] = (),\n-    withdrawals: List[messages.CardanoTxWithdrawal] = (),\n+    certificates: Sequence[CertificateWithPoolOwnersAndRelays] = (),\n+    withdrawals: Sequence[messages.CardanoTxWithdrawal] = (),\n     protocol_magic: int = PROTOCOL_MAGICS[\"mainnet\"],\n     network_id: int = NETWORK_IDS[\"mainnet\"],\n-    auxiliary_data: messages.CardanoTxAuxiliaryData = None,\n-    mint: List[AssetGroupWithTokens] = (),\n-    additional_witness_requests: List[Path] = (),\n+    auxiliary_data: Optional[messages.CardanoTxAuxiliaryData] = None,\n+    mint: Sequence[AssetGroupWithTokens] = (),\n+    additional_witness_requests: Sequence[Path] = (),\n     derivation_type: messages.CardanoDerivationType = messages.CardanoDerivationType.ICARUS,\n-) -> SignTxResponse:\n+) -> Dict[str, Any]:\n     UNEXPECTED_RESPONSE_ERROR = exceptions.TrezorException(\"Unexpected response\")\n",
        "source_code_with_indent": "    validity_interval_start: Optional[int],\n    certificates: List[CertificateWithPoolOwnersAndRelays] = (),\n    withdrawals: List[messages.CardanoTxWithdrawal] = (),\n    protocol_magic: int = PROTOCOL_MAGICS[\"mainnet\"],\n    network_id: int = NETWORK_IDS[\"mainnet\"],\n    auxiliary_data: messages.CardanoTxAuxiliaryData = None,\n    mint: List[AssetGroupWithTokens] = (),\n    additional_witness_requests: List[Path] = (),\n    derivation_type: messages.CardanoDerivationType = messages.CardanoDerivationType.ICARUS,\n) -> SignTxResponse:\n    <IND>UNEXPECTED_RESPONSE_ERROR = exceptions.TrezorException(\"Unexpected response\")\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    validity_interval_start: Optional[int],\n    certificates: Sequence[CertificateWithPoolOwnersAndRelays] = (),\n    withdrawals: Sequence[messages.CardanoTxWithdrawal] = (),\n    protocol_magic: int = PROTOCOL_MAGICS[\"mainnet\"],\n    network_id: int = NETWORK_IDS[\"mainnet\"],\n    auxiliary_data: Optional[messages.CardanoTxAuxiliaryData] = None,\n    mint: Sequence[AssetGroupWithTokens] = (),\n    additional_witness_requests: Sequence[Path] = (),\n    derivation_type: messages.CardanoDerivationType = messages.CardanoDerivationType.ICARUS,\n) -> Dict[str, Any]:\n    <IND>UNEXPECTED_RESPONSE_ERROR = exceptions.TrezorException(\"Unexpected response\")\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "trezor/trezor-firmware",
    "commit": "1a0b5909142b0b7827891428c3db31864a064492",
    "filename": "python/src/trezorlib/cardano.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/trezor-trezor-firmware/python/src/trezorlib/cardano.py",
    "file_hunks_size": 38,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/src/trezorlib/cardano.py:669:4 Incompatible variable type [9]: mint is declared to have type `List[Tuple[messages.CardanoAssetGroup, List[messages.CardanoToken]]]` but is used as type `Tuple[]`.",
    "message": " mint is declared to have type `List[Tuple[messages.CardanoAssetGroup, List[messages.CardanoToken]]]` but is used as type `Tuple[]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 669,
    "warning_line": "    mint: List[AssetGroupWithTokens] = (),",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from itertools import chain\nfrom typing import Dict, Iterator, List, Optional, Tuple, Union\n\n",
        "source_code_len": 93,
        "target_code": "from itertools import chain\nfrom typing import (\n    TYPE_CHECKING,\n    Any,\n    Dict,\n    Iterable,\n    Iterator,\n    List,\n    Optional,\n    Sequence,\n    Tuple,\n    Union,\n)\n\n",
        "target_code_len": 178,
        "diff_format": "@@ -18,3 +18,14 @@\n from itertools import chain\n-from typing import Dict, Iterator, List, Optional, Tuple, Union\n+from typing import (\n+    TYPE_CHECKING,\n+    Any,\n+    Dict,\n+    Iterable,\n+    Iterator,\n+    List,\n+    Optional,\n+    Sequence,\n+    Tuple,\n+    Union,\n+)\n \n",
        "source_code_with_indent": "from itertools import chain\nfrom typing import Dict, Iterator, List, Optional, Tuple, Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from itertools import chain\nfrom typing import (\n    TYPE_CHECKING,\n    Any,\n    Dict,\n    Iterable,\n    Iterator,\n    List,\n    Optional,\n    Sequence,\n    Tuple,\n    Union,\n)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def _get_witness_requests(\n    inputs: List[InputWithPath],\n    certificates: List[CertificateWithPoolOwnersAndRelays],\n    withdrawals: List[messages.CardanoTxWithdrawal],\n    additional_witness_requests: List[Path],\n    signing_mode: messages.CardanoTxSigningMode,\n",
        "source_code_len": 267,
        "target_code": "def _get_witness_requests(\n    inputs: Sequence[InputWithPath],\n    certificates: Sequence[CertificateWithPoolOwnersAndRelays],\n    withdrawals: Sequence[messages.CardanoTxWithdrawal],\n    additional_witness_requests: Sequence[Path],\n    signing_mode: messages.CardanoTxSigningMode,\n",
        "target_code_len": 283,
        "diff_format": "@@ -528,6 +549,6 @@\n def _get_witness_requests(\n-    inputs: List[InputWithPath],\n-    certificates: List[CertificateWithPoolOwnersAndRelays],\n-    withdrawals: List[messages.CardanoTxWithdrawal],\n-    additional_witness_requests: List[Path],\n+    inputs: Sequence[InputWithPath],\n+    certificates: Sequence[CertificateWithPoolOwnersAndRelays],\n+    withdrawals: Sequence[messages.CardanoTxWithdrawal],\n+    additional_witness_requests: Sequence[Path],\n     signing_mode: messages.CardanoTxSigningMode,\n",
        "source_code_with_indent": "<DED>def _get_witness_requests(\n    inputs: List[InputWithPath],\n    certificates: List[CertificateWithPoolOwnersAndRelays],\n    withdrawals: List[messages.CardanoTxWithdrawal],\n    additional_witness_requests: List[Path],\n    signing_mode: messages.CardanoTxSigningMode,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED>def _get_witness_requests(\n    inputs: Sequence[InputWithPath],\n    certificates: Sequence[CertificateWithPoolOwnersAndRelays],\n    withdrawals: Sequence[messages.CardanoTxWithdrawal],\n    additional_witness_requests: Sequence[Path],\n    signing_mode: messages.CardanoTxSigningMode,\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def _get_certificate_items(\n    certificates: List[CertificateWithPoolOwnersAndRelays],\n) -> Iterator[CertificateItem]:\n",
        "source_code_len": 120,
        "target_code": "def _get_certificate_items(\n    certificates: Sequence[CertificateWithPoolOwnersAndRelays],\n) -> Iterator[CertificateItem]:\n",
        "target_code_len": 124,
        "diff_format": "@@ -586,3 +607,3 @@\n def _get_certificate_items(\n-    certificates: List[CertificateWithPoolOwnersAndRelays],\n+    certificates: Sequence[CertificateWithPoolOwnersAndRelays],\n ) -> Iterator[CertificateItem]:\n",
        "source_code_with_indent": "<DED><DED><DED>def _get_certificate_items(\n    certificates: List[CertificateWithPoolOwnersAndRelays],\n) -> Iterator[CertificateItem]:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED><DED><DED>def _get_certificate_items(\n    certificates: Sequence[CertificateWithPoolOwnersAndRelays],\n) -> Iterator[CertificateItem]:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _get_mint_items(mint: List[AssetGroupWithTokens]) -> Iterator[MintItem]:\n    yield messages.CardanoTxMint(asset_groups_count=len(mint))\n",
        "source_code_len": 141,
        "target_code": "\ndef _get_mint_items(mint: Sequence[AssetGroupWithTokens]) -> Iterator[MintItem]:\n    yield messages.CardanoTxMint(asset_groups_count=len(mint))\n",
        "target_code_len": 145,
        "diff_format": "@@ -596,3 +617,3 @@\n \n-def _get_mint_items(mint: List[AssetGroupWithTokens]) -> Iterator[MintItem]:\n+def _get_mint_items(mint: Sequence[AssetGroupWithTokens]) -> Iterator[MintItem]:\n     yield messages.CardanoTxMint(asset_groups_count=len(mint))\n",
        "source_code_with_indent": "\n<DED><DED><DED>def _get_mint_items(mint: List[AssetGroupWithTokens]) -> Iterator[MintItem]:\n    <IND>yield messages.CardanoTxMint(asset_groups_count=len(mint))\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED><DED><DED>def _get_mint_items(mint: Sequence[AssetGroupWithTokens]) -> Iterator[MintItem]:\n    <IND>yield messages.CardanoTxMint(asset_groups_count=len(mint))\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    validity_interval_start: Optional[int],\n    certificates: List[CertificateWithPoolOwnersAndRelays] = (),\n    withdrawals: List[messages.CardanoTxWithdrawal] = (),\n    protocol_magic: int = PROTOCOL_MAGICS[\"mainnet\"],\n    network_id: int = NETWORK_IDS[\"mainnet\"],\n    auxiliary_data: messages.CardanoTxAuxiliaryData = None,\n    mint: List[AssetGroupWithTokens] = (),\n    additional_witness_requests: List[Path] = (),\n    derivation_type: messages.CardanoDerivationType = messages.CardanoDerivationType.ICARUS,\n) -> SignTxResponse:\n    UNEXPECTED_RESPONSE_ERROR = exceptions.TrezorException(\"Unexpected response\")\n",
        "source_code_len": 616,
        "target_code": "    validity_interval_start: Optional[int],\n    certificates: Sequence[CertificateWithPoolOwnersAndRelays] = (),\n    withdrawals: Sequence[messages.CardanoTxWithdrawal] = (),\n    protocol_magic: int = PROTOCOL_MAGICS[\"mainnet\"],\n    network_id: int = NETWORK_IDS[\"mainnet\"],\n    auxiliary_data: Optional[messages.CardanoTxAuxiliaryData] = None,\n    mint: Sequence[AssetGroupWithTokens] = (),\n    additional_witness_requests: Sequence[Path] = (),\n    derivation_type: messages.CardanoDerivationType = messages.CardanoDerivationType.ICARUS,\n) -> Dict[str, Any]:\n    UNEXPECTED_RESPONSE_ERROR = exceptions.TrezorException(\"Unexpected response\")\n",
        "target_code_len": 642,
        "diff_format": "@@ -663,11 +684,11 @@\n     validity_interval_start: Optional[int],\n-    certificates: List[CertificateWithPoolOwnersAndRelays] = (),\n-    withdrawals: List[messages.CardanoTxWithdrawal] = (),\n+    certificates: Sequence[CertificateWithPoolOwnersAndRelays] = (),\n+    withdrawals: Sequence[messages.CardanoTxWithdrawal] = (),\n     protocol_magic: int = PROTOCOL_MAGICS[\"mainnet\"],\n     network_id: int = NETWORK_IDS[\"mainnet\"],\n-    auxiliary_data: messages.CardanoTxAuxiliaryData = None,\n-    mint: List[AssetGroupWithTokens] = (),\n-    additional_witness_requests: List[Path] = (),\n+    auxiliary_data: Optional[messages.CardanoTxAuxiliaryData] = None,\n+    mint: Sequence[AssetGroupWithTokens] = (),\n+    additional_witness_requests: Sequence[Path] = (),\n     derivation_type: messages.CardanoDerivationType = messages.CardanoDerivationType.ICARUS,\n-) -> SignTxResponse:\n+) -> Dict[str, Any]:\n     UNEXPECTED_RESPONSE_ERROR = exceptions.TrezorException(\"Unexpected response\")\n",
        "source_code_with_indent": "    validity_interval_start: Optional[int],\n    certificates: List[CertificateWithPoolOwnersAndRelays] = (),\n    withdrawals: List[messages.CardanoTxWithdrawal] = (),\n    protocol_magic: int = PROTOCOL_MAGICS[\"mainnet\"],\n    network_id: int = NETWORK_IDS[\"mainnet\"],\n    auxiliary_data: messages.CardanoTxAuxiliaryData = None,\n    mint: List[AssetGroupWithTokens] = (),\n    additional_witness_requests: List[Path] = (),\n    derivation_type: messages.CardanoDerivationType = messages.CardanoDerivationType.ICARUS,\n) -> SignTxResponse:\n    <IND>UNEXPECTED_RESPONSE_ERROR = exceptions.TrezorException(\"Unexpected response\")\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    validity_interval_start: Optional[int],\n    certificates: Sequence[CertificateWithPoolOwnersAndRelays] = (),\n    withdrawals: Sequence[messages.CardanoTxWithdrawal] = (),\n    protocol_magic: int = PROTOCOL_MAGICS[\"mainnet\"],\n    network_id: int = NETWORK_IDS[\"mainnet\"],\n    auxiliary_data: Optional[messages.CardanoTxAuxiliaryData] = None,\n    mint: Sequence[AssetGroupWithTokens] = (),\n    additional_witness_requests: Sequence[Path] = (),\n    derivation_type: messages.CardanoDerivationType = messages.CardanoDerivationType.ICARUS,\n) -> Dict[str, Any]:\n    <IND>UNEXPECTED_RESPONSE_ERROR = exceptions.TrezorException(\"Unexpected response\")\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "trezor/trezor-firmware",
    "commit": "1a0b5909142b0b7827891428c3db31864a064492",
    "filename": "python/src/trezorlib/cardano.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/trezor-trezor-firmware/python/src/trezorlib/cardano.py",
    "file_hunks_size": 38,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/src/trezorlib/cardano.py:670:4 Incompatible variable type [9]: additional_witness_requests is declared to have type `List[List[int]]` but is used as type `Tuple[]`.",
    "message": " additional_witness_requests is declared to have type `List[List[int]]` but is used as type `Tuple[]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 670,
    "warning_line": "    additional_witness_requests: List[Path] = (),",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from itertools import chain\nfrom typing import Dict, Iterator, List, Optional, Tuple, Union\n\n",
        "source_code_len": 93,
        "target_code": "from itertools import chain\nfrom typing import (\n    TYPE_CHECKING,\n    Any,\n    Dict,\n    Iterable,\n    Iterator,\n    List,\n    Optional,\n    Sequence,\n    Tuple,\n    Union,\n)\n\n",
        "target_code_len": 178,
        "diff_format": "@@ -18,3 +18,14 @@\n from itertools import chain\n-from typing import Dict, Iterator, List, Optional, Tuple, Union\n+from typing import (\n+    TYPE_CHECKING,\n+    Any,\n+    Dict,\n+    Iterable,\n+    Iterator,\n+    List,\n+    Optional,\n+    Sequence,\n+    Tuple,\n+    Union,\n+)\n \n",
        "source_code_with_indent": "from itertools import chain\nfrom typing import Dict, Iterator, List, Optional, Tuple, Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from itertools import chain\nfrom typing import (\n    TYPE_CHECKING,\n    Any,\n    Dict,\n    Iterable,\n    Iterator,\n    List,\n    Optional,\n    Sequence,\n    Tuple,\n    Union,\n)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def _get_witness_requests(\n    inputs: List[InputWithPath],\n    certificates: List[CertificateWithPoolOwnersAndRelays],\n    withdrawals: List[messages.CardanoTxWithdrawal],\n    additional_witness_requests: List[Path],\n    signing_mode: messages.CardanoTxSigningMode,\n",
        "source_code_len": 267,
        "target_code": "def _get_witness_requests(\n    inputs: Sequence[InputWithPath],\n    certificates: Sequence[CertificateWithPoolOwnersAndRelays],\n    withdrawals: Sequence[messages.CardanoTxWithdrawal],\n    additional_witness_requests: Sequence[Path],\n    signing_mode: messages.CardanoTxSigningMode,\n",
        "target_code_len": 283,
        "diff_format": "@@ -528,6 +549,6 @@\n def _get_witness_requests(\n-    inputs: List[InputWithPath],\n-    certificates: List[CertificateWithPoolOwnersAndRelays],\n-    withdrawals: List[messages.CardanoTxWithdrawal],\n-    additional_witness_requests: List[Path],\n+    inputs: Sequence[InputWithPath],\n+    certificates: Sequence[CertificateWithPoolOwnersAndRelays],\n+    withdrawals: Sequence[messages.CardanoTxWithdrawal],\n+    additional_witness_requests: Sequence[Path],\n     signing_mode: messages.CardanoTxSigningMode,\n",
        "source_code_with_indent": "<DED>def _get_witness_requests(\n    inputs: List[InputWithPath],\n    certificates: List[CertificateWithPoolOwnersAndRelays],\n    withdrawals: List[messages.CardanoTxWithdrawal],\n    additional_witness_requests: List[Path],\n    signing_mode: messages.CardanoTxSigningMode,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED>def _get_witness_requests(\n    inputs: Sequence[InputWithPath],\n    certificates: Sequence[CertificateWithPoolOwnersAndRelays],\n    withdrawals: Sequence[messages.CardanoTxWithdrawal],\n    additional_witness_requests: Sequence[Path],\n    signing_mode: messages.CardanoTxSigningMode,\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def _get_certificate_items(\n    certificates: List[CertificateWithPoolOwnersAndRelays],\n) -> Iterator[CertificateItem]:\n",
        "source_code_len": 120,
        "target_code": "def _get_certificate_items(\n    certificates: Sequence[CertificateWithPoolOwnersAndRelays],\n) -> Iterator[CertificateItem]:\n",
        "target_code_len": 124,
        "diff_format": "@@ -586,3 +607,3 @@\n def _get_certificate_items(\n-    certificates: List[CertificateWithPoolOwnersAndRelays],\n+    certificates: Sequence[CertificateWithPoolOwnersAndRelays],\n ) -> Iterator[CertificateItem]:\n",
        "source_code_with_indent": "<DED><DED><DED>def _get_certificate_items(\n    certificates: List[CertificateWithPoolOwnersAndRelays],\n) -> Iterator[CertificateItem]:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED><DED><DED>def _get_certificate_items(\n    certificates: Sequence[CertificateWithPoolOwnersAndRelays],\n) -> Iterator[CertificateItem]:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _get_mint_items(mint: List[AssetGroupWithTokens]) -> Iterator[MintItem]:\n    yield messages.CardanoTxMint(asset_groups_count=len(mint))\n",
        "source_code_len": 141,
        "target_code": "\ndef _get_mint_items(mint: Sequence[AssetGroupWithTokens]) -> Iterator[MintItem]:\n    yield messages.CardanoTxMint(asset_groups_count=len(mint))\n",
        "target_code_len": 145,
        "diff_format": "@@ -596,3 +617,3 @@\n \n-def _get_mint_items(mint: List[AssetGroupWithTokens]) -> Iterator[MintItem]:\n+def _get_mint_items(mint: Sequence[AssetGroupWithTokens]) -> Iterator[MintItem]:\n     yield messages.CardanoTxMint(asset_groups_count=len(mint))\n",
        "source_code_with_indent": "\n<DED><DED><DED>def _get_mint_items(mint: List[AssetGroupWithTokens]) -> Iterator[MintItem]:\n    <IND>yield messages.CardanoTxMint(asset_groups_count=len(mint))\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED><DED><DED>def _get_mint_items(mint: Sequence[AssetGroupWithTokens]) -> Iterator[MintItem]:\n    <IND>yield messages.CardanoTxMint(asset_groups_count=len(mint))\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    validity_interval_start: Optional[int],\n    certificates: List[CertificateWithPoolOwnersAndRelays] = (),\n    withdrawals: List[messages.CardanoTxWithdrawal] = (),\n    protocol_magic: int = PROTOCOL_MAGICS[\"mainnet\"],\n    network_id: int = NETWORK_IDS[\"mainnet\"],\n    auxiliary_data: messages.CardanoTxAuxiliaryData = None,\n    mint: List[AssetGroupWithTokens] = (),\n    additional_witness_requests: List[Path] = (),\n    derivation_type: messages.CardanoDerivationType = messages.CardanoDerivationType.ICARUS,\n) -> SignTxResponse:\n    UNEXPECTED_RESPONSE_ERROR = exceptions.TrezorException(\"Unexpected response\")\n",
        "source_code_len": 616,
        "target_code": "    validity_interval_start: Optional[int],\n    certificates: Sequence[CertificateWithPoolOwnersAndRelays] = (),\n    withdrawals: Sequence[messages.CardanoTxWithdrawal] = (),\n    protocol_magic: int = PROTOCOL_MAGICS[\"mainnet\"],\n    network_id: int = NETWORK_IDS[\"mainnet\"],\n    auxiliary_data: Optional[messages.CardanoTxAuxiliaryData] = None,\n    mint: Sequence[AssetGroupWithTokens] = (),\n    additional_witness_requests: Sequence[Path] = (),\n    derivation_type: messages.CardanoDerivationType = messages.CardanoDerivationType.ICARUS,\n) -> Dict[str, Any]:\n    UNEXPECTED_RESPONSE_ERROR = exceptions.TrezorException(\"Unexpected response\")\n",
        "target_code_len": 642,
        "diff_format": "@@ -663,11 +684,11 @@\n     validity_interval_start: Optional[int],\n-    certificates: List[CertificateWithPoolOwnersAndRelays] = (),\n-    withdrawals: List[messages.CardanoTxWithdrawal] = (),\n+    certificates: Sequence[CertificateWithPoolOwnersAndRelays] = (),\n+    withdrawals: Sequence[messages.CardanoTxWithdrawal] = (),\n     protocol_magic: int = PROTOCOL_MAGICS[\"mainnet\"],\n     network_id: int = NETWORK_IDS[\"mainnet\"],\n-    auxiliary_data: messages.CardanoTxAuxiliaryData = None,\n-    mint: List[AssetGroupWithTokens] = (),\n-    additional_witness_requests: List[Path] = (),\n+    auxiliary_data: Optional[messages.CardanoTxAuxiliaryData] = None,\n+    mint: Sequence[AssetGroupWithTokens] = (),\n+    additional_witness_requests: Sequence[Path] = (),\n     derivation_type: messages.CardanoDerivationType = messages.CardanoDerivationType.ICARUS,\n-) -> SignTxResponse:\n+) -> Dict[str, Any]:\n     UNEXPECTED_RESPONSE_ERROR = exceptions.TrezorException(\"Unexpected response\")\n",
        "source_code_with_indent": "    validity_interval_start: Optional[int],\n    certificates: List[CertificateWithPoolOwnersAndRelays] = (),\n    withdrawals: List[messages.CardanoTxWithdrawal] = (),\n    protocol_magic: int = PROTOCOL_MAGICS[\"mainnet\"],\n    network_id: int = NETWORK_IDS[\"mainnet\"],\n    auxiliary_data: messages.CardanoTxAuxiliaryData = None,\n    mint: List[AssetGroupWithTokens] = (),\n    additional_witness_requests: List[Path] = (),\n    derivation_type: messages.CardanoDerivationType = messages.CardanoDerivationType.ICARUS,\n) -> SignTxResponse:\n    <IND>UNEXPECTED_RESPONSE_ERROR = exceptions.TrezorException(\"Unexpected response\")\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    validity_interval_start: Optional[int],\n    certificates: Sequence[CertificateWithPoolOwnersAndRelays] = (),\n    withdrawals: Sequence[messages.CardanoTxWithdrawal] = (),\n    protocol_magic: int = PROTOCOL_MAGICS[\"mainnet\"],\n    network_id: int = NETWORK_IDS[\"mainnet\"],\n    auxiliary_data: Optional[messages.CardanoTxAuxiliaryData] = None,\n    mint: Sequence[AssetGroupWithTokens] = (),\n    additional_witness_requests: Sequence[Path] = (),\n    derivation_type: messages.CardanoDerivationType = messages.CardanoDerivationType.ICARUS,\n) -> Dict[str, Any]:\n    <IND>UNEXPECTED_RESPONSE_ERROR = exceptions.TrezorException(\"Unexpected response\")\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "trezor/trezor-firmware",
    "commit": "1a0b5909142b0b7827891428c3db31864a064492",
    "filename": "python/src/trezorlib/cli/firmware.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/trezor-trezor-firmware/python/src/trezorlib/cli/firmware.py",
    "file_hunks_size": 19,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/src/trezorlib/cli/firmware.py:91:26 Incompatible parameter type [6]: Expected `firmware.FirmwareFormat` for 1st positional only parameter to call `firmware.validate` but got `str`.",
    "message": " Expected `firmware.FirmwareFormat` for 1st positional only parameter to call `firmware.validate` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 91,
    "warning_line": "        firmware.validate(version, fw, allow_unsigned=False)"
  },
  {
    "project": "trezor/trezor-firmware",
    "commit": "1a0b5909142b0b7827891428c3db31864a064492",
    "filename": "python/src/trezorlib/cli/firmware.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/trezor-trezor-firmware/python/src/trezorlib/cli/firmware.py",
    "file_hunks_size": 19,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/src/trezorlib/cli/firmware.py:97:30 Incompatible parameter type [6]: Expected `firmware.FirmwareFormat` for 1st positional only parameter to call `firmware.validate` but got `str`.",
    "message": " Expected `firmware.FirmwareFormat` for 1st positional only parameter to call `firmware.validate` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 97,
    "warning_line": "            firmware.validate(version, fw, allow_unsigned=True)"
  },
  {
    "project": "trezor/trezor-firmware",
    "commit": "1a0b5909142b0b7827891428c3db31864a064492",
    "filename": "python/src/trezorlib/cli/firmware.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/trezor-trezor-firmware/python/src/trezorlib/cli/firmware.py",
    "file_hunks_size": 19,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/src/trezorlib/cli/firmware.py:110:47 Incompatible variable type [9]: expected_fingerprint is declared to have type `str` but is used as type `None`.",
    "message": " expected_fingerprint is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 110,
    "warning_line": "    version: str, fw: firmware.ParsedFirmware, expected_fingerprint: str = None"
  },
  {
    "project": "trezor/trezor-firmware",
    "commit": "1a0b5909142b0b7827891428c3db31864a064492",
    "filename": "python/src/trezorlib/cli/firmware.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/trezor-trezor-firmware/python/src/trezorlib/cli/firmware.py",
    "file_hunks_size": 19,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/src/trezorlib/cli/firmware.py:117:34 Incompatible parameter type [6]: Expected `firmware.FirmwareFormat` for 1st positional only parameter to call `firmware.digest` but got `str`.",
    "message": " Expected `firmware.FirmwareFormat` for 1st positional only parameter to call `firmware.digest` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 117,
    "warning_line": "    fingerprint = firmware.digest(version, fw).hex()"
  },
  {
    "project": "trezor/trezor-firmware",
    "commit": "1a0b5909142b0b7827891428c3db31864a064492",
    "filename": "python/src/trezorlib/cli/firmware.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/trezor-trezor-firmware/python/src/trezorlib/cli/firmware.py",
    "file_hunks_size": 19,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/src/trezorlib/cli/firmware.py:332:4 Incompatible variable type [9]: fingerprint is declared to have type `str` but is used as type `None`.",
    "message": " fingerprint is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 332,
    "warning_line": "    fingerprint: str = None,"
  },
  {
    "project": "trezor/trezor-firmware",
    "commit": "1a0b5909142b0b7827891428c3db31864a064492",
    "filename": "python/src/trezorlib/cli/firmware.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/trezor-trezor-firmware/python/src/trezorlib/cli/firmware.py",
    "file_hunks_size": 19,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/src/trezorlib/cli/firmware.py:333:4 Incompatible variable type [9]: bootloader_onev2 is declared to have type `bool` but is used as type `None`.",
    "message": " bootloader_onev2 is declared to have type `bool` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 333,
    "warning_line": "    bootloader_onev2: bool = None,"
  },
  {
    "project": "trezor/trezor-firmware",
    "commit": "1a0b5909142b0b7827891428c3db31864a064492",
    "filename": "python/src/trezorlib/cli/firmware.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/trezor-trezor-firmware/python/src/trezorlib/cli/firmware.py",
    "file_hunks_size": 19,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/src/trezorlib/cli/firmware.py:334:4 Incompatible variable type [9]: trezor_major_version is declared to have type `int` but is used as type `None`.",
    "message": " trezor_major_version is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 334,
    "warning_line": "    trezor_major_version: int = None,"
  },
  {
    "project": "trezor/trezor-firmware",
    "commit": "1a0b5909142b0b7827891428c3db31864a064492",
    "filename": "python/src/trezorlib/cli/firmware.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/trezor-trezor-firmware/python/src/trezorlib/cli/firmware.py",
    "file_hunks_size": 19,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/src/trezorlib/cli/firmware.py:437:8 Incompatible parameter type [6]: Expected `bool` for 3rd parameter `bootloader_onev2` to call `validate_firmware` but got `typing.Optional[bool]`.",
    "message": " Expected `bool` for 3rd parameter `bootloader_onev2` to call `validate_firmware` but got `typing.Optional[bool]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 437,
    "warning_line": "        bootloader_onev2=bootloader_onev2,"
  },
  {
    "project": "trezor/trezor-firmware",
    "commit": "1a0b5909142b0b7827891428c3db31864a064492",
    "filename": "python/src/trezorlib/cli/firmware.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/trezor-trezor-firmware/python/src/trezorlib/cli/firmware.py",
    "file_hunks_size": 19,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/src/trezorlib/cli/firmware.py:491:12 Incompatible parameter type [6]: Expected `bool` for 3rd parameter `bootloader_onev2` to call `validate_firmware` but got `typing.Optional[bool]`.",
    "message": " Expected `bool` for 3rd parameter `bootloader_onev2` to call `validate_firmware` but got `typing.Optional[bool]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 491,
    "warning_line": "            bootloader_onev2=bootloader_onev2,"
  },
  {
    "project": "trezor/trezor-firmware",
    "commit": "1a0b5909142b0b7827891428c3db31864a064492",
    "filename": "python/src/trezorlib/firmware.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/trezor-trezor-firmware/python/src/trezorlib/firmware.py",
    "file_hunks_size": 8,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/src/trezorlib/firmware.py:348:4 Incompatible variable type [9]: padding_byte is declared to have type `bytes` but is used as type `None`.",
    "message": " padding_byte is declared to have type `bytes` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 348,
    "warning_line": "    padding_byte: bytes = None,"
  },
  {
    "project": "trezor/trezor-firmware",
    "commit": "1a0b5909142b0b7827891428c3db31864a064492",
    "filename": "python/src/trezorlib/firmware.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/trezor-trezor-firmware/python/src/trezorlib/firmware.py",
    "file_hunks_size": 8,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/src/trezorlib/firmware.py:368:4 Incompatible return type [7]: Expected `None` but got `List[typing.Any]`.",
    "message": " Expected `None` but got `List[typing.Any]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 368,
    "warning_line": "    return hashes"
  },
  {
    "project": "trezor/trezor-firmware",
    "commit": "1a0b5909142b0b7827891428c3db31864a064492",
    "filename": "python/src/trezorlib/firmware.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/trezor-trezor-firmware/python/src/trezorlib/firmware.py",
    "file_hunks_size": 8,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/src/trezorlib/firmware.py:384:67 Incompatible parameter type [6]: Expected `bytes` for 5th positional only parameter to call `calculate_code_hashes` but got `typing.Optional[bytes]`.",
    "message": " Expected `bytes` for 5th positional only parameter to call `calculate_code_hashes` but got `typing.Optional[bytes]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 384,
    "warning_line": "        image.code, image._code_offset, hash_function, chunk_size, padding_byte"
  },
  {
    "project": "trezor/trezor-firmware",
    "commit": "1a0b5909142b0b7827891428c3db31864a064492",
    "filename": "python/src/trezorlib/misc.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/trezor-trezor-firmware/python/src/trezorlib/misc.py",
    "file_hunks_size": 7,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/src/trezorlib/misc.py:35:4 Incompatible variable type [9]: ecdsa_curve_name is declared to have type `str` but is used as type `None`.",
    "message": " ecdsa_curve_name is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 35,
    "warning_line": "    ecdsa_curve_name: str = None,"
  },
  {
    "project": "trezor/trezor-firmware",
    "commit": "1a0b5909142b0b7827891428c3db31864a064492",
    "filename": "python/src/trezorlib/misc.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/trezor-trezor-firmware/python/src/trezorlib/misc.py",
    "file_hunks_size": 7,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/src/trezorlib/misc.py:52:4 Incompatible variable type [9]: ecdsa_curve_name is declared to have type `str` but is used as type `None`.",
    "message": " ecdsa_curve_name is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 52,
    "warning_line": "    ecdsa_curve_name: str = None,"
  },
  {
    "project": "trezor/trezor-firmware",
    "commit": "1a0b5909142b0b7827891428c3db31864a064492",
    "filename": "python/src/trezorlib/protobuf.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/trezor-trezor-firmware/python/src/trezorlib/protobuf.py",
    "file_hunks_size": 23,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/src/trezorlib/protobuf.py:40:8 Incompatible return type [7]: Expected `int` but got implicit return value of `None`.",
    "message": " Expected `int` but got implicit return value of `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 40,
    "warning_line": "        \"\"\"",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"\"\"\n\n",
        "source_code_len": 13,
        "target_code": "        \"\"\"\n        ...\n\n",
        "target_code_len": 25,
        "diff_format": "@@ -43,2 +44,3 @@\n         \"\"\"\n+        ...\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n\n",
        "target_code_with_indent": "\n        ...\n\n"
      }
    ]
  },
  {
    "project": "trezor/trezor-firmware",
    "commit": "1a0b5909142b0b7827891428c3db31864a064492",
    "filename": "python/src/trezorlib/protobuf.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/trezor-trezor-firmware/python/src/trezorlib/protobuf.py",
    "file_hunks_size": 23,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/src/trezorlib/protobuf.py:48:8 Incompatible return type [7]: Expected `int` but got implicit return value of `None`.",
    "message": " Expected `int` but got implicit return value of `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 48,
    "warning_line": "        \"\"\"",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"\"\"\n\n",
        "source_code_len": 13,
        "target_code": "        \"\"\"\n        ...\n\n",
        "target_code_len": 25,
        "diff_format": "@@ -50,2 +52,3 @@\n         \"\"\"\n+        ...\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n\n",
        "target_code_with_indent": "\n        ...\n\n"
      }
    ]
  },
  {
    "project": "trezor/trezor-firmware",
    "commit": "1a0b5909142b0b7827891428c3db31864a064492",
    "filename": "python/src/trezorlib/protobuf.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/trezor-trezor-firmware/python/src/trezorlib/protobuf.py",
    "file_hunks_size": 23,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/src/trezorlib/protobuf.py:289:53 Incompatible parameter type [6]: Expected `Reader` for 2nd positional only parameter to call `decode_varint_field` but got `LimitedReader`.",
    "message": " Expected `Reader` for 2nd positional only parameter to call `decode_varint_field` but got `LimitedReader`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 289,
    "warning_line": "            values.append(decode_varint_field(field, packed_reader))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "class Reader(Protocol):\n    def readinto(self, buffer: bytearray) -> int:\n        \"\"\"\n",
        "source_code_len": 86,
        "target_code": "class Reader(Protocol):\n    def readinto(self, buf: bytearray) -> int:\n        \"\"\"\n",
        "target_code_len": 83,
        "diff_format": "@@ -38,3 +39,3 @@\n class Reader(Protocol):\n-    def readinto(self, buffer: bytearray) -> int:\n+    def readinto(self, buf: bytearray) -> int:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "class Reader(Protocol):\n    <IND>def readinto(self, buffer: bytearray) -> int:\n        <IND>",
        "target_code_with_indent": "class Reader(Protocol):\n    <IND>def readinto(self, buf: bytearray) -> int:\n        <IND>"
      }
    ]
  },
  {
    "project": "trezor/trezor-firmware",
    "commit": "1a0b5909142b0b7827891428c3db31864a064492",
    "filename": "python/src/trezorlib/protobuf.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/trezor-trezor-firmware/python/src/trezorlib/protobuf.py",
    "file_hunks_size": 23,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/src/trezorlib/protobuf.py:302:19 Call error [29]: `Optional[Type[typing.Any]]` is not a function.",
    "message": " `Optional[Type[typing.Any]]` is not a function.",
    "rule_id": "Call error [29]",
    "warning_line_no": 302,
    "warning_line": "            return field_type_object(value)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from itertools import zip_longest\nfrom typing import Any, Dict, List, Optional, Type, TypeVar, Union\n\nfrom typing_extensions import Protocol\n\nMT = TypeVar(\"MT\", bound=\"MessageType\")\n",
        "source_code_len": 182,
        "target_code": "from itertools import zip_longest\nfrom typing import Any, Dict, List, Optional, Tuple, Type, TypeVar, Union\n\nfrom typing_extensions import Protocol, TypeGuard\n\nT = TypeVar(\"T\", bound=type)\nMT = TypeVar(\"MT\", bound=\"MessageType\")\n",
        "target_code_len": 229,
        "diff_format": "@@ -30,6 +30,7 @@\n from itertools import zip_longest\n-from typing import Any, Dict, List, Optional, Type, TypeVar, Union\n-\n-from typing_extensions import Protocol\n-\n+from typing import Any, Dict, List, Optional, Tuple, Type, TypeVar, Union\n+\n+from typing_extensions import Protocol, TypeGuard\n+\n+T = TypeVar(\"T\", bound=type)\n MT = TypeVar(\"MT\", bound=\"MessageType\")\n",
        "source_code_with_indent": "from itertools import zip_longest\nfrom typing import Any, Dict, List, Optional, Type, TypeVar, Union\n\nfrom typing_extensions import Protocol\n\nMT = TypeVar(\"MT\", bound=\"MessageType\")\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from itertools import zip_longest\nfrom typing import Any, Dict, List, Optional, Tuple, Type, TypeVar, Union\n\nfrom typing_extensions import Protocol, TypeGuard\n\nT = TypeVar(\"T\", bound=type)\nMT = TypeVar(\"MT\", bound=\"MessageType\")\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef safe_issubclass(value, cls):\n    return isinstance(value, type) and issubclass(value, cls)\n",
        "source_code_len": 96,
        "target_code": "\ndef safe_issubclass(value: Any, cls: Union[T, Tuple[T, ...]]) -> TypeGuard[T]:\n    return isinstance(value, type) and issubclass(value, cls)\n",
        "target_code_len": 142,
        "diff_format": "@@ -57,3 +60,3 @@\n \n-def safe_issubclass(value, cls):\n+def safe_issubclass(value: Any, cls: Union[T, Tuple[T, ...]]) -> TypeGuard[T]:\n     return isinstance(value, type) and issubclass(value, cls)\n",
        "source_code_with_indent": "\ndef safe_issubclass(value, cls):\n    <IND>return isinstance(value, type) and issubclass(value, cls)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\ndef safe_issubclass(value: Any, cls: Union[T, Tuple[T, ...]]) -> TypeGuard[T]:\n    <IND>return isinstance(value, type) and issubclass(value, cls)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "trezor/trezor-firmware",
    "commit": "1a0b5909142b0b7827891428c3db31864a064492",
    "filename": "python/src/trezorlib/protobuf.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/trezor-trezor-firmware/python/src/trezorlib/protobuf.py",
    "file_hunks_size": 23,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/src/trezorlib/protobuf.py:345:28 Incompatible parameter type [6]: Expected `Reader` for 1st positional only parameter to call `load_message` but got `LimitedReader`.",
    "message": " Expected `Reader` for 1st positional only parameter to call `load_message` but got `LimitedReader`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 345,
    "warning_line": "        return load_message(LimitedReader(reader, value), field_type_object)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "class Reader(Protocol):\n    def readinto(self, buffer: bytearray) -> int:\n        \"\"\"\n",
        "source_code_len": 86,
        "target_code": "class Reader(Protocol):\n    def readinto(self, buf: bytearray) -> int:\n        \"\"\"\n",
        "target_code_len": 83,
        "diff_format": "@@ -38,3 +39,3 @@\n class Reader(Protocol):\n-    def readinto(self, buffer: bytearray) -> int:\n+    def readinto(self, buf: bytearray) -> int:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "class Reader(Protocol):\n    <IND>def readinto(self, buffer: bytearray) -> int:\n        <IND>",
        "target_code_with_indent": "class Reader(Protocol):\n    <IND>def readinto(self, buf: bytearray) -> int:\n        <IND>"
      }
    ]
  },
  {
    "project": "trezor/trezor-firmware",
    "commit": "1a0b5909142b0b7827891428c3db31864a064492",
    "filename": "python/src/trezorlib/protobuf.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/trezor-trezor-firmware/python/src/trezorlib/protobuf.py",
    "file_hunks_size": 23,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/src/trezorlib/protobuf.py:345:58 Incompatible parameter type [6]: Expected `Type[Variable[MT (bound to MessageType)]]` for 2nd positional only parameter to call `load_message` but got `Optional[Type[typing.Any]]`.",
    "message": " Expected `Type[Variable[MT (bound to MessageType)]]` for 2nd positional only parameter to call `load_message` but got `Optional[Type[typing.Any]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 345,
    "warning_line": "        return load_message(LimitedReader(reader, value), field_type_object)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from itertools import zip_longest\nfrom typing import Any, Dict, List, Optional, Type, TypeVar, Union\n\nfrom typing_extensions import Protocol\n\nMT = TypeVar(\"MT\", bound=\"MessageType\")\n",
        "source_code_len": 182,
        "target_code": "from itertools import zip_longest\nfrom typing import Any, Dict, List, Optional, Tuple, Type, TypeVar, Union\n\nfrom typing_extensions import Protocol, TypeGuard\n\nT = TypeVar(\"T\", bound=type)\nMT = TypeVar(\"MT\", bound=\"MessageType\")\n",
        "target_code_len": 229,
        "diff_format": "@@ -30,6 +30,7 @@\n from itertools import zip_longest\n-from typing import Any, Dict, List, Optional, Type, TypeVar, Union\n-\n-from typing_extensions import Protocol\n-\n+from typing import Any, Dict, List, Optional, Tuple, Type, TypeVar, Union\n+\n+from typing_extensions import Protocol, TypeGuard\n+\n+T = TypeVar(\"T\", bound=type)\n MT = TypeVar(\"MT\", bound=\"MessageType\")\n",
        "source_code_with_indent": "from itertools import zip_longest\nfrom typing import Any, Dict, List, Optional, Type, TypeVar, Union\n\nfrom typing_extensions import Protocol\n\nMT = TypeVar(\"MT\", bound=\"MessageType\")\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from itertools import zip_longest\nfrom typing import Any, Dict, List, Optional, Tuple, Type, TypeVar, Union\n\nfrom typing_extensions import Protocol, TypeGuard\n\nT = TypeVar(\"T\", bound=type)\nMT = TypeVar(\"MT\", bound=\"MessageType\")\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef safe_issubclass(value, cls):\n    return isinstance(value, type) and issubclass(value, cls)\n",
        "source_code_len": 96,
        "target_code": "\ndef safe_issubclass(value: Any, cls: Union[T, Tuple[T, ...]]) -> TypeGuard[T]:\n    return isinstance(value, type) and issubclass(value, cls)\n",
        "target_code_len": 142,
        "diff_format": "@@ -57,3 +60,3 @@\n \n-def safe_issubclass(value, cls):\n+def safe_issubclass(value: Any, cls: Union[T, Tuple[T, ...]]) -> TypeGuard[T]:\n     return isinstance(value, type) and issubclass(value, cls)\n",
        "source_code_with_indent": "\ndef safe_issubclass(value, cls):\n    <IND>return isinstance(value, type) and issubclass(value, cls)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\ndef safe_issubclass(value: Any, cls: Union[T, Tuple[T, ...]]) -> TypeGuard[T]:\n    <IND>return isinstance(value, type) and issubclass(value, cls)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "trezor/trezor-firmware",
    "commit": "1a0b5909142b0b7827891428c3db31864a064492",
    "filename": "python/src/trezorlib/protobuf.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/trezor-trezor-firmware/python/src/trezorlib/protobuf.py",
    "file_hunks_size": 23,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/src/trezorlib/protobuf.py:439:29 Incompatible parameter type [6]: Expected `Writer` for 1st positional only parameter to call `dump_message` but got `CountingWriter`.",
    "message": " Expected `Writer` for 1st positional only parameter to call `dump_message` but got `CountingWriter`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 439,
    "warning_line": "                dump_message(counter, svalue)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "class Writer(Protocol):\n    def write(self, buffer: bytes) -> int:\n        \"\"\"\n",
        "source_code_len": 79,
        "target_code": "class Writer(Protocol):\n    def write(self, buf: bytes) -> int:\n        \"\"\"\n",
        "target_code_len": 76,
        "diff_format": "@@ -46,3 +48,3 @@\n class Writer(Protocol):\n-    def write(self, buffer: bytes) -> int:\n+    def write(self, buf: bytes) -> int:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "<DED><DED>class Writer(Protocol):\n    <IND>def write(self, buffer: bytes) -> int:\n        <IND>",
        "target_code_with_indent": "<DED><DED>class Writer(Protocol):\n    <IND>def write(self, buf: bytes) -> int:\n        <IND>"
      }
    ]
  },
  {
    "project": "trezor/trezor-firmware",
    "commit": "1a0b5909142b0b7827891428c3db31864a064492",
    "filename": "python/src/trezorlib/protobuf.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/trezor-trezor-firmware/python/src/trezorlib/protobuf.py",
    "file_hunks_size": 23,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/src/trezorlib/protobuf.py:557:23 Call error [29]: `Optional[Type[typing.Any]]` is not a function.",
    "message": " `Optional[Type[typing.Any]]` is not a function.",
    "rule_id": "Call error [29]",
    "warning_line_no": 557,
    "warning_line": "                return field_type_object(value)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from itertools import zip_longest\nfrom typing import Any, Dict, List, Optional, Type, TypeVar, Union\n\nfrom typing_extensions import Protocol\n\nMT = TypeVar(\"MT\", bound=\"MessageType\")\n",
        "source_code_len": 182,
        "target_code": "from itertools import zip_longest\nfrom typing import Any, Dict, List, Optional, Tuple, Type, TypeVar, Union\n\nfrom typing_extensions import Protocol, TypeGuard\n\nT = TypeVar(\"T\", bound=type)\nMT = TypeVar(\"MT\", bound=\"MessageType\")\n",
        "target_code_len": 229,
        "diff_format": "@@ -30,6 +30,7 @@\n from itertools import zip_longest\n-from typing import Any, Dict, List, Optional, Type, TypeVar, Union\n-\n-from typing_extensions import Protocol\n-\n+from typing import Any, Dict, List, Optional, Tuple, Type, TypeVar, Union\n+\n+from typing_extensions import Protocol, TypeGuard\n+\n+T = TypeVar(\"T\", bound=type)\n MT = TypeVar(\"MT\", bound=\"MessageType\")\n",
        "source_code_with_indent": "from itertools import zip_longest\nfrom typing import Any, Dict, List, Optional, Type, TypeVar, Union\n\nfrom typing_extensions import Protocol\n\nMT = TypeVar(\"MT\", bound=\"MessageType\")\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from itertools import zip_longest\nfrom typing import Any, Dict, List, Optional, Tuple, Type, TypeVar, Union\n\nfrom typing_extensions import Protocol, TypeGuard\n\nT = TypeVar(\"T\", bound=type)\nMT = TypeVar(\"MT\", bound=\"MessageType\")\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef safe_issubclass(value, cls):\n    return isinstance(value, type) and issubclass(value, cls)\n",
        "source_code_len": 96,
        "target_code": "\ndef safe_issubclass(value: Any, cls: Union[T, Tuple[T, ...]]) -> TypeGuard[T]:\n    return isinstance(value, type) and issubclass(value, cls)\n",
        "target_code_len": 142,
        "diff_format": "@@ -57,3 +60,3 @@\n \n-def safe_issubclass(value, cls):\n+def safe_issubclass(value: Any, cls: Union[T, Tuple[T, ...]]) -> TypeGuard[T]:\n     return isinstance(value, type) and issubclass(value, cls)\n",
        "source_code_with_indent": "\ndef safe_issubclass(value, cls):\n    <IND>return isinstance(value, type) and issubclass(value, cls)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\ndef safe_issubclass(value: Any, cls: Union[T, Tuple[T, ...]]) -> TypeGuard[T]:\n    <IND>return isinstance(value, type) and issubclass(value, cls)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "trezor/trezor-firmware",
    "commit": "1a0b5909142b0b7827891428c3db31864a064492",
    "filename": "python/src/trezorlib/protobuf.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/trezor-trezor-firmware/python/src/trezorlib/protobuf.py",
    "file_hunks_size": 23,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/src/trezorlib/protobuf.py:592:38 Incompatible parameter type [6]: Expected `Type[Variable[MT (bound to MessageType)]]` for 1st positional only parameter to call `dict_to_proto` but got `Optional[Type[typing.Any]]`.",
    "message": " Expected `Type[Variable[MT (bound to MessageType)]]` for 1st positional only parameter to call `dict_to_proto` but got `Optional[Type[typing.Any]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 592,
    "warning_line": "            newvalue = [dict_to_proto(field_type_object, v) for v in value]",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from itertools import zip_longest\nfrom typing import Any, Dict, List, Optional, Type, TypeVar, Union\n\nfrom typing_extensions import Protocol\n\nMT = TypeVar(\"MT\", bound=\"MessageType\")\n",
        "source_code_len": 182,
        "target_code": "from itertools import zip_longest\nfrom typing import Any, Dict, List, Optional, Tuple, Type, TypeVar, Union\n\nfrom typing_extensions import Protocol, TypeGuard\n\nT = TypeVar(\"T\", bound=type)\nMT = TypeVar(\"MT\", bound=\"MessageType\")\n",
        "target_code_len": 229,
        "diff_format": "@@ -30,6 +30,7 @@\n from itertools import zip_longest\n-from typing import Any, Dict, List, Optional, Type, TypeVar, Union\n-\n-from typing_extensions import Protocol\n-\n+from typing import Any, Dict, List, Optional, Tuple, Type, TypeVar, Union\n+\n+from typing_extensions import Protocol, TypeGuard\n+\n+T = TypeVar(\"T\", bound=type)\n MT = TypeVar(\"MT\", bound=\"MessageType\")\n",
        "source_code_with_indent": "from itertools import zip_longest\nfrom typing import Any, Dict, List, Optional, Type, TypeVar, Union\n\nfrom typing_extensions import Protocol\n\nMT = TypeVar(\"MT\", bound=\"MessageType\")\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from itertools import zip_longest\nfrom typing import Any, Dict, List, Optional, Tuple, Type, TypeVar, Union\n\nfrom typing_extensions import Protocol, TypeGuard\n\nT = TypeVar(\"T\", bound=type)\nMT = TypeVar(\"MT\", bound=\"MessageType\")\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef safe_issubclass(value, cls):\n    return isinstance(value, type) and issubclass(value, cls)\n",
        "source_code_len": 96,
        "target_code": "\ndef safe_issubclass(value: Any, cls: Union[T, Tuple[T, ...]]) -> TypeGuard[T]:\n    return isinstance(value, type) and issubclass(value, cls)\n",
        "target_code_len": 142,
        "diff_format": "@@ -57,3 +60,3 @@\n \n-def safe_issubclass(value, cls):\n+def safe_issubclass(value: Any, cls: Union[T, Tuple[T, ...]]) -> TypeGuard[T]:\n     return isinstance(value, type) and issubclass(value, cls)\n",
        "source_code_with_indent": "\ndef safe_issubclass(value, cls):\n    <IND>return isinstance(value, type) and issubclass(value, cls)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\ndef safe_issubclass(value: Any, cls: Union[T, Tuple[T, ...]]) -> TypeGuard[T]:\n    <IND>return isinstance(value, type) and issubclass(value, cls)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "trezor/trezor-firmware",
    "commit": "1a0b5909142b0b7827891428c3db31864a064492",
    "filename": "python/src/trezorlib/protobuf.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/trezor-trezor-firmware/python/src/trezorlib/protobuf.py",
    "file_hunks_size": 23,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/src/trezorlib/protobuf.py:620:33 Incompatible parameter type [6]: Expected `Field` for 1st positional only parameter to anonymous call but got `Optional[Field]`.",
    "message": " Expected `Field` for 1st positional only parameter to anonymous call but got `Optional[Field]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 620,
    "warning_line": "        res[key] = convert_value(msg.get_field(key), value)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef to_dict(msg: MessageType, hexlify_bytes: bool = True) -> Dict[str, Any]:\n    def convert_value(field: Field, value: Any) -> Any:\n        if hexlify_bytes and isinstance(value, bytes):\n",
        "source_code_len": 189,
        "target_code": "\ndef to_dict(msg: \"MessageType\", hexlify_bytes: bool = True) -> Dict[str, Any]:\n    def convert_value(value: Any) -> Any:\n        if hexlify_bytes and isinstance(value, bytes):\n",
        "target_code_len": 177,
        "diff_format": "@@ -602,4 +615,4 @@\n \n-def to_dict(msg: MessageType, hexlify_bytes: bool = True) -> Dict[str, Any]:\n-    def convert_value(field: Field, value: Any) -> Any:\n+def to_dict(msg: \"MessageType\", hexlify_bytes: bool = True) -> Dict[str, Any]:\n+    def convert_value(value: Any) -> Any:\n         if hexlify_bytes and isinstance(value, bytes):\n",
        "source_code_with_indent": "\n<DED>def to_dict(msg: MessageType, hexlify_bytes: bool = True) -> Dict[str, Any]:\n    <IND>def convert_value(field: Field, value: Any) -> Any:\n        <IND>if hexlify_bytes and isinstance(value, bytes):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def to_dict(msg: \"MessageType\", hexlify_bytes: bool = True) -> Dict[str, Any]:\n    <IND>def convert_value(value: Any) -> Any:\n        <IND>if hexlify_bytes and isinstance(value, bytes):\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        elif isinstance(value, list):\n            return [convert_value(field, v) for v in value]\n        elif isinstance(value, IntEnum):\n",
        "source_code_len": 139,
        "target_code": "        elif isinstance(value, list):\n            return [convert_value(v) for v in value]\n        elif isinstance(value, IntEnum):\n",
        "target_code_len": 132,
        "diff_format": "@@ -609,3 +622,3 @@\n         elif isinstance(value, list):\n-            return [convert_value(field, v) for v in value]\n+            return [convert_value(v) for v in value]\n         elif isinstance(value, IntEnum):\n",
        "source_code_with_indent": "        <DED>elif isinstance(value, list):\n            <IND>return [convert_value(field, v) for v in value]\n        <DED>elif isinstance(value, IntEnum):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>elif isinstance(value, list):\n            <IND>return [convert_value(v) for v in value]\n        <DED>elif isinstance(value, IntEnum):\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            continue\n        res[key] = convert_value(msg.get_field(key), value)\n\n",
        "source_code_len": 82,
        "target_code": "            continue\n        res[key] = convert_value(value)\n\n",
        "target_code_len": 62,
        "diff_format": "@@ -619,3 +632,3 @@\n             continue\n-        res[key] = convert_value(msg.get_field(key), value)\n+        res[key] = convert_value(value)\n \n",
        "source_code_with_indent": "            <IND>continue\n        <DED>res[key] = convert_value(msg.get_field(key), value)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <IND>continue\n        <DED>res[key] = convert_value(value)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "trezor/trezor-firmware",
    "commit": "1a0b5909142b0b7827891428c3db31864a064492",
    "filename": "python/src/trezorlib/transport/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/trezor-trezor-firmware/python/src/trezorlib/transport/__init__.py",
    "file_hunks_size": 7,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/src/trezorlib/transport/__init__.py:61:4 Incompatible attribute type [8]: Attribute `PATH_PREFIX` declared in class `Transport` has type `str` but is used as type `None`.",
    "message": " Attribute `PATH_PREFIX` declared in class `Transport` has type `str` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 61,
    "warning_line": "    PATH_PREFIX: str = None"
  },
  {
    "project": "trezor/trezor-firmware",
    "commit": "1a0b5909142b0b7827891428c3db31864a064492",
    "filename": "python/src/trezorlib/transport/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/trezor-trezor-firmware/python/src/trezorlib/transport/__init__.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/src/trezorlib/transport/__init__.py:128:18 Incompatible variable type [9]: path is declared to have type `str` but is used as type `None`.",
    "message": " path is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 128,
    "warning_line": "def get_transport(path: str = None, prefix_search: bool = False) -> Transport:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import logging\nfrom typing import Iterable, List, Tuple, Type\n\nfrom ..exceptions import TrezorException\n\n",
        "source_code_len": 105,
        "target_code": "import logging\nfrom typing import (\n    TYPE_CHECKING,\n    Iterable,\n    List,\n    Optional,\n    Sequence,\n    Tuple,\n    Type,\n    TypeVar,\n)\n\nfrom ..exceptions import TrezorException\n\nif TYPE_CHECKING:\n    T = TypeVar(\"T\", bound=\"Transport\")\n\n",
        "target_code_len": 245,
        "diff_format": "@@ -17,5 +17,17 @@\n import logging\n-from typing import Iterable, List, Tuple, Type\n+from typing import (\n+    TYPE_CHECKING,\n+    Iterable,\n+    List,\n+    Optional,\n+    Sequence,\n+    Tuple,\n+    Type,\n+    TypeVar,\n+)\n \n from ..exceptions import TrezorException\n+\n+if TYPE_CHECKING:\n+    T = TypeVar(\"T\", bound=\"Transport\")\n \n",
        "source_code_with_indent": "import logging\nfrom typing import Iterable, List, Tuple, Type\n\nfrom ..exceptions import TrezorException\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import logging\nfrom typing import (\n    TYPE_CHECKING,\n    Iterable,\n    List,\n    Optional,\n    Sequence,\n    Tuple,\n    Type,\n    TypeVar,\n)\n\nfrom ..exceptions import TrezorException\n\nif TYPE_CHECKING:\n    <IND>T = TypeVar(\"T\", bound=\"Transport\")\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    @classmethod\n    def enumerate(cls) -> Iterable[\"Transport\"]:\n        raise NotImplementedError\n",
        "source_code_len": 101,
        "target_code": "\n    def find_debug(self: \"T\") -> \"T\":\n        raise NotImplementedError\n",
        "target_code_len": 73,
        "diff_format": "@@ -81,4 +93,3 @@\n \n-    @classmethod\n-    def enumerate(cls) -> Iterable[\"Transport\"]:\n+    def find_debug(self: \"T\") -> \"T\":\n         raise NotImplementedError\n",
        "source_code_with_indent": "\n    <DED>@classmethod\n    def enumerate(cls) -> Iterable[\"Transport\"]:\n        <IND>raise NotImplementedError\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def find_debug(self: \"T\") -> \"T\":\n        <IND>raise NotImplementedError\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @classmethod\n    def find_by_path(cls, path: str, prefix_search: bool = False) -> \"Transport\":\n        for device in cls.enumerate():\n",
        "source_code_len": 138,
        "target_code": "    @classmethod\n    def enumerate(cls: Type[\"T\"]) -> Iterable[\"T\"]:\n        raise NotImplementedError\n\n    @classmethod\n    def find_by_path(cls: Type[\"T\"], path: str, prefix_search: bool = False) -> \"T\":\n        for device in cls.enumerate():\n",
        "target_code_len": 245,
        "diff_format": "@@ -86,3 +97,7 @@\n     @classmethod\n-    def find_by_path(cls, path: str, prefix_search: bool = False) -> \"Transport\":\n+    def enumerate(cls: Type[\"T\"]) -> Iterable[\"T\"]:\n+        raise NotImplementedError\n+\n+    @classmethod\n+    def find_by_path(cls: Type[\"T\"], path: str, prefix_search: bool = False) -> \"T\":\n         for device in cls.enumerate():\n",
        "source_code_with_indent": "    <DED>@classmethod\n    def find_by_path(cls, path: str, prefix_search: bool = False) -> \"Transport\":\n        <IND>for device in cls.enumerate():\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@classmethod\n    def enumerate(cls: Type[\"T\"]) -> Iterable[\"T\"]:\n        <IND>raise NotImplementedError\n\n    <DED>@classmethod\n    def find_by_path(cls: Type[\"T\"], path: str, prefix_search: bool = False) -> \"T\":\n        <IND>for device in cls.enumerate():\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef get_transport(path: str = None, prefix_search: bool = False) -> Transport:\n    if path is None:\n",
        "source_code_len": 101,
        "target_code": "\ndef get_transport(\n    path: Optional[str] = None, prefix_search: bool = False\n) -> \"Transport\":\n    if path is None:\n",
        "target_code_len": 119,
        "diff_format": "@@ -127,3 +144,5 @@\n \n-def get_transport(path: str = None, prefix_search: bool = False) -> Transport:\n+def get_transport(\n+    path: Optional[str] = None, prefix_search: bool = False\n+) -> \"Transport\":\n     if path is None:\n",
        "source_code_with_indent": "\n<DED>def get_transport(path: str = None, prefix_search: bool = False) -> Transport:\n    <IND>if path is None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def get_transport(\n    path: Optional[str] = None, prefix_search: bool = False\n) -> \"Transport\":\n    <IND>if path is None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "trezor/trezor-firmware",
    "commit": "1a0b5909142b0b7827891428c3db31864a064492",
    "filename": "python/src/trezorlib/transport/bridge.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/trezor-trezor-firmware/python/src/trezorlib/transport/bridge.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/src/trezorlib/transport/bridge.py:91:48 Incompatible parameter type [6]: Expected `str` for 2nd parameter `data` to call `BridgeTransport._call` but got `Optional[str]`.",
    "message": " Expected `str` for 2nd parameter `data` to call `BridgeTransport._call` but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 91,
    "warning_line": "            data = self.transport._call(\"call\", data=self.request)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _call(self, action: str, data: str = None) -> requests.Response:\n        session = self.session or \"null\"\n",
        "source_code_len": 115,
        "target_code": "\n    def _call(self, action: str, data: Optional[str] = None) -> requests.Response:\n        session = self.session or \"null\"\n",
        "target_code_len": 125,
        "diff_format": "@@ -129,3 +129,3 @@\n \n-    def _call(self, action: str, data: str = None) -> requests.Response:\n+    def _call(self, action: str, data: Optional[str] = None) -> requests.Response:\n         session = self.session or \"null\"\n",
        "source_code_with_indent": "\n    <DED>def _call(self, action: str, data: str = None) -> requests.Response:\n        <IND>session = self.session or \"null\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def _call(self, action: str, data: Optional[str] = None) -> requests.Response:\n        <IND>session = self.session or \"null\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "trezor/trezor-firmware",
    "commit": "1a0b5909142b0b7827891428c3db31864a064492",
    "filename": "python/src/trezorlib/transport/bridge.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/trezor-trezor-firmware/python/src/trezorlib/transport/bridge.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/src/trezorlib/transport/bridge.py:130:33 Incompatible variable type [9]: data is declared to have type `str` but is used as type `None`.",
    "message": " data is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 130,
    "warning_line": "    def _call(self, action: str, data: str = None) -> requests.Response:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _call(self, action: str, data: str = None) -> requests.Response:\n        session = self.session or \"null\"\n",
        "source_code_len": 115,
        "target_code": "\n    def _call(self, action: str, data: Optional[str] = None) -> requests.Response:\n        session = self.session or \"null\"\n",
        "target_code_len": 125,
        "diff_format": "@@ -129,3 +129,3 @@\n \n-    def _call(self, action: str, data: str = None) -> requests.Response:\n+    def _call(self, action: str, data: Optional[str] = None) -> requests.Response:\n         session = self.session or \"null\"\n",
        "source_code_with_indent": "\n    <DED>def _call(self, action: str, data: str = None) -> requests.Response:\n        <IND>session = self.session or \"null\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def _call(self, action: str, data: Optional[str] = None) -> requests.Response:\n        <IND>session = self.session or \"null\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "trezor/trezor-firmware",
    "commit": "1a0b5909142b0b7827891428c3db31864a064492",
    "filename": "python/src/trezorlib/transport/webusb.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/trezor-trezor-firmware/python/src/trezorlib/transport/webusb.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/src/trezorlib/transport/webusb.py:97:27 Incompatible variable type [9]: handle is declared to have type `WebUsbHandle` but is used as type `None`.",
    "message": " handle is declared to have type `WebUsbHandle` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 97,
    "warning_line": "        self, device: str, handle: WebUsbHandle = None, debug: bool = False",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def __init__(\n        self, device: str, handle: WebUsbHandle = None, debug: bool = False\n    ) -> None:\n",
        "source_code_len": 109,
        "target_code": "    def __init__(\n        self,\n        device: \"usb1.USBDevice\",\n        handle: Optional[WebUsbHandle] = None,\n        debug: bool = False,\n    ) -> None:\n",
        "target_code_len": 157,
        "diff_format": "@@ -96,3 +98,6 @@\n     def __init__(\n-        self, device: str, handle: WebUsbHandle = None, debug: bool = False\n+        self,\n+        device: \"usb1.USBDevice\",\n+        handle: Optional[WebUsbHandle] = None,\n+        debug: bool = False,\n     ) -> None:\n",
        "source_code_with_indent": "    def __init__(\n        self, device: str, handle: WebUsbHandle = None, debug: bool = False\n    ) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def __init__(\n        self,\n        device: \"usb1.USBDevice\",\n        handle: Optional[WebUsbHandle] = None,\n        debug: bool = False,\n    ) -> None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]