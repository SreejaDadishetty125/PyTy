[
  {
    "project": "mampfes/hacs_waste_collection_schedule",
    "commit": "6a4c579bb38c98aab65c2d50fbc9e16c69e878d6",
    "filename": "custom_components/waste_collection_schedule/package/scraper.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mampfes-hacs_waste_collection_schedule/custom_components/waste_collection_schedule/package/scraper.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "custom_components/waste_collection_schedule/package/scraper.py:50:61 Invalid type [31]: Expression `{  }` is not a valid type.",
    "message": " Expression `{  }` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 50,
    "warning_line": "def filter_function(entry: CollectionAppointment, customize: {}):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from itertools import islice\n\n",
        "source_code_len": 30,
        "target_code": "from itertools import islice\nfrom typing import Dict, List\n\n",
        "target_code_len": 60,
        "diff_format": "@@ -9,2 +9,3 @@\n from itertools import islice\n+from typing import Dict, List\n \n",
        "source_code_with_indent": "from itertools import islice\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from itertools import islice\nfrom typing import Dict, List\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef filter_function(entry: CollectionAppointment, customize: {}):\n    c = customize.get(entry.type)\n",
        "source_code_len": 101,
        "target_code": "\ndef filter_function(entry: CollectionAppointment, customize:Dict[str,Customize]):\n    c = customize.get(entry.type)\n",
        "target_code_len": 117,
        "diff_format": "@@ -49,3 +50,3 @@\n \n-def filter_function(entry: CollectionAppointment, customize: {}):\n+def filter_function(entry: CollectionAppointment, customize:Dict[str,Customize]):\n     c = customize.get(entry.type)\n",
        "source_code_with_indent": "\n<DED><DED>def filter_function(entry: CollectionAppointment, customize: {}):\n    <IND>c = customize.get(entry.type)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED><DED>def filter_function(entry: CollectionAppointment, customize:Dict[str,Customize]):\n    <IND>c = customize.get(entry.type)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "mampfes/hacs_waste_collection_schedule",
    "commit": "6a4c579bb38c98aab65c2d50fbc9e16c69e878d6",
    "filename": "custom_components/waste_collection_schedule/package/scraper.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mampfes-hacs_waste_collection_schedule/custom_components/waste_collection_schedule/package/scraper.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "custom_components/waste_collection_schedule/package/scraper.py:58:64 Invalid type [31]: Expression `{  }` is not a valid type.",
    "message": " Expression `{  }` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 58,
    "warning_line": "def customize_function(entry: CollectionAppointment, customize: {}):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from itertools import islice\n\n",
        "source_code_len": 30,
        "target_code": "from itertools import islice\nfrom typing import Dict, List\n\n",
        "target_code_len": 60,
        "diff_format": "@@ -9,2 +9,3 @@\n from itertools import islice\n+from typing import Dict, List\n \n",
        "source_code_with_indent": "from itertools import islice\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from itertools import islice\nfrom typing import Dict, List\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef customize_function(entry: CollectionAppointment, customize: {}):\n    c = customize.get(entry.type)\n",
        "source_code_len": 104,
        "target_code": "\ndef customize_function(entry: CollectionAppointment, customize:Dict[str,Customize]):\n    c = customize.get(entry.type)\n",
        "target_code_len": 120,
        "diff_format": "@@ -57,3 +58,3 @@\n \n-def customize_function(entry: CollectionAppointment, customize: {}):\n+def customize_function(entry: CollectionAppointment, customize:Dict[str,Customize]):\n     c = customize.get(entry.type)\n",
        "source_code_with_indent": "\n<DED><DED>def customize_function(entry: CollectionAppointment, customize: {}):\n    <IND>c = customize.get(entry.type)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED><DED>def customize_function(entry: CollectionAppointment, customize:Dict[str,Customize]):\n    <IND>c = customize.get(entry.type)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "mampfes/hacs_waste_collection_schedule",
    "commit": "6a4c579bb38c98aab65c2d50fbc9e16c69e878d6",
    "filename": "custom_components/waste_collection_schedule/package/scraper.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mampfes-hacs_waste_collection_schedule/custom_components/waste_collection_schedule/package/scraper.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "custom_components/waste_collection_schedule/package/scraper.py:71:47 Invalid type [31]: Expression `{  }` is not a valid type.",
    "message": " Expression `{  }` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 71,
    "warning_line": "    def __init__(self, source: str, customize: {}):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from itertools import islice\n\n",
        "source_code_len": 30,
        "target_code": "from itertools import islice\nfrom typing import Dict, List\n\n",
        "target_code_len": 60,
        "diff_format": "@@ -9,2 +9,3 @@\n from itertools import islice\n+from typing import Dict, List\n \n",
        "source_code_with_indent": "from itertools import islice\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from itertools import islice\nfrom typing import Dict, List\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "class Scraper:\n    def __init__(self, source: str, customize: {}):\n        self._source = source\n        self._entries = []  # list of entries of type CollectionAppointment\n        self._refreshtime = None\n",
        "source_code_len": 206,
        "target_code": "class Scraper:\n    def __init__(self, source: str, customize:Dict[str,Customize]):\n        self._source = source\n        self._entries:List[CollectionAppointment] = []\n        self._refreshtime = None\n",
        "target_code_len": 201,
        "diff_format": "@@ -70,5 +71,5 @@\n class Scraper:\n-    def __init__(self, source: str, customize: {}):\n+    def __init__(self, source: str, customize:Dict[str,Customize]):\n         self._source = source\n-        self._entries = []  # list of entries of type CollectionAppointment\n+        self._entries:List[CollectionAppointment] = []\n         self._refreshtime = None\n",
        "source_code_with_indent": "<DED>class Scraper:\n    <IND>def __init__(self, source: str, customize: {}):\n        <IND>self._source = source\n        self._entries = []  # list of entries of type CollectionAppointment\n        self._refreshtime = None\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED>class Scraper:\n    <IND>def __init__(self, source: str, customize:Dict[str,Customize]):\n        <IND>self._source = source\n        self._entries:List[CollectionAppointment] = []\n        self._refreshtime = None\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "mampfes/hacs_waste_collection_schedule",
    "commit": "6a4c579bb38c98aab65c2d50fbc9e16c69e878d6",
    "filename": "custom_components/waste_collection_schedule/package/scraper.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mampfes-hacs_waste_collection_schedule/custom_components/waste_collection_schedule/package/scraper.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "custom_components/waste_collection_schedule/package/scraper.py:182:56 Invalid type [31]: Expression `{  }` is not a valid type.",
    "message": " Expression `{  }` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 182,
    "warning_line": "    def create(source_name: str, dir_offset, customize: {}, kwargs):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from itertools import islice\n\n",
        "source_code_len": 30,
        "target_code": "from itertools import islice\nfrom typing import Dict, List\n\n",
        "target_code_len": 60,
        "diff_format": "@@ -9,2 +9,3 @@\n from itertools import islice\n+from typing import Dict, List\n \n",
        "source_code_with_indent": "from itertools import islice\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from itertools import islice\nfrom typing import Dict, List\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @staticmethod\n    def create(source_name: str, dir_offset, customize: {}, kwargs):\n        # load source module\n",
        "source_code_len": 116,
        "target_code": "    @staticmethod\n    def create(source_name: str, dir_offset, customize:Dict[str,Customize], kwargs):\n        # load source module\n",
        "target_code_len": 132,
        "diff_format": "@@ -181,3 +182,3 @@\n     @staticmethod\n-    def create(source_name: str, dir_offset, customize: {}, kwargs):\n+    def create(source_name: str, dir_offset, customize:Dict[str,Customize], kwargs):\n         # load source module\n",
        "source_code_with_indent": "    <DED>@staticmethod\n    def create(source_name: str, dir_offset, customize: {}, kwargs):\n        # load source module\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@staticmethod\n    def create(source_name: str, dir_offset, customize:Dict[str,Customize], kwargs):\n        # load source module\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]