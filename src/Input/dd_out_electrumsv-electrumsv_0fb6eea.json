[
  {
    "project": "electrumsv/electrumsv",
    "commit": "0fb6eea15614c4c4520d33b93c9dcff467223f4a",
    "filename": "electrumsv/contacts.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/contacts.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/contacts.py:149:50 Incompatible parameter type [6]: Expected `IdentityCheckResult` for 1st positional only parameter to call `Contacts.check_identity_exists` but got `IdentitySystem`.",
    "message": " Expected `IdentityCheckResult` for 1st positional only parameter to call `Contacts.check_identity_exists` but got `IdentitySystem`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 149,
    "warning_line": "                return self.check_identity_exists(system_id, system_data)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def check_identity_exists(self, system_id: IdentityCheckResult,\n            system_data: Any) -> IdentityCheckResult:\n",
        "source_code_len": 123,
        "target_code": "\n    def check_identity_exists(self, system_id: IdentitySystem,\n            system_data: Any) -> IdentityCheckResult:\n",
        "target_code_len": 118,
        "diff_format": "@@ -134,3 +134,3 @@\n \n-    def check_identity_exists(self, system_id: IdentityCheckResult,\n+    def check_identity_exists(self, system_id: IdentitySystem,\n             system_data: Any) -> IdentityCheckResult:\n",
        "source_code_with_indent": "\n    <DED>def check_identity_exists(self, system_id: IdentityCheckResult,\n            system_data: Any) -> IdentityCheckResult:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def check_identity_exists(self, system_id: IdentitySystem,\n            system_data: Any) -> IdentityCheckResult:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "0fb6eea15614c4c4520d33b93c9dcff467223f4a",
    "filename": "electrumsv/contacts.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/contacts.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/contacts.py:238:8 Incompatible return type [7]: Expected `None` but got `ContactIdentity`.",
    "message": " Expected `None` but got `ContactIdentity`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 238,
    "warning_line": "        return identity",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def add_identity(self, contact_id: int, system_id: IdentitySystem, system_data: str) -> None:\n        contact = self._entries[contact_id]\n",
        "source_code_len": 143,
        "target_code": "\n    def add_identity(self, contact_id: int, system_id: IdentitySystem, system_data: str) \\\n            -> ContactIdentity:\n        contact = self._entries[contact_id]\n",
        "target_code_len": 168,
        "diff_format": "@@ -228,3 +228,4 @@\n \n-    def add_identity(self, contact_id: int, system_id: IdentitySystem, system_data: str) -> None:\n+    def add_identity(self, contact_id: int, system_id: IdentitySystem, system_data: str) \\\n+            -> ContactIdentity:\n         contact = self._entries[contact_id]\n",
        "source_code_with_indent": "\n    <DED><DED>def add_identity(self, contact_id: int, system_id: IdentitySystem, system_data: str) -> None:\n        <IND>contact = self._entries[contact_id]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent_exact_match": false,
        "target_code_with_indent": "\n    <DED><DED>def add_identity(self, contact_id: int, system_id: IdentitySystem, system_data: str)            -> ContactIdentity:\n        <IND>contact = self._entries[contact_id]\n"
      }
    ]
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "0fb6eea15614c4c4520d33b93c9dcff467223f4a",
    "filename": "electrumsv/paymentrequest.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/paymentrequest.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/paymentrequest.py:300:8 Incompatible return type [7]: Expected `Tuple[bool, str]` but got `Tuple[bool, Optional[str]]`.",
    "message": " Expected `Tuple[bool, str]` but got `Tuple[bool, Optional[str]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 300,
    "warning_line": "        return True, payment_ack.memo",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def send_payment(self, transaction_hex: str, refund_address: Address) -> Tuple[bool, str]:\n        if not self.payment_url:\n",
        "source_code_len": 129,
        "target_code": "\n    def send_payment(self,\n                     transaction_hex: str,\n                     refund_address: Address) -> Tuple[bool, Optional[str]]:\n\n        if not self.payment_url:\n",
        "target_code_len": 182,
        "diff_format": "@@ -271,3 +271,6 @@\n \n-    def send_payment(self, transaction_hex: str, refund_address: Address) -> Tuple[bool, str]:\n+    def send_payment(self,\n+                     transaction_hex: str,\n+                     refund_address: Address) -> Tuple[bool, Optional[str]]:\n+\n         if not self.payment_url:\n",
        "source_code_with_indent": "\n    <DED>def send_payment(self, transaction_hex: str, refund_address: Address) -> Tuple[bool, str]:\n        <IND>if not self.payment_url:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def send_payment(self,\n                     transaction_hex: str,\n                     refund_address: Address) -> Tuple[bool, Optional[str]]:\n\n        <IND>if not self.payment_url:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "0fb6eea15614c4c4520d33b93c9dcff467223f4a",
    "filename": "electrumsv/paymentrequest.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/paymentrequest.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/paymentrequest.py:456:36 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `PaymentRequest.from_json` but got `typing.Union[None, bytes, str]`.",
    "message": " Expected `str` for 1st positional only parameter to call `PaymentRequest.from_json` but got `typing.Union[None, bytes, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 456,
    "warning_line": "    return PaymentRequest.from_json(data)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    response = None\n    u = urllib.parse.urlparse(url)\n",
        "source_code_len": 55,
        "target_code": "    response = None\n    data: Any = None\n    u = urllib.parse.urlparse(url)\n",
        "target_code_len": 76,
        "diff_format": "@@ -423,2 +426,3 @@\n     response = None\n+    data: Any = None\n     u = urllib.parse.urlparse(url)\n",
        "source_code_with_indent": "    response = None\n    u = urllib.parse.urlparse(url)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    response = None\n    data: Any = None\n    u = urllib.parse.urlparse(url)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "0fb6eea15614c4c4520d33b93c9dcff467223f4a",
    "filename": "electrumsv/winconsole.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/winconsole.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/winconsole.py:48:12 Incompatible return type [7]: Expected `int` but got `typing.Generator[typing.Any, None, None]`.",
    "message": " Expected `int` but got `typing.Generator[typing.Any, None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 48,
    "warning_line": "            yield pid",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from electrumsv.logs import logs\n\n\n",
        "source_code_len": 35,
        "target_code": "from electrumsv.logs import logs\nfrom typing import Generator, Union\n\n",
        "target_code_len": 70,
        "diff_format": "@@ -33,3 +33,3 @@\n from electrumsv.logs import logs\n-\n+from typing import Generator, Union\n \n",
        "source_code_with_indent": "from electrumsv.logs import logs\n\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from electrumsv.logs import logs\nfrom typing import Generator, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _parent_process_pids() -> int:\n    \"\"\"\n",
        "source_code_len": 44,
        "target_code": "\n\ndef _parent_process_pids() -> Generator[int, None, None]:\n    \"\"\"\n",
        "target_code_len": 68,
        "diff_format": "@@ -38,3 +38,4 @@\n \n-def _parent_process_pids() -> int:\n+\n+def _parent_process_pids() -> Generator[int, None, None]:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\ndef _parent_process_pids() -> int:\n    <IND>",
        "target_code_with_indent": "\n\ndef _parent_process_pids() -> Generator[int, None, None]:\n    <IND>"
      }
    ]
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "0fb6eea15614c4c4520d33b93c9dcff467223f4a",
    "filename": "electrumsv/winconsole.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/winconsole.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/winconsole.py:65:12 Incompatible return type [7]: Expected `bool` but got `None`.",
    "message": " Expected `bool` but got `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 65,
    "warning_line": "            return",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from electrumsv.logs import logs\n\n\n",
        "source_code_len": 35,
        "target_code": "from electrumsv.logs import logs\nfrom typing import Generator, Union\n\n",
        "target_code_len": 70,
        "diff_format": "@@ -33,3 +33,3 @@\n from electrumsv.logs import logs\n-\n+from typing import Generator, Union\n \n",
        "source_code_with_indent": "from electrumsv.logs import logs\n\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from electrumsv.logs import logs\nfrom typing import Generator, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _parent_process_pids() -> int:\n    \"\"\"\n",
        "source_code_len": 44,
        "target_code": "\n\ndef _parent_process_pids() -> Generator[int, None, None]:\n    \"\"\"\n",
        "target_code_len": 68,
        "diff_format": "@@ -38,3 +38,4 @@\n \n-def _parent_process_pids() -> int:\n+\n+def _parent_process_pids() -> Generator[int, None, None]:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\ndef _parent_process_pids() -> int:\n    <IND>",
        "target_code_with_indent": "\n\ndef _parent_process_pids() -> Generator[int, None, None]:\n    <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _create_or_attach_console(attach: bool=True, create: bool=False, title: str=None) -> bool:\n    \"\"\"\n",
        "source_code_len": 104,
        "target_code": "\ndef _create_or_attach_console(attach: bool=True,\n                              create: bool=False,\n                              title: str=None) -> Union[bool, None]:\n    \"\"\"\n",
        "target_code_len": 177,
        "diff_format": "@@ -53,3 +54,5 @@\n \n-def _create_or_attach_console(attach: bool=True, create: bool=False, title: str=None) -> bool:\n+def _create_or_attach_console(attach: bool=True,\n+                              create: bool=False,\n+                              title: str=None) -> Union[bool, None]:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED><DED>def _create_or_attach_console(attach: bool=True, create: bool=False, title: str=None) -> bool:\n    <IND>",
        "target_code_with_indent": "\n<DED><DED>def _create_or_attach_console(attach: bool=True,\n                              create: bool=False,\n                              title: str=None) -> Union[bool, None]:\n    <IND>"
      }
    ]
  }
]