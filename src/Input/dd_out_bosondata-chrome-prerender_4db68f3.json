[
  {
    "project": "bosondata/chrome-prerender",
    "commit": "4db68f30762030216c77c55fac37adf2cd85b44e",
    "filename": "prerender/cache/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/bosondata-chrome-prerender/prerender/cache/__init__.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "prerender/cache/__init__.py:13:4 Incompatible variable type [9]: cache is declared to have type `DiskCache` but is used as type `S3Cache`.",
    "message": " cache is declared to have type `DiskCache` but is used as type `S3Cache`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 13,
    "warning_line": "    cache = S3Cache()"
  },
  {
    "project": "bosondata/chrome-prerender",
    "commit": "4db68f30762030216c77c55fac37adf2cd85b44e",
    "filename": "prerender/cache/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/bosondata-chrome-prerender/prerender/cache/__init__.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "prerender/cache/__init__.py:17:4 Incompatible variable type [9]: cache is declared to have type `DiskCache` but is used as type `DummyCache`.",
    "message": " cache is declared to have type `DiskCache` but is used as type `DummyCache`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 17,
    "warning_line": "    cache = DummyCache()"
  },
  {
    "project": "bosondata/chrome-prerender",
    "commit": "4db68f30762030216c77c55fac37adf2cd85b44e",
    "filename": "prerender/cache/disk.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/bosondata-chrome-prerender/prerender/cache/disk.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "prerender/cache/disk.py:23:12 Incompatible return type [7]: Expected `bytes` but got implicit return value of `None`.",
    "message": " Expected `bytes` but got implicit return value of `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 23,
    "warning_line": "            return res"
  },
  {
    "project": "bosondata/chrome-prerender",
    "commit": "4db68f30762030216c77c55fac37adf2cd85b44e",
    "filename": "prerender/cache/s3.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/bosondata-chrome-prerender/prerender/cache/s3.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "prerender/cache/s3.py:35:12 Incompatible return type [7]: Expected `bytes` but got `None`.",
    "message": " Expected `bytes` but got `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 35,
    "warning_line": "            return"
  },
  {
    "project": "bosondata/chrome-prerender",
    "commit": "4db68f30762030216c77c55fac37adf2cd85b44e",
    "filename": "prerender/mhtml.py",
    "min_patch_found": false,
    "full_warning_msg": "prerender/mhtml.py:24:50 Incompatible parameter type [6]: Expected `bytes` for 1st positional only parameter to call `base64.b64encode` but got `Variable[AnyStr <: [str, bytes]]`.",
    "exception": "too many values to unpack (expected 2)",
    "dd_fail": true
  },
  {
    "project": "bosondata/chrome-prerender",
    "commit": "4db68f30762030216c77c55fac37adf2cd85b44e",
    "filename": "prerender/prerender.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/bosondata-chrome-prerender/prerender/prerender.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "prerender/prerender.py:36:8 Incompatible return type [7]: Expected `Dict[typing.Any, typing.Any]` but got `typing.List[Dict[typing.Any, typing.Any]]`.",
    "message": " Expected `Dict[typing.Any, typing.Any]` but got `typing.List[Dict[typing.Any, typing.Any]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 36,
    "warning_line": "        return await self._rdp.pages()",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from multiprocessing import cpu_count\nfrom typing import Dict\n\n",
        "source_code_len": 63,
        "target_code": "from multiprocessing import cpu_count\nfrom typing import List, Dict\n\n",
        "target_code_len": 69,
        "diff_format": "@@ -4,3 +4,3 @@\n from multiprocessing import cpu_count\n-from typing import Dict\n+from typing import List, Dict\n \n",
        "source_code_with_indent": "from multiprocessing import cpu_count\nfrom typing import Dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from multiprocessing import cpu_count\nfrom typing import List, Dict\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    async def pages(self) -> Dict:\n        return await self._rdp.pages()\n",
        "source_code_len": 75,
        "target_code": "\n    async def pages(self) -> List[Dict]:\n        return await self._rdp.pages()\n",
        "target_code_len": 81,
        "diff_format": "@@ -34,3 +34,3 @@\n \n-    async def pages(self) -> Dict:\n+    async def pages(self) -> List[Dict]:\n         return await self._rdp.pages()\n",
        "source_code_with_indent": "\n    <DED><DED>async def pages(self) -> Dict:\n        <IND>return await self._rdp.pages()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED><DED>async def pages(self) -> List[Dict]:\n        <IND>return await self._rdp.pages()\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]