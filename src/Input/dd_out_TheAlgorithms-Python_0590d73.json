[
  {
    "project": "TheAlgorithms/Python",
    "commit": "0590d736fa61833c8f8591f7aa3bbea88b8274f9",
    "filename": "data_structures/binary_tree/wavelet_tree.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/data_structures/binary_tree/wavelet_tree.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "data_structures/binary_tree/wavelet_tree.py:90:31 Incompatible parameter type [6]: Expected `Node` for 1st positional only parameter to call `rank_till_index` but got `typing.Optional[Node]`.",
    "message": " Expected `Node` for 1st positional only parameter to call `rank_till_index` but got `typing.Optional[Node]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 90,
    "warning_line": "        return rank_till_index(node.left, num, node.map_left[index] - 1)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef rank_till_index(node: Node, num: int, index: int) -> int:\n    \"\"\"\n",
        "source_code_len": 71,
        "target_code": "\ndef rank_till_index(node: Node | None, num: int, index: int) -> int:\n    \"\"\"\n",
        "target_code_len": 78,
        "diff_format": "@@ -65,3 +68,3 @@\n \n-def rank_till_index(node: Node, num: int, index: int) -> int:\n+def rank_till_index(node: Node | None, num: int, index: int) -> int:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>def rank_till_index(node: Node, num: int, index: int) -> int:\n    <IND>",
        "target_code_with_indent": "\n<DED>def rank_till_index(node: Node | None, num: int, index: int) -> int:\n    <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    \"\"\"\n    if index < 0:\n        return 0\n",
        "source_code_len": 43,
        "target_code": "    \"\"\"\n    if index < 0 or node is None:\n        return 0\n",
        "target_code_len": 59,
        "diff_format": "@@ -81,3 +84,3 @@\n     \"\"\"\n-    if index < 0:\n+    if index < 0 or node is None:\n         return 0\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    if index < 0:\n        <IND>return 0\n",
        "target_code_with_indent": "\n    if index < 0 or node is None:\n        <IND>return 0\n"
      }
    ]
  },
  {
    "project": "TheAlgorithms/Python",
    "commit": "0590d736fa61833c8f8591f7aa3bbea88b8274f9",
    "filename": "data_structures/binary_tree/wavelet_tree.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/data_structures/binary_tree/wavelet_tree.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "data_structures/binary_tree/wavelet_tree.py:93:31 Incompatible parameter type [6]: Expected `Node` for 1st positional only parameter to call `rank_till_index` but got `typing.Optional[Node]`.",
    "message": " Expected `Node` for 1st positional only parameter to call `rank_till_index` but got `typing.Optional[Node]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 93,
    "warning_line": "        return rank_till_index(node.right, num, index - node.map_left[index])",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef rank_till_index(node: Node, num: int, index: int) -> int:\n    \"\"\"\n",
        "source_code_len": 71,
        "target_code": "\ndef rank_till_index(node: Node | None, num: int, index: int) -> int:\n    \"\"\"\n",
        "target_code_len": 78,
        "diff_format": "@@ -65,3 +68,3 @@\n \n-def rank_till_index(node: Node, num: int, index: int) -> int:\n+def rank_till_index(node: Node | None, num: int, index: int) -> int:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>def rank_till_index(node: Node, num: int, index: int) -> int:\n    <IND>",
        "target_code_with_indent": "\n<DED>def rank_till_index(node: Node | None, num: int, index: int) -> int:\n    <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    \"\"\"\n    if index < 0:\n        return 0\n",
        "source_code_len": 43,
        "target_code": "    \"\"\"\n    if index < 0 or node is None:\n        return 0\n",
        "target_code_len": 59,
        "diff_format": "@@ -81,3 +84,3 @@\n     \"\"\"\n-    if index < 0:\n+    if index < 0 or node is None:\n         return 0\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    if index < 0:\n        <IND>return 0\n",
        "target_code_with_indent": "\n    if index < 0 or node is None:\n        <IND>return 0\n"
      }
    ]
  },
  {
    "project": "TheAlgorithms/Python",
    "commit": "0590d736fa61833c8f8591f7aa3bbea88b8274f9",
    "filename": "data_structures/binary_tree/wavelet_tree.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/data_structures/binary_tree/wavelet_tree.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "data_structures/binary_tree/wavelet_tree.py:143:12 Incompatible parameter type [6]: Expected `Node` for 1st positional only parameter to call `quantile` but got `typing.Optional[Node]`.",
    "message": " Expected `Node` for 1st positional only parameter to call `quantile` but got `typing.Optional[Node]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 143,
    "warning_line": "            node.left,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef quantile(node: Node, index: int, start: int, end: int) -> int:\n    \"\"\"\n",
        "source_code_len": 76,
        "target_code": "\ndef quantile(node: Node | None, index: int, start: int, end: int) -> int:\n    \"\"\"\n",
        "target_code_len": 83,
        "diff_format": "@@ -116,3 +119,3 @@\n \n-def quantile(node: Node, index: int, start: int, end: int) -> int:\n+def quantile(node: Node | None, index: int, start: int, end: int) -> int:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>def quantile(node: Node, index: int, start: int, end: int) -> int:\n    <IND>",
        "target_code_with_indent": "\n<DED>def quantile(node: Node | None, index: int, start: int, end: int) -> int:\n    <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    \"\"\"\n    if index > (end - start) or start > end:\n        return -1\n",
        "source_code_len": 71,
        "target_code": "    \"\"\"\n    if index > (end - start) or start > end or node is None:\n        return -1\n",
        "target_code_len": 87,
        "diff_format": "@@ -131,3 +134,3 @@\n     \"\"\"\n-    if index > (end - start) or start > end:\n+    if index > (end - start) or start > end or node is None:\n         return -1\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    if index > (end - start) or start > end:\n        <IND>return -1\n",
        "target_code_with_indent": "\n    if index > (end - start) or start > end or node is None:\n        <IND>return -1\n"
      }
    ]
  },
  {
    "project": "TheAlgorithms/Python",
    "commit": "0590d736fa61833c8f8591f7aa3bbea88b8274f9",
    "filename": "data_structures/binary_tree/wavelet_tree.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/data_structures/binary_tree/wavelet_tree.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "data_structures/binary_tree/wavelet_tree.py:150:12 Incompatible parameter type [6]: Expected `Node` for 1st positional only parameter to call `quantile` but got `typing.Optional[Node]`.",
    "message": " Expected `Node` for 1st positional only parameter to call `quantile` but got `typing.Optional[Node]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 150,
    "warning_line": "            node.right,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef quantile(node: Node, index: int, start: int, end: int) -> int:\n    \"\"\"\n",
        "source_code_len": 76,
        "target_code": "\ndef quantile(node: Node | None, index: int, start: int, end: int) -> int:\n    \"\"\"\n",
        "target_code_len": 83,
        "diff_format": "@@ -116,3 +119,3 @@\n \n-def quantile(node: Node, index: int, start: int, end: int) -> int:\n+def quantile(node: Node | None, index: int, start: int, end: int) -> int:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>def quantile(node: Node, index: int, start: int, end: int) -> int:\n    <IND>",
        "target_code_with_indent": "\n<DED>def quantile(node: Node | None, index: int, start: int, end: int) -> int:\n    <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    \"\"\"\n    if index > (end - start) or start > end:\n        return -1\n",
        "source_code_len": 71,
        "target_code": "    \"\"\"\n    if index > (end - start) or start > end or node is None:\n        return -1\n",
        "target_code_len": 87,
        "diff_format": "@@ -131,3 +134,3 @@\n     \"\"\"\n-    if index > (end - start) or start > end:\n+    if index > (end - start) or start > end or node is None:\n         return -1\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    if index > (end - start) or start > end:\n        <IND>return -1\n",
        "target_code_with_indent": "\n    if index > (end - start) or start > end or node is None:\n        <IND>return -1\n"
      }
    ]
  },
  {
    "project": "TheAlgorithms/Python",
    "commit": "0590d736fa61833c8f8591f7aa3bbea88b8274f9",
    "filename": "data_structures/binary_tree/wavelet_tree.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/data_structures/binary_tree/wavelet_tree.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "data_structures/binary_tree/wavelet_tree.py:186:8 Incompatible parameter type [6]: Expected `Node` for 1st positional only parameter to call `range_counting` but got `typing.Optional[Node]`.",
    "message": " Expected `Node` for 1st positional only parameter to call `range_counting` but got `typing.Optional[Node]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 186,
    "warning_line": "        node.left,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def range_counting(\n    node: Node, start: int, end: int, start_num: int, end_num: int\n) -> int:\n    \"\"\"\n    Returns the number of elememts in range [start_num, end_num]\n    in interval [start, end] in the list\n",
        "source_code_len": 211,
        "target_code": "def range_counting(\n    node: Node | None, start: int, end: int, start_num: int, end_num: int\n) -> int:\n    \"\"\"\n    Returns the number of elements in range [start_num, end_num]\n    in interval [start, end] in the list\n",
        "target_code_len": 218,
        "diff_format": "@@ -157,6 +160,6 @@\n def range_counting(\n-    node: Node, start: int, end: int, start_num: int, end_num: int\n+    node: Node | None, start: int, end: int, start_num: int, end_num: int\n ) -> int:\n     \"\"\"\n-    Returns the number of elememts in range [start_num, end_num]\n+    Returns the number of elements in range [start_num, end_num]\n     in interval [start, end] in the list\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "<DED><DED>def range_counting(\n    node: Node, start: int, end: int, start_num: int, end_num: int\n) -> int:\n    <IND>",
        "target_code_with_indent": "<DED><DED>def range_counting(\n    node: Node | None, start: int, end: int, start_num: int, end_num: int\n) -> int:\n    <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        start > end\n        or start_num > end_num\n",
        "source_code_len": 51,
        "target_code": "        start > end\n        or node is None\n        or start_num > end_num\n",
        "target_code_len": 75,
        "diff_format": "@@ -177,2 +180,3 @@\n         start > end\n+        or node is None\n         or start_num > end_num\n",
        "source_code_with_indent": "        start > end\n        or start_num > end_num\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        start > end\n        or node is None\n        or start_num > end_num\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "TheAlgorithms/Python",
    "commit": "0590d736fa61833c8f8591f7aa3bbea88b8274f9",
    "filename": "data_structures/binary_tree/wavelet_tree.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/data_structures/binary_tree/wavelet_tree.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "data_structures/binary_tree/wavelet_tree.py:193:8 Incompatible parameter type [6]: Expected `Node` for 1st positional only parameter to call `range_counting` but got `typing.Optional[Node]`.",
    "message": " Expected `Node` for 1st positional only parameter to call `range_counting` but got `typing.Optional[Node]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 193,
    "warning_line": "        node.right,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def range_counting(\n    node: Node, start: int, end: int, start_num: int, end_num: int\n) -> int:\n    \"\"\"\n    Returns the number of elememts in range [start_num, end_num]\n    in interval [start, end] in the list\n",
        "source_code_len": 211,
        "target_code": "def range_counting(\n    node: Node | None, start: int, end: int, start_num: int, end_num: int\n) -> int:\n    \"\"\"\n    Returns the number of elements in range [start_num, end_num]\n    in interval [start, end] in the list\n",
        "target_code_len": 218,
        "diff_format": "@@ -157,6 +160,6 @@\n def range_counting(\n-    node: Node, start: int, end: int, start_num: int, end_num: int\n+    node: Node | None, start: int, end: int, start_num: int, end_num: int\n ) -> int:\n     \"\"\"\n-    Returns the number of elememts in range [start_num, end_num]\n+    Returns the number of elements in range [start_num, end_num]\n     in interval [start, end] in the list\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "<DED><DED>def range_counting(\n    node: Node, start: int, end: int, start_num: int, end_num: int\n) -> int:\n    <IND>",
        "target_code_with_indent": "<DED><DED>def range_counting(\n    node: Node | None, start: int, end: int, start_num: int, end_num: int\n) -> int:\n    <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        start > end\n        or start_num > end_num\n",
        "source_code_len": 51,
        "target_code": "        start > end\n        or node is None\n        or start_num > end_num\n",
        "target_code_len": 75,
        "diff_format": "@@ -177,2 +180,3 @@\n         start > end\n+        or node is None\n         or start_num > end_num\n",
        "source_code_with_indent": "        start > end\n        or start_num > end_num\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        start > end\n        or node is None\n        or start_num > end_num\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]