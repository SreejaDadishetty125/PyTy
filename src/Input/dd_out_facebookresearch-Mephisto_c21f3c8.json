[
  {
    "project": "facebookresearch/Mephisto",
    "commit": "c21f3c8a655d7598da118083600214d52c958412",
    "filename": "test/core/test_argparse.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/facebookresearch-Mephisto/test/core/test_argparse.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "test/core/test_argparse.py:120:16 Incompatible parameter type [6]: Expected `typing.Sized` for 1st positional only parameter to call `len` but got `ArgumentGroup`.",
    "message": " Expected `typing.Sized` for 1st positional only parameter to call `len` but got `ArgumentGroup`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 120,
    "warning_line": "            len(group_dict[\"__NO_TITLE__\"]),",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        self.assertEqual(\n            len(group_dict[\"__NO_TITLE__\"]),\n            0,\n",
        "source_code_len": 86,
        "target_code": "        self.assertEqual(\n            len(group_dict[\"__NO_TITLE__\"]),  # type: ignore\n            0,\n",
        "target_code_len": 102,
        "diff_format": "@@ -119,3 +119,3 @@\n         self.assertEqual(\n-            len(group_dict[\"__NO_TITLE__\"]),\n+            len(group_dict[\"__NO_TITLE__\"]),  # type: ignore\n             0,\n",
        "source_code_with_indent": "        self.assertEqual(\n            len(group_dict[\"__NO_TITLE__\"]),\n            0,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self.assertEqual(\n            len(group_dict[\"__NO_TITLE__\"]),  # type: ignore\n            0,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "facebookresearch/Mephisto",
    "commit": "c21f3c8a655d7598da118083600214d52c958412",
    "filename": "test/core/test_argparse.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/facebookresearch-Mephisto/test/core/test_argparse.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "test/core/test_argparse.py:134:16 Incompatible parameter type [6]: Expected `typing.Sized` for 1st positional only parameter to call `len` but got `ArgumentGroup`.",
    "message": " Expected `typing.Sized` for 1st positional only parameter to call `len` but got `ArgumentGroup`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 134,
    "warning_line": "            len(group_dict[\"__NO_TITLE__\"]),",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        self.assertEqual(\n            len(group_dict[\"__NO_TITLE__\"]),\n            0,\n",
        "source_code_len": 86,
        "target_code": "        self.assertEqual(\n            len(group_dict[\"__NO_TITLE__\"]),  # type: ignore\n            0,\n",
        "target_code_len": 102,
        "diff_format": "@@ -133,3 +133,3 @@\n         self.assertEqual(\n-            len(group_dict[\"__NO_TITLE__\"]),\n+            len(group_dict[\"__NO_TITLE__\"]),  # type: ignore\n             0,\n",
        "source_code_with_indent": "        self.assertEqual(\n            len(group_dict[\"__NO_TITLE__\"]),\n            0,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self.assertEqual(\n            len(group_dict[\"__NO_TITLE__\"]),  # type: ignore\n            0,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "facebookresearch/Mephisto",
    "commit": "c21f3c8a655d7598da118083600214d52c958412",
    "filename": "test/core/test_supervisor.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/facebookresearch-Mephisto/test/core/test_supervisor.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "test/core/test_supervisor.py:67:8 Incompatible return type [7]: Expected `InitializationData` but got `typing.List[typing.Any]`.",
    "message": " Expected `InitializationData` but got `typing.List[typing.Any]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 67,
    "warning_line": "        return [mock_data, mock_data]",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom mephisto.server.blueprints.mock.mock_blueprint import MockBlueprint\nfrom mephisto.server.architects.mock_architect import MockArchitect\n",
        "source_code_len": 142,
        "target_code": "\nfrom typing import List\n\nfrom mephisto.server.blueprints.mock.mock_blueprint import MockBlueprint\nfrom mephisto.server.blueprints.mock.mock_task_runner import MockTaskRunner\nfrom mephisto.server.architects.mock_architect import MockArchitect\n",
        "target_code_len": 243,
        "diff_format": "@@ -13,3 +13,6 @@\n \n+from typing import List\n+\n from mephisto.server.blueprints.mock.mock_blueprint import MockBlueprint\n+from mephisto.server.blueprints.mock.mock_task_runner import MockTaskRunner\n from mephisto.server.architects.mock_architect import MockArchitect\n",
        "source_code_with_indent": "\nfrom mephisto.server.blueprints.mock.mock_blueprint import MockBlueprint\nfrom mephisto.server.architects.mock_architect import MockArchitect\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import List\n\nfrom mephisto.server.blueprints.mock.mock_blueprint import MockBlueprint\nfrom mephisto.server.blueprints.mock.mock_task_runner import MockTaskRunner\nfrom mephisto.server.architects.mock_architect import MockArchitect\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def get_mock_assignment_data_array(self) -> InitializationData:\n        mock_data = MockBlueprint.TaskRunnerClass.get_mock_assignment_data()\n        return [mock_data, mock_data]\n",
        "source_code_len": 184,
        "target_code": "\n    def get_mock_assignment_data_array(self) -> List[InitializationData]:\n        mock_data = MockTaskRunner.get_mock_assignment_data()\n        return [mock_data, mock_data]\n",
        "target_code_len": 175,
        "diff_format": "@@ -64,4 +67,4 @@\n \n-    def get_mock_assignment_data_array(self) -> InitializationData:\n-        mock_data = MockBlueprint.TaskRunnerClass.get_mock_assignment_data()\n+    def get_mock_assignment_data_array(self) -> List[InitializationData]:\n+        mock_data = MockTaskRunner.get_mock_assignment_data()\n         return [mock_data, mock_data]\n",
        "source_code_with_indent": "\n    <DED>def get_mock_assignment_data_array(self) -> InitializationData:\n        <IND>mock_data = MockBlueprint.TaskRunnerClass.get_mock_assignment_data()\n        return [mock_data, mock_data]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def get_mock_assignment_data_array(self) -> List[InitializationData]:\n        <IND>mock_data = MockTaskRunner.get_mock_assignment_data()\n        return [mock_data, mock_data]\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "facebookresearch/Mephisto",
    "commit": "c21f3c8a655d7598da118083600214d52c958412",
    "filename": "test/core/test_task_launcher.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/facebookresearch-Mephisto/test/core/test_task_launcher.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "test/core/test_task_launcher.py:40:8 Incompatible return type [7]: Expected `InitializationData` but got `typing.List[typing.Any]`.",
    "message": " Expected `InitializationData` but got `typing.List[typing.Any]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 40,
    "warning_line": "        return [MockBlueprint.TaskRunnerClass.get_mock_assignment_data()]",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import tempfile\n\n",
        "source_code_len": 17,
        "target_code": "import tempfile\nfrom typing import List\n\n",
        "target_code_len": 41,
        "diff_format": "@@ -10,2 +10,3 @@\n import tempfile\n+from typing import List\n \n",
        "source_code_with_indent": "import tempfile\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import tempfile\nfrom typing import List\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from mephisto.server.blueprints.mock.mock_blueprint import MockBlueprint\n\n",
        "source_code_len": 74,
        "target_code": "from mephisto.server.blueprints.mock.mock_blueprint import MockBlueprint\nfrom mephisto.server.blueprints.mock.mock_task_runner import MockTaskRunner\n\n",
        "target_code_len": 150,
        "diff_format": "@@ -20,2 +21,3 @@\n from mephisto.server.blueprints.mock.mock_blueprint import MockBlueprint\n+from mephisto.server.blueprints.mock.mock_task_runner import MockTaskRunner\n \n",
        "source_code_with_indent": "from mephisto.server.blueprints.mock.mock_blueprint import MockBlueprint\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from mephisto.server.blueprints.mock.mock_blueprint import MockBlueprint\nfrom mephisto.server.blueprints.mock.mock_task_runner import MockTaskRunner\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def get_mock_assignment_data_array(self) -> InitializationData:\n        return [MockBlueprint.TaskRunnerClass.get_mock_assignment_data()]\n\n",
        "source_code_len": 144,
        "target_code": "\n    def get_mock_assignment_data_array(self) -> List[InitializationData]:\n        return [MockTaskRunner.get_mock_assignment_data()]\n\n",
        "target_code_len": 135,
        "diff_format": "@@ -38,4 +40,4 @@\n \n-    def get_mock_assignment_data_array(self) -> InitializationData:\n-        return [MockBlueprint.TaskRunnerClass.get_mock_assignment_data()]\n+    def get_mock_assignment_data_array(self) -> List[InitializationData]:\n+        return [MockTaskRunner.get_mock_assignment_data()]\n \n",
        "source_code_with_indent": "\n    <DED>def get_mock_assignment_data_array(self) -> InitializationData:\n        <IND>return [MockBlueprint.TaskRunnerClass.get_mock_assignment_data()]\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def get_mock_assignment_data_array(self) -> List[InitializationData]:\n        <IND>return [MockTaskRunner.get_mock_assignment_data()]\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]