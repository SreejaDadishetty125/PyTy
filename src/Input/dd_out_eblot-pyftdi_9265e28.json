[
  {
    "project": "eblot/pyftdi",
    "commit": "9265e288cc1adacbfbd4b84b4362609c1b4a275d",
    "filename": "pyftdi/ftdi.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/eblot-pyftdi/pyftdi/ftdi.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pyftdi/ftdi.py:394:8 Incompatible return type [7]: Expected `List[Tuple[str, str]]` but got `List[Tuple[UsbDeviceDescriptor, int]]`.",
    "message": " Expected `List[Tuple[str, str]]` but got `List[Tuple[UsbDeviceDescriptor, int]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 394,
    "warning_line": "        return UsbTools.list_devices(url or 'ftdi:///?',",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @classmethod\n    def list_devices(cls, url: Optional[str] = None) -> List[Tuple[str, str]]:\n        \"\"\"List of URLs of connected FTDI devices.\n",
        "source_code_len": 147,
        "target_code": "    @classmethod\n    def list_devices(cls, url: Optional[str] = None) -> \\\n            List[Tuple[UsbDeviceDescriptor, int]]:\n        \"\"\"List of URLs of connected FTDI devices.\n",
        "target_code_len": 177,
        "diff_format": "@@ -387,3 +387,4 @@\n     @classmethod\n-    def list_devices(cls, url: Optional[str] = None) -> List[Tuple[str, str]]:\n+    def list_devices(cls, url: Optional[str] = None) -> \\\n+            List[Tuple[UsbDeviceDescriptor, int]]:\n         \"\"\"List of URLs of connected FTDI devices.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "    <DED>@classmethod\n    def list_devices(cls, url: Optional[str] = None) -> List[Tuple[str, str]]:\n        <IND>",
        "target_code_with_indent": "    <DED>@classmethod\n    def list_devices(cls, url: Optional[str] = None) ->            List[Tuple[UsbDeviceDescriptor, int]]:\n        <IND>"
      }
    ]
  },
  {
    "project": "eblot/pyftdi",
    "commit": "9265e288cc1adacbfbd4b84b4362609c1b4a275d",
    "filename": "pyftdi/ftdi.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/eblot-pyftdi/pyftdi/ftdi.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pyftdi/ftdi.py:485:8 Incompatible return type [7]: Expected `Tuple[str]` but got `typing.Tuple[typing.Any, ...]`.",
    "message": " Expected `Tuple[str]` but got `typing.Tuple[typing.Any, ...]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 485,
    "warning_line": "        return tuple(status)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def decode_modem_status(cls, value: bytes, error_only: bool = False) -> \\\n            Tuple[str]:\n        \"\"\"Decode the FTDI modem status bitfield into short strings.\n",
        "source_code_len": 171,
        "target_code": "    def decode_modem_status(cls, value: bytes, error_only: bool = False) -> \\\n            Tuple[str, ...]:\n        \"\"\"Decode the FTDI modem status bitfield into short strings.\n",
        "target_code_len": 176,
        "diff_format": "@@ -470,3 +471,3 @@\n     def decode_modem_status(cls, value: bytes, error_only: bool = False) -> \\\n-            Tuple[str]:\n+            Tuple[str, ...]:\n         \"\"\"Decode the FTDI modem status bitfield into short strings.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "    def decode_modem_status(cls, value: bytes, error_only: bool = False) ->            Tuple[str]:\n        <IND>",
        "target_code_with_indent": "    def decode_modem_status(cls, value: bytes, error_only: bool = False) ->            Tuple[str, ...]:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def modem_status(self) -> Tuple[str]:\n        \"\"\"Provide the current modem status as a tuple of set signals\n",
        "source_code_len": 113,
        "target_code": "\n    def modem_status(self) -> Tuple[str, ...]:\n        \"\"\"Provide the current modem status as a tuple of set signals\n",
        "target_code_len": 118,
        "diff_format": "@@ -1353,3 +1354,3 @@\n \n-    def modem_status(self) -> Tuple[str]:\n+    def modem_status(self) -> Tuple[str, ...]:\n         \"\"\"Provide the current modem status as a tuple of set signals\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def modem_status(self) -> Tuple[str]:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def modem_status(self) -> Tuple[str, ...]:\n        <IND>"
      }
    ]
  },
  {
    "project": "eblot/pyftdi",
    "commit": "9265e288cc1adacbfbd4b84b4362609c1b4a275d",
    "filename": "pyftdi/ftdi.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/eblot-pyftdi/pyftdi/ftdi.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pyftdi/ftdi.py:800:8 Incompatible return type [7]: Expected `float` but got `None`.",
    "message": " Expected `float` but got `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 800,
    "warning_line": "        return self.open_bitbang_from_device(device, interface,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                                 latency: int = 16, baudrate: int = 1000000,\n                                 sync: bool = False) -> None:\n        \"\"\"Open a new interface to the specified FTDI device in bitbang mode.\n",
        "source_code_len": 217,
        "target_code": "                                 latency: int = 16, baudrate: int = 1000000,\n                                 sync: bool = False) -> int:\n        \"\"\"Open a new interface to the specified FTDI device in bitbang mode.\n",
        "target_code_len": 216,
        "diff_format": "@@ -843,3 +844,3 @@\n                                  latency: int = 16, baudrate: int = 1000000,\n-                                 sync: bool = False) -> None:\n+                                 sync: bool = False) -> int:\n         \"\"\"Open a new interface to the specified FTDI device in bitbang mode.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "                                 latency: int = 16, baudrate: int = 1000000,\n                                 sync: bool = False) -> None:\n        <IND>",
        "target_code_with_indent": "                                 latency: int = 16, baudrate: int = 1000000,\n                                 sync: bool = False) -> int:\n        <IND>"
      }
    ]
  },
  {
    "project": "eblot/pyftdi",
    "commit": "9265e288cc1adacbfbd4b84b4362609c1b4a275d",
    "filename": "pyftdi/ftdi.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/eblot-pyftdi/pyftdi/ftdi.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pyftdi/ftdi.py:835:8 Incompatible return type [7]: Expected `float` but got `None`.",
    "message": " Expected `float` but got `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 835,
    "warning_line": "        return self.open_bitbang_from_device(device, interface,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                                 latency: int = 16, baudrate: int = 1000000,\n                                 sync: bool = False) -> None:\n        \"\"\"Open a new interface to the specified FTDI device in bitbang mode.\n",
        "source_code_len": 217,
        "target_code": "                                 latency: int = 16, baudrate: int = 1000000,\n                                 sync: bool = False) -> int:\n        \"\"\"Open a new interface to the specified FTDI device in bitbang mode.\n",
        "target_code_len": 216,
        "diff_format": "@@ -843,3 +844,3 @@\n                                  latency: int = 16, baudrate: int = 1000000,\n-                                 sync: bool = False) -> None:\n+                                 sync: bool = False) -> int:\n         \"\"\"Open a new interface to the specified FTDI device in bitbang mode.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "                                 latency: int = 16, baudrate: int = 1000000,\n                                 sync: bool = False) -> None:\n        <IND>",
        "target_code_with_indent": "                                 latency: int = 16, baudrate: int = 1000000,\n                                 sync: bool = False) -> int:\n        <IND>"
      }
    ]
  },
  {
    "project": "eblot/pyftdi",
    "commit": "9265e288cc1adacbfbd4b84b4362609c1b4a275d",
    "filename": "pyftdi/ftdi.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/eblot-pyftdi/pyftdi/ftdi.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pyftdi/ftdi.py:879:8 Incompatible return type [7]: Expected `None` but got `int`.",
    "message": " Expected `None` but got `int`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 879,
    "warning_line": "        return self._baudrate",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                                 latency: int = 16, baudrate: int = 1000000,\n                                 sync: bool = False) -> None:\n        \"\"\"Open a new interface to the specified FTDI device in bitbang mode.\n",
        "source_code_len": 217,
        "target_code": "                                 latency: int = 16, baudrate: int = 1000000,\n                                 sync: bool = False) -> int:\n        \"\"\"Open a new interface to the specified FTDI device in bitbang mode.\n",
        "target_code_len": 216,
        "diff_format": "@@ -843,3 +844,3 @@\n                                  latency: int = 16, baudrate: int = 1000000,\n-                                 sync: bool = False) -> None:\n+                                 sync: bool = False) -> int:\n         \"\"\"Open a new interface to the specified FTDI device in bitbang mode.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "                                 latency: int = 16, baudrate: int = 1000000,\n                                 sync: bool = False) -> None:\n        <IND>",
        "target_code_with_indent": "                                 latency: int = 16, baudrate: int = 1000000,\n                                 sync: bool = False) -> int:\n        <IND>"
      }
    ]
  },
  {
    "project": "eblot/pyftdi",
    "commit": "9265e288cc1adacbfbd4b84b4362609c1b4a275d",
    "filename": "pyftdi/ftdi.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/eblot-pyftdi/pyftdi/ftdi.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pyftdi/ftdi.py:1646:46 Incompatible parameter type [6]: Expected `int` for 1st positional only parameter to call `Ftdi._check_eeprom_size` but got `Optional[int]`.",
    "message": " Expected `int` for 1st positional only parameter to call `Ftdi._check_eeprom_size` but got `Optional[int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1646,
    "warning_line": "        eeprom_size = self._check_eeprom_size(eeprom_size)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _check_eeprom_size(self, eeprom_size: int) -> int:\n        if self.device_version in self.INT_EEPROMS:\n",
        "source_code_len": 112,
        "target_code": "\n    def _check_eeprom_size(self, eeprom_size: Optional[int]) -> int:\n        if self.device_version in self.INT_EEPROMS:\n",
        "target_code_len": 122,
        "diff_format": "@@ -2125,3 +2126,3 @@\n \n-    def _check_eeprom_size(self, eeprom_size: int) -> int:\n+    def _check_eeprom_size(self, eeprom_size: Optional[int]) -> int:\n         if self.device_version in self.INT_EEPROMS:\n",
        "source_code_with_indent": "\n    <DED><DED><DED>def _check_eeprom_size(self, eeprom_size: int) -> int:\n        <IND>if self.device_version in self.INT_EEPROMS:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED><DED><DED>def _check_eeprom_size(self, eeprom_size: Optional[int]) -> int:\n        <IND>if self.device_version in self.INT_EEPROMS:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "eblot/pyftdi",
    "commit": "9265e288cc1adacbfbd4b84b4362609c1b4a275d",
    "filename": "pyftdi/ftdi.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/eblot-pyftdi/pyftdi/ftdi.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pyftdi/ftdi.py:1688:46 Incompatible parameter type [6]: Expected `int` for 1st positional only parameter to call `Ftdi._check_eeprom_size` but got `Optional[int]`.",
    "message": " Expected `int` for 1st positional only parameter to call `Ftdi._check_eeprom_size` but got `Optional[int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1688,
    "warning_line": "        eeprom_size = self._check_eeprom_size(eeprom_size)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _check_eeprom_size(self, eeprom_size: int) -> int:\n        if self.device_version in self.INT_EEPROMS:\n",
        "source_code_len": 112,
        "target_code": "\n    def _check_eeprom_size(self, eeprom_size: Optional[int]) -> int:\n        if self.device_version in self.INT_EEPROMS:\n",
        "target_code_len": 122,
        "diff_format": "@@ -2125,3 +2126,3 @@\n \n-    def _check_eeprom_size(self, eeprom_size: int) -> int:\n+    def _check_eeprom_size(self, eeprom_size: Optional[int]) -> int:\n         if self.device_version in self.INT_EEPROMS:\n",
        "source_code_with_indent": "\n    <DED><DED><DED>def _check_eeprom_size(self, eeprom_size: int) -> int:\n        <IND>if self.device_version in self.INT_EEPROMS:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED><DED><DED>def _check_eeprom_size(self, eeprom_size: Optional[int]) -> int:\n        <IND>if self.device_version in self.INT_EEPROMS:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "eblot/pyftdi",
    "commit": "9265e288cc1adacbfbd4b84b4362609c1b4a275d",
    "filename": "pyftdi/ftdi.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/eblot-pyftdi/pyftdi/ftdi.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pyftdi/ftdi.py:2005:57 Incompatible parameter type [6]: Expected `Union[bytes, str]` for 1st positional only parameter to call `ord` but got `int`.",
    "message": " Expected `Union[bytes, str]` for 1st positional only parameter to call `ord` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 2005,
    "warning_line": "            raise FtdiError(\"Invalid command @ %d\" % ord(bytes_[1]))",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        if (len(bytes_) >= 2) and (bytes_[0] == '\\xfa'):\n            raise FtdiError(\"Invalid command @ %d\" % ord(bytes_[1]))\n\n",
        "source_code_len": 127,
        "target_code": "        if (len(bytes_) >= 2) and (bytes_[0] == '\\xfa'):\n            raise FtdiError(\"Invalid command @ %d\" % bytes_[1])\n\n",
        "target_code_len": 122,
        "diff_format": "@@ -2004,3 +2005,3 @@\n         if (len(bytes_) >= 2) and (bytes_[0] == '\\xfa'):\n-            raise FtdiError(\"Invalid command @ %d\" % ord(bytes_[1]))\n+            raise FtdiError(\"Invalid command @ %d\" % bytes_[1])\n \n",
        "source_code_with_indent": "        if (len(bytes_) >= 2) and (bytes_[0] == '\\xfa'):\n            <IND>raise FtdiError(\"Invalid command @ %d\" % ord(bytes_[1]))\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        if (len(bytes_) >= 2) and (bytes_[0] == '\\xfa'):\n            <IND>raise FtdiError(\"Invalid command @ %d\" % bytes_[1])\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]