[
  {
    "project": "twisted/twisted",
    "commit": "5f034fadf558ba1f92d75de35e5c9d8e66dd0b76",
    "filename": "src/twisted/python/util.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/twisted-twisted/src/twisted/python/util.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/twisted/python/util.py:211:15 Unsupported operand [58]: `in` is not supported for right operand type `object`.",
    "message": " `in` is not supported for right operand type `object`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 211,
    "warning_line": "            if not (k in other) or not (other[k] == v):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import Callable, Sequence, Union, Tuple\n\n",
        "source_code_len": 54,
        "target_code": "\nfrom typing import Callable, Mapping, MutableMapping, Sequence, Union, Tuple\n\n",
        "target_code_len": 79,
        "diff_format": "@@ -28,3 +28,3 @@\n \n-from typing import Callable, Sequence, Union, Tuple\n+from typing import Callable, Mapping, MutableMapping, Sequence, Union, Tuple\n \n",
        "source_code_with_indent": "\n<DED>from typing import Callable, Sequence, Union, Tuple\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>from typing import Callable, Mapping, MutableMapping, Sequence, Union, Tuple\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def __eq__(self, other: object) -> bool:\n        for k, v in self.items():\n            if not (k in other) or not (other[k] == v):\n                return 0\n        return len(self) == len(other)\n\n",
        "source_code_len": 200,
        "target_code": "    def __eq__(self, other: object) -> bool:\n        if isinstance(other, Mapping):\n            for k, v in self.items():\n                if k not in other or other[k] != v:\n                    return False\n            return len(self) == len(other)\n        else:\n            return NotImplemented\n\n",
        "target_code_len": 299,
        "diff_format": "@@ -209,6 +226,9 @@\n     def __eq__(self, other: object) -> bool:\n-        for k, v in self.items():\n-            if not (k in other) or not (other[k] == v):\n-                return 0\n-        return len(self) == len(other)\n+        if isinstance(other, Mapping):\n+            for k, v in self.items():\n+                if k not in other or other[k] != v:\n+                    return False\n+            return len(self) == len(other)\n+        else:\n+            return NotImplemented\n \n",
        "source_code_with_indent": "    <DED>def __eq__(self, other: object) -> bool:\n        <IND>for k, v in self.items():\n            <IND>if not (k in other) or not (other[k] == v):\n                <IND>return 0\n        <DED><DED>return len(self) == len(other)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def __eq__(self, other: object) -> bool:\n        <IND>if isinstance(other, Mapping):\n            <IND>for k, v in self.items():\n                <IND>if k not in other or other[k] != v:\n                    <IND>return False\n            <DED><DED>return len(self) == len(other)\n        <DED>else:\n            <IND>return NotImplemented\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "twisted/twisted",
    "commit": "5f034fadf558ba1f92d75de35e5c9d8e66dd0b76",
    "filename": "src/twisted/python/util.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/twisted-twisted/src/twisted/python/util.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/twisted/python/util.py:212:16 Incompatible return type [7]: Expected `bool` but got `int`.",
    "message": " Expected `bool` but got `int`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 212,
    "warning_line": "                return 0",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import Callable, Sequence, Union, Tuple\n\n",
        "source_code_len": 54,
        "target_code": "\nfrom typing import Callable, Mapping, MutableMapping, Sequence, Union, Tuple\n\n",
        "target_code_len": 79,
        "diff_format": "@@ -28,3 +28,3 @@\n \n-from typing import Callable, Sequence, Union, Tuple\n+from typing import Callable, Mapping, MutableMapping, Sequence, Union, Tuple\n \n",
        "source_code_with_indent": "\n<DED>from typing import Callable, Sequence, Union, Tuple\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>from typing import Callable, Mapping, MutableMapping, Sequence, Union, Tuple\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def __eq__(self, other: object) -> bool:\n        for k, v in self.items():\n            if not (k in other) or not (other[k] == v):\n                return 0\n        return len(self) == len(other)\n\n",
        "source_code_len": 200,
        "target_code": "    def __eq__(self, other: object) -> bool:\n        if isinstance(other, Mapping):\n            for k, v in self.items():\n                if k not in other or other[k] != v:\n                    return False\n            return len(self) == len(other)\n        else:\n            return NotImplemented\n\n",
        "target_code_len": 299,
        "diff_format": "@@ -209,6 +226,9 @@\n     def __eq__(self, other: object) -> bool:\n-        for k, v in self.items():\n-            if not (k in other) or not (other[k] == v):\n-                return 0\n-        return len(self) == len(other)\n+        if isinstance(other, Mapping):\n+            for k, v in self.items():\n+                if k not in other or other[k] != v:\n+                    return False\n+            return len(self) == len(other)\n+        else:\n+            return NotImplemented\n \n",
        "source_code_with_indent": "    <DED>def __eq__(self, other: object) -> bool:\n        <IND>for k, v in self.items():\n            <IND>if not (k in other) or not (other[k] == v):\n                <IND>return 0\n        <DED><DED>return len(self) == len(other)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def __eq__(self, other: object) -> bool:\n        <IND>if isinstance(other, Mapping):\n            <IND>for k, v in self.items():\n                <IND>if k not in other or other[k] != v:\n                    <IND>return False\n            <DED><DED>return len(self) == len(other)\n        <DED>else:\n            <IND>return NotImplemented\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "twisted/twisted",
    "commit": "5f034fadf558ba1f92d75de35e5c9d8e66dd0b76",
    "filename": "src/twisted/python/util.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/twisted-twisted/src/twisted/python/util.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/twisted/python/util.py:213:32 Incompatible parameter type [6]: Expected `typing.Sized` for 1st positional only parameter to call `len` but got `object`.",
    "message": " Expected `typing.Sized` for 1st positional only parameter to call `len` but got `object`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 213,
    "warning_line": "        return len(self) == len(other)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import Callable, Sequence, Union, Tuple\n\n",
        "source_code_len": 54,
        "target_code": "\nfrom typing import Callable, Mapping, MutableMapping, Sequence, Union, Tuple\n\n",
        "target_code_len": 79,
        "diff_format": "@@ -28,3 +28,3 @@\n \n-from typing import Callable, Sequence, Union, Tuple\n+from typing import Callable, Mapping, MutableMapping, Sequence, Union, Tuple\n \n",
        "source_code_with_indent": "\n<DED>from typing import Callable, Sequence, Union, Tuple\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>from typing import Callable, Mapping, MutableMapping, Sequence, Union, Tuple\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def __eq__(self, other: object) -> bool:\n        for k, v in self.items():\n            if not (k in other) or not (other[k] == v):\n                return 0\n        return len(self) == len(other)\n\n",
        "source_code_len": 200,
        "target_code": "    def __eq__(self, other: object) -> bool:\n        if isinstance(other, Mapping):\n            for k, v in self.items():\n                if k not in other or other[k] != v:\n                    return False\n            return len(self) == len(other)\n        else:\n            return NotImplemented\n\n",
        "target_code_len": 299,
        "diff_format": "@@ -209,6 +226,9 @@\n     def __eq__(self, other: object) -> bool:\n-        for k, v in self.items():\n-            if not (k in other) or not (other[k] == v):\n-                return 0\n-        return len(self) == len(other)\n+        if isinstance(other, Mapping):\n+            for k, v in self.items():\n+                if k not in other or other[k] != v:\n+                    return False\n+            return len(self) == len(other)\n+        else:\n+            return NotImplemented\n \n",
        "source_code_with_indent": "    <DED>def __eq__(self, other: object) -> bool:\n        <IND>for k, v in self.items():\n            <IND>if not (k in other) or not (other[k] == v):\n                <IND>return 0\n        <DED><DED>return len(self) == len(other)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def __eq__(self, other: object) -> bool:\n        <IND>if isinstance(other, Mapping):\n            <IND>for k, v in self.items():\n                <IND>if k not in other or other[k] != v:\n                    <IND>return False\n            <DED><DED>return len(self) == len(other)\n        <DED>else:\n            <IND>return NotImplemented\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]