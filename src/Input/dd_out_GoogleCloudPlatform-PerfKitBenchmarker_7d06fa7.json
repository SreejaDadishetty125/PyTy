[
  {
    "project": "GoogleCloudPlatform/PerfKitBenchmarker",
    "commit": "7d06fa7c2f7d6e31130a8520f40c37c79e0b1f4e",
    "filename": "perfkitbenchmarker/providers/gcp/bigquery.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/GoogleCloudPlatform-PerfKitBenchmarker/perfkitbenchmarker/providers/gcp/bigquery.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "perfkitbenchmarker/providers/gcp/bigquery.py:126:47 Invalid type [31]: Expression `(float, typing.Dict[(str, str)])` is not a valid type.",
    "message": " Expression `(float, typing.Dict[(str, str)])` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 126,
    "warning_line": "  def ExecuteQuery(self, query_name: Text) -> (float, Dict[str, str]):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import re\nfrom typing import Dict, List, Text\n\n",
        "source_code_len": 47,
        "target_code": "import re\nfrom typing import Dict, List, Text, Tuple\n\n",
        "target_code_len": 54,
        "diff_format": "@@ -21,3 +21,3 @@\n import re\n-from typing import Dict, List, Text\n+from typing import Dict, List, Text, Tuple\n \n",
        "source_code_with_indent": "import re\nfrom typing import Dict, List, Text\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import re\nfrom typing import Dict, List, Text, Tuple\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n  def ExecuteQuery(self, query_name: Text) -> (float, Dict[str, str]):\n    \"\"\"Executes a query and returns performance details.\n",
        "source_code_len": 129,
        "target_code": "\n  def ExecuteQuery(self, query_name: Text) -> Tuple[float, Dict[str, str]]:\n    \"\"\"Executes a query and returns performance details.\n",
        "target_code_len": 134,
        "diff_format": "@@ -125,3 +125,3 @@\n \n-  def ExecuteQuery(self, query_name: Text) -> (float, Dict[str, str]):\n+  def ExecuteQuery(self, query_name: Text) -> Tuple[float, Dict[str, str]]:\n     \"\"\"Executes a query and returns performance details.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n  <DED>def ExecuteQuery(self, query_name: Text) -> (float, Dict[str, str]):\n    <IND>",
        "target_code_with_indent": "\n  <DED>def ExecuteQuery(self, query_name: Text) -> Tuple[float, Dict[str, str]]:\n    <IND>"
      }
    ]
  },
  {
    "project": "GoogleCloudPlatform/PerfKitBenchmarker",
    "commit": "7d06fa7c2f7d6e31130a8520f40c37c79e0b1f4e",
    "filename": "perfkitbenchmarker/providers/gcp/bigquery.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/GoogleCloudPlatform-PerfKitBenchmarker/perfkitbenchmarker/providers/gcp/bigquery.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "perfkitbenchmarker/providers/gcp/bigquery.py:189:47 Invalid type [31]: Expression `(float, typing.Dict[(str, str)])` is not a valid type.",
    "message": " Expression `(float, typing.Dict[(str, str)])` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 189,
    "warning_line": "  def ExecuteQuery(self, query_name: Text) -> (float, Dict[str, str]):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import re\nfrom typing import Dict, List, Text\n\n",
        "source_code_len": 47,
        "target_code": "import re\nfrom typing import Dict, List, Text, Tuple\n\n",
        "target_code_len": 54,
        "diff_format": "@@ -21,3 +21,3 @@\n import re\n-from typing import Dict, List, Text\n+from typing import Dict, List, Text, Tuple\n \n",
        "source_code_with_indent": "import re\nfrom typing import Dict, List, Text\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import re\nfrom typing import Dict, List, Text, Tuple\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n  def ExecuteQuery(self, query_name: Text) -> (float, Dict[str, str]):\n    \"\"\"Executes a query and returns performance details.\n",
        "source_code_len": 129,
        "target_code": "\n  def ExecuteQuery(self, query_name: Text) -> Tuple[float, Dict[str, str]]:\n    \"\"\"Executes a query and returns performance details.\n",
        "target_code_len": 134,
        "diff_format": "@@ -188,3 +188,3 @@\n \n-  def ExecuteQuery(self, query_name: Text) -> (float, Dict[str, str]):\n+  def ExecuteQuery(self, query_name: Text) -> Tuple[float, Dict[str, str]]:\n     \"\"\"Executes a query and returns performance details.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n  <DED>def ExecuteQuery(self, query_name: Text) -> (float, Dict[str, str]):\n    <IND>",
        "target_code_with_indent": "\n  <DED>def ExecuteQuery(self, query_name: Text) -> Tuple[float, Dict[str, str]]:\n    <IND>"
      }
    ]
  },
  {
    "project": "GoogleCloudPlatform/PerfKitBenchmarker",
    "commit": "7d06fa7c2f7d6e31130a8520f40c37c79e0b1f4e",
    "filename": "perfkitbenchmarker/providers/gcp/bigquery.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/GoogleCloudPlatform-PerfKitBenchmarker/perfkitbenchmarker/providers/gcp/bigquery.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "perfkitbenchmarker/providers/gcp/bigquery.py:245:47 Invalid type [31]: Expression `(float, typing.Dict[(str, str)])` is not a valid type.",
    "message": " Expression `(float, typing.Dict[(str, str)])` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 245,
    "warning_line": "  def ExecuteQuery(self, query_name: Text) -> (float, Dict[str, str]):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import re\nfrom typing import Dict, List, Text\n\n",
        "source_code_len": 47,
        "target_code": "import re\nfrom typing import Dict, List, Text, Tuple\n\n",
        "target_code_len": 54,
        "diff_format": "@@ -21,3 +21,3 @@\n import re\n-from typing import Dict, List, Text\n+from typing import Dict, List, Text, Tuple\n \n",
        "source_code_with_indent": "import re\nfrom typing import Dict, List, Text\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import re\nfrom typing import Dict, List, Text, Tuple\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n  def ExecuteQuery(self, query_name: Text) -> (float, Dict[str, str]):\n    \"\"\"Executes a query and returns performance details.\n",
        "source_code_len": 129,
        "target_code": "\n  def ExecuteQuery(self, query_name: Text) -> Tuple[float, Dict[str, str]]:\n    \"\"\"Executes a query and returns performance details.\n",
        "target_code_len": 134,
        "diff_format": "@@ -244,3 +244,3 @@\n \n-  def ExecuteQuery(self, query_name: Text) -> (float, Dict[str, str]):\n+  def ExecuteQuery(self, query_name: Text) -> Tuple[float, Dict[str, str]]:\n     \"\"\"Executes a query and returns performance details.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n  <DED>def ExecuteQuery(self, query_name: Text) -> (float, Dict[str, str]):\n    <IND>",
        "target_code_with_indent": "\n  <DED>def ExecuteQuery(self, query_name: Text) -> Tuple[float, Dict[str, str]]:\n    <IND>"
      }
    ]
  }
]