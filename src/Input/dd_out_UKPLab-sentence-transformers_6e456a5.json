[
  {
    "project": "UKPLab/sentence-transformers",
    "commit": "6e456a563a45b9f3e02bf64bc184d08af810d637",
    "filename": "sentence_transformers/models/BERT.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/UKPLab-sentence-transformers/sentence_transformers/models/BERT.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "sentence_transformers/models/BERT.py:69:21 Incompatible parameter type [6]: Expected `typing.Iterable[str]` for 1st positional only parameter to call `list.__iadd__` but got `List[int]`.",
    "message": " Expected `typing.Iterable[str]` for 1st positional only parameter to call `list.__iadd__` but got `List[int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 69,
    "warning_line": "        input_ids += padding",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def get_sentence_features(self, tokens: List[str], pad_seq_length: int):\n        \"\"\"\n",
        "source_code_len": 90,
        "target_code": "\n    def get_sentence_features(self, tokens: List[int], pad_seq_length: int):\n        \"\"\"\n",
        "target_code_len": 90,
        "diff_format": "@@ -45,3 +45,3 @@\n \n-    def get_sentence_features(self, tokens: List[str], pad_seq_length: int):\n+    def get_sentence_features(self, tokens: List[int], pad_seq_length: int):\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def get_sentence_features(self, tokens: List[str], pad_seq_length: int):\n        <IND>",
        "target_code_with_indent": "\n    <DED>def get_sentence_features(self, tokens: List[int], pad_seq_length: int):\n        <IND>"
      }
    ]
  },
  {
    "project": "UKPLab/sentence-transformers",
    "commit": "6e456a563a45b9f3e02bf64bc184d08af810d637",
    "filename": "sentence_transformers/models/BoW.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/UKPLab-sentence-transformers/sentence_transformers/models/BoW.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "sentence_transformers/models/BoW.py:50:8 Incompatible return type [7]: Expected `List[str]` but got `List[int]`.",
    "message": " Expected `List[str]` but got `List[int]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 50,
    "warning_line": "        return self.tokenizer.tokenize(text)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def tokenize(self, text: str) -> List[str]:\n        return self.tokenizer.tokenize(text)\n",
        "source_code_len": 94,
        "target_code": "\n    def tokenize(self, text: str) -> List[int]:\n        return self.tokenizer.tokenize(text)\n",
        "target_code_len": 94,
        "diff_format": "@@ -48,3 +48,3 @@\n \n-    def tokenize(self, text: str) -> List[str]:\n+    def tokenize(self, text: str) -> List[int]:\n         return self.tokenizer.tokenize(text)\n",
        "source_code_with_indent": "\n    <DED>def tokenize(self, text: str) -> List[str]:\n        <IND>return self.tokenizer.tokenize(text)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def tokenize(self, text: str) -> List[int]:\n        <IND>return self.tokenizer.tokenize(text)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "UKPLab/sentence-transformers",
    "commit": "6e456a563a45b9f3e02bf64bc184d08af810d637",
    "filename": "sentence_transformers/models/RoBERTa.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/UKPLab-sentence-transformers/sentence_transformers/models/RoBERTa.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "sentence_transformers/models/RoBERTa.py:70:21 Incompatible parameter type [6]: Expected `typing.Iterable[str]` for 1st positional only parameter to call `list.__iadd__` but got `List[int]`.",
    "message": " Expected `typing.Iterable[str]` for 1st positional only parameter to call `list.__iadd__` but got `List[int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 70,
    "warning_line": "        input_ids += padding",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def get_sentence_features(self, tokens: List[str], pad_seq_length: int):\n        \"\"\"\n",
        "source_code_len": 90,
        "target_code": "\n    def get_sentence_features(self, tokens: List[int], pad_seq_length: int):\n        \"\"\"\n",
        "target_code_len": 90,
        "diff_format": "@@ -47,3 +47,3 @@\n \n-    def get_sentence_features(self, tokens: List[str], pad_seq_length: int):\n+    def get_sentence_features(self, tokens: List[int], pad_seq_length: int):\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def get_sentence_features(self, tokens: List[str], pad_seq_length: int):\n        <IND>",
        "target_code_with_indent": "\n    <DED>def get_sentence_features(self, tokens: List[int], pad_seq_length: int):\n        <IND>"
      }
    ]
  },
  {
    "project": "UKPLab/sentence-transformers",
    "commit": "6e456a563a45b9f3e02bf64bc184d08af810d637",
    "filename": "sentence_transformers/models/WordEmbeddings.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/UKPLab-sentence-transformers/sentence_transformers/models/WordEmbeddings.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "sentence_transformers/models/WordEmbeddings.py:47:21 Incompatible parameter type [6]: Expected `Iterable[str]` for 1st positional only parameter to call `list.__iadd__` but got `List[int]`.",
    "message": " Expected `Iterable[str]` for 1st positional only parameter to call `list.__iadd__` but got `List[int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 47,
    "warning_line": "        input_ids += padding",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def get_sentence_features(self, tokens: List[str], pad_seq_length: int):\n        pad_seq_length = min(pad_seq_length, self.max_seq_length)\n",
        "source_code_len": 144,
        "target_code": "\n    def get_sentence_features(self, tokens: List[int], pad_seq_length: int):\n        pad_seq_length = min(pad_seq_length, self.max_seq_length)\n",
        "target_code_len": 144,
        "diff_format": "@@ -37,3 +37,3 @@\n \n-    def get_sentence_features(self, tokens: List[str], pad_seq_length: int):\n+    def get_sentence_features(self, tokens: List[int], pad_seq_length: int):\n         pad_seq_length = min(pad_seq_length, self.max_seq_length)\n",
        "source_code_with_indent": "\n    <DED>def get_sentence_features(self, tokens: List[str], pad_seq_length: int):\n        <IND>pad_seq_length = min(pad_seq_length, self.max_seq_length)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def get_sentence_features(self, tokens: List[int], pad_seq_length: int):\n        <IND>pad_seq_length = min(pad_seq_length, self.max_seq_length)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "UKPLab/sentence-transformers",
    "commit": "6e456a563a45b9f3e02bf64bc184d08af810d637",
    "filename": "sentence_transformers/models/WordEmbeddings.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/UKPLab-sentence-transformers/sentence_transformers/models/WordEmbeddings.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "sentence_transformers/models/WordEmbeddings.py:63:8 Incompatible return type [7]: Expected `List[str]` but got `List[int]`.",
    "message": " Expected `List[str]` but got `List[int]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 63,
    "warning_line": "        return self.tokenizer.tokenize(text)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def tokenize(self, text: str) -> List[str]:\n        return self.tokenizer.tokenize(text)\n",
        "source_code_len": 94,
        "target_code": "\n    def tokenize(self, text: str) -> List[int]:\n        return self.tokenizer.tokenize(text)\n",
        "target_code_len": 94,
        "diff_format": "@@ -61,3 +61,3 @@\n \n-    def tokenize(self, text: str) -> List[str]:\n+    def tokenize(self, text: str) -> List[int]:\n         return self.tokenizer.tokenize(text)\n",
        "source_code_with_indent": "\n    <DED>def tokenize(self, text: str) -> List[str]:\n        <IND>return self.tokenizer.tokenize(text)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def tokenize(self, text: str) -> List[int]:\n        <IND>return self.tokenizer.tokenize(text)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "UKPLab/sentence-transformers",
    "commit": "6e456a563a45b9f3e02bf64bc184d08af810d637",
    "filename": "sentence_transformers/models/XLNet.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/UKPLab-sentence-transformers/sentence_transformers/models/XLNet.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "sentence_transformers/models/XLNet.py:74:53 Unsupported operand [58]: `+` is not supported for operand types `List[int]` and `List[str]`.",
    "message": " `+` is not supported for operand types `List[int]` and `List[str]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 74,
    "warning_line": "        input_ids = ([pad_token] * padding_length) + input_ids",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def get_sentence_features(self, tokens: List[str], pad_seq_length: int) -> Dict[str, Tensor]:\n        \"\"\"\n",
        "source_code_len": 111,
        "target_code": "\n    def get_sentence_features(self, tokens: List[int], pad_seq_length: int) -> Dict[str, Tensor]:\n        \"\"\"\n",
        "target_code_len": 111,
        "diff_format": "@@ -40,3 +40,3 @@\n \n-    def get_sentence_features(self, tokens: List[str], pad_seq_length: int) -> Dict[str, Tensor]:\n+    def get_sentence_features(self, tokens: List[int], pad_seq_length: int) -> Dict[str, Tensor]:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def get_sentence_features(self, tokens: List[str], pad_seq_length: int) -> Dict[str, Tensor]:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def get_sentence_features(self, tokens: List[int], pad_seq_length: int) -> Dict[str, Tensor]:\n        <IND>"
      }
    ]
  }
]