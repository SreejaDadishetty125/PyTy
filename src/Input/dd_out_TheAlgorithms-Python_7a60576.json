[
  {
    "project": "TheAlgorithms/Python",
    "commit": "7a605766fe7fe79a00ba1f30447877be4b77a6f2",
    "filename": "data_structures/binary_tree/red_black_tree.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/data_structures/binary_tree/red_black_tree.py",
    "file_hunks_size": 34,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "data_structures/binary_tree/red_black_tree.py:65:8 Incompatible return type [7]: Expected `RedBlackTree` but got `typing.Optional[RedBlackTree]`.",
    "message": " Expected `RedBlackTree` but got `typing.Optional[RedBlackTree]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 65,
    "warning_line": "        return right",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        right = self.right\n        self.right = right.left\n",
        "source_code_len": 59,
        "target_code": "        right = self.right\n        if right is None:\n            return self\n        self.right = right.left\n",
        "target_code_len": 109,
        "diff_format": "@@ -53,2 +53,4 @@\n         right = self.right\n+        if right is None:\n+            return self\n         self.right = right.left\n",
        "source_code_with_indent": "        right = self.right\n        self.right = right.left\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        right = self.right\n        if right is None:\n            <IND>return self\n        <DED>self.right = right.left\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "TheAlgorithms/Python",
    "commit": "7a605766fe7fe79a00ba1f30447877be4b77a6f2",
    "filename": "data_structures/binary_tree/red_black_tree.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/data_structures/binary_tree/red_black_tree.py",
    "file_hunks_size": 34,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "data_structures/binary_tree/red_black_tree.py:85:8 Incompatible return type [7]: Expected `RedBlackTree` but got `typing.Optional[RedBlackTree]`.",
    "message": " Expected `RedBlackTree` but got `typing.Optional[RedBlackTree]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 85,
    "warning_line": "        return left",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"\"\"\n        parent = self.parent\n",
        "source_code_len": 41,
        "target_code": "        \"\"\"\n        if self.left is None:\n            return self\n        parent = self.parent\n",
        "target_code_len": 95,
        "diff_format": "@@ -71,2 +73,4 @@\n         \"\"\"\n+        if self.left is None:\n+            return self\n         parent = self.parent\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n        parent = self.parent\n",
        "target_code_with_indent": "\n        if self.left is None:\n            <IND>return self\n        <DED>parent = self.parent\n"
      }
    ]
  },
  {
    "project": "TheAlgorithms/Python",
    "commit": "7a605766fe7fe79a00ba1f30447877be4b77a6f2",
    "filename": "data_structures/binary_tree/red_black_tree.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/data_structures/binary_tree/red_black_tree.py",
    "file_hunks_size": 34,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "data_structures/binary_tree/red_black_tree.py:191:13 Unsupported operand [58]: `>` is not supported for operand types `typing.Optional[int]` and `int`.",
    "message": " `>` is not supported for operand types `typing.Optional[int]` and `int`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 191,
    "warning_line": "        elif self.label > label:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                            self.right.parent = self\n        elif self.label > label:\n            if self.left:\n",
        "source_code_len": 112,
        "target_code": "                            self.right.parent = self\n        elif self.label is not None and self.label > label:\n            if self.left:\n",
        "target_code_len": 139,
        "diff_format": "@@ -190,3 +203,3 @@\n                             self.right.parent = self\n-        elif self.label > label:\n+        elif self.label is not None and self.label > label:\n             if self.left:\n",
        "source_code_with_indent": "                            <IND>self.right.parent = self\n        <DED><DED><DED><DED><DED>elif self.label > label:\n            <IND>if self.left:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                            <IND>self.right.parent = self\n        <DED><DED><DED><DED><DED>elif self.label is not None and self.label > label:\n            <IND>if self.left:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "TheAlgorithms/Python",
    "commit": "7a605766fe7fe79a00ba1f30447877be4b77a6f2",
    "filename": "data_structures/binary_tree/red_black_tree.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/data_structures/binary_tree/red_black_tree.py",
    "file_hunks_size": 34,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "data_structures/binary_tree/red_black_tree.py:306:16 Incompatible return type [7]: Expected `None` but got `bool`.",
    "message": " Expected `None` but got `bool`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 306,
    "warning_line": "                return False",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def check_coloring(self) -> None:\n        \"\"\"A helper function to recursively check Property 4 of a\n",
        "source_code_len": 105,
        "target_code": "\n    def check_coloring(self) -> bool:\n        \"\"\"A helper function to recursively check Property 4 of a\n",
        "target_code_len": 105,
        "diff_format": "@@ -299,3 +317,3 @@\n \n-    def check_coloring(self) -> None:\n+    def check_coloring(self) -> bool:\n         \"\"\"A helper function to recursively check Property 4 of a\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def check_coloring(self) -> None:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def check_coloring(self) -> bool:\n        <IND>"
      }
    ]
  },
  {
    "project": "TheAlgorithms/Python",
    "commit": "7a605766fe7fe79a00ba1f30447877be4b77a6f2",
    "filename": "data_structures/binary_tree/red_black_tree.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/data_structures/binary_tree/red_black_tree.py",
    "file_hunks_size": 34,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "data_structures/binary_tree/red_black_tree.py:308:12 Incompatible return type [7]: Expected `None` but got `bool`.",
    "message": " Expected `None` but got `bool`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 308,
    "warning_line": "            return False",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def check_coloring(self) -> None:\n        \"\"\"A helper function to recursively check Property 4 of a\n",
        "source_code_len": 105,
        "target_code": "\n    def check_coloring(self) -> bool:\n        \"\"\"A helper function to recursively check Property 4 of a\n",
        "target_code_len": 105,
        "diff_format": "@@ -299,3 +317,3 @@\n \n-    def check_coloring(self) -> None:\n+    def check_coloring(self) -> bool:\n         \"\"\"A helper function to recursively check Property 4 of a\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def check_coloring(self) -> None:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def check_coloring(self) -> bool:\n        <IND>"
      }
    ]
  },
  {
    "project": "TheAlgorithms/Python",
    "commit": "7a605766fe7fe79a00ba1f30447877be4b77a6f2",
    "filename": "data_structures/binary_tree/red_black_tree.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/data_structures/binary_tree/red_black_tree.py",
    "file_hunks_size": 34,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "data_structures/binary_tree/red_black_tree.py:310:12 Incompatible return type [7]: Expected `None` but got `bool`.",
    "message": " Expected `None` but got `bool`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 310,
    "warning_line": "            return False",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def check_coloring(self) -> None:\n        \"\"\"A helper function to recursively check Property 4 of a\n",
        "source_code_len": 105,
        "target_code": "\n    def check_coloring(self) -> bool:\n        \"\"\"A helper function to recursively check Property 4 of a\n",
        "target_code_len": 105,
        "diff_format": "@@ -299,3 +317,3 @@\n \n-    def check_coloring(self) -> None:\n+    def check_coloring(self) -> bool:\n         \"\"\"A helper function to recursively check Property 4 of a\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def check_coloring(self) -> None:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def check_coloring(self) -> bool:\n        <IND>"
      }
    ]
  },
  {
    "project": "TheAlgorithms/Python",
    "commit": "7a605766fe7fe79a00ba1f30447877be4b77a6f2",
    "filename": "data_structures/binary_tree/red_black_tree.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/data_structures/binary_tree/red_black_tree.py",
    "file_hunks_size": 34,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "data_structures/binary_tree/red_black_tree.py:311:8 Incompatible return type [7]: Expected `None` but got `bool`.",
    "message": " Expected `None` but got `bool`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 311,
    "warning_line": "        return True",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def check_coloring(self) -> None:\n        \"\"\"A helper function to recursively check Property 4 of a\n",
        "source_code_len": 105,
        "target_code": "\n    def check_coloring(self) -> bool:\n        \"\"\"A helper function to recursively check Property 4 of a\n",
        "target_code_len": 105,
        "diff_format": "@@ -299,3 +317,3 @@\n \n-    def check_coloring(self) -> None:\n+    def check_coloring(self) -> bool:\n         \"\"\"A helper function to recursively check Property 4 of a\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def check_coloring(self) -> None:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def check_coloring(self) -> bool:\n        <IND>"
      }
    ]
  },
  {
    "project": "TheAlgorithms/Python",
    "commit": "7a605766fe7fe79a00ba1f30447877be4b77a6f2",
    "filename": "data_structures/binary_tree/red_black_tree.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/data_structures/binary_tree/red_black_tree.py",
    "file_hunks_size": 34,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "data_structures/binary_tree/red_black_tree.py:322:42 Incompatible parameter type [6]: Expected `RedBlackTree` for 1st positional only parameter to call `RedBlackTree.black_height` but got `typing.Optional[RedBlackTree]`.",
    "message": " Expected `RedBlackTree` for 1st positional only parameter to call `RedBlackTree.black_height` but got `typing.Optional[RedBlackTree]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 322,
    "warning_line": "        right = RedBlackTree.black_height(self.right)"
  },
  {
    "project": "TheAlgorithms/Python",
    "commit": "7a605766fe7fe79a00ba1f30447877be4b77a6f2",
    "filename": "data_structures/binary_tree/red_black_tree.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/data_structures/binary_tree/red_black_tree.py",
    "file_hunks_size": 34,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "data_structures/binary_tree/red_black_tree.py:325:12 Incompatible return type [7]: Expected `int` but got `None`.",
    "message": " Expected `int` but got `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 325,
    "warning_line": "            return None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def black_height(self) -> int:\n        \"\"\"Returns the number of black nodes from this node to the\n",
        "source_code_len": 103,
        "target_code": "\n    def black_height(self) -> int | None:\n        \"\"\"Returns the number of black nodes from this node to the\n",
        "target_code_len": 110,
        "diff_format": "@@ -312,3 +330,3 @@\n \n-    def black_height(self) -> int:\n+    def black_height(self) -> int | None:\n         \"\"\"Returns the number of black nodes from this node to the\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def black_height(self) -> int:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def black_height(self) -> int | None:\n        <IND>"
      }
    ]
  },
  {
    "project": "TheAlgorithms/Python",
    "commit": "7a605766fe7fe79a00ba1f30447877be4b77a6f2",
    "filename": "data_structures/binary_tree/red_black_tree.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/data_structures/binary_tree/red_black_tree.py",
    "file_hunks_size": 34,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "data_structures/binary_tree/red_black_tree.py:328:12 Incompatible return type [7]: Expected `int` but got `None`.",
    "message": " Expected `int` but got `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 328,
    "warning_line": "            return None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def black_height(self) -> int:\n        \"\"\"Returns the number of black nodes from this node to the\n",
        "source_code_len": 103,
        "target_code": "\n    def black_height(self) -> int | None:\n        \"\"\"Returns the number of black nodes from this node to the\n",
        "target_code_len": 110,
        "diff_format": "@@ -312,3 +330,3 @@\n \n-    def black_height(self) -> int:\n+    def black_height(self) -> int | None:\n         \"\"\"Returns the number of black nodes from this node to the\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def black_height(self) -> int:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def black_height(self) -> int | None:\n        <IND>"
      }
    ]
  },
  {
    "project": "TheAlgorithms/Python",
    "commit": "7a605766fe7fe79a00ba1f30447877be4b77a6f2",
    "filename": "data_structures/binary_tree/red_black_tree.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/data_structures/binary_tree/red_black_tree.py",
    "file_hunks_size": 34,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "data_structures/binary_tree/red_black_tree.py:349:21 Unsupported operand [58]: `>` is not supported for operand types `int` and `typing.Optional[int]`.",
    "message": " `>` is not supported for operand types `int` and `typing.Optional[int]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 349,
    "warning_line": "        elif label > self.label:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            return self\n        elif label > self.label:\n            if self.right is None:\n",
        "source_code_len": 92,
        "target_code": "            return self\n        elif self.label is not None and label > self.label:\n            if self.right is None:\n",
        "target_code_len": 119,
        "diff_format": "@@ -348,3 +366,3 @@\n             return self\n-        elif label > self.label:\n+        elif self.label is not None and label > self.label:\n             if self.right is None:\n",
        "source_code_with_indent": "            <IND>return self\n        <DED>elif label > self.label:\n            <IND>if self.right is None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <IND>return self\n        <DED>elif self.label is not None and label > self.label:\n            <IND>if self.right is None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "TheAlgorithms/Python",
    "commit": "7a605766fe7fe79a00ba1f30447877be4b77a6f2",
    "filename": "data_structures/binary_tree/red_black_tree.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/data_structures/binary_tree/red_black_tree.py",
    "file_hunks_size": 34,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "data_structures/binary_tree/red_black_tree.py:351:16 Incompatible return type [7]: Expected `RedBlackTree` but got `None`.",
    "message": " Expected `RedBlackTree` but got `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 351,
    "warning_line": "                return None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def search(self, label: int) -> RedBlackTree:\n        \"\"\"Search through the tree for label, returning its node if\n",
        "source_code_len": 119,
        "target_code": "\n    def search(self, label: int) -> RedBlackTree | None:\n        \"\"\"Search through the tree for label, returning its node if\n",
        "target_code_len": 126,
        "diff_format": "@@ -341,3 +359,3 @@\n \n-    def search(self, label: int) -> RedBlackTree:\n+    def search(self, label: int) -> RedBlackTree | None:\n         \"\"\"Search through the tree for label, returning its node if\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def search(self, label: int) -> RedBlackTree:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def search(self, label: int) -> RedBlackTree | None:\n        <IND>"
      }
    ]
  },
  {
    "project": "TheAlgorithms/Python",
    "commit": "7a605766fe7fe79a00ba1f30447877be4b77a6f2",
    "filename": "data_structures/binary_tree/red_black_tree.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/data_structures/binary_tree/red_black_tree.py",
    "file_hunks_size": 34,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "data_structures/binary_tree/red_black_tree.py:356:16 Incompatible return type [7]: Expected `RedBlackTree` but got `None`.",
    "message": " Expected `RedBlackTree` but got `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 356,
    "warning_line": "                return None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def search(self, label: int) -> RedBlackTree:\n        \"\"\"Search through the tree for label, returning its node if\n",
        "source_code_len": 119,
        "target_code": "\n    def search(self, label: int) -> RedBlackTree | None:\n        \"\"\"Search through the tree for label, returning its node if\n",
        "target_code_len": 126,
        "diff_format": "@@ -341,3 +359,3 @@\n \n-    def search(self, label: int) -> RedBlackTree:\n+    def search(self, label: int) -> RedBlackTree | None:\n         \"\"\"Search through the tree for label, returning its node if\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def search(self, label: int) -> RedBlackTree:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def search(self, label: int) -> RedBlackTree | None:\n        <IND>"
      }
    ]
  },
  {
    "project": "TheAlgorithms/Python",
    "commit": "7a605766fe7fe79a00ba1f30447877be4b77a6f2",
    "filename": "data_structures/binary_tree/red_black_tree.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/data_structures/binary_tree/red_black_tree.py",
    "file_hunks_size": 34,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "data_structures/binary_tree/red_black_tree.py:364:12 Incompatible return type [7]: Expected `int` but got `typing.Optional[int]`.",
    "message": " Expected `int` but got `typing.Optional[int]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 364,
    "warning_line": "            return self.label",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def floor(self, label: int) -> int:\n        \"\"\"Returns the largest element in this tree which is at most label.\n",
        "source_code_len": 117,
        "target_code": "\n    def floor(self, label: int) -> int | None:\n        \"\"\"Returns the largest element in this tree which is at most label.\n",
        "target_code_len": 124,
        "diff_format": "@@ -359,3 +377,3 @@\n \n-    def floor(self, label: int) -> int:\n+    def floor(self, label: int) -> int | None:\n         \"\"\"Returns the largest element in this tree which is at most label.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED><DED><DED>def floor(self, label: int) -> int:\n        <IND>",
        "target_code_with_indent": "\n    <DED><DED><DED>def floor(self, label: int) -> int | None:\n        <IND>"
      }
    ]
  },
  {
    "project": "TheAlgorithms/Python",
    "commit": "7a605766fe7fe79a00ba1f30447877be4b77a6f2",
    "filename": "data_structures/binary_tree/red_black_tree.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/data_structures/binary_tree/red_black_tree.py",
    "file_hunks_size": 34,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "data_structures/binary_tree/red_black_tree.py:365:13 Unsupported operand [58]: `>` is not supported for operand types `typing.Optional[int]` and `int`.",
    "message": " `>` is not supported for operand types `typing.Optional[int]` and `int`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 365,
    "warning_line": "        elif self.label > label:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            return self.label\n        elif self.label > label:\n            if self.left:\n",
        "source_code_len": 89,
        "target_code": "            return self.label\n        elif self.label is not None and self.label > label:\n            if self.left:\n",
        "target_code_len": 116,
        "diff_format": "@@ -364,3 +382,3 @@\n             return self.label\n-        elif self.label > label:\n+        elif self.label is not None and self.label > label:\n             if self.left:\n",
        "source_code_with_indent": "            <IND>return self.label\n        <DED>elif self.label > label:\n            <IND>if self.left:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <IND>return self.label\n        <DED>elif self.label is not None and self.label > label:\n            <IND>if self.left:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "TheAlgorithms/Python",
    "commit": "7a605766fe7fe79a00ba1f30447877be4b77a6f2",
    "filename": "data_structures/binary_tree/red_black_tree.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/data_structures/binary_tree/red_black_tree.py",
    "file_hunks_size": 34,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "data_structures/binary_tree/red_black_tree.py:369:16 Incompatible return type [7]: Expected `int` but got `None`.",
    "message": " Expected `int` but got `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 369,
    "warning_line": "                return None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def floor(self, label: int) -> int:\n        \"\"\"Returns the largest element in this tree which is at most label.\n",
        "source_code_len": 117,
        "target_code": "\n    def floor(self, label: int) -> int | None:\n        \"\"\"Returns the largest element in this tree which is at most label.\n",
        "target_code_len": 124,
        "diff_format": "@@ -359,3 +377,3 @@\n \n-    def floor(self, label: int) -> int:\n+    def floor(self, label: int) -> int | None:\n         \"\"\"Returns the largest element in this tree which is at most label.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED><DED><DED>def floor(self, label: int) -> int:\n        <IND>",
        "target_code_with_indent": "\n    <DED><DED><DED>def floor(self, label: int) -> int | None:\n        <IND>"
      }
    ]
  },
  {
    "project": "TheAlgorithms/Python",
    "commit": "7a605766fe7fe79a00ba1f30447877be4b77a6f2",
    "filename": "data_structures/binary_tree/red_black_tree.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/data_structures/binary_tree/red_black_tree.py",
    "file_hunks_size": 34,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "data_structures/binary_tree/red_black_tree.py:375:12 Incompatible return type [7]: Expected `int` but got `typing.Optional[int]`.",
    "message": " Expected `int` but got `typing.Optional[int]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 375,
    "warning_line": "            return self.label",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def floor(self, label: int) -> int:\n        \"\"\"Returns the largest element in this tree which is at most label.\n",
        "source_code_len": 117,
        "target_code": "\n    def floor(self, label: int) -> int | None:\n        \"\"\"Returns the largest element in this tree which is at most label.\n",
        "target_code_len": 124,
        "diff_format": "@@ -359,3 +377,3 @@\n \n-    def floor(self, label: int) -> int:\n+    def floor(self, label: int) -> int | None:\n         \"\"\"Returns the largest element in this tree which is at most label.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED><DED><DED>def floor(self, label: int) -> int:\n        <IND>",
        "target_code_with_indent": "\n    <DED><DED><DED>def floor(self, label: int) -> int | None:\n        <IND>"
      }
    ]
  },
  {
    "project": "TheAlgorithms/Python",
    "commit": "7a605766fe7fe79a00ba1f30447877be4b77a6f2",
    "filename": "data_structures/binary_tree/red_black_tree.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/data_structures/binary_tree/red_black_tree.py",
    "file_hunks_size": 34,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "data_structures/binary_tree/red_black_tree.py:382:12 Incompatible return type [7]: Expected `int` but got `typing.Optional[int]`.",
    "message": " Expected `int` but got `typing.Optional[int]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 382,
    "warning_line": "            return self.label",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def ceil(self, label: int) -> int:\n        \"\"\"Returns the smallest element in this tree which is at least label.\n",
        "source_code_len": 118,
        "target_code": "\n    def ceil(self, label: int) -> int | None:\n        \"\"\"Returns the smallest element in this tree which is at least label.\n",
        "target_code_len": 125,
        "diff_format": "@@ -376,3 +394,3 @@\n \n-    def ceil(self, label: int) -> int:\n+    def ceil(self, label: int) -> int | None:\n         \"\"\"Returns the smallest element in this tree which is at least label.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED><DED>def ceil(self, label: int) -> int:\n        <IND>",
        "target_code_with_indent": "\n    <DED><DED>def ceil(self, label: int) -> int | None:\n        <IND>"
      }
    ]
  },
  {
    "project": "TheAlgorithms/Python",
    "commit": "7a605766fe7fe79a00ba1f30447877be4b77a6f2",
    "filename": "data_structures/binary_tree/red_black_tree.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/data_structures/binary_tree/red_black_tree.py",
    "file_hunks_size": 34,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "data_structures/binary_tree/red_black_tree.py:383:13 Unsupported operand [58]: `<` is not supported for operand types `typing.Optional[int]` and `int`.",
    "message": " `<` is not supported for operand types `typing.Optional[int]` and `int`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 383,
    "warning_line": "        elif self.label < label:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            return self.label\n        elif self.label < label:\n            if self.right:\n",
        "source_code_len": 90,
        "target_code": "            return self.label\n        elif self.label is not None and self.label < label:\n            if self.right:\n",
        "target_code_len": 117,
        "diff_format": "@@ -382,3 +400,3 @@\n             return self.label\n-        elif self.label < label:\n+        elif self.label is not None and self.label < label:\n             if self.right:\n",
        "source_code_with_indent": "            <IND>return self.label\n        <DED>elif self.label < label:\n            <IND>if self.right:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <IND>return self.label\n        <DED>elif self.label is not None and self.label < label:\n            <IND>if self.right:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "TheAlgorithms/Python",
    "commit": "7a605766fe7fe79a00ba1f30447877be4b77a6f2",
    "filename": "data_structures/binary_tree/red_black_tree.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/data_structures/binary_tree/red_black_tree.py",
    "file_hunks_size": 34,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "data_structures/binary_tree/red_black_tree.py:387:16 Incompatible return type [7]: Expected `int` but got `None`.",
    "message": " Expected `int` but got `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 387,
    "warning_line": "                return None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def ceil(self, label: int) -> int:\n        \"\"\"Returns the smallest element in this tree which is at least label.\n",
        "source_code_len": 118,
        "target_code": "\n    def ceil(self, label: int) -> int | None:\n        \"\"\"Returns the smallest element in this tree which is at least label.\n",
        "target_code_len": 125,
        "diff_format": "@@ -376,3 +394,3 @@\n \n-    def ceil(self, label: int) -> int:\n+    def ceil(self, label: int) -> int | None:\n         \"\"\"Returns the smallest element in this tree which is at least label.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED><DED>def ceil(self, label: int) -> int:\n        <IND>",
        "target_code_with_indent": "\n    <DED><DED>def ceil(self, label: int) -> int | None:\n        <IND>"
      }
    ]
  },
  {
    "project": "TheAlgorithms/Python",
    "commit": "7a605766fe7fe79a00ba1f30447877be4b77a6f2",
    "filename": "data_structures/binary_tree/red_black_tree.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/data_structures/binary_tree/red_black_tree.py",
    "file_hunks_size": 34,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "data_structures/binary_tree/red_black_tree.py:393:12 Incompatible return type [7]: Expected `int` but got `typing.Optional[int]`.",
    "message": " Expected `int` but got `typing.Optional[int]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 393,
    "warning_line": "            return self.label",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def ceil(self, label: int) -> int:\n        \"\"\"Returns the smallest element in this tree which is at least label.\n",
        "source_code_len": 118,
        "target_code": "\n    def ceil(self, label: int) -> int | None:\n        \"\"\"Returns the smallest element in this tree which is at least label.\n",
        "target_code_len": 125,
        "diff_format": "@@ -376,3 +394,3 @@\n \n-    def ceil(self, label: int) -> int:\n+    def ceil(self, label: int) -> int | None:\n         \"\"\"Returns the smallest element in this tree which is at least label.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED><DED>def ceil(self, label: int) -> int:\n        <IND>",
        "target_code_with_indent": "\n    <DED><DED>def ceil(self, label: int) -> int | None:\n        <IND>"
      }
    ]
  },
  {
    "project": "TheAlgorithms/Python",
    "commit": "7a605766fe7fe79a00ba1f30447877be4b77a6f2",
    "filename": "data_structures/binary_tree/red_black_tree.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/data_structures/binary_tree/red_black_tree.py",
    "file_hunks_size": 34,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "data_structures/binary_tree/red_black_tree.py:403:12 Incompatible return type [7]: Expected `int` but got `typing.Optional[int]`.",
    "message": " Expected `int` but got `typing.Optional[int]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 403,
    "warning_line": "            return self.label",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def get_max(self) -> int:\n        \"\"\"Returns the largest element in this tree.\n",
        "source_code_len": 84,
        "target_code": "\n    def get_max(self) -> int | None:\n        \"\"\"Returns the largest element in this tree.\n",
        "target_code_len": 91,
        "diff_format": "@@ -394,3 +412,3 @@\n \n-    def get_max(self) -> int:\n+    def get_max(self) -> int | None:\n         \"\"\"Returns the largest element in this tree.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED><DED>def get_max(self) -> int:\n        <IND>",
        "target_code_with_indent": "\n    <DED><DED>def get_max(self) -> int | None:\n        <IND>"
      }
    ]
  },
  {
    "project": "TheAlgorithms/Python",
    "commit": "7a605766fe7fe79a00ba1f30447877be4b77a6f2",
    "filename": "data_structures/binary_tree/red_black_tree.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/data_structures/binary_tree/red_black_tree.py",
    "file_hunks_size": 34,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "data_structures/binary_tree/red_black_tree.py:413:12 Incompatible return type [7]: Expected `int` but got `typing.Optional[int]`.",
    "message": " Expected `int` but got `typing.Optional[int]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 413,
    "warning_line": "            return self.label",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def get_min(self) -> int:\n        \"\"\"Returns the smallest element in this tree.\n",
        "source_code_len": 85,
        "target_code": "\n    def get_min(self) -> int | None:\n        \"\"\"Returns the smallest element in this tree.\n",
        "target_code_len": 92,
        "diff_format": "@@ -404,3 +422,3 @@\n \n-    def get_min(self) -> int:\n+    def get_min(self) -> int | None:\n         \"\"\"Returns the smallest element in this tree.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED><DED>def get_min(self) -> int:\n        <IND>",
        "target_code_with_indent": "\n    <DED><DED>def get_min(self) -> int | None:\n        <IND>"
      }
    ]
  },
  {
    "project": "TheAlgorithms/Python",
    "commit": "7a605766fe7fe79a00ba1f30447877be4b77a6f2",
    "filename": "data_structures/binary_tree/red_black_tree.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/data_structures/binary_tree/red_black_tree.py",
    "file_hunks_size": 34,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "data_structures/binary_tree/red_black_tree.py:419:12 Incompatible return type [7]: Expected `RedBlackTree` but got `None`.",
    "message": " Expected `RedBlackTree` but got `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 419,
    "warning_line": "            return None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @property\n    def grandparent(self) -> RedBlackTree:\n        \"\"\"Get the current node's grandparent, or None if it doesn't exist.\"\"\"\n",
        "source_code_len": 136,
        "target_code": "    @property\n    def grandparent(self) -> RedBlackTree | None:\n        \"\"\"Get the current node's grandparent, or None if it doesn't exist.\"\"\"\n",
        "target_code_len": 143,
        "diff_format": "@@ -415,3 +433,3 @@\n     @property\n-    def grandparent(self) -> RedBlackTree:\n+    def grandparent(self) -> RedBlackTree | None:\n         \"\"\"Get the current node's grandparent, or None if it doesn't exist.\"\"\"\n",
        "source_code_with_indent": "    <DED><DED>@property\n    def grandparent(self) -> RedBlackTree:\n        <IND>\"\"\"Get the current node's grandparent, or None if it doesn't exist.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED><DED>@property\n    def grandparent(self) -> RedBlackTree | None:\n        <IND>\"\"\"Get the current node's grandparent, or None if it doesn't exist.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "TheAlgorithms/Python",
    "commit": "7a605766fe7fe79a00ba1f30447877be4b77a6f2",
    "filename": "data_structures/binary_tree/red_black_tree.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/data_structures/binary_tree/red_black_tree.py",
    "file_hunks_size": 34,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "data_structures/binary_tree/red_black_tree.py:421:12 Incompatible return type [7]: Expected `RedBlackTree` but got `typing.Optional[RedBlackTree]`.",
    "message": " Expected `RedBlackTree` but got `typing.Optional[RedBlackTree]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 421,
    "warning_line": "            return self.parent.parent",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @property\n    def grandparent(self) -> RedBlackTree:\n        \"\"\"Get the current node's grandparent, or None if it doesn't exist.\"\"\"\n",
        "source_code_len": 136,
        "target_code": "    @property\n    def grandparent(self) -> RedBlackTree | None:\n        \"\"\"Get the current node's grandparent, or None if it doesn't exist.\"\"\"\n",
        "target_code_len": 143,
        "diff_format": "@@ -415,3 +433,3 @@\n     @property\n-    def grandparent(self) -> RedBlackTree:\n+    def grandparent(self) -> RedBlackTree | None:\n         \"\"\"Get the current node's grandparent, or None if it doesn't exist.\"\"\"\n",
        "source_code_with_indent": "    <DED><DED>@property\n    def grandparent(self) -> RedBlackTree:\n        <IND>\"\"\"Get the current node's grandparent, or None if it doesn't exist.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED><DED>@property\n    def grandparent(self) -> RedBlackTree | None:\n        <IND>\"\"\"Get the current node's grandparent, or None if it doesn't exist.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "TheAlgorithms/Python",
    "commit": "7a605766fe7fe79a00ba1f30447877be4b77a6f2",
    "filename": "data_structures/binary_tree/red_black_tree.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/data_structures/binary_tree/red_black_tree.py",
    "file_hunks_size": 34,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "data_structures/binary_tree/red_black_tree.py:427:12 Incompatible return type [7]: Expected `RedBlackTree` but got `None`.",
    "message": " Expected `RedBlackTree` but got `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 427,
    "warning_line": "            return None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @property\n    def sibling(self) -> RedBlackTree:\n        \"\"\"Get the current node's sibling, or None if it doesn't exist.\"\"\"\n",
        "source_code_len": 128,
        "target_code": "    @property\n    def sibling(self) -> RedBlackTree | None:\n        \"\"\"Get the current node's sibling, or None if it doesn't exist.\"\"\"\n",
        "target_code_len": 135,
        "diff_format": "@@ -423,3 +441,3 @@\n     @property\n-    def sibling(self) -> RedBlackTree:\n+    def sibling(self) -> RedBlackTree | None:\n         \"\"\"Get the current node's sibling, or None if it doesn't exist.\"\"\"\n",
        "source_code_with_indent": "    <DED><DED>@property\n    def sibling(self) -> RedBlackTree:\n        <IND>\"\"\"Get the current node's sibling, or None if it doesn't exist.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED><DED>@property\n    def sibling(self) -> RedBlackTree | None:\n        <IND>\"\"\"Get the current node's sibling, or None if it doesn't exist.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "TheAlgorithms/Python",
    "commit": "7a605766fe7fe79a00ba1f30447877be4b77a6f2",
    "filename": "data_structures/binary_tree/red_black_tree.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/data_structures/binary_tree/red_black_tree.py",
    "file_hunks_size": 34,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "data_structures/binary_tree/red_black_tree.py:429:12 Incompatible return type [7]: Expected `RedBlackTree` but got `typing.Optional[RedBlackTree]`.",
    "message": " Expected `RedBlackTree` but got `typing.Optional[RedBlackTree]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 429,
    "warning_line": "            return self.parent.right",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @property\n    def sibling(self) -> RedBlackTree:\n        \"\"\"Get the current node's sibling, or None if it doesn't exist.\"\"\"\n",
        "source_code_len": 128,
        "target_code": "    @property\n    def sibling(self) -> RedBlackTree | None:\n        \"\"\"Get the current node's sibling, or None if it doesn't exist.\"\"\"\n",
        "target_code_len": 135,
        "diff_format": "@@ -423,3 +441,3 @@\n     @property\n-    def sibling(self) -> RedBlackTree:\n+    def sibling(self) -> RedBlackTree | None:\n         \"\"\"Get the current node's sibling, or None if it doesn't exist.\"\"\"\n",
        "source_code_with_indent": "    <DED><DED>@property\n    def sibling(self) -> RedBlackTree:\n        <IND>\"\"\"Get the current node's sibling, or None if it doesn't exist.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED><DED>@property\n    def sibling(self) -> RedBlackTree | None:\n        <IND>\"\"\"Get the current node's sibling, or None if it doesn't exist.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "TheAlgorithms/Python",
    "commit": "7a605766fe7fe79a00ba1f30447877be4b77a6f2",
    "filename": "data_structures/binary_tree/red_black_tree.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/data_structures/binary_tree/red_black_tree.py",
    "file_hunks_size": 34,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "data_structures/binary_tree/red_black_tree.py:431:12 Incompatible return type [7]: Expected `RedBlackTree` but got `typing.Optional[RedBlackTree]`.",
    "message": " Expected `RedBlackTree` but got `typing.Optional[RedBlackTree]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 431,
    "warning_line": "            return self.parent.left",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @property\n    def sibling(self) -> RedBlackTree:\n        \"\"\"Get the current node's sibling, or None if it doesn't exist.\"\"\"\n",
        "source_code_len": 128,
        "target_code": "    @property\n    def sibling(self) -> RedBlackTree | None:\n        \"\"\"Get the current node's sibling, or None if it doesn't exist.\"\"\"\n",
        "target_code_len": 135,
        "diff_format": "@@ -423,3 +441,3 @@\n     @property\n-    def sibling(self) -> RedBlackTree:\n+    def sibling(self) -> RedBlackTree | None:\n         \"\"\"Get the current node's sibling, or None if it doesn't exist.\"\"\"\n",
        "source_code_with_indent": "    <DED><DED>@property\n    def sibling(self) -> RedBlackTree:\n        <IND>\"\"\"Get the current node's sibling, or None if it doesn't exist.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED><DED>@property\n    def sibling(self) -> RedBlackTree | None:\n        <IND>\"\"\"Get the current node's sibling, or None if it doesn't exist.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "TheAlgorithms/Python",
    "commit": "7a605766fe7fe79a00ba1f30447877be4b77a6f2",
    "filename": "data_structures/binary_tree/red_black_tree.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/data_structures/binary_tree/red_black_tree.py",
    "file_hunks_size": 34,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "data_structures/binary_tree/red_black_tree.py:435:8 Incompatible return type [7]: Expected `bool` but got `typing.Optional[bool]`.",
    "message": " Expected `bool` but got `typing.Optional[bool]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 435,
    "warning_line": "        return self.parent and self.parent.left is self",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"\"\"Returns true iff this node is the left child of its parent.\"\"\"\n        return self.parent and self.parent.left is self\n\n",
        "source_code_len": 131,
        "target_code": "        \"\"\"Returns true iff this node is the left child of its parent.\"\"\"\n        if self.parent is None:\n            return False\n        return self.parent.left is self.parent.left is self\n\n",
        "target_code_len": 192,
        "diff_format": "@@ -434,3 +452,5 @@\n         \"\"\"Returns true iff this node is the left child of its parent.\"\"\"\n-        return self.parent and self.parent.left is self\n+        if self.parent is None:\n+            return False\n+        return self.parent.left is self.parent.left is self\n \n",
        "source_code_with_indent": "        <IND>\"\"\"Returns true iff this node is the left child of its parent.\"\"\"\n        return self.parent and self.parent.left is self\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>\"\"\"Returns true iff this node is the left child of its parent.\"\"\"\n        if self.parent is None:\n            <IND>return False\n        <DED>return self.parent.left is self.parent.left is self\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "TheAlgorithms/Python",
    "commit": "7a605766fe7fe79a00ba1f30447877be4b77a6f2",
    "filename": "data_structures/binary_tree/red_black_tree.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/data_structures/binary_tree/red_black_tree.py",
    "file_hunks_size": 34,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "data_structures/binary_tree/red_black_tree.py:439:8 Incompatible return type [7]: Expected `bool` but got `typing.Optional[bool]`.",
    "message": " Expected `bool` but got `typing.Optional[bool]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 439,
    "warning_line": "        return self.parent and self.parent.right is self",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"\"\"Returns true iff this node is the right child of its parent.\"\"\"\n        return self.parent and self.parent.right is self\n\n",
        "source_code_len": 133,
        "target_code": "        \"\"\"Returns true iff this node is the right child of its parent.\"\"\"\n        if self.parent is None:\n            return False\n        return self.parent.right is self\n\n",
        "target_code_len": 174,
        "diff_format": "@@ -438,3 +458,5 @@\n         \"\"\"Returns true iff this node is the right child of its parent.\"\"\"\n-        return self.parent and self.parent.right is self\n+        if self.parent is None:\n+            return False\n+        return self.parent.right is self\n \n",
        "source_code_with_indent": "        <IND>\"\"\"Returns true iff this node is the right child of its parent.\"\"\"\n        return self.parent and self.parent.right is self\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>\"\"\"Returns true iff this node is the right child of its parent.\"\"\"\n        if self.parent is None:\n            <IND>return False\n        <DED>return self.parent.right is self\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "TheAlgorithms/Python",
    "commit": "7a605766fe7fe79a00ba1f30447877be4b77a6f2",
    "filename": "data_structures/binary_tree/red_black_tree.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/data_structures/binary_tree/red_black_tree.py",
    "file_hunks_size": 34,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "data_structures/binary_tree/red_black_tree.py:456:8 Incompatible return type [7]: Expected `Iterator[int]` but got `typing.Generator[typing.Optional[int], None, None]`.",
    "message": " Expected `Iterator[int]` but got `typing.Generator[typing.Optional[int], None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 456,
    "warning_line": "        yield self.label",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def preorder_traverse(self) -> Iterator[int]:\n        yield self.label\n",
        "source_code_len": 76,
        "target_code": "\n    def preorder_traverse(self) -> Iterator[int | None]:\n        yield self.label\n",
        "target_code_len": 83,
        "diff_format": "@@ -454,3 +476,3 @@\n \n-    def preorder_traverse(self) -> Iterator[int]:\n+    def preorder_traverse(self) -> Iterator[int | None]:\n         yield self.label\n",
        "source_code_with_indent": "\n    <DED>def preorder_traverse(self) -> Iterator[int]:\n        <IND>yield self.label\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def preorder_traverse(self) -> Iterator[int | None]:\n        <IND>yield self.label\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "TheAlgorithms/Python",
    "commit": "7a605766fe7fe79a00ba1f30447877be4b77a6f2",
    "filename": "data_structures/binary_tree/red_black_tree.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/data_structures/binary_tree/red_black_tree.py",
    "file_hunks_size": 34,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "data_structures/binary_tree/red_black_tree.py:465:8 Incompatible return type [7]: Expected `Iterator[int]` but got `typing.Generator[typing.Optional[int], None, None]`.",
    "message": " Expected `Iterator[int]` but got `typing.Generator[typing.Optional[int], None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 465,
    "warning_line": "        yield self.label",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def inorder_traverse(self) -> Iterator[int]:\n        if self.left:\n",
        "source_code_len": 72,
        "target_code": "\n    def inorder_traverse(self) -> Iterator[int | None]:\n        if self.left:\n",
        "target_code_len": 79,
        "diff_format": "@@ -461,3 +483,3 @@\n \n-    def inorder_traverse(self) -> Iterator[int]:\n+    def inorder_traverse(self) -> Iterator[int | None]:\n         if self.left:\n",
        "source_code_with_indent": "\n    <DED><DED>def inorder_traverse(self) -> Iterator[int]:\n        <IND>if self.left:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED><DED>def inorder_traverse(self) -> Iterator[int | None]:\n        <IND>if self.left:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "TheAlgorithms/Python",
    "commit": "7a605766fe7fe79a00ba1f30447877be4b77a6f2",
    "filename": "data_structures/binary_tree/red_black_tree.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/data_structures/binary_tree/red_black_tree.py",
    "file_hunks_size": 34,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "data_structures/binary_tree/red_black_tree.py:474:8 Incompatible return type [7]: Expected `Iterator[int]` but got `typing.Generator[typing.Optional[int], None, None]`.",
    "message": " Expected `Iterator[int]` but got `typing.Generator[typing.Optional[int], None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 474,
    "warning_line": "        yield self.label",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def postorder_traverse(self) -> Iterator[int]:\n        if self.left:\n",
        "source_code_len": 74,
        "target_code": "\n    def postorder_traverse(self) -> Iterator[int | None]:\n        if self.left:\n",
        "target_code_len": 81,
        "diff_format": "@@ -468,3 +490,3 @@\n \n-    def postorder_traverse(self) -> Iterator[int]:\n+    def postorder_traverse(self) -> Iterator[int | None]:\n         if self.left:\n",
        "source_code_with_indent": "\n    <DED><DED>def postorder_traverse(self) -> Iterator[int]:\n        <IND>if self.left:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED><DED>def postorder_traverse(self) -> Iterator[int | None]:\n        <IND>if self.left:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]