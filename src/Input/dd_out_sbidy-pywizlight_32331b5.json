[
  {
    "project": "sbidy/pywizlight",
    "commit": "32331b503a2f57cce89607248caa37c9a8f3e64b",
    "filename": "pywizlight/bulb.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/sbidy-pywizlight/pywizlight/bulb.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pywizlight/bulb.py:358:8 Incompatible return type [7]: Expected `typing.List[typing.Any]` but got `typing.Dict[int, str]`.",
    "message": " Expected `typing.List[typing.Any]` but got `typing.Dict[int, str]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 358,
    "warning_line": "        return SCENES",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    async def getSupportedScenes(self) -> list:\n        \"\"\"Return the supported scenes based on type.\n",
        "source_code_len": 103,
        "target_code": "\n    async def getSupportedScenes(self):\n        \"\"\"Return the supported scenes based on type.\n",
        "target_code_len": 95,
        "diff_format": "@@ -341,3 +341,3 @@\n \n-    async def getSupportedScenes(self) -> list:\n+    async def getSupportedScenes(self):\n         \"\"\"Return the supported scenes based on type.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>async def getSupportedScenes(self) -> list:\n        <IND>",
        "target_code_with_indent": "\n    <DED>async def getSupportedScenes(self):\n        <IND>"
      }
    ]
  }
]