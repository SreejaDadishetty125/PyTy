[
  {
    "project": "samclane/LIFX-Control-Panel",
    "commit": "4fdad88bc0bd0325a2e8e63111c6ce87a394aefb",
    "filename": "lifx_control_panel/utilities/utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/samclane-LIFX-Control-Panel/lifx_control_panel/utilities/utils.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "lifx_control_panel/utilities/utils.py:139:4 Incompatible variable type [9]: h is declared to have type `int` but is used as type `float`.",
    "message": " h is declared to have type `int` but is used as type `float`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 139,
    "warning_line": "    h = float(h)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef hueToRGB(h: int, s: int = 1, v: int = 1) -> TypeRGB:\n    \"\"\" Convert a Hue-angle to an RGB value for display. \"\"\"\n",
        "source_code_len": 119,
        "target_code": "\ndef hueToRGB(h: float, s: float = 1, v: float = 1) -> TypeRGB:\n    \"\"\" Convert a Hue-angle to an RGB value for display. \"\"\"\n",
        "target_code_len": 125,
        "diff_format": "@@ -135,3 +135,3 @@\n \n-def hueToRGB(h: int, s: int = 1, v: int = 1) -> TypeRGB:\n+def hueToRGB(h: float, s: float = 1, v: float = 1) -> TypeRGB:\n     \"\"\" Convert a Hue-angle to an RGB value for display. \"\"\"\n",
        "source_code_with_indent": "\n<DED>def hueToRGB(h: int, s: int = 1, v: int = 1) -> TypeRGB:\n    <IND>\"\"\" Convert a Hue-angle to an RGB value for display. \"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def hueToRGB(h: float, s: float = 1, v: float = 1) -> TypeRGB:\n    <IND>\"\"\" Convert a Hue-angle to an RGB value for display. \"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "samclane/LIFX-Control-Panel",
    "commit": "4fdad88bc0bd0325a2e8e63111c6ce87a394aefb",
    "filename": "lifx_control_panel/utilities/utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/samclane-LIFX-Control-Panel/lifx_control_panel/utilities/utils.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "lifx_control_panel/utilities/utils.py:140:4 Incompatible variable type [9]: s is declared to have type `int` but is used as type `float`.",
    "message": " s is declared to have type `int` but is used as type `float`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 140,
    "warning_line": "    s = float(s)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef hueToRGB(h: int, s: int = 1, v: int = 1) -> TypeRGB:\n    \"\"\" Convert a Hue-angle to an RGB value for display. \"\"\"\n",
        "source_code_len": 119,
        "target_code": "\ndef hueToRGB(h: float, s: float = 1, v: float = 1) -> TypeRGB:\n    \"\"\" Convert a Hue-angle to an RGB value for display. \"\"\"\n",
        "target_code_len": 125,
        "diff_format": "@@ -135,3 +135,3 @@\n \n-def hueToRGB(h: int, s: int = 1, v: int = 1) -> TypeRGB:\n+def hueToRGB(h: float, s: float = 1, v: float = 1) -> TypeRGB:\n     \"\"\" Convert a Hue-angle to an RGB value for display. \"\"\"\n",
        "source_code_with_indent": "\n<DED>def hueToRGB(h: int, s: int = 1, v: int = 1) -> TypeRGB:\n    <IND>\"\"\" Convert a Hue-angle to an RGB value for display. \"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def hueToRGB(h: float, s: float = 1, v: float = 1) -> TypeRGB:\n    <IND>\"\"\" Convert a Hue-angle to an RGB value for display. \"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "samclane/LIFX-Control-Panel",
    "commit": "4fdad88bc0bd0325a2e8e63111c6ce87a394aefb",
    "filename": "lifx_control_panel/utilities/utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/samclane-LIFX-Control-Panel/lifx_control_panel/utilities/utils.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "lifx_control_panel/utilities/utils.py:141:4 Incompatible variable type [9]: v is declared to have type `int` but is used as type `float`.",
    "message": " v is declared to have type `int` but is used as type `float`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 141,
    "warning_line": "    v = float(v)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef hueToRGB(h: int, s: int = 1, v: int = 1) -> TypeRGB:\n    \"\"\" Convert a Hue-angle to an RGB value for display. \"\"\"\n",
        "source_code_len": 119,
        "target_code": "\ndef hueToRGB(h: float, s: float = 1, v: float = 1) -> TypeRGB:\n    \"\"\" Convert a Hue-angle to an RGB value for display. \"\"\"\n",
        "target_code_len": 125,
        "diff_format": "@@ -135,3 +135,3 @@\n \n-def hueToRGB(h: int, s: int = 1, v: int = 1) -> TypeRGB:\n+def hueToRGB(h: float, s: float = 1, v: float = 1) -> TypeRGB:\n     \"\"\" Convert a Hue-angle to an RGB value for display. \"\"\"\n",
        "source_code_with_indent": "\n<DED>def hueToRGB(h: int, s: int = 1, v: int = 1) -> TypeRGB:\n    <IND>\"\"\" Convert a Hue-angle to an RGB value for display. \"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def hueToRGB(h: float, s: float = 1, v: float = 1) -> TypeRGB:\n    <IND>\"\"\" Convert a Hue-angle to an RGB value for display. \"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]