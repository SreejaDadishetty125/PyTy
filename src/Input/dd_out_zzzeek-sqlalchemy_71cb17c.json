[
  {
    "project": "zzzeek/sqlalchemy",
    "commit": "71cb17c81d358646f8dfeac14e9662ce42bb94df",
    "filename": "lib/sqlalchemy/engine/url.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/zzzeek-sqlalchemy/lib/sqlalchemy/engine/url.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "lib/sqlalchemy/engine/url.py:428:39 Incompatible parameter type [6]: Expected `Sequence[Tuple[str, str]]` for 1st positional only parameter to call `URL.update_query_pairs` but got `typing.AbstractSet[Tuple[str, Union[Sequence[str], str]]]`.",
    "message": " Expected `Sequence[Tuple[str, str]]` for 1st positional only parameter to call `URL.update_query_pairs` but got `typing.AbstractSet[Tuple[str, Union[Sequence[str], str]]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 428,
    "warning_line": "        return self.update_query_pairs(query_parameters.items(), append=append)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "    def update_query_pairs(self, key_value_pairs, append=False):\n        # type: (Sequence[Tuple[str, str]], bool) -> URL\n        \"\"\"Return a new :class:`_engine.URL` object with the\n",
        "source_code_len": 183,
        "target_code": "    def update_query_pairs(self, key_value_pairs, append=False):\n        \"\"\"Return a new :class:`_engine.URL` object with the\n",
        "target_code_len": 126,
        "diff_format": "@@ -319,3 +307,2 @@\n     def update_query_pairs(self, key_value_pairs, append=False):\n-        # type: (Sequence[Tuple[str, str]], bool) -> URL\n         \"\"\"Return a new :class:`_engine.URL` object with the\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "    <DED>def update_query_pairs(self, key_value_pairs, append=False):\n        # type: (Sequence[Tuple[str, str]], bool) -> URL\n        <IND>",
        "target_code_with_indent": "    <DED>def update_query_pairs(self, key_value_pairs, append=False):\n        <IND>"
      }
    ]
  },
  {
    "project": "zzzeek/sqlalchemy",
    "commit": "71cb17c81d358646f8dfeac14e9662ce42bb94df",
    "filename": "lib/sqlalchemy/ext/asyncio/result.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/zzzeek-sqlalchemy/lib/sqlalchemy/ext/asyncio/result.py",
    "file_hunks_size": 33,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "lib/sqlalchemy/ext/asyncio/result.py:113:16 Incompatible return type [7]: Expected `Iterator[List[typing.Any]]` but got `typing.AsyncGenerator[typing.Any, None]`.",
    "message": " Expected `Iterator[List[typing.Any]]` but got `typing.AsyncGenerator[typing.Any, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 113,
    "warning_line": "                yield partition",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "    async def partitions(self, size=None):\n        # type: (Optional[Int]) -> Iterator[List[Any]]\n        \"\"\"Iterate through sub-lists of rows of the size given.\n",
        "source_code_len": 162,
        "target_code": "    async def partitions(self, size=None):\n        \"\"\"Iterate through sub-lists of rows of the size given.\n",
        "target_code_len": 107,
        "diff_format": "@@ -90,3 +78,2 @@\n     async def partitions(self, size=None):\n-        # type: (Optional[Int]) -> Iterator[List[Any]]\n         \"\"\"Iterate through sub-lists of rows of the size given.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "    <DED>async def partitions(self, size=None):\n        # type: (Optional[Int]) -> Iterator[List[Any]]\n        <IND>",
        "target_code_with_indent": "    <DED>async def partitions(self, size=None):\n        <IND>"
      }
    ]
  },
  {
    "project": "zzzeek/sqlalchemy",
    "commit": "71cb17c81d358646f8dfeac14e9662ce42bb94df",
    "filename": "lib/sqlalchemy/ext/asyncio/result.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/zzzeek-sqlalchemy/lib/sqlalchemy/ext/asyncio/result.py",
    "file_hunks_size": 33,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "lib/sqlalchemy/ext/asyncio/result.py:136:12 Incompatible return type [7]: Expected `lib.sqlalchemy.engine.row.Row` but got `None`.",
    "message": " Expected `lib.sqlalchemy.engine.row.Row` but got `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 136,
    "warning_line": "            return None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "    async def fetchone(self):\n        # type: () -> Row\n        \"\"\"Fetch one row.\n",
        "source_code_len": 82,
        "target_code": "    async def fetchone(self):\n        \"\"\"Fetch one row.\n",
        "target_code_len": 56,
        "diff_format": "@@ -117,3 +104,2 @@\n     async def fetchone(self):\n-        # type: () -> Row\n         \"\"\"Fetch one row.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "    <DED><DED><DED>async def fetchone(self):\n        # type: () -> Row\n        <IND>",
        "target_code_with_indent": "    <DED><DED><DED>async def fetchone(self):\n        <IND>"
      }
    ]
  },
  {
    "project": "zzzeek/sqlalchemy",
    "commit": "71cb17c81d358646f8dfeac14e9662ce42bb94df",
    "filename": "lib/sqlalchemy/ext/asyncio/result.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/zzzeek-sqlalchemy/lib/sqlalchemy/ext/asyncio/result.py",
    "file_hunks_size": 33,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "lib/sqlalchemy/ext/asyncio/result.py:442:16 Incompatible return type [7]: Expected `Iterator[List[typing.Any]]` but got `typing.AsyncGenerator[typing.Any, None]`.",
    "message": " Expected `Iterator[List[typing.Any]]` but got `typing.AsyncGenerator[typing.Any, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 442,
    "warning_line": "                yield partition",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "    async def partitions(self, size=None):\n        # type: (Optional[Int]) -> Iterator[List[Any]]\n        \"\"\"Iterate through sub-lists of elements of the size given.\n",
        "source_code_len": 166,
        "target_code": "    async def partitions(self, size=None):\n        \"\"\"Iterate through sub-lists of elements of the size given.\n",
        "target_code_len": 111,
        "diff_format": "@@ -427,3 +402,2 @@\n     async def partitions(self, size=None):\n-        # type: (Optional[Int]) -> Iterator[List[Any]]\n         \"\"\"Iterate through sub-lists of elements of the size given.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "    <DED>async def partitions(self, size=None):\n        # type: (Optional[Int]) -> Iterator[List[Any]]\n        <IND>",
        "target_code_with_indent": "    <DED>async def partitions(self, size=None):\n        <IND>"
      }
    ]
  },
  {
    "project": "zzzeek/sqlalchemy",
    "commit": "71cb17c81d358646f8dfeac14e9662ce42bb94df",
    "filename": "lib/sqlalchemy/ext/asyncio/result.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/zzzeek-sqlalchemy/lib/sqlalchemy/ext/asyncio/result.py",
    "file_hunks_size": 33,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "lib/sqlalchemy/ext/asyncio/result.py:589:16 Incompatible return type [7]: Expected `Iterator[List[Mapping[typing.Any, typing.Any]]]` but got `typing.AsyncGenerator[typing.Any, None]`.",
    "message": " Expected `Iterator[List[Mapping[typing.Any, typing.Any]]]` but got `typing.AsyncGenerator[typing.Any, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 589,
    "warning_line": "                yield partition",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "    async def partitions(self, size=None):\n        # type: (Optional[Int]) -> Iterator[List[Mapping]]\n        \"\"\"Iterate through sub-lists of elements of the size given.\n",
        "source_code_len": 170,
        "target_code": "    async def partitions(self, size=None):\n        \"\"\"Iterate through sub-lists of elements of the size given.\n",
        "target_code_len": 111,
        "diff_format": "@@ -574,3 +540,2 @@\n     async def partitions(self, size=None):\n-        # type: (Optional[Int]) -> Iterator[List[Mapping]]\n         \"\"\"Iterate through sub-lists of elements of the size given.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "    <DED>async def partitions(self, size=None):\n        # type: (Optional[Int]) -> Iterator[List[Mapping]]\n        <IND>",
        "target_code_with_indent": "    <DED>async def partitions(self, size=None):\n        <IND>"
      }
    ]
  },
  {
    "project": "zzzeek/sqlalchemy",
    "commit": "71cb17c81d358646f8dfeac14e9662ce42bb94df",
    "filename": "lib/sqlalchemy/ext/asyncio/result.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/zzzeek-sqlalchemy/lib/sqlalchemy/ext/asyncio/result.py",
    "file_hunks_size": 33,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "lib/sqlalchemy/ext/asyncio/result.py:611:12 Incompatible return type [7]: Expected `Mapping[typing.Any, typing.Any]` but got `None`.",
    "message": " Expected `Mapping[typing.Any, typing.Any]` but got `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 611,
    "warning_line": "            return None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "    async def fetchone(self):\n        # type: () -> Mapping\n        \"\"\"Fetch one object.\n",
        "source_code_len": 89,
        "target_code": "    async def fetchone(self):\n        \"\"\"Fetch one object.\n",
        "target_code_len": 59,
        "diff_format": "@@ -599,3 +563,2 @@\n     async def fetchone(self):\n-        # type: () -> Mapping\n         \"\"\"Fetch one object.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "    <DED>async def fetchone(self):\n        # type: () -> Mapping\n        <IND>",
        "target_code_with_indent": "    <DED>async def fetchone(self):\n        <IND>"
      }
    ]
  },
  {
    "project": "zzzeek/sqlalchemy",
    "commit": "71cb17c81d358646f8dfeac14e9662ce42bb94df",
    "filename": "lib/sqlalchemy/ext/asyncio/session.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/zzzeek-sqlalchemy/lib/sqlalchemy/ext/asyncio/session.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "lib/sqlalchemy/ext/asyncio/session.py:77:8 Incompatible variable type [9]: bind is declared to have type `AsyncEngine` but is used as type `None`.",
    "message": " bind is declared to have type `AsyncEngine` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 77,
    "warning_line": "        bind: AsyncEngine = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __init__(\n        self,\n        bind: AsyncEngine = None,\n        binds: Mapping[object, AsyncEngine] = None,\n        **kw\n    ):\n        kw[\"future\"] = True\n",
        "source_code_len": 167,
        "target_code": "\n    def __init__(self, bind=None, binds=None, **kw):\n        kw[\"future\"] = True\n",
        "target_code_len": 82,
        "diff_format": "@@ -74,8 +61,3 @@\n \n-    def __init__(\n-        self,\n-        bind: AsyncEngine = None,\n-        binds: Mapping[object, AsyncEngine] = None,\n-        **kw\n-    ):\n+    def __init__(self, bind=None, binds=None, **kw):\n         kw[\"future\"] = True\n",
        "source_code_with_indent": "\n    def __init__(\n        self,\n        bind: AsyncEngine = None,\n        binds: Mapping[object, AsyncEngine] = None,\n        **kw\n    ):\n        <IND>kw[\"future\"] = True\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    def __init__(self, bind=None, binds=None, **kw):\n        <IND>kw[\"future\"] = True\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "zzzeek/sqlalchemy",
    "commit": "71cb17c81d358646f8dfeac14e9662ce42bb94df",
    "filename": "lib/sqlalchemy/ext/asyncio/session.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/zzzeek-sqlalchemy/lib/sqlalchemy/ext/asyncio/session.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "lib/sqlalchemy/ext/asyncio/session.py:78:8 Incompatible variable type [9]: binds is declared to have type `Mapping[object, AsyncEngine]` but is used as type `None`.",
    "message": " binds is declared to have type `Mapping[object, AsyncEngine]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 78,
    "warning_line": "        binds: Mapping[object, AsyncEngine] = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __init__(\n        self,\n        bind: AsyncEngine = None,\n        binds: Mapping[object, AsyncEngine] = None,\n        **kw\n    ):\n        kw[\"future\"] = True\n",
        "source_code_len": 167,
        "target_code": "\n    def __init__(self, bind=None, binds=None, **kw):\n        kw[\"future\"] = True\n",
        "target_code_len": 82,
        "diff_format": "@@ -74,8 +61,3 @@\n \n-    def __init__(\n-        self,\n-        bind: AsyncEngine = None,\n-        binds: Mapping[object, AsyncEngine] = None,\n-        **kw\n-    ):\n+    def __init__(self, bind=None, binds=None, **kw):\n         kw[\"future\"] = True\n",
        "source_code_with_indent": "\n    def __init__(\n        self,\n        bind: AsyncEngine = None,\n        binds: Mapping[object, AsyncEngine] = None,\n        **kw\n    ):\n        <IND>kw[\"future\"] = True\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    def __init__(self, bind=None, binds=None, **kw):\n        <IND>kw[\"future\"] = True\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "zzzeek/sqlalchemy",
    "commit": "71cb17c81d358646f8dfeac14e9662ce42bb94df",
    "filename": "lib/sqlalchemy/sql/base.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/zzzeek-sqlalchemy/lib/sqlalchemy/sql/base.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "lib/sqlalchemy/sql/base.py:33:0 Incompatible variable type [9]: coercions is declared to have type `ModuleType` but is used as type `None`.",
    "message": " coercions is declared to have type `ModuleType` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 33,
    "warning_line": "coercions = None  # type: ModuleType",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nif util.TYPE_CHECKING:\n    from types import ModuleType\n\ncoercions = None  # type: ModuleType\nelements = None  # type: ModuleType\ntype_api = None  # type: ModuleType\n\n",
        "source_code_len": 168,
        "target_code": "\n\ncoercions = None\nelements = None\ntype_api = None\n\n",
        "target_code_len": 52,
        "diff_format": "@@ -29,8 +29,6 @@\n \n-if util.TYPE_CHECKING:\n-    from types import ModuleType\n-\n-coercions = None  # type: ModuleType\n-elements = None  # type: ModuleType\n-type_api = None  # type: ModuleType\n+\n+coercions = None\n+elements = None\n+type_api = None\n \n",
        "source_code_with_indent": "\nif util.TYPE_CHECKING:\n    <IND>from types import ModuleType\n\n<DED>coercions = None  # type: ModuleType\nelements = None  # type: ModuleType\ntype_api = None  # type: ModuleType\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n\ncoercions = None\nelements = None\ntype_api = None\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "zzzeek/sqlalchemy",
    "commit": "71cb17c81d358646f8dfeac14e9662ce42bb94df",
    "filename": "lib/sqlalchemy/sql/base.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/zzzeek-sqlalchemy/lib/sqlalchemy/sql/base.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "lib/sqlalchemy/sql/base.py:34:0 Incompatible variable type [9]: elements is declared to have type `ModuleType` but is used as type `None`.",
    "message": " elements is declared to have type `ModuleType` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 34,
    "warning_line": "elements = None  # type: ModuleType",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nif util.TYPE_CHECKING:\n    from types import ModuleType\n\ncoercions = None  # type: ModuleType\nelements = None  # type: ModuleType\ntype_api = None  # type: ModuleType\n\n",
        "source_code_len": 168,
        "target_code": "\n\ncoercions = None\nelements = None\ntype_api = None\n\n",
        "target_code_len": 52,
        "diff_format": "@@ -29,8 +29,6 @@\n \n-if util.TYPE_CHECKING:\n-    from types import ModuleType\n-\n-coercions = None  # type: ModuleType\n-elements = None  # type: ModuleType\n-type_api = None  # type: ModuleType\n+\n+coercions = None\n+elements = None\n+type_api = None\n \n",
        "source_code_with_indent": "\nif util.TYPE_CHECKING:\n    <IND>from types import ModuleType\n\n<DED>coercions = None  # type: ModuleType\nelements = None  # type: ModuleType\ntype_api = None  # type: ModuleType\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n\ncoercions = None\nelements = None\ntype_api = None\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "zzzeek/sqlalchemy",
    "commit": "71cb17c81d358646f8dfeac14e9662ce42bb94df",
    "filename": "lib/sqlalchemy/sql/base.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/zzzeek-sqlalchemy/lib/sqlalchemy/sql/base.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "lib/sqlalchemy/sql/base.py:35:0 Incompatible variable type [9]: type_api is declared to have type `ModuleType` but is used as type `None`.",
    "message": " type_api is declared to have type `ModuleType` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 35,
    "warning_line": "type_api = None  # type: ModuleType",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nif util.TYPE_CHECKING:\n    from types import ModuleType\n\ncoercions = None  # type: ModuleType\nelements = None  # type: ModuleType\ntype_api = None  # type: ModuleType\n\n",
        "source_code_len": 168,
        "target_code": "\n\ncoercions = None\nelements = None\ntype_api = None\n\n",
        "target_code_len": 52,
        "diff_format": "@@ -29,8 +29,6 @@\n \n-if util.TYPE_CHECKING:\n-    from types import ModuleType\n-\n-coercions = None  # type: ModuleType\n-elements = None  # type: ModuleType\n-type_api = None  # type: ModuleType\n+\n+coercions = None\n+elements = None\n+type_api = None\n \n",
        "source_code_with_indent": "\nif util.TYPE_CHECKING:\n    <IND>from types import ModuleType\n\n<DED>coercions = None  # type: ModuleType\nelements = None  # type: ModuleType\ntype_api = None  # type: ModuleType\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n\ncoercions = None\nelements = None\ntype_api = None\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "zzzeek/sqlalchemy",
    "commit": "71cb17c81d358646f8dfeac14e9662ce42bb94df",
    "filename": "lib/sqlalchemy/sql/coercions.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/zzzeek-sqlalchemy/lib/sqlalchemy/sql/coercions.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "lib/sqlalchemy/sql/coercions.py:25:0 Incompatible variable type [9]: elements is declared to have type `ModuleType` but is used as type `None`.",
    "message": " elements is declared to have type `ModuleType` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 25,
    "warning_line": "elements = None  # type: ModuleType",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nif util.TYPE_CHECKING:\n    from types import ModuleType\n\nelements = None  # type: ModuleType\nlambdas = None  # type: ModuleType\nschema = None  # type: ModuleType\nselectable = None  # type: ModuleType\nsqltypes = None  # type: ModuleType\ntraversals = None  # type: ModuleType\n\n",
        "source_code_len": 276,
        "target_code": "\n\nelements = None\nlambdas = None\nschema = None\nselectable = None\nsqltypes = None\ntraversals = None\n\n",
        "target_code_len": 100,
        "diff_format": "@@ -21,11 +21,9 @@\n \n-if util.TYPE_CHECKING:\n-    from types import ModuleType\n-\n-elements = None  # type: ModuleType\n-lambdas = None  # type: ModuleType\n-schema = None  # type: ModuleType\n-selectable = None  # type: ModuleType\n-sqltypes = None  # type: ModuleType\n-traversals = None  # type: ModuleType\n+\n+elements = None\n+lambdas = None\n+schema = None\n+selectable = None\n+sqltypes = None\n+traversals = None\n \n",
        "source_code_with_indent": "\nif util.TYPE_CHECKING:\n    <IND>from types import ModuleType\n\n<DED>elements = None  # type: ModuleType\nlambdas = None  # type: ModuleType\nschema = None  # type: ModuleType\nselectable = None  # type: ModuleType\nsqltypes = None  # type: ModuleType\ntraversals = None  # type: ModuleType\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n\nelements = None\nlambdas = None\nschema = None\nselectable = None\nsqltypes = None\ntraversals = None\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "zzzeek/sqlalchemy",
    "commit": "71cb17c81d358646f8dfeac14e9662ce42bb94df",
    "filename": "lib/sqlalchemy/sql/coercions.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/zzzeek-sqlalchemy/lib/sqlalchemy/sql/coercions.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "lib/sqlalchemy/sql/coercions.py:26:0 Incompatible variable type [9]: lambdas is declared to have type `ModuleType` but is used as type `None`.",
    "message": " lambdas is declared to have type `ModuleType` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 26,
    "warning_line": "lambdas = None  # type: ModuleType",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nif util.TYPE_CHECKING:\n    from types import ModuleType\n\nelements = None  # type: ModuleType\nlambdas = None  # type: ModuleType\nschema = None  # type: ModuleType\nselectable = None  # type: ModuleType\nsqltypes = None  # type: ModuleType\ntraversals = None  # type: ModuleType\n\n",
        "source_code_len": 276,
        "target_code": "\n\nelements = None\nlambdas = None\nschema = None\nselectable = None\nsqltypes = None\ntraversals = None\n\n",
        "target_code_len": 100,
        "diff_format": "@@ -21,11 +21,9 @@\n \n-if util.TYPE_CHECKING:\n-    from types import ModuleType\n-\n-elements = None  # type: ModuleType\n-lambdas = None  # type: ModuleType\n-schema = None  # type: ModuleType\n-selectable = None  # type: ModuleType\n-sqltypes = None  # type: ModuleType\n-traversals = None  # type: ModuleType\n+\n+elements = None\n+lambdas = None\n+schema = None\n+selectable = None\n+sqltypes = None\n+traversals = None\n \n",
        "source_code_with_indent": "\nif util.TYPE_CHECKING:\n    <IND>from types import ModuleType\n\n<DED>elements = None  # type: ModuleType\nlambdas = None  # type: ModuleType\nschema = None  # type: ModuleType\nselectable = None  # type: ModuleType\nsqltypes = None  # type: ModuleType\ntraversals = None  # type: ModuleType\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n\nelements = None\nlambdas = None\nschema = None\nselectable = None\nsqltypes = None\ntraversals = None\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "zzzeek/sqlalchemy",
    "commit": "71cb17c81d358646f8dfeac14e9662ce42bb94df",
    "filename": "lib/sqlalchemy/sql/coercions.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/zzzeek-sqlalchemy/lib/sqlalchemy/sql/coercions.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "lib/sqlalchemy/sql/coercions.py:27:0 Incompatible variable type [9]: schema is declared to have type `ModuleType` but is used as type `None`.",
    "message": " schema is declared to have type `ModuleType` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 27,
    "warning_line": "schema = None  # type: ModuleType",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nif util.TYPE_CHECKING:\n    from types import ModuleType\n\nelements = None  # type: ModuleType\nlambdas = None  # type: ModuleType\nschema = None  # type: ModuleType\nselectable = None  # type: ModuleType\nsqltypes = None  # type: ModuleType\ntraversals = None  # type: ModuleType\n\n",
        "source_code_len": 276,
        "target_code": "\n\nelements = None\nlambdas = None\nschema = None\nselectable = None\nsqltypes = None\ntraversals = None\n\n",
        "target_code_len": 100,
        "diff_format": "@@ -21,11 +21,9 @@\n \n-if util.TYPE_CHECKING:\n-    from types import ModuleType\n-\n-elements = None  # type: ModuleType\n-lambdas = None  # type: ModuleType\n-schema = None  # type: ModuleType\n-selectable = None  # type: ModuleType\n-sqltypes = None  # type: ModuleType\n-traversals = None  # type: ModuleType\n+\n+elements = None\n+lambdas = None\n+schema = None\n+selectable = None\n+sqltypes = None\n+traversals = None\n \n",
        "source_code_with_indent": "\nif util.TYPE_CHECKING:\n    <IND>from types import ModuleType\n\n<DED>elements = None  # type: ModuleType\nlambdas = None  # type: ModuleType\nschema = None  # type: ModuleType\nselectable = None  # type: ModuleType\nsqltypes = None  # type: ModuleType\ntraversals = None  # type: ModuleType\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n\nelements = None\nlambdas = None\nschema = None\nselectable = None\nsqltypes = None\ntraversals = None\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "zzzeek/sqlalchemy",
    "commit": "71cb17c81d358646f8dfeac14e9662ce42bb94df",
    "filename": "lib/sqlalchemy/sql/coercions.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/zzzeek-sqlalchemy/lib/sqlalchemy/sql/coercions.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "lib/sqlalchemy/sql/coercions.py:28:0 Incompatible variable type [9]: selectable is declared to have type `ModuleType` but is used as type `None`.",
    "message": " selectable is declared to have type `ModuleType` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 28,
    "warning_line": "selectable = None  # type: ModuleType",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nif util.TYPE_CHECKING:\n    from types import ModuleType\n\nelements = None  # type: ModuleType\nlambdas = None  # type: ModuleType\nschema = None  # type: ModuleType\nselectable = None  # type: ModuleType\nsqltypes = None  # type: ModuleType\ntraversals = None  # type: ModuleType\n\n",
        "source_code_len": 276,
        "target_code": "\n\nelements = None\nlambdas = None\nschema = None\nselectable = None\nsqltypes = None\ntraversals = None\n\n",
        "target_code_len": 100,
        "diff_format": "@@ -21,11 +21,9 @@\n \n-if util.TYPE_CHECKING:\n-    from types import ModuleType\n-\n-elements = None  # type: ModuleType\n-lambdas = None  # type: ModuleType\n-schema = None  # type: ModuleType\n-selectable = None  # type: ModuleType\n-sqltypes = None  # type: ModuleType\n-traversals = None  # type: ModuleType\n+\n+elements = None\n+lambdas = None\n+schema = None\n+selectable = None\n+sqltypes = None\n+traversals = None\n \n",
        "source_code_with_indent": "\nif util.TYPE_CHECKING:\n    <IND>from types import ModuleType\n\n<DED>elements = None  # type: ModuleType\nlambdas = None  # type: ModuleType\nschema = None  # type: ModuleType\nselectable = None  # type: ModuleType\nsqltypes = None  # type: ModuleType\ntraversals = None  # type: ModuleType\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n\nelements = None\nlambdas = None\nschema = None\nselectable = None\nsqltypes = None\ntraversals = None\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "zzzeek/sqlalchemy",
    "commit": "71cb17c81d358646f8dfeac14e9662ce42bb94df",
    "filename": "lib/sqlalchemy/sql/coercions.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/zzzeek-sqlalchemy/lib/sqlalchemy/sql/coercions.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "lib/sqlalchemy/sql/coercions.py:29:0 Incompatible variable type [9]: sqltypes is declared to have type `ModuleType` but is used as type `None`.",
    "message": " sqltypes is declared to have type `ModuleType` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 29,
    "warning_line": "sqltypes = None  # type: ModuleType",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nif util.TYPE_CHECKING:\n    from types import ModuleType\n\nelements = None  # type: ModuleType\nlambdas = None  # type: ModuleType\nschema = None  # type: ModuleType\nselectable = None  # type: ModuleType\nsqltypes = None  # type: ModuleType\ntraversals = None  # type: ModuleType\n\n",
        "source_code_len": 276,
        "target_code": "\n\nelements = None\nlambdas = None\nschema = None\nselectable = None\nsqltypes = None\ntraversals = None\n\n",
        "target_code_len": 100,
        "diff_format": "@@ -21,11 +21,9 @@\n \n-if util.TYPE_CHECKING:\n-    from types import ModuleType\n-\n-elements = None  # type: ModuleType\n-lambdas = None  # type: ModuleType\n-schema = None  # type: ModuleType\n-selectable = None  # type: ModuleType\n-sqltypes = None  # type: ModuleType\n-traversals = None  # type: ModuleType\n+\n+elements = None\n+lambdas = None\n+schema = None\n+selectable = None\n+sqltypes = None\n+traversals = None\n \n",
        "source_code_with_indent": "\nif util.TYPE_CHECKING:\n    <IND>from types import ModuleType\n\n<DED>elements = None  # type: ModuleType\nlambdas = None  # type: ModuleType\nschema = None  # type: ModuleType\nselectable = None  # type: ModuleType\nsqltypes = None  # type: ModuleType\ntraversals = None  # type: ModuleType\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n\nelements = None\nlambdas = None\nschema = None\nselectable = None\nsqltypes = None\ntraversals = None\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "zzzeek/sqlalchemy",
    "commit": "71cb17c81d358646f8dfeac14e9662ce42bb94df",
    "filename": "lib/sqlalchemy/sql/coercions.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/zzzeek-sqlalchemy/lib/sqlalchemy/sql/coercions.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "lib/sqlalchemy/sql/coercions.py:30:0 Incompatible variable type [9]: traversals is declared to have type `ModuleType` but is used as type `None`.",
    "message": " traversals is declared to have type `ModuleType` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 30,
    "warning_line": "traversals = None  # type: ModuleType",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nif util.TYPE_CHECKING:\n    from types import ModuleType\n\nelements = None  # type: ModuleType\nlambdas = None  # type: ModuleType\nschema = None  # type: ModuleType\nselectable = None  # type: ModuleType\nsqltypes = None  # type: ModuleType\ntraversals = None  # type: ModuleType\n\n",
        "source_code_len": 276,
        "target_code": "\n\nelements = None\nlambdas = None\nschema = None\nselectable = None\nsqltypes = None\ntraversals = None\n\n",
        "target_code_len": 100,
        "diff_format": "@@ -21,11 +21,9 @@\n \n-if util.TYPE_CHECKING:\n-    from types import ModuleType\n-\n-elements = None  # type: ModuleType\n-lambdas = None  # type: ModuleType\n-schema = None  # type: ModuleType\n-selectable = None  # type: ModuleType\n-sqltypes = None  # type: ModuleType\n-traversals = None  # type: ModuleType\n+\n+elements = None\n+lambdas = None\n+schema = None\n+selectable = None\n+sqltypes = None\n+traversals = None\n \n",
        "source_code_with_indent": "\nif util.TYPE_CHECKING:\n    <IND>from types import ModuleType\n\n<DED>elements = None  # type: ModuleType\nlambdas = None  # type: ModuleType\nschema = None  # type: ModuleType\nselectable = None  # type: ModuleType\nsqltypes = None  # type: ModuleType\ntraversals = None  # type: ModuleType\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n\nelements = None\nlambdas = None\nschema = None\nselectable = None\nsqltypes = None\ntraversals = None\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "zzzeek/sqlalchemy",
    "commit": "71cb17c81d358646f8dfeac14e9662ce42bb94df",
    "filename": "lib/sqlalchemy/sql/selectable.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/zzzeek-sqlalchemy/lib/sqlalchemy/sql/selectable.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "lib/sqlalchemy/sql/selectable.py:3111:8 Incompatible return type [7]: Expected `FromClause` but got `SelectStatementGrouping`.",
    "message": " Expected `FromClause` but got `SelectStatementGrouping`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 3111,
    "warning_line": "        return self",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "    def self_group(self, against=None):\n        # type: (Optional[Any]) -> FromClause\n        return self\n",
        "source_code_len": 106,
        "target_code": "    def self_group(self, against=None):\n        return self\n",
        "target_code_len": 60,
        "diff_format": "@@ -3109,3 +3103,2 @@\n     def self_group(self, against=None):\n-        # type: (Optional[Any]) -> FromClause\n         return self\n",
        "source_code_with_indent": "    <DED>def self_group(self, against=None):\n        # type: (Optional[Any]) -> FromClause\n        <IND>return self\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def self_group(self, against=None):\n        <IND>return self\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "zzzeek/sqlalchemy",
    "commit": "71cb17c81d358646f8dfeac14e9662ce42bb94df",
    "filename": "lib/sqlalchemy/sql/selectable.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/zzzeek-sqlalchemy/lib/sqlalchemy/sql/selectable.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "lib/sqlalchemy/sql/selectable.py:3881:8 Incompatible return type [7]: Expected `FromClause` but got `SelectStatementGrouping`.",
    "message": " Expected `FromClause` but got `SelectStatementGrouping`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 3881,
    "warning_line": "        return SelectStatementGrouping(self)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "    def self_group(self, against=None):\n        # type: (Optional[Any]) -> FromClause\n        return SelectStatementGrouping(self)\n",
        "source_code_len": 131,
        "target_code": "    def self_group(self, against=None):\n        return SelectStatementGrouping(self)\n",
        "target_code_len": 85,
        "diff_format": "@@ -3879,3 +3872,2 @@\n     def self_group(self, against=None):\n-        # type: (Optional[Any]) -> FromClause\n         return SelectStatementGrouping(self)\n",
        "source_code_with_indent": "    <DED>def self_group(self, against=None):\n        # type: (Optional[Any]) -> FromClause\n        <IND>return SelectStatementGrouping(self)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def self_group(self, against=None):\n        <IND>return SelectStatementGrouping(self)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "zzzeek/sqlalchemy",
    "commit": "71cb17c81d358646f8dfeac14e9662ce42bb94df",
    "filename": "lib/sqlalchemy/testing/provision.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/zzzeek-sqlalchemy/lib/sqlalchemy/testing/provision.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "lib/sqlalchemy/testing/provision.py:196:8 Incompatible return type [7]: Expected `sa_url.URL` but got `None`.",
    "message": " Expected `sa_url.URL` but got `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 196,
    "warning_line": "        return None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "def generate_driver_url(url, driver, query_str):\n    # type: (URL, str, str) -> URL\n    backend = url.get_backend_name()\n",
        "source_code_len": 121,
        "target_code": "def generate_driver_url(url, driver, query_str):\n    backend = url.get_backend_name()\n",
        "target_code_len": 86,
        "diff_format": "@@ -183,3 +180,2 @@\n def generate_driver_url(url, driver, query_str):\n-    # type: (URL, str, str) -> URL\n     backend = url.get_backend_name()\n",
        "source_code_with_indent": "def generate_driver_url(url, driver, query_str):\n    # type: (URL, str, str) -> URL\n    <IND>backend = url.get_backend_name()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "def generate_driver_url(url, driver, query_str):\n    <IND>backend = url.get_backend_name()\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]