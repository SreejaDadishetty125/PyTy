[
  {
    "project": "ssato/python-anyconfig",
    "commit": "c5705f960e78785768ad1fa544ac839f5e1cce5c",
    "filename": "src/anyconfig/schema/jsonschema.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ssato-python-anyconfig/src/anyconfig/schema/jsonschema.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/anyconfig/schema/jsonschema.py:106:8 Incompatible parameter type [6]: Expected `typing.Mapping[str, typing.Any]` for 1st positional only parameter to call `validate` but got `typing.Union[None, typing.Mapping[str, typing.Any], bool, float, int, str]`.",
    "message": " Expected `typing.Mapping[str, typing.Any]` for 1st positional only parameter to call `validate` but got `typing.Union[None, typing.Mapping[str, typing.Any], bool, float, int, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 106,
    "warning_line": "        data, schema, ac_schema_safe=True,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from ..common import (\n    ValidationError, InDataExT\n)\n",
        "source_code_len": 56,
        "target_code": "from ..common import (\n    ValidationError, InDataExT, InDataT\n)\n",
        "target_code_len": 65,
        "diff_format": "@@ -22,3 +22,3 @@\n from ..common import (\n-    ValidationError, InDataExT\n+    ValidationError, InDataExT, InDataT\n )\n",
        "source_code_with_indent": "from ..common import (\n    ValidationError, InDataExT\n)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from ..common import (\n    ValidationError, InDataExT, InDataT\n)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": ")\nfrom .common import DataT, ResultT\n\n\ndef _validate_all(data: DataT, schema: DataT, **_options) -> ResultT:\n    \"\"\"\n",
        "source_code_len": 117,
        "target_code": ")\nfrom .common import ResultT\n\n\ndef _validate_all(data: InDataExT, schema: InDataT, **_options) -> ResultT:\n    \"\"\"\n",
        "target_code_len": 116,
        "diff_format": "@@ -27,6 +27,6 @@\n )\n-from .common import DataT, ResultT\n-\n-\n-def _validate_all(data: DataT, schema: DataT, **_options) -> ResultT:\n+from .common import ResultT\n+\n+\n+def _validate_all(data: InDataExT, schema: InDataT, **_options) -> ResultT:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": ")\nfrom .common import DataT, ResultT\n\n\ndef _validate_all(data: DataT, schema: DataT, **_options) -> ResultT:\n    <IND>",
        "target_code_with_indent": ")\nfrom .common import ResultT\n\n\ndef _validate_all(data: InDataExT, schema: InDataT, **_options) -> ResultT:\n    <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _validate(data: DataT, schema: DataT, ac_schema_safe: bool = True,\n              **options: typing.Any) -> ResultT:\n",
        "source_code_len": 121,
        "target_code": "\ndef _validate(data: InDataExT, schema: InDataT, ac_schema_safe: bool = True,\n              **options: typing.Any) -> ResultT:\n",
        "target_code_len": 127,
        "diff_format": "@@ -44,3 +44,3 @@\n \n-def _validate(data: DataT, schema: DataT, ac_schema_safe: bool = True,\n+def _validate(data: InDataExT, schema: InDataT, ac_schema_safe: bool = True,\n               **options: typing.Any) -> ResultT:\n",
        "source_code_with_indent": "\n<DED>def _validate(data: DataT, schema: DataT, ac_schema_safe: bool = True,\n              **options: typing.Any) -> ResultT:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def _validate(data: InDataExT, schema: InDataT, ac_schema_safe: bool = True,\n              **options: typing.Any) -> ResultT:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef validate(data: DataT, schema: DataT, ac_schema_safe: bool = True,\n             ac_schema_errors: bool = False, **options: typing.Any\n",
        "source_code_len": 138,
        "target_code": "\ndef validate(data: InDataExT, schema: InDataT, ac_schema_safe: bool = True,\n             ac_schema_errors: bool = False, **options: typing.Any\n",
        "target_code_len": 144,
        "diff_format": "@@ -66,3 +66,3 @@\n \n-def validate(data: DataT, schema: DataT, ac_schema_safe: bool = True,\n+def validate(data: InDataExT, schema: InDataT, ac_schema_safe: bool = True,\n              ac_schema_errors: bool = False, **options: typing.Any\n",
        "source_code_with_indent": "\n<DED>def validate(data: DataT, schema: DataT, ac_schema_safe: bool = True,\n             ac_schema_errors: bool = False, **options: typing.Any\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def validate(data: InDataExT, schema: InDataT, ac_schema_safe: bool = True,\n             ac_schema_errors: bool = False, **options: typing.Any\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef is_valid(data: InDataExT, schema: DataT, ac_schema_safe: bool = True,\n             ac_schema_errors: bool = False, **options) -> bool:\n",
        "source_code_len": 140,
        "target_code": "\ndef is_valid(data: InDataExT, schema: InDataT, ac_schema_safe: bool = True,\n             ac_schema_errors: bool = False, **options) -> bool:\n",
        "target_code_len": 142,
        "diff_format": "@@ -96,3 +96,3 @@\n \n-def is_valid(data: InDataExT, schema: DataT, ac_schema_safe: bool = True,\n+def is_valid(data: InDataExT, schema: InDataT, ac_schema_safe: bool = True,\n              ac_schema_errors: bool = False, **options) -> bool:\n",
        "source_code_with_indent": "\n<DED>def is_valid(data: InDataExT, schema: DataT, ac_schema_safe: bool = True,\n             ac_schema_errors: bool = False, **options) -> bool:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def is_valid(data: InDataExT, schema: InDataT, ac_schema_safe: bool = True,\n             ac_schema_errors: bool = False, **options) -> bool:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef array_to_schema(iarr: typing.Iterable[DataT], **options\n                    ) -> typing.Dict[str, typing.Any]:\n",
        "source_code_len": 116,
        "target_code": "\ndef array_to_schema(iarr: typing.Iterable[InDataT], **options\n                    ) -> typing.Dict[str, typing.Any]:\n",
        "target_code_len": 118,
        "diff_format": "@@ -135,3 +135,3 @@\n \n-def array_to_schema(iarr: typing.Iterable[DataT], **options\n+def array_to_schema(iarr: typing.Iterable[InDataT], **options\n                     ) -> typing.Dict[str, typing.Any]:\n",
        "source_code_with_indent": "\n<DED>def array_to_schema(iarr: typing.Iterable[DataT], **options\n                    ) -> typing.Dict[str, typing.Any]:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def array_to_schema(iarr: typing.Iterable[InDataT], **options\n                    ) -> typing.Dict[str, typing.Any]:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    arr: typing.List[DataT] = list(iarr)\n    scm = {\n",
        "source_code_len": 54,
        "target_code": "\n    arr: typing.List[InDataT] = list(iarr)\n    scm = {\n",
        "target_code_len": 56,
        "diff_format": "@@ -150,3 +150,3 @@\n \n-    arr: typing.List[DataT] = list(iarr)\n+    arr: typing.List[InDataT] = list(iarr)\n     scm = {\n",
        "source_code_with_indent": "\n    arr: typing.List[DataT] = list(iarr)\n    scm = {\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    arr: typing.List[InDataT] = list(iarr)\n    scm = {\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef object_to_schema(obj: DataT, **options) -> DataT:\n    \"\"\"\n",
        "source_code_len": 63,
        "target_code": "\ndef object_to_schema(obj: InDataT, **options) -> InDataT:\n    \"\"\"\n",
        "target_code_len": 67,
        "diff_format": "@@ -163,3 +163,3 @@\n \n-def object_to_schema(obj: DataT, **options) -> DataT:\n+def object_to_schema(obj: InDataT, **options) -> InDataT:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>def object_to_schema(obj: DataT, **options) -> DataT:\n    <IND>",
        "target_code_with_indent": "\n<DED>def object_to_schema(obj: InDataT, **options) -> InDataT:\n    <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "_SIMPLE_TYPES = (bool, int, float, str)\nMaybeDataT = typing.Union[DataT, bool, int, float, str, None]\n\n\ndef gen_schema(data: MaybeDataT, **options) -> DataT:\n    \"\"\"\n",
        "source_code_len": 166,
        "target_code": "_SIMPLE_TYPES = (bool, int, float, str)\n\n\ndef gen_schema(data: InDataExT, **options) -> InDataT:\n    \"\"\"\n",
        "target_code_len": 105,
        "diff_format": "@@ -187,6 +187,5 @@\n _SIMPLE_TYPES = (bool, int, float, str)\n-MaybeDataT = typing.Union[DataT, bool, int, float, str, None]\n-\n-\n-def gen_schema(data: MaybeDataT, **options) -> DataT:\n+\n+\n+def gen_schema(data: InDataExT, **options) -> InDataT:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "<DED>_SIMPLE_TYPES = (bool, int, float, str)\nMaybeDataT = typing.Union[DataT, bool, int, float, str, None]\n\n\ndef gen_schema(data: MaybeDataT, **options) -> DataT:\n    <IND>",
        "target_code_with_indent": "<DED>_SIMPLE_TYPES = (bool, int, float, str)\n\n\ndef gen_schema(data: InDataExT, **options) -> InDataT:\n    <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    elif is_list_like(data):\n        scm = array_to_schema(typing.cast(typing.Iterable[DataT], data),\n                              **options)\n\n",
        "source_code_len": 144,
        "target_code": "    elif is_list_like(data):\n        scm = array_to_schema(\n            typing.cast(typing.Iterable[InDataT], data), **options\n        )\n\n",
        "target_code_len": 138,
        "diff_format": "@@ -216,4 +215,5 @@\n     elif is_list_like(data):\n-        scm = array_to_schema(typing.cast(typing.Iterable[DataT], data),\n-                              **options)\n+        scm = array_to_schema(\n+            typing.cast(typing.Iterable[InDataT], data), **options\n+        )\n \n",
        "source_code_with_indent": "    <DED>elif is_list_like(data):\n        <IND>scm = array_to_schema(typing.cast(typing.Iterable[DataT], data),\n                              **options)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>elif is_list_like(data):\n        <IND>scm = array_to_schema(\n            typing.cast(typing.Iterable[InDataT], data), **options\n        )\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]