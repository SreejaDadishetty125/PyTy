[
  {
    "project": "asyml/forte",
    "commit": "403443bcdeb8d601c7ae872d1ea0ea90adac647f",
    "filename": "forte/data/base_reader.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/asyml-forte/forte/data/base_reader.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "forte/data/base_reader.py:354:4 Inconsistent override [14]: `forte.data.base_reader.BaseReader.finish` overrides method defined in `PipelineComponent` inconsistently. Could not find parameter `resource` in overriding signature.",
    "message": " `forte.data.base_reader.BaseReader.finish` overrides method defined in `PipelineComponent` inconsistently. Could not find parameter `resource` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 354,
    "warning_line": "    def finish(self, resources: Resources):",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def finish(self, resources: Resources):\n        pass\n",
        "source_code_len": 58,
        "target_code": "\n    def finish(self, resource: Resources):\n        pass\n",
        "target_code_len": 57,
        "diff_format": "@@ -353,3 +353,3 @@\n \n-    def finish(self, resources: Resources):\n+    def finish(self, resource: Resources):\n         pass\n",
        "source_code_with_indent": "\n    <DED><DED><DED>def finish(self, resources: Resources):\n        <IND>pass\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED><DED><DED>def finish(self, resource: Resources):\n        <IND>pass\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "asyml/forte",
    "commit": "403443bcdeb8d601c7ae872d1ea0ea90adac647f",
    "filename": "forte/data/batchers.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/asyml-forte/forte/data/batchers.py",
    "file_hunks_size": 34,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "forte/data/batchers.py:337:4 Inconsistent override [14]: `forte.data.batchers.FixedSizeDataPackBatcher.initialize` overrides method defined in `ProcessingBatcher` inconsistently. Could not find parameter `_` in overriding signature.",
    "message": " `forte.data.batchers.FixedSizeDataPackBatcher.initialize` overrides method defined in `ProcessingBatcher` inconsistently. Could not find parameter `_` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 337,
    "warning_line": "    def initialize(self, config: Config):"
  },
  {
    "project": "asyml/forte",
    "commit": "403443bcdeb8d601c7ae872d1ea0ea90adac647f",
    "filename": "forte/data/batchers.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/asyml-forte/forte/data/batchers.py",
    "file_hunks_size": 34,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "forte/data/batchers.py:403:4 Inconsistent override [14]: `forte.data.batchers.FixedSizeMultiPackProcessingBatcher.initialize` overrides method defined in `ProcessingBatcher` inconsistently. Could not find parameter `_` in overriding signature.",
    "message": " `forte.data.batchers.FixedSizeMultiPackProcessingBatcher.initialize` overrides method defined in `ProcessingBatcher` inconsistently. Could not find parameter `_` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 403,
    "warning_line": "    def initialize(self, config: Config):"
  },
  {
    "project": "asyml/forte",
    "commit": "403443bcdeb8d601c7ae872d1ea0ea90adac647f",
    "filename": "forte/data/ontology/utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/asyml-forte/forte/data/ontology/utils.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "forte/data/ontology/utils.py:149:54 Incompatible parameter type [6]: Expected `importlib.machinery.ModuleSpec` for 1st positional only parameter to call `import_util.module_from_spec` but got `Optional[importlib.machinery.ModuleSpec]`.",
    "message": " Expected `importlib.machinery.ModuleSpec` for 1st positional only parameter to call `import_util.module_from_spec` but got `Optional[importlib.machinery.ModuleSpec]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 149,
    "warning_line": "                module = import_util.module_from_spec(spec)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "                spec = import_util.spec_from_file_location(module_str, filepath)\n                module = import_util.module_from_spec(spec)\n                spec.loader.exec_module(module)  # type: ignore\n",
        "source_code_len": 205,
        "target_code": "                spec = import_util.spec_from_file_location(module_str, filepath)\n                module = import_util.module_from_spec(spec)  # type: ignore\n                spec.loader.exec_module(module)  # type: ignore\n",
        "target_code_len": 221,
        "diff_format": "@@ -148,3 +148,3 @@\n                 spec = import_util.spec_from_file_location(module_str, filepath)\n-                module = import_util.module_from_spec(spec)\n+                module = import_util.module_from_spec(spec)  # type: ignore\n                 spec.loader.exec_module(module)  # type: ignore\n",
        "source_code_with_indent": "                <IND>spec = import_util.spec_from_file_location(module_str, filepath)\n                module = import_util.module_from_spec(spec)\n                spec.loader.exec_module(module)  # type: ignore\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                <IND>spec = import_util.spec_from_file_location(module_str, filepath)\n                module = import_util.module_from_spec(spec)  # type: ignore\n                spec.loader.exec_module(module)  # type: ignore\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "asyml/forte",
    "commit": "403443bcdeb8d601c7ae872d1ea0ea90adac647f",
    "filename": "forte/datasets/wikipedia/dbpedia/dbpedia_datasets.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/asyml-forte/forte/datasets/wikipedia/dbpedia/dbpedia_datasets.py",
    "file_hunks_size": 14,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "forte/datasets/wikipedia/dbpedia/dbpedia_datasets.py:86:4 Inconsistent override [14]: `forte.datasets.wikipedia.dbpedia.dbpedia_datasets.DBpediaWikiReader.initialize` overrides method defined in `forte.data.base_reader.BaseReader` inconsistently. Could not find parameter `configs` in overriding signature.",
    "message": " `forte.datasets.wikipedia.dbpedia.dbpedia_datasets.DBpediaWikiReader.initialize` overrides method defined in `forte.data.base_reader.BaseReader` inconsistently. Could not find parameter `configs` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 86,
    "warning_line": "    def initialize(self, resources: Resources, config: Config):"
  },
  {
    "project": "asyml/forte",
    "commit": "403443bcdeb8d601c7ae872d1ea0ea90adac647f",
    "filename": "forte/processors/data_augment/algorithms/embedding_similarity_replacement_op.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/asyml-forte/forte/processors/data_augment/algorithms/embedding_similarity_replacement_op.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "forte/processors/data_augment/algorithms/embedding_similarity_replacement_op.py:60:4 Inconsistent override [14]: `forte.processors.data_augment.algorithms.embedding_similarity_replacement_op.EmbeddingSimilarityReplacementOp.replace` overrides method defined in `TextReplacementOp` inconsistently. Could not find parameter `input_anno` in overriding signature.",
    "message": " `forte.processors.data_augment.algorithms.embedding_similarity_replacement_op.EmbeddingSimilarityReplacementOp.replace` overrides method defined in `TextReplacementOp` inconsistently. Could not find parameter `input_anno` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 60,
    "warning_line": "    def replace(self, input: Annotation) -> Tuple[bool, str]:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def replace(self, input: Annotation) -> Tuple[bool, str]:\n        r\"\"\"\n",
        "source_code_len": 76,
        "target_code": "\n    def replace(self, input_anno: Annotation) -> Tuple[bool, str]:\n        r\"\"\"\n",
        "target_code_len": 81,
        "diff_format": "@@ -59,3 +59,3 @@\n \n-    def replace(self, input: Annotation) -> Tuple[bool, str]:\n+    def replace(self, input_anno: Annotation) -> Tuple[bool, str]:\n         r\"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def replace(self, input: Annotation) -> Tuple[bool, str]:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def replace(self, input_anno: Annotation) -> Tuple[bool, str]:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"\"\"\n        word = input.text\n        if word not in self.vocab.token_to_id_map_py:\n",
        "source_code_len": 92,
        "target_code": "        \"\"\"\n        word = input_anno.text\n        if word not in self.vocab.token_to_id_map_py:\n",
        "target_code_len": 97,
        "diff_format": "@@ -71,3 +71,3 @@\n         \"\"\"\n-        word = input.text\n+        word = input_anno.text\n         if word not in self.vocab.token_to_id_map_py:\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n        word = input.text\n        if word not in self.vocab.token_to_id_map_py:\n",
        "target_code_with_indent": "\n        word = input_anno.text\n        if word not in self.vocab.token_to_id_map_py:\n"
      }
    ]
  },
  {
    "project": "asyml/forte",
    "commit": "403443bcdeb8d601c7ae872d1ea0ea90adac647f",
    "filename": "forte/processors/nlp/ner_predictor.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/asyml-forte/forte/processors/nlp/ner_predictor.py",
    "file_hunks_size": 12,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "forte/processors/nlp/ner_predictor.py:192:4 Inconsistent override [14]: `forte.processors.nlp.ner_predictor.CoNLLNERPredictor.pack` overrides method defined in `forte.processors.base.batch_processor.BaseBatchProcessor` inconsistently. Could not find parameter `inputs` in overriding signature.",
    "message": " `forte.processors.nlp.ner_predictor.CoNLLNERPredictor.pack` overrides method defined in `forte.processors.base.batch_processor.BaseBatchProcessor` inconsistently. Could not find parameter `inputs` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 192,
    "warning_line": "    def pack(",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n    def pack(\n        self,\n        data_pack: DataPack,\n        output_dict: Optional[Dict[str, Dict[str, List[str]]]] = None,\n    ):\n",
        "source_code_len": 136,
        "target_code": "\n    def pack(  # type: ignore\n        self,\n        pack: DataPack,\n        predict_results: Dict[str, Dict[str, List[str]]],\n        _: Optional[Annotation] = None,\n    ):\n",
        "target_code_len": 174,
        "diff_format": "@@ -191,6 +174,7 @@\n \n-    def pack(\n+    def pack(  # type: ignore\n         self,\n-        data_pack: DataPack,\n-        output_dict: Optional[Dict[str, Dict[str, List[str]]]] = None,\n+        pack: DataPack,\n+        predict_results: Dict[str, Dict[str, List[str]]],\n+        _: Optional[Annotation] = None,\n     ):\n",
        "source_code_with_indent": "\n    <DED>def pack(\n        self,\n        data_pack: DataPack,\n        output_dict: Optional[Dict[str, Dict[str, List[str]]]] = None,\n    ):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def pack(  # type: ignore\n        self,\n        pack: DataPack,\n        predict_results: Dict[str, Dict[str, List[str]]],\n        _: Optional[Annotation] = None,\n    ):\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        if output_dict is None:\n            return\n",
        "source_code_len": 52,
        "target_code": "\n        if predict_results is None:\n            return\n",
        "target_code_len": 56,
        "diff_format": "@@ -201,3 +185,3 @@\n \n-        if output_dict is None:\n+        if predict_results is None:\n             return\n",
        "source_code_with_indent": "\n        if output_dict is None:\n            <IND>return\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        if predict_results is None:\n            <IND>return\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n        for i in range(len(output_dict[\"Token\"][\"tid\"])):\n            # an instance\n            for j in range(len(output_dict[\"Token\"][\"tid\"][i])):\n                tid: int = output_dict[\"Token\"][\"tid\"][i][j]  # type: ignore\n\n                orig_token: Token = data_pack.get_entry(tid)  # type: ignore\n                ner_tag: str = output_dict[\"Token\"][\"ner\"][i][j]\n\n",
        "source_code_len": 371,
        "target_code": "\n        for i in range(len(predict_results[\"Token\"][\"tid\"])):\n            # an instance\n            for j in range(len(predict_results[\"Token\"][\"tid\"][i])):\n                tid: int = predict_results[\"Token\"][\"tid\"][i][j]  # type: ignore\n\n                orig_token: Token = pack.get_entry(tid)  # type: ignore\n                ner_tag: str = predict_results[\"Token\"][\"ner\"][i][j]\n\n",
        "target_code_len": 382,
        "diff_format": "@@ -206,9 +190,9 @@\n \n-        for i in range(len(output_dict[\"Token\"][\"tid\"])):\n+        for i in range(len(predict_results[\"Token\"][\"tid\"])):\n             # an instance\n-            for j in range(len(output_dict[\"Token\"][\"tid\"][i])):\n-                tid: int = output_dict[\"Token\"][\"tid\"][i][j]  # type: ignore\n-\n-                orig_token: Token = data_pack.get_entry(tid)  # type: ignore\n-                ner_tag: str = output_dict[\"Token\"][\"ner\"][i][j]\n+            for j in range(len(predict_results[\"Token\"][\"tid\"][i])):\n+                tid: int = predict_results[\"Token\"][\"tid\"][i][j]  # type: ignore\n+\n+                orig_token: Token = pack.get_entry(tid)  # type: ignore\n+                ner_tag: str = predict_results[\"Token\"][\"ner\"][i][j]\n \n",
        "source_code_with_indent": "\n        for i in range(len(output_dict[\"Token\"][\"tid\"])):\n            # an instance\n            <IND>for j in range(len(output_dict[\"Token\"][\"tid\"][i])):\n                <IND>tid: int = output_dict[\"Token\"][\"tid\"][i][j]  # type: ignore\n\n                orig_token: Token = data_pack.get_entry(tid)  # type: ignore\n                ner_tag: str = output_dict[\"Token\"][\"ner\"][i][j]\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        for i in range(len(predict_results[\"Token\"][\"tid\"])):\n            # an instance\n            <IND>for j in range(len(predict_results[\"Token\"][\"tid\"][i])):\n                <IND>tid: int = predict_results[\"Token\"][\"tid\"][i][j]  # type: ignore\n\n                orig_token: Token = pack.get_entry(tid)  # type: ignore\n                ner_tag: str = predict_results[\"Token\"][\"ner\"][i][j]\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                    entity = EntityMention(\n                        data_pack, current_entity_mention[0], token.span.end\n                    )\n",
        "source_code_len": 143,
        "target_code": "                    entity = EntityMention(\n                        pack, current_entity_mention[0], token.span.end\n                    )\n",
        "target_code_len": 138,
        "diff_format": "@@ -231,3 +215,3 @@\n                     entity = EntityMention(\n-                        data_pack, current_entity_mention[0], token.span.end\n+                        pack, current_entity_mention[0], token.span.end\n                     )\n",
        "source_code_with_indent": "                    <DED>entity = EntityMention(\n                        data_pack, current_entity_mention[0], token.span.end\n                    )\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                    <DED>entity = EntityMention(\n                        pack, current_entity_mention[0], token.span.end\n                    )\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                    entity = EntityMention(\n                        data_pack, current_entity_mention[0], token.span.end\n                    )\n",
        "source_code_len": 143,
        "target_code": "                    entity = EntityMention(\n                        pack, current_entity_mention[0], token.span.end\n                    )\n",
        "target_code_len": 138,
        "diff_format": "@@ -237,3 +221,3 @@\n                     entity = EntityMention(\n-                        data_pack, current_entity_mention[0], token.span.end\n+                        pack, current_entity_mention[0], token.span.end\n                     )\n",
        "source_code_with_indent": "                    entity = EntityMention(\n                        data_pack, current_entity_mention[0], token.span.end\n                    )\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                    entity = EntityMention(\n                        pack, current_entity_mention[0], token.span.end\n                    )\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "asyml/forte",
    "commit": "403443bcdeb8d601c7ae872d1ea0ea90adac647f",
    "filename": "forte/processors/nlp/ner_predictor.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/asyml-forte/forte/processors/nlp/ner_predictor.py",
    "file_hunks_size": 12,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "forte/processors/nlp/ner_predictor.py:192:4 Inconsistent override [14]: `forte.processors.nlp.ner_predictor.CoNLLNERPredictor.pack` overrides method defined in `forte.processors.base.batch_processor.BaseBatchProcessor` inconsistently. Could not find parameter `pack` in overriding signature.",
    "message": " `forte.processors.nlp.ner_predictor.CoNLLNERPredictor.pack` overrides method defined in `forte.processors.base.batch_processor.BaseBatchProcessor` inconsistently. Could not find parameter `pack` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 192,
    "warning_line": "    def pack(",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n    def pack(\n        self,\n        data_pack: DataPack,\n        output_dict: Optional[Dict[str, Dict[str, List[str]]]] = None,\n    ):\n",
        "source_code_len": 136,
        "target_code": "\n    def pack(  # type: ignore\n        self,\n        pack: DataPack,\n        predict_results: Dict[str, Dict[str, List[str]]],\n        _: Optional[Annotation] = None,\n    ):\n",
        "target_code_len": 174,
        "diff_format": "@@ -191,6 +174,7 @@\n \n-    def pack(\n+    def pack(  # type: ignore\n         self,\n-        data_pack: DataPack,\n-        output_dict: Optional[Dict[str, Dict[str, List[str]]]] = None,\n+        pack: DataPack,\n+        predict_results: Dict[str, Dict[str, List[str]]],\n+        _: Optional[Annotation] = None,\n     ):\n",
        "source_code_with_indent": "\n    <DED>def pack(\n        self,\n        data_pack: DataPack,\n        output_dict: Optional[Dict[str, Dict[str, List[str]]]] = None,\n    ):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def pack(  # type: ignore\n        self,\n        pack: DataPack,\n        predict_results: Dict[str, Dict[str, List[str]]],\n        _: Optional[Annotation] = None,\n    ):\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        if output_dict is None:\n            return\n",
        "source_code_len": 52,
        "target_code": "\n        if predict_results is None:\n            return\n",
        "target_code_len": 56,
        "diff_format": "@@ -201,3 +185,3 @@\n \n-        if output_dict is None:\n+        if predict_results is None:\n             return\n",
        "source_code_with_indent": "\n        if output_dict is None:\n            <IND>return\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        if predict_results is None:\n            <IND>return\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n        for i in range(len(output_dict[\"Token\"][\"tid\"])):\n            # an instance\n            for j in range(len(output_dict[\"Token\"][\"tid\"][i])):\n                tid: int = output_dict[\"Token\"][\"tid\"][i][j]  # type: ignore\n\n                orig_token: Token = data_pack.get_entry(tid)  # type: ignore\n                ner_tag: str = output_dict[\"Token\"][\"ner\"][i][j]\n\n",
        "source_code_len": 371,
        "target_code": "\n        for i in range(len(predict_results[\"Token\"][\"tid\"])):\n            # an instance\n            for j in range(len(predict_results[\"Token\"][\"tid\"][i])):\n                tid: int = predict_results[\"Token\"][\"tid\"][i][j]  # type: ignore\n\n                orig_token: Token = pack.get_entry(tid)  # type: ignore\n                ner_tag: str = predict_results[\"Token\"][\"ner\"][i][j]\n\n",
        "target_code_len": 382,
        "diff_format": "@@ -206,9 +190,9 @@\n \n-        for i in range(len(output_dict[\"Token\"][\"tid\"])):\n+        for i in range(len(predict_results[\"Token\"][\"tid\"])):\n             # an instance\n-            for j in range(len(output_dict[\"Token\"][\"tid\"][i])):\n-                tid: int = output_dict[\"Token\"][\"tid\"][i][j]  # type: ignore\n-\n-                orig_token: Token = data_pack.get_entry(tid)  # type: ignore\n-                ner_tag: str = output_dict[\"Token\"][\"ner\"][i][j]\n+            for j in range(len(predict_results[\"Token\"][\"tid\"][i])):\n+                tid: int = predict_results[\"Token\"][\"tid\"][i][j]  # type: ignore\n+\n+                orig_token: Token = pack.get_entry(tid)  # type: ignore\n+                ner_tag: str = predict_results[\"Token\"][\"ner\"][i][j]\n \n",
        "source_code_with_indent": "\n        for i in range(len(output_dict[\"Token\"][\"tid\"])):\n            # an instance\n            <IND>for j in range(len(output_dict[\"Token\"][\"tid\"][i])):\n                <IND>tid: int = output_dict[\"Token\"][\"tid\"][i][j]  # type: ignore\n\n                orig_token: Token = data_pack.get_entry(tid)  # type: ignore\n                ner_tag: str = output_dict[\"Token\"][\"ner\"][i][j]\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        for i in range(len(predict_results[\"Token\"][\"tid\"])):\n            # an instance\n            <IND>for j in range(len(predict_results[\"Token\"][\"tid\"][i])):\n                <IND>tid: int = predict_results[\"Token\"][\"tid\"][i][j]  # type: ignore\n\n                orig_token: Token = pack.get_entry(tid)  # type: ignore\n                ner_tag: str = predict_results[\"Token\"][\"ner\"][i][j]\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                    entity = EntityMention(\n                        data_pack, current_entity_mention[0], token.span.end\n                    )\n",
        "source_code_len": 143,
        "target_code": "                    entity = EntityMention(\n                        pack, current_entity_mention[0], token.span.end\n                    )\n",
        "target_code_len": 138,
        "diff_format": "@@ -231,3 +215,3 @@\n                     entity = EntityMention(\n-                        data_pack, current_entity_mention[0], token.span.end\n+                        pack, current_entity_mention[0], token.span.end\n                     )\n",
        "source_code_with_indent": "                    <DED>entity = EntityMention(\n                        data_pack, current_entity_mention[0], token.span.end\n                    )\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                    <DED>entity = EntityMention(\n                        pack, current_entity_mention[0], token.span.end\n                    )\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                    entity = EntityMention(\n                        data_pack, current_entity_mention[0], token.span.end\n                    )\n",
        "source_code_len": 143,
        "target_code": "                    entity = EntityMention(\n                        pack, current_entity_mention[0], token.span.end\n                    )\n",
        "target_code_len": 138,
        "diff_format": "@@ -237,3 +221,3 @@\n                     entity = EntityMention(\n-                        data_pack, current_entity_mention[0], token.span.end\n+                        pack, current_entity_mention[0], token.span.end\n                     )\n",
        "source_code_with_indent": "                    entity = EntityMention(\n                        data_pack, current_entity_mention[0], token.span.end\n                    )\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                    entity = EntityMention(\n                        pack, current_entity_mention[0], token.span.end\n                    )\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]