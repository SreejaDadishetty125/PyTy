[
  {
    "project": "python/mypy",
    "commit": "3a71ea41df92c128a99fe0d7324fd7d6d3275819",
    "filename": "mypy/parse.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-mypy/mypy/parse.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mypy/parse.py:325:8 Incompatible return type [7]: Expected `Type` but got `Node`.",
    "message": " Expected `Type` but got `Node`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 325,
    "warning_line": "        return self.parse_expression(precedence[','])",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def parse_super_type(self) -> Type:\n        return self.parse_expression(precedence[','])\n",
        "source_code_len": 95,
        "target_code": "\n    def parse_super_type(self) -> Node:\n        return self.parse_expression(precedence[','])\n",
        "target_code_len": 95,
        "diff_format": "@@ -323,3 +323,3 @@\n \n-    def parse_super_type(self) -> Type:\n+    def parse_super_type(self) -> Node:\n         return self.parse_expression(precedence[','])\n",
        "source_code_with_indent": "\n    <DED><DED>def parse_super_type(self) -> Type:\n        <IND>return self.parse_expression(precedence[','])\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED><DED>def parse_super_type(self) -> Node:\n        <IND>return self.parse_expression(precedence[','])\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]