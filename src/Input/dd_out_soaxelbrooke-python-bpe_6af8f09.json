[
  {
    "project": "soaxelbrooke/python-bpe",
    "commit": "6af8f0976c55f4744475cb663af23c728570e720",
    "filename": "bpe/encoder.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/soaxelbrooke-python-bpe/bpe/encoder.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bpe/encoder.py:230:29 Incompatible variable type [9]: dont_warn is declared to have type `Encoder` but is used as type `bool`.",
    "message": " dont_warn is declared to have type `Encoder` but is used as type `bool`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 230,
    "warning_line": "    def vocabs_to_dict(self, dont_warn=False):",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def vocabs_to_dict(self, dont_warn=False):\n        # type: (Encoder) -> Dict[str, Dict[str, int]]\n        \"\"\" Turns vocab into dict that is json-serializeable \"\"\"\n",
        "source_code_len": 167,
        "target_code": "    def vocabs_to_dict(self, dont_warn=False):\n        # type: (Encoder, bool) -> Dict[str, Dict[str, int]]\n        \"\"\" Turns vocab into dict that is json-serializeable \"\"\"\n",
        "target_code_len": 173,
        "diff_format": "@@ -230,3 +230,3 @@\n     def vocabs_to_dict(self, dont_warn=False):\n-        # type: (Encoder) -> Dict[str, Dict[str, int]]\n+        # type: (Encoder, bool) -> Dict[str, Dict[str, int]]\n         \"\"\" Turns vocab into dict that is json-serializeable \"\"\"\n",
        "source_code_with_indent": "    <DED><DED>def vocabs_to_dict(self, dont_warn=False):\n        # type: (Encoder) -> Dict[str, Dict[str, int]]\n        <IND>\"\"\" Turns vocab into dict that is json-serializeable \"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED><DED>def vocabs_to_dict(self, dont_warn=False):\n        # type: (Encoder, bool) -> Dict[str, Dict[str, int]]\n        <IND>\"\"\" Turns vocab into dict that is json-serializeable \"\"\"\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def save(self, outpath, dont_warn=False):\n        # type: (Encoder, str) -> None\n        \"\"\" Serializes and saves encoder to provided path \"\"\"\n",
        "source_code_len": 147,
        "target_code": "    def save(self, outpath, dont_warn=False):\n        # type: (Encoder, str, bool) -> None\n        \"\"\" Serializes and saves encoder to provided path \"\"\"\n",
        "target_code_len": 153,
        "diff_format": "@@ -254,3 +254,3 @@\n     def save(self, outpath, dont_warn=False):\n-        # type: (Encoder, str) -> None\n+        # type: (Encoder, str, bool) -> None\n         \"\"\" Serializes and saves encoder to provided path \"\"\"\n",
        "source_code_with_indent": "    <DED>def save(self, outpath, dont_warn=False):\n        # type: (Encoder, str) -> None\n        <IND>\"\"\" Serializes and saves encoder to provided path \"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def save(self, outpath, dont_warn=False):\n        # type: (Encoder, str, bool) -> None\n        <IND>\"\"\" Serializes and saves encoder to provided path \"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "soaxelbrooke/python-bpe",
    "commit": "6af8f0976c55f4744475cb663af23c728570e720",
    "filename": "bpe/encoder.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/soaxelbrooke-python-bpe/bpe/encoder.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bpe/encoder.py:254:28 Incompatible variable type [9]: dont_warn is declared to have type `str` but is used as type `bool`.",
    "message": " dont_warn is declared to have type `str` but is used as type `bool`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 254,
    "warning_line": "    def save(self, outpath, dont_warn=False):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def vocabs_to_dict(self, dont_warn=False):\n        # type: (Encoder) -> Dict[str, Dict[str, int]]\n        \"\"\" Turns vocab into dict that is json-serializeable \"\"\"\n",
        "source_code_len": 167,
        "target_code": "    def vocabs_to_dict(self, dont_warn=False):\n        # type: (Encoder, bool) -> Dict[str, Dict[str, int]]\n        \"\"\" Turns vocab into dict that is json-serializeable \"\"\"\n",
        "target_code_len": 173,
        "diff_format": "@@ -230,3 +230,3 @@\n     def vocabs_to_dict(self, dont_warn=False):\n-        # type: (Encoder) -> Dict[str, Dict[str, int]]\n+        # type: (Encoder, bool) -> Dict[str, Dict[str, int]]\n         \"\"\" Turns vocab into dict that is json-serializeable \"\"\"\n",
        "source_code_with_indent": "    <DED><DED>def vocabs_to_dict(self, dont_warn=False):\n        # type: (Encoder) -> Dict[str, Dict[str, int]]\n        <IND>\"\"\" Turns vocab into dict that is json-serializeable \"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED><DED>def vocabs_to_dict(self, dont_warn=False):\n        # type: (Encoder, bool) -> Dict[str, Dict[str, int]]\n        <IND>\"\"\" Turns vocab into dict that is json-serializeable \"\"\"\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def save(self, outpath, dont_warn=False):\n        # type: (Encoder, str) -> None\n        \"\"\" Serializes and saves encoder to provided path \"\"\"\n",
        "source_code_len": 147,
        "target_code": "    def save(self, outpath, dont_warn=False):\n        # type: (Encoder, str, bool) -> None\n        \"\"\" Serializes and saves encoder to provided path \"\"\"\n",
        "target_code_len": 153,
        "diff_format": "@@ -254,3 +254,3 @@\n     def save(self, outpath, dont_warn=False):\n-        # type: (Encoder, str) -> None\n+        # type: (Encoder, str, bool) -> None\n         \"\"\" Serializes and saves encoder to provided path \"\"\"\n",
        "source_code_with_indent": "    <DED>def save(self, outpath, dont_warn=False):\n        # type: (Encoder, str) -> None\n        <IND>\"\"\" Serializes and saves encoder to provided path \"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def save(self, outpath, dont_warn=False):\n        # type: (Encoder, str, bool) -> None\n        <IND>\"\"\" Serializes and saves encoder to provided path \"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "soaxelbrooke/python-bpe",
    "commit": "6af8f0976c55f4744475cb663af23c728570e720",
    "filename": "bpe/encoder.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/soaxelbrooke-python-bpe/bpe/encoder.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bpe/encoder.py:257:18 Incompatible parameter type [6]: Expected `typing.Union[os.PathLike[bytes], os.PathLike[str], bytes, int, str]` for 1st positional only parameter to call `open` but got `Encoder`.",
    "message": " Expected `typing.Union[os.PathLike[bytes], os.PathLike[str], bytes, int, str]` for 1st positional only parameter to call `open` but got `Encoder`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 257,
    "warning_line": "        with open(outpath, 'w') as outfile:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def vocabs_to_dict(self, dont_warn=False):\n        # type: (Encoder) -> Dict[str, Dict[str, int]]\n        \"\"\" Turns vocab into dict that is json-serializeable \"\"\"\n",
        "source_code_len": 167,
        "target_code": "    def vocabs_to_dict(self, dont_warn=False):\n        # type: (Encoder, bool) -> Dict[str, Dict[str, int]]\n        \"\"\" Turns vocab into dict that is json-serializeable \"\"\"\n",
        "target_code_len": 173,
        "diff_format": "@@ -230,3 +230,3 @@\n     def vocabs_to_dict(self, dont_warn=False):\n-        # type: (Encoder) -> Dict[str, Dict[str, int]]\n+        # type: (Encoder, bool) -> Dict[str, Dict[str, int]]\n         \"\"\" Turns vocab into dict that is json-serializeable \"\"\"\n",
        "source_code_with_indent": "    <DED><DED>def vocabs_to_dict(self, dont_warn=False):\n        # type: (Encoder) -> Dict[str, Dict[str, int]]\n        <IND>\"\"\" Turns vocab into dict that is json-serializeable \"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED><DED>def vocabs_to_dict(self, dont_warn=False):\n        # type: (Encoder, bool) -> Dict[str, Dict[str, int]]\n        <IND>\"\"\" Turns vocab into dict that is json-serializeable \"\"\"\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def save(self, outpath, dont_warn=False):\n        # type: (Encoder, str) -> None\n        \"\"\" Serializes and saves encoder to provided path \"\"\"\n",
        "source_code_len": 147,
        "target_code": "    def save(self, outpath, dont_warn=False):\n        # type: (Encoder, str, bool) -> None\n        \"\"\" Serializes and saves encoder to provided path \"\"\"\n",
        "target_code_len": 153,
        "diff_format": "@@ -254,3 +254,3 @@\n     def save(self, outpath, dont_warn=False):\n-        # type: (Encoder, str) -> None\n+        # type: (Encoder, str, bool) -> None\n         \"\"\" Serializes and saves encoder to provided path \"\"\"\n",
        "source_code_with_indent": "    <DED>def save(self, outpath, dont_warn=False):\n        # type: (Encoder, str) -> None\n        <IND>\"\"\" Serializes and saves encoder to provided path \"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def save(self, outpath, dont_warn=False):\n        # type: (Encoder, str, bool) -> None\n        <IND>\"\"\" Serializes and saves encoder to provided path \"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "soaxelbrooke/python-bpe",
    "commit": "6af8f0976c55f4744475cb663af23c728570e720",
    "filename": "bpe/encoder.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/soaxelbrooke-python-bpe/bpe/encoder.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bpe/encoder.py:258:42 Incompatible parameter type [6]: Expected `Encoder` for 1st positional only parameter to call `Encoder.vocabs_to_dict` but got `str`.",
    "message": " Expected `Encoder` for 1st positional only parameter to call `Encoder.vocabs_to_dict` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 258,
    "warning_line": "            json.dump(self.vocabs_to_dict(dont_warn), outfile)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def vocabs_to_dict(self, dont_warn=False):\n        # type: (Encoder) -> Dict[str, Dict[str, int]]\n        \"\"\" Turns vocab into dict that is json-serializeable \"\"\"\n",
        "source_code_len": 167,
        "target_code": "    def vocabs_to_dict(self, dont_warn=False):\n        # type: (Encoder, bool) -> Dict[str, Dict[str, int]]\n        \"\"\" Turns vocab into dict that is json-serializeable \"\"\"\n",
        "target_code_len": 173,
        "diff_format": "@@ -230,3 +230,3 @@\n     def vocabs_to_dict(self, dont_warn=False):\n-        # type: (Encoder) -> Dict[str, Dict[str, int]]\n+        # type: (Encoder, bool) -> Dict[str, Dict[str, int]]\n         \"\"\" Turns vocab into dict that is json-serializeable \"\"\"\n",
        "source_code_with_indent": "    <DED><DED>def vocabs_to_dict(self, dont_warn=False):\n        # type: (Encoder) -> Dict[str, Dict[str, int]]\n        <IND>\"\"\" Turns vocab into dict that is json-serializeable \"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED><DED>def vocabs_to_dict(self, dont_warn=False):\n        # type: (Encoder, bool) -> Dict[str, Dict[str, int]]\n        <IND>\"\"\" Turns vocab into dict that is json-serializeable \"\"\"\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def save(self, outpath, dont_warn=False):\n        # type: (Encoder, str) -> None\n        \"\"\" Serializes and saves encoder to provided path \"\"\"\n",
        "source_code_len": 147,
        "target_code": "    def save(self, outpath, dont_warn=False):\n        # type: (Encoder, str, bool) -> None\n        \"\"\" Serializes and saves encoder to provided path \"\"\"\n",
        "target_code_len": 153,
        "diff_format": "@@ -254,3 +254,3 @@\n     def save(self, outpath, dont_warn=False):\n-        # type: (Encoder, str) -> None\n+        # type: (Encoder, str, bool) -> None\n         \"\"\" Serializes and saves encoder to provided path \"\"\"\n",
        "source_code_with_indent": "    <DED>def save(self, outpath, dont_warn=False):\n        # type: (Encoder, str) -> None\n        <IND>\"\"\" Serializes and saves encoder to provided path \"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def save(self, outpath, dont_warn=False):\n        # type: (Encoder, str, bool) -> None\n        <IND>\"\"\" Serializes and saves encoder to provided path \"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]