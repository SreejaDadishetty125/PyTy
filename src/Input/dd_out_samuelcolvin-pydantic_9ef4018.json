[
  {
    "project": "samuelcolvin/pydantic",
    "commit": "9ef401839bc925cb024bc1b0d842806b45aa11ac",
    "filename": "pydantic/datetime_parse.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/samuelcolvin-pydantic/pydantic/datetime_parse.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pydantic/datetime_parse.py:80:8 Incompatible variable type [9]: seconds is declared to have type `int` but is used as type `float`.",
    "message": " seconds is declared to have type `int` but is used as type `float`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 80,
    "warning_line": "        seconds /= 1000",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    except ValueError:\n        pass\n    try:\n        return float(value)\n    except ValueError:\n        pass\n\n\ndef from_unix_seconds(seconds: int) -> datetime:\n    while seconds > MS_WATERSHED:\n",
        "source_code_len": 194,
        "target_code": "    except ValueError:\n        try:\n            return float(value)\n        except ValueError:\n            return None\n\n\ndef from_unix_seconds(seconds: float) -> datetime:\n    while seconds > MS_WATERSHED:\n",
        "target_code_len": 206,
        "diff_format": "@@ -70,10 +70,9 @@\n     except ValueError:\n-        pass\n-    try:\n-        return float(value)\n-    except ValueError:\n-        pass\n-\n-\n-def from_unix_seconds(seconds: int) -> datetime:\n+        try:\n+            return float(value)\n+        except ValueError:\n+            return None\n+\n+\n+def from_unix_seconds(seconds: float) -> datetime:\n     while seconds > MS_WATERSHED:\n",
        "source_code_with_indent": "    <DED>except ValueError:\n        <IND>pass\n    <DED>try:\n        <IND>return float(value)\n    <DED>except ValueError:\n        <IND>pass\n\n\n<DED><DED>def from_unix_seconds(seconds: int) -> datetime:\n    <IND>while seconds > MS_WATERSHED:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>except ValueError:\n        <IND>try:\n            <IND>return float(value)\n        <DED>except ValueError:\n            <IND>return None\n\n\n<DED><DED><DED>def from_unix_seconds(seconds: float) -> datetime:\n    <IND>while seconds > MS_WATERSHED:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "samuelcolvin/pydantic",
    "commit": "9ef401839bc925cb024bc1b0d842806b45aa11ac",
    "filename": "pydantic/datetime_parse.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/samuelcolvin-pydantic/pydantic/datetime_parse.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "pydantic/datetime_parse.py:135:22 Incompatible parameter type [6]: Expected `typing.Optional[datetime.tzinfo]` for 1st positional only parameter to call `time.__new__` but got `int`.",
    "message": " Expected `typing.Optional[datetime.tzinfo]` for 1st positional only parameter to call `time.__new__` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 135,
    "warning_line": "        return time(**kw)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n    kw = {k: int(v) for k, v in kw.items() if v is not None}\n\n    with change_exception(errors.TimeError, ValueError):\n        return time(**kw)\n\n",
        "source_code_len": 147,
        "target_code": "\n    kw_ = {k: int(v) for k, v in kw.items() if v is not None}\n\n    with change_exception(errors.TimeError, ValueError):\n        return time(**kw_)  # type: ignore\n\n",
        "target_code_len": 165,
        "diff_format": "@@ -131,6 +130,6 @@\n \n-    kw = {k: int(v) for k, v in kw.items() if v is not None}\n+    kw_ = {k: int(v) for k, v in kw.items() if v is not None}\n \n     with change_exception(errors.TimeError, ValueError):\n-        return time(**kw)\n+        return time(**kw_)  # type: ignore\n \n",
        "source_code_with_indent": "\n    <DED>kw = {k: int(v) for k, v in kw.items() if v is not None}\n\n    with change_exception(errors.TimeError, ValueError):\n        <IND>return time(**kw)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>kw_ = {k: int(v) for k, v in kw.items() if v is not None}\n\n    with change_exception(errors.TimeError, ValueError):\n        <IND>return time(**kw_)  # type: ignore\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "samuelcolvin/pydantic",
    "commit": "9ef401839bc925cb024bc1b0d842806b45aa11ac",
    "filename": "pydantic/datetime_parse.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/samuelcolvin-pydantic/pydantic/datetime_parse.py",
    "file_hunks_size": 8,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pydantic/datetime_parse.py:174:19 Incompatible parameter type [6]: Expected `int` for 2nd positional only parameter to call `dict.__setitem__` but got `typing.Optional[timezone]`.",
    "message": " Expected `int` for 2nd positional only parameter to call `dict.__setitem__` but got `typing.Optional[timezone]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 174,
    "warning_line": "    kw['tzinfo'] = tzinfo"
  },
  {
    "project": "samuelcolvin/pydantic",
    "commit": "9ef401839bc925cb024bc1b0d842806b45aa11ac",
    "filename": "pydantic/datetime_parse.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/samuelcolvin-pydantic/pydantic/datetime_parse.py",
    "file_hunks_size": 8,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pydantic/datetime_parse.py:177:26 Incompatible parameter type [6]: Expected `typing.Optional[datetime.tzinfo]` for 1st positional only parameter to call `datetime.__new__` but got `int`.",
    "message": " Expected `typing.Optional[datetime.tzinfo]` for 1st positional only parameter to call `datetime.__new__` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 177,
    "warning_line": "        return datetime(**kw)"
  },
  {
    "project": "samuelcolvin/pydantic",
    "commit": "9ef401839bc925cb024bc1b0d842806b45aa11ac",
    "filename": "pydantic/main.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/samuelcolvin-pydantic/pydantic/main.py",
    "file_hunks_size": 36,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pydantic/main.py:300:17 Incompatible variable type [9]: include is declared to have type `Set[str]` but is used as type `None`.",
    "message": " include is declared to have type `Set[str]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 300,
    "warning_line": "        self, *, include: Set[str] = None, exclude: Set[str] = None, update: Dict[str, Any] = None, deep: bool = False"
  },
  {
    "project": "samuelcolvin/pydantic",
    "commit": "9ef401839bc925cb024bc1b0d842806b45aa11ac",
    "filename": "pydantic/main.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/samuelcolvin-pydantic/pydantic/main.py",
    "file_hunks_size": 36,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pydantic/main.py:414:37 Incompatible variable type [9]: __config__ is declared to have type `Type[typing.Any]` but is used as type `None`.",
    "message": " __config__ is declared to have type `Type[typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 414,
    "warning_line": "def create_model(model_name: str, *, __config__: Type = None, __base__: Type[BaseModel] = None, **field_definitions):"
  },
  {
    "project": "samuelcolvin/pydantic",
    "commit": "9ef401839bc925cb024bc1b0d842806b45aa11ac",
    "filename": "pydantic/main.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/samuelcolvin-pydantic/pydantic/main.py",
    "file_hunks_size": 36,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pydantic/main.py:454:30 Incompatible parameter type [6]: Expected `Dict[typing.Any, typing.Any]` for 2nd positional only parameter to call `dict.__setitem__` but got `Type[BaseConfig]`.",
    "message": " Expected `Dict[typing.Any, typing.Any]` for 2nd positional only parameter to call `dict.__setitem__` but got `Type[BaseConfig]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 454,
    "warning_line": "        namespace['Config'] = inherit_config(__config__, BaseConfig)"
  },
  {
    "project": "samuelcolvin/pydantic",
    "commit": "9ef401839bc925cb024bc1b0d842806b45aa11ac",
    "filename": "pydantic/parse.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/samuelcolvin-pydantic/pydantic/parse.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pydantic/parse.py:39:28 Incompatible parameter type [6]: Expected `bytes` for 1st positional only parameter to call `pickle.loads` but got `Union[bytes, str]`.",
    "message": " Expected `bytes` for 1st positional only parameter to call `pickle.loads` but got `Union[bytes, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 39,
    "warning_line": "        return pickle.loads(b)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            raise RuntimeError('Trying to decode with pickle with allow_pickle=False')\n        return pickle.loads(b)\n    else:\n",
        "source_code_len": 128,
        "target_code": "            raise RuntimeError('Trying to decode with pickle with allow_pickle=False')\n        bb = b if isinstance(b, bytes) else b.encode()\n        return pickle.loads(bb)\n    else:\n",
        "target_code_len": 184,
        "diff_format": "@@ -38,3 +38,4 @@\n             raise RuntimeError('Trying to decode with pickle with allow_pickle=False')\n-        return pickle.loads(b)\n+        bb = b if isinstance(b, bytes) else b.encode()\n+        return pickle.loads(bb)\n     else:\n",
        "source_code_with_indent": "            <IND>raise RuntimeError('Trying to decode with pickle with allow_pickle=False')\n        <DED>return pickle.loads(b)\n    <DED>else:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <IND>raise RuntimeError('Trying to decode with pickle with allow_pickle=False')\n        <DED>bb = b if isinstance(b, bytes) else b.encode()\n        return pickle.loads(bb)\n    <DED>else:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "samuelcolvin/pydantic",
    "commit": "9ef401839bc925cb024bc1b0d842806b45aa11ac",
    "filename": "pydantic/schema.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/samuelcolvin-pydantic/pydantic/schema.py",
    "file_hunks_size": 38,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pydantic/schema.py:427:50 Incompatible parameter type [6]: Expected `str` for 2nd positional only parameter to call `dict.__setitem__` but got `Dict[str, typing.Any]`.",
    "message": " Expected `str` for 2nd positional only parameter to call `dict.__setitem__` but got `Dict[str, typing.Any]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 427,
    "warning_line": "            dict_schema['additionalProperties'] = f_schema"
  },
  {
    "project": "samuelcolvin/pydantic",
    "commit": "9ef401839bc925cb024bc1b0d842806b45aa11ac",
    "filename": "pydantic/schema.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/samuelcolvin-pydantic/pydantic/schema.py",
    "file_hunks_size": 38,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pydantic/schema.py:506:33 Incompatible parameter type [6]: Expected `typing.Union[Dict[typing.Any, typing.Any], str]` for 2nd positional only parameter to call `dict.__setitem__` but got `typing.List[typing.Any]`.",
    "message": " Expected `typing.Union[Dict[typing.Any, typing.Any], str]` for 2nd positional only parameter to call `dict.__setitem__` but got `typing.List[typing.Any]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 506,
    "warning_line": "        out_schema['required'] = required"
  },
  {
    "project": "samuelcolvin/pydantic",
    "commit": "9ef401839bc925cb024bc1b0d842806b45aa11ac",
    "filename": "pydantic/utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/samuelcolvin-pydantic/pydantic/utils.py",
    "file_hunks_size": 19,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pydantic/utils.py:79:4 Incompatible variable type [9]: query is declared to have type `str` but is used as type `None`.",
    "message": " query is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 79,
    "warning_line": "    query: str = None,"
  },
  {
    "project": "samuelcolvin/pydantic",
    "commit": "9ef401839bc925cb024bc1b0d842806b45aa11ac",
    "filename": "pydantic/utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/samuelcolvin-pydantic/pydantic/utils.py",
    "file_hunks_size": 19,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pydantic/utils.py:101:4 Incompatible variable type [9]: query is declared to have type `str` but is used as type `typing.Union[typing.Dict[Variable[_KT], Variable[_VT]], str]`.",
    "message": " query is declared to have type `str` but is used as type `typing.Union[typing.Dict[Variable[_KT], Variable[_VT]], str]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 101,
    "warning_line": "    query = query or {}"
  },
  {
    "project": "samuelcolvin/pydantic",
    "commit": "9ef401839bc925cb024bc1b0d842806b45aa11ac",
    "filename": "pydantic/utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/samuelcolvin-pydantic/pydantic/utils.py",
    "file_hunks_size": 19,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pydantic/utils.py:105:52 Incompatible parameter type [6]: Expected `typing.Union[int, slice]` for 1st positional only parameter to call `str.__getitem__` but got `str`.",
    "message": " Expected `typing.Union[int, slice]` for 1st positional only parameter to call `str.__getitem__` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 105,
    "warning_line": "        s += '?' + '&'.join('{}={}'.format(k, query[k]) for k in keys)"
  },
  {
    "project": "samuelcolvin/pydantic",
    "commit": "9ef401839bc925cb024bc1b0d842806b45aa11ac",
    "filename": "tests/mypy_test_fails.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/samuelcolvin-pydantic/tests/mypy_test_fails2.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/mypy_test_fails.py:21:0 Incompatible attribute type [8]: Attribute `age` declared in class `Model` has type `int` but is used as type `str`.",
    "message": " Attribute `age` declared in class `Model` has type `int` but is used as type `str`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 21,
    "warning_line": "m.age = 'not integer'",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nassert m.age == 42, m.age\nm.age = 'not integer'\n",
        "source_code_len": 49,
        "target_code": "\nprint(m.foobar)\n",
        "target_code_len": 17,
        "diff_format": "@@ -19,3 +19,2 @@\n \n-assert m.age == 42, m.age\n-m.age = 'not integer'\n+print(m.foobar)\n",
        "source_code_with_indent": "\nassert m.age == 42, m.age\nm.age = 'not integer'\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nprint(m.foobar)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]