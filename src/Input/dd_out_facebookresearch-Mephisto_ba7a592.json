[
  {
    "project": "facebookresearch/Mephisto",
    "commit": "ba7a592508cf68b9ecea7935788489a9716bd6bf",
    "filename": "mephisto/server/blueprints/acute_eval/acute_eval_runner.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/facebookresearch-Mephisto/mephisto/server/blueprints/acute_eval/acute_eval_runner.py",
    "file_hunks_size": 12,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mephisto/server/blueprints/acute_eval/acute_eval_runner.py:71:29 Unbound name [10]: Name `Set` is used but not defined in the current scope.",
    "message": " Name `Set` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 71,
    "warning_line": "        self.failed_onboard: Set = set()",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import ClassVar, List, Type, Any, Dict, Tuple, TYPE_CHECKING\n\n",
        "source_code_len": 75,
        "target_code": "\nfrom typing import ClassVar, List, Type, Any, Dict, Tuple, Set, TYPE_CHECKING\n\n",
        "target_code_len": 80,
        "diff_format": "@@ -15,3 +15,3 @@\n \n-from typing import ClassVar, List, Type, Any, Dict, Tuple, TYPE_CHECKING\n+from typing import ClassVar, List, Type, Any, Dict, Tuple, Set, TYPE_CHECKING\n \n",
        "source_code_with_indent": "\nfrom typing import ClassVar, List, Type, Any, Dict, Tuple, TYPE_CHECKING\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import ClassVar, List, Type, Any, Dict, Tuple, Set, TYPE_CHECKING\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "facebookresearch/Mephisto",
    "commit": "ba7a592508cf68b9ecea7935788489a9716bd6bf",
    "filename": "mephisto/server/blueprints/acute_eval/acute_eval_runner.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/facebookresearch-Mephisto/mephisto/server/blueprints/acute_eval/acute_eval_runner.py",
    "file_hunks_size": 12,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mephisto/server/blueprints/acute_eval/acute_eval_runner.py:107:51 Unbound name [10]: Name `default_block_qualification` is used but not defined in the current scope.",
    "message": " Name `default_block_qualification` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 107,
    "warning_line": "                self.opts['block_qualification'] = default_block_qualification",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                self.block_qualification = f\"{task_id}_failed_onboarding\"\n                self.opts['block_qualification'] = default_block_qualification\n                warn_once(\n                    \"No block_qualification set in opt, automatically creating \"\n                    \"new qualification {}\".format(default_block_qualification)\n                )\n            found_qualifications = self.db.find_qualifications(\n                self.block_qualification \n",
        "source_code_len": 464,
        "target_code": "                self.block_qualification = f\"{task_id}_failed_onboarding\"\n                self.opts['block_qualification'] = self.block_qualification\n                # TODO move to logger\n                print(\n                    \"No block_qualification set in opt, automatically creating \"\n                    \"new qualification {}\".format(self.block_qualification)\n                )\n            found_qualifications = self.task_run.db.find_qualifications(\n                self.block_qualification \n",
        "target_code_len": 501,
        "diff_format": "@@ -106,8 +110,9 @@\n                 self.block_qualification = f\"{task_id}_failed_onboarding\"\n-                self.opts['block_qualification'] = default_block_qualification\n-                warn_once(\n+                self.opts['block_qualification'] = self.block_qualification\n+                # TODO move to logger\n+                print(\n                     \"No block_qualification set in opt, automatically creating \"\n-                    \"new qualification {}\".format(default_block_qualification)\n+                    \"new qualification {}\".format(self.block_qualification)\n                 )\n-            found_qualifications = self.db.find_qualifications(\n+            found_qualifications = self.task_run.db.find_qualifications(\n                 self.block_qualification \n",
        "source_code_with_indent": "                <IND>self.block_qualification = f\"{task_id}_failed_onboarding\"\n                self.opts['block_qualification'] = default_block_qualification\n                warn_once(\n                    \"No block_qualification set in opt, automatically creating \"\n                    \"new qualification {}\".format(default_block_qualification)\n                )\n            <DED>found_qualifications = self.db.find_qualifications(\n                self.block_qualification \n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                <IND>self.block_qualification = f\"{task_id}_failed_onboarding\"\n                self.opts['block_qualification'] = self.block_qualification\n                # TODO move to logger\n                print(\n                    \"No block_qualification set in opt, automatically creating \"\n                    \"new qualification {}\".format(self.block_qualification)\n                )\n            <DED>found_qualifications = self.task_run.db.find_qualifications(\n                self.block_qualification \n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "facebookresearch/Mephisto",
    "commit": "ba7a592508cf68b9ecea7935788489a9716bd6bf",
    "filename": "mephisto/server/blueprints/acute_eval/acute_eval_runner.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/facebookresearch-Mephisto/mephisto/server/blueprints/acute_eval/acute_eval_runner.py",
    "file_hunks_size": 12,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mephisto/server/blueprints/acute_eval/acute_eval_runner.py:108:16 Unbound name [10]: Name `warn_once` is used but not defined in the current scope.",
    "message": " Name `warn_once` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 108,
    "warning_line": "                warn_once(",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                self.block_qualification = f\"{task_id}_failed_onboarding\"\n                self.opts['block_qualification'] = default_block_qualification\n                warn_once(\n                    \"No block_qualification set in opt, automatically creating \"\n                    \"new qualification {}\".format(default_block_qualification)\n                )\n            found_qualifications = self.db.find_qualifications(\n                self.block_qualification \n",
        "source_code_len": 464,
        "target_code": "                self.block_qualification = f\"{task_id}_failed_onboarding\"\n                self.opts['block_qualification'] = self.block_qualification\n                # TODO move to logger\n                print(\n                    \"No block_qualification set in opt, automatically creating \"\n                    \"new qualification {}\".format(self.block_qualification)\n                )\n            found_qualifications = self.task_run.db.find_qualifications(\n                self.block_qualification \n",
        "target_code_len": 501,
        "diff_format": "@@ -106,8 +110,9 @@\n                 self.block_qualification = f\"{task_id}_failed_onboarding\"\n-                self.opts['block_qualification'] = default_block_qualification\n-                warn_once(\n+                self.opts['block_qualification'] = self.block_qualification\n+                # TODO move to logger\n+                print(\n                     \"No block_qualification set in opt, automatically creating \"\n-                    \"new qualification {}\".format(default_block_qualification)\n+                    \"new qualification {}\".format(self.block_qualification)\n                 )\n-            found_qualifications = self.db.find_qualifications(\n+            found_qualifications = self.task_run.db.find_qualifications(\n                 self.block_qualification \n",
        "source_code_with_indent": "                <IND>self.block_qualification = f\"{task_id}_failed_onboarding\"\n                self.opts['block_qualification'] = default_block_qualification\n                warn_once(\n                    \"No block_qualification set in opt, automatically creating \"\n                    \"new qualification {}\".format(default_block_qualification)\n                )\n            <DED>found_qualifications = self.db.find_qualifications(\n                self.block_qualification \n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                <IND>self.block_qualification = f\"{task_id}_failed_onboarding\"\n                self.opts['block_qualification'] = self.block_qualification\n                # TODO move to logger\n                print(\n                    \"No block_qualification set in opt, automatically creating \"\n                    \"new qualification {}\".format(self.block_qualification)\n                )\n            <DED>found_qualifications = self.task_run.db.find_qualifications(\n                self.block_qualification \n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "facebookresearch/Mephisto",
    "commit": "ba7a592508cf68b9ecea7935788489a9716bd6bf",
    "filename": "mephisto/server/blueprints/acute_eval/acute_eval_runner.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/facebookresearch-Mephisto/mephisto/server/blueprints/acute_eval/acute_eval_runner.py",
    "file_hunks_size": 12,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mephisto/server/blueprints/acute_eval/acute_eval_runner.py:441:59 Incompatible parameter type [6]: Expected `Tuple[str, Dict[str, typing.Any]]` for 2nd positional only parameter to call `dict.__setitem__` but got `Tuple[str, List[Dict[str, typing.Any]]]`.",
    "message": " Expected `Tuple[str, Dict[str, typing.Any]]` for 2nd positional only parameter to call `dict.__setitem__` but got `Tuple[str, List[Dict[str, typing.Any]]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 441,
    "warning_line": "            self.unit_agent_map[agent.get_unit().db_id] = (worker.db_id, task_data)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n\n",
        "source_code_len": 2,
        "target_code": "\nPairingsDict = Dict[str, Any]\nWorkerID = str\nUnitID = str\n\n\n",
        "target_code_len": 61,
        "diff_format": "@@ -32,2 +32,6 @@\n \n+PairingsDict = Dict[str, Any]\n+WorkerID = str\n+UnitID = str\n+\n \n",
        "source_code_with_indent": "\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nPairingsDict = Dict[str, Any]\nWorkerID = str\nUnitID = str\n\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self.task_queue: queue.Queue = queue.Queue()\n        self.worker_data: Dict[str, Dict[str, List]] = {}\n        self.failed_onboard: Set = set()\n        self.unit_agent_map: Dict[str, Tuple[str, Dict[str, Any]]] = {}\n\n",
        "source_code_len": 225,
        "target_code": "        self.task_queue: queue.Queue = queue.Queue()\n        self.worker_data: Dict[WorkerID, Dict[str, List]] = {}\n        self.failed_onboard: Set = set()\n        self.unit_agent_map: Dict[UnitID, Tuple[WorkerID, List[PairingsDict]]] = {}\n\n",
        "target_code_len": 242,
        "diff_format": "@@ -69,5 +73,5 @@\n         self.task_queue: queue.Queue = queue.Queue()\n-        self.worker_data: Dict[str, Dict[str, List]] = {}\n+        self.worker_data: Dict[WorkerID, Dict[str, List]] = {}\n         self.failed_onboard: Set = set()\n-        self.unit_agent_map: Dict[str, Tuple[str, Dict[str, Any]]] = {}\n+        self.unit_agent_map: Dict[UnitID, Tuple[WorkerID, List[PairingsDict]]] = {}\n \n",
        "source_code_with_indent": "        self.task_queue: queue.Queue = queue.Queue()\n        self.worker_data: Dict[str, Dict[str, List]] = {}\n        self.failed_onboard: Set = set()\n        self.unit_agent_map: Dict[str, Tuple[str, Dict[str, Any]]] = {}\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self.task_queue: queue.Queue = queue.Queue()\n        self.worker_data: Dict[WorkerID, Dict[str, List]] = {}\n        self.failed_onboard: Set = set()\n        self.unit_agent_map: Dict[UnitID, Tuple[WorkerID, List[PairingsDict]]] = {}\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "facebookresearch/Mephisto",
    "commit": "ba7a592508cf68b9ecea7935788489a9716bd6bf",
    "filename": "mephisto/server/blueprints/acute_eval/acute_eval_runner.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/facebookresearch-Mephisto/mephisto/server/blueprints/acute_eval/acute_eval_runner.py",
    "file_hunks_size": 12,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mephisto/server/blueprints/acute_eval/acute_eval_runner.py:442:12 Incompatible return type [7]: Expected `Dict[str, typing.Any]` but got `List[Dict[str, typing.Any]]`.",
    "message": " Expected `Dict[str, typing.Any]` but got `List[Dict[str, typing.Any]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 442,
    "warning_line": "            return task_data",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n\n",
        "source_code_len": 2,
        "target_code": "\nPairingsDict = Dict[str, Any]\nWorkerID = str\nUnitID = str\n\n\n",
        "target_code_len": 61,
        "diff_format": "@@ -32,2 +32,6 @@\n \n+PairingsDict = Dict[str, Any]\n+WorkerID = str\n+UnitID = str\n+\n \n",
        "source_code_with_indent": "\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nPairingsDict = Dict[str, Any]\nWorkerID = str\nUnitID = str\n\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def get_init_data_for_agent(self, agent: \"Agent\") -> Dict[str, Any]:\n        \"\"\"\n",
        "source_code_len": 86,
        "target_code": "\n    def get_init_data_for_agent(self, agent: \"Agent\") -> List[PairingsDict]:\n        \"\"\"\n",
        "target_code_len": 90,
        "diff_format": "@@ -428,3 +433,3 @@\n \n-    def get_init_data_for_agent(self, agent: \"Agent\") -> Dict[str, Any]:\n+    def get_init_data_for_agent(self, agent: \"Agent\") -> List[PairingsDict]:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED><DED><DED>def get_init_data_for_agent(self, agent: \"Agent\") -> Dict[str, Any]:\n        <IND>",
        "target_code_with_indent": "\n    <DED><DED><DED>def get_init_data_for_agent(self, agent: \"Agent\") -> List[PairingsDict]:\n        <IND>"
      }
    ]
  },
  {
    "project": "facebookresearch/Mephisto",
    "commit": "ba7a592508cf68b9ecea7935788489a9716bd6bf",
    "filename": "mephisto/server/blueprints/acute_eval/acute_eval_runner.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/facebookresearch-Mephisto/mephisto/server/blueprints/acute_eval/acute_eval_runner.py",
    "file_hunks_size": 12,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mephisto/server/blueprints/acute_eval/acute_eval_runner.py:464:42 Incompatible parameter type [6]: Expected `List[Dict[str, typing.Any]]` for 2nd positional only parameter to call `AcuteEvalRunner.requeue_task_data` but got `Dict[str, typing.Any]`.",
    "message": " Expected `List[Dict[str, typing.Any]]` for 2nd positional only parameter to call `AcuteEvalRunner.requeue_task_data` but got `Dict[str, typing.Any]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 464,
    "warning_line": "        self.requeue_task_data(worker_id, task_data)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n\n",
        "source_code_len": 2,
        "target_code": "\nPairingsDict = Dict[str, Any]\nWorkerID = str\nUnitID = str\n\n\n",
        "target_code_len": 61,
        "diff_format": "@@ -32,2 +32,6 @@\n \n+PairingsDict = Dict[str, Any]\n+WorkerID = str\n+UnitID = str\n+\n \n",
        "source_code_with_indent": "\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nPairingsDict = Dict[str, Any]\nWorkerID = str\nUnitID = str\n\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self.task_queue: queue.Queue = queue.Queue()\n        self.worker_data: Dict[str, Dict[str, List]] = {}\n        self.failed_onboard: Set = set()\n        self.unit_agent_map: Dict[str, Tuple[str, Dict[str, Any]]] = {}\n\n",
        "source_code_len": 225,
        "target_code": "        self.task_queue: queue.Queue = queue.Queue()\n        self.worker_data: Dict[WorkerID, Dict[str, List]] = {}\n        self.failed_onboard: Set = set()\n        self.unit_agent_map: Dict[UnitID, Tuple[WorkerID, List[PairingsDict]]] = {}\n\n",
        "target_code_len": 242,
        "diff_format": "@@ -69,5 +73,5 @@\n         self.task_queue: queue.Queue = queue.Queue()\n-        self.worker_data: Dict[str, Dict[str, List]] = {}\n+        self.worker_data: Dict[WorkerID, Dict[str, List]] = {}\n         self.failed_onboard: Set = set()\n-        self.unit_agent_map: Dict[str, Tuple[str, Dict[str, Any]]] = {}\n+        self.unit_agent_map: Dict[UnitID, Tuple[WorkerID, List[PairingsDict]]] = {}\n \n",
        "source_code_with_indent": "        self.task_queue: queue.Queue = queue.Queue()\n        self.worker_data: Dict[str, Dict[str, List]] = {}\n        self.failed_onboard: Set = set()\n        self.unit_agent_map: Dict[str, Tuple[str, Dict[str, Any]]] = {}\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self.task_queue: queue.Queue = queue.Queue()\n        self.worker_data: Dict[WorkerID, Dict[str, List]] = {}\n        self.failed_onboard: Set = set()\n        self.unit_agent_map: Dict[UnitID, Tuple[WorkerID, List[PairingsDict]]] = {}\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]