[
  {
    "project": "etiennedub/pyk4a",
    "commit": "7bd033a54d34425f41e0c4f1fcc2b7811fa32471",
    "filename": "example/threads.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/etiennedub-pyk4a/example/threads.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "example/threads.py:71:39 Unsupported operand [58]: `+` is not supported for operand types `List[CameraWorker]` and `List[CpuWorker]`.",
    "message": " `+` is not supported for operand types `List[CameraWorker]` and `List[CpuWorker]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 71,
    "warning_line": "        for worker in camera_workers + cpu_workers:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    # wait while all workers stop\n    while True:\n        for worker in camera_workers + cpu_workers:\n            if worker.is_alive():\n",
        "source_code_len": 136,
        "target_code": "    # wait while all workers stop\n    workers: List[Worker] = [*camera_workers, *cpu_workers]\n    while True:\n        for worker in workers:\n            if worker.is_alive():\n",
        "target_code_len": 175,
        "diff_format": "@@ -69,4 +70,5 @@\n     # wait while all workers stop\n+    workers: List[Worker] = [*camera_workers, *cpu_workers]\n     while True:\n-        for worker in camera_workers + cpu_workers:\n+        for worker in workers:\n             if worker.is_alive():\n",
        "source_code_with_indent": "    # wait while all workers stop\n    <DED>while True:\n        <IND>for worker in camera_workers + cpu_workers:\n            <IND>if worker.is_alive():\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    # wait while all workers stop\n    <DED>workers: List[Worker] = [*camera_workers, *cpu_workers]\n    while True:\n        <IND>for worker in workers:\n            <IND>if worker.is_alive():\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "etiennedub/pyk4a",
    "commit": "7bd033a54d34425f41e0c4f1fcc2b7811fa32471",
    "filename": "pyk4a/calibration.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/etiennedub-pyk4a/pyk4a/calibration.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pyk4a/calibration.py:54:12 Incompatible return type [7]: Expected `Tuple[int, List[typing.Any]]` but got `List[typing.Any]`.",
    "message": " Expected `Tuple[int, List[typing.Any]]` but got `List[typing.Any]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 54,
    "warning_line": "            return [x, y, z]",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from enum import IntEnum\nfrom typing import List, Tuple\nimport k4a_module\nfrom .pyk4a import Result, K4AException, K4ATimeoutException, PyK4A\nfrom pyk4a.config import Config\n\n",
        "source_code_len": 175,
        "target_code": "from enum import IntEnum\nfrom typing import List, Optional, Tuple\n\nimport k4a_module\nfrom pyk4a.config import Config\n\nfrom .pyk4a import K4AException, K4ATimeoutException, PyK4A, Result\n\n",
        "target_code_len": 187,
        "diff_format": "@@ -1,6 +1,8 @@\n from enum import IntEnum\n-from typing import List, Tuple\n+from typing import List, Optional, Tuple\n+\n import k4a_module\n-from .pyk4a import Result, K4AException, K4ATimeoutException, PyK4A\n from pyk4a.config import Config\n+\n+from .pyk4a import K4AException, K4ATimeoutException, PyK4A, Result\n \n",
        "source_code_with_indent": "from enum import IntEnum\nfrom typing import List, Tuple\nimport k4a_module\nfrom .pyk4a import Result, K4AException, K4ATimeoutException, PyK4A\nfrom pyk4a.config import Config\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from enum import IntEnum\nfrom typing import List, Optional, Tuple\n\nimport k4a_module\nfrom pyk4a.config import Config\n\nfrom .pyk4a import K4AException, K4ATimeoutException, PyK4A, Result\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def convert_3d_to_3d(self,\n                         source_point_3d: List,\n                         source_camera=None,\n                         target_camera=None) -> Tuple[int, List]:\n        \"\"\"\n",
        "source_code_len": 203,
        "target_code": "\n    def convert_3d_to_3d(\n        self,\n        source_point_3d: List[int],\n        source_camera: Optional[CalibrationType] = None,\n        target_camera: Optional[CalibrationType] = None,\n    ) -> List[float]:\n        \"\"\"\n",
        "target_code_len": 225,
        "diff_format": "@@ -30,6 +30,8 @@\n \n-    def convert_3d_to_3d(self,\n-                         source_point_3d: List,\n-                         source_camera=None,\n-                         target_camera=None) -> Tuple[int, List]:\n+    def convert_3d_to_3d(\n+        self,\n+        source_point_3d: List[int],\n+        source_camera: Optional[CalibrationType] = None,\n+        target_camera: Optional[CalibrationType] = None,\n+    ) -> List[float]:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def convert_3d_to_3d(self,\n                         source_point_3d: List,\n                         source_camera=None,\n                         target_camera=None) -> Tuple[int, List]:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def convert_3d_to_3d(\n        self,\n        source_point_3d: List[int],\n        source_camera: Optional[CalibrationType] = None,\n        target_camera: Optional[CalibrationType] = None,\n    ) -> List[float]:\n        <IND>"
      }
    ]
  },
  {
    "project": "etiennedub/pyk4a",
    "commit": "7bd033a54d34425f41e0c4f1fcc2b7811fa32471",
    "filename": "pyk4a/pyk4a.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/etiennedub-pyk4a/pyk4a/pyk4a.py",
    "file_hunks_size": 21,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pyk4a/pyk4a.py:226:76 Invalid type [31]: Expression `(bool, int, int, int, int, int)` is not a valid type.",
    "message": " Expression `(bool, int, int, int, int, int)` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 226,
    "warning_line": "    def _get_color_control_capabilities(self, cmd: ColorControlCommand) -> (bool, int, int, int, int, int):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import Tuple, Optional\nimport k4a_module\nfrom enum import Enum\nimport numpy as np\nfrom dataclasses import dataclass\nfrom typing import Union\n\nfrom pyk4a.config import Config, ColorControlMode, ColorControlCommand, ColorFormat\n\n",
        "source_code_len": 239,
        "target_code": "from enum import Enum\nfrom typing import Any, Mapping, Optional, Tuple\n\nimport numpy as np\n\nimport k4a_module\nfrom pyk4a.config import ColorControlCommand, ColorControlMode, ColorFormat, Config\n\n",
        "target_code_len": 195,
        "diff_format": "@@ -1,9 +1,8 @@\n-from typing import Tuple, Optional\n+from enum import Enum\n+from typing import Any, Mapping, Optional, Tuple\n+\n+import numpy as np\n+\n import k4a_module\n-from enum import Enum\n-import numpy as np\n-from dataclasses import dataclass\n-from typing import Union\n-\n-from pyk4a.config import Config, ColorControlMode, ColorControlCommand, ColorFormat\n+from pyk4a.config import ColorControlCommand, ColorControlMode, ColorFormat, Config\n \n",
        "source_code_with_indent": "from typing import Tuple, Optional\nimport k4a_module\nfrom enum import Enum\nimport numpy as np\nfrom dataclasses import dataclass\nfrom typing import Union\n\nfrom pyk4a.config import Config, ColorControlMode, ColorControlCommand, ColorFormat\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from enum import Enum\nfrom typing import Any, Mapping, Optional, Tuple\n\nimport numpy as np\n\nimport k4a_module\nfrom pyk4a.config import ColorControlCommand, ColorControlMode, ColorFormat, Config\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _get_color_control_capabilities(self, cmd: ColorControlCommand) -> (bool, int, int, int, int, int):\n        ret = k4a_module.device_get_color_control_capabilities(self._device_id, self.thread_safe, cmd)\n        (res, supports_auto, min_value, max_value, step_value, default_value, default_mode) = ret\n        self._verify_error(res)\n",
        "source_code_len": 342,
        "target_code": "\n    def _get_color_control_capabilities(self, cmd: ColorControlCommand) -> Mapping[str, Any]:\n        ret = k4a_module.device_get_color_control_capabilities(self._device_id, self.thread_safe, cmd)\n        (res, supports_auto, min_value, max_value, step_value, default_value, default_mode,) = ret\n        self._verify_error(res)\n",
        "target_code_len": 329,
        "diff_format": "@@ -225,5 +231,5 @@\n \n-    def _get_color_control_capabilities(self, cmd: ColorControlCommand) -> (bool, int, int, int, int, int):\n+    def _get_color_control_capabilities(self, cmd: ColorControlCommand) -> Mapping[str, Any]:\n         ret = k4a_module.device_get_color_control_capabilities(self._device_id, self.thread_safe, cmd)\n-        (res, supports_auto, min_value, max_value, step_value, default_value, default_mode) = ret\n+        (res, supports_auto, min_value, max_value, step_value, default_value, default_mode,) = ret\n         self._verify_error(res)\n",
        "source_code_with_indent": "\n    <DED>def _get_color_control_capabilities(self, cmd: ColorControlCommand) -> (bool, int, int, int, int, int):\n        <IND>ret = k4a_module.device_get_color_control_capabilities(self._device_id, self.thread_safe, cmd)\n        (res, supports_auto, min_value, max_value, step_value, default_value, default_mode) = ret\n        self._verify_error(res)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def _get_color_control_capabilities(self, cmd: ColorControlCommand) -> Mapping[str, Any]:\n        <IND>ret = k4a_module.device_get_color_control_capabilities(self._device_id, self.thread_safe, cmd)\n        (res, supports_auto, min_value, max_value, step_value, default_value, default_mode,) = ret\n        self._verify_error(res)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]