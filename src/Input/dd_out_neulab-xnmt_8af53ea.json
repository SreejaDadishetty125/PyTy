[
  {
    "project": "neulab/xnmt",
    "commit": "8af53eab7dc9145d9474fd731f839cabc3154b82",
    "filename": "xnmt/inferences.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/neulab-xnmt/xnmt/inferences.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "xnmt/inferences.py:132:24 Unsupported operand [58]: `-` is not supported for operand types `Optional[float]` and `float`.",
    "message": " `-` is not supported for operand types `Optional[float]` and `float`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 132,
    "warning_line": "                if (abs(outputs[i].score - assert_scores[cur_sent_i + i]) / abs(assert_scores[cur_sent_i + i])) > 1e-5:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import List, Optional, Tuple, Sequence, Union\n\n",
        "source_code_len": 59,
        "target_code": "from typing import List, Optional, Tuple, Sequence, Union\nimport numbers\n\n",
        "target_code_len": 74,
        "diff_format": "@@ -2,2 +2,3 @@\n from typing import List, Optional, Tuple, Sequence, Union\n+import numbers\n \n",
        "source_code_with_indent": "from typing import List, Optional, Tuple, Sequence, Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import List, Optional, Tuple, Sequence, Union\nimport numbers\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                       forced_ref_corpus: Optional[Sequence[sent.Sentence]] = None,\n                       assert_scores: Optional[Sequence[float]] = None) -> None:\n    \"\"\"\n",
        "source_code_len": 173,
        "target_code": "                       forced_ref_corpus: Optional[Sequence[sent.Sentence]] = None,\n                       assert_scores: Optional[Sequence[numbers.Real]] = None) -> None:\n    \"\"\"\n",
        "target_code_len": 180,
        "diff_format": "@@ -95,3 +96,3 @@\n                        forced_ref_corpus: Optional[Sequence[sent.Sentence]] = None,\n-                       assert_scores: Optional[Sequence[float]] = None) -> None:\n+                       assert_scores: Optional[Sequence[numbers.Real]] = None) -> None:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "                       forced_ref_corpus: Optional[Sequence[sent.Sentence]] = None,\n                       assert_scores: Optional[Sequence[float]] = None) -> None:\n    <IND>",
        "target_code_with_indent": "                       forced_ref_corpus: Optional[Sequence[sent.Sentence]] = None,\n                       assert_scores: Optional[Sequence[numbers.Real]] = None) -> None:\n    <IND>"
      }
    ]
  },
  {
    "project": "neulab/xnmt",
    "commit": "8af53eab7dc9145d9474fd731f839cabc3154b82",
    "filename": "xnmt/sent.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/neulab-xnmt/xnmt/sent.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "xnmt/sent.py:69:31 Incompatible variable type [9]: score is declared to have type `float` but is used as type `None`.",
    "message": " score is declared to have type `float` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 69,
    "warning_line": "  def __init__(self, idx: int, score: float = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import functools\nimport copy\n\n",
        "source_code_len": 30,
        "target_code": "import functools\nimport numbers\n\n",
        "target_code_len": 33,
        "diff_format": "@@ -2,3 +2,3 @@\n import functools\n-import copy\n+import numbers\n \n",
        "source_code_with_indent": "import functools\nimport copy\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import functools\nimport numbers\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n  def __init__(self, idx: Optional[int] = None, score: Optional[float] = None) -> None:\n    self.idx = idx\n",
        "source_code_len": 108,
        "target_code": "\n  def __init__(self, idx: Optional[int] = None, score: Optional[numbers.Real] = None) -> None:\n    self.idx = idx\n",
        "target_code_len": 115,
        "diff_format": "@@ -18,3 +18,3 @@\n \n-  def __init__(self, idx: Optional[int] = None, score: Optional[float] = None) -> None:\n+  def __init__(self, idx: Optional[int] = None, score: Optional[numbers.Real] = None) -> None:\n     self.idx = idx\n",
        "source_code_with_indent": "\n  def __init__(self, idx: Optional[int] = None, score: Optional[float] = None) -> None:\n    <IND>self.idx = idx\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n  def __init__(self, idx: Optional[int] = None, score: Optional[numbers.Real] = None) -> None:\n    <IND>self.idx = idx\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "  \"\"\"\n  def __init__(self, idx: int, score: float = None,\n               output_procs: Union[OutputProcessor, Sequence[OutputProcessor]] = []) -> None:\n",
        "source_code_len": 152,
        "target_code": "  \"\"\"\n  def __init__(self, idx: int, score: Optional[numbers.Real] = None,\n               output_procs: Union[OutputProcessor, Sequence[OutputProcessor]] = []) -> None:\n",
        "target_code_len": 169,
        "diff_format": "@@ -68,3 +68,3 @@\n   \"\"\"\n-  def __init__(self, idx: int, score: float = None,\n+  def __init__(self, idx: int, score: Optional[numbers.Real] = None,\n                output_procs: Union[OutputProcessor, Sequence[OutputProcessor]] = []) -> None:\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n  def __init__(self, idx: int, score: float = None,\n               output_procs: Union[OutputProcessor, Sequence[OutputProcessor]] = []) -> None:\n",
        "target_code_with_indent": "\n  def __init__(self, idx: int, score: Optional[numbers.Real] = None,\n               output_procs: Union[OutputProcessor, Sequence[OutputProcessor]] = []) -> None:\n"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "  def __init__(self, words: Sequence[int], idx: Optional[int] = None, vocab: Optional[Vocab] = None,\n               score: Optional[float] = None, output_procs: Union[OutputProcessor, Sequence[OutputProcessor]] = [],\n               pad_token: int = Vocab.ES) -> None:\n",
        "source_code_len": 268,
        "target_code": "  def __init__(self, words: Sequence[int], idx: Optional[int] = None, vocab: Optional[Vocab] = None,\n               score: Optional[numbers.Real] = None, output_procs: Union[OutputProcessor, Sequence[OutputProcessor]] = [],\n               pad_token: int = Vocab.ES) -> None:\n",
        "target_code_len": 275,
        "diff_format": "@@ -176,3 +176,3 @@\n   def __init__(self, words: Sequence[int], idx: Optional[int] = None, vocab: Optional[Vocab] = None,\n-               score: Optional[float] = None, output_procs: Union[OutputProcessor, Sequence[OutputProcessor]] = [],\n+               score: Optional[numbers.Real] = None, output_procs: Union[OutputProcessor, Sequence[OutputProcessor]] = [],\n                pad_token: int = Vocab.ES) -> None:\n",
        "source_code_with_indent": "  def __init__(self, words: Sequence[int], idx: Optional[int] = None, vocab: Optional[Vocab] = None,\n               score: Optional[float] = None, output_procs: Union[OutputProcessor, Sequence[OutputProcessor]] = [],\n               pad_token: int = Vocab.ES) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "  def __init__(self, words: Sequence[int], idx: Optional[int] = None, vocab: Optional[Vocab] = None,\n               score: Optional[numbers.Real] = None, output_procs: Union[OutputProcessor, Sequence[OutputProcessor]] = [],\n               pad_token: int = Vocab.ES) -> None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "  def __init__(self, nparr: np.ndarray, idx: Optional[int] = None, padded_len: int = 0,\n               score: Optional[float] = None) -> None:\n    super().__init__(idx=idx, score=score)\n",
        "source_code_len": 186,
        "target_code": "  def __init__(self, nparr: np.ndarray, idx: Optional[int] = None, padded_len: int = 0,\n               score: Optional[numbers.Real] = None) -> None:\n    super().__init__(idx=idx, score=score)\n",
        "target_code_len": 193,
        "diff_format": "@@ -253,3 +253,3 @@\n   def __init__(self, nparr: np.ndarray, idx: Optional[int] = None, padded_len: int = 0,\n-               score: Optional[float] = None) -> None:\n+               score: Optional[numbers.Real] = None) -> None:\n     super().__init__(idx=idx, score=score)\n",
        "source_code_with_indent": "  def __init__(self, nparr: np.ndarray, idx: Optional[int] = None, padded_len: int = 0,\n               score: Optional[float] = None) -> None:\n    <IND>super().__init__(idx=idx, score=score)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "  def __init__(self, nparr: np.ndarray, idx: Optional[int] = None, padded_len: int = 0,\n               score: Optional[numbers.Real] = None) -> None:\n    <IND>super().__init__(idx=idx, score=score)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "neulab/xnmt",
    "commit": "8af53eab7dc9145d9474fd731f839cabc3154b82",
    "filename": "xnmt/sent.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/neulab-xnmt/xnmt/sent.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "xnmt/sent.py:121:30 Incompatible parameter type [6]: Expected `float` for 2nd parameter `score` to call `ReadableSentence.__init__` but got `Optional[float]`.",
    "message": " Expected `float` for 2nd parameter `score` to call `ReadableSentence.__init__` but got `Optional[float]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 121,
    "warning_line": "    super().__init__(idx=idx, score=score)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import functools\nimport copy\n\n",
        "source_code_len": 30,
        "target_code": "import functools\nimport numbers\n\n",
        "target_code_len": 33,
        "diff_format": "@@ -2,3 +2,3 @@\n import functools\n-import copy\n+import numbers\n \n",
        "source_code_with_indent": "import functools\nimport copy\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import functools\nimport numbers\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n  def __init__(self, idx: Optional[int] = None, score: Optional[float] = None) -> None:\n    self.idx = idx\n",
        "source_code_len": 108,
        "target_code": "\n  def __init__(self, idx: Optional[int] = None, score: Optional[numbers.Real] = None) -> None:\n    self.idx = idx\n",
        "target_code_len": 115,
        "diff_format": "@@ -18,3 +18,3 @@\n \n-  def __init__(self, idx: Optional[int] = None, score: Optional[float] = None) -> None:\n+  def __init__(self, idx: Optional[int] = None, score: Optional[numbers.Real] = None) -> None:\n     self.idx = idx\n",
        "source_code_with_indent": "\n  def __init__(self, idx: Optional[int] = None, score: Optional[float] = None) -> None:\n    <IND>self.idx = idx\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n  def __init__(self, idx: Optional[int] = None, score: Optional[numbers.Real] = None) -> None:\n    <IND>self.idx = idx\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "  \"\"\"\n  def __init__(self, idx: int, score: float = None,\n               output_procs: Union[OutputProcessor, Sequence[OutputProcessor]] = []) -> None:\n",
        "source_code_len": 152,
        "target_code": "  \"\"\"\n  def __init__(self, idx: int, score: Optional[numbers.Real] = None,\n               output_procs: Union[OutputProcessor, Sequence[OutputProcessor]] = []) -> None:\n",
        "target_code_len": 169,
        "diff_format": "@@ -68,3 +68,3 @@\n   \"\"\"\n-  def __init__(self, idx: int, score: float = None,\n+  def __init__(self, idx: int, score: Optional[numbers.Real] = None,\n                output_procs: Union[OutputProcessor, Sequence[OutputProcessor]] = []) -> None:\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n  def __init__(self, idx: int, score: float = None,\n               output_procs: Union[OutputProcessor, Sequence[OutputProcessor]] = []) -> None:\n",
        "target_code_with_indent": "\n  def __init__(self, idx: int, score: Optional[numbers.Real] = None,\n               output_procs: Union[OutputProcessor, Sequence[OutputProcessor]] = []) -> None:\n"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "  def __init__(self, words: Sequence[int], idx: Optional[int] = None, vocab: Optional[Vocab] = None,\n               score: Optional[float] = None, output_procs: Union[OutputProcessor, Sequence[OutputProcessor]] = [],\n               pad_token: int = Vocab.ES) -> None:\n",
        "source_code_len": 268,
        "target_code": "  def __init__(self, words: Sequence[int], idx: Optional[int] = None, vocab: Optional[Vocab] = None,\n               score: Optional[numbers.Real] = None, output_procs: Union[OutputProcessor, Sequence[OutputProcessor]] = [],\n               pad_token: int = Vocab.ES) -> None:\n",
        "target_code_len": 275,
        "diff_format": "@@ -176,3 +176,3 @@\n   def __init__(self, words: Sequence[int], idx: Optional[int] = None, vocab: Optional[Vocab] = None,\n-               score: Optional[float] = None, output_procs: Union[OutputProcessor, Sequence[OutputProcessor]] = [],\n+               score: Optional[numbers.Real] = None, output_procs: Union[OutputProcessor, Sequence[OutputProcessor]] = [],\n                pad_token: int = Vocab.ES) -> None:\n",
        "source_code_with_indent": "  def __init__(self, words: Sequence[int], idx: Optional[int] = None, vocab: Optional[Vocab] = None,\n               score: Optional[float] = None, output_procs: Union[OutputProcessor, Sequence[OutputProcessor]] = [],\n               pad_token: int = Vocab.ES) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "  def __init__(self, words: Sequence[int], idx: Optional[int] = None, vocab: Optional[Vocab] = None,\n               score: Optional[numbers.Real] = None, output_procs: Union[OutputProcessor, Sequence[OutputProcessor]] = [],\n               pad_token: int = Vocab.ES) -> None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "  def __init__(self, nparr: np.ndarray, idx: Optional[int] = None, padded_len: int = 0,\n               score: Optional[float] = None) -> None:\n    super().__init__(idx=idx, score=score)\n",
        "source_code_len": 186,
        "target_code": "  def __init__(self, nparr: np.ndarray, idx: Optional[int] = None, padded_len: int = 0,\n               score: Optional[numbers.Real] = None) -> None:\n    super().__init__(idx=idx, score=score)\n",
        "target_code_len": 193,
        "diff_format": "@@ -253,3 +253,3 @@\n   def __init__(self, nparr: np.ndarray, idx: Optional[int] = None, padded_len: int = 0,\n-               score: Optional[float] = None) -> None:\n+               score: Optional[numbers.Real] = None) -> None:\n     super().__init__(idx=idx, score=score)\n",
        "source_code_with_indent": "  def __init__(self, nparr: np.ndarray, idx: Optional[int] = None, padded_len: int = 0,\n               score: Optional[float] = None) -> None:\n    <IND>super().__init__(idx=idx, score=score)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "  def __init__(self, nparr: np.ndarray, idx: Optional[int] = None, padded_len: int = 0,\n               score: Optional[numbers.Real] = None) -> None:\n    <IND>super().__init__(idx=idx, score=score)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "neulab/xnmt",
    "commit": "8af53eab7dc9145d9474fd731f839cabc3154b82",
    "filename": "xnmt/sent.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/neulab-xnmt/xnmt/sent.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "xnmt/sent.py:179:30 Incompatible parameter type [6]: Expected `float` for 2nd parameter `score` to call `ReadableSentence.__init__` but got `Optional[float]`.",
    "message": " Expected `float` for 2nd parameter `score` to call `ReadableSentence.__init__` but got `Optional[float]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 179,
    "warning_line": "    super().__init__(idx=idx, score=score, output_procs=output_procs)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import functools\nimport copy\n\n",
        "source_code_len": 30,
        "target_code": "import functools\nimport numbers\n\n",
        "target_code_len": 33,
        "diff_format": "@@ -2,3 +2,3 @@\n import functools\n-import copy\n+import numbers\n \n",
        "source_code_with_indent": "import functools\nimport copy\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import functools\nimport numbers\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n  def __init__(self, idx: Optional[int] = None, score: Optional[float] = None) -> None:\n    self.idx = idx\n",
        "source_code_len": 108,
        "target_code": "\n  def __init__(self, idx: Optional[int] = None, score: Optional[numbers.Real] = None) -> None:\n    self.idx = idx\n",
        "target_code_len": 115,
        "diff_format": "@@ -18,3 +18,3 @@\n \n-  def __init__(self, idx: Optional[int] = None, score: Optional[float] = None) -> None:\n+  def __init__(self, idx: Optional[int] = None, score: Optional[numbers.Real] = None) -> None:\n     self.idx = idx\n",
        "source_code_with_indent": "\n  def __init__(self, idx: Optional[int] = None, score: Optional[float] = None) -> None:\n    <IND>self.idx = idx\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n  def __init__(self, idx: Optional[int] = None, score: Optional[numbers.Real] = None) -> None:\n    <IND>self.idx = idx\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "  \"\"\"\n  def __init__(self, idx: int, score: float = None,\n               output_procs: Union[OutputProcessor, Sequence[OutputProcessor]] = []) -> None:\n",
        "source_code_len": 152,
        "target_code": "  \"\"\"\n  def __init__(self, idx: int, score: Optional[numbers.Real] = None,\n               output_procs: Union[OutputProcessor, Sequence[OutputProcessor]] = []) -> None:\n",
        "target_code_len": 169,
        "diff_format": "@@ -68,3 +68,3 @@\n   \"\"\"\n-  def __init__(self, idx: int, score: float = None,\n+  def __init__(self, idx: int, score: Optional[numbers.Real] = None,\n                output_procs: Union[OutputProcessor, Sequence[OutputProcessor]] = []) -> None:\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n  def __init__(self, idx: int, score: float = None,\n               output_procs: Union[OutputProcessor, Sequence[OutputProcessor]] = []) -> None:\n",
        "target_code_with_indent": "\n  def __init__(self, idx: int, score: Optional[numbers.Real] = None,\n               output_procs: Union[OutputProcessor, Sequence[OutputProcessor]] = []) -> None:\n"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "  def __init__(self, words: Sequence[int], idx: Optional[int] = None, vocab: Optional[Vocab] = None,\n               score: Optional[float] = None, output_procs: Union[OutputProcessor, Sequence[OutputProcessor]] = [],\n               pad_token: int = Vocab.ES) -> None:\n",
        "source_code_len": 268,
        "target_code": "  def __init__(self, words: Sequence[int], idx: Optional[int] = None, vocab: Optional[Vocab] = None,\n               score: Optional[numbers.Real] = None, output_procs: Union[OutputProcessor, Sequence[OutputProcessor]] = [],\n               pad_token: int = Vocab.ES) -> None:\n",
        "target_code_len": 275,
        "diff_format": "@@ -176,3 +176,3 @@\n   def __init__(self, words: Sequence[int], idx: Optional[int] = None, vocab: Optional[Vocab] = None,\n-               score: Optional[float] = None, output_procs: Union[OutputProcessor, Sequence[OutputProcessor]] = [],\n+               score: Optional[numbers.Real] = None, output_procs: Union[OutputProcessor, Sequence[OutputProcessor]] = [],\n                pad_token: int = Vocab.ES) -> None:\n",
        "source_code_with_indent": "  def __init__(self, words: Sequence[int], idx: Optional[int] = None, vocab: Optional[Vocab] = None,\n               score: Optional[float] = None, output_procs: Union[OutputProcessor, Sequence[OutputProcessor]] = [],\n               pad_token: int = Vocab.ES) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "  def __init__(self, words: Sequence[int], idx: Optional[int] = None, vocab: Optional[Vocab] = None,\n               score: Optional[numbers.Real] = None, output_procs: Union[OutputProcessor, Sequence[OutputProcessor]] = [],\n               pad_token: int = Vocab.ES) -> None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "  def __init__(self, nparr: np.ndarray, idx: Optional[int] = None, padded_len: int = 0,\n               score: Optional[float] = None) -> None:\n    super().__init__(idx=idx, score=score)\n",
        "source_code_len": 186,
        "target_code": "  def __init__(self, nparr: np.ndarray, idx: Optional[int] = None, padded_len: int = 0,\n               score: Optional[numbers.Real] = None) -> None:\n    super().__init__(idx=idx, score=score)\n",
        "target_code_len": 193,
        "diff_format": "@@ -253,3 +253,3 @@\n   def __init__(self, nparr: np.ndarray, idx: Optional[int] = None, padded_len: int = 0,\n-               score: Optional[float] = None) -> None:\n+               score: Optional[numbers.Real] = None) -> None:\n     super().__init__(idx=idx, score=score)\n",
        "source_code_with_indent": "  def __init__(self, nparr: np.ndarray, idx: Optional[int] = None, padded_len: int = 0,\n               score: Optional[float] = None) -> None:\n    <IND>super().__init__(idx=idx, score=score)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "  def __init__(self, nparr: np.ndarray, idx: Optional[int] = None, padded_len: int = 0,\n               score: Optional[numbers.Real] = None) -> None:\n    <IND>super().__init__(idx=idx, score=score)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]