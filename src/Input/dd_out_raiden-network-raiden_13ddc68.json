[
  {
    "project": "raiden-network/raiden",
    "commit": "13ddc687cb5803577c7ab7927b877379b1134895",
    "filename": "raiden/storage/serialization/fields.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/raiden-network-raiden/raiden/storage/serialization/fields.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "raiden/storage/serialization/fields.py:39:12 Incompatible return type [7]: Expected `str` but got `bytes`.",
    "message": " Expected `str` but got `bytes`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 39,
    "warning_line": "            return value",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _serialize(self, value: bytes, attr: Any, obj: Any, **kwargs: Any) -> str:\n        if value is None:\n",
        "source_code_len": 110,
        "target_code": "\n    def _serialize(\n        self, value: Optional[bytes], attr: Any, obj: Any, **kwargs: Any\n    ) -> Optional[str]:\n        if value is None:\n",
        "target_code_len": 144,
        "diff_format": "@@ -36,3 +36,5 @@\n \n-    def _serialize(self, value: bytes, attr: Any, obj: Any, **kwargs: Any) -> str:\n+    def _serialize(\n+        self, value: Optional[bytes], attr: Any, obj: Any, **kwargs: Any\n+    ) -> Optional[str]:\n         if value is None:\n",
        "source_code_with_indent": "\n    def _serialize(self, value: bytes, attr: Any, obj: Any, **kwargs: Any) -> str:\n        <IND>if value is None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    def _serialize(\n        self, value: Optional[bytes], attr: Any, obj: Any, **kwargs: Any\n    ) -> Optional[str]:\n        <IND>if value is None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "raiden-network/raiden",
    "commit": "13ddc687cb5803577c7ab7927b877379b1134895",
    "filename": "raiden/storage/serialization/fields.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/raiden-network-raiden/raiden/storage/serialization/fields.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "raiden/storage/serialization/fields.py:44:12 Incompatible return type [7]: Expected `bytes` but got `str`.",
    "message": " Expected `bytes` but got `str`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 44,
    "warning_line": "            return value",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _deserialize(self, value: str, attr: Any, data: Any, **kwargs: Any) -> bytes:\n        if value is None:\n",
        "source_code_len": 113,
        "target_code": "\n    def _deserialize(\n        self, value: Optional[str], attr: Any, data: Any, **kwargs: Any\n    ) -> Optional[bytes]:\n        if value is None:\n",
        "target_code_len": 147,
        "diff_format": "@@ -41,3 +43,5 @@\n \n-    def _deserialize(self, value: str, attr: Any, data: Any, **kwargs: Any) -> bytes:\n+    def _deserialize(\n+        self, value: Optional[str], attr: Any, data: Any, **kwargs: Any\n+    ) -> Optional[bytes]:\n         if value is None:\n",
        "source_code_with_indent": "\n    <DED>def _deserialize(self, value: str, attr: Any, data: Any, **kwargs: Any) -> bytes:\n        <IND>if value is None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def _deserialize(\n        self, value: Optional[str], attr: Any, data: Any, **kwargs: Any\n    ) -> Optional[bytes]:\n        <IND>if value is None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "raiden-network/raiden",
    "commit": "13ddc687cb5803577c7ab7927b877379b1134895",
    "filename": "raiden/storage/sqlite.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/raiden-network-raiden/raiden/storage/sqlite.py",
    "file_hunks_size": 1,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "raiden/storage/sqlite.py:877:32 Incompatible variable type [9]: limit is declared to have type `int` but is used as type `None`.",
    "message": " limit is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 877,
    "warning_line": "    def get_state_changes(self, limit: int = None, offset: int = None) -> List[StateChange]:"
  },
  {
    "project": "raiden-network/raiden",
    "commit": "13ddc687cb5803577c7ab7927b877379b1134895",
    "filename": "raiden/storage/sqlite.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/raiden-network-raiden/raiden/storage/sqlite.py",
    "file_hunks_size": 1,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "raiden/storage/sqlite.py:877:51 Incompatible variable type [9]: offset is declared to have type `int` but is used as type `None`.",
    "message": " offset is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 877,
    "warning_line": "    def get_state_changes(self, limit: int = None, offset: int = None) -> List[StateChange]:"
  },
  {
    "project": "raiden-network/raiden",
    "commit": "13ddc687cb5803577c7ab7927b877379b1134895",
    "filename": "raiden/utils/profiling/sampler.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/raiden-network-raiden/raiden/utils/profiling/sampler.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "raiden/utils/profiling/sampler.py:41:8 Incompatible variable type [9]: frame is declared to have type `FrameType` but is used as type `Optional[FrameType]`.",
    "message": " frame is declared to have type `FrameType` but is used as type `Optional[FrameType]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 41,
    "warning_line": "        frame = frame.f_back",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    callstack = []\n    while frame is not None:\n        callstack.append(frame_format(frame))\n        frame = frame.f_back\n\n",
        "source_code_len": 124,
        "target_code": "    callstack = []\n    optional_frame: Optional[FrameType] = frame\n    while optional_frame is not None:\n        callstack.append(frame_format(optional_frame))\n        optional_frame = optional_frame.f_back\n\n",
        "target_code_len": 208,
        "diff_format": "@@ -38,5 +38,6 @@\n     callstack = []\n-    while frame is not None:\n-        callstack.append(frame_format(frame))\n-        frame = frame.f_back\n+    optional_frame: Optional[FrameType] = frame\n+    while optional_frame is not None:\n+        callstack.append(frame_format(optional_frame))\n+        optional_frame = optional_frame.f_back\n \n",
        "source_code_with_indent": "    <IND>callstack = []\n    while frame is not None:\n        <IND>callstack.append(frame_format(frame))\n        frame = frame.f_back\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <IND>callstack = []\n    optional_frame: Optional[FrameType] = frame\n    while optional_frame is not None:\n        <IND>callstack.append(frame_format(optional_frame))\n        optional_frame = optional_frame.f_back\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]