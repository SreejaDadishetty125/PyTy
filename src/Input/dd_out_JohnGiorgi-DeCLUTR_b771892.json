[
  {
    "project": "JohnGiorgi/DeCLUTR",
    "commit": "b771892621086b18d92cd6b419924d2a68ebb251",
    "filename": "scripts/preprocess_openwebtext.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/JohnGiorgi-DeCLUTR/scripts/preprocess_openwebtext.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "scripts/preprocess_openwebtext.py:20:4 Incompatible variable type [9]: output_filepath is declared to have type `str` but is used as type `Path`.",
    "message": " output_filepath is declared to have type `str` but is used as type `Path`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 20,
    "warning_line": "    output_filepath = Path(output_filepath)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from pathlib import Path\nfrom typing import List, Optional\nfrom declutr.common.data_utils import sanitize\n\nimport typer\n\n",
        "source_code_len": 121,
        "target_code": "from pathlib import Path\nfrom typing import List, Optional, Union\n\nimport typer\nfrom declutr.common.data_utils import sanitize\n\n",
        "target_code_len": 128,
        "diff_format": "@@ -4,6 +4,6 @@\n from pathlib import Path\n-from typing import List, Optional\n-from declutr.common.data_utils import sanitize\n+from typing import List, Optional, Union\n \n import typer\n+from declutr.common.data_utils import sanitize\n \n",
        "source_code_with_indent": "from pathlib import Path\nfrom typing import List, Optional\nfrom declutr.common.data_utils import sanitize\n\nimport typer\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from pathlib import Path\nfrom typing import List, Optional, Union\n\nimport typer\nfrom declutr.common.data_utils import sanitize\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _write_output_to_disk(text: List[str], output_filepath: str) -> None:\n    \"\"\"Writes a list of documents, `text`, to the file `output_filepath`, one document per line.\"\"\"\n",
        "source_code_len": 175,
        "target_code": "\ndef _write_output_to_disk(text: List[str], output_filepath: Union[str, Path]) -> None:\n    \"\"\"Writes a list of documents, `text`, to the file `output_filepath`, one document per line.\"\"\"\n",
        "target_code_len": 188,
        "diff_format": "@@ -16,3 +16,3 @@\n \n-def _write_output_to_disk(text: List[str], output_filepath: str) -> None:\n+def _write_output_to_disk(text: List[str], output_filepath: Union[str, Path]) -> None:\n     \"\"\"Writes a list of documents, `text`, to the file `output_filepath`, one document per line.\"\"\"\n",
        "source_code_with_indent": "\ndef _write_output_to_disk(text: List[str], output_filepath: str) -> None:\n    <IND>\"\"\"Writes a list of documents, `text`, to the file `output_filepath`, one document per line.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\ndef _write_output_to_disk(text: List[str], output_filepath: Union[str, Path]) -> None:\n    <IND>\"\"\"Writes a list of documents, `text`, to the file `output_filepath`, one document per line.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "JohnGiorgi/DeCLUTR",
    "commit": "b771892621086b18d92cd6b419924d2a68ebb251",
    "filename": "scripts/preprocess_openwebtext.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/JohnGiorgi-DeCLUTR/scripts/preprocess_openwebtext.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "scripts/preprocess_openwebtext.py:53:4 Incompatible variable type [9]: openwebtext_path is declared to have type `str` but is used as type `Path`.",
    "message": " openwebtext_path is declared to have type `str` but is used as type `Path`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 53,
    "warning_line": "    openwebtext_path = Path(openwebtext_path)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from pathlib import Path\nfrom typing import List, Optional\nfrom declutr.common.data_utils import sanitize\n\nimport typer\n\n",
        "source_code_len": 121,
        "target_code": "from pathlib import Path\nfrom typing import List, Optional, Union\n\nimport typer\nfrom declutr.common.data_utils import sanitize\n\n",
        "target_code_len": 128,
        "diff_format": "@@ -4,6 +4,6 @@\n from pathlib import Path\n-from typing import List, Optional\n-from declutr.common.data_utils import sanitize\n+from typing import List, Optional, Union\n \n import typer\n+from declutr.common.data_utils import sanitize\n \n",
        "source_code_with_indent": "from pathlib import Path\nfrom typing import List, Optional\nfrom declutr.common.data_utils import sanitize\n\nimport typer\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from pathlib import Path\nfrom typing import List, Optional, Union\n\nimport typer\nfrom declutr.common.data_utils import sanitize\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _write_output_to_disk(text: List[str], output_filepath: str) -> None:\n    \"\"\"Writes a list of documents, `text`, to the file `output_filepath`, one document per line.\"\"\"\n",
        "source_code_len": 175,
        "target_code": "\ndef _write_output_to_disk(text: List[str], output_filepath: Union[str, Path]) -> None:\n    \"\"\"Writes a list of documents, `text`, to the file `output_filepath`, one document per line.\"\"\"\n",
        "target_code_len": 188,
        "diff_format": "@@ -16,3 +16,3 @@\n \n-def _write_output_to_disk(text: List[str], output_filepath: str) -> None:\n+def _write_output_to_disk(text: List[str], output_filepath: Union[str, Path]) -> None:\n     \"\"\"Writes a list of documents, `text`, to the file `output_filepath`, one document per line.\"\"\"\n",
        "source_code_with_indent": "\ndef _write_output_to_disk(text: List[str], output_filepath: str) -> None:\n    <IND>\"\"\"Writes a list of documents, `text`, to the file `output_filepath`, one document per line.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\ndef _write_output_to_disk(text: List[str], output_filepath: Union[str, Path]) -> None:\n    <IND>\"\"\"Writes a list of documents, `text`, to the file `output_filepath`, one document per line.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def main(\n    openwebtext_path: str,\n    output_filepath: str,\n    min_length: Optional[int] = None,\n",
        "source_code_len": 101,
        "target_code": "def main(\n    openwebtext_path: Union[str, Path],\n    output_filepath: Union[str, Path],\n    min_length: Optional[int] = None,\n",
        "target_code_len": 127,
        "diff_format": "@@ -38,4 +38,4 @@\n def main(\n-    openwebtext_path: str,\n-    output_filepath: str,\n+    openwebtext_path: Union[str, Path],\n+    output_filepath: Union[str, Path],\n     min_length: Optional[int] = None,\n",
        "source_code_with_indent": "<DED>def main(\n    openwebtext_path: str,\n    output_filepath: str,\n    min_length: Optional[int] = None,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED>def main(\n    openwebtext_path: Union[str, Path],\n    output_filepath: Union[str, Path],\n    min_length: Optional[int] = None,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "JohnGiorgi/DeCLUTR",
    "commit": "b771892621086b18d92cd6b419924d2a68ebb251",
    "filename": "scripts/preprocess_openwebtext.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/JohnGiorgi-DeCLUTR/scripts/preprocess_openwebtext.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "scripts/preprocess_openwebtext.py:102:36 Unsupported operand [58]: `<` is not supported for operand types `int` and `Optional[int]`.",
    "message": " `<` is not supported for operand types `int` and `Optional[int]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 102,
    "warning_line": "                    if num_tokens < min_length:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n                # Retain documents if # of tokens is greater than the minimum specified length\n                if tokenizer is not None:\n                    num_tokens = len(tokenizer(text))\n                    if num_tokens < min_length:\n                        continue\n",
        "source_code_len": 273,
        "target_code": "\n                # Retain documents if the length of their shortest document is\n                # equal to or greater than the minimum specified length\n                if tokenizer is not None:\n                    num_tokens = len(tokenizer(text))\n                    if min_length and num_tokens < min_length:\n                        continue\n",
        "target_code_len": 344,
        "diff_format": "@@ -98,6 +98,7 @@\n \n-                # Retain documents if # of tokens is greater than the minimum specified length\n+                # Retain documents if the length of their shortest document is\n+                # equal to or greater than the minimum specified length\n                 if tokenizer is not None:\n                     num_tokens = len(tokenizer(text))\n-                    if num_tokens < min_length:\n+                    if min_length and num_tokens < min_length:\n                         continue\n",
        "source_code_with_indent": "\n                # Retain documents if # of tokens is greater than the minimum specified length\n                <DED>if tokenizer is not None:\n                    <IND>num_tokens = len(tokenizer(text))\n                    if num_tokens < min_length:\n                        <IND>continue\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n                # Retain documents if the length of their shortest document is\n                # equal to or greater than the minimum specified length\n                <DED>if tokenizer is not None:\n                    <IND>num_tokens = len(tokenizer(text))\n                    if min_length and num_tokens < min_length:\n                        <IND>continue\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "JohnGiorgi/DeCLUTR",
    "commit": "b771892621086b18d92cd6b419924d2a68ebb251",
    "filename": "scripts/preprocess_wikitext_103.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/JohnGiorgi-DeCLUTR/scripts/preprocess_wikitext_103.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "scripts/preprocess_wikitext_103.py:23:4 Incompatible variable type [9]: output_filepath is declared to have type `str` but is used as type `Path`.",
    "message": " output_filepath is declared to have type `str` but is used as type `Path`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 23,
    "warning_line": "    output_filepath = Path(output_filepath)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from pathlib import Path\nfrom typing import List, Optional\nfrom declutr.common.data_utils import sanitize\n\n",
        "source_code_len": 107,
        "target_code": "from pathlib import Path\nfrom typing import List, Optional, Union\n\n",
        "target_code_len": 67,
        "diff_format": "@@ -5,4 +5,3 @@\n from pathlib import Path\n-from typing import List, Optional\n-from declutr.common.data_utils import sanitize\n+from typing import List, Optional, Union\n \n",
        "source_code_with_indent": "from pathlib import Path\nfrom typing import List, Optional\nfrom declutr.common.data_utils import sanitize\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from pathlib import Path\nfrom typing import List, Optional, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import typer\n\n",
        "source_code_len": 14,
        "target_code": "import typer\nfrom declutr.common.data_utils import sanitize\n\n",
        "target_code_len": 61,
        "diff_format": "@@ -10,2 +9,3 @@\n import typer\n+from declutr.common.data_utils import sanitize\n \n",
        "source_code_with_indent": "import typer\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import typer\nfrom declutr.common.data_utils import sanitize\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _write_output_to_disk(text: List[str], output_filepath: str) -> None:\n    \"\"\"Writes a list of documents, `text`, to the file `output_filepath`, one document per line.\"\"\"\n",
        "source_code_len": 175,
        "target_code": "\ndef _write_output_to_disk(text: List[str], output_filepath: Union[str, Path]) -> None:\n    \"\"\"Writes a list of documents, `text`, to the file `output_filepath`, one document per line.\"\"\"\n",
        "target_code_len": 188,
        "diff_format": "@@ -19,3 +19,3 @@\n \n-def _write_output_to_disk(text: List[str], output_filepath: str) -> None:\n+def _write_output_to_disk(text: List[str], output_filepath: Union[str, Path]) -> None:\n     \"\"\"Writes a list of documents, `text`, to the file `output_filepath`, one document per line.\"\"\"\n",
        "source_code_with_indent": "\ndef _write_output_to_disk(text: List[str], output_filepath: str) -> None:\n    <IND>\"\"\"Writes a list of documents, `text`, to the file `output_filepath`, one document per line.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\ndef _write_output_to_disk(text: List[str], output_filepath: Union[str, Path]) -> None:\n    <IND>\"\"\"Writes a list of documents, `text`, to the file `output_filepath`, one document per line.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "JohnGiorgi/DeCLUTR",
    "commit": "b771892621086b18d92cd6b419924d2a68ebb251",
    "filename": "scripts/preprocess_wikitext_103.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/JohnGiorgi-DeCLUTR/scripts/preprocess_wikitext_103.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "scripts/preprocess_wikitext_103.py:105:36 Unsupported operand [58]: `<` is not supported for operand types `int` and `Optional[int]`.",
    "message": " `<` is not supported for operand types `int` and `Optional[int]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 105,
    "warning_line": "                    if num_tokens < min_length:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                    num_tokens = len(tokenizer(doc))\n                    if num_tokens < min_length:\n                        continue\n",
        "source_code_len": 134,
        "target_code": "                    num_tokens = len(tokenizer(doc))\n                    if min_length and num_tokens < min_length:\n                        continue\n",
        "target_code_len": 149,
        "diff_format": "@@ -104,3 +104,3 @@\n                     num_tokens = len(tokenizer(doc))\n-                    if num_tokens < min_length:\n+                    if min_length and num_tokens < min_length:\n                         continue\n",
        "source_code_with_indent": "                    <IND>num_tokens = len(tokenizer(doc))\n                    if num_tokens < min_length:\n                        <IND>continue\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                    <IND>num_tokens = len(tokenizer(doc))\n                    if min_length and num_tokens < min_length:\n                        <IND>continue\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "JohnGiorgi/DeCLUTR",
    "commit": "b771892621086b18d92cd6b419924d2a68ebb251",
    "filename": "scripts/run_senteval.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/JohnGiorgi-DeCLUTR/scripts/run_senteval.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "scripts/run_senteval.py:79:4 Incompatible return type [7]: Expected `List[Iterable[str]]` but got `List[Iterable[Union[bytes, str]]]`.",
    "message": " Expected `List[Iterable[str]]` but got `List[Iterable[Union[bytes, str]]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 79,
    "warning_line": "    return batch",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _cleanup_batch(batch: List[Iterable[Union[str, bytes]]]) -> List[Iterable[str]]:\n    batch = [\n",
        "source_code_len": 100,
        "target_code": "\ndef _cleanup_batch(batch: List[Iterable[Union[str, bytes]]]) -> List[Iterable[Union[str, bytes]]]:\n    batch = [\n",
        "target_code_len": 114,
        "diff_format": "@@ -68,3 +68,3 @@\n \n-def _cleanup_batch(batch: List[Iterable[Union[str, bytes]]]) -> List[Iterable[str]]:\n+def _cleanup_batch(batch: List[Iterable[Union[str, bytes]]]) -> List[Iterable[Union[str, bytes]]]:\n     batch = [\n",
        "source_code_with_indent": "\ndef _cleanup_batch(batch: List[Iterable[Union[str, bytes]]]) -> List[Iterable[str]]:\n    <IND>batch = [\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\ndef _cleanup_batch(batch: List[Iterable[Union[str, bytes]]]) -> List[Iterable[Union[str, bytes]]]:\n    <IND>batch = [\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "JohnGiorgi/DeCLUTR",
    "commit": "b771892621086b18d92cd6b419924d2a68ebb251",
    "filename": "scripts/run_senteval.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/JohnGiorgi-DeCLUTR/scripts/run_senteval.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "scripts/run_senteval.py:177:4 Incompatible return type [7]: Expected `Dict[str, Dict[str, float]]` but got `Dict[str, Union[Dict[typing.Any, typing.Any], Dict[str, int]]]`.",
    "message": " Expected `Dict[str, Dict[str, float]]` but got `Dict[str, Union[Dict[typing.Any, typing.Any], Dict[str, int]]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 177,
    "warning_line": "    return aggregate_scores",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from statistics import mean\nfrom typing import Callable, Iterable, List, Union, Dict\n\n",
        "source_code_len": 86,
        "target_code": "from statistics import mean\nfrom typing import Any, Callable, Dict, Iterable, List, Union\n\n",
        "target_code_len": 91,
        "diff_format": "@@ -8,3 +8,3 @@\n from statistics import mean\n-from typing import Callable, Iterable, List, Union, Dict\n+from typing import Any, Callable, Dict, Iterable, List, Union\n \n",
        "source_code_with_indent": "from statistics import mean\nfrom typing import Callable, Iterable, List, Union, Dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from statistics import mean\nfrom typing import Any, Callable, Dict, Iterable, List, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _compute_aggregate_scores(\n    results: Dict, ignore_tasks: List[str] = None\n) -> Dict[str, Dict[str, float]]:\n    \"\"\"Computes aggregate scores for the dev and test sets for the given SentEval `results`. Tasks\n",
        "source_code_len": 215,
        "target_code": "\ndef _compute_aggregate_scores(results: Dict, ignore_tasks: List[str] = None) -> Dict[str, Any]:\n    \"\"\"Computes aggregate scores for the dev and test sets for the given SentEval `results`. Tasks\n",
        "target_code_len": 196,
        "diff_format": "@@ -100,5 +100,3 @@\n \n-def _compute_aggregate_scores(\n-    results: Dict, ignore_tasks: List[str] = None\n-) -> Dict[str, Dict[str, float]]:\n+def _compute_aggregate_scores(results: Dict, ignore_tasks: List[str] = None) -> Dict[str, Any]:\n     \"\"\"Computes aggregate scores for the dev and test sets for the given SentEval `results`. Tasks\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED><DED><DED>def _compute_aggregate_scores(\n    results: Dict, ignore_tasks: List[str] = None\n) -> Dict[str, Dict[str, float]]:\n    <IND>",
        "target_code_with_indent": "\n<DED><DED><DED>def _compute_aggregate_scores(results: Dict, ignore_tasks: List[str] = None) -> Dict[str, Any]:\n    <IND>"
      }
    ]
  },
  {
    "project": "JohnGiorgi/DeCLUTR",
    "commit": "b771892621086b18d92cd6b419924d2a68ebb251",
    "filename": "scripts/run_senteval.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/JohnGiorgi-DeCLUTR/scripts/run_senteval.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "scripts/run_senteval.py:217:4 Incompatible return type [7]: Expected `None` but got `Dict[str, typing.Any]`.",
    "message": " Expected `None` but got `Dict[str, typing.Any]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 217,
    "warning_line": "    return params_senteval",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from statistics import mean\nfrom typing import Callable, Iterable, List, Union, Dict\n\n",
        "source_code_len": 86,
        "target_code": "from statistics import mean\nfrom typing import Any, Callable, Dict, Iterable, List, Union\n\n",
        "target_code_len": 91,
        "diff_format": "@@ -8,3 +8,3 @@\n from statistics import mean\n-from typing import Callable, Iterable, List, Union, Dict\n+from typing import Any, Callable, Dict, Iterable, List, Union\n \n",
        "source_code_with_indent": "from statistics import mean\nfrom typing import Callable, Iterable, List, Union, Dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from statistics import mean\nfrom typing import Any, Callable, Dict, Iterable, List, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    path_to_senteval: str, prototyping_config: bool = False, verbose: bool = False\n) -> None:\n    if verbose:\n",
        "source_code_len": 110,
        "target_code": "    path_to_senteval: str, prototyping_config: bool = False, verbose: bool = False\n) -> Dict[str, Any]:\n    if verbose:\n",
        "target_code_len": 120,
        "diff_format": "@@ -181,3 +179,3 @@\n     path_to_senteval: str, prototyping_config: bool = False, verbose: bool = False\n-) -> None:\n+) -> Dict[str, Any]:\n     if verbose:\n",
        "source_code_with_indent": "    path_to_senteval: str, prototyping_config: bool = False, verbose: bool = False\n) -> None:\n    <IND>if verbose:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    path_to_senteval: str, prototyping_config: bool = False, verbose: bool = False\n) -> Dict[str, Any]:\n    <IND>if verbose:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "JohnGiorgi/DeCLUTR",
    "commit": "b771892621086b18d92cd6b419924d2a68ebb251",
    "filename": "scripts/run_senteval.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/JohnGiorgi-DeCLUTR/scripts/run_senteval.py",
    "file_hunks_size": 6,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "scripts/run_senteval.py:242:8 Incompatible variable type [9]: output_filepath is declared to have type `str` but is used as type `Path`.",
    "message": " output_filepath is declared to have type `str` but is used as type `Path`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 242,
    "warning_line": "        output_filepath = Path(output_filepath)"
  },
  {
    "project": "JohnGiorgi/DeCLUTR",
    "commit": "b771892621086b18d92cd6b419924d2a68ebb251",
    "filename": "scripts/run_senteval.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/JohnGiorgi-DeCLUTR/scripts/run_senteval.py",
    "file_hunks_size": 6,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "scripts/run_senteval.py:650:4 Incompatible variable type [9]: output_filepath is declared to have type `str` but is used as type `None`.",
    "message": " output_filepath is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 650,
    "warning_line": "    output_filepath: str = None,"
  }
]