[
  {
    "project": "QCoDeS/Qcodes",
    "commit": "0447df203b82395551c2829a888fbfc59f2e0a66",
    "filename": "qcodes/station.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/QCoDeS-Qcodes/qcodes/station.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "qcodes/station.py:606:8 Incompatible return type [7]: Expected `Iterator[str]` but got `List[typing.Any]`.",
    "message": " Expected `Iterator[str]` but got `List[typing.Any]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 606,
    "warning_line": "        return list(res)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n    def instrument_names_from_module(module: ModuleType) -> Iterator[str]:\n        submodules = list(pkgutil.walk_packages(\n            module.__path__,\n            module.__name__ + '.'))\n",
        "source_code_len": 190,
        "target_code": "\n    def instrument_names_from_module(module: ModuleType) -> List[str]:\n        submodules = list(pkgutil.walk_packages(\n            module.__path__,  # type: ignore  # mypy issue #1422\n            module.__name__ + '.'))\n",
        "target_code_len": 222,
        "diff_format": "@@ -588,5 +588,5 @@\n \n-    def instrument_names_from_module(module: ModuleType) -> Iterator[str]:\n+    def instrument_names_from_module(module: ModuleType) -> List[str]:\n         submodules = list(pkgutil.walk_packages(\n-            module.__path__,\n+            module.__path__,  # type: ignore  # mypy issue #1422\n             module.__name__ + '.'))\n",
        "source_code_with_indent": "\n    def instrument_names_from_module(module: ModuleType) -> Iterator[str]:\n        <IND>submodules = list(pkgutil.walk_packages(\n            module.__path__,\n            module.__name__ + '.'))\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    def instrument_names_from_module(module: ModuleType) -> List[str]:\n        <IND>submodules = list(pkgutil.walk_packages(\n            module.__path__,  # type: ignore  # mypy issue #1422\n            module.__name__ + '.'))\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]