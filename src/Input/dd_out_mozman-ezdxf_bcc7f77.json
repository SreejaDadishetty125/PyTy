[
  {
    "project": "mozman/ezdxf",
    "commit": "bcc7f7751855ae1a186b5b129ce48091621b9b10",
    "filename": "src/ezdxf/addons/r12writer.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mozman-ezdxf/src/ezdxf/addons/r12writer.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/ezdxf/addons/r12writer.py:69:27 Incompatible parameter type [6]: Expected `Union[os.PathLike[bytes], os.PathLike[str], bytes, int, str]` for 1st positional only parameter to call `open` but got `Union[BinaryIO, TextIO, str]`.",
    "message": " Expected `Union[os.PathLike[bytes], os.PathLike[str], bytes, int, str]` for 1st positional only parameter to call `open` but got `Union[BinaryIO, TextIO, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 69,
    "warning_line": "            _stream = open(stream, \"wt\", encoding=\"cp1252\")",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from io import StringIO\nfrom ezdxf.lldxf.tagwriter import BinaryTagWriter\n",
        "source_code_len": 74,
        "target_code": "from io import StringIO\nfrom pathlib import Path\nfrom ezdxf.lldxf.tagwriter import BinaryTagWriter\n",
        "target_code_len": 99,
        "diff_format": "@@ -10,2 +20,3 @@\n from io import StringIO\n+from pathlib import Path\n from ezdxf.lldxf.tagwriter import BinaryTagWriter\n",
        "source_code_with_indent": "from io import StringIO\nfrom ezdxf.lldxf.tagwriter import BinaryTagWriter\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from io import StringIO\nfrom pathlib import Path\nfrom ezdxf.lldxf.tagwriter import BinaryTagWriter\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    \"\"\"\n    _stream = None\n    if fmt.startswith(\"asc\"):\n        if not hasattr(stream, \"write\"):\n            _stream = open(stream, \"wt\", encoding=\"cp1252\")\n",
        "source_code_len": 158,
        "target_code": "    \"\"\"\n    _stream: Union[TextIO, BinaryIO, None] = None\n\n    if fmt.startswith(\"asc\"):\n        if isinstance(stream, (str, Path)):\n            _stream = open(stream, \"wt\", encoding=\"cp1252\")\n",
        "target_code_len": 193,
        "diff_format": "@@ -65,5 +76,6 @@\n     \"\"\"\n-    _stream = None\n+    _stream: Union[TextIO, BinaryIO, None] = None\n+\n     if fmt.startswith(\"asc\"):\n-        if not hasattr(stream, \"write\"):\n+        if isinstance(stream, (str, Path)):\n             _stream = open(stream, \"wt\", encoding=\"cp1252\")\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    _stream = None\n    if fmt.startswith(\"asc\"):\n        <IND>if not hasattr(stream, \"write\"):\n            <IND>_stream = open(stream, \"wt\", encoding=\"cp1252\")\n",
        "target_code_with_indent": "\n    _stream: Union[TextIO, BinaryIO, None] = None\n\n    if fmt.startswith(\"asc\"):\n        <IND>if isinstance(stream, (str, Path)):\n            <IND>_stream = open(stream, \"wt\", encoding=\"cp1252\")\n"
      }
    ]
  },
  {
    "project": "mozman/ezdxf",
    "commit": "bcc7f7751855ae1a186b5b129ce48091621b9b10",
    "filename": "src/ezdxf/addons/r12writer.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mozman-ezdxf/src/ezdxf/addons/r12writer.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/ezdxf/addons/r12writer.py:73:12 Incompatible variable type [9]: stream is declared to have type `Union[BinaryIO, TextIO, str]` but is used as type `BinaryDXFWriter`.",
    "message": " stream is declared to have type `Union[BinaryIO, TextIO, str]` but is used as type `BinaryDXFWriter`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 73,
    "warning_line": "            stream = BinaryDXFWriter(stream)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "# ENTITIES section is present.\nfrom typing import TextIO, BinaryIO, Union, Sequence, Iterable, Tuple\nfrom contextlib import contextmanager\n",
        "source_code_len": 139,
        "target_code": "# ENTITIES section is present.\nfrom typing import (\n    TextIO,\n    BinaryIO,\n    Union,\n    Sequence,\n    Iterable,\n    Tuple,\n    cast,\n    Iterator,\n    Optional,\n)\nfrom contextlib import contextmanager\n",
        "target_code_len": 206,
        "diff_format": "@@ -6,3 +6,13 @@\n # ENTITIES section is present.\n-from typing import TextIO, BinaryIO, Union, Sequence, Iterable, Tuple\n+from typing import (\n+    TextIO,\n+    BinaryIO,\n+    Union,\n+    Sequence,\n+    Iterable,\n+    Tuple,\n+    cast,\n+    Iterator,\n+    Optional,\n+)\n from contextlib import contextmanager\n",
        "source_code_with_indent": "# ENTITIES section is present.\nfrom typing import TextIO, BinaryIO, Union, Sequence, Iterable, Tuple\nfrom contextlib import contextmanager\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "# ENTITIES section is present.\nfrom typing import (\n    TextIO,\n    BinaryIO,\n    Union,\n    Sequence,\n    Iterable,\n    Tuple,\n    cast,\n    Iterator,\n    Optional,\n)\nfrom contextlib import contextmanager\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from io import StringIO\nfrom ezdxf.lldxf.tagwriter import BinaryTagWriter\n",
        "source_code_len": 74,
        "target_code": "from io import StringIO\nfrom pathlib import Path\nfrom ezdxf.lldxf.tagwriter import BinaryTagWriter\n",
        "target_code_len": 99,
        "diff_format": "@@ -10,2 +20,3 @@\n from io import StringIO\n+from pathlib import Path\n from ezdxf.lldxf.tagwriter import BinaryTagWriter\n",
        "source_code_with_indent": "from io import StringIO\nfrom ezdxf.lldxf.tagwriter import BinaryTagWriter\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from io import StringIO\nfrom pathlib import Path\nfrom ezdxf.lldxf.tagwriter import BinaryTagWriter\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    elif fmt.startswith(\"bin\"):\n        if hasattr(stream, \"write\"):\n            stream = BinaryDXFWriter(stream)\n        else:\n            _stream = open(stream, \"wb\")\n            stream = BinaryDXFWriter(_stream)\n    else:\n        raise ValueError(f\"Unknown format '{fmt}'.\")\n\n    writer = R12FastStreamWriter(stream, fixed_tables)\n    try:\n",
        "source_code_len": 343,
        "target_code": "    elif fmt.startswith(\"bin\"):\n        if isinstance(stream, (str, Path)):\n            _stream = open(stream, \"wb\")\n            stream = cast(TextIO, BinaryDXFWriter(_stream))\n        else:\n            stream = cast(TextIO, BinaryDXFWriter(cast(BinaryIO, stream)))\n\n    else:\n        raise ValueError(f\"Unknown format '{fmt}'.\")\n    # TODO: Py38 replace TextIO by user defined Protocol\n    #  SupportsWrite(Protocol): def write(...)\n    writer = R12FastStreamWriter(cast(TextIO, stream), fixed_tables)\n    try:\n",
        "target_code_len": 512,
        "diff_format": "@@ -71,11 +83,13 @@\n     elif fmt.startswith(\"bin\"):\n-        if hasattr(stream, \"write\"):\n-            stream = BinaryDXFWriter(stream)\n+        if isinstance(stream, (str, Path)):\n+            _stream = open(stream, \"wb\")\n+            stream = cast(TextIO, BinaryDXFWriter(_stream))\n         else:\n-            _stream = open(stream, \"wb\")\n-            stream = BinaryDXFWriter(_stream)\n+            stream = cast(TextIO, BinaryDXFWriter(cast(BinaryIO, stream)))\n+\n     else:\n         raise ValueError(f\"Unknown format '{fmt}'.\")\n-\n-    writer = R12FastStreamWriter(stream, fixed_tables)\n+    # TODO: Py38 replace TextIO by user defined Protocol\n+    #  SupportsWrite(Protocol): def write(...)\n+    writer = R12FastStreamWriter(cast(TextIO, stream), fixed_tables)\n     try:\n",
        "source_code_with_indent": "    <DED><DED>elif fmt.startswith(\"bin\"):\n        <IND>if hasattr(stream, \"write\"):\n            <IND>stream = BinaryDXFWriter(stream)\n        <DED>else:\n            <IND>_stream = open(stream, \"wb\")\n            stream = BinaryDXFWriter(_stream)\n    <DED><DED>else:\n        <IND>raise ValueError(f\"Unknown format '{fmt}'.\")\n\n    <DED>writer = R12FastStreamWriter(stream, fixed_tables)\n    try:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED><DED>elif fmt.startswith(\"bin\"):\n        <IND>if isinstance(stream, (str, Path)):\n            <IND>_stream = open(stream, \"wb\")\n            stream = cast(TextIO, BinaryDXFWriter(_stream))\n        <DED>else:\n            <IND>stream = cast(TextIO, BinaryDXFWriter(cast(BinaryIO, stream)))\n\n    <DED><DED>else:\n        <IND>raise ValueError(f\"Unknown format '{fmt}'.\")\n    # TODO: Py38 replace TextIO by user defined Protocol\n    #  SupportsWrite(Protocol): def write(...)\n    <DED>writer = R12FastStreamWriter(cast(TextIO, stream), fixed_tables)\n    try:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "mozman/ezdxf",
    "commit": "bcc7f7751855ae1a186b5b129ce48091621b9b10",
    "filename": "src/ezdxf/addons/r12writer.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mozman-ezdxf/src/ezdxf/addons/r12writer.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/ezdxf/addons/r12writer.py:73:37 Incompatible parameter type [6]: Expected `BinaryIO` for 1st positional only parameter to call `BinaryDXFWriter.__init__` but got `Union[BinaryIO, TextIO, str]`.",
    "message": " Expected `BinaryIO` for 1st positional only parameter to call `BinaryDXFWriter.__init__` but got `Union[BinaryIO, TextIO, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 73,
    "warning_line": "            stream = BinaryDXFWriter(stream)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "# ENTITIES section is present.\nfrom typing import TextIO, BinaryIO, Union, Sequence, Iterable, Tuple\nfrom contextlib import contextmanager\n",
        "source_code_len": 139,
        "target_code": "# ENTITIES section is present.\nfrom typing import (\n    TextIO,\n    BinaryIO,\n    Union,\n    Sequence,\n    Iterable,\n    Tuple,\n    cast,\n    Iterator,\n    Optional,\n)\nfrom contextlib import contextmanager\n",
        "target_code_len": 206,
        "diff_format": "@@ -6,3 +6,13 @@\n # ENTITIES section is present.\n-from typing import TextIO, BinaryIO, Union, Sequence, Iterable, Tuple\n+from typing import (\n+    TextIO,\n+    BinaryIO,\n+    Union,\n+    Sequence,\n+    Iterable,\n+    Tuple,\n+    cast,\n+    Iterator,\n+    Optional,\n+)\n from contextlib import contextmanager\n",
        "source_code_with_indent": "# ENTITIES section is present.\nfrom typing import TextIO, BinaryIO, Union, Sequence, Iterable, Tuple\nfrom contextlib import contextmanager\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "# ENTITIES section is present.\nfrom typing import (\n    TextIO,\n    BinaryIO,\n    Union,\n    Sequence,\n    Iterable,\n    Tuple,\n    cast,\n    Iterator,\n    Optional,\n)\nfrom contextlib import contextmanager\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from io import StringIO\nfrom ezdxf.lldxf.tagwriter import BinaryTagWriter\n",
        "source_code_len": 74,
        "target_code": "from io import StringIO\nfrom pathlib import Path\nfrom ezdxf.lldxf.tagwriter import BinaryTagWriter\n",
        "target_code_len": 99,
        "diff_format": "@@ -10,2 +20,3 @@\n from io import StringIO\n+from pathlib import Path\n from ezdxf.lldxf.tagwriter import BinaryTagWriter\n",
        "source_code_with_indent": "from io import StringIO\nfrom ezdxf.lldxf.tagwriter import BinaryTagWriter\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from io import StringIO\nfrom pathlib import Path\nfrom ezdxf.lldxf.tagwriter import BinaryTagWriter\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    elif fmt.startswith(\"bin\"):\n        if hasattr(stream, \"write\"):\n            stream = BinaryDXFWriter(stream)\n        else:\n            _stream = open(stream, \"wb\")\n            stream = BinaryDXFWriter(_stream)\n    else:\n        raise ValueError(f\"Unknown format '{fmt}'.\")\n\n    writer = R12FastStreamWriter(stream, fixed_tables)\n    try:\n",
        "source_code_len": 343,
        "target_code": "    elif fmt.startswith(\"bin\"):\n        if isinstance(stream, (str, Path)):\n            _stream = open(stream, \"wb\")\n            stream = cast(TextIO, BinaryDXFWriter(_stream))\n        else:\n            stream = cast(TextIO, BinaryDXFWriter(cast(BinaryIO, stream)))\n\n    else:\n        raise ValueError(f\"Unknown format '{fmt}'.\")\n    # TODO: Py38 replace TextIO by user defined Protocol\n    #  SupportsWrite(Protocol): def write(...)\n    writer = R12FastStreamWriter(cast(TextIO, stream), fixed_tables)\n    try:\n",
        "target_code_len": 512,
        "diff_format": "@@ -71,11 +83,13 @@\n     elif fmt.startswith(\"bin\"):\n-        if hasattr(stream, \"write\"):\n-            stream = BinaryDXFWriter(stream)\n+        if isinstance(stream, (str, Path)):\n+            _stream = open(stream, \"wb\")\n+            stream = cast(TextIO, BinaryDXFWriter(_stream))\n         else:\n-            _stream = open(stream, \"wb\")\n-            stream = BinaryDXFWriter(_stream)\n+            stream = cast(TextIO, BinaryDXFWriter(cast(BinaryIO, stream)))\n+\n     else:\n         raise ValueError(f\"Unknown format '{fmt}'.\")\n-\n-    writer = R12FastStreamWriter(stream, fixed_tables)\n+    # TODO: Py38 replace TextIO by user defined Protocol\n+    #  SupportsWrite(Protocol): def write(...)\n+    writer = R12FastStreamWriter(cast(TextIO, stream), fixed_tables)\n     try:\n",
        "source_code_with_indent": "    <DED><DED>elif fmt.startswith(\"bin\"):\n        <IND>if hasattr(stream, \"write\"):\n            <IND>stream = BinaryDXFWriter(stream)\n        <DED>else:\n            <IND>_stream = open(stream, \"wb\")\n            stream = BinaryDXFWriter(_stream)\n    <DED><DED>else:\n        <IND>raise ValueError(f\"Unknown format '{fmt}'.\")\n\n    <DED>writer = R12FastStreamWriter(stream, fixed_tables)\n    try:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED><DED>elif fmt.startswith(\"bin\"):\n        <IND>if isinstance(stream, (str, Path)):\n            <IND>_stream = open(stream, \"wb\")\n            stream = cast(TextIO, BinaryDXFWriter(_stream))\n        <DED>else:\n            <IND>stream = cast(TextIO, BinaryDXFWriter(cast(BinaryIO, stream)))\n\n    <DED><DED>else:\n        <IND>raise ValueError(f\"Unknown format '{fmt}'.\")\n    # TODO: Py38 replace TextIO by user defined Protocol\n    #  SupportsWrite(Protocol): def write(...)\n    <DED>writer = R12FastStreamWriter(cast(TextIO, stream), fixed_tables)\n    try:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "mozman/ezdxf",
    "commit": "bcc7f7751855ae1a186b5b129ce48091621b9b10",
    "filename": "src/ezdxf/addons/r12writer.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mozman-ezdxf/src/ezdxf/addons/r12writer.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/ezdxf/addons/r12writer.py:75:27 Incompatible parameter type [6]: Expected `Union[os.PathLike[bytes], os.PathLike[str], bytes, int, str]` for 1st positional only parameter to call `open` but got `Union[BinaryIO, TextIO, str]`.",
    "message": " Expected `Union[os.PathLike[bytes], os.PathLike[str], bytes, int, str]` for 1st positional only parameter to call `open` but got `Union[BinaryIO, TextIO, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 75,
    "warning_line": "            _stream = open(stream, \"wb\")",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "# ENTITIES section is present.\nfrom typing import TextIO, BinaryIO, Union, Sequence, Iterable, Tuple\nfrom contextlib import contextmanager\n",
        "source_code_len": 139,
        "target_code": "# ENTITIES section is present.\nfrom typing import (\n    TextIO,\n    BinaryIO,\n    Union,\n    Sequence,\n    Iterable,\n    Tuple,\n    cast,\n    Iterator,\n    Optional,\n)\nfrom contextlib import contextmanager\n",
        "target_code_len": 206,
        "diff_format": "@@ -6,3 +6,13 @@\n # ENTITIES section is present.\n-from typing import TextIO, BinaryIO, Union, Sequence, Iterable, Tuple\n+from typing import (\n+    TextIO,\n+    BinaryIO,\n+    Union,\n+    Sequence,\n+    Iterable,\n+    Tuple,\n+    cast,\n+    Iterator,\n+    Optional,\n+)\n from contextlib import contextmanager\n",
        "source_code_with_indent": "# ENTITIES section is present.\nfrom typing import TextIO, BinaryIO, Union, Sequence, Iterable, Tuple\nfrom contextlib import contextmanager\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "# ENTITIES section is present.\nfrom typing import (\n    TextIO,\n    BinaryIO,\n    Union,\n    Sequence,\n    Iterable,\n    Tuple,\n    cast,\n    Iterator,\n    Optional,\n)\nfrom contextlib import contextmanager\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from io import StringIO\nfrom ezdxf.lldxf.tagwriter import BinaryTagWriter\n",
        "source_code_len": 74,
        "target_code": "from io import StringIO\nfrom pathlib import Path\nfrom ezdxf.lldxf.tagwriter import BinaryTagWriter\n",
        "target_code_len": 99,
        "diff_format": "@@ -10,2 +20,3 @@\n from io import StringIO\n+from pathlib import Path\n from ezdxf.lldxf.tagwriter import BinaryTagWriter\n",
        "source_code_with_indent": "from io import StringIO\nfrom ezdxf.lldxf.tagwriter import BinaryTagWriter\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from io import StringIO\nfrom pathlib import Path\nfrom ezdxf.lldxf.tagwriter import BinaryTagWriter\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    elif fmt.startswith(\"bin\"):\n        if hasattr(stream, \"write\"):\n            stream = BinaryDXFWriter(stream)\n        else:\n            _stream = open(stream, \"wb\")\n            stream = BinaryDXFWriter(_stream)\n    else:\n        raise ValueError(f\"Unknown format '{fmt}'.\")\n\n    writer = R12FastStreamWriter(stream, fixed_tables)\n    try:\n",
        "source_code_len": 343,
        "target_code": "    elif fmt.startswith(\"bin\"):\n        if isinstance(stream, (str, Path)):\n            _stream = open(stream, \"wb\")\n            stream = cast(TextIO, BinaryDXFWriter(_stream))\n        else:\n            stream = cast(TextIO, BinaryDXFWriter(cast(BinaryIO, stream)))\n\n    else:\n        raise ValueError(f\"Unknown format '{fmt}'.\")\n    # TODO: Py38 replace TextIO by user defined Protocol\n    #  SupportsWrite(Protocol): def write(...)\n    writer = R12FastStreamWriter(cast(TextIO, stream), fixed_tables)\n    try:\n",
        "target_code_len": 512,
        "diff_format": "@@ -71,11 +83,13 @@\n     elif fmt.startswith(\"bin\"):\n-        if hasattr(stream, \"write\"):\n-            stream = BinaryDXFWriter(stream)\n+        if isinstance(stream, (str, Path)):\n+            _stream = open(stream, \"wb\")\n+            stream = cast(TextIO, BinaryDXFWriter(_stream))\n         else:\n-            _stream = open(stream, \"wb\")\n-            stream = BinaryDXFWriter(_stream)\n+            stream = cast(TextIO, BinaryDXFWriter(cast(BinaryIO, stream)))\n+\n     else:\n         raise ValueError(f\"Unknown format '{fmt}'.\")\n-\n-    writer = R12FastStreamWriter(stream, fixed_tables)\n+    # TODO: Py38 replace TextIO by user defined Protocol\n+    #  SupportsWrite(Protocol): def write(...)\n+    writer = R12FastStreamWriter(cast(TextIO, stream), fixed_tables)\n     try:\n",
        "source_code_with_indent": "    <DED><DED>elif fmt.startswith(\"bin\"):\n        <IND>if hasattr(stream, \"write\"):\n            <IND>stream = BinaryDXFWriter(stream)\n        <DED>else:\n            <IND>_stream = open(stream, \"wb\")\n            stream = BinaryDXFWriter(_stream)\n    <DED><DED>else:\n        <IND>raise ValueError(f\"Unknown format '{fmt}'.\")\n\n    <DED>writer = R12FastStreamWriter(stream, fixed_tables)\n    try:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED><DED>elif fmt.startswith(\"bin\"):\n        <IND>if isinstance(stream, (str, Path)):\n            <IND>_stream = open(stream, \"wb\")\n            stream = cast(TextIO, BinaryDXFWriter(_stream))\n        <DED>else:\n            <IND>stream = cast(TextIO, BinaryDXFWriter(cast(BinaryIO, stream)))\n\n    <DED><DED>else:\n        <IND>raise ValueError(f\"Unknown format '{fmt}'.\")\n    # TODO: Py38 replace TextIO by user defined Protocol\n    #  SupportsWrite(Protocol): def write(...)\n    <DED>writer = R12FastStreamWriter(cast(TextIO, stream), fixed_tables)\n    try:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "mozman/ezdxf",
    "commit": "bcc7f7751855ae1a186b5b129ce48091621b9b10",
    "filename": "src/ezdxf/addons/r12writer.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mozman-ezdxf/src/ezdxf/addons/r12writer.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/ezdxf/addons/r12writer.py:76:12 Incompatible variable type [9]: stream is declared to have type `Union[BinaryIO, TextIO, str]` but is used as type `BinaryDXFWriter`.",
    "message": " stream is declared to have type `Union[BinaryIO, TextIO, str]` but is used as type `BinaryDXFWriter`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 76,
    "warning_line": "            stream = BinaryDXFWriter(_stream)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "# ENTITIES section is present.\nfrom typing import TextIO, BinaryIO, Union, Sequence, Iterable, Tuple\nfrom contextlib import contextmanager\n",
        "source_code_len": 139,
        "target_code": "# ENTITIES section is present.\nfrom typing import (\n    TextIO,\n    BinaryIO,\n    Union,\n    Sequence,\n    Iterable,\n    Tuple,\n    cast,\n    Iterator,\n    Optional,\n)\nfrom contextlib import contextmanager\n",
        "target_code_len": 206,
        "diff_format": "@@ -6,3 +6,13 @@\n # ENTITIES section is present.\n-from typing import TextIO, BinaryIO, Union, Sequence, Iterable, Tuple\n+from typing import (\n+    TextIO,\n+    BinaryIO,\n+    Union,\n+    Sequence,\n+    Iterable,\n+    Tuple,\n+    cast,\n+    Iterator,\n+    Optional,\n+)\n from contextlib import contextmanager\n",
        "source_code_with_indent": "# ENTITIES section is present.\nfrom typing import TextIO, BinaryIO, Union, Sequence, Iterable, Tuple\nfrom contextlib import contextmanager\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "# ENTITIES section is present.\nfrom typing import (\n    TextIO,\n    BinaryIO,\n    Union,\n    Sequence,\n    Iterable,\n    Tuple,\n    cast,\n    Iterator,\n    Optional,\n)\nfrom contextlib import contextmanager\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from io import StringIO\nfrom ezdxf.lldxf.tagwriter import BinaryTagWriter\n",
        "source_code_len": 74,
        "target_code": "from io import StringIO\nfrom pathlib import Path\nfrom ezdxf.lldxf.tagwriter import BinaryTagWriter\n",
        "target_code_len": 99,
        "diff_format": "@@ -10,2 +20,3 @@\n from io import StringIO\n+from pathlib import Path\n from ezdxf.lldxf.tagwriter import BinaryTagWriter\n",
        "source_code_with_indent": "from io import StringIO\nfrom ezdxf.lldxf.tagwriter import BinaryTagWriter\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from io import StringIO\nfrom pathlib import Path\nfrom ezdxf.lldxf.tagwriter import BinaryTagWriter\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    elif fmt.startswith(\"bin\"):\n        if hasattr(stream, \"write\"):\n            stream = BinaryDXFWriter(stream)\n        else:\n            _stream = open(stream, \"wb\")\n            stream = BinaryDXFWriter(_stream)\n    else:\n        raise ValueError(f\"Unknown format '{fmt}'.\")\n\n    writer = R12FastStreamWriter(stream, fixed_tables)\n    try:\n",
        "source_code_len": 343,
        "target_code": "    elif fmt.startswith(\"bin\"):\n        if isinstance(stream, (str, Path)):\n            _stream = open(stream, \"wb\")\n            stream = cast(TextIO, BinaryDXFWriter(_stream))\n        else:\n            stream = cast(TextIO, BinaryDXFWriter(cast(BinaryIO, stream)))\n\n    else:\n        raise ValueError(f\"Unknown format '{fmt}'.\")\n    # TODO: Py38 replace TextIO by user defined Protocol\n    #  SupportsWrite(Protocol): def write(...)\n    writer = R12FastStreamWriter(cast(TextIO, stream), fixed_tables)\n    try:\n",
        "target_code_len": 512,
        "diff_format": "@@ -71,11 +83,13 @@\n     elif fmt.startswith(\"bin\"):\n-        if hasattr(stream, \"write\"):\n-            stream = BinaryDXFWriter(stream)\n+        if isinstance(stream, (str, Path)):\n+            _stream = open(stream, \"wb\")\n+            stream = cast(TextIO, BinaryDXFWriter(_stream))\n         else:\n-            _stream = open(stream, \"wb\")\n-            stream = BinaryDXFWriter(_stream)\n+            stream = cast(TextIO, BinaryDXFWriter(cast(BinaryIO, stream)))\n+\n     else:\n         raise ValueError(f\"Unknown format '{fmt}'.\")\n-\n-    writer = R12FastStreamWriter(stream, fixed_tables)\n+    # TODO: Py38 replace TextIO by user defined Protocol\n+    #  SupportsWrite(Protocol): def write(...)\n+    writer = R12FastStreamWriter(cast(TextIO, stream), fixed_tables)\n     try:\n",
        "source_code_with_indent": "    <DED><DED>elif fmt.startswith(\"bin\"):\n        <IND>if hasattr(stream, \"write\"):\n            <IND>stream = BinaryDXFWriter(stream)\n        <DED>else:\n            <IND>_stream = open(stream, \"wb\")\n            stream = BinaryDXFWriter(_stream)\n    <DED><DED>else:\n        <IND>raise ValueError(f\"Unknown format '{fmt}'.\")\n\n    <DED>writer = R12FastStreamWriter(stream, fixed_tables)\n    try:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED><DED>elif fmt.startswith(\"bin\"):\n        <IND>if isinstance(stream, (str, Path)):\n            <IND>_stream = open(stream, \"wb\")\n            stream = cast(TextIO, BinaryDXFWriter(_stream))\n        <DED>else:\n            <IND>stream = cast(TextIO, BinaryDXFWriter(cast(BinaryIO, stream)))\n\n    <DED><DED>else:\n        <IND>raise ValueError(f\"Unknown format '{fmt}'.\")\n    # TODO: Py38 replace TextIO by user defined Protocol\n    #  SupportsWrite(Protocol): def write(...)\n    <DED>writer = R12FastStreamWriter(cast(TextIO, stream), fixed_tables)\n    try:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "mozman/ezdxf",
    "commit": "bcc7f7751855ae1a186b5b129ce48091621b9b10",
    "filename": "src/ezdxf/addons/r12writer.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mozman-ezdxf/src/ezdxf/addons/r12writer.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/ezdxf/addons/r12writer.py:82:8 Incompatible return type [7]: Expected `R12FastStreamWriter` but got `typing.Generator[R12FastStreamWriter, None, None]`.",
    "message": " Expected `R12FastStreamWriter` but got `typing.Generator[R12FastStreamWriter, None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 82,
    "warning_line": "        yield writer",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "# ENTITIES section is present.\nfrom typing import TextIO, BinaryIO, Union, Sequence, Iterable, Tuple\nfrom contextlib import contextmanager\n",
        "source_code_len": 139,
        "target_code": "# ENTITIES section is present.\nfrom typing import (\n    TextIO,\n    BinaryIO,\n    Union,\n    Sequence,\n    Iterable,\n    Tuple,\n    cast,\n    Iterator,\n    Optional,\n)\nfrom contextlib import contextmanager\n",
        "target_code_len": 206,
        "diff_format": "@@ -6,3 +6,13 @@\n # ENTITIES section is present.\n-from typing import TextIO, BinaryIO, Union, Sequence, Iterable, Tuple\n+from typing import (\n+    TextIO,\n+    BinaryIO,\n+    Union,\n+    Sequence,\n+    Iterable,\n+    Tuple,\n+    cast,\n+    Iterator,\n+    Optional,\n+)\n from contextlib import contextmanager\n",
        "source_code_with_indent": "# ENTITIES section is present.\nfrom typing import TextIO, BinaryIO, Union, Sequence, Iterable, Tuple\nfrom contextlib import contextmanager\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "# ENTITIES section is present.\nfrom typing import (\n    TextIO,\n    BinaryIO,\n    Union,\n    Sequence,\n    Iterable,\n    Tuple,\n    cast,\n    Iterator,\n    Optional,\n)\nfrom contextlib import contextmanager\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from io import StringIO\nfrom ezdxf.lldxf.tagwriter import BinaryTagWriter\n",
        "source_code_len": 74,
        "target_code": "from io import StringIO\nfrom pathlib import Path\nfrom ezdxf.lldxf.tagwriter import BinaryTagWriter\n",
        "target_code_len": 99,
        "diff_format": "@@ -10,2 +20,3 @@\n from io import StringIO\n+from pathlib import Path\n from ezdxf.lldxf.tagwriter import BinaryTagWriter\n",
        "source_code_with_indent": "from io import StringIO\nfrom ezdxf.lldxf.tagwriter import BinaryTagWriter\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from io import StringIO\nfrom pathlib import Path\nfrom ezdxf.lldxf.tagwriter import BinaryTagWriter\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def r12writer(\n    stream: Union[TextIO, BinaryIO, str],\n    fixed_tables: bool = False,\n    fmt: str = \"asc\",\n) -> \"R12FastStreamWriter\":\n    \"\"\"Context manager for writing DXF entities to a stream/file. `stream` can\n",
        "source_code_len": 218,
        "target_code": "def r12writer(\n    stream: Union[TextIO, BinaryIO, str, Path],\n    fixed_tables: bool = False,\n    fmt: str = \"asc\",\n) -> Iterator[\"R12FastStreamWriter\"]:\n    \"\"\"Context manager for writing DXF entities to a stream/file. `stream` can\n",
        "target_code_len": 234,
        "diff_format": "@@ -50,6 +61,6 @@\n def r12writer(\n-    stream: Union[TextIO, BinaryIO, str],\n+    stream: Union[TextIO, BinaryIO, str, Path],\n     fixed_tables: bool = False,\n     fmt: str = \"asc\",\n-) -> \"R12FastStreamWriter\":\n+) -> Iterator[\"R12FastStreamWriter\"]:\n     \"\"\"Context manager for writing DXF entities to a stream/file. `stream` can\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "def r12writer(\n    stream: Union[TextIO, BinaryIO, str],\n    fixed_tables: bool = False,\n    fmt: str = \"asc\",\n) -> \"R12FastStreamWriter\":\n    <IND>",
        "target_code_with_indent": "def r12writer(\n    stream: Union[TextIO, BinaryIO, str, Path],\n    fixed_tables: bool = False,\n    fmt: str = \"asc\",\n) -> Iterator[\"R12FastStreamWriter\"]:\n    <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    \"\"\"\n    _stream = None\n    if fmt.startswith(\"asc\"):\n        if not hasattr(stream, \"write\"):\n            _stream = open(stream, \"wt\", encoding=\"cp1252\")\n",
        "source_code_len": 158,
        "target_code": "    \"\"\"\n    _stream: Union[TextIO, BinaryIO, None] = None\n\n    if fmt.startswith(\"asc\"):\n        if isinstance(stream, (str, Path)):\n            _stream = open(stream, \"wt\", encoding=\"cp1252\")\n",
        "target_code_len": 193,
        "diff_format": "@@ -65,5 +76,6 @@\n     \"\"\"\n-    _stream = None\n+    _stream: Union[TextIO, BinaryIO, None] = None\n+\n     if fmt.startswith(\"asc\"):\n-        if not hasattr(stream, \"write\"):\n+        if isinstance(stream, (str, Path)):\n             _stream = open(stream, \"wt\", encoding=\"cp1252\")\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    _stream = None\n    if fmt.startswith(\"asc\"):\n        <IND>if not hasattr(stream, \"write\"):\n            <IND>_stream = open(stream, \"wt\", encoding=\"cp1252\")\n",
        "target_code_with_indent": "\n    _stream: Union[TextIO, BinaryIO, None] = None\n\n    if fmt.startswith(\"asc\"):\n        <IND>if isinstance(stream, (str, Path)):\n            <IND>_stream = open(stream, \"wt\", encoding=\"cp1252\")\n"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    elif fmt.startswith(\"bin\"):\n        if hasattr(stream, \"write\"):\n            stream = BinaryDXFWriter(stream)\n        else:\n            _stream = open(stream, \"wb\")\n            stream = BinaryDXFWriter(_stream)\n    else:\n        raise ValueError(f\"Unknown format '{fmt}'.\")\n\n    writer = R12FastStreamWriter(stream, fixed_tables)\n    try:\n",
        "source_code_len": 343,
        "target_code": "    elif fmt.startswith(\"bin\"):\n        if isinstance(stream, (str, Path)):\n            _stream = open(stream, \"wb\")\n            stream = cast(TextIO, BinaryDXFWriter(_stream))\n        else:\n            stream = cast(TextIO, BinaryDXFWriter(cast(BinaryIO, stream)))\n\n    else:\n        raise ValueError(f\"Unknown format '{fmt}'.\")\n    # TODO: Py38 replace TextIO by user defined Protocol\n    #  SupportsWrite(Protocol): def write(...)\n    writer = R12FastStreamWriter(cast(TextIO, stream), fixed_tables)\n    try:\n",
        "target_code_len": 512,
        "diff_format": "@@ -71,11 +83,13 @@\n     elif fmt.startswith(\"bin\"):\n-        if hasattr(stream, \"write\"):\n-            stream = BinaryDXFWriter(stream)\n+        if isinstance(stream, (str, Path)):\n+            _stream = open(stream, \"wb\")\n+            stream = cast(TextIO, BinaryDXFWriter(_stream))\n         else:\n-            _stream = open(stream, \"wb\")\n-            stream = BinaryDXFWriter(_stream)\n+            stream = cast(TextIO, BinaryDXFWriter(cast(BinaryIO, stream)))\n+\n     else:\n         raise ValueError(f\"Unknown format '{fmt}'.\")\n-\n-    writer = R12FastStreamWriter(stream, fixed_tables)\n+    # TODO: Py38 replace TextIO by user defined Protocol\n+    #  SupportsWrite(Protocol): def write(...)\n+    writer = R12FastStreamWriter(cast(TextIO, stream), fixed_tables)\n     try:\n",
        "source_code_with_indent": "    <DED><DED>elif fmt.startswith(\"bin\"):\n        <IND>if hasattr(stream, \"write\"):\n            <IND>stream = BinaryDXFWriter(stream)\n        <DED>else:\n            <IND>_stream = open(stream, \"wb\")\n            stream = BinaryDXFWriter(_stream)\n    <DED><DED>else:\n        <IND>raise ValueError(f\"Unknown format '{fmt}'.\")\n\n    <DED>writer = R12FastStreamWriter(stream, fixed_tables)\n    try:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED><DED>elif fmt.startswith(\"bin\"):\n        <IND>if isinstance(stream, (str, Path)):\n            <IND>_stream = open(stream, \"wb\")\n            stream = cast(TextIO, BinaryDXFWriter(_stream))\n        <DED>else:\n            <IND>stream = cast(TextIO, BinaryDXFWriter(cast(BinaryIO, stream)))\n\n    <DED><DED>else:\n        <IND>raise ValueError(f\"Unknown format '{fmt}'.\")\n    # TODO: Py38 replace TextIO by user defined Protocol\n    #  SupportsWrite(Protocol): def write(...)\n    <DED>writer = R12FastStreamWriter(cast(TextIO, stream), fixed_tables)\n    try:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "mozman/ezdxf",
    "commit": "bcc7f7751855ae1a186b5b129ce48091621b9b10",
    "filename": "src/ezdxf/addons/r12writer.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mozman-ezdxf/src/ezdxf/addons/r12writer.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/ezdxf/addons/r12writer.py:100:31 Invalid type [31]: Expression `[typing.TextIO, src.ezdxf.addons.r12writer.BinaryDXFWriter]` is not a valid type.",
    "message": " Expression `[typing.TextIO, src.ezdxf.addons.r12writer.BinaryDXFWriter]` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 100,
    "warning_line": "    def __init__(self, stream: [TextIO, BinaryDXFWriter], fixed_tables=False):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "# ENTITIES section is present.\nfrom typing import TextIO, BinaryIO, Union, Sequence, Iterable, Tuple\nfrom contextlib import contextmanager\n",
        "source_code_len": 139,
        "target_code": "# ENTITIES section is present.\nfrom typing import (\n    TextIO,\n    BinaryIO,\n    Union,\n    Sequence,\n    Iterable,\n    Tuple,\n    cast,\n    Iterator,\n    Optional,\n)\nfrom contextlib import contextmanager\n",
        "target_code_len": 206,
        "diff_format": "@@ -6,3 +6,13 @@\n # ENTITIES section is present.\n-from typing import TextIO, BinaryIO, Union, Sequence, Iterable, Tuple\n+from typing import (\n+    TextIO,\n+    BinaryIO,\n+    Union,\n+    Sequence,\n+    Iterable,\n+    Tuple,\n+    cast,\n+    Iterator,\n+    Optional,\n+)\n from contextlib import contextmanager\n",
        "source_code_with_indent": "# ENTITIES section is present.\nfrom typing import TextIO, BinaryIO, Union, Sequence, Iterable, Tuple\nfrom contextlib import contextmanager\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "# ENTITIES section is present.\nfrom typing import (\n    TextIO,\n    BinaryIO,\n    Union,\n    Sequence,\n    Iterable,\n    Tuple,\n    cast,\n    Iterator,\n    Optional,\n)\nfrom contextlib import contextmanager\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from io import StringIO\nfrom ezdxf.lldxf.tagwriter import BinaryTagWriter\n",
        "source_code_len": 74,
        "target_code": "from io import StringIO\nfrom pathlib import Path\nfrom ezdxf.lldxf.tagwriter import BinaryTagWriter\n",
        "target_code_len": 99,
        "diff_format": "@@ -10,2 +20,3 @@\n from io import StringIO\n+from pathlib import Path\n from ezdxf.lldxf.tagwriter import BinaryTagWriter\n",
        "source_code_with_indent": "from io import StringIO\nfrom ezdxf.lldxf.tagwriter import BinaryTagWriter\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from io import StringIO\nfrom pathlib import Path\nfrom ezdxf.lldxf.tagwriter import BinaryTagWriter\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    elif fmt.startswith(\"bin\"):\n        if hasattr(stream, \"write\"):\n            stream = BinaryDXFWriter(stream)\n        else:\n            _stream = open(stream, \"wb\")\n            stream = BinaryDXFWriter(_stream)\n    else:\n        raise ValueError(f\"Unknown format '{fmt}'.\")\n\n    writer = R12FastStreamWriter(stream, fixed_tables)\n    try:\n",
        "source_code_len": 343,
        "target_code": "    elif fmt.startswith(\"bin\"):\n        if isinstance(stream, (str, Path)):\n            _stream = open(stream, \"wb\")\n            stream = cast(TextIO, BinaryDXFWriter(_stream))\n        else:\n            stream = cast(TextIO, BinaryDXFWriter(cast(BinaryIO, stream)))\n\n    else:\n        raise ValueError(f\"Unknown format '{fmt}'.\")\n    # TODO: Py38 replace TextIO by user defined Protocol\n    #  SupportsWrite(Protocol): def write(...)\n    writer = R12FastStreamWriter(cast(TextIO, stream), fixed_tables)\n    try:\n",
        "target_code_len": 512,
        "diff_format": "@@ -71,11 +83,13 @@\n     elif fmt.startswith(\"bin\"):\n-        if hasattr(stream, \"write\"):\n-            stream = BinaryDXFWriter(stream)\n+        if isinstance(stream, (str, Path)):\n+            _stream = open(stream, \"wb\")\n+            stream = cast(TextIO, BinaryDXFWriter(_stream))\n         else:\n-            _stream = open(stream, \"wb\")\n-            stream = BinaryDXFWriter(_stream)\n+            stream = cast(TextIO, BinaryDXFWriter(cast(BinaryIO, stream)))\n+\n     else:\n         raise ValueError(f\"Unknown format '{fmt}'.\")\n-\n-    writer = R12FastStreamWriter(stream, fixed_tables)\n+    # TODO: Py38 replace TextIO by user defined Protocol\n+    #  SupportsWrite(Protocol): def write(...)\n+    writer = R12FastStreamWriter(cast(TextIO, stream), fixed_tables)\n     try:\n",
        "source_code_with_indent": "    <DED><DED>elif fmt.startswith(\"bin\"):\n        <IND>if hasattr(stream, \"write\"):\n            <IND>stream = BinaryDXFWriter(stream)\n        <DED>else:\n            <IND>_stream = open(stream, \"wb\")\n            stream = BinaryDXFWriter(_stream)\n    <DED><DED>else:\n        <IND>raise ValueError(f\"Unknown format '{fmt}'.\")\n\n    <DED>writer = R12FastStreamWriter(stream, fixed_tables)\n    try:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED><DED>elif fmt.startswith(\"bin\"):\n        <IND>if isinstance(stream, (str, Path)):\n            <IND>_stream = open(stream, \"wb\")\n            stream = cast(TextIO, BinaryDXFWriter(_stream))\n        <DED>else:\n            <IND>stream = cast(TextIO, BinaryDXFWriter(cast(BinaryIO, stream)))\n\n    <DED><DED>else:\n        <IND>raise ValueError(f\"Unknown format '{fmt}'.\")\n    # TODO: Py38 replace TextIO by user defined Protocol\n    #  SupportsWrite(Protocol): def write(...)\n    <DED>writer = R12FastStreamWriter(cast(TextIO, stream), fixed_tables)\n    try:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __init__(self, stream: [TextIO, BinaryDXFWriter], fixed_tables=False):\n        self.stream = stream\n",
        "source_code_len": 109,
        "target_code": "\n    def __init__(self, stream: Union[TextIO], fixed_tables=False):\n        self.stream = stream\n",
        "target_code_len": 97,
        "diff_format": "@@ -99,3 +113,3 @@\n \n-    def __init__(self, stream: [TextIO, BinaryDXFWriter], fixed_tables=False):\n+    def __init__(self, stream: Union[TextIO], fixed_tables=False):\n         self.stream = stream\n",
        "source_code_with_indent": "\n    def __init__(self, stream: [TextIO, BinaryDXFWriter], fixed_tables=False):\n        <IND>self.stream = stream\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    def __init__(self, stream: Union[TextIO], fixed_tables=False):\n        <IND>self.stream = stream\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]