[
  {
    "project": "common-workflow-language/cwltool",
    "commit": "189a496366d46754f96c7aefa0db7f3e26bd5453",
    "filename": "tests/test_examples.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/common-workflow-language-cwltool/tests/test_examples.py",
    "file_hunks_size": 39,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/test_examples.py:168:12 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `expr.interpolate` but got `Union[None, typing.MutableMapping[str, Union[None, typing.MutableMapping[str, Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], typing.MutableSequence[Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], bool, float, int, str]], typing.MutableSequence[Union[None, typing.MutableMapping[str, Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], typing.MutableSequence[Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], bool, float, int, str]], bool, float, int, str]`.",
    "message": " Expected `str` for 1st positional only parameter to call `expr.interpolate` but got `Union[None, typing.MutableMapping[str, Union[None, typing.MutableMapping[str, Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], typing.MutableSequence[Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], bool, float, int, str]], typing.MutableSequence[Union[None, typing.MutableMapping[str, Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], typing.MutableSequence[Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], bool, float, int, str]], bool, float, int, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 168,
    "warning_line": "            expr.interpolate(pattern, {}, convert_to_expression=True),",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n@pytest.mark.parametrize(\"pattern,expected\", parameter_to_expressions)  # type: ignore\ndef test_parameter_to_expression(pattern: str, expected: Any) -> None:\n    \"\"\"Test the interpolate convert_to_expression feature.\"\"\"\n    assert (\n        expr.interpolate(\n            expr.interpolate(pattern, {}, convert_to_expression=True),\n            None,\n            jslib=expr.jshead([], interpolate_input),\n",
        "source_code_len": 403,
        "target_code": "\n@pytest.mark.parametrize(\"pattern,expected\", parameter_to_expressions)\ndef test_parameter_to_expression(pattern: str, expected: Any) -> None:\n    \"\"\"Test the interpolate convert_to_expression feature.\"\"\"\n    expression = expr.interpolate(pattern, {}, convert_to_expression=True)\n    assert isinstance(expression, str)\n    assert (\n        expr.interpolate(\n            expression,\n            {},\n            jslib=expr.jshead([], interpolate_input),\n",
        "target_code_len": 452,
        "diff_format": "@@ -162,9 +162,11 @@\n \n-@pytest.mark.parametrize(\"pattern,expected\", parameter_to_expressions)  # type: ignore\n+@pytest.mark.parametrize(\"pattern,expected\", parameter_to_expressions)\n def test_parameter_to_expression(pattern: str, expected: Any) -> None:\n     \"\"\"Test the interpolate convert_to_expression feature.\"\"\"\n+    expression = expr.interpolate(pattern, {}, convert_to_expression=True)\n+    assert isinstance(expression, str)\n     assert (\n         expr.interpolate(\n-            expr.interpolate(pattern, {}, convert_to_expression=True),\n-            None,\n+            expression,\n+            {},\n             jslib=expr.jshead([], interpolate_input),\n",
        "source_code_with_indent": "\n@pytest.mark.parametrize(\"pattern,expected\", parameter_to_expressions)  # type: ignore\ndef test_parameter_to_expression(pattern: str, expected: Any) -> None:\n    <IND>\"\"\"Test the interpolate convert_to_expression feature.\"\"\"\n    assert (\n        expr.interpolate(\n            expr.interpolate(pattern, {}, convert_to_expression=True),\n            None,\n            jslib=expr.jshead([], interpolate_input),\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n@pytest.mark.parametrize(\"pattern,expected\", parameter_to_expressions)\ndef test_parameter_to_expression(pattern: str, expected: Any) -> None:\n    <IND>\"\"\"Test the interpolate convert_to_expression feature.\"\"\"\n    expression = expr.interpolate(pattern, {}, convert_to_expression=True)\n    assert isinstance(expression, str)\n    assert (\n        expr.interpolate(\n            expression,\n            {},\n            jslib=expr.jshead([], interpolate_input),\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "common-workflow-language/cwltool",
    "commit": "189a496366d46754f96c7aefa0db7f3e26bd5453",
    "filename": "tests/test_examples.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/common-workflow-language-cwltool/tests/test_examples.py",
    "file_hunks_size": 39,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/test_examples.py:169:12 Incompatible parameter type [6]: Expected `typing.MutableMapping[str, Union[None, typing.MutableMapping[str, Union[None, typing.MutableMapping[str, Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], typing.MutableSequence[Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], bool, float, int, str]], typing.MutableSequence[Union[None, typing.MutableMapping[str, Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], typing.MutableSequence[Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], bool, float, int, str]], bool, float, int, str]]` for 2nd positional only parameter to call `expr.interpolate` but got `None`.",
    "message": " Expected `typing.MutableMapping[str, Union[None, typing.MutableMapping[str, Union[None, typing.MutableMapping[str, Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], typing.MutableSequence[Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], bool, float, int, str]], typing.MutableSequence[Union[None, typing.MutableMapping[str, Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], typing.MutableSequence[Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], bool, float, int, str]], bool, float, int, str]]` for 2nd positional only parameter to call `expr.interpolate` but got `None`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 169,
    "warning_line": "            None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n@pytest.mark.parametrize(\"pattern,expected\", parameter_to_expressions)  # type: ignore\ndef test_parameter_to_expression(pattern: str, expected: Any) -> None:\n    \"\"\"Test the interpolate convert_to_expression feature.\"\"\"\n    assert (\n        expr.interpolate(\n            expr.interpolate(pattern, {}, convert_to_expression=True),\n            None,\n            jslib=expr.jshead([], interpolate_input),\n",
        "source_code_len": 403,
        "target_code": "\n@pytest.mark.parametrize(\"pattern,expected\", parameter_to_expressions)\ndef test_parameter_to_expression(pattern: str, expected: Any) -> None:\n    \"\"\"Test the interpolate convert_to_expression feature.\"\"\"\n    expression = expr.interpolate(pattern, {}, convert_to_expression=True)\n    assert isinstance(expression, str)\n    assert (\n        expr.interpolate(\n            expression,\n            {},\n            jslib=expr.jshead([], interpolate_input),\n",
        "target_code_len": 452,
        "diff_format": "@@ -162,9 +162,11 @@\n \n-@pytest.mark.parametrize(\"pattern,expected\", parameter_to_expressions)  # type: ignore\n+@pytest.mark.parametrize(\"pattern,expected\", parameter_to_expressions)\n def test_parameter_to_expression(pattern: str, expected: Any) -> None:\n     \"\"\"Test the interpolate convert_to_expression feature.\"\"\"\n+    expression = expr.interpolate(pattern, {}, convert_to_expression=True)\n+    assert isinstance(expression, str)\n     assert (\n         expr.interpolate(\n-            expr.interpolate(pattern, {}, convert_to_expression=True),\n-            None,\n+            expression,\n+            {},\n             jslib=expr.jshead([], interpolate_input),\n",
        "source_code_with_indent": "\n@pytest.mark.parametrize(\"pattern,expected\", parameter_to_expressions)  # type: ignore\ndef test_parameter_to_expression(pattern: str, expected: Any) -> None:\n    <IND>\"\"\"Test the interpolate convert_to_expression feature.\"\"\"\n    assert (\n        expr.interpolate(\n            expr.interpolate(pattern, {}, convert_to_expression=True),\n            None,\n            jslib=expr.jshead([], interpolate_input),\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n@pytest.mark.parametrize(\"pattern,expected\", parameter_to_expressions)\ndef test_parameter_to_expression(pattern: str, expected: Any) -> None:\n    <IND>\"\"\"Test the interpolate convert_to_expression feature.\"\"\"\n    expression = expr.interpolate(pattern, {}, convert_to_expression=True)\n    assert isinstance(expression, str)\n    assert (\n        expr.interpolate(\n            expression,\n            {},\n            jslib=expr.jshead([], interpolate_input),\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "common-workflow-language/cwltool",
    "commit": "189a496366d46754f96c7aefa0db7f3e26bd5453",
    "filename": "tests/test_examples.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/common-workflow-language-cwltool/tests/test_examples.py",
    "file_hunks_size": 39,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/test_examples.py:209:12 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `expr.interpolate` but got `Union[None, typing.MutableMapping[str, Union[None, typing.MutableMapping[str, Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], typing.MutableSequence[Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], bool, float, int, str]], typing.MutableSequence[Union[None, typing.MutableMapping[str, Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], typing.MutableSequence[Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], bool, float, int, str]], bool, float, int, str]`.",
    "message": " Expected `str` for 1st positional only parameter to call `expr.interpolate` but got `Union[None, typing.MutableMapping[str, Union[None, typing.MutableMapping[str, Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], typing.MutableSequence[Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], bool, float, int, str]], typing.MutableSequence[Union[None, typing.MutableMapping[str, Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], typing.MutableSequence[Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], bool, float, int, str]], bool, float, int, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 209,
    "warning_line": "            expr.interpolate(",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    \"\"\"Test escaping behavior in an convert_to_expression context.\"\"\"\n    assert (\n        expr.interpolate(\n            expr.interpolate(\n                pattern, {}, escaping_behavior=behavior, convert_to_expression=True\n            ),\n            None,\n            jslib=expr.jshead([], interpolate_input),\n",
        "source_code_len": 310,
        "target_code": "    \"\"\"Test escaping behavior in an convert_to_expression context.\"\"\"\n    expression = expr.interpolate(\n        pattern, {}, escaping_behavior=behavior, convert_to_expression=True\n    )\n    assert isinstance(expression, str)\n    assert (\n        expr.interpolate(\n            expression,\n            {},\n            jslib=expr.jshead([], interpolate_input),\n",
        "target_code_len": 359,
        "diff_format": "@@ -206,8 +210,10 @@\n     \"\"\"Test escaping behavior in an convert_to_expression context.\"\"\"\n+    expression = expr.interpolate(\n+        pattern, {}, escaping_behavior=behavior, convert_to_expression=True\n+    )\n+    assert isinstance(expression, str)\n     assert (\n         expr.interpolate(\n-            expr.interpolate(\n-                pattern, {}, escaping_behavior=behavior, convert_to_expression=True\n-            ),\n-            None,\n+            expression,\n+            {},\n             jslib=expr.jshead([], interpolate_input),\n",
        "source_code_with_indent": "    <IND>\"\"\"Test escaping behavior in an convert_to_expression context.\"\"\"\n    assert (\n        expr.interpolate(\n            expr.interpolate(\n                pattern, {}, escaping_behavior=behavior, convert_to_expression=True\n            ),\n            None,\n            jslib=expr.jshead([], interpolate_input),\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <IND>\"\"\"Test escaping behavior in an convert_to_expression context.\"\"\"\n    expression = expr.interpolate(\n        pattern, {}, escaping_behavior=behavior, convert_to_expression=True\n    )\n    assert isinstance(expression, str)\n    assert (\n        expr.interpolate(\n            expression,\n            {},\n            jslib=expr.jshead([], interpolate_input),\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "common-workflow-language/cwltool",
    "commit": "189a496366d46754f96c7aefa0db7f3e26bd5453",
    "filename": "tests/test_examples.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/common-workflow-language-cwltool/tests/test_examples.py",
    "file_hunks_size": 39,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/test_examples.py:212:12 Incompatible parameter type [6]: Expected `typing.MutableMapping[str, Union[None, typing.MutableMapping[str, Union[None, typing.MutableMapping[str, Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], typing.MutableSequence[Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], bool, float, int, str]], typing.MutableSequence[Union[None, typing.MutableMapping[str, Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], typing.MutableSequence[Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], bool, float, int, str]], bool, float, int, str]]` for 2nd positional only parameter to call `expr.interpolate` but got `None`.",
    "message": " Expected `typing.MutableMapping[str, Union[None, typing.MutableMapping[str, Union[None, typing.MutableMapping[str, Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], typing.MutableSequence[Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], bool, float, int, str]], typing.MutableSequence[Union[None, typing.MutableMapping[str, Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], typing.MutableSequence[Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], bool, float, int, str]], bool, float, int, str]]` for 2nd positional only parameter to call `expr.interpolate` but got `None`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 212,
    "warning_line": "            None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    \"\"\"Test escaping behavior in an convert_to_expression context.\"\"\"\n    assert (\n        expr.interpolate(\n            expr.interpolate(\n                pattern, {}, escaping_behavior=behavior, convert_to_expression=True\n            ),\n            None,\n            jslib=expr.jshead([], interpolate_input),\n",
        "source_code_len": 310,
        "target_code": "    \"\"\"Test escaping behavior in an convert_to_expression context.\"\"\"\n    expression = expr.interpolate(\n        pattern, {}, escaping_behavior=behavior, convert_to_expression=True\n    )\n    assert isinstance(expression, str)\n    assert (\n        expr.interpolate(\n            expression,\n            {},\n            jslib=expr.jshead([], interpolate_input),\n",
        "target_code_len": 359,
        "diff_format": "@@ -206,8 +210,10 @@\n     \"\"\"Test escaping behavior in an convert_to_expression context.\"\"\"\n+    expression = expr.interpolate(\n+        pattern, {}, escaping_behavior=behavior, convert_to_expression=True\n+    )\n+    assert isinstance(expression, str)\n     assert (\n         expr.interpolate(\n-            expr.interpolate(\n-                pattern, {}, escaping_behavior=behavior, convert_to_expression=True\n-            ),\n-            None,\n+            expression,\n+            {},\n             jslib=expr.jshead([], interpolate_input),\n",
        "source_code_with_indent": "    <IND>\"\"\"Test escaping behavior in an convert_to_expression context.\"\"\"\n    assert (\n        expr.interpolate(\n            expr.interpolate(\n                pattern, {}, escaping_behavior=behavior, convert_to_expression=True\n            ),\n            None,\n            jslib=expr.jshead([], interpolate_input),\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <IND>\"\"\"Test escaping behavior in an convert_to_expression context.\"\"\"\n    expression = expr.interpolate(\n        pattern, {}, escaping_behavior=behavior, convert_to_expression=True\n    )\n    assert isinstance(expression, str)\n    assert (\n        expr.interpolate(\n            expression,\n            {},\n            jslib=expr.jshead([], interpolate_input),\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "common-workflow-language/cwltool",
    "commit": "189a496366d46754f96c7aefa0db7f3e26bd5453",
    "filename": "tests/test_examples.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/common-workflow-language-cwltool/tests/test_examples.py",
    "file_hunks_size": 39,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/test_examples.py:427:8 Incompatible parameter type [6]: Expected `Union[typing.MutableMapping[str, Union[None, typing.MutableMapping[str, Union[None, typing.MutableMapping[str, Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], typing.MutableSequence[Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], bool, float, int, str]], typing.MutableSequence[Union[None, typing.MutableMapping[str, Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], typing.MutableSequence[Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], bool, float, int, str]], bool, float, int, str]], typing.MutableSequence[typing.MutableMapping[str, Union[None, typing.MutableMapping[str, Union[None, typing.MutableMapping[str, Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], typing.MutableSequence[Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], bool, float, int, str]], typing.MutableSequence[Union[None, typing.MutableMapping[str, Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], typing.MutableSequence[Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], bool, float, int, str]], bool, float, int, str]]]]` for 2nd positional only parameter to call `cwltool.process.scandeps` but got `Dict[str, Union[List[Dict[str, Union[Dict[str, Union[List[Union[Dict[str, Union[Dict[str, Union[List[Dict[str, Union[List[Dict[str, str]], str]]], str]], str]], Dict[str, Union[Dict[str, Union[List[Dict[str, str]], str]], str]], Dict[str, Union[Dict[str, str], str]]]], str]], List[Dict[str, Union[Dict[str, str], str]]], str]]], str]]`.",
    "message": " Expected `Union[typing.MutableMapping[str, Union[None, typing.MutableMapping[str, Union[None, typing.MutableMapping[str, Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], typing.MutableSequence[Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], bool, float, int, str]], typing.MutableSequence[Union[None, typing.MutableMapping[str, Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], typing.MutableSequence[Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], bool, float, int, str]], bool, float, int, str]], typing.MutableSequence[typing.MutableMapping[str, Union[None, typing.MutableMapping[str, Union[None, typing.MutableMapping[str, Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], typing.MutableSequence[Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], bool, float, int, str]], typing.MutableSequence[Union[None, typing.MutableMapping[str, Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], typing.MutableSequence[Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], bool, float, int, str]], bool, float, int, str]]]]` for 2nd positional only parameter to call `cwltool.process.scandeps` but got `Dict[str, Union[List[Dict[str, Union[Dict[str, Union[List[Union[Dict[str, Union[Dict[str, Union[List[Dict[str, Union[List[Dict[str, str]], str]]], str]], str]], Dict[str, Union[Dict[str, Union[List[Dict[str, str]], str]], str]], Dict[str, Union[Dict[str, str], str]]]], str]], List[Dict[str, Union[Dict[str, str], str]]], str]]], str]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 427,
    "warning_line": "        obj,"
  },
  {
    "project": "common-workflow-language/cwltool",
    "commit": "189a496366d46754f96c7aefa0db7f3e26bd5453",
    "filename": "tests/test_examples.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/common-workflow-language-cwltool/tests/test_examples.py",
    "file_hunks_size": 39,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/test_examples.py:487:8 Incompatible parameter type [6]: Expected `Union[typing.MutableMapping[str, Union[None, typing.MutableMapping[str, Union[None, typing.MutableMapping[str, Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], typing.MutableSequence[Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], bool, float, int, str]], typing.MutableSequence[Union[None, typing.MutableMapping[str, Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], typing.MutableSequence[Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], bool, float, int, str]], bool, float, int, str]], typing.MutableSequence[typing.MutableMapping[str, Union[None, typing.MutableMapping[str, Union[None, typing.MutableMapping[str, Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], typing.MutableSequence[Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], bool, float, int, str]], typing.MutableSequence[Union[None, typing.MutableMapping[str, Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], typing.MutableSequence[Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], bool, float, int, str]], bool, float, int, str]]]]` for 2nd positional only parameter to call `cwltool.process.scandeps` but got `Dict[str, Union[List[Dict[str, Union[Dict[str, Union[List[Union[Dict[str, Union[Dict[str, Union[List[Dict[str, Union[List[Dict[str, str]], str]]], str]], str]], Dict[str, Union[Dict[str, Union[List[Dict[str, str]], str]], str]], Dict[str, Union[Dict[str, str], str]]]], str]], List[Dict[str, Union[Dict[str, str], str]]], str]]], str]]`.",
    "message": " Expected `Union[typing.MutableMapping[str, Union[None, typing.MutableMapping[str, Union[None, typing.MutableMapping[str, Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], typing.MutableSequence[Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], bool, float, int, str]], typing.MutableSequence[Union[None, typing.MutableMapping[str, Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], typing.MutableSequence[Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], bool, float, int, str]], bool, float, int, str]], typing.MutableSequence[typing.MutableMapping[str, Union[None, typing.MutableMapping[str, Union[None, typing.MutableMapping[str, Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], typing.MutableSequence[Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], bool, float, int, str]], typing.MutableSequence[Union[None, typing.MutableMapping[str, Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], typing.MutableSequence[Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], bool, float, int, str]], bool, float, int, str]]]]` for 2nd positional only parameter to call `cwltool.process.scandeps` but got `Dict[str, Union[List[Dict[str, Union[Dict[str, Union[List[Union[Dict[str, Union[Dict[str, Union[List[Dict[str, Union[List[Dict[str, str]], str]]], str]], str]], Dict[str, Union[Dict[str, Union[List[Dict[str, str]], str]], str]], Dict[str, Union[Dict[str, str], str]]]], str]], List[Dict[str, Union[Dict[str, str], str]]], str]]], str]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 487,
    "warning_line": "        obj,"
  },
  {
    "project": "common-workflow-language/cwltool",
    "commit": "189a496366d46754f96c7aefa0db7f3e26bd5453",
    "filename": "tests/test_examples.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/common-workflow-language-cwltool/tests/test_examples.py",
    "file_hunks_size": 39,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/test_examples.py:1378:11 Unsupported operand [58]: `in` is not supported for right operand type `Union[None, typing.MutableMapping[str, Union[None, typing.MutableMapping[str, Union[None, typing.MutableMapping[str, Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], typing.MutableSequence[Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], bool, float, int, str]], typing.MutableSequence[Union[None, typing.MutableMapping[str, Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], typing.MutableSequence[Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], bool, float, int, str]], bool, float, int, str]], str]`.",
    "message": " `in` is not supported for right operand type `Union[None, typing.MutableMapping[str, Union[None, typing.MutableMapping[str, Union[None, typing.MutableMapping[str, Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], typing.MutableSequence[Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], bool, float, int, str]], typing.MutableSequence[Union[None, typing.MutableMapping[str, Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], typing.MutableSequence[Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], bool, float, int, str]], bool, float, int, str]], str]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 1378,
    "warning_line": "    assert \"output\" in result",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    result = scatter_workflow(range=3)\n    assert \"output\" in result\n",
        "source_code_len": 69,
        "target_code": "    result = scatter_workflow(range=3)\n    assert isinstance(result, dict)\n    assert \"output\" in result\n",
        "target_code_len": 105,
        "diff_format": "@@ -1377,2 +1390,3 @@\n     result = scatter_workflow(range=3)\n+    assert isinstance(result, dict)\n     assert \"output\" in result\n",
        "source_code_with_indent": "    result = scatter_workflow(range=3)\n    assert \"output\" in result\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    result = scatter_workflow(range=3)\n    assert isinstance(result, dict)\n    assert \"output\" in result\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "common-workflow-language/cwltool",
    "commit": "189a496366d46754f96c7aefa0db7f3e26bd5453",
    "filename": "tests/test_pack.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/common-workflow-language-cwltool/tests/test_pack.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/test_pack.py:37:15 Incompatible parameter type [6]: Expected `typing.Sized` for 1st positional only parameter to call `len` but got `typing.Union[None, typing.MutableMapping[str, typing.Union[None, typing.MutableMapping[str, typing.Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], typing.MutableSequence[typing.Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], bool, float, int, str]], typing.MutableSequence[typing.Union[None, typing.MutableMapping[str, typing.Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], typing.MutableSequence[typing.Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], bool, float, int, str]], bool, float, int, str]`.",
    "message": " Expected `typing.Sized` for 1st positional only parameter to call `len` but got `typing.Union[None, typing.MutableMapping[str, typing.Union[None, typing.MutableMapping[str, typing.Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], typing.MutableSequence[typing.Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], bool, float, int, str]], typing.MutableSequence[typing.Union[None, typing.MutableMapping[str, typing.Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], typing.MutableSequence[typing.Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], bool, float, int, str]], bool, float, int, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 37,
    "warning_line": "    assert len(packed[\"$schemas\"]) == len(expect_packed[\"$schemas\"])",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import tempfile\nfrom functools import partial\n",
        "source_code_len": 46,
        "target_code": "import tempfile\nfrom collections.abc import Sized\nfrom functools import partial\n",
        "target_code_len": 80,
        "diff_format": "@@ -3,2 +3,3 @@\n import tempfile\n+from collections.abc import Sized\n from functools import partial\n",
        "source_code_with_indent": "import tempfile\nfrom functools import partial\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import tempfile\nfrom collections.abc import Sized\nfrom functools import partial\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    assert \"$schemas\" in packed\n    assert len(packed[\"$schemas\"]) == len(expect_packed[\"$schemas\"])\n    del packed[\"$schemas\"]\n",
        "source_code_len": 128,
        "target_code": "    assert \"$schemas\" in packed\n    packed_schemas = packed[\"$schemas\"]\n    assert isinstance(packed_schemas, Sized)\n    assert len(packed_schemas) == len(expect_packed[\"$schemas\"])\n    del packed[\"$schemas\"]\n",
        "target_code_len": 209,
        "diff_format": "@@ -36,3 +37,5 @@\n     assert \"$schemas\" in packed\n-    assert len(packed[\"$schemas\"]) == len(expect_packed[\"$schemas\"])\n+    packed_schemas = packed[\"$schemas\"]\n+    assert isinstance(packed_schemas, Sized)\n+    assert len(packed_schemas) == len(expect_packed[\"$schemas\"])\n     del packed[\"$schemas\"]\n",
        "source_code_with_indent": "    assert \"$schemas\" in packed\n    assert len(packed[\"$schemas\"]) == len(expect_packed[\"$schemas\"])\n    del packed[\"$schemas\"]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    assert \"$schemas\" in packed\n    packed_schemas = packed[\"$schemas\"]\n    assert isinstance(packed_schemas, Sized)\n    assert len(packed_schemas) == len(expect_packed[\"$schemas\"])\n    del packed[\"$schemas\"]\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "common-workflow-language/cwltool",
    "commit": "189a496366d46754f96c7aefa0db7f3e26bd5453",
    "filename": "tests/test_pack.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/common-workflow-language-cwltool/tests/test_pack.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/test_pack.py:66:15 Incompatible parameter type [6]: Expected `typing.Sized` for 1st positional only parameter to call `len` but got `typing.Union[None, typing.MutableMapping[str, typing.Union[None, typing.MutableMapping[str, typing.Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], typing.MutableSequence[typing.Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], bool, float, int, str]], typing.MutableSequence[typing.Union[None, typing.MutableMapping[str, typing.Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], typing.MutableSequence[typing.Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], bool, float, int, str]], bool, float, int, str]`.",
    "message": " Expected `typing.Sized` for 1st positional only parameter to call `len` but got `typing.Union[None, typing.MutableMapping[str, typing.Union[None, typing.MutableMapping[str, typing.Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], typing.MutableSequence[typing.Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], bool, float, int, str]], typing.MutableSequence[typing.Union[None, typing.MutableMapping[str, typing.Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], typing.MutableSequence[typing.Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], bool, float, int, str]], bool, float, int, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 66,
    "warning_line": "    assert len(packed[\"$schemas\"]) == len(expect_packed[\"$schemas\"])",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import tempfile\nfrom functools import partial\n",
        "source_code_len": 46,
        "target_code": "import tempfile\nfrom collections.abc import Sized\nfrom functools import partial\n",
        "target_code_len": 80,
        "diff_format": "@@ -3,2 +3,3 @@\n import tempfile\n+from collections.abc import Sized\n from functools import partial\n",
        "source_code_with_indent": "import tempfile\nfrom functools import partial\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import tempfile\nfrom collections.abc import Sized\nfrom functools import partial\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    assert \"$schemas\" in packed\n    assert len(packed[\"$schemas\"]) == len(expect_packed[\"$schemas\"])\n    del packed[\"$schemas\"]\n",
        "source_code_len": 128,
        "target_code": "    assert \"$schemas\" in packed\n    packed_schemas = packed[\"$schemas\"]\n    assert isinstance(packed_schemas, Sized)\n    assert len(packed_schemas) == len(expect_packed[\"$schemas\"])\n    del packed[\"$schemas\"]\n",
        "target_code_len": 209,
        "diff_format": "@@ -65,3 +68,5 @@\n     assert \"$schemas\" in packed\n-    assert len(packed[\"$schemas\"]) == len(expect_packed[\"$schemas\"])\n+    packed_schemas = packed[\"$schemas\"]\n+    assert isinstance(packed_schemas, Sized)\n+    assert len(packed_schemas) == len(expect_packed[\"$schemas\"])\n     del packed[\"$schemas\"]\n",
        "source_code_with_indent": "    assert \"$schemas\" in packed\n    assert len(packed[\"$schemas\"]) == len(expect_packed[\"$schemas\"])\n    del packed[\"$schemas\"]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    assert \"$schemas\" in packed\n    packed_schemas = packed[\"$schemas\"]\n    assert isinstance(packed_schemas, Sized)\n    assert len(packed_schemas) == len(expect_packed[\"$schemas\"])\n    del packed[\"$schemas\"]\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "common-workflow-language/cwltool",
    "commit": "189a496366d46754f96c7aefa0db7f3e26bd5453",
    "filename": "tests/test_parallel.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/common-workflow-language-cwltool/tests/test_parallel.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/test_parallel.py:19:8 Incompatible parameter type [6]: Expected `typing.Optional[typing.Callable[..., typing.Tuple[typing.Optional[typing.Dict[str, typing.Any]], str]]]` for 1st parameter `executor` to call `get_windows_safe_factory` but got `MultithreadedJobExecutor`.",
    "message": " Expected `typing.Optional[typing.Callable[..., typing.Tuple[typing.Optional[typing.Dict[str, typing.Any]], str]]]` for 1st parameter `executor` to call `get_windows_safe_factory` but got `MultithreadedJobExecutor`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 19,
    "warning_line": "        executor=executor, runtime_context=runtime_context"
  },
  {
    "project": "common-workflow-language/cwltool",
    "commit": "189a496366d46754f96c7aefa0db7f3e26bd5453",
    "filename": "tests/test_parallel.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/common-workflow-language-cwltool/tests/test_parallel.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/test_parallel.py:30:39 Incompatible parameter type [6]: Expected `typing.Optional[typing.Callable[..., typing.Tuple[typing.Optional[typing.Dict[str, typing.Any]], str]]]` for 1st parameter `executor` to call `get_windows_safe_factory` but got `MultithreadedJobExecutor`.",
    "message": " Expected `typing.Optional[typing.Callable[..., typing.Tuple[typing.Optional[typing.Dict[str, typing.Any]], str]]]` for 1st parameter `executor` to call `get_windows_safe_factory` but got `MultithreadedJobExecutor`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 30,
    "warning_line": "    factory = get_windows_safe_factory(executor=MultithreadedJobExecutor())"
  },
  {
    "project": "common-workflow-language/cwltool",
    "commit": "189a496366d46754f96c7aefa0db7f3e26bd5453",
    "filename": "tests/test_secrets.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/common-workflow-language-cwltool/tests/test_secrets.py",
    "file_hunks_size": 9,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/test_secrets.py:19:29 Incompatible parameter type [6]: Expected `typing.MutableMapping[str, Union[None, typing.MutableMapping[str, Union[None, typing.MutableMapping[str, Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], typing.MutableSequence[Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], bool, float, int, str]], typing.MutableSequence[Union[None, typing.MutableMapping[str, Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], typing.MutableSequence[Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], bool, float, int, str]], bool, float, int, str]]` for 2nd positional only parameter to call `SecretStore.store` but got `Dict[str, str]`.",
    "message": " Expected `typing.MutableMapping[str, Union[None, typing.MutableMapping[str, Union[None, typing.MutableMapping[str, Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], typing.MutableSequence[Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], bool, float, int, str]], typing.MutableSequence[Union[None, typing.MutableMapping[str, Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], typing.MutableSequence[Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], bool, float, int, str]], bool, float, int, str]]` for 2nd positional only parameter to call `SecretStore.store` but got `Dict[str, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 19,
    "warning_line": "    sec_store.store([\"foo\"], job)"
  },
  {
    "project": "common-workflow-language/cwltool",
    "commit": "189a496366d46754f96c7aefa0db7f3e26bd5453",
    "filename": "tests/test_secrets.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/common-workflow-language-cwltool/tests/test_secrets.py",
    "file_hunks_size": 9,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/test_secrets.py:27:28 Incompatible parameter type [6]: Expected `Union[typing.MutableMapping[str, Union[None, typing.MutableMapping[str, Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], typing.MutableSequence[Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], bool, float, int, str]], typing.MutableSequence[Union[None, typing.MutableMapping[str, Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], typing.MutableSequence[Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], bool, float, int, str]], bool, float, int, str]` for 1st positional only parameter to call `SecretStore.retrieve` but got `Dict[str, str]`.",
    "message": " Expected `Union[typing.MutableMapping[str, Union[None, typing.MutableMapping[str, Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], typing.MutableSequence[Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], bool, float, int, str]], typing.MutableSequence[Union[None, typing.MutableMapping[str, Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], typing.MutableSequence[Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], bool, float, int, str]], bool, float, int, str]` for 1st positional only parameter to call `SecretStore.retrieve` but got `Dict[str, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 27,
    "warning_line": "    assert storage.retrieve(obscured)[\"foo\"] == \"bar\""
  },
  {
    "project": "common-workflow-language/cwltool",
    "commit": "189a496366d46754f96c7aefa0db7f3e26bd5453",
    "filename": "tests/test_secrets.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/common-workflow-language-cwltool/tests/test_secrets.py",
    "file_hunks_size": 9,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/test_secrets.py:47:30 Incompatible parameter type [6]: Expected `Union[typing.MutableMapping[str, Union[None, typing.MutableMapping[str, Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], typing.MutableSequence[Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], bool, float, int, str]], typing.MutableSequence[Union[None, typing.MutableMapping[str, Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], typing.MutableSequence[Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], bool, float, int, str]], bool, float, int, str]` for 1st positional only parameter to call `SecretStore.has_secret` but got `Union[Dict[str, str], List[str], str]`.",
    "message": " Expected `Union[typing.MutableMapping[str, Union[None, typing.MutableMapping[str, Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], typing.MutableSequence[Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], bool, float, int, str]], typing.MutableSequence[Union[None, typing.MutableMapping[str, Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], typing.MutableSequence[Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], bool, float, int, str]], bool, float, int, str]` for 1st positional only parameter to call `SecretStore.has_secret` but got `Union[Dict[str, str], List[str], str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 47,
    "warning_line": "    assert storage.has_secret(pattern)"
  },
  {
    "project": "common-workflow-language/cwltool",
    "commit": "189a496366d46754f96c7aefa0db7f3e26bd5453",
    "filename": "tests/test_secrets.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/common-workflow-language-cwltool/tests/test_secrets.py",
    "file_hunks_size": 9,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/test_secrets.py:48:28 Incompatible parameter type [6]: Expected `Union[typing.MutableMapping[str, Union[None, typing.MutableMapping[str, Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], typing.MutableSequence[Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], bool, float, int, str]], typing.MutableSequence[Union[None, typing.MutableMapping[str, Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], typing.MutableSequence[Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], bool, float, int, str]], bool, float, int, str]` for 1st positional only parameter to call `SecretStore.retrieve` but got `Union[Dict[str, str], List[str], str]`.",
    "message": " Expected `Union[typing.MutableMapping[str, Union[None, typing.MutableMapping[str, Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], typing.MutableSequence[Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], bool, float, int, str]], typing.MutableSequence[Union[None, typing.MutableMapping[str, Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], typing.MutableSequence[Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], bool, float, int, str]], bool, float, int, str]` for 1st positional only parameter to call `SecretStore.retrieve` but got `Union[Dict[str, str], List[str], str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 48,
    "warning_line": "    assert storage.retrieve(pattern) == expected"
  }
]