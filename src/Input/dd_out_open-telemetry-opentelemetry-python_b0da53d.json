[
  {
    "project": "open-telemetry/opentelemetry-python",
    "commit": "b0da53d28b041338e04982f3a9715926887b5cad",
    "filename": "opentelemetry-api/src/opentelemetry/context/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/open-telemetry-opentelemetry-python/opentelemetry-api/src/opentelemetry/context/__init__.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "opentelemetry-api/src/opentelemetry/context/__init__.py:148:24 Invalid type [31]: Expression `typing.Optional[opentelemetry.__sub__(api.src.opentelemetry.context.base_context.BaseRuntimeContext)]` is not a valid type.",
    "message": " Expression `typing.Optional[opentelemetry.__sub__(api.src.opentelemetry.context.base_context.BaseRuntimeContext)]` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 148,
    "warning_line": "Context = None  # type: typing.Optional[BaseRuntimeContext]"
  },
  {
    "project": "open-telemetry/opentelemetry-python",
    "commit": "b0da53d28b041338e04982f3a9715926887b5cad",
    "filename": "opentelemetry-api/src/opentelemetry/context/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/open-telemetry-opentelemetry-python/opentelemetry-api/src/opentelemetry/context/__init__.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "opentelemetry-api/src/opentelemetry/context/__init__.py:153:4 Incompatible variable type [9]: Context is declared to have type `None` but is used as type `AsyncRuntimeContext`.",
    "message": " Context is declared to have type `None` but is used as type `AsyncRuntimeContext`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 153,
    "warning_line": "    Context = AsyncRuntimeContext()"
  },
  {
    "project": "open-telemetry/opentelemetry-python",
    "commit": "b0da53d28b041338e04982f3a9715926887b5cad",
    "filename": "opentelemetry-api/src/opentelemetry/context/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/open-telemetry-opentelemetry-python/opentelemetry-api/src/opentelemetry/context/__init__.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "opentelemetry-api/src/opentelemetry/context/__init__.py:157:4 Incompatible variable type [9]: Context is declared to have type `None` but is used as type `ThreadLocalRuntimeContext`.",
    "message": " Context is declared to have type `None` but is used as type `ThreadLocalRuntimeContext`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 157,
    "warning_line": "    Context = ThreadLocalRuntimeContext()"
  },
  {
    "project": "open-telemetry/opentelemetry-python",
    "commit": "b0da53d28b041338e04982f3a9715926887b5cad",
    "filename": "opentelemetry-api/src/opentelemetry/trace/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/open-telemetry-opentelemetry-python/opentelemetry-api/src/opentelemetry/trace/__init__.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "opentelemetry-api/src/opentelemetry/trace/__init__.py:145:20 Incompatible variable type [9]: start_time is declared to have type `int` but is used as type `None`.",
    "message": " start_time is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 145,
    "warning_line": "    def start(self, start_time: int = None) -> None:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def start(self, start_time: int = None) -> None:\n        \"\"\"Sets the current time as the span's start time.\n",
        "source_code_len": 113,
        "target_code": "\n    def start(self, start_time: typing.Optional[int] = None) -> None:\n        \"\"\"Sets the current time as the span's start time.\n",
        "target_code_len": 130,
        "diff_format": "@@ -144,3 +144,3 @@\n \n-    def start(self, start_time: int = None) -> None:\n+    def start(self, start_time: typing.Optional[int] = None) -> None:\n         \"\"\"Sets the current time as the span's start time.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    def start(self, start_time: int = None) -> None:\n        <IND>",
        "target_code_with_indent": "\n    def start(self, start_time: typing.Optional[int] = None) -> None:\n        <IND>"
      }
    ]
  },
  {
    "project": "open-telemetry/opentelemetry-python",
    "commit": "b0da53d28b041338e04982f3a9715926887b5cad",
    "filename": "opentelemetry-sdk/src/opentelemetry/sdk/trace/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/open-telemetry-opentelemetry-python/opentelemetry-sdk/src/opentelemetry/sdk/trace/__init__.py",
    "file_hunks_size": 12,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "opentelemetry-sdk/src/opentelemetry/sdk/trace/__init__.py:82:12 Incompatible attribute type [8]: Attribute `_span_processors` declared in class `MultiSpanProcessor` has type `typing.Tuple[]` but is used as type `typing.Tuple[SpanProcessor, ...]`.",
    "message": " Attribute `_span_processors` declared in class `MultiSpanProcessor` has type `typing.Tuple[]` but is used as type `typing.Tuple[SpanProcessor, ...]`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 82,
    "warning_line": "            self._span_processors = self._span_processors + (span_processor,)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        # iterating through it on \"on_start\" and \"on_end\".\n        self._span_processors = ()\n        self._lock = threading.Lock()\n\n    def add_span_processor(self, span_processor: SpanProcessor):\n        \"\"\"Adds a SpanProcessor to the list handled by this instance.\"\"\"\n",
        "source_code_len": 271,
        "target_code": "        # iterating through it on \"on_start\" and \"on_end\".\n        self._span_processors = ()  # type: typing.Tuple[SpanProcessor, ...]\n        self._lock = threading.Lock()\n\n    def add_span_processor(self, span_processor: SpanProcessor) -> None:\n        \"\"\"Adds a SpanProcessor to the list handled by this instance.\"\"\"\n",
        "target_code_len": 321,
        "diff_format": "@@ -75,6 +75,6 @@\n         # iterating through it on \"on_start\" and \"on_end\".\n-        self._span_processors = ()\n+        self._span_processors = ()  # type: typing.Tuple[SpanProcessor, ...]\n         self._lock = threading.Lock()\n \n-    def add_span_processor(self, span_processor: SpanProcessor):\n+    def add_span_processor(self, span_processor: SpanProcessor) -> None:\n         \"\"\"Adds a SpanProcessor to the list handled by this instance.\"\"\"\n",
        "source_code_with_indent": "        # iterating through it on \"on_start\" and \"on_end\".\n        <IND>self._span_processors = ()\n        self._lock = threading.Lock()\n\n    <DED>def add_span_processor(self, span_processor: SpanProcessor):\n        <IND>\"\"\"Adds a SpanProcessor to the list handled by this instance.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        # iterating through it on \"on_start\" and \"on_end\".\n        <IND>self._span_processors = ()  # type: typing.Tuple[SpanProcessor, ...]\n        self._lock = threading.Lock()\n\n    <DED>def add_span_processor(self, span_processor: SpanProcessor) -> None:\n        <IND>\"\"\"Adds a SpanProcessor to the list handled by this instance.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "open-telemetry/opentelemetry-python",
    "commit": "b0da53d28b041338e04982f3a9715926887b5cad",
    "filename": "opentelemetry-sdk/src/opentelemetry/sdk/trace/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/open-telemetry-opentelemetry-python/opentelemetry-sdk/src/opentelemetry/sdk/trace/__init__.py",
    "file_hunks_size": 12,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "opentelemetry-sdk/src/opentelemetry/sdk/trace/__init__.py:245:20 Incompatible variable type [9]: start_time is declared to have type `int` but is used as type `None`.",
    "message": " start_time is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 245,
    "warning_line": "    def start(self, start_time: int = None):",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def start(self, start_time: int = None):\n        with self._lock:\n",
        "source_code_len": 71,
        "target_code": "\n    def start(self, start_time: typing.Optional[int] = None) -> None:\n        with self._lock:\n",
        "target_code_len": 96,
        "diff_format": "@@ -244,3 +247,3 @@\n \n-    def start(self, start_time: int = None):\n+    def start(self, start_time: typing.Optional[int] = None) -> None:\n         with self._lock:\n",
        "source_code_with_indent": "\n    <DED>def start(self, start_time: int = None):\n        <IND>with self._lock:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def start(self, start_time: typing.Optional[int] = None) -> None:\n        <IND>with self._lock:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "open-telemetry/opentelemetry-python",
    "commit": "b0da53d28b041338e04982f3a9715926887b5cad",
    "filename": "opentelemetry-sdk/src/opentelemetry/sdk/trace/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/open-telemetry-opentelemetry-python/opentelemetry-sdk/src/opentelemetry/sdk/trace/__init__.py",
    "file_hunks_size": 12,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "opentelemetry-sdk/src/opentelemetry/sdk/trace/__init__.py:328:9 Invalid type [31]: Expression `typing.Iterator[opentelemetry.__sub__(sdk.src.opentelemetry.sdk.trace.Span)]` is not a valid type.",
    "message": " Expression `typing.Iterator[opentelemetry.__sub__(sdk.src.opentelemetry.sdk.trace.Span)]` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 328,
    "warning_line": "    ) -> typing.Iterator[\"Span\"]:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        kind: trace_api.SpanKind = trace_api.SpanKind.INTERNAL,\n    ) -> typing.Iterator[\"Span\"]:\n        \"\"\"See `opentelemetry.trace.Tracer.start_span`.\"\"\"\n",
        "source_code_len": 157,
        "target_code": "        kind: trace_api.SpanKind = trace_api.SpanKind.INTERNAL,\n    ) -> typing.Iterator[trace_api.Span]:\n        \"\"\"See `opentelemetry.trace.Tracer.start_span`.\"\"\"\n",
        "target_code_len": 165,
        "diff_format": "@@ -327,3 +330,3 @@\n         kind: trace_api.SpanKind = trace_api.SpanKind.INTERNAL,\n-    ) -> typing.Iterator[\"Span\"]:\n+    ) -> typing.Iterator[trace_api.Span]:\n         \"\"\"See `opentelemetry.trace.Tracer.start_span`.\"\"\"\n",
        "source_code_with_indent": "        kind: trace_api.SpanKind = trace_api.SpanKind.INTERNAL,\n    ) -> typing.Iterator[\"Span\"]:\n        <IND>\"\"\"See `opentelemetry.trace.Tracer.start_span`.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        kind: trace_api.SpanKind = trace_api.SpanKind.INTERNAL,\n    ) -> typing.Iterator[trace_api.Span]:\n        <IND>\"\"\"See `opentelemetry.trace.Tracer.start_span`.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]