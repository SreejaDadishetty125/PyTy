[
  {
    "project": "Nuitka/Nuitka",
    "commit": "55829dea6e09138daa9dc95914217ef30320a69b",
    "filename": "nuitka/nodes/AsyncgenNodes.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Nuitka-Nuitka/nuitka/nodes/AsyncgenNodes.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "nuitka/nodes/AsyncgenNodes.py:32:4 Inconsistent override [15]: `named_children` overrides attribute defined in `nuitka.nodes.NodeBases.ChildrenHavingMixin` inconsistently. Type `typing.Tuple[str]` is not a subtype of the overridden attribute `typing.Tuple[]`.",
    "message": " `named_children` overrides attribute defined in `nuitka.nodes.NodeBases.ChildrenHavingMixin` inconsistently. Type `typing.Tuple[str]` is not a subtype of the overridden attribute `typing.Tuple[]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 32,
    "warning_line": "    named_children = (\"asyncgen_ref\",)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom .ExpressionBases import ExpressionChildrenHavingBase\nfrom .FunctionNodes import ExpressionFunctionEntryPointBase\n",
        "source_code_len": 119,
        "target_code": "\nfrom .ExpressionBases import ExpressionChildHavingBase\nfrom .FunctionNodes import ExpressionFunctionEntryPointBase\n",
        "target_code_len": 116,
        "diff_format": "@@ -24,3 +24,3 @@\n \n-from .ExpressionBases import ExpressionChildrenHavingBase\n+from .ExpressionBases import ExpressionChildHavingBase\n from .FunctionNodes import ExpressionFunctionEntryPointBase\n",
        "source_code_with_indent": "\nfrom .ExpressionBases import ExpressionChildrenHavingBase\nfrom .FunctionNodes import ExpressionFunctionEntryPointBase\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom .ExpressionBases import ExpressionChildHavingBase\nfrom .FunctionNodes import ExpressionFunctionEntryPointBase\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nclass ExpressionMakeAsyncgenObject(ExpressionChildrenHavingBase):\n    kind = \"EXPRESSION_MAKE_ASYNCGEN_OBJECT\"\n\n    named_children = (\"asyncgen_ref\",)\n\n    getAsyncgenRef = ExpressionChildrenHavingBase.childGetter(\"asyncgen_ref\")\n\n",
        "source_code_len": 232,
        "target_code": "\nclass ExpressionMakeAsyncgenObject(ExpressionChildHavingBase):\n    kind = \"EXPRESSION_MAKE_ASYNCGEN_OBJECT\"\n\n    named_child = \"asyncgen_ref\"\n    getAsyncgenRef = ExpressionChildHavingBase.childGetter(\"asyncgen_ref\")\n\n    __slots__ = (\"variable_closure_traces\",)\n\n",
        "target_code_len": 265,
        "diff_format": "@@ -28,8 +28,9 @@\n \n-class ExpressionMakeAsyncgenObject(ExpressionChildrenHavingBase):\n+class ExpressionMakeAsyncgenObject(ExpressionChildHavingBase):\n     kind = \"EXPRESSION_MAKE_ASYNCGEN_OBJECT\"\n \n-    named_children = (\"asyncgen_ref\",)\n+    named_child = \"asyncgen_ref\"\n+    getAsyncgenRef = ExpressionChildHavingBase.childGetter(\"asyncgen_ref\")\n \n-    getAsyncgenRef = ExpressionChildrenHavingBase.childGetter(\"asyncgen_ref\")\n+    __slots__ = (\"variable_closure_traces\",)\n \n",
        "source_code_with_indent": "\nclass ExpressionMakeAsyncgenObject(ExpressionChildrenHavingBase):\n    <IND>kind = \"EXPRESSION_MAKE_ASYNCGEN_OBJECT\"\n\n    named_children = (\"asyncgen_ref\",)\n\n    getAsyncgenRef = ExpressionChildrenHavingBase.childGetter(\"asyncgen_ref\")\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nclass ExpressionMakeAsyncgenObject(ExpressionChildHavingBase):\n    <IND>kind = \"EXPRESSION_MAKE_ASYNCGEN_OBJECT\"\n\n    named_child = \"asyncgen_ref\"\n    getAsyncgenRef = ExpressionChildHavingBase.childGetter(\"asyncgen_ref\")\n\n    __slots__ = (\"variable_closure_traces\",)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Nuitka/Nuitka",
    "commit": "55829dea6e09138daa9dc95914217ef30320a69b",
    "filename": "nuitka/nodes/AttributeNodes.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Nuitka-Nuitka/nuitka/nodes/AttributeNodes.py",
    "file_hunks_size": 14,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "nuitka/nodes/AttributeNodes.py:157:4 Inconsistent override [15]: `named_children` overrides attribute defined in `nuitka.nodes.NodeBases.ChildrenHavingMixin` inconsistently. Type `typing.Tuple[str]` is not a subtype of the overridden attribute `typing.Tuple[]`.",
    "message": " `named_children` overrides attribute defined in `nuitka.nodes.NodeBases.ChildrenHavingMixin` inconsistently. Type `typing.Tuple[str]` is not a subtype of the overridden attribute `typing.Tuple[]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 157,
    "warning_line": "    named_children = (\"source\",)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nclass ExpressionAttributeLookup(ExpressionChildrenHavingBase):\n    \"\"\" Looking up an attribute of an object.\n",
        "source_code_len": 110,
        "target_code": "\nclass ExpressionAttributeLookup(ExpressionChildHavingBase):\n    \"\"\" Looking up an attribute of an object.\n",
        "target_code_len": 107,
        "diff_format": "@@ -148,3 +146,3 @@\n \n-class ExpressionAttributeLookup(ExpressionChildrenHavingBase):\n+class ExpressionAttributeLookup(ExpressionChildHavingBase):\n     \"\"\" Looking up an attribute of an object.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED><DED>class ExpressionAttributeLookup(ExpressionChildrenHavingBase):\n    <IND>",
        "target_code_with_indent": "\n<DED><DED>class ExpressionAttributeLookup(ExpressionChildHavingBase):\n    <IND>"
      }
    ]
  },
  {
    "project": "Nuitka/Nuitka",
    "commit": "55829dea6e09138daa9dc95914217ef30320a69b",
    "filename": "nuitka/nodes/BuiltinComplexNodes.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Nuitka-Nuitka/nuitka/nodes/BuiltinComplexNodes.py",
    "file_hunks_size": 5,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "nuitka/nodes/BuiltinComplexNodes.py:33:4 Inconsistent override [15]: `named_children` overrides attribute defined in `nuitka.nodes.NodeBases.ChildrenHavingMixin` inconsistently. Type `typing.Tuple[str]` is not a subtype of the overridden attribute `typing.Tuple[]`.",
    "message": " `named_children` overrides attribute defined in `nuitka.nodes.NodeBases.ChildrenHavingMixin` inconsistently. Type `typing.Tuple[str]` is not a subtype of the overridden attribute `typing.Tuple[]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 33,
    "warning_line": "    named_children = (\"value\",)"
  },
  {
    "project": "Nuitka/Nuitka",
    "commit": "55829dea6e09138daa9dc95914217ef30320a69b",
    "filename": "nuitka/nodes/BuiltinDecoratorNodes.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Nuitka-Nuitka/nuitka/nodes/BuiltinDecoratorNodes.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "nuitka/nodes/BuiltinDecoratorNodes.py:32:4 Inconsistent override [15]: `named_children` overrides attribute defined in `nuitka.nodes.NodeBases.ChildrenHavingMixin` inconsistently. Type `typing.Tuple[str]` is not a subtype of the overridden attribute `typing.Tuple[]`.",
    "message": " `named_children` overrides attribute defined in `nuitka.nodes.NodeBases.ChildrenHavingMixin` inconsistently. Type `typing.Tuple[str]` is not a subtype of the overridden attribute `typing.Tuple[]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 32,
    "warning_line": "    named_children = (\"value\",)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom .ExpressionBases import ExpressionChildrenHavingBase\nfrom .shapes.BuiltinTypeShapes import ShapeTypeClassmethod, ShapeTypeStaticmethod\n",
        "source_code_len": 141,
        "target_code": "\nfrom .ExpressionBases import ExpressionChildHavingBase\nfrom .shapes.BuiltinTypeShapes import ShapeTypeClassmethod, ShapeTypeStaticmethod\n",
        "target_code_len": 138,
        "diff_format": "@@ -24,3 +24,3 @@\n \n-from .ExpressionBases import ExpressionChildrenHavingBase\n+from .ExpressionBases import ExpressionChildHavingBase\n from .shapes.BuiltinTypeShapes import ShapeTypeClassmethod, ShapeTypeStaticmethod\n",
        "source_code_with_indent": "\nfrom .ExpressionBases import ExpressionChildrenHavingBase\nfrom .shapes.BuiltinTypeShapes import ShapeTypeClassmethod, ShapeTypeStaticmethod\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom .ExpressionBases import ExpressionChildHavingBase\nfrom .shapes.BuiltinTypeShapes import ShapeTypeClassmethod, ShapeTypeStaticmethod\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nclass ExpressionBuiltinStaticmethod(ExpressionChildrenHavingBase):\n    kind = \"EXPRESSION_BUILTIN_STATICMETHOD\"\n\n    named_children = (\"value\",)\n\n    getValue = ExpressionChildrenHavingBase.childGetter(\"value\")\n\n    def __init__(self, value, source_ref):\n        ExpressionChildrenHavingBase.__init__(\n            self, values={\"value\": value}, source_ref=source_ref\n        )\n\n",
        "source_code_len": 379,
        "target_code": "\nclass ExpressionBuiltinStaticmethod(ExpressionChildHavingBase):\n    kind = \"EXPRESSION_BUILTIN_STATICMETHOD\"\n\n    named_child = \"value\"\n    getValue = ExpressionChildHavingBase.childGetter(\"value\")\n\n    def __init__(self, value, source_ref):\n        ExpressionChildHavingBase.__init__(self, value=value, source_ref=source_ref)\n\n",
        "target_code_len": 329,
        "diff_format": "@@ -28,13 +28,10 @@\n \n-class ExpressionBuiltinStaticmethod(ExpressionChildrenHavingBase):\n+class ExpressionBuiltinStaticmethod(ExpressionChildHavingBase):\n     kind = \"EXPRESSION_BUILTIN_STATICMETHOD\"\n \n-    named_children = (\"value\",)\n-\n-    getValue = ExpressionChildrenHavingBase.childGetter(\"value\")\n+    named_child = \"value\"\n+    getValue = ExpressionChildHavingBase.childGetter(\"value\")\n \n     def __init__(self, value, source_ref):\n-        ExpressionChildrenHavingBase.__init__(\n-            self, values={\"value\": value}, source_ref=source_ref\n-        )\n+        ExpressionChildHavingBase.__init__(self, value=value, source_ref=source_ref)\n \n",
        "source_code_with_indent": "\nclass ExpressionBuiltinStaticmethod(ExpressionChildrenHavingBase):\n    <IND>kind = \"EXPRESSION_BUILTIN_STATICMETHOD\"\n\n    named_children = (\"value\",)\n\n    getValue = ExpressionChildrenHavingBase.childGetter(\"value\")\n\n    def __init__(self, value, source_ref):\n        <IND>ExpressionChildrenHavingBase.__init__(\n            self, values={\"value\": value}, source_ref=source_ref\n        )\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nclass ExpressionBuiltinStaticmethod(ExpressionChildHavingBase):\n    <IND>kind = \"EXPRESSION_BUILTIN_STATICMETHOD\"\n\n    named_child = \"value\"\n    getValue = ExpressionChildHavingBase.childGetter(\"value\")\n\n    def __init__(self, value, source_ref):\n        <IND>ExpressionChildHavingBase.__init__(self, value=value, source_ref=source_ref)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nclass ExpressionBuiltinClassmethod(ExpressionChildrenHavingBase):\n    kind = \"EXPRESSION_BUILTIN_CLASSMETHOD\"\n\n    named_children = (\"value\",)\n\n    getValue = ExpressionChildrenHavingBase.childGetter(\"value\")\n\n    def __init__(self, value, source_ref):\n        ExpressionChildrenHavingBase.__init__(\n            self, values={\"value\": value}, source_ref=source_ref\n        )\n\n",
        "source_code_len": 377,
        "target_code": "\nclass ExpressionBuiltinClassmethod(ExpressionChildHavingBase):\n    kind = \"EXPRESSION_BUILTIN_CLASSMETHOD\"\n\n    named_child = \"value\"\n    getValue = ExpressionChildHavingBase.childGetter(\"value\")\n\n    def __init__(self, value, source_ref):\n        ExpressionChildHavingBase.__init__(self, value=value, source_ref=source_ref)\n\n",
        "target_code_len": 327,
        "diff_format": "@@ -53,13 +50,10 @@\n \n-class ExpressionBuiltinClassmethod(ExpressionChildrenHavingBase):\n+class ExpressionBuiltinClassmethod(ExpressionChildHavingBase):\n     kind = \"EXPRESSION_BUILTIN_CLASSMETHOD\"\n \n-    named_children = (\"value\",)\n-\n-    getValue = ExpressionChildrenHavingBase.childGetter(\"value\")\n+    named_child = \"value\"\n+    getValue = ExpressionChildHavingBase.childGetter(\"value\")\n \n     def __init__(self, value, source_ref):\n-        ExpressionChildrenHavingBase.__init__(\n-            self, values={\"value\": value}, source_ref=source_ref\n-        )\n+        ExpressionChildHavingBase.__init__(self, value=value, source_ref=source_ref)\n \n",
        "source_code_with_indent": "\n<DED><DED>class ExpressionBuiltinClassmethod(ExpressionChildrenHavingBase):\n    <IND>kind = \"EXPRESSION_BUILTIN_CLASSMETHOD\"\n\n    named_children = (\"value\",)\n\n    getValue = ExpressionChildrenHavingBase.childGetter(\"value\")\n\n    def __init__(self, value, source_ref):\n        <IND>ExpressionChildrenHavingBase.__init__(\n            self, values={\"value\": value}, source_ref=source_ref\n        )\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED><DED>class ExpressionBuiltinClassmethod(ExpressionChildHavingBase):\n    <IND>kind = \"EXPRESSION_BUILTIN_CLASSMETHOD\"\n\n    named_child = \"value\"\n    getValue = ExpressionChildHavingBase.childGetter(\"value\")\n\n    def __init__(self, value, source_ref):\n        <IND>ExpressionChildHavingBase.__init__(self, value=value, source_ref=source_ref)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Nuitka/Nuitka",
    "commit": "55829dea6e09138daa9dc95914217ef30320a69b",
    "filename": "nuitka/nodes/BuiltinDecoratorNodes.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Nuitka-Nuitka/nuitka/nodes/BuiltinDecoratorNodes.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "nuitka/nodes/BuiltinDecoratorNodes.py:57:4 Inconsistent override [15]: `named_children` overrides attribute defined in `nuitka.nodes.NodeBases.ChildrenHavingMixin` inconsistently. Type `typing.Tuple[str]` is not a subtype of the overridden attribute `typing.Tuple[]`.",
    "message": " `named_children` overrides attribute defined in `nuitka.nodes.NodeBases.ChildrenHavingMixin` inconsistently. Type `typing.Tuple[str]` is not a subtype of the overridden attribute `typing.Tuple[]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 57,
    "warning_line": "    named_children = (\"value\",)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom .ExpressionBases import ExpressionChildrenHavingBase\nfrom .shapes.BuiltinTypeShapes import ShapeTypeClassmethod, ShapeTypeStaticmethod\n",
        "source_code_len": 141,
        "target_code": "\nfrom .ExpressionBases import ExpressionChildHavingBase\nfrom .shapes.BuiltinTypeShapes import ShapeTypeClassmethod, ShapeTypeStaticmethod\n",
        "target_code_len": 138,
        "diff_format": "@@ -24,3 +24,3 @@\n \n-from .ExpressionBases import ExpressionChildrenHavingBase\n+from .ExpressionBases import ExpressionChildHavingBase\n from .shapes.BuiltinTypeShapes import ShapeTypeClassmethod, ShapeTypeStaticmethod\n",
        "source_code_with_indent": "\nfrom .ExpressionBases import ExpressionChildrenHavingBase\nfrom .shapes.BuiltinTypeShapes import ShapeTypeClassmethod, ShapeTypeStaticmethod\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom .ExpressionBases import ExpressionChildHavingBase\nfrom .shapes.BuiltinTypeShapes import ShapeTypeClassmethod, ShapeTypeStaticmethod\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nclass ExpressionBuiltinStaticmethod(ExpressionChildrenHavingBase):\n    kind = \"EXPRESSION_BUILTIN_STATICMETHOD\"\n\n    named_children = (\"value\",)\n\n    getValue = ExpressionChildrenHavingBase.childGetter(\"value\")\n\n    def __init__(self, value, source_ref):\n        ExpressionChildrenHavingBase.__init__(\n            self, values={\"value\": value}, source_ref=source_ref\n        )\n\n",
        "source_code_len": 379,
        "target_code": "\nclass ExpressionBuiltinStaticmethod(ExpressionChildHavingBase):\n    kind = \"EXPRESSION_BUILTIN_STATICMETHOD\"\n\n    named_child = \"value\"\n    getValue = ExpressionChildHavingBase.childGetter(\"value\")\n\n    def __init__(self, value, source_ref):\n        ExpressionChildHavingBase.__init__(self, value=value, source_ref=source_ref)\n\n",
        "target_code_len": 329,
        "diff_format": "@@ -28,13 +28,10 @@\n \n-class ExpressionBuiltinStaticmethod(ExpressionChildrenHavingBase):\n+class ExpressionBuiltinStaticmethod(ExpressionChildHavingBase):\n     kind = \"EXPRESSION_BUILTIN_STATICMETHOD\"\n \n-    named_children = (\"value\",)\n-\n-    getValue = ExpressionChildrenHavingBase.childGetter(\"value\")\n+    named_child = \"value\"\n+    getValue = ExpressionChildHavingBase.childGetter(\"value\")\n \n     def __init__(self, value, source_ref):\n-        ExpressionChildrenHavingBase.__init__(\n-            self, values={\"value\": value}, source_ref=source_ref\n-        )\n+        ExpressionChildHavingBase.__init__(self, value=value, source_ref=source_ref)\n \n",
        "source_code_with_indent": "\nclass ExpressionBuiltinStaticmethod(ExpressionChildrenHavingBase):\n    <IND>kind = \"EXPRESSION_BUILTIN_STATICMETHOD\"\n\n    named_children = (\"value\",)\n\n    getValue = ExpressionChildrenHavingBase.childGetter(\"value\")\n\n    def __init__(self, value, source_ref):\n        <IND>ExpressionChildrenHavingBase.__init__(\n            self, values={\"value\": value}, source_ref=source_ref\n        )\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nclass ExpressionBuiltinStaticmethod(ExpressionChildHavingBase):\n    <IND>kind = \"EXPRESSION_BUILTIN_STATICMETHOD\"\n\n    named_child = \"value\"\n    getValue = ExpressionChildHavingBase.childGetter(\"value\")\n\n    def __init__(self, value, source_ref):\n        <IND>ExpressionChildHavingBase.__init__(self, value=value, source_ref=source_ref)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nclass ExpressionBuiltinClassmethod(ExpressionChildrenHavingBase):\n    kind = \"EXPRESSION_BUILTIN_CLASSMETHOD\"\n\n    named_children = (\"value\",)\n\n    getValue = ExpressionChildrenHavingBase.childGetter(\"value\")\n\n    def __init__(self, value, source_ref):\n        ExpressionChildrenHavingBase.__init__(\n            self, values={\"value\": value}, source_ref=source_ref\n        )\n\n",
        "source_code_len": 377,
        "target_code": "\nclass ExpressionBuiltinClassmethod(ExpressionChildHavingBase):\n    kind = \"EXPRESSION_BUILTIN_CLASSMETHOD\"\n\n    named_child = \"value\"\n    getValue = ExpressionChildHavingBase.childGetter(\"value\")\n\n    def __init__(self, value, source_ref):\n        ExpressionChildHavingBase.__init__(self, value=value, source_ref=source_ref)\n\n",
        "target_code_len": 327,
        "diff_format": "@@ -53,13 +50,10 @@\n \n-class ExpressionBuiltinClassmethod(ExpressionChildrenHavingBase):\n+class ExpressionBuiltinClassmethod(ExpressionChildHavingBase):\n     kind = \"EXPRESSION_BUILTIN_CLASSMETHOD\"\n \n-    named_children = (\"value\",)\n-\n-    getValue = ExpressionChildrenHavingBase.childGetter(\"value\")\n+    named_child = \"value\"\n+    getValue = ExpressionChildHavingBase.childGetter(\"value\")\n \n     def __init__(self, value, source_ref):\n-        ExpressionChildrenHavingBase.__init__(\n-            self, values={\"value\": value}, source_ref=source_ref\n-        )\n+        ExpressionChildHavingBase.__init__(self, value=value, source_ref=source_ref)\n \n",
        "source_code_with_indent": "\n<DED><DED>class ExpressionBuiltinClassmethod(ExpressionChildrenHavingBase):\n    <IND>kind = \"EXPRESSION_BUILTIN_CLASSMETHOD\"\n\n    named_children = (\"value\",)\n\n    getValue = ExpressionChildrenHavingBase.childGetter(\"value\")\n\n    def __init__(self, value, source_ref):\n        <IND>ExpressionChildrenHavingBase.__init__(\n            self, values={\"value\": value}, source_ref=source_ref\n        )\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED><DED>class ExpressionBuiltinClassmethod(ExpressionChildHavingBase):\n    <IND>kind = \"EXPRESSION_BUILTIN_CLASSMETHOD\"\n\n    named_child = \"value\"\n    getValue = ExpressionChildHavingBase.childGetter(\"value\")\n\n    def __init__(self, value, source_ref):\n        <IND>ExpressionChildHavingBase.__init__(self, value=value, source_ref=source_ref)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Nuitka/Nuitka",
    "commit": "55829dea6e09138daa9dc95914217ef30320a69b",
    "filename": "nuitka/nodes/BuiltinHashNodes.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Nuitka-Nuitka/nuitka/nodes/BuiltinHashNodes.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "nuitka/nodes/BuiltinHashNodes.py:32:4 Inconsistent override [15]: `named_children` overrides attribute defined in `nuitka.nodes.NodeBases.ChildrenHavingMixin` inconsistently. Type `typing.Tuple[str]` is not a subtype of the overridden attribute `typing.Tuple[]`.",
    "message": " `named_children` overrides attribute defined in `nuitka.nodes.NodeBases.ChildrenHavingMixin` inconsistently. Type `typing.Tuple[str]` is not a subtype of the overridden attribute `typing.Tuple[]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 32,
    "warning_line": "    named_children = (\"value\",)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom .ExpressionBases import ExpressionChildrenHavingBase\n\n\nclass ExpressionBuiltinHash(ExpressionChildrenHavingBase):\n    kind = \"EXPRESSION_BUILTIN_HASH\"\n\n    named_children = (\"value\",)\n\n    def __init__(self, value, source_ref):\n        ExpressionChildrenHavingBase.__init__(\n            self, values={\"value\": value}, source_ref=source_ref\n        )\n\n    getValue = ExpressionChildrenHavingBase.childGetter(\"value\")\n\n",
        "source_code_len": 423,
        "target_code": "\nfrom .ExpressionBases import ExpressionChildHavingBase\n\n\nclass ExpressionBuiltinHash(ExpressionChildHavingBase):\n    kind = \"EXPRESSION_BUILTIN_HASH\"\n\n    named_child = \"value\"\n    getValue = ExpressionChildHavingBase.childGetter(\"value\")\n\n    def __init__(self, value, source_ref):\n        ExpressionChildHavingBase.__init__(self, value=value, source_ref=source_ref)\n\n",
        "target_code_len": 370,
        "diff_format": "@@ -25,16 +25,13 @@\n \n-from .ExpressionBases import ExpressionChildrenHavingBase\n+from .ExpressionBases import ExpressionChildHavingBase\n \n \n-class ExpressionBuiltinHash(ExpressionChildrenHavingBase):\n+class ExpressionBuiltinHash(ExpressionChildHavingBase):\n     kind = \"EXPRESSION_BUILTIN_HASH\"\n \n-    named_children = (\"value\",)\n+    named_child = \"value\"\n+    getValue = ExpressionChildHavingBase.childGetter(\"value\")\n \n     def __init__(self, value, source_ref):\n-        ExpressionChildrenHavingBase.__init__(\n-            self, values={\"value\": value}, source_ref=source_ref\n-        )\n-\n-    getValue = ExpressionChildrenHavingBase.childGetter(\"value\")\n+        ExpressionChildHavingBase.__init__(self, value=value, source_ref=source_ref)\n \n",
        "source_code_with_indent": "\nfrom .ExpressionBases import ExpressionChildrenHavingBase\n\n\nclass ExpressionBuiltinHash(ExpressionChildrenHavingBase):\n    <IND>kind = \"EXPRESSION_BUILTIN_HASH\"\n\n    named_children = (\"value\",)\n\n    def __init__(self, value, source_ref):\n        <IND>ExpressionChildrenHavingBase.__init__(\n            self, values={\"value\": value}, source_ref=source_ref\n        )\n\n    <DED>getValue = ExpressionChildrenHavingBase.childGetter(\"value\")\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom .ExpressionBases import ExpressionChildHavingBase\n\n\nclass ExpressionBuiltinHash(ExpressionChildHavingBase):\n    <IND>kind = \"EXPRESSION_BUILTIN_HASH\"\n\n    named_child = \"value\"\n    getValue = ExpressionChildHavingBase.childGetter(\"value\")\n\n    def __init__(self, value, source_ref):\n        <IND>ExpressionChildHavingBase.__init__(self, value=value, source_ref=source_ref)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Nuitka/Nuitka",
    "commit": "55829dea6e09138daa9dc95914217ef30320a69b",
    "filename": "nuitka/nodes/BuiltinIntegerNodes.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Nuitka-Nuitka/nuitka/nodes/BuiltinIntegerNodes.py",
    "file_hunks_size": 6,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "nuitka/nodes/BuiltinIntegerNodes.py:47:4 Inconsistent override [15]: `named_children` overrides attribute defined in `nuitka.nodes.NodeBases.ChildrenHavingMixin` inconsistently. Type `typing.Tuple[str]` is not a subtype of the overridden attribute `typing.Tuple[]`.",
    "message": " `named_children` overrides attribute defined in `nuitka.nodes.NodeBases.ChildrenHavingMixin` inconsistently. Type `typing.Tuple[str]` is not a subtype of the overridden attribute `typing.Tuple[]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 47,
    "warning_line": "    named_children = (\"value\",)"
  },
  {
    "project": "Nuitka/Nuitka",
    "commit": "55829dea6e09138daa9dc95914217ef30320a69b",
    "filename": "nuitka/nodes/BuiltinIntegerNodes.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Nuitka-Nuitka/nuitka/nodes/BuiltinIntegerNodes.py",
    "file_hunks_size": 6,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "nuitka/nodes/BuiltinIntegerNodes.py:134:8 Inconsistent override [15]: `named_children` overrides attribute defined in `nuitka.nodes.NodeBases.ChildrenHavingMixin` inconsistently. Type `typing.Tuple[str]` is not a subtype of the overridden attribute `typing.Tuple[]`.",
    "message": " `named_children` overrides attribute defined in `nuitka.nodes.NodeBases.ChildrenHavingMixin` inconsistently. Type `typing.Tuple[str]` is not a subtype of the overridden attribute `typing.Tuple[]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 134,
    "warning_line": "        named_children = (\"value\",)"
  },
  {
    "project": "Nuitka/Nuitka",
    "commit": "55829dea6e09138daa9dc95914217ef30320a69b",
    "filename": "nuitka/nodes/BuiltinRangeNodes.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Nuitka-Nuitka/nuitka/nodes/BuiltinRangeNodes.py",
    "file_hunks_size": 21,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "nuitka/nodes/BuiltinRangeNodes.py:165:4 Inconsistent override [15]: `named_children` overrides attribute defined in `nuitka.nodes.NodeBases.ChildrenHavingMixin` inconsistently. Type `typing.Tuple[str]` is not a subtype of the overridden attribute `typing.Tuple[]`.",
    "message": " `named_children` overrides attribute defined in `nuitka.nodes.NodeBases.ChildrenHavingMixin` inconsistently. Type `typing.Tuple[str]` is not a subtype of the overridden attribute `typing.Tuple[]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 165,
    "warning_line": "    named_children = (\"low\",)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom .ExpressionBases import ExpressionChildrenHavingBase\nfrom .IterationHandles import (\n",
        "source_code_len": 91,
        "target_code": "\nfrom .ExpressionBases import ExpressionChildHavingBase, ExpressionChildrenHavingBase\nfrom .IterationHandles import (\n",
        "target_code_len": 118,
        "diff_format": "@@ -30,3 +30,3 @@\n \n-from .ExpressionBases import ExpressionChildrenHavingBase\n+from .ExpressionBases import ExpressionChildHavingBase, ExpressionChildrenHavingBase\n from .IterationHandles import (\n",
        "source_code_with_indent": "\nfrom .ExpressionBases import ExpressionChildrenHavingBase\nfrom .IterationHandles import (\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom .ExpressionBases import ExpressionChildHavingBase, ExpressionChildrenHavingBase\nfrom .IterationHandles import (\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nclass ExpressionBuiltinRangeBase(ExpressionChildrenHavingBase):\n    \"\"\" Base class for range nodes with 1/2/3 arguments. \"\"\"\n\n",
        "source_code_len": 127,
        "target_code": "\nclass ExpressionBuiltinRangeMixin(object):\n    \"\"\" Mixin class for range nodes with 1/2/3 arguments. \"\"\"\n\n",
        "target_code_len": 107,
        "diff_format": "@@ -40,4 +40,4 @@\n \n-class ExpressionBuiltinRangeBase(ExpressionChildrenHavingBase):\n-    \"\"\" Base class for range nodes with 1/2/3 arguments. \"\"\"\n+class ExpressionBuiltinRangeMixin(object):\n+    \"\"\" Mixin class for range nodes with 1/2/3 arguments. \"\"\"\n \n",
        "source_code_with_indent": "\nclass ExpressionBuiltinRangeBase(ExpressionChildrenHavingBase):\n    <IND>\"\"\" Base class for range nodes with 1/2/3 arguments. \"\"\"\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nclass ExpressionBuiltinRangeMixin(object):\n    <IND>\"\"\" Mixin class for range nodes with 1/2/3 arguments. \"\"\"\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nclass ExpressionBuiltinRange1(ExpressionBuiltinRangeBase):\n    kind = \"EXPRESSION_BUILTIN_RANGE1\"\n\n    named_children = (\"low\",)\n\n",
        "source_code_len": 131,
        "target_code": "\nclass ExpressionBuiltinRange1(ExpressionBuiltinRangeMixin, ExpressionChildHavingBase):\n    kind = \"EXPRESSION_BUILTIN_RANGE1\"\n\n    named_child = \"low\"\n    getLow = ExpressionChildrenHavingBase.childGetter(\"low\")\n\n",
        "target_code_len": 214,
        "diff_format": "@@ -161,6 +157,7 @@\n \n-class ExpressionBuiltinRange1(ExpressionBuiltinRangeBase):\n+class ExpressionBuiltinRange1(ExpressionBuiltinRangeMixin, ExpressionChildHavingBase):\n     kind = \"EXPRESSION_BUILTIN_RANGE1\"\n \n-    named_children = (\"low\",)\n+    named_child = \"low\"\n+    getLow = ExpressionChildrenHavingBase.childGetter(\"low\")\n \n",
        "source_code_with_indent": "\n<DED><DED>class ExpressionBuiltinRange1(ExpressionBuiltinRangeBase):\n    <IND>kind = \"EXPRESSION_BUILTIN_RANGE1\"\n\n    named_children = (\"low\",)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED><DED>class ExpressionBuiltinRange1(ExpressionBuiltinRangeMixin, ExpressionChildHavingBase):\n    <IND>kind = \"EXPRESSION_BUILTIN_RANGE1\"\n\n    named_child = \"low\"\n    getLow = ExpressionChildrenHavingBase.childGetter(\"low\")\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nclass ExpressionBuiltinRange2(ExpressionBuiltinRangeBase):\n    kind = \"EXPRESSION_BUILTIN_RANGE2\"\n",
        "source_code_len": 99,
        "target_code": "\nclass ExpressionBuiltinRange2(\n    ExpressionBuiltinRangeMixin, ExpressionChildrenHavingBase\n):\n    kind = \"EXPRESSION_BUILTIN_RANGE2\"\n",
        "target_code_len": 136,
        "diff_format": "@@ -215,3 +208,5 @@\n \n-class ExpressionBuiltinRange2(ExpressionBuiltinRangeBase):\n+class ExpressionBuiltinRange2(\n+    ExpressionBuiltinRangeMixin, ExpressionChildrenHavingBase\n+):\n     kind = \"EXPRESSION_BUILTIN_RANGE2\"\n",
        "source_code_with_indent": "\n<DED><DED>class ExpressionBuiltinRange2(ExpressionBuiltinRangeBase):\n    <IND>kind = \"EXPRESSION_BUILTIN_RANGE2\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED><DED>class ExpressionBuiltinRange2(\n    ExpressionBuiltinRangeMixin, ExpressionChildrenHavingBase\n):\n    <IND>kind = \"EXPRESSION_BUILTIN_RANGE2\"\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nclass ExpressionBuiltinRange3(ExpressionBuiltinRangeBase):\n    kind = \"EXPRESSION_BUILTIN_RANGE3\"\n",
        "source_code_len": 99,
        "target_code": "\nclass ExpressionBuiltinRange3(\n    ExpressionBuiltinRangeMixin, ExpressionChildrenHavingBase\n):\n    kind = \"EXPRESSION_BUILTIN_RANGE3\"\n",
        "target_code_len": 136,
        "diff_format": "@@ -292,3 +286,5 @@\n \n-class ExpressionBuiltinRange3(ExpressionBuiltinRangeBase):\n+class ExpressionBuiltinRange3(\n+    ExpressionBuiltinRangeMixin, ExpressionChildrenHavingBase\n+):\n     kind = \"EXPRESSION_BUILTIN_RANGE3\"\n",
        "source_code_with_indent": "\n<DED><DED>class ExpressionBuiltinRange3(ExpressionBuiltinRangeBase):\n    <IND>kind = \"EXPRESSION_BUILTIN_RANGE3\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED><DED>class ExpressionBuiltinRange3(\n    ExpressionBuiltinRangeMixin, ExpressionChildrenHavingBase\n):\n    <IND>kind = \"EXPRESSION_BUILTIN_RANGE3\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Nuitka/Nuitka",
    "commit": "55829dea6e09138daa9dc95914217ef30320a69b",
    "filename": "nuitka/nodes/BuiltinRangeNodes.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Nuitka-Nuitka/nuitka/nodes/BuiltinRangeNodes.py",
    "file_hunks_size": 21,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "nuitka/nodes/BuiltinRangeNodes.py:496:4 Inconsistent override [15]: `named_children` overrides attribute defined in `nuitka.nodes.NodeBases.ChildrenHavingMixin` inconsistently. Type `typing.Tuple[str]` is not a subtype of the overridden attribute `typing.Tuple[]`.",
    "message": " `named_children` overrides attribute defined in `nuitka.nodes.NodeBases.ChildrenHavingMixin` inconsistently. Type `typing.Tuple[str]` is not a subtype of the overridden attribute `typing.Tuple[]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 496,
    "warning_line": "    named_children = (\"low\",)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom .ExpressionBases import ExpressionChildrenHavingBase\nfrom .IterationHandles import (\n",
        "source_code_len": 91,
        "target_code": "\nfrom .ExpressionBases import ExpressionChildHavingBase, ExpressionChildrenHavingBase\nfrom .IterationHandles import (\n",
        "target_code_len": 118,
        "diff_format": "@@ -30,3 +30,3 @@\n \n-from .ExpressionBases import ExpressionChildrenHavingBase\n+from .ExpressionBases import ExpressionChildHavingBase, ExpressionChildrenHavingBase\n from .IterationHandles import (\n",
        "source_code_with_indent": "\nfrom .ExpressionBases import ExpressionChildrenHavingBase\nfrom .IterationHandles import (\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom .ExpressionBases import ExpressionChildHavingBase, ExpressionChildrenHavingBase\nfrom .IterationHandles import (\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nclass ExpressionBuiltinRangeBase(ExpressionChildrenHavingBase):\n    \"\"\" Base class for range nodes with 1/2/3 arguments. \"\"\"\n\n",
        "source_code_len": 127,
        "target_code": "\nclass ExpressionBuiltinRangeMixin(object):\n    \"\"\" Mixin class for range nodes with 1/2/3 arguments. \"\"\"\n\n",
        "target_code_len": 107,
        "diff_format": "@@ -40,4 +40,4 @@\n \n-class ExpressionBuiltinRangeBase(ExpressionChildrenHavingBase):\n-    \"\"\" Base class for range nodes with 1/2/3 arguments. \"\"\"\n+class ExpressionBuiltinRangeMixin(object):\n+    \"\"\" Mixin class for range nodes with 1/2/3 arguments. \"\"\"\n \n",
        "source_code_with_indent": "\nclass ExpressionBuiltinRangeBase(ExpressionChildrenHavingBase):\n    <IND>\"\"\" Base class for range nodes with 1/2/3 arguments. \"\"\"\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nclass ExpressionBuiltinRangeMixin(object):\n    <IND>\"\"\" Mixin class for range nodes with 1/2/3 arguments. \"\"\"\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nclass ExpressionBuiltinRange1(ExpressionBuiltinRangeBase):\n    kind = \"EXPRESSION_BUILTIN_RANGE1\"\n\n    named_children = (\"low\",)\n\n",
        "source_code_len": 131,
        "target_code": "\nclass ExpressionBuiltinRange1(ExpressionBuiltinRangeMixin, ExpressionChildHavingBase):\n    kind = \"EXPRESSION_BUILTIN_RANGE1\"\n\n    named_child = \"low\"\n    getLow = ExpressionChildrenHavingBase.childGetter(\"low\")\n\n",
        "target_code_len": 214,
        "diff_format": "@@ -161,6 +157,7 @@\n \n-class ExpressionBuiltinRange1(ExpressionBuiltinRangeBase):\n+class ExpressionBuiltinRange1(ExpressionBuiltinRangeMixin, ExpressionChildHavingBase):\n     kind = \"EXPRESSION_BUILTIN_RANGE1\"\n \n-    named_children = (\"low\",)\n+    named_child = \"low\"\n+    getLow = ExpressionChildrenHavingBase.childGetter(\"low\")\n \n",
        "source_code_with_indent": "\n<DED><DED>class ExpressionBuiltinRange1(ExpressionBuiltinRangeBase):\n    <IND>kind = \"EXPRESSION_BUILTIN_RANGE1\"\n\n    named_children = (\"low\",)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED><DED>class ExpressionBuiltinRange1(ExpressionBuiltinRangeMixin, ExpressionChildHavingBase):\n    <IND>kind = \"EXPRESSION_BUILTIN_RANGE1\"\n\n    named_child = \"low\"\n    getLow = ExpressionChildrenHavingBase.childGetter(\"low\")\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nclass ExpressionBuiltinRange2(ExpressionBuiltinRangeBase):\n    kind = \"EXPRESSION_BUILTIN_RANGE2\"\n",
        "source_code_len": 99,
        "target_code": "\nclass ExpressionBuiltinRange2(\n    ExpressionBuiltinRangeMixin, ExpressionChildrenHavingBase\n):\n    kind = \"EXPRESSION_BUILTIN_RANGE2\"\n",
        "target_code_len": 136,
        "diff_format": "@@ -215,3 +208,5 @@\n \n-class ExpressionBuiltinRange2(ExpressionBuiltinRangeBase):\n+class ExpressionBuiltinRange2(\n+    ExpressionBuiltinRangeMixin, ExpressionChildrenHavingBase\n+):\n     kind = \"EXPRESSION_BUILTIN_RANGE2\"\n",
        "source_code_with_indent": "\n<DED><DED>class ExpressionBuiltinRange2(ExpressionBuiltinRangeBase):\n    <IND>kind = \"EXPRESSION_BUILTIN_RANGE2\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED><DED>class ExpressionBuiltinRange2(\n    ExpressionBuiltinRangeMixin, ExpressionChildrenHavingBase\n):\n    <IND>kind = \"EXPRESSION_BUILTIN_RANGE2\"\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nclass ExpressionBuiltinRange3(ExpressionBuiltinRangeBase):\n    kind = \"EXPRESSION_BUILTIN_RANGE3\"\n",
        "source_code_len": 99,
        "target_code": "\nclass ExpressionBuiltinRange3(\n    ExpressionBuiltinRangeMixin, ExpressionChildrenHavingBase\n):\n    kind = \"EXPRESSION_BUILTIN_RANGE3\"\n",
        "target_code_len": 136,
        "diff_format": "@@ -292,3 +286,5 @@\n \n-class ExpressionBuiltinRange3(ExpressionBuiltinRangeBase):\n+class ExpressionBuiltinRange3(\n+    ExpressionBuiltinRangeMixin, ExpressionChildrenHavingBase\n+):\n     kind = \"EXPRESSION_BUILTIN_RANGE3\"\n",
        "source_code_with_indent": "\n<DED><DED>class ExpressionBuiltinRange3(ExpressionBuiltinRangeBase):\n    <IND>kind = \"EXPRESSION_BUILTIN_RANGE3\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED><DED>class ExpressionBuiltinRange3(\n    ExpressionBuiltinRangeMixin, ExpressionChildrenHavingBase\n):\n    <IND>kind = \"EXPRESSION_BUILTIN_RANGE3\"\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nclass ExpressionBuiltinXrangeBase(ExpressionChildrenHavingBase):\n    \"\"\" Base class for xrange nodes with 1/2/3 arguments. \"\"\"\n\n",
        "source_code_len": 129,
        "target_code": "\nclass ExpressionBuiltinXrangeMixin(object):\n    \"\"\" Mixin class for xrange nodes with 1/2/3 arguments. \"\"\"\n\n",
        "target_code_len": 109,
        "diff_format": "@@ -406,4 +401,4 @@\n \n-class ExpressionBuiltinXrangeBase(ExpressionChildrenHavingBase):\n-    \"\"\" Base class for xrange nodes with 1/2/3 arguments. \"\"\"\n+class ExpressionBuiltinXrangeMixin(object):\n+    \"\"\" Mixin class for xrange nodes with 1/2/3 arguments. \"\"\"\n \n",
        "source_code_with_indent": "\n<DED><DED>class ExpressionBuiltinXrangeBase(ExpressionChildrenHavingBase):\n    <IND>\"\"\" Base class for xrange nodes with 1/2/3 arguments. \"\"\"\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED><DED>class ExpressionBuiltinXrangeMixin(object):\n    <IND>\"\"\" Mixin class for xrange nodes with 1/2/3 arguments. \"\"\"\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nclass ExpressionBuiltinXrange1(ExpressionBuiltinXrangeBase):\n    kind = \"EXPRESSION_BUILTIN_XRANGE1\"\n\n    named_children = (\"low\",)\n\n    def __init__(self, low, source_ref):\n        ExpressionBuiltinXrangeBase.__init__(\n            self, values={\"low\": low}, source_ref=source_ref\n        )\n\n",
        "source_code_len": 293,
        "target_code": "\nclass ExpressionBuiltinXrange1(ExpressionBuiltinXrangeMixin, ExpressionChildHavingBase):\n    kind = \"EXPRESSION_BUILTIN_XRANGE1\"\n\n    named_child = \"low\"\n    getLow = ExpressionChildrenHavingBase.childGetter(\"low\")\n\n    def __init__(self, low, source_ref):\n        ExpressionChildHavingBase.__init__(self, value=low, source_ref=source_ref)\n\n",
        "target_code_len": 342,
        "diff_format": "@@ -492,11 +484,10 @@\n \n-class ExpressionBuiltinXrange1(ExpressionBuiltinXrangeBase):\n+class ExpressionBuiltinXrange1(ExpressionBuiltinXrangeMixin, ExpressionChildHavingBase):\n     kind = \"EXPRESSION_BUILTIN_XRANGE1\"\n \n-    named_children = (\"low\",)\n+    named_child = \"low\"\n+    getLow = ExpressionChildrenHavingBase.childGetter(\"low\")\n \n     def __init__(self, low, source_ref):\n-        ExpressionBuiltinXrangeBase.__init__(\n-            self, values={\"low\": low}, source_ref=source_ref\n-        )\n+        ExpressionChildHavingBase.__init__(self, value=low, source_ref=source_ref)\n \n",
        "source_code_with_indent": "\n<DED><DED>class ExpressionBuiltinXrange1(ExpressionBuiltinXrangeBase):\n    <IND>kind = \"EXPRESSION_BUILTIN_XRANGE1\"\n\n    named_children = (\"low\",)\n\n    def __init__(self, low, source_ref):\n        <IND>ExpressionBuiltinXrangeBase.__init__(\n            self, values={\"low\": low}, source_ref=source_ref\n        )\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED><DED>class ExpressionBuiltinXrange1(ExpressionBuiltinXrangeMixin, ExpressionChildHavingBase):\n    <IND>kind = \"EXPRESSION_BUILTIN_XRANGE1\"\n\n    named_child = \"low\"\n    getLow = ExpressionChildrenHavingBase.childGetter(\"low\")\n\n    def __init__(self, low, source_ref):\n        <IND>ExpressionChildHavingBase.__init__(self, value=low, source_ref=source_ref)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nclass ExpressionBuiltinXrange2(ExpressionBuiltinXrangeBase):\n    kind = \"EXPRESSION_BUILTIN_XRANGE2\"\n",
        "source_code_len": 102,
        "target_code": "\nclass ExpressionBuiltinXrange2(\n    ExpressionBuiltinXrangeMixin, ExpressionChildrenHavingBase\n):\n    kind = \"EXPRESSION_BUILTIN_XRANGE2\"\n",
        "target_code_len": 139,
        "diff_format": "@@ -534,3 +523,5 @@\n \n-class ExpressionBuiltinXrange2(ExpressionBuiltinXrangeBase):\n+class ExpressionBuiltinXrange2(\n+    ExpressionBuiltinXrangeMixin, ExpressionChildrenHavingBase\n+):\n     kind = \"EXPRESSION_BUILTIN_XRANGE2\"\n",
        "source_code_with_indent": "\n<DED><DED>class ExpressionBuiltinXrange2(ExpressionBuiltinXrangeBase):\n    <IND>kind = \"EXPRESSION_BUILTIN_XRANGE2\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED><DED>class ExpressionBuiltinXrange2(\n    ExpressionBuiltinXrangeMixin, ExpressionChildrenHavingBase\n):\n    <IND>kind = \"EXPRESSION_BUILTIN_XRANGE2\"\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    getLow = ExpressionChildrenHavingBase.childGetter(\"low\")\n    getHigh = ExpressionChildrenHavingBase.childGetter(\"high\")\n\n\nclass ExpressionBuiltinXrange3(ExpressionBuiltinXrangeBase):\n    kind = \"EXPRESSION_BUILTIN_XRANGE3\"\n",
        "source_code_len": 228,
        "target_code": "\n\nclass ExpressionBuiltinXrange3(\n    ExpressionBuiltinXrangeMixin, ExpressionChildrenHavingBase\n):\n    kind = \"EXPRESSION_BUILTIN_XRANGE3\"\n",
        "target_code_len": 140,
        "diff_format": "@@ -589,7 +582,6 @@\n \n-    getLow = ExpressionChildrenHavingBase.childGetter(\"low\")\n-    getHigh = ExpressionChildrenHavingBase.childGetter(\"high\")\n-\n-\n-class ExpressionBuiltinXrange3(ExpressionBuiltinXrangeBase):\n+\n+class ExpressionBuiltinXrange3(\n+    ExpressionBuiltinXrangeMixin, ExpressionChildrenHavingBase\n+):\n     kind = \"EXPRESSION_BUILTIN_XRANGE3\"\n",
        "source_code_with_indent": "\n    <DED><DED>getLow = ExpressionChildrenHavingBase.childGetter(\"low\")\n    getHigh = ExpressionChildrenHavingBase.childGetter(\"high\")\n\n\n<DED>class ExpressionBuiltinXrange3(ExpressionBuiltinXrangeBase):\n    <IND>kind = \"EXPRESSION_BUILTIN_XRANGE3\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n\n<DED><DED><DED>class ExpressionBuiltinXrange3(\n    ExpressionBuiltinXrangeMixin, ExpressionChildrenHavingBase\n):\n    <IND>kind = \"EXPRESSION_BUILTIN_XRANGE3\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Nuitka/Nuitka",
    "commit": "55829dea6e09138daa9dc95914217ef30320a69b",
    "filename": "nuitka/nodes/BuiltinSumNodes.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Nuitka-Nuitka/nuitka/nodes/BuiltinSumNodes.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "nuitka/nodes/BuiltinSumNodes.py:60:4 Inconsistent override [15]: `named_children` overrides attribute defined in `nuitka.nodes.NodeBases.ChildrenHavingMixin` inconsistently. Type `typing.Tuple[str]` is not a subtype of the overridden attribute `typing.Tuple[]`.",
    "message": " `named_children` overrides attribute defined in `nuitka.nodes.NodeBases.ChildrenHavingMixin` inconsistently. Type `typing.Tuple[str]` is not a subtype of the overridden attribute `typing.Tuple[]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 60,
    "warning_line": "    named_children = (\"sequence\",)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom .ExpressionBases import ExpressionChildrenHavingBase\n\n\nclass ExpressionBuiltinSumBase(ExpressionChildrenHavingBase):\n\n    builtin_spec = BuiltinParameterSpecs.builtin_sum_spec\n\n    def __init__(self, values, source_ref):\n        ExpressionChildrenHavingBase.__init__(\n            self, values=values, source_ref=source_ref\n        )\n\n",
        "source_code_len": 340,
        "target_code": "\nfrom .ExpressionBases import ExpressionChildHavingBase, ExpressionChildrenHavingBase\n\n\nclass ExpressionBuiltinSumMixin(object):\n\n    builtin_spec = BuiltinParameterSpecs.builtin_sum_spec\n\n",
        "target_code_len": 189,
        "diff_format": "@@ -26,13 +26,8 @@\n \n-from .ExpressionBases import ExpressionChildrenHavingBase\n+from .ExpressionBases import ExpressionChildHavingBase, ExpressionChildrenHavingBase\n \n \n-class ExpressionBuiltinSumBase(ExpressionChildrenHavingBase):\n+class ExpressionBuiltinSumMixin(object):\n \n     builtin_spec = BuiltinParameterSpecs.builtin_sum_spec\n-\n-    def __init__(self, values, source_ref):\n-        ExpressionChildrenHavingBase.__init__(\n-            self, values=values, source_ref=source_ref\n-        )\n \n",
        "source_code_with_indent": "\nfrom .ExpressionBases import ExpressionChildrenHavingBase\n\n\nclass ExpressionBuiltinSumBase(ExpressionChildrenHavingBase):\n\n    <IND>builtin_spec = BuiltinParameterSpecs.builtin_sum_spec\n\n    def __init__(self, values, source_ref):\n        <IND>ExpressionChildrenHavingBase.__init__(\n            self, values=values, source_ref=source_ref\n        )\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom .ExpressionBases import ExpressionChildHavingBase, ExpressionChildrenHavingBase\n\n\nclass ExpressionBuiltinSumMixin(object):\n\n    <IND>builtin_spec = BuiltinParameterSpecs.builtin_sum_spec\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nclass ExpressionBuiltinSum1(ExpressionBuiltinSumBase):\n    kind = \"EXPRESSION_BUILTIN_SUM1\"\n\n    named_children = (\"sequence\",)\n\n",
        "source_code_len": 130,
        "target_code": "\nclass ExpressionBuiltinSum1(ExpressionBuiltinSumMixin, ExpressionChildHavingBase):\n    kind = \"EXPRESSION_BUILTIN_SUM1\"\n\n    named_child = \"sequence\"\n    getSequence = ExpressionChildHavingBase.childGetter(\"sequence\")\n\n",
        "target_code_len": 220,
        "diff_format": "@@ -56,6 +51,7 @@\n \n-class ExpressionBuiltinSum1(ExpressionBuiltinSumBase):\n+class ExpressionBuiltinSum1(ExpressionBuiltinSumMixin, ExpressionChildHavingBase):\n     kind = \"EXPRESSION_BUILTIN_SUM1\"\n \n-    named_children = (\"sequence\",)\n+    named_child = \"sequence\"\n+    getSequence = ExpressionChildHavingBase.childGetter(\"sequence\")\n \n",
        "source_code_with_indent": "\n<DED><DED>class ExpressionBuiltinSum1(ExpressionBuiltinSumBase):\n    <IND>kind = \"EXPRESSION_BUILTIN_SUM1\"\n\n    named_children = (\"sequence\",)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED><DED>class ExpressionBuiltinSum1(ExpressionBuiltinSumMixin, ExpressionChildHavingBase):\n    <IND>kind = \"EXPRESSION_BUILTIN_SUM1\"\n\n    named_child = \"sequence\"\n    getSequence = ExpressionChildHavingBase.childGetter(\"sequence\")\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nclass ExpressionBuiltinSum2(ExpressionBuiltinSumBase):\n    kind = \"EXPRESSION_BUILTIN_SUM2\"\n",
        "source_code_len": 93,
        "target_code": "\nclass ExpressionBuiltinSum2(ExpressionBuiltinSumMixin, ExpressionChildrenHavingBase):\n    kind = \"EXPRESSION_BUILTIN_SUM2\"\n",
        "target_code_len": 124,
        "diff_format": "@@ -79,3 +71,3 @@\n \n-class ExpressionBuiltinSum2(ExpressionBuiltinSumBase):\n+class ExpressionBuiltinSum2(ExpressionBuiltinSumMixin, ExpressionChildrenHavingBase):\n     kind = \"EXPRESSION_BUILTIN_SUM2\"\n",
        "source_code_with_indent": "\n<DED><DED>class ExpressionBuiltinSum2(ExpressionBuiltinSumBase):\n    <IND>kind = \"EXPRESSION_BUILTIN_SUM2\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED><DED>class ExpressionBuiltinSum2(ExpressionBuiltinSumMixin, ExpressionChildrenHavingBase):\n    <IND>kind = \"EXPRESSION_BUILTIN_SUM2\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Nuitka/Nuitka",
    "commit": "55829dea6e09138daa9dc95914217ef30320a69b",
    "filename": "nuitka/nodes/BuiltinTypeNodes.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Nuitka-Nuitka/nuitka/nodes/BuiltinTypeNodes.py",
    "file_hunks_size": 11,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "nuitka/nodes/BuiltinTypeNodes.py:59:4 Inconsistent override [15]: `named_children` overrides attribute defined in `nuitka.nodes.NodeBases.ChildrenHavingMixin` inconsistently. Type `typing.Tuple[str]` is not a subtype of the overridden attribute `typing.Tuple[]`.",
    "message": " `named_children` overrides attribute defined in `nuitka.nodes.NodeBases.ChildrenHavingMixin` inconsistently. Type `typing.Tuple[str]` is not a subtype of the overridden attribute `typing.Tuple[]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 59,
    "warning_line": "    named_children = (\"value\",)"
  },
  {
    "project": "Nuitka/Nuitka",
    "commit": "55829dea6e09138daa9dc95914217ef30320a69b",
    "filename": "nuitka/nodes/BuiltinTypeNodes.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Nuitka-Nuitka/nuitka/nodes/BuiltinTypeNodes.py",
    "file_hunks_size": 11,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "nuitka/nodes/BuiltinTypeNodes.py:127:4 Inconsistent override [15]: `named_children` overrides attribute defined in `nuitka.nodes.NodeBases.ChildrenHavingMixin` inconsistently. Type `typing.Tuple[str]` is not a subtype of the overridden attribute `typing.Tuple[]`.",
    "message": " `named_children` overrides attribute defined in `nuitka.nodes.NodeBases.ChildrenHavingMixin` inconsistently. Type `typing.Tuple[str]` is not a subtype of the overridden attribute `typing.Tuple[]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 127,
    "warning_line": "    named_children = (\"value\",)"
  },
  {
    "project": "Nuitka/Nuitka",
    "commit": "55829dea6e09138daa9dc95914217ef30320a69b",
    "filename": "nuitka/nodes/BuiltinTypeNodes.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Nuitka-Nuitka/nuitka/nodes/BuiltinTypeNodes.py",
    "file_hunks_size": 11,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "nuitka/nodes/BuiltinTypeNodes.py:271:8 Inconsistent override [15]: `named_children` overrides attribute defined in `nuitka.nodes.NodeBases.ChildrenHavingMixin` inconsistently. Type `typing.Tuple[str]` is not a subtype of the overridden attribute `typing.Tuple[]`.",
    "message": " `named_children` overrides attribute defined in `nuitka.nodes.NodeBases.ChildrenHavingMixin` inconsistently. Type `typing.Tuple[str]` is not a subtype of the overridden attribute `typing.Tuple[]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 271,
    "warning_line": "        named_children = (\"value\",)"
  },
  {
    "project": "Nuitka/Nuitka",
    "commit": "55829dea6e09138daa9dc95914217ef30320a69b",
    "filename": "nuitka/nodes/BuiltinVarsNodes.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Nuitka-Nuitka/nuitka/nodes/BuiltinVarsNodes.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "nuitka/nodes/BuiltinVarsNodes.py:31:4 Inconsistent override [15]: `named_children` overrides attribute defined in `nuitka.nodes.NodeBases.ChildrenHavingMixin` inconsistently. Type `typing.Tuple[str]` is not a subtype of the overridden attribute `typing.Tuple[]`.",
    "message": " `named_children` overrides attribute defined in `nuitka.nodes.NodeBases.ChildrenHavingMixin` inconsistently. Type `typing.Tuple[str]` is not a subtype of the overridden attribute `typing.Tuple[]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 31,
    "warning_line": "    named_children = (\"source\",)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom .ExpressionBases import ExpressionChildrenHavingBase\n\n\nclass ExpressionBuiltinVars(ExpressionChildrenHavingBase):\n    kind = \"EXPRESSION_BUILTIN_VARS\"\n\n    named_children = (\"source\",)\n\n    def __init__(self, source, source_ref):\n        ExpressionChildrenHavingBase.__init__(\n            self, values={\"source\": source}, source_ref=source_ref\n        )\n\n    getSource = ExpressionChildrenHavingBase.childGetter(\"source\")\n\n",
        "source_code_len": 429,
        "target_code": "\nfrom .ExpressionBases import ExpressionChildHavingBase\n\n\nclass ExpressionBuiltinVars(ExpressionChildHavingBase):\n    kind = \"EXPRESSION_BUILTIN_VARS\"\n\n    named_child = \"source\"\n    getSource = ExpressionChildHavingBase.childGetter(\"source\")\n\n    def __init__(self, source, source_ref):\n        ExpressionChildHavingBase.__init__(self, value=source, source_ref=source_ref)\n\n",
        "target_code_len": 375,
        "diff_format": "@@ -24,16 +24,13 @@\n \n-from .ExpressionBases import ExpressionChildrenHavingBase\n+from .ExpressionBases import ExpressionChildHavingBase\n \n \n-class ExpressionBuiltinVars(ExpressionChildrenHavingBase):\n+class ExpressionBuiltinVars(ExpressionChildHavingBase):\n     kind = \"EXPRESSION_BUILTIN_VARS\"\n \n-    named_children = (\"source\",)\n+    named_child = \"source\"\n+    getSource = ExpressionChildHavingBase.childGetter(\"source\")\n \n     def __init__(self, source, source_ref):\n-        ExpressionChildrenHavingBase.__init__(\n-            self, values={\"source\": source}, source_ref=source_ref\n-        )\n-\n-    getSource = ExpressionChildrenHavingBase.childGetter(\"source\")\n+        ExpressionChildHavingBase.__init__(self, value=source, source_ref=source_ref)\n \n",
        "source_code_with_indent": "\nfrom .ExpressionBases import ExpressionChildrenHavingBase\n\n\nclass ExpressionBuiltinVars(ExpressionChildrenHavingBase):\n    <IND>kind = \"EXPRESSION_BUILTIN_VARS\"\n\n    named_children = (\"source\",)\n\n    def __init__(self, source, source_ref):\n        <IND>ExpressionChildrenHavingBase.__init__(\n            self, values={\"source\": source}, source_ref=source_ref\n        )\n\n    <DED>getSource = ExpressionChildrenHavingBase.childGetter(\"source\")\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom .ExpressionBases import ExpressionChildHavingBase\n\n\nclass ExpressionBuiltinVars(ExpressionChildHavingBase):\n    <IND>kind = \"EXPRESSION_BUILTIN_VARS\"\n\n    named_child = \"source\"\n    getSource = ExpressionChildHavingBase.childGetter(\"source\")\n\n    def __init__(self, source, source_ref):\n        <IND>ExpressionChildHavingBase.__init__(self, value=source, source_ref=source_ref)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Nuitka/Nuitka",
    "commit": "55829dea6e09138daa9dc95914217ef30320a69b",
    "filename": "nuitka/nodes/CallNodes.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Nuitka-Nuitka/nuitka/nodes/CallNodes.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "nuitka/nodes/CallNodes.py:153:4 Inconsistent override [15]: `named_children` overrides attribute defined in `nuitka.nodes.NodeBases.ChildrenHavingMixin` inconsistently. Type `typing.Tuple[str]` is not a subtype of the overridden attribute `typing.Tuple[]`.",
    "message": " `named_children` overrides attribute defined in `nuitka.nodes.NodeBases.ChildrenHavingMixin` inconsistently. Type `typing.Tuple[str]` is not a subtype of the overridden attribute `typing.Tuple[]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 153,
    "warning_line": "    named_children = (\"called\",)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom .ExpressionBases import ExpressionChildrenHavingBase\n\n",
        "source_code_len": 60,
        "target_code": "\nfrom .ExpressionBases import ExpressionChildHavingBase, ExpressionChildrenHavingBase\n\n",
        "target_code_len": 87,
        "diff_format": "@@ -27,3 +27,3 @@\n \n-from .ExpressionBases import ExpressionChildrenHavingBase\n+from .ExpressionBases import ExpressionChildHavingBase, ExpressionChildrenHavingBase\n \n",
        "source_code_with_indent": "\nfrom .ExpressionBases import ExpressionChildrenHavingBase\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom .ExpressionBases import ExpressionChildHavingBase, ExpressionChildrenHavingBase\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nclass ExpressionCallEmpty(ExpressionChildrenHavingBase):\n    kind = \"EXPRESSION_CALL_EMPTY\"\n\n    named_children = (\"called\",)\n\n",
        "source_code_len": 128,
        "target_code": "\nclass ExpressionCallEmpty(ExpressionChildHavingBase):\n    kind = \"EXPRESSION_CALL_EMPTY\"\n\n    named_child = \"called\"\n    getCalled = ExpressionChildHavingBase.childGetter(\"called\")\n    setCalled = ExpressionChildHavingBase.childSetter(\"called\")\n\n",
        "target_code_len": 247,
        "diff_format": "@@ -149,6 +146,8 @@\n \n-class ExpressionCallEmpty(ExpressionChildrenHavingBase):\n+class ExpressionCallEmpty(ExpressionChildHavingBase):\n     kind = \"EXPRESSION_CALL_EMPTY\"\n \n-    named_children = (\"called\",)\n+    named_child = \"called\"\n+    getCalled = ExpressionChildHavingBase.childGetter(\"called\")\n+    setCalled = ExpressionChildHavingBase.childSetter(\"called\")\n \n",
        "source_code_with_indent": "\n<DED><DED>class ExpressionCallEmpty(ExpressionChildrenHavingBase):\n    <IND>kind = \"EXPRESSION_CALL_EMPTY\"\n\n    named_children = (\"called\",)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED><DED>class ExpressionCallEmpty(ExpressionChildHavingBase):\n    <IND>kind = \"EXPRESSION_CALL_EMPTY\"\n\n    named_child = \"called\"\n    getCalled = ExpressionChildHavingBase.childGetter(\"called\")\n    setCalled = ExpressionChildHavingBase.childSetter(\"called\")\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Nuitka/Nuitka",
    "commit": "55829dea6e09138daa9dc95914217ef30320a69b",
    "filename": "nuitka/nodes/ContainerMakingNodes.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Nuitka-Nuitka/nuitka/nodes/ContainerMakingNodes.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "nuitka/nodes/ContainerMakingNodes.py:40:4 Inconsistent override [15]: `named_children` overrides attribute defined in `nuitka.nodes.NodeBases.ChildrenHavingMixin` inconsistently. Type `typing.Tuple[str]` is not a subtype of the overridden attribute `typing.Tuple[]`.",
    "message": " `named_children` overrides attribute defined in `nuitka.nodes.NodeBases.ChildrenHavingMixin` inconsistently. Type `typing.Tuple[str]` is not a subtype of the overridden attribute `typing.Tuple[]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 40,
    "warning_line": "    named_children = (\"elements\",)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom .ExpressionBases import ExpressionChildrenHavingBase\nfrom .IterationHandles import ListAndTupleContainerMakingIterationHandle\n",
        "source_code_len": 132,
        "target_code": "\nfrom .ExpressionBases import ExpressionChildHavingBase\nfrom .IterationHandles import ListAndTupleContainerMakingIterationHandle\n",
        "target_code_len": 129,
        "diff_format": "@@ -25,3 +25,3 @@\n \n-from .ExpressionBases import ExpressionChildrenHavingBase\n+from .ExpressionBases import ExpressionChildHavingBase\n from .IterationHandles import ListAndTupleContainerMakingIterationHandle\n",
        "source_code_with_indent": "\nfrom .ExpressionBases import ExpressionChildrenHavingBase\nfrom .IterationHandles import ListAndTupleContainerMakingIterationHandle\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom .ExpressionBases import ExpressionChildHavingBase\nfrom .IterationHandles import ListAndTupleContainerMakingIterationHandle\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "class ExpressionMakeSequenceBase(\n    SideEffectsFromChildrenMixin, ExpressionChildrenHavingBase\n):\n    named_children = (\"elements\",)\n\n",
        "source_code_len": 136,
        "target_code": "class ExpressionMakeSequenceBase(\n    SideEffectsFromChildrenMixin, ExpressionChildHavingBase\n):\n    named_child = \"elements\"\n    getElements = ExpressionChildHavingBase.childGetter(\"elements\")\n\n",
        "target_code_len": 195,
        "diff_format": "@@ -37,5 +37,6 @@\n class ExpressionMakeSequenceBase(\n-    SideEffectsFromChildrenMixin, ExpressionChildrenHavingBase\n+    SideEffectsFromChildrenMixin, ExpressionChildHavingBase\n ):\n-    named_children = (\"elements\",)\n+    named_child = \"elements\"\n+    getElements = ExpressionChildHavingBase.childGetter(\"elements\")\n \n",
        "source_code_with_indent": "class ExpressionMakeSequenceBase(\n    SideEffectsFromChildrenMixin, ExpressionChildrenHavingBase\n):\n    <IND>named_children = (\"elements\",)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "class ExpressionMakeSequenceBase(\n    SideEffectsFromChildrenMixin, ExpressionChildHavingBase\n):\n    <IND>named_child = \"elements\"\n    getElements = ExpressionChildHavingBase.childGetter(\"elements\")\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "        return self.sequence_kind\n\n    getElements = ExpressionChildrenHavingBase.childGetter(\"elements\")\n\n",
        "source_code_len": 107,
        "target_code": "        return self.sequence_kind\n\n",
        "target_code_len": 35,
        "diff_format": "@@ -58,4 +59,2 @@\n         return self.sequence_kind\n-\n-    getElements = ExpressionChildrenHavingBase.childGetter(\"elements\")\n \n",
        "source_code_with_indent": "        <IND>return self.sequence_kind\n\n    <DED>getElements = ExpressionChildrenHavingBase.childGetter(\"elements\")\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>return self.sequence_kind\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Nuitka/Nuitka",
    "commit": "55829dea6e09138daa9dc95914217ef30320a69b",
    "filename": "nuitka/nodes/ContainerOperationNodes.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Nuitka-Nuitka/nuitka/nodes/ContainerOperationNodes.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "nuitka/nodes/ContainerOperationNodes.py:84:4 Inconsistent override [15]: `named_children` overrides attribute defined in `nuitka.nodes.NodeBases.ChildrenHavingMixin` inconsistently. Type `typing.Tuple[str]` is not a subtype of the overridden attribute `typing.Tuple[]`.",
    "message": " `named_children` overrides attribute defined in `nuitka.nodes.NodeBases.ChildrenHavingMixin` inconsistently. Type `typing.Tuple[str]` is not a subtype of the overridden attribute `typing.Tuple[]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 84,
    "warning_line": "    named_children = (\"list\",)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom .ExpressionBases import ExpressionChildrenHavingBase\nfrom .NodeBases import StatementChildrenHavingBase\n",
        "source_code_len": 110,
        "target_code": "\nfrom .ExpressionBases import ExpressionChildHavingBase, ExpressionChildrenHavingBase\nfrom .NodeBases import StatementChildrenHavingBase\n",
        "target_code_len": 137,
        "diff_format": "@@ -23,3 +23,3 @@\n \n-from .ExpressionBases import ExpressionChildrenHavingBase\n+from .ExpressionBases import ExpressionChildHavingBase, ExpressionChildrenHavingBase\n from .NodeBases import StatementChildrenHavingBase\n",
        "source_code_with_indent": "\nfrom .ExpressionBases import ExpressionChildrenHavingBase\nfrom .NodeBases import StatementChildrenHavingBase\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom .ExpressionBases import ExpressionChildHavingBase, ExpressionChildrenHavingBase\nfrom .NodeBases import StatementChildrenHavingBase\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nclass ExpressionListOperationPop(ExpressionChildrenHavingBase):\n    kind = \"EXPRESSION_LIST_OPERATION_POP\"\n\n    named_children = (\"list\",)\n\n",
        "source_code_len": 141,
        "target_code": "\nclass ExpressionListOperationPop(ExpressionChildHavingBase):\n    kind = \"EXPRESSION_LIST_OPERATION_POP\"\n\n    named_child = \"list\"\n    getList = ExpressionChildHavingBase.childGetter(\"list\")\n\n",
        "target_code_len": 192,
        "diff_format": "@@ -80,6 +78,7 @@\n \n-class ExpressionListOperationPop(ExpressionChildrenHavingBase):\n+class ExpressionListOperationPop(ExpressionChildHavingBase):\n     kind = \"EXPRESSION_LIST_OPERATION_POP\"\n \n-    named_children = (\"list\",)\n+    named_child = \"list\"\n+    getList = ExpressionChildHavingBase.childGetter(\"list\")\n \n",
        "source_code_with_indent": "\n<DED><DED>class ExpressionListOperationPop(ExpressionChildrenHavingBase):\n    <IND>kind = \"EXPRESSION_LIST_OPERATION_POP\"\n\n    named_children = (\"list\",)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED><DED>class ExpressionListOperationPop(ExpressionChildHavingBase):\n    <IND>kind = \"EXPRESSION_LIST_OPERATION_POP\"\n\n    named_child = \"list\"\n    getList = ExpressionChildHavingBase.childGetter(\"list\")\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Nuitka/Nuitka",
    "commit": "55829dea6e09138daa9dc95914217ef30320a69b",
    "filename": "nuitka/nodes/CoroutineNodes.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Nuitka-Nuitka/nuitka/nodes/CoroutineNodes.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "nuitka/nodes/CoroutineNodes.py:32:4 Inconsistent override [15]: `named_children` overrides attribute defined in `nuitka.nodes.NodeBases.ChildrenHavingMixin` inconsistently. Type `typing.Tuple[str]` is not a subtype of the overridden attribute `typing.Tuple[]`.",
    "message": " `named_children` overrides attribute defined in `nuitka.nodes.NodeBases.ChildrenHavingMixin` inconsistently. Type `typing.Tuple[str]` is not a subtype of the overridden attribute `typing.Tuple[]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 32,
    "warning_line": "    named_children = (\"coroutine_ref\",)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom .ExpressionBases import ExpressionChildrenHavingBase\nfrom .FunctionNodes import ExpressionFunctionEntryPointBase\n",
        "source_code_len": 119,
        "target_code": "\nfrom .ExpressionBases import ExpressionChildHavingBase\nfrom .FunctionNodes import ExpressionFunctionEntryPointBase\n",
        "target_code_len": 116,
        "diff_format": "@@ -24,3 +24,3 @@\n \n-from .ExpressionBases import ExpressionChildrenHavingBase\n+from .ExpressionBases import ExpressionChildHavingBase\n from .FunctionNodes import ExpressionFunctionEntryPointBase\n",
        "source_code_with_indent": "\nfrom .ExpressionBases import ExpressionChildrenHavingBase\nfrom .FunctionNodes import ExpressionFunctionEntryPointBase\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom .ExpressionBases import ExpressionChildHavingBase\nfrom .FunctionNodes import ExpressionFunctionEntryPointBase\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nclass ExpressionMakeCoroutineObject(ExpressionChildrenHavingBase):\n    kind = \"EXPRESSION_MAKE_COROUTINE_OBJECT\"\n\n    named_children = (\"coroutine_ref\",)\n\n    getCoroutineRef = ExpressionChildrenHavingBase.childGetter(\"coroutine_ref\")\n\n",
        "source_code_len": 237,
        "target_code": "\nclass ExpressionMakeCoroutineObject(ExpressionChildHavingBase):\n    kind = \"EXPRESSION_MAKE_COROUTINE_OBJECT\"\n\n    named_child = \"coroutine_ref\"\n    getCoroutineRef = ExpressionChildHavingBase.childGetter(\"coroutine_ref\")\n\n    __slots__ = (\"variable_closure_traces\",)\n\n",
        "target_code_len": 270,
        "diff_format": "@@ -28,8 +28,9 @@\n \n-class ExpressionMakeCoroutineObject(ExpressionChildrenHavingBase):\n+class ExpressionMakeCoroutineObject(ExpressionChildHavingBase):\n     kind = \"EXPRESSION_MAKE_COROUTINE_OBJECT\"\n \n-    named_children = (\"coroutine_ref\",)\n+    named_child = \"coroutine_ref\"\n+    getCoroutineRef = ExpressionChildHavingBase.childGetter(\"coroutine_ref\")\n \n-    getCoroutineRef = ExpressionChildrenHavingBase.childGetter(\"coroutine_ref\")\n+    __slots__ = (\"variable_closure_traces\",)\n \n",
        "source_code_with_indent": "\nclass ExpressionMakeCoroutineObject(ExpressionChildrenHavingBase):\n    <IND>kind = \"EXPRESSION_MAKE_COROUTINE_OBJECT\"\n\n    named_children = (\"coroutine_ref\",)\n\n    getCoroutineRef = ExpressionChildrenHavingBase.childGetter(\"coroutine_ref\")\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nclass ExpressionMakeCoroutineObject(ExpressionChildHavingBase):\n    <IND>kind = \"EXPRESSION_MAKE_COROUTINE_OBJECT\"\n\n    named_child = \"coroutine_ref\"\n    getCoroutineRef = ExpressionChildHavingBase.childGetter(\"coroutine_ref\")\n\n    __slots__ = (\"variable_closure_traces\",)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nclass ExpressionAsyncWait(ExpressionChildrenHavingBase):\n    kind = \"EXPRESSION_ASYNC_WAIT\"\n\n    named_children = (\"expression\",)\n\n    def __init__(self, expression, source_ref):\n        ExpressionChildrenHavingBase.__init__(\n            self, values={\"expression\": expression}, source_ref=source_ref\n        )\n",
        "source_code_len": 312,
        "target_code": "\nclass ExpressionAsyncWait(ExpressionChildHavingBase):\n    kind = \"EXPRESSION_ASYNC_WAIT\"\n\n    named_child = \"expression\"\n    getValue = ExpressionChildHavingBase.childGetter(\"expression\")\n\n    __slots__ = (\"exception_preserving\",)\n\n    def __init__(self, expression, source_ref):\n        ExpressionChildHavingBase.__init__(\n            self, value=expression, source_ref=source_ref\n        )\n",
        "target_code_len": 393,
        "diff_format": "@@ -110,10 +111,13 @@\n \n-class ExpressionAsyncWait(ExpressionChildrenHavingBase):\n+class ExpressionAsyncWait(ExpressionChildHavingBase):\n     kind = \"EXPRESSION_ASYNC_WAIT\"\n \n-    named_children = (\"expression\",)\n+    named_child = \"expression\"\n+    getValue = ExpressionChildHavingBase.childGetter(\"expression\")\n+\n+    __slots__ = (\"exception_preserving\",)\n \n     def __init__(self, expression, source_ref):\n-        ExpressionChildrenHavingBase.__init__(\n-            self, values={\"expression\": expression}, source_ref=source_ref\n+        ExpressionChildHavingBase.__init__(\n+            self, value=expression, source_ref=source_ref\n         )\n",
        "source_code_with_indent": "\n<DED><DED>class ExpressionAsyncWait(ExpressionChildrenHavingBase):\n    <IND>kind = \"EXPRESSION_ASYNC_WAIT\"\n\n    named_children = (\"expression\",)\n\n    def __init__(self, expression, source_ref):\n        <IND>ExpressionChildrenHavingBase.__init__(\n            self, values={\"expression\": expression}, source_ref=source_ref\n        )\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED><DED>class ExpressionAsyncWait(ExpressionChildHavingBase):\n    <IND>kind = \"EXPRESSION_ASYNC_WAIT\"\n\n    named_child = \"expression\"\n    getValue = ExpressionChildHavingBase.childGetter(\"expression\")\n\n    __slots__ = (\"exception_preserving\",)\n\n    def __init__(self, expression, source_ref):\n        <IND>ExpressionChildHavingBase.__init__(\n            self, value=expression, source_ref=source_ref\n        )\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "\n    getValue = ExpressionChildrenHavingBase.childGetter(\"expression\")\n\n\n",
        "source_code_len": 73,
        "target_code": "\n\n",
        "target_code_len": 2,
        "diff_format": "@@ -133,4 +137,2 @@\n \n-    getValue = ExpressionChildrenHavingBase.childGetter(\"expression\")\n-\n \n",
        "source_code_with_indent": "\n    <DED>getValue = ExpressionChildrenHavingBase.childGetter(\"expression\")\n\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Nuitka/Nuitka",
    "commit": "55829dea6e09138daa9dc95914217ef30320a69b",
    "filename": "nuitka/nodes/CoroutineNodes.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Nuitka-Nuitka/nuitka/nodes/CoroutineNodes.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "nuitka/nodes/CoroutineNodes.py:114:4 Inconsistent override [15]: `named_children` overrides attribute defined in `nuitka.nodes.NodeBases.ChildrenHavingMixin` inconsistently. Type `typing.Tuple[str]` is not a subtype of the overridden attribute `typing.Tuple[]`.",
    "message": " `named_children` overrides attribute defined in `nuitka.nodes.NodeBases.ChildrenHavingMixin` inconsistently. Type `typing.Tuple[str]` is not a subtype of the overridden attribute `typing.Tuple[]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 114,
    "warning_line": "    named_children = (\"expression\",)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom .ExpressionBases import ExpressionChildrenHavingBase\nfrom .FunctionNodes import ExpressionFunctionEntryPointBase\n",
        "source_code_len": 119,
        "target_code": "\nfrom .ExpressionBases import ExpressionChildHavingBase\nfrom .FunctionNodes import ExpressionFunctionEntryPointBase\n",
        "target_code_len": 116,
        "diff_format": "@@ -24,3 +24,3 @@\n \n-from .ExpressionBases import ExpressionChildrenHavingBase\n+from .ExpressionBases import ExpressionChildHavingBase\n from .FunctionNodes import ExpressionFunctionEntryPointBase\n",
        "source_code_with_indent": "\nfrom .ExpressionBases import ExpressionChildrenHavingBase\nfrom .FunctionNodes import ExpressionFunctionEntryPointBase\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom .ExpressionBases import ExpressionChildHavingBase\nfrom .FunctionNodes import ExpressionFunctionEntryPointBase\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nclass ExpressionMakeCoroutineObject(ExpressionChildrenHavingBase):\n    kind = \"EXPRESSION_MAKE_COROUTINE_OBJECT\"\n\n    named_children = (\"coroutine_ref\",)\n\n    getCoroutineRef = ExpressionChildrenHavingBase.childGetter(\"coroutine_ref\")\n\n",
        "source_code_len": 237,
        "target_code": "\nclass ExpressionMakeCoroutineObject(ExpressionChildHavingBase):\n    kind = \"EXPRESSION_MAKE_COROUTINE_OBJECT\"\n\n    named_child = \"coroutine_ref\"\n    getCoroutineRef = ExpressionChildHavingBase.childGetter(\"coroutine_ref\")\n\n    __slots__ = (\"variable_closure_traces\",)\n\n",
        "target_code_len": 270,
        "diff_format": "@@ -28,8 +28,9 @@\n \n-class ExpressionMakeCoroutineObject(ExpressionChildrenHavingBase):\n+class ExpressionMakeCoroutineObject(ExpressionChildHavingBase):\n     kind = \"EXPRESSION_MAKE_COROUTINE_OBJECT\"\n \n-    named_children = (\"coroutine_ref\",)\n+    named_child = \"coroutine_ref\"\n+    getCoroutineRef = ExpressionChildHavingBase.childGetter(\"coroutine_ref\")\n \n-    getCoroutineRef = ExpressionChildrenHavingBase.childGetter(\"coroutine_ref\")\n+    __slots__ = (\"variable_closure_traces\",)\n \n",
        "source_code_with_indent": "\nclass ExpressionMakeCoroutineObject(ExpressionChildrenHavingBase):\n    <IND>kind = \"EXPRESSION_MAKE_COROUTINE_OBJECT\"\n\n    named_children = (\"coroutine_ref\",)\n\n    getCoroutineRef = ExpressionChildrenHavingBase.childGetter(\"coroutine_ref\")\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nclass ExpressionMakeCoroutineObject(ExpressionChildHavingBase):\n    <IND>kind = \"EXPRESSION_MAKE_COROUTINE_OBJECT\"\n\n    named_child = \"coroutine_ref\"\n    getCoroutineRef = ExpressionChildHavingBase.childGetter(\"coroutine_ref\")\n\n    __slots__ = (\"variable_closure_traces\",)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nclass ExpressionAsyncWait(ExpressionChildrenHavingBase):\n    kind = \"EXPRESSION_ASYNC_WAIT\"\n\n    named_children = (\"expression\",)\n\n    def __init__(self, expression, source_ref):\n        ExpressionChildrenHavingBase.__init__(\n            self, values={\"expression\": expression}, source_ref=source_ref\n        )\n",
        "source_code_len": 312,
        "target_code": "\nclass ExpressionAsyncWait(ExpressionChildHavingBase):\n    kind = \"EXPRESSION_ASYNC_WAIT\"\n\n    named_child = \"expression\"\n    getValue = ExpressionChildHavingBase.childGetter(\"expression\")\n\n    __slots__ = (\"exception_preserving\",)\n\n    def __init__(self, expression, source_ref):\n        ExpressionChildHavingBase.__init__(\n            self, value=expression, source_ref=source_ref\n        )\n",
        "target_code_len": 393,
        "diff_format": "@@ -110,10 +111,13 @@\n \n-class ExpressionAsyncWait(ExpressionChildrenHavingBase):\n+class ExpressionAsyncWait(ExpressionChildHavingBase):\n     kind = \"EXPRESSION_ASYNC_WAIT\"\n \n-    named_children = (\"expression\",)\n+    named_child = \"expression\"\n+    getValue = ExpressionChildHavingBase.childGetter(\"expression\")\n+\n+    __slots__ = (\"exception_preserving\",)\n \n     def __init__(self, expression, source_ref):\n-        ExpressionChildrenHavingBase.__init__(\n-            self, values={\"expression\": expression}, source_ref=source_ref\n+        ExpressionChildHavingBase.__init__(\n+            self, value=expression, source_ref=source_ref\n         )\n",
        "source_code_with_indent": "\n<DED><DED>class ExpressionAsyncWait(ExpressionChildrenHavingBase):\n    <IND>kind = \"EXPRESSION_ASYNC_WAIT\"\n\n    named_children = (\"expression\",)\n\n    def __init__(self, expression, source_ref):\n        <IND>ExpressionChildrenHavingBase.__init__(\n            self, values={\"expression\": expression}, source_ref=source_ref\n        )\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED><DED>class ExpressionAsyncWait(ExpressionChildHavingBase):\n    <IND>kind = \"EXPRESSION_ASYNC_WAIT\"\n\n    named_child = \"expression\"\n    getValue = ExpressionChildHavingBase.childGetter(\"expression\")\n\n    __slots__ = (\"exception_preserving\",)\n\n    def __init__(self, expression, source_ref):\n        <IND>ExpressionChildHavingBase.__init__(\n            self, value=expression, source_ref=source_ref\n        )\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "\n    getValue = ExpressionChildrenHavingBase.childGetter(\"expression\")\n\n\n",
        "source_code_len": 73,
        "target_code": "\n\n",
        "target_code_len": 2,
        "diff_format": "@@ -133,4 +137,2 @@\n \n-    getValue = ExpressionChildrenHavingBase.childGetter(\"expression\")\n-\n \n",
        "source_code_with_indent": "\n    <DED>getValue = ExpressionChildrenHavingBase.childGetter(\"expression\")\n\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Nuitka/Nuitka",
    "commit": "55829dea6e09138daa9dc95914217ef30320a69b",
    "filename": "nuitka/nodes/DictionaryNodes.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Nuitka-Nuitka/nuitka/nodes/DictionaryNodes.py",
    "file_hunks_size": 17,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "nuitka/nodes/DictionaryNodes.py:106:4 Inconsistent override [15]: `named_children` overrides attribute defined in `nuitka.nodes.NodeBases.ChildrenHavingMixin` inconsistently. Type `typing.Tuple[str]` is not a subtype of the overridden attribute `typing.Tuple[]`.",
    "message": " `named_children` overrides attribute defined in `nuitka.nodes.NodeBases.ChildrenHavingMixin` inconsistently. Type `typing.Tuple[str]` is not a subtype of the overridden attribute `typing.Tuple[]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 106,
    "warning_line": "    named_children = (\"pairs\",)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from .BuiltinHashNodes import ExpressionBuiltinHash\nfrom .ExpressionBases import ExpressionChildrenHavingBase\nfrom .NodeBases import SideEffectsFromChildrenMixin, StatementChildrenHavingBase\n",
        "source_code_len": 191,
        "target_code": "from .BuiltinHashNodes import ExpressionBuiltinHash\nfrom .ExpressionBases import ExpressionChildHavingBase, ExpressionChildrenHavingBase\nfrom .NodeBases import SideEffectsFromChildrenMixin, StatementChildrenHavingBase\n",
        "target_code_len": 218,
        "diff_format": "@@ -31,3 +31,3 @@\n from .BuiltinHashNodes import ExpressionBuiltinHash\n-from .ExpressionBases import ExpressionChildrenHavingBase\n+from .ExpressionBases import ExpressionChildHavingBase, ExpressionChildrenHavingBase\n from .NodeBases import SideEffectsFromChildrenMixin, StatementChildrenHavingBase\n",
        "source_code_with_indent": "from .BuiltinHashNodes import ExpressionBuiltinHash\nfrom .ExpressionBases import ExpressionChildrenHavingBase\nfrom .NodeBases import SideEffectsFromChildrenMixin, StatementChildrenHavingBase\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from .BuiltinHashNodes import ExpressionBuiltinHash\nfrom .ExpressionBases import ExpressionChildHavingBase, ExpressionChildrenHavingBase\nfrom .NodeBases import SideEffectsFromChildrenMixin, StatementChildrenHavingBase\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nclass ExpressionMakeDict(SideEffectsFromChildrenMixin, ExpressionChildrenHavingBase):\n    kind = \"EXPRESSION_MAKE_DICT\"\n\n    named_children = (\"pairs\",)\n\n    def __init__(self, pairs, source_ref):\n        ExpressionChildrenHavingBase.__init__(\n            self, values={\"pairs\": tuple(pairs)}, source_ref=source_ref\n        )\n\n    getPairs = ExpressionChildrenHavingBase.childGetter(\"pairs\")\n\n",
        "source_code_len": 394,
        "target_code": "\nclass ExpressionMakeDict(SideEffectsFromChildrenMixin, ExpressionChildHavingBase):\n    kind = \"EXPRESSION_MAKE_DICT\"\n\n    named_child = \"pairs\"\n    getPairs = ExpressionChildHavingBase.childGetter(\"pairs\")\n\n    def __init__(self, pairs, source_ref):\n        ExpressionChildHavingBase.__init__(\n            self, value=tuple(pairs), source_ref=source_ref\n        )\n\n",
        "target_code_len": 366,
        "diff_format": "@@ -102,13 +103,12 @@\n \n-class ExpressionMakeDict(SideEffectsFromChildrenMixin, ExpressionChildrenHavingBase):\n+class ExpressionMakeDict(SideEffectsFromChildrenMixin, ExpressionChildHavingBase):\n     kind = \"EXPRESSION_MAKE_DICT\"\n \n-    named_children = (\"pairs\",)\n+    named_child = \"pairs\"\n+    getPairs = ExpressionChildHavingBase.childGetter(\"pairs\")\n \n     def __init__(self, pairs, source_ref):\n-        ExpressionChildrenHavingBase.__init__(\n-            self, values={\"pairs\": tuple(pairs)}, source_ref=source_ref\n-        )\n-\n-    getPairs = ExpressionChildrenHavingBase.childGetter(\"pairs\")\n+        ExpressionChildHavingBase.__init__(\n+            self, value=tuple(pairs), source_ref=source_ref\n+        )\n \n",
        "source_code_with_indent": "\n<DED><DED><DED>class ExpressionMakeDict(SideEffectsFromChildrenMixin, ExpressionChildrenHavingBase):\n    <IND>kind = \"EXPRESSION_MAKE_DICT\"\n\n    named_children = (\"pairs\",)\n\n    def __init__(self, pairs, source_ref):\n        <IND>ExpressionChildrenHavingBase.__init__(\n            self, values={\"pairs\": tuple(pairs)}, source_ref=source_ref\n        )\n\n    <DED>getPairs = ExpressionChildrenHavingBase.childGetter(\"pairs\")\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED><DED><DED>class ExpressionMakeDict(SideEffectsFromChildrenMixin, ExpressionChildHavingBase):\n    <IND>kind = \"EXPRESSION_MAKE_DICT\"\n\n    named_child = \"pairs\"\n    getPairs = ExpressionChildHavingBase.childGetter(\"pairs\")\n\n    def __init__(self, pairs, source_ref):\n        <IND>ExpressionChildHavingBase.__init__(\n            self, value=tuple(pairs), source_ref=source_ref\n        )\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Nuitka/Nuitka",
    "commit": "55829dea6e09138daa9dc95914217ef30320a69b",
    "filename": "nuitka/nodes/ExceptionNodes.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Nuitka-Nuitka/nuitka/nodes/ExceptionNodes.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "nuitka/nodes/ExceptionNodes.py:259:4 Inconsistent override [15]: `named_children` overrides attribute defined in `nuitka.nodes.NodeBases.ChildrenHavingMixin` inconsistently. Type `typing.Tuple[str]` is not a subtype of the overridden attribute `typing.Tuple[]`.",
    "message": " `named_children` overrides attribute defined in `nuitka.nodes.NodeBases.ChildrenHavingMixin` inconsistently. Type `typing.Tuple[str]` is not a subtype of the overridden attribute `typing.Tuple[]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 259,
    "warning_line": "    named_children = (\"args\",)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom .ExpressionBases import ExpressionBase, ExpressionChildrenHavingBase\nfrom .NodeBases import StatementBase, StatementChildrenHavingBase\n",
        "source_code_len": 141,
        "target_code": "\nfrom .ExpressionBases import (\n    ExpressionBase,\n    ExpressionChildHavingBase,\n    ExpressionChildrenHavingBase,\n)\nfrom .NodeBases import StatementBase, StatementChildrenHavingBase\n",
        "target_code_len": 185,
        "diff_format": "@@ -21,3 +21,7 @@\n \n-from .ExpressionBases import ExpressionBase, ExpressionChildrenHavingBase\n+from .ExpressionBases import (\n+    ExpressionBase,\n+    ExpressionChildHavingBase,\n+    ExpressionChildrenHavingBase,\n+)\n from .NodeBases import StatementBase, StatementChildrenHavingBase\n",
        "source_code_with_indent": "\nfrom .ExpressionBases import ExpressionBase, ExpressionChildrenHavingBase\nfrom .NodeBases import StatementBase, StatementChildrenHavingBase\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom .ExpressionBases import (\n    ExpressionBase,\n    ExpressionChildHavingBase,\n    ExpressionChildrenHavingBase,\n)\nfrom .NodeBases import StatementBase, StatementChildrenHavingBase\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nclass ExpressionBuiltinMakeException(ExpressionChildrenHavingBase):\n    kind = \"EXPRESSION_BUILTIN_MAKE_EXCEPTION\"\n\n    named_children = (\"args\",)\n\n    def __init__(self, exception_name, args, source_ref):\n        ExpressionChildrenHavingBase.__init__(\n            self, values={\"args\": tuple(args)}, source_ref=source_ref\n        )\n",
        "source_code_len": 334,
        "target_code": "\nclass ExpressionBuiltinMakeException(ExpressionChildHavingBase):\n    kind = \"EXPRESSION_BUILTIN_MAKE_EXCEPTION\"\n\n    named_child = \"args\"\n    getArgs = ExpressionChildHavingBase.childGetter(\"args\")\n\n    __slots__ = (\"exception_name\",)\n\n    def __init__(self, exception_name, args, source_ref):\n        ExpressionChildHavingBase.__init__(\n            self, value=tuple(args), source_ref=source_ref\n        )\n",
        "target_code_len": 408,
        "diff_format": "@@ -255,10 +257,13 @@\n \n-class ExpressionBuiltinMakeException(ExpressionChildrenHavingBase):\n+class ExpressionBuiltinMakeException(ExpressionChildHavingBase):\n     kind = \"EXPRESSION_BUILTIN_MAKE_EXCEPTION\"\n \n-    named_children = (\"args\",)\n+    named_child = \"args\"\n+    getArgs = ExpressionChildHavingBase.childGetter(\"args\")\n+\n+    __slots__ = (\"exception_name\",)\n \n     def __init__(self, exception_name, args, source_ref):\n-        ExpressionChildrenHavingBase.__init__(\n-            self, values={\"args\": tuple(args)}, source_ref=source_ref\n+        ExpressionChildHavingBase.__init__(\n+            self, value=tuple(args), source_ref=source_ref\n         )\n",
        "source_code_with_indent": "\n<DED><DED>class ExpressionBuiltinMakeException(ExpressionChildrenHavingBase):\n    <IND>kind = \"EXPRESSION_BUILTIN_MAKE_EXCEPTION\"\n\n    named_children = (\"args\",)\n\n    def __init__(self, exception_name, args, source_ref):\n        <IND>ExpressionChildrenHavingBase.__init__(\n            self, values={\"args\": tuple(args)}, source_ref=source_ref\n        )\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED><DED>class ExpressionBuiltinMakeException(ExpressionChildHavingBase):\n    <IND>kind = \"EXPRESSION_BUILTIN_MAKE_EXCEPTION\"\n\n    named_child = \"args\"\n    getArgs = ExpressionChildHavingBase.childGetter(\"args\")\n\n    __slots__ = (\"exception_name\",)\n\n    def __init__(self, exception_name, args, source_ref):\n        <IND>ExpressionChildHavingBase.__init__(\n            self, value=tuple(args), source_ref=source_ref\n        )\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Nuitka/Nuitka",
    "commit": "55829dea6e09138daa9dc95914217ef30320a69b",
    "filename": "nuitka/nodes/ExpressionBases.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Nuitka-Nuitka/nuitka/nodes/ExpressionBases.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "nuitka/nodes/ExpressionBases.py:1280:4 Inconsistent override [15]: `named_children` overrides attribute defined in `ChildrenHavingMixin` inconsistently. Type `typing.Tuple[str]` is not a subtype of the overridden attribute `typing.Tuple[]`.",
    "message": " `named_children` overrides attribute defined in `ChildrenHavingMixin` inconsistently. Type `typing.Tuple[str]` is not a subtype of the overridden attribute `typing.Tuple[]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 1280,
    "warning_line": "    named_children = (\"value\",)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nclass ExpressionSpecBasedComputationBase(ExpressionChildrenHavingBase):\n    builtin_spec = None\n",
        "source_code_len": 97,
        "target_code": "\nclass ExpressionSpecBasedComputationMixin(object):\n    builtin_spec = None\n",
        "target_code_len": 76,
        "diff_format": "@@ -1253,3 +1253,3 @@\n \n-class ExpressionSpecBasedComputationBase(ExpressionChildrenHavingBase):\n+class ExpressionSpecBasedComputationMixin(object):\n     builtin_spec = None\n",
        "source_code_with_indent": "\n<DED><DED>class ExpressionSpecBasedComputationBase(ExpressionChildrenHavingBase):\n    <IND>builtin_spec = None\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED><DED>class ExpressionSpecBasedComputationMixin(object):\n    <IND>builtin_spec = None\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nclass ExpressionBuiltinSingleArgBase(ExpressionSpecBasedComputationBase):\n    named_children = (\"value\",)\n\n    def __init__(self, value, source_ref):\n        ExpressionSpecBasedComputationBase.__init__(\n            self, values={\"value\": value}, source_ref=source_ref\n        )\n\n    getValue = ExpressionChildrenHavingBase.childGetter(\"value\")\n\n",
        "source_code_len": 346,
        "target_code": "\nclass ExpressionBuiltinSingleArgBase(\n    ExpressionSpecBasedComputationMixin, ExpressionChildHavingBase\n):\n    named_child = \"value\"\n    getValue = ExpressionChildHavingBase.childGetter(\"value\")\n\n    def __init__(self, value, source_ref):\n        ExpressionChildHavingBase.__init__(self, value=value, source_ref=source_ref)\n\n",
        "target_code_len": 327,
        "diff_format": "@@ -1278,11 +1278,10 @@\n \n-class ExpressionBuiltinSingleArgBase(ExpressionSpecBasedComputationBase):\n-    named_children = (\"value\",)\n+class ExpressionBuiltinSingleArgBase(\n+    ExpressionSpecBasedComputationMixin, ExpressionChildHavingBase\n+):\n+    named_child = \"value\"\n+    getValue = ExpressionChildHavingBase.childGetter(\"value\")\n \n     def __init__(self, value, source_ref):\n-        ExpressionSpecBasedComputationBase.__init__(\n-            self, values={\"value\": value}, source_ref=source_ref\n-        )\n-\n-    getValue = ExpressionChildrenHavingBase.childGetter(\"value\")\n+        ExpressionChildHavingBase.__init__(self, value=value, source_ref=source_ref)\n \n",
        "source_code_with_indent": "\n<DED><DED>class ExpressionBuiltinSingleArgBase(ExpressionSpecBasedComputationBase):\n    <IND>named_children = (\"value\",)\n\n    def __init__(self, value, source_ref):\n        <IND>ExpressionSpecBasedComputationBase.__init__(\n            self, values={\"value\": value}, source_ref=source_ref\n        )\n\n    <DED>getValue = ExpressionChildrenHavingBase.childGetter(\"value\")\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED><DED>class ExpressionBuiltinSingleArgBase(\n    ExpressionSpecBasedComputationMixin, ExpressionChildHavingBase\n):\n    <IND>named_child = \"value\"\n    getValue = ExpressionChildHavingBase.childGetter(\"value\")\n\n    def __init__(self, value, source_ref):\n        <IND>ExpressionChildHavingBase.__init__(self, value=value, source_ref=source_ref)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Nuitka/Nuitka",
    "commit": "55829dea6e09138daa9dc95914217ef30320a69b",
    "filename": "nuitka/nodes/GeneratorNodes.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Nuitka-Nuitka/nuitka/nodes/GeneratorNodes.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "nuitka/nodes/GeneratorNodes.py:36:4 Inconsistent override [15]: `named_children` overrides attribute defined in `nuitka.nodes.NodeBases.ChildrenHavingMixin` inconsistently. Type `typing.Tuple[str]` is not a subtype of the overridden attribute `typing.Tuple[]`.",
    "message": " `named_children` overrides attribute defined in `nuitka.nodes.NodeBases.ChildrenHavingMixin` inconsistently. Type `typing.Tuple[str]` is not a subtype of the overridden attribute `typing.Tuple[]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 36,
    "warning_line": "    named_children = (\"generator_ref\",)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom .ExpressionBases import ExpressionChildrenHavingBase\nfrom .FunctionNodes import ExpressionFunctionEntryPointBase\n",
        "source_code_len": 119,
        "target_code": "\nfrom .ExpressionBases import ExpressionChildHavingBase\nfrom .FunctionNodes import ExpressionFunctionEntryPointBase\n",
        "target_code_len": 116,
        "diff_format": "@@ -26,3 +26,3 @@\n \n-from .ExpressionBases import ExpressionChildrenHavingBase\n+from .ExpressionBases import ExpressionChildHavingBase\n from .FunctionNodes import ExpressionFunctionEntryPointBase\n",
        "source_code_with_indent": "\nfrom .ExpressionBases import ExpressionChildrenHavingBase\nfrom .FunctionNodes import ExpressionFunctionEntryPointBase\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom .ExpressionBases import ExpressionChildHavingBase\nfrom .FunctionNodes import ExpressionFunctionEntryPointBase\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nclass ExpressionMakeGeneratorObject(ExpressionChildrenHavingBase):\n    kind = \"EXPRESSION_MAKE_GENERATOR_OBJECT\"\n\n    named_children = (\"generator_ref\",)\n\n    getGeneratorRef = ExpressionChildrenHavingBase.childGetter(\"generator_ref\")\n\n",
        "source_code_len": 237,
        "target_code": "\nclass ExpressionMakeGeneratorObject(ExpressionChildHavingBase):\n    kind = \"EXPRESSION_MAKE_GENERATOR_OBJECT\"\n\n    named_child = \"generator_ref\"\n    getGeneratorRef = ExpressionChildHavingBase.childGetter(\"generator_ref\")\n\n    __slots__ = (\"variable_closure_traces\",)\n\n",
        "target_code_len": 270,
        "diff_format": "@@ -32,8 +32,9 @@\n \n-class ExpressionMakeGeneratorObject(ExpressionChildrenHavingBase):\n+class ExpressionMakeGeneratorObject(ExpressionChildHavingBase):\n     kind = \"EXPRESSION_MAKE_GENERATOR_OBJECT\"\n \n-    named_children = (\"generator_ref\",)\n+    named_child = \"generator_ref\"\n+    getGeneratorRef = ExpressionChildHavingBase.childGetter(\"generator_ref\")\n \n-    getGeneratorRef = ExpressionChildrenHavingBase.childGetter(\"generator_ref\")\n+    __slots__ = (\"variable_closure_traces\",)\n \n",
        "source_code_with_indent": "\nclass ExpressionMakeGeneratorObject(ExpressionChildrenHavingBase):\n    <IND>kind = \"EXPRESSION_MAKE_GENERATOR_OBJECT\"\n\n    named_children = (\"generator_ref\",)\n\n    getGeneratorRef = ExpressionChildrenHavingBase.childGetter(\"generator_ref\")\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nclass ExpressionMakeGeneratorObject(ExpressionChildHavingBase):\n    <IND>kind = \"EXPRESSION_MAKE_GENERATOR_OBJECT\"\n\n    named_child = \"generator_ref\"\n    getGeneratorRef = ExpressionChildHavingBase.childGetter(\"generator_ref\")\n\n    __slots__ = (\"variable_closure_traces\",)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Nuitka/Nuitka",
    "commit": "55829dea6e09138daa9dc95914217ef30320a69b",
    "filename": "nuitka/nodes/LocalsDictNodes.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Nuitka-Nuitka/nuitka/nodes/LocalsDictNodes.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "nuitka/nodes/LocalsDictNodes.py:45:4 Inconsistent override [15]: `named_children` overrides attribute defined in `nuitka.nodes.NodeBases.ChildrenHavingMixin` inconsistently. Type `typing.Tuple[str]` is not a subtype of the overridden attribute `typing.Tuple[]`.",
    "message": " `named_children` overrides attribute defined in `nuitka.nodes.NodeBases.ChildrenHavingMixin` inconsistently. Type `typing.Tuple[str]` is not a subtype of the overridden attribute `typing.Tuple[]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 45,
    "warning_line": "    named_children = (\"fallback\",)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from .ConstantRefNodes import ExpressionConstantDictEmptyRef\nfrom .ExpressionBases import ExpressionBase, ExpressionChildrenHavingBase\nfrom .NodeBases import StatementBase, StatementChildHavingBase\n",
        "source_code_len": 198,
        "target_code": "from .ConstantRefNodes import ExpressionConstantDictEmptyRef\nfrom .ExpressionBases import ExpressionBase, ExpressionChildHavingBase\nfrom .NodeBases import StatementBase, StatementChildHavingBase\n",
        "target_code_len": 195,
        "diff_format": "@@ -36,3 +36,3 @@\n from .ConstantRefNodes import ExpressionConstantDictEmptyRef\n-from .ExpressionBases import ExpressionBase, ExpressionChildrenHavingBase\n+from .ExpressionBases import ExpressionBase, ExpressionChildHavingBase\n from .NodeBases import StatementBase, StatementChildHavingBase\n",
        "source_code_with_indent": "from .ConstantRefNodes import ExpressionConstantDictEmptyRef\nfrom .ExpressionBases import ExpressionBase, ExpressionChildrenHavingBase\nfrom .NodeBases import StatementBase, StatementChildHavingBase\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from .ConstantRefNodes import ExpressionConstantDictEmptyRef\nfrom .ExpressionBases import ExpressionBase, ExpressionChildHavingBase\nfrom .NodeBases import StatementBase, StatementChildHavingBase\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nclass ExpressionLocalsVariableRefORFallback(ExpressionChildrenHavingBase):\n    kind = \"EXPRESSION_LOCALS_VARIABLE_REF_OR_FALLBACK\"\n\n    named_children = (\"fallback\",)\n\n    def __init__(self, locals_scope, variable_name, fallback, source_ref):\n        ExpressionChildrenHavingBase.__init__(\n            self, values={\"fallback\": fallback}, source_ref=source_ref\n        )\n\n",
        "source_code_len": 373,
        "target_code": "\nclass ExpressionLocalsVariableRefORFallback(ExpressionChildHavingBase):\n    kind = \"EXPRESSION_LOCALS_VARIABLE_REF_OR_FALLBACK\"\n\n    named_child = \"fallback\"\n\n    __slots__ = (\"locals_scope\", \"variable\", \"variable_trace\")\n\n    def __init__(self, locals_scope, variable_name, fallback, source_ref):\n        ExpressionChildHavingBase.__init__(self, value=fallback, source_ref=source_ref)\n\n",
        "target_code_len": 388,
        "diff_format": "@@ -41,11 +41,11 @@\n \n-class ExpressionLocalsVariableRefORFallback(ExpressionChildrenHavingBase):\n+class ExpressionLocalsVariableRefORFallback(ExpressionChildHavingBase):\n     kind = \"EXPRESSION_LOCALS_VARIABLE_REF_OR_FALLBACK\"\n \n-    named_children = (\"fallback\",)\n+    named_child = \"fallback\"\n+\n+    __slots__ = (\"locals_scope\", \"variable\", \"variable_trace\")\n \n     def __init__(self, locals_scope, variable_name, fallback, source_ref):\n-        ExpressionChildrenHavingBase.__init__(\n-            self, values={\"fallback\": fallback}, source_ref=source_ref\n-        )\n+        ExpressionChildHavingBase.__init__(self, value=fallback, source_ref=source_ref)\n \n",
        "source_code_with_indent": "\nclass ExpressionLocalsVariableRefORFallback(ExpressionChildrenHavingBase):\n    <IND>kind = \"EXPRESSION_LOCALS_VARIABLE_REF_OR_FALLBACK\"\n\n    named_children = (\"fallback\",)\n\n    def __init__(self, locals_scope, variable_name, fallback, source_ref):\n        <IND>ExpressionChildrenHavingBase.__init__(\n            self, values={\"fallback\": fallback}, source_ref=source_ref\n        )\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nclass ExpressionLocalsVariableRefORFallback(ExpressionChildHavingBase):\n    <IND>kind = \"EXPRESSION_LOCALS_VARIABLE_REF_OR_FALLBACK\"\n\n    named_child = \"fallback\"\n\n    __slots__ = (\"locals_scope\", \"variable\", \"variable_trace\")\n\n    def __init__(self, locals_scope, variable_name, fallback, source_ref):\n        <IND>ExpressionChildHavingBase.__init__(self, value=fallback, source_ref=source_ref)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Nuitka/Nuitka",
    "commit": "55829dea6e09138daa9dc95914217ef30320a69b",
    "filename": "nuitka/nodes/OutlineNodes.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Nuitka-Nuitka/nuitka/nodes/OutlineNodes.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "nuitka/nodes/OutlineNodes.py:44:4 Inconsistent override [15]: `named_children` overrides attribute defined in `nuitka.nodes.NodeBases.ChildrenHavingMixin` inconsistently. Type `typing.Tuple[str]` is not a subtype of the overridden attribute `typing.Tuple[]`.",
    "message": " `named_children` overrides attribute defined in `nuitka.nodes.NodeBases.ChildrenHavingMixin` inconsistently. Type `typing.Tuple[str]` is not a subtype of the overridden attribute `typing.Tuple[]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 44,
    "warning_line": "    named_children = (\"body\",)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from .ExceptionNodes import ExpressionRaiseException\nfrom .ExpressionBases import ExpressionChildrenHavingBase\nfrom .FunctionNodes import ExpressionFunctionBodyBase\n",
        "source_code_len": 165,
        "target_code": "from .ExceptionNodes import ExpressionRaiseException\nfrom .ExpressionBases import ExpressionChildHavingBase\nfrom .FunctionNodes import ExpressionFunctionBodyBase\n",
        "target_code_len": 162,
        "diff_format": "@@ -26,3 +26,3 @@\n from .ExceptionNodes import ExpressionRaiseException\n-from .ExpressionBases import ExpressionChildrenHavingBase\n+from .ExpressionBases import ExpressionChildHavingBase\n from .FunctionNodes import ExpressionFunctionBodyBase\n",
        "source_code_with_indent": "from .ExceptionNodes import ExpressionRaiseException\nfrom .ExpressionBases import ExpressionChildrenHavingBase\nfrom .FunctionNodes import ExpressionFunctionBodyBase\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from .ExceptionNodes import ExpressionRaiseException\nfrom .ExpressionBases import ExpressionChildHavingBase\nfrom .FunctionNodes import ExpressionFunctionBodyBase\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nclass ExpressionOutlineBody(ExpressionChildrenHavingBase):\n    \"\"\" Outlined expression code.\n",
        "source_code_len": 94,
        "target_code": "\nclass ExpressionOutlineBody(ExpressionChildHavingBase):\n    \"\"\" Outlined expression code.\n",
        "target_code_len": 91,
        "diff_format": "@@ -30,3 +30,3 @@\n \n-class ExpressionOutlineBody(ExpressionChildrenHavingBase):\n+class ExpressionOutlineBody(ExpressionChildHavingBase):\n     \"\"\" Outlined expression code.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\nclass ExpressionOutlineBody(ExpressionChildrenHavingBase):\n    <IND>",
        "target_code_with_indent": "\nclass ExpressionOutlineBody(ExpressionChildHavingBase):\n    <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "        return {\"provider\": self.provider, \"name\": self.name}\n\n    getBody = ExpressionChildrenHavingBase.childGetter(\"body\")\n    setBody = ExpressionChildrenHavingBase.childSetter(\"body\")\n\n",
        "source_code_len": 190,
        "target_code": "        return {\"provider\": self.provider, \"name\": self.name}\n\n",
        "target_code_len": 63,
        "diff_format": "@@ -67,5 +69,2 @@\n         return {\"provider\": self.provider, \"name\": self.name}\n-\n-    getBody = ExpressionChildrenHavingBase.childGetter(\"body\")\n-    setBody = ExpressionChildrenHavingBase.childSetter(\"body\")\n \n",
        "source_code_with_indent": "        <IND>return {\"provider\": self.provider, \"name\": self.name}\n\n    <DED>getBody = ExpressionChildrenHavingBase.childGetter(\"body\")\n    setBody = ExpressionChildrenHavingBase.childSetter(\"body\")\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>return {\"provider\": self.provider, \"name\": self.name}\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Nuitka/Nuitka",
    "commit": "55829dea6e09138daa9dc95914217ef30320a69b",
    "filename": "nuitka/nodes/StringConcatenationNodes.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Nuitka-Nuitka/nuitka/nodes/StringConcatenationNodes.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "nuitka/nodes/StringConcatenationNodes.py:33:4 Inconsistent override [15]: `named_children` overrides attribute defined in `nuitka.nodes.NodeBases.ChildrenHavingMixin` inconsistently. Type `typing.Tuple[str]` is not a subtype of the overridden attribute `typing.Tuple[]`.",
    "message": " `named_children` overrides attribute defined in `nuitka.nodes.NodeBases.ChildrenHavingMixin` inconsistently. Type `typing.Tuple[str]` is not a subtype of the overridden attribute `typing.Tuple[]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 33,
    "warning_line": "    named_children = (\"values\",)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from .ConstantRefNodes import makeConstantRefNode\nfrom .ExpressionBases import ExpressionChildrenHavingBase\nfrom .shapes.BuiltinTypeShapes import ShapeTypeStrOrUnicode\n",
        "source_code_len": 168,
        "target_code": "from .ConstantRefNodes import makeConstantRefNode\nfrom .ExpressionBases import ExpressionChildHavingBase\nfrom .shapes.BuiltinTypeShapes import ShapeTypeStrOrUnicode\n",
        "target_code_len": 165,
        "diff_format": "@@ -25,3 +25,3 @@\n from .ConstantRefNodes import makeConstantRefNode\n-from .ExpressionBases import ExpressionChildrenHavingBase\n+from .ExpressionBases import ExpressionChildHavingBase\n from .shapes.BuiltinTypeShapes import ShapeTypeStrOrUnicode\n",
        "source_code_with_indent": "from .ConstantRefNodes import makeConstantRefNode\nfrom .ExpressionBases import ExpressionChildrenHavingBase\nfrom .shapes.BuiltinTypeShapes import ShapeTypeStrOrUnicode\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from .ConstantRefNodes import makeConstantRefNode\nfrom .ExpressionBases import ExpressionChildHavingBase\nfrom .shapes.BuiltinTypeShapes import ShapeTypeStrOrUnicode\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nclass ExpressionStringConcatenation(ExpressionChildrenHavingBase):\n    kind = \"EXPRESSION_STRING_CONCATENATION\"\n\n    named_children = (\"values\",)\n\n",
        "source_code_len": 148,
        "target_code": "\nclass ExpressionStringConcatenation(ExpressionChildHavingBase):\n    kind = \"EXPRESSION_STRING_CONCATENATION\"\n\n    named_child = \"values\"\n    getValues = ExpressionChildHavingBase.childGetter(\"values\")\n\n",
        "target_code_len": 203,
        "diff_format": "@@ -29,6 +29,7 @@\n \n-class ExpressionStringConcatenation(ExpressionChildrenHavingBase):\n+class ExpressionStringConcatenation(ExpressionChildHavingBase):\n     kind = \"EXPRESSION_STRING_CONCATENATION\"\n \n-    named_children = (\"values\",)\n+    named_child = \"values\"\n+    getValues = ExpressionChildHavingBase.childGetter(\"values\")\n \n",
        "source_code_with_indent": "\nclass ExpressionStringConcatenation(ExpressionChildrenHavingBase):\n    <IND>kind = \"EXPRESSION_STRING_CONCATENATION\"\n\n    named_children = (\"values\",)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nclass ExpressionStringConcatenation(ExpressionChildHavingBase):\n    <IND>kind = \"EXPRESSION_STRING_CONCATENATION\"\n\n    named_child = \"values\"\n    getValues = ExpressionChildHavingBase.childGetter(\"values\")\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "        return self, None, None\n\n    getValues = ExpressionChildrenHavingBase.childGetter(\"values\")\n",
        "source_code_len": 100,
        "target_code": "        return self, None, None\n",
        "target_code_len": 32,
        "diff_format": "@@ -99,3 +100,1 @@\n         return self, None, None\n-\n-    getValues = ExpressionChildrenHavingBase.childGetter(\"values\")\n",
        "source_code_with_indent": "        <DED>return self, None, None\n\n    <DED>getValues = ExpressionChildrenHavingBase.childGetter(\"values\")\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>return self, None, None\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]