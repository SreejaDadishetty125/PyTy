[
  {
    "project": "PrefectHQ/prefect",
    "commit": "a9270d965aee1e2182843e7fa75d18e1054230d0",
    "filename": "src/prefect/agent/docker/agent.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/PrefectHQ-prefect/src/prefect/agent/docker/agent.py",
    "file_hunks_size": 6,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/prefect/agent/docker/agent.py:101:8 Incompatible variable type [9]: network is declared to have type `str` but is used as type `None`.",
    "message": " network is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 101,
    "warning_line": "        network: str = None,"
  },
  {
    "project": "PrefectHQ/prefect",
    "commit": "a9270d965aee1e2182843e7fa75d18e1054230d0",
    "filename": "src/prefect/agent/local/agent.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/PrefectHQ-prefect/src/prefect/agent/local/agent.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/prefect/agent/local/agent.py:75:8 Incompatible variable type [9]: storage_labels is declared to have type `bool` but is used as type `None`.",
    "message": " storage_labels is declared to have type `bool` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 75,
    "warning_line": "        storage_labels: bool = None,"
  },
  {
    "project": "PrefectHQ/prefect",
    "commit": "a9270d965aee1e2182843e7fa75d18e1054230d0",
    "filename": "src/prefect/tasks/dropbox/dropbox.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/PrefectHQ-prefect/src/prefect/tasks/dropbox/dropbox.py",
    "file_hunks_size": 6,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/prefect/tasks/dropbox/dropbox.py:22:41 Incompatible variable type [9]: access_token_secret is declared to have type `str` but is used as type `None`.",
    "message": " access_token_secret is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 22,
    "warning_line": "    def __init__(self, path: str = None, access_token_secret: str = None, **kwargs):"
  },
  {
    "project": "PrefectHQ/prefect",
    "commit": "a9270d965aee1e2182843e7fa75d18e1054230d0",
    "filename": "src/prefect/tasks/dropbox/dropbox.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/PrefectHQ-prefect/src/prefect/tasks/dropbox/dropbox.py",
    "file_hunks_size": 6,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/prefect/tasks/dropbox/dropbox.py:32:8 Incompatible variable type [9]: access_token_secret is declared to have type `str` but is used as type `None`.",
    "message": " access_token_secret is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 32,
    "warning_line": "        access_token_secret: str = None,"
  },
  {
    "project": "PrefectHQ/prefect",
    "commit": "a9270d965aee1e2182843e7fa75d18e1054230d0",
    "filename": "src/prefect/tasks/gcp/storage.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/PrefectHQ-prefect/src/prefect/tasks/gcp/storage.py",
    "file_hunks_size": 20,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/prefect/tasks/gcp/storage.py:27:8 Incompatible variable type [9]: encryption_key_secret is declared to have type `str` but is used as type `None`.",
    "message": " encryption_key_secret is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 27,
    "warning_line": "        encryption_key_secret: str = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "        chunk_size: int = 104857600,  # 1024 * 1024 B * 100 = 100 MB\n        encryption_key_secret: str = None,\n        request_timeout: Union[float, Tuple[float, float]] = 60,\n",
        "source_code_len": 177,
        "target_code": "        chunk_size: int = 104857600,  # 1024 * 1024 B * 100 = 100 MB\n        request_timeout: Union[float, Tuple[float, float]] = 60,\n",
        "target_code_len": 134,
        "diff_format": "@@ -26,3 +24,2 @@\n         chunk_size: int = 104857600,  # 1024 * 1024 B * 100 = 100 MB\n-        encryption_key_secret: str = None,\n         request_timeout: Union[float, Tuple[float, float]] = 60,\n",
        "source_code_with_indent": "        chunk_size: int = 104857600,  # 1024 * 1024 B * 100 = 100 MB\n        encryption_key_secret: str = None,\n        request_timeout: Union[float, Tuple[float, float]] = 60,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        chunk_size: int = 104857600,  # 1024 * 1024 B * 100 = 100 MB\n        request_timeout: Union[float, Tuple[float, float]] = 60,\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "        self.create_bucket = create_bucket\n        if encryption_key_secret is not None:\n            warnings.warn(\n                \"The `encryption_key_secret` argument is deprecated. Use a `Secret` task \"\n                \"to pass the key value at runtime instead.\",\n                UserWarning,\n                stacklevel=2,\n            )\n        self.chunk_size = chunk_size\n        self.encryption_key_secret = encryption_key_secret\n        self.request_timeout = request_timeout\n",
        "source_code_len": 484,
        "target_code": "        self.create_bucket = create_bucket\n        self.chunk_size = chunk_size\n        self.request_timeout = request_timeout\n",
        "target_code_len": 127,
        "diff_format": "@@ -34,11 +31,3 @@\n         self.create_bucket = create_bucket\n-        if encryption_key_secret is not None:\n-            warnings.warn(\n-                \"The `encryption_key_secret` argument is deprecated. Use a `Secret` task \"\n-                \"to pass the key value at runtime instead.\",\n-                UserWarning,\n-                stacklevel=2,\n-            )\n         self.chunk_size = chunk_size\n-        self.encryption_key_secret = encryption_key_secret\n         self.request_timeout = request_timeout\n",
        "source_code_with_indent": "        self.create_bucket = create_bucket\n        if encryption_key_secret is not None:\n            <IND>warnings.warn(\n                \"The `encryption_key_secret` argument is deprecated. Use a `Secret` task \"\n                \"to pass the key value at runtime instead.\",\n                UserWarning,\n                stacklevel=2,\n            )\n        <DED>self.chunk_size = chunk_size\n        self.encryption_key_secret = encryption_key_secret\n        self.request_timeout = request_timeout\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self.create_bucket = create_bucket\n        self.chunk_size = chunk_size\n        self.request_timeout = request_timeout\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "PrefectHQ/prefect",
    "commit": "a9270d965aee1e2182843e7fa75d18e1054230d0",
    "filename": "src/prefect/tasks/gcp/storage.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/PrefectHQ-prefect/src/prefect/tasks/gcp/storage.py",
    "file_hunks_size": 20,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/prefect/tasks/gcp/storage.py:65:8 Incompatible variable type [9]: encryption_key_secret is declared to have type `str` but is used as type `None`.",
    "message": " encryption_key_secret is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 65,
    "warning_line": "        encryption_key_secret: str = None,"
  },
  {
    "project": "PrefectHQ/prefect",
    "commit": "a9270d965aee1e2182843e7fa75d18e1054230d0",
    "filename": "src/prefect/tasks/gcp/storage.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/PrefectHQ-prefect/src/prefect/tasks/gcp/storage.py",
    "file_hunks_size": 20,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/prefect/tasks/gcp/storage.py:117:8 Incompatible variable type [9]: encryption_key_secret is declared to have type `str` but is used as type `None`.",
    "message": " encryption_key_secret is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 117,
    "warning_line": "        encryption_key_secret: str = None,"
  },
  {
    "project": "PrefectHQ/prefect",
    "commit": "a9270d965aee1e2182843e7fa75d18e1054230d0",
    "filename": "src/prefect/tasks/gcp/storage.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/PrefectHQ-prefect/src/prefect/tasks/gcp/storage.py",
    "file_hunks_size": 20,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/prefect/tasks/gcp/storage.py:142:8 Incompatible variable type [9]: encryption_key_secret is declared to have type `str` but is used as type `None`.",
    "message": " encryption_key_secret is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 142,
    "warning_line": "        encryption_key_secret: str = None,"
  },
  {
    "project": "PrefectHQ/prefect",
    "commit": "a9270d965aee1e2182843e7fa75d18e1054230d0",
    "filename": "src/prefect/tasks/gcp/storage.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/PrefectHQ-prefect/src/prefect/tasks/gcp/storage.py",
    "file_hunks_size": 20,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/prefect/tasks/gcp/storage.py:238:8 Incompatible variable type [9]: encryption_key_secret is declared to have type `str` but is used as type `None`.",
    "message": " encryption_key_secret is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 238,
    "warning_line": "        encryption_key_secret: str = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "        create_bucket: bool = False,\n        encryption_key_secret: str = None,\n        request_timeout: Union[float, Tuple[float, float]] = 60,\n",
        "source_code_len": 145,
        "target_code": "        create_bucket: bool = False,\n        request_timeout: Union[float, Tuple[float, float]] = 60,\n",
        "target_code_len": 102,
        "diff_format": "@@ -237,3 +203,2 @@\n         create_bucket: bool = False,\n-        encryption_key_secret: str = None,\n         request_timeout: Union[float, Tuple[float, float]] = 60,\n",
        "source_code_with_indent": "        create_bucket: bool = False,\n        encryption_key_secret: str = None,\n        request_timeout: Union[float, Tuple[float, float]] = 60,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        create_bucket: bool = False,\n        request_timeout: Union[float, Tuple[float, float]] = 60,\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "            create_bucket=create_bucket,\n            encryption_key_secret=encryption_key_secret,\n            request_timeout=request_timeout,\n",
        "source_code_len": 143,
        "target_code": "            create_bucket=create_bucket,\n            request_timeout=request_timeout,\n",
        "target_code_len": 86,
        "diff_format": "@@ -247,3 +212,2 @@\n             create_bucket=create_bucket,\n-            encryption_key_secret=encryption_key_secret,\n             request_timeout=request_timeout,\n",
        "source_code_with_indent": "            create_bucket=create_bucket,\n            encryption_key_secret=encryption_key_secret,\n            request_timeout=request_timeout,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            create_bucket=create_bucket,\n            request_timeout=request_timeout,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "PrefectHQ/prefect",
    "commit": "a9270d965aee1e2182843e7fa75d18e1054230d0",
    "filename": "src/prefect/tasks/gcp/storage.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/PrefectHQ-prefect/src/prefect/tasks/gcp/storage.py",
    "file_hunks_size": 20,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/prefect/tasks/gcp/storage.py:271:8 Incompatible variable type [9]: encryption_key_secret is declared to have type `str` but is used as type `None`.",
    "message": " encryption_key_secret is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 271,
    "warning_line": "        encryption_key_secret: str = None,"
  },
  {
    "project": "PrefectHQ/prefect",
    "commit": "a9270d965aee1e2182843e7fa75d18e1054230d0",
    "filename": "src/prefect/tasks/great_expectations/checkpoints.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/PrefectHQ-prefect/src/prefect/tasks/great_expectations/checkpoints.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/prefect/tasks/great_expectations/checkpoints.py:299:8 Incompatible variable type [9]: checkpoint_name is declared to have type `str` but is used as type `None`.",
    "message": " checkpoint_name is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 299,
    "warning_line": "        checkpoint_name: str = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "        return results\n\n\nclass RunGreatExpectationsCheckpoint(Task):\n    \"\"\"\n    DEPRECATED\n\n    Task for running a Great Expectations checkpoint. For this task to run properly, it must be\n    run above your great_expectations directory or configured with the `context_root_dir` for\n    your great_expectations directory on the local file system of the worker process.\n\n    Args:\n        - checkpoint_name (str): the name of the checkpoint; should match the filename of the\n            checkpoint without .py\n        - context_root_dir (str): the absolute or relative path to the directory holding your\n            `great_expectations.yml`\n        - runtime_environment (dict): a dictionary of great expectation config key-value pairs\n            to overwrite your config in `great_expectations.yml`\n        - run_name (str): the name of this Great Expectation validation run; defaults to the\n            task slug\n        - **kwargs (dict, optional): additional keyword arguments to pass to the Task constructor\n    \"\"\"\n\n    def __init__(\n        self,\n        checkpoint_name: str = None,\n        context_root_dir: str = None,\n        runtime_environment: dict = {},\n        run_name: str = None,\n        **kwargs\n    ):\n        warnings.warn(\n            \"DEPRECATED: `RunGreatExpectationsCheckpoint` task is deprecated, please use \"\n            \"`RunGreatExpectationsValidation` instead\",\n            UserWarning,\n            stacklevel=2,\n        )\n\n        self.checkpoint_name = checkpoint_name\n        self.context_root_dir = context_root_dir\n        self.runtime_environment = runtime_environment\n        self.run_name = run_name\n\n        super().__init__(**kwargs)\n\n    @defaults_from_attrs(\n        \"checkpoint_name\", \"context_root_dir\", \"runtime_environment\", \"run_name\"\n    )\n    def run(\n        self,\n        checkpoint_name: str = None,\n        context_root_dir: str = None,\n        runtime_environment: dict = {},\n        run_name: str = None,\n        **kwargs\n    ):\n        \"\"\"\n        Task run method.\n\n        Args:\n            - checkpoint_name (str): the name of the checkpoint; should match the filename of\n                the checkpoint without .py\n            - context_root_dir (str): the absolute or relative path to the directory holding\n                your `great_expectations.yml`\n            - runtime_environment (dict): a dictionary of great expectation config key-value\n                pairs to overwrite your config in `great_expectations.yml`\n            - run_name (str): the name of this  Great Expectation validation run; defaults to\n                the task slug\n            - **kwargs (dict, optional): additional keyword arguments to pass to the Task\n                constructor\n\n        Raises:\n            - 'signals.VALIDATIONFAIL' if the validation was not a success\n        Returns:\n            - result\n                ('great_expectations.validation_operators.types.validation_operator_result.ValidationOperatorResult'):\n                The Great Expectations metadata returned from the validation\n\n        \"\"\"\n\n        if checkpoint_name is None:\n            raise ValueError(\"You must provide the checkpoint name.\")\n\n        context = ge.DataContext(\n            context_root_dir=context_root_dir, runtime_environment=runtime_environment\n        )\n        checkpoint = context.get_checkpoint(checkpoint_name)\n\n        batches_to_validate = []\n        for batch in checkpoint[\"batches\"]:\n            batch_kwargs = batch[\"batch_kwargs\"]\n            for suite_name in batch[\"expectation_suite_names\"]:\n                suite = context.get_expectation_suite(suite_name)\n                batch = context.get_batch(batch_kwargs, suite)\n                batches_to_validate.append(batch)\n\n        results = context.run_validation_operator(\n            checkpoint[\"validation_operator_name\"],\n            assets_to_validate=batches_to_validate,\n            run_id={\"run_name\": prefect.context.get(\"task_slug\")},\n        )\n\n        if results.success is False:\n            raise signals.VALIDATIONFAIL(result=results)\n\n        return results\n",
        "source_code_len": 4084,
        "target_code": "        return results\n",
        "target_code_len": 23,
        "diff_format": "@@ -274,106 +273,1 @@\n         return results\n-\n-\n-class RunGreatExpectationsCheckpoint(Task):\n-    \"\"\"\n-    DEPRECATED\n-\n-    Task for running a Great Expectations checkpoint. For this task to run properly, it must be\n-    run above your great_expectations directory or configured with the `context_root_dir` for\n-    your great_expectations directory on the local file system of the worker process.\n-\n-    Args:\n-        - checkpoint_name (str): the name of the checkpoint; should match the filename of the\n-            checkpoint without .py\n-        - context_root_dir (str): the absolute or relative path to the directory holding your\n-            `great_expectations.yml`\n-        - runtime_environment (dict): a dictionary of great expectation config key-value pairs\n-            to overwrite your config in `great_expectations.yml`\n-        - run_name (str): the name of this Great Expectation validation run; defaults to the\n-            task slug\n-        - **kwargs (dict, optional): additional keyword arguments to pass to the Task constructor\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        checkpoint_name: str = None,\n-        context_root_dir: str = None,\n-        runtime_environment: dict = {},\n-        run_name: str = None,\n-        **kwargs\n-    ):\n-        warnings.warn(\n-            \"DEPRECATED: `RunGreatExpectationsCheckpoint` task is deprecated, please use \"\n-            \"`RunGreatExpectationsValidation` instead\",\n-            UserWarning,\n-            stacklevel=2,\n-        )\n-\n-        self.checkpoint_name = checkpoint_name\n-        self.context_root_dir = context_root_dir\n-        self.runtime_environment = runtime_environment\n-        self.run_name = run_name\n-\n-        super().__init__(**kwargs)\n-\n-    @defaults_from_attrs(\n-        \"checkpoint_name\", \"context_root_dir\", \"runtime_environment\", \"run_name\"\n-    )\n-    def run(\n-        self,\n-        checkpoint_name: str = None,\n-        context_root_dir: str = None,\n-        runtime_environment: dict = {},\n-        run_name: str = None,\n-        **kwargs\n-    ):\n-        \"\"\"\n-        Task run method.\n-\n-        Args:\n-            - checkpoint_name (str): the name of the checkpoint; should match the filename of\n-                the checkpoint without .py\n-            - context_root_dir (str): the absolute or relative path to the directory holding\n-                your `great_expectations.yml`\n-            - runtime_environment (dict): a dictionary of great expectation config key-value\n-                pairs to overwrite your config in `great_expectations.yml`\n-            - run_name (str): the name of this  Great Expectation validation run; defaults to\n-                the task slug\n-            - **kwargs (dict, optional): additional keyword arguments to pass to the Task\n-                constructor\n-\n-        Raises:\n-            - 'signals.VALIDATIONFAIL' if the validation was not a success\n-        Returns:\n-            - result\n-                ('great_expectations.validation_operators.types.validation_operator_result.ValidationOperatorResult'):\n-                The Great Expectations metadata returned from the validation\n-\n-        \"\"\"\n-\n-        if checkpoint_name is None:\n-            raise ValueError(\"You must provide the checkpoint name.\")\n-\n-        context = ge.DataContext(\n-            context_root_dir=context_root_dir, runtime_environment=runtime_environment\n-        )\n-        checkpoint = context.get_checkpoint(checkpoint_name)\n-\n-        batches_to_validate = []\n-        for batch in checkpoint[\"batches\"]:\n-            batch_kwargs = batch[\"batch_kwargs\"]\n-            for suite_name in batch[\"expectation_suite_names\"]:\n-                suite = context.get_expectation_suite(suite_name)\n-                batch = context.get_batch(batch_kwargs, suite)\n-                batches_to_validate.append(batch)\n-\n-        results = context.run_validation_operator(\n-            checkpoint[\"validation_operator_name\"],\n-            assets_to_validate=batches_to_validate,\n-            run_id={\"run_name\": prefect.context.get(\"task_slug\")},\n-        )\n-\n-        if results.success is False:\n-            raise signals.VALIDATIONFAIL(result=results)\n-\n-        return results\n",
        "source_code_with_indent": "        <DED>return results\n\n\n<DED><DED>class RunGreatExpectationsCheckpoint(Task):\n    <IND>\"\"\"\n    DEPRECATED\n\n    Task for running a Great Expectations checkpoint. For this task to run properly, it must be\n    run above your great_expectations directory or configured with the `context_root_dir` for\n    your great_expectations directory on the local file system of the worker process.\n\n    Args:\n        - checkpoint_name (str): the name of the checkpoint; should match the filename of the\n            checkpoint without .py\n        - context_root_dir (str): the absolute or relative path to the directory holding your\n            `great_expectations.yml`\n        - runtime_environment (dict): a dictionary of great expectation config key-value pairs\n            to overwrite your config in `great_expectations.yml`\n        - run_name (str): the name of this Great Expectation validation run; defaults to the\n            task slug\n        - **kwargs (dict, optional): additional keyword arguments to pass to the Task constructor\n    \"\"\"\n\n    def __init__(\n        self,\n        checkpoint_name: str = None,\n        context_root_dir: str = None,\n        runtime_environment: dict = {},\n        run_name: str = None,\n        **kwargs\n    ):\n        <IND>warnings.warn(\n            \"DEPRECATED: `RunGreatExpectationsCheckpoint` task is deprecated, please use \"\n            \"`RunGreatExpectationsValidation` instead\",\n            UserWarning,\n            stacklevel=2,\n        )\n\n        self.checkpoint_name = checkpoint_name\n        self.context_root_dir = context_root_dir\n        self.runtime_environment = runtime_environment\n        self.run_name = run_name\n\n        super().__init__(**kwargs)\n\n    <DED>@defaults_from_attrs(\n        \"checkpoint_name\", \"context_root_dir\", \"runtime_environment\", \"run_name\"\n    )\n    def run(\n        self,\n        checkpoint_name: str = None,\n        context_root_dir: str = None,\n        runtime_environment: dict = {},\n        run_name: str = None,\n        **kwargs\n    ):\n        <IND>\"\"\"\n        Task run method.\n\n        Args:\n            - checkpoint_name (str): the name of the checkpoint; should match the filename of\n                the checkpoint without .py\n            - context_root_dir (str): the absolute or relative path to the directory holding\n                your `great_expectations.yml`\n            - runtime_environment (dict): a dictionary of great expectation config key-value\n                pairs to overwrite your config in `great_expectations.yml`\n            - run_name (str): the name of this  Great Expectation validation run; defaults to\n                the task slug\n            - **kwargs (dict, optional): additional keyword arguments to pass to the Task\n                constructor\n\n        Raises:\n            - 'signals.VALIDATIONFAIL' if the validation was not a success\n        Returns:\n            - result\n                ('great_expectations.validation_operators.types.validation_operator_result.ValidationOperatorResult'):\n                The Great Expectations metadata returned from the validation\n\n        \"\"\"\n\n        if checkpoint_name is None:\n            <IND>raise ValueError(\"You must provide the checkpoint name.\")\n\n        <DED>context = ge.DataContext(\n            context_root_dir=context_root_dir, runtime_environment=runtime_environment\n        )\n        checkpoint = context.get_checkpoint(checkpoint_name)\n\n        batches_to_validate = []\n        for batch in checkpoint[\"batches\"]:\n            <IND>batch_kwargs = batch[\"batch_kwargs\"]\n            for suite_name in batch[\"expectation_suite_names\"]:\n                <IND>suite = context.get_expectation_suite(suite_name)\n                batch = context.get_batch(batch_kwargs, suite)\n                batches_to_validate.append(batch)\n\n        <DED><DED>results = context.run_validation_operator(\n            checkpoint[\"validation_operator_name\"],\n            assets_to_validate=batches_to_validate,\n            run_id={\"run_name\": prefect.context.get(\"task_slug\")},\n        )\n\n        if results.success is False:\n            <IND>raise signals.VALIDATIONFAIL(result=results)\n\n        <DED>return results\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>return results\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "PrefectHQ/prefect",
    "commit": "a9270d965aee1e2182843e7fa75d18e1054230d0",
    "filename": "src/prefect/tasks/great_expectations/checkpoints.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/PrefectHQ-prefect/src/prefect/tasks/great_expectations/checkpoints.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/prefect/tasks/great_expectations/checkpoints.py:300:8 Incompatible variable type [9]: context_root_dir is declared to have type `str` but is used as type `None`.",
    "message": " context_root_dir is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 300,
    "warning_line": "        context_root_dir: str = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "        return results\n\n\nclass RunGreatExpectationsCheckpoint(Task):\n    \"\"\"\n    DEPRECATED\n\n    Task for running a Great Expectations checkpoint. For this task to run properly, it must be\n    run above your great_expectations directory or configured with the `context_root_dir` for\n    your great_expectations directory on the local file system of the worker process.\n\n    Args:\n        - checkpoint_name (str): the name of the checkpoint; should match the filename of the\n            checkpoint without .py\n        - context_root_dir (str): the absolute or relative path to the directory holding your\n            `great_expectations.yml`\n        - runtime_environment (dict): a dictionary of great expectation config key-value pairs\n            to overwrite your config in `great_expectations.yml`\n        - run_name (str): the name of this Great Expectation validation run; defaults to the\n            task slug\n        - **kwargs (dict, optional): additional keyword arguments to pass to the Task constructor\n    \"\"\"\n\n    def __init__(\n        self,\n        checkpoint_name: str = None,\n        context_root_dir: str = None,\n        runtime_environment: dict = {},\n        run_name: str = None,\n        **kwargs\n    ):\n        warnings.warn(\n            \"DEPRECATED: `RunGreatExpectationsCheckpoint` task is deprecated, please use \"\n            \"`RunGreatExpectationsValidation` instead\",\n            UserWarning,\n            stacklevel=2,\n        )\n\n        self.checkpoint_name = checkpoint_name\n        self.context_root_dir = context_root_dir\n        self.runtime_environment = runtime_environment\n        self.run_name = run_name\n\n        super().__init__(**kwargs)\n\n    @defaults_from_attrs(\n        \"checkpoint_name\", \"context_root_dir\", \"runtime_environment\", \"run_name\"\n    )\n    def run(\n        self,\n        checkpoint_name: str = None,\n        context_root_dir: str = None,\n        runtime_environment: dict = {},\n        run_name: str = None,\n        **kwargs\n    ):\n        \"\"\"\n        Task run method.\n\n        Args:\n            - checkpoint_name (str): the name of the checkpoint; should match the filename of\n                the checkpoint without .py\n            - context_root_dir (str): the absolute or relative path to the directory holding\n                your `great_expectations.yml`\n            - runtime_environment (dict): a dictionary of great expectation config key-value\n                pairs to overwrite your config in `great_expectations.yml`\n            - run_name (str): the name of this  Great Expectation validation run; defaults to\n                the task slug\n            - **kwargs (dict, optional): additional keyword arguments to pass to the Task\n                constructor\n\n        Raises:\n            - 'signals.VALIDATIONFAIL' if the validation was not a success\n        Returns:\n            - result\n                ('great_expectations.validation_operators.types.validation_operator_result.ValidationOperatorResult'):\n                The Great Expectations metadata returned from the validation\n\n        \"\"\"\n\n        if checkpoint_name is None:\n            raise ValueError(\"You must provide the checkpoint name.\")\n\n        context = ge.DataContext(\n            context_root_dir=context_root_dir, runtime_environment=runtime_environment\n        )\n        checkpoint = context.get_checkpoint(checkpoint_name)\n\n        batches_to_validate = []\n        for batch in checkpoint[\"batches\"]:\n            batch_kwargs = batch[\"batch_kwargs\"]\n            for suite_name in batch[\"expectation_suite_names\"]:\n                suite = context.get_expectation_suite(suite_name)\n                batch = context.get_batch(batch_kwargs, suite)\n                batches_to_validate.append(batch)\n\n        results = context.run_validation_operator(\n            checkpoint[\"validation_operator_name\"],\n            assets_to_validate=batches_to_validate,\n            run_id={\"run_name\": prefect.context.get(\"task_slug\")},\n        )\n\n        if results.success is False:\n            raise signals.VALIDATIONFAIL(result=results)\n\n        return results\n",
        "source_code_len": 4084,
        "target_code": "        return results\n",
        "target_code_len": 23,
        "diff_format": "@@ -274,106 +273,1 @@\n         return results\n-\n-\n-class RunGreatExpectationsCheckpoint(Task):\n-    \"\"\"\n-    DEPRECATED\n-\n-    Task for running a Great Expectations checkpoint. For this task to run properly, it must be\n-    run above your great_expectations directory or configured with the `context_root_dir` for\n-    your great_expectations directory on the local file system of the worker process.\n-\n-    Args:\n-        - checkpoint_name (str): the name of the checkpoint; should match the filename of the\n-            checkpoint without .py\n-        - context_root_dir (str): the absolute or relative path to the directory holding your\n-            `great_expectations.yml`\n-        - runtime_environment (dict): a dictionary of great expectation config key-value pairs\n-            to overwrite your config in `great_expectations.yml`\n-        - run_name (str): the name of this Great Expectation validation run; defaults to the\n-            task slug\n-        - **kwargs (dict, optional): additional keyword arguments to pass to the Task constructor\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        checkpoint_name: str = None,\n-        context_root_dir: str = None,\n-        runtime_environment: dict = {},\n-        run_name: str = None,\n-        **kwargs\n-    ):\n-        warnings.warn(\n-            \"DEPRECATED: `RunGreatExpectationsCheckpoint` task is deprecated, please use \"\n-            \"`RunGreatExpectationsValidation` instead\",\n-            UserWarning,\n-            stacklevel=2,\n-        )\n-\n-        self.checkpoint_name = checkpoint_name\n-        self.context_root_dir = context_root_dir\n-        self.runtime_environment = runtime_environment\n-        self.run_name = run_name\n-\n-        super().__init__(**kwargs)\n-\n-    @defaults_from_attrs(\n-        \"checkpoint_name\", \"context_root_dir\", \"runtime_environment\", \"run_name\"\n-    )\n-    def run(\n-        self,\n-        checkpoint_name: str = None,\n-        context_root_dir: str = None,\n-        runtime_environment: dict = {},\n-        run_name: str = None,\n-        **kwargs\n-    ):\n-        \"\"\"\n-        Task run method.\n-\n-        Args:\n-            - checkpoint_name (str): the name of the checkpoint; should match the filename of\n-                the checkpoint without .py\n-            - context_root_dir (str): the absolute or relative path to the directory holding\n-                your `great_expectations.yml`\n-            - runtime_environment (dict): a dictionary of great expectation config key-value\n-                pairs to overwrite your config in `great_expectations.yml`\n-            - run_name (str): the name of this  Great Expectation validation run; defaults to\n-                the task slug\n-            - **kwargs (dict, optional): additional keyword arguments to pass to the Task\n-                constructor\n-\n-        Raises:\n-            - 'signals.VALIDATIONFAIL' if the validation was not a success\n-        Returns:\n-            - result\n-                ('great_expectations.validation_operators.types.validation_operator_result.ValidationOperatorResult'):\n-                The Great Expectations metadata returned from the validation\n-\n-        \"\"\"\n-\n-        if checkpoint_name is None:\n-            raise ValueError(\"You must provide the checkpoint name.\")\n-\n-        context = ge.DataContext(\n-            context_root_dir=context_root_dir, runtime_environment=runtime_environment\n-        )\n-        checkpoint = context.get_checkpoint(checkpoint_name)\n-\n-        batches_to_validate = []\n-        for batch in checkpoint[\"batches\"]:\n-            batch_kwargs = batch[\"batch_kwargs\"]\n-            for suite_name in batch[\"expectation_suite_names\"]:\n-                suite = context.get_expectation_suite(suite_name)\n-                batch = context.get_batch(batch_kwargs, suite)\n-                batches_to_validate.append(batch)\n-\n-        results = context.run_validation_operator(\n-            checkpoint[\"validation_operator_name\"],\n-            assets_to_validate=batches_to_validate,\n-            run_id={\"run_name\": prefect.context.get(\"task_slug\")},\n-        )\n-\n-        if results.success is False:\n-            raise signals.VALIDATIONFAIL(result=results)\n-\n-        return results\n",
        "source_code_with_indent": "        <DED>return results\n\n\n<DED><DED>class RunGreatExpectationsCheckpoint(Task):\n    <IND>\"\"\"\n    DEPRECATED\n\n    Task for running a Great Expectations checkpoint. For this task to run properly, it must be\n    run above your great_expectations directory or configured with the `context_root_dir` for\n    your great_expectations directory on the local file system of the worker process.\n\n    Args:\n        - checkpoint_name (str): the name of the checkpoint; should match the filename of the\n            checkpoint without .py\n        - context_root_dir (str): the absolute or relative path to the directory holding your\n            `great_expectations.yml`\n        - runtime_environment (dict): a dictionary of great expectation config key-value pairs\n            to overwrite your config in `great_expectations.yml`\n        - run_name (str): the name of this Great Expectation validation run; defaults to the\n            task slug\n        - **kwargs (dict, optional): additional keyword arguments to pass to the Task constructor\n    \"\"\"\n\n    def __init__(\n        self,\n        checkpoint_name: str = None,\n        context_root_dir: str = None,\n        runtime_environment: dict = {},\n        run_name: str = None,\n        **kwargs\n    ):\n        <IND>warnings.warn(\n            \"DEPRECATED: `RunGreatExpectationsCheckpoint` task is deprecated, please use \"\n            \"`RunGreatExpectationsValidation` instead\",\n            UserWarning,\n            stacklevel=2,\n        )\n\n        self.checkpoint_name = checkpoint_name\n        self.context_root_dir = context_root_dir\n        self.runtime_environment = runtime_environment\n        self.run_name = run_name\n\n        super().__init__(**kwargs)\n\n    <DED>@defaults_from_attrs(\n        \"checkpoint_name\", \"context_root_dir\", \"runtime_environment\", \"run_name\"\n    )\n    def run(\n        self,\n        checkpoint_name: str = None,\n        context_root_dir: str = None,\n        runtime_environment: dict = {},\n        run_name: str = None,\n        **kwargs\n    ):\n        <IND>\"\"\"\n        Task run method.\n\n        Args:\n            - checkpoint_name (str): the name of the checkpoint; should match the filename of\n                the checkpoint without .py\n            - context_root_dir (str): the absolute or relative path to the directory holding\n                your `great_expectations.yml`\n            - runtime_environment (dict): a dictionary of great expectation config key-value\n                pairs to overwrite your config in `great_expectations.yml`\n            - run_name (str): the name of this  Great Expectation validation run; defaults to\n                the task slug\n            - **kwargs (dict, optional): additional keyword arguments to pass to the Task\n                constructor\n\n        Raises:\n            - 'signals.VALIDATIONFAIL' if the validation was not a success\n        Returns:\n            - result\n                ('great_expectations.validation_operators.types.validation_operator_result.ValidationOperatorResult'):\n                The Great Expectations metadata returned from the validation\n\n        \"\"\"\n\n        if checkpoint_name is None:\n            <IND>raise ValueError(\"You must provide the checkpoint name.\")\n\n        <DED>context = ge.DataContext(\n            context_root_dir=context_root_dir, runtime_environment=runtime_environment\n        )\n        checkpoint = context.get_checkpoint(checkpoint_name)\n\n        batches_to_validate = []\n        for batch in checkpoint[\"batches\"]:\n            <IND>batch_kwargs = batch[\"batch_kwargs\"]\n            for suite_name in batch[\"expectation_suite_names\"]:\n                <IND>suite = context.get_expectation_suite(suite_name)\n                batch = context.get_batch(batch_kwargs, suite)\n                batches_to_validate.append(batch)\n\n        <DED><DED>results = context.run_validation_operator(\n            checkpoint[\"validation_operator_name\"],\n            assets_to_validate=batches_to_validate,\n            run_id={\"run_name\": prefect.context.get(\"task_slug\")},\n        )\n\n        if results.success is False:\n            <IND>raise signals.VALIDATIONFAIL(result=results)\n\n        <DED>return results\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>return results\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "PrefectHQ/prefect",
    "commit": "a9270d965aee1e2182843e7fa75d18e1054230d0",
    "filename": "src/prefect/tasks/great_expectations/checkpoints.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/PrefectHQ-prefect/src/prefect/tasks/great_expectations/checkpoints.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/prefect/tasks/great_expectations/checkpoints.py:302:8 Incompatible variable type [9]: run_name is declared to have type `str` but is used as type `None`.",
    "message": " run_name is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 302,
    "warning_line": "        run_name: str = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "        return results\n\n\nclass RunGreatExpectationsCheckpoint(Task):\n    \"\"\"\n    DEPRECATED\n\n    Task for running a Great Expectations checkpoint. For this task to run properly, it must be\n    run above your great_expectations directory or configured with the `context_root_dir` for\n    your great_expectations directory on the local file system of the worker process.\n\n    Args:\n        - checkpoint_name (str): the name of the checkpoint; should match the filename of the\n            checkpoint without .py\n        - context_root_dir (str): the absolute or relative path to the directory holding your\n            `great_expectations.yml`\n        - runtime_environment (dict): a dictionary of great expectation config key-value pairs\n            to overwrite your config in `great_expectations.yml`\n        - run_name (str): the name of this Great Expectation validation run; defaults to the\n            task slug\n        - **kwargs (dict, optional): additional keyword arguments to pass to the Task constructor\n    \"\"\"\n\n    def __init__(\n        self,\n        checkpoint_name: str = None,\n        context_root_dir: str = None,\n        runtime_environment: dict = {},\n        run_name: str = None,\n        **kwargs\n    ):\n        warnings.warn(\n            \"DEPRECATED: `RunGreatExpectationsCheckpoint` task is deprecated, please use \"\n            \"`RunGreatExpectationsValidation` instead\",\n            UserWarning,\n            stacklevel=2,\n        )\n\n        self.checkpoint_name = checkpoint_name\n        self.context_root_dir = context_root_dir\n        self.runtime_environment = runtime_environment\n        self.run_name = run_name\n\n        super().__init__(**kwargs)\n\n    @defaults_from_attrs(\n        \"checkpoint_name\", \"context_root_dir\", \"runtime_environment\", \"run_name\"\n    )\n    def run(\n        self,\n        checkpoint_name: str = None,\n        context_root_dir: str = None,\n        runtime_environment: dict = {},\n        run_name: str = None,\n        **kwargs\n    ):\n        \"\"\"\n        Task run method.\n\n        Args:\n            - checkpoint_name (str): the name of the checkpoint; should match the filename of\n                the checkpoint without .py\n            - context_root_dir (str): the absolute or relative path to the directory holding\n                your `great_expectations.yml`\n            - runtime_environment (dict): a dictionary of great expectation config key-value\n                pairs to overwrite your config in `great_expectations.yml`\n            - run_name (str): the name of this  Great Expectation validation run; defaults to\n                the task slug\n            - **kwargs (dict, optional): additional keyword arguments to pass to the Task\n                constructor\n\n        Raises:\n            - 'signals.VALIDATIONFAIL' if the validation was not a success\n        Returns:\n            - result\n                ('great_expectations.validation_operators.types.validation_operator_result.ValidationOperatorResult'):\n                The Great Expectations metadata returned from the validation\n\n        \"\"\"\n\n        if checkpoint_name is None:\n            raise ValueError(\"You must provide the checkpoint name.\")\n\n        context = ge.DataContext(\n            context_root_dir=context_root_dir, runtime_environment=runtime_environment\n        )\n        checkpoint = context.get_checkpoint(checkpoint_name)\n\n        batches_to_validate = []\n        for batch in checkpoint[\"batches\"]:\n            batch_kwargs = batch[\"batch_kwargs\"]\n            for suite_name in batch[\"expectation_suite_names\"]:\n                suite = context.get_expectation_suite(suite_name)\n                batch = context.get_batch(batch_kwargs, suite)\n                batches_to_validate.append(batch)\n\n        results = context.run_validation_operator(\n            checkpoint[\"validation_operator_name\"],\n            assets_to_validate=batches_to_validate,\n            run_id={\"run_name\": prefect.context.get(\"task_slug\")},\n        )\n\n        if results.success is False:\n            raise signals.VALIDATIONFAIL(result=results)\n\n        return results\n",
        "source_code_len": 4084,
        "target_code": "        return results\n",
        "target_code_len": 23,
        "diff_format": "@@ -274,106 +273,1 @@\n         return results\n-\n-\n-class RunGreatExpectationsCheckpoint(Task):\n-    \"\"\"\n-    DEPRECATED\n-\n-    Task for running a Great Expectations checkpoint. For this task to run properly, it must be\n-    run above your great_expectations directory or configured with the `context_root_dir` for\n-    your great_expectations directory on the local file system of the worker process.\n-\n-    Args:\n-        - checkpoint_name (str): the name of the checkpoint; should match the filename of the\n-            checkpoint without .py\n-        - context_root_dir (str): the absolute or relative path to the directory holding your\n-            `great_expectations.yml`\n-        - runtime_environment (dict): a dictionary of great expectation config key-value pairs\n-            to overwrite your config in `great_expectations.yml`\n-        - run_name (str): the name of this Great Expectation validation run; defaults to the\n-            task slug\n-        - **kwargs (dict, optional): additional keyword arguments to pass to the Task constructor\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        checkpoint_name: str = None,\n-        context_root_dir: str = None,\n-        runtime_environment: dict = {},\n-        run_name: str = None,\n-        **kwargs\n-    ):\n-        warnings.warn(\n-            \"DEPRECATED: `RunGreatExpectationsCheckpoint` task is deprecated, please use \"\n-            \"`RunGreatExpectationsValidation` instead\",\n-            UserWarning,\n-            stacklevel=2,\n-        )\n-\n-        self.checkpoint_name = checkpoint_name\n-        self.context_root_dir = context_root_dir\n-        self.runtime_environment = runtime_environment\n-        self.run_name = run_name\n-\n-        super().__init__(**kwargs)\n-\n-    @defaults_from_attrs(\n-        \"checkpoint_name\", \"context_root_dir\", \"runtime_environment\", \"run_name\"\n-    )\n-    def run(\n-        self,\n-        checkpoint_name: str = None,\n-        context_root_dir: str = None,\n-        runtime_environment: dict = {},\n-        run_name: str = None,\n-        **kwargs\n-    ):\n-        \"\"\"\n-        Task run method.\n-\n-        Args:\n-            - checkpoint_name (str): the name of the checkpoint; should match the filename of\n-                the checkpoint without .py\n-            - context_root_dir (str): the absolute or relative path to the directory holding\n-                your `great_expectations.yml`\n-            - runtime_environment (dict): a dictionary of great expectation config key-value\n-                pairs to overwrite your config in `great_expectations.yml`\n-            - run_name (str): the name of this  Great Expectation validation run; defaults to\n-                the task slug\n-            - **kwargs (dict, optional): additional keyword arguments to pass to the Task\n-                constructor\n-\n-        Raises:\n-            - 'signals.VALIDATIONFAIL' if the validation was not a success\n-        Returns:\n-            - result\n-                ('great_expectations.validation_operators.types.validation_operator_result.ValidationOperatorResult'):\n-                The Great Expectations metadata returned from the validation\n-\n-        \"\"\"\n-\n-        if checkpoint_name is None:\n-            raise ValueError(\"You must provide the checkpoint name.\")\n-\n-        context = ge.DataContext(\n-            context_root_dir=context_root_dir, runtime_environment=runtime_environment\n-        )\n-        checkpoint = context.get_checkpoint(checkpoint_name)\n-\n-        batches_to_validate = []\n-        for batch in checkpoint[\"batches\"]:\n-            batch_kwargs = batch[\"batch_kwargs\"]\n-            for suite_name in batch[\"expectation_suite_names\"]:\n-                suite = context.get_expectation_suite(suite_name)\n-                batch = context.get_batch(batch_kwargs, suite)\n-                batches_to_validate.append(batch)\n-\n-        results = context.run_validation_operator(\n-            checkpoint[\"validation_operator_name\"],\n-            assets_to_validate=batches_to_validate,\n-            run_id={\"run_name\": prefect.context.get(\"task_slug\")},\n-        )\n-\n-        if results.success is False:\n-            raise signals.VALIDATIONFAIL(result=results)\n-\n-        return results\n",
        "source_code_with_indent": "        <DED>return results\n\n\n<DED><DED>class RunGreatExpectationsCheckpoint(Task):\n    <IND>\"\"\"\n    DEPRECATED\n\n    Task for running a Great Expectations checkpoint. For this task to run properly, it must be\n    run above your great_expectations directory or configured with the `context_root_dir` for\n    your great_expectations directory on the local file system of the worker process.\n\n    Args:\n        - checkpoint_name (str): the name of the checkpoint; should match the filename of the\n            checkpoint without .py\n        - context_root_dir (str): the absolute or relative path to the directory holding your\n            `great_expectations.yml`\n        - runtime_environment (dict): a dictionary of great expectation config key-value pairs\n            to overwrite your config in `great_expectations.yml`\n        - run_name (str): the name of this Great Expectation validation run; defaults to the\n            task slug\n        - **kwargs (dict, optional): additional keyword arguments to pass to the Task constructor\n    \"\"\"\n\n    def __init__(\n        self,\n        checkpoint_name: str = None,\n        context_root_dir: str = None,\n        runtime_environment: dict = {},\n        run_name: str = None,\n        **kwargs\n    ):\n        <IND>warnings.warn(\n            \"DEPRECATED: `RunGreatExpectationsCheckpoint` task is deprecated, please use \"\n            \"`RunGreatExpectationsValidation` instead\",\n            UserWarning,\n            stacklevel=2,\n        )\n\n        self.checkpoint_name = checkpoint_name\n        self.context_root_dir = context_root_dir\n        self.runtime_environment = runtime_environment\n        self.run_name = run_name\n\n        super().__init__(**kwargs)\n\n    <DED>@defaults_from_attrs(\n        \"checkpoint_name\", \"context_root_dir\", \"runtime_environment\", \"run_name\"\n    )\n    def run(\n        self,\n        checkpoint_name: str = None,\n        context_root_dir: str = None,\n        runtime_environment: dict = {},\n        run_name: str = None,\n        **kwargs\n    ):\n        <IND>\"\"\"\n        Task run method.\n\n        Args:\n            - checkpoint_name (str): the name of the checkpoint; should match the filename of\n                the checkpoint without .py\n            - context_root_dir (str): the absolute or relative path to the directory holding\n                your `great_expectations.yml`\n            - runtime_environment (dict): a dictionary of great expectation config key-value\n                pairs to overwrite your config in `great_expectations.yml`\n            - run_name (str): the name of this  Great Expectation validation run; defaults to\n                the task slug\n            - **kwargs (dict, optional): additional keyword arguments to pass to the Task\n                constructor\n\n        Raises:\n            - 'signals.VALIDATIONFAIL' if the validation was not a success\n        Returns:\n            - result\n                ('great_expectations.validation_operators.types.validation_operator_result.ValidationOperatorResult'):\n                The Great Expectations metadata returned from the validation\n\n        \"\"\"\n\n        if checkpoint_name is None:\n            <IND>raise ValueError(\"You must provide the checkpoint name.\")\n\n        <DED>context = ge.DataContext(\n            context_root_dir=context_root_dir, runtime_environment=runtime_environment\n        )\n        checkpoint = context.get_checkpoint(checkpoint_name)\n\n        batches_to_validate = []\n        for batch in checkpoint[\"batches\"]:\n            <IND>batch_kwargs = batch[\"batch_kwargs\"]\n            for suite_name in batch[\"expectation_suite_names\"]:\n                <IND>suite = context.get_expectation_suite(suite_name)\n                batch = context.get_batch(batch_kwargs, suite)\n                batches_to_validate.append(batch)\n\n        <DED><DED>results = context.run_validation_operator(\n            checkpoint[\"validation_operator_name\"],\n            assets_to_validate=batches_to_validate,\n            run_id={\"run_name\": prefect.context.get(\"task_slug\")},\n        )\n\n        if results.success is False:\n            <IND>raise signals.VALIDATIONFAIL(result=results)\n\n        <DED>return results\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>return results\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "PrefectHQ/prefect",
    "commit": "a9270d965aee1e2182843e7fa75d18e1054230d0",
    "filename": "src/prefect/tasks/great_expectations/checkpoints.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/PrefectHQ-prefect/src/prefect/tasks/great_expectations/checkpoints.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/prefect/tasks/great_expectations/checkpoints.py:324:8 Incompatible variable type [9]: checkpoint_name is declared to have type `str` but is used as type `None`.",
    "message": " checkpoint_name is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 324,
    "warning_line": "        checkpoint_name: str = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "        return results\n\n\nclass RunGreatExpectationsCheckpoint(Task):\n    \"\"\"\n    DEPRECATED\n\n    Task for running a Great Expectations checkpoint. For this task to run properly, it must be\n    run above your great_expectations directory or configured with the `context_root_dir` for\n    your great_expectations directory on the local file system of the worker process.\n\n    Args:\n        - checkpoint_name (str): the name of the checkpoint; should match the filename of the\n            checkpoint without .py\n        - context_root_dir (str): the absolute or relative path to the directory holding your\n            `great_expectations.yml`\n        - runtime_environment (dict): a dictionary of great expectation config key-value pairs\n            to overwrite your config in `great_expectations.yml`\n        - run_name (str): the name of this Great Expectation validation run; defaults to the\n            task slug\n        - **kwargs (dict, optional): additional keyword arguments to pass to the Task constructor\n    \"\"\"\n\n    def __init__(\n        self,\n        checkpoint_name: str = None,\n        context_root_dir: str = None,\n        runtime_environment: dict = {},\n        run_name: str = None,\n        **kwargs\n    ):\n        warnings.warn(\n            \"DEPRECATED: `RunGreatExpectationsCheckpoint` task is deprecated, please use \"\n            \"`RunGreatExpectationsValidation` instead\",\n            UserWarning,\n            stacklevel=2,\n        )\n\n        self.checkpoint_name = checkpoint_name\n        self.context_root_dir = context_root_dir\n        self.runtime_environment = runtime_environment\n        self.run_name = run_name\n\n        super().__init__(**kwargs)\n\n    @defaults_from_attrs(\n        \"checkpoint_name\", \"context_root_dir\", \"runtime_environment\", \"run_name\"\n    )\n    def run(\n        self,\n        checkpoint_name: str = None,\n        context_root_dir: str = None,\n        runtime_environment: dict = {},\n        run_name: str = None,\n        **kwargs\n    ):\n        \"\"\"\n        Task run method.\n\n        Args:\n            - checkpoint_name (str): the name of the checkpoint; should match the filename of\n                the checkpoint without .py\n            - context_root_dir (str): the absolute or relative path to the directory holding\n                your `great_expectations.yml`\n            - runtime_environment (dict): a dictionary of great expectation config key-value\n                pairs to overwrite your config in `great_expectations.yml`\n            - run_name (str): the name of this  Great Expectation validation run; defaults to\n                the task slug\n            - **kwargs (dict, optional): additional keyword arguments to pass to the Task\n                constructor\n\n        Raises:\n            - 'signals.VALIDATIONFAIL' if the validation was not a success\n        Returns:\n            - result\n                ('great_expectations.validation_operators.types.validation_operator_result.ValidationOperatorResult'):\n                The Great Expectations metadata returned from the validation\n\n        \"\"\"\n\n        if checkpoint_name is None:\n            raise ValueError(\"You must provide the checkpoint name.\")\n\n        context = ge.DataContext(\n            context_root_dir=context_root_dir, runtime_environment=runtime_environment\n        )\n        checkpoint = context.get_checkpoint(checkpoint_name)\n\n        batches_to_validate = []\n        for batch in checkpoint[\"batches\"]:\n            batch_kwargs = batch[\"batch_kwargs\"]\n            for suite_name in batch[\"expectation_suite_names\"]:\n                suite = context.get_expectation_suite(suite_name)\n                batch = context.get_batch(batch_kwargs, suite)\n                batches_to_validate.append(batch)\n\n        results = context.run_validation_operator(\n            checkpoint[\"validation_operator_name\"],\n            assets_to_validate=batches_to_validate,\n            run_id={\"run_name\": prefect.context.get(\"task_slug\")},\n        )\n\n        if results.success is False:\n            raise signals.VALIDATIONFAIL(result=results)\n\n        return results\n",
        "source_code_len": 4084,
        "target_code": "        return results\n",
        "target_code_len": 23,
        "diff_format": "@@ -274,106 +273,1 @@\n         return results\n-\n-\n-class RunGreatExpectationsCheckpoint(Task):\n-    \"\"\"\n-    DEPRECATED\n-\n-    Task for running a Great Expectations checkpoint. For this task to run properly, it must be\n-    run above your great_expectations directory or configured with the `context_root_dir` for\n-    your great_expectations directory on the local file system of the worker process.\n-\n-    Args:\n-        - checkpoint_name (str): the name of the checkpoint; should match the filename of the\n-            checkpoint without .py\n-        - context_root_dir (str): the absolute or relative path to the directory holding your\n-            `great_expectations.yml`\n-        - runtime_environment (dict): a dictionary of great expectation config key-value pairs\n-            to overwrite your config in `great_expectations.yml`\n-        - run_name (str): the name of this Great Expectation validation run; defaults to the\n-            task slug\n-        - **kwargs (dict, optional): additional keyword arguments to pass to the Task constructor\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        checkpoint_name: str = None,\n-        context_root_dir: str = None,\n-        runtime_environment: dict = {},\n-        run_name: str = None,\n-        **kwargs\n-    ):\n-        warnings.warn(\n-            \"DEPRECATED: `RunGreatExpectationsCheckpoint` task is deprecated, please use \"\n-            \"`RunGreatExpectationsValidation` instead\",\n-            UserWarning,\n-            stacklevel=2,\n-        )\n-\n-        self.checkpoint_name = checkpoint_name\n-        self.context_root_dir = context_root_dir\n-        self.runtime_environment = runtime_environment\n-        self.run_name = run_name\n-\n-        super().__init__(**kwargs)\n-\n-    @defaults_from_attrs(\n-        \"checkpoint_name\", \"context_root_dir\", \"runtime_environment\", \"run_name\"\n-    )\n-    def run(\n-        self,\n-        checkpoint_name: str = None,\n-        context_root_dir: str = None,\n-        runtime_environment: dict = {},\n-        run_name: str = None,\n-        **kwargs\n-    ):\n-        \"\"\"\n-        Task run method.\n-\n-        Args:\n-            - checkpoint_name (str): the name of the checkpoint; should match the filename of\n-                the checkpoint without .py\n-            - context_root_dir (str): the absolute or relative path to the directory holding\n-                your `great_expectations.yml`\n-            - runtime_environment (dict): a dictionary of great expectation config key-value\n-                pairs to overwrite your config in `great_expectations.yml`\n-            - run_name (str): the name of this  Great Expectation validation run; defaults to\n-                the task slug\n-            - **kwargs (dict, optional): additional keyword arguments to pass to the Task\n-                constructor\n-\n-        Raises:\n-            - 'signals.VALIDATIONFAIL' if the validation was not a success\n-        Returns:\n-            - result\n-                ('great_expectations.validation_operators.types.validation_operator_result.ValidationOperatorResult'):\n-                The Great Expectations metadata returned from the validation\n-\n-        \"\"\"\n-\n-        if checkpoint_name is None:\n-            raise ValueError(\"You must provide the checkpoint name.\")\n-\n-        context = ge.DataContext(\n-            context_root_dir=context_root_dir, runtime_environment=runtime_environment\n-        )\n-        checkpoint = context.get_checkpoint(checkpoint_name)\n-\n-        batches_to_validate = []\n-        for batch in checkpoint[\"batches\"]:\n-            batch_kwargs = batch[\"batch_kwargs\"]\n-            for suite_name in batch[\"expectation_suite_names\"]:\n-                suite = context.get_expectation_suite(suite_name)\n-                batch = context.get_batch(batch_kwargs, suite)\n-                batches_to_validate.append(batch)\n-\n-        results = context.run_validation_operator(\n-            checkpoint[\"validation_operator_name\"],\n-            assets_to_validate=batches_to_validate,\n-            run_id={\"run_name\": prefect.context.get(\"task_slug\")},\n-        )\n-\n-        if results.success is False:\n-            raise signals.VALIDATIONFAIL(result=results)\n-\n-        return results\n",
        "source_code_with_indent": "        <DED>return results\n\n\n<DED><DED>class RunGreatExpectationsCheckpoint(Task):\n    <IND>\"\"\"\n    DEPRECATED\n\n    Task for running a Great Expectations checkpoint. For this task to run properly, it must be\n    run above your great_expectations directory or configured with the `context_root_dir` for\n    your great_expectations directory on the local file system of the worker process.\n\n    Args:\n        - checkpoint_name (str): the name of the checkpoint; should match the filename of the\n            checkpoint without .py\n        - context_root_dir (str): the absolute or relative path to the directory holding your\n            `great_expectations.yml`\n        - runtime_environment (dict): a dictionary of great expectation config key-value pairs\n            to overwrite your config in `great_expectations.yml`\n        - run_name (str): the name of this Great Expectation validation run; defaults to the\n            task slug\n        - **kwargs (dict, optional): additional keyword arguments to pass to the Task constructor\n    \"\"\"\n\n    def __init__(\n        self,\n        checkpoint_name: str = None,\n        context_root_dir: str = None,\n        runtime_environment: dict = {},\n        run_name: str = None,\n        **kwargs\n    ):\n        <IND>warnings.warn(\n            \"DEPRECATED: `RunGreatExpectationsCheckpoint` task is deprecated, please use \"\n            \"`RunGreatExpectationsValidation` instead\",\n            UserWarning,\n            stacklevel=2,\n        )\n\n        self.checkpoint_name = checkpoint_name\n        self.context_root_dir = context_root_dir\n        self.runtime_environment = runtime_environment\n        self.run_name = run_name\n\n        super().__init__(**kwargs)\n\n    <DED>@defaults_from_attrs(\n        \"checkpoint_name\", \"context_root_dir\", \"runtime_environment\", \"run_name\"\n    )\n    def run(\n        self,\n        checkpoint_name: str = None,\n        context_root_dir: str = None,\n        runtime_environment: dict = {},\n        run_name: str = None,\n        **kwargs\n    ):\n        <IND>\"\"\"\n        Task run method.\n\n        Args:\n            - checkpoint_name (str): the name of the checkpoint; should match the filename of\n                the checkpoint without .py\n            - context_root_dir (str): the absolute or relative path to the directory holding\n                your `great_expectations.yml`\n            - runtime_environment (dict): a dictionary of great expectation config key-value\n                pairs to overwrite your config in `great_expectations.yml`\n            - run_name (str): the name of this  Great Expectation validation run; defaults to\n                the task slug\n            - **kwargs (dict, optional): additional keyword arguments to pass to the Task\n                constructor\n\n        Raises:\n            - 'signals.VALIDATIONFAIL' if the validation was not a success\n        Returns:\n            - result\n                ('great_expectations.validation_operators.types.validation_operator_result.ValidationOperatorResult'):\n                The Great Expectations metadata returned from the validation\n\n        \"\"\"\n\n        if checkpoint_name is None:\n            <IND>raise ValueError(\"You must provide the checkpoint name.\")\n\n        <DED>context = ge.DataContext(\n            context_root_dir=context_root_dir, runtime_environment=runtime_environment\n        )\n        checkpoint = context.get_checkpoint(checkpoint_name)\n\n        batches_to_validate = []\n        for batch in checkpoint[\"batches\"]:\n            <IND>batch_kwargs = batch[\"batch_kwargs\"]\n            for suite_name in batch[\"expectation_suite_names\"]:\n                <IND>suite = context.get_expectation_suite(suite_name)\n                batch = context.get_batch(batch_kwargs, suite)\n                batches_to_validate.append(batch)\n\n        <DED><DED>results = context.run_validation_operator(\n            checkpoint[\"validation_operator_name\"],\n            assets_to_validate=batches_to_validate,\n            run_id={\"run_name\": prefect.context.get(\"task_slug\")},\n        )\n\n        if results.success is False:\n            <IND>raise signals.VALIDATIONFAIL(result=results)\n\n        <DED>return results\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>return results\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "PrefectHQ/prefect",
    "commit": "a9270d965aee1e2182843e7fa75d18e1054230d0",
    "filename": "src/prefect/tasks/great_expectations/checkpoints.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/PrefectHQ-prefect/src/prefect/tasks/great_expectations/checkpoints.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/prefect/tasks/great_expectations/checkpoints.py:325:8 Incompatible variable type [9]: context_root_dir is declared to have type `str` but is used as type `None`.",
    "message": " context_root_dir is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 325,
    "warning_line": "        context_root_dir: str = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "        return results\n\n\nclass RunGreatExpectationsCheckpoint(Task):\n    \"\"\"\n    DEPRECATED\n\n    Task for running a Great Expectations checkpoint. For this task to run properly, it must be\n    run above your great_expectations directory or configured with the `context_root_dir` for\n    your great_expectations directory on the local file system of the worker process.\n\n    Args:\n        - checkpoint_name (str): the name of the checkpoint; should match the filename of the\n            checkpoint without .py\n        - context_root_dir (str): the absolute or relative path to the directory holding your\n            `great_expectations.yml`\n        - runtime_environment (dict): a dictionary of great expectation config key-value pairs\n            to overwrite your config in `great_expectations.yml`\n        - run_name (str): the name of this Great Expectation validation run; defaults to the\n            task slug\n        - **kwargs (dict, optional): additional keyword arguments to pass to the Task constructor\n    \"\"\"\n\n    def __init__(\n        self,\n        checkpoint_name: str = None,\n        context_root_dir: str = None,\n        runtime_environment: dict = {},\n        run_name: str = None,\n        **kwargs\n    ):\n        warnings.warn(\n            \"DEPRECATED: `RunGreatExpectationsCheckpoint` task is deprecated, please use \"\n            \"`RunGreatExpectationsValidation` instead\",\n            UserWarning,\n            stacklevel=2,\n        )\n\n        self.checkpoint_name = checkpoint_name\n        self.context_root_dir = context_root_dir\n        self.runtime_environment = runtime_environment\n        self.run_name = run_name\n\n        super().__init__(**kwargs)\n\n    @defaults_from_attrs(\n        \"checkpoint_name\", \"context_root_dir\", \"runtime_environment\", \"run_name\"\n    )\n    def run(\n        self,\n        checkpoint_name: str = None,\n        context_root_dir: str = None,\n        runtime_environment: dict = {},\n        run_name: str = None,\n        **kwargs\n    ):\n        \"\"\"\n        Task run method.\n\n        Args:\n            - checkpoint_name (str): the name of the checkpoint; should match the filename of\n                the checkpoint without .py\n            - context_root_dir (str): the absolute or relative path to the directory holding\n                your `great_expectations.yml`\n            - runtime_environment (dict): a dictionary of great expectation config key-value\n                pairs to overwrite your config in `great_expectations.yml`\n            - run_name (str): the name of this  Great Expectation validation run; defaults to\n                the task slug\n            - **kwargs (dict, optional): additional keyword arguments to pass to the Task\n                constructor\n\n        Raises:\n            - 'signals.VALIDATIONFAIL' if the validation was not a success\n        Returns:\n            - result\n                ('great_expectations.validation_operators.types.validation_operator_result.ValidationOperatorResult'):\n                The Great Expectations metadata returned from the validation\n\n        \"\"\"\n\n        if checkpoint_name is None:\n            raise ValueError(\"You must provide the checkpoint name.\")\n\n        context = ge.DataContext(\n            context_root_dir=context_root_dir, runtime_environment=runtime_environment\n        )\n        checkpoint = context.get_checkpoint(checkpoint_name)\n\n        batches_to_validate = []\n        for batch in checkpoint[\"batches\"]:\n            batch_kwargs = batch[\"batch_kwargs\"]\n            for suite_name in batch[\"expectation_suite_names\"]:\n                suite = context.get_expectation_suite(suite_name)\n                batch = context.get_batch(batch_kwargs, suite)\n                batches_to_validate.append(batch)\n\n        results = context.run_validation_operator(\n            checkpoint[\"validation_operator_name\"],\n            assets_to_validate=batches_to_validate,\n            run_id={\"run_name\": prefect.context.get(\"task_slug\")},\n        )\n\n        if results.success is False:\n            raise signals.VALIDATIONFAIL(result=results)\n\n        return results\n",
        "source_code_len": 4084,
        "target_code": "        return results\n",
        "target_code_len": 23,
        "diff_format": "@@ -274,106 +273,1 @@\n         return results\n-\n-\n-class RunGreatExpectationsCheckpoint(Task):\n-    \"\"\"\n-    DEPRECATED\n-\n-    Task for running a Great Expectations checkpoint. For this task to run properly, it must be\n-    run above your great_expectations directory or configured with the `context_root_dir` for\n-    your great_expectations directory on the local file system of the worker process.\n-\n-    Args:\n-        - checkpoint_name (str): the name of the checkpoint; should match the filename of the\n-            checkpoint without .py\n-        - context_root_dir (str): the absolute or relative path to the directory holding your\n-            `great_expectations.yml`\n-        - runtime_environment (dict): a dictionary of great expectation config key-value pairs\n-            to overwrite your config in `great_expectations.yml`\n-        - run_name (str): the name of this Great Expectation validation run; defaults to the\n-            task slug\n-        - **kwargs (dict, optional): additional keyword arguments to pass to the Task constructor\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        checkpoint_name: str = None,\n-        context_root_dir: str = None,\n-        runtime_environment: dict = {},\n-        run_name: str = None,\n-        **kwargs\n-    ):\n-        warnings.warn(\n-            \"DEPRECATED: `RunGreatExpectationsCheckpoint` task is deprecated, please use \"\n-            \"`RunGreatExpectationsValidation` instead\",\n-            UserWarning,\n-            stacklevel=2,\n-        )\n-\n-        self.checkpoint_name = checkpoint_name\n-        self.context_root_dir = context_root_dir\n-        self.runtime_environment = runtime_environment\n-        self.run_name = run_name\n-\n-        super().__init__(**kwargs)\n-\n-    @defaults_from_attrs(\n-        \"checkpoint_name\", \"context_root_dir\", \"runtime_environment\", \"run_name\"\n-    )\n-    def run(\n-        self,\n-        checkpoint_name: str = None,\n-        context_root_dir: str = None,\n-        runtime_environment: dict = {},\n-        run_name: str = None,\n-        **kwargs\n-    ):\n-        \"\"\"\n-        Task run method.\n-\n-        Args:\n-            - checkpoint_name (str): the name of the checkpoint; should match the filename of\n-                the checkpoint without .py\n-            - context_root_dir (str): the absolute or relative path to the directory holding\n-                your `great_expectations.yml`\n-            - runtime_environment (dict): a dictionary of great expectation config key-value\n-                pairs to overwrite your config in `great_expectations.yml`\n-            - run_name (str): the name of this  Great Expectation validation run; defaults to\n-                the task slug\n-            - **kwargs (dict, optional): additional keyword arguments to pass to the Task\n-                constructor\n-\n-        Raises:\n-            - 'signals.VALIDATIONFAIL' if the validation was not a success\n-        Returns:\n-            - result\n-                ('great_expectations.validation_operators.types.validation_operator_result.ValidationOperatorResult'):\n-                The Great Expectations metadata returned from the validation\n-\n-        \"\"\"\n-\n-        if checkpoint_name is None:\n-            raise ValueError(\"You must provide the checkpoint name.\")\n-\n-        context = ge.DataContext(\n-            context_root_dir=context_root_dir, runtime_environment=runtime_environment\n-        )\n-        checkpoint = context.get_checkpoint(checkpoint_name)\n-\n-        batches_to_validate = []\n-        for batch in checkpoint[\"batches\"]:\n-            batch_kwargs = batch[\"batch_kwargs\"]\n-            for suite_name in batch[\"expectation_suite_names\"]:\n-                suite = context.get_expectation_suite(suite_name)\n-                batch = context.get_batch(batch_kwargs, suite)\n-                batches_to_validate.append(batch)\n-\n-        results = context.run_validation_operator(\n-            checkpoint[\"validation_operator_name\"],\n-            assets_to_validate=batches_to_validate,\n-            run_id={\"run_name\": prefect.context.get(\"task_slug\")},\n-        )\n-\n-        if results.success is False:\n-            raise signals.VALIDATIONFAIL(result=results)\n-\n-        return results\n",
        "source_code_with_indent": "        <DED>return results\n\n\n<DED><DED>class RunGreatExpectationsCheckpoint(Task):\n    <IND>\"\"\"\n    DEPRECATED\n\n    Task for running a Great Expectations checkpoint. For this task to run properly, it must be\n    run above your great_expectations directory or configured with the `context_root_dir` for\n    your great_expectations directory on the local file system of the worker process.\n\n    Args:\n        - checkpoint_name (str): the name of the checkpoint; should match the filename of the\n            checkpoint without .py\n        - context_root_dir (str): the absolute or relative path to the directory holding your\n            `great_expectations.yml`\n        - runtime_environment (dict): a dictionary of great expectation config key-value pairs\n            to overwrite your config in `great_expectations.yml`\n        - run_name (str): the name of this Great Expectation validation run; defaults to the\n            task slug\n        - **kwargs (dict, optional): additional keyword arguments to pass to the Task constructor\n    \"\"\"\n\n    def __init__(\n        self,\n        checkpoint_name: str = None,\n        context_root_dir: str = None,\n        runtime_environment: dict = {},\n        run_name: str = None,\n        **kwargs\n    ):\n        <IND>warnings.warn(\n            \"DEPRECATED: `RunGreatExpectationsCheckpoint` task is deprecated, please use \"\n            \"`RunGreatExpectationsValidation` instead\",\n            UserWarning,\n            stacklevel=2,\n        )\n\n        self.checkpoint_name = checkpoint_name\n        self.context_root_dir = context_root_dir\n        self.runtime_environment = runtime_environment\n        self.run_name = run_name\n\n        super().__init__(**kwargs)\n\n    <DED>@defaults_from_attrs(\n        \"checkpoint_name\", \"context_root_dir\", \"runtime_environment\", \"run_name\"\n    )\n    def run(\n        self,\n        checkpoint_name: str = None,\n        context_root_dir: str = None,\n        runtime_environment: dict = {},\n        run_name: str = None,\n        **kwargs\n    ):\n        <IND>\"\"\"\n        Task run method.\n\n        Args:\n            - checkpoint_name (str): the name of the checkpoint; should match the filename of\n                the checkpoint without .py\n            - context_root_dir (str): the absolute or relative path to the directory holding\n                your `great_expectations.yml`\n            - runtime_environment (dict): a dictionary of great expectation config key-value\n                pairs to overwrite your config in `great_expectations.yml`\n            - run_name (str): the name of this  Great Expectation validation run; defaults to\n                the task slug\n            - **kwargs (dict, optional): additional keyword arguments to pass to the Task\n                constructor\n\n        Raises:\n            - 'signals.VALIDATIONFAIL' if the validation was not a success\n        Returns:\n            - result\n                ('great_expectations.validation_operators.types.validation_operator_result.ValidationOperatorResult'):\n                The Great Expectations metadata returned from the validation\n\n        \"\"\"\n\n        if checkpoint_name is None:\n            <IND>raise ValueError(\"You must provide the checkpoint name.\")\n\n        <DED>context = ge.DataContext(\n            context_root_dir=context_root_dir, runtime_environment=runtime_environment\n        )\n        checkpoint = context.get_checkpoint(checkpoint_name)\n\n        batches_to_validate = []\n        for batch in checkpoint[\"batches\"]:\n            <IND>batch_kwargs = batch[\"batch_kwargs\"]\n            for suite_name in batch[\"expectation_suite_names\"]:\n                <IND>suite = context.get_expectation_suite(suite_name)\n                batch = context.get_batch(batch_kwargs, suite)\n                batches_to_validate.append(batch)\n\n        <DED><DED>results = context.run_validation_operator(\n            checkpoint[\"validation_operator_name\"],\n            assets_to_validate=batches_to_validate,\n            run_id={\"run_name\": prefect.context.get(\"task_slug\")},\n        )\n\n        if results.success is False:\n            <IND>raise signals.VALIDATIONFAIL(result=results)\n\n        <DED>return results\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>return results\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "PrefectHQ/prefect",
    "commit": "a9270d965aee1e2182843e7fa75d18e1054230d0",
    "filename": "src/prefect/tasks/great_expectations/checkpoints.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/PrefectHQ-prefect/src/prefect/tasks/great_expectations/checkpoints.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/prefect/tasks/great_expectations/checkpoints.py:327:8 Incompatible variable type [9]: run_name is declared to have type `str` but is used as type `None`.",
    "message": " run_name is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 327,
    "warning_line": "        run_name: str = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "        return results\n\n\nclass RunGreatExpectationsCheckpoint(Task):\n    \"\"\"\n    DEPRECATED\n\n    Task for running a Great Expectations checkpoint. For this task to run properly, it must be\n    run above your great_expectations directory or configured with the `context_root_dir` for\n    your great_expectations directory on the local file system of the worker process.\n\n    Args:\n        - checkpoint_name (str): the name of the checkpoint; should match the filename of the\n            checkpoint without .py\n        - context_root_dir (str): the absolute or relative path to the directory holding your\n            `great_expectations.yml`\n        - runtime_environment (dict): a dictionary of great expectation config key-value pairs\n            to overwrite your config in `great_expectations.yml`\n        - run_name (str): the name of this Great Expectation validation run; defaults to the\n            task slug\n        - **kwargs (dict, optional): additional keyword arguments to pass to the Task constructor\n    \"\"\"\n\n    def __init__(\n        self,\n        checkpoint_name: str = None,\n        context_root_dir: str = None,\n        runtime_environment: dict = {},\n        run_name: str = None,\n        **kwargs\n    ):\n        warnings.warn(\n            \"DEPRECATED: `RunGreatExpectationsCheckpoint` task is deprecated, please use \"\n            \"`RunGreatExpectationsValidation` instead\",\n            UserWarning,\n            stacklevel=2,\n        )\n\n        self.checkpoint_name = checkpoint_name\n        self.context_root_dir = context_root_dir\n        self.runtime_environment = runtime_environment\n        self.run_name = run_name\n\n        super().__init__(**kwargs)\n\n    @defaults_from_attrs(\n        \"checkpoint_name\", \"context_root_dir\", \"runtime_environment\", \"run_name\"\n    )\n    def run(\n        self,\n        checkpoint_name: str = None,\n        context_root_dir: str = None,\n        runtime_environment: dict = {},\n        run_name: str = None,\n        **kwargs\n    ):\n        \"\"\"\n        Task run method.\n\n        Args:\n            - checkpoint_name (str): the name of the checkpoint; should match the filename of\n                the checkpoint without .py\n            - context_root_dir (str): the absolute or relative path to the directory holding\n                your `great_expectations.yml`\n            - runtime_environment (dict): a dictionary of great expectation config key-value\n                pairs to overwrite your config in `great_expectations.yml`\n            - run_name (str): the name of this  Great Expectation validation run; defaults to\n                the task slug\n            - **kwargs (dict, optional): additional keyword arguments to pass to the Task\n                constructor\n\n        Raises:\n            - 'signals.VALIDATIONFAIL' if the validation was not a success\n        Returns:\n            - result\n                ('great_expectations.validation_operators.types.validation_operator_result.ValidationOperatorResult'):\n                The Great Expectations metadata returned from the validation\n\n        \"\"\"\n\n        if checkpoint_name is None:\n            raise ValueError(\"You must provide the checkpoint name.\")\n\n        context = ge.DataContext(\n            context_root_dir=context_root_dir, runtime_environment=runtime_environment\n        )\n        checkpoint = context.get_checkpoint(checkpoint_name)\n\n        batches_to_validate = []\n        for batch in checkpoint[\"batches\"]:\n            batch_kwargs = batch[\"batch_kwargs\"]\n            for suite_name in batch[\"expectation_suite_names\"]:\n                suite = context.get_expectation_suite(suite_name)\n                batch = context.get_batch(batch_kwargs, suite)\n                batches_to_validate.append(batch)\n\n        results = context.run_validation_operator(\n            checkpoint[\"validation_operator_name\"],\n            assets_to_validate=batches_to_validate,\n            run_id={\"run_name\": prefect.context.get(\"task_slug\")},\n        )\n\n        if results.success is False:\n            raise signals.VALIDATIONFAIL(result=results)\n\n        return results\n",
        "source_code_len": 4084,
        "target_code": "        return results\n",
        "target_code_len": 23,
        "diff_format": "@@ -274,106 +273,1 @@\n         return results\n-\n-\n-class RunGreatExpectationsCheckpoint(Task):\n-    \"\"\"\n-    DEPRECATED\n-\n-    Task for running a Great Expectations checkpoint. For this task to run properly, it must be\n-    run above your great_expectations directory or configured with the `context_root_dir` for\n-    your great_expectations directory on the local file system of the worker process.\n-\n-    Args:\n-        - checkpoint_name (str): the name of the checkpoint; should match the filename of the\n-            checkpoint without .py\n-        - context_root_dir (str): the absolute or relative path to the directory holding your\n-            `great_expectations.yml`\n-        - runtime_environment (dict): a dictionary of great expectation config key-value pairs\n-            to overwrite your config in `great_expectations.yml`\n-        - run_name (str): the name of this Great Expectation validation run; defaults to the\n-            task slug\n-        - **kwargs (dict, optional): additional keyword arguments to pass to the Task constructor\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        checkpoint_name: str = None,\n-        context_root_dir: str = None,\n-        runtime_environment: dict = {},\n-        run_name: str = None,\n-        **kwargs\n-    ):\n-        warnings.warn(\n-            \"DEPRECATED: `RunGreatExpectationsCheckpoint` task is deprecated, please use \"\n-            \"`RunGreatExpectationsValidation` instead\",\n-            UserWarning,\n-            stacklevel=2,\n-        )\n-\n-        self.checkpoint_name = checkpoint_name\n-        self.context_root_dir = context_root_dir\n-        self.runtime_environment = runtime_environment\n-        self.run_name = run_name\n-\n-        super().__init__(**kwargs)\n-\n-    @defaults_from_attrs(\n-        \"checkpoint_name\", \"context_root_dir\", \"runtime_environment\", \"run_name\"\n-    )\n-    def run(\n-        self,\n-        checkpoint_name: str = None,\n-        context_root_dir: str = None,\n-        runtime_environment: dict = {},\n-        run_name: str = None,\n-        **kwargs\n-    ):\n-        \"\"\"\n-        Task run method.\n-\n-        Args:\n-            - checkpoint_name (str): the name of the checkpoint; should match the filename of\n-                the checkpoint without .py\n-            - context_root_dir (str): the absolute or relative path to the directory holding\n-                your `great_expectations.yml`\n-            - runtime_environment (dict): a dictionary of great expectation config key-value\n-                pairs to overwrite your config in `great_expectations.yml`\n-            - run_name (str): the name of this  Great Expectation validation run; defaults to\n-                the task slug\n-            - **kwargs (dict, optional): additional keyword arguments to pass to the Task\n-                constructor\n-\n-        Raises:\n-            - 'signals.VALIDATIONFAIL' if the validation was not a success\n-        Returns:\n-            - result\n-                ('great_expectations.validation_operators.types.validation_operator_result.ValidationOperatorResult'):\n-                The Great Expectations metadata returned from the validation\n-\n-        \"\"\"\n-\n-        if checkpoint_name is None:\n-            raise ValueError(\"You must provide the checkpoint name.\")\n-\n-        context = ge.DataContext(\n-            context_root_dir=context_root_dir, runtime_environment=runtime_environment\n-        )\n-        checkpoint = context.get_checkpoint(checkpoint_name)\n-\n-        batches_to_validate = []\n-        for batch in checkpoint[\"batches\"]:\n-            batch_kwargs = batch[\"batch_kwargs\"]\n-            for suite_name in batch[\"expectation_suite_names\"]:\n-                suite = context.get_expectation_suite(suite_name)\n-                batch = context.get_batch(batch_kwargs, suite)\n-                batches_to_validate.append(batch)\n-\n-        results = context.run_validation_operator(\n-            checkpoint[\"validation_operator_name\"],\n-            assets_to_validate=batches_to_validate,\n-            run_id={\"run_name\": prefect.context.get(\"task_slug\")},\n-        )\n-\n-        if results.success is False:\n-            raise signals.VALIDATIONFAIL(result=results)\n-\n-        return results\n",
        "source_code_with_indent": "        <DED>return results\n\n\n<DED><DED>class RunGreatExpectationsCheckpoint(Task):\n    <IND>\"\"\"\n    DEPRECATED\n\n    Task for running a Great Expectations checkpoint. For this task to run properly, it must be\n    run above your great_expectations directory or configured with the `context_root_dir` for\n    your great_expectations directory on the local file system of the worker process.\n\n    Args:\n        - checkpoint_name (str): the name of the checkpoint; should match the filename of the\n            checkpoint without .py\n        - context_root_dir (str): the absolute or relative path to the directory holding your\n            `great_expectations.yml`\n        - runtime_environment (dict): a dictionary of great expectation config key-value pairs\n            to overwrite your config in `great_expectations.yml`\n        - run_name (str): the name of this Great Expectation validation run; defaults to the\n            task slug\n        - **kwargs (dict, optional): additional keyword arguments to pass to the Task constructor\n    \"\"\"\n\n    def __init__(\n        self,\n        checkpoint_name: str = None,\n        context_root_dir: str = None,\n        runtime_environment: dict = {},\n        run_name: str = None,\n        **kwargs\n    ):\n        <IND>warnings.warn(\n            \"DEPRECATED: `RunGreatExpectationsCheckpoint` task is deprecated, please use \"\n            \"`RunGreatExpectationsValidation` instead\",\n            UserWarning,\n            stacklevel=2,\n        )\n\n        self.checkpoint_name = checkpoint_name\n        self.context_root_dir = context_root_dir\n        self.runtime_environment = runtime_environment\n        self.run_name = run_name\n\n        super().__init__(**kwargs)\n\n    <DED>@defaults_from_attrs(\n        \"checkpoint_name\", \"context_root_dir\", \"runtime_environment\", \"run_name\"\n    )\n    def run(\n        self,\n        checkpoint_name: str = None,\n        context_root_dir: str = None,\n        runtime_environment: dict = {},\n        run_name: str = None,\n        **kwargs\n    ):\n        <IND>\"\"\"\n        Task run method.\n\n        Args:\n            - checkpoint_name (str): the name of the checkpoint; should match the filename of\n                the checkpoint without .py\n            - context_root_dir (str): the absolute or relative path to the directory holding\n                your `great_expectations.yml`\n            - runtime_environment (dict): a dictionary of great expectation config key-value\n                pairs to overwrite your config in `great_expectations.yml`\n            - run_name (str): the name of this  Great Expectation validation run; defaults to\n                the task slug\n            - **kwargs (dict, optional): additional keyword arguments to pass to the Task\n                constructor\n\n        Raises:\n            - 'signals.VALIDATIONFAIL' if the validation was not a success\n        Returns:\n            - result\n                ('great_expectations.validation_operators.types.validation_operator_result.ValidationOperatorResult'):\n                The Great Expectations metadata returned from the validation\n\n        \"\"\"\n\n        if checkpoint_name is None:\n            <IND>raise ValueError(\"You must provide the checkpoint name.\")\n\n        <DED>context = ge.DataContext(\n            context_root_dir=context_root_dir, runtime_environment=runtime_environment\n        )\n        checkpoint = context.get_checkpoint(checkpoint_name)\n\n        batches_to_validate = []\n        for batch in checkpoint[\"batches\"]:\n            <IND>batch_kwargs = batch[\"batch_kwargs\"]\n            for suite_name in batch[\"expectation_suite_names\"]:\n                <IND>suite = context.get_expectation_suite(suite_name)\n                batch = context.get_batch(batch_kwargs, suite)\n                batches_to_validate.append(batch)\n\n        <DED><DED>results = context.run_validation_operator(\n            checkpoint[\"validation_operator_name\"],\n            assets_to_validate=batches_to_validate,\n            run_id={\"run_name\": prefect.context.get(\"task_slug\")},\n        )\n\n        if results.success is False:\n            <IND>raise signals.VALIDATIONFAIL(result=results)\n\n        <DED>return results\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>return results\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]