[
  {
    "project": "dpgaspar/Flask-AppBuilder",
    "commit": "c5ca06bb52fceb8275aa5d14a7f985e6080c5402",
    "filename": "flask_appbuilder/models/filters.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/dpgaspar-Flask-AppBuilder/flask_appbuilder/models/filters.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "flask_appbuilder/models/filters.py:133:8 Incompatible variable type [9]: search_columns is declared to have type `List[str]` but is used as type `None`.",
    "message": " search_columns is declared to have type `List[str]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 133,
    "warning_line": "        search_columns: List[str] = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import logging\nfrom typing import Any, Dict, List, Tuple\n\n",
        "source_code_len": 58,
        "target_code": "import logging\nfrom typing import Any, Dict, List, Optional, Tuple, Type\n\n",
        "target_code_len": 74,
        "diff_format": "@@ -2,3 +2,3 @@\n import logging\n-from typing import Any, Dict, List, Tuple\n+from typing import Any, Dict, List, Optional, Tuple, Type\n \n",
        "source_code_with_indent": "import logging\nfrom typing import Any, Dict, List, Tuple\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import logging\nfrom typing import Any, Dict, List, Optional, Tuple, Type\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self,\n        filter_converter: BaseFilterConverter,\n        datamodel,\n        search_columns: List[str] = None,\n        search_filters: Dict[str, List[BaseFilter]] = None,\n    ):\n",
        "source_code_len": 189,
        "target_code": "        self,\n        filter_converter: Type[BaseFilterConverter],\n        datamodel,\n        search_columns: Optional[List[str]] = None,\n        search_filters: Optional[Dict[str, List[BaseFilter]]] = None,\n    ):\n",
        "target_code_len": 215,
        "diff_format": "@@ -130,6 +130,6 @@\n         self,\n-        filter_converter: BaseFilterConverter,\n+        filter_converter: Type[BaseFilterConverter],\n         datamodel,\n-        search_columns: List[str] = None,\n-        search_filters: Dict[str, List[BaseFilter]] = None,\n+        search_columns: Optional[List[str]] = None,\n+        search_filters: Optional[Dict[str, List[BaseFilter]]] = None,\n     ):\n",
        "source_code_with_indent": "        self,\n        filter_converter: BaseFilterConverter,\n        datamodel,\n        search_columns: List[str] = None,\n        search_filters: Dict[str, List[BaseFilter]] = None,\n    ):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self,\n        filter_converter: Type[BaseFilterConverter],\n        datamodel,\n        search_columns: Optional[List[str]] = None,\n        search_filters: Optional[Dict[str, List[BaseFilter]]] = None,\n    ):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "dpgaspar/Flask-AppBuilder",
    "commit": "c5ca06bb52fceb8275aa5d14a7f985e6080c5402",
    "filename": "flask_appbuilder/models/filters.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/dpgaspar-Flask-AppBuilder/flask_appbuilder/models/filters.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "flask_appbuilder/models/filters.py:134:8 Incompatible variable type [9]: search_filters is declared to have type `Dict[str, List[BaseFilter]]` but is used as type `None`.",
    "message": " search_filters is declared to have type `Dict[str, List[BaseFilter]]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 134,
    "warning_line": "        search_filters: Dict[str, List[BaseFilter]] = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import logging\nfrom typing import Any, Dict, List, Tuple\n\n",
        "source_code_len": 58,
        "target_code": "import logging\nfrom typing import Any, Dict, List, Optional, Tuple, Type\n\n",
        "target_code_len": 74,
        "diff_format": "@@ -2,3 +2,3 @@\n import logging\n-from typing import Any, Dict, List, Tuple\n+from typing import Any, Dict, List, Optional, Tuple, Type\n \n",
        "source_code_with_indent": "import logging\nfrom typing import Any, Dict, List, Tuple\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import logging\nfrom typing import Any, Dict, List, Optional, Tuple, Type\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self,\n        filter_converter: BaseFilterConverter,\n        datamodel,\n        search_columns: List[str] = None,\n        search_filters: Dict[str, List[BaseFilter]] = None,\n    ):\n",
        "source_code_len": 189,
        "target_code": "        self,\n        filter_converter: Type[BaseFilterConverter],\n        datamodel,\n        search_columns: Optional[List[str]] = None,\n        search_filters: Optional[Dict[str, List[BaseFilter]]] = None,\n    ):\n",
        "target_code_len": 215,
        "diff_format": "@@ -130,6 +130,6 @@\n         self,\n-        filter_converter: BaseFilterConverter,\n+        filter_converter: Type[BaseFilterConverter],\n         datamodel,\n-        search_columns: List[str] = None,\n-        search_filters: Dict[str, List[BaseFilter]] = None,\n+        search_columns: Optional[List[str]] = None,\n+        search_filters: Optional[Dict[str, List[BaseFilter]]] = None,\n     ):\n",
        "source_code_with_indent": "        self,\n        filter_converter: BaseFilterConverter,\n        datamodel,\n        search_columns: List[str] = None,\n        search_filters: Dict[str, List[BaseFilter]] = None,\n    ):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self,\n        filter_converter: Type[BaseFilterConverter],\n        datamodel,\n        search_columns: Optional[List[str]] = None,\n        search_filters: Optional[Dict[str, List[BaseFilter]]] = None,\n    ):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "dpgaspar/Flask-AppBuilder",
    "commit": "c5ca06bb52fceb8275aa5d14a7f985e6080c5402",
    "filename": "flask_appbuilder/models/filters.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/dpgaspar-Flask-AppBuilder/flask_appbuilder/models/filters.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "flask_appbuilder/models/filters.py:162:23 Call error [29]: `BaseFilterConverter` is not a function.",
    "message": " `BaseFilterConverter` is not a function.",
    "rule_id": "Call error [29]",
    "warning_line_no": 162,
    "warning_line": "            _filters = self.filter_converter(self.datamodel).convert(col)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import logging\nfrom typing import Any, Dict, List, Tuple\n\n",
        "source_code_len": 58,
        "target_code": "import logging\nfrom typing import Any, Dict, List, Optional, Tuple, Type\n\n",
        "target_code_len": 74,
        "diff_format": "@@ -2,3 +2,3 @@\n import logging\n-from typing import Any, Dict, List, Tuple\n+from typing import Any, Dict, List, Optional, Tuple, Type\n \n",
        "source_code_with_indent": "import logging\nfrom typing import Any, Dict, List, Tuple\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import logging\nfrom typing import Any, Dict, List, Optional, Tuple, Type\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self,\n        filter_converter: BaseFilterConverter,\n        datamodel,\n        search_columns: List[str] = None,\n        search_filters: Dict[str, List[BaseFilter]] = None,\n    ):\n",
        "source_code_len": 189,
        "target_code": "        self,\n        filter_converter: Type[BaseFilterConverter],\n        datamodel,\n        search_columns: Optional[List[str]] = None,\n        search_filters: Optional[Dict[str, List[BaseFilter]]] = None,\n    ):\n",
        "target_code_len": 215,
        "diff_format": "@@ -130,6 +130,6 @@\n         self,\n-        filter_converter: BaseFilterConverter,\n+        filter_converter: Type[BaseFilterConverter],\n         datamodel,\n-        search_columns: List[str] = None,\n-        search_filters: Dict[str, List[BaseFilter]] = None,\n+        search_columns: Optional[List[str]] = None,\n+        search_filters: Optional[Dict[str, List[BaseFilter]]] = None,\n     ):\n",
        "source_code_with_indent": "        self,\n        filter_converter: BaseFilterConverter,\n        datamodel,\n        search_columns: List[str] = None,\n        search_filters: Dict[str, List[BaseFilter]] = None,\n    ):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self,\n        filter_converter: Type[BaseFilterConverter],\n        datamodel,\n        search_columns: Optional[List[str]] = None,\n        search_filters: Optional[Dict[str, List[BaseFilter]]] = None,\n    ):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]