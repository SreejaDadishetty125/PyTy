[
  {
    "project": "quantumblacklabs/kedro",
    "commit": "49c095d0a747ce00b99727e358bb1f7f41106fe9",
    "filename": "features/steps/sh_run.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/quantumblacklabs-kedro/features/steps/sh_run.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "features/steps/sh_run.py:72:73 Incompatible parameter type [6]: Expected `Union[None, os.PathLike[bytes], os.PathLike[str], bytes, str]` for 5th positional only parameter to call `subprocess.run` but got `Dict[typing.Any, typing.Any]`.",
    "message": " Expected `Union[None, os.PathLike[bytes], os.PathLike[str], bytes, str]` for 5th positional only parameter to call `subprocess.run` but got `Dict[typing.Any, typing.Any]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 72,
    "warning_line": "        cmd, input=\"\", stdout=subprocess.PIPE, stderr=subprocess.PIPE, **kwargs",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import subprocess\nfrom typing import Dict, List, Union\n\n",
        "source_code_len": 56,
        "target_code": "import subprocess\nfrom typing import Any, List, Union\n\n",
        "target_code_len": 55,
        "diff_format": "@@ -30,3 +30,3 @@\n import subprocess\n-from typing import Dict, List, Union\n+from typing import Any, List, Union\n \n",
        "source_code_with_indent": "import subprocess\nfrom typing import Dict, List, Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import subprocess\nfrom typing import Any, List, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def run(\n    cmd: Union[list, str],\n    split: bool = True,\n    print_output: bool = False,\n    **kwargs: Dict\n) -> int:\n    \"\"\"Run a shell command.\n",
        "source_code_len": 149,
        "target_code": "def run(\n    cmd: Union[list, str], split: bool = True, print_output: bool = False, **kwargs: Any\n) -> subprocess.CompletedProcess:\n    \"\"\"Run a shell command.\n",
        "target_code_len": 160,
        "diff_format": "@@ -36,7 +36,4 @@\n def run(\n-    cmd: Union[list, str],\n-    split: bool = True,\n-    print_output: bool = False,\n-    **kwargs: Dict\n-) -> int:\n+    cmd: Union[list, str], split: bool = True, print_output: bool = False, **kwargs: Any\n+) -> subprocess.CompletedProcess:\n     \"\"\"Run a shell command.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "def run(\n    cmd: Union[list, str],\n    split: bool = True,\n    print_output: bool = False,\n    **kwargs: Dict\n) -> int:\n    <IND>",
        "target_code_with_indent": "def run(\n    cmd: Union[list, str], split: bool = True, print_output: bool = False, **kwargs: Any\n) -> subprocess.CompletedProcess:\n    <IND>"
      }
    ]
  },
  {
    "project": "quantumblacklabs/kedro",
    "commit": "49c095d0a747ce00b99727e358bb1f7f41106fe9",
    "filename": "features/steps/sh_run.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/quantumblacklabs-kedro/features/steps/sh_run.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "features/steps/sh_run.py:72:73 Incompatible parameter type [6]: Expected `Union[None, typing.IO[typing.Any], int]` for 5th positional only parameter to call `subprocess.run` but got `Dict[typing.Any, typing.Any]`.",
    "message": " Expected `Union[None, typing.IO[typing.Any], int]` for 5th positional only parameter to call `subprocess.run` but got `Dict[typing.Any, typing.Any]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 72,
    "warning_line": "        cmd, input=\"\", stdout=subprocess.PIPE, stderr=subprocess.PIPE, **kwargs",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import subprocess\nfrom typing import Dict, List, Union\n\n",
        "source_code_len": 56,
        "target_code": "import subprocess\nfrom typing import Any, List, Union\n\n",
        "target_code_len": 55,
        "diff_format": "@@ -30,3 +30,3 @@\n import subprocess\n-from typing import Dict, List, Union\n+from typing import Any, List, Union\n \n",
        "source_code_with_indent": "import subprocess\nfrom typing import Dict, List, Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import subprocess\nfrom typing import Any, List, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def run(\n    cmd: Union[list, str],\n    split: bool = True,\n    print_output: bool = False,\n    **kwargs: Dict\n) -> int:\n    \"\"\"Run a shell command.\n",
        "source_code_len": 149,
        "target_code": "def run(\n    cmd: Union[list, str], split: bool = True, print_output: bool = False, **kwargs: Any\n) -> subprocess.CompletedProcess:\n    \"\"\"Run a shell command.\n",
        "target_code_len": 160,
        "diff_format": "@@ -36,7 +36,4 @@\n def run(\n-    cmd: Union[list, str],\n-    split: bool = True,\n-    print_output: bool = False,\n-    **kwargs: Dict\n-) -> int:\n+    cmd: Union[list, str], split: bool = True, print_output: bool = False, **kwargs: Any\n+) -> subprocess.CompletedProcess:\n     \"\"\"Run a shell command.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "def run(\n    cmd: Union[list, str],\n    split: bool = True,\n    print_output: bool = False,\n    **kwargs: Dict\n) -> int:\n    <IND>",
        "target_code_with_indent": "def run(\n    cmd: Union[list, str], split: bool = True, print_output: bool = False, **kwargs: Any\n) -> subprocess.CompletedProcess:\n    <IND>"
      }
    ]
  },
  {
    "project": "quantumblacklabs/kedro",
    "commit": "49c095d0a747ce00b99727e358bb1f7f41106fe9",
    "filename": "features/steps/sh_run.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/quantumblacklabs-kedro/features/steps/sh_run.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "features/steps/sh_run.py:72:73 Incompatible parameter type [6]: Expected `typing.Optional[typing.Callable[[], typing.Any]]` for 5th positional only parameter to call `subprocess.run` but got `Dict[typing.Any, typing.Any]`.",
    "message": " Expected `typing.Optional[typing.Callable[[], typing.Any]]` for 5th positional only parameter to call `subprocess.run` but got `Dict[typing.Any, typing.Any]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 72,
    "warning_line": "        cmd, input=\"\", stdout=subprocess.PIPE, stderr=subprocess.PIPE, **kwargs",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import subprocess\nfrom typing import Dict, List, Union\n\n",
        "source_code_len": 56,
        "target_code": "import subprocess\nfrom typing import Any, List, Union\n\n",
        "target_code_len": 55,
        "diff_format": "@@ -30,3 +30,3 @@\n import subprocess\n-from typing import Dict, List, Union\n+from typing import Any, List, Union\n \n",
        "source_code_with_indent": "import subprocess\nfrom typing import Dict, List, Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import subprocess\nfrom typing import Any, List, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def run(\n    cmd: Union[list, str],\n    split: bool = True,\n    print_output: bool = False,\n    **kwargs: Dict\n) -> int:\n    \"\"\"Run a shell command.\n",
        "source_code_len": 149,
        "target_code": "def run(\n    cmd: Union[list, str], split: bool = True, print_output: bool = False, **kwargs: Any\n) -> subprocess.CompletedProcess:\n    \"\"\"Run a shell command.\n",
        "target_code_len": 160,
        "diff_format": "@@ -36,7 +36,4 @@\n def run(\n-    cmd: Union[list, str],\n-    split: bool = True,\n-    print_output: bool = False,\n-    **kwargs: Dict\n-) -> int:\n+    cmd: Union[list, str], split: bool = True, print_output: bool = False, **kwargs: Any\n+) -> subprocess.CompletedProcess:\n     \"\"\"Run a shell command.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "def run(\n    cmd: Union[list, str],\n    split: bool = True,\n    print_output: bool = False,\n    **kwargs: Dict\n) -> int:\n    <IND>",
        "target_code_with_indent": "def run(\n    cmd: Union[list, str], split: bool = True, print_output: bool = False, **kwargs: Any\n) -> subprocess.CompletedProcess:\n    <IND>"
      }
    ]
  },
  {
    "project": "quantumblacklabs/kedro",
    "commit": "49c095d0a747ce00b99727e358bb1f7f41106fe9",
    "filename": "features/steps/sh_run.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/quantumblacklabs-kedro/features/steps/sh_run.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "features/steps/sh_run.py:72:73 Incompatible parameter type [6]: Expected `typing.Optional[float]` for 5th positional only parameter to call `subprocess.run` but got `Dict[typing.Any, typing.Any]`.",
    "message": " Expected `typing.Optional[float]` for 5th positional only parameter to call `subprocess.run` but got `Dict[typing.Any, typing.Any]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 72,
    "warning_line": "        cmd, input=\"\", stdout=subprocess.PIPE, stderr=subprocess.PIPE, **kwargs",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import subprocess\nfrom typing import Dict, List, Union\n\n",
        "source_code_len": 56,
        "target_code": "import subprocess\nfrom typing import Any, List, Union\n\n",
        "target_code_len": 55,
        "diff_format": "@@ -30,3 +30,3 @@\n import subprocess\n-from typing import Dict, List, Union\n+from typing import Any, List, Union\n \n",
        "source_code_with_indent": "import subprocess\nfrom typing import Dict, List, Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import subprocess\nfrom typing import Any, List, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def run(\n    cmd: Union[list, str],\n    split: bool = True,\n    print_output: bool = False,\n    **kwargs: Dict\n) -> int:\n    \"\"\"Run a shell command.\n",
        "source_code_len": 149,
        "target_code": "def run(\n    cmd: Union[list, str], split: bool = True, print_output: bool = False, **kwargs: Any\n) -> subprocess.CompletedProcess:\n    \"\"\"Run a shell command.\n",
        "target_code_len": 160,
        "diff_format": "@@ -36,7 +36,4 @@\n def run(\n-    cmd: Union[list, str],\n-    split: bool = True,\n-    print_output: bool = False,\n-    **kwargs: Dict\n-) -> int:\n+    cmd: Union[list, str], split: bool = True, print_output: bool = False, **kwargs: Any\n+) -> subprocess.CompletedProcess:\n     \"\"\"Run a shell command.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "def run(\n    cmd: Union[list, str],\n    split: bool = True,\n    print_output: bool = False,\n    **kwargs: Dict\n) -> int:\n    <IND>",
        "target_code_with_indent": "def run(\n    cmd: Union[list, str], split: bool = True, print_output: bool = False, **kwargs: Any\n) -> subprocess.CompletedProcess:\n    <IND>"
      }
    ]
  },
  {
    "project": "quantumblacklabs/kedro",
    "commit": "49c095d0a747ce00b99727e358bb1f7f41106fe9",
    "filename": "features/steps/sh_run.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/quantumblacklabs-kedro/features/steps/sh_run.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "features/steps/sh_run.py:72:73 Incompatible parameter type [6]: Expected `typing.Optional[str]` for 5th positional only parameter to call `subprocess.run` but got `Dict[typing.Any, typing.Any]`.",
    "message": " Expected `typing.Optional[str]` for 5th positional only parameter to call `subprocess.run` but got `Dict[typing.Any, typing.Any]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 72,
    "warning_line": "        cmd, input=\"\", stdout=subprocess.PIPE, stderr=subprocess.PIPE, **kwargs",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import subprocess\nfrom typing import Dict, List, Union\n\n",
        "source_code_len": 56,
        "target_code": "import subprocess\nfrom typing import Any, List, Union\n\n",
        "target_code_len": 55,
        "diff_format": "@@ -30,3 +30,3 @@\n import subprocess\n-from typing import Dict, List, Union\n+from typing import Any, List, Union\n \n",
        "source_code_with_indent": "import subprocess\nfrom typing import Dict, List, Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import subprocess\nfrom typing import Any, List, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def run(\n    cmd: Union[list, str],\n    split: bool = True,\n    print_output: bool = False,\n    **kwargs: Dict\n) -> int:\n    \"\"\"Run a shell command.\n",
        "source_code_len": 149,
        "target_code": "def run(\n    cmd: Union[list, str], split: bool = True, print_output: bool = False, **kwargs: Any\n) -> subprocess.CompletedProcess:\n    \"\"\"Run a shell command.\n",
        "target_code_len": 160,
        "diff_format": "@@ -36,7 +36,4 @@\n def run(\n-    cmd: Union[list, str],\n-    split: bool = True,\n-    print_output: bool = False,\n-    **kwargs: Dict\n-) -> int:\n+    cmd: Union[list, str], split: bool = True, print_output: bool = False, **kwargs: Any\n+) -> subprocess.CompletedProcess:\n     \"\"\"Run a shell command.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "def run(\n    cmd: Union[list, str],\n    split: bool = True,\n    print_output: bool = False,\n    **kwargs: Dict\n) -> int:\n    <IND>",
        "target_code_with_indent": "def run(\n    cmd: Union[list, str], split: bool = True, print_output: bool = False, **kwargs: Any\n) -> subprocess.CompletedProcess:\n    <IND>"
      }
    ]
  },
  {
    "project": "quantumblacklabs/kedro",
    "commit": "49c095d0a747ce00b99727e358bb1f7f41106fe9",
    "filename": "features/steps/sh_run.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/quantumblacklabs-kedro/features/steps/sh_run.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "features/steps/sh_run.py:72:73 Incompatible parameter type [6]: Expected `bool` for 5th positional only parameter to call `subprocess.run` but got `Dict[typing.Any, typing.Any]`.",
    "message": " Expected `bool` for 5th positional only parameter to call `subprocess.run` but got `Dict[typing.Any, typing.Any]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 72,
    "warning_line": "        cmd, input=\"\", stdout=subprocess.PIPE, stderr=subprocess.PIPE, **kwargs",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import subprocess\nfrom typing import Dict, List, Union\n\n",
        "source_code_len": 56,
        "target_code": "import subprocess\nfrom typing import Any, List, Union\n\n",
        "target_code_len": 55,
        "diff_format": "@@ -30,3 +30,3 @@\n import subprocess\n-from typing import Dict, List, Union\n+from typing import Any, List, Union\n \n",
        "source_code_with_indent": "import subprocess\nfrom typing import Dict, List, Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import subprocess\nfrom typing import Any, List, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def run(\n    cmd: Union[list, str],\n    split: bool = True,\n    print_output: bool = False,\n    **kwargs: Dict\n) -> int:\n    \"\"\"Run a shell command.\n",
        "source_code_len": 149,
        "target_code": "def run(\n    cmd: Union[list, str], split: bool = True, print_output: bool = False, **kwargs: Any\n) -> subprocess.CompletedProcess:\n    \"\"\"Run a shell command.\n",
        "target_code_len": 160,
        "diff_format": "@@ -36,7 +36,4 @@\n def run(\n-    cmd: Union[list, str],\n-    split: bool = True,\n-    print_output: bool = False,\n-    **kwargs: Dict\n-) -> int:\n+    cmd: Union[list, str], split: bool = True, print_output: bool = False, **kwargs: Any\n+) -> subprocess.CompletedProcess:\n     \"\"\"Run a shell command.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "def run(\n    cmd: Union[list, str],\n    split: bool = True,\n    print_output: bool = False,\n    **kwargs: Dict\n) -> int:\n    <IND>",
        "target_code_with_indent": "def run(\n    cmd: Union[list, str], split: bool = True, print_output: bool = False, **kwargs: Any\n) -> subprocess.CompletedProcess:\n    <IND>"
      }
    ]
  },
  {
    "project": "quantumblacklabs/kedro",
    "commit": "49c095d0a747ce00b99727e358bb1f7f41106fe9",
    "filename": "features/steps/sh_run.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/quantumblacklabs-kedro/features/steps/sh_run.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "features/steps/sh_run.py:72:73 Incompatible parameter type [6]: Expected `int` for 5th positional only parameter to call `subprocess.run` but got `Dict[typing.Any, typing.Any]`.",
    "message": " Expected `int` for 5th positional only parameter to call `subprocess.run` but got `Dict[typing.Any, typing.Any]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 72,
    "warning_line": "        cmd, input=\"\", stdout=subprocess.PIPE, stderr=subprocess.PIPE, **kwargs",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import subprocess\nfrom typing import Dict, List, Union\n\n",
        "source_code_len": 56,
        "target_code": "import subprocess\nfrom typing import Any, List, Union\n\n",
        "target_code_len": 55,
        "diff_format": "@@ -30,3 +30,3 @@\n import subprocess\n-from typing import Dict, List, Union\n+from typing import Any, List, Union\n \n",
        "source_code_with_indent": "import subprocess\nfrom typing import Dict, List, Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import subprocess\nfrom typing import Any, List, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def run(\n    cmd: Union[list, str],\n    split: bool = True,\n    print_output: bool = False,\n    **kwargs: Dict\n) -> int:\n    \"\"\"Run a shell command.\n",
        "source_code_len": 149,
        "target_code": "def run(\n    cmd: Union[list, str], split: bool = True, print_output: bool = False, **kwargs: Any\n) -> subprocess.CompletedProcess:\n    \"\"\"Run a shell command.\n",
        "target_code_len": 160,
        "diff_format": "@@ -36,7 +36,4 @@\n def run(\n-    cmd: Union[list, str],\n-    split: bool = True,\n-    print_output: bool = False,\n-    **kwargs: Dict\n-) -> int:\n+    cmd: Union[list, str], split: bool = True, print_output: bool = False, **kwargs: Any\n+) -> subprocess.CompletedProcess:\n     \"\"\"Run a shell command.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "def run(\n    cmd: Union[list, str],\n    split: bool = True,\n    print_output: bool = False,\n    **kwargs: Dict\n) -> int:\n    <IND>",
        "target_code_with_indent": "def run(\n    cmd: Union[list, str], split: bool = True, print_output: bool = False, **kwargs: Any\n) -> subprocess.CompletedProcess:\n    <IND>"
      }
    ]
  },
  {
    "project": "quantumblacklabs/kedro",
    "commit": "49c095d0a747ce00b99727e358bb1f7f41106fe9",
    "filename": "features/steps/sh_run.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/quantumblacklabs-kedro/features/steps/sh_run.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "features/steps/sh_run.py:72:73 Incompatible parameter type [6]: Expected `str` for 5th positional only parameter to call `subprocess.run` but got `Dict[typing.Any, typing.Any]`.",
    "message": " Expected `str` for 5th positional only parameter to call `subprocess.run` but got `Dict[typing.Any, typing.Any]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 72,
    "warning_line": "        cmd, input=\"\", stdout=subprocess.PIPE, stderr=subprocess.PIPE, **kwargs",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import subprocess\nfrom typing import Dict, List, Union\n\n",
        "source_code_len": 56,
        "target_code": "import subprocess\nfrom typing import Any, List, Union\n\n",
        "target_code_len": 55,
        "diff_format": "@@ -30,3 +30,3 @@\n import subprocess\n-from typing import Dict, List, Union\n+from typing import Any, List, Union\n \n",
        "source_code_with_indent": "import subprocess\nfrom typing import Dict, List, Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import subprocess\nfrom typing import Any, List, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def run(\n    cmd: Union[list, str],\n    split: bool = True,\n    print_output: bool = False,\n    **kwargs: Dict\n) -> int:\n    \"\"\"Run a shell command.\n",
        "source_code_len": 149,
        "target_code": "def run(\n    cmd: Union[list, str], split: bool = True, print_output: bool = False, **kwargs: Any\n) -> subprocess.CompletedProcess:\n    \"\"\"Run a shell command.\n",
        "target_code_len": 160,
        "diff_format": "@@ -36,7 +36,4 @@\n def run(\n-    cmd: Union[list, str],\n-    split: bool = True,\n-    print_output: bool = False,\n-    **kwargs: Dict\n-) -> int:\n+    cmd: Union[list, str], split: bool = True, print_output: bool = False, **kwargs: Any\n+) -> subprocess.CompletedProcess:\n     \"\"\"Run a shell command.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "def run(\n    cmd: Union[list, str],\n    split: bool = True,\n    print_output: bool = False,\n    **kwargs: Dict\n) -> int:\n    <IND>",
        "target_code_with_indent": "def run(\n    cmd: Union[list, str], split: bool = True, print_output: bool = False, **kwargs: Any\n) -> subprocess.CompletedProcess:\n    <IND>"
      }
    ]
  },
  {
    "project": "quantumblacklabs/kedro",
    "commit": "49c095d0a747ce00b99727e358bb1f7f41106fe9",
    "filename": "features/steps/sh_run.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/quantumblacklabs-kedro/features/steps/sh_run.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "features/steps/sh_run.py:78:4 Incompatible return type [7]: Expected `int` but got `subprocess.CompletedProcess[str]`.",
    "message": " Expected `int` but got `subprocess.CompletedProcess[str]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 78,
    "warning_line": "    return result",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import subprocess\nfrom typing import Dict, List, Union\n\n",
        "source_code_len": 56,
        "target_code": "import subprocess\nfrom typing import Any, List, Union\n\n",
        "target_code_len": 55,
        "diff_format": "@@ -30,3 +30,3 @@\n import subprocess\n-from typing import Dict, List, Union\n+from typing import Any, List, Union\n \n",
        "source_code_with_indent": "import subprocess\nfrom typing import Dict, List, Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import subprocess\nfrom typing import Any, List, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def run(\n    cmd: Union[list, str],\n    split: bool = True,\n    print_output: bool = False,\n    **kwargs: Dict\n) -> int:\n    \"\"\"Run a shell command.\n",
        "source_code_len": 149,
        "target_code": "def run(\n    cmd: Union[list, str], split: bool = True, print_output: bool = False, **kwargs: Any\n) -> subprocess.CompletedProcess:\n    \"\"\"Run a shell command.\n",
        "target_code_len": 160,
        "diff_format": "@@ -36,7 +36,4 @@\n def run(\n-    cmd: Union[list, str],\n-    split: bool = True,\n-    print_output: bool = False,\n-    **kwargs: Dict\n-) -> int:\n+    cmd: Union[list, str], split: bool = True, print_output: bool = False, **kwargs: Any\n+) -> subprocess.CompletedProcess:\n     \"\"\"Run a shell command.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "def run(\n    cmd: Union[list, str],\n    split: bool = True,\n    print_output: bool = False,\n    **kwargs: Dict\n) -> int:\n    <IND>",
        "target_code_with_indent": "def run(\n    cmd: Union[list, str], split: bool = True, print_output: bool = False, **kwargs: Any\n) -> subprocess.CompletedProcess:\n    <IND>"
      }
    ]
  },
  {
    "project": "quantumblacklabs/kedro",
    "commit": "49c095d0a747ce00b99727e358bb1f7f41106fe9",
    "filename": "features/steps/util.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/quantumblacklabs-kedro/features/steps/util.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "features/steps/util.py:162:4 Incompatible return type [7]: Expected `str` but got `Path`.",
    "message": " Expected `str` but got `Path`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 162,
    "warning_line": "    return venv_dir",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef create_new_venv() -> str:\n    \"\"\"Create a new venv.\n",
        "source_code_len": 57,
        "target_code": "\ndef create_new_venv() -> Path:\n    \"\"\"Create a new venv.\n",
        "target_code_len": 58,
        "diff_format": "@@ -135,3 +135,3 @@\n \n-def create_new_venv() -> str:\n+def create_new_venv() -> Path:\n     \"\"\"Create a new venv.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>def create_new_venv() -> str:\n    <IND>",
        "target_code_with_indent": "\n<DED>def create_new_venv() -> Path:\n    <IND>"
      }
    ]
  },
  {
    "project": "quantumblacklabs/kedro",
    "commit": "49c095d0a747ce00b99727e358bb1f7f41106fe9",
    "filename": "kedro/cli/utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/quantumblacklabs-kedro/kedro/cli/utils.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "kedro/cli/utils.py:124:12 Incompatible parameter type [6]: Expected `typing.Optional[List[click.core.MultiCommand]]` for 1st parameter `sources` to call `click.core.CommandCollection.__init__` but got `List[click.core.Group]`.",
    "message": " Expected `typing.Optional[List[click.core.MultiCommand]]` for 1st parameter `sources` to call `click.core.CommandCollection.__init__` but got `List[click.core.Group]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 124,
    "warning_line": "            sources=sources,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from pathlib import Path\nfrom typing import Any, Dict, List, Tuple, Union\nfrom warnings import warn\n",
        "source_code_len": 100,
        "target_code": "from pathlib import Path\nfrom typing import Any, Dict, Sequence, Tuple, Union\nfrom warnings import warn\n",
        "target_code_len": 104,
        "diff_format": "@@ -36,3 +36,3 @@\n from pathlib import Path\n-from typing import Any, Dict, List, Tuple, Union\n+from typing import Any, Dict, Sequence, Tuple, Union\n from warnings import warn\n",
        "source_code_with_indent": "from pathlib import Path\nfrom typing import Any, Dict, List, Tuple, Union\nfrom warnings import warn\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from pathlib import Path\nfrom typing import Any, Dict, Sequence, Tuple, Union\nfrom warnings import warn\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __init__(self, *groups: Tuple[str, List[click.core.Group]]):\n        self.groups = groups\n",
        "source_code_len": 99,
        "target_code": "\n    def __init__(self, *groups: Tuple[str, Sequence[click.core.MultiCommand]]):\n        self.groups = groups\n",
        "target_code_len": 110,
        "diff_format": "@@ -118,3 +118,3 @@\n \n-    def __init__(self, *groups: Tuple[str, List[click.core.Group]]):\n+    def __init__(self, *groups: Tuple[str, Sequence[click.core.MultiCommand]]):\n         self.groups = groups\n",
        "source_code_with_indent": "\n    def __init__(self, *groups: Tuple[str, List[click.core.Group]]):\n        <IND>self.groups = groups\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    def __init__(self, *groups: Tuple[str, Sequence[click.core.MultiCommand]]):\n        <IND>self.groups = groups\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "quantumblacklabs/kedro",
    "commit": "49c095d0a747ce00b99727e358bb1f7f41106fe9",
    "filename": "kedro/contrib/colors/logging/color_logger.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/quantumblacklabs-kedro/kedro/contrib/colors/logging/color_logger.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "kedro/contrib/colors/logging/color_logger.py:110:4 Inconsistent override [14]: `kedro.contrib.colors.logging.color_logger.ColorHandler.format` overrides method defined in `logging.Handler` inconsistently. Parameter of type `str` is not a supertype of the overridden parameter `logging.LogRecord`.",
    "message": " `kedro.contrib.colors.logging.color_logger.ColorHandler.format` overrides method defined in `logging.Handler` inconsistently. Parameter of type `str` is not a supertype of the overridden parameter `logging.LogRecord`.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 110,
    "warning_line": "    def format(self, record: str) -> str:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def format(self, record: str) -> str:\n        \"\"\"The handler formatter.\n",
        "source_code_len": 77,
        "target_code": "\n    def format(self, record: logging.LogRecord) -> str:\n        \"\"\"The handler formatter.\n",
        "target_code_len": 91,
        "diff_format": "@@ -109,3 +109,3 @@\n \n-    def format(self, record: str) -> str:\n+    def format(self, record: logging.LogRecord) -> str:\n         \"\"\"The handler formatter.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def format(self, record: str) -> str:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def format(self, record: logging.LogRecord) -> str:\n        <IND>"
      }
    ]
  },
  {
    "project": "quantumblacklabs/kedro",
    "commit": "49c095d0a747ce00b99727e358bb1f7f41106fe9",
    "filename": "kedro/contrib/colors/logging/color_logger.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/quantumblacklabs-kedro/kedro/contrib/colors/logging/color_logger.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "kedro/contrib/colors/logging/color_logger.py:120:50 Incompatible parameter type [6]: Expected `logging.LogRecord` for 2nd positional only parameter to call `logging.Handler.format` but got `str`.",
    "message": " Expected `logging.LogRecord` for 2nd positional only parameter to call `logging.Handler.format` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 120,
    "warning_line": "        text = logging.StreamHandler.format(self, record)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def format(self, record: str) -> str:\n        \"\"\"The handler formatter.\n",
        "source_code_len": 77,
        "target_code": "\n    def format(self, record: logging.LogRecord) -> str:\n        \"\"\"The handler formatter.\n",
        "target_code_len": 91,
        "diff_format": "@@ -109,3 +109,3 @@\n \n-    def format(self, record: str) -> str:\n+    def format(self, record: logging.LogRecord) -> str:\n         \"\"\"The handler formatter.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def format(self, record: str) -> str:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def format(self, record: logging.LogRecord) -> str:\n        <IND>"
      }
    ]
  },
  {
    "project": "quantumblacklabs/kedro",
    "commit": "49c095d0a747ce00b99727e358bb1f7f41106fe9",
    "filename": "kedro/contrib/decorators/decorators.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/quantumblacklabs-kedro/kedro/contrib/decorators/decorators.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "kedro/contrib/decorators/decorators.py:132:4 Incompatible variable type [9]: exceptions is declared to have type `Exception` but is used as type `typing.Type[Exception]`.",
    "message": " exceptions is declared to have type `Exception` but is used as type `typing.Type[Exception]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 132,
    "warning_line": "    exceptions: Exception = Exception, n_times: int = 1, delay_sec: float = 0",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from time import sleep\nfrom typing import Callable\n\n",
        "source_code_len": 52,
        "target_code": "from time import sleep\nfrom typing import Callable, Type\n\n",
        "target_code_len": 58,
        "diff_format": "@@ -35,3 +35,3 @@\n from time import sleep\n-from typing import Callable\n+from typing import Callable, Type\n \n",
        "source_code_with_indent": "from time import sleep\nfrom typing import Callable\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from time import sleep\nfrom typing import Callable, Type\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def retry(\n    exceptions: Exception = Exception, n_times: int = 1, delay_sec: float = 0\n) -> Callable:\n",
        "source_code_len": 104,
        "target_code": "def retry(\n    exceptions: Type[Exception] = Exception, n_times: int = 1, delay_sec: float = 0\n) -> Callable:\n",
        "target_code_len": 110,
        "diff_format": "@@ -131,3 +131,3 @@\n def retry(\n-    exceptions: Exception = Exception, n_times: int = 1, delay_sec: float = 0\n+    exceptions: Type[Exception] = Exception, n_times: int = 1, delay_sec: float = 0\n ) -> Callable:\n",
        "source_code_with_indent": "<DED>def retry(\n    exceptions: Exception = Exception, n_times: int = 1, delay_sec: float = 0\n) -> Callable:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED>def retry(\n    exceptions: Type[Exception] = Exception, n_times: int = 1, delay_sec: float = 0\n) -> Callable:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "quantumblacklabs/kedro",
    "commit": "49c095d0a747ce00b99727e358bb1f7f41106fe9",
    "filename": "kedro/pipeline/node.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/quantumblacklabs-kedro/kedro/pipeline/node.py",
    "file_hunks_size": 12,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "kedro/pipeline/node.py:425:28 Incompatible parameter type [6]: Expected `Iterable[Variable[_T]]` for 1st positional only parameter to call `set.__init__` but got `Union[None, Dict[str, str], List[str], str]`.",
    "message": " Expected `Iterable[Variable[_T]]` for 1st positional only parameter to call `set.__init__` but got `Union[None, Dict[str, str], List[str], str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 425,
    "warning_line": "        all_available = set(self._inputs).issubset(inputs.keys())"
  },
  {
    "project": "quantumblacklabs/kedro",
    "commit": "49c095d0a747ce00b99727e358bb1f7f41106fe9",
    "filename": "kedro/pipeline/node.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/quantumblacklabs-kedro/kedro/pipeline/node.py",
    "file_hunks_size": 12,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "kedro/pipeline/node.py:426:15 Incompatible parameter type [6]: Expected `typing.Sized` for 1st positional only parameter to call `len` but got `Union[None, Dict[str, str], List[str], str]`.",
    "message": " Expected `typing.Sized` for 1st positional only parameter to call `len` but got `Union[None, Dict[str, str], List[str], str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 426,
    "warning_line": "        if len(self._inputs) != len(inputs) or not all_available:"
  },
  {
    "project": "quantumblacklabs/kedro",
    "commit": "49c095d0a747ce00b99727e358bb1f7f41106fe9",
    "filename": "kedro/pipeline/node.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/quantumblacklabs-kedro/kedro/pipeline/node.py",
    "file_hunks_size": 12,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "kedro/pipeline/node.py:432:24 Incompatible parameter type [6]: Expected `typing.Sized` for 1st positional only parameter to call `len` but got `Union[None, Dict[str, str], List[str], str]`.",
    "message": " Expected `typing.Sized` for 1st positional only parameter to call `len` but got `Union[None, Dict[str, str], List[str], str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 432,
    "warning_line": "                    len(self._inputs),"
  }
]