[
  {
    "project": "awslabs/aws-lambda-powertools-python",
    "commit": "19515742b89dde0c97f151625c9e21336629ed81",
    "filename": "aws_lambda_powertools/utilities/batch/sqs.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/awslabs-aws-lambda-powertools-python/aws_lambda_powertools/utilities/batch/sqs.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "aws_lambda_powertools/utilities/batch/sqs.py:63:12 Incompatible return type [7]: Expected `str` but got `None`.",
    "message": " Expected `str` but got `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 63,
    "warning_line": "            return",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _get_queue_url(self) -> str:\n        \"\"\"\n",
        "source_code_len": 50,
        "target_code": "\n    def _get_queue_url(self) -> Optional[str]:\n        \"\"\"\n",
        "target_code_len": 60,
        "diff_format": "@@ -57,3 +57,3 @@\n \n-    def _get_queue_url(self) -> str:\n+    def _get_queue_url(self) -> Optional[str]:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def _get_queue_url(self) -> str:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def _get_queue_url(self) -> Optional[str]:\n        <IND>"
      }
    ]
  },
  {
    "project": "awslabs/aws-lambda-powertools-python",
    "commit": "19515742b89dde0c97f151625c9e21336629ed81",
    "filename": "example/hello_world/app.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/awslabs-aws-lambda-powertools-python/example/hello_world/app.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "example/hello_world/app.py:17:16 Incompatible parameter type [6]: Expected `typing.List[typing.Any]` for 1st parameter `patch_modules` to call `aws_lambda_powertools.tracing.tracer.Tracer.__init__` but got `typing.Tuple[str, str, str]`.",
    "message": " Expected `typing.List[typing.Any]` for 1st parameter `patch_modules` to call `aws_lambda_powertools.tracing.tracer.Tracer.__init__` but got `typing.Tuple[str, str, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 17,
    "warning_line": "tracer = Tracer(patch_modules=(\"aioboto3\", \"boto3\", \"requests\"))  # ~90-100ms faster in perf depending on set of libs",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "# tracer = Tracer() # patches all available modules # noqa: E800\ntracer = Tracer(patch_modules=(\"aioboto3\", \"boto3\", \"requests\"))  # ~90-100ms faster in perf depending on set of libs\nlogger = Logger()\n",
        "source_code_len": 201,
        "target_code": "# tracer = Tracer() # patches all available modules # noqa: E800\ntracer = Tracer(patch_modules=[\"aioboto3\", \"boto3\", \"requests\"])  # ~90-100ms faster in perf depending on set of libs\nlogger = Logger()\n",
        "target_code_len": 201,
        "diff_format": "@@ -16,3 +16,3 @@\n # tracer = Tracer() # patches all available modules # noqa: E800\n-tracer = Tracer(patch_modules=(\"aioboto3\", \"boto3\", \"requests\"))  # ~90-100ms faster in perf depending on set of libs\n+tracer = Tracer(patch_modules=[\"aioboto3\", \"boto3\", \"requests\"])  # ~90-100ms faster in perf depending on set of libs\n logger = Logger()\n",
        "source_code_with_indent": "# tracer = Tracer() # patches all available modules # noqa: E800\ntracer = Tracer(patch_modules=(\"aioboto3\", \"boto3\", \"requests\"))  # ~90-100ms faster in perf depending on set of libs\nlogger = Logger()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "# tracer = Tracer() # patches all available modules # noqa: E800\ntracer = Tracer(patch_modules=[\"aioboto3\", \"boto3\", \"requests\"])  # ~90-100ms faster in perf depending on set of libs\nlogger = Logger()\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]