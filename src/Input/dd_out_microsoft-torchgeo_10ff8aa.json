[
  {
    "project": "microsoft/torchgeo",
    "commit": "10ff8aa99d172c550104c7889c3d9b5a20844191",
    "filename": "torchgeo/trainers/byol.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-torchgeo/torchgeo/trainers/byol.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "torchgeo/trainers/byol.py:224:48 Incompatible parameter type [6]: Expected `typing_extensions.SupportsIndex` for 1st positional only parameter to call `list.__getitem__` but got `Union[int, str]`.",
    "message": " Expected `typing_extensions.SupportsIndex` for 1st positional only parameter to call `list.__getitem__` but got `Union[int, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 224,
    "warning_line": "            layer = list(self.model.children())[self.layer]",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        \"\"\"Register a hook for layer that we will extract features from.\"\"\"\n        if isinstance(self.layer, str):\n            layer = dict([*self.model.named_modules()])[self.layer]\n        else:\n            layer = list(self.model.children())[self.layer]\n\n        layer.register_forward_hook(self._hook)\n",
        "source_code_len": 307,
        "target_code": "        \"\"\"Register a hook for layer that we will extract features from.\"\"\"\n        layer = list(self.model.children())[self.layer]  # type: ignore[index]\n        layer.register_forward_hook(self._hook)\n",
        "target_code_len": 203,
        "diff_format": "@@ -220,7 +219,3 @@\n         \"\"\"Register a hook for layer that we will extract features from.\"\"\"\n-        if isinstance(self.layer, str):\n-            layer = dict([*self.model.named_modules()])[self.layer]\n-        else:\n-            layer = list(self.model.children())[self.layer]\n-\n+        layer = list(self.model.children())[self.layer]  # type: ignore[index]\n         layer.register_forward_hook(self._hook)\n",
        "source_code_with_indent": "        <IND>\"\"\"Register a hook for layer that we will extract features from.\"\"\"\n        if isinstance(self.layer, str):\n            <IND>layer = dict([*self.model.named_modules()])[self.layer]\n        <DED>else:\n            <IND>layer = list(self.model.children())[self.layer]\n\n        <DED>layer.register_forward_hook(self._hook)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>\"\"\"Register a hook for layer that we will extract features from.\"\"\"\n        layer = list(self.model.children())[self.layer]  # type: ignore[index]\n        layer.register_forward_hook(self._hook)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]