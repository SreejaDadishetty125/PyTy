[
  {
    "project": "emissary-ingress/emissary",
    "commit": "6c96f5c7a3f13004219f19e14f0f7c2fde753904",
    "filename": "ambassador/ambassador/envoy/v1/v1listener.py",
    "min_patch_found": false,
    "full_warning_msg": "ambassador/ambassador/envoy/v1/v1listener.py:82:34 Incompatible parameter type [6]: Expected `IRFilter` for 1st positional only parameter to call `V1Filter.__init__` but got `ambassador.ambassador.ir.irresource.IRResource`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "emissary-ingress/emissary",
    "commit": "6c96f5c7a3f13004219f19e14f0f7c2fde753904",
    "filename": "ambassador/ambassador/envoy/v1/v1route.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/emissary-ingress-emissary/ambassador/ambassador/envoy/v1/v1route.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ambassador/ambassador/envoy/v1/v1route.py:71:15 Unsupported operand [58]: `in` is not supported for right operand type `typing.Optional[ambassador.ambassador.ir.irmapping.IRMapping]`.",
    "message": " `in` is not supported for right operand type `typing.Optional[ambassador.ambassador.ir.irmapping.IRMapping]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 71,
    "warning_line": "            if \"path_redirect\" in group.host_redirect:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import List, Tuple, TYPE_CHECKING\n\n",
        "source_code_len": 47,
        "target_code": "from typing import List, Tuple, TYPE_CHECKING\nfrom typing import cast as typecast\n\n",
        "target_code_len": 83,
        "diff_format": "@@ -15,2 +15,3 @@\n from typing import List, Tuple, TYPE_CHECKING\n+from typing import cast as typecast\n \n",
        "source_code_with_indent": "from typing import List, Tuple, TYPE_CHECKING\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import List, Tuple, TYPE_CHECKING\nfrom typing import cast as typecast\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from ...ir import IRResource\nfrom ...ir.irmapping import IRMappingGroup\n\n",
        "source_code_len": 73,
        "target_code": "from ...ir import IRResource\nfrom ...ir.irmapping import IRMapping, IRMappingGroup\n\n",
        "target_code_len": 84,
        "diff_format": "@@ -18,3 +19,3 @@\n from ...ir import IRResource\n-from ...ir.irmapping import IRMappingGroup\n+from ...ir.irmapping import IRMapping, IRMappingGroup\n \n",
        "source_code_with_indent": "from ...ir import IRResource\nfrom ...ir.irmapping import IRMappingGroup\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from ...ir import IRResource\nfrom ...ir.irmapping import IRMapping, IRMappingGroup\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        if group.get(\"host_redirect\", None):\n            self[\"host_redirect\"] = group.host_redirect.service\n\n            if \"path_redirect\" in group.host_redirect:\n                self[\"path_redirect\"] = group.host_redirect.path_redirect\n        else:\n",
        "source_code_len": 253,
        "target_code": "        if group.get(\"host_redirect\", None):\n            hr: IRMapping = typecast(IRMapping, group.host_redirect)\n\n            self[\"host_redirect\"] = hr.service\n\n            if \"path_redirect\" in hr:\n                self[\"path_redirect\"] = hr.path_redirect\n        else:\n",
        "target_code_len": 272,
        "diff_format": "@@ -68,6 +69,8 @@\n         if group.get(\"host_redirect\", None):\n-            self[\"host_redirect\"] = group.host_redirect.service\n+            hr: IRMapping = typecast(IRMapping, group.host_redirect)\n \n-            if \"path_redirect\" in group.host_redirect:\n-                self[\"path_redirect\"] = group.host_redirect.path_redirect\n+            self[\"host_redirect\"] = hr.service\n+\n+            if \"path_redirect\" in hr:\n+                self[\"path_redirect\"] = hr.path_redirect\n         else:\n",
        "source_code_with_indent": "        <DED>if group.get(\"host_redirect\", None):\n            <IND>self[\"host_redirect\"] = group.host_redirect.service\n\n            if \"path_redirect\" in group.host_redirect:\n                <IND>self[\"path_redirect\"] = group.host_redirect.path_redirect\n        <DED><DED>else:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>if group.get(\"host_redirect\", None):\n            <IND>hr: IRMapping = typecast(IRMapping, group.host_redirect)\n\n            self[\"host_redirect\"] = hr.service\n\n            if \"path_redirect\" in hr:\n                <IND>self[\"path_redirect\"] = hr.path_redirect\n        <DED><DED>else:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "emissary-ingress/emissary",
    "commit": "6c96f5c7a3f13004219f19e14f0f7c2fde753904",
    "filename": "ambassador/ambassador/envoy/v2/v2admin.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/emissary-ingress-emissary/ambassador/ambassador/envoy/v2/v2admin.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ambassador/ambassador/envoy/v2/v2admin.py:39:8 Incompatible return type [7]: Expected `V2Admin` but got implicit return value of `None`.",
    "message": " Expected `V2Admin` but got implicit return value of `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 39,
    "warning_line": "        config.admin = config.save_element('admin', config.ir.ambassador_module, V2Admin(config))",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @classmethod\n    def generate(cls, config: 'V2Config') -> 'V2Admin':\n        config.admin = config.save_element('admin', config.ir.ambassador_module, V2Admin(config))\n\n",
        "source_code_len": 172,
        "target_code": "    @classmethod\n    def generate(cls, config: 'V2Config') -> None:\n        config.admin = config.save_element('admin', config.ir.ambassador_module, V2Admin(config))\n",
        "target_code_len": 166,
        "diff_format": "@@ -37,4 +37,3 @@\n     @classmethod\n-    def generate(cls, config: 'V2Config') -> 'V2Admin':\n+    def generate(cls, config: 'V2Config') -> None:\n         config.admin = config.save_element('admin', config.ir.ambassador_module, V2Admin(config))\n-\n",
        "source_code_with_indent": "    <DED>@classmethod\n    def generate(cls, config: 'V2Config') -> 'V2Admin':\n        <IND>config.admin = config.save_element('admin', config.ir.ambassador_module, V2Admin(config))\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@classmethod\n    def generate(cls, config: 'V2Config') -> None:\n        <IND>config.admin = config.save_element('admin', config.ir.ambassador_module, V2Admin(config))\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "emissary-ingress/emissary",
    "commit": "6c96f5c7a3f13004219f19e14f0f7c2fde753904",
    "filename": "ambassador/ambassador/envoy/v2/v2bootstrap.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/emissary-ingress-emissary/ambassador/ambassador/envoy/v2/v2bootstrap.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ambassador/ambassador/envoy/v2/v2bootstrap.py:57:8 Incompatible return type [7]: Expected `V2Bootstrap` but got implicit return value of `None`.",
    "message": " Expected `V2Bootstrap` but got implicit return value of `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 57,
    "warning_line": "        config.bootstrap = V2Bootstrap(config)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @classmethod\n    def generate(cls, config: 'V2Config') -> 'V2Bootstrap':\n        # Should we save this?\n        config.bootstrap = V2Bootstrap(config)\n",
        "source_code_len": 155,
        "target_code": "    @classmethod\n    def generate(cls, config: 'V2Config') -> None:\n        config.bootstrap = V2Bootstrap(config)\n",
        "target_code_len": 115,
        "diff_format": "@@ -54,4 +54,3 @@\n     @classmethod\n-    def generate(cls, config: 'V2Config') -> 'V2Bootstrap':\n-        # Should we save this?\n+    def generate(cls, config: 'V2Config') -> None:\n         config.bootstrap = V2Bootstrap(config)\n",
        "source_code_with_indent": "    <DED>@classmethod\n    def generate(cls, config: 'V2Config') -> 'V2Bootstrap':\n        # Should we save this?\n        <IND>config.bootstrap = V2Bootstrap(config)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@classmethod\n    def generate(cls, config: 'V2Config') -> None:\n        <IND>config.bootstrap = V2Bootstrap(config)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "emissary-ingress/emissary",
    "commit": "6c96f5c7a3f13004219f19e14f0f7c2fde753904",
    "filename": "ambassador/ambassador/envoy/v2/v2listener.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/emissary-ingress-emissary/ambassador/ambassador/envoy/v2/v2listener.py",
    "file_hunks_size": 17,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ambassador/ambassador/envoy/v2/v2listener.py:224:32 Incompatible parameter type [6]: Expected `typing.Union[int, slice]` for 1st positional only parameter to call `str.__getitem__` but got `str`.",
    "message": " Expected `typing.Union[int, slice]` for 1st positional only parameter to call `str.__getitem__` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 224,
    "warning_line": "                hcm_config_conf[\"tracing\"][\"request_headers_for_tags\"] = req_hdrs",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import List, Optional, TYPE_CHECKING\nfrom typing import cast as typecast\n",
        "source_code_len": 86,
        "target_code": "\nfrom typing import Any, Dict, List, Optional, TYPE_CHECKING\nfrom typing import cast as typecast\n",
        "target_code_len": 97,
        "diff_format": "@@ -14,3 +14,3 @@\n \n-from typing import List, Optional, TYPE_CHECKING\n+from typing import Any, Dict, List, Optional, TYPE_CHECKING\n from typing import cast as typecast\n",
        "source_code_with_indent": "\nfrom typing import List, Optional, TYPE_CHECKING\nfrom typing import cast as typecast\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import Any, Dict, List, Optional, TYPE_CHECKING\nfrom typing import cast as typecast\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        hcm_config = {\n                'name': 'envoy.http_connection_manager',\n                'config': {\n                    'stat_prefix': 'ingress_http',\n                    'access_log': access_log,\n                    'http_filters': filters,\n                    'route_config': {\n                        'virtual_hosts': [ vhost ]\n                    }\n                }\n            }\n\n        hcm_config_conf = hcm_config[\"config\"]\n\n",
        "source_code_len": 443,
        "target_code": "\n        http_config: Dict[str, Any] = {\n            'stat_prefix': 'ingress_http',\n            'access_log': access_log,\n            'http_filters': filters,\n            'route_config': {\n                'virtual_hosts': [ vhost ]\n            }\n        }\n\n",
        "target_code_len": 257,
        "diff_format": "@@ -184,15 +196,10 @@\n \n-        hcm_config = {\n-                'name': 'envoy.http_connection_manager',\n-                'config': {\n-                    'stat_prefix': 'ingress_http',\n-                    'access_log': access_log,\n-                    'http_filters': filters,\n-                    'route_config': {\n-                        'virtual_hosts': [ vhost ]\n-                    }\n-                }\n-            }\n-\n-        hcm_config_conf = hcm_config[\"config\"]\n+        http_config: Dict[str, Any] = {\n+            'stat_prefix': 'ingress_http',\n+            'access_log': access_log,\n+            'http_filters': filters,\n+            'route_config': {\n+                'virtual_hosts': [ vhost ]\n+            }\n+        }\n \n",
        "source_code_with_indent": "\n        <DED>hcm_config = {\n                'name': 'envoy.http_connection_manager',\n                'config': {\n                    'stat_prefix': 'ingress_http',\n                    'access_log': access_log,\n                    'http_filters': filters,\n                    'route_config': {\n                        'virtual_hosts': [ vhost ]\n                    }\n                }\n            }\n\n        hcm_config_conf = hcm_config[\"config\"]\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        <DED>http_config: Dict[str, Any] = {\n            'stat_prefix': 'ingress_http',\n            'access_log': access_log,\n            'http_filters': filters,\n            'route_config': {\n                'virtual_hosts': [ vhost ]\n            }\n        }\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            if group.get('use_websocket'):\n                hcm_config_conf.update(\n                    {\n                        'upgrade_configs': [\n                            {\n                                'upgrade_type': 'websocket',\n                            },\n                        ]\n                    },\n                )\n                break\n",
        "source_code_len": 361,
        "target_code": "            if group.get('use_websocket'):\n                http_config['upgrade_configs'] = [ { 'upgrade_type': 'websocket' } ]\n                break\n",
        "target_code_len": 150,
        "diff_format": "@@ -200,11 +207,3 @@\n             if group.get('use_websocket'):\n-                hcm_config_conf.update(\n-                    {\n-                        'upgrade_configs': [\n-                            {\n-                                'upgrade_type': 'websocket',\n-                            },\n-                        ]\n-                    },\n-                )\n+                http_config['upgrade_configs'] = [ { 'upgrade_type': 'websocket' } ]\n                 break\n",
        "source_code_with_indent": "            <IND>if group.get('use_websocket'):\n                <IND>hcm_config_conf.update(\n                    {\n                        'upgrade_configs': [\n                            {\n                                'upgrade_type': 'websocket',\n                            },\n                        ]\n                    },\n                )\n                break\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <IND>if group.get('use_websocket'):\n                <IND>http_config['upgrade_configs'] = [ { 'upgrade_type': 'websocket' } ]\n                break\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        if 'use_remote_address' in config.ir.ambassador_module:\n            hcm_config_conf[\"use_remote_address\"] = config.ir.ambassador_module.use_remote_address\n\n        if config.ir.tracing:\n            hcm_config_conf[\"generate_request_id\"] = True\n            hcm_config_conf[\"tracing\"] = {\n                \"operation_name\": \"egress\",\n",
        "source_code_len": 339,
        "target_code": "        if 'use_remote_address' in config.ir.ambassador_module:\n            http_config[\"use_remote_address\"] = config.ir.ambassador_module.use_remote_address\n\n        if config.ir.tracing:\n            http_config[\"generate_request_id\"] = True\n\n            http_config[\"tracing\"] = {\n                \"operation_name\": \"egress\",\n",
        "target_code_len": 328,
        "diff_format": "@@ -212,7 +211,8 @@\n         if 'use_remote_address' in config.ir.ambassador_module:\n-            hcm_config_conf[\"use_remote_address\"] = config.ir.ambassador_module.use_remote_address\n+            http_config[\"use_remote_address\"] = config.ir.ambassador_module.use_remote_address\n \n         if config.ir.tracing:\n-            hcm_config_conf[\"generate_request_id\"] = True\n-            hcm_config_conf[\"tracing\"] = {\n+            http_config[\"generate_request_id\"] = True\n+\n+            http_config[\"tracing\"] = {\n                 \"operation_name\": \"egress\",\n",
        "source_code_with_indent": "        <DED><DED>if 'use_remote_address' in config.ir.ambassador_module:\n            <IND>hcm_config_conf[\"use_remote_address\"] = config.ir.ambassador_module.use_remote_address\n\n        <DED>if config.ir.tracing:\n            <IND>hcm_config_conf[\"generate_request_id\"] = True\n            hcm_config_conf[\"tracing\"] = {\n                \"operation_name\": \"egress\",\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED><DED>if 'use_remote_address' in config.ir.ambassador_module:\n            <IND>http_config[\"use_remote_address\"] = config.ir.ambassador_module.use_remote_address\n\n        <DED>if config.ir.tracing:\n            <IND>http_config[\"generate_request_id\"] = True\n\n            http_config[\"tracing\"] = {\n                \"operation_name\": \"egress\",\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            if req_hdrs:\n                hcm_config_conf[\"tracing\"][\"request_headers_for_tags\"] = req_hdrs\n\n        chain = {\n            'filters': [hcm_config]\n        }\n",
        "source_code_len": 172,
        "target_code": "            if req_hdrs:\n                http_config[\"tracing\"][\"request_headers_for_tags\"] = req_hdrs\n\n        http_connmgr_config = {\n                'name': 'envoy.http_connection_manager',\n                'config': http_config\n            }\n\n        chain: Dict[str, Any] = {\n            'filters': [ http_connmgr_config ]\n        }\n",
        "target_code_len": 337,
        "diff_format": "@@ -223,6 +223,11 @@\n             if req_hdrs:\n-                hcm_config_conf[\"tracing\"][\"request_headers_for_tags\"] = req_hdrs\n-\n-        chain = {\n-            'filters': [hcm_config]\n+                http_config[\"tracing\"][\"request_headers_for_tags\"] = req_hdrs\n+\n+        http_connmgr_config = {\n+                'name': 'envoy.http_connection_manager',\n+                'config': http_config\n+            }\n+\n+        chain: Dict[str, Any] = {\n+            'filters': [ http_connmgr_config ]\n         }\n",
        "source_code_with_indent": "            if req_hdrs:\n                <IND>hcm_config_conf[\"tracing\"][\"request_headers_for_tags\"] = req_hdrs\n\n        <DED><DED>chain = {\n            'filters': [hcm_config]\n        }\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            if req_hdrs:\n                <IND>http_config[\"tracing\"][\"request_headers_for_tags\"] = req_hdrs\n\n        <DED><DED>http_connmgr_config = {\n                'name': 'envoy.http_connection_manager',\n                'config': http_config\n            }\n\n        chain: Dict[str, Any] = {\n            'filters': [ http_connmgr_config ]\n        }\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "emissary-ingress/emissary",
    "commit": "6c96f5c7a3f13004219f19e14f0f7c2fde753904",
    "filename": "ambassador/ambassador/envoy/v2/v2listener.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/emissary-ingress-emissary/ambassador/ambassador/envoy/v2/v2listener.py",
    "file_hunks_size": 17,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ambassador/ambassador/envoy/v2/v2listener.py:231:35 Incompatible parameter type [6]: Expected `List[typing.Dict[str, typing.Union[typing.Dict[str, typing.Union[None, List[typing.Dict[typing.Any, typing.Any]], typing.Dict[str, List[typing.Dict[str, typing.Union[List[V2Route], List[str], str]]]], str]], str]]]` for 2nd positional only parameter to call `dict.__setitem__` but got `typing.Dict[typing.Any, typing.Any]`.",
    "message": " Expected `List[typing.Dict[str, typing.Union[typing.Dict[str, typing.Union[None, List[typing.Dict[typing.Any, typing.Any]], typing.Dict[str, List[typing.Dict[str, typing.Union[List[V2Route], List[str], str]]]], str]], str]]]` for 2nd positional only parameter to call `dict.__setitem__` but got `typing.Dict[typing.Any, typing.Any]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 231,
    "warning_line": "            chain['tls_context'] = dict(envoy_ctx)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import List, Optional, TYPE_CHECKING\nfrom typing import cast as typecast\n",
        "source_code_len": 86,
        "target_code": "\nfrom typing import Any, Dict, List, Optional, TYPE_CHECKING\nfrom typing import cast as typecast\n",
        "target_code_len": 97,
        "diff_format": "@@ -14,3 +14,3 @@\n \n-from typing import List, Optional, TYPE_CHECKING\n+from typing import Any, Dict, List, Optional, TYPE_CHECKING\n from typing import cast as typecast\n",
        "source_code_with_indent": "\nfrom typing import List, Optional, TYPE_CHECKING\nfrom typing import cast as typecast\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import Any, Dict, List, Optional, TYPE_CHECKING\nfrom typing import cast as typecast\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        hcm_config = {\n                'name': 'envoy.http_connection_manager',\n                'config': {\n                    'stat_prefix': 'ingress_http',\n                    'access_log': access_log,\n                    'http_filters': filters,\n                    'route_config': {\n                        'virtual_hosts': [ vhost ]\n                    }\n                }\n            }\n\n        hcm_config_conf = hcm_config[\"config\"]\n\n",
        "source_code_len": 443,
        "target_code": "\n        http_config: Dict[str, Any] = {\n            'stat_prefix': 'ingress_http',\n            'access_log': access_log,\n            'http_filters': filters,\n            'route_config': {\n                'virtual_hosts': [ vhost ]\n            }\n        }\n\n",
        "target_code_len": 257,
        "diff_format": "@@ -184,15 +196,10 @@\n \n-        hcm_config = {\n-                'name': 'envoy.http_connection_manager',\n-                'config': {\n-                    'stat_prefix': 'ingress_http',\n-                    'access_log': access_log,\n-                    'http_filters': filters,\n-                    'route_config': {\n-                        'virtual_hosts': [ vhost ]\n-                    }\n-                }\n-            }\n-\n-        hcm_config_conf = hcm_config[\"config\"]\n+        http_config: Dict[str, Any] = {\n+            'stat_prefix': 'ingress_http',\n+            'access_log': access_log,\n+            'http_filters': filters,\n+            'route_config': {\n+                'virtual_hosts': [ vhost ]\n+            }\n+        }\n \n",
        "source_code_with_indent": "\n        <DED>hcm_config = {\n                'name': 'envoy.http_connection_manager',\n                'config': {\n                    'stat_prefix': 'ingress_http',\n                    'access_log': access_log,\n                    'http_filters': filters,\n                    'route_config': {\n                        'virtual_hosts': [ vhost ]\n                    }\n                }\n            }\n\n        hcm_config_conf = hcm_config[\"config\"]\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        <DED>http_config: Dict[str, Any] = {\n            'stat_prefix': 'ingress_http',\n            'access_log': access_log,\n            'http_filters': filters,\n            'route_config': {\n                'virtual_hosts': [ vhost ]\n            }\n        }\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            if group.get('use_websocket'):\n                hcm_config_conf.update(\n                    {\n                        'upgrade_configs': [\n                            {\n                                'upgrade_type': 'websocket',\n                            },\n                        ]\n                    },\n                )\n                break\n",
        "source_code_len": 361,
        "target_code": "            if group.get('use_websocket'):\n                http_config['upgrade_configs'] = [ { 'upgrade_type': 'websocket' } ]\n                break\n",
        "target_code_len": 150,
        "diff_format": "@@ -200,11 +207,3 @@\n             if group.get('use_websocket'):\n-                hcm_config_conf.update(\n-                    {\n-                        'upgrade_configs': [\n-                            {\n-                                'upgrade_type': 'websocket',\n-                            },\n-                        ]\n-                    },\n-                )\n+                http_config['upgrade_configs'] = [ { 'upgrade_type': 'websocket' } ]\n                 break\n",
        "source_code_with_indent": "            <IND>if group.get('use_websocket'):\n                <IND>hcm_config_conf.update(\n                    {\n                        'upgrade_configs': [\n                            {\n                                'upgrade_type': 'websocket',\n                            },\n                        ]\n                    },\n                )\n                break\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <IND>if group.get('use_websocket'):\n                <IND>http_config['upgrade_configs'] = [ { 'upgrade_type': 'websocket' } ]\n                break\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        if 'use_remote_address' in config.ir.ambassador_module:\n            hcm_config_conf[\"use_remote_address\"] = config.ir.ambassador_module.use_remote_address\n\n        if config.ir.tracing:\n            hcm_config_conf[\"generate_request_id\"] = True\n            hcm_config_conf[\"tracing\"] = {\n                \"operation_name\": \"egress\",\n",
        "source_code_len": 339,
        "target_code": "        if 'use_remote_address' in config.ir.ambassador_module:\n            http_config[\"use_remote_address\"] = config.ir.ambassador_module.use_remote_address\n\n        if config.ir.tracing:\n            http_config[\"generate_request_id\"] = True\n\n            http_config[\"tracing\"] = {\n                \"operation_name\": \"egress\",\n",
        "target_code_len": 328,
        "diff_format": "@@ -212,7 +211,8 @@\n         if 'use_remote_address' in config.ir.ambassador_module:\n-            hcm_config_conf[\"use_remote_address\"] = config.ir.ambassador_module.use_remote_address\n+            http_config[\"use_remote_address\"] = config.ir.ambassador_module.use_remote_address\n \n         if config.ir.tracing:\n-            hcm_config_conf[\"generate_request_id\"] = True\n-            hcm_config_conf[\"tracing\"] = {\n+            http_config[\"generate_request_id\"] = True\n+\n+            http_config[\"tracing\"] = {\n                 \"operation_name\": \"egress\",\n",
        "source_code_with_indent": "        <DED><DED>if 'use_remote_address' in config.ir.ambassador_module:\n            <IND>hcm_config_conf[\"use_remote_address\"] = config.ir.ambassador_module.use_remote_address\n\n        <DED>if config.ir.tracing:\n            <IND>hcm_config_conf[\"generate_request_id\"] = True\n            hcm_config_conf[\"tracing\"] = {\n                \"operation_name\": \"egress\",\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED><DED>if 'use_remote_address' in config.ir.ambassador_module:\n            <IND>http_config[\"use_remote_address\"] = config.ir.ambassador_module.use_remote_address\n\n        <DED>if config.ir.tracing:\n            <IND>http_config[\"generate_request_id\"] = True\n\n            http_config[\"tracing\"] = {\n                \"operation_name\": \"egress\",\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            if req_hdrs:\n                hcm_config_conf[\"tracing\"][\"request_headers_for_tags\"] = req_hdrs\n\n        chain = {\n            'filters': [hcm_config]\n        }\n",
        "source_code_len": 172,
        "target_code": "            if req_hdrs:\n                http_config[\"tracing\"][\"request_headers_for_tags\"] = req_hdrs\n\n        http_connmgr_config = {\n                'name': 'envoy.http_connection_manager',\n                'config': http_config\n            }\n\n        chain: Dict[str, Any] = {\n            'filters': [ http_connmgr_config ]\n        }\n",
        "target_code_len": 337,
        "diff_format": "@@ -223,6 +223,11 @@\n             if req_hdrs:\n-                hcm_config_conf[\"tracing\"][\"request_headers_for_tags\"] = req_hdrs\n-\n-        chain = {\n-            'filters': [hcm_config]\n+                http_config[\"tracing\"][\"request_headers_for_tags\"] = req_hdrs\n+\n+        http_connmgr_config = {\n+                'name': 'envoy.http_connection_manager',\n+                'config': http_config\n+            }\n+\n+        chain: Dict[str, Any] = {\n+            'filters': [ http_connmgr_config ]\n         }\n",
        "source_code_with_indent": "            if req_hdrs:\n                <IND>hcm_config_conf[\"tracing\"][\"request_headers_for_tags\"] = req_hdrs\n\n        <DED><DED>chain = {\n            'filters': [hcm_config]\n        }\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            if req_hdrs:\n                <IND>http_config[\"tracing\"][\"request_headers_for_tags\"] = req_hdrs\n\n        <DED><DED>http_connmgr_config = {\n                'name': 'envoy.http_connection_manager',\n                'config': http_config\n            }\n\n        chain: Dict[str, Any] = {\n            'filters': [ http_connmgr_config ]\n        }\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]