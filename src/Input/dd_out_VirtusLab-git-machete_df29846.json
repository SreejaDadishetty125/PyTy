[
  {
    "project": "VirtusLab/git-machete",
    "commit": "df298462fe6d86aab712100dd799a2a434f114c8",
    "filename": "git_machete/cmd.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/VirtusLab-git-machete/git_machete/cmd.py",
    "file_hunks_size": 12,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "git_machete/cmd.py:1947:8 Incompatible return type [7]: Expected `bool` but got `typing.Union[bool, str]`.",
    "message": " Expected `bool` but got `typing.Union[bool, str]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 1947,
    "warning_line": "        return \\",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "    def connected_with_green_edge(bd: str) -> bool:\n        return \\\n            not is_merged_to_upstream(bd) and \\\n            is_ancestor(b, bd) and \\\n            (get_overridden_fork_point(bd) or commit_sha_by_revision(b) == fork_point(bd, use_overrides=False))  # type: ignore\n\n",
        "source_code_len": 283,
        "target_code": "    def connected_with_green_edge(bd: str) -> bool:\n        not_merged_and_is_ancestor = not is_merged_to_upstream(bd) and is_ancestor(b, bd)\n        overriden_fp_or_revision_is_fp = get_overridden_fork_point(bd) or commit_sha_by_revision(b) == fork_point(bd, use_overrides=False)\n        return not_merged_and_is_ancestor and overriden_fp_or_revision_is_fp  # type: ignore\n\n",
        "target_code_len": 375,
        "diff_format": "@@ -1946,6 +1955,5 @@\n     def connected_with_green_edge(bd: str) -> bool:\n-        return \\\n-            not is_merged_to_upstream(bd) and \\\n-            is_ancestor(b, bd) and \\\n-            (get_overridden_fork_point(bd) or commit_sha_by_revision(b) == fork_point(bd, use_overrides=False))  # type: ignore\n+        not_merged_and_is_ancestor = not is_merged_to_upstream(bd) and is_ancestor(b, bd)\n+        overriden_fp_or_revision_is_fp = get_overridden_fork_point(bd) or commit_sha_by_revision(b) == fork_point(bd, use_overrides=False)\n+        return not_merged_and_is_ancestor and overriden_fp_or_revision_is_fp  # type: ignore\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent": "    <DED>def connected_with_green_edge(bd: str) -> bool:\n        <IND>not_merged_and_is_ancestor = not is_merged_to_upstream(bd) and is_ancestor(b, bd)\n        overriden_fp_or_revision_is_fp = get_overridden_fork_point(bd) or commit_sha_by_revision(b) == fork_point(bd, use_overrides=False)\n        return not_merged_and_is_ancestor and overriden_fp_or_revision_is_fp  # type: ignore\n\n",
        "target_code_with_indent_exact_match": true,
        "source_code_with_indent": "    <DED>def connected_with_green_edge(bd: str) -> bool:\n        <IND>return            not is_merged_to_upstream(bd) and            is_ancestor(b, bd) and            (get_overridden_fork_point(bd) or commit_sha_by_revision(b) == fork_point(bd, use_overrides=False))  # type: ignore\n\n"
      }
    ]
  }
]