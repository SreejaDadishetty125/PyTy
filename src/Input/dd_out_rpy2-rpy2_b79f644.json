[
  {
    "project": "rpy2/rpy2",
    "commit": "b79f644a13206b6f8512f18c3394828cb785ccf9",
    "filename": "rpy2/robjects/functions.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/rpy2-rpy2/rpy2/robjects/functions.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "rpy2/robjects/functions.py:279:15 Incompatible parameter type [6]: Expected `typing.Sized` for 1st positional only parameter to call `len` but got `rpy2.rinterface_lib.sexp.Sexp`.",
    "message": " Expected `typing.Sized` for 1st positional only parameter to call `len` but got `rpy2.rinterface_lib.sexp.Sexp`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 279,
    "warning_line": "        if len(value) == 1:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "    if value.__sexp__.typeof in _SCALAR_COMPAT_RTYPES:\n        if len(value) == 1:\n            res = value[0]\n        else:\n",
        "source_code_len": 124,
        "target_code": "    if value.__sexp__.typeof in _SCALAR_COMPAT_RTYPES:\n        # TODO: The dynamic check of typeof (to ensure that that\n        # the underlying R object is of a compatible type makes\n        # mypy trip. There is no way to check type outside of runtime.\n        # Code refactoring would be needed.\n        if len(value) == 1:  # type: ignore\n            res = value[0]  # type: ignore\n        else:\n",
        "target_code_len": 400,
        "diff_format": "@@ -278,4 +280,8 @@\n     if value.__sexp__.typeof in _SCALAR_COMPAT_RTYPES:\n-        if len(value) == 1:\n-            res = value[0]\n+        # TODO: The dynamic check of typeof (to ensure that that\n+        # the underlying R object is of a compatible type makes\n+        # mypy trip. There is no way to check type outside of runtime.\n+        # Code refactoring would be needed.\n+        if len(value) == 1:  # type: ignore\n+            res = value[0]  # type: ignore\n         else:\n",
        "source_code_with_indent": "    if value.__sexp__.typeof in _SCALAR_COMPAT_RTYPES:\n        <IND>if len(value) == 1:\n            <IND>res = value[0]\n        <DED>else:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    if value.__sexp__.typeof in _SCALAR_COMPAT_RTYPES:\n        # TODO: The dynamic check of typeof (to ensure that that\n        # the underlying R object is of a compatible type makes\n        # mypy trip. There is no way to check type outside of runtime.\n        # Code refactoring would be needed.\n        <IND>if len(value) == 1:  # type: ignore\n            <IND>res = value[0]  # type: ignore\n        <DED>else:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]