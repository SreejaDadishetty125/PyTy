[
  {
    "project": "mozman/ezdxf",
    "commit": "c604a59f0d780cb96f387af3212bae4efb804798",
    "filename": "src/ezdxf/tools/text_layout.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mozman-ezdxf/src/ezdxf/tools/text_layout.py",
    "file_hunks_size": 25,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/ezdxf/tools/text_layout.py:229:8 Incompatible return type [7]: Expected `Tuple[float, float, float, float]` but got implicit return value of `None`.",
    "message": " Expected `Tuple[float, float, float, float]` but got implicit return value of `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 229,
    "warning_line": "        return margins[0], margins[0], margins[0], margins[0]",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        return margins[0], margins[0], margins[0], margins[0]\n\n",
        "source_code_len": 63,
        "target_code": "        return margins[0], margins[0], margins[0], margins[0]\n    return 0, 0, 0, 0\n\n",
        "target_code_len": 85,
        "diff_format": "@@ -229,2 +229,3 @@\n         return margins[0], margins[0], margins[0], margins[0]\n+    return 0, 0, 0, 0\n \n",
        "source_code_with_indent": "        <IND>return margins[0], margins[0], margins[0], margins[0]\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>return margins[0], margins[0], margins[0], margins[0]\n    <DED>return 0, 0, 0, 0\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "mozman/ezdxf",
    "commit": "c604a59f0d780cb96f387af3212bae4efb804798",
    "filename": "src/ezdxf/tools/text_layout.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mozman-ezdxf/src/ezdxf/tools/text_layout.py",
    "file_hunks_size": 25,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/ezdxf/tools/text_layout.py:687:8 Incompatible attribute type [8]: Attribute `renderer` declared in class `Container` has type `Optional[typing.Any]` but is used as type `ContentRenderer`.",
    "message": " Attribute `renderer` declared in class `Container` has type `Optional[typing.Any]` but is used as type `ContentRenderer`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 687,
    "warning_line": "        self.renderer: Optional = renderer"
  },
  {
    "project": "mozman/ezdxf",
    "commit": "c604a59f0d780cb96f387af3212bae4efb804798",
    "filename": "src/ezdxf/tools/text_layout.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mozman-ezdxf/src/ezdxf/tools/text_layout.py",
    "file_hunks_size": 25,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/ezdxf/tools/text_layout.py:802:8 Incompatible attribute type [8]: Attribute `_width` declared in class `EmptyParagraph` has type `int` but is used as type `float`.",
    "message": " Attribute `_width` declared in class `EmptyParagraph` has type `int` but is used as type `float`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 802,
    "warning_line": "        self._width = width",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def __init__(self, cap_height: float, line_spacing: float = 1):\n        self._height = leading(cap_height, line_spacing)\n        self._width = 0\n\n",
        "source_code_len": 150,
        "target_code": "    def __init__(self, cap_height: float, line_spacing: float = 1):\n        self._height: float = leading(cap_height, line_spacing)\n        self._width: float = 0\n\n",
        "target_code_len": 164,
        "diff_format": "@@ -789,4 +790,4 @@\n     def __init__(self, cap_height: float, line_spacing: float = 1):\n-        self._height = leading(cap_height, line_spacing)\n-        self._width = 0\n+        self._height: float = leading(cap_height, line_spacing)\n+        self._width: float = 0\n \n",
        "source_code_with_indent": "    def __init__(self, cap_height: float, line_spacing: float = 1):\n        <IND>self._height = leading(cap_height, line_spacing)\n        self._width = 0\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def __init__(self, cap_height: float, line_spacing: float = 1):\n        <IND>self._height: float = leading(cap_height, line_spacing)\n        self._width: float = 0\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "mozman/ezdxf",
    "commit": "c604a59f0d780cb96f387af3212bae4efb804798",
    "filename": "src/ezdxf/tools/text_layout.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mozman-ezdxf/src/ezdxf/tools/text_layout.py",
    "file_hunks_size": 25,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/ezdxf/tools/text_layout.py:911:16 Incompatible return type [7]: Expected `AbstractLine` but got implicit return value of `None`.",
    "message": " Expected `AbstractLine` but got implicit return value of `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 911,
    "warning_line": "                return CenterLine(width)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                return CenterLine(width)\n\n",
        "source_code_len": 42,
        "target_code": "                return CenterLine(width)\n            else:\n                raise ValueError(align)\n\n",
        "target_code_len": 100,
        "diff_format": "@@ -911,2 +912,4 @@\n                 return CenterLine(width)\n+            else:\n+                raise ValueError(align)\n \n",
        "source_code_with_indent": "                <IND>return CenterLine(width)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                <IND>return CenterLine(width)\n            <DED>else:\n                <IND>raise ValueError(align)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "mozman/ezdxf",
    "commit": "c604a59f0d780cb96f387af3212bae4efb804798",
    "filename": "src/ezdxf/tools/text_layout.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mozman-ezdxf/src/ezdxf/tools/text_layout.py",
    "file_hunks_size": 25,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/ezdxf/tools/text_layout.py:1006:12 Incompatible parameter type [6]: Expected `ContentRenderer` for 7th positional only parameter to call `Paragraph.__init__` but got `Optional[typing.Any]`.",
    "message": " Expected `ContentRenderer` for 7th positional only parameter to call `Paragraph.__init__` but got `Optional[typing.Any]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1006,
    "warning_line": "            self.renderer,"
  },
  {
    "project": "mozman/ezdxf",
    "commit": "c604a59f0d780cb96f387af3212bae4efb804798",
    "filename": "src/ezdxf/tools/text_layout.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mozman-ezdxf/src/ezdxf/tools/text_layout.py",
    "file_hunks_size": 25,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/ezdxf/tools/text_layout.py:1037:12 Incompatible parameter type [6]: Expected `ContentRenderer` for 5th parameter `renderer` to call `Column.__init__` but got `Optional[typing.Any]`.",
    "message": " Expected `ContentRenderer` for 5th parameter `renderer` to call `Column.__init__` but got `Optional[typing.Any]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1037,
    "warning_line": "            renderer=self.renderer,"
  },
  {
    "project": "mozman/ezdxf",
    "commit": "c604a59f0d780cb96f387af3212bae4efb804798",
    "filename": "src/ezdxf/tools/text_layout.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mozman-ezdxf/src/ezdxf/tools/text_layout.py",
    "file_hunks_size": 25,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "src/ezdxf/tools/text_layout.py:1094:25 Unsupported operand [58]: `-` is not supported for operand types `Optional[float]` and `float`.",
    "message": " `-` is not supported for operand types `Optional[float]` and `float`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 1094,
    "warning_line": "                height = self.max_content_height - self.used_content_height()",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "            else:\n                height = self.max_content_height - self.used_content_height()\n            rest = paragraph.distribute_content(height)\n",
        "source_code_len": 152,
        "target_code": "            else:\n                height = self.max_content_height - self.used_content_height()  # type: ignore\n            rest = paragraph.distribute_content(height)\n",
        "target_code_len": 168,
        "diff_format": "@@ -1093,3 +1097,3 @@\n             else:\n-                height = self.max_content_height - self.used_content_height()\n+                height = self.max_content_height - self.used_content_height()  # type: ignore\n             rest = paragraph.distribute_content(height)\n",
        "source_code_with_indent": "            <DED>else:\n                <IND>height = self.max_content_height - self.used_content_height()\n            <DED>rest = paragraph.distribute_content(height)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <DED>else:\n                <IND>height = self.max_content_height - self.used_content_height()  # type: ignore\n            <DED>rest = paragraph.distribute_content(height)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]