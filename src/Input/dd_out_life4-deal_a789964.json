[
  {
    "project": "life4/deal",
    "commit": "a789964511df2f33696d77f720270cdd63aa5457",
    "filename": "deal/_cli/_test.py",
    "min_patch_found": false,
    "full_warning_msg": "deal/_cli/_test.py:80:42 Incompatible parameter type [6]: Expected `typing.List[typing.Any]` for 1st parameter `args` to call `format_call_args` but got `typing.Tuple[typing.Any, ...]`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "life4/deal",
    "commit": "a789964511df2f33696d77f720270cdd63aa5457",
    "filename": "deal/linter/_contract.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/life4-deal/deal/linter/_contract.py",
    "file_hunks_size": 9,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "deal/linter/_contract.py:48:8 Incompatible variable type [9]: context is declared to have type `Dict[str, _ast.AST]` but is used as type `None`.",
    "message": " context is declared to have type `Dict[str, _ast.AST]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 48,
    "warning_line": "        context: Dict[str, ast.AST] = None,"
  },
  {
    "project": "life4/deal",
    "commit": "a789964511df2f33696d77f720270cdd63aa5457",
    "filename": "deal/linter/_contract.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/life4-deal/deal/linter/_contract.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "deal/linter/_contract.py:85:8 Incompatible return type [7]: Expected `frozenset[str]` but got `typing.Set[typing.Any]`.",
    "message": " Expected `frozenset[str]` but got `typing.Set[typing.Any]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 85,
    "warning_line": "        return result",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            result.add(args.kwarg.arg)\n        return result\n\n",
        "source_code_len": 62,
        "target_code": "            result.add(args.kwarg.arg)\n        return frozenset(result)\n\n",
        "target_code_len": 73,
        "diff_format": "@@ -84,3 +84,3 @@\n             result.add(args.kwarg.arg)\n-        return result\n+        return frozenset(result)\n \n",
        "source_code_with_indent": "            <IND>result.add(args.kwarg.arg)\n        <DED>return result\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <IND>result.add(args.kwarg.arg)\n        <DED>return frozenset(result)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "life4/deal",
    "commit": "a789964511df2f33696d77f720270cdd63aa5457",
    "filename": "deal/linter/_contract.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/life4-deal/deal/linter/_contract.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "deal/linter/_contract.py:157:12 Incompatible attribute type [8]: Attribute `body` declared in class `_ast.Module` has type `typing.List[_ast.stmt]` but is used as type `typing.List[_ast.FunctionDef]`.",
    "message": " Attribute `body` declared in class `_ast.Module` has type `typing.List[_ast.stmt]` but is used as type `typing.List[_ast.FunctionDef]`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 157,
    "warning_line": "            module.body = [contract] + module.body",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "            # to `contract` variable.\n            module.body = [contract] + module.body\n            module.body[FUNC_INDEX].value = ast.Name(\n                id=contract.name,\n",
        "source_code_len": 177,
        "target_code": "            # to `contract` variable.\n            module.body = [contract] + module.body      # type: ignore\n            module.body[FUNC_INDEX].value = ast.Name(   # type: ignore\n                id=contract.name,\n",
        "target_code_len": 214,
        "diff_format": "@@ -156,4 +166,4 @@\n             # to `contract` variable.\n-            module.body = [contract] + module.body\n-            module.body[FUNC_INDEX].value = ast.Name(\n+            module.body = [contract] + module.body      # type: ignore\n+            module.body[FUNC_INDEX].value = ast.Name(   # type: ignore\n                 id=contract.name,\n",
        "source_code_with_indent": "            # to `contract` variable.\n            module.body = [contract] + module.body\n            module.body[FUNC_INDEX].value = ast.Name(\n                id=contract.name,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            # to `contract` variable.\n            module.body = [contract] + module.body      # type: ignore\n            module.body[FUNC_INDEX].value = ast.Name(   # type: ignore\n                id=contract.name,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "life4/deal",
    "commit": "a789964511df2f33696d77f720270cdd63aa5457",
    "filename": "deal/linter/_contract.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/life4-deal/deal/linter/_contract.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "deal/linter/_contract.py:157:39 Unsupported operand [58]: `+` is not supported for operand types `typing.List[_ast.FunctionDef]` and `typing.List[_ast.stmt]`.",
    "message": " `+` is not supported for operand types `typing.List[_ast.FunctionDef]` and `typing.List[_ast.stmt]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 157,
    "warning_line": "            module.body = [contract] + module.body",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "            # to `contract` variable.\n            module.body = [contract] + module.body\n            module.body[FUNC_INDEX].value = ast.Name(\n                id=contract.name,\n",
        "source_code_len": 177,
        "target_code": "            # to `contract` variable.\n            module.body = [contract] + module.body      # type: ignore\n            module.body[FUNC_INDEX].value = ast.Name(   # type: ignore\n                id=contract.name,\n",
        "target_code_len": 214,
        "diff_format": "@@ -156,4 +166,4 @@\n             # to `contract` variable.\n-            module.body = [contract] + module.body\n-            module.body[FUNC_INDEX].value = ast.Name(\n+            module.body = [contract] + module.body      # type: ignore\n+            module.body[FUNC_INDEX].value = ast.Name(   # type: ignore\n                 id=contract.name,\n",
        "source_code_with_indent": "            # to `contract` variable.\n            module.body = [contract] + module.body\n            module.body[FUNC_INDEX].value = ast.Name(\n                id=contract.name,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            # to `contract` variable.\n            module.body = [contract] + module.body      # type: ignore\n            module.body[FUNC_INDEX].value = ast.Name(   # type: ignore\n                id=contract.name,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "life4/deal",
    "commit": "a789964511df2f33696d77f720270cdd63aa5457",
    "filename": "deal/linter/_extractors/definitions.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/life4-deal/deal/linter/_extractors/definitions.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "deal/linter/_extractors/definitions.py:34:45 Unsupported operand [58]: `+` is not supported for operand types `str` and `typing.Optional[str]`.",
    "message": " `+` is not supported for operand types `str` and `typing.Optional[str]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 34,
    "warning_line": "            module_name = '.' * node.level + node.module",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "TreeType = Union[ast.Module, astroid.Module]\n\n\ndef get_definitions(tree: TreeType) -> Dict[str, ast.AST]:\n    if isinstance(tree, ast.Module):\n",
        "source_code_len": 143,
        "target_code": "TreeType = Union[ast.Module, astroid.Module]\nDefsType = Dict[str, ast.stmt]\n\n\ndef get_definitions(tree: TreeType) -> DefsType:\n    if isinstance(tree, ast.Module):\n",
        "target_code_len": 164,
        "diff_format": "@@ -9,5 +9,6 @@\n TreeType = Union[ast.Module, astroid.Module]\n+DefsType = Dict[str, ast.stmt]\n \n \n-def get_definitions(tree: TreeType) -> Dict[str, ast.AST]:\n+def get_definitions(tree: TreeType) -> DefsType:\n     if isinstance(tree, ast.Module):\n",
        "source_code_with_indent": "TreeType = Union[ast.Module, astroid.Module]\n\n\ndef get_definitions(tree: TreeType) -> Dict[str, ast.AST]:\n    <IND>if isinstance(tree, ast.Module):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "TreeType = Union[ast.Module, astroid.Module]\nDefsType = Dict[str, ast.stmt]\n\n\ndef get_definitions(tree: TreeType) -> DefsType:\n    <IND>if isinstance(tree, ast.Module):\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _extract_defs_ast(tree: ast.Module) -> Dict[str, ast.AST]:\n    result: Dict[str, ast.AST] = dict()\n    for node in tree.body:\n",
        "source_code_len": 131,
        "target_code": "\ndef _extract_defs_ast(tree: ast.Module) -> DefsType:\n    result: DefsType = dict()\n    for node in tree.body:\n",
        "target_code_len": 111,
        "diff_format": "@@ -17,4 +18,4 @@\n \n-def _extract_defs_ast(tree: ast.Module) -> Dict[str, ast.AST]:\n-    result: Dict[str, ast.AST] = dict()\n+def _extract_defs_ast(tree: ast.Module) -> DefsType:\n+    result: DefsType = dict()\n     for node in tree.body:\n",
        "source_code_with_indent": "\n<DED>def _extract_defs_ast(tree: ast.Module) -> Dict[str, ast.AST]:\n    <IND>result: Dict[str, ast.AST] = dict()\n    for node in tree.body:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def _extract_defs_ast(tree: ast.Module) -> DefsType:\n    <IND>result: DefsType = dict()\n    for node in tree.body:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        if isinstance(node, ast.ImportFrom):\n            module_name = '.' * node.level + node.module\n            for name_node in node.names:\n                stmt = ast.ImportFrom(\n                    module=module_name,\n                    names=[name_node],\n",
        "source_code_len": 261,
        "target_code": "        if isinstance(node, ast.ImportFrom):\n            if not node.module or node.level:\n                continue\n            for name_node in node.names:\n                name = name_node.asname or name_node.name\n                result[name] = ast.ImportFrom(\n                    module=node.module,\n                    names=[name_node],\n",
        "target_code_len": 341,
        "diff_format": "@@ -33,6 +33,8 @@\n         if isinstance(node, ast.ImportFrom):\n-            module_name = '.' * node.level + node.module\n+            if not node.module or node.level:\n+                continue\n             for name_node in node.names:\n-                stmt = ast.ImportFrom(\n-                    module=module_name,\n+                name = name_node.asname or name_node.name\n+                result[name] = ast.ImportFrom(\n+                    module=node.module,\n                     names=[name_node],\n",
        "source_code_with_indent": "        <DED>if isinstance(node, ast.ImportFrom):\n            <IND>module_name = '.' * node.level + node.module\n            for name_node in node.names:\n                <IND>stmt = ast.ImportFrom(\n                    module=module_name,\n                    names=[name_node],\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>if isinstance(node, ast.ImportFrom):\n            <IND>if not node.module or node.level:\n                <IND>continue\n            <DED>for name_node in node.names:\n                <IND>name = name_node.asname or name_node.name\n                result[name] = ast.ImportFrom(\n                    module=node.module,\n                    names=[name_node],\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "                )\n                name = name_node.asname or name_node.name\n                result[name] = stmt\n            continue\n\n        if isinstance(node, ast.Expr):\n            node = node.value\n        if isinstance(node, ast.Assign):\n",
        "source_code_len": 244,
        "target_code": "                )\n            continue\n\n        if isinstance(node, ast.Assign):\n",
        "target_code_len": 81,
        "diff_format": "@@ -42,8 +44,4 @@\n                 )\n-                name = name_node.asname or name_node.name\n-                result[name] = stmt\n             continue\n \n-        if isinstance(node, ast.Expr):\n-            node = node.value\n         if isinstance(node, ast.Assign):\n",
        "source_code_with_indent": "                )\n                name = name_node.asname or name_node.name\n                result[name] = stmt\n            <DED>continue\n\n        <DED>if isinstance(node, ast.Expr):\n            <IND>node = node.value\n        <DED>if isinstance(node, ast.Assign):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                )\n            <DED>continue\n\n        <DED>if isinstance(node, ast.Assign):\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _extract_defs_astroid(tree: astroid.Module) -> Dict[str, ast.AST]:\n    result: Dict[str, ast.AST] = dict()\n    for node in tree.body:\n",
        "source_code_len": 139,
        "target_code": "\ndef _extract_defs_astroid(tree: astroid.Module) -> DefsType:\n    result: DefsType = dict()\n    for node in tree.body:\n",
        "target_code_len": 119,
        "diff_format": "@@ -56,4 +54,4 @@\n \n-def _extract_defs_astroid(tree: astroid.Module) -> Dict[str, ast.AST]:\n-    result: Dict[str, ast.AST] = dict()\n+def _extract_defs_astroid(tree: astroid.Module) -> DefsType:\n+    result: DefsType = dict()\n     for node in tree.body:\n",
        "source_code_with_indent": "\n<DED>def _extract_defs_astroid(tree: astroid.Module) -> Dict[str, ast.AST]:\n    <IND>result: Dict[str, ast.AST] = dict()\n    for node in tree.body:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def _extract_defs_astroid(tree: astroid.Module) -> DefsType:\n    <IND>result: DefsType = dict()\n    for node in tree.body:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "life4/deal",
    "commit": "a789964511df2f33696d77f720270cdd63aa5457",
    "filename": "tests/test_linter/test_contract.py",
    "min_patch_found": false,
    "full_warning_msg": "tests/test_linter/test_contract.py:169:19 Incompatible parameter type [6]: Expected `typing.Sized` for 1st positional only parameter to call `len` but got `typing.Iterable[Contract]`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "life4/deal",
    "commit": "a789964511df2f33696d77f720270cdd63aa5457",
    "filename": "tests/test_linter/test_contract.py",
    "min_patch_found": false,
    "full_warning_msg": "tests/test_linter/test_contract.py:201:19 Incompatible parameter type [6]: Expected `typing.Sized` for 1st positional only parameter to call `len` but got `typing.Iterable[Contract]`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "life4/deal",
    "commit": "a789964511df2f33696d77f720270cdd63aa5457",
    "filename": "tests/test_linter/test_extractors/test_definitions.py",
    "min_patch_found": false,
    "full_warning_msg": "tests/test_linter/test_extractors/test_definitions.py:31:25 Incompatible parameter type [6]: Expected `_ast.stmt` for 2nd positional only parameter to call `list.__setitem__` but got `_ast.AST`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "life4/deal",
    "commit": "a789964511df2f33696d77f720270cdd63aa5457",
    "filename": "tests/test_linter/test_extractors/test_definitions.py",
    "min_patch_found": false,
    "full_warning_msg": "tests/test_linter/test_extractors/test_definitions.py:42:25 Incompatible parameter type [6]: Expected `_ast.stmt` for 2nd positional only parameter to call `list.__setitem__` but got `_ast.AST`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  }
]