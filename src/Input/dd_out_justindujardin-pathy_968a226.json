[
  {
    "project": "justindujardin/pathy",
    "commit": "968a226507498bd319dd64f61c25a6dd4df627f6",
    "filename": "pathy/file.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/justindujardin-pathy/pathy/file.py",
    "file_hunks_size": 13,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pathy/file.py:67:4 Inconsistent override [14]: `pathy.file.BucketFS.copy_blob` overrides method defined in `Bucket` inconsistently. Parameter of type `BlobFS` is not a supertype of the overridden parameter `Blob[Variable[pathy.base.BucketType (bound to Bucket)], Variable[pathy.base.BucketBlobType]]`.",
    "message": " `pathy.file.BucketFS.copy_blob` overrides method defined in `Bucket` inconsistently. Parameter of type `BlobFS` is not a supertype of the overridden parameter `Blob[Variable[pathy.base.BucketType (bound to Bucket)], Variable[pathy.base.BucketBlobType]]`.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 67,
    "warning_line": "    def copy_blob("
  },
  {
    "project": "justindujardin/pathy",
    "commit": "968a226507498bd319dd64f61c25a6dd4df627f6",
    "filename": "pathy/file.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/justindujardin-pathy/pathy/file.py",
    "file_hunks_size": 13,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pathy/file.py:78:4 Inconsistent override [14]: `pathy.file.BucketFS.delete_blob` overrides method defined in `Bucket` inconsistently. Parameter of type `BlobFS` is not a supertype of the overridden parameter `Blob[Variable[pathy.base.BucketType (bound to Bucket)], Variable[pathy.base.BucketBlobType]]`.",
    "message": " `pathy.file.BucketFS.delete_blob` overrides method defined in `Bucket` inconsistently. Parameter of type `BlobFS` is not a supertype of the overridden parameter `Blob[Variable[pathy.base.BucketType (bound to Bucket)], Variable[pathy.base.BucketBlobType]]`.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 78,
    "warning_line": "    def delete_blob(self, blob: BlobFS) -> None:"
  },
  {
    "project": "justindujardin/pathy",
    "commit": "968a226507498bd319dd64f61c25a6dd4df627f6",
    "filename": "pathy/file.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/justindujardin-pathy/pathy/file.py",
    "file_hunks_size": 13,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pathy/file.py:81:4 Inconsistent override [14]: `pathy.file.BucketFS.delete_blobs` overrides method defined in `Bucket` inconsistently. Parameter of type `List[BlobFS]` is not a supertype of the overridden parameter `List[Blob[Variable[pathy.base.BucketType (bound to Bucket)], Variable[pathy.base.BucketBlobType]]]`.",
    "message": " `pathy.file.BucketFS.delete_blobs` overrides method defined in `Bucket` inconsistently. Parameter of type `List[BlobFS]` is not a supertype of the overridden parameter `List[Blob[Variable[pathy.base.BucketType (bound to Bucket)], Variable[pathy.base.BucketBlobType]]]`.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 81,
    "warning_line": "    def delete_blobs(self, blobs: List[BlobFS]) -> None:"
  },
  {
    "project": "justindujardin/pathy",
    "commit": "968a226507498bd319dd64f61c25a6dd4df627f6",
    "filename": "pathy/file.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/justindujardin-pathy/pathy/file.py",
    "file_hunks_size": 13,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pathy/file.py:132:12 Incompatible parameter type [6]: Expected `Variable[pathy.base.PathType (bound to pathy.base.Pathy)]` for 1st positional only parameter to call `BucketClient.open` but got `PurePathy`.",
    "message": " Expected `Variable[pathy.base.PathType (bound to pathy.base.Pathy)]` for 1st positional only parameter to call `BucketClient.open` but got `PurePathy`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 132,
    "warning_line": "            path,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    ClientError,\n    PurePathy,\n",
        "source_code_len": 32,
        "target_code": "    ClientError,\n    Pathy,\n    PurePathy,\n",
        "target_code_len": 43,
        "diff_format": "@@ -13,2 +13,3 @@\n     ClientError,\n+    Pathy,\n     PurePathy,\n",
        "source_code_with_indent": "    ClientError,\n    PurePathy,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    ClientError,\n    Pathy,\n    PurePathy,\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self,\n        path: PurePathy,\n        *,\n",
        "source_code_len": 50,
        "target_code": "        self,\n        path: Pathy,\n        *,\n",
        "target_code_len": 46,
        "diff_format": "@@ -114,3 +116,3 @@\n         self,\n-        path: PurePathy,\n+        path: Pathy,\n         *,\n",
        "source_code_with_indent": "        self,\n        path: PurePathy,\n        *,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self,\n        path: Pathy,\n        *,\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            raise ValueError(f\"cannot make a URI to an invalid bucket: {path.root}\")\n        result = f\"file://{self.root.absolute() / path.root / path.key}\"\n        return result\n",
        "source_code_len": 180,
        "target_code": "            raise ValueError(f\"cannot make a URI to an invalid bucket: {path.root}\")\n        full_path = self.root.absolute() / path.root\n        if path.key is not None:\n            full_path /= path.key\n        result = f\"file://{full_path}\"\n        return result\n",
        "target_code_len": 266,
        "diff_format": "@@ -142,3 +144,6 @@\n             raise ValueError(f\"cannot make a URI to an invalid bucket: {path.root}\")\n-        result = f\"file://{self.root.absolute() / path.root / path.key}\"\n+        full_path = self.root.absolute() / path.root\n+        if path.key is not None:\n+            full_path /= path.key\n+        result = f\"file://{full_path}\"\n         return result\n",
        "source_code_with_indent": "            <IND>raise ValueError(f\"cannot make a URI to an invalid bucket: {path.root}\")\n        <DED>result = f\"file://{self.root.absolute() / path.root / path.key}\"\n        return result\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <IND>raise ValueError(f\"cannot make a URI to an invalid bucket: {path.root}\")\n        <DED>full_path = self.root.absolute() / path.root\n        if path.key is not None:\n            <IND>full_path /= path.key\n        <DED>result = f\"file://{full_path}\"\n        return result\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "justindujardin/pathy",
    "commit": "968a226507498bd319dd64f61c25a6dd4df627f6",
    "filename": "pathy/file.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/justindujardin-pathy/pathy/file.py",
    "file_hunks_size": 13,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pathy/file.py:143:62 Unsupported operand [58]: `/` is not supported for operand types `pathlib.Path` and `Optional[pathy.base.Pathy]`.",
    "message": " `/` is not supported for operand types `pathlib.Path` and `Optional[pathy.base.Pathy]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 143,
    "warning_line": "        result = f\"file://{self.root.absolute() / path.root / path.key}\"",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            raise ValueError(f\"cannot make a URI to an invalid bucket: {path.root}\")\n        result = f\"file://{self.root.absolute() / path.root / path.key}\"\n        return result\n",
        "source_code_len": 180,
        "target_code": "            raise ValueError(f\"cannot make a URI to an invalid bucket: {path.root}\")\n        full_path = self.root.absolute() / path.root\n        if path.key is not None:\n            full_path /= path.key\n        result = f\"file://{full_path}\"\n        return result\n",
        "target_code_len": 266,
        "diff_format": "@@ -142,3 +144,6 @@\n             raise ValueError(f\"cannot make a URI to an invalid bucket: {path.root}\")\n-        result = f\"file://{self.root.absolute() / path.root / path.key}\"\n+        full_path = self.root.absolute() / path.root\n+        if path.key is not None:\n+            full_path /= path.key\n+        result = f\"file://{full_path}\"\n         return result\n",
        "source_code_with_indent": "            <IND>raise ValueError(f\"cannot make a URI to an invalid bucket: {path.root}\")\n        <DED>result = f\"file://{self.root.absolute() / path.root / path.key}\"\n        return result\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <IND>raise ValueError(f\"cannot make a URI to an invalid bucket: {path.root}\")\n        <DED>full_path = self.root.absolute() / path.root\n        if path.key is not None:\n            <IND>full_path /= path.key\n        <DED>result = f\"file://{full_path}\"\n        return result\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]