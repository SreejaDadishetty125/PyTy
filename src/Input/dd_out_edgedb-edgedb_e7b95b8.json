[
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/edgeql/compiler/cast.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/cast.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/cast.py:61:8 Incompatible return type [7]: Expected `irast.OperatorCall` but got `irast.Set`.",
    "message": " Expected `irast.OperatorCall` but got `irast.Set`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 61,
    "warning_line": "        return setgen.new_empty_set(",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ir_expr: irast.Base, new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> irast.OperatorCall:\n\n",
        "source_code_len": 155,
        "target_code": "        ir_expr: irast.Base, new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> irast.Set:\n\n",
        "target_code_len": 163,
        "diff_format": "@@ -54,4 +54,4 @@\n         ir_expr: irast.Base, new_stype: s_types.Type, *,\n-        srcctx: parsing.ParserContext,\n-        ctx: context.ContextLevel) -> irast.OperatorCall:\n+        srcctx: typing.Optional[parsing.ParserContext],\n+        ctx: context.ContextLevel) -> irast.Set:\n \n",
        "source_code_with_indent": "        ir_expr: irast.Base, new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> irast.OperatorCall:\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ir_expr: irast.Base, new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> irast.Set:\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> irast.Set:\n",
        "source_code_len": 124,
        "target_code": "        new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> irast.Set:\n",
        "target_code_len": 141,
        "diff_format": "@@ -133,3 +133,3 @@\n         new_stype: s_types.Type, *,\n-        srcctx: parsing.ParserContext,\n+        srcctx: typing.Optional[parsing.ParserContext],\n         ctx: context.ContextLevel) -> irast.Set:\n",
        "source_code_with_indent": "        new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> irast.Set:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> irast.Set:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> typing.Optional[s_casts.Cast]:\n",
        "source_code_len": 144,
        "target_code": "        new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> typing.Optional[s_casts.Cast]:\n",
        "target_code_len": 161,
        "diff_format": "@@ -242,3 +242,3 @@\n         new_stype: s_types.Type, *,\n-        srcctx: parsing.ParserContext,\n+        srcctx: typing.Optional[parsing.ParserContext],\n         ctx: context.ContextLevel) -> typing.Optional[s_casts.Cast]:\n",
        "source_code_with_indent": "        new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> typing.Optional[s_casts.Cast]:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> typing.Optional[s_casts.Cast]:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def _cast_tuple(\n        ir_set: irast.Base,\n        orig_stype: s_types.Type,\n        new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> irast.Base:\n\n",
        "source_code_len": 205,
        "target_code": "def _cast_tuple(\n        ir_set: irast.Set,\n        orig_stype: s_types.Type,\n        new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> irast.Set:\n\n    assert isinstance(orig_stype, s_types.Tuple)\n\n",
        "target_code_len": 270,
        "diff_format": "@@ -276,7 +276,9 @@\n def _cast_tuple(\n-        ir_set: irast.Base,\n-        orig_stype: s_types.Type,\n-        new_stype: s_types.Type, *,\n-        srcctx: parsing.ParserContext,\n-        ctx: context.ContextLevel) -> irast.Base:\n+        ir_set: irast.Set,\n+        orig_stype: s_types.Type,\n+        new_stype: s_types.Type, *,\n+        srcctx: typing.Optional[parsing.ParserContext],\n+        ctx: context.ContextLevel) -> irast.Set:\n+\n+    assert isinstance(orig_stype, s_types.Tuple)\n \n",
        "source_code_with_indent": "<DED><DED>def _cast_tuple(\n        ir_set: irast.Base,\n        orig_stype: s_types.Type,\n        new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> irast.Base:\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED><DED>def _cast_tuple(\n        ir_set: irast.Set,\n        orig_stype: s_types.Type,\n        new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> irast.Set:\n\n    <IND>assert isinstance(orig_stype, s_types.Tuple)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> irast.Base:\n\n",
        "source_code_len": 126,
        "target_code": "        new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> irast.Set:\n\n    assert isinstance(orig_stype, s_types.Array)\n\n",
        "target_code_len": 192,
        "diff_format": "@@ -364,4 +367,6 @@\n         new_stype: s_types.Type, *,\n-        srcctx: parsing.ParserContext,\n-        ctx: context.ContextLevel) -> irast.Base:\n+        srcctx: typing.Optional[parsing.ParserContext],\n+        ctx: context.ContextLevel) -> irast.Set:\n+\n+    assert isinstance(orig_stype, s_types.Array)\n \n",
        "source_code_with_indent": "        new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> irast.Base:\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> irast.Set:\n\n    <IND>assert isinstance(orig_stype, s_types.Array)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            array_ir = dispatch.compile(elements, ctx=subctx)\n\n",
        "source_code_len": 63,
        "target_code": "            array_ir = dispatch.compile(elements, ctx=subctx)\n            assert isinstance(array_ir, irast.Set)\n\n",
        "target_code_len": 114,
        "diff_format": "@@ -415,2 +421,3 @@\n             array_ir = dispatch.compile(elements, ctx=subctx)\n+            assert isinstance(array_ir, irast.Set)\n \n",
        "source_code_with_indent": "            array_ir = dispatch.compile(elements, ctx=subctx)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            array_ir = dispatch.compile(elements, ctx=subctx)\n            assert isinstance(array_ir, irast.Set)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> irast.Base:\n\n",
        "source_code_len": 126,
        "target_code": "        new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> irast.Set:\n\n    assert isinstance(ir_set.expr, irast.Array)\n\n",
        "target_code_len": 191,
        "diff_format": "@@ -430,4 +437,6 @@\n         new_stype: s_types.Type, *,\n-        srcctx: parsing.ParserContext,\n-        ctx: context.ContextLevel) -> irast.Base:\n+        srcctx: typing.Optional[parsing.ParserContext],\n+        ctx: context.ContextLevel) -> irast.Set:\n+\n+    assert isinstance(ir_set.expr, irast.Array)\n \n",
        "source_code_with_indent": "        new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> irast.Base:\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> irast.Set:\n\n    <IND>assert isinstance(ir_set.expr, irast.Array)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/edgeql/compiler/cast.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/cast.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/cast.py:70:8 Incompatible return type [7]: Expected `irast.OperatorCall` but got `irast.Set`.",
    "message": " Expected `irast.OperatorCall` but got `irast.Set`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 70,
    "warning_line": "        return setgen.ensure_set(",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ir_expr: irast.Base, new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> irast.OperatorCall:\n\n",
        "source_code_len": 155,
        "target_code": "        ir_expr: irast.Base, new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> irast.Set:\n\n",
        "target_code_len": 163,
        "diff_format": "@@ -54,4 +54,4 @@\n         ir_expr: irast.Base, new_stype: s_types.Type, *,\n-        srcctx: parsing.ParserContext,\n-        ctx: context.ContextLevel) -> irast.OperatorCall:\n+        srcctx: typing.Optional[parsing.ParserContext],\n+        ctx: context.ContextLevel) -> irast.Set:\n \n",
        "source_code_with_indent": "        ir_expr: irast.Base, new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> irast.OperatorCall:\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ir_expr: irast.Base, new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> irast.Set:\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> irast.Set:\n",
        "source_code_len": 124,
        "target_code": "        new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> irast.Set:\n",
        "target_code_len": 141,
        "diff_format": "@@ -133,3 +133,3 @@\n         new_stype: s_types.Type, *,\n-        srcctx: parsing.ParserContext,\n+        srcctx: typing.Optional[parsing.ParserContext],\n         ctx: context.ContextLevel) -> irast.Set:\n",
        "source_code_with_indent": "        new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> irast.Set:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> irast.Set:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> typing.Optional[s_casts.Cast]:\n",
        "source_code_len": 144,
        "target_code": "        new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> typing.Optional[s_casts.Cast]:\n",
        "target_code_len": 161,
        "diff_format": "@@ -242,3 +242,3 @@\n         new_stype: s_types.Type, *,\n-        srcctx: parsing.ParserContext,\n+        srcctx: typing.Optional[parsing.ParserContext],\n         ctx: context.ContextLevel) -> typing.Optional[s_casts.Cast]:\n",
        "source_code_with_indent": "        new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> typing.Optional[s_casts.Cast]:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> typing.Optional[s_casts.Cast]:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def _cast_tuple(\n        ir_set: irast.Base,\n        orig_stype: s_types.Type,\n        new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> irast.Base:\n\n",
        "source_code_len": 205,
        "target_code": "def _cast_tuple(\n        ir_set: irast.Set,\n        orig_stype: s_types.Type,\n        new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> irast.Set:\n\n    assert isinstance(orig_stype, s_types.Tuple)\n\n",
        "target_code_len": 270,
        "diff_format": "@@ -276,7 +276,9 @@\n def _cast_tuple(\n-        ir_set: irast.Base,\n-        orig_stype: s_types.Type,\n-        new_stype: s_types.Type, *,\n-        srcctx: parsing.ParserContext,\n-        ctx: context.ContextLevel) -> irast.Base:\n+        ir_set: irast.Set,\n+        orig_stype: s_types.Type,\n+        new_stype: s_types.Type, *,\n+        srcctx: typing.Optional[parsing.ParserContext],\n+        ctx: context.ContextLevel) -> irast.Set:\n+\n+    assert isinstance(orig_stype, s_types.Tuple)\n \n",
        "source_code_with_indent": "<DED><DED>def _cast_tuple(\n        ir_set: irast.Base,\n        orig_stype: s_types.Type,\n        new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> irast.Base:\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED><DED>def _cast_tuple(\n        ir_set: irast.Set,\n        orig_stype: s_types.Type,\n        new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> irast.Set:\n\n    <IND>assert isinstance(orig_stype, s_types.Tuple)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> irast.Base:\n\n",
        "source_code_len": 126,
        "target_code": "        new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> irast.Set:\n\n    assert isinstance(orig_stype, s_types.Array)\n\n",
        "target_code_len": 192,
        "diff_format": "@@ -364,4 +367,6 @@\n         new_stype: s_types.Type, *,\n-        srcctx: parsing.ParserContext,\n-        ctx: context.ContextLevel) -> irast.Base:\n+        srcctx: typing.Optional[parsing.ParserContext],\n+        ctx: context.ContextLevel) -> irast.Set:\n+\n+    assert isinstance(orig_stype, s_types.Array)\n \n",
        "source_code_with_indent": "        new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> irast.Base:\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> irast.Set:\n\n    <IND>assert isinstance(orig_stype, s_types.Array)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            array_ir = dispatch.compile(elements, ctx=subctx)\n\n",
        "source_code_len": 63,
        "target_code": "            array_ir = dispatch.compile(elements, ctx=subctx)\n            assert isinstance(array_ir, irast.Set)\n\n",
        "target_code_len": 114,
        "diff_format": "@@ -415,2 +421,3 @@\n             array_ir = dispatch.compile(elements, ctx=subctx)\n+            assert isinstance(array_ir, irast.Set)\n \n",
        "source_code_with_indent": "            array_ir = dispatch.compile(elements, ctx=subctx)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            array_ir = dispatch.compile(elements, ctx=subctx)\n            assert isinstance(array_ir, irast.Set)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> irast.Base:\n\n",
        "source_code_len": 126,
        "target_code": "        new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> irast.Set:\n\n    assert isinstance(ir_set.expr, irast.Array)\n\n",
        "target_code_len": 191,
        "diff_format": "@@ -430,4 +437,6 @@\n         new_stype: s_types.Type, *,\n-        srcctx: parsing.ParserContext,\n-        ctx: context.ContextLevel) -> irast.Base:\n+        srcctx: typing.Optional[parsing.ParserContext],\n+        ctx: context.ContextLevel) -> irast.Set:\n+\n+    assert isinstance(ir_set.expr, irast.Array)\n \n",
        "source_code_with_indent": "        new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> irast.Base:\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> irast.Set:\n\n    <IND>assert isinstance(ir_set.expr, irast.Array)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/edgeql/compiler/cast.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/cast.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/cast.py:77:8 Incompatible return type [7]: Expected `irast.OperatorCall` but got `irast.Set`.",
    "message": " Expected `irast.OperatorCall` but got `irast.Set`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 77,
    "warning_line": "        return ir_set",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ir_expr: irast.Base, new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> irast.OperatorCall:\n\n",
        "source_code_len": 155,
        "target_code": "        ir_expr: irast.Base, new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> irast.Set:\n\n",
        "target_code_len": 163,
        "diff_format": "@@ -54,4 +54,4 @@\n         ir_expr: irast.Base, new_stype: s_types.Type, *,\n-        srcctx: parsing.ParserContext,\n-        ctx: context.ContextLevel) -> irast.OperatorCall:\n+        srcctx: typing.Optional[parsing.ParserContext],\n+        ctx: context.ContextLevel) -> irast.Set:\n \n",
        "source_code_with_indent": "        ir_expr: irast.Base, new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> irast.OperatorCall:\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ir_expr: irast.Base, new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> irast.Set:\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> irast.Set:\n",
        "source_code_len": 124,
        "target_code": "        new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> irast.Set:\n",
        "target_code_len": 141,
        "diff_format": "@@ -133,3 +133,3 @@\n         new_stype: s_types.Type, *,\n-        srcctx: parsing.ParserContext,\n+        srcctx: typing.Optional[parsing.ParserContext],\n         ctx: context.ContextLevel) -> irast.Set:\n",
        "source_code_with_indent": "        new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> irast.Set:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> irast.Set:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> typing.Optional[s_casts.Cast]:\n",
        "source_code_len": 144,
        "target_code": "        new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> typing.Optional[s_casts.Cast]:\n",
        "target_code_len": 161,
        "diff_format": "@@ -242,3 +242,3 @@\n         new_stype: s_types.Type, *,\n-        srcctx: parsing.ParserContext,\n+        srcctx: typing.Optional[parsing.ParserContext],\n         ctx: context.ContextLevel) -> typing.Optional[s_casts.Cast]:\n",
        "source_code_with_indent": "        new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> typing.Optional[s_casts.Cast]:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> typing.Optional[s_casts.Cast]:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def _cast_tuple(\n        ir_set: irast.Base,\n        orig_stype: s_types.Type,\n        new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> irast.Base:\n\n",
        "source_code_len": 205,
        "target_code": "def _cast_tuple(\n        ir_set: irast.Set,\n        orig_stype: s_types.Type,\n        new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> irast.Set:\n\n    assert isinstance(orig_stype, s_types.Tuple)\n\n",
        "target_code_len": 270,
        "diff_format": "@@ -276,7 +276,9 @@\n def _cast_tuple(\n-        ir_set: irast.Base,\n-        orig_stype: s_types.Type,\n-        new_stype: s_types.Type, *,\n-        srcctx: parsing.ParserContext,\n-        ctx: context.ContextLevel) -> irast.Base:\n+        ir_set: irast.Set,\n+        orig_stype: s_types.Type,\n+        new_stype: s_types.Type, *,\n+        srcctx: typing.Optional[parsing.ParserContext],\n+        ctx: context.ContextLevel) -> irast.Set:\n+\n+    assert isinstance(orig_stype, s_types.Tuple)\n \n",
        "source_code_with_indent": "<DED><DED>def _cast_tuple(\n        ir_set: irast.Base,\n        orig_stype: s_types.Type,\n        new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> irast.Base:\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED><DED>def _cast_tuple(\n        ir_set: irast.Set,\n        orig_stype: s_types.Type,\n        new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> irast.Set:\n\n    <IND>assert isinstance(orig_stype, s_types.Tuple)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> irast.Base:\n\n",
        "source_code_len": 126,
        "target_code": "        new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> irast.Set:\n\n    assert isinstance(orig_stype, s_types.Array)\n\n",
        "target_code_len": 192,
        "diff_format": "@@ -364,4 +367,6 @@\n         new_stype: s_types.Type, *,\n-        srcctx: parsing.ParserContext,\n-        ctx: context.ContextLevel) -> irast.Base:\n+        srcctx: typing.Optional[parsing.ParserContext],\n+        ctx: context.ContextLevel) -> irast.Set:\n+\n+    assert isinstance(orig_stype, s_types.Array)\n \n",
        "source_code_with_indent": "        new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> irast.Base:\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> irast.Set:\n\n    <IND>assert isinstance(orig_stype, s_types.Array)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            array_ir = dispatch.compile(elements, ctx=subctx)\n\n",
        "source_code_len": 63,
        "target_code": "            array_ir = dispatch.compile(elements, ctx=subctx)\n            assert isinstance(array_ir, irast.Set)\n\n",
        "target_code_len": 114,
        "diff_format": "@@ -415,2 +421,3 @@\n             array_ir = dispatch.compile(elements, ctx=subctx)\n+            assert isinstance(array_ir, irast.Set)\n \n",
        "source_code_with_indent": "            array_ir = dispatch.compile(elements, ctx=subctx)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            array_ir = dispatch.compile(elements, ctx=subctx)\n            assert isinstance(array_ir, irast.Set)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> irast.Base:\n\n",
        "source_code_len": 126,
        "target_code": "        new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> irast.Set:\n\n    assert isinstance(ir_set.expr, irast.Array)\n\n",
        "target_code_len": 191,
        "diff_format": "@@ -430,4 +437,6 @@\n         new_stype: s_types.Type, *,\n-        srcctx: parsing.ParserContext,\n-        ctx: context.ContextLevel) -> irast.Base:\n+        srcctx: typing.Optional[parsing.ParserContext],\n+        ctx: context.ContextLevel) -> irast.Set:\n+\n+    assert isinstance(ir_set.expr, irast.Array)\n \n",
        "source_code_with_indent": "        new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> irast.Base:\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> irast.Set:\n\n    <IND>assert isinstance(ir_set.expr, irast.Array)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/edgeql/compiler/cast.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/cast.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/cast.py:90:8 Incompatible return type [7]: Expected `irast.OperatorCall` but got `irast.Base`.",
    "message": " Expected `irast.OperatorCall` but got `irast.Base`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 90,
    "warning_line": "        return _cast_array_literal(",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ir_expr: irast.Base, new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> irast.OperatorCall:\n\n",
        "source_code_len": 155,
        "target_code": "        ir_expr: irast.Base, new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> irast.Set:\n\n",
        "target_code_len": 163,
        "diff_format": "@@ -54,4 +54,4 @@\n         ir_expr: irast.Base, new_stype: s_types.Type, *,\n-        srcctx: parsing.ParserContext,\n-        ctx: context.ContextLevel) -> irast.OperatorCall:\n+        srcctx: typing.Optional[parsing.ParserContext],\n+        ctx: context.ContextLevel) -> irast.Set:\n \n",
        "source_code_with_indent": "        ir_expr: irast.Base, new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> irast.OperatorCall:\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ir_expr: irast.Base, new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> irast.Set:\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> irast.Set:\n",
        "source_code_len": 124,
        "target_code": "        new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> irast.Set:\n",
        "target_code_len": 141,
        "diff_format": "@@ -133,3 +133,3 @@\n         new_stype: s_types.Type, *,\n-        srcctx: parsing.ParserContext,\n+        srcctx: typing.Optional[parsing.ParserContext],\n         ctx: context.ContextLevel) -> irast.Set:\n",
        "source_code_with_indent": "        new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> irast.Set:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> irast.Set:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> typing.Optional[s_casts.Cast]:\n",
        "source_code_len": 144,
        "target_code": "        new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> typing.Optional[s_casts.Cast]:\n",
        "target_code_len": 161,
        "diff_format": "@@ -242,3 +242,3 @@\n         new_stype: s_types.Type, *,\n-        srcctx: parsing.ParserContext,\n+        srcctx: typing.Optional[parsing.ParserContext],\n         ctx: context.ContextLevel) -> typing.Optional[s_casts.Cast]:\n",
        "source_code_with_indent": "        new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> typing.Optional[s_casts.Cast]:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> typing.Optional[s_casts.Cast]:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def _cast_tuple(\n        ir_set: irast.Base,\n        orig_stype: s_types.Type,\n        new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> irast.Base:\n\n",
        "source_code_len": 205,
        "target_code": "def _cast_tuple(\n        ir_set: irast.Set,\n        orig_stype: s_types.Type,\n        new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> irast.Set:\n\n    assert isinstance(orig_stype, s_types.Tuple)\n\n",
        "target_code_len": 270,
        "diff_format": "@@ -276,7 +276,9 @@\n def _cast_tuple(\n-        ir_set: irast.Base,\n-        orig_stype: s_types.Type,\n-        new_stype: s_types.Type, *,\n-        srcctx: parsing.ParserContext,\n-        ctx: context.ContextLevel) -> irast.Base:\n+        ir_set: irast.Set,\n+        orig_stype: s_types.Type,\n+        new_stype: s_types.Type, *,\n+        srcctx: typing.Optional[parsing.ParserContext],\n+        ctx: context.ContextLevel) -> irast.Set:\n+\n+    assert isinstance(orig_stype, s_types.Tuple)\n \n",
        "source_code_with_indent": "<DED><DED>def _cast_tuple(\n        ir_set: irast.Base,\n        orig_stype: s_types.Type,\n        new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> irast.Base:\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED><DED>def _cast_tuple(\n        ir_set: irast.Set,\n        orig_stype: s_types.Type,\n        new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> irast.Set:\n\n    <IND>assert isinstance(orig_stype, s_types.Tuple)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> irast.Base:\n\n",
        "source_code_len": 126,
        "target_code": "        new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> irast.Set:\n\n    assert isinstance(orig_stype, s_types.Array)\n\n",
        "target_code_len": 192,
        "diff_format": "@@ -364,4 +367,6 @@\n         new_stype: s_types.Type, *,\n-        srcctx: parsing.ParserContext,\n-        ctx: context.ContextLevel) -> irast.Base:\n+        srcctx: typing.Optional[parsing.ParserContext],\n+        ctx: context.ContextLevel) -> irast.Set:\n+\n+    assert isinstance(orig_stype, s_types.Array)\n \n",
        "source_code_with_indent": "        new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> irast.Base:\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> irast.Set:\n\n    <IND>assert isinstance(orig_stype, s_types.Array)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            array_ir = dispatch.compile(elements, ctx=subctx)\n\n",
        "source_code_len": 63,
        "target_code": "            array_ir = dispatch.compile(elements, ctx=subctx)\n            assert isinstance(array_ir, irast.Set)\n\n",
        "target_code_len": 114,
        "diff_format": "@@ -415,2 +421,3 @@\n             array_ir = dispatch.compile(elements, ctx=subctx)\n+            assert isinstance(array_ir, irast.Set)\n \n",
        "source_code_with_indent": "            array_ir = dispatch.compile(elements, ctx=subctx)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            array_ir = dispatch.compile(elements, ctx=subctx)\n            assert isinstance(array_ir, irast.Set)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> irast.Base:\n\n",
        "source_code_len": 126,
        "target_code": "        new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> irast.Set:\n\n    assert isinstance(ir_set.expr, irast.Array)\n\n",
        "target_code_len": 191,
        "diff_format": "@@ -430,4 +437,6 @@\n         new_stype: s_types.Type, *,\n-        srcctx: parsing.ParserContext,\n-        ctx: context.ContextLevel) -> irast.Base:\n+        srcctx: typing.Optional[parsing.ParserContext],\n+        ctx: context.ContextLevel) -> irast.Set:\n+\n+    assert isinstance(ir_set.expr, irast.Array)\n \n",
        "source_code_with_indent": "        new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> irast.Base:\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> irast.Set:\n\n    <IND>assert isinstance(ir_set.expr, irast.Array)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/edgeql/compiler/cast.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/cast.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/cast.py:94:8 Incompatible return type [7]: Expected `irast.OperatorCall` but got `irast.Base`.",
    "message": " Expected `irast.OperatorCall` but got `irast.Base`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 94,
    "warning_line": "        return _cast_tuple(",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ir_expr: irast.Base, new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> irast.OperatorCall:\n\n",
        "source_code_len": 155,
        "target_code": "        ir_expr: irast.Base, new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> irast.Set:\n\n",
        "target_code_len": 163,
        "diff_format": "@@ -54,4 +54,4 @@\n         ir_expr: irast.Base, new_stype: s_types.Type, *,\n-        srcctx: parsing.ParserContext,\n-        ctx: context.ContextLevel) -> irast.OperatorCall:\n+        srcctx: typing.Optional[parsing.ParserContext],\n+        ctx: context.ContextLevel) -> irast.Set:\n \n",
        "source_code_with_indent": "        ir_expr: irast.Base, new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> irast.OperatorCall:\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ir_expr: irast.Base, new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> irast.Set:\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> irast.Set:\n",
        "source_code_len": 124,
        "target_code": "        new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> irast.Set:\n",
        "target_code_len": 141,
        "diff_format": "@@ -133,3 +133,3 @@\n         new_stype: s_types.Type, *,\n-        srcctx: parsing.ParserContext,\n+        srcctx: typing.Optional[parsing.ParserContext],\n         ctx: context.ContextLevel) -> irast.Set:\n",
        "source_code_with_indent": "        new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> irast.Set:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> irast.Set:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> typing.Optional[s_casts.Cast]:\n",
        "source_code_len": 144,
        "target_code": "        new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> typing.Optional[s_casts.Cast]:\n",
        "target_code_len": 161,
        "diff_format": "@@ -242,3 +242,3 @@\n         new_stype: s_types.Type, *,\n-        srcctx: parsing.ParserContext,\n+        srcctx: typing.Optional[parsing.ParserContext],\n         ctx: context.ContextLevel) -> typing.Optional[s_casts.Cast]:\n",
        "source_code_with_indent": "        new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> typing.Optional[s_casts.Cast]:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> typing.Optional[s_casts.Cast]:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def _cast_tuple(\n        ir_set: irast.Base,\n        orig_stype: s_types.Type,\n        new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> irast.Base:\n\n",
        "source_code_len": 205,
        "target_code": "def _cast_tuple(\n        ir_set: irast.Set,\n        orig_stype: s_types.Type,\n        new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> irast.Set:\n\n    assert isinstance(orig_stype, s_types.Tuple)\n\n",
        "target_code_len": 270,
        "diff_format": "@@ -276,7 +276,9 @@\n def _cast_tuple(\n-        ir_set: irast.Base,\n-        orig_stype: s_types.Type,\n-        new_stype: s_types.Type, *,\n-        srcctx: parsing.ParserContext,\n-        ctx: context.ContextLevel) -> irast.Base:\n+        ir_set: irast.Set,\n+        orig_stype: s_types.Type,\n+        new_stype: s_types.Type, *,\n+        srcctx: typing.Optional[parsing.ParserContext],\n+        ctx: context.ContextLevel) -> irast.Set:\n+\n+    assert isinstance(orig_stype, s_types.Tuple)\n \n",
        "source_code_with_indent": "<DED><DED>def _cast_tuple(\n        ir_set: irast.Base,\n        orig_stype: s_types.Type,\n        new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> irast.Base:\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED><DED>def _cast_tuple(\n        ir_set: irast.Set,\n        orig_stype: s_types.Type,\n        new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> irast.Set:\n\n    <IND>assert isinstance(orig_stype, s_types.Tuple)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> irast.Base:\n\n",
        "source_code_len": 126,
        "target_code": "        new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> irast.Set:\n\n    assert isinstance(orig_stype, s_types.Array)\n\n",
        "target_code_len": 192,
        "diff_format": "@@ -364,4 +367,6 @@\n         new_stype: s_types.Type, *,\n-        srcctx: parsing.ParserContext,\n-        ctx: context.ContextLevel) -> irast.Base:\n+        srcctx: typing.Optional[parsing.ParserContext],\n+        ctx: context.ContextLevel) -> irast.Set:\n+\n+    assert isinstance(orig_stype, s_types.Array)\n \n",
        "source_code_with_indent": "        new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> irast.Base:\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> irast.Set:\n\n    <IND>assert isinstance(orig_stype, s_types.Array)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            array_ir = dispatch.compile(elements, ctx=subctx)\n\n",
        "source_code_len": 63,
        "target_code": "            array_ir = dispatch.compile(elements, ctx=subctx)\n            assert isinstance(array_ir, irast.Set)\n\n",
        "target_code_len": 114,
        "diff_format": "@@ -415,2 +421,3 @@\n             array_ir = dispatch.compile(elements, ctx=subctx)\n+            assert isinstance(array_ir, irast.Set)\n \n",
        "source_code_with_indent": "            array_ir = dispatch.compile(elements, ctx=subctx)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            array_ir = dispatch.compile(elements, ctx=subctx)\n            assert isinstance(array_ir, irast.Set)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> irast.Base:\n\n",
        "source_code_len": 126,
        "target_code": "        new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> irast.Set:\n\n    assert isinstance(ir_set.expr, irast.Array)\n\n",
        "target_code_len": 191,
        "diff_format": "@@ -430,4 +437,6 @@\n         new_stype: s_types.Type, *,\n-        srcctx: parsing.ParserContext,\n-        ctx: context.ContextLevel) -> irast.Base:\n+        srcctx: typing.Optional[parsing.ParserContext],\n+        ctx: context.ContextLevel) -> irast.Set:\n+\n+    assert isinstance(ir_set.expr, irast.Array)\n \n",
        "source_code_with_indent": "        new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> irast.Base:\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> irast.Set:\n\n    <IND>assert isinstance(ir_set.expr, irast.Array)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/edgeql/compiler/cast.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/cast.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/cast.py:101:8 Incompatible return type [7]: Expected `irast.OperatorCall` but got `irast.Set`.",
    "message": " Expected `irast.OperatorCall` but got `irast.Set`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 101,
    "warning_line": "        return _inheritance_cast_to_ir(",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ir_expr: irast.Base, new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> irast.OperatorCall:\n\n",
        "source_code_len": 155,
        "target_code": "        ir_expr: irast.Base, new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> irast.Set:\n\n",
        "target_code_len": 163,
        "diff_format": "@@ -54,4 +54,4 @@\n         ir_expr: irast.Base, new_stype: s_types.Type, *,\n-        srcctx: parsing.ParserContext,\n-        ctx: context.ContextLevel) -> irast.OperatorCall:\n+        srcctx: typing.Optional[parsing.ParserContext],\n+        ctx: context.ContextLevel) -> irast.Set:\n \n",
        "source_code_with_indent": "        ir_expr: irast.Base, new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> irast.OperatorCall:\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ir_expr: irast.Base, new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> irast.Set:\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> irast.Set:\n",
        "source_code_len": 124,
        "target_code": "        new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> irast.Set:\n",
        "target_code_len": 141,
        "diff_format": "@@ -133,3 +133,3 @@\n         new_stype: s_types.Type, *,\n-        srcctx: parsing.ParserContext,\n+        srcctx: typing.Optional[parsing.ParserContext],\n         ctx: context.ContextLevel) -> irast.Set:\n",
        "source_code_with_indent": "        new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> irast.Set:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> irast.Set:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> typing.Optional[s_casts.Cast]:\n",
        "source_code_len": 144,
        "target_code": "        new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> typing.Optional[s_casts.Cast]:\n",
        "target_code_len": 161,
        "diff_format": "@@ -242,3 +242,3 @@\n         new_stype: s_types.Type, *,\n-        srcctx: parsing.ParserContext,\n+        srcctx: typing.Optional[parsing.ParserContext],\n         ctx: context.ContextLevel) -> typing.Optional[s_casts.Cast]:\n",
        "source_code_with_indent": "        new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> typing.Optional[s_casts.Cast]:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> typing.Optional[s_casts.Cast]:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def _cast_tuple(\n        ir_set: irast.Base,\n        orig_stype: s_types.Type,\n        new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> irast.Base:\n\n",
        "source_code_len": 205,
        "target_code": "def _cast_tuple(\n        ir_set: irast.Set,\n        orig_stype: s_types.Type,\n        new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> irast.Set:\n\n    assert isinstance(orig_stype, s_types.Tuple)\n\n",
        "target_code_len": 270,
        "diff_format": "@@ -276,7 +276,9 @@\n def _cast_tuple(\n-        ir_set: irast.Base,\n-        orig_stype: s_types.Type,\n-        new_stype: s_types.Type, *,\n-        srcctx: parsing.ParserContext,\n-        ctx: context.ContextLevel) -> irast.Base:\n+        ir_set: irast.Set,\n+        orig_stype: s_types.Type,\n+        new_stype: s_types.Type, *,\n+        srcctx: typing.Optional[parsing.ParserContext],\n+        ctx: context.ContextLevel) -> irast.Set:\n+\n+    assert isinstance(orig_stype, s_types.Tuple)\n \n",
        "source_code_with_indent": "<DED><DED>def _cast_tuple(\n        ir_set: irast.Base,\n        orig_stype: s_types.Type,\n        new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> irast.Base:\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED><DED>def _cast_tuple(\n        ir_set: irast.Set,\n        orig_stype: s_types.Type,\n        new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> irast.Set:\n\n    <IND>assert isinstance(orig_stype, s_types.Tuple)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> irast.Base:\n\n",
        "source_code_len": 126,
        "target_code": "        new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> irast.Set:\n\n    assert isinstance(orig_stype, s_types.Array)\n\n",
        "target_code_len": 192,
        "diff_format": "@@ -364,4 +367,6 @@\n         new_stype: s_types.Type, *,\n-        srcctx: parsing.ParserContext,\n-        ctx: context.ContextLevel) -> irast.Base:\n+        srcctx: typing.Optional[parsing.ParserContext],\n+        ctx: context.ContextLevel) -> irast.Set:\n+\n+    assert isinstance(orig_stype, s_types.Array)\n \n",
        "source_code_with_indent": "        new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> irast.Base:\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> irast.Set:\n\n    <IND>assert isinstance(orig_stype, s_types.Array)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            array_ir = dispatch.compile(elements, ctx=subctx)\n\n",
        "source_code_len": 63,
        "target_code": "            array_ir = dispatch.compile(elements, ctx=subctx)\n            assert isinstance(array_ir, irast.Set)\n\n",
        "target_code_len": 114,
        "diff_format": "@@ -415,2 +421,3 @@\n             array_ir = dispatch.compile(elements, ctx=subctx)\n+            assert isinstance(array_ir, irast.Set)\n \n",
        "source_code_with_indent": "            array_ir = dispatch.compile(elements, ctx=subctx)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            array_ir = dispatch.compile(elements, ctx=subctx)\n            assert isinstance(array_ir, irast.Set)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> irast.Base:\n\n",
        "source_code_len": 126,
        "target_code": "        new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> irast.Set:\n\n    assert isinstance(ir_set.expr, irast.Array)\n\n",
        "target_code_len": 191,
        "diff_format": "@@ -430,4 +437,6 @@\n         new_stype: s_types.Type, *,\n-        srcctx: parsing.ParserContext,\n-        ctx: context.ContextLevel) -> irast.Base:\n+        srcctx: typing.Optional[parsing.ParserContext],\n+        ctx: context.ContextLevel) -> irast.Set:\n+\n+    assert isinstance(ir_set.expr, irast.Array)\n \n",
        "source_code_with_indent": "        new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> irast.Base:\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> irast.Set:\n\n    <IND>assert isinstance(ir_set.expr, irast.Array)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/edgeql/compiler/cast.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/cast.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/cast.py:107:8 Incompatible return type [7]: Expected `irast.OperatorCall` but got `irast.Set`.",
    "message": " Expected `irast.OperatorCall` but got `irast.Set`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 107,
    "warning_line": "        return _inheritance_cast_to_ir(",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ir_expr: irast.Base, new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> irast.OperatorCall:\n\n",
        "source_code_len": 155,
        "target_code": "        ir_expr: irast.Base, new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> irast.Set:\n\n",
        "target_code_len": 163,
        "diff_format": "@@ -54,4 +54,4 @@\n         ir_expr: irast.Base, new_stype: s_types.Type, *,\n-        srcctx: parsing.ParserContext,\n-        ctx: context.ContextLevel) -> irast.OperatorCall:\n+        srcctx: typing.Optional[parsing.ParserContext],\n+        ctx: context.ContextLevel) -> irast.Set:\n \n",
        "source_code_with_indent": "        ir_expr: irast.Base, new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> irast.OperatorCall:\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ir_expr: irast.Base, new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> irast.Set:\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> irast.Set:\n",
        "source_code_len": 124,
        "target_code": "        new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> irast.Set:\n",
        "target_code_len": 141,
        "diff_format": "@@ -133,3 +133,3 @@\n         new_stype: s_types.Type, *,\n-        srcctx: parsing.ParserContext,\n+        srcctx: typing.Optional[parsing.ParserContext],\n         ctx: context.ContextLevel) -> irast.Set:\n",
        "source_code_with_indent": "        new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> irast.Set:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> irast.Set:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> typing.Optional[s_casts.Cast]:\n",
        "source_code_len": 144,
        "target_code": "        new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> typing.Optional[s_casts.Cast]:\n",
        "target_code_len": 161,
        "diff_format": "@@ -242,3 +242,3 @@\n         new_stype: s_types.Type, *,\n-        srcctx: parsing.ParserContext,\n+        srcctx: typing.Optional[parsing.ParserContext],\n         ctx: context.ContextLevel) -> typing.Optional[s_casts.Cast]:\n",
        "source_code_with_indent": "        new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> typing.Optional[s_casts.Cast]:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> typing.Optional[s_casts.Cast]:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def _cast_tuple(\n        ir_set: irast.Base,\n        orig_stype: s_types.Type,\n        new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> irast.Base:\n\n",
        "source_code_len": 205,
        "target_code": "def _cast_tuple(\n        ir_set: irast.Set,\n        orig_stype: s_types.Type,\n        new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> irast.Set:\n\n    assert isinstance(orig_stype, s_types.Tuple)\n\n",
        "target_code_len": 270,
        "diff_format": "@@ -276,7 +276,9 @@\n def _cast_tuple(\n-        ir_set: irast.Base,\n-        orig_stype: s_types.Type,\n-        new_stype: s_types.Type, *,\n-        srcctx: parsing.ParserContext,\n-        ctx: context.ContextLevel) -> irast.Base:\n+        ir_set: irast.Set,\n+        orig_stype: s_types.Type,\n+        new_stype: s_types.Type, *,\n+        srcctx: typing.Optional[parsing.ParserContext],\n+        ctx: context.ContextLevel) -> irast.Set:\n+\n+    assert isinstance(orig_stype, s_types.Tuple)\n \n",
        "source_code_with_indent": "<DED><DED>def _cast_tuple(\n        ir_set: irast.Base,\n        orig_stype: s_types.Type,\n        new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> irast.Base:\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED><DED>def _cast_tuple(\n        ir_set: irast.Set,\n        orig_stype: s_types.Type,\n        new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> irast.Set:\n\n    <IND>assert isinstance(orig_stype, s_types.Tuple)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> irast.Base:\n\n",
        "source_code_len": 126,
        "target_code": "        new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> irast.Set:\n\n    assert isinstance(orig_stype, s_types.Array)\n\n",
        "target_code_len": 192,
        "diff_format": "@@ -364,4 +367,6 @@\n         new_stype: s_types.Type, *,\n-        srcctx: parsing.ParserContext,\n-        ctx: context.ContextLevel) -> irast.Base:\n+        srcctx: typing.Optional[parsing.ParserContext],\n+        ctx: context.ContextLevel) -> irast.Set:\n+\n+    assert isinstance(orig_stype, s_types.Array)\n \n",
        "source_code_with_indent": "        new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> irast.Base:\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> irast.Set:\n\n    <IND>assert isinstance(orig_stype, s_types.Array)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            array_ir = dispatch.compile(elements, ctx=subctx)\n\n",
        "source_code_len": 63,
        "target_code": "            array_ir = dispatch.compile(elements, ctx=subctx)\n            assert isinstance(array_ir, irast.Set)\n\n",
        "target_code_len": 114,
        "diff_format": "@@ -415,2 +421,3 @@\n             array_ir = dispatch.compile(elements, ctx=subctx)\n+            assert isinstance(array_ir, irast.Set)\n \n",
        "source_code_with_indent": "            array_ir = dispatch.compile(elements, ctx=subctx)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            array_ir = dispatch.compile(elements, ctx=subctx)\n            assert isinstance(array_ir, irast.Set)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> irast.Base:\n\n",
        "source_code_len": 126,
        "target_code": "        new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> irast.Set:\n\n    assert isinstance(ir_set.expr, irast.Array)\n\n",
        "target_code_len": 191,
        "diff_format": "@@ -430,4 +437,6 @@\n         new_stype: s_types.Type, *,\n-        srcctx: parsing.ParserContext,\n-        ctx: context.ContextLevel) -> irast.Base:\n+        srcctx: typing.Optional[parsing.ParserContext],\n+        ctx: context.ContextLevel) -> irast.Set:\n+\n+    assert isinstance(ir_set.expr, irast.Array)\n \n",
        "source_code_with_indent": "        new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> irast.Base:\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> irast.Set:\n\n    <IND>assert isinstance(ir_set.expr, irast.Array)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/edgeql/compiler/cast.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/cast.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/cast.py:111:8 Incompatible return type [7]: Expected `irast.OperatorCall` but got `irast.Base`.",
    "message": " Expected `irast.OperatorCall` but got `irast.Base`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 111,
    "warning_line": "        return _cast_array(",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ir_expr: irast.Base, new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> irast.OperatorCall:\n\n",
        "source_code_len": 155,
        "target_code": "        ir_expr: irast.Base, new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> irast.Set:\n\n",
        "target_code_len": 163,
        "diff_format": "@@ -54,4 +54,4 @@\n         ir_expr: irast.Base, new_stype: s_types.Type, *,\n-        srcctx: parsing.ParserContext,\n-        ctx: context.ContextLevel) -> irast.OperatorCall:\n+        srcctx: typing.Optional[parsing.ParserContext],\n+        ctx: context.ContextLevel) -> irast.Set:\n \n",
        "source_code_with_indent": "        ir_expr: irast.Base, new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> irast.OperatorCall:\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ir_expr: irast.Base, new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> irast.Set:\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> irast.Set:\n",
        "source_code_len": 124,
        "target_code": "        new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> irast.Set:\n",
        "target_code_len": 141,
        "diff_format": "@@ -133,3 +133,3 @@\n         new_stype: s_types.Type, *,\n-        srcctx: parsing.ParserContext,\n+        srcctx: typing.Optional[parsing.ParserContext],\n         ctx: context.ContextLevel) -> irast.Set:\n",
        "source_code_with_indent": "        new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> irast.Set:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> irast.Set:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> typing.Optional[s_casts.Cast]:\n",
        "source_code_len": 144,
        "target_code": "        new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> typing.Optional[s_casts.Cast]:\n",
        "target_code_len": 161,
        "diff_format": "@@ -242,3 +242,3 @@\n         new_stype: s_types.Type, *,\n-        srcctx: parsing.ParserContext,\n+        srcctx: typing.Optional[parsing.ParserContext],\n         ctx: context.ContextLevel) -> typing.Optional[s_casts.Cast]:\n",
        "source_code_with_indent": "        new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> typing.Optional[s_casts.Cast]:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> typing.Optional[s_casts.Cast]:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def _cast_tuple(\n        ir_set: irast.Base,\n        orig_stype: s_types.Type,\n        new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> irast.Base:\n\n",
        "source_code_len": 205,
        "target_code": "def _cast_tuple(\n        ir_set: irast.Set,\n        orig_stype: s_types.Type,\n        new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> irast.Set:\n\n    assert isinstance(orig_stype, s_types.Tuple)\n\n",
        "target_code_len": 270,
        "diff_format": "@@ -276,7 +276,9 @@\n def _cast_tuple(\n-        ir_set: irast.Base,\n-        orig_stype: s_types.Type,\n-        new_stype: s_types.Type, *,\n-        srcctx: parsing.ParserContext,\n-        ctx: context.ContextLevel) -> irast.Base:\n+        ir_set: irast.Set,\n+        orig_stype: s_types.Type,\n+        new_stype: s_types.Type, *,\n+        srcctx: typing.Optional[parsing.ParserContext],\n+        ctx: context.ContextLevel) -> irast.Set:\n+\n+    assert isinstance(orig_stype, s_types.Tuple)\n \n",
        "source_code_with_indent": "<DED><DED>def _cast_tuple(\n        ir_set: irast.Base,\n        orig_stype: s_types.Type,\n        new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> irast.Base:\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED><DED>def _cast_tuple(\n        ir_set: irast.Set,\n        orig_stype: s_types.Type,\n        new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> irast.Set:\n\n    <IND>assert isinstance(orig_stype, s_types.Tuple)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> irast.Base:\n\n",
        "source_code_len": 126,
        "target_code": "        new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> irast.Set:\n\n    assert isinstance(orig_stype, s_types.Array)\n\n",
        "target_code_len": 192,
        "diff_format": "@@ -364,4 +367,6 @@\n         new_stype: s_types.Type, *,\n-        srcctx: parsing.ParserContext,\n-        ctx: context.ContextLevel) -> irast.Base:\n+        srcctx: typing.Optional[parsing.ParserContext],\n+        ctx: context.ContextLevel) -> irast.Set:\n+\n+    assert isinstance(orig_stype, s_types.Array)\n \n",
        "source_code_with_indent": "        new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> irast.Base:\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> irast.Set:\n\n    <IND>assert isinstance(orig_stype, s_types.Array)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            array_ir = dispatch.compile(elements, ctx=subctx)\n\n",
        "source_code_len": 63,
        "target_code": "            array_ir = dispatch.compile(elements, ctx=subctx)\n            assert isinstance(array_ir, irast.Set)\n\n",
        "target_code_len": 114,
        "diff_format": "@@ -415,2 +421,3 @@\n             array_ir = dispatch.compile(elements, ctx=subctx)\n+            assert isinstance(array_ir, irast.Set)\n \n",
        "source_code_with_indent": "            array_ir = dispatch.compile(elements, ctx=subctx)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            array_ir = dispatch.compile(elements, ctx=subctx)\n            assert isinstance(array_ir, irast.Set)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> irast.Base:\n\n",
        "source_code_len": 126,
        "target_code": "        new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> irast.Set:\n\n    assert isinstance(ir_set.expr, irast.Array)\n\n",
        "target_code_len": 191,
        "diff_format": "@@ -430,4 +437,6 @@\n         new_stype: s_types.Type, *,\n-        srcctx: parsing.ParserContext,\n-        ctx: context.ContextLevel) -> irast.Base:\n+        srcctx: typing.Optional[parsing.ParserContext],\n+        ctx: context.ContextLevel) -> irast.Set:\n+\n+    assert isinstance(ir_set.expr, irast.Array)\n \n",
        "source_code_with_indent": "        new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> irast.Base:\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> irast.Set:\n\n    <IND>assert isinstance(ir_set.expr, irast.Array)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/edgeql/compiler/cast.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/cast.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/cast.py:126:8 Incompatible return type [7]: Expected `irast.OperatorCall` but got `irast.Set`.",
    "message": " Expected `irast.OperatorCall` but got `irast.Set`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 126,
    "warning_line": "        return _compile_cast(",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ir_expr: irast.Base, new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> irast.OperatorCall:\n\n",
        "source_code_len": 155,
        "target_code": "        ir_expr: irast.Base, new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> irast.Set:\n\n",
        "target_code_len": 163,
        "diff_format": "@@ -54,4 +54,4 @@\n         ir_expr: irast.Base, new_stype: s_types.Type, *,\n-        srcctx: parsing.ParserContext,\n-        ctx: context.ContextLevel) -> irast.OperatorCall:\n+        srcctx: typing.Optional[parsing.ParserContext],\n+        ctx: context.ContextLevel) -> irast.Set:\n \n",
        "source_code_with_indent": "        ir_expr: irast.Base, new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> irast.OperatorCall:\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ir_expr: irast.Base, new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> irast.Set:\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> irast.Set:\n",
        "source_code_len": 124,
        "target_code": "        new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> irast.Set:\n",
        "target_code_len": 141,
        "diff_format": "@@ -133,3 +133,3 @@\n         new_stype: s_types.Type, *,\n-        srcctx: parsing.ParserContext,\n+        srcctx: typing.Optional[parsing.ParserContext],\n         ctx: context.ContextLevel) -> irast.Set:\n",
        "source_code_with_indent": "        new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> irast.Set:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> irast.Set:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> typing.Optional[s_casts.Cast]:\n",
        "source_code_len": 144,
        "target_code": "        new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> typing.Optional[s_casts.Cast]:\n",
        "target_code_len": 161,
        "diff_format": "@@ -242,3 +242,3 @@\n         new_stype: s_types.Type, *,\n-        srcctx: parsing.ParserContext,\n+        srcctx: typing.Optional[parsing.ParserContext],\n         ctx: context.ContextLevel) -> typing.Optional[s_casts.Cast]:\n",
        "source_code_with_indent": "        new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> typing.Optional[s_casts.Cast]:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> typing.Optional[s_casts.Cast]:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def _cast_tuple(\n        ir_set: irast.Base,\n        orig_stype: s_types.Type,\n        new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> irast.Base:\n\n",
        "source_code_len": 205,
        "target_code": "def _cast_tuple(\n        ir_set: irast.Set,\n        orig_stype: s_types.Type,\n        new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> irast.Set:\n\n    assert isinstance(orig_stype, s_types.Tuple)\n\n",
        "target_code_len": 270,
        "diff_format": "@@ -276,7 +276,9 @@\n def _cast_tuple(\n-        ir_set: irast.Base,\n-        orig_stype: s_types.Type,\n-        new_stype: s_types.Type, *,\n-        srcctx: parsing.ParserContext,\n-        ctx: context.ContextLevel) -> irast.Base:\n+        ir_set: irast.Set,\n+        orig_stype: s_types.Type,\n+        new_stype: s_types.Type, *,\n+        srcctx: typing.Optional[parsing.ParserContext],\n+        ctx: context.ContextLevel) -> irast.Set:\n+\n+    assert isinstance(orig_stype, s_types.Tuple)\n \n",
        "source_code_with_indent": "<DED><DED>def _cast_tuple(\n        ir_set: irast.Base,\n        orig_stype: s_types.Type,\n        new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> irast.Base:\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED><DED>def _cast_tuple(\n        ir_set: irast.Set,\n        orig_stype: s_types.Type,\n        new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> irast.Set:\n\n    <IND>assert isinstance(orig_stype, s_types.Tuple)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> irast.Base:\n\n",
        "source_code_len": 126,
        "target_code": "        new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> irast.Set:\n\n    assert isinstance(orig_stype, s_types.Array)\n\n",
        "target_code_len": 192,
        "diff_format": "@@ -364,4 +367,6 @@\n         new_stype: s_types.Type, *,\n-        srcctx: parsing.ParserContext,\n-        ctx: context.ContextLevel) -> irast.Base:\n+        srcctx: typing.Optional[parsing.ParserContext],\n+        ctx: context.ContextLevel) -> irast.Set:\n+\n+    assert isinstance(orig_stype, s_types.Array)\n \n",
        "source_code_with_indent": "        new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> irast.Base:\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> irast.Set:\n\n    <IND>assert isinstance(orig_stype, s_types.Array)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            array_ir = dispatch.compile(elements, ctx=subctx)\n\n",
        "source_code_len": 63,
        "target_code": "            array_ir = dispatch.compile(elements, ctx=subctx)\n            assert isinstance(array_ir, irast.Set)\n\n",
        "target_code_len": 114,
        "diff_format": "@@ -415,2 +421,3 @@\n             array_ir = dispatch.compile(elements, ctx=subctx)\n+            assert isinstance(array_ir, irast.Set)\n \n",
        "source_code_with_indent": "            array_ir = dispatch.compile(elements, ctx=subctx)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            array_ir = dispatch.compile(elements, ctx=subctx)\n            assert isinstance(array_ir, irast.Set)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> irast.Base:\n\n",
        "source_code_len": 126,
        "target_code": "        new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> irast.Set:\n\n    assert isinstance(ir_set.expr, irast.Array)\n\n",
        "target_code_len": 191,
        "diff_format": "@@ -430,4 +437,6 @@\n         new_stype: s_types.Type, *,\n-        srcctx: parsing.ParserContext,\n-        ctx: context.ContextLevel) -> irast.Base:\n+        srcctx: typing.Optional[parsing.ParserContext],\n+        ctx: context.ContextLevel) -> irast.Set:\n+\n+    assert isinstance(ir_set.expr, irast.Array)\n \n",
        "source_code_with_indent": "        new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> irast.Base:\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> irast.Set:\n\n    <IND>assert isinstance(ir_set.expr, irast.Array)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/edgeql/compiler/cast.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/cast.py",
    "file_hunks_size": 11,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/cast.py:262:49 Incompatible parameter type [6]: Expected `typing.List[typing.Tuple[s_types.Type, irast.Base]]` for 2nd parameter `args` to call `polyres.find_callable` but got `typing.List[typing.Tuple[s_types.Type, None]]`.",
    "message": " Expected `typing.List[typing.Tuple[s_types.Type, irast.Base]]` for 2nd parameter `args` to call `polyres.find_callable` but got `typing.List[typing.Tuple[s_types.Type, None]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 262,
    "warning_line": "        (CastCallableWrapper(c) for c in casts), args=args, kwargs={}, ctx=ctx)"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/edgeql/compiler/cast.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/cast.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/cast.py:286:34 Incompatible parameter type [6]: Expected `irast.Set` for 1st positional only parameter to call `pathctx.register_set_in_scope` but got `irast.Base`.",
    "message": " Expected `irast.Set` for 1st positional only parameter to call `pathctx.register_set_in_scope` but got `irast.Base`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 286,
    "warning_line": "    pathctx.register_set_in_scope(ir_set, ctx=ctx)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ir_expr: irast.Base, new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> irast.OperatorCall:\n\n",
        "source_code_len": 155,
        "target_code": "        ir_expr: irast.Base, new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> irast.Set:\n\n",
        "target_code_len": 163,
        "diff_format": "@@ -54,4 +54,4 @@\n         ir_expr: irast.Base, new_stype: s_types.Type, *,\n-        srcctx: parsing.ParserContext,\n-        ctx: context.ContextLevel) -> irast.OperatorCall:\n+        srcctx: typing.Optional[parsing.ParserContext],\n+        ctx: context.ContextLevel) -> irast.Set:\n \n",
        "source_code_with_indent": "        ir_expr: irast.Base, new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> irast.OperatorCall:\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ir_expr: irast.Base, new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> irast.Set:\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> irast.Set:\n",
        "source_code_len": 124,
        "target_code": "        new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> irast.Set:\n",
        "target_code_len": 141,
        "diff_format": "@@ -133,3 +133,3 @@\n         new_stype: s_types.Type, *,\n-        srcctx: parsing.ParserContext,\n+        srcctx: typing.Optional[parsing.ParserContext],\n         ctx: context.ContextLevel) -> irast.Set:\n",
        "source_code_with_indent": "        new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> irast.Set:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> irast.Set:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> typing.Optional[s_casts.Cast]:\n",
        "source_code_len": 144,
        "target_code": "        new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> typing.Optional[s_casts.Cast]:\n",
        "target_code_len": 161,
        "diff_format": "@@ -242,3 +242,3 @@\n         new_stype: s_types.Type, *,\n-        srcctx: parsing.ParserContext,\n+        srcctx: typing.Optional[parsing.ParserContext],\n         ctx: context.ContextLevel) -> typing.Optional[s_casts.Cast]:\n",
        "source_code_with_indent": "        new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> typing.Optional[s_casts.Cast]:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> typing.Optional[s_casts.Cast]:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def _cast_tuple(\n        ir_set: irast.Base,\n        orig_stype: s_types.Type,\n        new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> irast.Base:\n\n",
        "source_code_len": 205,
        "target_code": "def _cast_tuple(\n        ir_set: irast.Set,\n        orig_stype: s_types.Type,\n        new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> irast.Set:\n\n    assert isinstance(orig_stype, s_types.Tuple)\n\n",
        "target_code_len": 270,
        "diff_format": "@@ -276,7 +276,9 @@\n def _cast_tuple(\n-        ir_set: irast.Base,\n-        orig_stype: s_types.Type,\n-        new_stype: s_types.Type, *,\n-        srcctx: parsing.ParserContext,\n-        ctx: context.ContextLevel) -> irast.Base:\n+        ir_set: irast.Set,\n+        orig_stype: s_types.Type,\n+        new_stype: s_types.Type, *,\n+        srcctx: typing.Optional[parsing.ParserContext],\n+        ctx: context.ContextLevel) -> irast.Set:\n+\n+    assert isinstance(orig_stype, s_types.Tuple)\n \n",
        "source_code_with_indent": "<DED><DED>def _cast_tuple(\n        ir_set: irast.Base,\n        orig_stype: s_types.Type,\n        new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> irast.Base:\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED><DED>def _cast_tuple(\n        ir_set: irast.Set,\n        orig_stype: s_types.Type,\n        new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> irast.Set:\n\n    <IND>assert isinstance(orig_stype, s_types.Tuple)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> irast.Base:\n\n",
        "source_code_len": 126,
        "target_code": "        new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> irast.Set:\n\n    assert isinstance(orig_stype, s_types.Array)\n\n",
        "target_code_len": 192,
        "diff_format": "@@ -364,4 +367,6 @@\n         new_stype: s_types.Type, *,\n-        srcctx: parsing.ParserContext,\n-        ctx: context.ContextLevel) -> irast.Base:\n+        srcctx: typing.Optional[parsing.ParserContext],\n+        ctx: context.ContextLevel) -> irast.Set:\n+\n+    assert isinstance(orig_stype, s_types.Array)\n \n",
        "source_code_with_indent": "        new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> irast.Base:\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> irast.Set:\n\n    <IND>assert isinstance(orig_stype, s_types.Array)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            array_ir = dispatch.compile(elements, ctx=subctx)\n\n",
        "source_code_len": 63,
        "target_code": "            array_ir = dispatch.compile(elements, ctx=subctx)\n            assert isinstance(array_ir, irast.Set)\n\n",
        "target_code_len": 114,
        "diff_format": "@@ -415,2 +421,3 @@\n             array_ir = dispatch.compile(elements, ctx=subctx)\n+            assert isinstance(array_ir, irast.Set)\n \n",
        "source_code_with_indent": "            array_ir = dispatch.compile(elements, ctx=subctx)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            array_ir = dispatch.compile(elements, ctx=subctx)\n            assert isinstance(array_ir, irast.Set)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> irast.Base:\n\n",
        "source_code_len": 126,
        "target_code": "        new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> irast.Set:\n\n    assert isinstance(ir_set.expr, irast.Array)\n\n",
        "target_code_len": 191,
        "diff_format": "@@ -430,4 +437,6 @@\n         new_stype: s_types.Type, *,\n-        srcctx: parsing.ParserContext,\n-        ctx: context.ContextLevel) -> irast.Base:\n+        srcctx: typing.Optional[parsing.ParserContext],\n+        ctx: context.ContextLevel) -> irast.Set:\n+\n+    assert isinstance(ir_set.expr, irast.Array)\n \n",
        "source_code_with_indent": "        new_stype: s_types.Type, *,\n        srcctx: parsing.ParserContext,\n        ctx: context.ContextLevel) -> irast.Base:\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        new_stype: s_types.Type, *,\n        srcctx: typing.Optional[parsing.ParserContext],\n        ctx: context.ContextLevel) -> irast.Set:\n\n    <IND>assert isinstance(ir_set.expr, irast.Array)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/edgeql/compiler/cast.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/cast.py",
    "file_hunks_size": 11,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/cast.py:286:42 Incompatible parameter type [6]: Expected `context.CompilerContext` for 2nd parameter `ctx` to call `pathctx.register_set_in_scope` but got `context.ContextLevel`.",
    "message": " Expected `context.CompilerContext` for 2nd parameter `ctx` to call `pathctx.register_set_in_scope` but got `context.ContextLevel`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 286,
    "warning_line": "    pathctx.register_set_in_scope(ir_set, ctx=ctx)"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/edgeql/compiler/cast.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/cast.py",
    "file_hunks_size": 11,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/cast.py:299:39 Incompatible parameter type [6]: Expected `context.CompilerContext` for 4th parameter `ctx` to call `pathctx.get_tuple_indirection_path_id` but got `context.ContextLevel`.",
    "message": " Expected `context.CompilerContext` for 4th parameter `ctx` to call `pathctx.get_tuple_indirection_path_id` but got `context.ContextLevel`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 299,
    "warning_line": "                ir_set.path_id, n, st, ctx=ctx)"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/edgeql/compiler/cast.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/cast.py",
    "file_hunks_size": 11,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/cast.py:340:40 Incompatible parameter type [6]: Expected `context.CompilerContext` for 4th parameter `ctx` to call `pathctx.get_tuple_indirection_path_id` but got `context.ContextLevel`.",
    "message": " Expected `context.CompilerContext` for 4th parameter `ctx` to call `pathctx.get_tuple_indirection_path_id` but got `context.ContextLevel`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 340,
    "warning_line": "            ir_set.path_id, n, orig_st, ctx=ctx)"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/edgeql/compiler/cast.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/cast.py",
    "file_hunks_size": 11,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/cast.py:389:46 Incompatible parameter type [6]: Expected `context.CompilerContext` for 2nd parameter `ctx` to call `pathctx.register_set_in_scope` but got `context.ContextLevel`.",
    "message": " Expected `context.CompilerContext` for 2nd parameter `ctx` to call `pathctx.register_set_in_scope` but got `context.ContextLevel`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 389,
    "warning_line": "        pathctx.register_set_in_scope(ir_set, ctx=ctx)"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/edgeql/compiler/cast.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/cast.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/cast.py:421:20 Incompatible parameter type [6]: Expected `irast.Set` for 1st positional only parameter to call `_cast_to_ir` but got `irast.Base`.",
    "message": " Expected `irast.Set` for 1st positional only parameter to call `_cast_to_ir` but got `irast.Base`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 421,
    "warning_line": "                    array_ir, direct_cast, array_stype, new_stype, ctx=ctx",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            array_ir = dispatch.compile(elements, ctx=subctx)\n\n",
        "source_code_len": 63,
        "target_code": "            array_ir = dispatch.compile(elements, ctx=subctx)\n            assert isinstance(array_ir, irast.Set)\n\n",
        "target_code_len": 114,
        "diff_format": "@@ -415,2 +421,3 @@\n             array_ir = dispatch.compile(elements, ctx=subctx)\n+            assert isinstance(array_ir, irast.Set)\n \n",
        "source_code_with_indent": "            array_ir = dispatch.compile(elements, ctx=subctx)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            array_ir = dispatch.compile(elements, ctx=subctx)\n            assert isinstance(array_ir, irast.Set)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/edgeql/compiler/clauses.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/clauses.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/clauses.py:59:12 Incompatible parameter type [6]: Expected `irast.Expr` for 1st parameter `target` to call `stmtctx.get_expr_cardinality_later` but got `irast.FilteredStmt`.",
    "message": " Expected `irast.Expr` for 1st parameter `target` to call `stmtctx.get_expr_cardinality_later` but got `irast.FilteredStmt`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 59,
    "warning_line": "            target=ir_stmt, field='where_card', irexpr=ir_set,"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/edgeql/compiler/clauses.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/clauses.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/clauses.py:59:48 Incompatible parameter type [6]: Expected `irast.Expr` for 3rd parameter `irexpr` to call `stmtctx.get_expr_cardinality_later` but got `irast.Set`.",
    "message": " Expected `irast.Expr` for 3rd parameter `irexpr` to call `stmtctx.get_expr_cardinality_later` but got `irast.Set`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 59,
    "warning_line": "            target=ir_stmt, field='where_card', irexpr=ir_set,"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/edgeql/compiler/config.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/config.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/config.py:70:4 Incompatible return type [7]: Expected `irast.Set` but got `irast.ConfigSet`.",
    "message": " Expected `irast.Set` but got `irast.ConfigSet`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 70,
    "warning_line": "    return irast.ConfigSet(",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def compile_ConfigSet(\n        expr: qlast.ConfigSet, *, ctx: context.ContextLevel) -> irast.Set:\n\n",
        "source_code_len": 99,
        "target_code": "def compile_ConfigSet(\n    expr: qlast.ConfigSet, *,\n    ctx: context.ContextLevel,\n) -> irast.ConfigSet:\n\n",
        "target_code_len": 107,
        "diff_format": "@@ -55,3 +55,5 @@\n def compile_ConfigSet(\n-        expr: qlast.ConfigSet, *, ctx: context.ContextLevel) -> irast.Set:\n+    expr: qlast.ConfigSet, *,\n+    ctx: context.ContextLevel,\n+) -> irast.ConfigSet:\n \n",
        "source_code_with_indent": "def compile_ConfigSet(\n        expr: qlast.ConfigSet, *, ctx: context.ContextLevel) -> irast.Set:\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "def compile_ConfigSet(\n    expr: qlast.ConfigSet, *,\n    ctx: context.ContextLevel,\n) -> irast.ConfigSet:\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/edgeql/compiler/config.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/config.py",
    "file_hunks_size": 7,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/config.py:109:23 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `dict.__setitem__` but got `None`.",
    "message": " Expected `str` for 1st positional only parameter to call `dict.__setitem__` but got `None`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 109,
    "warning_line": "        ctx.modaliases[None] = 'cfg'"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/edgeql/compiler/config.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/config.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/config.py:115:4 Incompatible return type [7]: Expected `irast.Set` but got `irast.ConfigReset`.",
    "message": " Expected `irast.Set` but got `irast.ConfigReset`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 115,
    "warning_line": "    return irast.ConfigReset(",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def compile_ConfigReset(\n        expr: qlast.ConfigReset, *, ctx: context.ContextLevel) -> irast.Set:\n    info = _validate_op(expr, ctx=ctx)\n    filter_expr = expr.where\n\n",
        "source_code_len": 171,
        "target_code": "def compile_ConfigReset(\n    expr: qlast.ConfigReset, *,\n    ctx: context.ContextLevel,\n) -> irast.ConfigReset:\n\n    info = _validate_op(expr, ctx=ctx)\n    filter_expr = expr.where\n    select_ir = None\n\n",
        "target_code_len": 203,
        "diff_format": "@@ -82,5 +84,9 @@\n def compile_ConfigReset(\n-        expr: qlast.ConfigReset, *, ctx: context.ContextLevel) -> irast.Set:\n+    expr: qlast.ConfigReset, *,\n+    ctx: context.ContextLevel,\n+) -> irast.ConfigReset:\n+\n     info = _validate_op(expr, ctx=ctx)\n     filter_expr = expr.where\n+    select_ir = None\n \n",
        "source_code_with_indent": "def compile_ConfigReset(\n        expr: qlast.ConfigReset, *, ctx: context.ContextLevel) -> irast.Set:\n    <IND>info = _validate_op(expr, ctx=ctx)\n    filter_expr = expr.where\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "def compile_ConfigReset(\n    expr: qlast.ConfigReset, *,\n    ctx: context.ContextLevel,\n) -> irast.ConfigReset:\n\n    <IND>info = _validate_op(expr, ctx=ctx)\n    filter_expr = expr.where\n    select_ir = None\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/edgeql/compiler/config.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/config.py",
    "file_hunks_size": 7,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/config.py:224:36 Incompatible parameter type [6]: Expected `irast.Set` for 1st positional only parameter to call `_validate_config_object` but got `irast.Base`.",
    "message": " Expected `irast.Set` for 1st positional only parameter to call `_validate_config_object` but got `irast.Base`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 224,
    "warning_line": "            _validate_config_object(element, level=level, ctx=ctx)"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/edgeql/compiler/config.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/config.py",
    "file_hunks_size": 7,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/config.py:313:4 Incompatible return type [7]: Expected `typing.Tuple[str, s_types.Type]` but got `SettingInfo`.",
    "message": " Expected `typing.Tuple[str, s_types.Type]` but got `SettingInfo`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 313,
    "warning_line": "    return SettingInfo(param_name=name,"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/edgeql/compiler/expr.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/expr.py",
    "file_hunks_size": 24,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/expr.py:61:42 Incompatible parameter type [6]: Expected `context.CompilerContext` for 2nd parameter `ctx` to call `pathctx.register_set_in_scope` but got `context.ContextLevel`.",
    "message": " Expected `context.CompilerContext` for 2nd parameter `ctx` to call `pathctx.register_set_in_scope` but got `context.ContextLevel`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 61,
    "warning_line": "    pathctx.register_set_in_scope(result, ctx=ctx)"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/edgeql/compiler/expr.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/expr.py",
    "file_hunks_size": 24,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/expr.py:62:50 Incompatible parameter type [6]: Expected `context.CompilerContext` for 2nd parameter `ctx` to call `pathctx.mark_path_as_optional` but got `context.ContextLevel`.",
    "message": " Expected `context.CompilerContext` for 2nd parameter `ctx` to call `pathctx.mark_path_as_optional` but got `context.ContextLevel`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 62,
    "warning_line": "    pathctx.mark_path_as_optional(result.path_id, ctx=ctx)"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/edgeql/compiler/expr.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/expr.py",
    "file_hunks_size": 24,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/expr.py:70:31 Incompatible parameter type [6]: Expected `qlast.Path` for 1st positional only parameter to call `setgen.compile_path` but got `qlast.Base`.",
    "message": " Expected `qlast.Path` for 1st positional only parameter to call `setgen.compile_path` but got `qlast.Base`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 70,
    "warning_line": "    return setgen.compile_path(expr, ctx=ctx)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def compile_Path(\n        expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set:\n    return setgen.compile_path(expr, ctx=ctx)\n",
        "source_code_len": 134,
        "target_code": "def compile_Path(\n        expr: qlast.Path, *, ctx: context.ContextLevel) -> irast.Set:\n    return setgen.compile_path(expr, ctx=ctx)\n",
        "target_code_len": 134,
        "diff_format": "@@ -68,3 +69,3 @@\n def compile_Path(\n-        expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set:\n+        expr: qlast.Path, *, ctx: context.ContextLevel) -> irast.Set:\n     return setgen.compile_path(expr, ctx=ctx)\n",
        "source_code_with_indent": "def compile_Path(\n        expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set:\n    <IND>return setgen.compile_path(expr, ctx=ctx)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "def compile_Path(\n        expr: qlast.Path, *, ctx: context.ContextLevel) -> irast.Set:\n    <IND>return setgen.compile_path(expr, ctx=ctx)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/edgeql/compiler/expr.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/expr.py",
    "file_hunks_size": 24,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/expr.py:91:36 Incompatible parameter type [6]: Expected `qlast.IsOp` for 1st positional only parameter to call `compile_type_check_op` but got `qlast.Base`.",
    "message": " Expected `qlast.IsOp` for 1st positional only parameter to call `compile_type_check_op` but got `qlast.Base`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 91,
    "warning_line": "    op_node = compile_type_check_op(expr, ctx=ctx)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def compile_IsOp(\n        expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set:\n    op_node = compile_type_check_op(expr, ctx=ctx)\n",
        "source_code_len": 139,
        "target_code": "def compile_IsOp(\n        expr: qlast.IsOp, *, ctx: context.ContextLevel) -> irast.Set:\n    op_node = compile_type_check_op(expr, ctx=ctx)\n",
        "target_code_len": 139,
        "diff_format": "@@ -89,3 +91,3 @@\n def compile_IsOp(\n-        expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set:\n+        expr: qlast.IsOp, *, ctx: context.ContextLevel) -> irast.Set:\n     op_node = compile_type_check_op(expr, ctx=ctx)\n",
        "source_code_with_indent": "def compile_IsOp(\n        expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set:\n    <IND>op_node = compile_type_check_op(expr, ctx=ctx)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "def compile_IsOp(\n        expr: qlast.IsOp, *, ctx: context.ContextLevel) -> irast.Set:\n    <IND>op_node = compile_type_check_op(expr, ctx=ctx)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/edgeql/compiler/expr.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/expr.py",
    "file_hunks_size": 24,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/expr.py:126:27 Incompatible parameter type [6]: Expected `qlast.Set` for 1st positional only parameter to call `flatten_set` but got `qlast.Base`.",
    "message": " Expected `qlast.Set` for 1st positional only parameter to call `flatten_set` but got `qlast.Base`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 126,
    "warning_line": "    elements = flatten_set(expr)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "@dispatch.compile.register(qlast.Set)\ndef compile_Set(\n        expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Base:\n    # after flattening the set may still end up with 0 or 1 element,\n",
        "source_code_len": 195,
        "target_code": "@dispatch.compile.register(qlast.Set)\ndef compile_Set(expr: qlast.Set, *, ctx: context.ContextLevel) -> irast.Base:\n    # after flattening the set may still end up with 0 or 1 element,\n",
        "target_code_len": 185,
        "diff_format": "@@ -121,4 +123,3 @@\n @dispatch.compile.register(qlast.Set)\n-def compile_Set(\n-        expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Base:\n+def compile_Set(expr: qlast.Set, *, ctx: context.ContextLevel) -> irast.Base:\n     # after flattening the set may still end up with 0 or 1 element,\n",
        "source_code_with_indent": "<DED><DED>@dispatch.compile.register(qlast.Set)\ndef compile_Set(\n        expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Base:\n    # after flattening the set may still end up with 0 or 1 element,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED><DED>@dispatch.compile.register(qlast.Set)\ndef compile_Set(expr: qlast.Set, *, ctx: context.ContextLevel) -> irast.Base:\n    # after flattening the set may still end up with 0 or 1 element,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/edgeql/compiler/expr.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/expr.py",
    "file_hunks_size": 24,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/expr.py:218:40 Incompatible parameter type [6]: Expected `irast.Set` for 1st positional only parameter to call `setgen.get_set_type` but got `irast.Base`.",
    "message": " Expected `irast.Set` for 1st positional only parameter to call `setgen.get_set_type` but got `irast.Base`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 218,
    "warning_line": "                all(setgen.get_set_type(a.expr, ctx=ctx).issubclass("
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/edgeql/compiler/expr.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/expr.py",
    "file_hunks_size": 24,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/expr.py:385:32 Incompatible parameter type [6]: Expected `irast.TypeRef` for 1st positional only parameter to call `irtyputils.is_array` but got `typing.Union[irast.Array, irast.TypeRef]`.",
    "message": " Expected `irast.TypeRef` for 1st positional only parameter to call `irtyputils.is_array` but got `typing.Union[irast.Array, irast.TypeRef]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 385,
    "warning_line": "            irtyputils.is_array(target_typeref)):"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/edgeql/compiler/expr.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/expr.py",
    "file_hunks_size": 24,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/expr.py:430:23 Incompatible parameter type [6]: Expected `edb.schema.types.Type` for 2nd positional only parameter to call `cast.compile_cast` but got `edb.schema.objects.Object`.",
    "message": " Expected `edb.schema.types.Type` for 2nd positional only parameter to call `cast.compile_cast` but got `edb.schema.objects.Object`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 430,
    "warning_line": "                param, pt,"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/edgeql/compiler/expr.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/expr.py",
    "file_hunks_size": 24,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/expr.py:436:67 Incompatible parameter type [6]: Expected `edb.schema.types.Type` for 2nd positional only parameter to call `irtyputils.type_to_typeref` but got `edb.schema.objects.Object`.",
    "message": " Expected `edb.schema.types.Type` for 2nd positional only parameter to call `irtyputils.type_to_typeref` but got `edb.schema.objects.Object`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 436,
    "warning_line": "                typeref=irtyputils.type_to_typeref(ctx.env.schema, pt),"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/edgeql/compiler/expr.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/expr.py",
    "file_hunks_size": 24,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/expr.py:453:17 Incompatible parameter type [6]: Expected `edb.schema.types.Type` for 2nd positional only parameter to call `cast.compile_cast` but got `edb.schema.objects.Object`.",
    "message": " Expected `edb.schema.types.Type` for 2nd positional only parameter to call `cast.compile_cast` but got `edb.schema.objects.Object`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 453,
    "warning_line": "        ir_expr, new_stype, ctx=ctx, srcctx=expr.expr.context)"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/edgeql/compiler/expr.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/expr.py",
    "file_hunks_size": 24,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/expr.py:461:58 Incompatible parameter type [6]: Expected `irast.TypeRef` for 1st positional only parameter to call `irtyputils.is_object` but got `typing.Union[irast.Array, irast.TypeRef]`.",
    "message": " Expected `irast.TypeRef` for 1st positional only parameter to call `irtyputils.is_object` but got `typing.Union[irast.Array, irast.TypeRef]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 461,
    "warning_line": "    if typeref.material_type and not irtyputils.is_object(typeref):"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/edgeql/compiler/expr.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/expr.py",
    "file_hunks_size": 24,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/expr.py:523:18 Incompatible parameter type [6]: Expected `edb.schema.sources.Source` for 2nd parameter `source` to call `setgen.ptr_step_set` but got `edb.schema.types.Type`.",
    "message": " Expected `edb.schema.sources.Source` for 2nd parameter `source` to call `setgen.ptr_step_set` but got `edb.schema.types.Type`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 523,
    "warning_line": "            left, source=ltype, ptr_name='__type__',"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/edgeql/compiler/expr.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/expr.py",
    "file_hunks_size": 24,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/expr.py:526:44 Incompatible parameter type [6]: Expected `context.CompilerContext` for 2nd parameter `ctx` to call `pathctx.register_set_in_scope` but got `context.ContextLevel`.",
    "message": " Expected `context.CompilerContext` for 2nd parameter `ctx` to call `pathctx.register_set_in_scope` but got `context.ContextLevel`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 526,
    "warning_line": "        pathctx.register_set_in_scope(left, ctx=ctx)"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/edgeql/compiler/expr.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/expr.py",
    "file_hunks_size": 24,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/expr.py:534:66 Incompatible parameter type [6]: Expected `irast.TypeRef` for 2nd positional only parameter to call `irtyputils.ir_typeref_to_type` but got `typing.Union[irast.Array, irast.TypeRef]`.",
    "message": " Expected `irast.TypeRef` for 2nd positional only parameter to call `irtyputils.ir_typeref_to_type` but got `typing.Union[irast.Array, irast.TypeRef]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 534,
    "warning_line": "        test_type = irtyputils.ir_typeref_to_type(ctx.env.schema, typeref)"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/edgeql/compiler/func.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/func.py",
    "file_hunks_size": 22,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/func.py:89:37 Incompatible parameter type [6]: Expected `qlast.FunctionCall` for 1st positional only parameter to call `compile_call_args` but got `qlast.Base`.",
    "message": " Expected `qlast.FunctionCall` for 1st positional only parameter to call `compile_call_args` but got `qlast.Base`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 89,
    "warning_line": "    args, kwargs = compile_call_args(expr, funcname, ctx=ctx)"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/edgeql/compiler/func.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/func.py",
    "file_hunks_size": 22,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/func.py:142:44 Incompatible parameter type [6]: Expected `edb.schema.objects.Object` for 1st positional only parameter to call `typegen.type_to_ql_typeref` but got `typing.Optional[s_types.Type]`.",
    "message": " Expected `edb.schema.objects.Object` for 1st positional only parameter to call `typegen.type_to_ql_typeref` but got `typing.Optional[s_types.Type]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 142,
    "warning_line": "            type=typegen.type_to_ql_typeref(matched_call.return_type, ctx=ctx),"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/edgeql/compiler/func.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/func.py",
    "file_hunks_size": 22,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/func.py:149:45 Incompatible parameter type [6]: Expected `s_types.Type` for 1st positional only parameter to call `pathctx.get_expression_path_id` but got `typing.Optional[s_types.Type]`.",
    "message": " Expected `s_types.Type` for 1st positional only parameter to call `pathctx.get_expression_path_id` but got `typing.Optional[s_types.Type]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 149,
    "warning_line": "    path_id = pathctx.get_expression_path_id(rtype, ctx=ctx)"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/edgeql/compiler/func.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/func.py",
    "file_hunks_size": 22,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/func.py:156:32 Incompatible parameter type [6]: Expected `context.CompilerContext` for 4th parameter `ctx` to call `pathctx.get_tuple_indirection_path_id` but got `context.ContextLevel`.",
    "message": " Expected `context.CompilerContext` for 4th parameter `ctx` to call `pathctx.get_tuple_indirection_path_id` but got `context.ContextLevel`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 156,
    "warning_line": "                path_id, n, st, ctx=ctx).strip_weak_namespaces()"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/edgeql/compiler/func.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/func.py",
    "file_hunks_size": 22,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/func.py:161:47 Incompatible parameter type [6]: Expected `context.CompilerContext` for 4th parameter `ctx` to call `pathctx.get_tuple_indirection_path_id` but got `context.ContextLevel`.",
    "message": " Expected `context.CompilerContext` for 4th parameter `ctx` to call `pathctx.get_tuple_indirection_path_id` but got `context.ContextLevel`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 161,
    "warning_line": "                        elem_path_id, nn, sst, ctx=ctx).strip_weak_namespaces()"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/edgeql/compiler/func.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/func.py",
    "file_hunks_size": 22,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/func.py:185:55 Incompatible parameter type [6]: Expected `s_types.Type` for 2nd positional only parameter to call `irtyputils.type_to_typeref` but got `typing.Optional[s_types.Type]`.",
    "message": " Expected `s_types.Type` for 2nd positional only parameter to call `irtyputils.type_to_typeref` but got `typing.Optional[s_types.Type]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 185,
    "warning_line": "        typeref=irtyputils.type_to_typeref(env.schema, rtype),"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/edgeql/compiler/func.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/func.py",
    "file_hunks_size": 22,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/func.py:405:4 Incompatible return type [7]: Expected `irast.OperatorCall` but got `irast.Set`.",
    "message": " Expected `irast.OperatorCall` but got `irast.Set`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 405,
    "warning_line": "    return setgen.ensure_set(node, typehint=rtype, ctx=ctx)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        qlexpr: qlast.Base, op_name: str, qlargs: typing.List[qlast.Base], *,\n        ctx: context.ContextLevel) -> irast.OperatorCall:\n\n",
        "source_code_len": 137,
        "target_code": "        qlexpr: qlast.Base, op_name: str, qlargs: typing.List[qlast.Base], *,\n        ctx: context.ContextLevel) -> irast.Set:\n\n",
        "target_code_len": 128,
        "diff_format": "@@ -197,3 +204,3 @@\n         qlexpr: qlast.Base, op_name: str, qlargs: typing.List[qlast.Base], *,\n-        ctx: context.ContextLevel) -> irast.OperatorCall:\n+        ctx: context.ContextLevel) -> irast.Set:\n \n",
        "source_code_with_indent": "        qlexpr: qlast.Base, op_name: str, qlargs: typing.List[qlast.Base], *,\n        ctx: context.ContextLevel) -> irast.OperatorCall:\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        qlexpr: qlast.Base, op_name: str, qlargs: typing.List[qlast.Base], *,\n        ctx: context.ContextLevel) -> irast.Set:\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/edgeql/compiler/func.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/func.py",
    "file_hunks_size": 22,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/func.py:506:46 Incompatible parameter type [6]: Expected `irast.Set` for 1st positional only parameter to call `pathctx.get_set_scope` but got `typing.Optional[irast.Base]`.",
    "message": " Expected `irast.Set` for 1st positional only parameter to call `pathctx.get_set_scope` but got `typing.Optional[irast.Base]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 506,
    "warning_line": "            arg_scope = pathctx.get_set_scope(arg, ctx=ctx)"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/edgeql/compiler/func.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/func.py",
    "file_hunks_size": 22,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/func.py:523:51 Incompatible parameter type [6]: Expected `context.CompilerContext` for 2nd parameter `ctx` to call `pathctx.register_set_in_scope` but got `context.ContextLevel`.",
    "message": " Expected `context.CompilerContext` for 2nd parameter `ctx` to call `pathctx.register_set_in_scope` but got `context.ContextLevel`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 523,
    "warning_line": "                pathctx.register_set_in_scope(arg, ctx=ctx)"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/edgeql/compiler/func.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/func.py",
    "file_hunks_size": 22,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/func.py:524:59 Incompatible parameter type [6]: Expected `context.CompilerContext` for 2nd parameter `ctx` to call `pathctx.mark_path_as_optional` but got `context.ContextLevel`.",
    "message": " Expected `context.CompilerContext` for 2nd parameter `ctx` to call `pathctx.mark_path_as_optional` but got `context.ContextLevel`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 524,
    "warning_line": "                pathctx.mark_path_as_optional(arg.path_id, ctx=ctx)"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/edgeql/compiler/func.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/func.py",
    "file_hunks_size": 22,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/func.py:532:45 Incompatible parameter type [6]: Expected `irast.Set` for 1st positional only parameter to call `pathctx.assign_set_scope` but got `typing.Optional[irast.Base]`.",
    "message": " Expected `irast.Set` for 1st positional only parameter to call `pathctx.assign_set_scope` but got `typing.Optional[irast.Base]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 532,
    "warning_line": "                    pathctx.assign_set_scope(arg, None, ctx=ctx)"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/edgeql/compiler/func.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/func.py",
    "file_hunks_size": 22,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/func.py:560:32 Incompatible parameter type [6]: Expected `edb.common.context.ParserContext` for 3rd parameter `srcctx` to call `cast.compile_cast` but got `None`.",
    "message": " Expected `edb.common.context.ParserContext` for 3rd parameter `srcctx` to call `cast.compile_cast` but got `None`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 560,
    "warning_line": "                arg, paramtype, srcctx=None, ctx=ctx)"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/edgeql/compiler/func.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/func.py",
    "file_hunks_size": 22,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/func.py:567:16 Incompatible parameter type [6]: Expected `irast.Expr` for 1st parameter `target` to call `stmtctx.get_expr_cardinality_later` but got `irast.CallArg`.",
    "message": " Expected `irast.Expr` for 1st parameter `target` to call `stmtctx.get_expr_cardinality_later` but got `irast.CallArg`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 567,
    "warning_line": "                target=call_arg, field='cardinality', irexpr=arg, ctx=ctx)"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/edgeql/compiler/func.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/func.py",
    "file_hunks_size": 22,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/func.py:571:4 Incompatible return type [7]: Expected `typing.List[irast.Base]` but got `typing.Tuple[typing.List[typing.Any], typing.List[typing.Any]]`.",
    "message": " Expected `typing.List[irast.Base]` but got `typing.Tuple[typing.List[typing.Any], typing.List[typing.Any]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 571,
    "warning_line": "    return args, typemods"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/edgeql/compiler/inference/cardinality.py",
    "min_patch_found": false,
    "full_warning_msg": "edb/edgeql/compiler/inference/cardinality.py:257:44 Incompatible parameter type [6]: Expected `irast.Set` for 2nd positional only parameter to call `extract_filters` but got `irast.Base`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/edgeql/compiler/inference/cardinality.py",
    "min_patch_found": false,
    "full_warning_msg": "edb/edgeql/compiler/inference/cardinality.py:259:44 Incompatible parameter type [6]: Expected `irast.Set` for 2nd positional only parameter to call `extract_filters` but got `irast.Base`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/edgeql/compiler/pathctx.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/pathctx.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/pathctx.py:84:49 Incompatible parameter type [6]: Expected `context.CompilerContext` for 3rd parameter `ctx` to call `get_path_id` but got `context.ContextLevel`.",
    "message": " Expected `context.CompilerContext` for 3rd parameter `ctx` to call `get_path_id` but got `context.ContextLevel`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 84,
    "warning_line": "    return get_path_id(stype, typename=typename, ctx=ctx)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                typename: typing.Optional[str]=None,\n                ctx: context.CompilerContext) -> irast.PathId:\n    return irast.PathId.from_type(\n",
        "source_code_len": 151,
        "target_code": "                typename: typing.Optional[str]=None,\n                ctx: context.ContextLevel) -> irast.PathId:\n    return irast.PathId.from_type(\n",
        "target_code_len": 148,
        "diff_format": "@@ -42,3 +42,3 @@\n                 typename: typing.Optional[str]=None,\n-                ctx: context.CompilerContext) -> irast.PathId:\n+                ctx: context.ContextLevel) -> irast.PathId:\n     return irast.PathId.from_type(\n",
        "source_code_with_indent": "                typename: typing.Optional[str]=None,\n                ctx: context.CompilerContext) -> irast.PathId:\n    <IND>return irast.PathId.from_type(\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                typename: typing.Optional[str]=None,\n                ctx: context.ContextLevel) -> irast.PathId:\n    <IND>return irast.PathId.from_type(\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/edgeql/compiler/pathctx.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/pathctx.py",
    "file_hunks_size": 8,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/pathctx.py:105:8 Incompatible attribute type [8]: Attribute `path_scope_id` declared in class `irast.Set` has type `int` but is used as type `None`.",
    "message": " Attribute `path_scope_id` declared in class `irast.Set` has type `int` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 105,
    "warning_line": "        ir_set.path_scope_id = None"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/edgeql/compiler/pathctx.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/pathctx.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/pathctx.py:146:54 Incompatible parameter type [6]: Expected `context.ContextLevel` for 3rd parameter `ctx` to call `stmtctx.ensure_ptrref_cardinality` but got `context.CompilerContext`.",
    "message": " Expected `context.ContextLevel` for 3rd parameter `ctx` to call `stmtctx.ensure_ptrref_cardinality` but got `context.CompilerContext`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 146,
    "warning_line": "    stmtctx.ensure_ptrref_cardinality(ptrcls, ptrref, ctx=ctx)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ptrcls, direction=None, target=None, ns=None,\n        ctx: context.CompilerContext) -> irast.PathId:\n\n",
        "source_code_len": 110,
        "target_code": "        ptrcls, direction=None, target=None, ns=None,\n        ctx: context.ContextLevel) -> irast.PathId:\n\n",
        "target_code_len": 107,
        "diff_format": "@@ -139,3 +133,3 @@\n         ptrcls, direction=None, target=None, ns=None,\n-        ctx: context.CompilerContext) -> irast.PathId:\n+        ctx: context.ContextLevel) -> irast.PathId:\n \n",
        "source_code_with_indent": "        ptrcls, direction=None, target=None, ns=None,\n        ctx: context.CompilerContext) -> irast.PathId:\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ptrcls, direction=None, target=None, ns=None,\n        ctx: context.ContextLevel) -> irast.PathId:\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/edgeql/compiler/polyres.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/polyres.py",
    "file_hunks_size": 25,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/polyres.py:69:22 Incompatible parameter type [6]: Expected `s_func.CallableObject` for 1st positional only parameter to call `BoundCall.__init__` but got `None`.",
    "message": " Expected `s_func.CallableObject` for 1st positional only parameter to call `BoundCall.__init__` but got `None`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 69,
    "warning_line": "_NO_MATCH = BoundCall(None, [], frozenset(), None, False)"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/edgeql/compiler/polyres.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/polyres.py",
    "file_hunks_size": 25,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/polyres.py:69:32 Incompatible parameter type [6]: Expected `typing.Set[str]` for 3rd positional only parameter to call `BoundCall.__init__` but got `frozenset[Variable[_T_co](covariant)]`.",
    "message": " Expected `typing.Set[str]` for 3rd positional only parameter to call `BoundCall.__init__` but got `frozenset[Variable[_T_co](covariant)]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 69,
    "warning_line": "_NO_MATCH = BoundCall(None, [], frozenset(), None, False)"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/edgeql/compiler/polyres.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/polyres.py",
    "file_hunks_size": 25,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/polyres.py:217:16 Incompatible variable type [9]: args is declared to have type `typing.List[typing.Tuple[s_types.Type, irast.Base]]` but is used as type `typing.List[BoundArg]`.",
    "message": " args is declared to have type `typing.List[typing.Tuple[s_types.Type, irast.Base]]` but is used as type `typing.List[BoundArg]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 217,
    "warning_line": "                args = [BoundArg(None, bytes_t, argval, bytes_t, 0)]"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/edgeql/compiler/polyres.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/polyres.py",
    "file_hunks_size": 25,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/polyres.py:219:22 Incompatible parameter type [6]: Expected `typing.List[BoundArg]` for 2nd positional only parameter to call `BoundCall.__init__` but got `typing.List[typing.Tuple[s_types.Type, irast.Base]]`.",
    "message": " Expected `typing.List[BoundArg]` for 2nd positional only parameter to call `BoundCall.__init__` but got `typing.List[typing.Tuple[s_types.Type, irast.Base]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 219,
    "warning_line": "                func, args, set(),"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/edgeql/compiler/schemactx.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/schemactx.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/schemactx.py:96:4 Incompatible return type [7]: Expected `s_types.Type` but got `s_obj.Object`.",
    "message": " Expected `s_types.Type` but got `s_obj.Object`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 96,
    "warning_line": "    return get_schema_object(name, module, item_types=item_types,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def get_schema_object(\n        name: typing.Union[str, qlast.ObjectRef],\n        module: typing.Optional[str]=None, *,\n        item_types: typing.Optional[typing.List[s_obj.ObjectMeta]],\n        ctx: context.ContextLevel,\n",
        "source_code_len": 222,
        "target_code": "def get_schema_object(\n        name: typing.Union[str, qlast.BaseObjectRef],\n        module: typing.Optional[str]=None, *,\n        item_types: typing.Optional[typing.Sequence[s_obj.ObjectMeta]],\n        ctx: context.ContextLevel,\n",
        "target_code_len": 230,
        "diff_format": "@@ -46,5 +47,5 @@\n def get_schema_object(\n-        name: typing.Union[str, qlast.ObjectRef],\n+        name: typing.Union[str, qlast.BaseObjectRef],\n         module: typing.Optional[str]=None, *,\n-        item_types: typing.Optional[typing.List[s_obj.ObjectMeta]],\n+        item_types: typing.Optional[typing.Sequence[s_obj.ObjectMeta]],\n         ctx: context.ContextLevel,\n",
        "source_code_with_indent": "def get_schema_object(\n        name: typing.Union[str, qlast.ObjectRef],\n        module: typing.Optional[str]=None, *,\n        item_types: typing.Optional[typing.List[s_obj.ObjectMeta]],\n        ctx: context.ContextLevel,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "def get_schema_object(\n        name: typing.Union[str, qlast.BaseObjectRef],\n        module: typing.Optional[str]=None, *,\n        item_types: typing.Optional[typing.Sequence[s_obj.ObjectMeta]],\n        ctx: context.ContextLevel,\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    if not module:\n        result = ctx.aliased_views.get(name)\n",
        "source_code_len": 65,
        "target_code": "\n    elif isinstance(name, str):\n        result = ctx.aliased_views.get(name)\n",
        "target_code_len": 78,
        "diff_format": "@@ -65,3 +66,3 @@\n \n-    if not module:\n+    elif isinstance(name, str):\n         result = ctx.aliased_views.get(name)\n",
        "source_code_with_indent": "\n    <DED>if not module:\n        <IND>result = ctx.aliased_views.get(name)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>elif isinstance(name, str):\n        <IND>result = ctx.aliased_views.get(name)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        item_types = (s_types.Type,)\n    return get_schema_object(name, module, item_types=item_types,\n                             ctx=ctx, srcctx=srcctx)\n\n\ndef get_schema_ptr(\n        name: typing.Union[str, qlast.ObjectRef],\n        module: typing.Optional[str]=None, *,\n        ctx: context.ContextLevel,\n        srcctx: typing.Optional[parsing.ParserContext] = None) -> s_types.Type:\n    return get_schema_object(\n        name, module, item_types=(s_pointers.Pointer,), ctx=ctx, srcctx=srcctx\n    )\n\n",
        "source_code_len": 505,
        "target_code": "        item_types = (s_types.Type,)\n    obj = get_schema_object(name, module, item_types=item_types,\n                            ctx=ctx, srcctx=srcctx)\n    assert isinstance(obj, s_types.Type)\n    return obj\n\n",
        "target_code_len": 211,
        "diff_format": "@@ -95,14 +96,6 @@\n         item_types = (s_types.Type,)\n-    return get_schema_object(name, module, item_types=item_types,\n-                             ctx=ctx, srcctx=srcctx)\n-\n-\n-def get_schema_ptr(\n-        name: typing.Union[str, qlast.ObjectRef],\n-        module: typing.Optional[str]=None, *,\n-        ctx: context.ContextLevel,\n-        srcctx: typing.Optional[parsing.ParserContext] = None) -> s_types.Type:\n-    return get_schema_object(\n-        name, module, item_types=(s_pointers.Pointer,), ctx=ctx, srcctx=srcctx\n-    )\n+    obj = get_schema_object(name, module, item_types=item_types,\n+                            ctx=ctx, srcctx=srcctx)\n+    assert isinstance(obj, s_types.Type)\n+    return obj\n \n",
        "source_code_with_indent": "        <IND>item_types = (s_types.Type,)\n    <DED>return get_schema_object(name, module, item_types=item_types,\n                             ctx=ctx, srcctx=srcctx)\n\n\n<DED>def get_schema_ptr(\n        name: typing.Union[str, qlast.ObjectRef],\n        module: typing.Optional[str]=None, *,\n        ctx: context.ContextLevel,\n        srcctx: typing.Optional[parsing.ParserContext] = None) -> s_types.Type:\n    <IND>return get_schema_object(\n        name, module, item_types=(s_pointers.Pointer,), ctx=ctx, srcctx=srcctx\n    )\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>item_types = (s_types.Type,)\n    <DED>obj = get_schema_object(name, module, item_types=item_types,\n                            ctx=ctx, srcctx=srcctx)\n    assert isinstance(obj, s_types.Type)\n    return obj\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/edgeql/compiler/schemactx.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/schemactx.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/schemactx.py:96:43 Incompatible parameter type [6]: Expected `typing.Optional[typing.List[s_obj.ObjectMeta]]` for 3rd parameter `item_types` to call `get_schema_object` but got `typing.Union[tuple[typing.Type[s_types.Type]], typing.List[s_obj.ObjectMeta]]`.",
    "message": " Expected `typing.Optional[typing.List[s_obj.ObjectMeta]]` for 3rd parameter `item_types` to call `get_schema_object` but got `typing.Union[tuple[typing.Type[s_types.Type]], typing.List[s_obj.ObjectMeta]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 96,
    "warning_line": "    return get_schema_object(name, module, item_types=item_types,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def get_schema_object(\n        name: typing.Union[str, qlast.ObjectRef],\n        module: typing.Optional[str]=None, *,\n        item_types: typing.Optional[typing.List[s_obj.ObjectMeta]],\n        ctx: context.ContextLevel,\n",
        "source_code_len": 222,
        "target_code": "def get_schema_object(\n        name: typing.Union[str, qlast.BaseObjectRef],\n        module: typing.Optional[str]=None, *,\n        item_types: typing.Optional[typing.Sequence[s_obj.ObjectMeta]],\n        ctx: context.ContextLevel,\n",
        "target_code_len": 230,
        "diff_format": "@@ -46,5 +47,5 @@\n def get_schema_object(\n-        name: typing.Union[str, qlast.ObjectRef],\n+        name: typing.Union[str, qlast.BaseObjectRef],\n         module: typing.Optional[str]=None, *,\n-        item_types: typing.Optional[typing.List[s_obj.ObjectMeta]],\n+        item_types: typing.Optional[typing.Sequence[s_obj.ObjectMeta]],\n         ctx: context.ContextLevel,\n",
        "source_code_with_indent": "def get_schema_object(\n        name: typing.Union[str, qlast.ObjectRef],\n        module: typing.Optional[str]=None, *,\n        item_types: typing.Optional[typing.List[s_obj.ObjectMeta]],\n        ctx: context.ContextLevel,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "def get_schema_object(\n        name: typing.Union[str, qlast.BaseObjectRef],\n        module: typing.Optional[str]=None, *,\n        item_types: typing.Optional[typing.Sequence[s_obj.ObjectMeta]],\n        ctx: context.ContextLevel,\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    if not module:\n        result = ctx.aliased_views.get(name)\n",
        "source_code_len": 65,
        "target_code": "\n    elif isinstance(name, str):\n        result = ctx.aliased_views.get(name)\n",
        "target_code_len": 78,
        "diff_format": "@@ -65,3 +66,3 @@\n \n-    if not module:\n+    elif isinstance(name, str):\n         result = ctx.aliased_views.get(name)\n",
        "source_code_with_indent": "\n    <DED>if not module:\n        <IND>result = ctx.aliased_views.get(name)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>elif isinstance(name, str):\n        <IND>result = ctx.aliased_views.get(name)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/edgeql/compiler/schemactx.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/schemactx.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/schemactx.py:105:4 Incompatible return type [7]: Expected `s_types.Type` but got `s_obj.Object`.",
    "message": " Expected `s_types.Type` but got `s_obj.Object`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 105,
    "warning_line": "    return get_schema_object(",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def get_schema_object(\n        name: typing.Union[str, qlast.ObjectRef],\n        module: typing.Optional[str]=None, *,\n        item_types: typing.Optional[typing.List[s_obj.ObjectMeta]],\n        ctx: context.ContextLevel,\n",
        "source_code_len": 222,
        "target_code": "def get_schema_object(\n        name: typing.Union[str, qlast.BaseObjectRef],\n        module: typing.Optional[str]=None, *,\n        item_types: typing.Optional[typing.Sequence[s_obj.ObjectMeta]],\n        ctx: context.ContextLevel,\n",
        "target_code_len": 230,
        "diff_format": "@@ -46,5 +47,5 @@\n def get_schema_object(\n-        name: typing.Union[str, qlast.ObjectRef],\n+        name: typing.Union[str, qlast.BaseObjectRef],\n         module: typing.Optional[str]=None, *,\n-        item_types: typing.Optional[typing.List[s_obj.ObjectMeta]],\n+        item_types: typing.Optional[typing.Sequence[s_obj.ObjectMeta]],\n         ctx: context.ContextLevel,\n",
        "source_code_with_indent": "def get_schema_object(\n        name: typing.Union[str, qlast.ObjectRef],\n        module: typing.Optional[str]=None, *,\n        item_types: typing.Optional[typing.List[s_obj.ObjectMeta]],\n        ctx: context.ContextLevel,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "def get_schema_object(\n        name: typing.Union[str, qlast.BaseObjectRef],\n        module: typing.Optional[str]=None, *,\n        item_types: typing.Optional[typing.Sequence[s_obj.ObjectMeta]],\n        ctx: context.ContextLevel,\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    if not module:\n        result = ctx.aliased_views.get(name)\n",
        "source_code_len": 65,
        "target_code": "\n    elif isinstance(name, str):\n        result = ctx.aliased_views.get(name)\n",
        "target_code_len": 78,
        "diff_format": "@@ -65,3 +66,3 @@\n \n-    if not module:\n+    elif isinstance(name, str):\n         result = ctx.aliased_views.get(name)\n",
        "source_code_with_indent": "\n    <DED>if not module:\n        <IND>result = ctx.aliased_views.get(name)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>elif isinstance(name, str):\n        <IND>result = ctx.aliased_views.get(name)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        item_types = (s_types.Type,)\n    return get_schema_object(name, module, item_types=item_types,\n                             ctx=ctx, srcctx=srcctx)\n\n\ndef get_schema_ptr(\n        name: typing.Union[str, qlast.ObjectRef],\n        module: typing.Optional[str]=None, *,\n        ctx: context.ContextLevel,\n        srcctx: typing.Optional[parsing.ParserContext] = None) -> s_types.Type:\n    return get_schema_object(\n        name, module, item_types=(s_pointers.Pointer,), ctx=ctx, srcctx=srcctx\n    )\n\n",
        "source_code_len": 505,
        "target_code": "        item_types = (s_types.Type,)\n    obj = get_schema_object(name, module, item_types=item_types,\n                            ctx=ctx, srcctx=srcctx)\n    assert isinstance(obj, s_types.Type)\n    return obj\n\n",
        "target_code_len": 211,
        "diff_format": "@@ -95,14 +96,6 @@\n         item_types = (s_types.Type,)\n-    return get_schema_object(name, module, item_types=item_types,\n-                             ctx=ctx, srcctx=srcctx)\n-\n-\n-def get_schema_ptr(\n-        name: typing.Union[str, qlast.ObjectRef],\n-        module: typing.Optional[str]=None, *,\n-        ctx: context.ContextLevel,\n-        srcctx: typing.Optional[parsing.ParserContext] = None) -> s_types.Type:\n-    return get_schema_object(\n-        name, module, item_types=(s_pointers.Pointer,), ctx=ctx, srcctx=srcctx\n-    )\n+    obj = get_schema_object(name, module, item_types=item_types,\n+                            ctx=ctx, srcctx=srcctx)\n+    assert isinstance(obj, s_types.Type)\n+    return obj\n \n",
        "source_code_with_indent": "        <IND>item_types = (s_types.Type,)\n    <DED>return get_schema_object(name, module, item_types=item_types,\n                             ctx=ctx, srcctx=srcctx)\n\n\n<DED>def get_schema_ptr(\n        name: typing.Union[str, qlast.ObjectRef],\n        module: typing.Optional[str]=None, *,\n        ctx: context.ContextLevel,\n        srcctx: typing.Optional[parsing.ParserContext] = None) -> s_types.Type:\n    <IND>return get_schema_object(\n        name, module, item_types=(s_pointers.Pointer,), ctx=ctx, srcctx=srcctx\n    )\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>item_types = (s_types.Type,)\n    <DED>obj = get_schema_object(name, module, item_types=item_types,\n                            ctx=ctx, srcctx=srcctx)\n    assert isinstance(obj, s_types.Type)\n    return obj\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/edgeql/compiler/schemactx.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/schemactx.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/schemactx.py:106:22 Incompatible parameter type [6]: Expected `typing.Optional[typing.List[s_obj.ObjectMeta]]` for 3rd parameter `item_types` to call `get_schema_object` but got `typing.Tuple[typing.Type[s_pointers.Pointer]]`.",
    "message": " Expected `typing.Optional[typing.List[s_obj.ObjectMeta]]` for 3rd parameter `item_types` to call `get_schema_object` but got `typing.Tuple[typing.Type[s_pointers.Pointer]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 106,
    "warning_line": "        name, module, item_types=(s_pointers.Pointer,), ctx=ctx, srcctx=srcctx",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def get_schema_object(\n        name: typing.Union[str, qlast.ObjectRef],\n        module: typing.Optional[str]=None, *,\n        item_types: typing.Optional[typing.List[s_obj.ObjectMeta]],\n        ctx: context.ContextLevel,\n",
        "source_code_len": 222,
        "target_code": "def get_schema_object(\n        name: typing.Union[str, qlast.BaseObjectRef],\n        module: typing.Optional[str]=None, *,\n        item_types: typing.Optional[typing.Sequence[s_obj.ObjectMeta]],\n        ctx: context.ContextLevel,\n",
        "target_code_len": 230,
        "diff_format": "@@ -46,5 +47,5 @@\n def get_schema_object(\n-        name: typing.Union[str, qlast.ObjectRef],\n+        name: typing.Union[str, qlast.BaseObjectRef],\n         module: typing.Optional[str]=None, *,\n-        item_types: typing.Optional[typing.List[s_obj.ObjectMeta]],\n+        item_types: typing.Optional[typing.Sequence[s_obj.ObjectMeta]],\n         ctx: context.ContextLevel,\n",
        "source_code_with_indent": "def get_schema_object(\n        name: typing.Union[str, qlast.ObjectRef],\n        module: typing.Optional[str]=None, *,\n        item_types: typing.Optional[typing.List[s_obj.ObjectMeta]],\n        ctx: context.ContextLevel,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "def get_schema_object(\n        name: typing.Union[str, qlast.BaseObjectRef],\n        module: typing.Optional[str]=None, *,\n        item_types: typing.Optional[typing.Sequence[s_obj.ObjectMeta]],\n        ctx: context.ContextLevel,\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    if not module:\n        result = ctx.aliased_views.get(name)\n",
        "source_code_len": 65,
        "target_code": "\n    elif isinstance(name, str):\n        result = ctx.aliased_views.get(name)\n",
        "target_code_len": 78,
        "diff_format": "@@ -65,3 +66,3 @@\n \n-    if not module:\n+    elif isinstance(name, str):\n         result = ctx.aliased_views.get(name)\n",
        "source_code_with_indent": "\n    <DED>if not module:\n        <IND>result = ctx.aliased_views.get(name)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>elif isinstance(name, str):\n        <IND>result = ctx.aliased_views.get(name)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/edgeql/compiler/schemactx.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/schemactx.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/schemactx.py:115:8 Incompatible return type [7]: Expected `sn.SchemaName` but got `None`.",
    "message": " Expected `sn.SchemaName` but got `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 115,
    "warning_line": "        return None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        name: str, module: str, *,\n        ctx: context.ContextLevel) -> sn.Name:\n    schema_module = ctx.modaliases.get(module)\n",
        "source_code_len": 129,
        "target_code": "        name: str, module: str, *,\n        ctx: context.ContextLevel) -> typing.Optional[sn.Name]:\n    schema_module = ctx.modaliases.get(module)\n",
        "target_code_len": 146,
        "diff_format": "@@ -111,3 +104,3 @@\n         name: str, module: str, *,\n-        ctx: context.ContextLevel) -> sn.Name:\n+        ctx: context.ContextLevel) -> typing.Optional[sn.Name]:\n     schema_module = ctx.modaliases.get(module)\n",
        "source_code_with_indent": "        name: str, module: str, *,\n        ctx: context.ContextLevel) -> sn.Name:\n    <IND>schema_module = ctx.modaliases.get(module)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        name: str, module: str, *,\n        ctx: context.ContextLevel) -> typing.Optional[sn.Name]:\n    <IND>schema_module = ctx.modaliases.get(module)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/edgeql/compiler/schemactx.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/schemactx.py",
    "file_hunks_size": 8,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/schemactx.py:189:59 Incompatible parameter type [6]: Expected `s_types.Type` for 2nd positional only parameter to call `dict.__setitem__` but got `s_abc.Type`.",
    "message": " Expected `s_types.Type` for 2nd positional only parameter to call `dict.__setitem__` but got `s_abc.Type`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 189,
    "warning_line": "        ctx.view_nodes[derived.get_name(ctx.env.schema)] = derived"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/edgeql/compiler/stmt.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/stmt.py",
    "file_hunks_size": 11,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/stmt.py:108:12 Incompatible attribute type [8]: Attribute `offset` declared in class `irast.SelectStmt` has type `irast.Base` but is used as type `typing.Optional[irast.Set]`.",
    "message": " Attribute `offset` declared in class `irast.SelectStmt` has type `irast.Base` but is used as type `typing.Optional[irast.Set]`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 108,
    "warning_line": "            stmt.offset = clauses.compile_limit_offset_clause("
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/edgeql/compiler/stmt.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/stmt.py",
    "file_hunks_size": 11,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/stmt.py:111:12 Incompatible attribute type [8]: Attribute `limit` declared in class `irast.SelectStmt` has type `irast.Base` but is used as type `typing.Optional[irast.Set]`.",
    "message": " Attribute `limit` declared in class `irast.SelectStmt` has type `irast.Base` but is used as type `typing.Optional[irast.Set]`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 111,
    "warning_line": "            stmt.limit = clauses.compile_limit_offset_clause("
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/edgeql/compiler/stmt.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/stmt.py",
    "file_hunks_size": 11,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/stmt.py:161:38 Incompatible parameter type [6]: Expected `irast.Set` for 1st positional only parameter to call `pathctx.register_set_in_scope` but got `irast.Base`.",
    "message": " Expected `irast.Set` for 1st positional only parameter to call `pathctx.register_set_in_scope` but got `irast.Base`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 161,
    "warning_line": "        pathctx.register_set_in_scope(stmt.iterator_stmt, ctx=sctx)"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/edgeql/compiler/stmt.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/stmt.py",
    "file_hunks_size": 11,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/stmt.py:183:12 Incompatible attribute type [8]: Attribute `offset` declared in class `irast.SelectStmt` has type `irast.Base` but is used as type `typing.Optional[irast.Set]`.",
    "message": " Attribute `offset` declared in class `irast.SelectStmt` has type `irast.Base` but is used as type `typing.Optional[irast.Set]`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 183,
    "warning_line": "            stmt.offset = clauses.compile_limit_offset_clause("
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/edgeql/compiler/stmt.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/stmt.py",
    "file_hunks_size": 11,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/stmt.py:186:12 Incompatible attribute type [8]: Attribute `limit` declared in class `irast.SelectStmt` has type `irast.Base` but is used as type `typing.Optional[irast.Set]`.",
    "message": " Attribute `limit` declared in class `irast.SelectStmt` has type `irast.Base` but is used as type `typing.Optional[irast.Set]`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 186,
    "warning_line": "            stmt.limit = clauses.compile_limit_offset_clause("
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/edgeql/compiler/stmt.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/stmt.py",
    "file_hunks_size": 11,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/stmt.py:266:24 Incompatible parameter type [6]: Expected `qlast.Statement` for 2nd positional only parameter to call `init_stmt` but got `qlast.Base`.",
    "message": " Expected `qlast.Statement` for 2nd positional only parameter to call `init_stmt` but got `qlast.Base`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 266,
    "warning_line": "        init_stmt(stmt, expr, ctx=ictx, parent_ctx=ctx)"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/edgeql/compiler/stmt.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/stmt.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/stmt.py:273:44 Incompatible parameter type [6]: Expected `irast.Set` for 1st positional only parameter to call `setgen.get_set_type` but got `irast.Base`.",
    "message": " Expected `irast.Set` for 1st positional only parameter to call `setgen.get_set_type` but got `irast.Base`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 273,
    "warning_line": "        subject_stype = setgen.get_set_type(subject, ctx=ictx)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        subject = dispatch.compile(expr.subject, ctx=ictx)\n\n",
        "source_code_len": 60,
        "target_code": "        subject = dispatch.compile(expr.subject, ctx=ictx)\n        assert isinstance(subject, irast.Set)\n\n",
        "target_code_len": 106,
        "diff_format": "@@ -268,2 +268,3 @@\n         subject = dispatch.compile(expr.subject, ctx=ictx)\n+        assert isinstance(subject, irast.Set)\n \n",
        "source_code_with_indent": "        subject = dispatch.compile(expr.subject, ctx=ictx)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        subject = dispatch.compile(expr.subject, ctx=ictx)\n        assert isinstance(subject, irast.Set)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/edgeql/compiler/stmt.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/stmt.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/stmt.py:287:12 Incompatible parameter type [6]: Expected `irast.Set` for 1st positional only parameter to call `compile_query_subject` but got `irast.Base`.",
    "message": " Expected `irast.Set` for 1st positional only parameter to call `compile_query_subject` but got `irast.Base`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 287,
    "warning_line": "            subject,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        subject = dispatch.compile(expr.subject, ctx=ictx)\n\n",
        "source_code_len": 60,
        "target_code": "        subject = dispatch.compile(expr.subject, ctx=ictx)\n        assert isinstance(subject, irast.Set)\n\n",
        "target_code_len": 106,
        "diff_format": "@@ -268,2 +268,3 @@\n         subject = dispatch.compile(expr.subject, ctx=ictx)\n+        assert isinstance(subject, irast.Set)\n \n",
        "source_code_with_indent": "        subject = dispatch.compile(expr.subject, ctx=ictx)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        subject = dispatch.compile(expr.subject, ctx=ictx)\n        assert isinstance(subject, irast.Set)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/edgeql/compiler/stmt.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/stmt.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/stmt.py:295:49 Incompatible parameter type [6]: Expected `irast.Set` for 1st positional only parameter to call `setgen.get_set_type` but got `irast.Base`.",
    "message": " Expected `irast.Set` for 1st positional only parameter to call `setgen.get_set_type` but got `irast.Base`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 295,
    "warning_line": "        stmt_subject_stype = setgen.get_set_type(subject, ctx=ictx)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        subject = dispatch.compile(expr.subject, ctx=ictx)\n\n",
        "source_code_len": 60,
        "target_code": "        subject = dispatch.compile(expr.subject, ctx=ictx)\n        assert isinstance(subject, irast.Set)\n\n",
        "target_code_len": 106,
        "diff_format": "@@ -268,2 +268,3 @@\n         subject = dispatch.compile(expr.subject, ctx=ictx)\n+        assert isinstance(subject, irast.Set)\n \n",
        "source_code_with_indent": "        subject = dispatch.compile(expr.subject, ctx=ictx)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        subject = dispatch.compile(expr.subject, ctx=ictx)\n        assert isinstance(subject, irast.Set)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/edgeql/compiler/stmt.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/stmt.py",
    "file_hunks_size": 11,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/stmt.py:308:33 Incompatible parameter type [6]: Expected `qlast.Statement` for 2nd positional only parameter to call `fini_stmt` but got `qlast.Base`.",
    "message": " Expected `qlast.Statement` for 2nd positional only parameter to call `fini_stmt` but got `qlast.Base`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 308,
    "warning_line": "        result = fini_stmt(stmt, expr, ctx=ictx, parent_ctx=ctx)"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/edgeql/compiler/stmt.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/stmt.py",
    "file_hunks_size": 11,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/stmt.py:321:24 Incompatible parameter type [6]: Expected `qlast.Statement` for 2nd positional only parameter to call `init_stmt` but got `qlast.Base`.",
    "message": " Expected `qlast.Statement` for 2nd positional only parameter to call `init_stmt` but got `qlast.Base`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 321,
    "warning_line": "        init_stmt(stmt, expr, ctx=ictx, parent_ctx=ctx)"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/edgeql/compiler/stmt.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/stmt.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/stmt.py:337:12 Incompatible parameter type [6]: Expected `irast.Set` for 1st positional only parameter to call `compile_query_subject` but got `irast.Base`.",
    "message": " Expected `irast.Set` for 1st positional only parameter to call `compile_query_subject` but got `irast.Base`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 337,
    "warning_line": "            subject,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        subject = dispatch.compile(expr.subject, ctx=ictx)\n        subj_type = inference.infer_type(subject, ictx.env)\n",
        "source_code_len": 119,
        "target_code": "        subject = dispatch.compile(expr.subject, ctx=ictx)\n        assert isinstance(subject, irast.Set)\n\n        subj_type = inference.infer_type(subject, ictx.env)\n",
        "target_code_len": 166,
        "diff_format": "@@ -323,2 +324,4 @@\n         subject = dispatch.compile(expr.subject, ctx=ictx)\n+        assert isinstance(subject, irast.Set)\n+\n         subj_type = inference.infer_type(subject, ictx.env)\n",
        "source_code_with_indent": "        subject = dispatch.compile(expr.subject, ctx=ictx)\n        subj_type = inference.infer_type(subject, ictx.env)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        subject = dispatch.compile(expr.subject, ctx=ictx)\n        assert isinstance(subject, irast.Set)\n\n        subj_type = inference.infer_type(subject, ictx.env)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/edgeql/compiler/stmt.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/stmt.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/stmt.py:345:49 Incompatible parameter type [6]: Expected `irast.Set` for 1st positional only parameter to call `setgen.get_set_type` but got `irast.Base`.",
    "message": " Expected `irast.Set` for 1st positional only parameter to call `setgen.get_set_type` but got `irast.Base`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 345,
    "warning_line": "        stmt_subject_stype = setgen.get_set_type(subject, ctx=ictx)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        subject = dispatch.compile(expr.subject, ctx=ictx)\n        subj_type = inference.infer_type(subject, ictx.env)\n",
        "source_code_len": 119,
        "target_code": "        subject = dispatch.compile(expr.subject, ctx=ictx)\n        assert isinstance(subject, irast.Set)\n\n        subj_type = inference.infer_type(subject, ictx.env)\n",
        "target_code_len": 166,
        "diff_format": "@@ -323,2 +324,4 @@\n         subject = dispatch.compile(expr.subject, ctx=ictx)\n+        assert isinstance(subject, irast.Set)\n+\n         subj_type = inference.infer_type(subject, ictx.env)\n",
        "source_code_with_indent": "        subject = dispatch.compile(expr.subject, ctx=ictx)\n        subj_type = inference.infer_type(subject, ictx.env)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        subject = dispatch.compile(expr.subject, ctx=ictx)\n        assert isinstance(subject, irast.Set)\n\n        subj_type = inference.infer_type(subject, ictx.env)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/edgeql/compiler/stmt.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/stmt.py",
    "file_hunks_size": 11,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/stmt.py:358:33 Incompatible parameter type [6]: Expected `qlast.Statement` for 2nd positional only parameter to call `fini_stmt` but got `qlast.Base`.",
    "message": " Expected `qlast.Statement` for 2nd positional only parameter to call `fini_stmt` but got `qlast.Base`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 358,
    "warning_line": "        result = fini_stmt(stmt, expr, ctx=ictx, parent_ctx=ctx)"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/edgeql/compiler/stmt.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/stmt.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/stmt.py:387:24 Incompatible parameter type [6]: Expected `qlast.Statement` for 2nd positional only parameter to call `init_stmt` but got `qlast.Base`.",
    "message": " Expected `qlast.Statement` for 2nd positional only parameter to call `init_stmt` but got `qlast.Base`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 387,
    "warning_line": "        init_stmt(stmt, expr, ctx=ictx, parent_ctx=ctx)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def compile_DeleteQuery(\n        expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Base:\n    with ctx.subquery() as ictx:\n",
        "source_code_len": 129,
        "target_code": "def compile_DeleteQuery(\n        expr: qlast.DeleteQuery, *, ctx: context.ContextLevel) -> irast.Base:\n    with ctx.subquery() as ictx:\n",
        "target_code_len": 136,
        "diff_format": "@@ -364,3 +367,3 @@\n def compile_DeleteQuery(\n-        expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Base:\n+        expr: qlast.DeleteQuery, *, ctx: context.ContextLevel) -> irast.Base:\n     with ctx.subquery() as ictx:\n",
        "source_code_with_indent": "def compile_DeleteQuery(\n        expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Base:\n    <IND>with ctx.subquery() as ictx:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "def compile_DeleteQuery(\n        expr: qlast.DeleteQuery, *, ctx: context.ContextLevel) -> irast.Base:\n    <IND>with ctx.subquery() as ictx:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/edgeql/compiler/stmt.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/stmt.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/stmt.py:415:33 Incompatible parameter type [6]: Expected `qlast.Statement` for 2nd positional only parameter to call `fini_stmt` but got `qlast.Base`.",
    "message": " Expected `qlast.Statement` for 2nd positional only parameter to call `fini_stmt` but got `qlast.Base`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 415,
    "warning_line": "        result = fini_stmt(stmt, expr, ctx=ictx, parent_ctx=ctx)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def compile_DeleteQuery(\n        expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Base:\n    with ctx.subquery() as ictx:\n",
        "source_code_len": 129,
        "target_code": "def compile_DeleteQuery(\n        expr: qlast.DeleteQuery, *, ctx: context.ContextLevel) -> irast.Base:\n    with ctx.subquery() as ictx:\n",
        "target_code_len": 136,
        "diff_format": "@@ -364,3 +367,3 @@\n def compile_DeleteQuery(\n-        expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Base:\n+        expr: qlast.DeleteQuery, *, ctx: context.ContextLevel) -> irast.Base:\n     with ctx.subquery() as ictx:\n",
        "source_code_with_indent": "def compile_DeleteQuery(\n        expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Base:\n    <IND>with ctx.subquery() as ictx:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "def compile_DeleteQuery(\n        expr: qlast.DeleteQuery, *, ctx: context.ContextLevel) -> irast.Base:\n    <IND>with ctx.subquery() as ictx:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/edgeql/compiler/stmt.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/stmt.py",
    "file_hunks_size": 11,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/stmt.py:427:33 Incompatible parameter type [6]: Expected `context.CompilerContext` for 4th parameter `ctx` to call `viewgen.process_view` but got `context.ContextLevel`.",
    "message": " Expected `context.CompilerContext` for 4th parameter `ctx` to call `viewgen.process_view` but got `context.ContextLevel`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 427,
    "warning_line": "        elements=shape.elements, ctx=ctx)"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/edgeql/compiler/stmt.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/stmt.py",
    "file_hunks_size": 11,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/stmt.py:473:44 Incompatible parameter type [6]: Expected `context.CompilerContext` for 2nd parameter `ctx` to call `pathctx.get_path_id` but got `context.ContextLevel`.",
    "message": " Expected `context.CompilerContext` for 2nd parameter `ctx` to call `pathctx.get_path_id` but got `context.ContextLevel`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 473,
    "warning_line": "        path_id = pathctx.get_path_id(view, ctx=parent_ctx)"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/edgeql/compiler/stmt.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/stmt.py",
    "file_hunks_size": 11,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/stmt.py:481:44 Incompatible parameter type [6]: Expected `context.CompilerContext` for 2nd parameter `ctx` to call `pathctx.get_path_id` but got `context.ContextLevel`.",
    "message": " Expected `context.CompilerContext` for 2nd parameter `ctx` to call `pathctx.get_path_id` but got `context.ContextLevel`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 481,
    "warning_line": "        path_id = pathctx.get_path_id(view, ctx=parent_ctx)"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/edgeql/compiler/stmt.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/stmt.py",
    "file_hunks_size": 11,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/stmt.py:659:33 Incompatible parameter type [6]: Expected `context.CompilerContext` for 8th parameter `ctx` to call `viewgen.process_view` but got `context.ContextLevel`.",
    "message": " Expected `context.CompilerContext` for 8th parameter `ctx` to call `viewgen.process_view` but got `context.ContextLevel`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 659,
    "warning_line": "            is_update=is_update, ctx=ctx)"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/edgeql/compiler/stmtctx.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/stmtctx.py",
    "file_hunks_size": 18,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/stmtctx.py:357:4 Incompatible return type [7]: Expected `qlast.Expr` but got `irast.Set`.",
    "message": " Expected `qlast.Expr` but got `irast.Set`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 357,
    "warning_line": "    return step",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        name: str, anchor: typing.Union[qlast.Expr, s_obj.Object], *,\n        ctx: context.ContextLevel) -> qlast.Expr:\n\n",
        "source_code_len": 121,
        "target_code": "        name: str, anchor: typing.Union[qlast.Expr, s_obj.Object], *,\n        ctx: context.ContextLevel) -> irast.Set:\n\n",
        "target_code_len": 120,
        "diff_format": "@@ -275,3 +275,3 @@\n         name: str, anchor: typing.Union[qlast.Expr, s_obj.Object], *,\n-        ctx: context.ContextLevel) -> qlast.Expr:\n+        ctx: context.ContextLevel) -> irast.Set:\n \n",
        "source_code_with_indent": "        name: str, anchor: typing.Union[qlast.Expr, s_obj.Object], *,\n        ctx: context.ContextLevel) -> qlast.Expr:\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        name: str, anchor: typing.Union[qlast.Expr, s_obj.Object], *,\n        ctx: context.ContextLevel) -> irast.Set:\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/edgeql/compiler/stmtctx.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/stmtctx.py",
    "file_hunks_size": 18,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/stmtctx.py:365:28 Incompatible parameter type [6]: Expected `irast.Set` for 2nd positional only parameter to call `dict.__setitem__` but got `qlast.Expr`.",
    "message": " Expected `irast.Set` for 2nd positional only parameter to call `dict.__setitem__` but got `qlast.Expr`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 365,
    "warning_line": "        ctx.anchors[name] = compile_anchor(name, val, ctx=ctx)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        name: str, anchor: typing.Union[qlast.Expr, s_obj.Object], *,\n        ctx: context.ContextLevel) -> qlast.Expr:\n\n",
        "source_code_len": 121,
        "target_code": "        name: str, anchor: typing.Union[qlast.Expr, s_obj.Object], *,\n        ctx: context.ContextLevel) -> irast.Set:\n\n",
        "target_code_len": 120,
        "diff_format": "@@ -275,3 +275,3 @@\n         name: str, anchor: typing.Union[qlast.Expr, s_obj.Object], *,\n-        ctx: context.ContextLevel) -> qlast.Expr:\n+        ctx: context.ContextLevel) -> irast.Set:\n \n",
        "source_code_with_indent": "        name: str, anchor: typing.Union[qlast.Expr, s_obj.Object], *,\n        ctx: context.ContextLevel) -> qlast.Expr:\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        name: str, anchor: typing.Union[qlast.Expr, s_obj.Object], *,\n        ctx: context.ContextLevel) -> irast.Set:\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/edgeql/compiler/stmtctx.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/stmtctx.py",
    "file_hunks_size": 18,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/stmtctx.py:415:55 Incompatible parameter type [6]: Expected `irast.Set` for 1st positional only parameter to call `setgen.get_set_type` but got `irast.Base`.",
    "message": " Expected `irast.Set` for 1st positional only parameter to call `setgen.get_set_type` but got `irast.Base`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 415,
    "warning_line": "        ctx.aliased_views[alias] = setgen.get_set_type(view_set, ctx=ctx)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        view_set = dispatch.compile(astutils.ensure_qlstmt(expr), ctx=subctx)\n\n",
        "source_code_len": 79,
        "target_code": "        view_set = dispatch.compile(astutils.ensure_qlstmt(expr), ctx=subctx)\n        assert isinstance(view_set, irast.Set)\n\n",
        "target_code_len": 126,
        "diff_format": "@@ -407,2 +413,3 @@\n         view_set = dispatch.compile(astutils.ensure_qlstmt(expr), ctx=subctx)\n+        assert isinstance(view_set, irast.Set)\n \n",
        "source_code_with_indent": "        view_set = dispatch.compile(astutils.ensure_qlstmt(expr), ctx=subctx)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        view_set = dispatch.compile(astutils.ensure_qlstmt(expr), ctx=subctx)\n        assert isinstance(view_set, irast.Set)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/edgeql/compiler/stmtctx.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/stmtctx.py",
    "file_hunks_size": 18,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/stmtctx.py:416:27 Incompatible parameter type [6]: Expected `irast.Set` for 1st positional only parameter to call `dict.__setitem__` but got `irast.Base`.",
    "message": " Expected `irast.Set` for 1st positional only parameter to call `dict.__setitem__` but got `irast.Base`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 416,
    "warning_line": "        ctx.path_scope_map[view_set] = subctx.path_scope",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        view_set = dispatch.compile(astutils.ensure_qlstmt(expr), ctx=subctx)\n\n",
        "source_code_len": 79,
        "target_code": "        view_set = dispatch.compile(astutils.ensure_qlstmt(expr), ctx=subctx)\n        assert isinstance(view_set, irast.Set)\n\n",
        "target_code_len": 126,
        "diff_format": "@@ -407,2 +413,3 @@\n         view_set = dispatch.compile(astutils.ensure_qlstmt(expr), ctx=subctx)\n+        assert isinstance(view_set, irast.Set)\n \n",
        "source_code_with_indent": "        view_set = dispatch.compile(astutils.ensure_qlstmt(expr), ctx=subctx)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        view_set = dispatch.compile(astutils.ensure_qlstmt(expr), ctx=subctx)\n        assert isinstance(view_set, irast.Set)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/edgeql/compiler/stmtctx.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/stmtctx.py",
    "file_hunks_size": 18,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/stmtctx.py:417:43 Incompatible parameter type [6]: Expected `irast.Set` for 2nd positional only parameter to call `dict.__setitem__` but got `irast.Base`.",
    "message": " Expected `irast.Set` for 2nd positional only parameter to call `dict.__setitem__` but got `irast.Base`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 417,
    "warning_line": "        ctx.expr_view_cache[expr, alias] = view_set",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        view_set = dispatch.compile(astutils.ensure_qlstmt(expr), ctx=subctx)\n\n",
        "source_code_len": 79,
        "target_code": "        view_set = dispatch.compile(astutils.ensure_qlstmt(expr), ctx=subctx)\n        assert isinstance(view_set, irast.Set)\n\n",
        "target_code_len": 126,
        "diff_format": "@@ -407,2 +413,3 @@\n         view_set = dispatch.compile(astutils.ensure_qlstmt(expr), ctx=subctx)\n+        assert isinstance(view_set, irast.Set)\n \n",
        "source_code_with_indent": "        view_set = dispatch.compile(astutils.ensure_qlstmt(expr), ctx=subctx)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        view_set = dispatch.compile(astutils.ensure_qlstmt(expr), ctx=subctx)\n        assert isinstance(view_set, irast.Set)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/edgeql/compiler/stmtctx.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/stmtctx.py",
    "file_hunks_size": 18,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/stmtctx.py:419:4 Incompatible return type [7]: Expected `irast.Set` but got `irast.Base`.",
    "message": " Expected `irast.Set` but got `irast.Base`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 419,
    "warning_line": "    return view_set",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        view_set = dispatch.compile(astutils.ensure_qlstmt(expr), ctx=subctx)\n\n",
        "source_code_len": 79,
        "target_code": "        view_set = dispatch.compile(astutils.ensure_qlstmt(expr), ctx=subctx)\n        assert isinstance(view_set, irast.Set)\n\n",
        "target_code_len": 126,
        "diff_format": "@@ -407,2 +413,3 @@\n         view_set = dispatch.compile(astutils.ensure_qlstmt(expr), ctx=subctx)\n+        assert isinstance(view_set, irast.Set)\n \n",
        "source_code_with_indent": "        view_set = dispatch.compile(astutils.ensure_qlstmt(expr), ctx=subctx)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        view_set = dispatch.compile(astutils.ensure_qlstmt(expr), ctx=subctx)\n        assert isinstance(view_set, irast.Set)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/edgeql/compiler/stmtctx.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/stmtctx.py",
    "file_hunks_size": 18,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/stmtctx.py:425:39 Incompatible parameter type [6]: Expected `s_types.Type` for 1st positional only parameter to call `typing.Mapping.get` but got `s_obj.Object`.",
    "message": " Expected `s_types.Type` for 1st positional only parameter to call `typing.Mapping.get` but got `s_obj.Object`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 425,
    "warning_line": "    vc = ctx.env.schema_view_cache.get(viewcls)"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/edgeql/compiler/stmtctx.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/stmtctx.py",
    "file_hunks_size": 18,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/stmtctx.py:427:8 Incompatible return type [7]: Expected `irast.Set` but got `s_types.Type`.",
    "message": " Expected `irast.Set` but got `s_types.Type`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 427,
    "warning_line": "        return vc"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/edgeql/compiler/stmtctx.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/stmtctx.py",
    "file_hunks_size": 18,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/stmtctx.py:440:34 Incompatible parameter type [6]: Expected `s_types.Type` for 1st positional only parameter to call `dict.__setitem__` but got `s_obj.Object`.",
    "message": " Expected `s_types.Type` for 1st positional only parameter to call `dict.__setitem__` but got `s_obj.Object`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 440,
    "warning_line": "        ctx.env.schema_view_cache[viewcls] = vc"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/edgeql/compiler/stmtctx.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/stmtctx.py",
    "file_hunks_size": 18,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/stmtctx.py:454:34 Incompatible parameter type [6]: Expected `irast.Set` for 1st parameter `ir_set` to call `pathctx.get_set_scope` but got `irast.Expr`.",
    "message": " Expected `irast.Set` for 1st parameter `ir_set` to call `pathctx.get_set_scope` but got `irast.Expr`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 454,
    "warning_line": "    scope = pathctx.get_set_scope(ir_set=irexpr, ctx=ctx)"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/edgeql/compiler/stmtctx.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/stmtctx.py",
    "file_hunks_size": 18,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/stmtctx.py:535:12 Incompatible parameter type [6]: Expected `edb.common.context.ParserContext` for 2nd parameter `source_ctx` to call `context.PendingCardinality.__init__` but got `typing.Optional[edb.common.context.ParserContext]`.",
    "message": " Expected `edb.common.context.ParserContext` for 2nd parameter `source_ctx` to call `context.PendingCardinality.__init__` but got `typing.Optional[edb.common.context.ParserContext]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 535,
    "warning_line": "            source_ctx=source_ctx,"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/edgeql/compiler/stmtctx.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/stmtctx.py",
    "file_hunks_size": 18,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/stmtctx.py:606:12 Incompatible parameter type [6]: Expected `s_pointers.Pointer` for 1st positional only parameter to call `once_pointer_cardinality_is_inferred` but got `s_pointers.PointerLike`.",
    "message": " Expected `s_pointers.Pointer` for 1st positional only parameter to call `once_pointer_cardinality_is_inferred` but got `s_pointers.PointerLike`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 606,
    "warning_line": "            ptrcls, _update_ref_cardinality, ctx=ctx)"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/edgeql/compiler/stmtctx.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/stmtctx.py",
    "file_hunks_size": 18,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/stmtctx.py:612:34 Incompatible parameter type [6]: Expected `irast.Set` for 1st parameter `ir_set` to call `pathctx.get_set_scope` but got `irast.Base`.",
    "message": " Expected `irast.Set` for 1st parameter `ir_set` to call `pathctx.get_set_scope` but got `irast.Base`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 612,
    "warning_line": "    scope = pathctx.get_set_scope(ir_set=irexpr, ctx=ctx)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def enforce_singleton_now(\n        irexpr: irast.Base, *,\n        ctx: context.ContextLevel) -> None:\n",
        "source_code_len": 102,
        "target_code": "def enforce_singleton_now(\n        irexpr: irast.Set, *,\n        ctx: context.ContextLevel) -> None:\n",
        "target_code_len": 101,
        "diff_format": "@@ -609,3 +618,3 @@\n def enforce_singleton_now(\n-        irexpr: irast.Base, *,\n+        irexpr: irast.Set, *,\n         ctx: context.ContextLevel) -> None:\n",
        "source_code_with_indent": "<DED><DED>def enforce_singleton_now(\n        irexpr: irast.Base, *,\n        ctx: context.ContextLevel) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED><DED>def enforce_singleton_now(\n        irexpr: irast.Set, *,\n        ctx: context.ContextLevel) -> None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/edgeql/compiler/typegen.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/typegen.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/typegen.py:88:42 Incompatible parameter type [6]: Expected `qlast.TypeName` for 1st positional only parameter to call `_ql_typeref_to_ir_typeref` but got `qlast.TypeExpr`.",
    "message": " Expected `qlast.TypeName` for 1st positional only parameter to call `_ql_typeref_to_ir_typeref` but got `qlast.TypeExpr`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 88,
    "warning_line": "        return [_ql_typeref_to_ir_typeref(ql_t, ctx=ctx)]",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from edb.schema import abc as s_abc\nfrom edb.schema import objects as s_obj\nfrom edb.schema import types as s_types\n\n",
        "source_code_len": 117,
        "target_code": "from edb.schema import abc as s_abc\nfrom edb.schema import types as s_types\nfrom edb.schema import utils as s_utils\n\n",
        "target_code_len": 117,
        "diff_format": "@@ -33,4 +32,4 @@\n from edb.schema import abc as s_abc\n-from edb.schema import objects as s_obj\n from edb.schema import types as s_types\n+from edb.schema import utils as s_utils\n \n",
        "source_code_with_indent": "from edb.schema import abc as s_abc\nfrom edb.schema import objects as s_obj\nfrom edb.schema import types as s_types\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from edb.schema import abc as s_abc\nfrom edb.schema import types as s_types\nfrom edb.schema import utils as s_utils\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef type_to_ql_typeref(t: s_obj.Object, *,\n                       _name=None,\n",
        "source_code_len": 79,
        "target_code": "\ndef type_to_ql_typeref(t: s_types.Type, *,\n                       _name=None,\n",
        "target_code_len": 79,
        "diff_format": "@@ -45,3 +44,3 @@\n \n-def type_to_ql_typeref(t: s_obj.Object, *,\n+def type_to_ql_typeref(t: s_types.Type, *,\n                        _name=None,\n",
        "source_code_with_indent": "\ndef type_to_ql_typeref(t: s_obj.Object, *,\n                       _name=None,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\ndef type_to_ql_typeref(t: s_types.Type, *,\n                       _name=None,\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef ql_typeref_to_ir_typeref(\n        ql_t: qlast.TypeExpr, *,\n        ctx: context.ContextLevel) -> typing.Union[irast.Array, irast.TypeRef]:\n\n    types = _ql_typeexpr_to_ir_typeref(ql_t, ctx=ctx)\n    if len(types) > 1:\n        return irast.Array(\n            elements=types\n        )\n    else:\n",
        "source_code_len": 297,
        "target_code": "\ndef ql_typeexpr_to_ir_typeref(\n        ql_t: qlast.TypeExpr, *,\n        ctx: context.ContextLevel) -> irast.TypeRef:\n\n    stype = ql_typeexpr_to_type(ql_t, ctx=ctx)\n    return irtyputils.type_to_typeref(ctx.env.schema, stype)\n\n\ndef ql_typeexpr_to_type(\n        ql_t: qlast.TypeExpr, *,\n        ctx: context.ContextLevel) -> s_types.Type:\n\n    types = _ql_typeexpr_to_type(ql_t, ctx=ctx)\n    if len(types) > 1:\n        ctx.env.schema, uniontype = s_utils.get_union_type(\n            ctx.env.schema, types)\n        return uniontype\n    else:\n",
        "target_code_len": 541,
        "diff_format": "@@ -52,11 +51,19 @@\n \n-def ql_typeref_to_ir_typeref(\n+def ql_typeexpr_to_ir_typeref(\n         ql_t: qlast.TypeExpr, *,\n-        ctx: context.ContextLevel) -> typing.Union[irast.Array, irast.TypeRef]:\n+        ctx: context.ContextLevel) -> irast.TypeRef:\n \n-    types = _ql_typeexpr_to_ir_typeref(ql_t, ctx=ctx)\n+    stype = ql_typeexpr_to_type(ql_t, ctx=ctx)\n+    return irtyputils.type_to_typeref(ctx.env.schema, stype)\n+\n+\n+def ql_typeexpr_to_type(\n+        ql_t: qlast.TypeExpr, *,\n+        ctx: context.ContextLevel) -> s_types.Type:\n+\n+    types = _ql_typeexpr_to_type(ql_t, ctx=ctx)\n     if len(types) > 1:\n-        return irast.Array(\n-            elements=types\n-        )\n+        ctx.env.schema, uniontype = s_utils.get_union_type(\n+            ctx.env.schema, types)\n+        return uniontype\n     else:\n",
        "source_code_with_indent": "\n<DED>def ql_typeref_to_ir_typeref(\n        ql_t: qlast.TypeExpr, *,\n        ctx: context.ContextLevel) -> typing.Union[irast.Array, irast.TypeRef]:\n\n    <IND>types = _ql_typeexpr_to_ir_typeref(ql_t, ctx=ctx)\n    if len(types) > 1:\n        <IND>return irast.Array(\n            elements=types\n        )\n    <DED>else:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def ql_typeexpr_to_ir_typeref(\n        ql_t: qlast.TypeExpr, *,\n        ctx: context.ContextLevel) -> irast.TypeRef:\n\n    <IND>stype = ql_typeexpr_to_type(ql_t, ctx=ctx)\n    return irtyputils.type_to_typeref(ctx.env.schema, stype)\n\n\n<DED>def ql_typeexpr_to_type(\n        ql_t: qlast.TypeExpr, *,\n        ctx: context.ContextLevel) -> s_types.Type:\n\n    <IND>types = _ql_typeexpr_to_type(ql_t, ctx=ctx)\n    if len(types) > 1:\n        <IND>ctx.env.schema, uniontype = s_utils.get_union_type(\n            ctx.env.schema, types)\n        return uniontype\n    <DED>else:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _ql_typeexpr_to_ir_typeref(\n        ql_t: qlast.TypeExpr, *,\n        ctx: context.ContextLevel) -> typing.List[irast.TypeRef]:\n\n",
        "source_code_len": 133,
        "target_code": "\ndef _ql_typeexpr_to_type(\n        ql_t: qlast.TypeExpr, *,\n        ctx: context.ContextLevel) -> typing.List[s_types.Type]:\n\n",
        "target_code_len": 126,
        "diff_format": "@@ -65,5 +72,5 @@\n \n-def _ql_typeexpr_to_ir_typeref(\n+def _ql_typeexpr_to_type(\n         ql_t: qlast.TypeExpr, *,\n-        ctx: context.ContextLevel) -> typing.List[irast.TypeRef]:\n+        ctx: context.ContextLevel) -> typing.List[s_types.Type]:\n \n",
        "source_code_with_indent": "\n<DED><DED>def _ql_typeexpr_to_ir_typeref(\n        ql_t: qlast.TypeExpr, *,\n        ctx: context.ContextLevel) -> typing.List[irast.TypeRef]:\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED><DED>def _ql_typeexpr_to_type(\n        ql_t: qlast.TypeExpr, *,\n        ctx: context.ContextLevel) -> typing.List[s_types.Type]:\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        return [irtyputils.type_to_typeref(subctx.env.schema, stype)]\n\n",
        "source_code_len": 72,
        "target_code": "\n        return [stype]\n\n",
        "target_code_len": 25,
        "diff_format": "@@ -75,3 +82,3 @@\n \n-        return [irtyputils.type_to_typeref(subctx.env.schema, stype)]\n+        return [stype]\n \n",
        "source_code_with_indent": "\n        <DED>return [irtyputils.type_to_typeref(subctx.env.schema, stype)]\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        <DED>return [stype]\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        if ql_t.op == '|':\n            return (_ql_typeexpr_to_ir_typeref(ql_t.left, ctx=ctx) +\n                    _ql_typeexpr_to_ir_typeref(ql_t.right, ctx=ctx))\n\n",
        "source_code_len": 166,
        "target_code": "        if ql_t.op == '|':\n            return (_ql_typeexpr_to_type(ql_t.left, ctx=ctx) +\n                    _ql_typeexpr_to_type(ql_t.right, ctx=ctx))\n\n",
        "target_code_len": 154,
        "diff_format": "@@ -79,4 +86,4 @@\n         if ql_t.op == '|':\n-            return (_ql_typeexpr_to_ir_typeref(ql_t.left, ctx=ctx) +\n-                    _ql_typeexpr_to_ir_typeref(ql_t.right, ctx=ctx))\n+            return (_ql_typeexpr_to_type(ql_t.left, ctx=ctx) +\n+                    _ql_typeexpr_to_type(ql_t.right, ctx=ctx))\n \n",
        "source_code_with_indent": "        <IND>if ql_t.op == '|':\n            <IND>return (_ql_typeexpr_to_ir_typeref(ql_t.left, ctx=ctx) +\n                    _ql_typeexpr_to_ir_typeref(ql_t.right, ctx=ctx))\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>if ql_t.op == '|':\n            <IND>return (_ql_typeexpr_to_type(ql_t.left, ctx=ctx) +\n                    _ql_typeexpr_to_type(ql_t.right, ctx=ctx))\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    else:\n        return [_ql_typeref_to_ir_typeref(ql_t, ctx=ctx)]\n\n\ndef _ql_typeref_to_ir_typeref(\n        ql_t: qlast.TypeName, *,\n        ctx: context.ContextLevel) -> irast.TypeRef:\n\n    stype = ql_typeref_to_type(ql_t, ctx=ctx)\n    return irtyputils.type_to_typeref(ctx.env.schema, stype)\n\n\ndef ql_typeref_to_type(\n        ql_t: qlast.TypeName, *,\n        ctx: context.ContextLevel) -> s_obj.Object:\n    if ql_t.subtypes:\n        coll = s_types.Collection.get_class(\n            ql_t.maintype.name)\n\n        if issubclass(coll, s_abc.Tuple):\n            subtypes = collections.OrderedDict()\n            named = False\n",
        "source_code_len": 624,
        "target_code": "\n    elif isinstance(ql_t, qlast.TypeName):\n        return [_ql_typename_to_type(ql_t, ctx=ctx)]\n\n    else:\n        raise errors.InternalServerError(f'unexpected TypeExpr: {ql_t!r}')\n\n\ndef _ql_typename_to_type(\n        ql_t: qlast.TypeName, *,\n        ctx: context.ContextLevel) -> s_types.Type:\n    if ql_t.subtypes:\n        assert isinstance(ql_t.maintype, qlast.ObjectRef)\n        coll = s_types.Collection.get_class(ql_t.maintype.name)\n\n        if issubclass(coll, s_abc.Tuple):\n            t_subtypes = {}\n            named = False\n",
        "target_code_len": 537,
        "diff_format": "@@ -86,23 +93,18 @@\n \n+    elif isinstance(ql_t, qlast.TypeName):\n+        return [_ql_typename_to_type(ql_t, ctx=ctx)]\n+\n     else:\n-        return [_ql_typeref_to_ir_typeref(ql_t, ctx=ctx)]\n+        raise errors.InternalServerError(f'unexpected TypeExpr: {ql_t!r}')\n \n \n-def _ql_typeref_to_ir_typeref(\n+def _ql_typename_to_type(\n         ql_t: qlast.TypeName, *,\n-        ctx: context.ContextLevel) -> irast.TypeRef:\n-\n-    stype = ql_typeref_to_type(ql_t, ctx=ctx)\n-    return irtyputils.type_to_typeref(ctx.env.schema, stype)\n-\n-\n-def ql_typeref_to_type(\n-        ql_t: qlast.TypeName, *,\n-        ctx: context.ContextLevel) -> s_obj.Object:\n+        ctx: context.ContextLevel) -> s_types.Type:\n     if ql_t.subtypes:\n-        coll = s_types.Collection.get_class(\n-            ql_t.maintype.name)\n+        assert isinstance(ql_t.maintype, qlast.ObjectRef)\n+        coll = s_types.Collection.get_class(ql_t.maintype.name)\n \n         if issubclass(coll, s_abc.Tuple):\n-            subtypes = collections.OrderedDict()\n+            t_subtypes = {}\n             named = False\n",
        "source_code_with_indent": "\n    <DED>else:\n        <IND>return [_ql_typeref_to_ir_typeref(ql_t, ctx=ctx)]\n\n\n<DED><DED>def _ql_typeref_to_ir_typeref(\n        ql_t: qlast.TypeName, *,\n        ctx: context.ContextLevel) -> irast.TypeRef:\n\n    <IND>stype = ql_typeref_to_type(ql_t, ctx=ctx)\n    return irtyputils.type_to_typeref(ctx.env.schema, stype)\n\n\n<DED>def ql_typeref_to_type(\n        ql_t: qlast.TypeName, *,\n        ctx: context.ContextLevel) -> s_obj.Object:\n    <IND>if ql_t.subtypes:\n        <IND>coll = s_types.Collection.get_class(\n            ql_t.maintype.name)\n\n        if issubclass(coll, s_abc.Tuple):\n            <IND>subtypes = collections.OrderedDict()\n            named = False\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>elif isinstance(ql_t, qlast.TypeName):\n        <IND>return [_ql_typename_to_type(ql_t, ctx=ctx)]\n\n    <DED>else:\n        <IND>raise errors.InternalServerError(f'unexpected TypeExpr: {ql_t!r}')\n\n\n<DED><DED>def _ql_typename_to_type(\n        ql_t: qlast.TypeName, *,\n        ctx: context.ContextLevel) -> s_types.Type:\n    <IND>if ql_t.subtypes:\n        <IND>assert isinstance(ql_t.maintype, qlast.ObjectRef)\n        coll = s_types.Collection.get_class(ql_t.maintype.name)\n\n        if issubclass(coll, s_abc.Tuple):\n            <IND>t_subtypes = {}\n            named = False\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n                subtypes[type_name] = ql_typeref_to_type(st, ctx=ctx)\n\n            return coll.from_subtypes(\n                ctx.env.schema, subtypes, {'named': named})\n        else:\n            subtypes = []\n            for st in ql_t.subtypes:\n                subtypes.append(ql_typeref_to_type(st, ctx=ctx))\n\n            return coll.from_subtypes(ctx.env.schema, subtypes)\n    else:\n",
        "source_code_len": 388,
        "target_code": "\n                t_subtypes[type_name] = ql_typeexpr_to_type(st, ctx=ctx)\n\n            return coll.from_subtypes(\n                ctx.env.schema, t_subtypes, {'named': named})\n        else:\n            a_subtypes = []\n            for st in ql_t.subtypes:\n                a_subtypes.append(ql_typeexpr_to_type(st, ctx=ctx))\n\n            return coll.from_subtypes(ctx.env.schema, a_subtypes)\n    else:\n",
        "target_code_len": 400,
        "diff_format": "@@ -115,12 +117,12 @@\n \n-                subtypes[type_name] = ql_typeref_to_type(st, ctx=ctx)\n+                t_subtypes[type_name] = ql_typeexpr_to_type(st, ctx=ctx)\n \n             return coll.from_subtypes(\n-                ctx.env.schema, subtypes, {'named': named})\n+                ctx.env.schema, t_subtypes, {'named': named})\n         else:\n-            subtypes = []\n+            a_subtypes = []\n             for st in ql_t.subtypes:\n-                subtypes.append(ql_typeref_to_type(st, ctx=ctx))\n+                a_subtypes.append(ql_typeexpr_to_type(st, ctx=ctx))\n \n-            return coll.from_subtypes(ctx.env.schema, subtypes)\n+            return coll.from_subtypes(ctx.env.schema, a_subtypes)\n     else:\n",
        "source_code_with_indent": "\n                <DED>subtypes[type_name] = ql_typeref_to_type(st, ctx=ctx)\n\n            <DED>return coll.from_subtypes(\n                ctx.env.schema, subtypes, {'named': named})\n        <DED>else:\n            <IND>subtypes = []\n            for st in ql_t.subtypes:\n                <IND>subtypes.append(ql_typeref_to_type(st, ctx=ctx))\n\n            <DED>return coll.from_subtypes(ctx.env.schema, subtypes)\n    <DED><DED>else:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n                <DED>t_subtypes[type_name] = ql_typeexpr_to_type(st, ctx=ctx)\n\n            <DED>return coll.from_subtypes(\n                ctx.env.schema, t_subtypes, {'named': named})\n        <DED>else:\n            <IND>a_subtypes = []\n            for st in ql_t.subtypes:\n                <IND>a_subtypes.append(ql_typeexpr_to_type(st, ctx=ctx))\n\n            <DED>return coll.from_subtypes(ctx.env.schema, a_subtypes)\n    <DED><DED>else:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/edgeql/compiler/typegen.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/typegen.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/typegen.py:96:54 Incompatible parameter type [6]: Expected `s_types.Type` for 2nd positional only parameter to call `irtyputils.type_to_typeref` but got `s_obj.Object`.",
    "message": " Expected `s_types.Type` for 2nd positional only parameter to call `irtyputils.type_to_typeref` but got `s_obj.Object`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 96,
    "warning_line": "    return irtyputils.type_to_typeref(ctx.env.schema, stype)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from edb.schema import abc as s_abc\nfrom edb.schema import objects as s_obj\nfrom edb.schema import types as s_types\n\n",
        "source_code_len": 117,
        "target_code": "from edb.schema import abc as s_abc\nfrom edb.schema import types as s_types\nfrom edb.schema import utils as s_utils\n\n",
        "target_code_len": 117,
        "diff_format": "@@ -33,4 +32,4 @@\n from edb.schema import abc as s_abc\n-from edb.schema import objects as s_obj\n from edb.schema import types as s_types\n+from edb.schema import utils as s_utils\n \n",
        "source_code_with_indent": "from edb.schema import abc as s_abc\nfrom edb.schema import objects as s_obj\nfrom edb.schema import types as s_types\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from edb.schema import abc as s_abc\nfrom edb.schema import types as s_types\nfrom edb.schema import utils as s_utils\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef type_to_ql_typeref(t: s_obj.Object, *,\n                       _name=None,\n",
        "source_code_len": 79,
        "target_code": "\ndef type_to_ql_typeref(t: s_types.Type, *,\n                       _name=None,\n",
        "target_code_len": 79,
        "diff_format": "@@ -45,3 +44,3 @@\n \n-def type_to_ql_typeref(t: s_obj.Object, *,\n+def type_to_ql_typeref(t: s_types.Type, *,\n                        _name=None,\n",
        "source_code_with_indent": "\ndef type_to_ql_typeref(t: s_obj.Object, *,\n                       _name=None,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\ndef type_to_ql_typeref(t: s_types.Type, *,\n                       _name=None,\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef ql_typeref_to_ir_typeref(\n        ql_t: qlast.TypeExpr, *,\n        ctx: context.ContextLevel) -> typing.Union[irast.Array, irast.TypeRef]:\n\n    types = _ql_typeexpr_to_ir_typeref(ql_t, ctx=ctx)\n    if len(types) > 1:\n        return irast.Array(\n            elements=types\n        )\n    else:\n",
        "source_code_len": 297,
        "target_code": "\ndef ql_typeexpr_to_ir_typeref(\n        ql_t: qlast.TypeExpr, *,\n        ctx: context.ContextLevel) -> irast.TypeRef:\n\n    stype = ql_typeexpr_to_type(ql_t, ctx=ctx)\n    return irtyputils.type_to_typeref(ctx.env.schema, stype)\n\n\ndef ql_typeexpr_to_type(\n        ql_t: qlast.TypeExpr, *,\n        ctx: context.ContextLevel) -> s_types.Type:\n\n    types = _ql_typeexpr_to_type(ql_t, ctx=ctx)\n    if len(types) > 1:\n        ctx.env.schema, uniontype = s_utils.get_union_type(\n            ctx.env.schema, types)\n        return uniontype\n    else:\n",
        "target_code_len": 541,
        "diff_format": "@@ -52,11 +51,19 @@\n \n-def ql_typeref_to_ir_typeref(\n+def ql_typeexpr_to_ir_typeref(\n         ql_t: qlast.TypeExpr, *,\n-        ctx: context.ContextLevel) -> typing.Union[irast.Array, irast.TypeRef]:\n+        ctx: context.ContextLevel) -> irast.TypeRef:\n \n-    types = _ql_typeexpr_to_ir_typeref(ql_t, ctx=ctx)\n+    stype = ql_typeexpr_to_type(ql_t, ctx=ctx)\n+    return irtyputils.type_to_typeref(ctx.env.schema, stype)\n+\n+\n+def ql_typeexpr_to_type(\n+        ql_t: qlast.TypeExpr, *,\n+        ctx: context.ContextLevel) -> s_types.Type:\n+\n+    types = _ql_typeexpr_to_type(ql_t, ctx=ctx)\n     if len(types) > 1:\n-        return irast.Array(\n-            elements=types\n-        )\n+        ctx.env.schema, uniontype = s_utils.get_union_type(\n+            ctx.env.schema, types)\n+        return uniontype\n     else:\n",
        "source_code_with_indent": "\n<DED>def ql_typeref_to_ir_typeref(\n        ql_t: qlast.TypeExpr, *,\n        ctx: context.ContextLevel) -> typing.Union[irast.Array, irast.TypeRef]:\n\n    <IND>types = _ql_typeexpr_to_ir_typeref(ql_t, ctx=ctx)\n    if len(types) > 1:\n        <IND>return irast.Array(\n            elements=types\n        )\n    <DED>else:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def ql_typeexpr_to_ir_typeref(\n        ql_t: qlast.TypeExpr, *,\n        ctx: context.ContextLevel) -> irast.TypeRef:\n\n    <IND>stype = ql_typeexpr_to_type(ql_t, ctx=ctx)\n    return irtyputils.type_to_typeref(ctx.env.schema, stype)\n\n\n<DED>def ql_typeexpr_to_type(\n        ql_t: qlast.TypeExpr, *,\n        ctx: context.ContextLevel) -> s_types.Type:\n\n    <IND>types = _ql_typeexpr_to_type(ql_t, ctx=ctx)\n    if len(types) > 1:\n        <IND>ctx.env.schema, uniontype = s_utils.get_union_type(\n            ctx.env.schema, types)\n        return uniontype\n    <DED>else:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _ql_typeexpr_to_ir_typeref(\n        ql_t: qlast.TypeExpr, *,\n        ctx: context.ContextLevel) -> typing.List[irast.TypeRef]:\n\n",
        "source_code_len": 133,
        "target_code": "\ndef _ql_typeexpr_to_type(\n        ql_t: qlast.TypeExpr, *,\n        ctx: context.ContextLevel) -> typing.List[s_types.Type]:\n\n",
        "target_code_len": 126,
        "diff_format": "@@ -65,5 +72,5 @@\n \n-def _ql_typeexpr_to_ir_typeref(\n+def _ql_typeexpr_to_type(\n         ql_t: qlast.TypeExpr, *,\n-        ctx: context.ContextLevel) -> typing.List[irast.TypeRef]:\n+        ctx: context.ContextLevel) -> typing.List[s_types.Type]:\n \n",
        "source_code_with_indent": "\n<DED><DED>def _ql_typeexpr_to_ir_typeref(\n        ql_t: qlast.TypeExpr, *,\n        ctx: context.ContextLevel) -> typing.List[irast.TypeRef]:\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED><DED>def _ql_typeexpr_to_type(\n        ql_t: qlast.TypeExpr, *,\n        ctx: context.ContextLevel) -> typing.List[s_types.Type]:\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        return [irtyputils.type_to_typeref(subctx.env.schema, stype)]\n\n",
        "source_code_len": 72,
        "target_code": "\n        return [stype]\n\n",
        "target_code_len": 25,
        "diff_format": "@@ -75,3 +82,3 @@\n \n-        return [irtyputils.type_to_typeref(subctx.env.schema, stype)]\n+        return [stype]\n \n",
        "source_code_with_indent": "\n        <DED>return [irtyputils.type_to_typeref(subctx.env.schema, stype)]\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        <DED>return [stype]\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        if ql_t.op == '|':\n            return (_ql_typeexpr_to_ir_typeref(ql_t.left, ctx=ctx) +\n                    _ql_typeexpr_to_ir_typeref(ql_t.right, ctx=ctx))\n\n",
        "source_code_len": 166,
        "target_code": "        if ql_t.op == '|':\n            return (_ql_typeexpr_to_type(ql_t.left, ctx=ctx) +\n                    _ql_typeexpr_to_type(ql_t.right, ctx=ctx))\n\n",
        "target_code_len": 154,
        "diff_format": "@@ -79,4 +86,4 @@\n         if ql_t.op == '|':\n-            return (_ql_typeexpr_to_ir_typeref(ql_t.left, ctx=ctx) +\n-                    _ql_typeexpr_to_ir_typeref(ql_t.right, ctx=ctx))\n+            return (_ql_typeexpr_to_type(ql_t.left, ctx=ctx) +\n+                    _ql_typeexpr_to_type(ql_t.right, ctx=ctx))\n \n",
        "source_code_with_indent": "        <IND>if ql_t.op == '|':\n            <IND>return (_ql_typeexpr_to_ir_typeref(ql_t.left, ctx=ctx) +\n                    _ql_typeexpr_to_ir_typeref(ql_t.right, ctx=ctx))\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>if ql_t.op == '|':\n            <IND>return (_ql_typeexpr_to_type(ql_t.left, ctx=ctx) +\n                    _ql_typeexpr_to_type(ql_t.right, ctx=ctx))\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    else:\n        return [_ql_typeref_to_ir_typeref(ql_t, ctx=ctx)]\n\n\ndef _ql_typeref_to_ir_typeref(\n        ql_t: qlast.TypeName, *,\n        ctx: context.ContextLevel) -> irast.TypeRef:\n\n    stype = ql_typeref_to_type(ql_t, ctx=ctx)\n    return irtyputils.type_to_typeref(ctx.env.schema, stype)\n\n\ndef ql_typeref_to_type(\n        ql_t: qlast.TypeName, *,\n        ctx: context.ContextLevel) -> s_obj.Object:\n    if ql_t.subtypes:\n        coll = s_types.Collection.get_class(\n            ql_t.maintype.name)\n\n        if issubclass(coll, s_abc.Tuple):\n            subtypes = collections.OrderedDict()\n            named = False\n",
        "source_code_len": 624,
        "target_code": "\n    elif isinstance(ql_t, qlast.TypeName):\n        return [_ql_typename_to_type(ql_t, ctx=ctx)]\n\n    else:\n        raise errors.InternalServerError(f'unexpected TypeExpr: {ql_t!r}')\n\n\ndef _ql_typename_to_type(\n        ql_t: qlast.TypeName, *,\n        ctx: context.ContextLevel) -> s_types.Type:\n    if ql_t.subtypes:\n        assert isinstance(ql_t.maintype, qlast.ObjectRef)\n        coll = s_types.Collection.get_class(ql_t.maintype.name)\n\n        if issubclass(coll, s_abc.Tuple):\n            t_subtypes = {}\n            named = False\n",
        "target_code_len": 537,
        "diff_format": "@@ -86,23 +93,18 @@\n \n+    elif isinstance(ql_t, qlast.TypeName):\n+        return [_ql_typename_to_type(ql_t, ctx=ctx)]\n+\n     else:\n-        return [_ql_typeref_to_ir_typeref(ql_t, ctx=ctx)]\n+        raise errors.InternalServerError(f'unexpected TypeExpr: {ql_t!r}')\n \n \n-def _ql_typeref_to_ir_typeref(\n+def _ql_typename_to_type(\n         ql_t: qlast.TypeName, *,\n-        ctx: context.ContextLevel) -> irast.TypeRef:\n-\n-    stype = ql_typeref_to_type(ql_t, ctx=ctx)\n-    return irtyputils.type_to_typeref(ctx.env.schema, stype)\n-\n-\n-def ql_typeref_to_type(\n-        ql_t: qlast.TypeName, *,\n-        ctx: context.ContextLevel) -> s_obj.Object:\n+        ctx: context.ContextLevel) -> s_types.Type:\n     if ql_t.subtypes:\n-        coll = s_types.Collection.get_class(\n-            ql_t.maintype.name)\n+        assert isinstance(ql_t.maintype, qlast.ObjectRef)\n+        coll = s_types.Collection.get_class(ql_t.maintype.name)\n \n         if issubclass(coll, s_abc.Tuple):\n-            subtypes = collections.OrderedDict()\n+            t_subtypes = {}\n             named = False\n",
        "source_code_with_indent": "\n    <DED>else:\n        <IND>return [_ql_typeref_to_ir_typeref(ql_t, ctx=ctx)]\n\n\n<DED><DED>def _ql_typeref_to_ir_typeref(\n        ql_t: qlast.TypeName, *,\n        ctx: context.ContextLevel) -> irast.TypeRef:\n\n    <IND>stype = ql_typeref_to_type(ql_t, ctx=ctx)\n    return irtyputils.type_to_typeref(ctx.env.schema, stype)\n\n\n<DED>def ql_typeref_to_type(\n        ql_t: qlast.TypeName, *,\n        ctx: context.ContextLevel) -> s_obj.Object:\n    <IND>if ql_t.subtypes:\n        <IND>coll = s_types.Collection.get_class(\n            ql_t.maintype.name)\n\n        if issubclass(coll, s_abc.Tuple):\n            <IND>subtypes = collections.OrderedDict()\n            named = False\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>elif isinstance(ql_t, qlast.TypeName):\n        <IND>return [_ql_typename_to_type(ql_t, ctx=ctx)]\n\n    <DED>else:\n        <IND>raise errors.InternalServerError(f'unexpected TypeExpr: {ql_t!r}')\n\n\n<DED><DED>def _ql_typename_to_type(\n        ql_t: qlast.TypeName, *,\n        ctx: context.ContextLevel) -> s_types.Type:\n    <IND>if ql_t.subtypes:\n        <IND>assert isinstance(ql_t.maintype, qlast.ObjectRef)\n        coll = s_types.Collection.get_class(ql_t.maintype.name)\n\n        if issubclass(coll, s_abc.Tuple):\n            <IND>t_subtypes = {}\n            named = False\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n                subtypes[type_name] = ql_typeref_to_type(st, ctx=ctx)\n\n            return coll.from_subtypes(\n                ctx.env.schema, subtypes, {'named': named})\n        else:\n            subtypes = []\n            for st in ql_t.subtypes:\n                subtypes.append(ql_typeref_to_type(st, ctx=ctx))\n\n            return coll.from_subtypes(ctx.env.schema, subtypes)\n    else:\n",
        "source_code_len": 388,
        "target_code": "\n                t_subtypes[type_name] = ql_typeexpr_to_type(st, ctx=ctx)\n\n            return coll.from_subtypes(\n                ctx.env.schema, t_subtypes, {'named': named})\n        else:\n            a_subtypes = []\n            for st in ql_t.subtypes:\n                a_subtypes.append(ql_typeexpr_to_type(st, ctx=ctx))\n\n            return coll.from_subtypes(ctx.env.schema, a_subtypes)\n    else:\n",
        "target_code_len": 400,
        "diff_format": "@@ -115,12 +117,12 @@\n \n-                subtypes[type_name] = ql_typeref_to_type(st, ctx=ctx)\n+                t_subtypes[type_name] = ql_typeexpr_to_type(st, ctx=ctx)\n \n             return coll.from_subtypes(\n-                ctx.env.schema, subtypes, {'named': named})\n+                ctx.env.schema, t_subtypes, {'named': named})\n         else:\n-            subtypes = []\n+            a_subtypes = []\n             for st in ql_t.subtypes:\n-                subtypes.append(ql_typeref_to_type(st, ctx=ctx))\n+                a_subtypes.append(ql_typeexpr_to_type(st, ctx=ctx))\n \n-            return coll.from_subtypes(ctx.env.schema, subtypes)\n+            return coll.from_subtypes(ctx.env.schema, a_subtypes)\n     else:\n",
        "source_code_with_indent": "\n                <DED>subtypes[type_name] = ql_typeref_to_type(st, ctx=ctx)\n\n            <DED>return coll.from_subtypes(\n                ctx.env.schema, subtypes, {'named': named})\n        <DED>else:\n            <IND>subtypes = []\n            for st in ql_t.subtypes:\n                <IND>subtypes.append(ql_typeref_to_type(st, ctx=ctx))\n\n            <DED>return coll.from_subtypes(ctx.env.schema, subtypes)\n    <DED><DED>else:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n                <DED>t_subtypes[type_name] = ql_typeexpr_to_type(st, ctx=ctx)\n\n            <DED>return coll.from_subtypes(\n                ctx.env.schema, t_subtypes, {'named': named})\n        <DED>else:\n            <IND>a_subtypes = []\n            for st in ql_t.subtypes:\n                <IND>a_subtypes.append(ql_typeexpr_to_type(st, ctx=ctx))\n\n            <DED>return coll.from_subtypes(ctx.env.schema, a_subtypes)\n    <DED><DED>else:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/edgeql/compiler/typegen.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/compiler/typegen.py",
    "file_hunks_size": 9,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/compiler/typegen.py:127:41 Incompatible parameter type [6]: Expected `typing.Union[qlast.ObjectRef, str]` for 1st positional only parameter to call `schemactx.get_schema_type` but got `qlast.BaseObjectRef`.",
    "message": " Expected `typing.Union[qlast.ObjectRef, str]` for 1st positional only parameter to call `schemactx.get_schema_type` but got `qlast.BaseObjectRef`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 127,
    "warning_line": "        return schemactx.get_schema_type(ql_t.maintype, ctx=ctx)"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/pgsql/ast.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/pgsql/ast.py",
    "file_hunks_size": 53,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/pgsql/ast.py:233:8 Incompatible attribute type [8]: Attribute `name` declared in class `TupleElement` has type `typing.Union[OutputVar, str]` but is used as type `typing.Optional[OutputVar]`.",
    "message": " Attribute `name` declared in class `TupleElement` has type `typing.Union[OutputVar, str]` but is used as type `typing.Optional[OutputVar]`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 233,
    "warning_line": "        self.name = name"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/pgsql/ast.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/pgsql/ast.py",
    "file_hunks_size": 53,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/pgsql/ast.py:234:8 Incompatible attribute type [8]: Attribute `val` declared in class `TupleElement` has type `Base` but is used as type `typing.Optional[Base]`.",
    "message": " Attribute `val` declared in class `TupleElement` has type `Base` but is used as type `typing.Optional[Base]`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 234,
    "warning_line": "        self.val = val"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/pgsql/compiler/astutils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/pgsql/compiler/astutils.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/pgsql/compiler/astutils.py:217:58 Incompatible parameter type [6]: Expected `str` for 2nd positional only parameter to call `find_column_in_subselect_rvar` but got `typing.Union[pgast.Star, str]`.",
    "message": " Expected `str` for 2nd positional only parameter to call `find_column_in_subselect_rvar` but got `typing.Union[pgast.Star, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 217,
    "warning_line": "            col_idx = find_column_in_subselect_rvar(rvar, colname)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    ser_safe = False\n",
        "source_code_len": 22,
        "target_code": "\n    assert isinstance(colname, str)\n\n    ser_safe = False\n",
        "target_code_len": 59,
        "diff_format": "@@ -207,2 +216,4 @@\n \n+    assert isinstance(colname, str)\n+\n     ser_safe = False\n",
        "source_code_with_indent": "\n    <DED>ser_safe = False\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>assert isinstance(colname, str)\n\n    ser_safe = False\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/pgsql/compiler/astutils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/pgsql/compiler/astutils.py",
    "file_hunks_size": 7,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/pgsql/compiler/astutils.py:258:37 Incompatible parameter type [6]: Expected `pgast.OutputVar` for 2nd positional only parameter to call `get_rvar_var` but got `typing.Union[pgast.OutputVar, str]`.",
    "message": " Expected `pgast.OutputVar` for 2nd positional only parameter to call `get_rvar_var` but got `typing.Union[pgast.OutputVar, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 258,
    "warning_line": "            val = get_rvar_var(rvar, el.name)"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/pgsql/compiler/astutils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/pgsql/compiler/astutils.py",
    "file_hunks_size": 7,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/pgsql/compiler/astutils.py:261:40 Incompatible parameter type [6]: Expected `typing.Optional[pgast.OutputVar]` for 2nd parameter `name` to call `pgast.TupleElement.__init__` but got `typing.Union[pgast.OutputVar, str]`.",
    "message": " Expected `typing.Optional[pgast.OutputVar]` for 2nd parameter `name` to call `pgast.TupleElement.__init__` but got `typing.Union[pgast.OutputVar, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 261,
    "warning_line": "                    path_id=el.path_id, name=el.name, val=val))"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/pgsql/compiler/astutils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/pgsql/compiler/astutils.py",
    "file_hunks_size": 7,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/pgsql/compiler/astutils.py:282:39 Incompatible parameter type [6]: Expected `pgast.OutputVar` for 1st positional only parameter to call `strip_output_var` but got `typing.Union[pgast.OutputVar, str]`.",
    "message": " Expected `pgast.OutputVar` for 1st positional only parameter to call `strip_output_var` but got `typing.Union[pgast.OutputVar, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 282,
    "warning_line": "                val = strip_output_var(el.name)"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/pgsql/compiler/astutils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/pgsql/compiler/astutils.py",
    "file_hunks_size": 7,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/pgsql/compiler/astutils.py:286:40 Incompatible parameter type [6]: Expected `typing.Optional[pgast.OutputVar]` for 2nd parameter `name` to call `pgast.TupleElement.__init__` but got `typing.Union[pgast.OutputVar, str]`.",
    "message": " Expected `typing.Optional[pgast.OutputVar]` for 2nd parameter `name` to call `pgast.TupleElement.__init__` but got `typing.Union[pgast.OutputVar, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 286,
    "warning_line": "                    path_id=el.path_id, name=el.name, val=val))"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/pgsql/compiler/clauses.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/pgsql/compiler/clauses.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/pgsql/compiler/clauses.py:127:4 Incompatible return type [7]: Expected `typing.Optional[pgast.Expr]` but got `pgast.Base`.",
    "message": " Expected `typing.Optional[pgast.Expr]` but got `pgast.Base`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 127,
    "warning_line": "    return where_clause"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/pgsql/compiler/clauses.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/pgsql/compiler/clauses.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/pgsql/compiler/clauses.py:134:8 Incompatible return type [7]: Expected `pgast.Expr` but got `typing.List[Variable[_T]]`.",
    "message": " Expected `pgast.Expr` but got `typing.List[Variable[_T]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 134,
    "warning_line": "        return []",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def compile_orderby_clause(\n        ir_exprs: typing.List[irast.Base], *,\n        ctx: context.CompilerContextLevel) -> pgast.Expr:\n    if not ir_exprs:\n        return []\n\n",
        "source_code_len": 172,
        "target_code": "def compile_orderby_clause(\n        ir_exprs: typing.Sequence[irast.SortExpr], *,\n        ctx: context.CompilerContextLevel) -> typing.Sequence[pgast.SortBy]:\n\n",
        "target_code_len": 160,
        "diff_format": "@@ -130,6 +134,4 @@\n def compile_orderby_clause(\n-        ir_exprs: typing.List[irast.Base], *,\n-        ctx: context.CompilerContextLevel) -> pgast.Expr:\n-    if not ir_exprs:\n-        return []\n+        ir_exprs: typing.Sequence[irast.SortExpr], *,\n+        ctx: context.CompilerContextLevel) -> typing.Sequence[pgast.SortBy]:\n \n",
        "source_code_with_indent": "<DED>def compile_orderby_clause(\n        ir_exprs: typing.List[irast.Base], *,\n        ctx: context.CompilerContextLevel) -> pgast.Expr:\n    <IND>if not ir_exprs:\n        <IND>return []\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED>def compile_orderby_clause(\n        ir_exprs: typing.Sequence[irast.SortExpr], *,\n        ctx: context.CompilerContextLevel) -> typing.Sequence[pgast.SortBy]:\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/pgsql/compiler/clauses.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/pgsql/compiler/clauses.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/pgsql/compiler/clauses.py:156:4 Incompatible return type [7]: Expected `pgast.Expr` but got `typing.List[typing.Any]`.",
    "message": " Expected `pgast.Expr` but got `typing.List[typing.Any]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 156,
    "warning_line": "    return sort_clause",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def compile_orderby_clause(\n        ir_exprs: typing.List[irast.Base], *,\n        ctx: context.CompilerContextLevel) -> pgast.Expr:\n    if not ir_exprs:\n        return []\n\n",
        "source_code_len": 172,
        "target_code": "def compile_orderby_clause(\n        ir_exprs: typing.Sequence[irast.SortExpr], *,\n        ctx: context.CompilerContextLevel) -> typing.Sequence[pgast.SortBy]:\n\n",
        "target_code_len": 160,
        "diff_format": "@@ -130,6 +134,4 @@\n def compile_orderby_clause(\n-        ir_exprs: typing.List[irast.Base], *,\n-        ctx: context.CompilerContextLevel) -> pgast.Expr:\n-    if not ir_exprs:\n-        return []\n+        ir_exprs: typing.Sequence[irast.SortExpr], *,\n+        ctx: context.CompilerContextLevel) -> typing.Sequence[pgast.SortBy]:\n \n",
        "source_code_with_indent": "<DED>def compile_orderby_clause(\n        ir_exprs: typing.List[irast.Base], *,\n        ctx: context.CompilerContextLevel) -> pgast.Expr:\n    <IND>if not ir_exprs:\n        <IND>return []\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED>def compile_orderby_clause(\n        ir_exprs: typing.Sequence[irast.SortExpr], *,\n        ctx: context.CompilerContextLevel) -> typing.Sequence[pgast.SortBy]:\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/pgsql/compiler/clauses.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/pgsql/compiler/clauses.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/pgsql/compiler/clauses.py:163:8 Incompatible return type [7]: Expected `pgast.Expr` but got `None`.",
    "message": " Expected `pgast.Expr` but got `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 163,
    "warning_line": "        return None"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/pgsql/compiler/clauses.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/pgsql/compiler/clauses.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/pgsql/compiler/clauses.py:173:53 Incompatible parameter type [6]: Expected `irast.Set` for 1st positional only parameter to call `relgen.set_as_subquery` but got `irast.Base`.",
    "message": " Expected `irast.Set` for 1st positional only parameter to call `relgen.set_as_subquery` but got `irast.Base`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 173,
    "warning_line": "        limit_offset_clause = relgen.set_as_subquery(ir_set, ctx=ctx1)"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/pgsql/compiler/clauses.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/pgsql/compiler/clauses.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/pgsql/compiler/clauses.py:175:4 Incompatible return type [7]: Expected `pgast.Expr` but got `pgast.Query`.",
    "message": " Expected `pgast.Expr` but got `pgast.Query`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 175,
    "warning_line": "    return limit_offset_clause"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/pgsql/compiler/expr.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/pgsql/compiler/expr.py",
    "file_hunks_size": 27,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/pgsql/compiler/expr.py:80:8 Incompatible return type [7]: Expected `None` but got `pgast.Base`.",
    "message": " Expected `None` but got `pgast.Base`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 80,
    "warning_line": "        return _compile_set_in_singleton_mode(ir_set, ctx=ctx)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    if ctx.singleton_mode:\n        return _compile_set_in_singleton_mode(ir_set, ctx=ctx)\n\n",
        "source_code_len": 91,
        "target_code": "    if ctx.singleton_mode:\n        _compile_set_in_singleton_mode(ir_set, ctx=ctx)\n\n",
        "target_code_len": 84,
        "diff_format": "@@ -79,3 +79,3 @@\n     if ctx.singleton_mode:\n-        return _compile_set_in_singleton_mode(ir_set, ctx=ctx)\n+        _compile_set_in_singleton_mode(ir_set, ctx=ctx)\n \n",
        "source_code_with_indent": "    <IND>if ctx.singleton_mode:\n        <IND>return _compile_set_in_singleton_mode(ir_set, ctx=ctx)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <IND>if ctx.singleton_mode:\n        <IND>_compile_set_in_singleton_mode(ir_set, ctx=ctx)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/pgsql/compiler/expr.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/pgsql/compiler/expr.py",
    "file_hunks_size": 27,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/pgsql/compiler/expr.py:101:35 Incompatible parameter type [6]: Expected `typing.List[irast.Set]` for 2nd parameter `shape` to call `expr_compiler._compile_shape` but got `typing.List[irast.Base]`.",
    "message": " Expected `typing.List[irast.Set]` for 2nd parameter `shape` to call `expr_compiler._compile_shape` but got `typing.List[irast.Base]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 101,
    "warning_line": "            _compile_shape(ir_set, shape=ir_set.shape, ctx=ctx)"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/pgsql/compiler/expr.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/pgsql/compiler/expr.py",
    "file_hunks_size": 27,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/pgsql/compiler/expr.py:304:8 Incompatible return type [7]: Expected `pgast.Expr` but got `pgast.CaseExpr`.",
    "message": " Expected `pgast.Expr` but got `pgast.CaseExpr`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 304,
    "warning_line": "        return pgast.CaseExpr(",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        expr: irast.OperatorCall, *,\n        ctx: context.CompilerContextLevel) -> pgast.Expr:\n\n",
        "source_code_len": 96,
        "target_code": "        expr: irast.OperatorCall, *,\n        ctx: context.CompilerContextLevel) -> pgast.BaseExpr:\n\n",
        "target_code_len": 100,
        "diff_format": "@@ -297,3 +301,3 @@\n         expr: irast.OperatorCall, *,\n-        ctx: context.CompilerContextLevel) -> pgast.Expr:\n+        ctx: context.CompilerContextLevel) -> pgast.BaseExpr:\n \n",
        "source_code_with_indent": "        expr: irast.OperatorCall, *,\n        ctx: context.CompilerContextLevel) -> pgast.Expr:\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        expr: irast.OperatorCall, *,\n        ctx: context.CompilerContextLevel) -> pgast.BaseExpr:\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/pgsql/compiler/expr.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/pgsql/compiler/expr.py",
    "file_hunks_size": 27,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/pgsql/compiler/expr.py:377:4 Incompatible return type [7]: Expected `pgast.Expr` but got `typing.Union[pgast.Expr, pgast.TypeCast]`.",
    "message": " Expected `pgast.Expr` but got `typing.Union[pgast.Expr, pgast.TypeCast]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 377,
    "warning_line": "    return result",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        expr: irast.OperatorCall, *,\n        ctx: context.CompilerContextLevel) -> pgast.Expr:\n\n",
        "source_code_len": 96,
        "target_code": "        expr: irast.OperatorCall, *,\n        ctx: context.CompilerContextLevel) -> pgast.BaseExpr:\n\n",
        "target_code_len": 100,
        "diff_format": "@@ -297,3 +301,3 @@\n         expr: irast.OperatorCall, *,\n-        ctx: context.CompilerContextLevel) -> pgast.Expr:\n+        ctx: context.CompilerContextLevel) -> pgast.BaseExpr:\n \n",
        "source_code_with_indent": "        expr: irast.OperatorCall, *,\n        ctx: context.CompilerContextLevel) -> pgast.Expr:\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        expr: irast.OperatorCall, *,\n        ctx: context.CompilerContextLevel) -> pgast.BaseExpr:\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/pgsql/compiler/expr.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/pgsql/compiler/expr.py",
    "file_hunks_size": 27,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/pgsql/compiler/expr.py:410:41 Incompatible parameter type [6]: Expected `typing.List[pgast.BaseExpr]` for 2nd positional only parameter to call `relgen.build_array_expr` but got `typing.List[pgast.Base]`.",
    "message": " Expected `typing.List[pgast.BaseExpr]` for 2nd positional only parameter to call `relgen.build_array_expr` but got `typing.List[pgast.Base]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 410,
    "warning_line": "    return relgen.build_array_expr(expr, elements, ctx=ctx)"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/pgsql/compiler/expr.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/pgsql/compiler/expr.py",
    "file_hunks_size": 27,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/pgsql/compiler/expr.py:513:4 Incompatible return type [7]: Expected `pgast.ImplicitRowExpr` but got `typing.Union[pgast.ImplicitRowExpr, pgast.RowExpr]`.",
    "message": " Expected `pgast.ImplicitRowExpr` but got `typing.Union[pgast.ImplicitRowExpr, pgast.RowExpr]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 513,
    "warning_line": "    return tuple_val",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        tuple_set: irast.Set, *,\n        ctx: context.CompilerContextLevel) -> pgast.ImplicitRowExpr:\n    tuple_val = dispatch.compile(tuple_set, ctx=ctx)\n",
        "source_code_len": 155,
        "target_code": "        tuple_set: irast.Set, *,\n        ctx: context.CompilerContextLevel,\n) -> typing.Union[pgast.ImplicitRowExpr, pgast.RowExpr]:\n    tuple_val = dispatch.compile(tuple_set, ctx=ctx)\n",
        "target_code_len": 186,
        "diff_format": "@@ -507,3 +529,4 @@\n         tuple_set: irast.Set, *,\n-        ctx: context.CompilerContextLevel) -> pgast.ImplicitRowExpr:\n+        ctx: context.CompilerContextLevel,\n+) -> typing.Union[pgast.ImplicitRowExpr, pgast.RowExpr]:\n     tuple_val = dispatch.compile(tuple_set, ctx=ctx)\n",
        "source_code_with_indent": "        tuple_set: irast.Set, *,\n        ctx: context.CompilerContextLevel) -> pgast.ImplicitRowExpr:\n    <IND>tuple_val = dispatch.compile(tuple_set, ctx=ctx)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        tuple_set: irast.Set, *,\n        ctx: context.CompilerContextLevel,\n) -> typing.Union[pgast.ImplicitRowExpr, pgast.RowExpr]:\n    <IND>tuple_val = dispatch.compile(tuple_set, ctx=ctx)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/pgsql/compiler/expr.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/pgsql/compiler/expr.py",
    "file_hunks_size": 27,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/pgsql/compiler/expr.py:524:31 Incompatible parameter type [6]: Expected `typing.List[irast.Set]` for 2nd parameter `shape` to call `expr_compiler._compile_shape` but got `typing.List[irast.Base]`.",
    "message": " Expected `typing.List[irast.Set]` for 2nd parameter `shape` to call `expr_compiler._compile_shape` but got `typing.List[irast.Base]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 524,
    "warning_line": "        _compile_shape(ir_set, shape=ir_set.shape, ctx=ctx)"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/pgsql/compiler/expr.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/pgsql/compiler/expr.py",
    "file_hunks_size": 27,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/pgsql/compiler/expr.py:545:12 Incompatible parameter type [6]: Expected `typing.Optional[pgast.OutputVar]` for 2nd parameter `name` to call `pgast.TupleElement.__init__` but got `typing.Union[pgast.OutputVar, str]`.",
    "message": " Expected `typing.Optional[pgast.OutputVar]` for 2nd parameter `name` to call `pgast.TupleElement.__init__` but got `typing.Union[pgast.OutputVar, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 545,
    "warning_line": "            name=el.name,"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/pgsql/compiler/output.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/pgsql/compiler/output.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/pgsql/compiler/output.py:406:12 Incompatible return type [7]: Expected `typing.Tuple[str]` but got `typing.Tuple[str, ...]`.",
    "message": " Expected `typing.Tuple[str]` but got `typing.Tuple[str, ...]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 406,
    "warning_line": "            return pgtypes.pg_type_from_ir_typeref(typeref)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        typeref: irast.TypeRef, *,\n        ctx: context.CompilerContextLevel) -> typing.Tuple[str]:\n\n",
        "source_code_len": 101,
        "target_code": "        typeref: irast.TypeRef, *,\n        ctx: context.CompilerContextLevel) -> typing.Tuple[str, ...]:\n\n",
        "target_code_len": 106,
        "diff_format": "@@ -395,3 +396,3 @@\n         typeref: irast.TypeRef, *,\n-        ctx: context.CompilerContextLevel) -> typing.Tuple[str]:\n+        ctx: context.CompilerContextLevel) -> typing.Tuple[str, ...]:\n \n",
        "source_code_with_indent": "        typeref: irast.TypeRef, *,\n        ctx: context.CompilerContextLevel) -> typing.Tuple[str]:\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        typeref: irast.TypeRef, *,\n        ctx: context.CompilerContextLevel) -> typing.Tuple[str, ...]:\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/pgsql/compiler/output.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/pgsql/compiler/output.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/pgsql/compiler/output.py:409:8 Incompatible return type [7]: Expected `typing.Tuple[str]` but got `typing.Tuple[str, ...]`.",
    "message": " Expected `typing.Tuple[str]` but got `typing.Tuple[str, ...]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 409,
    "warning_line": "        return pgtypes.pg_type_from_ir_typeref(typeref)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        typeref: irast.TypeRef, *,\n        ctx: context.CompilerContextLevel) -> typing.Tuple[str]:\n\n",
        "source_code_len": 101,
        "target_code": "        typeref: irast.TypeRef, *,\n        ctx: context.CompilerContextLevel) -> typing.Tuple[str, ...]:\n\n",
        "target_code_len": 106,
        "diff_format": "@@ -395,3 +396,3 @@\n         typeref: irast.TypeRef, *,\n-        ctx: context.CompilerContextLevel) -> typing.Tuple[str]:\n+        ctx: context.CompilerContextLevel) -> typing.Tuple[str, ...]:\n \n",
        "source_code_with_indent": "        typeref: irast.TypeRef, *,\n        ctx: context.CompilerContextLevel) -> typing.Tuple[str]:\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        typeref: irast.TypeRef, *,\n        ctx: context.CompilerContextLevel) -> typing.Tuple[str, ...]:\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/pgsql/compiler/pathctx.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/pgsql/compiler/pathctx.py",
    "file_hunks_size": 51,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/pgsql/compiler/pathctx.py:198:21 Incompatible parameter type [6]: Expected `pgast.Query` for 1st positional only parameter to call `put_path_var` but got `pgast.Base`.",
    "message": " Expected `pgast.Query` for 1st positional only parameter to call `put_path_var` but got `pgast.Base`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 198,
    "warning_line": "        put_path_var(rel, path_id, var, aspect=aspect, env=env)"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/pgsql/compiler/pathctx.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/pgsql/compiler/pathctx.py",
    "file_hunks_size": 51,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/pgsql/compiler/pathctx.py:217:35 Incompatible parameter type [6]: Expected `pgast.Query` for 1st positional only parameter to call `maybe_get_path_rvar` but got `pgast.Base`.",
    "message": " Expected `pgast.Query` for 1st positional only parameter to call `maybe_get_path_rvar` but got `pgast.Base`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 217,
    "warning_line": "    rel_rvar = maybe_get_path_rvar(rel, path_id, aspect=aspect, env=env)"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/pgsql/compiler/pathctx.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/pgsql/compiler/pathctx.py",
    "file_hunks_size": 51,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/pgsql/compiler/pathctx.py:223:16 Incompatible parameter type [6]: Expected `pgast.Query` for 1st positional only parameter to call `maybe_get_path_rvar` but got `pgast.Base`.",
    "message": " Expected `pgast.Query` for 1st positional only parameter to call `maybe_get_path_rvar` but got `pgast.Base`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 223,
    "warning_line": "                rel, path_id, aspect=alt_aspect, env=env)"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/pgsql/compiler/pathctx.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/pgsql/compiler/pathctx.py",
    "file_hunks_size": 51,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/pgsql/compiler/pathctx.py:235:16 Incompatible parameter type [6]: Expected `pgast.Query` for 1st positional only parameter to call `maybe_get_path_rvar` but got `pgast.Base`.",
    "message": " Expected `pgast.Query` for 1st positional only parameter to call `maybe_get_path_rvar` but got `pgast.Base`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 235,
    "warning_line": "                rel, src_path_id, aspect=src_aspect, env=env)"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/pgsql/compiler/pathctx.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/pgsql/compiler/pathctx.py",
    "file_hunks_size": 51,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/pgsql/compiler/pathctx.py:239:20 Incompatible parameter type [6]: Expected `pgast.Query` for 1st positional only parameter to call `maybe_get_path_rvar` but got `pgast.Base`.",
    "message": " Expected `pgast.Query` for 1st positional only parameter to call `maybe_get_path_rvar` but got `pgast.Base`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 239,
    "warning_line": "                    rel, src_path_id.src_path(), aspect=src_aspect, env=env)"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/pgsql/compiler/pathctx.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/pgsql/compiler/pathctx.py",
    "file_hunks_size": 51,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/pgsql/compiler/pathctx.py:242:16 Incompatible parameter type [6]: Expected `pgast.Query` for 1st positional only parameter to call `maybe_get_path_rvar` but got `pgast.Base`.",
    "message": " Expected `pgast.Query` for 1st positional only parameter to call `maybe_get_path_rvar` but got `pgast.Base`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 242,
    "warning_line": "                rel, src_path_id, aspect=src_aspect, env=env)"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/pgsql/compiler/pathctx.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/pgsql/compiler/pathctx.py",
    "file_hunks_size": 51,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/pgsql/compiler/pathctx.py:247:16 Incompatible parameter type [6]: Expected `pgast.Query` for 1st positional only parameter to call `maybe_get_path_rvar` but got `pgast.Base`.",
    "message": " Expected `pgast.Query` for 1st positional only parameter to call `maybe_get_path_rvar` but got `pgast.Base`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 247,
    "warning_line": "                rel, src_path_id, aspect='source', env=env)"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/pgsql/compiler/pathctx.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/pgsql/compiler/pathctx.py",
    "file_hunks_size": 51,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/pgsql/compiler/pathctx.py:254:25 Incompatible parameter type [6]: Expected `pgast.Query` for 1st positional only parameter to call `put_path_var` but got `pgast.Base`.",
    "message": " Expected `pgast.Query` for 1st positional only parameter to call `put_path_var` but got `pgast.Base`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 254,
    "warning_line": "            put_path_var(rel, path_id, var, aspect=aspect, env=env)"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/pgsql/compiler/pathctx.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/pgsql/compiler/pathctx.py",
    "file_hunks_size": 51,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/pgsql/compiler/pathctx.py:284:17 Incompatible parameter type [6]: Expected `pgast.Query` for 1st positional only parameter to call `put_path_var` but got `pgast.Base`.",
    "message": " Expected `pgast.Query` for 1st positional only parameter to call `put_path_var` but got `pgast.Base`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 284,
    "warning_line": "    put_path_var(rel, path_id, var, aspect=aspect, env=env)"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/pgsql/compiler/pathctx.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/pgsql/compiler/pathctx.py",
    "file_hunks_size": 51,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/pgsql/compiler/pathctx.py:288:39 Incompatible parameter type [6]: Expected `pgast.Query` for 1st positional only parameter to call `put_path_var_if_not_exists` but got `pgast.Base`.",
    "message": " Expected `pgast.Query` for 1st positional only parameter to call `put_path_var_if_not_exists` but got `pgast.Base`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 288,
    "warning_line": "            put_path_var_if_not_exists(rel, element.path_id, element.val,"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/pgsql/compiler/pathctx.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/pgsql/compiler/pathctx.py",
    "file_hunks_size": 51,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/pgsql/compiler/pathctx.py:718:8 Incompatible return type [7]: Expected `str` but got `None`.",
    "message": " Expected `str` but got `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 718,
    "warning_line": "        return None"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/pgsql/compiler/pathctx.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/pgsql/compiler/pathctx.py",
    "file_hunks_size": 51,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/pgsql/compiler/pathctx.py:722:12 Incompatible return type [7]: Expected `str` but got implicit return value of `None`.",
    "message": " Expected `str` but got implicit return value of `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 722,
    "warning_line": "            return rel.path_outputs.get(key)"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/pgsql/compiler/pathctx.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/pgsql/compiler/pathctx.py",
    "file_hunks_size": 51,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/pgsql/compiler/pathctx.py:722:12 Incompatible return type [7]: Expected `str` but got `typing.Optional[pgast.OutputVar]`.",
    "message": " Expected `str` but got `typing.Optional[pgast.OutputVar]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 722,
    "warning_line": "            return rel.path_outputs.get(key)"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/pgsql/compiler/pathctx.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/pgsql/compiler/pathctx.py",
    "file_hunks_size": 51,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/pgsql/compiler/pathctx.py:772:36 Incompatible parameter type [6]: Expected `pgast.Query` for 1st positional only parameter to call `find_path_output` but got `pgast.BaseRelation`.",
    "message": " Expected `pgast.Query` for 1st positional only parameter to call `find_path_output` but got `pgast.BaseRelation`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 772,
    "warning_line": "    other_output = find_path_output(rel, path_id, ref, env=env)"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/pgsql/compiler/pathctx.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/pgsql/compiler/pathctx.py",
    "file_hunks_size": 51,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/pgsql/compiler/pathctx.py:774:51 Incompatible parameter type [6]: Expected `pgast.OutputVar` for 4th positional only parameter to call `_put_path_output_var` but got `str`.",
    "message": " Expected `pgast.OutputVar` for 4th positional only parameter to call `_put_path_output_var` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 774,
    "warning_line": "        _put_path_output_var(rel, path_id, aspect, other_output, env=env)"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/pgsql/compiler/pathctx.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/pgsql/compiler/pathctx.py",
    "file_hunks_size": 51,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/pgsql/compiler/pathctx.py:775:8 Incompatible return type [7]: Expected `pgast.OutputVar` but got `str`.",
    "message": " Expected `pgast.OutputVar` but got `str`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 775,
    "warning_line": "        return other_output"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/pgsql/compiler/pathctx.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/pgsql/compiler/pathctx.py",
    "file_hunks_size": 51,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/pgsql/compiler/pathctx.py:889:35 Incompatible parameter type [6]: Expected `edb.ir.pathid.PathId` for 1st positional only parameter to call `typing.Mapping.get` but got `typing.Tuple[edb.ir.pathid.PathId, str]`.",
    "message": " Expected `edb.ir.pathid.PathId` for 1st positional only parameter to call `typing.Mapping.get` but got `typing.Tuple[edb.ir.pathid.PathId, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 889,
    "warning_line": "    result = rel.path_outputs.get((path_id, aspect))"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/pgsql/compiler/relctx.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/pgsql/compiler/relctx.py",
    "file_hunks_size": 50,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/pgsql/compiler/relctx.py:248:12 Incompatible return type [7]: Expected `pgast.BaseRangeVar` but got `typing.Tuple[pgast.BaseRangeVar, edb.ir.pathid.PathId]`.",
    "message": " Expected `pgast.BaseRangeVar` but got `typing.Tuple[pgast.BaseRangeVar, edb.ir.pathid.PathId]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 248,
    "warning_line": "            return rvar, path_id"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/pgsql/compiler/relctx.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/pgsql/compiler/relctx.py",
    "file_hunks_size": 50,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/pgsql/compiler/relctx.py:284:8 Incompatible return type [7]: Expected `pgast.BaseRangeVar` but got `None`.",
    "message": " Expected `pgast.BaseRangeVar` but got `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 284,
    "warning_line": "        return None"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/pgsql/compiler/relctx.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/pgsql/compiler/relctx.py",
    "file_hunks_size": 50,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/pgsql/compiler/relctx.py:293:8 Incompatible return type [7]: Expected `pgast.OutputVar` but got `None`.",
    "message": " Expected `pgast.OutputVar` but got `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 293,
    "warning_line": "        return None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        stmt: pgast.Query, path_id: irast.PathId, *,\n        aspect: str, ctx: context.CompilerContextLevel) -> pgast.OutputVar:\n    try:\n",
        "source_code_len": 138,
        "target_code": "        stmt: pgast.Query, path_id: irast.PathId, *,\n        aspect: str, ctx: context.CompilerContextLevel\n) -> typing.Optional[pgast.OutputVar]:\n    try:\n",
        "target_code_len": 156,
        "diff_format": "@@ -288,3 +292,4 @@\n         stmt: pgast.Query, path_id: irast.PathId, *,\n-        aspect: str, ctx: context.CompilerContextLevel) -> pgast.OutputVar:\n+        aspect: str, ctx: context.CompilerContextLevel\n+) -> typing.Optional[pgast.OutputVar]:\n     try:\n",
        "source_code_with_indent": "        stmt: pgast.Query, path_id: irast.PathId, *,\n        aspect: str, ctx: context.CompilerContextLevel) -> pgast.OutputVar:\n    <IND>try:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        stmt: pgast.Query, path_id: irast.PathId, *,\n        aspect: str, ctx: context.CompilerContextLevel\n) -> typing.Optional[pgast.OutputVar]:\n    <IND>try:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/pgsql/compiler/relctx.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/pgsql/compiler/relctx.py",
    "file_hunks_size": 50,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/pgsql/compiler/relctx.py:299:12 Incompatible return type [7]: Expected `pgast.OutputVar` but got `None`.",
    "message": " Expected `pgast.OutputVar` but got `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 299,
    "warning_line": "            return None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        stmt: pgast.Query, path_id: irast.PathId, *,\n        aspect: str, ctx: context.CompilerContextLevel) -> pgast.OutputVar:\n    try:\n",
        "source_code_len": 138,
        "target_code": "        stmt: pgast.Query, path_id: irast.PathId, *,\n        aspect: str, ctx: context.CompilerContextLevel\n) -> typing.Optional[pgast.OutputVar]:\n    try:\n",
        "target_code_len": 156,
        "diff_format": "@@ -288,3 +292,4 @@\n         stmt: pgast.Query, path_id: irast.PathId, *,\n-        aspect: str, ctx: context.CompilerContextLevel) -> pgast.OutputVar:\n+        aspect: str, ctx: context.CompilerContextLevel\n+) -> typing.Optional[pgast.OutputVar]:\n     try:\n",
        "source_code_with_indent": "        stmt: pgast.Query, path_id: irast.PathId, *,\n        aspect: str, ctx: context.CompilerContextLevel) -> pgast.OutputVar:\n    <IND>try:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        stmt: pgast.Query, path_id: irast.PathId, *,\n        aspect: str, ctx: context.CompilerContextLevel\n) -> typing.Optional[pgast.OutputVar]:\n    <IND>try:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/pgsql/compiler/relctx.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/pgsql/compiler/relctx.py",
    "file_hunks_size": 50,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/pgsql/compiler/relctx.py:634:44 Incompatible parameter type [6]: Expected `pgast.ColumnRef` for 1st positional only parameter to call `astutils.join_condition` but got `pgast.OutputVar`.",
    "message": " Expected `pgast.ColumnRef` for 1st positional only parameter to call `astutils.join_condition` but got `pgast.OutputVar`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 634,
    "warning_line": "        path_cond = astutils.join_condition(lref, rref)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        path_cond = astutils.join_condition(lref, rref)\n",
        "source_code_len": 57,
        "target_code": "\n        assert isinstance(lref, pgast.ColumnRef)\n        assert isinstance(rref, pgast.ColumnRef)\n        path_cond = astutils.join_condition(lref, rref)\n",
        "target_code_len": 155,
        "diff_format": "@@ -633,2 +639,4 @@\n \n+        assert isinstance(lref, pgast.ColumnRef)\n+        assert isinstance(rref, pgast.ColumnRef)\n         path_cond = astutils.join_condition(lref, rref)\n",
        "source_code_with_indent": "\n        path_cond = astutils.join_condition(lref, rref)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        assert isinstance(lref, pgast.ColumnRef)\n        assert isinstance(rref, pgast.ColumnRef)\n        path_cond = astutils.join_condition(lref, rref)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/pgsql/compiler/relctx.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/pgsql/compiler/relctx.py",
    "file_hunks_size": 50,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/pgsql/compiler/relctx.py:739:44 Incompatible parameter type [6]: Expected `sn.SchemaName` for 2nd positional only parameter to call `range_from_queryset` but got `str`.",
    "message": " Expected `sn.SchemaName` for 2nd positional only parameter to call `range_from_queryset` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 739,
    "warning_line": "        rvar = range_from_queryset(set_ops, typeref.name_hint, ctx=ctx)"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/pgsql/compiler/relctx.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/pgsql/compiler/relctx.py",
    "file_hunks_size": 50,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/pgsql/compiler/relctx.py:762:12 Incompatible parameter type [6]: Expected `irast.TypeRef` for 1st positional only parameter to call `range_for_material_objtype` but got `typing.Optional[irast.TypeRef]`.",
    "message": " Expected `irast.TypeRef` for 1st positional only parameter to call `range_for_material_objtype` but got `typing.Optional[irast.TypeRef]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 762,
    "warning_line": "            typeref.common_parent,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        )\n    elif common_parent:\n        rvar = range_for_material_objtype(\n",
        "source_code_len": 77,
        "target_code": "        )\n    elif typeref.common_parent is not None and common_parent:\n        rvar = range_for_material_objtype(\n",
        "target_code_len": 115,
        "diff_format": "@@ -759,3 +767,3 @@\n         )\n-    elif common_parent:\n+    elif typeref.common_parent is not None and common_parent:\n         rvar = range_for_material_objtype(\n",
        "source_code_with_indent": "        )\n    <DED>elif common_parent:\n        <IND>rvar = range_for_material_objtype(\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        )\n    <DED>elif typeref.common_parent is not None and common_parent:\n        <IND>rvar = range_for_material_objtype(\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/pgsql/compiler/relctx.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/pgsql/compiler/relctx.py",
    "file_hunks_size": 50,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/pgsql/compiler/relctx.py:795:44 Incompatible parameter type [6]: Expected `sn.SchemaName` for 2nd positional only parameter to call `range_from_queryset` but got `str`.",
    "message": " Expected `sn.SchemaName` for 2nd positional only parameter to call `range_from_queryset` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 795,
    "warning_line": "        rvar = range_from_queryset(set_ops, typeref.name_hint, ctx=ctx)"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/pgsql/compiler/relctx.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/pgsql/compiler/relctx.py",
    "file_hunks_size": 50,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/pgsql/compiler/relctx.py:814:20 Incompatible attribute type [8]: Attribute `rarg` declared in class `pgast.SelectStmt` has type `pgast.Query` but is used as type `pgast.BaseRelation`.",
    "message": " Attribute `rarg` declared in class `pgast.SelectStmt` has type `pgast.Query` but is used as type `pgast.BaseRelation`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 814,
    "warning_line": "            qry.op, qry.rarg = op, rarg"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/pgsql/compiler/stmt.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/pgsql/compiler/stmt.py",
    "file_hunks_size": 9,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/pgsql/compiler/stmt.py:41:8 Incompatible return type [7]: Expected `pgast.Query` but got `pgast.Base`.",
    "message": " Expected `pgast.Query` but got `pgast.Base`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 41,
    "warning_line": "        return dispatch.compile(stmt.result, ctx=ctx)"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/pgsql/compiler/stmt.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/pgsql/compiler/stmt.py",
    "file_hunks_size": 9,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/pgsql/compiler/stmt.py:54:49 Incompatible parameter type [6]: Expected `irast.Set` for 2nd positional only parameter to call `clauses.compile_iterator_expr` but got `irast.Base`.",
    "message": " Expected `irast.Set` for 2nd positional only parameter to call `clauses.compile_iterator_expr` but got `irast.Base`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 54,
    "warning_line": "            clauses.compile_iterator_expr(query, iterator_set, ctx=ctx)"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/pgsql/compiler/stmt.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/pgsql/compiler/stmt.py",
    "file_hunks_size": 9,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/pgsql/compiler/stmt.py:57:40 Incompatible parameter type [6]: Expected `irast.Set` for 1st positional only parameter to call `clauses.compile_output` but got `irast.Base`.",
    "message": " Expected `irast.Set` for 1st positional only parameter to call `clauses.compile_output` but got `irast.Base`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 57,
    "warning_line": "        outvar = clauses.compile_output(stmt.result, ctx=ctx)"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/pgsql/compiler/stmt.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/pgsql/compiler/stmt.py",
    "file_hunks_size": 9,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/pgsql/compiler/stmt.py:63:16 Incompatible parameter type [6]: Expected `typing.Optional[irast.Set]` for 1st positional only parameter to call `clauses.compile_filter_clause` but got `irast.Base`.",
    "message": " Expected `typing.Optional[irast.Set]` for 1st positional only parameter to call `clauses.compile_filter_clause` but got `irast.Base`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 63,
    "warning_line": "                stmt.where, stmt.where_card, ctx=ctx))"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/pgsql/compiler/stmt.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/pgsql/compiler/stmt.py",
    "file_hunks_size": 9,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/pgsql/compiler/stmt.py:81:12 Incompatible parameter type [6]: Expected `typing.List[irast.Base]` for 1st positional only parameter to call `clauses.compile_orderby_clause` but got `typing.List[irast.SortExpr]`.",
    "message": " Expected `typing.List[irast.Base]` for 1st positional only parameter to call `clauses.compile_orderby_clause` but got `typing.List[irast.SortExpr]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 81,
    "warning_line": "            stmt.orderby, ctx=ctx)"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/pgsql/compiler/stmt.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/pgsql/compiler/stmt.py",
    "file_hunks_size": 9,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/pgsql/compiler/stmt.py:116:32 Incompatible parameter type [6]: Expected `irast.Set` for 1st positional only parameter to call `relctx.update_scope` but got `irast.Base`.",
    "message": " Expected `irast.Set` for 1st positional only parameter to call `relctx.update_scope` but got `irast.Base`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 116,
    "warning_line": "            relctx.update_scope(stmt.subject, gquery, ctx=gctx)"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/pgsql/compiler/stmt.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/pgsql/compiler/stmt.py",
    "file_hunks_size": 9,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/pgsql/compiler/stmt.py:118:35 Incompatible parameter type [6]: Expected `irast.Set` for 1st positional only parameter to call `clauses.compile_output` but got `irast.Base`.",
    "message": " Expected `irast.Set` for 1st positional only parameter to call `clauses.compile_output` but got `irast.Base`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 118,
    "warning_line": "            clauses.compile_output(stmt.subject, ctx=gctx)"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/pgsql/compiler/stmt.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/pgsql/compiler/stmt.py",
    "file_hunks_size": 9,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/pgsql/compiler/stmt.py:122:16 Incompatible parameter type [6]: Expected `irast.Set` for 1st positional only parameter to call `relctx.ensure_bond_for_expr` but got `irast.Base`.",
    "message": " Expected `irast.Set` for 1st positional only parameter to call `relctx.ensure_bond_for_expr` but got `irast.Base`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 122,
    "warning_line": "                stmt.subject, subj_rvar.query, ctx=gctx)"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/schema/objects.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/schema/objects.py",
    "file_hunks_size": 10,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/schema/objects.py:513:8 Incompatible return type [7]: Expected `Object` but got `typing.Tuple[typing.Any, typing.Any]`.",
    "message": " Expected `Object` but got `typing.Tuple[typing.Any, typing.Any]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 513,
    "warning_line": "        return schema, scls"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/schema/objects.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/schema/objects.py",
    "file_hunks_size": 10,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/schema/objects.py:1444:8 Incompatible return type [7]: Expected `ObjectIndexBase` but got `typing.Tuple[typing.Any, typing.Any]`.",
    "message": " Expected `ObjectIndexBase` but got `typing.Tuple[typing.Any, typing.Any]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 1444,
    "warning_line": "        return schema, type(self).create(schema, items.values())"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/schema/objects.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/schema/objects.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/schema/objects.py:1502:4 Inconsistent override [14]: `edb.schema.objects.ObjectDict.create` overrides method defined in `ObjectCollection` inconsistently. Parameter of type `typing.Mapping[object, Object]` is not a supertype of the overridden parameter `typing.Iterable[Object]`.",
    "message": " `edb.schema.objects.ObjectDict.create` overrides method defined in `ObjectCollection` inconsistently. Parameter of type `typing.Mapping[object, Object]` is not a supertype of the overridden parameter `typing.Iterable[Object]`.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 1502,
    "warning_line": "    def create(cls, schema, data: typing.Mapping[object, Object]):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @classmethod\n    def create(cls, schema, data: typing.Iterable[Object]):\n        ids = []\n",
        "source_code_len": 94,
        "target_code": "    @classmethod\n    def create(cls, schema, data):\n        ids = []\n",
        "target_code_len": 69,
        "diff_format": "@@ -1265,3 +1278,3 @@\n     @classmethod\n-    def create(cls, schema, data: typing.Iterable[Object]):\n+    def create(cls, schema, data):\n         ids = []\n",
        "source_code_with_indent": "    <DED>@classmethod\n    def create(cls, schema, data: typing.Iterable[Object]):\n        <IND>ids = []\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@classmethod\n    def create(cls, schema, data):\n        <IND>ids = []\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/schema/pointers.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/schema/pointers.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/schema/pointers.py:633:8 Incompatible return type [7]: Expected `so.ObjectRef` but got `typing.Tuple[so.Object, typing.Optional[PointerLike]]`.",
    "message": " Expected `so.ObjectRef` but got `typing.Tuple[so.Object, typing.Optional[PointerLike]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 633,
    "warning_line": "        return target, base",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "\nclass PointerLike:\n    # An abstract base class for pointer-like objects, which\n    # include actual schema properties and links, as well as\n    # pseudo-links used by the compiler to represent things like\n    # tuple and type indirection.\n    def is_tuple_indirection(self):\n        return False\n\n    def is_type_indirection(self):\n        return False\n\n\nclass Pointer(referencing.ReferencedInheritingObject,\n",
        "source_code_len": 411,
        "target_code": "\nclass Pointer(referencing.ReferencedInheritingObject,\n",
        "target_code_len": 55,
        "diff_format": "@@ -114,14 +115,2 @@\n \n-class PointerLike:\n-    # An abstract base class for pointer-like objects, which\n-    # include actual schema properties and links, as well as\n-    # pseudo-links used by the compiler to represent things like\n-    # tuple and type indirection.\n-    def is_tuple_indirection(self):\n-        return False\n-\n-    def is_type_indirection(self):\n-        return False\n-\n-\n class Pointer(referencing.ReferencedInheritingObject,\n",
        "source_code_with_indent": "\n<DED>class PointerLike:\n    # An abstract base class for pointer-like objects, which\n    # include actual schema properties and links, as well as\n    # pseudo-links used by the compiler to represent things like\n    # tuple and type indirection.\n    <IND>def is_tuple_indirection(self):\n        <IND>return False\n\n    <DED>def is_type_indirection(self):\n        <IND>return False\n\n\n<DED><DED>class Pointer(referencing.ReferencedInheritingObject,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>class Pointer(referencing.ReferencedInheritingObject,\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "              s_anno.AnnotationSubject,\n              PointerLike, s_abc.Pointer):\n\n",
        "source_code_len": 84,
        "target_code": "              s_anno.AnnotationSubject,\n              s_abc.Pointer):\n\n",
        "target_code_len": 71,
        "diff_format": "@@ -129,3 +118,3 @@\n               s_anno.AnnotationSubject,\n-              PointerLike, s_abc.Pointer):\n+              s_abc.Pointer):\n \n",
        "source_code_with_indent": "              s_anno.AnnotationSubject,\n              PointerLike, s_abc.Pointer):\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "              s_anno.AnnotationSubject,\n              s_abc.Pointer):\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/schema/pointers.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/schema/pointers.py",
    "file_hunks_size": 8,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/schema/pointers.py:834:4 Incompatible return type [7]: Expected `Pointer` but got `typing.Tuple[typing.Any, typing.Any]`.",
    "message": " Expected `Pointer` but got `typing.Tuple[typing.Any, typing.Any]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 834,
    "warning_line": "    return schema, result"
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/schema/types.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/schema/types.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/schema/types.py:493:8 Incompatible return type [7]: Expected `s_types.Type` but got `typing.Tuple[typing.Any, typing.Any]`.",
    "message": " Expected `s_types.Type` but got `typing.Tuple[typing.Any, typing.Any]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 493,
    "warning_line": "        return schema, Array.from_subtypes(",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from . import objects as so\nfrom . import utils\n",
        "source_code_len": 48,
        "target_code": "from . import objects as so\nfrom . import schema as s_schema\nfrom . import utils\n",
        "target_code_len": 81,
        "diff_format": "@@ -36,2 +36,3 @@\n from . import objects as so\n+from . import schema as s_schema\n from . import utils\n",
        "source_code_with_indent": "from . import objects as so\nfrom . import utils\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from . import objects as so\nfrom . import schema as s_schema\nfrom . import utils\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            self, schema, *, name: str,\n            attrs: typing.Optional[typing.Mapping]=None) -> 'Type':\n        raise NotImplementedError\n",
        "source_code_len": 142,
        "target_code": "            self, schema, *, name: str,\n            attrs: typing.Optional[typing.Mapping]=None\n    ) -> typing.Tuple[s_schema.Schema, Type]:\n        raise NotImplementedError\n",
        "target_code_len": 176,
        "diff_format": "@@ -73,3 +74,4 @@\n             self, schema, *, name: str,\n-            attrs: typing.Optional[typing.Mapping]=None) -> 'Type':\n+            attrs: typing.Optional[typing.Mapping]=None\n+    ) -> typing.Tuple[s_schema.Schema, Type]:\n         raise NotImplementedError\n",
        "source_code_with_indent": "            self, schema, *, name: str,\n            attrs: typing.Optional[typing.Mapping]=None) -> 'Type':\n        <IND>raise NotImplementedError\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            self, schema, *, name: str,\n            attrs: typing.Optional[typing.Mapping]=None\n    ) -> typing.Tuple[s_schema.Schema, Type]:\n        <IND>raise NotImplementedError\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            self, schema, *, name: str,\n            attrs: typing.Optional[typing.Mapping]=None) -> Type:\n        return schema, Array.from_subtypes(\n",
        "source_code_len": 150,
        "target_code": "            self, schema, *, name: str,\n            attrs: typing.Optional[typing.Mapping]=None\n    ) -> typing.Tuple[s_schema.Schema, Type]:\n        return schema, Array.from_subtypes(\n",
        "target_code_len": 186,
        "diff_format": "@@ -491,3 +493,4 @@\n             self, schema, *, name: str,\n-            attrs: typing.Optional[typing.Mapping]=None) -> Type:\n+            attrs: typing.Optional[typing.Mapping]=None\n+    ) -> typing.Tuple[s_schema.Schema, Type]:\n         return schema, Array.from_subtypes(\n",
        "source_code_with_indent": "            self, schema, *, name: str,\n            attrs: typing.Optional[typing.Mapping]=None) -> Type:\n        <IND>return schema, Array.from_subtypes(\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            self, schema, *, name: str,\n            attrs: typing.Optional[typing.Mapping]=None\n    ) -> typing.Tuple[s_schema.Schema, Type]:\n        <IND>return schema, Array.from_subtypes(\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            self, schema, *, name: str,\n            attrs: typing.Optional[typing.Mapping]=None) -> Type:\n        return schema, Tuple.from_subtypes(\n",
        "source_code_len": 150,
        "target_code": "            self, schema, *, name: str,\n            attrs: typing.Optional[typing.Mapping]=None\n    ) -> typing.Tuple[s_schema.Schema, Type]:\n        return schema, Tuple.from_subtypes(\n",
        "target_code_len": 186,
        "diff_format": "@@ -786,3 +789,4 @@\n             self, schema, *, name: str,\n-            attrs: typing.Optional[typing.Mapping]=None) -> Type:\n+            attrs: typing.Optional[typing.Mapping]=None\n+    ) -> typing.Tuple[s_schema.Schema, Type]:\n         return schema, Tuple.from_subtypes(\n",
        "source_code_with_indent": "            self, schema, *, name: str,\n            attrs: typing.Optional[typing.Mapping]=None) -> Type:\n        <IND>return schema, Tuple.from_subtypes(\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            self, schema, *, name: str,\n            attrs: typing.Optional[typing.Mapping]=None\n    ) -> typing.Tuple[s_schema.Schema, Type]:\n        <IND>return schema, Tuple.from_subtypes(\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "edgedb/edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/schema/types.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/schema/types.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/schema/types.py:788:8 Incompatible return type [7]: Expected `s_types.Type` but got `typing.Tuple[typing.Any, typing.Any]`.",
    "message": " Expected `s_types.Type` but got `typing.Tuple[typing.Any, typing.Any]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 788,
    "warning_line": "        return schema, Tuple.from_subtypes(",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from . import objects as so\nfrom . import utils\n",
        "source_code_len": 48,
        "target_code": "from . import objects as so\nfrom . import schema as s_schema\nfrom . import utils\n",
        "target_code_len": 81,
        "diff_format": "@@ -36,2 +36,3 @@\n from . import objects as so\n+from . import schema as s_schema\n from . import utils\n",
        "source_code_with_indent": "from . import objects as so\nfrom . import utils\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from . import objects as so\nfrom . import schema as s_schema\nfrom . import utils\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            self, schema, *, name: str,\n            attrs: typing.Optional[typing.Mapping]=None) -> 'Type':\n        raise NotImplementedError\n",
        "source_code_len": 142,
        "target_code": "            self, schema, *, name: str,\n            attrs: typing.Optional[typing.Mapping]=None\n    ) -> typing.Tuple[s_schema.Schema, Type]:\n        raise NotImplementedError\n",
        "target_code_len": 176,
        "diff_format": "@@ -73,3 +74,4 @@\n             self, schema, *, name: str,\n-            attrs: typing.Optional[typing.Mapping]=None) -> 'Type':\n+            attrs: typing.Optional[typing.Mapping]=None\n+    ) -> typing.Tuple[s_schema.Schema, Type]:\n         raise NotImplementedError\n",
        "source_code_with_indent": "            self, schema, *, name: str,\n            attrs: typing.Optional[typing.Mapping]=None) -> 'Type':\n        <IND>raise NotImplementedError\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            self, schema, *, name: str,\n            attrs: typing.Optional[typing.Mapping]=None\n    ) -> typing.Tuple[s_schema.Schema, Type]:\n        <IND>raise NotImplementedError\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            self, schema, *, name: str,\n            attrs: typing.Optional[typing.Mapping]=None) -> Type:\n        return schema, Array.from_subtypes(\n",
        "source_code_len": 150,
        "target_code": "            self, schema, *, name: str,\n            attrs: typing.Optional[typing.Mapping]=None\n    ) -> typing.Tuple[s_schema.Schema, Type]:\n        return schema, Array.from_subtypes(\n",
        "target_code_len": 186,
        "diff_format": "@@ -491,3 +493,4 @@\n             self, schema, *, name: str,\n-            attrs: typing.Optional[typing.Mapping]=None) -> Type:\n+            attrs: typing.Optional[typing.Mapping]=None\n+    ) -> typing.Tuple[s_schema.Schema, Type]:\n         return schema, Array.from_subtypes(\n",
        "source_code_with_indent": "            self, schema, *, name: str,\n            attrs: typing.Optional[typing.Mapping]=None) -> Type:\n        <IND>return schema, Array.from_subtypes(\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            self, schema, *, name: str,\n            attrs: typing.Optional[typing.Mapping]=None\n    ) -> typing.Tuple[s_schema.Schema, Type]:\n        <IND>return schema, Array.from_subtypes(\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            self, schema, *, name: str,\n            attrs: typing.Optional[typing.Mapping]=None) -> Type:\n        return schema, Tuple.from_subtypes(\n",
        "source_code_len": 150,
        "target_code": "            self, schema, *, name: str,\n            attrs: typing.Optional[typing.Mapping]=None\n    ) -> typing.Tuple[s_schema.Schema, Type]:\n        return schema, Tuple.from_subtypes(\n",
        "target_code_len": 186,
        "diff_format": "@@ -786,3 +789,4 @@\n             self, schema, *, name: str,\n-            attrs: typing.Optional[typing.Mapping]=None) -> Type:\n+            attrs: typing.Optional[typing.Mapping]=None\n+    ) -> typing.Tuple[s_schema.Schema, Type]:\n         return schema, Tuple.from_subtypes(\n",
        "source_code_with_indent": "            self, schema, *, name: str,\n            attrs: typing.Optional[typing.Mapping]=None) -> Type:\n        <IND>return schema, Tuple.from_subtypes(\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            self, schema, *, name: str,\n            attrs: typing.Optional[typing.Mapping]=None\n    ) -> typing.Tuple[s_schema.Schema, Type]:\n        <IND>return schema, Tuple.from_subtypes(\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]