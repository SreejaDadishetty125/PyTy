[
  {
    "project": "nabla-c0d3/sslyze",
    "commit": "7cc7e249b16bfde12042c503feb3645b1838546f",
    "filename": "sslyze/plugins/certificate_info_plugin.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/nabla-c0d3-sslyze/sslyze/plugins/certificate_info_plugin.py",
    "file_hunks_size": 16,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "sslyze/plugins/certificate_info_plugin.py:210:12 Incompatible parameter type [6]: Expected `List[Certificate]` for 3rd positional only parameter to call `CertificateInfoScanResult.__init__` but got `Optional[List[Certificate]]`.",
    "message": " Expected `List[Certificate]` for 3rd positional only parameter to call `CertificateInfoScanResult.__init__` but got `Optional[List[Certificate]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 210,
    "warning_line": "            received_chain,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            raise last_exception  # type: ignore\n\n",
        "source_code_len": 50,
        "target_code": "            raise last_exception  # type: ignore\n\n        if not received_chain:\n            raise ValueError('Error: Could not retrieve the server certificate chain')\n\n",
        "target_code_len": 169,
        "diff_format": "@@ -204,2 +208,5 @@\n             raise last_exception  # type: ignore\n+\n+        if not received_chain:\n+            raise ValueError('Error: Could not retrieve the server certificate chain')\n \n",
        "source_code_with_indent": "            <IND>raise last_exception  # type: ignore\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <IND>raise last_exception  # type: ignore\n\n        <DED>if not received_chain:\n            <IND>raise ValueError('Error: Could not retrieve the server certificate chain')\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "nabla-c0d3/sslyze",
    "commit": "7cc7e249b16bfde12042c503feb3645b1838546f",
    "filename": "sslyze/plugins/certificate_info_plugin.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/nabla-c0d3-sslyze/sslyze/plugins/certificate_info_plugin.py",
    "file_hunks_size": 16,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "sslyze/plugins/certificate_info_plugin.py:223:70 Incompatible parameter type [6]: Expected `Optional[str]` for 1st parameter `ssl_verify_locations` to call `ServerConnectivityInfo.get_preconfigured_ssl_connection` but got `Path`.",
    "message": " Expected `Optional[str]` for 1st parameter `ssl_verify_locations` to call `ServerConnectivityInfo.get_preconfigured_ssl_connection` but got `Path`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 223,
    "warning_line": "        ssl_connection = server_info.get_preconfigured_ssl_connection(ssl_verify_locations=trust_store.path)"
  },
  {
    "project": "nabla-c0d3/sslyze",
    "commit": "7cc7e249b16bfde12042c503feb3645b1838546f",
    "filename": "sslyze/plugins/http_headers_plugin.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/nabla-c0d3-sslyze/sslyze/plugins/http_headers_plugin.py",
    "file_hunks_size": 16,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "sslyze/plugins/http_headers_plugin.py:54:70 Incompatible parameter type [6]: Expected `Optional[str]` for 1st parameter `ssl_verify_locations` to call `ServerConnectivityInfo.get_preconfigured_ssl_connection` but got `pathlib.Path`.",
    "message": " Expected `Optional[str]` for 1st parameter `ssl_verify_locations` to call `ServerConnectivityInfo.get_preconfigured_ssl_connection` but got `pathlib.Path`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 54,
    "warning_line": "        ssl_connection = server_info.get_preconfigured_ssl_connection(ssl_verify_locations=mozilla_store.path)"
  },
  {
    "project": "nabla-c0d3/sslyze",
    "commit": "7cc7e249b16bfde12042c503feb3645b1838546f",
    "filename": "sslyze/plugins/http_headers_plugin.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/nabla-c0d3-sslyze/sslyze/plugins/http_headers_plugin.py",
    "file_hunks_size": 16,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "sslyze/plugins/http_headers_plugin.py:150:19 Incompatible parameter type [6]: Expected `int` for 1st positional only parameter to call `StrictTransportSecurityHeader.__init__` but got `Optional[int]`.",
    "message": " Expected `int` for 1st positional only parameter to call `StrictTransportSecurityHeader.__init__` but got `Optional[int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 150,
    "warning_line": "        return cls(max_age, preload, include_subdomains)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from cryptography.x509 import Certificate, load_pem_x509_certificate\nfrom nassl.ssl_client import CouldNotBuildVerifiedChain\n",
        "source_code_len": 125,
        "target_code": "from cryptography.x509 import Certificate, load_pem_x509_certificate\nfrom dataclasses import dataclass\nfrom nassl.ssl_client import CouldNotBuildVerifiedChain\n",
        "target_code_len": 159,
        "diff_format": "@@ -6,2 +6,3 @@\n from cryptography.x509 import Certificate, load_pem_x509_certificate\n+from dataclasses import dataclass\n from nassl.ssl_client import CouldNotBuildVerifiedChain\n",
        "source_code_with_indent": "from cryptography.x509 import Certificate, load_pem_x509_certificate\nfrom nassl.ssl_client import CouldNotBuildVerifiedChain\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from cryptography.x509 import Certificate, load_pem_x509_certificate\nfrom dataclasses import dataclass\nfrom nassl.ssl_client import CouldNotBuildVerifiedChain\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nclass StrictTransportSecurityHeader:\n",
        "source_code_len": 38,
        "target_code": "\n@dataclass\nclass StrictTransportSecurityHeader:\n",
        "target_code_len": 49,
        "diff_format": "@@ -110,2 +111,3 @@\n \n+@dataclass\n class StrictTransportSecurityHeader:\n",
        "source_code_with_indent": "\n<DED>class StrictTransportSecurityHeader:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>@dataclass\nclass StrictTransportSecurityHeader:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        include_subdomains (bool): True if the includesubdomains directive is set.\n        max_age (int): The content of the max-age field.\n    \"\"\"\n\n    def __init__(self, max_age: int, preload: bool, include_subdomains: bool):\n        self.max_age = max_age\n        self.include_subdomains = include_subdomains\n        self.preload = preload\n\n",
        "source_code_len": 344,
        "target_code": "        include_subdomains (bool): True if the includesubdomains directive is set.\n        max_age (Optional[int]): The content of the max-age field.\n    \"\"\"\n    max_age: Optional[int]\n    preload: bool\n    include_subdomains: bool\n\n",
        "target_code_len": 233,
        "diff_format": "@@ -116,9 +118,7 @@\n         include_subdomains (bool): True if the includesubdomains directive is set.\n-        max_age (int): The content of the max-age field.\n-    \"\"\"\n-\n-    def __init__(self, max_age: int, preload: bool, include_subdomains: bool):\n-        self.max_age = max_age\n-        self.include_subdomains = include_subdomains\n-        self.preload = preload\n+        max_age (Optional[int]): The content of the max-age field.\n+    \"\"\"\n+    max_age: Optional[int]\n+    preload: bool\n+    include_subdomains: bool\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n\n    def __init__(self, max_age: int, preload: bool, include_subdomains: bool):\n        <IND>self.max_age = max_age\n        self.include_subdomains = include_subdomains\n        self.preload = preload\n\n",
        "target_code_with_indent": "\n    max_age: Optional[int]\n    preload: bool\n    include_subdomains: bool\n\n"
      }
    ]
  },
  {
    "project": "nabla-c0d3/sslyze",
    "commit": "7cc7e249b16bfde12042c503feb3645b1838546f",
    "filename": "sslyze/plugins/http_headers_plugin.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/nabla-c0d3-sslyze/sslyze/plugins/http_headers_plugin.py",
    "file_hunks_size": 16,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "sslyze/plugins/http_headers_plugin.py:214:19 Incompatible parameter type [6]: Expected `int` for 1st positional only parameter to call `PublicKeyPinsHeader.__init__` but got `Optional[int]`.",
    "message": " Expected `int` for 1st positional only parameter to call `PublicKeyPinsHeader.__init__` but got `Optional[int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 214,
    "warning_line": "        return cls(max_age, pin_sha256_list, include_subdomains, report_uri, report_to)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from cryptography.x509 import Certificate, load_pem_x509_certificate\nfrom nassl.ssl_client import CouldNotBuildVerifiedChain\n",
        "source_code_len": 125,
        "target_code": "from cryptography.x509 import Certificate, load_pem_x509_certificate\nfrom dataclasses import dataclass\nfrom nassl.ssl_client import CouldNotBuildVerifiedChain\n",
        "target_code_len": 159,
        "diff_format": "@@ -6,2 +6,3 @@\n from cryptography.x509 import Certificate, load_pem_x509_certificate\n+from dataclasses import dataclass\n from nassl.ssl_client import CouldNotBuildVerifiedChain\n",
        "source_code_with_indent": "from cryptography.x509 import Certificate, load_pem_x509_certificate\nfrom nassl.ssl_client import CouldNotBuildVerifiedChain\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from cryptography.x509 import Certificate, load_pem_x509_certificate\nfrom dataclasses import dataclass\nfrom nassl.ssl_client import CouldNotBuildVerifiedChain\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from sslyze.utils.http_response_parser import HttpResponseParser\nfrom typing import List, Type, Optional, Dict, Any\n\n",
        "source_code_len": 117,
        "target_code": "from sslyze.utils.http_response_parser import HttpResponseParser\nfrom typing import List, Type, Optional, Dict, Any, TypeVar\n\n",
        "target_code_len": 126,
        "diff_format": "@@ -15,3 +16,3 @@\n from sslyze.utils.http_response_parser import HttpResponseParser\n-from typing import List, Type, Optional, Dict, Any\n+from typing import List, Type, Optional, Dict, Any, TypeVar\n \n",
        "source_code_with_indent": "from sslyze.utils.http_response_parser import HttpResponseParser\nfrom typing import List, Type, Optional, Dict, Any\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from sslyze.utils.http_response_parser import HttpResponseParser\nfrom typing import List, Type, Optional, Dict, Any, TypeVar\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nclass PublicKeyPinsHeader:\n",
        "source_code_len": 28,
        "target_code": "\n_T = TypeVar('_T', bound='PublicKeyPinsHeader')\n\n\n@dataclass\nclass PublicKeyPinsHeader:\n",
        "target_code_len": 89,
        "diff_format": "@@ -152,2 +152,6 @@\n \n+_T = TypeVar('_T', bound='PublicKeyPinsHeader')\n+\n+\n+@dataclass\n class PublicKeyPinsHeader:\n",
        "source_code_with_indent": "\n<DED><DED>class PublicKeyPinsHeader:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED><DED>_T = TypeVar('_T', bound='PublicKeyPinsHeader')\n\n\n@dataclass\nclass PublicKeyPinsHeader:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __init__(\n            self,\n            max_age: int,\n            pin_sha256_list: List[str],\n            include_subdomains: bool,\n            report_uri: Optional[str],\n            report_to: Optional[str],\n    ) -> None:\n        self.max_age = max_age\n        self.pin_sha256_list = pin_sha256_list\n        self.include_subdomains = include_subdomains\n        self.report_uri = report_uri\n        self.report_to = report_to\n\n    @classmethod\n    def from_http_response(cls, response: HTTPResponse) -> Optional['PublicKeyPinsHeader']:\n        raw_hpkp_header = _extract_first_header_value(response, 'public-key-pins')\n",
        "source_code_len": 629,
        "target_code": "\n    max_age: Optional[int]\n    pin_sha256_list: List[str]\n    include_subdomains: bool\n    report_uri: Optional[str]\n    report_to: Optional[str]\n\n    @classmethod\n    def from_http_response(cls: Type[_T], response: HTTPResponse) -> Optional[_T]:\n        raw_hpkp_header = _extract_first_header_value(response, 'public-key-pins')\n",
        "target_code_len": 331,
        "diff_format": "@@ -164,18 +168,10 @@\n \n-    def __init__(\n-            self,\n-            max_age: int,\n-            pin_sha256_list: List[str],\n-            include_subdomains: bool,\n-            report_uri: Optional[str],\n-            report_to: Optional[str],\n-    ) -> None:\n-        self.max_age = max_age\n-        self.pin_sha256_list = pin_sha256_list\n-        self.include_subdomains = include_subdomains\n-        self.report_uri = report_uri\n-        self.report_to = report_to\n-\n-    @classmethod\n-    def from_http_response(cls, response: HTTPResponse) -> Optional['PublicKeyPinsHeader']:\n+    max_age: Optional[int]\n+    pin_sha256_list: List[str]\n+    include_subdomains: bool\n+    report_uri: Optional[str]\n+    report_to: Optional[str]\n+\n+    @classmethod\n+    def from_http_response(cls: Type[_T], response: HTTPResponse) -> Optional[_T]:\n         raw_hpkp_header = _extract_first_header_value(response, 'public-key-pins')\n",
        "source_code_with_indent": "\n    def __init__(\n            self,\n            max_age: int,\n            pin_sha256_list: List[str],\n            include_subdomains: bool,\n            report_uri: Optional[str],\n            report_to: Optional[str],\n    ) -> None:\n        <IND>self.max_age = max_age\n        self.pin_sha256_list = pin_sha256_list\n        self.include_subdomains = include_subdomains\n        self.report_uri = report_uri\n        self.report_to = report_to\n\n    <DED>@classmethod\n    def from_http_response(cls, response: HTTPResponse) -> Optional['PublicKeyPinsHeader']:\n        <IND>raw_hpkp_header = _extract_first_header_value(response, 'public-key-pins')\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    max_age: Optional[int]\n    pin_sha256_list: List[str]\n    include_subdomains: bool\n    report_uri: Optional[str]\n    report_to: Optional[str]\n\n    @classmethod\n    def from_http_response(cls: Type[_T], response: HTTPResponse) -> Optional[_T]:\n        <IND>raw_hpkp_header = _extract_first_header_value(response, 'public-key-pins')\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @classmethod\n    def _from_header(cls, raw_hpkp_header: str) -> 'PublicKeyPinsHeader':\n        report_uri = None\n",
        "source_code_len": 117,
        "target_code": "    @classmethod\n    def _from_header(cls: Type[_T], raw_hpkp_header: str) -> _T:\n        report_uri = None\n",
        "target_code_len": 108,
        "diff_format": "@@ -186,3 +182,3 @@\n     @classmethod\n-    def _from_header(cls, raw_hpkp_header: str) -> 'PublicKeyPinsHeader':\n+    def _from_header(cls: Type[_T], raw_hpkp_header: str) -> _T:\n         report_uri = None\n",
        "source_code_with_indent": "    <DED>@classmethod\n    def _from_header(cls, raw_hpkp_header: str) -> 'PublicKeyPinsHeader':\n        <IND>report_uri = None\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@classmethod\n    def _from_header(cls: Type[_T], raw_hpkp_header: str) -> _T:\n        <IND>report_uri = None\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "nabla-c0d3/sslyze",
    "commit": "7cc7e249b16bfde12042c503feb3645b1838546f",
    "filename": "sslyze/plugins/http_headers_plugin.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/nabla-c0d3-sslyze/sslyze/plugins/http_headers_plugin.py",
    "file_hunks_size": 16,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "sslyze/plugins/http_headers_plugin.py:234:8 Incompatible return type [7]: Expected `Optional[PublicKeyPinsReportOnlyHeader]` but got `PublicKeyPinsHeader`.",
    "message": " Expected `Optional[PublicKeyPinsReportOnlyHeader]` but got `PublicKeyPinsHeader`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 234,
    "warning_line": "        return cls._from_header(raw_hpkp_report_only_header)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from cryptography.x509 import Certificate, load_pem_x509_certificate\nfrom nassl.ssl_client import CouldNotBuildVerifiedChain\n",
        "source_code_len": 125,
        "target_code": "from cryptography.x509 import Certificate, load_pem_x509_certificate\nfrom dataclasses import dataclass\nfrom nassl.ssl_client import CouldNotBuildVerifiedChain\n",
        "target_code_len": 159,
        "diff_format": "@@ -6,2 +6,3 @@\n from cryptography.x509 import Certificate, load_pem_x509_certificate\n+from dataclasses import dataclass\n from nassl.ssl_client import CouldNotBuildVerifiedChain\n",
        "source_code_with_indent": "from cryptography.x509 import Certificate, load_pem_x509_certificate\nfrom nassl.ssl_client import CouldNotBuildVerifiedChain\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from cryptography.x509 import Certificate, load_pem_x509_certificate\nfrom dataclasses import dataclass\nfrom nassl.ssl_client import CouldNotBuildVerifiedChain\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from sslyze.utils.http_response_parser import HttpResponseParser\nfrom typing import List, Type, Optional, Dict, Any\n\n",
        "source_code_len": 117,
        "target_code": "from sslyze.utils.http_response_parser import HttpResponseParser\nfrom typing import List, Type, Optional, Dict, Any, TypeVar\n\n",
        "target_code_len": 126,
        "diff_format": "@@ -15,3 +16,3 @@\n from sslyze.utils.http_response_parser import HttpResponseParser\n-from typing import List, Type, Optional, Dict, Any\n+from typing import List, Type, Optional, Dict, Any, TypeVar\n \n",
        "source_code_with_indent": "from sslyze.utils.http_response_parser import HttpResponseParser\nfrom typing import List, Type, Optional, Dict, Any\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from sslyze.utils.http_response_parser import HttpResponseParser\nfrom typing import List, Type, Optional, Dict, Any, TypeVar\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nclass PublicKeyPinsHeader:\n",
        "source_code_len": 28,
        "target_code": "\n_T = TypeVar('_T', bound='PublicKeyPinsHeader')\n\n\n@dataclass\nclass PublicKeyPinsHeader:\n",
        "target_code_len": 89,
        "diff_format": "@@ -152,2 +152,6 @@\n \n+_T = TypeVar('_T', bound='PublicKeyPinsHeader')\n+\n+\n+@dataclass\n class PublicKeyPinsHeader:\n",
        "source_code_with_indent": "\n<DED><DED>class PublicKeyPinsHeader:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED><DED>_T = TypeVar('_T', bound='PublicKeyPinsHeader')\n\n\n@dataclass\nclass PublicKeyPinsHeader:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @classmethod\n    def _from_header(cls, raw_hpkp_header: str) -> 'PublicKeyPinsHeader':\n        report_uri = None\n",
        "source_code_len": 117,
        "target_code": "    @classmethod\n    def _from_header(cls: Type[_T], raw_hpkp_header: str) -> _T:\n        report_uri = None\n",
        "target_code_len": 108,
        "diff_format": "@@ -186,3 +182,3 @@\n     @classmethod\n-    def _from_header(cls, raw_hpkp_header: str) -> 'PublicKeyPinsHeader':\n+    def _from_header(cls: Type[_T], raw_hpkp_header: str) -> _T:\n         report_uri = None\n",
        "source_code_with_indent": "    <DED>@classmethod\n    def _from_header(cls, raw_hpkp_header: str) -> 'PublicKeyPinsHeader':\n        <IND>report_uri = None\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@classmethod\n    def _from_header(cls: Type[_T], raw_hpkp_header: str) -> _T:\n        <IND>report_uri = None\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "nabla-c0d3/sslyze",
    "commit": "7cc7e249b16bfde12042c503feb3645b1838546f",
    "filename": "sslyze/plugins/http_headers_plugin.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/nabla-c0d3-sslyze/sslyze/plugins/http_headers_plugin.py",
    "file_hunks_size": 16,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "sslyze/plugins/http_headers_plugin.py:275:19 Incompatible parameter type [6]: Expected `int` for 1st positional only parameter to call `ExpectCtHeader.__init__` but got `Optional[int]`.",
    "message": " Expected `int` for 1st positional only parameter to call `ExpectCtHeader.__init__` but got `Optional[int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 275,
    "warning_line": "        return cls(max_age, report_uri, enforce)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from cryptography.x509 import Certificate, load_pem_x509_certificate\nfrom nassl.ssl_client import CouldNotBuildVerifiedChain\n",
        "source_code_len": 125,
        "target_code": "from cryptography.x509 import Certificate, load_pem_x509_certificate\nfrom dataclasses import dataclass\nfrom nassl.ssl_client import CouldNotBuildVerifiedChain\n",
        "target_code_len": 159,
        "diff_format": "@@ -6,2 +6,3 @@\n from cryptography.x509 import Certificate, load_pem_x509_certificate\n+from dataclasses import dataclass\n from nassl.ssl_client import CouldNotBuildVerifiedChain\n",
        "source_code_with_indent": "from cryptography.x509 import Certificate, load_pem_x509_certificate\nfrom nassl.ssl_client import CouldNotBuildVerifiedChain\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from cryptography.x509 import Certificate, load_pem_x509_certificate\nfrom dataclasses import dataclass\nfrom nassl.ssl_client import CouldNotBuildVerifiedChain\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nclass ExpectCtHeader:\n",
        "source_code_len": 23,
        "target_code": "\n@dataclass\nclass ExpectCtHeader:\n",
        "target_code_len": 34,
        "diff_format": "@@ -236,2 +233,3 @@\n \n+@dataclass\n class ExpectCtHeader:\n",
        "source_code_with_indent": "\n<DED><DED>class ExpectCtHeader:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED><DED>@dataclass\nclass ExpectCtHeader:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    Attributes:\n        max-age (int): The content of the max-age field.\n        report-uri (str): The content of report-uri field.\n        enforce (bool): True if enforce directive is set.\n    \"\"\"\n\n    def __init__(self, max_age: int, report_uri: str, enforce: bool) -> None:\n        self.max_age = max_age\n        self.report_uri = report_uri\n        self.enforce = enforce\n\n",
        "source_code_len": 377,
        "target_code": "    Attributes:\n        max-age (Optional[int]): The content of the max-age field.\n        report-uri (Optional[str]): The content of report-uri field.\n        enforce (bool): True if enforce directive is set.\n    \"\"\"\n    max_age: Optional[int]\n    report_uri: Optional[str]\n    enforce: bool\n\n",
        "target_code_len": 294,
        "diff_format": "@@ -240,11 +238,9 @@\n     Attributes:\n-        max-age (int): The content of the max-age field.\n-        report-uri (str): The content of report-uri field.\n+        max-age (Optional[int]): The content of the max-age field.\n+        report-uri (Optional[str]): The content of report-uri field.\n         enforce (bool): True if enforce directive is set.\n     \"\"\"\n-\n-    def __init__(self, max_age: int, report_uri: str, enforce: bool) -> None:\n-        self.max_age = max_age\n-        self.report_uri = report_uri\n-        self.enforce = enforce\n+    max_age: Optional[int]\n+    report_uri: Optional[str]\n+    enforce: bool\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n\n    def __init__(self, max_age: int, report_uri: str, enforce: bool) -> None:\n        <IND>self.max_age = max_age\n        self.report_uri = report_uri\n        self.enforce = enforce\n\n",
        "target_code_with_indent": "\n    max_age: Optional[int]\n    report_uri: Optional[str]\n    enforce: bool\n\n"
      }
    ]
  },
  {
    "project": "nabla-c0d3/sslyze",
    "commit": "7cc7e249b16bfde12042c503feb3645b1838546f",
    "filename": "sslyze/plugins/http_headers_plugin.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/nabla-c0d3-sslyze/sslyze/plugins/http_headers_plugin.py",
    "file_hunks_size": 16,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "sslyze/plugins/http_headers_plugin.py:275:28 Incompatible parameter type [6]: Expected `str` for 2nd positional only parameter to call `ExpectCtHeader.__init__` but got `Optional[str]`.",
    "message": " Expected `str` for 2nd positional only parameter to call `ExpectCtHeader.__init__` but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 275,
    "warning_line": "        return cls(max_age, report_uri, enforce)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from cryptography.x509 import Certificate, load_pem_x509_certificate\nfrom nassl.ssl_client import CouldNotBuildVerifiedChain\n",
        "source_code_len": 125,
        "target_code": "from cryptography.x509 import Certificate, load_pem_x509_certificate\nfrom dataclasses import dataclass\nfrom nassl.ssl_client import CouldNotBuildVerifiedChain\n",
        "target_code_len": 159,
        "diff_format": "@@ -6,2 +6,3 @@\n from cryptography.x509 import Certificate, load_pem_x509_certificate\n+from dataclasses import dataclass\n from nassl.ssl_client import CouldNotBuildVerifiedChain\n",
        "source_code_with_indent": "from cryptography.x509 import Certificate, load_pem_x509_certificate\nfrom nassl.ssl_client import CouldNotBuildVerifiedChain\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from cryptography.x509 import Certificate, load_pem_x509_certificate\nfrom dataclasses import dataclass\nfrom nassl.ssl_client import CouldNotBuildVerifiedChain\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nclass ExpectCtHeader:\n",
        "source_code_len": 23,
        "target_code": "\n@dataclass\nclass ExpectCtHeader:\n",
        "target_code_len": 34,
        "diff_format": "@@ -236,2 +233,3 @@\n \n+@dataclass\n class ExpectCtHeader:\n",
        "source_code_with_indent": "\n<DED><DED>class ExpectCtHeader:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED><DED>@dataclass\nclass ExpectCtHeader:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    Attributes:\n        max-age (int): The content of the max-age field.\n        report-uri (str): The content of report-uri field.\n        enforce (bool): True if enforce directive is set.\n    \"\"\"\n\n    def __init__(self, max_age: int, report_uri: str, enforce: bool) -> None:\n        self.max_age = max_age\n        self.report_uri = report_uri\n        self.enforce = enforce\n\n",
        "source_code_len": 377,
        "target_code": "    Attributes:\n        max-age (Optional[int]): The content of the max-age field.\n        report-uri (Optional[str]): The content of report-uri field.\n        enforce (bool): True if enforce directive is set.\n    \"\"\"\n    max_age: Optional[int]\n    report_uri: Optional[str]\n    enforce: bool\n\n",
        "target_code_len": 294,
        "diff_format": "@@ -240,11 +238,9 @@\n     Attributes:\n-        max-age (int): The content of the max-age field.\n-        report-uri (str): The content of report-uri field.\n+        max-age (Optional[int]): The content of the max-age field.\n+        report-uri (Optional[str]): The content of report-uri field.\n         enforce (bool): True if enforce directive is set.\n     \"\"\"\n-\n-    def __init__(self, max_age: int, report_uri: str, enforce: bool) -> None:\n-        self.max_age = max_age\n-        self.report_uri = report_uri\n-        self.enforce = enforce\n+    max_age: Optional[int]\n+    report_uri: Optional[str]\n+    enforce: bool\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n\n    def __init__(self, max_age: int, report_uri: str, enforce: bool) -> None:\n        <IND>self.max_age = max_age\n        self.report_uri = report_uri\n        self.enforce = enforce\n\n",
        "target_code_with_indent": "\n    max_age: Optional[int]\n    report_uri: Optional[str]\n    enforce: bool\n\n"
      }
    ]
  }
]