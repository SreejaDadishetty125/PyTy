[
  {
    "project": "automl/SMAC3",
    "commit": "0acf35f9d0a5044f285308957f883bd6cf7a11e1",
    "filename": "examples/branin/branin_fmin.py",
    "min_patch_found": false,
    "full_warning_msg": "examples/branin/branin_fmin.py:18:27 Incompatible parameter type [6]: Expected `typing.List[typing.List[float]]` for 3rd parameter `bounds` to call `fmin_smac` but got `typing.List[typing.Tuple[int, int]]`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "automl/SMAC3",
    "commit": "0acf35f9d0a5044f285308957f883bd6cf7a11e1",
    "filename": "examples/rosenbrock.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/automl-SMAC3/examples/rosenbrock.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "examples/rosenbrock.py:28:23 Incompatible parameter type [6]: Expected `typing.List[typing.List[float]]` for 3rd parameter `bounds` to call `fmin_smac` but got `typing.List[typing.Tuple[int, int]]`.",
    "message": " Expected `typing.List[typing.List[float]]` for 3rd parameter `bounds` to call `fmin_smac` but got `typing.List[typing.Tuple[int, int]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 28,
    "warning_line": "                       bounds=[(-5, 5), (-5, 5)],"
  },
  {
    "project": "automl/SMAC3",
    "commit": "0acf35f9d0a5044f285308957f883bd6cf7a11e1",
    "filename": "smac/epm/uncorrelated_mo_rf_with_instances.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/automl-SMAC3/smac/epm/uncorrelated_mo_rf_with_instances.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "smac/epm/uncorrelated_mo_rf_with_instances.py:50:25 Incompatible parameter type [6]: Expected `List[typing.Tuple[float, float]]` for 1st parameter `bounds` to call `AbstractEPM.__init__` but got `List[float]`.",
    "message": " Expected `List[typing.Tuple[float, float]]` for 1st parameter `bounds` to call `AbstractEPM.__init__` but got `List[float]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 50,
    "warning_line": "        super().__init__(bounds=bounds, types=types, **kwargs)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import List, Dict, Any, Optional\n\n",
        "source_code_len": 47,
        "target_code": "\nfrom typing import List, Dict, Any, Optional, Tuple\n\n",
        "target_code_len": 54,
        "diff_format": "@@ -5,3 +5,3 @@\n \n-from typing import List, Dict, Any, Optional\n+from typing import List, Dict, Any, Optional, Tuple\n \n",
        "source_code_with_indent": "\nfrom typing import List, Dict, Any, Optional\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import List, Dict, Any, Optional, Tuple\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            target_names: List[str],\n            bounds: List[float],\n            types: np.ndarray,\n            rf_kwargs: Optional[Dict[str, Any]]=None,\n",
        "source_code_len": 155,
        "target_code": "            target_names: List[str],\n            bounds: List[Tuple[float, float]],\n            types: np.ndarray,\n            seed: int,\n            rf_kwargs: Optional[Dict[str, Any]]=None,\n",
        "target_code_len": 192,
        "diff_format": "@@ -27,4 +27,5 @@\n             target_names: List[str],\n-            bounds: List[float],\n+            bounds: List[Tuple[float, float]],\n             types: np.ndarray,\n+            seed: int,\n             rf_kwargs: Optional[Dict[str, Any]]=None,\n",
        "source_code_with_indent": "            target_names: List[str],\n            bounds: List[float],\n            types: np.ndarray,\n            rf_kwargs: Optional[Dict[str, Any]]=None,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            target_names: List[str],\n            bounds: List[Tuple[float, float]],\n            types: np.ndarray,\n            seed: int,\n            rf_kwargs: Optional[Dict[str, Any]]=None,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "automl/SMAC3",
    "commit": "0acf35f9d0a5044f285308957f883bd6cf7a11e1",
    "filename": "smac/epm/uncorrelated_mo_rf_with_instances.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/automl-SMAC3/smac/epm/uncorrelated_mo_rf_with_instances.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "smac/epm/uncorrelated_mo_rf_with_instances.py:56:60 Incompatible parameter type [6]: Expected `List[typing.Tuple[float, float]]` for 2nd positional only parameter to call `RandomForestWithInstances.__init__` but got `List[float]`.",
    "message": " Expected `List[typing.Tuple[float, float]]` for 2nd positional only parameter to call `RandomForestWithInstances.__init__` but got `List[float]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 56,
    "warning_line": "        self.estimators = [RandomForestWithInstances(types, bounds, **rf_kwargs)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import List, Dict, Any, Optional\n\n",
        "source_code_len": 47,
        "target_code": "\nfrom typing import List, Dict, Any, Optional, Tuple\n\n",
        "target_code_len": 54,
        "diff_format": "@@ -5,3 +5,3 @@\n \n-from typing import List, Dict, Any, Optional\n+from typing import List, Dict, Any, Optional, Tuple\n \n",
        "source_code_with_indent": "\nfrom typing import List, Dict, Any, Optional\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import List, Dict, Any, Optional, Tuple\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            target_names: List[str],\n            bounds: List[float],\n            types: np.ndarray,\n            rf_kwargs: Optional[Dict[str, Any]]=None,\n",
        "source_code_len": 155,
        "target_code": "            target_names: List[str],\n            bounds: List[Tuple[float, float]],\n            types: np.ndarray,\n            seed: int,\n            rf_kwargs: Optional[Dict[str, Any]]=None,\n",
        "target_code_len": 192,
        "diff_format": "@@ -27,4 +27,5 @@\n             target_names: List[str],\n-            bounds: List[float],\n+            bounds: List[Tuple[float, float]],\n             types: np.ndarray,\n+            seed: int,\n             rf_kwargs: Optional[Dict[str, Any]]=None,\n",
        "source_code_with_indent": "            target_names: List[str],\n            bounds: List[float],\n            types: np.ndarray,\n            rf_kwargs: Optional[Dict[str, Any]]=None,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            target_names: List[str],\n            bounds: List[Tuple[float, float]],\n            types: np.ndarray,\n            seed: int,\n            rf_kwargs: Optional[Dict[str, Any]]=None,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "automl/SMAC3",
    "commit": "0acf35f9d0a5044f285308957f883bd6cf7a11e1",
    "filename": "smac/facade/epils_facade.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/automl-SMAC3/smac/facade/epils_facade.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "smac/facade/epils_facade.py:119:50 Incompatible parameter type [6]: Expected `typing.Type[Scenario]` for 1st positional only parameter to call `create_output_directory` but got `Scenario`.",
    "message": " Expected `typing.Type[Scenario]` for 1st positional only parameter to call `create_output_directory` but got `Scenario`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 119,
    "warning_line": "        self.output_dir = create_output_directory(scenario, run_id)"
  },
  {
    "project": "automl/SMAC3",
    "commit": "0acf35f9d0a5044f285308957f883bd6cf7a11e1",
    "filename": "smac/facade/psmac_facade.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/automl-SMAC3/smac/facade/psmac_facade.py",
    "file_hunks_size": 8,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "smac/facade/psmac_facade.py:59:4 Incompatible variable type [9]: tae is declared to have type `typing.Type[smac.tae.execute_ta_run.ExecuteTARun]` but is used as type `smac.tae.execute_ta_run.ExecuteTARun`.",
    "message": " tae is declared to have type `typing.Type[smac.tae.execute_ta_run.ExecuteTARun]` but is used as type `smac.tae.execute_ta_run.ExecuteTARun`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 59,
    "warning_line": "    tae = tae(ta=scenario.ta, run_obj=scenario.run_obj)"
  },
  {
    "project": "automl/SMAC3",
    "commit": "0acf35f9d0a5044f285308957f883bd6cf7a11e1",
    "filename": "smac/initial_design/multi_config_initial_design.py",
    "min_patch_found": false,
    "full_warning_msg": "smac/initial_design/multi_config_initial_design.py:123:8 Incompatible attribute type [8]: Attribute `_select_configuration` declared in class `SingleConfigInitialDesign` has type `BoundMethod[typing.Callable(SingleConfigInitialDesign._select_configuration)[[Named(self, SingleConfigInitialDesign)], unknown], SingleConfigInitialDesign]` but is used as type `typing.Callable[[], typing.Any]`.",
    "exception": "[Errno 2] No such file or directory: '/home/chowyi/TypeAnnotation_Study/GitHub/automl-SMAC3/smac/initial_design/multi_config_initial_design.py'",
    "dd_fail": true
  },
  {
    "project": "automl/SMAC3",
    "commit": "0acf35f9d0a5044f285308957f883bd6cf7a11e1",
    "filename": "smac/initial_design/single_config_initial_design.py",
    "min_patch_found": false,
    "full_warning_msg": "smac/initial_design/single_config_initial_design.py:96:50 Unbound name [10]: Name `scenario` is used but not defined in the current scope.",
    "exception": "[Errno 2] No such file or directory: '/home/chowyi/TypeAnnotation_Study/GitHub/automl-SMAC3/smac/initial_design/single_config_initial_design.py'",
    "dd_fail": true
  },
  {
    "project": "automl/SMAC3",
    "commit": "0acf35f9d0a5044f285308957f883bd6cf7a11e1",
    "filename": "smac/smac_cli.py",
    "min_patch_found": false,
    "full_warning_msg": "smac/smac_cli.py:86:16 Incompatible parameter type [6]: Expected `typing.Type[Scenario]` for 1st positional only parameter to call `create_output_directory` but got `Scenario`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  }
]