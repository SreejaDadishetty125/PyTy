[
  {
    "project": "python/mypy",
    "commit": "855076b6a672017f7dbafe3080cf9daa31f5f1f3",
    "filename": "mypy/types.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-mypy/mypy/types.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mypy/types.py:2087:8 Incompatible return type [7]: Expected `FunctionLike` but got `ProperType`.",
    "message": " Expected `FunctionLike` but got `ProperType`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 2087,
    "warning_line": "        return func.type",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "\ndef function_type(func: mypy.nodes.FuncBase, fallback: Instance) -> FunctionLike:\n    if func.type:\n        assert isinstance(func.type, FunctionLike)\n        return func.type\n    else:\n        # Implicit type signature with dynamic types.\n        if isinstance(func, mypy.nodes.FuncItem):\n            return callable_type(func, fallback)\n        else:\n            # Broken overloads can have self.type set to None.\n            # TODO: should we instead always set the type in semantic analyzer?\n            assert isinstance(func, mypy.nodes.OverloadedFuncDef)\n            any_type = AnyType(TypeOfAny.from_error)\n            dummy = CallableType([any_type, any_type],\n                                 [ARG_STAR, ARG_STAR2],\n                                 [None, None], any_type,\n                                 fallback,\n                                 line=func.line, is_ellipsis_args=True)\n            # Return an Overloaded, because some callers may expect that\n            # an OverloadedFuncDef has an Overloaded type.\n            return Overloaded([dummy])\n\n\ndef callable_type(fdef: mypy.nodes.FuncItem, fallback: Instance,\n                  ret_type: Optional[Type] = None) -> CallableType:\n    return CallableType(\n        [AnyType(TypeOfAny.unannotated)] * len(fdef.arg_names),\n        fdef.arg_kinds,\n        [None if argument_elide_name(n) else n for n in fdef.arg_names],\n        ret_type or AnyType(TypeOfAny.unannotated),\n        fallback,\n        name=fdef.name(),\n        line=fdef.line,\n        column=fdef.column,\n        implicit=True,\n    )\n\n\ndef replace_alias_tvars(tp: Type, vars: List[str], subs: List[Type],\n",
        "source_code_len": 1639,
        "target_code": "\ndef replace_alias_tvars(tp: Type, vars: List[str], subs: List[Type],\n",
        "target_code_len": 70,
        "diff_format": "@@ -2083,40 +2082,2 @@\n \n-def function_type(func: mypy.nodes.FuncBase, fallback: Instance) -> FunctionLike:\n-    if func.type:\n-        assert isinstance(func.type, FunctionLike)\n-        return func.type\n-    else:\n-        # Implicit type signature with dynamic types.\n-        if isinstance(func, mypy.nodes.FuncItem):\n-            return callable_type(func, fallback)\n-        else:\n-            # Broken overloads can have self.type set to None.\n-            # TODO: should we instead always set the type in semantic analyzer?\n-            assert isinstance(func, mypy.nodes.OverloadedFuncDef)\n-            any_type = AnyType(TypeOfAny.from_error)\n-            dummy = CallableType([any_type, any_type],\n-                                 [ARG_STAR, ARG_STAR2],\n-                                 [None, None], any_type,\n-                                 fallback,\n-                                 line=func.line, is_ellipsis_args=True)\n-            # Return an Overloaded, because some callers may expect that\n-            # an OverloadedFuncDef has an Overloaded type.\n-            return Overloaded([dummy])\n-\n-\n-def callable_type(fdef: mypy.nodes.FuncItem, fallback: Instance,\n-                  ret_type: Optional[Type] = None) -> CallableType:\n-    return CallableType(\n-        [AnyType(TypeOfAny.unannotated)] * len(fdef.arg_names),\n-        fdef.arg_kinds,\n-        [None if argument_elide_name(n) else n for n in fdef.arg_names],\n-        ret_type or AnyType(TypeOfAny.unannotated),\n-        fallback,\n-        name=fdef.name(),\n-        line=fdef.line,\n-        column=fdef.column,\n-        implicit=True,\n-    )\n-\n-\n def replace_alias_tvars(tp: Type, vars: List[str], subs: List[Type],\n",
        "source_code_with_indent": "\n<DED>def function_type(func: mypy.nodes.FuncBase, fallback: Instance) -> FunctionLike:\n    <IND>if func.type:\n        <IND>assert isinstance(func.type, FunctionLike)\n        return func.type\n    <DED>else:\n        # Implicit type signature with dynamic types.\n        <IND>if isinstance(func, mypy.nodes.FuncItem):\n            <IND>return callable_type(func, fallback)\n        <DED>else:\n            # Broken overloads can have self.type set to None.\n            # TODO: should we instead always set the type in semantic analyzer?\n            <IND>assert isinstance(func, mypy.nodes.OverloadedFuncDef)\n            any_type = AnyType(TypeOfAny.from_error)\n            dummy = CallableType([any_type, any_type],\n                                 [ARG_STAR, ARG_STAR2],\n                                 [None, None], any_type,\n                                 fallback,\n                                 line=func.line, is_ellipsis_args=True)\n            # Return an Overloaded, because some callers may expect that\n            # an OverloadedFuncDef has an Overloaded type.\n            return Overloaded([dummy])\n\n\n<DED><DED><DED>def callable_type(fdef: mypy.nodes.FuncItem, fallback: Instance,\n                  ret_type: Optional[Type] = None) -> CallableType:\n    <IND>return CallableType(\n        [AnyType(TypeOfAny.unannotated)] * len(fdef.arg_names),\n        fdef.arg_kinds,\n        [None if argument_elide_name(n) else n for n in fdef.arg_names],\n        ret_type or AnyType(TypeOfAny.unannotated),\n        fallback,\n        name=fdef.name(),\n        line=fdef.line,\n        column=fdef.column,\n        implicit=True,\n    )\n\n\n<DED>def replace_alias_tvars(tp: Type, vars: List[str], subs: List[Type],\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def replace_alias_tvars(tp: Type, vars: List[str], subs: List[Type],\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "python/mypy",
    "commit": "855076b6a672017f7dbafe3080cf9daa31f5f1f3",
    "filename": "mypy/types.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-mypy/mypy/types.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mypy/types.py:2098:33 Incompatible parameter type [6]: Expected `List[int]` for 2nd positional only parameter to call `CallableType.__init__` but got `List[Final[int]]`.",
    "message": " Expected `List[int]` for 2nd positional only parameter to call `CallableType.__init__` but got `List[Final[int]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 2098,
    "warning_line": "                                 [ARG_STAR, ARG_STAR2],",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "\ndef function_type(func: mypy.nodes.FuncBase, fallback: Instance) -> FunctionLike:\n    if func.type:\n        assert isinstance(func.type, FunctionLike)\n        return func.type\n    else:\n        # Implicit type signature with dynamic types.\n        if isinstance(func, mypy.nodes.FuncItem):\n            return callable_type(func, fallback)\n        else:\n            # Broken overloads can have self.type set to None.\n            # TODO: should we instead always set the type in semantic analyzer?\n            assert isinstance(func, mypy.nodes.OverloadedFuncDef)\n            any_type = AnyType(TypeOfAny.from_error)\n            dummy = CallableType([any_type, any_type],\n                                 [ARG_STAR, ARG_STAR2],\n                                 [None, None], any_type,\n                                 fallback,\n                                 line=func.line, is_ellipsis_args=True)\n            # Return an Overloaded, because some callers may expect that\n            # an OverloadedFuncDef has an Overloaded type.\n            return Overloaded([dummy])\n\n\ndef callable_type(fdef: mypy.nodes.FuncItem, fallback: Instance,\n                  ret_type: Optional[Type] = None) -> CallableType:\n    return CallableType(\n        [AnyType(TypeOfAny.unannotated)] * len(fdef.arg_names),\n        fdef.arg_kinds,\n        [None if argument_elide_name(n) else n for n in fdef.arg_names],\n        ret_type or AnyType(TypeOfAny.unannotated),\n        fallback,\n        name=fdef.name(),\n        line=fdef.line,\n        column=fdef.column,\n        implicit=True,\n    )\n\n\ndef replace_alias_tvars(tp: Type, vars: List[str], subs: List[Type],\n",
        "source_code_len": 1639,
        "target_code": "\ndef replace_alias_tvars(tp: Type, vars: List[str], subs: List[Type],\n",
        "target_code_len": 70,
        "diff_format": "@@ -2083,40 +2082,2 @@\n \n-def function_type(func: mypy.nodes.FuncBase, fallback: Instance) -> FunctionLike:\n-    if func.type:\n-        assert isinstance(func.type, FunctionLike)\n-        return func.type\n-    else:\n-        # Implicit type signature with dynamic types.\n-        if isinstance(func, mypy.nodes.FuncItem):\n-            return callable_type(func, fallback)\n-        else:\n-            # Broken overloads can have self.type set to None.\n-            # TODO: should we instead always set the type in semantic analyzer?\n-            assert isinstance(func, mypy.nodes.OverloadedFuncDef)\n-            any_type = AnyType(TypeOfAny.from_error)\n-            dummy = CallableType([any_type, any_type],\n-                                 [ARG_STAR, ARG_STAR2],\n-                                 [None, None], any_type,\n-                                 fallback,\n-                                 line=func.line, is_ellipsis_args=True)\n-            # Return an Overloaded, because some callers may expect that\n-            # an OverloadedFuncDef has an Overloaded type.\n-            return Overloaded([dummy])\n-\n-\n-def callable_type(fdef: mypy.nodes.FuncItem, fallback: Instance,\n-                  ret_type: Optional[Type] = None) -> CallableType:\n-    return CallableType(\n-        [AnyType(TypeOfAny.unannotated)] * len(fdef.arg_names),\n-        fdef.arg_kinds,\n-        [None if argument_elide_name(n) else n for n in fdef.arg_names],\n-        ret_type or AnyType(TypeOfAny.unannotated),\n-        fallback,\n-        name=fdef.name(),\n-        line=fdef.line,\n-        column=fdef.column,\n-        implicit=True,\n-    )\n-\n-\n def replace_alias_tvars(tp: Type, vars: List[str], subs: List[Type],\n",
        "source_code_with_indent": "\n<DED>def function_type(func: mypy.nodes.FuncBase, fallback: Instance) -> FunctionLike:\n    <IND>if func.type:\n        <IND>assert isinstance(func.type, FunctionLike)\n        return func.type\n    <DED>else:\n        # Implicit type signature with dynamic types.\n        <IND>if isinstance(func, mypy.nodes.FuncItem):\n            <IND>return callable_type(func, fallback)\n        <DED>else:\n            # Broken overloads can have self.type set to None.\n            # TODO: should we instead always set the type in semantic analyzer?\n            <IND>assert isinstance(func, mypy.nodes.OverloadedFuncDef)\n            any_type = AnyType(TypeOfAny.from_error)\n            dummy = CallableType([any_type, any_type],\n                                 [ARG_STAR, ARG_STAR2],\n                                 [None, None], any_type,\n                                 fallback,\n                                 line=func.line, is_ellipsis_args=True)\n            # Return an Overloaded, because some callers may expect that\n            # an OverloadedFuncDef has an Overloaded type.\n            return Overloaded([dummy])\n\n\n<DED><DED><DED>def callable_type(fdef: mypy.nodes.FuncItem, fallback: Instance,\n                  ret_type: Optional[Type] = None) -> CallableType:\n    <IND>return CallableType(\n        [AnyType(TypeOfAny.unannotated)] * len(fdef.arg_names),\n        fdef.arg_kinds,\n        [None if argument_elide_name(n) else n for n in fdef.arg_names],\n        ret_type or AnyType(TypeOfAny.unannotated),\n        fallback,\n        name=fdef.name(),\n        line=fdef.line,\n        column=fdef.column,\n        implicit=True,\n    )\n\n\n<DED>def replace_alias_tvars(tp: Type, vars: List[str], subs: List[Type],\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def replace_alias_tvars(tp: Type, vars: List[str], subs: List[Type],\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]