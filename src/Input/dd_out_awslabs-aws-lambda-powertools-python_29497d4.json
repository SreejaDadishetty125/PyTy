[
  {
    "project": "awslabs/aws-lambda-powertools-python",
    "commit": "29497d47d63b2e795c2a9d81eaca3985dfe8f071",
    "filename": "aws_lambda_powertools/logging/logger.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/awslabs-aws-lambda-powertools-python/aws_lambda_powertools/logging/logger.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "aws_lambda_powertools/logging/logger.py:129:12 Incompatible parameter type [6]: Expected `bool` for 1st parameter `choice` to call `resolve_env_var_choice` but got `str`.",
    "message": " Expected `bool` for 1st parameter `choice` to call `resolve_env_var_choice` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 129,
    "warning_line": "            choice=service, env=os.getenv(constants.SERVICE_NAME_ENV, \"service_undefined\")"
  },
  {
    "project": "awslabs/aws-lambda-powertools-python",
    "commit": "29497d47d63b2e795c2a9d81eaca3985dfe8f071",
    "filename": "aws_lambda_powertools/logging/logger.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/awslabs-aws-lambda-powertools-python/aws_lambda_powertools/logging/logger.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "aws_lambda_powertools/logging/logger.py:132:12 Incompatible parameter type [6]: Expected `bool` for 1st parameter `choice` to call `resolve_env_var_choice` but got `float`.",
    "message": " Expected `bool` for 1st parameter `choice` to call `resolve_env_var_choice` but got `float`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 132,
    "warning_line": "            choice=sampling_rate, env=os.getenv(constants.LOGGER_LOG_SAMPLING_RATE, 0.0)"
  },
  {
    "project": "awslabs/aws-lambda-powertools-python",
    "commit": "29497d47d63b2e795c2a9d81eaca3985dfe8f071",
    "filename": "aws_lambda_powertools/logging/logger.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/awslabs-aws-lambda-powertools-python/aws_lambda_powertools/logging/logger.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "aws_lambda_powertools/logging/logger.py:326:8 Incompatible variable type [9]: log_level is declared to have type `str` but is used as type `typing.Optional[str]`.",
    "message": " log_level is declared to have type `str` but is used as type `typing.Optional[str]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 326,
    "warning_line": "        log_level: str = level or os.getenv(\"LOG_LEVEL\")",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import sys\nfrom typing import Any, Callable, Dict, Union\n\n",
        "source_code_len": 58,
        "target_code": "import sys\nfrom typing import Any, Callable, Dict, Optional, Union\n\n",
        "target_code_len": 68,
        "diff_format": "@@ -6,3 +6,3 @@\n import sys\n-from typing import Any, Callable, Dict, Union\n+from typing import Any, Callable, Dict, Optional, Union\n \n",
        "source_code_with_indent": "import sys\nfrom typing import Any, Callable, Dict, Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import sys\nfrom typing import Any, Callable, Dict, Optional, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        log_level: str = level or os.getenv(\"LOG_LEVEL\")\n        if log_level is None:\n",
        "source_code_len": 88,
        "target_code": "\n        log_level: Optional[str] = level or os.getenv(\"LOG_LEVEL\")\n        if log_level is None:\n",
        "target_code_len": 98,
        "diff_format": "@@ -325,3 +325,3 @@\n \n-        log_level: str = level or os.getenv(\"LOG_LEVEL\")\n+        log_level: Optional[str] = level or os.getenv(\"LOG_LEVEL\")\n         if log_level is None:\n",
        "source_code_with_indent": "\n        <DED>log_level: str = level or os.getenv(\"LOG_LEVEL\")\n        if log_level is None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        <DED>log_level: Optional[str] = level or os.getenv(\"LOG_LEVEL\")\n        if log_level is None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "awslabs/aws-lambda-powertools-python",
    "commit": "29497d47d63b2e795c2a9d81eaca3985dfe8f071",
    "filename": "aws_lambda_powertools/metrics/base.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/awslabs-aws-lambda-powertools-python/aws_lambda_powertools/metrics/base.py",
    "file_hunks_size": 1,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "aws_lambda_powertools/metrics/base.py:87:48 Incompatible parameter type [6]: Expected `bool` for 1st parameter `choice` to call `resolve_env_var_choice` but got `str`.",
    "message": " Expected `bool` for 1st parameter `choice` to call `resolve_env_var_choice` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 87,
    "warning_line": "        self.namespace = resolve_env_var_choice(choice=namespace, env=os.getenv(constants.METRICS_NAMESPACE_ENV))"
  },
  {
    "project": "awslabs/aws-lambda-powertools-python",
    "commit": "29497d47d63b2e795c2a9d81eaca3985dfe8f071",
    "filename": "aws_lambda_powertools/metrics/base.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/awslabs-aws-lambda-powertools-python/aws_lambda_powertools/metrics/base.py",
    "file_hunks_size": 1,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "aws_lambda_powertools/metrics/base.py:88:46 Incompatible parameter type [6]: Expected `bool` for 1st parameter `choice` to call `resolve_env_var_choice` but got `str`.",
    "message": " Expected `bool` for 1st parameter `choice` to call `resolve_env_var_choice` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 88,
    "warning_line": "        self.service = resolve_env_var_choice(choice=service, env=os.getenv(constants.SERVICE_NAME_ENV))"
  },
  {
    "project": "awslabs/aws-lambda-powertools-python",
    "commit": "29497d47d63b2e795c2a9d81eaca3985dfe8f071",
    "filename": "aws_lambda_powertools/metrics/metric.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/awslabs-aws-lambda-powertools-python/aws_lambda_powertools/metrics/metric.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "aws_lambda_powertools/metrics/metric.py:45:4 Inconsistent override [14]: `aws_lambda_powertools.metrics.metric.SingleMetric.add_metric` overrides method defined in `MetricManager` inconsistently. Parameter of type `MetricUnit` is not a supertype of the overridden parameter `typing.Union[MetricUnit, str]`.",
    "message": " `aws_lambda_powertools.metrics.metric.SingleMetric.add_metric` overrides method defined in `MetricManager` inconsistently. Parameter of type `MetricUnit` is not a supertype of the overridden parameter `typing.Union[MetricUnit, str]`.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 45,
    "warning_line": "    def add_metric(self, name: str, unit: MetricUnit, value: float):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from contextlib import contextmanager\nfrom typing import Dict\n\n",
        "source_code_len": 63,
        "target_code": "from contextlib import contextmanager\nfrom typing import Dict, Optional, Union\n\n",
        "target_code_len": 80,
        "diff_format": "@@ -3,3 +3,3 @@\n from contextlib import contextmanager\n-from typing import Dict\n+from typing import Dict, Optional, Union\n \n",
        "source_code_with_indent": "from contextlib import contextmanager\nfrom typing import Dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from contextlib import contextmanager\nfrom typing import Dict, Optional, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def add_metric(self, name: str, unit: MetricUnit, value: float):\n        \"\"\"Method to prevent more than one metric being created\n",
        "source_code_len": 134,
        "target_code": "\n    def add_metric(self, name: str, unit: Union[MetricUnit, str], value: float):\n        \"\"\"Method to prevent more than one metric being created\n",
        "target_code_len": 146,
        "diff_format": "@@ -44,3 +44,3 @@\n \n-    def add_metric(self, name: str, unit: MetricUnit, value: float):\n+    def add_metric(self, name: str, unit: Union[MetricUnit, str], value: float):\n         \"\"\"Method to prevent more than one metric being created\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    def add_metric(self, name: str, unit: MetricUnit, value: float):\n        <IND>",
        "target_code_with_indent": "\n    def add_metric(self, name: str, unit: Union[MetricUnit, str], value: float):\n        <IND>"
      }
    ]
  },
  {
    "project": "awslabs/aws-lambda-powertools-python",
    "commit": "29497d47d63b2e795c2a9d81eaca3985dfe8f071",
    "filename": "aws_lambda_powertools/shared/functions.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/awslabs-aws-lambda-powertools-python/aws_lambda_powertools/shared/functions.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "aws_lambda_powertools/shared/functions.py:25:37 Incompatible variable type [9]: choice is declared to have type `bool` but is used as type `None`.",
    "message": " choice is declared to have type `bool` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 25,
    "warning_line": "def resolve_env_var_choice(env: Any, choice: bool = None) -> Union[bool, Any]:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from distutils.util import strtobool\nfrom typing import Any, Union\n\n",
        "source_code_len": 68,
        "target_code": "from distutils.util import strtobool\nfrom typing import Any, Optional, Union\n\n",
        "target_code_len": 78,
        "diff_format": "@@ -1,3 +1,3 @@\n from distutils.util import strtobool\n-from typing import Any, Union\n+from typing import Any, Optional, Union\n \n",
        "source_code_with_indent": "from distutils.util import strtobool\nfrom typing import Any, Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from distutils.util import strtobool\nfrom typing import Any, Optional, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef resolve_env_var_choice(env: Any, choice: bool = None) -> Union[bool, Any]:\n    \"\"\"Pick explicit choice over env, if available, otherwise return env value received\n",
        "source_code_len": 168,
        "target_code": "\ndef resolve_env_var_choice(env: Any, choice: Optional[Any] = None) -> Union[bool, Any]:\n    \"\"\"Pick explicit choice over env, if available, otherwise return env value received\n",
        "target_code_len": 177,
        "diff_format": "@@ -24,3 +24,3 @@\n \n-def resolve_env_var_choice(env: Any, choice: bool = None) -> Union[bool, Any]:\n+def resolve_env_var_choice(env: Any, choice: Optional[Any] = None) -> Union[bool, Any]:\n     \"\"\"Pick explicit choice over env, if available, otherwise return env value received\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>def resolve_env_var_choice(env: Any, choice: bool = None) -> Union[bool, Any]:\n    <IND>",
        "target_code_with_indent": "\n<DED>def resolve_env_var_choice(env: Any, choice: Optional[Any] = None) -> Union[bool, Any]:\n    <IND>"
      }
    ]
  },
  {
    "project": "awslabs/aws-lambda-powertools-python",
    "commit": "29497d47d63b2e795c2a9d81eaca3985dfe8f071",
    "filename": "aws_lambda_powertools/tracing/tracer.py",
    "min_patch_found": false,
    "full_warning_msg": "aws_lambda_powertools/tracing/tracer.py:725:44 Incompatible parameter type [6]: Expected `bool` for 1st parameter `choice` to call `resolve_env_var_choice` but got `str`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "awslabs/aws-lambda-powertools-python",
    "commit": "29497d47d63b2e795c2a9d81eaca3985dfe8f071",
    "filename": "aws_lambda_powertools/utilities/batch/base.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/awslabs-aws-lambda-powertools-python/aws_lambda_powertools/utilities/batch/base.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "aws_lambda_powertools/utilities/batch/base.py:107:77 Incompatible variable type [9]: processor is declared to have type `BasePartialProcessor` but is used as type `None`.",
    "message": " processor is declared to have type `BasePartialProcessor` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 107,
    "warning_line": "    handler: Callable, event: Dict, context: Dict, record_handler: Callable, processor: BasePartialProcessor = None",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def batch_processor(\n    handler: Callable, event: Dict, context: Dict, record_handler: Callable, processor: BasePartialProcessor = None\n):\n",
        "source_code_len": 140,
        "target_code": "def batch_processor(\n    handler: Callable, event: Dict, context: Dict, record_handler: Callable, processor: BasePartialProcessor\n):\n",
        "target_code_len": 133,
        "diff_format": "@@ -106,3 +106,3 @@\n def batch_processor(\n-    handler: Callable, event: Dict, context: Dict, record_handler: Callable, processor: BasePartialProcessor = None\n+    handler: Callable, event: Dict, context: Dict, record_handler: Callable, processor: BasePartialProcessor\n ):\n",
        "source_code_with_indent": "def batch_processor(\n    handler: Callable, event: Dict, context: Dict, record_handler: Callable, processor: BasePartialProcessor = None\n):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "def batch_processor(\n    handler: Callable, event: Dict, context: Dict, record_handler: Callable, processor: BasePartialProcessor\n):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "awslabs/aws-lambda-powertools-python",
    "commit": "29497d47d63b2e795c2a9d81eaca3985dfe8f071",
    "filename": "aws_lambda_powertools/utilities/data_classes/appsync/resolver_utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/awslabs-aws-lambda-powertools-python/aws_lambda_powertools/utilities/data_classes/appsync/resolver_utils.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "aws_lambda_powertools/utilities/data_classes/appsync/resolver_utils.py:31:8 Incompatible variable type [9]: event is declared to have type `Dict[typing.Any, typing.Any]` but is used as type `aws_lambda_powertools.utilities.data_classes.appsync_resolver_event.AppSyncResolverEvent`.",
    "message": " event is declared to have type `Dict[typing.Any, typing.Any]` but is used as type `aws_lambda_powertools.utilities.data_classes.appsync_resolver_event.AppSyncResolverEvent`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 31,
    "warning_line": "        event = AppSyncResolverEvent(event)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def resolve(self, event: dict, context: LambdaContext) -> Any:\n        event = AppSyncResolverEvent(event)\n        resolver, config = self._resolver(event.type_name, event.field_name)\n",
        "source_code_len": 189,
        "target_code": "\n    def resolve(self, _event: dict, context: LambdaContext) -> Any:\n        event = AppSyncResolverEvent(_event)\n        resolver, config = self._resolver(event.type_name, event.field_name)\n",
        "target_code_len": 191,
        "diff_format": "@@ -29,4 +29,4 @@\n \n-    def resolve(self, event: dict, context: LambdaContext) -> Any:\n-        event = AppSyncResolverEvent(event)\n+    def resolve(self, _event: dict, context: LambdaContext) -> Any:\n+        event = AppSyncResolverEvent(_event)\n         resolver, config = self._resolver(event.type_name, event.field_name)\n",
        "source_code_with_indent": "\n    <DED>def resolve(self, event: dict, context: LambdaContext) -> Any:\n        <IND>event = AppSyncResolverEvent(event)\n        resolver, config = self._resolver(event.type_name, event.field_name)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def resolve(self, _event: dict, context: LambdaContext) -> Any:\n        <IND>event = AppSyncResolverEvent(_event)\n        resolver, config = self._resolver(event.type_name, event.field_name)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "awslabs/aws-lambda-powertools-python",
    "commit": "29497d47d63b2e795c2a9d81eaca3985dfe8f071",
    "filename": "aws_lambda_powertools/utilities/data_classes/appsync/resolver_utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/awslabs-aws-lambda-powertools-python/aws_lambda_powertools/utilities/data_classes/appsync/resolver_utils.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "aws_lambda_powertools/utilities/data_classes/appsync/resolver_utils.py:33:30 Incompatible parameter type [6]: Expected `aws_lambda_powertools.utilities.data_classes.appsync_resolver_event.AppSyncResolverEvent` for 1st positional only parameter to call `AppSyncResolver._kwargs` but got `Dict[typing.Any, typing.Any]`.",
    "message": " Expected `aws_lambda_powertools.utilities.data_classes.appsync_resolver_event.AppSyncResolverEvent` for 1st positional only parameter to call `AppSyncResolver._kwargs` but got `Dict[typing.Any, typing.Any]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 33,
    "warning_line": "        kwargs = self._kwargs(event, context, config)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def resolve(self, event: dict, context: LambdaContext) -> Any:\n        event = AppSyncResolverEvent(event)\n        resolver, config = self._resolver(event.type_name, event.field_name)\n",
        "source_code_len": 189,
        "target_code": "\n    def resolve(self, _event: dict, context: LambdaContext) -> Any:\n        event = AppSyncResolverEvent(_event)\n        resolver, config = self._resolver(event.type_name, event.field_name)\n",
        "target_code_len": 191,
        "diff_format": "@@ -29,4 +29,4 @@\n \n-    def resolve(self, event: dict, context: LambdaContext) -> Any:\n-        event = AppSyncResolverEvent(event)\n+    def resolve(self, _event: dict, context: LambdaContext) -> Any:\n+        event = AppSyncResolverEvent(_event)\n         resolver, config = self._resolver(event.type_name, event.field_name)\n",
        "source_code_with_indent": "\n    <DED>def resolve(self, event: dict, context: LambdaContext) -> Any:\n        <IND>event = AppSyncResolverEvent(event)\n        resolver, config = self._resolver(event.type_name, event.field_name)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def resolve(self, _event: dict, context: LambdaContext) -> Any:\n        <IND>event = AppSyncResolverEvent(_event)\n        resolver, config = self._resolver(event.type_name, event.field_name)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "awslabs/aws-lambda-powertools-python",
    "commit": "29497d47d63b2e795c2a9d81eaca3985dfe8f071",
    "filename": "aws_lambda_powertools/utilities/data_classes/appsync_resolver_event.py",
    "min_patch_found": false,
    "full_warning_msg": "aws_lambda_powertools/utilities/data_classes/appsync_resolver_event.py:232:60 Incompatible parameter type [6]: Expected `str` for 3rd positional only parameter to call `get_header_value` but got `Optional[str]`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "awslabs/aws-lambda-powertools-python",
    "commit": "29497d47d63b2e795c2a9d81eaca3985dfe8f071",
    "filename": "aws_lambda_powertools/utilities/data_classes/appsync_resolver_event.py",
    "min_patch_found": false,
    "full_warning_msg": "aws_lambda_powertools/utilities/data_classes/appsync_resolver_event.py:232:75 Incompatible parameter type [6]: Expected `bool` for 4th positional only parameter to call `get_header_value` but got `Optional[bool]`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "awslabs/aws-lambda-powertools-python",
    "commit": "29497d47d63b2e795c2a9d81eaca3985dfe8f071",
    "filename": "aws_lambda_powertools/utilities/data_classes/common.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/awslabs-aws-lambda-powertools-python/aws_lambda_powertools/utilities/data_classes/common.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "aws_lambda_powertools/utilities/data_classes/common.py:95:52 Incompatible parameter type [6]: Expected `str` for 3rd positional only parameter to call `get_header_value` but got `Optional[str]`.",
    "message": " Expected `str` for 3rd positional only parameter to call `get_header_value` but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 95,
    "warning_line": "        return get_header_value(self.headers, name, default_value, case_sensitive)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef get_header_value(headers: Dict[str, str], name: str, default_value: str, case_sensitive: bool) -> Optional[str]:\n    \"\"\"Get header value by name\"\"\"\n",
        "source_code_len": 153,
        "target_code": "\ndef get_header_value(\n    headers: Dict[str, str], name: str, default_value: Optional[str], case_sensitive: Optional[bool]\n) -> Optional[str]:\n    \"\"\"Get header value by name\"\"\"\n",
        "target_code_len": 179,
        "diff_format": "@@ -27,3 +27,5 @@\n \n-def get_header_value(headers: Dict[str, str], name: str, default_value: str, case_sensitive: bool) -> Optional[str]:\n+def get_header_value(\n+    headers: Dict[str, str], name: str, default_value: Optional[str], case_sensitive: Optional[bool]\n+) -> Optional[str]:\n     \"\"\"Get header value by name\"\"\"\n",
        "source_code_with_indent": "\n<DED><DED>def get_header_value(headers: Dict[str, str], name: str, default_value: str, case_sensitive: bool) -> Optional[str]:\n    <IND>\"\"\"Get header value by name\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED><DED>def get_header_value(\n    headers: Dict[str, str], name: str, default_value: Optional[str], case_sensitive: Optional[bool]\n) -> Optional[str]:\n    <IND>\"\"\"Get header value by name\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "awslabs/aws-lambda-powertools-python",
    "commit": "29497d47d63b2e795c2a9d81eaca3985dfe8f071",
    "filename": "aws_lambda_powertools/utilities/data_classes/common.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/awslabs-aws-lambda-powertools-python/aws_lambda_powertools/utilities/data_classes/common.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "aws_lambda_powertools/utilities/data_classes/common.py:95:67 Incompatible parameter type [6]: Expected `bool` for 4th positional only parameter to call `get_header_value` but got `Optional[bool]`.",
    "message": " Expected `bool` for 4th positional only parameter to call `get_header_value` but got `Optional[bool]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 95,
    "warning_line": "        return get_header_value(self.headers, name, default_value, case_sensitive)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef get_header_value(headers: Dict[str, str], name: str, default_value: str, case_sensitive: bool) -> Optional[str]:\n    \"\"\"Get header value by name\"\"\"\n",
        "source_code_len": 153,
        "target_code": "\ndef get_header_value(\n    headers: Dict[str, str], name: str, default_value: Optional[str], case_sensitive: Optional[bool]\n) -> Optional[str]:\n    \"\"\"Get header value by name\"\"\"\n",
        "target_code_len": 179,
        "diff_format": "@@ -27,3 +27,5 @@\n \n-def get_header_value(headers: Dict[str, str], name: str, default_value: str, case_sensitive: bool) -> Optional[str]:\n+def get_header_value(\n+    headers: Dict[str, str], name: str, default_value: Optional[str], case_sensitive: Optional[bool]\n+) -> Optional[str]:\n     \"\"\"Get header value by name\"\"\"\n",
        "source_code_with_indent": "\n<DED><DED>def get_header_value(headers: Dict[str, str], name: str, default_value: str, case_sensitive: bool) -> Optional[str]:\n    <IND>\"\"\"Get header value by name\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED><DED>def get_header_value(\n    headers: Dict[str, str], name: str, default_value: Optional[str], case_sensitive: Optional[bool]\n) -> Optional[str]:\n    <IND>\"\"\"Get header value by name\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "awslabs/aws-lambda-powertools-python",
    "commit": "29497d47d63b2e795c2a9d81eaca3985dfe8f071",
    "filename": "aws_lambda_powertools/utilities/data_classes/s3_object_event.py",
    "min_patch_found": false,
    "full_warning_msg": "aws_lambda_powertools/utilities/data_classes/s3_object_event.py:91:52 Incompatible parameter type [6]: Expected `str` for 3rd positional only parameter to call `get_header_value` but got `Optional[str]`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "awslabs/aws-lambda-powertools-python",
    "commit": "29497d47d63b2e795c2a9d81eaca3985dfe8f071",
    "filename": "aws_lambda_powertools/utilities/data_classes/s3_object_event.py",
    "min_patch_found": false,
    "full_warning_msg": "aws_lambda_powertools/utilities/data_classes/s3_object_event.py:91:67 Incompatible parameter type [6]: Expected `bool` for 4th positional only parameter to call `get_header_value` but got `Optional[bool]`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "awslabs/aws-lambda-powertools-python",
    "commit": "29497d47d63b2e795c2a9d81eaca3985dfe8f071",
    "filename": "aws_lambda_powertools/utilities/parameters/appconfig.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/awslabs-aws-lambda-powertools-python/aws_lambda_powertools/utilities/parameters/appconfig.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "aws_lambda_powertools/utilities/parameters/appconfig.py:71:12 Incompatible parameter type [6]: Expected `bool` for 1st parameter `choice` to call `resolve_env_var_choice` but got `Optional[str]`.",
    "message": " Expected `bool` for 1st parameter `choice` to call `resolve_env_var_choice` but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 71,
    "warning_line": "            choice=application, env=os.getenv(constants.SERVICE_NAME_ENV, \"service_undefined\")"
  },
  {
    "project": "awslabs/aws-lambda-powertools-python",
    "commit": "29497d47d63b2e795c2a9d81eaca3985dfe8f071",
    "filename": "aws_lambda_powertools/utilities/validation/validator.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/awslabs-aws-lambda-powertools-python/aws_lambda_powertools/utilities/validation/validator.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "aws_lambda_powertools/utilities/validation/validator.py:136:4 Incompatible variable type [9]: schema is declared to have type `Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "message": " schema is declared to have type `Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 136,
    "warning_line": "    schema: Dict = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    event: Dict,\n    schema: Dict = None,\n    formats: Optional[Dict] = None,\n",
        "source_code_len": 78,
        "target_code": "    event: Dict,\n    schema: Dict,\n    formats: Optional[Dict] = None,\n",
        "target_code_len": 71,
        "diff_format": "@@ -135,3 +135,3 @@\n     event: Dict,\n-    schema: Dict = None,\n+    schema: Dict,\n     formats: Optional[Dict] = None,\n",
        "source_code_with_indent": "    event: Dict,\n    schema: Dict = None,\n    formats: Optional[Dict] = None,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    event: Dict,\n    schema: Dict,\n    formats: Optional[Dict] = None,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]