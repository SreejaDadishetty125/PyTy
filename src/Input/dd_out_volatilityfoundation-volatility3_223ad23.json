[
  {
    "project": "volatilityfoundation/volatility3",
    "commit": "223ad230cf9e8fd565516aa415460395a60d31a4",
    "filename": "volatility/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/volatilityfoundation-volatility3/volatility/__init__.py",
    "file_hunks_size": 1,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "volatility/__init__.py:28:4 Inconsistent override [14]: `volatility.WarningFindSpec.find_spec` overrides method defined in `abc.MetaPathFinder` inconsistently. Could not find parameter `fullname` in overriding signature.",
    "message": " `volatility.WarningFindSpec.find_spec` overrides method defined in `abc.MetaPathFinder` inconsistently. Could not find parameter `fullname` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 28,
    "warning_line": "    def find_spec(name: str, _p, _t):"
  },
  {
    "project": "volatilityfoundation/volatility3",
    "commit": "223ad230cf9e8fd565516aa415460395a60d31a4",
    "filename": "volatility/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/volatilityfoundation-volatility3/volatility/__init__.py",
    "file_hunks_size": 1,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "volatility/__init__.py:28:4 Inconsistent override [14]: `volatility.WarningFindSpec.find_spec` overrides method defined in `abc.MetaPathFinder` inconsistently. Could not find parameter `path` in overriding signature.",
    "message": " `volatility.WarningFindSpec.find_spec` overrides method defined in `abc.MetaPathFinder` inconsistently. Could not find parameter `path` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 28,
    "warning_line": "    def find_spec(name: str, _p, _t):"
  },
  {
    "project": "volatilityfoundation/volatility3",
    "commit": "223ad230cf9e8fd565516aa415460395a60d31a4",
    "filename": "volatility/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/volatilityfoundation-volatility3/volatility/__init__.py",
    "file_hunks_size": 1,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "volatility/__init__.py:28:4 Inconsistent override [14]: `volatility.WarningFindSpec.find_spec` overrides method defined in `abc.MetaPathFinder` inconsistently. Could not find parameter `target` in overriding signature.",
    "message": " `volatility.WarningFindSpec.find_spec` overrides method defined in `abc.MetaPathFinder` inconsistently. Could not find parameter `target` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 28,
    "warning_line": "    def find_spec(name: str, _p, _t):"
  },
  {
    "project": "volatilityfoundation/volatility3",
    "commit": "223ad230cf9e8fd565516aa415460395a60d31a4",
    "filename": "volatility/cli/text_renderer.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/volatilityfoundation-volatility3/volatility/cli/text_renderer.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "volatility/cli/text_renderer.py:203:56 Incompatible parameter type [6]: Expected `interfaces.renderers.Column` for 1st positional only parameter to call `dict.__getitem__` but got `str`.",
    "message": " Expected `interfaces.renderers.Column` for 1st positional only parameter to call `dict.__getitem__` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 203,
    "warning_line": "        format_string = [\"{0:<\" + str(max_column_widths[tree_indent_column]) + \"s}\"]",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        tree_indent_column = ''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(20))\n        max_column_widths = dict([(column, len(column.name)) for column in grid.columns])\n\n",
        "source_code_len": 202,
        "target_code": "        tree_indent_column = ''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(20))\n        max_column_widths = dict([(column.name, len(column.name)) for column in grid.columns])\n\n",
        "target_code_len": 207,
        "diff_format": "@@ -184,3 +184,3 @@\n         tree_indent_column = ''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(20))\n-        max_column_widths = dict([(column, len(column.name)) for column in grid.columns])\n+        max_column_widths = dict([(column.name, len(column.name)) for column in grid.columns])\n \n",
        "source_code_with_indent": "        tree_indent_column = ''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(20))\n        max_column_widths = dict([(column, len(column.name)) for column in grid.columns])\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        tree_indent_column = ''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(20))\n        max_column_widths = dict([(column.name, len(column.name)) for column in grid.columns])\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        # Always align the tree to the left\n        format_string = [\"{0:<\" + str(max_column_widths[tree_indent_column]) + \"s}\"]\n        for column in grid.columns:\n            format_string.append(\"{\" + str(column.index + 1) + \":\" + display_alignment +\n                                 str(max_column_widths[column]) + \"s}\")\n\n        format_string = column_separator.join(format_string) + \"\\n\"\n\n",
        "source_code_len": 396,
        "target_code": "        # Always align the tree to the left\n        format_string_list = [\"{0:<\" + str(max_column_widths[tree_indent_column]) + \"s}\"]\n        for column in grid.columns:\n            format_string_list.append(\"{\" + str(column.index + 1) + \":\" + display_alignment +\n                                      str(max_column_widths[column.name]) + \"s}\")\n\n        format_string = column_separator.join(format_string_list) + \"\\n\"\n\n",
        "target_code_len": 421,
        "diff_format": "@@ -202,8 +202,8 @@\n         # Always align the tree to the left\n-        format_string = [\"{0:<\" + str(max_column_widths[tree_indent_column]) + \"s}\"]\n+        format_string_list = [\"{0:<\" + str(max_column_widths[tree_indent_column]) + \"s}\"]\n         for column in grid.columns:\n-            format_string.append(\"{\" + str(column.index + 1) + \":\" + display_alignment +\n-                                 str(max_column_widths[column]) + \"s}\")\n-\n-        format_string = column_separator.join(format_string) + \"\\n\"\n+            format_string_list.append(\"{\" + str(column.index + 1) + \":\" + display_alignment +\n+                                      str(max_column_widths[column.name]) + \"s}\")\n+\n+        format_string = column_separator.join(format_string_list) + \"\\n\"\n \n",
        "source_code_with_indent": "        # Always align the tree to the left\n        format_string = [\"{0:<\" + str(max_column_widths[tree_indent_column]) + \"s}\"]\n        for column in grid.columns:\n            <IND>format_string.append(\"{\" + str(column.index + 1) + \":\" + display_alignment +\n                                 str(max_column_widths[column]) + \"s}\")\n\n        <DED>format_string = column_separator.join(format_string) + \"\\n\"\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        # Always align the tree to the left\n        format_string_list = [\"{0:<\" + str(max_column_widths[tree_indent_column]) + \"s}\"]\n        for column in grid.columns:\n            <IND>format_string_list.append(\"{\" + str(column.index + 1) + \":\" + display_alignment +\n                                      str(max_column_widths[column.name]) + \"s}\")\n\n        <DED>format_string = column_separator.join(format_string_list) + \"\\n\"\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]