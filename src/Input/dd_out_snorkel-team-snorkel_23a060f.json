[
  {
    "project": "snorkel-team/snorkel",
    "commit": "23a060fdc0fd4a4a1e6f5c81d41cca6cc807ce71",
    "filename": "snorkel/classification/data.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/snorkel-team-snorkel/snorkel/classification/data.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "snorkel/classification/data.py:97:8 Incompatible variable type [9]: task_to_label_dict is declared to have type `Dict[str, str]` but is used as type `None`.",
    "message": " task_to_label_dict is declared to have type `Dict[str, str]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 97,
    "warning_line": "        task_to_label_dict: Dict[str, str] = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nclass ClassifierDataset(Dataset):\n    \"\"\"An advanced dataset class to handle input data with multipled fields and output\n",
        "source_code_len": 122,
        "target_code": "\nclass DictDataset(Dataset):\n    \"\"\"An advanced dataset class to handle input data with multipled fields and output\n",
        "target_code_len": 116,
        "diff_format": "@@ -15,3 +15,3 @@\n \n-class ClassifierDataset(Dataset):\n+class DictDataset(Dataset):\n     \"\"\"An advanced dataset class to handle input data with multipled fields and output\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\nclass ClassifierDataset(Dataset):\n    <IND>",
        "target_code_with_indent": "\nclass DictDataset(Dataset):\n    <IND>"
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self,\n        dataset: ClassifierDataset,\n        collate_fn: Callable[..., Any] = collate_dicts,\n        task_to_label_dict: Dict[str, str] = None,\n        **kwargs,\n",
        "source_code_len": 175,
        "target_code": "        self,\n        dataset: DictDataset,\n        collate_fn: Callable[..., Any] = collate_dicts,\n        **kwargs,\n",
        "target_code_len": 118,
        "diff_format": "@@ -94,5 +92,4 @@\n         self,\n-        dataset: ClassifierDataset,\n+        dataset: DictDataset,\n         collate_fn: Callable[..., Any] = collate_dicts,\n-        task_to_label_dict: Dict[str, str] = None,\n         **kwargs,\n",
        "source_code_with_indent": "        self,\n        dataset: ClassifierDataset,\n        collate_fn: Callable[..., Any] = collate_dicts,\n        task_to_label_dict: Dict[str, str] = None,\n        **kwargs,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self,\n        dataset: DictDataset,\n        collate_fn: Callable[..., Any] = collate_dicts,\n        **kwargs,\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        assert isinstance(dataset, ClassifierDataset)\n        super().__init__(dataset, collate_fn=collate_fn, **kwargs)\n\n        self.task_to_label_dict = task_to_label_dict or {}\n\n        for label in self.task_to_label_dict.values():\n            if label not in dataset.Y_dict:\n                raise ValueError(\n                    f\"Label {label} specified in task_to_label_dict could not be found in Y_dict\"\n                )\n\n",
        "source_code_len": 433,
        "target_code": "\n        assert isinstance(dataset, DictDataset)\n        super().__init__(dataset, collate_fn=collate_fn, **kwargs)\n\n",
        "target_code_len": 117,
        "diff_format": "@@ -100,12 +97,4 @@\n \n-        assert isinstance(dataset, ClassifierDataset)\n+        assert isinstance(dataset, DictDataset)\n         super().__init__(dataset, collate_fn=collate_fn, **kwargs)\n-\n-        self.task_to_label_dict = task_to_label_dict or {}\n-\n-        for label in self.task_to_label_dict.values():\n-            if label not in dataset.Y_dict:\n-                raise ValueError(\n-                    f\"Label {label} specified in task_to_label_dict could not be found in Y_dict\"\n-                )\n \n",
        "source_code_with_indent": "\n        <IND>assert isinstance(dataset, ClassifierDataset)\n        super().__init__(dataset, collate_fn=collate_fn, **kwargs)\n\n        self.task_to_label_dict = task_to_label_dict or {}\n\n        for label in self.task_to_label_dict.values():\n            <IND>if label not in dataset.Y_dict:\n                <IND>raise ValueError(\n                    f\"Label {label} specified in task_to_label_dict could not be found in Y_dict\"\n                )\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        <IND>assert isinstance(dataset, DictDataset)\n        super().__init__(dataset, collate_fn=collate_fn, **kwargs)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "snorkel-team/snorkel",
    "commit": "23a060fdc0fd4a4a1e6f5c81d41cca6cc807ce71",
    "filename": "snorkel/classification/models/advanced/advanced_classifier.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/snorkel-team-snorkel/snorkel/classification/snorkel_classifier.py",
    "file_hunks_size": 15,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "snorkel/classification/models/advanced/advanced_classifier.py:179:46 Incompatible parameter type [6]: Expected `Mapping[Union[int, str], typing.Any]` for 2nd positional only parameter to call `dict.__setitem__` but got `Union[List[typing.Any], Mapping[typing.Any, typing.Any]]`.",
    "message": " Expected `Mapping[Union[int, str], typing.Any]` for 2nd positional only parameter to call `dict.__setitem__` but got `Union[List[typing.Any], Mapping[typing.Any, typing.Any]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 179,
    "warning_line": "                    outputs[operation.name] = output"
  },
  {
    "project": "snorkel-team/snorkel",
    "commit": "23a060fdc0fd4a4a1e6f5c81d41cca6cc807ce71",
    "filename": "snorkel/classification/models/advanced/advanced_classifier.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/snorkel-team-snorkel/snorkel/classification/snorkel_classifier.py",
    "file_hunks_size": 15,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "snorkel/classification/models/advanced/advanced_classifier.py:262:65 Incompatible parameter type [6]: Expected `Iterable[Variable[_T]]` for 1st positional only parameter to call `enumerate.__init__` but got `ClassifierDataLoader`.",
    "message": " Expected `Iterable[Variable[_T]]` for 1st positional only parameter to call `enumerate.__init__` but got `ClassifierDataLoader`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 262,
    "warning_line": "        for batch_num, (X_batch_dict, Y_batch_dict) in enumerate(dataloader):"
  },
  {
    "project": "snorkel-team/snorkel",
    "commit": "23a060fdc0fd4a4a1e6f5c81d41cca6cc807ce71",
    "filename": "snorkel/classification/models/advanced/task.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/snorkel-team-snorkel/snorkel/classification/task.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "snorkel/classification/models/advanced/task.py:23:8 Incompatible variable type [9]: name is declared to have type `str` but is used as type `None`.",
    "message": " name is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 23,
    "warning_line": "        name: str = None,"
  }
]