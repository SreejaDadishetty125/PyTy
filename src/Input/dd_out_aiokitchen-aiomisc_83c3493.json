[
  {
    "project": "aiokitchen/aiomisc",
    "commit": "83c3493c88e439a1616850842664c156ef219e93",
    "filename": "aiomisc/service/carbon.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/aiokitchen-aiomisc/aiomisc/service/carbon.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "aiomisc/service/carbon.py:34:4 Incompatible attribute type [8]: Attribute `namespace` declared in class `CarbonSender` has type `List[str]` but is used as type `str`.",
    "message": " Attribute `namespace` declared in class `CarbonSender` has type `List[str]` but is used as type `str`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 34,
    "warning_line": "    namespace = \"\"              # type: List[str]",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "import re\nfrom types import MappingProxyType\nfrom typing import List  # NOQA\n\nfrom aiocarbon.protocol.pickle import PickleClient\nfrom aiocarbon.protocol.tcp import TCPClient\nfrom aiocarbon.protocol.udp import UDPClient\nfrom aiocarbon.setup import set_client\nfrom aiocarbon.storage import TotalStorage\nfrom aiomisc.periodic import PeriodicCallback\n",
        "source_code_len": 347,
        "target_code": "import re\nimport typing as t  # noqa\nfrom types import MappingProxyType\n\nfrom aiocarbon.protocol.pickle import PickleClient  # type: ignore\nfrom aiocarbon.protocol.tcp import TCPClient  # type: ignore\nfrom aiocarbon.protocol.udp import UDPClient  # type: ignore\nfrom aiocarbon.setup import set_client  # type: ignore\nfrom aiocarbon.storage import TotalStorage  # type: ignore\n\nfrom aiomisc.periodic import PeriodicCallback\n",
        "target_code_len": 423,
        "diff_format": "@@ -2,10 +2,11 @@\n import re\n+import typing as t  # noqa\n from types import MappingProxyType\n-from typing import List  # NOQA\n \n-from aiocarbon.protocol.pickle import PickleClient\n-from aiocarbon.protocol.tcp import TCPClient\n-from aiocarbon.protocol.udp import UDPClient\n-from aiocarbon.setup import set_client\n-from aiocarbon.storage import TotalStorage\n+from aiocarbon.protocol.pickle import PickleClient  # type: ignore\n+from aiocarbon.protocol.tcp import TCPClient  # type: ignore\n+from aiocarbon.protocol.udp import UDPClient  # type: ignore\n+from aiocarbon.setup import set_client  # type: ignore\n+from aiocarbon.storage import TotalStorage  # type: ignore\n+\n from aiomisc.periodic import PeriodicCallback\n",
        "source_code_with_indent": "import re\nfrom types import MappingProxyType\nfrom typing import List  # NOQA\n\nfrom aiocarbon.protocol.pickle import PickleClient\nfrom aiocarbon.protocol.tcp import TCPClient\nfrom aiocarbon.protocol.udp import UDPClient\nfrom aiocarbon.setup import set_client\nfrom aiocarbon.storage import TotalStorage\nfrom aiomisc.periodic import PeriodicCallback\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import re\nimport typing as t  # noqa\nfrom types import MappingProxyType\n\nfrom aiocarbon.protocol.pickle import PickleClient  # type: ignore\nfrom aiocarbon.protocol.tcp import TCPClient  # type: ignore\nfrom aiocarbon.protocol.udp import UDPClient  # type: ignore\nfrom aiocarbon.setup import set_client  # type: ignore\nfrom aiocarbon.storage import TotalStorage  # type: ignore\n\nfrom aiomisc.periodic import PeriodicCallback\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    protocol = \"udp\"            # type: str\n    namespace = \"\"              # type: List[str]\n    storage = TotalStorage\n",
        "source_code_len": 121,
        "target_code": "    protocol = \"udp\"            # type: str\n    namespace = (\"\",)           # type: t.Iterable[str]\n    storage = TotalStorage\n",
        "target_code_len": 127,
        "diff_format": "@@ -33,3 +34,3 @@\n     protocol = \"udp\"            # type: str\n-    namespace = \"\"              # type: List[str]\n+    namespace = (\"\",)           # type: t.Iterable[str]\n     storage = TotalStorage\n",
        "source_code_with_indent": "    protocol = \"udp\"            # type: str\n    namespace = \"\"              # type: List[str]\n    storage = TotalStorage\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    protocol = \"udp\"            # type: str\n    namespace = (\"\",)           # type: t.Iterable[str]\n    storage = TotalStorage\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "aiokitchen/aiomisc",
    "commit": "83c3493c88e439a1616850842664c156ef219e93",
    "filename": "aiomisc/service/cron.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/aiokitchen-aiomisc/aiomisc/service/cron.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "aiomisc/service/cron.py:29:12 Incompatible variable type [9]: suppress_exceptions is declared to have type `Tuple[Type[Exception]]` but is used as type `Tuple[]`.",
    "message": " suppress_exceptions is declared to have type `Tuple[Type[Exception]]` but is used as type `Tuple[]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 29,
    "warning_line": "            suppress_exceptions: Tuple[Type[Exception]] = ()",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import logging\nfrom asyncio import iscoroutinefunction\nfrom collections import namedtuple\nfrom typing import Callable, Tuple, Type\n\n",
        "source_code_len": 132,
        "target_code": "import logging\nimport typing as t\nfrom asyncio import iscoroutinefunction\n\n",
        "target_code_len": 75,
        "diff_format": "@@ -2,5 +2,4 @@\n import logging\n+import typing as t\n from asyncio import iscoroutinefunction\n-from collections import namedtuple\n-from typing import Callable, Tuple, Type\n \n",
        "source_code_with_indent": "import logging\nfrom asyncio import iscoroutinefunction\nfrom collections import namedtuple\nfrom typing import Callable, Tuple, Type\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import logging\nimport typing as t\nfrom asyncio import iscoroutinefunction\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nlog = logging.getLogger(__name__)\n\nStoreItem = namedtuple(\n    \"StoreItem\", \"callback, spec, shield, suppress_exceptions\"\n)\n",
        "source_code_len": 125,
        "target_code": "\n\nlog = logging.getLogger(__name__)\nExceptionsType = t.Tuple[t.Type[Exception], ...]\n\nStoreItem = t.NamedTuple(\n    \"StoreItem\", (\n        (\"callback\", CronCallback),\n        (\"spec\", str),\n        (\"shield\", bool),\n        (\"suppress_exceptions\", ExceptionsType),\n    ),\n)\n",
        "target_code_len": 274,
        "diff_format": "@@ -11,6 +10,13 @@\n \n+\n log = logging.getLogger(__name__)\n+ExceptionsType = t.Tuple[t.Type[Exception], ...]\n \n-StoreItem = namedtuple(\n-    \"StoreItem\", \"callback, spec, shield, suppress_exceptions\"\n+StoreItem = t.NamedTuple(\n+    \"StoreItem\", (\n+        (\"callback\", CronCallback),\n+        (\"spec\", str),\n+        (\"shield\", bool),\n+        (\"suppress_exceptions\", ExceptionsType),\n+    ),\n )\n",
        "source_code_with_indent": "\nlog = logging.getLogger(__name__)\n\nStoreItem = namedtuple(\n    \"StoreItem\", \"callback, spec, shield, suppress_exceptions\"\n)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n\nlog = logging.getLogger(__name__)\nExceptionsType = t.Tuple[t.Type[Exception], ...]\n\nStoreItem = t.NamedTuple(\n    \"StoreItem\", (\n        (\"callback\", CronCallback),\n        (\"spec\", str),\n        (\"shield\", bool),\n        (\"suppress_exceptions\", ExceptionsType),\n    ),\n)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "class CronService(Service):\n    def __init__(self, **kwargs):\n        super(CronService, self).__init__(**kwargs)\n        self._callbacks_storage = set()\n\n    def register(\n            self,\n            function: Callable,\n            spec: str,\n            shield: bool = False,\n            suppress_exceptions: Tuple[Type[Exception]] = ()\n    ):\n        if not iscoroutinefunction(function):\n",
        "source_code_len": 394,
        "target_code": "class CronService(Service):\n    def __init__(self, **kwargs: t.Any):\n        super(CronService, self).__init__(**kwargs)\n        self._callbacks_storage = set()     # type: t.Set[StoreItem]\n\n    def register(\n        self,\n        function: t.Callable,\n        spec: str,\n        shield: bool = False,\n        suppress_exceptions: ExceptionsType = (),\n    ) -> None:\n        if not iscoroutinefunction(function):\n",
        "target_code_len": 413,
        "diff_format": "@@ -19,13 +25,13 @@\n class CronService(Service):\n-    def __init__(self, **kwargs):\n+    def __init__(self, **kwargs: t.Any):\n         super(CronService, self).__init__(**kwargs)\n-        self._callbacks_storage = set()\n+        self._callbacks_storage = set()     # type: t.Set[StoreItem]\n \n     def register(\n-            self,\n-            function: Callable,\n-            spec: str,\n-            shield: bool = False,\n-            suppress_exceptions: Tuple[Type[Exception]] = ()\n-    ):\n+        self,\n+        function: t.Callable,\n+        spec: str,\n+        shield: bool = False,\n+        suppress_exceptions: ExceptionsType = (),\n+    ) -> None:\n         if not iscoroutinefunction(function):\n",
        "source_code_with_indent": "class CronService(Service):\n    <IND>def __init__(self, **kwargs):\n        <IND>super(CronService, self).__init__(**kwargs)\n        self._callbacks_storage = set()\n\n    <DED>def register(\n            self,\n            function: Callable,\n            spec: str,\n            shield: bool = False,\n            suppress_exceptions: Tuple[Type[Exception]] = ()\n    ):\n        <IND>if not iscoroutinefunction(function):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "class CronService(Service):\n    <IND>def __init__(self, **kwargs: t.Any):\n        <IND>super(CronService, self).__init__(**kwargs)\n        self._callbacks_storage = set()     # type: t.Set[StoreItem]\n\n    <DED>def register(\n        self,\n        function: t.Callable,\n        spec: str,\n        shield: bool = False,\n        suppress_exceptions: ExceptionsType = (),\n    ) -> None:\n        <IND>if not iscoroutinefunction(function):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "aiokitchen/aiomisc",
    "commit": "83c3493c88e439a1616850842664c156ef219e93",
    "filename": "aiomisc/thread_pool.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/aiokitchen-aiomisc/aiomisc/thread_pool.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "aiomisc/thread_pool.py:334:4 Inconsistent override [15]: `aiomisc.thread_pool.IteratorWrapperSeparate._run` overrides method defined in `IteratorWrapper` inconsistently. Returned type `typing.Awaitable[typing.Any]` is not a subtype of the overridden return `typing.Coroutine[typing.Any, typing.Any, typing.Any]`.",
    "message": " `aiomisc.thread_pool.IteratorWrapperSeparate._run` overrides method defined in `IteratorWrapper` inconsistently. Returned type `typing.Awaitable[typing.Any]` is not a subtype of the overridden return `typing.Coroutine[typing.Any, typing.Any, typing.Any]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 334,
    "warning_line": "    def _run(self) -> None:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "class IteratorWrapperSeparate(IteratorWrapper):\n    @threaded_separate\n    def _run(self) -> None:\n        return self._in_thread()\n\n",
        "source_code_len": 133,
        "target_code": "class IteratorWrapperSeparate(IteratorWrapper):\n    async def _run(self) -> Any:\n        return await run_in_new_thread(self._in_thread)\n\n",
        "target_code_len": 138,
        "diff_format": "@@ -332,5 +336,4 @@\n class IteratorWrapperSeparate(IteratorWrapper):\n-    @threaded_separate\n-    def _run(self) -> None:\n-        return self._in_thread()\n+    async def _run(self) -> Any:\n+        return await run_in_new_thread(self._in_thread)\n \n",
        "source_code_with_indent": "<DED>class IteratorWrapperSeparate(IteratorWrapper):\n    <IND>@threaded_separate\n    def _run(self) -> None:\n        <IND>return self._in_thread()\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED>class IteratorWrapperSeparate(IteratorWrapper):\n    <IND>async def _run(self) -> Any:\n        <IND>return await run_in_new_thread(self._in_thread)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "aiokitchen/aiomisc",
    "commit": "83c3493c88e439a1616850842664c156ef219e93",
    "filename": "examples/rpc/server.py",
    "min_patch_found": false,
    "full_warning_msg": "examples/rpc/server.py:18:4 Inconsistent override [15]: `__required__` overrides attribute defined in `aiomisc.service.base.Service` inconsistently. Type `typing.Tuple[str]` is not a subtype of the overridden attribute `typing.Tuple[]`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  }
]