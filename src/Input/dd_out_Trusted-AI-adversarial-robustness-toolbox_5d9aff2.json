[
  {
    "project": "Trusted-AI/adversarial-robustness-toolbox",
    "commit": "5d9aff2b560caec96c7ca61624ae74597c276dcb",
    "filename": "art/estimators/estimator.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Trusted-AI-adversarial-robustness-toolbox/art/estimators/estimator.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "art/estimators/estimator.py:80:12 Incompatible attribute type [8]: Attribute `preprocessing_defences` declared in class `BaseEstimator` has type `Optional[List[Preprocessor]]` but is used as type `List[Union[None, List[Preprocessor], Preprocessor]]`.",
    "message": " Attribute `preprocessing_defences` declared in class `BaseEstimator` has type `Optional[List[Preprocessor]]` but is used as type `List[Union[None, List[Preprocessor], Preprocessor]]`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 80,
    "warning_line": "            self.preprocessing_defences = [preprocessing_defences]",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self.preprocessing_defences: Optional[List[\"Preprocessor\"]]\n        if isinstance(preprocessing_defences, \"Preprocessor\"):\n            self.preprocessing_defences = [preprocessing_defences]\n",
        "source_code_len": 198,
        "target_code": "        self.preprocessing_defences: Optional[List[\"Preprocessor\"]]\n        if isinstance(preprocessing_defences, Preprocessor):\n            self.preprocessing_defences = [preprocessing_defences]\n",
        "target_code_len": 196,
        "diff_format": "@@ -78,3 +80,3 @@\n         self.preprocessing_defences: Optional[List[\"Preprocessor\"]]\n-        if isinstance(preprocessing_defences, \"Preprocessor\"):\n+        if isinstance(preprocessing_defences, Preprocessor):\n             self.preprocessing_defences = [preprocessing_defences]\n",
        "source_code_with_indent": "        self.preprocessing_defences: Optional[List[\"Preprocessor\"]]\n        if isinstance(preprocessing_defences, \"Preprocessor\"):\n            <IND>self.preprocessing_defences = [preprocessing_defences]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self.preprocessing_defences: Optional[List[\"Preprocessor\"]]\n        if isinstance(preprocessing_defences, Preprocessor):\n            <IND>self.preprocessing_defences = [preprocessing_defences]\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Trusted-AI/adversarial-robustness-toolbox",
    "commit": "5d9aff2b560caec96c7ca61624ae74597c276dcb",
    "filename": "art/estimators/estimator.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Trusted-AI-adversarial-robustness-toolbox/art/estimators/estimator.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "art/estimators/estimator.py:82:12 Incompatible attribute type [8]: Attribute `preprocessing_defences` declared in class `BaseEstimator` has type `Optional[List[Preprocessor]]` but is used as type `Union[None, List[Preprocessor], Preprocessor]`.",
    "message": " Attribute `preprocessing_defences` declared in class `BaseEstimator` has type `Optional[List[Preprocessor]]` but is used as type `Union[None, List[Preprocessor], Preprocessor]`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 82,
    "warning_line": "            self.preprocessing_defences = preprocessing_defences",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self.preprocessing_defences: Optional[List[\"Preprocessor\"]]\n        if isinstance(preprocessing_defences, \"Preprocessor\"):\n            self.preprocessing_defences = [preprocessing_defences]\n",
        "source_code_len": 198,
        "target_code": "        self.preprocessing_defences: Optional[List[\"Preprocessor\"]]\n        if isinstance(preprocessing_defences, Preprocessor):\n            self.preprocessing_defences = [preprocessing_defences]\n",
        "target_code_len": 196,
        "diff_format": "@@ -78,3 +80,3 @@\n         self.preprocessing_defences: Optional[List[\"Preprocessor\"]]\n-        if isinstance(preprocessing_defences, \"Preprocessor\"):\n+        if isinstance(preprocessing_defences, Preprocessor):\n             self.preprocessing_defences = [preprocessing_defences]\n",
        "source_code_with_indent": "        self.preprocessing_defences: Optional[List[\"Preprocessor\"]]\n        if isinstance(preprocessing_defences, \"Preprocessor\"):\n            <IND>self.preprocessing_defences = [preprocessing_defences]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self.preprocessing_defences: Optional[List[\"Preprocessor\"]]\n        if isinstance(preprocessing_defences, Preprocessor):\n            <IND>self.preprocessing_defences = [preprocessing_defences]\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Trusted-AI/adversarial-robustness-toolbox",
    "commit": "5d9aff2b560caec96c7ca61624ae74597c276dcb",
    "filename": "art/estimators/estimator.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Trusted-AI-adversarial-robustness-toolbox/art/estimators/estimator.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "art/estimators/estimator.py:86:12 Incompatible attribute type [8]: Attribute `postprocessing_defences` declared in class `BaseEstimator` has type `Optional[List[Postprocessor]]` but is used as type `List[Union[None, List[Postprocessor], Postprocessor]]`.",
    "message": " Attribute `postprocessing_defences` declared in class `BaseEstimator` has type `Optional[List[Postprocessor]]` but is used as type `List[Union[None, List[Postprocessor], Postprocessor]]`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 86,
    "warning_line": "            self.postprocessing_defences = [postprocessing_defences]",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self.postprocessing_defences: Optional[List[\"Postprocessor\"]]\n        if isinstance(postprocessing_defences, \"Postprocessor\"):\n            self.postprocessing_defences = [postprocessing_defences]\n",
        "source_code_len": 204,
        "target_code": "        self.postprocessing_defences: Optional[List[\"Postprocessor\"]]\n        if isinstance(postprocessing_defences, Postprocessor):\n            self.postprocessing_defences = [postprocessing_defences]\n",
        "target_code_len": 202,
        "diff_format": "@@ -84,3 +86,3 @@\n         self.postprocessing_defences: Optional[List[\"Postprocessor\"]]\n-        if isinstance(postprocessing_defences, \"Postprocessor\"):\n+        if isinstance(postprocessing_defences, Postprocessor):\n             self.postprocessing_defences = [postprocessing_defences]\n",
        "source_code_with_indent": "        <DED>self.postprocessing_defences: Optional[List[\"Postprocessor\"]]\n        if isinstance(postprocessing_defences, \"Postprocessor\"):\n            <IND>self.postprocessing_defences = [postprocessing_defences]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>self.postprocessing_defences: Optional[List[\"Postprocessor\"]]\n        if isinstance(postprocessing_defences, Postprocessor):\n            <IND>self.postprocessing_defences = [postprocessing_defences]\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Trusted-AI/adversarial-robustness-toolbox",
    "commit": "5d9aff2b560caec96c7ca61624ae74597c276dcb",
    "filename": "art/estimators/estimator.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Trusted-AI-adversarial-robustness-toolbox/art/estimators/estimator.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "art/estimators/estimator.py:88:12 Incompatible attribute type [8]: Attribute `postprocessing_defences` declared in class `BaseEstimator` has type `Optional[List[Postprocessor]]` but is used as type `Union[None, List[Postprocessor], Postprocessor]`.",
    "message": " Attribute `postprocessing_defences` declared in class `BaseEstimator` has type `Optional[List[Postprocessor]]` but is used as type `Union[None, List[Postprocessor], Postprocessor]`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 88,
    "warning_line": "            self.postprocessing_defences = postprocessing_defences",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self.postprocessing_defences: Optional[List[\"Postprocessor\"]]\n        if isinstance(postprocessing_defences, \"Postprocessor\"):\n            self.postprocessing_defences = [postprocessing_defences]\n",
        "source_code_len": 204,
        "target_code": "        self.postprocessing_defences: Optional[List[\"Postprocessor\"]]\n        if isinstance(postprocessing_defences, Postprocessor):\n            self.postprocessing_defences = [postprocessing_defences]\n",
        "target_code_len": 202,
        "diff_format": "@@ -84,3 +86,3 @@\n         self.postprocessing_defences: Optional[List[\"Postprocessor\"]]\n-        if isinstance(postprocessing_defences, \"Postprocessor\"):\n+        if isinstance(postprocessing_defences, Postprocessor):\n             self.postprocessing_defences = [postprocessing_defences]\n",
        "source_code_with_indent": "        <DED>self.postprocessing_defences: Optional[List[\"Postprocessor\"]]\n        if isinstance(postprocessing_defences, \"Postprocessor\"):\n            <IND>self.postprocessing_defences = [postprocessing_defences]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>self.postprocessing_defences: Optional[List[\"Postprocessor\"]]\n        if isinstance(postprocessing_defences, Postprocessor):\n            <IND>self.postprocessing_defences = [postprocessing_defences]\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Trusted-AI/adversarial-robustness-toolbox",
    "commit": "5d9aff2b560caec96c7ca61624ae74597c276dcb",
    "filename": "art/estimators/estimator.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Trusted-AI-adversarial-robustness-toolbox/art/estimators/estimator.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "art/estimators/estimator.py:136:51 Incompatible parameter type [6]: Expected `Union[typing.Type[typing.Any], typing.Tuple[typing.Type[typing.Any], ...]]` for 2nd positional only parameter to call `isinstance` but got `str`.",
    "message": " Expected `Union[typing.Type[typing.Any], typing.Tuple[typing.Type[typing.Any], ...]]` for 2nd positional only parameter to call `isinstance` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 136,
    "warning_line": "                if not isinstance(preproc_defence, \"Preprocessor\"):"
  },
  {
    "project": "Trusted-AI/adversarial-robustness-toolbox",
    "commit": "5d9aff2b560caec96c7ca61624ae74597c276dcb",
    "filename": "art/estimators/estimator.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Trusted-AI-adversarial-robustness-toolbox/art/estimators/estimator.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "art/estimators/estimator.py:150:52 Incompatible parameter type [6]: Expected `Union[typing.Type[typing.Any], typing.Tuple[typing.Type[typing.Any], ...]]` for 2nd positional only parameter to call `isinstance` but got `str`.",
    "message": " Expected `Union[typing.Type[typing.Any], typing.Tuple[typing.Type[typing.Any], ...]]` for 2nd positional only parameter to call `isinstance` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 150,
    "warning_line": "                if not isinstance(postproc_defence, \"Postprocessor\"):"
  }
]