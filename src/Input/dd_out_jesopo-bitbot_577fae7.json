[
  {
    "project": "jesopo/bitbot",
    "commit": "577fae7ceabfd2a43b798e02a67c518c23ed33bd",
    "filename": "src/IRCServer.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jesopo-bitbot/src/IRCServer.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/IRCServer.py:355:59 Incompatible variable type [9]: tags is declared to have type `typing.Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "message": " tags is declared to have type `typing.Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 355,
    "warning_line": "    def make_batch(self, identifier: str, batch_type: str, tags: dict=None):",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def make_batch(self, identifier: str, batch_type: str, tags: dict=None):\n        return utils.irc.IRCSendBatch(identifier, batch_type, tags)\n    def send_batch(self, batch: utils.irc.IRCSendBatch):\n        self.send(utils.irc.protocol.batch_start(batch.id, batch.type,\n",
        "source_code_len": 274,
        "target_code": "\n    def make_batch(self, identifier: str, batch_type: str,\n            tags: typing.Dict[str, str]={}) -> utils.irc.IRCSendBatch:\n        return utils.irc.IRCSendBatch(identifier, batch_type, tags)\n    def send_batch(self, batch: utils.irc.IRCSendBatch) -> IRCLine.Line:\n        self.send(utils.irc.protocol.batch_start(batch.id, batch.type,\n",
        "target_code_len": 343,
        "diff_format": "@@ -354,5 +354,6 @@\n \n-    def make_batch(self, identifier: str, batch_type: str, tags: dict=None):\n+    def make_batch(self, identifier: str, batch_type: str,\n+            tags: typing.Dict[str, str]={}) -> utils.irc.IRCSendBatch:\n         return utils.irc.IRCSendBatch(identifier, batch_type, tags)\n-    def send_batch(self, batch: utils.irc.IRCSendBatch):\n+    def send_batch(self, batch: utils.irc.IRCSendBatch) -> IRCLine.Line:\n         self.send(utils.irc.protocol.batch_start(batch.id, batch.type,\n",
        "source_code_with_indent": "\n    <DED>def make_batch(self, identifier: str, batch_type: str, tags: dict=None):\n        <IND>return utils.irc.IRCSendBatch(identifier, batch_type, tags)\n    <DED>def send_batch(self, batch: utils.irc.IRCSendBatch):\n        <IND>self.send(utils.irc.protocol.batch_start(batch.id, batch.type,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def make_batch(self, identifier: str, batch_type: str,\n            tags: typing.Dict[str, str]={}) -> utils.irc.IRCSendBatch:\n        <IND>return utils.irc.IRCSendBatch(identifier, batch_type, tags)\n    <DED>def send_batch(self, batch: utils.irc.IRCSendBatch) -> IRCLine.Line:\n        <IND>self.send(utils.irc.protocol.batch_start(batch.id, batch.type,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jesopo/bitbot",
    "commit": "577fae7ceabfd2a43b798e02a67c518c23ed33bd",
    "filename": "src/utils/irc/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jesopo-bitbot/src/utils/irc/__init__.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/utils/irc/__init__.py:80:40 Incompatible variable type [9]: tags is declared to have type `typing.Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "message": " tags is declared to have type `typing.Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 80,
    "warning_line": "            prefix: IRCHostmask = None, tags: dict = None):"
  },
  {
    "project": "jesopo/bitbot",
    "commit": "577fae7ceabfd2a43b798e02a67c518c23ed33bd",
    "filename": "src/utils/irc/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jesopo-bitbot/src/utils/irc/__init__.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/utils/irc/__init__.py:321:57 Incompatible variable type [9]: tags is declared to have type `typing.Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "message": " tags is declared to have type `typing.Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 321,
    "warning_line": "    def __init__(self, identifier: str, batch_type: str, tags: dict=None):",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "class IRCBatch(object):\n    def __init__(self, identifier: str, batch_type: str, tags: dict=None):\n        self.id = identifier\n",
        "source_code_len": 128,
        "target_code": "class IRCBatch(object):\n    def __init__(self, identifier: str, batch_type: str, tags:\n            typing.Dict[str, str]={}):\n        self.id = identifier\n",
        "target_code_len": 155,
        "diff_format": "@@ -320,3 +321,4 @@\n class IRCBatch(object):\n-    def __init__(self, identifier: str, batch_type: str, tags: dict=None):\n+    def __init__(self, identifier: str, batch_type: str, tags:\n+            typing.Dict[str, str]={}):\n         self.id = identifier\n",
        "source_code_with_indent": "<DED>class IRCBatch(object):\n    <IND>def __init__(self, identifier: str, batch_type: str, tags: dict=None):\n        <IND>self.id = identifier\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED>class IRCBatch(object):\n    <IND>def __init__(self, identifier: str, batch_type: str, tags:\n            typing.Dict[str, str]={}):\n        <IND>self.id = identifier\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jesopo/bitbot",
    "commit": "577fae7ceabfd2a43b798e02a67c518c23ed33bd",
    "filename": "src/utils/irc/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jesopo-bitbot/src/utils/irc/__init__.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/utils/irc/__init__.py:332:49 Incompatible variable type [9]: tags is declared to have type `typing.Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "message": " tags is declared to have type `typing.Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 332,
    "warning_line": "    def message(self, target: str, message: str, tags: dict=None):",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: dict=None):\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n    def notice(self, target: str, message: str, tags: dict=None):\n        self._add_line(utils.irc.protocol.notice(target, message, tags))\n",
        "source_code_len": 312,
        "target_code": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: dict={}):\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n    def notice(self, target: str, message: str, tags: dict={}):\n        self._add_line(utils.irc.protocol.notice(target, message, tags))\n",
        "target_code_len": 308,
        "diff_format": "@@ -331,5 +333,5 @@\n         self.lines.append(line)\n-    def message(self, target: str, message: str, tags: dict=None):\n+    def message(self, target: str, message: str, tags: dict={}):\n         self._add_line(utils.irc.protocol.message(target, message, tags))\n-    def notice(self, target: str, message: str, tags: dict=None):\n+    def notice(self, target: str, message: str, tags: dict={}):\n         self._add_line(utils.irc.protocol.notice(target, message, tags))\n",
        "source_code_with_indent": "        self.lines.append(line)\n    <DED>def message(self, target: str, message: str, tags: dict=None):\n        <IND>self._add_line(utils.irc.protocol.message(target, message, tags))\n    <DED>def notice(self, target: str, message: str, tags: dict=None):\n        <IND>self._add_line(utils.irc.protocol.notice(target, message, tags))\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self.lines.append(line)\n    <DED>def message(self, target: str, message: str, tags: dict={}):\n        <IND>self._add_line(utils.irc.protocol.message(target, message, tags))\n    <DED>def notice(self, target: str, message: str, tags: dict={}):\n        <IND>self._add_line(utils.irc.protocol.notice(target, message, tags))\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jesopo/bitbot",
    "commit": "577fae7ceabfd2a43b798e02a67c518c23ed33bd",
    "filename": "src/utils/irc/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jesopo-bitbot/src/utils/irc/__init__.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/utils/irc/__init__.py:334:48 Incompatible variable type [9]: tags is declared to have type `typing.Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "message": " tags is declared to have type `typing.Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 334,
    "warning_line": "    def notice(self, target: str, message: str, tags: dict=None):",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: dict=None):\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n    def notice(self, target: str, message: str, tags: dict=None):\n        self._add_line(utils.irc.protocol.notice(target, message, tags))\n",
        "source_code_len": 312,
        "target_code": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: dict={}):\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n    def notice(self, target: str, message: str, tags: dict={}):\n        self._add_line(utils.irc.protocol.notice(target, message, tags))\n",
        "target_code_len": 308,
        "diff_format": "@@ -331,5 +333,5 @@\n         self.lines.append(line)\n-    def message(self, target: str, message: str, tags: dict=None):\n+    def message(self, target: str, message: str, tags: dict={}):\n         self._add_line(utils.irc.protocol.message(target, message, tags))\n-    def notice(self, target: str, message: str, tags: dict=None):\n+    def notice(self, target: str, message: str, tags: dict={}):\n         self._add_line(utils.irc.protocol.notice(target, message, tags))\n",
        "source_code_with_indent": "        self.lines.append(line)\n    <DED>def message(self, target: str, message: str, tags: dict=None):\n        <IND>self._add_line(utils.irc.protocol.message(target, message, tags))\n    <DED>def notice(self, target: str, message: str, tags: dict=None):\n        <IND>self._add_line(utils.irc.protocol.notice(target, message, tags))\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self.lines.append(line)\n    <DED>def message(self, target: str, message: str, tags: dict={}):\n        <IND>self._add_line(utils.irc.protocol.message(target, message, tags))\n    <DED>def notice(self, target: str, message: str, tags: dict={}):\n        <IND>self._add_line(utils.irc.protocol.notice(target, message, tags))\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jesopo/bitbot",
    "commit": "577fae7ceabfd2a43b798e02a67c518c23ed33bd",
    "filename": "src/utils/irc/protocol.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jesopo-bitbot/src/utils/irc/protocol.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/utils/irc/protocol.py:36:39 Incompatible variable type [9]: tags is declared to have type `typing.Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "message": " tags is declared to have type `typing.Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 36,
    "warning_line": "def message(target: str, message: str, tags: dict=None",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef message(target: str, message: str, tags: dict=None\n        ) -> 'utils.irc.IRCParsedLine':\n    return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags)\ndef notice(target: str, message: str, tags: dict=None\n        ) -> 'utils.irc.IRCParsedLine':\n",
        "source_code_len": 266,
        "target_code": "\ndef message(target: str, message: str, tags: typing.Dict[str, str]={}\n        ) -> 'utils.irc.IRCParsedLine':\n    return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags)\ndef notice(target: str, message: str, tags: typing.Dict[str, str]={}\n        ) -> 'utils.irc.IRCParsedLine':\n",
        "target_code_len": 296,
        "diff_format": "@@ -35,6 +35,6 @@\n \n-def message(target: str, message: str, tags: dict=None\n+def message(target: str, message: str, tags: typing.Dict[str, str]={}\n         ) -> 'utils.irc.IRCParsedLine':\n     return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags)\n-def notice(target: str, message: str, tags: dict=None\n+def notice(target: str, message: str, tags: typing.Dict[str, str]={}\n         ) -> 'utils.irc.IRCParsedLine':\n",
        "source_code_with_indent": "\n<DED>def message(target: str, message: str, tags: dict=None\n        ) -> 'utils.irc.IRCParsedLine':\n    <IND>return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags)\n<DED>def notice(target: str, message: str, tags: dict=None\n        ) -> 'utils.irc.IRCParsedLine':\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def message(target: str, message: str, tags: typing.Dict[str, str]={}\n        ) -> 'utils.irc.IRCParsedLine':\n    <IND>return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags)\n<DED>def notice(target: str, message: str, tags: typing.Dict[str, str]={}\n        ) -> 'utils.irc.IRCParsedLine':\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jesopo/bitbot",
    "commit": "577fae7ceabfd2a43b798e02a67c518c23ed33bd",
    "filename": "src/utils/irc/protocol.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jesopo-bitbot/src/utils/irc/protocol.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/utils/irc/protocol.py:39:38 Incompatible variable type [9]: tags is declared to have type `typing.Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "message": " tags is declared to have type `typing.Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 39,
    "warning_line": "def notice(target: str, message: str, tags: dict=None",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef message(target: str, message: str, tags: dict=None\n        ) -> 'utils.irc.IRCParsedLine':\n    return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags)\ndef notice(target: str, message: str, tags: dict=None\n        ) -> 'utils.irc.IRCParsedLine':\n",
        "source_code_len": 266,
        "target_code": "\ndef message(target: str, message: str, tags: typing.Dict[str, str]={}\n        ) -> 'utils.irc.IRCParsedLine':\n    return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags)\ndef notice(target: str, message: str, tags: typing.Dict[str, str]={}\n        ) -> 'utils.irc.IRCParsedLine':\n",
        "target_code_len": 296,
        "diff_format": "@@ -35,6 +35,6 @@\n \n-def message(target: str, message: str, tags: dict=None\n+def message(target: str, message: str, tags: typing.Dict[str, str]={}\n         ) -> 'utils.irc.IRCParsedLine':\n     return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags)\n-def notice(target: str, message: str, tags: dict=None\n+def notice(target: str, message: str, tags: typing.Dict[str, str]={}\n         ) -> 'utils.irc.IRCParsedLine':\n",
        "source_code_with_indent": "\n<DED>def message(target: str, message: str, tags: dict=None\n        ) -> 'utils.irc.IRCParsedLine':\n    <IND>return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags)\n<DED>def notice(target: str, message: str, tags: dict=None\n        ) -> 'utils.irc.IRCParsedLine':\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def message(target: str, message: str, tags: typing.Dict[str, str]={}\n        ) -> 'utils.irc.IRCParsedLine':\n    <IND>return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags)\n<DED>def notice(target: str, message: str, tags: typing.Dict[str, str]={}\n        ) -> 'utils.irc.IRCParsedLine':\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jesopo/bitbot",
    "commit": "577fae7ceabfd2a43b798e02a67c518c23ed33bd",
    "filename": "src/utils/irc/protocol.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jesopo-bitbot/src/utils/irc/protocol.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/utils/irc/protocol.py:84:50 Incompatible variable type [9]: tags is declared to have type `typing.Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "message": " tags is declared to have type `typing.Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 84,
    "warning_line": "def batch_start(identifier: str, batch_type: str, tags: dict=None):",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef batch_start(identifier: str, batch_type: str, tags: dict=None):\n    return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type],\n",
        "source_code_len": 147,
        "target_code": "\ndef batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]={}\n        ) -> 'utils.irc.IRCParsedLine':\n    return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type],\n",
        "target_code_len": 200,
        "diff_format": "@@ -83,3 +83,4 @@\n \n-def batch_start(identifier: str, batch_type: str, tags: dict=None):\n+def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]={}\n+        ) -> 'utils.irc.IRCParsedLine':\n     return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type],\n",
        "source_code_with_indent": "\n<DED>def batch_start(identifier: str, batch_type: str, tags: dict=None):\n    <IND>return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type],\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]={}\n        ) -> 'utils.irc.IRCParsedLine':\n    <IND>return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type],\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jesopo/bitbot",
    "commit": "577fae7ceabfd2a43b798e02a67c518c23ed33bd",
    "filename": "src/utils/irc/protocol.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jesopo-bitbot/src/utils/irc/protocol.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/utils/irc/protocol.py:88:31 Incompatible variable type [9]: tags is declared to have type `typing.Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "message": " tags is declared to have type `typing.Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 88,
    "warning_line": "def batch_end(identifier: str, tags: dict=None):",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef batch_end(identifier: str, tags: dict=None):\n    return utils.irc.IRCParsedLine(\"BATCH\", [\"-%s\" % identifier], tags=tags)\n",
        "source_code_len": 127,
        "target_code": "\ndef batch_end(identifier: str, tags: typing.Dict[str, str]={}):\n    return utils.irc.IRCParsedLine(\"BATCH\", [\"-%s\" % identifier], tags=tags)\n",
        "target_code_len": 142,
        "diff_format": "@@ -87,3 +88,3 @@\n \n-def batch_end(identifier: str, tags: dict=None):\n+def batch_end(identifier: str, tags: typing.Dict[str, str]={}):\n     return utils.irc.IRCParsedLine(\"BATCH\", [\"-%s\" % identifier], tags=tags)\n",
        "source_code_with_indent": "\n<DED>def batch_end(identifier: str, tags: dict=None):\n    <IND>return utils.irc.IRCParsedLine(\"BATCH\", [\"-%s\" % identifier], tags=tags)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def batch_end(identifier: str, tags: typing.Dict[str, str]={}):\n    <IND>return utils.irc.IRCParsedLine(\"BATCH\", [\"-%s\" % identifier], tags=tags)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]