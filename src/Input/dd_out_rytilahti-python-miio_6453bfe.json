[
  {
    "project": "rytilahti/python-miio",
    "commit": "6453bfee512150e3f062670e890533fcd67067ea",
    "filename": "miio/airconditioningcompanion.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/rytilahti-python-miio/miio/airconditioningcompanion.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "miio/airconditioningcompanion.py:315:12 Incompatible variable type [9]: model is declared to have type `str` but is used as type `bytes`.",
    "message": " model is declared to have type `str` but is used as type `bytes`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 315,
    "warning_line": "            model = bytes.fromhex(model)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        try:\n            model = bytes.fromhex(model)\n        except ValueError:\n",
        "source_code_len": 81,
        "target_code": "        try:\n            model_bytes = bytes.fromhex(model)\n        except ValueError:\n",
        "target_code_len": 87,
        "diff_format": "@@ -314,3 +314,3 @@\n         try:\n-            model = bytes.fromhex(model)\n+            model_bytes = bytes.fromhex(model)\n         except ValueError:\n",
        "source_code_with_indent": "        try:\n            <IND>model = bytes.fromhex(model)\n        <DED>except ValueError:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        try:\n            <IND>model_bytes = bytes.fromhex(model)\n        <DED>except ValueError:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "rytilahti/python-miio",
    "commit": "6453bfee512150e3f062670e890533fcd67067ea",
    "filename": "miio/airconditioningcompanion.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/rytilahti-python-miio/miio/airconditioningcompanion.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "miio/airconditioningcompanion.py:322:12 Incompatible variable type [9]: code is declared to have type `str` but is used as type `bytes`.",
    "message": " code is declared to have type `str` but is used as type `bytes`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 322,
    "warning_line": "            code = bytes.fromhex(code)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        try:\n            code = bytes.fromhex(code)\n        except ValueError:\n",
        "source_code_len": 79,
        "target_code": "        try:\n            code_bytes = bytes.fromhex(code)\n        except ValueError:\n",
        "target_code_len": 85,
        "diff_format": "@@ -321,3 +321,3 @@\n         try:\n-            code = bytes.fromhex(code)\n+            code_bytes = bytes.fromhex(code)\n         except ValueError:\n",
        "source_code_with_indent": "        <DED>try:\n            <IND>code = bytes.fromhex(code)\n        <DED>except ValueError:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>try:\n            <IND>code_bytes = bytes.fromhex(code)\n        <DED>except ValueError:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "rytilahti/python-miio",
    "commit": "6453bfee512150e3f062670e890533fcd67067ea",
    "filename": "miio/airconditioningcompanion.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/rytilahti-python-miio/miio/airconditioningcompanion.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "miio/airconditioningcompanion.py:331:8 Incompatible variable type [9]: slot is declared to have type `int` but is used as type `bytes`.",
    "message": " slot is declared to have type `int` but is used as type `bytes`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 331,
    "warning_line": "        slot = bytes([121 + slot])",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        try:\n            model = bytes.fromhex(model)\n        except ValueError:\n",
        "source_code_len": 81,
        "target_code": "        try:\n            model_bytes = bytes.fromhex(model)\n        except ValueError:\n",
        "target_code_len": 87,
        "diff_format": "@@ -314,3 +314,3 @@\n         try:\n-            model = bytes.fromhex(model)\n+            model_bytes = bytes.fromhex(model)\n         except ValueError:\n",
        "source_code_with_indent": "        try:\n            <IND>model = bytes.fromhex(model)\n        <DED>except ValueError:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        try:\n            <IND>model_bytes = bytes.fromhex(model)\n        <DED>except ValueError:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        try:\n            code = bytes.fromhex(code)\n        except ValueError:\n",
        "source_code_len": 79,
        "target_code": "        try:\n            code_bytes = bytes.fromhex(code)\n        except ValueError:\n",
        "target_code_len": 85,
        "diff_format": "@@ -321,3 +321,3 @@\n         try:\n-            code = bytes.fromhex(code)\n+            code_bytes = bytes.fromhex(code)\n         except ValueError:\n",
        "source_code_with_indent": "        <DED>try:\n            <IND>code = bytes.fromhex(code)\n        <DED>except ValueError:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>try:\n            <IND>code_bytes = bytes.fromhex(code)\n        <DED>except ValueError:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        slot = bytes([121 + slot])\n\n        # FE + 0487 + 00007145 + 9470 + 1FFF + 7F + FF + 06 + 0042 + 27 + 4E + 0025002D008500AC01...\n        command = (\n            code[0:1]\n            + model[2:8]\n            + b\"\\x94\\x70\\x1F\\xFF\"\n            + slot\n            + b\"\\xFF\"\n            + code[13:16]\n            + b\"\\x27\"\n",
        "source_code_len": 328,
        "target_code": "\n        slot_bytes = bytes([121 + slot])\n\n        # FE + 0487 + 00007145 + 9470 + 1FFF + 7F + FF + 06 + 0042 + 27 + 4E + 0025002D008500AC01...\n        command_bytes = (\n            code_bytes[0:1]\n            + model_bytes[2:8]\n            + b\"\\x94\\x70\\x1F\\xFF\"\n            + slot_bytes\n            + b\"\\xFF\"\n            + code_bytes[13:16]\n            + b\"\\x27\"\n",
        "target_code_len": 364,
        "diff_format": "@@ -330,12 +330,12 @@\n \n-        slot = bytes([121 + slot])\n+        slot_bytes = bytes([121 + slot])\n \n         # FE + 0487 + 00007145 + 9470 + 1FFF + 7F + FF + 06 + 0042 + 27 + 4E + 0025002D008500AC01...\n-        command = (\n-            code[0:1]\n-            + model[2:8]\n+        command_bytes = (\n+            code_bytes[0:1]\n+            + model_bytes[2:8]\n             + b\"\\x94\\x70\\x1F\\xFF\"\n-            + slot\n+            + slot_bytes\n             + b\"\\xFF\"\n-            + code[13:16]\n+            + code_bytes[13:16]\n             + b\"\\x27\"\n",
        "source_code_with_indent": "\n        <DED>slot = bytes([121 + slot])\n\n        # FE + 0487 + 00007145 + 9470 + 1FFF + 7F + FF + 06 + 0042 + 27 + 4E + 0025002D008500AC01...\n        command = (\n            code[0:1]\n            + model[2:8]\n            + b\"\\x94\\x70\\x1F\\xFF\"\n            + slot\n            + b\"\\xFF\"\n            + code[13:16]\n            + b\"\\x27\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        <DED>slot_bytes = bytes([121 + slot])\n\n        # FE + 0487 + 00007145 + 9470 + 1FFF + 7F + FF + 06 + 0042 + 27 + 4E + 0025002D008500AC01...\n        command_bytes = (\n            code_bytes[0:1]\n            + model_bytes[2:8]\n            + b\"\\x94\\x70\\x1F\\xFF\"\n            + slot_bytes\n            + b\"\\xFF\"\n            + code_bytes[13:16]\n            + b\"\\x27\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "rytilahti/python-miio",
    "commit": "6453bfee512150e3f062670e890533fcd67067ea",
    "filename": "miio/airconditioningcompanion.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/rytilahti-python-miio/miio/airconditioningcompanion.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "miio/airconditioningcompanion.py:335:12 Unsupported operand [58]: `+` is not supported for operand types `str` and `int`.",
    "message": " `+` is not supported for operand types `str` and `int`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 335,
    "warning_line": "            code[0:1]",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        try:\n            model = bytes.fromhex(model)\n        except ValueError:\n",
        "source_code_len": 81,
        "target_code": "        try:\n            model_bytes = bytes.fromhex(model)\n        except ValueError:\n",
        "target_code_len": 87,
        "diff_format": "@@ -314,3 +314,3 @@\n         try:\n-            model = bytes.fromhex(model)\n+            model_bytes = bytes.fromhex(model)\n         except ValueError:\n",
        "source_code_with_indent": "        try:\n            <IND>model = bytes.fromhex(model)\n        <DED>except ValueError:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        try:\n            <IND>model_bytes = bytes.fromhex(model)\n        <DED>except ValueError:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        try:\n            code = bytes.fromhex(code)\n        except ValueError:\n",
        "source_code_len": 79,
        "target_code": "        try:\n            code_bytes = bytes.fromhex(code)\n        except ValueError:\n",
        "target_code_len": 85,
        "diff_format": "@@ -321,3 +321,3 @@\n         try:\n-            code = bytes.fromhex(code)\n+            code_bytes = bytes.fromhex(code)\n         except ValueError:\n",
        "source_code_with_indent": "        <DED>try:\n            <IND>code = bytes.fromhex(code)\n        <DED>except ValueError:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>try:\n            <IND>code_bytes = bytes.fromhex(code)\n        <DED>except ValueError:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        slot = bytes([121 + slot])\n\n        # FE + 0487 + 00007145 + 9470 + 1FFF + 7F + FF + 06 + 0042 + 27 + 4E + 0025002D008500AC01...\n        command = (\n            code[0:1]\n            + model[2:8]\n            + b\"\\x94\\x70\\x1F\\xFF\"\n            + slot\n            + b\"\\xFF\"\n            + code[13:16]\n            + b\"\\x27\"\n",
        "source_code_len": 328,
        "target_code": "\n        slot_bytes = bytes([121 + slot])\n\n        # FE + 0487 + 00007145 + 9470 + 1FFF + 7F + FF + 06 + 0042 + 27 + 4E + 0025002D008500AC01...\n        command_bytes = (\n            code_bytes[0:1]\n            + model_bytes[2:8]\n            + b\"\\x94\\x70\\x1F\\xFF\"\n            + slot_bytes\n            + b\"\\xFF\"\n            + code_bytes[13:16]\n            + b\"\\x27\"\n",
        "target_code_len": 364,
        "diff_format": "@@ -330,12 +330,12 @@\n \n-        slot = bytes([121 + slot])\n+        slot_bytes = bytes([121 + slot])\n \n         # FE + 0487 + 00007145 + 9470 + 1FFF + 7F + FF + 06 + 0042 + 27 + 4E + 0025002D008500AC01...\n-        command = (\n-            code[0:1]\n-            + model[2:8]\n+        command_bytes = (\n+            code_bytes[0:1]\n+            + model_bytes[2:8]\n             + b\"\\x94\\x70\\x1F\\xFF\"\n-            + slot\n+            + slot_bytes\n             + b\"\\xFF\"\n-            + code[13:16]\n+            + code_bytes[13:16]\n             + b\"\\x27\"\n",
        "source_code_with_indent": "\n        <DED>slot = bytes([121 + slot])\n\n        # FE + 0487 + 00007145 + 9470 + 1FFF + 7F + FF + 06 + 0042 + 27 + 4E + 0025002D008500AC01...\n        command = (\n            code[0:1]\n            + model[2:8]\n            + b\"\\x94\\x70\\x1F\\xFF\"\n            + slot\n            + b\"\\xFF\"\n            + code[13:16]\n            + b\"\\x27\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        <DED>slot_bytes = bytes([121 + slot])\n\n        # FE + 0487 + 00007145 + 9470 + 1FFF + 7F + FF + 06 + 0042 + 27 + 4E + 0025002D008500AC01...\n        command_bytes = (\n            code_bytes[0:1]\n            + model_bytes[2:8]\n            + b\"\\x94\\x70\\x1F\\xFF\"\n            + slot_bytes\n            + b\"\\xFF\"\n            + code_bytes[13:16]\n            + b\"\\x27\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "rytilahti/python-miio",
    "commit": "6453bfee512150e3f062670e890533fcd67067ea",
    "filename": "miio/airconditioningcompanion.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/rytilahti-python-miio/miio/airconditioningcompanion.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "miio/airconditioningcompanion.py:337:14 Unsupported operand [58]: `+` is not supported for operand types `str` and `bytes`.",
    "message": " `+` is not supported for operand types `str` and `bytes`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 337,
    "warning_line": "            + b\"\\x94\\x70\\x1F\\xFF\"",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        try:\n            model = bytes.fromhex(model)\n        except ValueError:\n",
        "source_code_len": 81,
        "target_code": "        try:\n            model_bytes = bytes.fromhex(model)\n        except ValueError:\n",
        "target_code_len": 87,
        "diff_format": "@@ -314,3 +314,3 @@\n         try:\n-            model = bytes.fromhex(model)\n+            model_bytes = bytes.fromhex(model)\n         except ValueError:\n",
        "source_code_with_indent": "        try:\n            <IND>model = bytes.fromhex(model)\n        <DED>except ValueError:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        try:\n            <IND>model_bytes = bytes.fromhex(model)\n        <DED>except ValueError:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        try:\n            code = bytes.fromhex(code)\n        except ValueError:\n",
        "source_code_len": 79,
        "target_code": "        try:\n            code_bytes = bytes.fromhex(code)\n        except ValueError:\n",
        "target_code_len": 85,
        "diff_format": "@@ -321,3 +321,3 @@\n         try:\n-            code = bytes.fromhex(code)\n+            code_bytes = bytes.fromhex(code)\n         except ValueError:\n",
        "source_code_with_indent": "        <DED>try:\n            <IND>code = bytes.fromhex(code)\n        <DED>except ValueError:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>try:\n            <IND>code_bytes = bytes.fromhex(code)\n        <DED>except ValueError:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        slot = bytes([121 + slot])\n\n        # FE + 0487 + 00007145 + 9470 + 1FFF + 7F + FF + 06 + 0042 + 27 + 4E + 0025002D008500AC01...\n        command = (\n            code[0:1]\n            + model[2:8]\n            + b\"\\x94\\x70\\x1F\\xFF\"\n            + slot\n            + b\"\\xFF\"\n            + code[13:16]\n            + b\"\\x27\"\n",
        "source_code_len": 328,
        "target_code": "\n        slot_bytes = bytes([121 + slot])\n\n        # FE + 0487 + 00007145 + 9470 + 1FFF + 7F + FF + 06 + 0042 + 27 + 4E + 0025002D008500AC01...\n        command_bytes = (\n            code_bytes[0:1]\n            + model_bytes[2:8]\n            + b\"\\x94\\x70\\x1F\\xFF\"\n            + slot_bytes\n            + b\"\\xFF\"\n            + code_bytes[13:16]\n            + b\"\\x27\"\n",
        "target_code_len": 364,
        "diff_format": "@@ -330,12 +330,12 @@\n \n-        slot = bytes([121 + slot])\n+        slot_bytes = bytes([121 + slot])\n \n         # FE + 0487 + 00007145 + 9470 + 1FFF + 7F + FF + 06 + 0042 + 27 + 4E + 0025002D008500AC01...\n-        command = (\n-            code[0:1]\n-            + model[2:8]\n+        command_bytes = (\n+            code_bytes[0:1]\n+            + model_bytes[2:8]\n             + b\"\\x94\\x70\\x1F\\xFF\"\n-            + slot\n+            + slot_bytes\n             + b\"\\xFF\"\n-            + code[13:16]\n+            + code_bytes[13:16]\n             + b\"\\x27\"\n",
        "source_code_with_indent": "\n        <DED>slot = bytes([121 + slot])\n\n        # FE + 0487 + 00007145 + 9470 + 1FFF + 7F + FF + 06 + 0042 + 27 + 4E + 0025002D008500AC01...\n        command = (\n            code[0:1]\n            + model[2:8]\n            + b\"\\x94\\x70\\x1F\\xFF\"\n            + slot\n            + b\"\\xFF\"\n            + code[13:16]\n            + b\"\\x27\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        <DED>slot_bytes = bytes([121 + slot])\n\n        # FE + 0487 + 00007145 + 9470 + 1FFF + 7F + FF + 06 + 0042 + 27 + 4E + 0025002D008500AC01...\n        command_bytes = (\n            code_bytes[0:1]\n            + model_bytes[2:8]\n            + b\"\\x94\\x70\\x1F\\xFF\"\n            + slot_bytes\n            + b\"\\xFF\"\n            + code_bytes[13:16]\n            + b\"\\x27\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "rytilahti/python-miio",
    "commit": "6453bfee512150e3f062670e890533fcd67067ea",
    "filename": "miio/airconditioningcompanion.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/rytilahti-python-miio/miio/airconditioningcompanion.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "miio/airconditioningcompanion.py:339:14 Unsupported operand [58]: `+` is not supported for operand types `int` and `bytes`.",
    "message": " `+` is not supported for operand types `int` and `bytes`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 339,
    "warning_line": "            + b\"\\xFF\"",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        try:\n            model = bytes.fromhex(model)\n        except ValueError:\n",
        "source_code_len": 81,
        "target_code": "        try:\n            model_bytes = bytes.fromhex(model)\n        except ValueError:\n",
        "target_code_len": 87,
        "diff_format": "@@ -314,3 +314,3 @@\n         try:\n-            model = bytes.fromhex(model)\n+            model_bytes = bytes.fromhex(model)\n         except ValueError:\n",
        "source_code_with_indent": "        try:\n            <IND>model = bytes.fromhex(model)\n        <DED>except ValueError:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        try:\n            <IND>model_bytes = bytes.fromhex(model)\n        <DED>except ValueError:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        try:\n            code = bytes.fromhex(code)\n        except ValueError:\n",
        "source_code_len": 79,
        "target_code": "        try:\n            code_bytes = bytes.fromhex(code)\n        except ValueError:\n",
        "target_code_len": 85,
        "diff_format": "@@ -321,3 +321,3 @@\n         try:\n-            code = bytes.fromhex(code)\n+            code_bytes = bytes.fromhex(code)\n         except ValueError:\n",
        "source_code_with_indent": "        <DED>try:\n            <IND>code = bytes.fromhex(code)\n        <DED>except ValueError:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>try:\n            <IND>code_bytes = bytes.fromhex(code)\n        <DED>except ValueError:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        slot = bytes([121 + slot])\n\n        # FE + 0487 + 00007145 + 9470 + 1FFF + 7F + FF + 06 + 0042 + 27 + 4E + 0025002D008500AC01...\n        command = (\n            code[0:1]\n            + model[2:8]\n            + b\"\\x94\\x70\\x1F\\xFF\"\n            + slot\n            + b\"\\xFF\"\n            + code[13:16]\n            + b\"\\x27\"\n",
        "source_code_len": 328,
        "target_code": "\n        slot_bytes = bytes([121 + slot])\n\n        # FE + 0487 + 00007145 + 9470 + 1FFF + 7F + FF + 06 + 0042 + 27 + 4E + 0025002D008500AC01...\n        command_bytes = (\n            code_bytes[0:1]\n            + model_bytes[2:8]\n            + b\"\\x94\\x70\\x1F\\xFF\"\n            + slot_bytes\n            + b\"\\xFF\"\n            + code_bytes[13:16]\n            + b\"\\x27\"\n",
        "target_code_len": 364,
        "diff_format": "@@ -330,12 +330,12 @@\n \n-        slot = bytes([121 + slot])\n+        slot_bytes = bytes([121 + slot])\n \n         # FE + 0487 + 00007145 + 9470 + 1FFF + 7F + FF + 06 + 0042 + 27 + 4E + 0025002D008500AC01...\n-        command = (\n-            code[0:1]\n-            + model[2:8]\n+        command_bytes = (\n+            code_bytes[0:1]\n+            + model_bytes[2:8]\n             + b\"\\x94\\x70\\x1F\\xFF\"\n-            + slot\n+            + slot_bytes\n             + b\"\\xFF\"\n-            + code[13:16]\n+            + code_bytes[13:16]\n             + b\"\\x27\"\n",
        "source_code_with_indent": "\n        <DED>slot = bytes([121 + slot])\n\n        # FE + 0487 + 00007145 + 9470 + 1FFF + 7F + FF + 06 + 0042 + 27 + 4E + 0025002D008500AC01...\n        command = (\n            code[0:1]\n            + model[2:8]\n            + b\"\\x94\\x70\\x1F\\xFF\"\n            + slot\n            + b\"\\xFF\"\n            + code[13:16]\n            + b\"\\x27\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        <DED>slot_bytes = bytes([121 + slot])\n\n        # FE + 0487 + 00007145 + 9470 + 1FFF + 7F + FF + 06 + 0042 + 27 + 4E + 0025002D008500AC01...\n        command_bytes = (\n            code_bytes[0:1]\n            + model_bytes[2:8]\n            + b\"\\x94\\x70\\x1F\\xFF\"\n            + slot_bytes\n            + b\"\\xFF\"\n            + code_bytes[13:16]\n            + b\"\\x27\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "rytilahti/python-miio",
    "commit": "6453bfee512150e3f062670e890533fcd67067ea",
    "filename": "miio/airconditioningcompanion.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/rytilahti-python-miio/miio/airconditioningcompanion.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "miio/airconditioningcompanion.py:340:14 Unsupported operand [58]: `+` is not supported for operand types `int` and `str`.",
    "message": " `+` is not supported for operand types `int` and `str`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 340,
    "warning_line": "            + code[13:16]",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        try:\n            model = bytes.fromhex(model)\n        except ValueError:\n",
        "source_code_len": 81,
        "target_code": "        try:\n            model_bytes = bytes.fromhex(model)\n        except ValueError:\n",
        "target_code_len": 87,
        "diff_format": "@@ -314,3 +314,3 @@\n         try:\n-            model = bytes.fromhex(model)\n+            model_bytes = bytes.fromhex(model)\n         except ValueError:\n",
        "source_code_with_indent": "        try:\n            <IND>model = bytes.fromhex(model)\n        <DED>except ValueError:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        try:\n            <IND>model_bytes = bytes.fromhex(model)\n        <DED>except ValueError:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        try:\n            code = bytes.fromhex(code)\n        except ValueError:\n",
        "source_code_len": 79,
        "target_code": "        try:\n            code_bytes = bytes.fromhex(code)\n        except ValueError:\n",
        "target_code_len": 85,
        "diff_format": "@@ -321,3 +321,3 @@\n         try:\n-            code = bytes.fromhex(code)\n+            code_bytes = bytes.fromhex(code)\n         except ValueError:\n",
        "source_code_with_indent": "        <DED>try:\n            <IND>code = bytes.fromhex(code)\n        <DED>except ValueError:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>try:\n            <IND>code_bytes = bytes.fromhex(code)\n        <DED>except ValueError:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        slot = bytes([121 + slot])\n\n        # FE + 0487 + 00007145 + 9470 + 1FFF + 7F + FF + 06 + 0042 + 27 + 4E + 0025002D008500AC01...\n        command = (\n            code[0:1]\n            + model[2:8]\n            + b\"\\x94\\x70\\x1F\\xFF\"\n            + slot\n            + b\"\\xFF\"\n            + code[13:16]\n            + b\"\\x27\"\n",
        "source_code_len": 328,
        "target_code": "\n        slot_bytes = bytes([121 + slot])\n\n        # FE + 0487 + 00007145 + 9470 + 1FFF + 7F + FF + 06 + 0042 + 27 + 4E + 0025002D008500AC01...\n        command_bytes = (\n            code_bytes[0:1]\n            + model_bytes[2:8]\n            + b\"\\x94\\x70\\x1F\\xFF\"\n            + slot_bytes\n            + b\"\\xFF\"\n            + code_bytes[13:16]\n            + b\"\\x27\"\n",
        "target_code_len": 364,
        "diff_format": "@@ -330,12 +330,12 @@\n \n-        slot = bytes([121 + slot])\n+        slot_bytes = bytes([121 + slot])\n \n         # FE + 0487 + 00007145 + 9470 + 1FFF + 7F + FF + 06 + 0042 + 27 + 4E + 0025002D008500AC01...\n-        command = (\n-            code[0:1]\n-            + model[2:8]\n+        command_bytes = (\n+            code_bytes[0:1]\n+            + model_bytes[2:8]\n             + b\"\\x94\\x70\\x1F\\xFF\"\n-            + slot\n+            + slot_bytes\n             + b\"\\xFF\"\n-            + code[13:16]\n+            + code_bytes[13:16]\n             + b\"\\x27\"\n",
        "source_code_with_indent": "\n        <DED>slot = bytes([121 + slot])\n\n        # FE + 0487 + 00007145 + 9470 + 1FFF + 7F + FF + 06 + 0042 + 27 + 4E + 0025002D008500AC01...\n        command = (\n            code[0:1]\n            + model[2:8]\n            + b\"\\x94\\x70\\x1F\\xFF\"\n            + slot\n            + b\"\\xFF\"\n            + code[13:16]\n            + b\"\\x27\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        <DED>slot_bytes = bytes([121 + slot])\n\n        # FE + 0487 + 00007145 + 9470 + 1FFF + 7F + FF + 06 + 0042 + 27 + 4E + 0025002D008500AC01...\n        command_bytes = (\n            code_bytes[0:1]\n            + model_bytes[2:8]\n            + b\"\\x94\\x70\\x1F\\xFF\"\n            + slot_bytes\n            + b\"\\xFF\"\n            + code_bytes[13:16]\n            + b\"\\x27\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "rytilahti/python-miio",
    "commit": "6453bfee512150e3f062670e890533fcd67067ea",
    "filename": "miio/airconditioningcompanion.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/rytilahti-python-miio/miio/airconditioningcompanion.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "miio/airconditioningcompanion.py:341:14 Unsupported operand [58]: `+` is not supported for operand types `int` and `bytes`.",
    "message": " `+` is not supported for operand types `int` and `bytes`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 341,
    "warning_line": "            + b\"\\x27\"",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        try:\n            model = bytes.fromhex(model)\n        except ValueError:\n",
        "source_code_len": 81,
        "target_code": "        try:\n            model_bytes = bytes.fromhex(model)\n        except ValueError:\n",
        "target_code_len": 87,
        "diff_format": "@@ -314,3 +314,3 @@\n         try:\n-            model = bytes.fromhex(model)\n+            model_bytes = bytes.fromhex(model)\n         except ValueError:\n",
        "source_code_with_indent": "        try:\n            <IND>model = bytes.fromhex(model)\n        <DED>except ValueError:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        try:\n            <IND>model_bytes = bytes.fromhex(model)\n        <DED>except ValueError:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        try:\n            code = bytes.fromhex(code)\n        except ValueError:\n",
        "source_code_len": 79,
        "target_code": "        try:\n            code_bytes = bytes.fromhex(code)\n        except ValueError:\n",
        "target_code_len": 85,
        "diff_format": "@@ -321,3 +321,3 @@\n         try:\n-            code = bytes.fromhex(code)\n+            code_bytes = bytes.fromhex(code)\n         except ValueError:\n",
        "source_code_with_indent": "        <DED>try:\n            <IND>code = bytes.fromhex(code)\n        <DED>except ValueError:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>try:\n            <IND>code_bytes = bytes.fromhex(code)\n        <DED>except ValueError:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        slot = bytes([121 + slot])\n\n        # FE + 0487 + 00007145 + 9470 + 1FFF + 7F + FF + 06 + 0042 + 27 + 4E + 0025002D008500AC01...\n        command = (\n            code[0:1]\n            + model[2:8]\n            + b\"\\x94\\x70\\x1F\\xFF\"\n            + slot\n            + b\"\\xFF\"\n            + code[13:16]\n            + b\"\\x27\"\n",
        "source_code_len": 328,
        "target_code": "\n        slot_bytes = bytes([121 + slot])\n\n        # FE + 0487 + 00007145 + 9470 + 1FFF + 7F + FF + 06 + 0042 + 27 + 4E + 0025002D008500AC01...\n        command_bytes = (\n            code_bytes[0:1]\n            + model_bytes[2:8]\n            + b\"\\x94\\x70\\x1F\\xFF\"\n            + slot_bytes\n            + b\"\\xFF\"\n            + code_bytes[13:16]\n            + b\"\\x27\"\n",
        "target_code_len": 364,
        "diff_format": "@@ -330,12 +330,12 @@\n \n-        slot = bytes([121 + slot])\n+        slot_bytes = bytes([121 + slot])\n \n         # FE + 0487 + 00007145 + 9470 + 1FFF + 7F + FF + 06 + 0042 + 27 + 4E + 0025002D008500AC01...\n-        command = (\n-            code[0:1]\n-            + model[2:8]\n+        command_bytes = (\n+            code_bytes[0:1]\n+            + model_bytes[2:8]\n             + b\"\\x94\\x70\\x1F\\xFF\"\n-            + slot\n+            + slot_bytes\n             + b\"\\xFF\"\n-            + code[13:16]\n+            + code_bytes[13:16]\n             + b\"\\x27\"\n",
        "source_code_with_indent": "\n        <DED>slot = bytes([121 + slot])\n\n        # FE + 0487 + 00007145 + 9470 + 1FFF + 7F + FF + 06 + 0042 + 27 + 4E + 0025002D008500AC01...\n        command = (\n            code[0:1]\n            + model[2:8]\n            + b\"\\x94\\x70\\x1F\\xFF\"\n            + slot\n            + b\"\\xFF\"\n            + code[13:16]\n            + b\"\\x27\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        <DED>slot_bytes = bytes([121 + slot])\n\n        # FE + 0487 + 00007145 + 9470 + 1FFF + 7F + FF + 06 + 0042 + 27 + 4E + 0025002D008500AC01...\n        command_bytes = (\n            code_bytes[0:1]\n            + model_bytes[2:8]\n            + b\"\\x94\\x70\\x1F\\xFF\"\n            + slot_bytes\n            + b\"\\xFF\"\n            + code_bytes[13:16]\n            + b\"\\x27\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "rytilahti/python-miio",
    "commit": "6453bfee512150e3f062670e890533fcd67067ea",
    "filename": "miio/airconditioningcompanion.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/rytilahti-python-miio/miio/airconditioningcompanion.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "miio/airconditioningcompanion.py:344:23 Incompatible parameter type [6]: Expected `typing.Iterable[Variable[_T]]` for 1st positional only parameter to call `sum` but got `int`.",
    "message": " Expected `typing.Iterable[Variable[_T]]` for 1st positional only parameter to call `sum` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 344,
    "warning_line": "        checksum = sum(command) & 0xFF",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        try:\n            code = bytes.fromhex(code)\n        except ValueError:\n",
        "source_code_len": 79,
        "target_code": "        try:\n            code_bytes = bytes.fromhex(code)\n        except ValueError:\n",
        "target_code_len": 85,
        "diff_format": "@@ -321,3 +321,3 @@\n         try:\n-            code = bytes.fromhex(code)\n+            code_bytes = bytes.fromhex(code)\n         except ValueError:\n",
        "source_code_with_indent": "        <DED>try:\n            <IND>code = bytes.fromhex(code)\n        <DED>except ValueError:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>try:\n            <IND>code_bytes = bytes.fromhex(code)\n        <DED>except ValueError:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        checksum = sum(command) & 0xFF\n        command = command + bytes([checksum]) + code[18:]\n\n        return self.send(\"send_ir_code\", [command.hex().upper()])\n\n",
        "source_code_len": 166,
        "target_code": "\n        checksum = sum(command_bytes) & 0xFF\n        command_bytes = command_bytes + bytes([checksum]) + code_bytes[18:]\n\n        return self.send(\"send_ir_code\", [command_bytes.hex().upper()])\n\n",
        "target_code_len": 196,
        "diff_format": "@@ -343,6 +343,6 @@\n \n-        checksum = sum(command) & 0xFF\n-        command = command + bytes([checksum]) + code[18:]\n-\n-        return self.send(\"send_ir_code\", [command.hex().upper()])\n+        checksum = sum(command_bytes) & 0xFF\n+        command_bytes = command_bytes + bytes([checksum]) + code_bytes[18:]\n+\n+        return self.send(\"send_ir_code\", [command_bytes.hex().upper()])\n \n",
        "source_code_with_indent": "\n        checksum = sum(command) & 0xFF\n        command = command + bytes([checksum]) + code[18:]\n\n        return self.send(\"send_ir_code\", [command.hex().upper()])\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        checksum = sum(command_bytes) & 0xFF\n        command_bytes = command_bytes + bytes([checksum]) + code_bytes[18:]\n\n        return self.send(\"send_ir_code\", [command_bytes.hex().upper()])\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "rytilahti/python-miio",
    "commit": "6453bfee512150e3f062670e890533fcd67067ea",
    "filename": "miio/airconditioningcompanion.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/rytilahti-python-miio/miio/airconditioningcompanion.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "miio/airconditioningcompanion.py:345:28 Unsupported operand [58]: `+` is not supported for operand types `int` and `bytes`.",
    "message": " `+` is not supported for operand types `int` and `bytes`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 345,
    "warning_line": "        command = command + bytes([checksum]) + code[18:]",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        try:\n            code = bytes.fromhex(code)\n        except ValueError:\n",
        "source_code_len": 79,
        "target_code": "        try:\n            code_bytes = bytes.fromhex(code)\n        except ValueError:\n",
        "target_code_len": 85,
        "diff_format": "@@ -321,3 +321,3 @@\n         try:\n-            code = bytes.fromhex(code)\n+            code_bytes = bytes.fromhex(code)\n         except ValueError:\n",
        "source_code_with_indent": "        <DED>try:\n            <IND>code = bytes.fromhex(code)\n        <DED>except ValueError:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>try:\n            <IND>code_bytes = bytes.fromhex(code)\n        <DED>except ValueError:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        checksum = sum(command) & 0xFF\n        command = command + bytes([checksum]) + code[18:]\n\n        return self.send(\"send_ir_code\", [command.hex().upper()])\n\n",
        "source_code_len": 166,
        "target_code": "\n        checksum = sum(command_bytes) & 0xFF\n        command_bytes = command_bytes + bytes([checksum]) + code_bytes[18:]\n\n        return self.send(\"send_ir_code\", [command_bytes.hex().upper()])\n\n",
        "target_code_len": 196,
        "diff_format": "@@ -343,6 +343,6 @@\n \n-        checksum = sum(command) & 0xFF\n-        command = command + bytes([checksum]) + code[18:]\n-\n-        return self.send(\"send_ir_code\", [command.hex().upper()])\n+        checksum = sum(command_bytes) & 0xFF\n+        command_bytes = command_bytes + bytes([checksum]) + code_bytes[18:]\n+\n+        return self.send(\"send_ir_code\", [command_bytes.hex().upper()])\n \n",
        "source_code_with_indent": "\n        checksum = sum(command) & 0xFF\n        command = command + bytes([checksum]) + code[18:]\n\n        return self.send(\"send_ir_code\", [command.hex().upper()])\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        checksum = sum(command_bytes) & 0xFF\n        command_bytes = command_bytes + bytes([checksum]) + code_bytes[18:]\n\n        return self.send(\"send_ir_code\", [command_bytes.hex().upper()])\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "rytilahti/python-miio",
    "commit": "6453bfee512150e3f062670e890533fcd67067ea",
    "filename": "miio/airconditioningcompanion.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/rytilahti-python-miio/miio/airconditioningcompanion.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "miio/airconditioningcompanion.py:345:48 Unsupported operand [58]: `+` is not supported for operand types `int` and `str`.",
    "message": " `+` is not supported for operand types `int` and `str`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 345,
    "warning_line": "        command = command + bytes([checksum]) + code[18:]",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        try:\n            code = bytes.fromhex(code)\n        except ValueError:\n",
        "source_code_len": 79,
        "target_code": "        try:\n            code_bytes = bytes.fromhex(code)\n        except ValueError:\n",
        "target_code_len": 85,
        "diff_format": "@@ -321,3 +321,3 @@\n         try:\n-            code = bytes.fromhex(code)\n+            code_bytes = bytes.fromhex(code)\n         except ValueError:\n",
        "source_code_with_indent": "        <DED>try:\n            <IND>code = bytes.fromhex(code)\n        <DED>except ValueError:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>try:\n            <IND>code_bytes = bytes.fromhex(code)\n        <DED>except ValueError:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        checksum = sum(command) & 0xFF\n        command = command + bytes([checksum]) + code[18:]\n\n        return self.send(\"send_ir_code\", [command.hex().upper()])\n\n",
        "source_code_len": 166,
        "target_code": "\n        checksum = sum(command_bytes) & 0xFF\n        command_bytes = command_bytes + bytes([checksum]) + code_bytes[18:]\n\n        return self.send(\"send_ir_code\", [command_bytes.hex().upper()])\n\n",
        "target_code_len": 196,
        "diff_format": "@@ -343,6 +343,6 @@\n \n-        checksum = sum(command) & 0xFF\n-        command = command + bytes([checksum]) + code[18:]\n-\n-        return self.send(\"send_ir_code\", [command.hex().upper()])\n+        checksum = sum(command_bytes) & 0xFF\n+        command_bytes = command_bytes + bytes([checksum]) + code_bytes[18:]\n+\n+        return self.send(\"send_ir_code\", [command_bytes.hex().upper()])\n \n",
        "source_code_with_indent": "\n        checksum = sum(command) & 0xFF\n        command = command + bytes([checksum]) + code[18:]\n\n        return self.send(\"send_ir_code\", [command.hex().upper()])\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        checksum = sum(command_bytes) & 0xFF\n        command_bytes = command_bytes + bytes([checksum]) + code_bytes[18:]\n\n        return self.send(\"send_ir_code\", [command_bytes.hex().upper()])\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "rytilahti/python-miio",
    "commit": "6453bfee512150e3f062670e890533fcd67067ea",
    "filename": "miio/chuangmi_plug.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/rytilahti-python-miio/miio/chuangmi_plug.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "miio/chuangmi_plug.py:53:12 Incompatible return type [7]: Expected `bool` but got implicit return value of `None`.",
    "message": " Expected `bool` but got implicit return value of `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 53,
    "warning_line": "            return self.data[\"power\"] == \"on\"",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from .device import Device, DeviceStatus\nfrom .utils import deprecated\n",
        "source_code_len": 71,
        "target_code": "from .device import Device, DeviceStatus\nfrom .exceptions import DeviceException\nfrom .utils import deprecated\n",
        "target_code_len": 111,
        "diff_format": "@@ -8,2 +8,3 @@\n from .device import Device, DeviceStatus\n+from .exceptions import DeviceException\n from .utils import deprecated\n",
        "source_code_with_indent": "from .device import Device, DeviceStatus\nfrom .utils import deprecated\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from .device import Device, DeviceStatus\nfrom .exceptions import DeviceException\nfrom .utils import deprecated\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            return self.data[\"on\"] is True or self.data[\"on\"] == \"on\"\n        if \"power\" in self.data:\n            return self.data[\"power\"] == \"on\"\n\n",
        "source_code_len": 150,
        "target_code": "            return self.data[\"on\"] is True or self.data[\"on\"] == \"on\"\n        elif \"power\" in self.data:\n            return self.data[\"power\"] == \"on\"\n\n        raise DeviceException(\"There was neither 'on' or 'power' in data\")\n\n",
        "target_code_len": 228,
        "diff_format": "@@ -51,4 +52,6 @@\n             return self.data[\"on\"] is True or self.data[\"on\"] == \"on\"\n-        if \"power\" in self.data:\n+        elif \"power\" in self.data:\n             return self.data[\"power\"] == \"on\"\n+\n+        raise DeviceException(\"There was neither 'on' or 'power' in data\")\n \n",
        "source_code_with_indent": "            <IND>return self.data[\"on\"] is True or self.data[\"on\"] == \"on\"\n        <DED>if \"power\" in self.data:\n            <IND>return self.data[\"power\"] == \"on\"\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <IND>return self.data[\"on\"] is True or self.data[\"on\"] == \"on\"\n        <DED>elif \"power\" in self.data:\n            <IND>return self.data[\"power\"] == \"on\"\n\n        <DED>raise DeviceException(\"There was neither 'on' or 'power' in data\")\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "rytilahti/python-miio",
    "commit": "6453bfee512150e3f062670e890533fcd67067ea",
    "filename": "miio/dreamevacuum_miot.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/rytilahti-python-miio/miio/dreamevacuum_miot.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "miio/dreamevacuum_miot.py:278:4 Inconsistent override [14]: `miio.dreamevacuum_miot.DreameVacuumMiot.get_properties_for_mapping` overrides method defined in `MiotDevice` inconsistently. Could not find parameter `max_properties` in overriding signature.",
    "message": " `miio.dreamevacuum_miot.DreameVacuumMiot.get_properties_for_mapping` overrides method defined in `MiotDevice` inconsistently. Could not find parameter `max_properties` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 278,
    "warning_line": "    def get_properties_for_mapping(self) -> list:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def get_properties_for_mapping(self) -> list:\n        \"\"\"Retrieve raw properties based on mapping.\n",
        "source_code_len": 104,
        "target_code": "\n    def get_properties_for_mapping(self, *, max_properties=15) -> list:\n        \"\"\"Retrieve raw properties based on mapping.\n",
        "target_code_len": 126,
        "diff_format": "@@ -277,3 +277,3 @@\n \n-    def get_properties_for_mapping(self) -> list:\n+    def get_properties_for_mapping(self, *, max_properties=15) -> list:\n         \"\"\"Retrieve raw properties based on mapping.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def get_properties_for_mapping(self) -> list:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def get_properties_for_mapping(self, *, max_properties=15) -> list:\n        <IND>"
      }
    ]
  },
  {
    "project": "rytilahti/python-miio",
    "commit": "6453bfee512150e3f062670e890533fcd67067ea",
    "filename": "miio/gateway/devices/subdevice.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/rytilahti-python-miio/miio/gateway/devices/subdevice.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "miio/gateway/devices/subdevice.py:34:8 Incompatible variable type [9]: gw is declared to have type `Gateway` but is used as type `None`.",
    "message": " gw is declared to have type `Gateway` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 34,
    "warning_line": "        gw: \"Gateway\" = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self,\n        gw: \"Gateway\" = None,\n        dev_info: SubDeviceInfo = None,\n        model_info: Optional[Dict] = None,\n",
        "source_code_len": 127,
        "target_code": "        self,\n        gw: \"Gateway\",\n        dev_info: SubDeviceInfo,\n        model_info: Optional[Dict] = None,\n",
        "target_code_len": 113,
        "diff_format": "@@ -33,4 +33,4 @@\n         self,\n-        gw: \"Gateway\" = None,\n-        dev_info: SubDeviceInfo = None,\n+        gw: \"Gateway\",\n+        dev_info: SubDeviceInfo,\n         model_info: Optional[Dict] = None,\n",
        "source_code_with_indent": "        self,\n        gw: \"Gateway\" = None,\n        dev_info: SubDeviceInfo = None,\n        model_info: Optional[Dict] = None,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self,\n        gw: \"Gateway\",\n        dev_info: SubDeviceInfo,\n        model_info: Optional[Dict] = None,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "rytilahti/python-miio",
    "commit": "6453bfee512150e3f062670e890533fcd67067ea",
    "filename": "miio/gateway/devices/subdevice.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/rytilahti-python-miio/miio/gateway/devices/subdevice.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "miio/gateway/devices/subdevice.py:35:8 Incompatible variable type [9]: dev_info is declared to have type `SubDeviceInfo` but is used as type `None`.",
    "message": " dev_info is declared to have type `SubDeviceInfo` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 35,
    "warning_line": "        dev_info: SubDeviceInfo = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self,\n        gw: \"Gateway\" = None,\n        dev_info: SubDeviceInfo = None,\n        model_info: Optional[Dict] = None,\n",
        "source_code_len": 127,
        "target_code": "        self,\n        gw: \"Gateway\",\n        dev_info: SubDeviceInfo,\n        model_info: Optional[Dict] = None,\n",
        "target_code_len": 113,
        "diff_format": "@@ -33,4 +33,4 @@\n         self,\n-        gw: \"Gateway\" = None,\n-        dev_info: SubDeviceInfo = None,\n+        gw: \"Gateway\",\n+        dev_info: SubDeviceInfo,\n         model_info: Optional[Dict] = None,\n",
        "source_code_with_indent": "        self,\n        gw: \"Gateway\" = None,\n        dev_info: SubDeviceInfo = None,\n        model_info: Optional[Dict] = None,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self,\n        gw: \"Gateway\",\n        dev_info: SubDeviceInfo,\n        model_info: Optional[Dict] = None,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "rytilahti/python-miio",
    "commit": "6453bfee512150e3f062670e890533fcd67067ea",
    "filename": "miio/miioprotocol.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/rytilahti-python-miio/miio/miioprotocol.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "miio/miioprotocol.py:49:8 Incompatible attribute type [8]: Attribute `_device_ts` declared in class `MiIOProtocol` has type `datetime.datetime` but is used as type `None`.",
    "message": " Attribute `_device_ts` declared in class `MiIOProtocol` has type `datetime.datetime` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 49,
    "warning_line": "        self._device_ts = None  # type: datetime.datetime",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import codecs\nimport datetime\nimport logging\nimport socket\nfrom typing import Any, Dict, List\n",
        "source_code_len": 94,
        "target_code": "import codecs\nimport logging\nimport socket\nfrom datetime import datetime, timedelta\nfrom typing import Any, Dict, List\n",
        "target_code_len": 119,
        "diff_format": "@@ -7,5 +7,5 @@\n import codecs\n-import datetime\n import logging\n import socket\n+from datetime import datetime, timedelta\n from typing import Any, Dict, List\n",
        "source_code_with_indent": "import codecs\nimport datetime\nimport logging\nimport socket\nfrom typing import Any, Dict, List\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import codecs\nimport logging\nimport socket\nfrom datetime import datetime, timedelta\nfrom typing import Any, Dict, List\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            token = 32 * \"0\"\n        if token is not None:\n            self.token = bytes.fromhex(token)\n        self.debug = debug\n        self.lazy_discover = lazy_discover\n\n        self._timeout = timeout\n        self._discovered = False\n        self._device_ts = None  # type: datetime.datetime\n        self.__id = start_id\n        self._device_id = None\n\n",
        "source_code_len": 360,
        "target_code": "            token = 32 * \"0\"\n        self.token = bytes.fromhex(token)\n        self.debug = debug\n        self.lazy_discover = lazy_discover\n        self._timeout = timeout\n        self.__id = start_id\n\n        self._discovered = False\n        # these come from the device, but we initialize them here to make mypy happy\n        self._device_ts: datetime = datetime.utcnow()\n        self._device_id = bytes()\n\n",
        "target_code_len": 410,
        "diff_format": "@@ -41,12 +41,12 @@\n             token = 32 * \"0\"\n-        if token is not None:\n-            self.token = bytes.fromhex(token)\n+        self.token = bytes.fromhex(token)\n         self.debug = debug\n         self.lazy_discover = lazy_discover\n-\n         self._timeout = timeout\n+        self.__id = start_id\n+\n         self._discovered = False\n-        self._device_ts = None  # type: datetime.datetime\n-        self.__id = start_id\n-        self._device_id = None\n+        # these come from the device, but we initialize them here to make mypy happy\n+        self._device_ts: datetime = datetime.utcnow()\n+        self._device_id = bytes()\n \n",
        "source_code_with_indent": "            <IND>token = 32 * \"0\"\n        <DED>if token is not None:\n            <IND>self.token = bytes.fromhex(token)\n        <DED>self.debug = debug\n        self.lazy_discover = lazy_discover\n\n        self._timeout = timeout\n        self._discovered = False\n        self._device_ts = None  # type: datetime.datetime\n        self.__id = start_id\n        self._device_id = None\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <IND>token = 32 * \"0\"\n        <DED>self.token = bytes.fromhex(token)\n        self.debug = debug\n        self.lazy_discover = lazy_discover\n        self._timeout = timeout\n        self.__id = start_id\n\n        self._discovered = False\n        # these come from the device, but we initialize them here to make mypy happy\n        self._device_ts: datetime = datetime.utcnow()\n        self._device_id = bytes()\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        send_ts = self._device_ts + datetime.timedelta(seconds=1)\n        header = {\n",
        "source_code_len": 86,
        "target_code": "\n        send_ts = self._device_ts + timedelta(seconds=1)\n        header = {\n",
        "target_code_len": 77,
        "diff_format": "@@ -164,3 +164,3 @@\n \n-        send_ts = self._device_ts + datetime.timedelta(seconds=1)\n+        send_ts = self._device_ts + timedelta(seconds=1)\n         header = {\n",
        "source_code_with_indent": "\n        send_ts = self._device_ts + datetime.timedelta(seconds=1)\n        header = {\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        send_ts = self._device_ts + timedelta(seconds=1)\n        header = {\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "rytilahti/python-miio",
    "commit": "6453bfee512150e3f062670e890533fcd67067ea",
    "filename": "miio/philips_moonlight.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/rytilahti-python-miio/miio/philips_moonlight.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "miio/philips_moonlight.py:85:30 Invalid type [31]: Expression `[int, int, int]` is not a valid type.",
    "message": " Expression `[int, int, int]` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 85,
    "warning_line": "    def wake_up_time(self) -> [int, int, int]:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from collections import defaultdict\nfrom typing import Any, Dict, Tuple\n\n",
        "source_code_len": 73,
        "target_code": "from collections import defaultdict\nfrom typing import Any, Dict, List, Tuple\n\n",
        "target_code_len": 79,
        "diff_format": "@@ -2,3 +2,3 @@\n from collections import defaultdict\n-from typing import Any, Dict, Tuple\n+from typing import Any, Dict, List, Tuple\n \n",
        "source_code_with_indent": "from collections import defaultdict\nfrom typing import Any, Dict, Tuple\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from collections import defaultdict\nfrom typing import Any, Dict, List, Tuple\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @property\n    def wake_up_time(self) -> [int, int, int]:\n        # Example: [weekdays?, hour, minute]\n",
        "source_code_len": 106,
        "target_code": "    @property\n    def wake_up_time(self) -> List[int]:\n        # Example: [weekdays?, hour, minute]\n",
        "target_code_len": 100,
        "diff_format": "@@ -84,3 +84,3 @@\n     @property\n-    def wake_up_time(self) -> [int, int, int]:\n+    def wake_up_time(self) -> List[int]:\n         # Example: [weekdays?, hour, minute]\n",
        "source_code_with_indent": "    <DED>@property\n    def wake_up_time(self) -> [int, int, int]:\n        # Example: [weekdays?, hour, minute]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@property\n    def wake_up_time(self) -> List[int]:\n        # Example: [weekdays?, hour, minute]\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "rytilahti/python-miio",
    "commit": "6453bfee512150e3f062670e890533fcd67067ea",
    "filename": "miio/pwzn_relay.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/rytilahti-python-miio/miio/pwzn_relay.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "miio/pwzn_relay.py:76:12 Incompatible return type [7]: Expected `int` but got implicit return value of `None`.",
    "message": " Expected `int` but got implicit return value of `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 76,
    "warning_line": "            return self.data[\"relay_status\"]",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from collections import defaultdict\nfrom typing import Any, Dict\n\n",
        "source_code_len": 66,
        "target_code": "from collections import defaultdict\nfrom typing import Any, Dict, Optional\n\n",
        "target_code_len": 76,
        "diff_format": "@@ -2,3 +2,3 @@\n from collections import defaultdict\n-from typing import Any, Dict\n+from typing import Any, Dict, Optional\n \n",
        "source_code_with_indent": "from collections import defaultdict\nfrom typing import Any, Dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from collections import defaultdict\nfrom typing import Any, Dict, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @property\n    def relay_state(self) -> int:\n        \"\"\"Current relay state.\"\"\"\n",
        "source_code_len": 83,
        "target_code": "    @property\n    def relay_state(self) -> Optional[int]:\n        \"\"\"Current relay state.\"\"\"\n",
        "target_code_len": 93,
        "diff_format": "@@ -72,3 +72,3 @@\n     @property\n-    def relay_state(self) -> int:\n+    def relay_state(self) -> Optional[int]:\n         \"\"\"Current relay state.\"\"\"\n",
        "source_code_with_indent": "    <DED>@property\n    def relay_state(self) -> int:\n        <IND>\"\"\"Current relay state.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@property\n    def relay_state(self) -> Optional[int]:\n        <IND>\"\"\"Current relay state.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "rytilahti/python-miio",
    "commit": "6453bfee512150e3f062670e890533fcd67067ea",
    "filename": "miio/pwzn_relay.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/rytilahti-python-miio/miio/pwzn_relay.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "miio/pwzn_relay.py:94:12 Incompatible return type [7]: Expected `int` but got implicit return value of `None`.",
    "message": " Expected `int` but got implicit return value of `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 94,
    "warning_line": "            return self.data[\"on_count\"]",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from collections import defaultdict\nfrom typing import Any, Dict\n\n",
        "source_code_len": 66,
        "target_code": "from collections import defaultdict\nfrom typing import Any, Dict, Optional\n\n",
        "target_code_len": 76,
        "diff_format": "@@ -2,3 +2,3 @@\n from collections import defaultdict\n-from typing import Any, Dict\n+from typing import Any, Dict, Optional\n \n",
        "source_code_with_indent": "from collections import defaultdict\nfrom typing import Any, Dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from collections import defaultdict\nfrom typing import Any, Dict, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @property\n    def on_count(self) -> int:\n        \"\"\"Number of on relay.\"\"\"\n",
        "source_code_len": 79,
        "target_code": "    @property\n    def on_count(self) -> Optional[int]:\n        \"\"\"Number of on relay.\"\"\"\n",
        "target_code_len": 89,
        "diff_format": "@@ -90,3 +91,3 @@\n     @property\n-    def on_count(self) -> int:\n+    def on_count(self) -> Optional[int]:\n         \"\"\"Number of on relay.\"\"\"\n",
        "source_code_with_indent": "    <DED>@property\n    def on_count(self) -> int:\n        <IND>\"\"\"Number of on relay.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@property\n    def on_count(self) -> Optional[int]:\n        <IND>\"\"\"Number of on relay.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "rytilahti/python-miio",
    "commit": "6453bfee512150e3f062670e890533fcd67067ea",
    "filename": "miio/vacuum.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/rytilahti-python-miio/miio/vacuum.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "miio/vacuum.py:716:12 Incompatible return type [7]: Expected `CarpetCleaningMode` but got `None`.",
    "message": " Expected `CarpetCleaningMode` but got `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 716,
    "warning_line": "            return None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @command()\n    def carpet_cleaning_mode(self) -> CarpetCleaningMode:\n        \"\"\"Get carpet cleaning mode/avoidance setting.\"\"\"\n",
        "source_code_len": 131,
        "target_code": "    @command()\n    def carpet_cleaning_mode(self) -> Optional[CarpetCleaningMode]:\n        \"\"\"Get carpet cleaning mode/avoidance setting.\"\"\"\n",
        "target_code_len": 141,
        "diff_format": "@@ -707,3 +707,3 @@\n     @command()\n-    def carpet_cleaning_mode(self) -> CarpetCleaningMode:\n+    def carpet_cleaning_mode(self) -> Optional[CarpetCleaningMode]:\n         \"\"\"Get carpet cleaning mode/avoidance setting.\"\"\"\n",
        "source_code_with_indent": "    <DED>@command()\n    def carpet_cleaning_mode(self) -> CarpetCleaningMode:\n        <IND>\"\"\"Get carpet cleaning mode/avoidance setting.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@command()\n    def carpet_cleaning_mode(self) -> Optional[CarpetCleaningMode]:\n        <IND>\"\"\"Get carpet cleaning mode/avoidance setting.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "rytilahti/python-miio",
    "commit": "6453bfee512150e3f062670e890533fcd67067ea",
    "filename": "miio/viomivacuum.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/rytilahti-python-miio/miio/viomivacuum.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "miio/viomivacuum.py:697:8 Incompatible return type [7]: Expected `ViomiPositionPoint` but got `None`.",
    "message": " Expected `ViomiPositionPoint` but got `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 697,
    "warning_line": "        return None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @command()\n    def get_current_position(self) -> ViomiPositionPoint:\n        \"\"\"Return the current position.\"\"\"\n",
        "source_code_len": 116,
        "target_code": "    @command()\n    def get_current_position(self) -> Optional[ViomiPositionPoint]:\n        \"\"\"Return the current position.\"\"\"\n",
        "target_code_len": 126,
        "diff_format": "@@ -691,3 +686,3 @@\n     @command()\n-    def get_current_position(self) -> ViomiPositionPoint:\n+    def get_current_position(self) -> Optional[ViomiPositionPoint]:\n         \"\"\"Return the current position.\"\"\"\n",
        "source_code_with_indent": "    <DED>@command()\n    def get_current_position(self) -> ViomiPositionPoint:\n        <IND>\"\"\"Return the current position.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@command()\n    def get_current_position(self) -> Optional[ViomiPositionPoint]:\n        <IND>\"\"\"Return the current position.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "rytilahti/python-miio",
    "commit": "6453bfee512150e3f062670e890533fcd67067ea",
    "filename": "miio/viomivacuum.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/rytilahti-python-miio/miio/viomivacuum.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "miio/viomivacuum.py:843:12 Incompatible variable type [9]: map_id is declared to have type `int` but is used as type `None`.",
    "message": " map_id is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 843,
    "warning_line": "            map_id = None",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            return self._cache[\"rooms\"]\n        if map_name:\n            map_id = None\n            maps = self.get_maps()\n",
        "source_code_len": 122,
        "target_code": "            return self._cache[\"rooms\"]\n\n        # TODO: map_name and map_id are just dead code here?\n        if map_name:\n            maps = self.get_maps()\n",
        "target_code_len": 158,
        "diff_format": "@@ -841,4 +836,5 @@\n             return self._cache[\"rooms\"]\n+\n+        # TODO: map_name and map_id are just dead code here?\n         if map_name:\n-            map_id = None\n             maps = self.get_maps()\n",
        "source_code_with_indent": "            <IND>return self._cache[\"rooms\"]\n        <DED>if map_name:\n            <IND>map_id = None\n            maps = self.get_maps()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <IND>return self._cache[\"rooms\"]\n\n        # TODO: map_name and map_id are just dead code here?\n        <DED>if map_name:\n            <IND>maps = self.get_maps()\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]