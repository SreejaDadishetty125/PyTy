[
  {
    "project": "awslabs/aws-lambda-powertools-python",
    "commit": "a99e6472c2ca342cb3d43f8767a58fa218d3b67d",
    "filename": "python/aws_lambda_powertools/metrics/base.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/awslabs-aws-lambda-powertools-python/python/aws_lambda_powertools/metrics/base.py",
    "file_hunks_size": 6,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/aws_lambda_powertools/metrics/base.py:170:78 Incompatible parameter type [6]: Expected `Union[int, slice]` for 1st positional only parameter to call `str.__getitem__` but got `str`.",
    "message": " Expected `Union[int, slice]` for 1st positional only parameter to call `str.__getitem__` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 170,
    "warning_line": "                metric_names_unit.append({\"Name\": metric_name, \"Unit\": metric[\"Unit\"]})"
  },
  {
    "project": "awslabs/aws-lambda-powertools-python",
    "commit": "a99e6472c2ca342cb3d43f8767a58fa218d3b67d",
    "filename": "python/aws_lambda_powertools/metrics/base.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/awslabs-aws-lambda-powertools-python/python/aws_lambda_powertools/metrics/base.py",
    "file_hunks_size": 6,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/aws_lambda_powertools/metrics/base.py:171:55 Incompatible parameter type [6]: Expected `Union[int, slice]` for 1st positional only parameter to call `str.__getitem__` but got `str`.",
    "message": " Expected `Union[int, slice]` for 1st positional only parameter to call `str.__getitem__` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 171,
    "warning_line": "                metric_set.update({metric_name: metric[\"Value\"]})"
  },
  {
    "project": "awslabs/aws-lambda-powertools-python",
    "commit": "a99e6472c2ca342cb3d43f8767a58fa218d3b67d",
    "filename": "python/aws_lambda_powertools/tracing/tracer.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/awslabs-aws-lambda-powertools-python/python/aws_lambda_powertools/tracing/tracer.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/aws_lambda_powertools/tracing/tracer.py:390:12 Incompatible return type [7]: Expected `bool` but got `str`.",
    "message": " Expected `bool` but got `str`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 390,
    "warning_line": "            return is_lambda_emulator",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        logger.debug(\"Verifying whether Tracing has been disabled\")\n        is_lambda_emulator = os.getenv(\"AWS_SAM_LOCAL\")\n        env_option = str(os.getenv(\"POWERTOOLS_TRACE_DISABLED\", \"false\"))\n",
        "source_code_len": 198,
        "target_code": "        logger.debug(\"Verifying whether Tracing has been disabled\")\n        is_lambda_sam_cli = os.getenv(\"AWS_SAM_LOCAL\")\n        env_option = str(os.getenv(\"POWERTOOLS_TRACE_DISABLED\", \"false\"))\n",
        "target_code_len": 197,
        "diff_format": "@@ -379,3 +371,3 @@\n         logger.debug(\"Verifying whether Tracing has been disabled\")\n-        is_lambda_emulator = os.getenv(\"AWS_SAM_LOCAL\")\n+        is_lambda_sam_cli = os.getenv(\"AWS_SAM_LOCAL\")\n         env_option = str(os.getenv(\"POWERTOOLS_TRACE_DISABLED\", \"false\"))\n",
        "source_code_with_indent": "        logger.debug(\"Verifying whether Tracing has been disabled\")\n        is_lambda_emulator = os.getenv(\"AWS_SAM_LOCAL\")\n        env_option = str(os.getenv(\"POWERTOOLS_TRACE_DISABLED\", \"false\"))\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        logger.debug(\"Verifying whether Tracing has been disabled\")\n        is_lambda_sam_cli = os.getenv(\"AWS_SAM_LOCAL\")\n        env_option = str(os.getenv(\"POWERTOOLS_TRACE_DISABLED\", \"false\"))\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        if is_lambda_emulator:\n            logger.debug(\"Running under SAM CLI env; Tracing has been disabled\")\n            return is_lambda_emulator\n\n",
        "source_code_len": 152,
        "target_code": "\n        if is_lambda_sam_cli:\n            logger.debug(\"Running under SAM CLI env or not in Lambda env; disabling Tracing\")\n            return True\n\n",
        "target_code_len": 150,
        "diff_format": "@@ -387,5 +379,5 @@\n \n-        if is_lambda_emulator:\n-            logger.debug(\"Running under SAM CLI env; Tracing has been disabled\")\n-            return is_lambda_emulator\n+        if is_lambda_sam_cli:\n+            logger.debug(\"Running under SAM CLI env or not in Lambda env; disabling Tracing\")\n+            return True\n \n",
        "source_code_with_indent": "\n        <DED>if is_lambda_emulator:\n            <IND>logger.debug(\"Running under SAM CLI env; Tracing has been disabled\")\n            return is_lambda_emulator\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        <DED>if is_lambda_sam_cli:\n            <IND>logger.debug(\"Running under SAM CLI env or not in Lambda env; disabling Tracing\")\n            return True\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]