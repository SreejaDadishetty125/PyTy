[
  {
    "project": "konradhalas/dacite",
    "commit": "76286b11cceb0088b9a9aefea37a09f1963b7708",
    "filename": "dacite/types.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/konradhalas-dacite/dacite/types.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "dacite/types.py:33:29 Incompatible parameter type [6]: Expected `Type[typing.Any]` for 1st positional only parameter to call `extract_generic` but got `Optional[Variable[T]]`.",
    "message": " Expected `Type[typing.Any]` for 1st positional only parameter to call `extract_generic` but got `Optional[Variable[T]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 33,
    "warning_line": "    for t in extract_generic(optional):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import Type, Any, Mapping, Optional, Union, Collection, TypeVar\n\nT = TypeVar(\"T\")\n\n",
        "source_code_len": 95,
        "target_code": "from typing import Type, Any, Optional, Union, Collection, TypeVar, cast\n\nT = TypeVar(\"T\", bound=Any)\n\n",
        "target_code_len": 103,
        "diff_format": "@@ -1,4 +1,4 @@\n-from typing import Type, Any, Mapping, Optional, Union, Collection, TypeVar\n+from typing import Type, Any, Optional, Union, Collection, TypeVar, cast\n \n-T = TypeVar(\"T\")\n+T = TypeVar(\"T\", bound=Any)\n \n",
        "source_code_with_indent": "from typing import Type, Any, Mapping, Optional, Union, Collection, TypeVar\n\nT = TypeVar(\"T\")\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Type, Any, Optional, Union, Collection, TypeVar, cast\n\nT = TypeVar(\"T\", bound=Any)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        collection_cls = extract_origin_collection(t)\n        if issubclass(collection_cls, Mapping):\n            key_cls, item_cls = extract_generic(t)\n            return collection_cls({key_cls(key): item_cls(item) for key, item in value.items()})\n        else:\n",
        "source_code_len": 264,
        "target_code": "        collection_cls = extract_origin_collection(t)\n        if issubclass(collection_cls, dict):\n            key_cls, item_cls = extract_generic(t)\n            return cast(T, collection_cls({key_cls(key): item_cls(item) for key, item in value.items()}))\n        else:\n",
        "target_code_len": 270,
        "diff_format": "@@ -10,5 +10,5 @@\n         collection_cls = extract_origin_collection(t)\n-        if issubclass(collection_cls, Mapping):\n+        if issubclass(collection_cls, dict):\n             key_cls, item_cls = extract_generic(t)\n-            return collection_cls({key_cls(key): item_cls(item) for key, item in value.items()})\n+            return cast(T, collection_cls({key_cls(key): item_cls(item) for key, item in value.items()}))\n         else:\n",
        "source_code_with_indent": "        <IND>collection_cls = extract_origin_collection(t)\n        if issubclass(collection_cls, Mapping):\n            <IND>key_cls, item_cls = extract_generic(t)\n            return collection_cls({key_cls(key): item_cls(item) for key, item in value.items()})\n        <DED>else:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>collection_cls = extract_origin_collection(t)\n        if issubclass(collection_cls, dict):\n            <IND>key_cls, item_cls = extract_generic(t)\n            return cast(T, collection_cls({key_cls(key): item_cls(item) for key, item in value.items()}))\n        <DED>else:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef extract_optional(optional: Optional[T]) -> T:\n    for t in extract_generic(optional):\n        if t is not None:\n            return t\n\n",
        "source_code_len": 139,
        "target_code": "\ndef extract_optional(optional: Type[Optional[T]]) -> T:\n    for t in extract_generic(optional):\n        if not isinstance(None, t):\n            return t\n    raise ValueError(\"can not find not-none value\")\n\n",
        "target_code_len": 207,
        "diff_format": "@@ -31,6 +31,7 @@\n \n-def extract_optional(optional: Optional[T]) -> T:\n+def extract_optional(optional: Type[Optional[T]]) -> T:\n     for t in extract_generic(optional):\n-        if t is not None:\n+        if not isinstance(None, t):\n             return t\n+    raise ValueError(\"can not find not-none value\")\n \n",
        "source_code_with_indent": "\n<DED>def extract_optional(optional: Optional[T]) -> T:\n    <IND>for t in extract_generic(optional):\n        <IND>if t is not None:\n            <IND>return t\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def extract_optional(optional: Type[Optional[T]]) -> T:\n    <IND>for t in extract_generic(optional):\n        <IND>if not isinstance(None, t):\n            <IND>return t\n    <DED><DED>raise ValueError(\"can not find not-none value\")\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "konradhalas/dacite",
    "commit": "76286b11cceb0088b9a9aefea37a09f1963b7708",
    "filename": "dacite/types.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/konradhalas-dacite/dacite/types.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "dacite/types.py:35:12 Incompatible return type [7]: Expected `Variable[T]` but got implicit return value of `None`.",
    "message": " Expected `Variable[T]` but got implicit return value of `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 35,
    "warning_line": "            return t",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import Type, Any, Mapping, Optional, Union, Collection, TypeVar\n\nT = TypeVar(\"T\")\n\n",
        "source_code_len": 95,
        "target_code": "from typing import Type, Any, Optional, Union, Collection, TypeVar, cast\n\nT = TypeVar(\"T\", bound=Any)\n\n",
        "target_code_len": 103,
        "diff_format": "@@ -1,4 +1,4 @@\n-from typing import Type, Any, Mapping, Optional, Union, Collection, TypeVar\n+from typing import Type, Any, Optional, Union, Collection, TypeVar, cast\n \n-T = TypeVar(\"T\")\n+T = TypeVar(\"T\", bound=Any)\n \n",
        "source_code_with_indent": "from typing import Type, Any, Mapping, Optional, Union, Collection, TypeVar\n\nT = TypeVar(\"T\")\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Type, Any, Optional, Union, Collection, TypeVar, cast\n\nT = TypeVar(\"T\", bound=Any)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        collection_cls = extract_origin_collection(t)\n        if issubclass(collection_cls, Mapping):\n            key_cls, item_cls = extract_generic(t)\n            return collection_cls({key_cls(key): item_cls(item) for key, item in value.items()})\n        else:\n",
        "source_code_len": 264,
        "target_code": "        collection_cls = extract_origin_collection(t)\n        if issubclass(collection_cls, dict):\n            key_cls, item_cls = extract_generic(t)\n            return cast(T, collection_cls({key_cls(key): item_cls(item) for key, item in value.items()}))\n        else:\n",
        "target_code_len": 270,
        "diff_format": "@@ -10,5 +10,5 @@\n         collection_cls = extract_origin_collection(t)\n-        if issubclass(collection_cls, Mapping):\n+        if issubclass(collection_cls, dict):\n             key_cls, item_cls = extract_generic(t)\n-            return collection_cls({key_cls(key): item_cls(item) for key, item in value.items()})\n+            return cast(T, collection_cls({key_cls(key): item_cls(item) for key, item in value.items()}))\n         else:\n",
        "source_code_with_indent": "        <IND>collection_cls = extract_origin_collection(t)\n        if issubclass(collection_cls, Mapping):\n            <IND>key_cls, item_cls = extract_generic(t)\n            return collection_cls({key_cls(key): item_cls(item) for key, item in value.items()})\n        <DED>else:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>collection_cls = extract_origin_collection(t)\n        if issubclass(collection_cls, dict):\n            <IND>key_cls, item_cls = extract_generic(t)\n            return cast(T, collection_cls({key_cls(key): item_cls(item) for key, item in value.items()}))\n        <DED>else:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef extract_optional(optional: Optional[T]) -> T:\n    for t in extract_generic(optional):\n        if t is not None:\n            return t\n\n",
        "source_code_len": 139,
        "target_code": "\ndef extract_optional(optional: Type[Optional[T]]) -> T:\n    for t in extract_generic(optional):\n        if not isinstance(None, t):\n            return t\n    raise ValueError(\"can not find not-none value\")\n\n",
        "target_code_len": 207,
        "diff_format": "@@ -31,6 +31,7 @@\n \n-def extract_optional(optional: Optional[T]) -> T:\n+def extract_optional(optional: Type[Optional[T]]) -> T:\n     for t in extract_generic(optional):\n-        if t is not None:\n+        if not isinstance(None, t):\n             return t\n+    raise ValueError(\"can not find not-none value\")\n \n",
        "source_code_with_indent": "\n<DED>def extract_optional(optional: Optional[T]) -> T:\n    <IND>for t in extract_generic(optional):\n        <IND>if t is not None:\n            <IND>return t\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def extract_optional(optional: Type[Optional[T]]) -> T:\n    <IND>for t in extract_generic(optional):\n        <IND>if not isinstance(None, t):\n            <IND>return t\n    <DED><DED>raise ValueError(\"can not find not-none value\")\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "konradhalas/dacite",
    "commit": "76286b11cceb0088b9a9aefea37a09f1963b7708",
    "filename": "dacite/types.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/konradhalas-dacite/dacite/types.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "dacite/types.py:71:4 Incompatible return type [7]: Expected `bool` but got `Union[Type[typing.Any], bool]`.",
    "message": " Expected `bool` but got `Union[Type[typing.Any], bool]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 71,
    "warning_line": "    return origin and issubclass(origin, Collection)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    origin = extract_origin_collection(t)\n    return origin and issubclass(origin, Collection)\n\n",
        "source_code_len": 96,
        "target_code": "    origin = extract_origin_collection(t)\n    return bool(origin and issubclass(origin, Collection))\n\n",
        "target_code_len": 102,
        "diff_format": "@@ -70,3 +71,3 @@\n     origin = extract_origin_collection(t)\n-    return origin and issubclass(origin, Collection)\n+    return bool(origin and issubclass(origin, Collection))\n \n",
        "source_code_with_indent": "    <DED>origin = extract_origin_collection(t)\n    return origin and issubclass(origin, Collection)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>origin = extract_origin_collection(t)\n    return bool(origin and issubclass(origin, Collection))\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]