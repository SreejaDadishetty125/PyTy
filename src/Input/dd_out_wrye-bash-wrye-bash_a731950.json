[
  {
    "project": "wrye-bash/wrye-bash",
    "commit": "a731950061576e2e787017a02ba6f2582703fd06",
    "filename": "Mopy/bash/patcher/patchers/multitweak_names.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/wrye-bash-wrye-bash/Mopy/bash/patcher/patchers/multitweak_names.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "Mopy/bash/patcher/patchers/multitweak_names.py:942:73 Unsupported operand [58]: `+` is not supported for operand types `typing.List[NamesTweak_Body]` and `typing.List[TextReplacer]`.",
    "message": " `+` is not supported for operand types `typing.List[NamesTweak_Body]` and `typing.List[TextReplacer]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 942,
    "warning_line": "        [NamesTweak_Body(*x) for x in _ANamesTweaker._namesTweaksBody] + [",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "class NamesTweaker(_ANamesTweaker,MultiTweaker):\n    tweaks = sorted(\n        [NamesTweak_Body(*x) for x in _ANamesTweaker._namesTweaksBody] + [\n            TextReplacer(*x) for x in _ANamesTweaker._txtReplacer] + [\n            NamesTweak_Potions(), NamesTweak_Scrolls(), NamesTweak_Spells(),\n            NamesTweak_Weapons()], key=lambda a: a.tweak_name.lower())\n    tweaks.insert(0, NamesTweak_BodyTags())\n\n    def getWriteClasses(self):\n        \"\"\"Returns load factory classes needed for writing.\"\"\"\n        if not self.isActive: return tuple()\n        classTuples = [tweak.getWriteClasses() for tweak in self.enabledTweaks]\n        return sum(classTuples,tuple())\n\n    def scanModFile(self,modFile,progress):\n        if not self.isActive: return\n        for tweak in self.enabledTweaks:\n            tweak.scanModFile(modFile,progress,self.patchFile)\n\nclass CBash_NamesTweaker(_ANamesTweaker,CBash_MultiTweaker):\n    tweaks = sorted(\n        [CBash_NamesTweak_Body(*x) for x in _ANamesTweaker._namesTweaksBody] +\n        [CBash_TextReplacer(*x) for x in _ANamesTweaker._txtReplacer] + [\n            CBash_NamesTweak_Potions(), CBash_NamesTweak_Scrolls(),\n            CBash_NamesTweak_Spells(), CBash_NamesTweak_Weapons()],\n        key=lambda a: a.tweak_name.lower())\n    tweaks.insert(0,CBash_NamesTweak_BodyTags())\n\n    #--Config Phase -----------------------------------------------------------\n    def initPatchFile(self, patchFile):\n        self.patchFile = patchFile\n        for tweak in self.tweaks[1:]:\n            tweak.patchFile = patchFile\n        bodyTagPatcher = self.tweaks[0]\n        patchFile.bodyTags = \\\n            bodyTagPatcher.choiceValues[bodyTagPatcher.chosen][0]\n        patchFile.indexMGEFs = True\n\n",
        "source_code_len": 1727,
        "target_code": "class NamesTweaker(_ANamesTweaker,MultiTweaker):\n\n    @classmethod\n    def tweak_instances(cls):\n        instances = sorted(\n            [NamesTweak_Body(*x) for x in cls._namesTweaksBody] + [\n                TextReplacer(*x) for x in cls._txtReplacer] + [\n                NamesTweak_Potions(), NamesTweak_Scrolls(),\n                NamesTweak_Spells(), NamesTweak_Weapons()],\n            key=lambda a: a.tweak_name.lower())\n        instances.insert(0, NamesTweak_BodyTags())\n        return instances\n\nclass CBash_NamesTweaker(_ANamesTweaker,CBash_MultiTweaker):\n\n    @classmethod\n    def tweak_instances(cls):\n        instances = sorted(\n            [CBash_NamesTweak_Body(*x) for x in cls._namesTweaksBody] + [\n                CBash_TextReplacer(*x) for x in cls._txtReplacer] + [\n                CBash_NamesTweak_Potions(), CBash_NamesTweak_Scrolls(),\n                CBash_NamesTweak_Spells(), CBash_NamesTweak_Weapons()],\n            key=lambda a: a.tweak_name.lower())\n        instances.insert(0,CBash_NamesTweak_BodyTags())\n        return instances\n\n    def __init__(self, p_name, p_file, enabled_tweaks):\n        super(CBash_NamesTweaker, self).__init__(p_name, p_file,\n                                                 enabled_tweaks)\n        body_tags_tweak = enabled_tweaks[0] # FIXME test - was always enabled?\n        if isinstance(body_tags_tweak, CBash_NamesTweak_BodyTags):\n            p_file.bodyTags = \\\n                body_tags_tweak.choiceValues[body_tags_tweak.chosen][0]\n        p_file.indexMGEFs = True # FIXME what is this? needed if body tags are set?\n\n",
        "target_code_len": 1578,
        "diff_format": "@@ -940,38 +920,35 @@\n class NamesTweaker(_ANamesTweaker,MultiTweaker):\n-    tweaks = sorted(\n-        [NamesTweak_Body(*x) for x in _ANamesTweaker._namesTweaksBody] + [\n-            TextReplacer(*x) for x in _ANamesTweaker._txtReplacer] + [\n-            NamesTweak_Potions(), NamesTweak_Scrolls(), NamesTweak_Spells(),\n-            NamesTweak_Weapons()], key=lambda a: a.tweak_name.lower())\n-    tweaks.insert(0, NamesTweak_BodyTags())\n-\n-    def getWriteClasses(self):\n-        \"\"\"Returns load factory classes needed for writing.\"\"\"\n-        if not self.isActive: return tuple()\n-        classTuples = [tweak.getWriteClasses() for tweak in self.enabledTweaks]\n-        return sum(classTuples,tuple())\n-\n-    def scanModFile(self,modFile,progress):\n-        if not self.isActive: return\n-        for tweak in self.enabledTweaks:\n-            tweak.scanModFile(modFile,progress,self.patchFile)\n+\n+    @classmethod\n+    def tweak_instances(cls):\n+        instances = sorted(\n+            [NamesTweak_Body(*x) for x in cls._namesTweaksBody] + [\n+                TextReplacer(*x) for x in cls._txtReplacer] + [\n+                NamesTweak_Potions(), NamesTweak_Scrolls(),\n+                NamesTweak_Spells(), NamesTweak_Weapons()],\n+            key=lambda a: a.tweak_name.lower())\n+        instances.insert(0, NamesTweak_BodyTags())\n+        return instances\n \n class CBash_NamesTweaker(_ANamesTweaker,CBash_MultiTweaker):\n-    tweaks = sorted(\n-        [CBash_NamesTweak_Body(*x) for x in _ANamesTweaker._namesTweaksBody] +\n-        [CBash_TextReplacer(*x) for x in _ANamesTweaker._txtReplacer] + [\n-            CBash_NamesTweak_Potions(), CBash_NamesTweak_Scrolls(),\n-            CBash_NamesTweak_Spells(), CBash_NamesTweak_Weapons()],\n-        key=lambda a: a.tweak_name.lower())\n-    tweaks.insert(0,CBash_NamesTweak_BodyTags())\n-\n-    #--Config Phase -----------------------------------------------------------\n-    def initPatchFile(self, patchFile):\n-        self.patchFile = patchFile\n-        for tweak in self.tweaks[1:]:\n-            tweak.patchFile = patchFile\n-        bodyTagPatcher = self.tweaks[0]\n-        patchFile.bodyTags = \\\n-            bodyTagPatcher.choiceValues[bodyTagPatcher.chosen][0]\n-        patchFile.indexMGEFs = True\n+\n+    @classmethod\n+    def tweak_instances(cls):\n+        instances = sorted(\n+            [CBash_NamesTweak_Body(*x) for x in cls._namesTweaksBody] + [\n+                CBash_TextReplacer(*x) for x in cls._txtReplacer] + [\n+                CBash_NamesTweak_Potions(), CBash_NamesTweak_Scrolls(),\n+                CBash_NamesTweak_Spells(), CBash_NamesTweak_Weapons()],\n+            key=lambda a: a.tweak_name.lower())\n+        instances.insert(0,CBash_NamesTweak_BodyTags())\n+        return instances\n+\n+    def __init__(self, p_name, p_file, enabled_tweaks):\n+        super(CBash_NamesTweaker, self).__init__(p_name, p_file,\n+                                                 enabled_tweaks)\n+        body_tags_tweak = enabled_tweaks[0] # FIXME test - was always enabled?\n+        if isinstance(body_tags_tweak, CBash_NamesTweak_BodyTags):\n+            p_file.bodyTags = \\\n+                body_tags_tweak.choiceValues[body_tags_tweak.chosen][0]\n+        p_file.indexMGEFs = True # FIXME what is this? needed if body tags are set?\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "<DED>class NamesTweaker(_ANamesTweaker,MultiTweaker):\n    <IND>tweaks = sorted(\n        [NamesTweak_Body(*x) for x in _ANamesTweaker._namesTweaksBody] + [\n            TextReplacer(*x) for x in _ANamesTweaker._txtReplacer] + [\n            NamesTweak_Potions(), NamesTweak_Scrolls(), NamesTweak_Spells(),\n            NamesTweak_Weapons()], key=lambda a: a.tweak_name.lower())\n    tweaks.insert(0, NamesTweak_BodyTags())\n\n    def getWriteClasses(self):\n        <IND>\"\"\"Returns load factory classes needed for writing.\"\"\"\n        if not self.isActive: return tuple()\n        classTuples = [tweak.getWriteClasses() for tweak in self.enabledTweaks]\n        return sum(classTuples,tuple())\n\n    <DED>def scanModFile(self,modFile,progress):\n        <IND>if not self.isActive: return\n        for tweak in self.enabledTweaks:\n            <IND>tweak.scanModFile(modFile,progress,self.patchFile)\n\n<DED><DED><DED>class CBash_NamesTweaker(_ANamesTweaker,CBash_MultiTweaker):\n    <IND>tweaks = sorted(\n        [CBash_NamesTweak_Body(*x) for x in _ANamesTweaker._namesTweaksBody] +\n        [CBash_TextReplacer(*x) for x in _ANamesTweaker._txtReplacer] + [\n            CBash_NamesTweak_Potions(), CBash_NamesTweak_Scrolls(),\n            CBash_NamesTweak_Spells(), CBash_NamesTweak_Weapons()],\n        key=lambda a: a.tweak_name.lower())\n    tweaks.insert(0,CBash_NamesTweak_BodyTags())\n\n    #--Config Phase -----------------------------------------------------------\n    def initPatchFile(self, patchFile):\n        <IND>self.patchFile = patchFile\n        for tweak in self.tweaks[1:]:\n            <IND>tweak.patchFile = patchFile\n        <DED>bodyTagPatcher = self.tweaks[0]\n        patchFile.bodyTags =            bodyTagPatcher.choiceValues[bodyTagPatcher.chosen][0]\n        patchFile.indexMGEFs = True\n\n",
        "target_code_with_indent": "<DED>class NamesTweaker(_ANamesTweaker,MultiTweaker):\n\n    <IND>@classmethod\n    def tweak_instances(cls):\n        <IND>instances = sorted(\n            [NamesTweak_Body(*x) for x in cls._namesTweaksBody] + [\n                TextReplacer(*x) for x in cls._txtReplacer] + [\n                NamesTweak_Potions(), NamesTweak_Scrolls(),\n                NamesTweak_Spells(), NamesTweak_Weapons()],\n            key=lambda a: a.tweak_name.lower())\n        instances.insert(0, NamesTweak_BodyTags())\n        return instances\n\n<DED><DED>class CBash_NamesTweaker(_ANamesTweaker,CBash_MultiTweaker):\n\n    <IND>@classmethod\n    def tweak_instances(cls):\n        <IND>instances = sorted(\n            [CBash_NamesTweak_Body(*x) for x in cls._namesTweaksBody] + [\n                CBash_TextReplacer(*x) for x in cls._txtReplacer] + [\n                CBash_NamesTweak_Potions(), CBash_NamesTweak_Scrolls(),\n                CBash_NamesTweak_Spells(), CBash_NamesTweak_Weapons()],\n            key=lambda a: a.tweak_name.lower())\n        instances.insert(0,CBash_NamesTweak_BodyTags())\n        return instances\n\n    <DED>def __init__(self, p_name, p_file, enabled_tweaks):\n        <IND>super(CBash_NamesTweaker, self).__init__(p_name, p_file,\n                                                 enabled_tweaks)\n        body_tags_tweak = enabled_tweaks[0] # FIXME test - was always enabled?\n        if isinstance(body_tags_tweak, CBash_NamesTweak_BodyTags):\n            <IND>p_file.bodyTags =                body_tags_tweak.choiceValues[body_tags_tweak.chosen][0]\n        <DED>p_file.indexMGEFs = True # FIXME what is this? needed if body tags are set?\n\n"
      }
    ]
  },
  {
    "project": "wrye-bash/wrye-bash",
    "commit": "a731950061576e2e787017a02ba6f2582703fd06",
    "filename": "Mopy/bash/patcher/patchers/multitweak_names.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/wrye-bash-wrye-bash/Mopy/bash/patcher/patchers/multitweak_names.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "Mopy/bash/patcher/patchers/multitweak_names.py:943:69 Unsupported operand [58]: `+` is not supported for operand types `typing.List[NamesTweak_Body]` and `typing.List[typing.Union[NamesTweak_Potions, NamesTweak_Scrolls, NamesTweak_Spells, NamesTweak_Weapons]]`.",
    "message": " `+` is not supported for operand types `typing.List[NamesTweak_Body]` and `typing.List[typing.Union[NamesTweak_Potions, NamesTweak_Scrolls, NamesTweak_Spells, NamesTweak_Weapons]]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 943,
    "warning_line": "            TextReplacer(*x) for x in _ANamesTweaker._txtReplacer] + [",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "class NamesTweaker(_ANamesTweaker,MultiTweaker):\n    tweaks = sorted(\n        [NamesTweak_Body(*x) for x in _ANamesTweaker._namesTweaksBody] + [\n            TextReplacer(*x) for x in _ANamesTweaker._txtReplacer] + [\n            NamesTweak_Potions(), NamesTweak_Scrolls(), NamesTweak_Spells(),\n            NamesTweak_Weapons()], key=lambda a: a.tweak_name.lower())\n    tweaks.insert(0, NamesTweak_BodyTags())\n\n    def getWriteClasses(self):\n        \"\"\"Returns load factory classes needed for writing.\"\"\"\n        if not self.isActive: return tuple()\n        classTuples = [tweak.getWriteClasses() for tweak in self.enabledTweaks]\n        return sum(classTuples,tuple())\n\n    def scanModFile(self,modFile,progress):\n        if not self.isActive: return\n        for tweak in self.enabledTweaks:\n            tweak.scanModFile(modFile,progress,self.patchFile)\n\nclass CBash_NamesTweaker(_ANamesTweaker,CBash_MultiTweaker):\n    tweaks = sorted(\n        [CBash_NamesTweak_Body(*x) for x in _ANamesTweaker._namesTweaksBody] +\n        [CBash_TextReplacer(*x) for x in _ANamesTweaker._txtReplacer] + [\n            CBash_NamesTweak_Potions(), CBash_NamesTweak_Scrolls(),\n            CBash_NamesTweak_Spells(), CBash_NamesTweak_Weapons()],\n        key=lambda a: a.tweak_name.lower())\n    tweaks.insert(0,CBash_NamesTweak_BodyTags())\n\n    #--Config Phase -----------------------------------------------------------\n    def initPatchFile(self, patchFile):\n        self.patchFile = patchFile\n        for tweak in self.tweaks[1:]:\n            tweak.patchFile = patchFile\n        bodyTagPatcher = self.tweaks[0]\n        patchFile.bodyTags = \\\n            bodyTagPatcher.choiceValues[bodyTagPatcher.chosen][0]\n        patchFile.indexMGEFs = True\n\n",
        "source_code_len": 1727,
        "target_code": "class NamesTweaker(_ANamesTweaker,MultiTweaker):\n\n    @classmethod\n    def tweak_instances(cls):\n        instances = sorted(\n            [NamesTweak_Body(*x) for x in cls._namesTweaksBody] + [\n                TextReplacer(*x) for x in cls._txtReplacer] + [\n                NamesTweak_Potions(), NamesTweak_Scrolls(),\n                NamesTweak_Spells(), NamesTweak_Weapons()],\n            key=lambda a: a.tweak_name.lower())\n        instances.insert(0, NamesTweak_BodyTags())\n        return instances\n\nclass CBash_NamesTweaker(_ANamesTweaker,CBash_MultiTweaker):\n\n    @classmethod\n    def tweak_instances(cls):\n        instances = sorted(\n            [CBash_NamesTweak_Body(*x) for x in cls._namesTweaksBody] + [\n                CBash_TextReplacer(*x) for x in cls._txtReplacer] + [\n                CBash_NamesTweak_Potions(), CBash_NamesTweak_Scrolls(),\n                CBash_NamesTweak_Spells(), CBash_NamesTweak_Weapons()],\n            key=lambda a: a.tweak_name.lower())\n        instances.insert(0,CBash_NamesTweak_BodyTags())\n        return instances\n\n    def __init__(self, p_name, p_file, enabled_tweaks):\n        super(CBash_NamesTweaker, self).__init__(p_name, p_file,\n                                                 enabled_tweaks)\n        body_tags_tweak = enabled_tweaks[0] # FIXME test - was always enabled?\n        if isinstance(body_tags_tweak, CBash_NamesTweak_BodyTags):\n            p_file.bodyTags = \\\n                body_tags_tweak.choiceValues[body_tags_tweak.chosen][0]\n        p_file.indexMGEFs = True # FIXME what is this? needed if body tags are set?\n\n",
        "target_code_len": 1578,
        "diff_format": "@@ -940,38 +920,35 @@\n class NamesTweaker(_ANamesTweaker,MultiTweaker):\n-    tweaks = sorted(\n-        [NamesTweak_Body(*x) for x in _ANamesTweaker._namesTweaksBody] + [\n-            TextReplacer(*x) for x in _ANamesTweaker._txtReplacer] + [\n-            NamesTweak_Potions(), NamesTweak_Scrolls(), NamesTweak_Spells(),\n-            NamesTweak_Weapons()], key=lambda a: a.tweak_name.lower())\n-    tweaks.insert(0, NamesTweak_BodyTags())\n-\n-    def getWriteClasses(self):\n-        \"\"\"Returns load factory classes needed for writing.\"\"\"\n-        if not self.isActive: return tuple()\n-        classTuples = [tweak.getWriteClasses() for tweak in self.enabledTweaks]\n-        return sum(classTuples,tuple())\n-\n-    def scanModFile(self,modFile,progress):\n-        if not self.isActive: return\n-        for tweak in self.enabledTweaks:\n-            tweak.scanModFile(modFile,progress,self.patchFile)\n+\n+    @classmethod\n+    def tweak_instances(cls):\n+        instances = sorted(\n+            [NamesTweak_Body(*x) for x in cls._namesTweaksBody] + [\n+                TextReplacer(*x) for x in cls._txtReplacer] + [\n+                NamesTweak_Potions(), NamesTweak_Scrolls(),\n+                NamesTweak_Spells(), NamesTweak_Weapons()],\n+            key=lambda a: a.tweak_name.lower())\n+        instances.insert(0, NamesTweak_BodyTags())\n+        return instances\n \n class CBash_NamesTweaker(_ANamesTweaker,CBash_MultiTweaker):\n-    tweaks = sorted(\n-        [CBash_NamesTweak_Body(*x) for x in _ANamesTweaker._namesTweaksBody] +\n-        [CBash_TextReplacer(*x) for x in _ANamesTweaker._txtReplacer] + [\n-            CBash_NamesTweak_Potions(), CBash_NamesTweak_Scrolls(),\n-            CBash_NamesTweak_Spells(), CBash_NamesTweak_Weapons()],\n-        key=lambda a: a.tweak_name.lower())\n-    tweaks.insert(0,CBash_NamesTweak_BodyTags())\n-\n-    #--Config Phase -----------------------------------------------------------\n-    def initPatchFile(self, patchFile):\n-        self.patchFile = patchFile\n-        for tweak in self.tweaks[1:]:\n-            tweak.patchFile = patchFile\n-        bodyTagPatcher = self.tweaks[0]\n-        patchFile.bodyTags = \\\n-            bodyTagPatcher.choiceValues[bodyTagPatcher.chosen][0]\n-        patchFile.indexMGEFs = True\n+\n+    @classmethod\n+    def tweak_instances(cls):\n+        instances = sorted(\n+            [CBash_NamesTweak_Body(*x) for x in cls._namesTweaksBody] + [\n+                CBash_TextReplacer(*x) for x in cls._txtReplacer] + [\n+                CBash_NamesTweak_Potions(), CBash_NamesTweak_Scrolls(),\n+                CBash_NamesTweak_Spells(), CBash_NamesTweak_Weapons()],\n+            key=lambda a: a.tweak_name.lower())\n+        instances.insert(0,CBash_NamesTweak_BodyTags())\n+        return instances\n+\n+    def __init__(self, p_name, p_file, enabled_tweaks):\n+        super(CBash_NamesTweaker, self).__init__(p_name, p_file,\n+                                                 enabled_tweaks)\n+        body_tags_tweak = enabled_tweaks[0] # FIXME test - was always enabled?\n+        if isinstance(body_tags_tweak, CBash_NamesTweak_BodyTags):\n+            p_file.bodyTags = \\\n+                body_tags_tweak.choiceValues[body_tags_tweak.chosen][0]\n+        p_file.indexMGEFs = True # FIXME what is this? needed if body tags are set?\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "<DED>class NamesTweaker(_ANamesTweaker,MultiTweaker):\n    <IND>tweaks = sorted(\n        [NamesTweak_Body(*x) for x in _ANamesTweaker._namesTweaksBody] + [\n            TextReplacer(*x) for x in _ANamesTweaker._txtReplacer] + [\n            NamesTweak_Potions(), NamesTweak_Scrolls(), NamesTweak_Spells(),\n            NamesTweak_Weapons()], key=lambda a: a.tweak_name.lower())\n    tweaks.insert(0, NamesTweak_BodyTags())\n\n    def getWriteClasses(self):\n        <IND>\"\"\"Returns load factory classes needed for writing.\"\"\"\n        if not self.isActive: return tuple()\n        classTuples = [tweak.getWriteClasses() for tweak in self.enabledTweaks]\n        return sum(classTuples,tuple())\n\n    <DED>def scanModFile(self,modFile,progress):\n        <IND>if not self.isActive: return\n        for tweak in self.enabledTweaks:\n            <IND>tweak.scanModFile(modFile,progress,self.patchFile)\n\n<DED><DED><DED>class CBash_NamesTweaker(_ANamesTweaker,CBash_MultiTweaker):\n    <IND>tweaks = sorted(\n        [CBash_NamesTweak_Body(*x) for x in _ANamesTweaker._namesTweaksBody] +\n        [CBash_TextReplacer(*x) for x in _ANamesTweaker._txtReplacer] + [\n            CBash_NamesTweak_Potions(), CBash_NamesTweak_Scrolls(),\n            CBash_NamesTweak_Spells(), CBash_NamesTweak_Weapons()],\n        key=lambda a: a.tweak_name.lower())\n    tweaks.insert(0,CBash_NamesTweak_BodyTags())\n\n    #--Config Phase -----------------------------------------------------------\n    def initPatchFile(self, patchFile):\n        <IND>self.patchFile = patchFile\n        for tweak in self.tweaks[1:]:\n            <IND>tweak.patchFile = patchFile\n        <DED>bodyTagPatcher = self.tweaks[0]\n        patchFile.bodyTags =            bodyTagPatcher.choiceValues[bodyTagPatcher.chosen][0]\n        patchFile.indexMGEFs = True\n\n",
        "target_code_with_indent": "<DED>class NamesTweaker(_ANamesTweaker,MultiTweaker):\n\n    <IND>@classmethod\n    def tweak_instances(cls):\n        <IND>instances = sorted(\n            [NamesTweak_Body(*x) for x in cls._namesTweaksBody] + [\n                TextReplacer(*x) for x in cls._txtReplacer] + [\n                NamesTweak_Potions(), NamesTweak_Scrolls(),\n                NamesTweak_Spells(), NamesTweak_Weapons()],\n            key=lambda a: a.tweak_name.lower())\n        instances.insert(0, NamesTweak_BodyTags())\n        return instances\n\n<DED><DED>class CBash_NamesTweaker(_ANamesTweaker,CBash_MultiTweaker):\n\n    <IND>@classmethod\n    def tweak_instances(cls):\n        <IND>instances = sorted(\n            [CBash_NamesTweak_Body(*x) for x in cls._namesTweaksBody] + [\n                CBash_TextReplacer(*x) for x in cls._txtReplacer] + [\n                CBash_NamesTweak_Potions(), CBash_NamesTweak_Scrolls(),\n                CBash_NamesTweak_Spells(), CBash_NamesTweak_Weapons()],\n            key=lambda a: a.tweak_name.lower())\n        instances.insert(0,CBash_NamesTweak_BodyTags())\n        return instances\n\n    <DED>def __init__(self, p_name, p_file, enabled_tweaks):\n        <IND>super(CBash_NamesTweaker, self).__init__(p_name, p_file,\n                                                 enabled_tweaks)\n        body_tags_tweak = enabled_tweaks[0] # FIXME test - was always enabled?\n        if isinstance(body_tags_tweak, CBash_NamesTweak_BodyTags):\n            <IND>p_file.bodyTags =                body_tags_tweak.choiceValues[body_tags_tweak.chosen][0]\n        <DED>p_file.indexMGEFs = True # FIXME what is this? needed if body tags are set?\n\n"
      }
    ]
  },
  {
    "project": "wrye-bash/wrye-bash",
    "commit": "a731950061576e2e787017a02ba6f2582703fd06",
    "filename": "Mopy/bash/patcher/patchers/multitweak_names.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/wrye-bash-wrye-bash/Mopy/bash/patcher/patchers/multitweak_names.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "Mopy/bash/patcher/patchers/multitweak_names.py:962:8 Unsupported operand [58]: `+` is not supported for operand types `typing.List[CBash_NamesTweak_Body]` and `typing.List[CBash_TextReplacer]`.",
    "message": " `+` is not supported for operand types `typing.List[CBash_NamesTweak_Body]` and `typing.List[CBash_TextReplacer]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 962,
    "warning_line": "        [CBash_TextReplacer(*x) for x in _ANamesTweaker._txtReplacer] + [",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "class NamesTweaker(_ANamesTweaker,MultiTweaker):\n    tweaks = sorted(\n        [NamesTweak_Body(*x) for x in _ANamesTweaker._namesTweaksBody] + [\n            TextReplacer(*x) for x in _ANamesTweaker._txtReplacer] + [\n            NamesTweak_Potions(), NamesTweak_Scrolls(), NamesTweak_Spells(),\n            NamesTweak_Weapons()], key=lambda a: a.tweak_name.lower())\n    tweaks.insert(0, NamesTweak_BodyTags())\n\n    def getWriteClasses(self):\n        \"\"\"Returns load factory classes needed for writing.\"\"\"\n        if not self.isActive: return tuple()\n        classTuples = [tweak.getWriteClasses() for tweak in self.enabledTweaks]\n        return sum(classTuples,tuple())\n\n    def scanModFile(self,modFile,progress):\n        if not self.isActive: return\n        for tweak in self.enabledTweaks:\n            tweak.scanModFile(modFile,progress,self.patchFile)\n\nclass CBash_NamesTweaker(_ANamesTweaker,CBash_MultiTweaker):\n    tweaks = sorted(\n        [CBash_NamesTweak_Body(*x) for x in _ANamesTweaker._namesTweaksBody] +\n        [CBash_TextReplacer(*x) for x in _ANamesTweaker._txtReplacer] + [\n            CBash_NamesTweak_Potions(), CBash_NamesTweak_Scrolls(),\n            CBash_NamesTweak_Spells(), CBash_NamesTweak_Weapons()],\n        key=lambda a: a.tweak_name.lower())\n    tweaks.insert(0,CBash_NamesTweak_BodyTags())\n\n    #--Config Phase -----------------------------------------------------------\n    def initPatchFile(self, patchFile):\n        self.patchFile = patchFile\n        for tweak in self.tweaks[1:]:\n            tweak.patchFile = patchFile\n        bodyTagPatcher = self.tweaks[0]\n        patchFile.bodyTags = \\\n            bodyTagPatcher.choiceValues[bodyTagPatcher.chosen][0]\n        patchFile.indexMGEFs = True\n\n",
        "source_code_len": 1727,
        "target_code": "class NamesTweaker(_ANamesTweaker,MultiTweaker):\n\n    @classmethod\n    def tweak_instances(cls):\n        instances = sorted(\n            [NamesTweak_Body(*x) for x in cls._namesTweaksBody] + [\n                TextReplacer(*x) for x in cls._txtReplacer] + [\n                NamesTweak_Potions(), NamesTweak_Scrolls(),\n                NamesTweak_Spells(), NamesTweak_Weapons()],\n            key=lambda a: a.tweak_name.lower())\n        instances.insert(0, NamesTweak_BodyTags())\n        return instances\n\nclass CBash_NamesTweaker(_ANamesTweaker,CBash_MultiTweaker):\n\n    @classmethod\n    def tweak_instances(cls):\n        instances = sorted(\n            [CBash_NamesTweak_Body(*x) for x in cls._namesTweaksBody] + [\n                CBash_TextReplacer(*x) for x in cls._txtReplacer] + [\n                CBash_NamesTweak_Potions(), CBash_NamesTweak_Scrolls(),\n                CBash_NamesTweak_Spells(), CBash_NamesTweak_Weapons()],\n            key=lambda a: a.tweak_name.lower())\n        instances.insert(0,CBash_NamesTweak_BodyTags())\n        return instances\n\n    def __init__(self, p_name, p_file, enabled_tweaks):\n        super(CBash_NamesTweaker, self).__init__(p_name, p_file,\n                                                 enabled_tweaks)\n        body_tags_tweak = enabled_tweaks[0] # FIXME test - was always enabled?\n        if isinstance(body_tags_tweak, CBash_NamesTweak_BodyTags):\n            p_file.bodyTags = \\\n                body_tags_tweak.choiceValues[body_tags_tweak.chosen][0]\n        p_file.indexMGEFs = True # FIXME what is this? needed if body tags are set?\n\n",
        "target_code_len": 1578,
        "diff_format": "@@ -940,38 +920,35 @@\n class NamesTweaker(_ANamesTweaker,MultiTweaker):\n-    tweaks = sorted(\n-        [NamesTweak_Body(*x) for x in _ANamesTweaker._namesTweaksBody] + [\n-            TextReplacer(*x) for x in _ANamesTweaker._txtReplacer] + [\n-            NamesTweak_Potions(), NamesTweak_Scrolls(), NamesTweak_Spells(),\n-            NamesTweak_Weapons()], key=lambda a: a.tweak_name.lower())\n-    tweaks.insert(0, NamesTweak_BodyTags())\n-\n-    def getWriteClasses(self):\n-        \"\"\"Returns load factory classes needed for writing.\"\"\"\n-        if not self.isActive: return tuple()\n-        classTuples = [tweak.getWriteClasses() for tweak in self.enabledTweaks]\n-        return sum(classTuples,tuple())\n-\n-    def scanModFile(self,modFile,progress):\n-        if not self.isActive: return\n-        for tweak in self.enabledTweaks:\n-            tweak.scanModFile(modFile,progress,self.patchFile)\n+\n+    @classmethod\n+    def tweak_instances(cls):\n+        instances = sorted(\n+            [NamesTweak_Body(*x) for x in cls._namesTweaksBody] + [\n+                TextReplacer(*x) for x in cls._txtReplacer] + [\n+                NamesTweak_Potions(), NamesTweak_Scrolls(),\n+                NamesTweak_Spells(), NamesTweak_Weapons()],\n+            key=lambda a: a.tweak_name.lower())\n+        instances.insert(0, NamesTweak_BodyTags())\n+        return instances\n \n class CBash_NamesTweaker(_ANamesTweaker,CBash_MultiTweaker):\n-    tweaks = sorted(\n-        [CBash_NamesTweak_Body(*x) for x in _ANamesTweaker._namesTweaksBody] +\n-        [CBash_TextReplacer(*x) for x in _ANamesTweaker._txtReplacer] + [\n-            CBash_NamesTweak_Potions(), CBash_NamesTweak_Scrolls(),\n-            CBash_NamesTweak_Spells(), CBash_NamesTweak_Weapons()],\n-        key=lambda a: a.tweak_name.lower())\n-    tweaks.insert(0,CBash_NamesTweak_BodyTags())\n-\n-    #--Config Phase -----------------------------------------------------------\n-    def initPatchFile(self, patchFile):\n-        self.patchFile = patchFile\n-        for tweak in self.tweaks[1:]:\n-            tweak.patchFile = patchFile\n-        bodyTagPatcher = self.tweaks[0]\n-        patchFile.bodyTags = \\\n-            bodyTagPatcher.choiceValues[bodyTagPatcher.chosen][0]\n-        patchFile.indexMGEFs = True\n+\n+    @classmethod\n+    def tweak_instances(cls):\n+        instances = sorted(\n+            [CBash_NamesTweak_Body(*x) for x in cls._namesTweaksBody] + [\n+                CBash_TextReplacer(*x) for x in cls._txtReplacer] + [\n+                CBash_NamesTweak_Potions(), CBash_NamesTweak_Scrolls(),\n+                CBash_NamesTweak_Spells(), CBash_NamesTweak_Weapons()],\n+            key=lambda a: a.tweak_name.lower())\n+        instances.insert(0,CBash_NamesTweak_BodyTags())\n+        return instances\n+\n+    def __init__(self, p_name, p_file, enabled_tweaks):\n+        super(CBash_NamesTweaker, self).__init__(p_name, p_file,\n+                                                 enabled_tweaks)\n+        body_tags_tweak = enabled_tweaks[0] # FIXME test - was always enabled?\n+        if isinstance(body_tags_tweak, CBash_NamesTweak_BodyTags):\n+            p_file.bodyTags = \\\n+                body_tags_tweak.choiceValues[body_tags_tweak.chosen][0]\n+        p_file.indexMGEFs = True # FIXME what is this? needed if body tags are set?\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "<DED>class NamesTweaker(_ANamesTweaker,MultiTweaker):\n    <IND>tweaks = sorted(\n        [NamesTweak_Body(*x) for x in _ANamesTweaker._namesTweaksBody] + [\n            TextReplacer(*x) for x in _ANamesTweaker._txtReplacer] + [\n            NamesTweak_Potions(), NamesTweak_Scrolls(), NamesTweak_Spells(),\n            NamesTweak_Weapons()], key=lambda a: a.tweak_name.lower())\n    tweaks.insert(0, NamesTweak_BodyTags())\n\n    def getWriteClasses(self):\n        <IND>\"\"\"Returns load factory classes needed for writing.\"\"\"\n        if not self.isActive: return tuple()\n        classTuples = [tweak.getWriteClasses() for tweak in self.enabledTweaks]\n        return sum(classTuples,tuple())\n\n    <DED>def scanModFile(self,modFile,progress):\n        <IND>if not self.isActive: return\n        for tweak in self.enabledTweaks:\n            <IND>tweak.scanModFile(modFile,progress,self.patchFile)\n\n<DED><DED><DED>class CBash_NamesTweaker(_ANamesTweaker,CBash_MultiTweaker):\n    <IND>tweaks = sorted(\n        [CBash_NamesTweak_Body(*x) for x in _ANamesTweaker._namesTweaksBody] +\n        [CBash_TextReplacer(*x) for x in _ANamesTweaker._txtReplacer] + [\n            CBash_NamesTweak_Potions(), CBash_NamesTweak_Scrolls(),\n            CBash_NamesTweak_Spells(), CBash_NamesTweak_Weapons()],\n        key=lambda a: a.tweak_name.lower())\n    tweaks.insert(0,CBash_NamesTweak_BodyTags())\n\n    #--Config Phase -----------------------------------------------------------\n    def initPatchFile(self, patchFile):\n        <IND>self.patchFile = patchFile\n        for tweak in self.tweaks[1:]:\n            <IND>tweak.patchFile = patchFile\n        <DED>bodyTagPatcher = self.tweaks[0]\n        patchFile.bodyTags =            bodyTagPatcher.choiceValues[bodyTagPatcher.chosen][0]\n        patchFile.indexMGEFs = True\n\n",
        "target_code_with_indent": "<DED>class NamesTweaker(_ANamesTweaker,MultiTweaker):\n\n    <IND>@classmethod\n    def tweak_instances(cls):\n        <IND>instances = sorted(\n            [NamesTweak_Body(*x) for x in cls._namesTweaksBody] + [\n                TextReplacer(*x) for x in cls._txtReplacer] + [\n                NamesTweak_Potions(), NamesTweak_Scrolls(),\n                NamesTweak_Spells(), NamesTweak_Weapons()],\n            key=lambda a: a.tweak_name.lower())\n        instances.insert(0, NamesTweak_BodyTags())\n        return instances\n\n<DED><DED>class CBash_NamesTweaker(_ANamesTweaker,CBash_MultiTweaker):\n\n    <IND>@classmethod\n    def tweak_instances(cls):\n        <IND>instances = sorted(\n            [CBash_NamesTweak_Body(*x) for x in cls._namesTweaksBody] + [\n                CBash_TextReplacer(*x) for x in cls._txtReplacer] + [\n                CBash_NamesTweak_Potions(), CBash_NamesTweak_Scrolls(),\n                CBash_NamesTweak_Spells(), CBash_NamesTweak_Weapons()],\n            key=lambda a: a.tweak_name.lower())\n        instances.insert(0,CBash_NamesTweak_BodyTags())\n        return instances\n\n    <DED>def __init__(self, p_name, p_file, enabled_tweaks):\n        <IND>super(CBash_NamesTweaker, self).__init__(p_name, p_file,\n                                                 enabled_tweaks)\n        body_tags_tweak = enabled_tweaks[0] # FIXME test - was always enabled?\n        if isinstance(body_tags_tweak, CBash_NamesTweak_BodyTags):\n            <IND>p_file.bodyTags =                body_tags_tweak.choiceValues[body_tags_tweak.chosen][0]\n        <DED>p_file.indexMGEFs = True # FIXME what is this? needed if body tags are set?\n\n"
      }
    ]
  },
  {
    "project": "wrye-bash/wrye-bash",
    "commit": "a731950061576e2e787017a02ba6f2582703fd06",
    "filename": "Mopy/bash/patcher/patchers/multitweak_names.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/wrye-bash-wrye-bash/Mopy/bash/patcher/patchers/multitweak_names.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "Mopy/bash/patcher/patchers/multitweak_names.py:962:72 Unsupported operand [58]: `+` is not supported for operand types `typing.List[CBash_NamesTweak_Body]` and `typing.List[typing.Union[CBash_NamesTweak_Potions, CBash_NamesTweak_Scrolls, CBash_NamesTweak_Spells, CBash_NamesTweak_Weapons]]`.",
    "message": " `+` is not supported for operand types `typing.List[CBash_NamesTweak_Body]` and `typing.List[typing.Union[CBash_NamesTweak_Potions, CBash_NamesTweak_Scrolls, CBash_NamesTweak_Spells, CBash_NamesTweak_Weapons]]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 962,
    "warning_line": "        [CBash_TextReplacer(*x) for x in _ANamesTweaker._txtReplacer] + [",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "class NamesTweaker(_ANamesTweaker,MultiTweaker):\n    tweaks = sorted(\n        [NamesTweak_Body(*x) for x in _ANamesTweaker._namesTweaksBody] + [\n            TextReplacer(*x) for x in _ANamesTweaker._txtReplacer] + [\n            NamesTweak_Potions(), NamesTweak_Scrolls(), NamesTweak_Spells(),\n            NamesTweak_Weapons()], key=lambda a: a.tweak_name.lower())\n    tweaks.insert(0, NamesTweak_BodyTags())\n\n    def getWriteClasses(self):\n        \"\"\"Returns load factory classes needed for writing.\"\"\"\n        if not self.isActive: return tuple()\n        classTuples = [tweak.getWriteClasses() for tweak in self.enabledTweaks]\n        return sum(classTuples,tuple())\n\n    def scanModFile(self,modFile,progress):\n        if not self.isActive: return\n        for tweak in self.enabledTweaks:\n            tweak.scanModFile(modFile,progress,self.patchFile)\n\nclass CBash_NamesTweaker(_ANamesTweaker,CBash_MultiTweaker):\n    tweaks = sorted(\n        [CBash_NamesTweak_Body(*x) for x in _ANamesTweaker._namesTweaksBody] +\n        [CBash_TextReplacer(*x) for x in _ANamesTweaker._txtReplacer] + [\n            CBash_NamesTweak_Potions(), CBash_NamesTweak_Scrolls(),\n            CBash_NamesTweak_Spells(), CBash_NamesTweak_Weapons()],\n        key=lambda a: a.tweak_name.lower())\n    tweaks.insert(0,CBash_NamesTweak_BodyTags())\n\n    #--Config Phase -----------------------------------------------------------\n    def initPatchFile(self, patchFile):\n        self.patchFile = patchFile\n        for tweak in self.tweaks[1:]:\n            tweak.patchFile = patchFile\n        bodyTagPatcher = self.tweaks[0]\n        patchFile.bodyTags = \\\n            bodyTagPatcher.choiceValues[bodyTagPatcher.chosen][0]\n        patchFile.indexMGEFs = True\n\n",
        "source_code_len": 1727,
        "target_code": "class NamesTweaker(_ANamesTweaker,MultiTweaker):\n\n    @classmethod\n    def tweak_instances(cls):\n        instances = sorted(\n            [NamesTweak_Body(*x) for x in cls._namesTweaksBody] + [\n                TextReplacer(*x) for x in cls._txtReplacer] + [\n                NamesTweak_Potions(), NamesTweak_Scrolls(),\n                NamesTweak_Spells(), NamesTweak_Weapons()],\n            key=lambda a: a.tweak_name.lower())\n        instances.insert(0, NamesTweak_BodyTags())\n        return instances\n\nclass CBash_NamesTweaker(_ANamesTweaker,CBash_MultiTweaker):\n\n    @classmethod\n    def tweak_instances(cls):\n        instances = sorted(\n            [CBash_NamesTweak_Body(*x) for x in cls._namesTweaksBody] + [\n                CBash_TextReplacer(*x) for x in cls._txtReplacer] + [\n                CBash_NamesTweak_Potions(), CBash_NamesTweak_Scrolls(),\n                CBash_NamesTweak_Spells(), CBash_NamesTweak_Weapons()],\n            key=lambda a: a.tweak_name.lower())\n        instances.insert(0,CBash_NamesTweak_BodyTags())\n        return instances\n\n    def __init__(self, p_name, p_file, enabled_tweaks):\n        super(CBash_NamesTweaker, self).__init__(p_name, p_file,\n                                                 enabled_tweaks)\n        body_tags_tweak = enabled_tweaks[0] # FIXME test - was always enabled?\n        if isinstance(body_tags_tweak, CBash_NamesTweak_BodyTags):\n            p_file.bodyTags = \\\n                body_tags_tweak.choiceValues[body_tags_tweak.chosen][0]\n        p_file.indexMGEFs = True # FIXME what is this? needed if body tags are set?\n\n",
        "target_code_len": 1578,
        "diff_format": "@@ -940,38 +920,35 @@\n class NamesTweaker(_ANamesTweaker,MultiTweaker):\n-    tweaks = sorted(\n-        [NamesTweak_Body(*x) for x in _ANamesTweaker._namesTweaksBody] + [\n-            TextReplacer(*x) for x in _ANamesTweaker._txtReplacer] + [\n-            NamesTweak_Potions(), NamesTweak_Scrolls(), NamesTweak_Spells(),\n-            NamesTweak_Weapons()], key=lambda a: a.tweak_name.lower())\n-    tweaks.insert(0, NamesTweak_BodyTags())\n-\n-    def getWriteClasses(self):\n-        \"\"\"Returns load factory classes needed for writing.\"\"\"\n-        if not self.isActive: return tuple()\n-        classTuples = [tweak.getWriteClasses() for tweak in self.enabledTweaks]\n-        return sum(classTuples,tuple())\n-\n-    def scanModFile(self,modFile,progress):\n-        if not self.isActive: return\n-        for tweak in self.enabledTweaks:\n-            tweak.scanModFile(modFile,progress,self.patchFile)\n+\n+    @classmethod\n+    def tweak_instances(cls):\n+        instances = sorted(\n+            [NamesTweak_Body(*x) for x in cls._namesTweaksBody] + [\n+                TextReplacer(*x) for x in cls._txtReplacer] + [\n+                NamesTweak_Potions(), NamesTweak_Scrolls(),\n+                NamesTweak_Spells(), NamesTweak_Weapons()],\n+            key=lambda a: a.tweak_name.lower())\n+        instances.insert(0, NamesTweak_BodyTags())\n+        return instances\n \n class CBash_NamesTweaker(_ANamesTweaker,CBash_MultiTweaker):\n-    tweaks = sorted(\n-        [CBash_NamesTweak_Body(*x) for x in _ANamesTweaker._namesTweaksBody] +\n-        [CBash_TextReplacer(*x) for x in _ANamesTweaker._txtReplacer] + [\n-            CBash_NamesTweak_Potions(), CBash_NamesTweak_Scrolls(),\n-            CBash_NamesTweak_Spells(), CBash_NamesTweak_Weapons()],\n-        key=lambda a: a.tweak_name.lower())\n-    tweaks.insert(0,CBash_NamesTweak_BodyTags())\n-\n-    #--Config Phase -----------------------------------------------------------\n-    def initPatchFile(self, patchFile):\n-        self.patchFile = patchFile\n-        for tweak in self.tweaks[1:]:\n-            tweak.patchFile = patchFile\n-        bodyTagPatcher = self.tweaks[0]\n-        patchFile.bodyTags = \\\n-            bodyTagPatcher.choiceValues[bodyTagPatcher.chosen][0]\n-        patchFile.indexMGEFs = True\n+\n+    @classmethod\n+    def tweak_instances(cls):\n+        instances = sorted(\n+            [CBash_NamesTweak_Body(*x) for x in cls._namesTweaksBody] + [\n+                CBash_TextReplacer(*x) for x in cls._txtReplacer] + [\n+                CBash_NamesTweak_Potions(), CBash_NamesTweak_Scrolls(),\n+                CBash_NamesTweak_Spells(), CBash_NamesTweak_Weapons()],\n+            key=lambda a: a.tweak_name.lower())\n+        instances.insert(0,CBash_NamesTweak_BodyTags())\n+        return instances\n+\n+    def __init__(self, p_name, p_file, enabled_tweaks):\n+        super(CBash_NamesTweaker, self).__init__(p_name, p_file,\n+                                                 enabled_tweaks)\n+        body_tags_tweak = enabled_tweaks[0] # FIXME test - was always enabled?\n+        if isinstance(body_tags_tweak, CBash_NamesTweak_BodyTags):\n+            p_file.bodyTags = \\\n+                body_tags_tweak.choiceValues[body_tags_tweak.chosen][0]\n+        p_file.indexMGEFs = True # FIXME what is this? needed if body tags are set?\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "<DED>class NamesTweaker(_ANamesTweaker,MultiTweaker):\n    <IND>tweaks = sorted(\n        [NamesTweak_Body(*x) for x in _ANamesTweaker._namesTweaksBody] + [\n            TextReplacer(*x) for x in _ANamesTweaker._txtReplacer] + [\n            NamesTweak_Potions(), NamesTweak_Scrolls(), NamesTweak_Spells(),\n            NamesTweak_Weapons()], key=lambda a: a.tweak_name.lower())\n    tweaks.insert(0, NamesTweak_BodyTags())\n\n    def getWriteClasses(self):\n        <IND>\"\"\"Returns load factory classes needed for writing.\"\"\"\n        if not self.isActive: return tuple()\n        classTuples = [tweak.getWriteClasses() for tweak in self.enabledTweaks]\n        return sum(classTuples,tuple())\n\n    <DED>def scanModFile(self,modFile,progress):\n        <IND>if not self.isActive: return\n        for tweak in self.enabledTweaks:\n            <IND>tweak.scanModFile(modFile,progress,self.patchFile)\n\n<DED><DED><DED>class CBash_NamesTweaker(_ANamesTweaker,CBash_MultiTweaker):\n    <IND>tweaks = sorted(\n        [CBash_NamesTweak_Body(*x) for x in _ANamesTweaker._namesTweaksBody] +\n        [CBash_TextReplacer(*x) for x in _ANamesTweaker._txtReplacer] + [\n            CBash_NamesTweak_Potions(), CBash_NamesTweak_Scrolls(),\n            CBash_NamesTweak_Spells(), CBash_NamesTweak_Weapons()],\n        key=lambda a: a.tweak_name.lower())\n    tweaks.insert(0,CBash_NamesTweak_BodyTags())\n\n    #--Config Phase -----------------------------------------------------------\n    def initPatchFile(self, patchFile):\n        <IND>self.patchFile = patchFile\n        for tweak in self.tweaks[1:]:\n            <IND>tweak.patchFile = patchFile\n        <DED>bodyTagPatcher = self.tweaks[0]\n        patchFile.bodyTags =            bodyTagPatcher.choiceValues[bodyTagPatcher.chosen][0]\n        patchFile.indexMGEFs = True\n\n",
        "target_code_with_indent": "<DED>class NamesTweaker(_ANamesTweaker,MultiTweaker):\n\n    <IND>@classmethod\n    def tweak_instances(cls):\n        <IND>instances = sorted(\n            [NamesTweak_Body(*x) for x in cls._namesTweaksBody] + [\n                TextReplacer(*x) for x in cls._txtReplacer] + [\n                NamesTweak_Potions(), NamesTweak_Scrolls(),\n                NamesTweak_Spells(), NamesTweak_Weapons()],\n            key=lambda a: a.tweak_name.lower())\n        instances.insert(0, NamesTweak_BodyTags())\n        return instances\n\n<DED><DED>class CBash_NamesTweaker(_ANamesTweaker,CBash_MultiTweaker):\n\n    <IND>@classmethod\n    def tweak_instances(cls):\n        <IND>instances = sorted(\n            [CBash_NamesTweak_Body(*x) for x in cls._namesTweaksBody] + [\n                CBash_TextReplacer(*x) for x in cls._txtReplacer] + [\n                CBash_NamesTweak_Potions(), CBash_NamesTweak_Scrolls(),\n                CBash_NamesTweak_Spells(), CBash_NamesTweak_Weapons()],\n            key=lambda a: a.tweak_name.lower())\n        instances.insert(0,CBash_NamesTweak_BodyTags())\n        return instances\n\n    <DED>def __init__(self, p_name, p_file, enabled_tweaks):\n        <IND>super(CBash_NamesTweaker, self).__init__(p_name, p_file,\n                                                 enabled_tweaks)\n        body_tags_tweak = enabled_tweaks[0] # FIXME test - was always enabled?\n        if isinstance(body_tags_tweak, CBash_NamesTweak_BodyTags):\n            <IND>p_file.bodyTags =                body_tags_tweak.choiceValues[body_tags_tweak.chosen][0]\n        <DED>p_file.indexMGEFs = True # FIXME what is this? needed if body tags are set?\n\n"
      }
    ]
  }
]