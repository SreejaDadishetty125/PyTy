[
  {
    "project": "beartype/beartype",
    "commit": "e7c8bcf9ffa49d29b0d4f489a203a3d47244002e",
    "filename": "beartype_test/a00_unit/a20_api/vale/_core/test_valecore.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/beartype-beartype/beartype_test/a00_unit/a20_api/vale/_core/test_valecore.py",
    "file_hunks_size": 5,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "beartype_test/a00_unit/a20_api/vale/_core/test_valecore.py:63:49 Incompatible parameter type [6]: Expected `typing.Optional[typing.Callable[[BeartypeValidator, object, str], str]]` for 2nd positional only parameter to call `BeartypeValidator.__init__` but got `typing.Union[typing.Callable[[Named(text, typing.Any)], bool], typing.Dict[str, typing.Callable[[Named(text, typing.Any)], bool]]]`.",
    "message": " Expected `typing.Optional[typing.Callable[[BeartypeValidator, object, str], str]]` for 2nd positional only parameter to call `BeartypeValidator.__init__` but got `typing.Union[typing.Callable[[Named(text, typing.Any)], bool], typing.Dict[str, typing.Callable[[Named(text, typing.Any)], bool]]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 63,
    "warning_line": "        is_valid_code=is_valid_code_delimited, **kwargs)"
  },
  {
    "project": "beartype/beartype",
    "commit": "e7c8bcf9ffa49d29b0d4f489a203a3d47244002e",
    "filename": "beartype_test/a00_unit/a20_api/vale/_core/test_valecore.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/beartype-beartype/beartype_test/a00_unit/a20_api/vale/_core/test_valecore.py",
    "file_hunks_size": 5,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "beartype_test/a00_unit/a20_api/vale/_core/test_valecore.py:79:10 Incompatible parameter type [6]: Expected `typing.Union[typing.Callable[[], str], str]` for 3rd positional only parameter to call `BeartypeValidator.__init__` but got `typing.Union[typing.Callable[[Named(text, typing.Any)], bool], typing.Dict[str, typing.Callable[[Named(text, typing.Any)], bool]]]`.",
    "message": " Expected `typing.Union[typing.Callable[[], str], str]` for 3rd positional only parameter to call `BeartypeValidator.__init__` but got `typing.Union[typing.Callable[[Named(text, typing.Any)], bool], typing.Dict[str, typing.Callable[[Named(text, typing.Any)], bool]]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 79,
    "warning_line": "        **kwargs"
  },
  {
    "project": "beartype/beartype",
    "commit": "e7c8bcf9ffa49d29b0d4f489a203a3d47244002e",
    "filename": "beartype_test/a00_unit/a20_api/vale/_core/test_valecore.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/beartype-beartype/beartype_test/a00_unit/a20_api/vale/_core/test_valecore.py",
    "file_hunks_size": 5,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "beartype_test/a00_unit/a20_api/vale/_core/test_valecore.py:101:10 Incompatible parameter type [6]: Expected `typing.Callable[[object], bool]` for 3rd positional only parameter to call `BeartypeValidator.__init__` but got `typing.Union[typing.Callable[[Named(text, typing.Any)], bool], typing.Dict[str, typing.Callable[[Named(text, typing.Any)], bool]]]`.",
    "message": " Expected `typing.Callable[[object], bool]` for 3rd positional only parameter to call `BeartypeValidator.__init__` but got `typing.Union[typing.Callable[[Named(text, typing.Any)], bool], typing.Dict[str, typing.Callable[[Named(text, typing.Any)], bool]]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 101,
    "warning_line": "        **kwargs_sans_get_repr"
  },
  {
    "project": "beartype/beartype",
    "commit": "e7c8bcf9ffa49d29b0d4f489a203a3d47244002e",
    "filename": "beartype_test/a00_unit/a20_api/vale/_core/test_valecore.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/beartype-beartype/beartype_test/a00_unit/a20_api/vale/_core/test_valecore.py",
    "file_hunks_size": 5,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "beartype_test/a00_unit/a20_api/vale/_core/test_valecore.py:101:10 Incompatible parameter type [6]: Expected `typing.Dict[str, typing.Any]` for 3rd positional only parameter to call `BeartypeValidator.__init__` but got `typing.Union[typing.Callable[[Named(text, typing.Any)], bool], typing.Dict[str, typing.Callable[[Named(text, typing.Any)], bool]]]`.",
    "message": " Expected `typing.Dict[str, typing.Any]` for 3rd positional only parameter to call `BeartypeValidator.__init__` but got `typing.Union[typing.Callable[[Named(text, typing.Any)], bool], typing.Dict[str, typing.Callable[[Named(text, typing.Any)], bool]]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 101,
    "warning_line": "        **kwargs_sans_get_repr"
  },
  {
    "project": "beartype/beartype",
    "commit": "e7c8bcf9ffa49d29b0d4f489a203a3d47244002e",
    "filename": "beartype_test/a00_unit/a20_api/vale/_core/test_valecore.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/beartype-beartype/beartype_test/a00_unit/a20_api/vale/_core/test_valecore.py",
    "file_hunks_size": 5,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "beartype_test/a00_unit/a20_api/vale/_core/test_valecore.py:101:10 Incompatible parameter type [6]: Expected `typing.Optional[typing.Callable[[BeartypeValidator, object, str], str]]` for 3rd positional only parameter to call `BeartypeValidator.__init__` but got `typing.Union[typing.Callable[[Named(text, typing.Any)], bool], typing.Dict[str, typing.Callable[[Named(text, typing.Any)], bool]]]`.",
    "message": " Expected `typing.Optional[typing.Callable[[BeartypeValidator, object, str], str]]` for 3rd positional only parameter to call `BeartypeValidator.__init__` but got `typing.Union[typing.Callable[[Named(text, typing.Any)], bool], typing.Dict[str, typing.Callable[[Named(text, typing.Any)], bool]]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 101,
    "warning_line": "        **kwargs_sans_get_repr"
  },
  {
    "project": "beartype/beartype",
    "commit": "e7c8bcf9ffa49d29b0d4f489a203a3d47244002e",
    "filename": "beartype_test/a00_unit/a20_api/vale/_core/test_valecore.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/beartype-beartype/beartype_test/a00_unit/a20_api/vale/_core/test_valecore.py",
    "file_hunks_size": 5,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "beartype_test/a00_unit/a20_api/vale/_core/test_valecore.py:176:54 Incompatible parameter type [6]: Expected `typing.Optional[typing.Callable[[BeartypeValidator, object, str], str]]` for 2nd positional only parameter to call `BeartypeValidator.__init__` but got `typing.Union[typing.Callable[[Named(text, typing.Any)], bool], str, typing.Dict[str, typing.Callable[[Named(text, typing.Any)], bool]]]`.",
    "message": " Expected `typing.Optional[typing.Callable[[BeartypeValidator, object, str], str]]` for 2nd positional only parameter to call `BeartypeValidator.__init__` but got `typing.Union[typing.Callable[[Named(text, typing.Any)], bool], str, typing.Dict[str, typing.Callable[[Named(text, typing.Any)], bool]]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 176,
    "warning_line": "            get_repr=b'All that was left of them,', **kwargs_is_valid)"
  },
  {
    "project": "beartype/beartype",
    "commit": "e7c8bcf9ffa49d29b0d4f489a203a3d47244002e",
    "filename": "beartype_test/a00_unit/a20_api/vale/_core/test_valecore.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/beartype-beartype/beartype_test/a00_unit/a20_api/vale/_core/test_valecore.py",
    "file_hunks_size": 5,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "beartype_test/a00_unit/a20_api/vale/_core/test_valecore.py:182:41 Incompatible parameter type [6]: Expected `typing.Optional[typing.Callable[[BeartypeValidator, object, str], str]]` for 2nd positional only parameter to call `BeartypeValidator.__init__` but got `typing.Union[typing.Callable[[Named(text, typing.Any)], bool], str, typing.Dict[str, typing.Callable[[Named(text, typing.Any)], bool]]]`.",
    "message": " Expected `typing.Optional[typing.Callable[[BeartypeValidator, object, str], str]]` for 2nd positional only parameter to call `BeartypeValidator.__init__` but got `typing.Union[typing.Callable[[Named(text, typing.Any)], bool], str, typing.Dict[str, typing.Callable[[Named(text, typing.Any)], bool]]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 182,
    "warning_line": "        BeartypeValidator(get_repr='', **kwargs_is_valid)"
  },
  {
    "project": "beartype/beartype",
    "commit": "e7c8bcf9ffa49d29b0d4f489a203a3d47244002e",
    "filename": "beartype_test/a00_unit/a20_api/vale/_core/test_valecore.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/beartype-beartype/beartype_test/a00_unit/a20_api/vale/_core/test_valecore.py",
    "file_hunks_size": 5,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "beartype_test/a00_unit/a20_api/vale/_core/test_valecore.py:188:43 Incompatible parameter type [6]: Expected `typing.Optional[typing.Callable[[BeartypeValidator, object, str], str]]` for 2nd positional only parameter to call `BeartypeValidator.__init__` but got `typing.Union[typing.Callable[[Named(text, typing.Any)], bool], str, typing.Dict[str, typing.Callable[[Named(text, typing.Any)], bool]]]`.",
    "message": " Expected `typing.Optional[typing.Callable[[BeartypeValidator, object, str], str]]` for 2nd positional only parameter to call `BeartypeValidator.__init__` but got `typing.Union[typing.Callable[[Named(text, typing.Any)], bool], str, typing.Dict[str, typing.Callable[[Named(text, typing.Any)], bool]]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 188,
    "warning_line": "        BeartypeValidator(get_repr=iter, **kwargs_is_valid)"
  },
  {
    "project": "beartype/beartype",
    "commit": "e7c8bcf9ffa49d29b0d4f489a203a3d47244002e",
    "filename": "beartype_test/a00_unit/a20_api/vale/_core/test_valecore.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/beartype-beartype/beartype_test/a00_unit/a20_api/vale/_core/test_valecore.py",
    "file_hunks_size": 5,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "beartype_test/a00_unit/a20_api/vale/_core/test_valecore.py:197:14 Incompatible parameter type [6]: Expected `typing.Optional[typing.Callable[[BeartypeValidator, object, str], str]]` for 2nd positional only parameter to call `BeartypeValidator.__init__` but got `typing.Union[typing.Callable[[Named(text, typing.Any)], bool], str, typing.Dict[str, typing.Callable[[Named(text, typing.Any)], bool]]]`.",
    "message": " Expected `typing.Optional[typing.Callable[[BeartypeValidator, object, str], str]]` for 2nd positional only parameter to call `BeartypeValidator.__init__` but got `typing.Union[typing.Callable[[Named(text, typing.Any)], bool], str, typing.Dict[str, typing.Callable[[Named(text, typing.Any)], bool]]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 197,
    "warning_line": "            **kwargs_is_valid"
  },
  {
    "project": "beartype/beartype",
    "commit": "e7c8bcf9ffa49d29b0d4f489a203a3d47244002e",
    "filename": "beartype_test/a00_unit/a20_api/vale/_core/test_valecore.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/beartype-beartype/beartype_test/a00_unit/a20_api/vale/_core/test_valecore.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "beartype_test/a00_unit/a20_api/vale/_core/test_valecore.py:212:12 Incompatible parameter type [6]: Expected `typing.Optional[typing.Callable[[BeartypeValidator, object, str], str]]` for 1st parameter `get_diagnosis` to call `BeartypeValidator.__init__` but got `str`.",
    "message": " Expected `typing.Optional[typing.Callable[[BeartypeValidator, object, str], str]]` for 1st parameter `get_diagnosis` to call `BeartypeValidator.__init__` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 212,
    "warning_line": "            get_diagnosis='The veil of life and death? or do I lie',",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    # Keyword arguments passing valid code, non-dictionary code locals, and a\n    # representer.\n    kwargs_is_valid_get_repr = dict(\n        get_repr='Spread far around and inaccessibly',\n        **kwargs_is_valid\n    )\n\n    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n    # valid code and code locals but a diagnoser of an invalid type raises\n    # the expected exception.\n    with raises(BeartypeValeSubscriptionException):\n        BeartypeValidator(\n            get_diagnosis='The veil of life and death? or do I lie',\n            **kwargs_is_valid_get_repr\n        )\n\n    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n    # valid code and code locals but a C-based diagnoser raises the expected\n    # exception.\n    with raises(BeartypeValeSubscriptionException):\n        BeartypeValidator(get_diagnosis=next, **kwargs_is_valid_get_repr)\n\n    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n    # valid code and code locals but a pure-Python diagnoser accepting no\n    # parameters raises the expected exception.\n    with raises(BeartypeValeSubscriptionException):\n        BeartypeValidator(\n            get_diagnosis=lambda: (\n                'In dream, and does the mightier world of sleep'),\n            **kwargs_is_valid_get_repr\n        )\n",
        "source_code_len": 1337,
        "target_code": "\n    #FIXME: Uncomment when inevitably needed again. *sigh*\n    # # Keyword arguments passing valid code, non-dictionary code locals, and a\n    # # representer.\n    # kwargs_is_valid_get_repr = dict(\n    #     get_repr='Spread far around and inaccessibly',\n    #     **kwargs_is_valid\n    # )\n",
        "target_code_len": 293,
        "diff_format": "@@ -199,32 +176,8 @@\n \n-    # Keyword arguments passing valid code, non-dictionary code locals, and a\n-    # representer.\n-    kwargs_is_valid_get_repr = dict(\n-        get_repr='Spread far around and inaccessibly',\n-        **kwargs_is_valid\n-    )\n-\n-    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n-    # valid code and code locals but a diagnoser of an invalid type raises\n-    # the expected exception.\n-    with raises(BeartypeValeSubscriptionException):\n-        BeartypeValidator(\n-            get_diagnosis='The veil of life and death? or do I lie',\n-            **kwargs_is_valid_get_repr\n-        )\n-\n-    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n-    # valid code and code locals but a C-based diagnoser raises the expected\n-    # exception.\n-    with raises(BeartypeValeSubscriptionException):\n-        BeartypeValidator(get_diagnosis=next, **kwargs_is_valid_get_repr)\n-\n-    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n-    # valid code and code locals but a pure-Python diagnoser accepting no\n-    # parameters raises the expected exception.\n-    with raises(BeartypeValeSubscriptionException):\n-        BeartypeValidator(\n-            get_diagnosis=lambda: (\n-                'In dream, and does the mightier world of sleep'),\n-            **kwargs_is_valid_get_repr\n-        )\n+    #FIXME: Uncomment when inevitably needed again. *sigh*\n+    # # Keyword arguments passing valid code, non-dictionary code locals, and a\n+    # # representer.\n+    # kwargs_is_valid_get_repr = dict(\n+    #     get_repr='Spread far around and inaccessibly',\n+    #     **kwargs_is_valid\n+    # )\n",
        "source_code_with_indent": "\n    # Keyword arguments passing valid code, non-dictionary code locals, and a\n    # representer.\n    <DED>kwargs_is_valid_get_repr = dict(\n        get_repr='Spread far around and inaccessibly',\n        **kwargs_is_valid\n    )\n\n    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n    # valid code and code locals but a diagnoser of an invalid type raises\n    # the expected exception.\n    with raises(BeartypeValeSubscriptionException):\n        <IND>BeartypeValidator(\n            get_diagnosis='The veil of life and death? or do I lie',\n            **kwargs_is_valid_get_repr\n        )\n\n    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n    # valid code and code locals but a C-based diagnoser raises the expected\n    # exception.\n    <DED>with raises(BeartypeValeSubscriptionException):\n        <IND>BeartypeValidator(get_diagnosis=next, **kwargs_is_valid_get_repr)\n\n    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n    # valid code and code locals but a pure-Python diagnoser accepting no\n    # parameters raises the expected exception.\n    <DED>with raises(BeartypeValeSubscriptionException):\n        <IND>BeartypeValidator(\n            get_diagnosis=lambda: (\n                'In dream, and does the mightier world of sleep'),\n            **kwargs_is_valid_get_repr\n        )\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    #FIXME: Uncomment when inevitably needed again. *sigh*\n    # # Keyword arguments passing valid code, non-dictionary code locals, and a\n    # # representer.\n    # kwargs_is_valid_get_repr = dict(\n    #     get_repr='Spread far around and inaccessibly',\n    #     **kwargs_is_valid\n    # )\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "beartype/beartype",
    "commit": "e7c8bcf9ffa49d29b0d4f489a203a3d47244002e",
    "filename": "beartype_test/a00_unit/a20_api/vale/_core/test_valecore.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/beartype-beartype/beartype_test/a00_unit/a20_api/vale/_core/test_valecore.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "beartype_test/a00_unit/a20_api/vale/_core/test_valecore.py:213:14 Incompatible parameter type [6]: Expected `typing.Callable[[object], bool]` for 2nd positional only parameter to call `BeartypeValidator.__init__` but got `typing.Union[typing.Callable[[Named(text, typing.Any)], bool], typing.Dict[str, typing.Callable[[Named(text, typing.Any)], bool]], str]`.",
    "message": " Expected `typing.Callable[[object], bool]` for 2nd positional only parameter to call `BeartypeValidator.__init__` but got `typing.Union[typing.Callable[[Named(text, typing.Any)], bool], typing.Dict[str, typing.Callable[[Named(text, typing.Any)], bool]], str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 213,
    "warning_line": "            **kwargs_is_valid_get_repr",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    # Keyword arguments passing valid code, non-dictionary code locals, and a\n    # representer.\n    kwargs_is_valid_get_repr = dict(\n        get_repr='Spread far around and inaccessibly',\n        **kwargs_is_valid\n    )\n\n    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n    # valid code and code locals but a diagnoser of an invalid type raises\n    # the expected exception.\n    with raises(BeartypeValeSubscriptionException):\n        BeartypeValidator(\n            get_diagnosis='The veil of life and death? or do I lie',\n            **kwargs_is_valid_get_repr\n        )\n\n    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n    # valid code and code locals but a C-based diagnoser raises the expected\n    # exception.\n    with raises(BeartypeValeSubscriptionException):\n        BeartypeValidator(get_diagnosis=next, **kwargs_is_valid_get_repr)\n\n    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n    # valid code and code locals but a pure-Python diagnoser accepting no\n    # parameters raises the expected exception.\n    with raises(BeartypeValeSubscriptionException):\n        BeartypeValidator(\n            get_diagnosis=lambda: (\n                'In dream, and does the mightier world of sleep'),\n            **kwargs_is_valid_get_repr\n        )\n",
        "source_code_len": 1337,
        "target_code": "\n    #FIXME: Uncomment when inevitably needed again. *sigh*\n    # # Keyword arguments passing valid code, non-dictionary code locals, and a\n    # # representer.\n    # kwargs_is_valid_get_repr = dict(\n    #     get_repr='Spread far around and inaccessibly',\n    #     **kwargs_is_valid\n    # )\n",
        "target_code_len": 293,
        "diff_format": "@@ -199,32 +176,8 @@\n \n-    # Keyword arguments passing valid code, non-dictionary code locals, and a\n-    # representer.\n-    kwargs_is_valid_get_repr = dict(\n-        get_repr='Spread far around and inaccessibly',\n-        **kwargs_is_valid\n-    )\n-\n-    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n-    # valid code and code locals but a diagnoser of an invalid type raises\n-    # the expected exception.\n-    with raises(BeartypeValeSubscriptionException):\n-        BeartypeValidator(\n-            get_diagnosis='The veil of life and death? or do I lie',\n-            **kwargs_is_valid_get_repr\n-        )\n-\n-    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n-    # valid code and code locals but a C-based diagnoser raises the expected\n-    # exception.\n-    with raises(BeartypeValeSubscriptionException):\n-        BeartypeValidator(get_diagnosis=next, **kwargs_is_valid_get_repr)\n-\n-    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n-    # valid code and code locals but a pure-Python diagnoser accepting no\n-    # parameters raises the expected exception.\n-    with raises(BeartypeValeSubscriptionException):\n-        BeartypeValidator(\n-            get_diagnosis=lambda: (\n-                'In dream, and does the mightier world of sleep'),\n-            **kwargs_is_valid_get_repr\n-        )\n+    #FIXME: Uncomment when inevitably needed again. *sigh*\n+    # # Keyword arguments passing valid code, non-dictionary code locals, and a\n+    # # representer.\n+    # kwargs_is_valid_get_repr = dict(\n+    #     get_repr='Spread far around and inaccessibly',\n+    #     **kwargs_is_valid\n+    # )\n",
        "source_code_with_indent": "\n    # Keyword arguments passing valid code, non-dictionary code locals, and a\n    # representer.\n    <DED>kwargs_is_valid_get_repr = dict(\n        get_repr='Spread far around and inaccessibly',\n        **kwargs_is_valid\n    )\n\n    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n    # valid code and code locals but a diagnoser of an invalid type raises\n    # the expected exception.\n    with raises(BeartypeValeSubscriptionException):\n        <IND>BeartypeValidator(\n            get_diagnosis='The veil of life and death? or do I lie',\n            **kwargs_is_valid_get_repr\n        )\n\n    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n    # valid code and code locals but a C-based diagnoser raises the expected\n    # exception.\n    <DED>with raises(BeartypeValeSubscriptionException):\n        <IND>BeartypeValidator(get_diagnosis=next, **kwargs_is_valid_get_repr)\n\n    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n    # valid code and code locals but a pure-Python diagnoser accepting no\n    # parameters raises the expected exception.\n    <DED>with raises(BeartypeValeSubscriptionException):\n        <IND>BeartypeValidator(\n            get_diagnosis=lambda: (\n                'In dream, and does the mightier world of sleep'),\n            **kwargs_is_valid_get_repr\n        )\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    #FIXME: Uncomment when inevitably needed again. *sigh*\n    # # Keyword arguments passing valid code, non-dictionary code locals, and a\n    # # representer.\n    # kwargs_is_valid_get_repr = dict(\n    #     get_repr='Spread far around and inaccessibly',\n    #     **kwargs_is_valid\n    # )\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "beartype/beartype",
    "commit": "e7c8bcf9ffa49d29b0d4f489a203a3d47244002e",
    "filename": "beartype_test/a00_unit/a20_api/vale/_core/test_valecore.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/beartype-beartype/beartype_test/a00_unit/a20_api/vale/_core/test_valecore.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "beartype_test/a00_unit/a20_api/vale/_core/test_valecore.py:213:14 Incompatible parameter type [6]: Expected `typing.Dict[str, typing.Any]` for 2nd positional only parameter to call `BeartypeValidator.__init__` but got `typing.Union[typing.Callable[[Named(text, typing.Any)], bool], typing.Dict[str, typing.Callable[[Named(text, typing.Any)], bool]], str]`.",
    "message": " Expected `typing.Dict[str, typing.Any]` for 2nd positional only parameter to call `BeartypeValidator.__init__` but got `typing.Union[typing.Callable[[Named(text, typing.Any)], bool], typing.Dict[str, typing.Callable[[Named(text, typing.Any)], bool]], str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 213,
    "warning_line": "            **kwargs_is_valid_get_repr",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    # Keyword arguments passing valid code, non-dictionary code locals, and a\n    # representer.\n    kwargs_is_valid_get_repr = dict(\n        get_repr='Spread far around and inaccessibly',\n        **kwargs_is_valid\n    )\n\n    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n    # valid code and code locals but a diagnoser of an invalid type raises\n    # the expected exception.\n    with raises(BeartypeValeSubscriptionException):\n        BeartypeValidator(\n            get_diagnosis='The veil of life and death? or do I lie',\n            **kwargs_is_valid_get_repr\n        )\n\n    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n    # valid code and code locals but a C-based diagnoser raises the expected\n    # exception.\n    with raises(BeartypeValeSubscriptionException):\n        BeartypeValidator(get_diagnosis=next, **kwargs_is_valid_get_repr)\n\n    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n    # valid code and code locals but a pure-Python diagnoser accepting no\n    # parameters raises the expected exception.\n    with raises(BeartypeValeSubscriptionException):\n        BeartypeValidator(\n            get_diagnosis=lambda: (\n                'In dream, and does the mightier world of sleep'),\n            **kwargs_is_valid_get_repr\n        )\n",
        "source_code_len": 1337,
        "target_code": "\n    #FIXME: Uncomment when inevitably needed again. *sigh*\n    # # Keyword arguments passing valid code, non-dictionary code locals, and a\n    # # representer.\n    # kwargs_is_valid_get_repr = dict(\n    #     get_repr='Spread far around and inaccessibly',\n    #     **kwargs_is_valid\n    # )\n",
        "target_code_len": 293,
        "diff_format": "@@ -199,32 +176,8 @@\n \n-    # Keyword arguments passing valid code, non-dictionary code locals, and a\n-    # representer.\n-    kwargs_is_valid_get_repr = dict(\n-        get_repr='Spread far around and inaccessibly',\n-        **kwargs_is_valid\n-    )\n-\n-    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n-    # valid code and code locals but a diagnoser of an invalid type raises\n-    # the expected exception.\n-    with raises(BeartypeValeSubscriptionException):\n-        BeartypeValidator(\n-            get_diagnosis='The veil of life and death? or do I lie',\n-            **kwargs_is_valid_get_repr\n-        )\n-\n-    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n-    # valid code and code locals but a C-based diagnoser raises the expected\n-    # exception.\n-    with raises(BeartypeValeSubscriptionException):\n-        BeartypeValidator(get_diagnosis=next, **kwargs_is_valid_get_repr)\n-\n-    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n-    # valid code and code locals but a pure-Python diagnoser accepting no\n-    # parameters raises the expected exception.\n-    with raises(BeartypeValeSubscriptionException):\n-        BeartypeValidator(\n-            get_diagnosis=lambda: (\n-                'In dream, and does the mightier world of sleep'),\n-            **kwargs_is_valid_get_repr\n-        )\n+    #FIXME: Uncomment when inevitably needed again. *sigh*\n+    # # Keyword arguments passing valid code, non-dictionary code locals, and a\n+    # # representer.\n+    # kwargs_is_valid_get_repr = dict(\n+    #     get_repr='Spread far around and inaccessibly',\n+    #     **kwargs_is_valid\n+    # )\n",
        "source_code_with_indent": "\n    # Keyword arguments passing valid code, non-dictionary code locals, and a\n    # representer.\n    <DED>kwargs_is_valid_get_repr = dict(\n        get_repr='Spread far around and inaccessibly',\n        **kwargs_is_valid\n    )\n\n    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n    # valid code and code locals but a diagnoser of an invalid type raises\n    # the expected exception.\n    with raises(BeartypeValeSubscriptionException):\n        <IND>BeartypeValidator(\n            get_diagnosis='The veil of life and death? or do I lie',\n            **kwargs_is_valid_get_repr\n        )\n\n    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n    # valid code and code locals but a C-based diagnoser raises the expected\n    # exception.\n    <DED>with raises(BeartypeValeSubscriptionException):\n        <IND>BeartypeValidator(get_diagnosis=next, **kwargs_is_valid_get_repr)\n\n    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n    # valid code and code locals but a pure-Python diagnoser accepting no\n    # parameters raises the expected exception.\n    <DED>with raises(BeartypeValeSubscriptionException):\n        <IND>BeartypeValidator(\n            get_diagnosis=lambda: (\n                'In dream, and does the mightier world of sleep'),\n            **kwargs_is_valid_get_repr\n        )\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    #FIXME: Uncomment when inevitably needed again. *sigh*\n    # # Keyword arguments passing valid code, non-dictionary code locals, and a\n    # # representer.\n    # kwargs_is_valid_get_repr = dict(\n    #     get_repr='Spread far around and inaccessibly',\n    #     **kwargs_is_valid\n    # )\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "beartype/beartype",
    "commit": "e7c8bcf9ffa49d29b0d4f489a203a3d47244002e",
    "filename": "beartype_test/a00_unit/a20_api/vale/_core/test_valecore.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/beartype-beartype/beartype_test/a00_unit/a20_api/vale/_core/test_valecore.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "beartype_test/a00_unit/a20_api/vale/_core/test_valecore.py:213:14 Incompatible parameter type [6]: Expected `typing.Union[typing.Callable[[], str], str]` for 2nd positional only parameter to call `BeartypeValidator.__init__` but got `typing.Union[typing.Callable[[Named(text, typing.Any)], bool], typing.Dict[str, typing.Callable[[Named(text, typing.Any)], bool]], str]`.",
    "message": " Expected `typing.Union[typing.Callable[[], str], str]` for 2nd positional only parameter to call `BeartypeValidator.__init__` but got `typing.Union[typing.Callable[[Named(text, typing.Any)], bool], typing.Dict[str, typing.Callable[[Named(text, typing.Any)], bool]], str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 213,
    "warning_line": "            **kwargs_is_valid_get_repr",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    # Keyword arguments passing valid code, non-dictionary code locals, and a\n    # representer.\n    kwargs_is_valid_get_repr = dict(\n        get_repr='Spread far around and inaccessibly',\n        **kwargs_is_valid\n    )\n\n    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n    # valid code and code locals but a diagnoser of an invalid type raises\n    # the expected exception.\n    with raises(BeartypeValeSubscriptionException):\n        BeartypeValidator(\n            get_diagnosis='The veil of life and death? or do I lie',\n            **kwargs_is_valid_get_repr\n        )\n\n    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n    # valid code and code locals but a C-based diagnoser raises the expected\n    # exception.\n    with raises(BeartypeValeSubscriptionException):\n        BeartypeValidator(get_diagnosis=next, **kwargs_is_valid_get_repr)\n\n    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n    # valid code and code locals but a pure-Python diagnoser accepting no\n    # parameters raises the expected exception.\n    with raises(BeartypeValeSubscriptionException):\n        BeartypeValidator(\n            get_diagnosis=lambda: (\n                'In dream, and does the mightier world of sleep'),\n            **kwargs_is_valid_get_repr\n        )\n",
        "source_code_len": 1337,
        "target_code": "\n    #FIXME: Uncomment when inevitably needed again. *sigh*\n    # # Keyword arguments passing valid code, non-dictionary code locals, and a\n    # # representer.\n    # kwargs_is_valid_get_repr = dict(\n    #     get_repr='Spread far around and inaccessibly',\n    #     **kwargs_is_valid\n    # )\n",
        "target_code_len": 293,
        "diff_format": "@@ -199,32 +176,8 @@\n \n-    # Keyword arguments passing valid code, non-dictionary code locals, and a\n-    # representer.\n-    kwargs_is_valid_get_repr = dict(\n-        get_repr='Spread far around and inaccessibly',\n-        **kwargs_is_valid\n-    )\n-\n-    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n-    # valid code and code locals but a diagnoser of an invalid type raises\n-    # the expected exception.\n-    with raises(BeartypeValeSubscriptionException):\n-        BeartypeValidator(\n-            get_diagnosis='The veil of life and death? or do I lie',\n-            **kwargs_is_valid_get_repr\n-        )\n-\n-    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n-    # valid code and code locals but a C-based diagnoser raises the expected\n-    # exception.\n-    with raises(BeartypeValeSubscriptionException):\n-        BeartypeValidator(get_diagnosis=next, **kwargs_is_valid_get_repr)\n-\n-    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n-    # valid code and code locals but a pure-Python diagnoser accepting no\n-    # parameters raises the expected exception.\n-    with raises(BeartypeValeSubscriptionException):\n-        BeartypeValidator(\n-            get_diagnosis=lambda: (\n-                'In dream, and does the mightier world of sleep'),\n-            **kwargs_is_valid_get_repr\n-        )\n+    #FIXME: Uncomment when inevitably needed again. *sigh*\n+    # # Keyword arguments passing valid code, non-dictionary code locals, and a\n+    # # representer.\n+    # kwargs_is_valid_get_repr = dict(\n+    #     get_repr='Spread far around and inaccessibly',\n+    #     **kwargs_is_valid\n+    # )\n",
        "source_code_with_indent": "\n    # Keyword arguments passing valid code, non-dictionary code locals, and a\n    # representer.\n    <DED>kwargs_is_valid_get_repr = dict(\n        get_repr='Spread far around and inaccessibly',\n        **kwargs_is_valid\n    )\n\n    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n    # valid code and code locals but a diagnoser of an invalid type raises\n    # the expected exception.\n    with raises(BeartypeValeSubscriptionException):\n        <IND>BeartypeValidator(\n            get_diagnosis='The veil of life and death? or do I lie',\n            **kwargs_is_valid_get_repr\n        )\n\n    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n    # valid code and code locals but a C-based diagnoser raises the expected\n    # exception.\n    <DED>with raises(BeartypeValeSubscriptionException):\n        <IND>BeartypeValidator(get_diagnosis=next, **kwargs_is_valid_get_repr)\n\n    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n    # valid code and code locals but a pure-Python diagnoser accepting no\n    # parameters raises the expected exception.\n    <DED>with raises(BeartypeValeSubscriptionException):\n        <IND>BeartypeValidator(\n            get_diagnosis=lambda: (\n                'In dream, and does the mightier world of sleep'),\n            **kwargs_is_valid_get_repr\n        )\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    #FIXME: Uncomment when inevitably needed again. *sigh*\n    # # Keyword arguments passing valid code, non-dictionary code locals, and a\n    # # representer.\n    # kwargs_is_valid_get_repr = dict(\n    #     get_repr='Spread far around and inaccessibly',\n    #     **kwargs_is_valid\n    # )\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "beartype/beartype",
    "commit": "e7c8bcf9ffa49d29b0d4f489a203a3d47244002e",
    "filename": "beartype_test/a00_unit/a20_api/vale/_core/test_valecore.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/beartype-beartype/beartype_test/a00_unit/a20_api/vale/_core/test_valecore.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "beartype_test/a00_unit/a20_api/vale/_core/test_valecore.py:213:14 Incompatible parameter type [6]: Expected `str` for 2nd positional only parameter to call `BeartypeValidator.__init__` but got `typing.Union[typing.Callable[[Named(text, typing.Any)], bool], typing.Dict[str, typing.Callable[[Named(text, typing.Any)], bool]], str]`.",
    "message": " Expected `str` for 2nd positional only parameter to call `BeartypeValidator.__init__` but got `typing.Union[typing.Callable[[Named(text, typing.Any)], bool], typing.Dict[str, typing.Callable[[Named(text, typing.Any)], bool]], str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 213,
    "warning_line": "            **kwargs_is_valid_get_repr",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    # Keyword arguments passing valid code, non-dictionary code locals, and a\n    # representer.\n    kwargs_is_valid_get_repr = dict(\n        get_repr='Spread far around and inaccessibly',\n        **kwargs_is_valid\n    )\n\n    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n    # valid code and code locals but a diagnoser of an invalid type raises\n    # the expected exception.\n    with raises(BeartypeValeSubscriptionException):\n        BeartypeValidator(\n            get_diagnosis='The veil of life and death? or do I lie',\n            **kwargs_is_valid_get_repr\n        )\n\n    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n    # valid code and code locals but a C-based diagnoser raises the expected\n    # exception.\n    with raises(BeartypeValeSubscriptionException):\n        BeartypeValidator(get_diagnosis=next, **kwargs_is_valid_get_repr)\n\n    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n    # valid code and code locals but a pure-Python diagnoser accepting no\n    # parameters raises the expected exception.\n    with raises(BeartypeValeSubscriptionException):\n        BeartypeValidator(\n            get_diagnosis=lambda: (\n                'In dream, and does the mightier world of sleep'),\n            **kwargs_is_valid_get_repr\n        )\n",
        "source_code_len": 1337,
        "target_code": "\n    #FIXME: Uncomment when inevitably needed again. *sigh*\n    # # Keyword arguments passing valid code, non-dictionary code locals, and a\n    # # representer.\n    # kwargs_is_valid_get_repr = dict(\n    #     get_repr='Spread far around and inaccessibly',\n    #     **kwargs_is_valid\n    # )\n",
        "target_code_len": 293,
        "diff_format": "@@ -199,32 +176,8 @@\n \n-    # Keyword arguments passing valid code, non-dictionary code locals, and a\n-    # representer.\n-    kwargs_is_valid_get_repr = dict(\n-        get_repr='Spread far around and inaccessibly',\n-        **kwargs_is_valid\n-    )\n-\n-    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n-    # valid code and code locals but a diagnoser of an invalid type raises\n-    # the expected exception.\n-    with raises(BeartypeValeSubscriptionException):\n-        BeartypeValidator(\n-            get_diagnosis='The veil of life and death? or do I lie',\n-            **kwargs_is_valid_get_repr\n-        )\n-\n-    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n-    # valid code and code locals but a C-based diagnoser raises the expected\n-    # exception.\n-    with raises(BeartypeValeSubscriptionException):\n-        BeartypeValidator(get_diagnosis=next, **kwargs_is_valid_get_repr)\n-\n-    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n-    # valid code and code locals but a pure-Python diagnoser accepting no\n-    # parameters raises the expected exception.\n-    with raises(BeartypeValeSubscriptionException):\n-        BeartypeValidator(\n-            get_diagnosis=lambda: (\n-                'In dream, and does the mightier world of sleep'),\n-            **kwargs_is_valid_get_repr\n-        )\n+    #FIXME: Uncomment when inevitably needed again. *sigh*\n+    # # Keyword arguments passing valid code, non-dictionary code locals, and a\n+    # # representer.\n+    # kwargs_is_valid_get_repr = dict(\n+    #     get_repr='Spread far around and inaccessibly',\n+    #     **kwargs_is_valid\n+    # )\n",
        "source_code_with_indent": "\n    # Keyword arguments passing valid code, non-dictionary code locals, and a\n    # representer.\n    <DED>kwargs_is_valid_get_repr = dict(\n        get_repr='Spread far around and inaccessibly',\n        **kwargs_is_valid\n    )\n\n    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n    # valid code and code locals but a diagnoser of an invalid type raises\n    # the expected exception.\n    with raises(BeartypeValeSubscriptionException):\n        <IND>BeartypeValidator(\n            get_diagnosis='The veil of life and death? or do I lie',\n            **kwargs_is_valid_get_repr\n        )\n\n    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n    # valid code and code locals but a C-based diagnoser raises the expected\n    # exception.\n    <DED>with raises(BeartypeValeSubscriptionException):\n        <IND>BeartypeValidator(get_diagnosis=next, **kwargs_is_valid_get_repr)\n\n    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n    # valid code and code locals but a pure-Python diagnoser accepting no\n    # parameters raises the expected exception.\n    <DED>with raises(BeartypeValeSubscriptionException):\n        <IND>BeartypeValidator(\n            get_diagnosis=lambda: (\n                'In dream, and does the mightier world of sleep'),\n            **kwargs_is_valid_get_repr\n        )\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    #FIXME: Uncomment when inevitably needed again. *sigh*\n    # # Keyword arguments passing valid code, non-dictionary code locals, and a\n    # # representer.\n    # kwargs_is_valid_get_repr = dict(\n    #     get_repr='Spread far around and inaccessibly',\n    #     **kwargs_is_valid\n    # )\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "beartype/beartype",
    "commit": "e7c8bcf9ffa49d29b0d4f489a203a3d47244002e",
    "filename": "beartype_test/a00_unit/a20_api/vale/_core/test_valecore.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/beartype-beartype/beartype_test/a00_unit/a20_api/vale/_core/test_valecore.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "beartype_test/a00_unit/a20_api/vale/_core/test_valecore.py:220:48 Incompatible parameter type [6]: Expected `typing.Callable[[object], bool]` for 2nd positional only parameter to call `BeartypeValidator.__init__` but got `typing.Union[typing.Callable[[Named(text, typing.Any)], bool], typing.Dict[str, typing.Callable[[Named(text, typing.Any)], bool]], str]`.",
    "message": " Expected `typing.Callable[[object], bool]` for 2nd positional only parameter to call `BeartypeValidator.__init__` but got `typing.Union[typing.Callable[[Named(text, typing.Any)], bool], typing.Dict[str, typing.Callable[[Named(text, typing.Any)], bool]], str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 220,
    "warning_line": "        BeartypeValidator(get_diagnosis=next, **kwargs_is_valid_get_repr)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    # Keyword arguments passing valid code, non-dictionary code locals, and a\n    # representer.\n    kwargs_is_valid_get_repr = dict(\n        get_repr='Spread far around and inaccessibly',\n        **kwargs_is_valid\n    )\n\n    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n    # valid code and code locals but a diagnoser of an invalid type raises\n    # the expected exception.\n    with raises(BeartypeValeSubscriptionException):\n        BeartypeValidator(\n            get_diagnosis='The veil of life and death? or do I lie',\n            **kwargs_is_valid_get_repr\n        )\n\n    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n    # valid code and code locals but a C-based diagnoser raises the expected\n    # exception.\n    with raises(BeartypeValeSubscriptionException):\n        BeartypeValidator(get_diagnosis=next, **kwargs_is_valid_get_repr)\n\n    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n    # valid code and code locals but a pure-Python diagnoser accepting no\n    # parameters raises the expected exception.\n    with raises(BeartypeValeSubscriptionException):\n        BeartypeValidator(\n            get_diagnosis=lambda: (\n                'In dream, and does the mightier world of sleep'),\n            **kwargs_is_valid_get_repr\n        )\n",
        "source_code_len": 1337,
        "target_code": "\n    #FIXME: Uncomment when inevitably needed again. *sigh*\n    # # Keyword arguments passing valid code, non-dictionary code locals, and a\n    # # representer.\n    # kwargs_is_valid_get_repr = dict(\n    #     get_repr='Spread far around and inaccessibly',\n    #     **kwargs_is_valid\n    # )\n",
        "target_code_len": 293,
        "diff_format": "@@ -199,32 +176,8 @@\n \n-    # Keyword arguments passing valid code, non-dictionary code locals, and a\n-    # representer.\n-    kwargs_is_valid_get_repr = dict(\n-        get_repr='Spread far around and inaccessibly',\n-        **kwargs_is_valid\n-    )\n-\n-    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n-    # valid code and code locals but a diagnoser of an invalid type raises\n-    # the expected exception.\n-    with raises(BeartypeValeSubscriptionException):\n-        BeartypeValidator(\n-            get_diagnosis='The veil of life and death? or do I lie',\n-            **kwargs_is_valid_get_repr\n-        )\n-\n-    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n-    # valid code and code locals but a C-based diagnoser raises the expected\n-    # exception.\n-    with raises(BeartypeValeSubscriptionException):\n-        BeartypeValidator(get_diagnosis=next, **kwargs_is_valid_get_repr)\n-\n-    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n-    # valid code and code locals but a pure-Python diagnoser accepting no\n-    # parameters raises the expected exception.\n-    with raises(BeartypeValeSubscriptionException):\n-        BeartypeValidator(\n-            get_diagnosis=lambda: (\n-                'In dream, and does the mightier world of sleep'),\n-            **kwargs_is_valid_get_repr\n-        )\n+    #FIXME: Uncomment when inevitably needed again. *sigh*\n+    # # Keyword arguments passing valid code, non-dictionary code locals, and a\n+    # # representer.\n+    # kwargs_is_valid_get_repr = dict(\n+    #     get_repr='Spread far around and inaccessibly',\n+    #     **kwargs_is_valid\n+    # )\n",
        "source_code_with_indent": "\n    # Keyword arguments passing valid code, non-dictionary code locals, and a\n    # representer.\n    <DED>kwargs_is_valid_get_repr = dict(\n        get_repr='Spread far around and inaccessibly',\n        **kwargs_is_valid\n    )\n\n    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n    # valid code and code locals but a diagnoser of an invalid type raises\n    # the expected exception.\n    with raises(BeartypeValeSubscriptionException):\n        <IND>BeartypeValidator(\n            get_diagnosis='The veil of life and death? or do I lie',\n            **kwargs_is_valid_get_repr\n        )\n\n    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n    # valid code and code locals but a C-based diagnoser raises the expected\n    # exception.\n    <DED>with raises(BeartypeValeSubscriptionException):\n        <IND>BeartypeValidator(get_diagnosis=next, **kwargs_is_valid_get_repr)\n\n    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n    # valid code and code locals but a pure-Python diagnoser accepting no\n    # parameters raises the expected exception.\n    <DED>with raises(BeartypeValeSubscriptionException):\n        <IND>BeartypeValidator(\n            get_diagnosis=lambda: (\n                'In dream, and does the mightier world of sleep'),\n            **kwargs_is_valid_get_repr\n        )\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    #FIXME: Uncomment when inevitably needed again. *sigh*\n    # # Keyword arguments passing valid code, non-dictionary code locals, and a\n    # # representer.\n    # kwargs_is_valid_get_repr = dict(\n    #     get_repr='Spread far around and inaccessibly',\n    #     **kwargs_is_valid\n    # )\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "beartype/beartype",
    "commit": "e7c8bcf9ffa49d29b0d4f489a203a3d47244002e",
    "filename": "beartype_test/a00_unit/a20_api/vale/_core/test_valecore.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/beartype-beartype/beartype_test/a00_unit/a20_api/vale/_core/test_valecore.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "beartype_test/a00_unit/a20_api/vale/_core/test_valecore.py:220:48 Incompatible parameter type [6]: Expected `typing.Dict[str, typing.Any]` for 2nd positional only parameter to call `BeartypeValidator.__init__` but got `typing.Union[typing.Callable[[Named(text, typing.Any)], bool], typing.Dict[str, typing.Callable[[Named(text, typing.Any)], bool]], str]`.",
    "message": " Expected `typing.Dict[str, typing.Any]` for 2nd positional only parameter to call `BeartypeValidator.__init__` but got `typing.Union[typing.Callable[[Named(text, typing.Any)], bool], typing.Dict[str, typing.Callable[[Named(text, typing.Any)], bool]], str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 220,
    "warning_line": "        BeartypeValidator(get_diagnosis=next, **kwargs_is_valid_get_repr)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    # Keyword arguments passing valid code, non-dictionary code locals, and a\n    # representer.\n    kwargs_is_valid_get_repr = dict(\n        get_repr='Spread far around and inaccessibly',\n        **kwargs_is_valid\n    )\n\n    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n    # valid code and code locals but a diagnoser of an invalid type raises\n    # the expected exception.\n    with raises(BeartypeValeSubscriptionException):\n        BeartypeValidator(\n            get_diagnosis='The veil of life and death? or do I lie',\n            **kwargs_is_valid_get_repr\n        )\n\n    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n    # valid code and code locals but a C-based diagnoser raises the expected\n    # exception.\n    with raises(BeartypeValeSubscriptionException):\n        BeartypeValidator(get_diagnosis=next, **kwargs_is_valid_get_repr)\n\n    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n    # valid code and code locals but a pure-Python diagnoser accepting no\n    # parameters raises the expected exception.\n    with raises(BeartypeValeSubscriptionException):\n        BeartypeValidator(\n            get_diagnosis=lambda: (\n                'In dream, and does the mightier world of sleep'),\n            **kwargs_is_valid_get_repr\n        )\n",
        "source_code_len": 1337,
        "target_code": "\n    #FIXME: Uncomment when inevitably needed again. *sigh*\n    # # Keyword arguments passing valid code, non-dictionary code locals, and a\n    # # representer.\n    # kwargs_is_valid_get_repr = dict(\n    #     get_repr='Spread far around and inaccessibly',\n    #     **kwargs_is_valid\n    # )\n",
        "target_code_len": 293,
        "diff_format": "@@ -199,32 +176,8 @@\n \n-    # Keyword arguments passing valid code, non-dictionary code locals, and a\n-    # representer.\n-    kwargs_is_valid_get_repr = dict(\n-        get_repr='Spread far around and inaccessibly',\n-        **kwargs_is_valid\n-    )\n-\n-    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n-    # valid code and code locals but a diagnoser of an invalid type raises\n-    # the expected exception.\n-    with raises(BeartypeValeSubscriptionException):\n-        BeartypeValidator(\n-            get_diagnosis='The veil of life and death? or do I lie',\n-            **kwargs_is_valid_get_repr\n-        )\n-\n-    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n-    # valid code and code locals but a C-based diagnoser raises the expected\n-    # exception.\n-    with raises(BeartypeValeSubscriptionException):\n-        BeartypeValidator(get_diagnosis=next, **kwargs_is_valid_get_repr)\n-\n-    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n-    # valid code and code locals but a pure-Python diagnoser accepting no\n-    # parameters raises the expected exception.\n-    with raises(BeartypeValeSubscriptionException):\n-        BeartypeValidator(\n-            get_diagnosis=lambda: (\n-                'In dream, and does the mightier world of sleep'),\n-            **kwargs_is_valid_get_repr\n-        )\n+    #FIXME: Uncomment when inevitably needed again. *sigh*\n+    # # Keyword arguments passing valid code, non-dictionary code locals, and a\n+    # # representer.\n+    # kwargs_is_valid_get_repr = dict(\n+    #     get_repr='Spread far around and inaccessibly',\n+    #     **kwargs_is_valid\n+    # )\n",
        "source_code_with_indent": "\n    # Keyword arguments passing valid code, non-dictionary code locals, and a\n    # representer.\n    <DED>kwargs_is_valid_get_repr = dict(\n        get_repr='Spread far around and inaccessibly',\n        **kwargs_is_valid\n    )\n\n    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n    # valid code and code locals but a diagnoser of an invalid type raises\n    # the expected exception.\n    with raises(BeartypeValeSubscriptionException):\n        <IND>BeartypeValidator(\n            get_diagnosis='The veil of life and death? or do I lie',\n            **kwargs_is_valid_get_repr\n        )\n\n    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n    # valid code and code locals but a C-based diagnoser raises the expected\n    # exception.\n    <DED>with raises(BeartypeValeSubscriptionException):\n        <IND>BeartypeValidator(get_diagnosis=next, **kwargs_is_valid_get_repr)\n\n    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n    # valid code and code locals but a pure-Python diagnoser accepting no\n    # parameters raises the expected exception.\n    <DED>with raises(BeartypeValeSubscriptionException):\n        <IND>BeartypeValidator(\n            get_diagnosis=lambda: (\n                'In dream, and does the mightier world of sleep'),\n            **kwargs_is_valid_get_repr\n        )\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    #FIXME: Uncomment when inevitably needed again. *sigh*\n    # # Keyword arguments passing valid code, non-dictionary code locals, and a\n    # # representer.\n    # kwargs_is_valid_get_repr = dict(\n    #     get_repr='Spread far around and inaccessibly',\n    #     **kwargs_is_valid\n    # )\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "beartype/beartype",
    "commit": "e7c8bcf9ffa49d29b0d4f489a203a3d47244002e",
    "filename": "beartype_test/a00_unit/a20_api/vale/_core/test_valecore.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/beartype-beartype/beartype_test/a00_unit/a20_api/vale/_core/test_valecore.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "beartype_test/a00_unit/a20_api/vale/_core/test_valecore.py:220:48 Incompatible parameter type [6]: Expected `typing.Union[typing.Callable[[], str], str]` for 2nd positional only parameter to call `BeartypeValidator.__init__` but got `typing.Union[typing.Callable[[Named(text, typing.Any)], bool], typing.Dict[str, typing.Callable[[Named(text, typing.Any)], bool]], str]`.",
    "message": " Expected `typing.Union[typing.Callable[[], str], str]` for 2nd positional only parameter to call `BeartypeValidator.__init__` but got `typing.Union[typing.Callable[[Named(text, typing.Any)], bool], typing.Dict[str, typing.Callable[[Named(text, typing.Any)], bool]], str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 220,
    "warning_line": "        BeartypeValidator(get_diagnosis=next, **kwargs_is_valid_get_repr)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    # Keyword arguments passing valid code, non-dictionary code locals, and a\n    # representer.\n    kwargs_is_valid_get_repr = dict(\n        get_repr='Spread far around and inaccessibly',\n        **kwargs_is_valid\n    )\n\n    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n    # valid code and code locals but a diagnoser of an invalid type raises\n    # the expected exception.\n    with raises(BeartypeValeSubscriptionException):\n        BeartypeValidator(\n            get_diagnosis='The veil of life and death? or do I lie',\n            **kwargs_is_valid_get_repr\n        )\n\n    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n    # valid code and code locals but a C-based diagnoser raises the expected\n    # exception.\n    with raises(BeartypeValeSubscriptionException):\n        BeartypeValidator(get_diagnosis=next, **kwargs_is_valid_get_repr)\n\n    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n    # valid code and code locals but a pure-Python diagnoser accepting no\n    # parameters raises the expected exception.\n    with raises(BeartypeValeSubscriptionException):\n        BeartypeValidator(\n            get_diagnosis=lambda: (\n                'In dream, and does the mightier world of sleep'),\n            **kwargs_is_valid_get_repr\n        )\n",
        "source_code_len": 1337,
        "target_code": "\n    #FIXME: Uncomment when inevitably needed again. *sigh*\n    # # Keyword arguments passing valid code, non-dictionary code locals, and a\n    # # representer.\n    # kwargs_is_valid_get_repr = dict(\n    #     get_repr='Spread far around and inaccessibly',\n    #     **kwargs_is_valid\n    # )\n",
        "target_code_len": 293,
        "diff_format": "@@ -199,32 +176,8 @@\n \n-    # Keyword arguments passing valid code, non-dictionary code locals, and a\n-    # representer.\n-    kwargs_is_valid_get_repr = dict(\n-        get_repr='Spread far around and inaccessibly',\n-        **kwargs_is_valid\n-    )\n-\n-    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n-    # valid code and code locals but a diagnoser of an invalid type raises\n-    # the expected exception.\n-    with raises(BeartypeValeSubscriptionException):\n-        BeartypeValidator(\n-            get_diagnosis='The veil of life and death? or do I lie',\n-            **kwargs_is_valid_get_repr\n-        )\n-\n-    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n-    # valid code and code locals but a C-based diagnoser raises the expected\n-    # exception.\n-    with raises(BeartypeValeSubscriptionException):\n-        BeartypeValidator(get_diagnosis=next, **kwargs_is_valid_get_repr)\n-\n-    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n-    # valid code and code locals but a pure-Python diagnoser accepting no\n-    # parameters raises the expected exception.\n-    with raises(BeartypeValeSubscriptionException):\n-        BeartypeValidator(\n-            get_diagnosis=lambda: (\n-                'In dream, and does the mightier world of sleep'),\n-            **kwargs_is_valid_get_repr\n-        )\n+    #FIXME: Uncomment when inevitably needed again. *sigh*\n+    # # Keyword arguments passing valid code, non-dictionary code locals, and a\n+    # # representer.\n+    # kwargs_is_valid_get_repr = dict(\n+    #     get_repr='Spread far around and inaccessibly',\n+    #     **kwargs_is_valid\n+    # )\n",
        "source_code_with_indent": "\n    # Keyword arguments passing valid code, non-dictionary code locals, and a\n    # representer.\n    <DED>kwargs_is_valid_get_repr = dict(\n        get_repr='Spread far around and inaccessibly',\n        **kwargs_is_valid\n    )\n\n    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n    # valid code and code locals but a diagnoser of an invalid type raises\n    # the expected exception.\n    with raises(BeartypeValeSubscriptionException):\n        <IND>BeartypeValidator(\n            get_diagnosis='The veil of life and death? or do I lie',\n            **kwargs_is_valid_get_repr\n        )\n\n    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n    # valid code and code locals but a C-based diagnoser raises the expected\n    # exception.\n    <DED>with raises(BeartypeValeSubscriptionException):\n        <IND>BeartypeValidator(get_diagnosis=next, **kwargs_is_valid_get_repr)\n\n    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n    # valid code and code locals but a pure-Python diagnoser accepting no\n    # parameters raises the expected exception.\n    <DED>with raises(BeartypeValeSubscriptionException):\n        <IND>BeartypeValidator(\n            get_diagnosis=lambda: (\n                'In dream, and does the mightier world of sleep'),\n            **kwargs_is_valid_get_repr\n        )\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    #FIXME: Uncomment when inevitably needed again. *sigh*\n    # # Keyword arguments passing valid code, non-dictionary code locals, and a\n    # # representer.\n    # kwargs_is_valid_get_repr = dict(\n    #     get_repr='Spread far around and inaccessibly',\n    #     **kwargs_is_valid\n    # )\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "beartype/beartype",
    "commit": "e7c8bcf9ffa49d29b0d4f489a203a3d47244002e",
    "filename": "beartype_test/a00_unit/a20_api/vale/_core/test_valecore.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/beartype-beartype/beartype_test/a00_unit/a20_api/vale/_core/test_valecore.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "beartype_test/a00_unit/a20_api/vale/_core/test_valecore.py:220:48 Incompatible parameter type [6]: Expected `str` for 2nd positional only parameter to call `BeartypeValidator.__init__` but got `typing.Union[typing.Callable[[Named(text, typing.Any)], bool], typing.Dict[str, typing.Callable[[Named(text, typing.Any)], bool]], str]`.",
    "message": " Expected `str` for 2nd positional only parameter to call `BeartypeValidator.__init__` but got `typing.Union[typing.Callable[[Named(text, typing.Any)], bool], typing.Dict[str, typing.Callable[[Named(text, typing.Any)], bool]], str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 220,
    "warning_line": "        BeartypeValidator(get_diagnosis=next, **kwargs_is_valid_get_repr)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    # Keyword arguments passing valid code, non-dictionary code locals, and a\n    # representer.\n    kwargs_is_valid_get_repr = dict(\n        get_repr='Spread far around and inaccessibly',\n        **kwargs_is_valid\n    )\n\n    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n    # valid code and code locals but a diagnoser of an invalid type raises\n    # the expected exception.\n    with raises(BeartypeValeSubscriptionException):\n        BeartypeValidator(\n            get_diagnosis='The veil of life and death? or do I lie',\n            **kwargs_is_valid_get_repr\n        )\n\n    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n    # valid code and code locals but a C-based diagnoser raises the expected\n    # exception.\n    with raises(BeartypeValeSubscriptionException):\n        BeartypeValidator(get_diagnosis=next, **kwargs_is_valid_get_repr)\n\n    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n    # valid code and code locals but a pure-Python diagnoser accepting no\n    # parameters raises the expected exception.\n    with raises(BeartypeValeSubscriptionException):\n        BeartypeValidator(\n            get_diagnosis=lambda: (\n                'In dream, and does the mightier world of sleep'),\n            **kwargs_is_valid_get_repr\n        )\n",
        "source_code_len": 1337,
        "target_code": "\n    #FIXME: Uncomment when inevitably needed again. *sigh*\n    # # Keyword arguments passing valid code, non-dictionary code locals, and a\n    # # representer.\n    # kwargs_is_valid_get_repr = dict(\n    #     get_repr='Spread far around and inaccessibly',\n    #     **kwargs_is_valid\n    # )\n",
        "target_code_len": 293,
        "diff_format": "@@ -199,32 +176,8 @@\n \n-    # Keyword arguments passing valid code, non-dictionary code locals, and a\n-    # representer.\n-    kwargs_is_valid_get_repr = dict(\n-        get_repr='Spread far around and inaccessibly',\n-        **kwargs_is_valid\n-    )\n-\n-    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n-    # valid code and code locals but a diagnoser of an invalid type raises\n-    # the expected exception.\n-    with raises(BeartypeValeSubscriptionException):\n-        BeartypeValidator(\n-            get_diagnosis='The veil of life and death? or do I lie',\n-            **kwargs_is_valid_get_repr\n-        )\n-\n-    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n-    # valid code and code locals but a C-based diagnoser raises the expected\n-    # exception.\n-    with raises(BeartypeValeSubscriptionException):\n-        BeartypeValidator(get_diagnosis=next, **kwargs_is_valid_get_repr)\n-\n-    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n-    # valid code and code locals but a pure-Python diagnoser accepting no\n-    # parameters raises the expected exception.\n-    with raises(BeartypeValeSubscriptionException):\n-        BeartypeValidator(\n-            get_diagnosis=lambda: (\n-                'In dream, and does the mightier world of sleep'),\n-            **kwargs_is_valid_get_repr\n-        )\n+    #FIXME: Uncomment when inevitably needed again. *sigh*\n+    # # Keyword arguments passing valid code, non-dictionary code locals, and a\n+    # # representer.\n+    # kwargs_is_valid_get_repr = dict(\n+    #     get_repr='Spread far around and inaccessibly',\n+    #     **kwargs_is_valid\n+    # )\n",
        "source_code_with_indent": "\n    # Keyword arguments passing valid code, non-dictionary code locals, and a\n    # representer.\n    <DED>kwargs_is_valid_get_repr = dict(\n        get_repr='Spread far around and inaccessibly',\n        **kwargs_is_valid\n    )\n\n    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n    # valid code and code locals but a diagnoser of an invalid type raises\n    # the expected exception.\n    with raises(BeartypeValeSubscriptionException):\n        <IND>BeartypeValidator(\n            get_diagnosis='The veil of life and death? or do I lie',\n            **kwargs_is_valid_get_repr\n        )\n\n    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n    # valid code and code locals but a C-based diagnoser raises the expected\n    # exception.\n    <DED>with raises(BeartypeValeSubscriptionException):\n        <IND>BeartypeValidator(get_diagnosis=next, **kwargs_is_valid_get_repr)\n\n    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n    # valid code and code locals but a pure-Python diagnoser accepting no\n    # parameters raises the expected exception.\n    <DED>with raises(BeartypeValeSubscriptionException):\n        <IND>BeartypeValidator(\n            get_diagnosis=lambda: (\n                'In dream, and does the mightier world of sleep'),\n            **kwargs_is_valid_get_repr\n        )\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    #FIXME: Uncomment when inevitably needed again. *sigh*\n    # # Keyword arguments passing valid code, non-dictionary code locals, and a\n    # # representer.\n    # kwargs_is_valid_get_repr = dict(\n    #     get_repr='Spread far around and inaccessibly',\n    #     **kwargs_is_valid\n    # )\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "beartype/beartype",
    "commit": "e7c8bcf9ffa49d29b0d4f489a203a3d47244002e",
    "filename": "beartype_test/a00_unit/a20_api/vale/_core/test_valecore.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/beartype-beartype/beartype_test/a00_unit/a20_api/vale/_core/test_valecore.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "beartype_test/a00_unit/a20_api/vale/_core/test_valecore.py:227:12 Incompatible parameter type [6]: Expected `typing.Optional[typing.Callable[[BeartypeValidator, object, str], str]]` for 1st parameter `get_diagnosis` to call `BeartypeValidator.__init__` but got `typing.Callable[[], str]`.",
    "message": " Expected `typing.Optional[typing.Callable[[BeartypeValidator, object, str], str]]` for 1st parameter `get_diagnosis` to call `BeartypeValidator.__init__` but got `typing.Callable[[], str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 227,
    "warning_line": "            get_diagnosis=lambda: (",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    # Keyword arguments passing valid code, non-dictionary code locals, and a\n    # representer.\n    kwargs_is_valid_get_repr = dict(\n        get_repr='Spread far around and inaccessibly',\n        **kwargs_is_valid\n    )\n\n    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n    # valid code and code locals but a diagnoser of an invalid type raises\n    # the expected exception.\n    with raises(BeartypeValeSubscriptionException):\n        BeartypeValidator(\n            get_diagnosis='The veil of life and death? or do I lie',\n            **kwargs_is_valid_get_repr\n        )\n\n    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n    # valid code and code locals but a C-based diagnoser raises the expected\n    # exception.\n    with raises(BeartypeValeSubscriptionException):\n        BeartypeValidator(get_diagnosis=next, **kwargs_is_valid_get_repr)\n\n    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n    # valid code and code locals but a pure-Python diagnoser accepting no\n    # parameters raises the expected exception.\n    with raises(BeartypeValeSubscriptionException):\n        BeartypeValidator(\n            get_diagnosis=lambda: (\n                'In dream, and does the mightier world of sleep'),\n            **kwargs_is_valid_get_repr\n        )\n",
        "source_code_len": 1337,
        "target_code": "\n    #FIXME: Uncomment when inevitably needed again. *sigh*\n    # # Keyword arguments passing valid code, non-dictionary code locals, and a\n    # # representer.\n    # kwargs_is_valid_get_repr = dict(\n    #     get_repr='Spread far around and inaccessibly',\n    #     **kwargs_is_valid\n    # )\n",
        "target_code_len": 293,
        "diff_format": "@@ -199,32 +176,8 @@\n \n-    # Keyword arguments passing valid code, non-dictionary code locals, and a\n-    # representer.\n-    kwargs_is_valid_get_repr = dict(\n-        get_repr='Spread far around and inaccessibly',\n-        **kwargs_is_valid\n-    )\n-\n-    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n-    # valid code and code locals but a diagnoser of an invalid type raises\n-    # the expected exception.\n-    with raises(BeartypeValeSubscriptionException):\n-        BeartypeValidator(\n-            get_diagnosis='The veil of life and death? or do I lie',\n-            **kwargs_is_valid_get_repr\n-        )\n-\n-    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n-    # valid code and code locals but a C-based diagnoser raises the expected\n-    # exception.\n-    with raises(BeartypeValeSubscriptionException):\n-        BeartypeValidator(get_diagnosis=next, **kwargs_is_valid_get_repr)\n-\n-    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n-    # valid code and code locals but a pure-Python diagnoser accepting no\n-    # parameters raises the expected exception.\n-    with raises(BeartypeValeSubscriptionException):\n-        BeartypeValidator(\n-            get_diagnosis=lambda: (\n-                'In dream, and does the mightier world of sleep'),\n-            **kwargs_is_valid_get_repr\n-        )\n+    #FIXME: Uncomment when inevitably needed again. *sigh*\n+    # # Keyword arguments passing valid code, non-dictionary code locals, and a\n+    # # representer.\n+    # kwargs_is_valid_get_repr = dict(\n+    #     get_repr='Spread far around and inaccessibly',\n+    #     **kwargs_is_valid\n+    # )\n",
        "source_code_with_indent": "\n    # Keyword arguments passing valid code, non-dictionary code locals, and a\n    # representer.\n    <DED>kwargs_is_valid_get_repr = dict(\n        get_repr='Spread far around and inaccessibly',\n        **kwargs_is_valid\n    )\n\n    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n    # valid code and code locals but a diagnoser of an invalid type raises\n    # the expected exception.\n    with raises(BeartypeValeSubscriptionException):\n        <IND>BeartypeValidator(\n            get_diagnosis='The veil of life and death? or do I lie',\n            **kwargs_is_valid_get_repr\n        )\n\n    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n    # valid code and code locals but a C-based diagnoser raises the expected\n    # exception.\n    <DED>with raises(BeartypeValeSubscriptionException):\n        <IND>BeartypeValidator(get_diagnosis=next, **kwargs_is_valid_get_repr)\n\n    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n    # valid code and code locals but a pure-Python diagnoser accepting no\n    # parameters raises the expected exception.\n    <DED>with raises(BeartypeValeSubscriptionException):\n        <IND>BeartypeValidator(\n            get_diagnosis=lambda: (\n                'In dream, and does the mightier world of sleep'),\n            **kwargs_is_valid_get_repr\n        )\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    #FIXME: Uncomment when inevitably needed again. *sigh*\n    # # Keyword arguments passing valid code, non-dictionary code locals, and a\n    # # representer.\n    # kwargs_is_valid_get_repr = dict(\n    #     get_repr='Spread far around and inaccessibly',\n    #     **kwargs_is_valid\n    # )\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "beartype/beartype",
    "commit": "e7c8bcf9ffa49d29b0d4f489a203a3d47244002e",
    "filename": "beartype_test/a00_unit/a20_api/vale/_core/test_valecore.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/beartype-beartype/beartype_test/a00_unit/a20_api/vale/_core/test_valecore.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "beartype_test/a00_unit/a20_api/vale/_core/test_valecore.py:229:14 Incompatible parameter type [6]: Expected `typing.Callable[[object], bool]` for 2nd positional only parameter to call `BeartypeValidator.__init__` but got `typing.Union[typing.Callable[[Named(text, typing.Any)], bool], typing.Dict[str, typing.Callable[[Named(text, typing.Any)], bool]], str]`.",
    "message": " Expected `typing.Callable[[object], bool]` for 2nd positional only parameter to call `BeartypeValidator.__init__` but got `typing.Union[typing.Callable[[Named(text, typing.Any)], bool], typing.Dict[str, typing.Callable[[Named(text, typing.Any)], bool]], str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 229,
    "warning_line": "            **kwargs_is_valid_get_repr",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    # Keyword arguments passing valid code, non-dictionary code locals, and a\n    # representer.\n    kwargs_is_valid_get_repr = dict(\n        get_repr='Spread far around and inaccessibly',\n        **kwargs_is_valid\n    )\n\n    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n    # valid code and code locals but a diagnoser of an invalid type raises\n    # the expected exception.\n    with raises(BeartypeValeSubscriptionException):\n        BeartypeValidator(\n            get_diagnosis='The veil of life and death? or do I lie',\n            **kwargs_is_valid_get_repr\n        )\n\n    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n    # valid code and code locals but a C-based diagnoser raises the expected\n    # exception.\n    with raises(BeartypeValeSubscriptionException):\n        BeartypeValidator(get_diagnosis=next, **kwargs_is_valid_get_repr)\n\n    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n    # valid code and code locals but a pure-Python diagnoser accepting no\n    # parameters raises the expected exception.\n    with raises(BeartypeValeSubscriptionException):\n        BeartypeValidator(\n            get_diagnosis=lambda: (\n                'In dream, and does the mightier world of sleep'),\n            **kwargs_is_valid_get_repr\n        )\n",
        "source_code_len": 1337,
        "target_code": "\n    #FIXME: Uncomment when inevitably needed again. *sigh*\n    # # Keyword arguments passing valid code, non-dictionary code locals, and a\n    # # representer.\n    # kwargs_is_valid_get_repr = dict(\n    #     get_repr='Spread far around and inaccessibly',\n    #     **kwargs_is_valid\n    # )\n",
        "target_code_len": 293,
        "diff_format": "@@ -199,32 +176,8 @@\n \n-    # Keyword arguments passing valid code, non-dictionary code locals, and a\n-    # representer.\n-    kwargs_is_valid_get_repr = dict(\n-        get_repr='Spread far around and inaccessibly',\n-        **kwargs_is_valid\n-    )\n-\n-    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n-    # valid code and code locals but a diagnoser of an invalid type raises\n-    # the expected exception.\n-    with raises(BeartypeValeSubscriptionException):\n-        BeartypeValidator(\n-            get_diagnosis='The veil of life and death? or do I lie',\n-            **kwargs_is_valid_get_repr\n-        )\n-\n-    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n-    # valid code and code locals but a C-based diagnoser raises the expected\n-    # exception.\n-    with raises(BeartypeValeSubscriptionException):\n-        BeartypeValidator(get_diagnosis=next, **kwargs_is_valid_get_repr)\n-\n-    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n-    # valid code and code locals but a pure-Python diagnoser accepting no\n-    # parameters raises the expected exception.\n-    with raises(BeartypeValeSubscriptionException):\n-        BeartypeValidator(\n-            get_diagnosis=lambda: (\n-                'In dream, and does the mightier world of sleep'),\n-            **kwargs_is_valid_get_repr\n-        )\n+    #FIXME: Uncomment when inevitably needed again. *sigh*\n+    # # Keyword arguments passing valid code, non-dictionary code locals, and a\n+    # # representer.\n+    # kwargs_is_valid_get_repr = dict(\n+    #     get_repr='Spread far around and inaccessibly',\n+    #     **kwargs_is_valid\n+    # )\n",
        "source_code_with_indent": "\n    # Keyword arguments passing valid code, non-dictionary code locals, and a\n    # representer.\n    <DED>kwargs_is_valid_get_repr = dict(\n        get_repr='Spread far around and inaccessibly',\n        **kwargs_is_valid\n    )\n\n    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n    # valid code and code locals but a diagnoser of an invalid type raises\n    # the expected exception.\n    with raises(BeartypeValeSubscriptionException):\n        <IND>BeartypeValidator(\n            get_diagnosis='The veil of life and death? or do I lie',\n            **kwargs_is_valid_get_repr\n        )\n\n    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n    # valid code and code locals but a C-based diagnoser raises the expected\n    # exception.\n    <DED>with raises(BeartypeValeSubscriptionException):\n        <IND>BeartypeValidator(get_diagnosis=next, **kwargs_is_valid_get_repr)\n\n    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n    # valid code and code locals but a pure-Python diagnoser accepting no\n    # parameters raises the expected exception.\n    <DED>with raises(BeartypeValeSubscriptionException):\n        <IND>BeartypeValidator(\n            get_diagnosis=lambda: (\n                'In dream, and does the mightier world of sleep'),\n            **kwargs_is_valid_get_repr\n        )\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    #FIXME: Uncomment when inevitably needed again. *sigh*\n    # # Keyword arguments passing valid code, non-dictionary code locals, and a\n    # # representer.\n    # kwargs_is_valid_get_repr = dict(\n    #     get_repr='Spread far around and inaccessibly',\n    #     **kwargs_is_valid\n    # )\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "beartype/beartype",
    "commit": "e7c8bcf9ffa49d29b0d4f489a203a3d47244002e",
    "filename": "beartype_test/a00_unit/a20_api/vale/_core/test_valecore.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/beartype-beartype/beartype_test/a00_unit/a20_api/vale/_core/test_valecore.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "beartype_test/a00_unit/a20_api/vale/_core/test_valecore.py:229:14 Incompatible parameter type [6]: Expected `typing.Dict[str, typing.Any]` for 2nd positional only parameter to call `BeartypeValidator.__init__` but got `typing.Union[typing.Callable[[Named(text, typing.Any)], bool], typing.Dict[str, typing.Callable[[Named(text, typing.Any)], bool]], str]`.",
    "message": " Expected `typing.Dict[str, typing.Any]` for 2nd positional only parameter to call `BeartypeValidator.__init__` but got `typing.Union[typing.Callable[[Named(text, typing.Any)], bool], typing.Dict[str, typing.Callable[[Named(text, typing.Any)], bool]], str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 229,
    "warning_line": "            **kwargs_is_valid_get_repr",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    # Keyword arguments passing valid code, non-dictionary code locals, and a\n    # representer.\n    kwargs_is_valid_get_repr = dict(\n        get_repr='Spread far around and inaccessibly',\n        **kwargs_is_valid\n    )\n\n    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n    # valid code and code locals but a diagnoser of an invalid type raises\n    # the expected exception.\n    with raises(BeartypeValeSubscriptionException):\n        BeartypeValidator(\n            get_diagnosis='The veil of life and death? or do I lie',\n            **kwargs_is_valid_get_repr\n        )\n\n    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n    # valid code and code locals but a C-based diagnoser raises the expected\n    # exception.\n    with raises(BeartypeValeSubscriptionException):\n        BeartypeValidator(get_diagnosis=next, **kwargs_is_valid_get_repr)\n\n    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n    # valid code and code locals but a pure-Python diagnoser accepting no\n    # parameters raises the expected exception.\n    with raises(BeartypeValeSubscriptionException):\n        BeartypeValidator(\n            get_diagnosis=lambda: (\n                'In dream, and does the mightier world of sleep'),\n            **kwargs_is_valid_get_repr\n        )\n",
        "source_code_len": 1337,
        "target_code": "\n    #FIXME: Uncomment when inevitably needed again. *sigh*\n    # # Keyword arguments passing valid code, non-dictionary code locals, and a\n    # # representer.\n    # kwargs_is_valid_get_repr = dict(\n    #     get_repr='Spread far around and inaccessibly',\n    #     **kwargs_is_valid\n    # )\n",
        "target_code_len": 293,
        "diff_format": "@@ -199,32 +176,8 @@\n \n-    # Keyword arguments passing valid code, non-dictionary code locals, and a\n-    # representer.\n-    kwargs_is_valid_get_repr = dict(\n-        get_repr='Spread far around and inaccessibly',\n-        **kwargs_is_valid\n-    )\n-\n-    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n-    # valid code and code locals but a diagnoser of an invalid type raises\n-    # the expected exception.\n-    with raises(BeartypeValeSubscriptionException):\n-        BeartypeValidator(\n-            get_diagnosis='The veil of life and death? or do I lie',\n-            **kwargs_is_valid_get_repr\n-        )\n-\n-    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n-    # valid code and code locals but a C-based diagnoser raises the expected\n-    # exception.\n-    with raises(BeartypeValeSubscriptionException):\n-        BeartypeValidator(get_diagnosis=next, **kwargs_is_valid_get_repr)\n-\n-    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n-    # valid code and code locals but a pure-Python diagnoser accepting no\n-    # parameters raises the expected exception.\n-    with raises(BeartypeValeSubscriptionException):\n-        BeartypeValidator(\n-            get_diagnosis=lambda: (\n-                'In dream, and does the mightier world of sleep'),\n-            **kwargs_is_valid_get_repr\n-        )\n+    #FIXME: Uncomment when inevitably needed again. *sigh*\n+    # # Keyword arguments passing valid code, non-dictionary code locals, and a\n+    # # representer.\n+    # kwargs_is_valid_get_repr = dict(\n+    #     get_repr='Spread far around and inaccessibly',\n+    #     **kwargs_is_valid\n+    # )\n",
        "source_code_with_indent": "\n    # Keyword arguments passing valid code, non-dictionary code locals, and a\n    # representer.\n    <DED>kwargs_is_valid_get_repr = dict(\n        get_repr='Spread far around and inaccessibly',\n        **kwargs_is_valid\n    )\n\n    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n    # valid code and code locals but a diagnoser of an invalid type raises\n    # the expected exception.\n    with raises(BeartypeValeSubscriptionException):\n        <IND>BeartypeValidator(\n            get_diagnosis='The veil of life and death? or do I lie',\n            **kwargs_is_valid_get_repr\n        )\n\n    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n    # valid code and code locals but a C-based diagnoser raises the expected\n    # exception.\n    <DED>with raises(BeartypeValeSubscriptionException):\n        <IND>BeartypeValidator(get_diagnosis=next, **kwargs_is_valid_get_repr)\n\n    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n    # valid code and code locals but a pure-Python diagnoser accepting no\n    # parameters raises the expected exception.\n    <DED>with raises(BeartypeValeSubscriptionException):\n        <IND>BeartypeValidator(\n            get_diagnosis=lambda: (\n                'In dream, and does the mightier world of sleep'),\n            **kwargs_is_valid_get_repr\n        )\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    #FIXME: Uncomment when inevitably needed again. *sigh*\n    # # Keyword arguments passing valid code, non-dictionary code locals, and a\n    # # representer.\n    # kwargs_is_valid_get_repr = dict(\n    #     get_repr='Spread far around and inaccessibly',\n    #     **kwargs_is_valid\n    # )\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "beartype/beartype",
    "commit": "e7c8bcf9ffa49d29b0d4f489a203a3d47244002e",
    "filename": "beartype_test/a00_unit/a20_api/vale/_core/test_valecore.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/beartype-beartype/beartype_test/a00_unit/a20_api/vale/_core/test_valecore.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "beartype_test/a00_unit/a20_api/vale/_core/test_valecore.py:229:14 Incompatible parameter type [6]: Expected `typing.Union[typing.Callable[[], str], str]` for 2nd positional only parameter to call `BeartypeValidator.__init__` but got `typing.Union[typing.Callable[[Named(text, typing.Any)], bool], typing.Dict[str, typing.Callable[[Named(text, typing.Any)], bool]], str]`.",
    "message": " Expected `typing.Union[typing.Callable[[], str], str]` for 2nd positional only parameter to call `BeartypeValidator.__init__` but got `typing.Union[typing.Callable[[Named(text, typing.Any)], bool], typing.Dict[str, typing.Callable[[Named(text, typing.Any)], bool]], str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 229,
    "warning_line": "            **kwargs_is_valid_get_repr",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    # Keyword arguments passing valid code, non-dictionary code locals, and a\n    # representer.\n    kwargs_is_valid_get_repr = dict(\n        get_repr='Spread far around and inaccessibly',\n        **kwargs_is_valid\n    )\n\n    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n    # valid code and code locals but a diagnoser of an invalid type raises\n    # the expected exception.\n    with raises(BeartypeValeSubscriptionException):\n        BeartypeValidator(\n            get_diagnosis='The veil of life and death? or do I lie',\n            **kwargs_is_valid_get_repr\n        )\n\n    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n    # valid code and code locals but a C-based diagnoser raises the expected\n    # exception.\n    with raises(BeartypeValeSubscriptionException):\n        BeartypeValidator(get_diagnosis=next, **kwargs_is_valid_get_repr)\n\n    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n    # valid code and code locals but a pure-Python diagnoser accepting no\n    # parameters raises the expected exception.\n    with raises(BeartypeValeSubscriptionException):\n        BeartypeValidator(\n            get_diagnosis=lambda: (\n                'In dream, and does the mightier world of sleep'),\n            **kwargs_is_valid_get_repr\n        )\n",
        "source_code_len": 1337,
        "target_code": "\n    #FIXME: Uncomment when inevitably needed again. *sigh*\n    # # Keyword arguments passing valid code, non-dictionary code locals, and a\n    # # representer.\n    # kwargs_is_valid_get_repr = dict(\n    #     get_repr='Spread far around and inaccessibly',\n    #     **kwargs_is_valid\n    # )\n",
        "target_code_len": 293,
        "diff_format": "@@ -199,32 +176,8 @@\n \n-    # Keyword arguments passing valid code, non-dictionary code locals, and a\n-    # representer.\n-    kwargs_is_valid_get_repr = dict(\n-        get_repr='Spread far around and inaccessibly',\n-        **kwargs_is_valid\n-    )\n-\n-    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n-    # valid code and code locals but a diagnoser of an invalid type raises\n-    # the expected exception.\n-    with raises(BeartypeValeSubscriptionException):\n-        BeartypeValidator(\n-            get_diagnosis='The veil of life and death? or do I lie',\n-            **kwargs_is_valid_get_repr\n-        )\n-\n-    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n-    # valid code and code locals but a C-based diagnoser raises the expected\n-    # exception.\n-    with raises(BeartypeValeSubscriptionException):\n-        BeartypeValidator(get_diagnosis=next, **kwargs_is_valid_get_repr)\n-\n-    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n-    # valid code and code locals but a pure-Python diagnoser accepting no\n-    # parameters raises the expected exception.\n-    with raises(BeartypeValeSubscriptionException):\n-        BeartypeValidator(\n-            get_diagnosis=lambda: (\n-                'In dream, and does the mightier world of sleep'),\n-            **kwargs_is_valid_get_repr\n-        )\n+    #FIXME: Uncomment when inevitably needed again. *sigh*\n+    # # Keyword arguments passing valid code, non-dictionary code locals, and a\n+    # # representer.\n+    # kwargs_is_valid_get_repr = dict(\n+    #     get_repr='Spread far around and inaccessibly',\n+    #     **kwargs_is_valid\n+    # )\n",
        "source_code_with_indent": "\n    # Keyword arguments passing valid code, non-dictionary code locals, and a\n    # representer.\n    <DED>kwargs_is_valid_get_repr = dict(\n        get_repr='Spread far around and inaccessibly',\n        **kwargs_is_valid\n    )\n\n    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n    # valid code and code locals but a diagnoser of an invalid type raises\n    # the expected exception.\n    with raises(BeartypeValeSubscriptionException):\n        <IND>BeartypeValidator(\n            get_diagnosis='The veil of life and death? or do I lie',\n            **kwargs_is_valid_get_repr\n        )\n\n    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n    # valid code and code locals but a C-based diagnoser raises the expected\n    # exception.\n    <DED>with raises(BeartypeValeSubscriptionException):\n        <IND>BeartypeValidator(get_diagnosis=next, **kwargs_is_valid_get_repr)\n\n    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n    # valid code and code locals but a pure-Python diagnoser accepting no\n    # parameters raises the expected exception.\n    <DED>with raises(BeartypeValeSubscriptionException):\n        <IND>BeartypeValidator(\n            get_diagnosis=lambda: (\n                'In dream, and does the mightier world of sleep'),\n            **kwargs_is_valid_get_repr\n        )\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    #FIXME: Uncomment when inevitably needed again. *sigh*\n    # # Keyword arguments passing valid code, non-dictionary code locals, and a\n    # # representer.\n    # kwargs_is_valid_get_repr = dict(\n    #     get_repr='Spread far around and inaccessibly',\n    #     **kwargs_is_valid\n    # )\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "beartype/beartype",
    "commit": "e7c8bcf9ffa49d29b0d4f489a203a3d47244002e",
    "filename": "beartype_test/a00_unit/a20_api/vale/_core/test_valecore.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/beartype-beartype/beartype_test/a00_unit/a20_api/vale/_core/test_valecore.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "beartype_test/a00_unit/a20_api/vale/_core/test_valecore.py:229:14 Incompatible parameter type [6]: Expected `str` for 2nd positional only parameter to call `BeartypeValidator.__init__` but got `typing.Union[typing.Callable[[Named(text, typing.Any)], bool], typing.Dict[str, typing.Callable[[Named(text, typing.Any)], bool]], str]`.",
    "message": " Expected `str` for 2nd positional only parameter to call `BeartypeValidator.__init__` but got `typing.Union[typing.Callable[[Named(text, typing.Any)], bool], typing.Dict[str, typing.Callable[[Named(text, typing.Any)], bool]], str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 229,
    "warning_line": "            **kwargs_is_valid_get_repr",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    # Keyword arguments passing valid code, non-dictionary code locals, and a\n    # representer.\n    kwargs_is_valid_get_repr = dict(\n        get_repr='Spread far around and inaccessibly',\n        **kwargs_is_valid\n    )\n\n    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n    # valid code and code locals but a diagnoser of an invalid type raises\n    # the expected exception.\n    with raises(BeartypeValeSubscriptionException):\n        BeartypeValidator(\n            get_diagnosis='The veil of life and death? or do I lie',\n            **kwargs_is_valid_get_repr\n        )\n\n    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n    # valid code and code locals but a C-based diagnoser raises the expected\n    # exception.\n    with raises(BeartypeValeSubscriptionException):\n        BeartypeValidator(get_diagnosis=next, **kwargs_is_valid_get_repr)\n\n    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n    # valid code and code locals but a pure-Python diagnoser accepting no\n    # parameters raises the expected exception.\n    with raises(BeartypeValeSubscriptionException):\n        BeartypeValidator(\n            get_diagnosis=lambda: (\n                'In dream, and does the mightier world of sleep'),\n            **kwargs_is_valid_get_repr\n        )\n",
        "source_code_len": 1337,
        "target_code": "\n    #FIXME: Uncomment when inevitably needed again. *sigh*\n    # # Keyword arguments passing valid code, non-dictionary code locals, and a\n    # # representer.\n    # kwargs_is_valid_get_repr = dict(\n    #     get_repr='Spread far around and inaccessibly',\n    #     **kwargs_is_valid\n    # )\n",
        "target_code_len": 293,
        "diff_format": "@@ -199,32 +176,8 @@\n \n-    # Keyword arguments passing valid code, non-dictionary code locals, and a\n-    # representer.\n-    kwargs_is_valid_get_repr = dict(\n-        get_repr='Spread far around and inaccessibly',\n-        **kwargs_is_valid\n-    )\n-\n-    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n-    # valid code and code locals but a diagnoser of an invalid type raises\n-    # the expected exception.\n-    with raises(BeartypeValeSubscriptionException):\n-        BeartypeValidator(\n-            get_diagnosis='The veil of life and death? or do I lie',\n-            **kwargs_is_valid_get_repr\n-        )\n-\n-    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n-    # valid code and code locals but a C-based diagnoser raises the expected\n-    # exception.\n-    with raises(BeartypeValeSubscriptionException):\n-        BeartypeValidator(get_diagnosis=next, **kwargs_is_valid_get_repr)\n-\n-    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n-    # valid code and code locals but a pure-Python diagnoser accepting no\n-    # parameters raises the expected exception.\n-    with raises(BeartypeValeSubscriptionException):\n-        BeartypeValidator(\n-            get_diagnosis=lambda: (\n-                'In dream, and does the mightier world of sleep'),\n-            **kwargs_is_valid_get_repr\n-        )\n+    #FIXME: Uncomment when inevitably needed again. *sigh*\n+    # # Keyword arguments passing valid code, non-dictionary code locals, and a\n+    # # representer.\n+    # kwargs_is_valid_get_repr = dict(\n+    #     get_repr='Spread far around and inaccessibly',\n+    #     **kwargs_is_valid\n+    # )\n",
        "source_code_with_indent": "\n    # Keyword arguments passing valid code, non-dictionary code locals, and a\n    # representer.\n    <DED>kwargs_is_valid_get_repr = dict(\n        get_repr='Spread far around and inaccessibly',\n        **kwargs_is_valid\n    )\n\n    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n    # valid code and code locals but a diagnoser of an invalid type raises\n    # the expected exception.\n    with raises(BeartypeValeSubscriptionException):\n        <IND>BeartypeValidator(\n            get_diagnosis='The veil of life and death? or do I lie',\n            **kwargs_is_valid_get_repr\n        )\n\n    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n    # valid code and code locals but a C-based diagnoser raises the expected\n    # exception.\n    <DED>with raises(BeartypeValeSubscriptionException):\n        <IND>BeartypeValidator(get_diagnosis=next, **kwargs_is_valid_get_repr)\n\n    # Assert that attempting to instantiate the \"BeartypeValidator\" class with\n    # valid code and code locals but a pure-Python diagnoser accepting no\n    # parameters raises the expected exception.\n    <DED>with raises(BeartypeValeSubscriptionException):\n        <IND>BeartypeValidator(\n            get_diagnosis=lambda: (\n                'In dream, and does the mightier world of sleep'),\n            **kwargs_is_valid_get_repr\n        )\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    #FIXME: Uncomment when inevitably needed again. *sigh*\n    # # Keyword arguments passing valid code, non-dictionary code locals, and a\n    # # representer.\n    # kwargs_is_valid_get_repr = dict(\n    #     get_repr='Spread far around and inaccessibly',\n    #     **kwargs_is_valid\n    # )\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]