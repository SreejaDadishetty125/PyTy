[
  {
    "project": "miurahr/py7zr",
    "commit": "bc2e1b5833f04074a5cd1f5071f7d586a675a85b",
    "filename": "py7zr/compression.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/miurahr-py7zr/py7zr/compression.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "py7zr/compression.py:156:42 Incompatible parameter type [6]: Expected `Union[BufferHandler, FileHandler, NullHandler]` for 3rd positional only parameter to call `Worker.decompress` but got `Union[typing.Type[NullHandler], BufferHandler, FileHandler, NullHandler]`.",
    "message": " Expected `Union[BufferHandler, FileHandler, NullHandler]` for 3rd positional only parameter to call `Worker.decompress` but got `Union[typing.Type[NullHandler], BufferHandler, FileHandler, NullHandler]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 156,
    "warning_line": "            self.decompress(fp, f.folder, fileish, f.uncompressed[-1], f.compressed)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        for f in files:\n            # Skip empty file read\n            if f.emptystream:\n                fileish = self.target_filepath.get(f.id, None)\n                if fileish is not None:\n                    fileish.open()\n                    fileish.write(b'')\n                    fileish.close()\n                continue\n            fileish = self.target_filepath.get(f.id, NullHandler)\n            fileish.open()\n            self.decompress(fp, f.folder, fileish, f.uncompressed[-1], f.compressed)\n            fileish.close()\n",
        "source_code_len": 533,
        "target_code": "        for f in files:\n            fileish = self.target_filepath.get(f.id, NullHandler())  # type: Handler\n            fileish.open()\n            # Skip empty file read\n            if f.emptystream:\n                fileish.write(b'')\n            else:\n                self.decompress(fp, f.folder, fileish, f.uncompressed[-1], f.compressed)\n            fileish.close()\n",
        "target_code_len": 371,
        "diff_format": "@@ -145,13 +145,9 @@\n         for f in files:\n+            fileish = self.target_filepath.get(f.id, NullHandler())  # type: Handler\n+            fileish.open()\n             # Skip empty file read\n             if f.emptystream:\n-                fileish = self.target_filepath.get(f.id, None)\n-                if fileish is not None:\n-                    fileish.open()\n-                    fileish.write(b'')\n-                    fileish.close()\n-                continue\n-            fileish = self.target_filepath.get(f.id, NullHandler)\n-            fileish.open()\n-            self.decompress(fp, f.folder, fileish, f.uncompressed[-1], f.compressed)\n+                fileish.write(b'')\n+            else:\n+                self.decompress(fp, f.folder, fileish, f.uncompressed[-1], f.compressed)\n             fileish.close()\n",
        "source_code_with_indent": "        for f in files:\n            # Skip empty file read\n            <IND>if f.emptystream:\n                <IND>fileish = self.target_filepath.get(f.id, None)\n                if fileish is not None:\n                    <IND>fileish.open()\n                    fileish.write(b'')\n                    fileish.close()\n                <DED>continue\n            <DED>fileish = self.target_filepath.get(f.id, NullHandler)\n            fileish.open()\n            self.decompress(fp, f.folder, fileish, f.uncompressed[-1], f.compressed)\n            fileish.close()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        for f in files:\n            <IND>fileish = self.target_filepath.get(f.id, NullHandler())  # type: Handler\n            fileish.open()\n            # Skip empty file read\n            if f.emptystream:\n                <IND>fileish.write(b'')\n            <DED>else:\n                <IND>self.decompress(fp, f.folder, fileish, f.uncompressed[-1], f.compressed)\n            <DED>fileish.close()\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "miurahr/py7zr",
    "commit": "bc2e1b5833f04074a5cd1f5071f7d586a675a85b",
    "filename": "py7zr/compression.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/miurahr-py7zr/py7zr/compression.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "py7zr/compression.py:191:51 Incompatible parameter type [6]: Expected `Union[BufferHandler, FileHandler, NullHandler]` for 3rd positional only parameter to call `Worker.compress` but got `Union[None, BufferHandler, FileHandler, NullHandler]`.",
    "message": " Expected `Union[BufferHandler, FileHandler, NullHandler]` for 3rd positional only parameter to call `Worker.compress` but got `Union[None, BufferHandler, FileHandler, NullHandler]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 191,
    "warning_line": "                length = self.compress(fp, folder, target)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            if not f['emptystream']:\n                target = self.target_filepath.get(f.id, None)\n                target.open()\n",
        "source_code_len": 129,
        "target_code": "            if not f['emptystream']:\n                target = self.target_filepath.get(f.id, NullHandler())  # type: Handler\n                target.open()\n",
        "target_code_len": 155,
        "diff_format": "@@ -188,3 +184,3 @@\n             if not f['emptystream']:\n-                target = self.target_filepath.get(f.id, None)\n+                target = self.target_filepath.get(f.id, NullHandler())  # type: Handler\n                 target.open()\n",
        "source_code_with_indent": "            <IND>if not f['emptystream']:\n                <IND>target = self.target_filepath.get(f.id, None)\n                target.open()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <IND>if not f['emptystream']:\n                <IND>target = self.target_filepath.get(f.id, NullHandler())  # type: Handler\n                target.open()\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "miurahr/py7zr",
    "commit": "bc2e1b5833f04074a5cd1f5071f7d586a675a85b",
    "filename": "py7zr/compression.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/miurahr-py7zr/py7zr/compression.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "py7zr/compression.py:217:53 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `FileHandler.__init__` but got `Union[BinaryIO, str]`.",
    "message": " Expected `str` for 1st positional only parameter to call `FileHandler.__init__` but got `Union[BinaryIO, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 217,
    "warning_line": "            self.set_output_filepath(id, FileHandler(fileish))",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            self.set_output_filepath(id, BufferHandler(fileish))\n        else:\n            self.set_output_filepath(id, FileHandler(fileish))\n\n",
        "source_code_len": 143,
        "target_code": "            self.set_output_filepath(id, BufferHandler(fileish))\n        elif isinstance(fileish, str):\n            self.set_output_filepath(id, FileHandler(fileish))\n        else:\n            raise\n\n",
        "target_code_len": 200,
        "diff_format": "@@ -215,4 +211,6 @@\n             self.set_output_filepath(id, BufferHandler(fileish))\n-        else:\n+        elif isinstance(fileish, str):\n             self.set_output_filepath(id, FileHandler(fileish))\n+        else:\n+            raise\n \n",
        "source_code_with_indent": "            <IND>self.set_output_filepath(id, BufferHandler(fileish))\n        <DED>else:\n            <IND>self.set_output_filepath(id, FileHandler(fileish))\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <IND>self.set_output_filepath(id, BufferHandler(fileish))\n        <DED>elif isinstance(fileish, str):\n            <IND>self.set_output_filepath(id, FileHandler(fileish))\n        <DED>else:\n            <IND>raise\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "miurahr/py7zr",
    "commit": "bc2e1b5833f04074a5cd1f5071f7d586a675a85b",
    "filename": "py7zr/compression.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/miurahr-py7zr/py7zr/compression.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "py7zr/compression.py:265:40 Unbound name [10]: Name `zlib` is used but not defined in the current scope.",
    "message": " Name `zlib` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 265,
    "warning_line": "                    self.decompressor = zlib.decompressobj(-15)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                if filter == self.FILTER_BZIP2:\n                    self.decompressor = bz2.BZ2Decompressor()\n                elif filter == self.FILTER_ZIP:\n                    self.decompressor = zlib.decompressobj(-15)\n                else:\n",
        "source_code_len": 244,
        "target_code": "                if filter == self.FILTER_BZIP2:\n                    self.decompressor = bz2.BZ2Decompressor()  # type: Union[bz2.BZ2Decompressor, lzma.LZMADecompressor]\n                else:\n",
        "target_code_len": 191,
        "diff_format": "@@ -262,5 +260,3 @@\n                 if filter == self.FILTER_BZIP2:\n-                    self.decompressor = bz2.BZ2Decompressor()\n-                elif filter == self.FILTER_ZIP:\n-                    self.decompressor = zlib.decompressobj(-15)\n+                    self.decompressor = bz2.BZ2Decompressor()  # type: Union[bz2.BZ2Decompressor, lzma.LZMADecompressor]\n                 else:\n",
        "source_code_with_indent": "                <IND>if filter == self.FILTER_BZIP2:\n                    <IND>self.decompressor = bz2.BZ2Decompressor()\n                <DED>elif filter == self.FILTER_ZIP:\n                    <IND>self.decompressor = zlib.decompressobj(-15)\n                <DED>else:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                <IND>if filter == self.FILTER_BZIP2:\n                    <IND>self.decompressor = bz2.BZ2Decompressor()  # type: Union[bz2.BZ2Decompressor, lzma.LZMADecompressor]\n                <DED>else:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "miurahr/py7zr",
    "commit": "bc2e1b5833f04074a5cd1f5071f7d586a675a85b",
    "filename": "py7zr/py7zr.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/miurahr-py7zr/py7zr/py7zr.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "py7zr/py7zr.py:228:12 Incompatible attribute type [8]: Attribute `fp` declared in class `SevenZipFile` has type `BinaryIO` but is used as type `None`.",
    "message": " Attribute `fp` declared in class `SevenZipFile` has type `BinaryIO` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 228,
    "warning_line": "            self.fp = None",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "            fp = self.fp\n            self.fp = None\n            self._fpclose(fp)\n",
        "source_code_len": 82,
        "target_code": "            fp = self.fp\n            self._fpclose(fp)\n",
        "target_code_len": 55,
        "diff_format": "@@ -227,3 +227,2 @@\n             fp = self.fp\n-            self.fp = None\n             self._fpclose(fp)\n",
        "source_code_with_indent": "            <IND>fp = self.fp\n            self.fp = None\n            self._fpclose(fp)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <IND>fp = self.fp\n            self._fpclose(fp)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "miurahr/py7zr",
    "commit": "bc2e1b5833f04074a5cd1f5071f7d586a675a85b",
    "filename": "py7zr/py7zr.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/miurahr-py7zr/py7zr/py7zr.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "py7zr/py7zr.py:638:48 Incompatible parameter type [6]: Expected `BinaryIO` for 1st parameter `fp` to call `SevenZipFile._check_7zfile` but got `Union[BinaryIO, str]`.",
    "message": " Expected `BinaryIO` for 1st parameter `fp` to call `SevenZipFile._check_7zfile` but got `Union[BinaryIO, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 638,
    "warning_line": "            result = SevenZipFile._check_7zfile(fp=file)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    try:\n        if hasattr(file, \"read\"):\n            result = SevenZipFile._check_7zfile(fp=file)\n            file.seek(-len(MAGIC_7Z), 1)\n        else:\n            with open(file, \"rb\") as fp:\n                result = SevenZipFile._check_7zfile(fp)\n    except OSError:\n",
        "source_code_len": 272,
        "target_code": "    try:\n        if isinstance(file, io.IOBase) and hasattr(file, \"read\"):\n            result = SevenZipFile._check_7zfile(file)\n            file.seek(-len(MAGIC_7Z), 1)\n        elif isinstance(file, str):\n            with open(file, \"rb\") as fp:\n                result = SevenZipFile._check_7zfile(fp)\n        else:\n            raise\n    except OSError:\n",
        "target_code_len": 355,
        "diff_format": "@@ -636,8 +639,10 @@\n     try:\n-        if hasattr(file, \"read\"):\n-            result = SevenZipFile._check_7zfile(fp=file)\n+        if isinstance(file, io.IOBase) and hasattr(file, \"read\"):\n+            result = SevenZipFile._check_7zfile(file)\n             file.seek(-len(MAGIC_7Z), 1)\n-        else:\n+        elif isinstance(file, str):\n             with open(file, \"rb\") as fp:\n                 result = SevenZipFile._check_7zfile(fp)\n+        else:\n+            raise\n     except OSError:\n",
        "source_code_with_indent": "    try:\n        <IND>if hasattr(file, \"read\"):\n            <IND>result = SevenZipFile._check_7zfile(fp=file)\n            file.seek(-len(MAGIC_7Z), 1)\n        <DED>else:\n            <IND>with open(file, \"rb\") as fp:\n                <IND>result = SevenZipFile._check_7zfile(fp)\n    <DED><DED><DED>except OSError:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    try:\n        <IND>if isinstance(file, io.IOBase) and hasattr(file, \"read\"):\n            <IND>result = SevenZipFile._check_7zfile(file)\n            file.seek(-len(MAGIC_7Z), 1)\n        <DED>elif isinstance(file, str):\n            <IND>with open(file, \"rb\") as fp:\n                <IND>result = SevenZipFile._check_7zfile(fp)\n        <DED><DED>else:\n            <IND>raise\n    <DED><DED>except OSError:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "miurahr/py7zr",
    "commit": "bc2e1b5833f04074a5cd1f5071f7d586a675a85b",
    "filename": "py7zr/py7zr.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/miurahr-py7zr/py7zr/py7zr.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "py7zr/py7zr.py:641:22 Incompatible parameter type [6]: Expected `Union[os.PathLike[bytes], os.PathLike[str], bytes, int, str]` for 1st positional only parameter to call `open` but got `Union[BinaryIO, str]`.",
    "message": " Expected `Union[os.PathLike[bytes], os.PathLike[str], bytes, int, str]` for 1st positional only parameter to call `open` but got `Union[BinaryIO, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 641,
    "warning_line": "            with open(file, \"rb\") as fp:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    try:\n        if hasattr(file, \"read\"):\n            result = SevenZipFile._check_7zfile(fp=file)\n            file.seek(-len(MAGIC_7Z), 1)\n        else:\n            with open(file, \"rb\") as fp:\n                result = SevenZipFile._check_7zfile(fp)\n    except OSError:\n",
        "source_code_len": 272,
        "target_code": "    try:\n        if isinstance(file, io.IOBase) and hasattr(file, \"read\"):\n            result = SevenZipFile._check_7zfile(file)\n            file.seek(-len(MAGIC_7Z), 1)\n        elif isinstance(file, str):\n            with open(file, \"rb\") as fp:\n                result = SevenZipFile._check_7zfile(fp)\n        else:\n            raise\n    except OSError:\n",
        "target_code_len": 355,
        "diff_format": "@@ -636,8 +639,10 @@\n     try:\n-        if hasattr(file, \"read\"):\n-            result = SevenZipFile._check_7zfile(fp=file)\n+        if isinstance(file, io.IOBase) and hasattr(file, \"read\"):\n+            result = SevenZipFile._check_7zfile(file)\n             file.seek(-len(MAGIC_7Z), 1)\n-        else:\n+        elif isinstance(file, str):\n             with open(file, \"rb\") as fp:\n                 result = SevenZipFile._check_7zfile(fp)\n+        else:\n+            raise\n     except OSError:\n",
        "source_code_with_indent": "    try:\n        <IND>if hasattr(file, \"read\"):\n            <IND>result = SevenZipFile._check_7zfile(fp=file)\n            file.seek(-len(MAGIC_7Z), 1)\n        <DED>else:\n            <IND>with open(file, \"rb\") as fp:\n                <IND>result = SevenZipFile._check_7zfile(fp)\n    <DED><DED><DED>except OSError:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    try:\n        <IND>if isinstance(file, io.IOBase) and hasattr(file, \"read\"):\n            <IND>result = SevenZipFile._check_7zfile(file)\n            file.seek(-len(MAGIC_7Z), 1)\n        <DED>elif isinstance(file, str):\n            <IND>with open(file, \"rb\") as fp:\n                <IND>result = SevenZipFile._check_7zfile(fp)\n        <DED><DED>else:\n            <IND>raise\n    <DED><DED>except OSError:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]