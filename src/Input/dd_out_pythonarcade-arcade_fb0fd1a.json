[
  {
    "project": "pythonarcade/arcade",
    "commit": "fb0fd1ab2f1a5f3ddab501d057889a3eebee6aca",
    "filename": "arcade/earclip_module.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pythonarcade-arcade/arcade/earclip_module.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "arcade/earclip_module.py:23:4 Incompatible variable type [9]: polygon is declared to have type `List[Union[List[float], Tuple[float, float]]]` but is used as type `List[arcade.arcade_types.NamedPoint]`.",
    "message": " polygon is declared to have type `List[Union[List[float], Tuple[float, float]]]` but is used as type `List[arcade.arcade_types.NamedPoint]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 23,
    "warning_line": "    polygon = [NamedPoint(*point) for point in polygon]",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    polygon = [NamedPoint(*point) for point in polygon]\n\n",
        "source_code_len": 58,
        "target_code": "\n    polygon = [point for point in polygon]\n\n",
        "target_code_len": 45,
        "diff_format": "@@ -22,3 +22,3 @@\n \n-    polygon = [NamedPoint(*point) for point in polygon]\n+    polygon = [point for point in polygon]\n \n",
        "source_code_with_indent": "\n    polygon = [NamedPoint(*point) for point in polygon]\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    polygon = [point for point in polygon]\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pythonarcade/arcade",
    "commit": "fb0fd1ab2f1a5f3ddab501d057889a3eebee6aca",
    "filename": "arcade/earclip_module.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pythonarcade-arcade/arcade/earclip_module.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "arcade/earclip_module.py:25:21 Incompatible parameter type [6]: Expected `List[arcade.arcade_types.NamedPoint]` for 1st positional only parameter to call `_is_clockwise` but got `List[Union[List[float], Tuple[float, float]]]`.",
    "message": " Expected `List[arcade.arcade_types.NamedPoint]` for 1st positional only parameter to call `_is_clockwise` but got `List[Union[List[float], Tuple[float, float]]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 25,
    "warning_line": "    if _is_clockwise(polygon):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _is_clockwise(polygon: List[NamedPoint]):\n    s = 0\n    polygon_count = len(polygon)\n",
        "source_code_len": 90,
        "target_code": "\ndef _is_clockwise(polygon: List[Point]):\n    s = 0.0\n    polygon_count = len(polygon)\n",
        "target_code_len": 87,
        "diff_format": "@@ -68,4 +68,4 @@\n \n-def _is_clockwise(polygon: List[NamedPoint]):\n-    s = 0\n+def _is_clockwise(polygon: List[Point]):\n+    s = 0.0\n     polygon_count = len(polygon)\n",
        "source_code_with_indent": "\n<DED>def _is_clockwise(polygon: List[NamedPoint]):\n    <IND>s = 0\n    polygon_count = len(polygon)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def _is_clockwise(polygon: List[Point]):\n    <IND>s = 0.0\n    polygon_count = len(polygon)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pythonarcade/arcade",
    "commit": "fb0fd1ab2f1a5f3ddab501d057889a3eebee6aca",
    "filename": "arcade/earclip_module.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pythonarcade-arcade/arcade/earclip_module.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "arcade/earclip_module.py:36:19 Incompatible parameter type [6]: Expected `arcade.arcade_types.NamedPoint` for 1st positional only parameter to call `_is_ear` but got `Union[List[float], Tuple[float, float]]`.",
    "message": " Expected `arcade.arcade_types.NamedPoint` for 1st positional only parameter to call `_is_ear` but got `Union[List[float], Tuple[float, float]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 36,
    "warning_line": "        if _is_ear(prev_point, point, next_point, polygon):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _is_convex(prev: NamedPoint, point: NamedPoint, next_point: NamedPoint):\n    return _triangle_sum(prev.x, prev.y, point.x, point.y, next_point.x, next_point.y) < 0\n\n\ndef _is_ear(p1: NamedPoint, p2: NamedPoint, p3: NamedPoint, polygon: List[NamedPoint]):\n    ear = _contains_no_points(p1, p2, p3, polygon) and \\\n          _is_convex(p1, p2, p3) and \\\n          _triangle_area(p1.x, p1.y, p2.x, p2.y, p3.x, p3.y) > 0\n    return ear\n",
        "source_code_len": 435,
        "target_code": "\ndef _is_convex(prev: Point, point: Point, next_point: Point):\n    return _triangle_sum(prev[0], prev[1], point[0], point[1], next_point[0], next_point[1]) < 0\n\n\ndef _is_ear(p1: Point, p2: Point, p3: Point, polygon: List[Point]):\n    ear = _contains_no_points(p1, p2, p3, polygon) and \\\n          _is_convex(p1, p2, p3) and \\\n          _triangle_area(p1[0], p1[1], p2[0], p2[1], p3[0], p3[1]) > 0\n    return ear\n",
        "target_code_len": 412,
        "diff_format": "@@ -78,10 +78,10 @@\n \n-def _is_convex(prev: NamedPoint, point: NamedPoint, next_point: NamedPoint):\n-    return _triangle_sum(prev.x, prev.y, point.x, point.y, next_point.x, next_point.y) < 0\n+def _is_convex(prev: Point, point: Point, next_point: Point):\n+    return _triangle_sum(prev[0], prev[1], point[0], point[1], next_point[0], next_point[1]) < 0\n \n \n-def _is_ear(p1: NamedPoint, p2: NamedPoint, p3: NamedPoint, polygon: List[NamedPoint]):\n+def _is_ear(p1: Point, p2: Point, p3: Point, polygon: List[Point]):\n     ear = _contains_no_points(p1, p2, p3, polygon) and \\\n           _is_convex(p1, p2, p3) and \\\n-          _triangle_area(p1.x, p1.y, p2.x, p2.y, p3.x, p3.y) > 0\n+          _triangle_area(p1[0], p1[1], p2[0], p2[1], p3[0], p3[1]) > 0\n     return ear\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>def _is_convex(prev: NamedPoint, point: NamedPoint, next_point: NamedPoint):\n    <IND>return _triangle_sum(prev.x, prev.y, point.x, point.y, next_point.x, next_point.y) < 0\n\n\n<DED>def _is_ear(p1: NamedPoint, p2: NamedPoint, p3: NamedPoint, polygon: List[NamedPoint]):\n    <IND>ear = _contains_no_points(p1, p2, p3, polygon) and          _is_convex(p1, p2, p3) and          _triangle_area(p1.x, p1.y, p2.x, p2.y, p3.x, p3.y) > 0\n    return ear\n",
        "target_code_with_indent": "\n<DED>def _is_convex(prev: Point, point: Point, next_point: Point):\n    <IND>return _triangle_sum(prev[0], prev[1], point[0], point[1], next_point[0], next_point[1]) < 0\n\n\n<DED>def _is_ear(p1: Point, p2: Point, p3: Point, polygon: List[Point]):\n    <IND>ear = _contains_no_points(p1, p2, p3, polygon) and          _is_convex(p1, p2, p3) and          _triangle_area(p1[0], p1[1], p2[0], p2[1], p3[0], p3[1]) > 0\n    return ear\n"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _contains_no_points(p1: NamedPoint, p2: NamedPoint, p3: NamedPoint, polygon: List[NamedPoint]):\n    for pn in polygon:\n",
        "source_code_len": 124,
        "target_code": "\ndef _contains_no_points(p1: Point, p2: Point, p3: Point, polygon: List[Point]):\n    for pn in polygon:\n",
        "target_code_len": 104,
        "diff_format": "@@ -89,3 +89,3 @@\n \n-def _contains_no_points(p1: NamedPoint, p2: NamedPoint, p3: NamedPoint, polygon: List[NamedPoint]):\n+def _contains_no_points(p1: Point, p2: Point, p3: Point, polygon: List[Point]):\n     for pn in polygon:\n",
        "source_code_with_indent": "\n<DED>def _contains_no_points(p1: NamedPoint, p2: NamedPoint, p3: NamedPoint, polygon: List[NamedPoint]):\n    <IND>for pn in polygon:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def _contains_no_points(p1: Point, p2: Point, p3: Point, polygon: List[Point]):\n    <IND>for pn in polygon:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _is_point_inside(p: NamedPoint, a: NamedPoint, b: NamedPoint, c: NamedPoint):\n    area = _triangle_area(a.x, a.y, b.x, b.y, c.x, c.y)\n    area1 = _triangle_area(p.x, p.y, b.x, b.y, c.x, c.y)\n    area2 = _triangle_area(p.x, p.y, a.x, a.y, c.x, c.y)\n    area3 = _triangle_area(p.x, p.y, a.x, a.y, b.x, b.y)\n    return area == sum([area1, area2, area3])\n",
        "source_code_len": 356,
        "target_code": "\ndef _is_point_inside(p: Point, a: Point, b: Point, c: Point):\n    area = _triangle_area(a[0], a[1], b[0], b[1], c[0], c[1])\n    area1 = _triangle_area(p[0], p[1], b[0], b[1], c[0], c[1])\n    area2 = _triangle_area(p[0], p[1], a[0], a[1], c[0], c[1])\n    area3 = _triangle_area(p[0], p[1], a[0], a[1], b[0], b[1])\n    return area == sum([area1, area2, area3])\n",
        "target_code_len": 360,
        "diff_format": "@@ -98,7 +98,7 @@\n \n-def _is_point_inside(p: NamedPoint, a: NamedPoint, b: NamedPoint, c: NamedPoint):\n-    area = _triangle_area(a.x, a.y, b.x, b.y, c.x, c.y)\n-    area1 = _triangle_area(p.x, p.y, b.x, b.y, c.x, c.y)\n-    area2 = _triangle_area(p.x, p.y, a.x, a.y, c.x, c.y)\n-    area3 = _triangle_area(p.x, p.y, a.x, a.y, b.x, b.y)\n+def _is_point_inside(p: Point, a: Point, b: Point, c: Point):\n+    area = _triangle_area(a[0], a[1], b[0], b[1], c[0], c[1])\n+    area1 = _triangle_area(p[0], p[1], b[0], b[1], c[0], c[1])\n+    area2 = _triangle_area(p[0], p[1], a[0], a[1], c[0], c[1])\n+    area3 = _triangle_area(p[0], p[1], a[0], a[1], b[0], b[1])\n     return area == sum([area1, area2, area3])\n",
        "source_code_with_indent": "\n<DED>def _is_point_inside(p: NamedPoint, a: NamedPoint, b: NamedPoint, c: NamedPoint):\n    <IND>area = _triangle_area(a.x, a.y, b.x, b.y, c.x, c.y)\n    area1 = _triangle_area(p.x, p.y, b.x, b.y, c.x, c.y)\n    area2 = _triangle_area(p.x, p.y, a.x, a.y, c.x, c.y)\n    area3 = _triangle_area(p.x, p.y, a.x, a.y, b.x, b.y)\n    return area == sum([area1, area2, area3])\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def _is_point_inside(p: Point, a: Point, b: Point, c: Point):\n    <IND>area = _triangle_area(a[0], a[1], b[0], b[1], c[0], c[1])\n    area1 = _triangle_area(p[0], p[1], b[0], b[1], c[0], c[1])\n    area2 = _triangle_area(p[0], p[1], a[0], a[1], c[0], c[1])\n    area3 = _triangle_area(p[0], p[1], a[0], a[1], b[0], b[1])\n    return area == sum([area1, area2, area3])\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pythonarcade/arcade",
    "commit": "fb0fd1ab2f1a5f3ddab501d057889a3eebee6aca",
    "filename": "arcade/earclip_module.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pythonarcade-arcade/arcade/earclip_module.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "arcade/earclip_module.py:36:31 Incompatible parameter type [6]: Expected `arcade.arcade_types.NamedPoint` for 2nd positional only parameter to call `_is_ear` but got `Union[List[float], Tuple[float, float]]`.",
    "message": " Expected `arcade.arcade_types.NamedPoint` for 2nd positional only parameter to call `_is_ear` but got `Union[List[float], Tuple[float, float]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 36,
    "warning_line": "        if _is_ear(prev_point, point, next_point, polygon):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _is_convex(prev: NamedPoint, point: NamedPoint, next_point: NamedPoint):\n    return _triangle_sum(prev.x, prev.y, point.x, point.y, next_point.x, next_point.y) < 0\n\n\ndef _is_ear(p1: NamedPoint, p2: NamedPoint, p3: NamedPoint, polygon: List[NamedPoint]):\n    ear = _contains_no_points(p1, p2, p3, polygon) and \\\n          _is_convex(p1, p2, p3) and \\\n          _triangle_area(p1.x, p1.y, p2.x, p2.y, p3.x, p3.y) > 0\n    return ear\n",
        "source_code_len": 435,
        "target_code": "\ndef _is_convex(prev: Point, point: Point, next_point: Point):\n    return _triangle_sum(prev[0], prev[1], point[0], point[1], next_point[0], next_point[1]) < 0\n\n\ndef _is_ear(p1: Point, p2: Point, p3: Point, polygon: List[Point]):\n    ear = _contains_no_points(p1, p2, p3, polygon) and \\\n          _is_convex(p1, p2, p3) and \\\n          _triangle_area(p1[0], p1[1], p2[0], p2[1], p3[0], p3[1]) > 0\n    return ear\n",
        "target_code_len": 412,
        "diff_format": "@@ -78,10 +78,10 @@\n \n-def _is_convex(prev: NamedPoint, point: NamedPoint, next_point: NamedPoint):\n-    return _triangle_sum(prev.x, prev.y, point.x, point.y, next_point.x, next_point.y) < 0\n+def _is_convex(prev: Point, point: Point, next_point: Point):\n+    return _triangle_sum(prev[0], prev[1], point[0], point[1], next_point[0], next_point[1]) < 0\n \n \n-def _is_ear(p1: NamedPoint, p2: NamedPoint, p3: NamedPoint, polygon: List[NamedPoint]):\n+def _is_ear(p1: Point, p2: Point, p3: Point, polygon: List[Point]):\n     ear = _contains_no_points(p1, p2, p3, polygon) and \\\n           _is_convex(p1, p2, p3) and \\\n-          _triangle_area(p1.x, p1.y, p2.x, p2.y, p3.x, p3.y) > 0\n+          _triangle_area(p1[0], p1[1], p2[0], p2[1], p3[0], p3[1]) > 0\n     return ear\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>def _is_convex(prev: NamedPoint, point: NamedPoint, next_point: NamedPoint):\n    <IND>return _triangle_sum(prev.x, prev.y, point.x, point.y, next_point.x, next_point.y) < 0\n\n\n<DED>def _is_ear(p1: NamedPoint, p2: NamedPoint, p3: NamedPoint, polygon: List[NamedPoint]):\n    <IND>ear = _contains_no_points(p1, p2, p3, polygon) and          _is_convex(p1, p2, p3) and          _triangle_area(p1.x, p1.y, p2.x, p2.y, p3.x, p3.y) > 0\n    return ear\n",
        "target_code_with_indent": "\n<DED>def _is_convex(prev: Point, point: Point, next_point: Point):\n    <IND>return _triangle_sum(prev[0], prev[1], point[0], point[1], next_point[0], next_point[1]) < 0\n\n\n<DED>def _is_ear(p1: Point, p2: Point, p3: Point, polygon: List[Point]):\n    <IND>ear = _contains_no_points(p1, p2, p3, polygon) and          _is_convex(p1, p2, p3) and          _triangle_area(p1[0], p1[1], p2[0], p2[1], p3[0], p3[1]) > 0\n    return ear\n"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _contains_no_points(p1: NamedPoint, p2: NamedPoint, p3: NamedPoint, polygon: List[NamedPoint]):\n    for pn in polygon:\n",
        "source_code_len": 124,
        "target_code": "\ndef _contains_no_points(p1: Point, p2: Point, p3: Point, polygon: List[Point]):\n    for pn in polygon:\n",
        "target_code_len": 104,
        "diff_format": "@@ -89,3 +89,3 @@\n \n-def _contains_no_points(p1: NamedPoint, p2: NamedPoint, p3: NamedPoint, polygon: List[NamedPoint]):\n+def _contains_no_points(p1: Point, p2: Point, p3: Point, polygon: List[Point]):\n     for pn in polygon:\n",
        "source_code_with_indent": "\n<DED>def _contains_no_points(p1: NamedPoint, p2: NamedPoint, p3: NamedPoint, polygon: List[NamedPoint]):\n    <IND>for pn in polygon:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def _contains_no_points(p1: Point, p2: Point, p3: Point, polygon: List[Point]):\n    <IND>for pn in polygon:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _is_point_inside(p: NamedPoint, a: NamedPoint, b: NamedPoint, c: NamedPoint):\n    area = _triangle_area(a.x, a.y, b.x, b.y, c.x, c.y)\n    area1 = _triangle_area(p.x, p.y, b.x, b.y, c.x, c.y)\n    area2 = _triangle_area(p.x, p.y, a.x, a.y, c.x, c.y)\n    area3 = _triangle_area(p.x, p.y, a.x, a.y, b.x, b.y)\n    return area == sum([area1, area2, area3])\n",
        "source_code_len": 356,
        "target_code": "\ndef _is_point_inside(p: Point, a: Point, b: Point, c: Point):\n    area = _triangle_area(a[0], a[1], b[0], b[1], c[0], c[1])\n    area1 = _triangle_area(p[0], p[1], b[0], b[1], c[0], c[1])\n    area2 = _triangle_area(p[0], p[1], a[0], a[1], c[0], c[1])\n    area3 = _triangle_area(p[0], p[1], a[0], a[1], b[0], b[1])\n    return area == sum([area1, area2, area3])\n",
        "target_code_len": 360,
        "diff_format": "@@ -98,7 +98,7 @@\n \n-def _is_point_inside(p: NamedPoint, a: NamedPoint, b: NamedPoint, c: NamedPoint):\n-    area = _triangle_area(a.x, a.y, b.x, b.y, c.x, c.y)\n-    area1 = _triangle_area(p.x, p.y, b.x, b.y, c.x, c.y)\n-    area2 = _triangle_area(p.x, p.y, a.x, a.y, c.x, c.y)\n-    area3 = _triangle_area(p.x, p.y, a.x, a.y, b.x, b.y)\n+def _is_point_inside(p: Point, a: Point, b: Point, c: Point):\n+    area = _triangle_area(a[0], a[1], b[0], b[1], c[0], c[1])\n+    area1 = _triangle_area(p[0], p[1], b[0], b[1], c[0], c[1])\n+    area2 = _triangle_area(p[0], p[1], a[0], a[1], c[0], c[1])\n+    area3 = _triangle_area(p[0], p[1], a[0], a[1], b[0], b[1])\n     return area == sum([area1, area2, area3])\n",
        "source_code_with_indent": "\n<DED>def _is_point_inside(p: NamedPoint, a: NamedPoint, b: NamedPoint, c: NamedPoint):\n    <IND>area = _triangle_area(a.x, a.y, b.x, b.y, c.x, c.y)\n    area1 = _triangle_area(p.x, p.y, b.x, b.y, c.x, c.y)\n    area2 = _triangle_area(p.x, p.y, a.x, a.y, c.x, c.y)\n    area3 = _triangle_area(p.x, p.y, a.x, a.y, b.x, b.y)\n    return area == sum([area1, area2, area3])\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def _is_point_inside(p: Point, a: Point, b: Point, c: Point):\n    <IND>area = _triangle_area(a[0], a[1], b[0], b[1], c[0], c[1])\n    area1 = _triangle_area(p[0], p[1], b[0], b[1], c[0], c[1])\n    area2 = _triangle_area(p[0], p[1], a[0], a[1], c[0], c[1])\n    area3 = _triangle_area(p[0], p[1], a[0], a[1], b[0], b[1])\n    return area == sum([area1, area2, area3])\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pythonarcade/arcade",
    "commit": "fb0fd1ab2f1a5f3ddab501d057889a3eebee6aca",
    "filename": "arcade/earclip_module.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pythonarcade-arcade/arcade/earclip_module.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "arcade/earclip_module.py:36:38 Incompatible parameter type [6]: Expected `arcade.arcade_types.NamedPoint` for 3rd positional only parameter to call `_is_ear` but got `Union[List[float], Tuple[float, float]]`.",
    "message": " Expected `arcade.arcade_types.NamedPoint` for 3rd positional only parameter to call `_is_ear` but got `Union[List[float], Tuple[float, float]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 36,
    "warning_line": "        if _is_ear(prev_point, point, next_point, polygon):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _is_convex(prev: NamedPoint, point: NamedPoint, next_point: NamedPoint):\n    return _triangle_sum(prev.x, prev.y, point.x, point.y, next_point.x, next_point.y) < 0\n\n\ndef _is_ear(p1: NamedPoint, p2: NamedPoint, p3: NamedPoint, polygon: List[NamedPoint]):\n    ear = _contains_no_points(p1, p2, p3, polygon) and \\\n          _is_convex(p1, p2, p3) and \\\n          _triangle_area(p1.x, p1.y, p2.x, p2.y, p3.x, p3.y) > 0\n    return ear\n",
        "source_code_len": 435,
        "target_code": "\ndef _is_convex(prev: Point, point: Point, next_point: Point):\n    return _triangle_sum(prev[0], prev[1], point[0], point[1], next_point[0], next_point[1]) < 0\n\n\ndef _is_ear(p1: Point, p2: Point, p3: Point, polygon: List[Point]):\n    ear = _contains_no_points(p1, p2, p3, polygon) and \\\n          _is_convex(p1, p2, p3) and \\\n          _triangle_area(p1[0], p1[1], p2[0], p2[1], p3[0], p3[1]) > 0\n    return ear\n",
        "target_code_len": 412,
        "diff_format": "@@ -78,10 +78,10 @@\n \n-def _is_convex(prev: NamedPoint, point: NamedPoint, next_point: NamedPoint):\n-    return _triangle_sum(prev.x, prev.y, point.x, point.y, next_point.x, next_point.y) < 0\n+def _is_convex(prev: Point, point: Point, next_point: Point):\n+    return _triangle_sum(prev[0], prev[1], point[0], point[1], next_point[0], next_point[1]) < 0\n \n \n-def _is_ear(p1: NamedPoint, p2: NamedPoint, p3: NamedPoint, polygon: List[NamedPoint]):\n+def _is_ear(p1: Point, p2: Point, p3: Point, polygon: List[Point]):\n     ear = _contains_no_points(p1, p2, p3, polygon) and \\\n           _is_convex(p1, p2, p3) and \\\n-          _triangle_area(p1.x, p1.y, p2.x, p2.y, p3.x, p3.y) > 0\n+          _triangle_area(p1[0], p1[1], p2[0], p2[1], p3[0], p3[1]) > 0\n     return ear\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>def _is_convex(prev: NamedPoint, point: NamedPoint, next_point: NamedPoint):\n    <IND>return _triangle_sum(prev.x, prev.y, point.x, point.y, next_point.x, next_point.y) < 0\n\n\n<DED>def _is_ear(p1: NamedPoint, p2: NamedPoint, p3: NamedPoint, polygon: List[NamedPoint]):\n    <IND>ear = _contains_no_points(p1, p2, p3, polygon) and          _is_convex(p1, p2, p3) and          _triangle_area(p1.x, p1.y, p2.x, p2.y, p3.x, p3.y) > 0\n    return ear\n",
        "target_code_with_indent": "\n<DED>def _is_convex(prev: Point, point: Point, next_point: Point):\n    <IND>return _triangle_sum(prev[0], prev[1], point[0], point[1], next_point[0], next_point[1]) < 0\n\n\n<DED>def _is_ear(p1: Point, p2: Point, p3: Point, polygon: List[Point]):\n    <IND>ear = _contains_no_points(p1, p2, p3, polygon) and          _is_convex(p1, p2, p3) and          _triangle_area(p1[0], p1[1], p2[0], p2[1], p3[0], p3[1]) > 0\n    return ear\n"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _contains_no_points(p1: NamedPoint, p2: NamedPoint, p3: NamedPoint, polygon: List[NamedPoint]):\n    for pn in polygon:\n",
        "source_code_len": 124,
        "target_code": "\ndef _contains_no_points(p1: Point, p2: Point, p3: Point, polygon: List[Point]):\n    for pn in polygon:\n",
        "target_code_len": 104,
        "diff_format": "@@ -89,3 +89,3 @@\n \n-def _contains_no_points(p1: NamedPoint, p2: NamedPoint, p3: NamedPoint, polygon: List[NamedPoint]):\n+def _contains_no_points(p1: Point, p2: Point, p3: Point, polygon: List[Point]):\n     for pn in polygon:\n",
        "source_code_with_indent": "\n<DED>def _contains_no_points(p1: NamedPoint, p2: NamedPoint, p3: NamedPoint, polygon: List[NamedPoint]):\n    <IND>for pn in polygon:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def _contains_no_points(p1: Point, p2: Point, p3: Point, polygon: List[Point]):\n    <IND>for pn in polygon:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _is_point_inside(p: NamedPoint, a: NamedPoint, b: NamedPoint, c: NamedPoint):\n    area = _triangle_area(a.x, a.y, b.x, b.y, c.x, c.y)\n    area1 = _triangle_area(p.x, p.y, b.x, b.y, c.x, c.y)\n    area2 = _triangle_area(p.x, p.y, a.x, a.y, c.x, c.y)\n    area3 = _triangle_area(p.x, p.y, a.x, a.y, b.x, b.y)\n    return area == sum([area1, area2, area3])\n",
        "source_code_len": 356,
        "target_code": "\ndef _is_point_inside(p: Point, a: Point, b: Point, c: Point):\n    area = _triangle_area(a[0], a[1], b[0], b[1], c[0], c[1])\n    area1 = _triangle_area(p[0], p[1], b[0], b[1], c[0], c[1])\n    area2 = _triangle_area(p[0], p[1], a[0], a[1], c[0], c[1])\n    area3 = _triangle_area(p[0], p[1], a[0], a[1], b[0], b[1])\n    return area == sum([area1, area2, area3])\n",
        "target_code_len": 360,
        "diff_format": "@@ -98,7 +98,7 @@\n \n-def _is_point_inside(p: NamedPoint, a: NamedPoint, b: NamedPoint, c: NamedPoint):\n-    area = _triangle_area(a.x, a.y, b.x, b.y, c.x, c.y)\n-    area1 = _triangle_area(p.x, p.y, b.x, b.y, c.x, c.y)\n-    area2 = _triangle_area(p.x, p.y, a.x, a.y, c.x, c.y)\n-    area3 = _triangle_area(p.x, p.y, a.x, a.y, b.x, b.y)\n+def _is_point_inside(p: Point, a: Point, b: Point, c: Point):\n+    area = _triangle_area(a[0], a[1], b[0], b[1], c[0], c[1])\n+    area1 = _triangle_area(p[0], p[1], b[0], b[1], c[0], c[1])\n+    area2 = _triangle_area(p[0], p[1], a[0], a[1], c[0], c[1])\n+    area3 = _triangle_area(p[0], p[1], a[0], a[1], b[0], b[1])\n     return area == sum([area1, area2, area3])\n",
        "source_code_with_indent": "\n<DED>def _is_point_inside(p: NamedPoint, a: NamedPoint, b: NamedPoint, c: NamedPoint):\n    <IND>area = _triangle_area(a.x, a.y, b.x, b.y, c.x, c.y)\n    area1 = _triangle_area(p.x, p.y, b.x, b.y, c.x, c.y)\n    area2 = _triangle_area(p.x, p.y, a.x, a.y, c.x, c.y)\n    area3 = _triangle_area(p.x, p.y, a.x, a.y, b.x, b.y)\n    return area == sum([area1, area2, area3])\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def _is_point_inside(p: Point, a: Point, b: Point, c: Point):\n    <IND>area = _triangle_area(a[0], a[1], b[0], b[1], c[0], c[1])\n    area1 = _triangle_area(p[0], p[1], b[0], b[1], c[0], c[1])\n    area2 = _triangle_area(p[0], p[1], a[0], a[1], c[0], c[1])\n    area3 = _triangle_area(p[0], p[1], a[0], a[1], b[0], b[1])\n    return area == sum([area1, area2, area3])\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pythonarcade/arcade",
    "commit": "fb0fd1ab2f1a5f3ddab501d057889a3eebee6aca",
    "filename": "arcade/earclip_module.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pythonarcade-arcade/arcade/earclip_module.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "arcade/earclip_module.py:36:50 Incompatible parameter type [6]: Expected `List[arcade.arcade_types.NamedPoint]` for 4th positional only parameter to call `_is_ear` but got `List[Union[List[float], Tuple[float, float]]]`.",
    "message": " Expected `List[arcade.arcade_types.NamedPoint]` for 4th positional only parameter to call `_is_ear` but got `List[Union[List[float], Tuple[float, float]]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 36,
    "warning_line": "        if _is_ear(prev_point, point, next_point, polygon):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _is_convex(prev: NamedPoint, point: NamedPoint, next_point: NamedPoint):\n    return _triangle_sum(prev.x, prev.y, point.x, point.y, next_point.x, next_point.y) < 0\n\n\ndef _is_ear(p1: NamedPoint, p2: NamedPoint, p3: NamedPoint, polygon: List[NamedPoint]):\n    ear = _contains_no_points(p1, p2, p3, polygon) and \\\n          _is_convex(p1, p2, p3) and \\\n          _triangle_area(p1.x, p1.y, p2.x, p2.y, p3.x, p3.y) > 0\n    return ear\n",
        "source_code_len": 435,
        "target_code": "\ndef _is_convex(prev: Point, point: Point, next_point: Point):\n    return _triangle_sum(prev[0], prev[1], point[0], point[1], next_point[0], next_point[1]) < 0\n\n\ndef _is_ear(p1: Point, p2: Point, p3: Point, polygon: List[Point]):\n    ear = _contains_no_points(p1, p2, p3, polygon) and \\\n          _is_convex(p1, p2, p3) and \\\n          _triangle_area(p1[0], p1[1], p2[0], p2[1], p3[0], p3[1]) > 0\n    return ear\n",
        "target_code_len": 412,
        "diff_format": "@@ -78,10 +78,10 @@\n \n-def _is_convex(prev: NamedPoint, point: NamedPoint, next_point: NamedPoint):\n-    return _triangle_sum(prev.x, prev.y, point.x, point.y, next_point.x, next_point.y) < 0\n+def _is_convex(prev: Point, point: Point, next_point: Point):\n+    return _triangle_sum(prev[0], prev[1], point[0], point[1], next_point[0], next_point[1]) < 0\n \n \n-def _is_ear(p1: NamedPoint, p2: NamedPoint, p3: NamedPoint, polygon: List[NamedPoint]):\n+def _is_ear(p1: Point, p2: Point, p3: Point, polygon: List[Point]):\n     ear = _contains_no_points(p1, p2, p3, polygon) and \\\n           _is_convex(p1, p2, p3) and \\\n-          _triangle_area(p1.x, p1.y, p2.x, p2.y, p3.x, p3.y) > 0\n+          _triangle_area(p1[0], p1[1], p2[0], p2[1], p3[0], p3[1]) > 0\n     return ear\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>def _is_convex(prev: NamedPoint, point: NamedPoint, next_point: NamedPoint):\n    <IND>return _triangle_sum(prev.x, prev.y, point.x, point.y, next_point.x, next_point.y) < 0\n\n\n<DED>def _is_ear(p1: NamedPoint, p2: NamedPoint, p3: NamedPoint, polygon: List[NamedPoint]):\n    <IND>ear = _contains_no_points(p1, p2, p3, polygon) and          _is_convex(p1, p2, p3) and          _triangle_area(p1.x, p1.y, p2.x, p2.y, p3.x, p3.y) > 0\n    return ear\n",
        "target_code_with_indent": "\n<DED>def _is_convex(prev: Point, point: Point, next_point: Point):\n    <IND>return _triangle_sum(prev[0], prev[1], point[0], point[1], next_point[0], next_point[1]) < 0\n\n\n<DED>def _is_ear(p1: Point, p2: Point, p3: Point, polygon: List[Point]):\n    <IND>ear = _contains_no_points(p1, p2, p3, polygon) and          _is_convex(p1, p2, p3) and          _triangle_area(p1[0], p1[1], p2[0], p2[1], p3[0], p3[1]) > 0\n    return ear\n"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _contains_no_points(p1: NamedPoint, p2: NamedPoint, p3: NamedPoint, polygon: List[NamedPoint]):\n    for pn in polygon:\n",
        "source_code_len": 124,
        "target_code": "\ndef _contains_no_points(p1: Point, p2: Point, p3: Point, polygon: List[Point]):\n    for pn in polygon:\n",
        "target_code_len": 104,
        "diff_format": "@@ -89,3 +89,3 @@\n \n-def _contains_no_points(p1: NamedPoint, p2: NamedPoint, p3: NamedPoint, polygon: List[NamedPoint]):\n+def _contains_no_points(p1: Point, p2: Point, p3: Point, polygon: List[Point]):\n     for pn in polygon:\n",
        "source_code_with_indent": "\n<DED>def _contains_no_points(p1: NamedPoint, p2: NamedPoint, p3: NamedPoint, polygon: List[NamedPoint]):\n    <IND>for pn in polygon:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def _contains_no_points(p1: Point, p2: Point, p3: Point, polygon: List[Point]):\n    <IND>for pn in polygon:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _is_point_inside(p: NamedPoint, a: NamedPoint, b: NamedPoint, c: NamedPoint):\n    area = _triangle_area(a.x, a.y, b.x, b.y, c.x, c.y)\n    area1 = _triangle_area(p.x, p.y, b.x, b.y, c.x, c.y)\n    area2 = _triangle_area(p.x, p.y, a.x, a.y, c.x, c.y)\n    area3 = _triangle_area(p.x, p.y, a.x, a.y, b.x, b.y)\n    return area == sum([area1, area2, area3])\n",
        "source_code_len": 356,
        "target_code": "\ndef _is_point_inside(p: Point, a: Point, b: Point, c: Point):\n    area = _triangle_area(a[0], a[1], b[0], b[1], c[0], c[1])\n    area1 = _triangle_area(p[0], p[1], b[0], b[1], c[0], c[1])\n    area2 = _triangle_area(p[0], p[1], a[0], a[1], c[0], c[1])\n    area3 = _triangle_area(p[0], p[1], a[0], a[1], b[0], b[1])\n    return area == sum([area1, area2, area3])\n",
        "target_code_len": 360,
        "diff_format": "@@ -98,7 +98,7 @@\n \n-def _is_point_inside(p: NamedPoint, a: NamedPoint, b: NamedPoint, c: NamedPoint):\n-    area = _triangle_area(a.x, a.y, b.x, b.y, c.x, c.y)\n-    area1 = _triangle_area(p.x, p.y, b.x, b.y, c.x, c.y)\n-    area2 = _triangle_area(p.x, p.y, a.x, a.y, c.x, c.y)\n-    area3 = _triangle_area(p.x, p.y, a.x, a.y, b.x, b.y)\n+def _is_point_inside(p: Point, a: Point, b: Point, c: Point):\n+    area = _triangle_area(a[0], a[1], b[0], b[1], c[0], c[1])\n+    area1 = _triangle_area(p[0], p[1], b[0], b[1], c[0], c[1])\n+    area2 = _triangle_area(p[0], p[1], a[0], a[1], c[0], c[1])\n+    area3 = _triangle_area(p[0], p[1], a[0], a[1], b[0], b[1])\n     return area == sum([area1, area2, area3])\n",
        "source_code_with_indent": "\n<DED>def _is_point_inside(p: NamedPoint, a: NamedPoint, b: NamedPoint, c: NamedPoint):\n    <IND>area = _triangle_area(a.x, a.y, b.x, b.y, c.x, c.y)\n    area1 = _triangle_area(p.x, p.y, b.x, b.y, c.x, c.y)\n    area2 = _triangle_area(p.x, p.y, a.x, a.y, c.x, c.y)\n    area3 = _triangle_area(p.x, p.y, a.x, a.y, b.x, b.y)\n    return area == sum([area1, area2, area3])\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def _is_point_inside(p: Point, a: Point, b: Point, c: Point):\n    <IND>area = _triangle_area(a[0], a[1], b[0], b[1], c[0], c[1])\n    area1 = _triangle_area(p[0], p[1], b[0], b[1], c[0], c[1])\n    area2 = _triangle_area(p[0], p[1], a[0], a[1], c[0], c[1])\n    area3 = _triangle_area(p[0], p[1], a[0], a[1], b[0], b[1])\n    return area == sum([area1, area2, area3])\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pythonarcade/arcade",
    "commit": "fb0fd1ab2f1a5f3ddab501d057889a3eebee6aca",
    "filename": "arcade/earclip_module.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pythonarcade-arcade/arcade/earclip_module.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "arcade/earclip_module.py:61:28 Incompatible parameter type [6]: Expected `arcade.arcade_types.NamedPoint` for 1st positional only parameter to call `_is_ear` but got `Union[List[float], Tuple[float, float]]`.",
    "message": " Expected `arcade.arcade_types.NamedPoint` for 1st positional only parameter to call `_is_ear` but got `Union[List[float], Tuple[float, float]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 61,
    "warning_line": "                if _is_ear(*group):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _is_convex(prev: NamedPoint, point: NamedPoint, next_point: NamedPoint):\n    return _triangle_sum(prev.x, prev.y, point.x, point.y, next_point.x, next_point.y) < 0\n\n\ndef _is_ear(p1: NamedPoint, p2: NamedPoint, p3: NamedPoint, polygon: List[NamedPoint]):\n    ear = _contains_no_points(p1, p2, p3, polygon) and \\\n          _is_convex(p1, p2, p3) and \\\n          _triangle_area(p1.x, p1.y, p2.x, p2.y, p3.x, p3.y) > 0\n    return ear\n",
        "source_code_len": 435,
        "target_code": "\ndef _is_convex(prev: Point, point: Point, next_point: Point):\n    return _triangle_sum(prev[0], prev[1], point[0], point[1], next_point[0], next_point[1]) < 0\n\n\ndef _is_ear(p1: Point, p2: Point, p3: Point, polygon: List[Point]):\n    ear = _contains_no_points(p1, p2, p3, polygon) and \\\n          _is_convex(p1, p2, p3) and \\\n          _triangle_area(p1[0], p1[1], p2[0], p2[1], p3[0], p3[1]) > 0\n    return ear\n",
        "target_code_len": 412,
        "diff_format": "@@ -78,10 +78,10 @@\n \n-def _is_convex(prev: NamedPoint, point: NamedPoint, next_point: NamedPoint):\n-    return _triangle_sum(prev.x, prev.y, point.x, point.y, next_point.x, next_point.y) < 0\n+def _is_convex(prev: Point, point: Point, next_point: Point):\n+    return _triangle_sum(prev[0], prev[1], point[0], point[1], next_point[0], next_point[1]) < 0\n \n \n-def _is_ear(p1: NamedPoint, p2: NamedPoint, p3: NamedPoint, polygon: List[NamedPoint]):\n+def _is_ear(p1: Point, p2: Point, p3: Point, polygon: List[Point]):\n     ear = _contains_no_points(p1, p2, p3, polygon) and \\\n           _is_convex(p1, p2, p3) and \\\n-          _triangle_area(p1.x, p1.y, p2.x, p2.y, p3.x, p3.y) > 0\n+          _triangle_area(p1[0], p1[1], p2[0], p2[1], p3[0], p3[1]) > 0\n     return ear\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>def _is_convex(prev: NamedPoint, point: NamedPoint, next_point: NamedPoint):\n    <IND>return _triangle_sum(prev.x, prev.y, point.x, point.y, next_point.x, next_point.y) < 0\n\n\n<DED>def _is_ear(p1: NamedPoint, p2: NamedPoint, p3: NamedPoint, polygon: List[NamedPoint]):\n    <IND>ear = _contains_no_points(p1, p2, p3, polygon) and          _is_convex(p1, p2, p3) and          _triangle_area(p1.x, p1.y, p2.x, p2.y, p3.x, p3.y) > 0\n    return ear\n",
        "target_code_with_indent": "\n<DED>def _is_convex(prev: Point, point: Point, next_point: Point):\n    <IND>return _triangle_sum(prev[0], prev[1], point[0], point[1], next_point[0], next_point[1]) < 0\n\n\n<DED>def _is_ear(p1: Point, p2: Point, p3: Point, polygon: List[Point]):\n    <IND>ear = _contains_no_points(p1, p2, p3, polygon) and          _is_convex(p1, p2, p3) and          _triangle_area(p1[0], p1[1], p2[0], p2[1], p3[0], p3[1]) > 0\n    return ear\n"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _contains_no_points(p1: NamedPoint, p2: NamedPoint, p3: NamedPoint, polygon: List[NamedPoint]):\n    for pn in polygon:\n",
        "source_code_len": 124,
        "target_code": "\ndef _contains_no_points(p1: Point, p2: Point, p3: Point, polygon: List[Point]):\n    for pn in polygon:\n",
        "target_code_len": 104,
        "diff_format": "@@ -89,3 +89,3 @@\n \n-def _contains_no_points(p1: NamedPoint, p2: NamedPoint, p3: NamedPoint, polygon: List[NamedPoint]):\n+def _contains_no_points(p1: Point, p2: Point, p3: Point, polygon: List[Point]):\n     for pn in polygon:\n",
        "source_code_with_indent": "\n<DED>def _contains_no_points(p1: NamedPoint, p2: NamedPoint, p3: NamedPoint, polygon: List[NamedPoint]):\n    <IND>for pn in polygon:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def _contains_no_points(p1: Point, p2: Point, p3: Point, polygon: List[Point]):\n    <IND>for pn in polygon:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _is_point_inside(p: NamedPoint, a: NamedPoint, b: NamedPoint, c: NamedPoint):\n    area = _triangle_area(a.x, a.y, b.x, b.y, c.x, c.y)\n    area1 = _triangle_area(p.x, p.y, b.x, b.y, c.x, c.y)\n    area2 = _triangle_area(p.x, p.y, a.x, a.y, c.x, c.y)\n    area3 = _triangle_area(p.x, p.y, a.x, a.y, b.x, b.y)\n    return area == sum([area1, area2, area3])\n",
        "source_code_len": 356,
        "target_code": "\ndef _is_point_inside(p: Point, a: Point, b: Point, c: Point):\n    area = _triangle_area(a[0], a[1], b[0], b[1], c[0], c[1])\n    area1 = _triangle_area(p[0], p[1], b[0], b[1], c[0], c[1])\n    area2 = _triangle_area(p[0], p[1], a[0], a[1], c[0], c[1])\n    area3 = _triangle_area(p[0], p[1], a[0], a[1], b[0], b[1])\n    return area == sum([area1, area2, area3])\n",
        "target_code_len": 360,
        "diff_format": "@@ -98,7 +98,7 @@\n \n-def _is_point_inside(p: NamedPoint, a: NamedPoint, b: NamedPoint, c: NamedPoint):\n-    area = _triangle_area(a.x, a.y, b.x, b.y, c.x, c.y)\n-    area1 = _triangle_area(p.x, p.y, b.x, b.y, c.x, c.y)\n-    area2 = _triangle_area(p.x, p.y, a.x, a.y, c.x, c.y)\n-    area3 = _triangle_area(p.x, p.y, a.x, a.y, b.x, b.y)\n+def _is_point_inside(p: Point, a: Point, b: Point, c: Point):\n+    area = _triangle_area(a[0], a[1], b[0], b[1], c[0], c[1])\n+    area1 = _triangle_area(p[0], p[1], b[0], b[1], c[0], c[1])\n+    area2 = _triangle_area(p[0], p[1], a[0], a[1], c[0], c[1])\n+    area3 = _triangle_area(p[0], p[1], a[0], a[1], b[0], b[1])\n     return area == sum([area1, area2, area3])\n",
        "source_code_with_indent": "\n<DED>def _is_point_inside(p: NamedPoint, a: NamedPoint, b: NamedPoint, c: NamedPoint):\n    <IND>area = _triangle_area(a.x, a.y, b.x, b.y, c.x, c.y)\n    area1 = _triangle_area(p.x, p.y, b.x, b.y, c.x, c.y)\n    area2 = _triangle_area(p.x, p.y, a.x, a.y, c.x, c.y)\n    area3 = _triangle_area(p.x, p.y, a.x, a.y, b.x, b.y)\n    return area == sum([area1, area2, area3])\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def _is_point_inside(p: Point, a: Point, b: Point, c: Point):\n    <IND>area = _triangle_area(a[0], a[1], b[0], b[1], c[0], c[1])\n    area1 = _triangle_area(p[0], p[1], b[0], b[1], c[0], c[1])\n    area2 = _triangle_area(p[0], p[1], a[0], a[1], c[0], c[1])\n    area3 = _triangle_area(p[0], p[1], a[0], a[1], b[0], b[1])\n    return area == sum([area1, area2, area3])\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pythonarcade/arcade",
    "commit": "fb0fd1ab2f1a5f3ddab501d057889a3eebee6aca",
    "filename": "arcade/earclip_module.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pythonarcade-arcade/arcade/earclip_module.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "arcade/earclip_module.py:61:28 Incompatible parameter type [6]: Expected `arcade.arcade_types.NamedPoint` for 2nd positional only parameter to call `_is_ear` but got `Union[List[float], Tuple[float, float]]`.",
    "message": " Expected `arcade.arcade_types.NamedPoint` for 2nd positional only parameter to call `_is_ear` but got `Union[List[float], Tuple[float, float]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 61,
    "warning_line": "                if _is_ear(*group):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _is_convex(prev: NamedPoint, point: NamedPoint, next_point: NamedPoint):\n    return _triangle_sum(prev.x, prev.y, point.x, point.y, next_point.x, next_point.y) < 0\n\n\ndef _is_ear(p1: NamedPoint, p2: NamedPoint, p3: NamedPoint, polygon: List[NamedPoint]):\n    ear = _contains_no_points(p1, p2, p3, polygon) and \\\n          _is_convex(p1, p2, p3) and \\\n          _triangle_area(p1.x, p1.y, p2.x, p2.y, p3.x, p3.y) > 0\n    return ear\n",
        "source_code_len": 435,
        "target_code": "\ndef _is_convex(prev: Point, point: Point, next_point: Point):\n    return _triangle_sum(prev[0], prev[1], point[0], point[1], next_point[0], next_point[1]) < 0\n\n\ndef _is_ear(p1: Point, p2: Point, p3: Point, polygon: List[Point]):\n    ear = _contains_no_points(p1, p2, p3, polygon) and \\\n          _is_convex(p1, p2, p3) and \\\n          _triangle_area(p1[0], p1[1], p2[0], p2[1], p3[0], p3[1]) > 0\n    return ear\n",
        "target_code_len": 412,
        "diff_format": "@@ -78,10 +78,10 @@\n \n-def _is_convex(prev: NamedPoint, point: NamedPoint, next_point: NamedPoint):\n-    return _triangle_sum(prev.x, prev.y, point.x, point.y, next_point.x, next_point.y) < 0\n+def _is_convex(prev: Point, point: Point, next_point: Point):\n+    return _triangle_sum(prev[0], prev[1], point[0], point[1], next_point[0], next_point[1]) < 0\n \n \n-def _is_ear(p1: NamedPoint, p2: NamedPoint, p3: NamedPoint, polygon: List[NamedPoint]):\n+def _is_ear(p1: Point, p2: Point, p3: Point, polygon: List[Point]):\n     ear = _contains_no_points(p1, p2, p3, polygon) and \\\n           _is_convex(p1, p2, p3) and \\\n-          _triangle_area(p1.x, p1.y, p2.x, p2.y, p3.x, p3.y) > 0\n+          _triangle_area(p1[0], p1[1], p2[0], p2[1], p3[0], p3[1]) > 0\n     return ear\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>def _is_convex(prev: NamedPoint, point: NamedPoint, next_point: NamedPoint):\n    <IND>return _triangle_sum(prev.x, prev.y, point.x, point.y, next_point.x, next_point.y) < 0\n\n\n<DED>def _is_ear(p1: NamedPoint, p2: NamedPoint, p3: NamedPoint, polygon: List[NamedPoint]):\n    <IND>ear = _contains_no_points(p1, p2, p3, polygon) and          _is_convex(p1, p2, p3) and          _triangle_area(p1.x, p1.y, p2.x, p2.y, p3.x, p3.y) > 0\n    return ear\n",
        "target_code_with_indent": "\n<DED>def _is_convex(prev: Point, point: Point, next_point: Point):\n    <IND>return _triangle_sum(prev[0], prev[1], point[0], point[1], next_point[0], next_point[1]) < 0\n\n\n<DED>def _is_ear(p1: Point, p2: Point, p3: Point, polygon: List[Point]):\n    <IND>ear = _contains_no_points(p1, p2, p3, polygon) and          _is_convex(p1, p2, p3) and          _triangle_area(p1[0], p1[1], p2[0], p2[1], p3[0], p3[1]) > 0\n    return ear\n"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _contains_no_points(p1: NamedPoint, p2: NamedPoint, p3: NamedPoint, polygon: List[NamedPoint]):\n    for pn in polygon:\n",
        "source_code_len": 124,
        "target_code": "\ndef _contains_no_points(p1: Point, p2: Point, p3: Point, polygon: List[Point]):\n    for pn in polygon:\n",
        "target_code_len": 104,
        "diff_format": "@@ -89,3 +89,3 @@\n \n-def _contains_no_points(p1: NamedPoint, p2: NamedPoint, p3: NamedPoint, polygon: List[NamedPoint]):\n+def _contains_no_points(p1: Point, p2: Point, p3: Point, polygon: List[Point]):\n     for pn in polygon:\n",
        "source_code_with_indent": "\n<DED>def _contains_no_points(p1: NamedPoint, p2: NamedPoint, p3: NamedPoint, polygon: List[NamedPoint]):\n    <IND>for pn in polygon:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def _contains_no_points(p1: Point, p2: Point, p3: Point, polygon: List[Point]):\n    <IND>for pn in polygon:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _is_point_inside(p: NamedPoint, a: NamedPoint, b: NamedPoint, c: NamedPoint):\n    area = _triangle_area(a.x, a.y, b.x, b.y, c.x, c.y)\n    area1 = _triangle_area(p.x, p.y, b.x, b.y, c.x, c.y)\n    area2 = _triangle_area(p.x, p.y, a.x, a.y, c.x, c.y)\n    area3 = _triangle_area(p.x, p.y, a.x, a.y, b.x, b.y)\n    return area == sum([area1, area2, area3])\n",
        "source_code_len": 356,
        "target_code": "\ndef _is_point_inside(p: Point, a: Point, b: Point, c: Point):\n    area = _triangle_area(a[0], a[1], b[0], b[1], c[0], c[1])\n    area1 = _triangle_area(p[0], p[1], b[0], b[1], c[0], c[1])\n    area2 = _triangle_area(p[0], p[1], a[0], a[1], c[0], c[1])\n    area3 = _triangle_area(p[0], p[1], a[0], a[1], b[0], b[1])\n    return area == sum([area1, area2, area3])\n",
        "target_code_len": 360,
        "diff_format": "@@ -98,7 +98,7 @@\n \n-def _is_point_inside(p: NamedPoint, a: NamedPoint, b: NamedPoint, c: NamedPoint):\n-    area = _triangle_area(a.x, a.y, b.x, b.y, c.x, c.y)\n-    area1 = _triangle_area(p.x, p.y, b.x, b.y, c.x, c.y)\n-    area2 = _triangle_area(p.x, p.y, a.x, a.y, c.x, c.y)\n-    area3 = _triangle_area(p.x, p.y, a.x, a.y, b.x, b.y)\n+def _is_point_inside(p: Point, a: Point, b: Point, c: Point):\n+    area = _triangle_area(a[0], a[1], b[0], b[1], c[0], c[1])\n+    area1 = _triangle_area(p[0], p[1], b[0], b[1], c[0], c[1])\n+    area2 = _triangle_area(p[0], p[1], a[0], a[1], c[0], c[1])\n+    area3 = _triangle_area(p[0], p[1], a[0], a[1], b[0], b[1])\n     return area == sum([area1, area2, area3])\n",
        "source_code_with_indent": "\n<DED>def _is_point_inside(p: NamedPoint, a: NamedPoint, b: NamedPoint, c: NamedPoint):\n    <IND>area = _triangle_area(a.x, a.y, b.x, b.y, c.x, c.y)\n    area1 = _triangle_area(p.x, p.y, b.x, b.y, c.x, c.y)\n    area2 = _triangle_area(p.x, p.y, a.x, a.y, c.x, c.y)\n    area3 = _triangle_area(p.x, p.y, a.x, a.y, b.x, b.y)\n    return area == sum([area1, area2, area3])\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def _is_point_inside(p: Point, a: Point, b: Point, c: Point):\n    <IND>area = _triangle_area(a[0], a[1], b[0], b[1], c[0], c[1])\n    area1 = _triangle_area(p[0], p[1], b[0], b[1], c[0], c[1])\n    area2 = _triangle_area(p[0], p[1], a[0], a[1], c[0], c[1])\n    area3 = _triangle_area(p[0], p[1], a[0], a[1], b[0], b[1])\n    return area == sum([area1, area2, area3])\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pythonarcade/arcade",
    "commit": "fb0fd1ab2f1a5f3ddab501d057889a3eebee6aca",
    "filename": "arcade/earclip_module.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pythonarcade-arcade/arcade/earclip_module.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "arcade/earclip_module.py:61:28 Incompatible parameter type [6]: Expected `arcade.arcade_types.NamedPoint` for 3rd positional only parameter to call `_is_ear` but got `Union[List[float], Tuple[float, float]]`.",
    "message": " Expected `arcade.arcade_types.NamedPoint` for 3rd positional only parameter to call `_is_ear` but got `Union[List[float], Tuple[float, float]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 61,
    "warning_line": "                if _is_ear(*group):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _is_convex(prev: NamedPoint, point: NamedPoint, next_point: NamedPoint):\n    return _triangle_sum(prev.x, prev.y, point.x, point.y, next_point.x, next_point.y) < 0\n\n\ndef _is_ear(p1: NamedPoint, p2: NamedPoint, p3: NamedPoint, polygon: List[NamedPoint]):\n    ear = _contains_no_points(p1, p2, p3, polygon) and \\\n          _is_convex(p1, p2, p3) and \\\n          _triangle_area(p1.x, p1.y, p2.x, p2.y, p3.x, p3.y) > 0\n    return ear\n",
        "source_code_len": 435,
        "target_code": "\ndef _is_convex(prev: Point, point: Point, next_point: Point):\n    return _triangle_sum(prev[0], prev[1], point[0], point[1], next_point[0], next_point[1]) < 0\n\n\ndef _is_ear(p1: Point, p2: Point, p3: Point, polygon: List[Point]):\n    ear = _contains_no_points(p1, p2, p3, polygon) and \\\n          _is_convex(p1, p2, p3) and \\\n          _triangle_area(p1[0], p1[1], p2[0], p2[1], p3[0], p3[1]) > 0\n    return ear\n",
        "target_code_len": 412,
        "diff_format": "@@ -78,10 +78,10 @@\n \n-def _is_convex(prev: NamedPoint, point: NamedPoint, next_point: NamedPoint):\n-    return _triangle_sum(prev.x, prev.y, point.x, point.y, next_point.x, next_point.y) < 0\n+def _is_convex(prev: Point, point: Point, next_point: Point):\n+    return _triangle_sum(prev[0], prev[1], point[0], point[1], next_point[0], next_point[1]) < 0\n \n \n-def _is_ear(p1: NamedPoint, p2: NamedPoint, p3: NamedPoint, polygon: List[NamedPoint]):\n+def _is_ear(p1: Point, p2: Point, p3: Point, polygon: List[Point]):\n     ear = _contains_no_points(p1, p2, p3, polygon) and \\\n           _is_convex(p1, p2, p3) and \\\n-          _triangle_area(p1.x, p1.y, p2.x, p2.y, p3.x, p3.y) > 0\n+          _triangle_area(p1[0], p1[1], p2[0], p2[1], p3[0], p3[1]) > 0\n     return ear\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>def _is_convex(prev: NamedPoint, point: NamedPoint, next_point: NamedPoint):\n    <IND>return _triangle_sum(prev.x, prev.y, point.x, point.y, next_point.x, next_point.y) < 0\n\n\n<DED>def _is_ear(p1: NamedPoint, p2: NamedPoint, p3: NamedPoint, polygon: List[NamedPoint]):\n    <IND>ear = _contains_no_points(p1, p2, p3, polygon) and          _is_convex(p1, p2, p3) and          _triangle_area(p1.x, p1.y, p2.x, p2.y, p3.x, p3.y) > 0\n    return ear\n",
        "target_code_with_indent": "\n<DED>def _is_convex(prev: Point, point: Point, next_point: Point):\n    <IND>return _triangle_sum(prev[0], prev[1], point[0], point[1], next_point[0], next_point[1]) < 0\n\n\n<DED>def _is_ear(p1: Point, p2: Point, p3: Point, polygon: List[Point]):\n    <IND>ear = _contains_no_points(p1, p2, p3, polygon) and          _is_convex(p1, p2, p3) and          _triangle_area(p1[0], p1[1], p2[0], p2[1], p3[0], p3[1]) > 0\n    return ear\n"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _contains_no_points(p1: NamedPoint, p2: NamedPoint, p3: NamedPoint, polygon: List[NamedPoint]):\n    for pn in polygon:\n",
        "source_code_len": 124,
        "target_code": "\ndef _contains_no_points(p1: Point, p2: Point, p3: Point, polygon: List[Point]):\n    for pn in polygon:\n",
        "target_code_len": 104,
        "diff_format": "@@ -89,3 +89,3 @@\n \n-def _contains_no_points(p1: NamedPoint, p2: NamedPoint, p3: NamedPoint, polygon: List[NamedPoint]):\n+def _contains_no_points(p1: Point, p2: Point, p3: Point, polygon: List[Point]):\n     for pn in polygon:\n",
        "source_code_with_indent": "\n<DED>def _contains_no_points(p1: NamedPoint, p2: NamedPoint, p3: NamedPoint, polygon: List[NamedPoint]):\n    <IND>for pn in polygon:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def _contains_no_points(p1: Point, p2: Point, p3: Point, polygon: List[Point]):\n    <IND>for pn in polygon:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _is_point_inside(p: NamedPoint, a: NamedPoint, b: NamedPoint, c: NamedPoint):\n    area = _triangle_area(a.x, a.y, b.x, b.y, c.x, c.y)\n    area1 = _triangle_area(p.x, p.y, b.x, b.y, c.x, c.y)\n    area2 = _triangle_area(p.x, p.y, a.x, a.y, c.x, c.y)\n    area3 = _triangle_area(p.x, p.y, a.x, a.y, b.x, b.y)\n    return area == sum([area1, area2, area3])\n",
        "source_code_len": 356,
        "target_code": "\ndef _is_point_inside(p: Point, a: Point, b: Point, c: Point):\n    area = _triangle_area(a[0], a[1], b[0], b[1], c[0], c[1])\n    area1 = _triangle_area(p[0], p[1], b[0], b[1], c[0], c[1])\n    area2 = _triangle_area(p[0], p[1], a[0], a[1], c[0], c[1])\n    area3 = _triangle_area(p[0], p[1], a[0], a[1], b[0], b[1])\n    return area == sum([area1, area2, area3])\n",
        "target_code_len": 360,
        "diff_format": "@@ -98,7 +98,7 @@\n \n-def _is_point_inside(p: NamedPoint, a: NamedPoint, b: NamedPoint, c: NamedPoint):\n-    area = _triangle_area(a.x, a.y, b.x, b.y, c.x, c.y)\n-    area1 = _triangle_area(p.x, p.y, b.x, b.y, c.x, c.y)\n-    area2 = _triangle_area(p.x, p.y, a.x, a.y, c.x, c.y)\n-    area3 = _triangle_area(p.x, p.y, a.x, a.y, b.x, b.y)\n+def _is_point_inside(p: Point, a: Point, b: Point, c: Point):\n+    area = _triangle_area(a[0], a[1], b[0], b[1], c[0], c[1])\n+    area1 = _triangle_area(p[0], p[1], b[0], b[1], c[0], c[1])\n+    area2 = _triangle_area(p[0], p[1], a[0], a[1], c[0], c[1])\n+    area3 = _triangle_area(p[0], p[1], a[0], a[1], b[0], b[1])\n     return area == sum([area1, area2, area3])\n",
        "source_code_with_indent": "\n<DED>def _is_point_inside(p: NamedPoint, a: NamedPoint, b: NamedPoint, c: NamedPoint):\n    <IND>area = _triangle_area(a.x, a.y, b.x, b.y, c.x, c.y)\n    area1 = _triangle_area(p.x, p.y, b.x, b.y, c.x, c.y)\n    area2 = _triangle_area(p.x, p.y, a.x, a.y, c.x, c.y)\n    area3 = _triangle_area(p.x, p.y, a.x, a.y, b.x, b.y)\n    return area == sum([area1, area2, area3])\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def _is_point_inside(p: Point, a: Point, b: Point, c: Point):\n    <IND>area = _triangle_area(a[0], a[1], b[0], b[1], c[0], c[1])\n    area1 = _triangle_area(p[0], p[1], b[0], b[1], c[0], c[1])\n    area2 = _triangle_area(p[0], p[1], a[0], a[1], c[0], c[1])\n    area3 = _triangle_area(p[0], p[1], a[0], a[1], b[0], b[1])\n    return area == sum([area1, area2, area3])\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pythonarcade/arcade",
    "commit": "fb0fd1ab2f1a5f3ddab501d057889a3eebee6aca",
    "filename": "arcade/earclip_module.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pythonarcade-arcade/arcade/earclip_module.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "arcade/earclip_module.py:61:28 Incompatible parameter type [6]: Expected `List[arcade.arcade_types.NamedPoint]` for 4th positional only parameter to call `_is_ear` but got `List[Union[List[float], Tuple[float, float]]]`.",
    "message": " Expected `List[arcade.arcade_types.NamedPoint]` for 4th positional only parameter to call `_is_ear` but got `List[Union[List[float], Tuple[float, float]]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 61,
    "warning_line": "                if _is_ear(*group):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _is_convex(prev: NamedPoint, point: NamedPoint, next_point: NamedPoint):\n    return _triangle_sum(prev.x, prev.y, point.x, point.y, next_point.x, next_point.y) < 0\n\n\ndef _is_ear(p1: NamedPoint, p2: NamedPoint, p3: NamedPoint, polygon: List[NamedPoint]):\n    ear = _contains_no_points(p1, p2, p3, polygon) and \\\n          _is_convex(p1, p2, p3) and \\\n          _triangle_area(p1.x, p1.y, p2.x, p2.y, p3.x, p3.y) > 0\n    return ear\n",
        "source_code_len": 435,
        "target_code": "\ndef _is_convex(prev: Point, point: Point, next_point: Point):\n    return _triangle_sum(prev[0], prev[1], point[0], point[1], next_point[0], next_point[1]) < 0\n\n\ndef _is_ear(p1: Point, p2: Point, p3: Point, polygon: List[Point]):\n    ear = _contains_no_points(p1, p2, p3, polygon) and \\\n          _is_convex(p1, p2, p3) and \\\n          _triangle_area(p1[0], p1[1], p2[0], p2[1], p3[0], p3[1]) > 0\n    return ear\n",
        "target_code_len": 412,
        "diff_format": "@@ -78,10 +78,10 @@\n \n-def _is_convex(prev: NamedPoint, point: NamedPoint, next_point: NamedPoint):\n-    return _triangle_sum(prev.x, prev.y, point.x, point.y, next_point.x, next_point.y) < 0\n+def _is_convex(prev: Point, point: Point, next_point: Point):\n+    return _triangle_sum(prev[0], prev[1], point[0], point[1], next_point[0], next_point[1]) < 0\n \n \n-def _is_ear(p1: NamedPoint, p2: NamedPoint, p3: NamedPoint, polygon: List[NamedPoint]):\n+def _is_ear(p1: Point, p2: Point, p3: Point, polygon: List[Point]):\n     ear = _contains_no_points(p1, p2, p3, polygon) and \\\n           _is_convex(p1, p2, p3) and \\\n-          _triangle_area(p1.x, p1.y, p2.x, p2.y, p3.x, p3.y) > 0\n+          _triangle_area(p1[0], p1[1], p2[0], p2[1], p3[0], p3[1]) > 0\n     return ear\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>def _is_convex(prev: NamedPoint, point: NamedPoint, next_point: NamedPoint):\n    <IND>return _triangle_sum(prev.x, prev.y, point.x, point.y, next_point.x, next_point.y) < 0\n\n\n<DED>def _is_ear(p1: NamedPoint, p2: NamedPoint, p3: NamedPoint, polygon: List[NamedPoint]):\n    <IND>ear = _contains_no_points(p1, p2, p3, polygon) and          _is_convex(p1, p2, p3) and          _triangle_area(p1.x, p1.y, p2.x, p2.y, p3.x, p3.y) > 0\n    return ear\n",
        "target_code_with_indent": "\n<DED>def _is_convex(prev: Point, point: Point, next_point: Point):\n    <IND>return _triangle_sum(prev[0], prev[1], point[0], point[1], next_point[0], next_point[1]) < 0\n\n\n<DED>def _is_ear(p1: Point, p2: Point, p3: Point, polygon: List[Point]):\n    <IND>ear = _contains_no_points(p1, p2, p3, polygon) and          _is_convex(p1, p2, p3) and          _triangle_area(p1[0], p1[1], p2[0], p2[1], p3[0], p3[1]) > 0\n    return ear\n"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _contains_no_points(p1: NamedPoint, p2: NamedPoint, p3: NamedPoint, polygon: List[NamedPoint]):\n    for pn in polygon:\n",
        "source_code_len": 124,
        "target_code": "\ndef _contains_no_points(p1: Point, p2: Point, p3: Point, polygon: List[Point]):\n    for pn in polygon:\n",
        "target_code_len": 104,
        "diff_format": "@@ -89,3 +89,3 @@\n \n-def _contains_no_points(p1: NamedPoint, p2: NamedPoint, p3: NamedPoint, polygon: List[NamedPoint]):\n+def _contains_no_points(p1: Point, p2: Point, p3: Point, polygon: List[Point]):\n     for pn in polygon:\n",
        "source_code_with_indent": "\n<DED>def _contains_no_points(p1: NamedPoint, p2: NamedPoint, p3: NamedPoint, polygon: List[NamedPoint]):\n    <IND>for pn in polygon:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def _contains_no_points(p1: Point, p2: Point, p3: Point, polygon: List[Point]):\n    <IND>for pn in polygon:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _is_point_inside(p: NamedPoint, a: NamedPoint, b: NamedPoint, c: NamedPoint):\n    area = _triangle_area(a.x, a.y, b.x, b.y, c.x, c.y)\n    area1 = _triangle_area(p.x, p.y, b.x, b.y, c.x, c.y)\n    area2 = _triangle_area(p.x, p.y, a.x, a.y, c.x, c.y)\n    area3 = _triangle_area(p.x, p.y, a.x, a.y, b.x, b.y)\n    return area == sum([area1, area2, area3])\n",
        "source_code_len": 356,
        "target_code": "\ndef _is_point_inside(p: Point, a: Point, b: Point, c: Point):\n    area = _triangle_area(a[0], a[1], b[0], b[1], c[0], c[1])\n    area1 = _triangle_area(p[0], p[1], b[0], b[1], c[0], c[1])\n    area2 = _triangle_area(p[0], p[1], a[0], a[1], c[0], c[1])\n    area3 = _triangle_area(p[0], p[1], a[0], a[1], b[0], b[1])\n    return area == sum([area1, area2, area3])\n",
        "target_code_len": 360,
        "diff_format": "@@ -98,7 +98,7 @@\n \n-def _is_point_inside(p: NamedPoint, a: NamedPoint, b: NamedPoint, c: NamedPoint):\n-    area = _triangle_area(a.x, a.y, b.x, b.y, c.x, c.y)\n-    area1 = _triangle_area(p.x, p.y, b.x, b.y, c.x, c.y)\n-    area2 = _triangle_area(p.x, p.y, a.x, a.y, c.x, c.y)\n-    area3 = _triangle_area(p.x, p.y, a.x, a.y, b.x, b.y)\n+def _is_point_inside(p: Point, a: Point, b: Point, c: Point):\n+    area = _triangle_area(a[0], a[1], b[0], b[1], c[0], c[1])\n+    area1 = _triangle_area(p[0], p[1], b[0], b[1], c[0], c[1])\n+    area2 = _triangle_area(p[0], p[1], a[0], a[1], c[0], c[1])\n+    area3 = _triangle_area(p[0], p[1], a[0], a[1], b[0], b[1])\n     return area == sum([area1, area2, area3])\n",
        "source_code_with_indent": "\n<DED>def _is_point_inside(p: NamedPoint, a: NamedPoint, b: NamedPoint, c: NamedPoint):\n    <IND>area = _triangle_area(a.x, a.y, b.x, b.y, c.x, c.y)\n    area1 = _triangle_area(p.x, p.y, b.x, b.y, c.x, c.y)\n    area2 = _triangle_area(p.x, p.y, a.x, a.y, c.x, c.y)\n    area3 = _triangle_area(p.x, p.y, a.x, a.y, b.x, b.y)\n    return area == sum([area1, area2, area3])\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def _is_point_inside(p: Point, a: Point, b: Point, c: Point):\n    <IND>area = _triangle_area(a[0], a[1], b[0], b[1], c[0], c[1])\n    area1 = _triangle_area(p[0], p[1], b[0], b[1], c[0], c[1])\n    area2 = _triangle_area(p[0], p[1], a[0], a[1], c[0], c[1])\n    area3 = _triangle_area(p[0], p[1], a[0], a[1], b[0], b[1])\n    return area == sum([area1, area2, area3])\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pythonarcade/arcade",
    "commit": "fb0fd1ab2f1a5f3ddab501d057889a3eebee6aca",
    "filename": "arcade/hitbox.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pythonarcade-arcade/arcade/hitbox.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "arcade/hitbox.py:98:19 Invalid type [31]: Expression `(float, float)` is not a valid type.",
    "message": " Expression `(float, float)` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 98,
    "warning_line": "    def _r(point: (float, float), height: int, width: int):",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _r(point: (float, float), height: int, width: int):\n        return point[0] - width / 2, (height - point[1]) - height / 2\n",
        "source_code_len": 131,
        "target_code": "\n    def _r(point: Tuple[float, float], height: int, width: int):\n        return point[0] - width / 2, (height - point[1]) - height / 2\n",
        "target_code_len": 136,
        "diff_format": "@@ -97,3 +98,3 @@\n \n-    def _r(point: (float, float), height: int, width: int):\n+    def _r(point: Tuple[float, float], height: int, width: int):\n         return point[0] - width / 2, (height - point[1]) - height / 2\n",
        "source_code_with_indent": "\n    <DED>def _r(point: (float, float), height: int, width: int):\n        <IND>return point[0] - width / 2, (height - point[1]) - height / 2\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def _r(point: Tuple[float, float], height: int, width: int):\n        <IND>return point[0] - width / 2, (height - point[1]) - height / 2\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pythonarcade/arcade",
    "commit": "fb0fd1ab2f1a5f3ddab501d057889a3eebee6aca",
    "filename": "arcade/hitbox.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pythonarcade-arcade/arcade/hitbox.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "arcade/hitbox.py:178:19 Incompatible parameter type [6]: Expected `arcade.arcade_types.NamedPoint` for 1st positional only parameter to anonymous call but got `Tuple[int, int]`.",
    "message": " Expected `arcade.arcade_types.NamedPoint` for 1st positional only parameter to anonymous call but got `Tuple[int, int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 178,
    "warning_line": "    if sample_func(p1) and sample_func(p2) and sample_func(p3) and sample_func(p4):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from arcade import NamedPoint\nfrom typing import List, Union, Tuple\n",
        "source_code_len": 68,
        "target_code": "from arcade import NamedPoint\nfrom arcade import Point\nfrom typing import List, Union, Tuple\n",
        "target_code_len": 93,
        "diff_format": "@@ -7,2 +7,3 @@\n from arcade import NamedPoint\n+from arcade import Point\n from typing import List, Union, Tuple\n",
        "source_code_with_indent": "from arcade import NamedPoint\nfrom typing import List, Union, Tuple\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from arcade import NamedPoint\nfrom arcade import Point\nfrom typing import List, Union, Tuple\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def sample_func(sample_point: NamedPoint) -> int:\n        \"\"\" Method used to sample image. \"\"\"\n",
        "source_code_len": 100,
        "target_code": "\n    def sample_func(sample_point: Point) -> int:\n        \"\"\" Method used to sample image. \"\"\"\n",
        "target_code_len": 95,
        "diff_format": "@@ -156,3 +157,3 @@\n \n-    def sample_func(sample_point: NamedPoint) -> int:\n+    def sample_func(sample_point: Point) -> int:\n         \"\"\" Method used to sample image. \"\"\"\n",
        "source_code_with_indent": "\n    def sample_func(sample_point: NamedPoint) -> int:\n        <IND>\"\"\" Method used to sample image. \"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    def sample_func(sample_point: Point) -> int:\n        <IND>\"\"\" Method used to sample image. \"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pythonarcade/arcade",
    "commit": "fb0fd1ab2f1a5f3ddab501d057889a3eebee6aca",
    "filename": "arcade/hitbox.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pythonarcade-arcade/arcade/hitbox.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "arcade/hitbox.py:178:39 Incompatible parameter type [6]: Expected `arcade.arcade_types.NamedPoint` for 1st positional only parameter to anonymous call but got `Tuple[int, int]`.",
    "message": " Expected `arcade.arcade_types.NamedPoint` for 1st positional only parameter to anonymous call but got `Tuple[int, int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 178,
    "warning_line": "    if sample_func(p1) and sample_func(p2) and sample_func(p3) and sample_func(p4):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from arcade import NamedPoint\nfrom typing import List, Union, Tuple\n",
        "source_code_len": 68,
        "target_code": "from arcade import NamedPoint\nfrom arcade import Point\nfrom typing import List, Union, Tuple\n",
        "target_code_len": 93,
        "diff_format": "@@ -7,2 +7,3 @@\n from arcade import NamedPoint\n+from arcade import Point\n from typing import List, Union, Tuple\n",
        "source_code_with_indent": "from arcade import NamedPoint\nfrom typing import List, Union, Tuple\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from arcade import NamedPoint\nfrom arcade import Point\nfrom typing import List, Union, Tuple\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def sample_func(sample_point: NamedPoint) -> int:\n        \"\"\" Method used to sample image. \"\"\"\n",
        "source_code_len": 100,
        "target_code": "\n    def sample_func(sample_point: Point) -> int:\n        \"\"\" Method used to sample image. \"\"\"\n",
        "target_code_len": 95,
        "diff_format": "@@ -156,3 +157,3 @@\n \n-    def sample_func(sample_point: NamedPoint) -> int:\n+    def sample_func(sample_point: Point) -> int:\n         \"\"\" Method used to sample image. \"\"\"\n",
        "source_code_with_indent": "\n    def sample_func(sample_point: NamedPoint) -> int:\n        <IND>\"\"\" Method used to sample image. \"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    def sample_func(sample_point: Point) -> int:\n        <IND>\"\"\" Method used to sample image. \"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pythonarcade/arcade",
    "commit": "fb0fd1ab2f1a5f3ddab501d057889a3eebee6aca",
    "filename": "arcade/hitbox.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pythonarcade-arcade/arcade/hitbox.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "arcade/hitbox.py:178:59 Incompatible parameter type [6]: Expected `arcade.arcade_types.NamedPoint` for 1st positional only parameter to anonymous call but got `Tuple[int, int]`.",
    "message": " Expected `arcade.arcade_types.NamedPoint` for 1st positional only parameter to anonymous call but got `Tuple[int, int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 178,
    "warning_line": "    if sample_func(p1) and sample_func(p2) and sample_func(p3) and sample_func(p4):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from arcade import NamedPoint\nfrom typing import List, Union, Tuple\n",
        "source_code_len": 68,
        "target_code": "from arcade import NamedPoint\nfrom arcade import Point\nfrom typing import List, Union, Tuple\n",
        "target_code_len": 93,
        "diff_format": "@@ -7,2 +7,3 @@\n from arcade import NamedPoint\n+from arcade import Point\n from typing import List, Union, Tuple\n",
        "source_code_with_indent": "from arcade import NamedPoint\nfrom typing import List, Union, Tuple\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from arcade import NamedPoint\nfrom arcade import Point\nfrom typing import List, Union, Tuple\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def sample_func(sample_point: NamedPoint) -> int:\n        \"\"\" Method used to sample image. \"\"\"\n",
        "source_code_len": 100,
        "target_code": "\n    def sample_func(sample_point: Point) -> int:\n        \"\"\" Method used to sample image. \"\"\"\n",
        "target_code_len": 95,
        "diff_format": "@@ -156,3 +157,3 @@\n \n-    def sample_func(sample_point: NamedPoint) -> int:\n+    def sample_func(sample_point: Point) -> int:\n         \"\"\" Method used to sample image. \"\"\"\n",
        "source_code_with_indent": "\n    def sample_func(sample_point: NamedPoint) -> int:\n        <IND>\"\"\" Method used to sample image. \"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    def sample_func(sample_point: Point) -> int:\n        <IND>\"\"\" Method used to sample image. \"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pythonarcade/arcade",
    "commit": "fb0fd1ab2f1a5f3ddab501d057889a3eebee6aca",
    "filename": "arcade/hitbox.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pythonarcade-arcade/arcade/hitbox.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "arcade/hitbox.py:178:79 Incompatible parameter type [6]: Expected `arcade.arcade_types.NamedPoint` for 1st positional only parameter to anonymous call but got `Tuple[int, int]`.",
    "message": " Expected `arcade.arcade_types.NamedPoint` for 1st positional only parameter to anonymous call but got `Tuple[int, int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 178,
    "warning_line": "    if sample_func(p1) and sample_func(p2) and sample_func(p3) and sample_func(p4):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from arcade import NamedPoint\nfrom typing import List, Union, Tuple\n",
        "source_code_len": 68,
        "target_code": "from arcade import NamedPoint\nfrom arcade import Point\nfrom typing import List, Union, Tuple\n",
        "target_code_len": 93,
        "diff_format": "@@ -7,2 +7,3 @@\n from arcade import NamedPoint\n+from arcade import Point\n from typing import List, Union, Tuple\n",
        "source_code_with_indent": "from arcade import NamedPoint\nfrom typing import List, Union, Tuple\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from arcade import NamedPoint\nfrom arcade import Point\nfrom typing import List, Union, Tuple\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def sample_func(sample_point: NamedPoint) -> int:\n        \"\"\" Method used to sample image. \"\"\"\n",
        "source_code_len": 100,
        "target_code": "\n    def sample_func(sample_point: Point) -> int:\n        \"\"\" Method used to sample image. \"\"\"\n",
        "target_code_len": 95,
        "diff_format": "@@ -156,3 +157,3 @@\n \n-    def sample_func(sample_point: NamedPoint) -> int:\n+    def sample_func(sample_point: Point) -> int:\n         \"\"\" Method used to sample image. \"\"\"\n",
        "source_code_with_indent": "\n    def sample_func(sample_point: NamedPoint) -> int:\n        <IND>\"\"\" Method used to sample image. \"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    def sample_func(sample_point: Point) -> int:\n        <IND>\"\"\" Method used to sample image. \"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pythonarcade/arcade",
    "commit": "fb0fd1ab2f1a5f3ddab501d057889a3eebee6aca",
    "filename": "arcade/math.py",
    "min_patch_found": false,
    "full_warning_msg": "arcade/math.py:1381:12 Incompatible return type [7]: Expected `Mat4` but got `Vec4`.",
    "exception": "[Errno 2] No such file or directory: '/home/chowyi/TypeAnnotation_Study/GitHub/pythonarcade-arcade/arcade/math.py'",
    "dd_fail": true
  },
  {
    "project": "pythonarcade/arcade",
    "commit": "fb0fd1ab2f1a5f3ddab501d057889a3eebee6aca",
    "filename": "arcade/physics_engines.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pythonarcade-arcade/arcade/physics_engines.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "arcade/physics_engines.py:316:70 Incompatible parameter type [6]: Expected `List[arcade.sprite_list.sprite_list.SpriteList]` for 2nd positional only parameter to call `arcade.sprite_list.spatial_hash.check_for_collision_with_lists` but got `Optional[List[arcade.sprite_list.sprite_list.SpriteList]]`.",
    "message": " Expected `List[arcade.sprite_list.sprite_list.SpriteList]` for 2nd positional only parameter to call `arcade.sprite_list.spatial_hash.check_for_collision_with_lists` but got `Optional[List[arcade.sprite_list.sprite_list.SpriteList]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 316,
    "warning_line": "        hit_list = check_for_collision_with_lists(self.player_sprite, self.platforms)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self.ladders: Optional[List[SpriteList]]\n        self.platforms: Optional[List[SpriteList]]\n\n",
        "source_code_len": 101,
        "target_code": "        self.ladders: Optional[List[SpriteList]]\n        self.platforms: List[SpriteList]\n\n",
        "target_code_len": 91,
        "diff_format": "@@ -267,3 +267,3 @@\n         self.ladders: Optional[List[SpriteList]]\n-        self.platforms: Optional[List[SpriteList]]\n+        self.platforms: List[SpriteList]\n \n",
        "source_code_with_indent": "        self.ladders: Optional[List[SpriteList]]\n        self.platforms: Optional[List[SpriteList]]\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self.ladders: Optional[List[SpriteList]]\n        self.platforms: List[SpriteList]\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]