[
  {
    "project": "gitpython-developers/GitPython",
    "commit": "c464e33793d0839666233883212018dbbcdf1e09",
    "filename": "git/refs/tag.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/gitpython-developers-GitPython/git/refs/tag.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "git/refs/tag.py:114:4 Inconsistent override [14]: `git.refs.tag.TagReference.delete` overrides method defined in `git.refs.symbolic.SymbolicReference` inconsistently. Could not find parameter `path` in overriding signature.",
    "message": " `git.refs.tag.TagReference.delete` overrides method defined in `git.refs.symbolic.SymbolicReference` inconsistently. Could not find parameter `path` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 114,
    "warning_line": "    def delete(cls, repo: 'Repo', *tags: 'TagReference') -> None:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "    @classmethod\n    def delete(cls, repo: 'Repo', *tags: 'TagReference') -> None:\n        \"\"\"Delete the given existing tag or tags\"\"\"\n",
        "source_code_len": 135,
        "target_code": "    @classmethod\n    def delete(cls, repo: 'Repo', *tags: 'TagReference') -> None:  # type: ignore[override]\n        \"\"\"Delete the given existing tag or tags\"\"\"\n",
        "target_code_len": 161,
        "diff_format": "@@ -113,3 +113,3 @@\n     @classmethod\n-    def delete(cls, repo: 'Repo', *tags: 'TagReference') -> None:\n+    def delete(cls, repo: 'Repo', *tags: 'TagReference') -> None:  # type: ignore[override]\n         \"\"\"Delete the given existing tag or tags\"\"\"\n",
        "source_code_with_indent": "    <DED>@classmethod\n    def delete(cls, repo: 'Repo', *tags: 'TagReference') -> None:\n        <IND>\"\"\"Delete the given existing tag or tags\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@classmethod\n    def delete(cls, repo: 'Repo', *tags: 'TagReference') -> None:  # type: ignore[override]\n        <IND>\"\"\"Delete the given existing tag or tags\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "gitpython-developers/GitPython",
    "commit": "c464e33793d0839666233883212018dbbcdf1e09",
    "filename": "git/repo/base.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/gitpython-developers-GitPython/git/repo/base.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "git/repo/base.py:436:34 Incompatible parameter type [6]: Expected `git.refs.head.Head` for 2nd positional only parameter to call `git.refs.head.Head.delete` but got `SymbolicReference`.",
    "message": " Expected `git.refs.head.Head` for 2nd positional only parameter to call `git.refs.head.Head.delete` but got `SymbolicReference`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 436,
    "warning_line": "        return Head.delete(self, *heads, **kwargs)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def delete_head(self, *heads: 'SymbolicReference', **kwargs: Any) -> None:\n        \"\"\"Delete the given heads\n",
        "source_code_len": 114,
        "target_code": "\n    def delete_head(self, *heads: 'Head', **kwargs: Any) -> None:\n        \"\"\"Delete the given heads\n",
        "target_code_len": 101,
        "diff_format": "@@ -431,3 +431,3 @@\n \n-    def delete_head(self, *heads: 'SymbolicReference', **kwargs: Any) -> None:\n+    def delete_head(self, *heads: 'Head', **kwargs: Any) -> None:\n         \"\"\"Delete the given heads\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def delete_head(self, *heads: 'SymbolicReference', **kwargs: Any) -> None:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def delete_head(self, *heads: 'Head', **kwargs: Any) -> None:\n        <IND>"
      }
    ]
  }
]