[
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "cache_fallback_directories.py",
    "min_patch_found": false,
    "full_warning_msg": "cache_fallback_directories.py:49:84 Incompatible parameter type [6]: Expected `typing.Sequence[stem.directory.Directory]` for 2nd positional only parameter to call `stem.directory._fallback_directory_differences` but got `typing.Dict[str, stem.directory.Fallback]`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "docs/_static/example/descriptor_from_tor_data_directory.py",
    "min_patch_found": false,
    "full_warning_msg": "docs/_static/example/descriptor_from_tor_data_directory.py:3:23 Incompatible parameter type [6]: Expected `typing.BinaryIO` for 1st positional only parameter to call `parse_file` but got `str`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "docs/_static/example/persisting_a_consensus_with_parse_file.py",
    "min_patch_found": false,
    "full_warning_msg": "docs/_static/example/persisting_a_consensus_with_parse_file.py:4:2 Incompatible parameter type [6]: Expected `typing.BinaryIO` for 1st positional only parameter to call `parse_file` but got `str`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "docs/_static/example/read_with_parse_file.py",
    "min_patch_found": false,
    "full_warning_msg": "docs/_static/example/read_with_parse_file.py:3:32 Incompatible parameter type [6]: Expected `typing.BinaryIO` for 1st positional only parameter to call `parse_file` but got `str`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "docs/_static/example/validate_descriptor_content.py",
    "min_patch_found": false,
    "full_warning_msg": "docs/_static/example/validate_descriptor_content.py:3:23 Incompatible parameter type [6]: Expected `typing.BinaryIO` for 1st positional only parameter to call `parse_file` but got `str`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/__init__.py",
    "file_hunks_size": 6,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/__init__.py:792:3 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `util.enum.Enum.__init__` but got `typing.Tuple[str, str]`.",
    "message": " Expected `str` for 1st positional only parameter to call `util.enum.Enum.__init__` but got `typing.Tuple[str, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 792,
    "warning_line": "  ('AUTHORITY', 'Authority'),"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/__init__.py",
    "file_hunks_size": 6,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/__init__.py:793:3 Incompatible parameter type [6]: Expected `str` for 2nd positional only parameter to call `util.enum.Enum.__init__` but got `typing.Tuple[str, str]`.",
    "message": " Expected `str` for 2nd positional only parameter to call `util.enum.Enum.__init__` but got `typing.Tuple[str, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 793,
    "warning_line": "  ('BADEXIT', 'BadExit'),"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/__init__.py",
    "file_hunks_size": 6,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/__init__.py:794:3 Incompatible parameter type [6]: Expected `str` for 3rd positional only parameter to call `util.enum.Enum.__init__` but got `typing.Tuple[str, str]`.",
    "message": " Expected `str` for 3rd positional only parameter to call `util.enum.Enum.__init__` but got `typing.Tuple[str, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 794,
    "warning_line": "  ('BADDIRECTORY', 'BadDirectory'),"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/__init__.py",
    "file_hunks_size": 6,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/__init__.py:795:3 Incompatible parameter type [6]: Expected `str` for 4th positional only parameter to call `util.enum.Enum.__init__` but got `typing.Tuple[str, str]`.",
    "message": " Expected `str` for 4th positional only parameter to call `util.enum.Enum.__init__` but got `typing.Tuple[str, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 795,
    "warning_line": "  ('EXIT', 'Exit'),"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/__init__.py",
    "file_hunks_size": 6,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/__init__.py:796:3 Incompatible parameter type [6]: Expected `str` for 5th positional only parameter to call `util.enum.Enum.__init__` but got `typing.Tuple[str, str]`.",
    "message": " Expected `str` for 5th positional only parameter to call `util.enum.Enum.__init__` but got `typing.Tuple[str, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 796,
    "warning_line": "  ('FAST', 'Fast'),"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/__init__.py",
    "file_hunks_size": 6,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/__init__.py:797:3 Incompatible parameter type [6]: Expected `str` for 6th positional only parameter to call `util.enum.Enum.__init__` but got `typing.Tuple[str, str]`.",
    "message": " Expected `str` for 6th positional only parameter to call `util.enum.Enum.__init__` but got `typing.Tuple[str, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 797,
    "warning_line": "  ('GUARD', 'Guard'),"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/__init__.py",
    "file_hunks_size": 6,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/__init__.py:798:3 Incompatible parameter type [6]: Expected `str` for 7th positional only parameter to call `util.enum.Enum.__init__` but got `typing.Tuple[str, str]`.",
    "message": " Expected `str` for 7th positional only parameter to call `util.enum.Enum.__init__` but got `typing.Tuple[str, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 798,
    "warning_line": "  ('HSDIR', 'HSDir'),"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/__init__.py",
    "file_hunks_size": 6,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/__init__.py:799:3 Incompatible parameter type [6]: Expected `str` for 8th positional only parameter to call `util.enum.Enum.__init__` but got `typing.Tuple[str, str]`.",
    "message": " Expected `str` for 8th positional only parameter to call `util.enum.Enum.__init__` but got `typing.Tuple[str, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 799,
    "warning_line": "  ('NAMED', 'Named'),"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/__init__.py",
    "file_hunks_size": 6,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/__init__.py:800:3 Incompatible parameter type [6]: Expected `str` for 9th positional only parameter to call `util.enum.Enum.__init__` but got `typing.Tuple[str, str]`.",
    "message": " Expected `str` for 9th positional only parameter to call `util.enum.Enum.__init__` but got `typing.Tuple[str, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 800,
    "warning_line": "  ('NO_ED_CONSENSUS', 'NoEdConsensus'),"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/__init__.py",
    "file_hunks_size": 6,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/__init__.py:801:3 Incompatible parameter type [6]: Expected `str` for 10th positional only parameter to call `util.enum.Enum.__init__` but got `typing.Tuple[str, str]`.",
    "message": " Expected `str` for 10th positional only parameter to call `util.enum.Enum.__init__` but got `typing.Tuple[str, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 801,
    "warning_line": "  ('RUNNING', 'Running'),"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/__init__.py",
    "file_hunks_size": 6,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/__init__.py:802:3 Incompatible parameter type [6]: Expected `str` for 11th positional only parameter to call `util.enum.Enum.__init__` but got `typing.Tuple[str, str]`.",
    "message": " Expected `str` for 11th positional only parameter to call `util.enum.Enum.__init__` but got `typing.Tuple[str, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 802,
    "warning_line": "  ('STABLE', 'Stable'),"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/__init__.py",
    "file_hunks_size": 6,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/__init__.py:803:3 Incompatible parameter type [6]: Expected `str` for 12th positional only parameter to call `util.enum.Enum.__init__` but got `typing.Tuple[str, str]`.",
    "message": " Expected `str` for 12th positional only parameter to call `util.enum.Enum.__init__` but got `typing.Tuple[str, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 803,
    "warning_line": "  ('STALE_DESC', 'StaleDesc'),"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/__init__.py",
    "file_hunks_size": 6,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/__init__.py:804:3 Incompatible parameter type [6]: Expected `str` for 13th positional only parameter to call `util.enum.Enum.__init__` but got `typing.Tuple[str, str]`.",
    "message": " Expected `str` for 13th positional only parameter to call `util.enum.Enum.__init__` but got `typing.Tuple[str, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 804,
    "warning_line": "  ('UNNAMED', 'Unnamed'),"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/__init__.py",
    "file_hunks_size": 6,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/__init__.py:805:3 Incompatible parameter type [6]: Expected `str` for 14th positional only parameter to call `util.enum.Enum.__init__` but got `typing.Tuple[str, str]`.",
    "message": " Expected `str` for 14th positional only parameter to call `util.enum.Enum.__init__` but got `typing.Tuple[str, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 805,
    "warning_line": "  ('V2DIR', 'V2Dir'),"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/__init__.py",
    "file_hunks_size": 6,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/__init__.py:806:3 Incompatible parameter type [6]: Expected `str` for 15th positional only parameter to call `util.enum.Enum.__init__` but got `typing.Tuple[str, str]`.",
    "message": " Expected `str` for 15th positional only parameter to call `util.enum.Enum.__init__` but got `typing.Tuple[str, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 806,
    "warning_line": "  ('V3DIR', 'V3Dir'),"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/__init__.py",
    "file_hunks_size": 6,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/__init__.py:807:3 Incompatible parameter type [6]: Expected `str` for 16th positional only parameter to call `util.enum.Enum.__init__` but got `typing.Tuple[str, str]`.",
    "message": " Expected `str` for 16th positional only parameter to call `util.enum.Enum.__init__` but got `typing.Tuple[str, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 807,
    "warning_line": "  ('VALID', 'Valid'),"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/__init__.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "stem/__init__.py:922:53 Unsupported operand [58]: `+` is not supported for operand types `Sequence[str]` and `typing.List[str]`.",
    "message": " `+` is not supported for operand types `Sequence[str]` and `typing.List[str]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 922,
    "warning_line": "StreamClosureReason = stem.util.enum.UppercaseEnum(*(RelayEndReason.keys() + [",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "# StreamClosureReason is a superset of RelayEndReason\nStreamClosureReason = stem.util.enum.UppercaseEnum(*(RelayEndReason.keys() + [\n  'END',\n",
        "source_code_len": 142,
        "target_code": "# StreamClosureReason is a superset of RelayEndReason\nStreamClosureReason = stem.util.enum.UppercaseEnum(*(RelayEndReason.keys() + [  # type: ignore\n  'END',\n",
        "target_code_len": 158,
        "diff_format": "@@ -921,3 +923,3 @@\n # StreamClosureReason is a superset of RelayEndReason\n-StreamClosureReason = stem.util.enum.UppercaseEnum(*(RelayEndReason.keys() + [\n+StreamClosureReason = stem.util.enum.UppercaseEnum(*(RelayEndReason.keys() + [  # type: ignore\n   'END',\n",
        "source_code_with_indent": "# StreamClosureReason is a superset of RelayEndReason\nStreamClosureReason = stem.util.enum.UppercaseEnum(*(RelayEndReason.keys() + [\n  'END',\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "# StreamClosureReason is a superset of RelayEndReason\nStreamClosureReason = stem.util.enum.UppercaseEnum(*(RelayEndReason.keys() + [  # type: ignore\n  'END',\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/client/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/client/__init__.py",
    "file_hunks_size": 18,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/client/__init__.py:77:39 Incompatible variable type [9]: link_protocols is declared to have type `Tuple[int]` but is used as type `Tuple[int, int, int]`.",
    "message": " link_protocols is declared to have type `Tuple[int]` but is used as type `Tuple[int, int, int]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 77,
    "warning_line": "  def connect(address: str, port: int, link_protocols: Tuple[int] = DEFAULT_LINK_PROTOCOLS) -> None:"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/client/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/client/__init__.py",
    "file_hunks_size": 18,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "stem/client/__init__.py:124:14 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `stem.socket.RelaySocket.send` but got `bytes`.",
    "message": " Expected `str` for 1st positional only parameter to call `stem.socket.RelaySocket.send` but got `bytes`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 124,
    "warning_line": "    conn.send(stem.client.cell.VersionsCell(link_protocols).pack(2))",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n    conn.send(stem.client.cell.VersionsCell(link_protocols).pack(2))\n    response = conn.recv()\n",
        "source_code_len": 97,
        "target_code": "\n    conn.send(stem.client.cell.VersionsCell(link_protocols).pack(2))  # type: ignore\n    response = conn.recv()\n",
        "target_code_len": 113,
        "diff_format": "@@ -123,3 +124,3 @@\n \n-    conn.send(stem.client.cell.VersionsCell(link_protocols).pack(2))\n+    conn.send(stem.client.cell.VersionsCell(link_protocols).pack(2))  # type: ignore\n     response = conn.recv()\n",
        "source_code_with_indent": "\n    <DED>conn.send(stem.client.cell.VersionsCell(link_protocols).pack(2))\n    response = conn.recv()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>conn.send(stem.client.cell.VersionsCell(link_protocols).pack(2))  # type: ignore\n    response = conn.recv()\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/client/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/client/__init__.py",
    "file_hunks_size": 18,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "stem/client/__init__.py:124:65 Incompatible parameter type [6]: Expected `LinkProtocol` for 1st positional only parameter to call `cell.VersionsCell.pack` but got `int`.",
    "message": " Expected `LinkProtocol` for 1st positional only parameter to call `cell.VersionsCell.pack` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 124,
    "warning_line": "    conn.send(stem.client.cell.VersionsCell(link_protocols).pack(2))",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n    conn.send(stem.client.cell.VersionsCell(link_protocols).pack(2))\n    response = conn.recv()\n",
        "source_code_len": 97,
        "target_code": "\n    conn.send(stem.client.cell.VersionsCell(link_protocols).pack(2))  # type: ignore\n    response = conn.recv()\n",
        "target_code_len": 113,
        "diff_format": "@@ -123,3 +124,3 @@\n \n-    conn.send(stem.client.cell.VersionsCell(link_protocols).pack(2))\n+    conn.send(stem.client.cell.VersionsCell(link_protocols).pack(2))  # type: ignore\n     response = conn.recv()\n",
        "source_code_with_indent": "\n    <DED>conn.send(stem.client.cell.VersionsCell(link_protocols).pack(2))\n    response = conn.recv()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>conn.send(stem.client.cell.VersionsCell(link_protocols).pack(2))  # type: ignore\n    response = conn.recv()\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/client/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/client/__init__.py",
    "file_hunks_size": 18,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/client/__init__.py:134:57 Incompatible parameter type [6]: Expected `LinkProtocol` for 2nd positional only parameter to call `Cell.pop` but got `int`.",
    "message": " Expected `LinkProtocol` for 2nd positional only parameter to call `Cell.pop` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 134,
    "warning_line": "    versions_reply = stem.client.cell.Cell.pop(response, 2)[0]"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/client/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/client/__init__.py",
    "file_hunks_size": 18,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/client/__init__.py:139:120 Incompatible parameter type [6]: Expected `typing.Iterable[str]` for 1st positional only parameter to call `str.join` but got `Tuple[int]`.",
    "message": " Expected `typing.Iterable[str]` for 1st positional only parameter to call `str.join` but got `Tuple[int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 139,
    "warning_line": "      raise stem.SocketError('Unable to find a common link protocol. We support %s but %s:%i supports %s.' % (', '.join(link_protocols), address, port, ', '.join(versions_reply.versions)))",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "      conn.close()\n      raise stem.SocketError('Unable to find a common link protocol. We support %s but %s:%i supports %s.' % (', '.join(link_protocols), address, port, ', '.join(versions_reply.versions)))\n\n",
        "source_code_len": 209,
        "target_code": "      conn.close()\n      raise stem.SocketError('Unable to find a common link protocol. We support %s but %s:%i supports %s.' % (', '.join(map(str, link_protocols)), address, port, ', '.join(map(str, versions_reply.versions))))\n\n",
        "target_code_len": 229,
        "diff_format": "@@ -138,3 +139,3 @@\n       conn.close()\n-      raise stem.SocketError('Unable to find a common link protocol. We support %s but %s:%i supports %s.' % (', '.join(link_protocols), address, port, ', '.join(versions_reply.versions)))\n+      raise stem.SocketError('Unable to find a common link protocol. We support %s but %s:%i supports %s.' % (', '.join(map(str, link_protocols)), address, port, ', '.join(map(str, versions_reply.versions))))\n \n",
        "source_code_with_indent": "      <IND>conn.close()\n      raise stem.SocketError('Unable to find a common link protocol. We support %s but %s:%i supports %s.' % (', '.join(link_protocols), address, port, ', '.join(versions_reply.versions)))\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "      <IND>conn.close()\n      raise stem.SocketError('Unable to find a common link protocol. We support %s but %s:%i supports %s.' % (', '.join(map(str, link_protocols)), address, port, ', '.join(map(str, versions_reply.versions))))\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/client/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/client/__init__.py",
    "file_hunks_size": 18,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/client/__init__.py:146:14 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `stem.socket.RelaySocket.send` but got `bytes`.",
    "message": " Expected `str` for 1st positional only parameter to call `stem.socket.RelaySocket.send` but got `bytes`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 146,
    "warning_line": "    conn.send(stem.client.cell.NetinfoCell(relay_addr, []).pack(link_protocol))"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/client/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/client/__init__.py",
    "file_hunks_size": 18,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/client/__init__.py:146:64 Incompatible parameter type [6]: Expected `LinkProtocol` for 1st positional only parameter to call `cell.NetinfoCell.pack` but got `int`.",
    "message": " Expected `LinkProtocol` for 1st positional only parameter to call `cell.NetinfoCell.pack` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 146,
    "warning_line": "    conn.send(stem.client.cell.NetinfoCell(relay_addr, []).pack(link_protocol))"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/client/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/client/__init__.py",
    "file_hunks_size": 18,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/client/__init__.py:148:4 Incompatible return type [7]: Expected `None` but got `Relay`.",
    "message": " Expected `None` but got `Relay`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 148,
    "warning_line": "    return Relay(conn, link_protocol)"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/client/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/client/__init__.py",
    "file_hunks_size": 18,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/client/__init__.py:148:17 Incompatible parameter type [6]: Expected `int` for 1st positional only parameter to call `Relay.__init__` but got `stem.socket.RelaySocket`.",
    "message": " Expected `int` for 1st positional only parameter to call `Relay.__init__` but got `stem.socket.RelaySocket`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 148,
    "warning_line": "    return Relay(conn, link_protocol)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n  def __init__(self, orport: int, link_protocol: int) -> None:\n    self.link_protocol = LinkProtocol(link_protocol)\n",
        "source_code_len": 117,
        "target_code": "\n  def __init__(self, orport: stem.socket.RelaySocket, link_protocol: int) -> None:\n    self.link_protocol = LinkProtocol(link_protocol)\n",
        "target_code_len": 137,
        "diff_format": "@@ -68,3 +69,3 @@\n \n-  def __init__(self, orport: int, link_protocol: int) -> None:\n+  def __init__(self, orport: stem.socket.RelaySocket, link_protocol: int) -> None:\n     self.link_protocol = LinkProtocol(link_protocol)\n",
        "source_code_with_indent": "\n  def __init__(self, orport: int, link_protocol: int) -> None:\n    <IND>self.link_protocol = LinkProtocol(link_protocol)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n  def __init__(self, orport: stem.socket.RelaySocket, link_protocol: int) -> None:\n    <IND>self.link_protocol = LinkProtocol(link_protocol)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/client/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/client/__init__.py",
    "file_hunks_size": 18,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "stem/client/__init__.py:186:8 Incompatible return type [7]: Expected `None` but got `bytes`.",
    "message": " Expected `None` but got `bytes`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 186,
    "warning_line": "        return content",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        content, self._orport_buffer = split(self._orport_buffer, cell_size)\n        return content\n      else:\n",
        "source_code_len": 112,
        "target_code": "        content, self._orport_buffer = split(self._orport_buffer, cell_size)\n        return content  # type: ignore\n      else:\n",
        "target_code_len": 128,
        "diff_format": "@@ -185,3 +189,3 @@\n         content, self._orport_buffer = split(self._orport_buffer, cell_size)\n-        return content\n+        return content  # type: ignore\n       else:\n",
        "source_code_with_indent": "        <IND>content, self._orport_buffer = split(self._orport_buffer, cell_size)\n        return content\n      <DED>else:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>content, self._orport_buffer = split(self._orport_buffer, cell_size)\n        return content  # type: ignore\n      <DED>else:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/client/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/client/__init__.py",
    "file_hunks_size": 18,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/client/__init__.py:189:8 Incompatible return type [7]: Expected `None` but got `Cell`.",
    "message": " Expected `None` but got `Cell`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 189,
    "warning_line": "        return cell"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/client/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/client/__init__.py",
    "file_hunks_size": 18,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/client/__init__.py:221:6 Incompatible return type [7]: Expected `Iterator[Cell]` but got `typing.Generator[typing.Union[Cell, bytes], None, None]`.",
    "message": " Expected `Iterator[Cell]` but got `typing.Generator[typing.Union[Cell, bytes], None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 221,
    "warning_line": "      yield received_cell",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    response = self._orport.recv(timeout = 1)\n\n    for received_cell in stem.client.cell.Cell.pop(response, self.link_protocol):\n      yield received_cell\n\n",
        "source_code_len": 156,
        "target_code": "    response = self._orport.recv(timeout = 1)\n    yield stem.client.cell.Cell.pop(response, self.link_protocol)[0]\n\n",
        "target_code_len": 116,
        "diff_format": "@@ -218,5 +224,3 @@\n     response = self._orport.recv(timeout = 1)\n-\n-    for received_cell in stem.client.cell.Cell.pop(response, self.link_protocol):\n-      yield received_cell\n+    yield stem.client.cell.Cell.pop(response, self.link_protocol)[0]\n \n",
        "source_code_with_indent": "    response = self._orport.recv(timeout = 1)\n\n    for received_cell in stem.client.cell.Cell.pop(response, self.link_protocol):\n      <IND>yield received_cell\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    response = self._orport.recv(timeout = 1)\n    yield stem.client.cell.Cell.pop(response, self.link_protocol)[0]\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/client/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/client/__init__.py",
    "file_hunks_size": 18,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/client/__init__.py:281:6 Incompatible return type [7]: Expected `None` but got `Circuit`.",
    "message": " Expected `None` but got `Circuit`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 281,
    "warning_line": "      return circ",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n  def create_circuit(self) -> None:\n    \"\"\"\n",
        "source_code_len": 45,
        "target_code": "\n  def create_circuit(self) -> 'stem.client.Circuit':\n    \"\"\"\n",
        "target_code_len": 62,
        "diff_format": "@@ -253,3 +257,3 @@\n \n-  def create_circuit(self) -> None:\n+  def create_circuit(self) -> 'stem.client.Circuit':\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n  <DED><DED>def create_circuit(self) -> None:\n    <IND>",
        "target_code_with_indent": "\n  <DED><DED>def create_circuit(self) -> 'stem.client.Circuit':\n    <IND>"
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/client/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/client/__init__.py",
    "file_hunks_size": 18,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/client/__init__.py:336:4 Incompatible return type [7]: Expected `str` but got implicit return value of `None`.",
    "message": " Expected `str` but got implicit return value of `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 336,
    "warning_line": "    with self.relay._orport_lock:"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/client/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/client/__init__.py",
    "file_hunks_size": 18,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/client/__init__.py:338:36 Incompatible parameter type [6]: Expected `bytes` for 2nd positional only parameter to call `Circuit._send` but got `str`.",
    "message": " Expected `bytes` for 2nd positional only parameter to call `Circuit._send` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 338,
    "warning_line": "      self._send(RelayCommand.DATA, request, stream_id = stream_id)"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/client/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/client/__init__.py",
    "file_hunks_size": 18,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/client/__init__.py:348:117 Incompatible parameter type [6]: Expected `bytes` for 2nd positional only parameter to call `cell.RelayCell.decrypt` but got `None`.",
    "message": " Expected `bytes` for 2nd positional only parameter to call `cell.RelayCell.decrypt` but got `None`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 348,
    "warning_line": "        decrypted_cell, backward_key, backward_digest = stem.client.cell.RelayCell.decrypt(self.relay.link_protocol, encrypted_cell, self.backward_key, self.backward_digest)"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/client/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/client/__init__.py",
    "file_hunks_size": 18,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/client/__init__.py:357:10 Incompatible return type [7]: Expected `str` but got `bytes`.",
    "message": " Expected `str` but got `bytes`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 357,
    "warning_line": "          return b''.join([cell.data for cell in response])"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/client/cell.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/client/cell.py",
    "file_hunks_size": 22,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/client/cell.py:161:6 Incompatible return type [7]: Expected `Cell` but got `typing.Generator[Cell, None, None]`.",
    "message": " Expected `Cell` but got `typing.Generator[Cell, None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 161,
    "warning_line": "      yield cell",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import Any, Sequence, Tuple, Type\n\n",
        "source_code_len": 48,
        "target_code": "\nfrom typing import Any, Iterator, List, Optional, Sequence, Tuple, Type, Union\n\n",
        "target_code_len": 81,
        "diff_format": "@@ -51,3 +51,3 @@\n \n-from typing import Any, Sequence, Tuple, Type\n+from typing import Any, Iterator, List, Optional, Sequence, Tuple, Type, Union\n \n",
        "source_code_with_indent": "\nfrom typing import Any, Sequence, Tuple, Type\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import Any, Iterator, List, Optional, Sequence, Tuple, Type, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "  @staticmethod\n  def unpack(content: bytes, link_protocol: 'stem.client.datatype.LinkProtocol') -> 'stem.client.cell.Cell':\n    \"\"\"\n",
        "source_code_len": 133,
        "target_code": "  @staticmethod\n  def unpack(content: bytes, link_protocol: 'stem.client.datatype.LinkProtocol') -> Iterator['stem.client.cell.Cell']:\n    \"\"\"\n",
        "target_code_len": 143,
        "diff_format": "@@ -144,3 +144,3 @@\n   @staticmethod\n-  def unpack(content: bytes, link_protocol: 'stem.client.datatype.LinkProtocol') -> 'stem.client.cell.Cell':\n+  def unpack(content: bytes, link_protocol: 'stem.client.datatype.LinkProtocol') -> Iterator['stem.client.cell.Cell']:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "  <DED>@staticmethod\n  def unpack(content: bytes, link_protocol: 'stem.client.datatype.LinkProtocol') -> 'stem.client.cell.Cell':\n    <IND>",
        "target_code_with_indent": "  <DED>@staticmethod\n  def unpack(content: bytes, link_protocol: 'stem.client.datatype.LinkProtocol') -> Iterator['stem.client.cell.Cell']:\n    <IND>"
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/client/cell.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/client/cell.py",
    "file_hunks_size": 22,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/client/cell.py:196:137 Incompatible variable type [9]: circ_id is declared to have type `int` but is used as type `None`.",
    "message": " circ_id is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 196,
    "warning_line": "  def _pack(cls: Type['stem.client.cell.Cell'], link_protocol: 'stem.client.datatype.LinkProtocol', payload: bytes, unused: bytes = b'', circ_id: int = None) -> bytes:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import Any, Sequence, Tuple, Type\n\n",
        "source_code_len": 48,
        "target_code": "\nfrom typing import Any, Iterator, List, Optional, Sequence, Tuple, Type, Union\n\n",
        "target_code_len": 81,
        "diff_format": "@@ -51,3 +51,3 @@\n \n-from typing import Any, Sequence, Tuple, Type\n+from typing import Any, Iterator, List, Optional, Sequence, Tuple, Type, Union\n \n",
        "source_code_with_indent": "\nfrom typing import Any, Sequence, Tuple, Type\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import Any, Iterator, List, Optional, Sequence, Tuple, Type, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "  @classmethod\n  def _pack(cls: Type['stem.client.cell.Cell'], link_protocol: 'stem.client.datatype.LinkProtocol', payload: bytes, unused: bytes = b'', circ_id: int = None) -> bytes:\n    \"\"\"\n",
        "source_code_len": 191,
        "target_code": "  @classmethod\n  def _pack(cls: Type['stem.client.cell.Cell'], link_protocol: 'stem.client.datatype.LinkProtocol', payload: bytes, unused: bytes = b'', circ_id: Optional[int] = None) -> bytes:\n    \"\"\"\n",
        "target_code_len": 201,
        "diff_format": "@@ -195,3 +195,3 @@\n   @classmethod\n-  def _pack(cls: Type['stem.client.cell.Cell'], link_protocol: 'stem.client.datatype.LinkProtocol', payload: bytes, unused: bytes = b'', circ_id: int = None) -> bytes:\n+  def _pack(cls: Type['stem.client.cell.Cell'], link_protocol: 'stem.client.datatype.LinkProtocol', payload: bytes, unused: bytes = b'', circ_id: Optional[int] = None) -> bytes:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "  <DED>@classmethod\n  def _pack(cls: Type['stem.client.cell.Cell'], link_protocol: 'stem.client.datatype.LinkProtocol', payload: bytes, unused: bytes = b'', circ_id: int = None) -> bytes:\n    <IND>",
        "target_code_with_indent": "  <DED>@classmethod\n  def _pack(cls: Type['stem.client.cell.Cell'], link_protocol: 'stem.client.datatype.LinkProtocol', payload: bytes, unused: bytes = b'', circ_id: Optional[int] = None) -> bytes:\n    <IND>"
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/client/cell.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/client/cell.py",
    "file_hunks_size": 22,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/client/cell.py:295:21 Incompatible variable type [9]: payload is declared to have type `bytes` but is used as type `None`.",
    "message": " payload is declared to have type `bytes` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 295,
    "warning_line": "  def __init__(self, payload: bytes = None) -> None:"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/client/cell.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/client/cell.py",
    "file_hunks_size": 22,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/client/cell.py:543:35 Incompatible variable type [9]: key_material is declared to have type `bytes` but is used as type `None`.",
    "message": " key_material is declared to have type `bytes` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 543,
    "warning_line": "  def __init__(self, circ_id: int, key_material: bytes = None, unused: bytes = b'') -> None:"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/client/cell.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/client/cell.py",
    "file_hunks_size": 22,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/client/cell.py:580:58 Incompatible variable type [9]: key_material is declared to have type `bytes` but is used as type `None`.",
    "message": " key_material is declared to have type `bytes` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 580,
    "warning_line": "  def __init__(self, circ_id: int, derivative_key: bytes, key_material: bytes = None, unused: bytes = b'') -> None:"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/client/cell.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/client/cell.py",
    "file_hunks_size": 22,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/client/cell.py:604:4 Incompatible return type [7]: Expected `CreateFastCell` but got `CreatedFastCell`.",
    "message": " Expected `CreateFastCell` but got `CreatedFastCell`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 604,
    "warning_line": "    return CreatedFastCell(circ_id, derivative_key, key_material, content)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "  @classmethod\n  def _unpack(cls, content: bytes, circ_id: int, link_protocol: 'stem.client.datatype.LinkProtocol') -> 'stem.client.cell.CreateFastCell':\n    if len(content) < HASH_LEN * 2:\n",
        "source_code_len": 190,
        "target_code": "  @classmethod\n  def _unpack(cls, content: bytes, circ_id: int, link_protocol: 'stem.client.datatype.LinkProtocol') -> 'stem.client.cell.CreatedFastCell':\n    if len(content) < HASH_LEN * 2:\n",
        "target_code_len": 191,
        "diff_format": "@@ -596,3 +596,3 @@\n   @classmethod\n-  def _unpack(cls, content: bytes, circ_id: int, link_protocol: 'stem.client.datatype.LinkProtocol') -> 'stem.client.cell.CreateFastCell':\n+  def _unpack(cls, content: bytes, circ_id: int, link_protocol: 'stem.client.datatype.LinkProtocol') -> 'stem.client.cell.CreatedFastCell':\n     if len(content) < HASH_LEN * 2:\n",
        "source_code_with_indent": "  <DED>@classmethod\n  def _unpack(cls, content: bytes, circ_id: int, link_protocol: 'stem.client.datatype.LinkProtocol') -> 'stem.client.cell.CreateFastCell':\n    <IND>if len(content) < HASH_LEN * 2:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "  <DED>@classmethod\n  def _unpack(cls, content: bytes, circ_id: int, link_protocol: 'stem.client.datatype.LinkProtocol') -> 'stem.client.cell.CreatedFastCell':\n    <IND>if len(content) < HASH_LEN * 2:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/client/cell.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/client/cell.py",
    "file_hunks_size": 22,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/client/cell.py:656:131 Incompatible variable type [9]: timestamp is declared to have type `datetime.datetime` but is used as type `None`.",
    "message": " timestamp is declared to have type `datetime.datetime` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 656,
    "warning_line": "  def __init__(self, receiver_address: 'stem.client.datatype.Address', sender_addresses: Sequence['stem.client.datatype.Address'], timestamp: datetime.datetime = None, unused: bytes = b'') -> None:"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/client/cell.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/client/cell.py",
    "file_hunks_size": 22,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/client/cell.py:738:21 Incompatible variable type [9]: size is declared to have type `int` but is used as type `None`.",
    "message": " size is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 738,
    "warning_line": "  def __init__(self, size: int = None, payload: bytes = None) -> None:"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/client/cell.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/client/cell.py",
    "file_hunks_size": 22,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/client/cell.py:738:39 Incompatible variable type [9]: payload is declared to have type `bytes` but is used as type `None`.",
    "message": " payload is declared to have type `bytes` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 738,
    "warning_line": "  def __init__(self, size: int = None, payload: bytes = None) -> None:"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/client/cell.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/client/cell.py",
    "file_hunks_size": 22,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/client/cell.py:809:45 Incompatible variable type [9]: challenge is declared to have type `bytes` but is used as type `None`.",
    "message": " challenge is declared to have type `bytes` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 809,
    "warning_line": "  def __init__(self, methods: Sequence[int], challenge: bytes = None, unused: bytes = b'') -> None:"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/connection.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/connection.py",
    "file_hunks_size": 17,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/connection.py:214:12 Incompatible variable type [9]: control_port is declared to have type `Tuple[str, int]` but is used as type `Tuple[str, str]`.",
    "message": " control_port is declared to have type `Tuple[str, int]` but is used as type `Tuple[str, str]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 214,
    "warning_line": "def connect(control_port: Tuple[str, int] = ('127.0.0.1', 'default'), control_socket: str = '/var/run/tor/control', password: Optional[str] = None, password_prompt: bool = False, chroot_path: Optional[str] = None, controller: type = stem.control.Controller) -> Union[stem.control.BaseController, stem.socket.ControlSocket]:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef connect(control_port: Tuple[str, int] = ('127.0.0.1', 'default'), control_socket: str = '/var/run/tor/control', password: Optional[str] = None, password_prompt: bool = False, chroot_path: Optional[str] = None, controller: type = stem.control.Controller) -> Union[stem.control.BaseController, stem.socket.ControlSocket]:\n  \"\"\"\n",
        "source_code_len": 331,
        "target_code": "\ndef connect(control_port: Tuple[str, Union[str, int]] = ('127.0.0.1', 'default'), control_socket: str = '/var/run/tor/control', password: Optional[str] = None, password_prompt: bool = False, chroot_path: Optional[str] = None, controller: Type = stem.control.Controller) -> Any:\n  \"\"\"\n",
        "target_code_len": 285,
        "diff_format": "@@ -213,3 +213,3 @@\n \n-def connect(control_port: Tuple[str, int] = ('127.0.0.1', 'default'), control_socket: str = '/var/run/tor/control', password: Optional[str] = None, password_prompt: bool = False, chroot_path: Optional[str] = None, controller: type = stem.control.Controller) -> Union[stem.control.BaseController, stem.socket.ControlSocket]:\n+def connect(control_port: Tuple[str, Union[str, int]] = ('127.0.0.1', 'default'), control_socket: str = '/var/run/tor/control', password: Optional[str] = None, password_prompt: bool = False, chroot_path: Optional[str] = None, controller: Type = stem.control.Controller) -> Any:\n   \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\ndef connect(control_port: Tuple[str, int] = ('127.0.0.1', 'default'), control_socket: str = '/var/run/tor/control', password: Optional[str] = None, password_prompt: bool = False, chroot_path: Optional[str] = None, controller: type = stem.control.Controller) -> Union[stem.control.BaseController, stem.socket.ControlSocket]:\n  <IND>",
        "target_code_with_indent": "\ndef connect(control_port: Tuple[str, Union[str, int]] = ('127.0.0.1', 'default'), control_socket: str = '/var/run/tor/control', password: Optional[str] = None, password_prompt: bool = False, chroot_path: Optional[str] = None, controller: Type = stem.control.Controller) -> Any:\n  <IND>"
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/connection.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/connection.py",
    "file_hunks_size": 17,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/connection.py:295:4 Incompatible return type [7]: Expected `Union[stem.control.BaseController, stem.socket.ControlSocket]` but got `None`.",
    "message": " Expected `Union[stem.control.BaseController, stem.socket.ControlSocket]` but got `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 295,
    "warning_line": "    return None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef connect(control_port: Tuple[str, int] = ('127.0.0.1', 'default'), control_socket: str = '/var/run/tor/control', password: Optional[str] = None, password_prompt: bool = False, chroot_path: Optional[str] = None, controller: type = stem.control.Controller) -> Union[stem.control.BaseController, stem.socket.ControlSocket]:\n  \"\"\"\n",
        "source_code_len": 331,
        "target_code": "\ndef connect(control_port: Tuple[str, Union[str, int]] = ('127.0.0.1', 'default'), control_socket: str = '/var/run/tor/control', password: Optional[str] = None, password_prompt: bool = False, chroot_path: Optional[str] = None, controller: Type = stem.control.Controller) -> Any:\n  \"\"\"\n",
        "target_code_len": 285,
        "diff_format": "@@ -213,3 +213,3 @@\n \n-def connect(control_port: Tuple[str, int] = ('127.0.0.1', 'default'), control_socket: str = '/var/run/tor/control', password: Optional[str] = None, password_prompt: bool = False, chroot_path: Optional[str] = None, controller: type = stem.control.Controller) -> Union[stem.control.BaseController, stem.socket.ControlSocket]:\n+def connect(control_port: Tuple[str, Union[str, int]] = ('127.0.0.1', 'default'), control_socket: str = '/var/run/tor/control', password: Optional[str] = None, password_prompt: bool = False, chroot_path: Optional[str] = None, controller: Type = stem.control.Controller) -> Any:\n   \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\ndef connect(control_port: Tuple[str, int] = ('127.0.0.1', 'default'), control_socket: str = '/var/run/tor/control', password: Optional[str] = None, password_prompt: bool = False, chroot_path: Optional[str] = None, controller: type = stem.control.Controller) -> Union[stem.control.BaseController, stem.socket.ControlSocket]:\n  <IND>",
        "target_code_with_indent": "\ndef connect(control_port: Tuple[str, Union[str, int]] = ('127.0.0.1', 'default'), control_socket: str = '/var/run/tor/control', password: Optional[str] = None, password_prompt: bool = False, chroot_path: Optional[str] = None, controller: Type = stem.control.Controller) -> Any:\n  <IND>"
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/connection.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/connection.py",
    "file_hunks_size": 17,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/connection.py:330:4 Incompatible return type [7]: Expected `Union[stem.control.BaseController, stem.socket.ControlSocket]` but got `None`.",
    "message": " Expected `Union[stem.control.BaseController, stem.socket.ControlSocket]` but got `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 330,
    "warning_line": "    return None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _connect_auth(control_socket: stem.socket.ControlSocket, password: str, password_prompt: bool, chroot_path: str, controller: Union[Type[stem.control.BaseController], Type[stem.socket.ControlSocket]]) -> Union[stem.control.BaseController, stem.socket.ControlSocket]:\n  \"\"\"\n",
        "source_code_len": 277,
        "target_code": "\ndef _connect_auth(control_socket: stem.socket.ControlSocket, password: str, password_prompt: bool, chroot_path: str, controller: Optional[Type[stem.control.BaseController]]) -> Any:\n  \"\"\"\n",
        "target_code_len": 189,
        "diff_format": "@@ -299,3 +302,3 @@\n \n-def _connect_auth(control_socket: stem.socket.ControlSocket, password: str, password_prompt: bool, chroot_path: str, controller: Union[Type[stem.control.BaseController], Type[stem.socket.ControlSocket]]) -> Union[stem.control.BaseController, stem.socket.ControlSocket]:\n+def _connect_auth(control_socket: stem.socket.ControlSocket, password: str, password_prompt: bool, chroot_path: str, controller: Optional[Type[stem.control.BaseController]]) -> Any:\n   \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>def _connect_auth(control_socket: stem.socket.ControlSocket, password: str, password_prompt: bool, chroot_path: str, controller: Union[Type[stem.control.BaseController], Type[stem.socket.ControlSocket]]) -> Union[stem.control.BaseController, stem.socket.ControlSocket]:\n  <IND>",
        "target_code_with_indent": "\n<DED>def _connect_auth(control_socket: stem.socket.ControlSocket, password: str, password_prompt: bool, chroot_path: str, controller: Optional[Type[stem.control.BaseController]]) -> Any:\n  <IND>"
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/connection.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/connection.py",
    "file_hunks_size": 17,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/connection.py:334:4 Incompatible return type [7]: Expected `Union[stem.control.BaseController, stem.socket.ControlSocket]` but got `None`.",
    "message": " Expected `Union[stem.control.BaseController, stem.socket.ControlSocket]` but got `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 334,
    "warning_line": "    return None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _connect_auth(control_socket: stem.socket.ControlSocket, password: str, password_prompt: bool, chroot_path: str, controller: Union[Type[stem.control.BaseController], Type[stem.socket.ControlSocket]]) -> Union[stem.control.BaseController, stem.socket.ControlSocket]:\n  \"\"\"\n",
        "source_code_len": 277,
        "target_code": "\ndef _connect_auth(control_socket: stem.socket.ControlSocket, password: str, password_prompt: bool, chroot_path: str, controller: Optional[Type[stem.control.BaseController]]) -> Any:\n  \"\"\"\n",
        "target_code_len": 189,
        "diff_format": "@@ -299,3 +302,3 @@\n \n-def _connect_auth(control_socket: stem.socket.ControlSocket, password: str, password_prompt: bool, chroot_path: str, controller: Union[Type[stem.control.BaseController], Type[stem.socket.ControlSocket]]) -> Union[stem.control.BaseController, stem.socket.ControlSocket]:\n+def _connect_auth(control_socket: stem.socket.ControlSocket, password: str, password_prompt: bool, chroot_path: str, controller: Optional[Type[stem.control.BaseController]]) -> Any:\n   \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>def _connect_auth(control_socket: stem.socket.ControlSocket, password: str, password_prompt: bool, chroot_path: str, controller: Union[Type[stem.control.BaseController], Type[stem.socket.ControlSocket]]) -> Union[stem.control.BaseController, stem.socket.ControlSocket]:\n  <IND>",
        "target_code_with_indent": "\n<DED>def _connect_auth(control_socket: stem.socket.ControlSocket, password: str, password_prompt: bool, chroot_path: str, controller: Optional[Type[stem.control.BaseController]]) -> Any:\n  <IND>"
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/connection.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/connection.py",
    "file_hunks_size": 17,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/connection.py:338:4 Incompatible return type [7]: Expected `Union[stem.control.BaseController, stem.socket.ControlSocket]` but got `None`.",
    "message": " Expected `Union[stem.control.BaseController, stem.socket.ControlSocket]` but got `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 338,
    "warning_line": "    return None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _connect_auth(control_socket: stem.socket.ControlSocket, password: str, password_prompt: bool, chroot_path: str, controller: Union[Type[stem.control.BaseController], Type[stem.socket.ControlSocket]]) -> Union[stem.control.BaseController, stem.socket.ControlSocket]:\n  \"\"\"\n",
        "source_code_len": 277,
        "target_code": "\ndef _connect_auth(control_socket: stem.socket.ControlSocket, password: str, password_prompt: bool, chroot_path: str, controller: Optional[Type[stem.control.BaseController]]) -> Any:\n  \"\"\"\n",
        "target_code_len": 189,
        "diff_format": "@@ -299,3 +302,3 @@\n \n-def _connect_auth(control_socket: stem.socket.ControlSocket, password: str, password_prompt: bool, chroot_path: str, controller: Union[Type[stem.control.BaseController], Type[stem.socket.ControlSocket]]) -> Union[stem.control.BaseController, stem.socket.ControlSocket]:\n+def _connect_auth(control_socket: stem.socket.ControlSocket, password: str, password_prompt: bool, chroot_path: str, controller: Optional[Type[stem.control.BaseController]]) -> Any:\n   \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>def _connect_auth(control_socket: stem.socket.ControlSocket, password: str, password_prompt: bool, chroot_path: str, controller: Union[Type[stem.control.BaseController], Type[stem.socket.ControlSocket]]) -> Union[stem.control.BaseController, stem.socket.ControlSocket]:\n  <IND>",
        "target_code_with_indent": "\n<DED>def _connect_auth(control_socket: stem.socket.ControlSocket, password: str, password_prompt: bool, chroot_path: str, controller: Optional[Type[stem.control.BaseController]]) -> Any:\n  <IND>"
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/connection.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/connection.py",
    "file_hunks_size": 17,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/connection.py:349:8 Incompatible return type [7]: Expected `Union[stem.control.BaseController, stem.socket.ControlSocket]` but got `None`.",
    "message": " Expected `Union[stem.control.BaseController, stem.socket.ControlSocket]` but got `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 349,
    "warning_line": "        return None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _connect_auth(control_socket: stem.socket.ControlSocket, password: str, password_prompt: bool, chroot_path: str, controller: Union[Type[stem.control.BaseController], Type[stem.socket.ControlSocket]]) -> Union[stem.control.BaseController, stem.socket.ControlSocket]:\n  \"\"\"\n",
        "source_code_len": 277,
        "target_code": "\ndef _connect_auth(control_socket: stem.socket.ControlSocket, password: str, password_prompt: bool, chroot_path: str, controller: Optional[Type[stem.control.BaseController]]) -> Any:\n  \"\"\"\n",
        "target_code_len": 189,
        "diff_format": "@@ -299,3 +302,3 @@\n \n-def _connect_auth(control_socket: stem.socket.ControlSocket, password: str, password_prompt: bool, chroot_path: str, controller: Union[Type[stem.control.BaseController], Type[stem.socket.ControlSocket]]) -> Union[stem.control.BaseController, stem.socket.ControlSocket]:\n+def _connect_auth(control_socket: stem.socket.ControlSocket, password: str, password_prompt: bool, chroot_path: str, controller: Optional[Type[stem.control.BaseController]]) -> Any:\n   \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>def _connect_auth(control_socket: stem.socket.ControlSocket, password: str, password_prompt: bool, chroot_path: str, controller: Union[Type[stem.control.BaseController], Type[stem.socket.ControlSocket]]) -> Union[stem.control.BaseController, stem.socket.ControlSocket]:\n  <IND>",
        "target_code_with_indent": "\n<DED>def _connect_auth(control_socket: stem.socket.ControlSocket, password: str, password_prompt: bool, chroot_path: str, controller: Optional[Type[stem.control.BaseController]]) -> Any:\n  <IND>"
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/connection.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/connection.py",
    "file_hunks_size": 17,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/connection.py:355:6 Incompatible return type [7]: Expected `Union[stem.control.BaseController, stem.socket.ControlSocket]` but got `None`.",
    "message": " Expected `Union[stem.control.BaseController, stem.socket.ControlSocket]` but got `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 355,
    "warning_line": "      return None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _connect_auth(control_socket: stem.socket.ControlSocket, password: str, password_prompt: bool, chroot_path: str, controller: Union[Type[stem.control.BaseController], Type[stem.socket.ControlSocket]]) -> Union[stem.control.BaseController, stem.socket.ControlSocket]:\n  \"\"\"\n",
        "source_code_len": 277,
        "target_code": "\ndef _connect_auth(control_socket: stem.socket.ControlSocket, password: str, password_prompt: bool, chroot_path: str, controller: Optional[Type[stem.control.BaseController]]) -> Any:\n  \"\"\"\n",
        "target_code_len": 189,
        "diff_format": "@@ -299,3 +302,3 @@\n \n-def _connect_auth(control_socket: stem.socket.ControlSocket, password: str, password_prompt: bool, chroot_path: str, controller: Union[Type[stem.control.BaseController], Type[stem.socket.ControlSocket]]) -> Union[stem.control.BaseController, stem.socket.ControlSocket]:\n+def _connect_auth(control_socket: stem.socket.ControlSocket, password: str, password_prompt: bool, chroot_path: str, controller: Optional[Type[stem.control.BaseController]]) -> Any:\n   \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>def _connect_auth(control_socket: stem.socket.ControlSocket, password: str, password_prompt: bool, chroot_path: str, controller: Union[Type[stem.control.BaseController], Type[stem.socket.ControlSocket]]) -> Union[stem.control.BaseController, stem.socket.ControlSocket]:\n  <IND>",
        "target_code_with_indent": "\n<DED>def _connect_auth(control_socket: stem.socket.ControlSocket, password: str, password_prompt: bool, chroot_path: str, controller: Optional[Type[stem.control.BaseController]]) -> Any:\n  <IND>"
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/connection.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/connection.py",
    "file_hunks_size": 17,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/connection.py:359:4 Incompatible return type [7]: Expected `Union[stem.control.BaseController, stem.socket.ControlSocket]` but got `None`.",
    "message": " Expected `Union[stem.control.BaseController, stem.socket.ControlSocket]` but got `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 359,
    "warning_line": "    return None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _connect_auth(control_socket: stem.socket.ControlSocket, password: str, password_prompt: bool, chroot_path: str, controller: Union[Type[stem.control.BaseController], Type[stem.socket.ControlSocket]]) -> Union[stem.control.BaseController, stem.socket.ControlSocket]:\n  \"\"\"\n",
        "source_code_len": 277,
        "target_code": "\ndef _connect_auth(control_socket: stem.socket.ControlSocket, password: str, password_prompt: bool, chroot_path: str, controller: Optional[Type[stem.control.BaseController]]) -> Any:\n  \"\"\"\n",
        "target_code_len": 189,
        "diff_format": "@@ -299,3 +302,3 @@\n \n-def _connect_auth(control_socket: stem.socket.ControlSocket, password: str, password_prompt: bool, chroot_path: str, controller: Union[Type[stem.control.BaseController], Type[stem.socket.ControlSocket]]) -> Union[stem.control.BaseController, stem.socket.ControlSocket]:\n+def _connect_auth(control_socket: stem.socket.ControlSocket, password: str, password_prompt: bool, chroot_path: str, controller: Optional[Type[stem.control.BaseController]]) -> Any:\n   \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>def _connect_auth(control_socket: stem.socket.ControlSocket, password: str, password_prompt: bool, chroot_path: str, controller: Union[Type[stem.control.BaseController], Type[stem.socket.ControlSocket]]) -> Union[stem.control.BaseController, stem.socket.ControlSocket]:\n  <IND>",
        "target_code_with_indent": "\n<DED>def _connect_auth(control_socket: stem.socket.ControlSocket, password: str, password_prompt: bool, chroot_path: str, controller: Optional[Type[stem.control.BaseController]]) -> Any:\n  <IND>"
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/connection.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/connection.py",
    "file_hunks_size": 17,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/connection.py:363:4 Incompatible return type [7]: Expected `Union[stem.control.BaseController, stem.socket.ControlSocket]` but got `None`.",
    "message": " Expected `Union[stem.control.BaseController, stem.socket.ControlSocket]` but got `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 363,
    "warning_line": "    return None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _connect_auth(control_socket: stem.socket.ControlSocket, password: str, password_prompt: bool, chroot_path: str, controller: Union[Type[stem.control.BaseController], Type[stem.socket.ControlSocket]]) -> Union[stem.control.BaseController, stem.socket.ControlSocket]:\n  \"\"\"\n",
        "source_code_len": 277,
        "target_code": "\ndef _connect_auth(control_socket: stem.socket.ControlSocket, password: str, password_prompt: bool, chroot_path: str, controller: Optional[Type[stem.control.BaseController]]) -> Any:\n  \"\"\"\n",
        "target_code_len": 189,
        "diff_format": "@@ -299,3 +302,3 @@\n \n-def _connect_auth(control_socket: stem.socket.ControlSocket, password: str, password_prompt: bool, chroot_path: str, controller: Union[Type[stem.control.BaseController], Type[stem.socket.ControlSocket]]) -> Union[stem.control.BaseController, stem.socket.ControlSocket]:\n+def _connect_auth(control_socket: stem.socket.ControlSocket, password: str, password_prompt: bool, chroot_path: str, controller: Optional[Type[stem.control.BaseController]]) -> Any:\n   \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>def _connect_auth(control_socket: stem.socket.ControlSocket, password: str, password_prompt: bool, chroot_path: str, controller: Union[Type[stem.control.BaseController], Type[stem.socket.ControlSocket]]) -> Union[stem.control.BaseController, stem.socket.ControlSocket]:\n  <IND>",
        "target_code_with_indent": "\n<DED>def _connect_auth(control_socket: stem.socket.ControlSocket, password: str, password_prompt: bool, chroot_path: str, controller: Optional[Type[stem.control.BaseController]]) -> Any:\n  <IND>"
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/connection.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/connection.py",
    "file_hunks_size": 17,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/connection.py:871:34 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `AuthChallengeFailed.__init__` but got `stem.response.ControlMessage`.",
    "message": " Expected `str` for 1st positional only parameter to call `AuthChallengeFailed.__init__` but got `stem.response.ControlMessage`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 871,
    "warning_line": "        raise AuthChallengeFailed(authchallenge_response, cookie_path)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "      else:\n        raise AuthChallengeFailed(authchallenge_response, cookie_path)\n  except stem.ControllerError as exc:\n",
        "source_code_len": 121,
        "target_code": "      else:\n        raise AuthChallengeFailed(authchallenge_response_str, cookie_path)\n  except stem.ControllerError as exc:\n",
        "target_code_len": 125,
        "diff_format": "@@ -870,3 +879,3 @@\n       else:\n-        raise AuthChallengeFailed(authchallenge_response, cookie_path)\n+        raise AuthChallengeFailed(authchallenge_response_str, cookie_path)\n   except stem.ControllerError as exc:\n",
        "source_code_with_indent": "      <DED>else:\n        <IND>raise AuthChallengeFailed(authchallenge_response, cookie_path)\n  <DED><DED><DED>except stem.ControllerError as exc:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "      <DED>else:\n        <IND>raise AuthChallengeFailed(authchallenge_response_str, cookie_path)\n  <DED><DED><DED>except stem.ControllerError as exc:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/connection.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/connection.py",
    "file_hunks_size": 17,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/connection.py:892:4 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `_hmac_sha256` but got `bytes`.",
    "message": " Expected `str` for 1st positional only parameter to call `_hmac_sha256` but got `bytes`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 892,
    "warning_line": "    SERVER_HASH_CONSTANT,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _read_cookie(cookie_path: str, is_safecookie: bool) -> str:\n  \"\"\"\n",
        "source_code_len": 71,
        "target_code": "\ndef _read_cookie(cookie_path: str, is_safecookie: bool) -> bytes:\n  \"\"\"\n",
        "target_code_len": 73,
        "diff_format": "@@ -1010,3 +1019,3 @@\n \n-def _read_cookie(cookie_path: str, is_safecookie: bool) -> str:\n+def _read_cookie(cookie_path: str, is_safecookie: bool) -> bytes:\n   \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED><DED><DED>def _read_cookie(cookie_path: str, is_safecookie: bool) -> str:\n  <IND>",
        "target_code_with_indent": "\n<DED><DED><DED>def _read_cookie(cookie_path: str, is_safecookie: bool) -> bytes:\n  <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _hmac_sha256(key: str, msg: str) -> bytes:\n  \"\"\"\n",
        "source_code_len": 54,
        "target_code": "\ndef _hmac_sha256(key: bytes, msg: bytes) -> bytes:\n  \"\"\"\n",
        "target_code_len": 58,
        "diff_format": "@@ -1054,3 +1063,3 @@\n \n-def _hmac_sha256(key: str, msg: str) -> bytes:\n+def _hmac_sha256(key: bytes, msg: bytes) -> bytes:\n   \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED><DED>def _hmac_sha256(key: str, msg: str) -> bytes:\n  <IND>",
        "target_code_with_indent": "\n<DED><DED>def _hmac_sha256(key: bytes, msg: bytes) -> bytes:\n  <IND>"
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/connection.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/connection.py",
    "file_hunks_size": 17,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/connection.py:893:18 Unsupported operand [58]: `+` is not supported for operand types `str` and `bytes`.",
    "message": " `+` is not supported for operand types `str` and `bytes`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 893,
    "warning_line": "    cookie_data + client_nonce + authchallenge_response.server_nonce)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _read_cookie(cookie_path: str, is_safecookie: bool) -> str:\n  \"\"\"\n",
        "source_code_len": 71,
        "target_code": "\ndef _read_cookie(cookie_path: str, is_safecookie: bool) -> bytes:\n  \"\"\"\n",
        "target_code_len": 73,
        "diff_format": "@@ -1010,3 +1019,3 @@\n \n-def _read_cookie(cookie_path: str, is_safecookie: bool) -> str:\n+def _read_cookie(cookie_path: str, is_safecookie: bool) -> bytes:\n   \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED><DED><DED>def _read_cookie(cookie_path: str, is_safecookie: bool) -> str:\n  <IND>",
        "target_code_with_indent": "\n<DED><DED><DED>def _read_cookie(cookie_path: str, is_safecookie: bool) -> bytes:\n  <IND>"
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/connection.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/connection.py",
    "file_hunks_size": 17,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/connection.py:896:73 Incompatible parameter type [6]: Expected `str` for 2nd positional only parameter to call `_hmac_sha256` but got `bytes`.",
    "message": " Expected `str` for 2nd positional only parameter to call `_hmac_sha256` but got `bytes`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 896,
    "warning_line": "  expected_hmac = _hmac_sha256(CRYPTOVARIABLE_EQUALITY_COMPARISON_NONCE, expected_server_hash)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _read_cookie(cookie_path: str, is_safecookie: bool) -> str:\n  \"\"\"\n",
        "source_code_len": 71,
        "target_code": "\ndef _read_cookie(cookie_path: str, is_safecookie: bool) -> bytes:\n  \"\"\"\n",
        "target_code_len": 73,
        "diff_format": "@@ -1010,3 +1019,3 @@\n \n-def _read_cookie(cookie_path: str, is_safecookie: bool) -> str:\n+def _read_cookie(cookie_path: str, is_safecookie: bool) -> bytes:\n   \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED><DED><DED>def _read_cookie(cookie_path: str, is_safecookie: bool) -> str:\n  <IND>",
        "target_code_with_indent": "\n<DED><DED><DED>def _read_cookie(cookie_path: str, is_safecookie: bool) -> bytes:\n  <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _hmac_sha256(key: str, msg: str) -> bytes:\n  \"\"\"\n",
        "source_code_len": 54,
        "target_code": "\ndef _hmac_sha256(key: bytes, msg: bytes) -> bytes:\n  \"\"\"\n",
        "target_code_len": 58,
        "diff_format": "@@ -1054,3 +1063,3 @@\n \n-def _hmac_sha256(key: str, msg: str) -> bytes:\n+def _hmac_sha256(key: bytes, msg: bytes) -> bytes:\n   \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED><DED>def _hmac_sha256(key: str, msg: str) -> bytes:\n  <IND>",
        "target_code_with_indent": "\n<DED><DED>def _hmac_sha256(key: bytes, msg: bytes) -> bytes:\n  <IND>"
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/connection.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/connection.py",
    "file_hunks_size": 17,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/connection.py:903:6 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `_hmac_sha256` but got `bytes`.",
    "message": " Expected `str` for 1st positional only parameter to call `_hmac_sha256` but got `bytes`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 903,
    "warning_line": "      CLIENT_HASH_CONSTANT,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _read_cookie(cookie_path: str, is_safecookie: bool) -> str:\n  \"\"\"\n",
        "source_code_len": 71,
        "target_code": "\ndef _read_cookie(cookie_path: str, is_safecookie: bool) -> bytes:\n  \"\"\"\n",
        "target_code_len": 73,
        "diff_format": "@@ -1010,3 +1019,3 @@\n \n-def _read_cookie(cookie_path: str, is_safecookie: bool) -> str:\n+def _read_cookie(cookie_path: str, is_safecookie: bool) -> bytes:\n   \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED><DED><DED>def _read_cookie(cookie_path: str, is_safecookie: bool) -> str:\n  <IND>",
        "target_code_with_indent": "\n<DED><DED><DED>def _read_cookie(cookie_path: str, is_safecookie: bool) -> bytes:\n  <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _hmac_sha256(key: str, msg: str) -> bytes:\n  \"\"\"\n",
        "source_code_len": 54,
        "target_code": "\ndef _hmac_sha256(key: bytes, msg: bytes) -> bytes:\n  \"\"\"\n",
        "target_code_len": 58,
        "diff_format": "@@ -1054,3 +1063,3 @@\n \n-def _hmac_sha256(key: str, msg: str) -> bytes:\n+def _hmac_sha256(key: bytes, msg: bytes) -> bytes:\n   \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED><DED>def _hmac_sha256(key: str, msg: str) -> bytes:\n  <IND>",
        "target_code_with_indent": "\n<DED><DED>def _hmac_sha256(key: bytes, msg: bytes) -> bytes:\n  <IND>"
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/connection.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/connection.py",
    "file_hunks_size": 17,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/connection.py:904:20 Unsupported operand [58]: `+` is not supported for operand types `str` and `bytes`.",
    "message": " `+` is not supported for operand types `str` and `bytes`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 904,
    "warning_line": "      cookie_data + client_nonce + authchallenge_response.server_nonce)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _read_cookie(cookie_path: str, is_safecookie: bool) -> str:\n  \"\"\"\n",
        "source_code_len": 71,
        "target_code": "\ndef _read_cookie(cookie_path: str, is_safecookie: bool) -> bytes:\n  \"\"\"\n",
        "target_code_len": 73,
        "diff_format": "@@ -1010,3 +1019,3 @@\n \n-def _read_cookie(cookie_path: str, is_safecookie: bool) -> str:\n+def _read_cookie(cookie_path: str, is_safecookie: bool) -> bytes:\n   \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED><DED><DED>def _read_cookie(cookie_path: str, is_safecookie: bool) -> str:\n  <IND>",
        "target_code_with_indent": "\n<DED><DED><DED>def _read_cookie(cookie_path: str, is_safecookie: bool) -> bytes:\n  <IND>"
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/connection.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/connection.py",
    "file_hunks_size": 17,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "stem/connection.py:973:2 Incompatible return type [7]: Expected `stem.response.protocolinfo.ProtocolInfoResponse` but got `stem.response.ControlMessage`.",
    "message": " Expected `stem.response.protocolinfo.ProtocolInfoResponse` but got `stem.response.ControlMessage`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 973,
    "warning_line": "  return protocolinfo_response",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "  stem.response.convert('PROTOCOLINFO', protocolinfo_response)\n  return protocolinfo_response\n\n",
        "source_code_len": 95,
        "target_code": "  stem.response.convert('PROTOCOLINFO', protocolinfo_response)\n  return protocolinfo_response  # type: ignore\n\n",
        "target_code_len": 111,
        "diff_format": "@@ -972,3 +981,3 @@\n   stem.response.convert('PROTOCOLINFO', protocolinfo_response)\n-  return protocolinfo_response\n+  return protocolinfo_response  # type: ignore\n \n",
        "source_code_with_indent": "  <DED><DED>stem.response.convert('PROTOCOLINFO', protocolinfo_response)\n  return protocolinfo_response\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "  <DED><DED>stem.response.convert('PROTOCOLINFO', protocolinfo_response)\n  return protocolinfo_response  # type: ignore\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/connection.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/connection.py",
    "file_hunks_size": 17,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/connection.py:1049:6 Incompatible return type [7]: Expected `str` but got `bytes`.",
    "message": " Expected `str` but got `bytes`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 1049,
    "warning_line": "      return f.read()",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _read_cookie(cookie_path: str, is_safecookie: bool) -> str:\n  \"\"\"\n",
        "source_code_len": 71,
        "target_code": "\ndef _read_cookie(cookie_path: str, is_safecookie: bool) -> bytes:\n  \"\"\"\n",
        "target_code_len": 73,
        "diff_format": "@@ -1010,3 +1019,3 @@\n \n-def _read_cookie(cookie_path: str, is_safecookie: bool) -> str:\n+def _read_cookie(cookie_path: str, is_safecookie: bool) -> bytes:\n   \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED><DED><DED>def _read_cookie(cookie_path: str, is_safecookie: bool) -> str:\n  <IND>",
        "target_code_with_indent": "\n<DED><DED><DED>def _read_cookie(cookie_path: str, is_safecookie: bool) -> bytes:\n  <IND>"
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/connection.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/connection.py",
    "file_hunks_size": 17,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/connection.py:1065:18 Incompatible parameter type [6]: Expected `bytes` for 1st positional only parameter to call `hmac.new` but got `str`.",
    "message": " Expected `bytes` for 1st positional only parameter to call `hmac.new` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1065,
    "warning_line": "  return hmac.new(key, msg, hashlib.sha256).digest()",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _read_cookie(cookie_path: str, is_safecookie: bool) -> str:\n  \"\"\"\n",
        "source_code_len": 71,
        "target_code": "\ndef _read_cookie(cookie_path: str, is_safecookie: bool) -> bytes:\n  \"\"\"\n",
        "target_code_len": 73,
        "diff_format": "@@ -1010,3 +1019,3 @@\n \n-def _read_cookie(cookie_path: str, is_safecookie: bool) -> str:\n+def _read_cookie(cookie_path: str, is_safecookie: bool) -> bytes:\n   \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED><DED><DED>def _read_cookie(cookie_path: str, is_safecookie: bool) -> str:\n  <IND>",
        "target_code_with_indent": "\n<DED><DED><DED>def _read_cookie(cookie_path: str, is_safecookie: bool) -> bytes:\n  <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _hmac_sha256(key: str, msg: str) -> bytes:\n  \"\"\"\n",
        "source_code_len": 54,
        "target_code": "\ndef _hmac_sha256(key: bytes, msg: bytes) -> bytes:\n  \"\"\"\n",
        "target_code_len": 58,
        "diff_format": "@@ -1054,3 +1063,3 @@\n \n-def _hmac_sha256(key: str, msg: str) -> bytes:\n+def _hmac_sha256(key: bytes, msg: bytes) -> bytes:\n   \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED><DED>def _hmac_sha256(key: str, msg: str) -> bytes:\n  <IND>",
        "target_code_with_indent": "\n<DED><DED>def _hmac_sha256(key: bytes, msg: bytes) -> bytes:\n  <IND>"
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/connection.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/connection.py",
    "file_hunks_size": 17,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/connection.py:1065:23 Incompatible parameter type [6]: Expected `Union[None, array.array[typing.Any], bytearray, bytes, memoryview, mmap.mmap]` for 2nd positional only parameter to call `hmac.new` but got `str`.",
    "message": " Expected `Union[None, array.array[typing.Any], bytearray, bytes, memoryview, mmap.mmap]` for 2nd positional only parameter to call `hmac.new` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1065,
    "warning_line": "  return hmac.new(key, msg, hashlib.sha256).digest()",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _read_cookie(cookie_path: str, is_safecookie: bool) -> str:\n  \"\"\"\n",
        "source_code_len": 71,
        "target_code": "\ndef _read_cookie(cookie_path: str, is_safecookie: bool) -> bytes:\n  \"\"\"\n",
        "target_code_len": 73,
        "diff_format": "@@ -1010,3 +1019,3 @@\n \n-def _read_cookie(cookie_path: str, is_safecookie: bool) -> str:\n+def _read_cookie(cookie_path: str, is_safecookie: bool) -> bytes:\n   \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED><DED><DED>def _read_cookie(cookie_path: str, is_safecookie: bool) -> str:\n  <IND>",
        "target_code_with_indent": "\n<DED><DED><DED>def _read_cookie(cookie_path: str, is_safecookie: bool) -> bytes:\n  <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _hmac_sha256(key: str, msg: str) -> bytes:\n  \"\"\"\n",
        "source_code_len": 54,
        "target_code": "\ndef _hmac_sha256(key: bytes, msg: bytes) -> bytes:\n  \"\"\"\n",
        "target_code_len": 58,
        "diff_format": "@@ -1054,3 +1063,3 @@\n \n-def _hmac_sha256(key: str, msg: str) -> bytes:\n+def _hmac_sha256(key: bytes, msg: bytes) -> bytes:\n   \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED><DED>def _hmac_sha256(key: str, msg: str) -> bytes:\n  <IND>",
        "target_code_with_indent": "\n<DED><DED>def _hmac_sha256(key: bytes, msg: bytes) -> bytes:\n  <IND>"
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/__init__.py",
    "min_patch_found": false,
    "full_warning_msg": "stem/descriptor/__init__.py:251:52 Incompatible parameter type [6]: Expected `str` for 2nd positional only parameter to anonymous call but got `bytes`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/__init__.py",
    "min_patch_found": false,
    "full_warning_msg": "stem/descriptor/__init__.py:269:3 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `stem.util.enum.Enum.__init__` but got `Tuple[str, _Compression]`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/__init__.py",
    "min_patch_found": false,
    "full_warning_msg": "stem/descriptor/__init__.py:270:3 Incompatible parameter type [6]: Expected `str` for 2nd positional only parameter to call `stem.util.enum.Enum.__init__` but got `Tuple[str, _Compression]`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/__init__.py",
    "min_patch_found": false,
    "full_warning_msg": "stem/descriptor/__init__.py:271:3 Incompatible parameter type [6]: Expected `str` for 3rd positional only parameter to call `stem.util.enum.Enum.__init__` but got `Tuple[str, _Compression]`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/__init__.py",
    "min_patch_found": false,
    "full_warning_msg": "stem/descriptor/__init__.py:272:3 Incompatible parameter type [6]: Expected `str` for 4th positional only parameter to call `stem.util.enum.Enum.__init__` but got `Tuple[str, _Compression]`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/__init__.py",
    "min_patch_found": false,
    "full_warning_msg": "stem/descriptor/__init__.py:273:3 Incompatible parameter type [6]: Expected `str` for 5th positional only parameter to call `stem.util.enum.Enum.__init__` but got `Tuple[str, _Compression]`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/__init__.py",
    "min_patch_found": false,
    "full_warning_msg": "stem/descriptor/__init__.py:412:6 Incompatible variable type [9]: descriptor_file is declared to have type `BinaryIO` but is used as type `NewlineNormalizer`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/__init__.py",
    "min_patch_found": false,
    "full_warning_msg": "stem/descriptor/__init__.py:431:8 Incompatible variable type [9]: descriptor_file is declared to have type `BinaryIO` but is used as type `NewlineNormalizer`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/__init__.py",
    "min_patch_found": false,
    "full_warning_msg": "stem/descriptor/__init__.py:440:8 Incompatible return type [7]: Expected `Iterator[Descriptor]` but got `networkstatus.NetworkStatusDocument`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/__init__.py",
    "min_patch_found": false,
    "full_warning_msg": "stem/descriptor/__init__.py:442:8 Incompatible return type [7]: Expected `Iterator[Descriptor]` but got `networkstatus.NetworkStatusDocument`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/__init__.py",
    "min_patch_found": false,
    "full_warning_msg": "stem/descriptor/__init__.py:454:12 Incompatible parameter type [6]: Expected `typing.Union[os.PathLike[bytes], os.PathLike[str], bytes, int, str]` for 1st positional only parameter to call `open` but got `BinaryIO`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/__init__.py",
    "min_patch_found": false,
    "full_warning_msg": "stem/descriptor/__init__.py:460:20 Incompatible parameter type [6]: Expected `typing.Union[None, os.PathLike[bytes], os.PathLike[str], bytes, str]` for 1st positional only parameter to call `tarfile.open` but got `BinaryIO`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/__init__.py",
    "min_patch_found": false,
    "full_warning_msg": "stem/descriptor/__init__.py:461:27 Incompatible parameter type [6]: Expected `BinaryIO` for 1st positional only parameter to call `parse_file` but got `tarfile.TarFile`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/__init__.py",
    "min_patch_found": false,
    "full_warning_msg": "stem/descriptor/__init__.py:530:75 Incompatible parameter type [6]: Expected `Optional[Type[networkstatus.NetworkStatusDocument]]` for 2nd positional only parameter to call `networkstatus._parse_file` but got `Type[networkstatus.DetachedSignature]`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/__init__.py",
    "min_patch_found": false,
    "full_warning_msg": "stem/descriptor/__init__.py:538:76 Incompatible parameter type [6]: Expected `str` for 2nd positional only parameter to call `hidden_service._parse_file` but got `Type[hidden_service.HiddenServiceDescriptorV2]`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/__init__.py",
    "min_patch_found": false,
    "full_warning_msg": "stem/descriptor/__init__.py:543:76 Incompatible parameter type [6]: Expected `str` for 2nd positional only parameter to call `hidden_service._parse_file` but got `Type[hidden_service.HiddenServiceDescriptorV3]`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/__init__.py",
    "min_patch_found": false,
    "full_warning_msg": "stem/descriptor/__init__.py:632:53 Incompatible variable type [9]: func is declared to have type `typing.Callable[[str], str]` but is used as type `None`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/__init__.py",
    "min_patch_found": false,
    "full_warning_msg": "stem/descriptor/__init__.py:797:4 Incompatible return type [7]: Expected `str` but got `bytes`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/bandwidth_file.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/bandwidth_file.py",
    "file_hunks_size": 11,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/bandwidth_file.py:104:2 Incompatible return type [7]: Expected `Sequence[str]` but got `Optional[typing.List[str]]`.",
    "message": " Expected `Sequence[str]` but got `Optional[typing.List[str]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 104,
    "warning_line": "  return list(map(lambda v: v.strip(), val.split(','))) if val is not None else None"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/bandwidth_file.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/bandwidth_file.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/bandwidth_file.py:171:22 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `BandwidthFile.__init__` but got `bytes`.",
    "message": " Expected `str` for 1st positional only parameter to call `BandwidthFile.__init__` but got `bytes`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 171,
    "warning_line": "  yield BandwidthFile(descriptor_file.read(), validate, **kwargs)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n  def __init__(self, raw_content: str, validate: bool = False) -> None:\n    super(BandwidthFile, self).__init__(raw_content, lazy_load = not validate)\n",
        "source_code_len": 152,
        "target_code": "\n  def __init__(self, raw_content: bytes, validate: bool = False) -> None:\n    super(BandwidthFile, self).__init__(raw_content, lazy_load = not validate)\n",
        "target_code_len": 154,
        "diff_format": "@@ -356,3 +360,3 @@\n \n-  def __init__(self, raw_content: str, validate: bool = False) -> None:\n+  def __init__(self, raw_content: bytes, validate: bool = False) -> None:\n     super(BandwidthFile, self).__init__(raw_content, lazy_load = not validate)\n",
        "source_code_with_indent": "\n  <DED>def __init__(self, raw_content: str, validate: bool = False) -> None:\n    <IND>super(BandwidthFile, self).__init__(raw_content, lazy_load = not validate)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n  <DED>def __init__(self, raw_content: bytes, validate: bool = False) -> None:\n    <IND>super(BandwidthFile, self).__init__(raw_content, lazy_load = not validate)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/bandwidth_file.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/bandwidth_file.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/bandwidth_file.py:355:4 Incompatible return type [7]: Expected `str` but got `bytes`.",
    "message": " Expected `str` but got `bytes`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 355,
    "warning_line": "    return b'\\n'.join(lines)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "  @classmethod\n  def content(cls: Type['stem.descriptor.bandwidth_file.BandwidthFile'], attr: Optional[Mapping[str, str]] = None, exclude: Sequence[str] = ()) -> str:\n    \"\"\"\n",
        "source_code_len": 175,
        "target_code": "  @classmethod\n  def content(cls: Type['stem.descriptor.bandwidth_file.BandwidthFile'], attr: Optional[Mapping[str, str]] = None, exclude: Sequence[str] = ()) -> bytes:\n    \"\"\"\n",
        "target_code_len": 177,
        "diff_format": "@@ -305,3 +309,3 @@\n   @classmethod\n-  def content(cls: Type['stem.descriptor.bandwidth_file.BandwidthFile'], attr: Optional[Mapping[str, str]] = None, exclude: Sequence[str] = ()) -> str:\n+  def content(cls: Type['stem.descriptor.bandwidth_file.BandwidthFile'], attr: Optional[Mapping[str, str]] = None, exclude: Sequence[str] = ()) -> bytes:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "  @classmethod\n  def content(cls: Type['stem.descriptor.bandwidth_file.BandwidthFile'], attr: Optional[Mapping[str, str]] = None, exclude: Sequence[str] = ()) -> str:\n    <IND>",
        "target_code_with_indent": "  @classmethod\n  def content(cls: Type['stem.descriptor.bandwidth_file.BandwidthFile'], attr: Optional[Mapping[str, str]] = None, exclude: Sequence[str] = ()) -> bytes:\n    <IND>"
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/bandwidth_file.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/bandwidth_file.py",
    "file_hunks_size": 11,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/bandwidth_file.py:361:29 Incompatible parameter type [6]: Expected `Dict[str, Sequence[str]]` for 2nd positional only parameter to call `_parse_timestamp` but got `None`.",
    "message": " Expected `Dict[str, Sequence[str]]` for 2nd positional only parameter to call `_parse_timestamp` but got `None`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 361,
    "warning_line": "      _parse_timestamp(self, None)"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/bandwidth_file.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/bandwidth_file.py",
    "file_hunks_size": 11,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/bandwidth_file.py:362:26 Incompatible parameter type [6]: Expected `Dict[str, Sequence[str]]` for 2nd positional only parameter to call `_parse_header` but got `None`.",
    "message": " Expected `Dict[str, Sequence[str]]` for 2nd positional only parameter to call `_parse_header` but got `None`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 362,
    "warning_line": "      _parse_header(self, None)"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/bandwidth_file.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/bandwidth_file.py",
    "file_hunks_size": 11,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/bandwidth_file.py:363:24 Incompatible parameter type [6]: Expected `Dict[str, Sequence[str]]` for 2nd positional only parameter to call `_parse_body` but got `None`.",
    "message": " Expected `Dict[str, Sequence[str]]` for 2nd positional only parameter to call `_parse_body` but got `None`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 363,
    "warning_line": "      _parse_body(self, None)"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/certificate.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/certificate.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/certificate.py:78:37 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `stem.util.enum.Enum.__init__` but got `Tuple[str, int]`.",
    "message": " Expected `str` for 1st positional only parameter to call `stem.util.enum.Enum.__init__` but got `Tuple[str, int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 78,
    "warning_line": "ExtensionType = stem.util.enum.Enum(('HAS_SIGNING_KEY', 4),)"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/certificate.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/certificate.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/certificate.py:213:25 Incompatible parameter type [6]: Expected `typing.Iterable[Union[memoryview, typing.ByteString]]` for 1st positional only parameter to call `bytes.join` but got `Sequence[str]`.",
    "message": " Expected `typing.Iterable[Union[memoryview, typing.ByteString]]` for 1st positional only parameter to call `bytes.join` but got `Sequence[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 213,
    "warning_line": "    encoded = b'\\n'.join(stem.util.str_tools._split_by_length(base64.b64encode(self.pack()), 64))"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/certificate.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/certificate.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/certificate.py:213:62 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `stem.util.str_tools._split_by_length` but got `bytes`.",
    "message": " Expected `str` for 1st positional only parameter to call `stem.util.str_tools._split_by_length` but got `bytes`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 213,
    "warning_line": "    encoded = b'\\n'.join(stem.util.str_tools._split_by_length(base64.b64encode(self.pack()), 64))"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/collector.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/collector.py",
    "file_hunks_size": 26,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/collector.py:107:30 Incompatible variable type [9]: start is declared to have type `datetime.datetime` but is used as type `None`.",
    "message": " start is declared to have type `datetime.datetime` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 107,
    "warning_line": "def get_extrainfo_descriptors(start: datetime.datetime = None, end: datetime.datetime = None, cache_to: Optional[str] = None, bridge: bool = False, timeout: Optional[int] = None, retries: Optional[int] = 3) -> Iterator['stem.descriptor.extrainfo_descriptor.RelayExtraInfoDescriptor']:"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/collector.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/collector.py",
    "file_hunks_size": 26,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/collector.py:107:63 Incompatible variable type [9]: end is declared to have type `datetime.datetime` but is used as type `None`.",
    "message": " end is declared to have type `datetime.datetime` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 107,
    "warning_line": "def get_extrainfo_descriptors(start: datetime.datetime = None, end: datetime.datetime = None, cache_to: Optional[str] = None, bridge: bool = False, timeout: Optional[int] = None, retries: Optional[int] = 3) -> Iterator['stem.descriptor.extrainfo_descriptor.RelayExtraInfoDescriptor']:"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/collector.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/collector.py",
    "file_hunks_size": 26,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/collector.py:118:25 Incompatible variable type [9]: start is declared to have type `datetime.datetime` but is used as type `None`.",
    "message": " start is declared to have type `datetime.datetime` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 118,
    "warning_line": "def get_microdescriptors(start: datetime.datetime = None, end: datetime.datetime = None, cache_to: Optional[str] = None, timeout: Optional[int] = None, retries: Optional[int] = 3) -> Iterator['stem.descriptor.microdescriptor.Microdescriptor']:"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/collector.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/collector.py",
    "file_hunks_size": 26,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/collector.py:118:58 Incompatible variable type [9]: end is declared to have type `datetime.datetime` but is used as type `None`.",
    "message": " end is declared to have type `datetime.datetime` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 118,
    "warning_line": "def get_microdescriptors(start: datetime.datetime = None, end: datetime.datetime = None, cache_to: Optional[str] = None, timeout: Optional[int] = None, retries: Optional[int] = 3) -> Iterator['stem.descriptor.microdescriptor.Microdescriptor']:"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/collector.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/collector.py",
    "file_hunks_size": 26,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/collector.py:129:18 Incompatible variable type [9]: start is declared to have type `datetime.datetime` but is used as type `None`.",
    "message": " start is declared to have type `datetime.datetime` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 129,
    "warning_line": "def get_consensus(start: datetime.datetime = None, end: datetime.datetime = None, cache_to: Optional[str] = None, document_handler: 'stem.descriptor.DocumentHandler' = DocumentHandler.ENTRIES, version: int = 3, microdescriptor: bool = False, bridge: bool = False, timeout: Optional[int] = None, retries: Optional[int] = 3) -> Iterator['stem.descriptor.router_status_entry.RouterStatusEntry']:"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/collector.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/collector.py",
    "file_hunks_size": 26,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/collector.py:129:51 Incompatible variable type [9]: end is declared to have type `datetime.datetime` but is used as type `None`.",
    "message": " end is declared to have type `datetime.datetime` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 129,
    "warning_line": "def get_consensus(start: datetime.datetime = None, end: datetime.datetime = None, cache_to: Optional[str] = None, document_handler: 'stem.descriptor.DocumentHandler' = DocumentHandler.ENTRIES, version: int = 3, microdescriptor: bool = False, bridge: bool = False, timeout: Optional[int] = None, retries: Optional[int] = 3) -> Iterator['stem.descriptor.router_status_entry.RouterStatusEntry']:"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/collector.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/collector.py",
    "file_hunks_size": 26,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/collector.py:140:25 Incompatible variable type [9]: start is declared to have type `datetime.datetime` but is used as type `None`.",
    "message": " start is declared to have type `datetime.datetime` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 140,
    "warning_line": "def get_key_certificates(start: datetime.datetime = None, end: datetime.datetime = None, cache_to: Optional[str] = None, timeout: Optional[int] = None, retries: Optional[int] = 3) -> Iterator['stem.descriptor.networkstatus.KeyCertificate']:"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/collector.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/collector.py",
    "file_hunks_size": 26,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/collector.py:140:58 Incompatible variable type [9]: end is declared to have type `datetime.datetime` but is used as type `None`.",
    "message": " end is declared to have type `datetime.datetime` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 140,
    "warning_line": "def get_key_certificates(start: datetime.datetime = None, end: datetime.datetime = None, cache_to: Optional[str] = None, timeout: Optional[int] = None, retries: Optional[int] = 3) -> Iterator['stem.descriptor.networkstatus.KeyCertificate']:"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/collector.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/collector.py",
    "file_hunks_size": 26,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/collector.py:151:24 Incompatible variable type [9]: start is declared to have type `datetime.datetime` but is used as type `None`.",
    "message": " start is declared to have type `datetime.datetime` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 151,
    "warning_line": "def get_bandwidth_files(start: datetime.datetime = None, end: datetime.datetime = None, cache_to: Optional[str] = None, timeout: Optional[int] = None, retries: Optional[int] = 3) -> Iterator['stem.descriptor.bandwidth_file.BandwidthFile']:"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/collector.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/collector.py",
    "file_hunks_size": 26,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/collector.py:151:57 Incompatible variable type [9]: end is declared to have type `datetime.datetime` but is used as type `None`.",
    "message": " end is declared to have type `datetime.datetime` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 151,
    "warning_line": "def get_bandwidth_files(start: datetime.datetime = None, end: datetime.datetime = None, cache_to: Optional[str] = None, timeout: Optional[int] = None, retries: Optional[int] = 3) -> Iterator['stem.descriptor.bandwidth_file.BandwidthFile']:"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/collector.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/collector.py",
    "file_hunks_size": 26,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/collector.py:162:19 Incompatible variable type [9]: start is declared to have type `datetime.datetime` but is used as type `None`.",
    "message": " start is declared to have type `datetime.datetime` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 162,
    "warning_line": "def get_exit_lists(start: datetime.datetime = None, end: datetime.datetime = None, cache_to: Optional[str] = None, timeout: Optional[int] = None, retries: Optional[int] = 3) -> Iterator['stem.descriptor.tordnsel.TorDNSEL']:"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/collector.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/collector.py",
    "file_hunks_size": 26,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/collector.py:162:52 Incompatible variable type [9]: end is declared to have type `datetime.datetime` but is used as type `None`.",
    "message": " end is declared to have type `datetime.datetime` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 162,
    "warning_line": "def get_exit_lists(start: datetime.datetime = None, end: datetime.datetime = None, cache_to: Optional[str] = None, timeout: Optional[int] = None, retries: Optional[int] = 3) -> Iterator['stem.descriptor.tordnsel.TorDNSEL']:"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/collector.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/collector.py",
    "file_hunks_size": 26,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/collector.py:197:52 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `datetime.datetime.strptime` but got `datetime.datetime`.",
    "message": " Expected `str` for 1st positional only parameter to call `datetime.datetime.strptime` but got `datetime.datetime`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 197,
    "warning_line": "    self.last_modified = datetime.datetime.strptime(last_modified, '%Y-%m-%d %H:%M')",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n  def __init__(self, path: str, types: Tuple[str], size: int, sha256: str, first_published: datetime.datetime, last_published: datetime.datetime, last_modified: datetime.datetime) -> None:\n    self.path = path\n",
        "source_code_len": 211,
        "target_code": "\n  def __init__(self, path: str, types: Tuple[str], size: int, sha256: str, first_published: str, last_published: str, last_modified: str) -> None:\n    self.path = path\n",
        "target_code_len": 169,
        "diff_format": "@@ -190,3 +190,3 @@\n \n-  def __init__(self, path: str, types: Tuple[str], size: int, sha256: str, first_published: datetime.datetime, last_published: datetime.datetime, last_modified: datetime.datetime) -> None:\n+  def __init__(self, path: str, types: Tuple[str], size: int, sha256: str, first_published: str, last_published: str, last_modified: str) -> None:\n     self.path = path\n",
        "source_code_with_indent": "\n  def __init__(self, path: str, types: Tuple[str], size: int, sha256: str, first_published: datetime.datetime, last_published: datetime.datetime, last_modified: datetime.datetime) -> None:\n    <IND>self.path = path\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n  def __init__(self, path: str, types: Tuple[str], size: int, sha256: str, first_published: str, last_published: str, last_modified: str) -> None:\n    <IND>self.path = path\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/collector.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/collector.py",
    "file_hunks_size": 26,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/collector.py:204:46 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `datetime.datetime.strptime` but got `datetime.datetime`.",
    "message": " Expected `str` for 1st positional only parameter to call `datetime.datetime.strptime` but got `datetime.datetime`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 204,
    "warning_line": "      self.start = datetime.datetime.strptime(first_published, '%Y-%m-%d %H:%M')",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n  def __init__(self, path: str, types: Tuple[str], size: int, sha256: str, first_published: datetime.datetime, last_published: datetime.datetime, last_modified: datetime.datetime) -> None:\n    self.path = path\n",
        "source_code_len": 211,
        "target_code": "\n  def __init__(self, path: str, types: Tuple[str], size: int, sha256: str, first_published: str, last_published: str, last_modified: str) -> None:\n    self.path = path\n",
        "target_code_len": 169,
        "diff_format": "@@ -190,3 +190,3 @@\n \n-  def __init__(self, path: str, types: Tuple[str], size: int, sha256: str, first_published: datetime.datetime, last_published: datetime.datetime, last_modified: datetime.datetime) -> None:\n+  def __init__(self, path: str, types: Tuple[str], size: int, sha256: str, first_published: str, last_published: str, last_modified: str) -> None:\n     self.path = path\n",
        "source_code_with_indent": "\n  def __init__(self, path: str, types: Tuple[str], size: int, sha256: str, first_published: datetime.datetime, last_published: datetime.datetime, last_modified: datetime.datetime) -> None:\n    <IND>self.path = path\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n  def __init__(self, path: str, types: Tuple[str], size: int, sha256: str, first_published: str, last_published: str, last_modified: str) -> None:\n    <IND>self.path = path\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/collector.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/collector.py",
    "file_hunks_size": 26,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/collector.py:205:44 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `datetime.datetime.strptime` but got `datetime.datetime`.",
    "message": " Expected `str` for 1st positional only parameter to call `datetime.datetime.strptime` but got `datetime.datetime`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 205,
    "warning_line": "      self.end = datetime.datetime.strptime(last_published, '%Y-%m-%d %H:%M')",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n  def __init__(self, path: str, types: Tuple[str], size: int, sha256: str, first_published: datetime.datetime, last_published: datetime.datetime, last_modified: datetime.datetime) -> None:\n    self.path = path\n",
        "source_code_len": 211,
        "target_code": "\n  def __init__(self, path: str, types: Tuple[str], size: int, sha256: str, first_published: str, last_published: str, last_modified: str) -> None:\n    self.path = path\n",
        "target_code_len": 169,
        "diff_format": "@@ -190,3 +190,3 @@\n \n-  def __init__(self, path: str, types: Tuple[str], size: int, sha256: str, first_published: datetime.datetime, last_published: datetime.datetime, last_modified: datetime.datetime) -> None:\n+  def __init__(self, path: str, types: Tuple[str], size: int, sha256: str, first_published: str, last_published: str, last_modified: str) -> None:\n     self.path = path\n",
        "source_code_with_indent": "\n  def __init__(self, path: str, types: Tuple[str], size: int, sha256: str, first_published: datetime.datetime, last_published: datetime.datetime, last_modified: datetime.datetime) -> None:\n    <IND>self.path = path\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n  def __init__(self, path: str, types: Tuple[str], size: int, sha256: str, first_published: str, last_published: str, last_modified: str) -> None:\n    <IND>self.path = path\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/collector.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/collector.py",
    "file_hunks_size": 26,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/collector.py:209:89 Incompatible variable type [9]: start is declared to have type `datetime.datetime` but is used as type `None`.",
    "message": " start is declared to have type `datetime.datetime` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 209,
    "warning_line": "  def read(self, directory: Optional[str] = None, descriptor_type: Optional[str] = None, start: datetime.datetime = None, end: datetime.datetime = None, document_handler: 'stem.descriptor.DocumentHandler' = DocumentHandler.ENTRIES, timeout: Optional[int] = None, retries: Optional[int] = 3) -> Iterator['stem.descriptor.Descriptor']:"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/collector.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/collector.py",
    "file_hunks_size": 26,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/collector.py:209:122 Incompatible variable type [9]: end is declared to have type `datetime.datetime` but is used as type `None`.",
    "message": " end is declared to have type `datetime.datetime` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 209,
    "warning_line": "  def read(self, directory: Optional[str] = None, descriptor_type: Optional[str] = None, start: datetime.datetime = None, end: datetime.datetime = None, document_handler: 'stem.descriptor.DocumentHandler' = DocumentHandler.ENTRIES, timeout: Optional[int] = None, retries: Optional[int] = 3) -> Iterator['stem.descriptor.Descriptor']:"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/collector.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/collector.py",
    "file_hunks_size": 26,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/collector.py:278:43 Incompatible parameter type [6]: Expected `typing.BinaryIO` for 1st positional only parameter to call `stem.descriptor.parse_file` but got `str`.",
    "message": " Expected `typing.BinaryIO` for 1st positional only parameter to call `stem.descriptor.parse_file` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 278,
    "warning_line": "    for desc in stem.descriptor.parse_file(path, document_handler = document_handler):"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/collector.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/collector.py",
    "file_hunks_size": 26,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/collector.py:330:37 Incompatible parameter type [6]: Expected `Union[array.array[typing.Any], bytearray, bytes, memoryview, mmap.mmap]` for 1st positional only parameter to call `hashlib.sha256` but got `str`.",
    "message": " Expected `Union[array.array[typing.Any], bytearray, bytes, memoryview, mmap.mmap]` for 1st positional only parameter to call `hashlib.sha256` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 330,
    "warning_line": "        actual_hash = hashlib.sha256(prior_file.read()).hexdigest()",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    if os.path.exists(path):\n      with open(path) as prior_file:\n        expected_hash = binascii.hexlify(base64.b64decode(self.sha256))\n        actual_hash = hashlib.sha256(prior_file.read()).hexdigest()\n",
        "source_code_len": 206,
        "target_code": "    if os.path.exists(path):\n      with open(path, 'b') as prior_file:\n        expected_hash = binascii.hexlify(base64.b64decode(self.sha256)).decode('utf-8')\n        actual_hash = hashlib.sha256(prior_file.read()).hexdigest()\n",
        "target_code_len": 227,
        "diff_format": "@@ -327,4 +327,4 @@\n     if os.path.exists(path):\n-      with open(path) as prior_file:\n-        expected_hash = binascii.hexlify(base64.b64decode(self.sha256))\n+      with open(path, 'b') as prior_file:\n+        expected_hash = binascii.hexlify(base64.b64decode(self.sha256)).decode('utf-8')\n         actual_hash = hashlib.sha256(prior_file.read()).hexdigest()\n",
        "source_code_with_indent": "    <DED>if os.path.exists(path):\n      <IND>with open(path) as prior_file:\n        <IND>expected_hash = binascii.hexlify(base64.b64decode(self.sha256))\n        actual_hash = hashlib.sha256(prior_file.read()).hexdigest()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>if os.path.exists(path):\n      <IND>with open(path, 'b') as prior_file:\n        <IND>expected_hash = binascii.hexlify(base64.b64decode(self.sha256)).decode('utf-8')\n        actual_hash = hashlib.sha256(prior_file.read()).hexdigest()\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/collector.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/collector.py",
    "file_hunks_size": 26,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/collector.py:410:35 Incompatible variable type [9]: start is declared to have type `datetime.datetime` but is used as type `None`.",
    "message": " start is declared to have type `datetime.datetime` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 410,
    "warning_line": "  def get_server_descriptors(self, start: datetime.datetime = None, end: datetime.datetime = None, cache_to: Optional[str] = None, bridge: bool = False, timeout: Optional[int] = None, retries: Optional[int] = 3) -> Iterator['stem.descriptor.server_descriptor.RelayDescriptor']:"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/collector.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/collector.py",
    "file_hunks_size": 26,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/collector.py:410:68 Incompatible variable type [9]: end is declared to have type `datetime.datetime` but is used as type `None`.",
    "message": " end is declared to have type `datetime.datetime` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 410,
    "warning_line": "  def get_server_descriptors(self, start: datetime.datetime = None, end: datetime.datetime = None, cache_to: Optional[str] = None, bridge: bool = False, timeout: Optional[int] = None, retries: Optional[int] = 3) -> Iterator['stem.descriptor.server_descriptor.RelayDescriptor']:"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/collector.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/collector.py",
    "file_hunks_size": 26,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/collector.py:435:8 Incompatible return type [7]: Expected `Iterator[stem.descriptor.server_descriptor.RelayDescriptor]` but got `typing.Generator[stem.descriptor.Descriptor, None, None]`.",
    "message": " Expected `Iterator[stem.descriptor.server_descriptor.RelayDescriptor]` but got `typing.Generator[stem.descriptor.Descriptor, None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 435,
    "warning_line": "        yield desc"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/collector.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/collector.py",
    "file_hunks_size": 26,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/collector.py:437:38 Incompatible variable type [9]: start is declared to have type `datetime.datetime` but is used as type `None`.",
    "message": " start is declared to have type `datetime.datetime` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 437,
    "warning_line": "  def get_extrainfo_descriptors(self, start: datetime.datetime = None, end: datetime.datetime = None, cache_to: Optional[str] = None, bridge: bool = False, timeout: Optional[int] = None, retries: Optional[int] = 3) -> Iterator['stem.descriptor.extrainfo_descriptor.RelayExtraInfoDescriptor']:"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/collector.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/collector.py",
    "file_hunks_size": 26,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/collector.py:437:71 Incompatible variable type [9]: end is declared to have type `datetime.datetime` but is used as type `None`.",
    "message": " end is declared to have type `datetime.datetime` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 437,
    "warning_line": "  def get_extrainfo_descriptors(self, start: datetime.datetime = None, end: datetime.datetime = None, cache_to: Optional[str] = None, bridge: bool = False, timeout: Optional[int] = None, retries: Optional[int] = 3) -> Iterator['stem.descriptor.extrainfo_descriptor.RelayExtraInfoDescriptor']:"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/collector.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/collector.py",
    "file_hunks_size": 26,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/collector.py:462:8 Incompatible return type [7]: Expected `Iterator[stem.descriptor.extrainfo_descriptor.RelayExtraInfoDescriptor]` but got `typing.Generator[stem.descriptor.Descriptor, None, None]`.",
    "message": " Expected `Iterator[stem.descriptor.extrainfo_descriptor.RelayExtraInfoDescriptor]` but got `typing.Generator[stem.descriptor.Descriptor, None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 462,
    "warning_line": "        yield desc"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/collector.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/collector.py",
    "file_hunks_size": 26,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/collector.py:464:33 Incompatible variable type [9]: start is declared to have type `datetime.datetime` but is used as type `None`.",
    "message": " start is declared to have type `datetime.datetime` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 464,
    "warning_line": "  def get_microdescriptors(self, start: datetime.datetime = None, end: datetime.datetime = None, cache_to: Optional[str] = None, timeout: Optional[int] = None, retries: Optional[int] = 3) -> Iterator['stem.descriptor.microdescriptor.Microdescriptor']:"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/collector.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/collector.py",
    "file_hunks_size": 26,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/collector.py:464:66 Incompatible variable type [9]: end is declared to have type `datetime.datetime` but is used as type `None`.",
    "message": " end is declared to have type `datetime.datetime` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 464,
    "warning_line": "  def get_microdescriptors(self, start: datetime.datetime = None, end: datetime.datetime = None, cache_to: Optional[str] = None, timeout: Optional[int] = None, retries: Optional[int] = 3) -> Iterator['stem.descriptor.microdescriptor.Microdescriptor']:"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/collector.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/collector.py",
    "file_hunks_size": 26,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/collector.py:496:8 Incompatible return type [7]: Expected `Iterator[stem.descriptor.microdescriptor.Microdescriptor]` but got `typing.Generator[stem.descriptor.Descriptor, None, None]`.",
    "message": " Expected `Iterator[stem.descriptor.microdescriptor.Microdescriptor]` but got `typing.Generator[stem.descriptor.Descriptor, None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 496,
    "warning_line": "        yield desc"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/collector.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/collector.py",
    "file_hunks_size": 26,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/collector.py:498:26 Incompatible variable type [9]: start is declared to have type `datetime.datetime` but is used as type `None`.",
    "message": " start is declared to have type `datetime.datetime` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 498,
    "warning_line": "  def get_consensus(self, start: datetime.datetime = None, end: datetime.datetime = None, cache_to: Optional[str] = None, document_handler: 'stem.descriptor.DocumentHandler' = DocumentHandler.ENTRIES, version: int = 3, microdescriptor: bool = False, bridge: bool = False, timeout: Optional[int] = None, retries: Optional[int] = 3) -> Iterator['stem.descriptor.router_status_entry.RouterStatusEntry']:"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/collector.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/collector.py",
    "file_hunks_size": 26,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/collector.py:498:59 Incompatible variable type [9]: end is declared to have type `datetime.datetime` but is used as type `None`.",
    "message": " end is declared to have type `datetime.datetime` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 498,
    "warning_line": "  def get_consensus(self, start: datetime.datetime = None, end: datetime.datetime = None, cache_to: Optional[str] = None, document_handler: 'stem.descriptor.DocumentHandler' = DocumentHandler.ENTRIES, version: int = 3, microdescriptor: bool = False, bridge: bool = False, timeout: Optional[int] = None, retries: Optional[int] = 3) -> Iterator['stem.descriptor.router_status_entry.RouterStatusEntry']:"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/collector.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/collector.py",
    "file_hunks_size": 26,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/collector.py:540:8 Incompatible return type [7]: Expected `Iterator[stem.descriptor.router_status_entry.RouterStatusEntry]` but got `typing.Generator[stem.descriptor.Descriptor, None, None]`.",
    "message": " Expected `Iterator[stem.descriptor.router_status_entry.RouterStatusEntry]` but got `typing.Generator[stem.descriptor.Descriptor, None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 540,
    "warning_line": "        yield desc"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/collector.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/collector.py",
    "file_hunks_size": 26,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/collector.py:542:33 Incompatible variable type [9]: start is declared to have type `datetime.datetime` but is used as type `None`.",
    "message": " start is declared to have type `datetime.datetime` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 542,
    "warning_line": "  def get_key_certificates(self, start: datetime.datetime = None, end: datetime.datetime = None, cache_to: Optional[str] = None, timeout: Optional[int] = None, retries: Optional[int] = 3) -> Iterator['stem.descriptor.networkstatus.KeyCertificate']:"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/collector.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/collector.py",
    "file_hunks_size": 26,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/collector.py:542:66 Incompatible variable type [9]: end is declared to have type `datetime.datetime` but is used as type `None`.",
    "message": " end is declared to have type `datetime.datetime` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 542,
    "warning_line": "  def get_key_certificates(self, start: datetime.datetime = None, end: datetime.datetime = None, cache_to: Optional[str] = None, timeout: Optional[int] = None, retries: Optional[int] = 3) -> Iterator['stem.descriptor.networkstatus.KeyCertificate']:"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/collector.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/collector.py",
    "file_hunks_size": 26,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/collector.py:564:8 Incompatible return type [7]: Expected `Iterator[stem.descriptor.networkstatus.KeyCertificate]` but got `typing.Generator[stem.descriptor.Descriptor, None, None]`.",
    "message": " Expected `Iterator[stem.descriptor.networkstatus.KeyCertificate]` but got `typing.Generator[stem.descriptor.Descriptor, None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 564,
    "warning_line": "        yield desc"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/collector.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/collector.py",
    "file_hunks_size": 26,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/collector.py:566:32 Incompatible variable type [9]: start is declared to have type `datetime.datetime` but is used as type `None`.",
    "message": " start is declared to have type `datetime.datetime` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 566,
    "warning_line": "  def get_bandwidth_files(self, start: datetime.datetime = None, end: datetime.datetime = None, cache_to: Optional[str] = None, timeout: Optional[int] = None, retries: Optional[int] = 3) -> Iterator['stem.descriptor.bandwidth_file.BandwidthFile']:"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/collector.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/collector.py",
    "file_hunks_size": 26,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/collector.py:566:65 Incompatible variable type [9]: end is declared to have type `datetime.datetime` but is used as type `None`.",
    "message": " end is declared to have type `datetime.datetime` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 566,
    "warning_line": "  def get_bandwidth_files(self, start: datetime.datetime = None, end: datetime.datetime = None, cache_to: Optional[str] = None, timeout: Optional[int] = None, retries: Optional[int] = 3) -> Iterator['stem.descriptor.bandwidth_file.BandwidthFile']:"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/collector.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/collector.py",
    "file_hunks_size": 26,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/collector.py:588:8 Incompatible return type [7]: Expected `Iterator[stem.descriptor.bandwidth_file.BandwidthFile]` but got `typing.Generator[stem.descriptor.Descriptor, None, None]`.",
    "message": " Expected `Iterator[stem.descriptor.bandwidth_file.BandwidthFile]` but got `typing.Generator[stem.descriptor.Descriptor, None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 588,
    "warning_line": "        yield desc"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/collector.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/collector.py",
    "file_hunks_size": 26,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/collector.py:590:27 Incompatible variable type [9]: start is declared to have type `datetime.datetime` but is used as type `None`.",
    "message": " start is declared to have type `datetime.datetime` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 590,
    "warning_line": "  def get_exit_lists(self, start: datetime.datetime = None, end: datetime.datetime = None, cache_to: Optional[str] = None, timeout: Optional[int] = None, retries: Optional[int] = 3) -> Iterator['stem.descriptor.tordnsel.TorDNSEL']:"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/collector.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/collector.py",
    "file_hunks_size": 26,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/collector.py:590:60 Incompatible variable type [9]: end is declared to have type `datetime.datetime` but is used as type `None`.",
    "message": " end is declared to have type `datetime.datetime` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 590,
    "warning_line": "  def get_exit_lists(self, start: datetime.datetime = None, end: datetime.datetime = None, cache_to: Optional[str] = None, timeout: Optional[int] = None, retries: Optional[int] = 3) -> Iterator['stem.descriptor.tordnsel.TorDNSEL']:"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/collector.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/collector.py",
    "file_hunks_size": 26,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "stem/descriptor/collector.py:612:8 Incompatible return type [7]: Expected `Iterator[stem.descriptor.tordnsel.TorDNSEL]` but got `typing.Generator[stem.descriptor.Descriptor, None, None]`.",
    "message": " Expected `Iterator[stem.descriptor.tordnsel.TorDNSEL]` but got `typing.Generator[stem.descriptor.Descriptor, None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 612,
    "warning_line": "        yield desc",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "      for desc in f.read(cache_to, 'tordnsel', start, end, timeout = timeout, retries = retries):\n        yield desc\n\n  def index(self, compression: Union[str, 'descriptor.Compression'] = 'best') -> Dict[str, Any]:\n    \"\"\"\n",
        "source_code_len": 223,
        "target_code": "      for desc in f.read(cache_to, 'tordnsel', start, end, timeout = timeout, retries = retries):\n        yield desc  # type: ignore\n\n  def index(self, compression: Union[str, stem.descriptor._Compression] = 'best') -> Dict[str, Any]:\n    \"\"\"\n",
        "target_code_len": 243,
        "diff_format": "@@ -611,5 +611,5 @@\n       for desc in f.read(cache_to, 'tordnsel', start, end, timeout = timeout, retries = retries):\n-        yield desc\n-\n-  def index(self, compression: Union[str, 'descriptor.Compression'] = 'best') -> Dict[str, Any]:\n+        yield desc  # type: ignore\n+\n+  def index(self, compression: Union[str, stem.descriptor._Compression] = 'best') -> Dict[str, Any]:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "      <IND>for desc in f.read(cache_to, 'tordnsel', start, end, timeout = timeout, retries = retries):\n        <IND>yield desc\n\n  <DED><DED><DED>def index(self, compression: Union[str, 'descriptor.Compression'] = 'best') -> Dict[str, Any]:\n    <IND>",
        "target_code_with_indent": "      <IND>for desc in f.read(cache_to, 'tordnsel', start, end, timeout = timeout, retries = retries):\n        <IND>yield desc  # type: ignore\n\n  <DED><DED><DED>def index(self, compression: Union[str, stem.descriptor._Compression] = 'best') -> Dict[str, Any]:\n    <IND>"
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/collector.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/collector.py",
    "file_hunks_size": 26,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/collector.py:645:6 Incompatible attribute type [8]: Attribute `_cached_index_at` declared in class `CollecTor` has type `int` but is used as type `float`.",
    "message": " Attribute `_cached_index_at` declared in class `CollecTor` has type `int` but is used as type `float`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 645,
    "warning_line": "      self._cached_index_at = time.time()"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/collector.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/collector.py",
    "file_hunks_size": 26,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/collector.py:649:18 Incompatible variable type [9]: descriptor_type is declared to have type `str` but is used as type `None`.",
    "message": " descriptor_type is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 649,
    "warning_line": "  def files(self, descriptor_type: str = None, start: datetime.datetime = None, end: datetime.datetime = None) -> Sequence['stem.descriptor.collector.File']:"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/collector.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/collector.py",
    "file_hunks_size": 26,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/collector.py:649:47 Incompatible variable type [9]: start is declared to have type `datetime.datetime` but is used as type `None`.",
    "message": " start is declared to have type `datetime.datetime` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 649,
    "warning_line": "  def files(self, descriptor_type: str = None, start: datetime.datetime = None, end: datetime.datetime = None) -> Sequence['stem.descriptor.collector.File']:"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/collector.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/collector.py",
    "file_hunks_size": 26,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/collector.py:649:80 Incompatible variable type [9]: end is declared to have type `datetime.datetime` but is used as type `None`.",
    "message": " end is declared to have type `datetime.datetime` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 649,
    "warning_line": "  def files(self, descriptor_type: str = None, start: datetime.datetime = None, end: datetime.datetime = None) -> Sequence['stem.descriptor.collector.File']:"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/collector.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/collector.py",
    "file_hunks_size": 26,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/collector.py:668:51 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `CollecTor._files` but got `Dict[str, typing.Any]`.",
    "message": " Expected `str` for 1st positional only parameter to call `CollecTor._files` but got `Dict[str, typing.Any]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 668,
    "warning_line": "      self._cached_files = sorted(CollecTor._files(self.index(), []), key = lambda x: x.start if x.start else FUTURE)"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/extrainfo_descriptor.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/extrainfo_descriptor.py",
    "file_hunks_size": 28,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/extrainfo_descriptor.py:107:3 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `stem.util.enum.Enum.__init__` but got `Tuple[str, str]`.",
    "message": " Expected `str` for 1st positional only parameter to call `stem.util.enum.Enum.__init__` but got `Tuple[str, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 107,
    "warning_line": "  ('OK', 'ok'),"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/extrainfo_descriptor.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/extrainfo_descriptor.py",
    "file_hunks_size": 28,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/extrainfo_descriptor.py:108:3 Incompatible parameter type [6]: Expected `str` for 2nd positional only parameter to call `stem.util.enum.Enum.__init__` but got `Tuple[str, str]`.",
    "message": " Expected `str` for 2nd positional only parameter to call `stem.util.enum.Enum.__init__` but got `Tuple[str, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 108,
    "warning_line": "  ('NOT_ENOUGH_SIGS', 'not-enough-sigs'),"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/extrainfo_descriptor.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/extrainfo_descriptor.py",
    "file_hunks_size": 28,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/extrainfo_descriptor.py:109:3 Incompatible parameter type [6]: Expected `str` for 3rd positional only parameter to call `stem.util.enum.Enum.__init__` but got `Tuple[str, str]`.",
    "message": " Expected `str` for 3rd positional only parameter to call `stem.util.enum.Enum.__init__` but got `Tuple[str, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 109,
    "warning_line": "  ('UNAVAILABLE', 'unavailable'),"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/extrainfo_descriptor.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/extrainfo_descriptor.py",
    "file_hunks_size": 28,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/extrainfo_descriptor.py:110:3 Incompatible parameter type [6]: Expected `str` for 4th positional only parameter to call `stem.util.enum.Enum.__init__` but got `Tuple[str, str]`.",
    "message": " Expected `str` for 4th positional only parameter to call `stem.util.enum.Enum.__init__` but got `Tuple[str, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 110,
    "warning_line": "  ('NOT_FOUND', 'not-found'),"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/extrainfo_descriptor.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/extrainfo_descriptor.py",
    "file_hunks_size": 28,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/extrainfo_descriptor.py:111:3 Incompatible parameter type [6]: Expected `str` for 5th positional only parameter to call `stem.util.enum.Enum.__init__` but got `Tuple[str, str]`.",
    "message": " Expected `str` for 5th positional only parameter to call `stem.util.enum.Enum.__init__` but got `Tuple[str, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 111,
    "warning_line": "  ('NOT_MODIFIED', 'not-modified'),"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/extrainfo_descriptor.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/extrainfo_descriptor.py",
    "file_hunks_size": 28,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/extrainfo_descriptor.py:112:3 Incompatible parameter type [6]: Expected `str` for 6th positional only parameter to call `stem.util.enum.Enum.__init__` but got `Tuple[str, str]`.",
    "message": " Expected `str` for 6th positional only parameter to call `stem.util.enum.Enum.__init__` but got `Tuple[str, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 112,
    "warning_line": "  ('BUSY', 'busy'),"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/extrainfo_descriptor.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/extrainfo_descriptor.py",
    "file_hunks_size": 28,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/extrainfo_descriptor.py:119:31 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `stem.util.enum.Enum.__init__` but got `Tuple[str, str]`.",
    "message": " Expected `str` for 1st positional only parameter to call `stem.util.enum.Enum.__init__` but got `Tuple[str, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 119,
    "warning_line": "DirStat = stem.util.enum.Enum(*[(stat.upper(), stat) for stat in dir_stats])"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/extrainfo_descriptor.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/extrainfo_descriptor.py",
    "file_hunks_size": 28,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/extrainfo_descriptor.py:203:40 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `ExtraInfoDescriptor.__init__` but got `bytes`.",
    "message": " Expected `str` for 1st positional only parameter to call `ExtraInfoDescriptor.__init__` but got `bytes`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 203,
    "warning_line": "        yield BridgeExtraInfoDescriptor(bytes.join(b'', extrainfo_content), validate, **kwargs)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n  def __init__(self, raw_contents: str, validate: bool = False) -> None:\n    \"\"\"\n",
        "source_code_len": 82,
        "target_code": "\n  def __init__(self, raw_contents: bytes, validate: bool = False) -> None:\n    \"\"\"\n",
        "target_code_len": 84,
        "diff_format": "@@ -819,3 +823,3 @@\n \n-  def __init__(self, raw_contents: str, validate: bool = False) -> None:\n+  def __init__(self, raw_contents: bytes, validate: bool = False) -> None:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n  def __init__(self, raw_contents: str, validate: bool = False) -> None:\n    <IND>",
        "target_code_with_indent": "\n  def __init__(self, raw_contents: bytes, validate: bool = False) -> None:\n    <IND>"
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/extrainfo_descriptor.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/extrainfo_descriptor.py",
    "file_hunks_size": 28,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/extrainfo_descriptor.py:205:39 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `ExtraInfoDescriptor.__init__` but got `bytes`.",
    "message": " Expected `str` for 1st positional only parameter to call `ExtraInfoDescriptor.__init__` but got `bytes`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 205,
    "warning_line": "        yield RelayExtraInfoDescriptor(bytes.join(b'', extrainfo_content), validate, **kwargs)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n  def __init__(self, raw_contents: str, validate: bool = False) -> None:\n    \"\"\"\n",
        "source_code_len": 82,
        "target_code": "\n  def __init__(self, raw_contents: bytes, validate: bool = False) -> None:\n    \"\"\"\n",
        "target_code_len": 84,
        "diff_format": "@@ -819,3 +823,3 @@\n \n-  def __init__(self, raw_contents: str, validate: bool = False) -> None:\n+  def __init__(self, raw_contents: bytes, validate: bool = False) -> None:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n  def __init__(self, raw_contents: str, validate: bool = False) -> None:\n    <IND>",
        "target_code_with_indent": "\n  def __init__(self, raw_contents: bytes, validate: bool = False) -> None:\n    <IND>"
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/extrainfo_descriptor.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/extrainfo_descriptor.py",
    "file_hunks_size": 28,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/extrainfo_descriptor.py:363:2 Incompatible variable type [9]: entries is declared to have type `Dict[str, Sequence[str]]` but is used as type `typing.List[Variable[_T]]`.",
    "message": " entries is declared to have type `Dict[str, Sequence[str]]` but is used as type `typing.List[Variable[_T]]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 363,
    "warning_line": "  entries, exc = [], None"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/extrainfo_descriptor.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/extrainfo_descriptor.py",
    "file_hunks_size": 28,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/extrainfo_descriptor.py:883:4 Incompatible return type [7]: Expected `Tuple[str]` but got `Tuple[str, str, str]`.",
    "message": " Expected `Tuple[str]` but got `Tuple[str, str, str]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 883,
    "warning_line": "    return REQUIRED_FIELDS",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n  def _required_fields(self) -> Tuple[str]:\n    return REQUIRED_FIELDS\n",
        "source_code_len": 72,
        "target_code": "\n  def _required_fields(self) -> Tuple[str, ...]:\n    return REQUIRED_FIELDS\n",
        "target_code_len": 77,
        "diff_format": "@@ -881,3 +885,3 @@\n \n-  def _required_fields(self) -> Tuple[str]:\n+  def _required_fields(self) -> Tuple[str, ...]:\n     return REQUIRED_FIELDS\n",
        "source_code_with_indent": "\n  <DED>def _required_fields(self) -> Tuple[str]:\n    <IND>return REQUIRED_FIELDS\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n  <DED>def _required_fields(self) -> Tuple[str, ...]:\n    <IND>return REQUIRED_FIELDS\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/extrainfo_descriptor.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/extrainfo_descriptor.py",
    "file_hunks_size": 28,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/extrainfo_descriptor.py:936:51 Incompatible parameter type [6]: Expected `Sequence[str]` for 3rd positional only parameter to call `_descriptor_content` but got `Tuple[Tuple[str, str], Tuple[str, typing.Any]]`.",
    "message": " Expected `Sequence[str]` for 3rd positional only parameter to call `_descriptor_content` but got `Tuple[Tuple[str, str], Tuple[str, typing.Any]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 936,
    "warning_line": "      content = _descriptor_content(attr, exclude, base_header) + b'\\nrouter-signature\\n'"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/extrainfo_descriptor.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/extrainfo_descriptor.py",
    "file_hunks_size": 28,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/extrainfo_descriptor.py:939:6 Incompatible return type [7]: Expected `str` but got `bytes`.",
    "message": " Expected `str` but got `bytes`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 939,
    "warning_line": "      return _descriptor_content(attr, exclude, base_header, ("
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/extrainfo_descriptor.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/extrainfo_descriptor.py",
    "file_hunks_size": 28,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/extrainfo_descriptor.py:939:48 Incompatible parameter type [6]: Expected `Sequence[str]` for 3rd positional only parameter to call `_descriptor_content` but got `Tuple[Tuple[str, str], Tuple[str, typing.Any]]`.",
    "message": " Expected `Sequence[str]` for 3rd positional only parameter to call `_descriptor_content` but got `Tuple[Tuple[str, str], Tuple[str, typing.Any]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 939,
    "warning_line": "      return _descriptor_content(attr, exclude, base_header, ("
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/extrainfo_descriptor.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/extrainfo_descriptor.py",
    "file_hunks_size": 28,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/extrainfo_descriptor.py:940:8 Incompatible parameter type [6]: Expected `Sequence[str]` for 4th positional only parameter to call `_descriptor_content` but got `Tuple[Tuple[str, typing.Any]]`.",
    "message": " Expected `Sequence[str]` for 4th positional only parameter to call `_descriptor_content` but got `Tuple[Tuple[str, typing.Any]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 940,
    "warning_line": "        ('router-signature', _random_crypto_blob('SIGNATURE')),"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/extrainfo_descriptor.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/extrainfo_descriptor.py",
    "file_hunks_size": 28,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/extrainfo_descriptor.py:953:44 Incompatible parameter type [6]: Expected `bytes` for 1st positional only parameter to call `stem.descriptor._encode_digest` but got `hashlib._Hash`.",
    "message": " Expected `bytes` for 1st positional only parameter to call `stem.descriptor._encode_digest` but got `hashlib._Hash`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 953,
    "warning_line": "      return stem.descriptor._encode_digest(hashlib.sha1(content), encoding)"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/extrainfo_descriptor.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/extrainfo_descriptor.py",
    "file_hunks_size": 28,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/extrainfo_descriptor.py:960:44 Incompatible parameter type [6]: Expected `bytes` for 1st positional only parameter to call `stem.descriptor._encode_digest` but got `hashlib._Hash`.",
    "message": " Expected `bytes` for 1st positional only parameter to call `stem.descriptor._encode_digest` but got `hashlib._Hash`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 960,
    "warning_line": "      return stem.descriptor._encode_digest(hashlib.sha256(self.get_bytes()), encoding)"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/extrainfo_descriptor.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/extrainfo_descriptor.py",
    "file_hunks_size": 28,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/extrainfo_descriptor.py:993:4 Incompatible return type [7]: Expected `str` but got `bytes`.",
    "message": " Expected `str` but got `bytes`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 993,
    "warning_line": "    return _descriptor_content(attr, exclude, ("
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/extrainfo_descriptor.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/extrainfo_descriptor.py",
    "file_hunks_size": 28,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/extrainfo_descriptor.py:994:6 Incompatible parameter type [6]: Expected `Sequence[str]` for 3rd positional only parameter to call `_descriptor_content` but got `Tuple[Tuple[str, str], Tuple[str, typing.Any]]`.",
    "message": " Expected `Sequence[str]` for 3rd positional only parameter to call `_descriptor_content` but got `Tuple[Tuple[str, str], Tuple[str, typing.Any]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 994,
    "warning_line": "      ('extra-info', 'ec2bridgereaac65a3 %s' % _random_fingerprint()),"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/extrainfo_descriptor.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/extrainfo_descriptor.py",
    "file_hunks_size": 28,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/extrainfo_descriptor.py:997:6 Incompatible parameter type [6]: Expected `Sequence[str]` for 4th positional only parameter to call `_descriptor_content` but got `Tuple[Tuple[str, typing.Any]]`.",
    "message": " Expected `Sequence[str]` for 4th positional only parameter to call `_descriptor_content` but got `Tuple[Tuple[str, typing.Any]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 997,
    "warning_line": "      ('router-digest', _random_fingerprint()),"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/extrainfo_descriptor.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/extrainfo_descriptor.py",
    "file_hunks_size": 28,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/extrainfo_descriptor.py:1017:4 Incompatible return type [7]: Expected `Tuple[str]` but got `typing.Tuple[str, ...]`.",
    "message": " Expected `Tuple[str]` but got `typing.Tuple[str, ...]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 1017,
    "warning_line": "    return tuple(included_fields + [f for f in REQUIRED_FIELDS if f not in excluded_fields])"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/hidden_service.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/hidden_service.py",
    "file_hunks_size": 53,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/hidden_service.py:358:6 Incompatible return type [7]: Expected `Union[Ed25519PublicKey, X25519PublicKey]` but got `str`.",
    "message": " Expected `Union[Ed25519PublicKey, X25519PublicKey]` but got `str`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 358,
    "warning_line": "      return value"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/hidden_service.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/hidden_service.py",
    "file_hunks_size": 53,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/hidden_service.py:381:6 Incompatible variable type [9]: content is declared to have type `str` but is used as type `bytes`.",
    "message": " content is declared to have type `str` but is used as type `bytes`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 381,
    "warning_line": "      content = base64.b64decode(content)"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/hidden_service.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/hidden_service.py",
    "file_hunks_size": 53,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/hidden_service.py:389:22 Incompatible variable type [9]: content is declared to have type `str` but is used as type `bytes`.",
    "message": " content is declared to have type `str` but is used as type `bytes`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 389,
    "warning_line": "      link_specifier, content = stem.client.datatype.LinkSpecifier.pop(content)"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/hidden_service.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/hidden_service.py",
    "file_hunks_size": 53,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/hidden_service.py:395:4 Incompatible return type [7]: Expected `stem.client.datatype.LinkSpecifier` but got `typing.List[typing.Any]`.",
    "message": " Expected `stem.client.datatype.LinkSpecifier` but got `typing.List[typing.Any]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 395,
    "warning_line": "    return link_specifiers"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/hidden_service.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/hidden_service.py",
    "file_hunks_size": 53,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/hidden_service.py:421:21 Incompatible variable type [9]: id is declared to have type `str` but is used as type `None`.",
    "message": " id is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 421,
    "warning_line": "  def __init__(self, id: str = None, iv: str = None, cookie: str = None) -> None:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n  def __init__(self, id: str = None, iv: str = None, cookie: str = None) -> None:\n    self.id = stem.util.str_tools._to_unicode(id if id else base64.b64encode(os.urandom(8)).rstrip(b'='))\n",
        "source_code_len": 189,
        "target_code": "\n  def __init__(self, id: Optional[str] = None, iv: Optional[str] = None, cookie: Optional[str] = None) -> None:\n    self.id = stem.util.str_tools._to_unicode(id if id else base64.b64encode(os.urandom(8)).rstrip(b'='))\n",
        "target_code_len": 219,
        "diff_format": "@@ -420,3 +423,3 @@\n \n-  def __init__(self, id: str = None, iv: str = None, cookie: str = None) -> None:\n+  def __init__(self, id: Optional[str] = None, iv: Optional[str] = None, cookie: Optional[str] = None) -> None:\n     self.id = stem.util.str_tools._to_unicode(id if id else base64.b64encode(os.urandom(8)).rstrip(b'='))\n",
        "source_code_with_indent": "\n  def __init__(self, id: str = None, iv: str = None, cookie: str = None) -> None:\n    <IND>self.id = stem.util.str_tools._to_unicode(id if id else base64.b64encode(os.urandom(8)).rstrip(b'='))\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n  def __init__(self, id: Optional[str] = None, iv: Optional[str] = None, cookie: Optional[str] = None) -> None:\n    <IND>self.id = stem.util.str_tools._to_unicode(id if id else base64.b64encode(os.urandom(8)).rstrip(b'='))\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/hidden_service.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/hidden_service.py",
    "file_hunks_size": 53,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/hidden_service.py:421:37 Incompatible variable type [9]: iv is declared to have type `str` but is used as type `None`.",
    "message": " iv is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 421,
    "warning_line": "  def __init__(self, id: str = None, iv: str = None, cookie: str = None) -> None:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n  def __init__(self, id: str = None, iv: str = None, cookie: str = None) -> None:\n    self.id = stem.util.str_tools._to_unicode(id if id else base64.b64encode(os.urandom(8)).rstrip(b'='))\n",
        "source_code_len": 189,
        "target_code": "\n  def __init__(self, id: Optional[str] = None, iv: Optional[str] = None, cookie: Optional[str] = None) -> None:\n    self.id = stem.util.str_tools._to_unicode(id if id else base64.b64encode(os.urandom(8)).rstrip(b'='))\n",
        "target_code_len": 219,
        "diff_format": "@@ -420,3 +423,3 @@\n \n-  def __init__(self, id: str = None, iv: str = None, cookie: str = None) -> None:\n+  def __init__(self, id: Optional[str] = None, iv: Optional[str] = None, cookie: Optional[str] = None) -> None:\n     self.id = stem.util.str_tools._to_unicode(id if id else base64.b64encode(os.urandom(8)).rstrip(b'='))\n",
        "source_code_with_indent": "\n  def __init__(self, id: str = None, iv: str = None, cookie: str = None) -> None:\n    <IND>self.id = stem.util.str_tools._to_unicode(id if id else base64.b64encode(os.urandom(8)).rstrip(b'='))\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n  def __init__(self, id: Optional[str] = None, iv: Optional[str] = None, cookie: Optional[str] = None) -> None:\n    <IND>self.id = stem.util.str_tools._to_unicode(id if id else base64.b64encode(os.urandom(8)).rstrip(b'='))\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/hidden_service.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/hidden_service.py",
    "file_hunks_size": 53,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/hidden_service.py:421:53 Incompatible variable type [9]: cookie is declared to have type `str` but is used as type `None`.",
    "message": " cookie is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 421,
    "warning_line": "  def __init__(self, id: str = None, iv: str = None, cookie: str = None) -> None:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n  def __init__(self, id: str = None, iv: str = None, cookie: str = None) -> None:\n    self.id = stem.util.str_tools._to_unicode(id if id else base64.b64encode(os.urandom(8)).rstrip(b'='))\n",
        "source_code_len": 189,
        "target_code": "\n  def __init__(self, id: Optional[str] = None, iv: Optional[str] = None, cookie: Optional[str] = None) -> None:\n    self.id = stem.util.str_tools._to_unicode(id if id else base64.b64encode(os.urandom(8)).rstrip(b'='))\n",
        "target_code_len": 219,
        "diff_format": "@@ -420,3 +423,3 @@\n \n-  def __init__(self, id: str = None, iv: str = None, cookie: str = None) -> None:\n+  def __init__(self, id: Optional[str] = None, iv: Optional[str] = None, cookie: Optional[str] = None) -> None:\n     self.id = stem.util.str_tools._to_unicode(id if id else base64.b64encode(os.urandom(8)).rstrip(b'='))\n",
        "source_code_with_indent": "\n  def __init__(self, id: str = None, iv: str = None, cookie: str = None) -> None:\n    <IND>self.id = stem.util.str_tools._to_unicode(id if id else base64.b64encode(os.urandom(8)).rstrip(b'='))\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n  def __init__(self, id: Optional[str] = None, iv: Optional[str] = None, cookie: Optional[str] = None) -> None:\n    <IND>self.id = stem.util.str_tools._to_unicode(id if id else base64.b64encode(os.urandom(8)).rstrip(b'='))\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/hidden_service.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/hidden_service.py",
    "file_hunks_size": 53,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/hidden_service.py:436:43 Incompatible variable type [9]: desc_type is declared to have type `str` but is used as type `None`.",
    "message": " desc_type is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 436,
    "warning_line": "def _parse_file(descriptor_file: BinaryIO, desc_type: str = None, validate: bool = False, **kwargs: Any) -> Iterator['stem.descriptor.hidden_service.HiddenServiceDescriptor']:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _parse_file(descriptor_file: BinaryIO, desc_type: str = None, validate: bool = False, **kwargs: Any) -> Iterator['stem.descriptor.hidden_service.HiddenServiceDescriptor']:\n  \"\"\"\n",
        "source_code_len": 183,
        "target_code": "\ndef _parse_file(descriptor_file: BinaryIO, desc_type: Optional[Type['stem.descriptor.hidden_service.HiddenServiceDescriptor']] = None, validate: bool = False, **kwargs: Any) -> Iterator['stem.descriptor.hidden_service.HiddenServiceDescriptor']:\n  \"\"\"\n",
        "target_code_len": 252,
        "diff_format": "@@ -435,3 +438,3 @@\n \n-def _parse_file(descriptor_file: BinaryIO, desc_type: str = None, validate: bool = False, **kwargs: Any) -> Iterator['stem.descriptor.hidden_service.HiddenServiceDescriptor']:\n+def _parse_file(descriptor_file: BinaryIO, desc_type: Optional[Type['stem.descriptor.hidden_service.HiddenServiceDescriptor']] = None, validate: bool = False, **kwargs: Any) -> Iterator['stem.descriptor.hidden_service.HiddenServiceDescriptor']:\n   \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED><DED>def _parse_file(descriptor_file: BinaryIO, desc_type: str = None, validate: bool = False, **kwargs: Any) -> Iterator['stem.descriptor.hidden_service.HiddenServiceDescriptor']:\n  <IND>",
        "target_code_with_indent": "\n<DED><DED>def _parse_file(descriptor_file: BinaryIO, desc_type: Optional[Type['stem.descriptor.hidden_service.HiddenServiceDescriptor']] = None, validate: bool = False, **kwargs: Any) -> Iterator['stem.descriptor.hidden_service.HiddenServiceDescriptor']:\n  <IND>"
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/hidden_service.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/hidden_service.py",
    "file_hunks_size": 53,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/hidden_service.py:455:4 Incompatible variable type [9]: desc_type is declared to have type `str` but is used as type `Type[HiddenServiceDescriptorV2]`.",
    "message": " desc_type is declared to have type `str` but is used as type `Type[HiddenServiceDescriptorV2]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 455,
    "warning_line": "    desc_type = HiddenServiceDescriptorV2",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _parse_file(descriptor_file: BinaryIO, desc_type: str = None, validate: bool = False, **kwargs: Any) -> Iterator['stem.descriptor.hidden_service.HiddenServiceDescriptor']:\n  \"\"\"\n",
        "source_code_len": 183,
        "target_code": "\ndef _parse_file(descriptor_file: BinaryIO, desc_type: Optional[Type['stem.descriptor.hidden_service.HiddenServiceDescriptor']] = None, validate: bool = False, **kwargs: Any) -> Iterator['stem.descriptor.hidden_service.HiddenServiceDescriptor']:\n  \"\"\"\n",
        "target_code_len": 252,
        "diff_format": "@@ -435,3 +438,3 @@\n \n-def _parse_file(descriptor_file: BinaryIO, desc_type: str = None, validate: bool = False, **kwargs: Any) -> Iterator['stem.descriptor.hidden_service.HiddenServiceDescriptor']:\n+def _parse_file(descriptor_file: BinaryIO, desc_type: Optional[Type['stem.descriptor.hidden_service.HiddenServiceDescriptor']] = None, validate: bool = False, **kwargs: Any) -> Iterator['stem.descriptor.hidden_service.HiddenServiceDescriptor']:\n   \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED><DED>def _parse_file(descriptor_file: BinaryIO, desc_type: str = None, validate: bool = False, **kwargs: Any) -> Iterator['stem.descriptor.hidden_service.HiddenServiceDescriptor']:\n  <IND>",
        "target_code_with_indent": "\n<DED><DED>def _parse_file(descriptor_file: BinaryIO, desc_type: Optional[Type['stem.descriptor.hidden_service.HiddenServiceDescriptor']] = None, validate: bool = False, **kwargs: Any) -> Iterator['stem.descriptor.hidden_service.HiddenServiceDescriptor']:\n  <IND>"
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/hidden_service.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/hidden_service.py",
    "file_hunks_size": 53,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/hidden_service.py:471:12 Call error [29]: `str` is not a function.",
    "message": " `str` is not a function.",
    "rule_id": "Call error [29]",
    "warning_line_no": 471,
    "warning_line": "      yield desc_type(bytes.join(b'', descriptor_content), validate, **kwargs)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _parse_file(descriptor_file: BinaryIO, desc_type: str = None, validate: bool = False, **kwargs: Any) -> Iterator['stem.descriptor.hidden_service.HiddenServiceDescriptor']:\n  \"\"\"\n",
        "source_code_len": 183,
        "target_code": "\ndef _parse_file(descriptor_file: BinaryIO, desc_type: Optional[Type['stem.descriptor.hidden_service.HiddenServiceDescriptor']] = None, validate: bool = False, **kwargs: Any) -> Iterator['stem.descriptor.hidden_service.HiddenServiceDescriptor']:\n  \"\"\"\n",
        "target_code_len": 252,
        "diff_format": "@@ -435,3 +438,3 @@\n \n-def _parse_file(descriptor_file: BinaryIO, desc_type: str = None, validate: bool = False, **kwargs: Any) -> Iterator['stem.descriptor.hidden_service.HiddenServiceDescriptor']:\n+def _parse_file(descriptor_file: BinaryIO, desc_type: Optional[Type['stem.descriptor.hidden_service.HiddenServiceDescriptor']] = None, validate: bool = False, **kwargs: Any) -> Iterator['stem.descriptor.hidden_service.HiddenServiceDescriptor']:\n   \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED><DED>def _parse_file(descriptor_file: BinaryIO, desc_type: str = None, validate: bool = False, **kwargs: Any) -> Iterator['stem.descriptor.hidden_service.HiddenServiceDescriptor']:\n  <IND>",
        "target_code_with_indent": "\n<DED><DED>def _parse_file(descriptor_file: BinaryIO, desc_type: Optional[Type['stem.descriptor.hidden_service.HiddenServiceDescriptor']] = None, validate: bool = False, **kwargs: Any) -> Iterator['stem.descriptor.hidden_service.HiddenServiceDescriptor']:\n  <IND>"
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/hidden_service.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/hidden_service.py",
    "file_hunks_size": 53,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/hidden_service.py:477:32 Incompatible parameter type [6]: Expected `Union[bytes, typing.Tuple[bytes, ...]]` for 1st positional only parameter to call `bytes.startswith` but got `str`.",
    "message": " Expected `Union[bytes, typing.Tuple[bytes, ...]]` for 1st positional only parameter to call `bytes.startswith` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 477,
    "warning_line": "  if encrypted_block.startswith('-----BEGIN MESSAGE-----\\n') and encrypted_block.endswith('\\n-----END MESSAGE-----'):"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/hidden_service.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/hidden_service.py",
    "file_hunks_size": 53,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/hidden_service.py:477:90 Incompatible parameter type [6]: Expected `Union[bytes, typing.Tuple[bytes, ...]]` for 1st positional only parameter to call `bytes.endswith` but got `str`.",
    "message": " Expected `Union[bytes, typing.Tuple[bytes, ...]]` for 1st positional only parameter to call `bytes.endswith` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 477,
    "warning_line": "  if encrypted_block.startswith('-----BEGIN MESSAGE-----\\n') and encrypted_block.endswith('\\n-----END MESSAGE-----'):"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/hidden_service.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/hidden_service.py",
    "file_hunks_size": 53,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/hidden_service.py:508:32 Incompatible parameter type [6]: Expected `bytes` for 1st positional only parameter to call `cryptography.hazmat.primitives.ciphers.CipherContext.update` but got `str`.",
    "message": " Expected `bytes` for 1st positional only parameter to call `cryptography.hazmat.primitives.ciphers.CipherContext.update` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 508,
    "warning_line": "  ciphertext = encryptor.update(plaintext) + encryptor.finalize()",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _encrypt_layer(plaintext: str, constant: bytes, revision_counter: int, subcredential: bytes, blinded_key: bytes) -> bytes:\n  salt = os.urandom(16)\n",
        "source_code_len": 152,
        "target_code": "\ndef _encrypt_layer(plaintext: bytes, constant: bytes, revision_counter: int, subcredential: bytes, blinded_key: bytes) -> bytes:\n  salt = os.urandom(16)\n",
        "target_code_len": 154,
        "diff_format": "@@ -502,3 +505,3 @@\n \n-def _encrypt_layer(plaintext: str, constant: bytes, revision_counter: int, subcredential: bytes, blinded_key: bytes) -> bytes:\n+def _encrypt_layer(plaintext: bytes, constant: bytes, revision_counter: int, subcredential: bytes, blinded_key: bytes) -> bytes:\n   salt = os.urandom(16)\n",
        "source_code_with_indent": "\n<DED>def _encrypt_layer(plaintext: str, constant: bytes, revision_counter: int, subcredential: bytes, blinded_key: bytes) -> bytes:\n  <IND>salt = os.urandom(16)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def _encrypt_layer(plaintext: bytes, constant: bytes, revision_counter: int, subcredential: bytes, blinded_key: bytes) -> bytes:\n  <IND>salt = os.urandom(16)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/hidden_service.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/hidden_service.py",
    "file_hunks_size": 53,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/hidden_service.py:511:76 Incompatible parameter type [6]: Expected `typing.Iterable[Union[memoryview, typing.ByteString]]` for 1st positional only parameter to call `bytes.join` but got `Sequence[str]`.",
    "message": " Expected `typing.Iterable[Union[memoryview, typing.ByteString]]` for 1st positional only parameter to call `bytes.join` but got `Sequence[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 511,
    "warning_line": "  return b'-----BEGIN MESSAGE-----\\n%s\\n-----END MESSAGE-----' % b'\\n'.join(stem.util.str_tools._split_by_length(encoded, 64))"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/hidden_service.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/hidden_service.py",
    "file_hunks_size": 53,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/hidden_service.py:511:113 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `stem.util.str_tools._split_by_length` but got `bytes`.",
    "message": " Expected `str` for 1st positional only parameter to call `stem.util.str_tools._split_by_length` but got `bytes`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 511,
    "warning_line": "  return b'-----BEGIN MESSAGE-----\\n%s\\n-----END MESSAGE-----' % b'\\n'.join(stem.util.str_tools._split_by_length(encoded, 64))"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/hidden_service.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/hidden_service.py",
    "file_hunks_size": 53,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/hidden_service.py:692:4 Incompatible return type [7]: Expected `str` but got `bytes`.",
    "message": " Expected `str` but got `bytes`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 692,
    "warning_line": "    return _descriptor_content(attr, exclude, (",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "  @classmethod\n  def content(cls: Type['stem.descriptor.hidden_service.HiddenServiceDescriptorV2'], attr: Mapping[str, str] = None, exclude: Sequence[str] = ()) -> str:\n    return _descriptor_content(attr, exclude, (\n",
        "source_code_len": 217,
        "target_code": "  @classmethod\n  def content(cls: Type['stem.descriptor.hidden_service.HiddenServiceDescriptorV2'], attr: Mapping[str, str] = None, exclude: Sequence[str] = ()) -> bytes:\n    return _descriptor_content(attr, exclude, (\n",
        "target_code_len": 219,
        "diff_format": "@@ -690,3 +693,3 @@\n   @classmethod\n-  def content(cls: Type['stem.descriptor.hidden_service.HiddenServiceDescriptorV2'], attr: Mapping[str, str] = None, exclude: Sequence[str] = ()) -> str:\n+  def content(cls: Type['stem.descriptor.hidden_service.HiddenServiceDescriptorV2'], attr: Mapping[str, str] = None, exclude: Sequence[str] = ()) -> bytes:\n     return _descriptor_content(attr, exclude, (\n",
        "source_code_with_indent": "  @classmethod\n  def content(cls: Type['stem.descriptor.hidden_service.HiddenServiceDescriptorV2'], attr: Mapping[str, str] = None, exclude: Sequence[str] = ()) -> str:\n    <IND>return _descriptor_content(attr, exclude, (\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "  @classmethod\n  def content(cls: Type['stem.descriptor.hidden_service.HiddenServiceDescriptorV2'], attr: Mapping[str, str] = None, exclude: Sequence[str] = ()) -> bytes:\n    <IND>return _descriptor_content(attr, exclude, (\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n  def __init__(self, raw_contents: str, validate: bool = False, skip_crypto_validation: bool = False) -> None:\n    super(HiddenServiceDescriptorV2, self).__init__(raw_contents, lazy_load = not validate)\n",
        "source_code_len": 204,
        "target_code": "\n  def __init__(self, raw_contents: bytes, validate: bool = False, skip_crypto_validation: bool = False) -> None:\n    super(HiddenServiceDescriptorV2, self).__init__(raw_contents, lazy_load = not validate)\n",
        "target_code_len": 206,
        "diff_format": "@@ -707,3 +710,3 @@\n \n-  def __init__(self, raw_contents: str, validate: bool = False, skip_crypto_validation: bool = False) -> None:\n+  def __init__(self, raw_contents: bytes, validate: bool = False, skip_crypto_validation: bool = False) -> None:\n     super(HiddenServiceDescriptorV2, self).__init__(raw_contents, lazy_load = not validate)\n",
        "source_code_with_indent": "\n  <DED>def __init__(self, raw_contents: str, validate: bool = False, skip_crypto_validation: bool = False) -> None:\n    <IND>super(HiddenServiceDescriptorV2, self).__init__(raw_contents, lazy_load = not validate)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n  <DED>def __init__(self, raw_contents: bytes, validate: bool = False, skip_crypto_validation: bool = False) -> None:\n    <IND>super(HiddenServiceDescriptorV2, self).__init__(raw_contents, lazy_load = not validate)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/hidden_service.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/hidden_service.py",
    "file_hunks_size": 53,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/hidden_service.py:693:6 Incompatible parameter type [6]: Expected `Sequence[str]` for 3rd positional only parameter to call `_descriptor_content` but got `Tuple[Tuple[str, str], Tuple[str, str], Tuple[str, typing.Any], Tuple[str, str], Tuple[str, typing.Any], Tuple[str, str], Tuple[str, str]]`.",
    "message": " Expected `Sequence[str]` for 3rd positional only parameter to call `_descriptor_content` but got `Tuple[Tuple[str, str], Tuple[str, str], Tuple[str, typing.Any], Tuple[str, str], Tuple[str, typing.Any], Tuple[str, str], Tuple[str, str]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 693,
    "warning_line": "      ('rendezvous-service-descriptor', 'y3olqqblqw2gbh6phimfuiroechjjafa'),"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/hidden_service.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/hidden_service.py",
    "file_hunks_size": 53,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/hidden_service.py:701:6 Incompatible parameter type [6]: Expected `Sequence[str]` for 4th positional only parameter to call `_descriptor_content` but got `Tuple[Tuple[str, typing.Any]]`.",
    "message": " Expected `Sequence[str]` for 4th positional only parameter to call `_descriptor_content` but got `Tuple[Tuple[str, typing.Any]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 701,
    "warning_line": "      ('signature', _random_crypto_blob('SIGNATURE')),"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/hidden_service.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/hidden_service.py",
    "file_hunks_size": 53,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/hidden_service.py:801:29 Incompatible parameter type [6]: Expected `Union[array.array[typing.Any], bytearray, bytes, memoryview, mmap.mmap]` for 1st positional only parameter to call `hashlib.sha1` but got `str`.",
    "message": " Expected `Union[array.array[typing.Any], bytearray, bytes, memoryview, mmap.mmap]` for 1st positional only parameter to call `hashlib.sha1` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 801,
    "warning_line": "    client_id = hashlib.sha1(authentication_cookie + iv).digest()[:4]"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/hidden_service.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/hidden_service.py",
    "file_hunks_size": 53,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/hidden_service.py:801:53 Unsupported operand [58]: `+` is not supported for operand types `str` and `bytes`.",
    "message": " `+` is not supported for operand types `str` and `bytes`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 801,
    "warning_line": "    client_id = hashlib.sha1(authentication_cookie + iv).digest()[:4]"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/hidden_service.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/hidden_service.py",
    "file_hunks_size": 53,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/hidden_service.py:809:37 Incompatible parameter type [6]: Expected `bytes` for 1st positional only parameter to call `algorithms.AES.__init__` but got `str`.",
    "message": " Expected `bytes` for 1st positional only parameter to call `algorithms.AES.__init__` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 809,
    "warning_line": "      cipher = Cipher(algorithms.AES(authentication_cookie), modes.CTR(b'\\x00' * len(iv)), default_backend())"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/hidden_service.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/hidden_service.py",
    "file_hunks_size": 53,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/hidden_service.py:836:35 Incompatible parameter type [6]: Expected `bytes` for 1st positional only parameter to call `algorithms.AES.__init__` but got `str`.",
    "message": " Expected `bytes` for 1st positional only parameter to call `algorithms.AES.__init__` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 836,
    "warning_line": "    cipher = Cipher(algorithms.AES(authentication_cookie), modes.CTR(iv), default_backend())"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/hidden_service.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/hidden_service.py",
    "file_hunks_size": 53,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "stem/descriptor/hidden_service.py:934:2 Inconsistent override [14]: `stem.descriptor.hidden_service.HiddenServiceDescriptorV3.content` overrides method defined in `Descriptor` inconsistently. Parameter of type `Type[HiddenServiceDescriptorV3]` is not a supertype of the overridden parameter `Type[Descriptor]`.",
    "message": " `stem.descriptor.hidden_service.HiddenServiceDescriptorV3.content` overrides method defined in `Descriptor` inconsistently. Parameter of type `Type[HiddenServiceDescriptorV3]` is not a supertype of the overridden parameter `Type[Descriptor]`.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 934,
    "warning_line": "  def content(cls: Type['stem.descriptor.hidden_service.HiddenServiceDescriptorV3'], attr: Optional[Mapping[str, str]] = None, exclude: Sequence[str] = (), sign: bool = False, inner_layer: Optional['stem.descriptor.hidden_service.InnerLayer'] = None, outer_layer: Optional['stem.descriptor.hidden_service.OuterLayer'] = None, identity_key: Optional['cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey'] = None, signing_key: Optional['cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey'] = None, signing_cert: Optional['stem.descriptor.Ed25519CertificateV1'] = None, revision_counter: int = None, blinding_nonce: bytes = None) -> str:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "  @classmethod\n  def content(cls: Type['stem.descriptor.hidden_service.HiddenServiceDescriptorV3'], attr: Optional[Mapping[str, str]] = None, exclude: Sequence[str] = (), sign: bool = False, inner_layer: Optional['stem.descriptor.hidden_service.InnerLayer'] = None, outer_layer: Optional['stem.descriptor.hidden_service.OuterLayer'] = None, identity_key: Optional['cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey'] = None, signing_key: Optional['cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey'] = None, signing_cert: Optional['stem.descriptor.Ed25519CertificateV1'] = None, revision_counter: int = None, blinding_nonce: bytes = None) -> str:\n    \"\"\"\n",
        "source_code_len": 691,
        "target_code": "  @classmethod\n  def content(cls: Type['stem.descriptor.hidden_service.HiddenServiceDescriptorV3'], attr: Optional[Mapping[str, str]] = None, exclude: Sequence[str] = (), sign: bool = False, inner_layer: Optional['stem.descriptor.hidden_service.InnerLayer'] = None, outer_layer: Optional['stem.descriptor.hidden_service.OuterLayer'] = None, identity_key: Optional['cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey'] = None, signing_key: Optional['cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey'] = None, signing_cert: Optional['stem.descriptor.certificate.Ed25519CertificateV1'] = None, revision_counter: int = None, blinding_nonce: bytes = None) -> bytes:  # type: ignore\n    \"\"\"\n",
        "target_code_len": 721,
        "diff_format": "@@ -933,3 +936,3 @@\n   @classmethod\n-  def content(cls: Type['stem.descriptor.hidden_service.HiddenServiceDescriptorV3'], attr: Optional[Mapping[str, str]] = None, exclude: Sequence[str] = (), sign: bool = False, inner_layer: Optional['stem.descriptor.hidden_service.InnerLayer'] = None, outer_layer: Optional['stem.descriptor.hidden_service.OuterLayer'] = None, identity_key: Optional['cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey'] = None, signing_key: Optional['cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey'] = None, signing_cert: Optional['stem.descriptor.Ed25519CertificateV1'] = None, revision_counter: int = None, blinding_nonce: bytes = None) -> str:\n+  def content(cls: Type['stem.descriptor.hidden_service.HiddenServiceDescriptorV3'], attr: Optional[Mapping[str, str]] = None, exclude: Sequence[str] = (), sign: bool = False, inner_layer: Optional['stem.descriptor.hidden_service.InnerLayer'] = None, outer_layer: Optional['stem.descriptor.hidden_service.OuterLayer'] = None, identity_key: Optional['cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey'] = None, signing_key: Optional['cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey'] = None, signing_cert: Optional['stem.descriptor.certificate.Ed25519CertificateV1'] = None, revision_counter: int = None, blinding_nonce: bytes = None) -> bytes:  # type: ignore\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "  @classmethod\n  def content(cls: Type['stem.descriptor.hidden_service.HiddenServiceDescriptorV3'], attr: Optional[Mapping[str, str]] = None, exclude: Sequence[str] = (), sign: bool = False, inner_layer: Optional['stem.descriptor.hidden_service.InnerLayer'] = None, outer_layer: Optional['stem.descriptor.hidden_service.OuterLayer'] = None, identity_key: Optional['cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey'] = None, signing_key: Optional['cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey'] = None, signing_cert: Optional['stem.descriptor.Ed25519CertificateV1'] = None, revision_counter: int = None, blinding_nonce: bytes = None) -> str:\n    <IND>",
        "target_code_with_indent": "  @classmethod\n  def content(cls: Type['stem.descriptor.hidden_service.HiddenServiceDescriptorV3'], attr: Optional[Mapping[str, str]] = None, exclude: Sequence[str] = (), sign: bool = False, inner_layer: Optional['stem.descriptor.hidden_service.InnerLayer'] = None, outer_layer: Optional['stem.descriptor.hidden_service.OuterLayer'] = None, identity_key: Optional['cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey'] = None, signing_key: Optional['cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey'] = None, signing_cert: Optional['stem.descriptor.certificate.Ed25519CertificateV1'] = None, revision_counter: int = None, blinding_nonce: bytes = None) -> bytes:  # type: ignore\n    <IND>"
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/hidden_service.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/hidden_service.py",
    "file_hunks_size": 53,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "stem/descriptor/hidden_service.py:934:630 Incompatible variable type [9]: blinding_nonce is declared to have type `bytes` but is used as type `None`.",
    "message": " blinding_nonce is declared to have type `bytes` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 934,
    "warning_line": "  def content(cls: Type['stem.descriptor.hidden_service.HiddenServiceDescriptorV3'], attr: Optional[Mapping[str, str]] = None, exclude: Sequence[str] = (), sign: bool = False, inner_layer: Optional['stem.descriptor.hidden_service.InnerLayer'] = None, outer_layer: Optional['stem.descriptor.hidden_service.OuterLayer'] = None, identity_key: Optional['cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey'] = None, signing_key: Optional['cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey'] = None, signing_cert: Optional['stem.descriptor.Ed25519CertificateV1'] = None, revision_counter: int = None, blinding_nonce: bytes = None) -> str:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "  @classmethod\n  def content(cls: Type['stem.descriptor.hidden_service.HiddenServiceDescriptorV3'], attr: Optional[Mapping[str, str]] = None, exclude: Sequence[str] = (), sign: bool = False, inner_layer: Optional['stem.descriptor.hidden_service.InnerLayer'] = None, outer_layer: Optional['stem.descriptor.hidden_service.OuterLayer'] = None, identity_key: Optional['cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey'] = None, signing_key: Optional['cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey'] = None, signing_cert: Optional['stem.descriptor.Ed25519CertificateV1'] = None, revision_counter: int = None, blinding_nonce: bytes = None) -> str:\n    \"\"\"\n",
        "source_code_len": 691,
        "target_code": "  @classmethod\n  def content(cls: Type['stem.descriptor.hidden_service.HiddenServiceDescriptorV3'], attr: Optional[Mapping[str, str]] = None, exclude: Sequence[str] = (), sign: bool = False, inner_layer: Optional['stem.descriptor.hidden_service.InnerLayer'] = None, outer_layer: Optional['stem.descriptor.hidden_service.OuterLayer'] = None, identity_key: Optional['cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey'] = None, signing_key: Optional['cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey'] = None, signing_cert: Optional['stem.descriptor.certificate.Ed25519CertificateV1'] = None, revision_counter: int = None, blinding_nonce: bytes = None) -> bytes:  # type: ignore\n    \"\"\"\n",
        "target_code_len": 721,
        "diff_format": "@@ -933,3 +936,3 @@\n   @classmethod\n-  def content(cls: Type['stem.descriptor.hidden_service.HiddenServiceDescriptorV3'], attr: Optional[Mapping[str, str]] = None, exclude: Sequence[str] = (), sign: bool = False, inner_layer: Optional['stem.descriptor.hidden_service.InnerLayer'] = None, outer_layer: Optional['stem.descriptor.hidden_service.OuterLayer'] = None, identity_key: Optional['cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey'] = None, signing_key: Optional['cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey'] = None, signing_cert: Optional['stem.descriptor.Ed25519CertificateV1'] = None, revision_counter: int = None, blinding_nonce: bytes = None) -> str:\n+  def content(cls: Type['stem.descriptor.hidden_service.HiddenServiceDescriptorV3'], attr: Optional[Mapping[str, str]] = None, exclude: Sequence[str] = (), sign: bool = False, inner_layer: Optional['stem.descriptor.hidden_service.InnerLayer'] = None, outer_layer: Optional['stem.descriptor.hidden_service.OuterLayer'] = None, identity_key: Optional['cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey'] = None, signing_key: Optional['cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey'] = None, signing_cert: Optional['stem.descriptor.certificate.Ed25519CertificateV1'] = None, revision_counter: int = None, blinding_nonce: bytes = None) -> bytes:  # type: ignore\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "  @classmethod\n  def content(cls: Type['stem.descriptor.hidden_service.HiddenServiceDescriptorV3'], attr: Optional[Mapping[str, str]] = None, exclude: Sequence[str] = (), sign: bool = False, inner_layer: Optional['stem.descriptor.hidden_service.InnerLayer'] = None, outer_layer: Optional['stem.descriptor.hidden_service.OuterLayer'] = None, identity_key: Optional['cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey'] = None, signing_key: Optional['cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey'] = None, signing_cert: Optional['stem.descriptor.Ed25519CertificateV1'] = None, revision_counter: int = None, blinding_nonce: bytes = None) -> str:\n    <IND>",
        "target_code_with_indent": "  @classmethod\n  def content(cls: Type['stem.descriptor.hidden_service.HiddenServiceDescriptorV3'], attr: Optional[Mapping[str, str]] = None, exclude: Sequence[str] = (), sign: bool = False, inner_layer: Optional['stem.descriptor.hidden_service.InnerLayer'] = None, outer_layer: Optional['stem.descriptor.hidden_service.OuterLayer'] = None, identity_key: Optional['cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey'] = None, signing_key: Optional['cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey'] = None, signing_cert: Optional['stem.descriptor.certificate.Ed25519CertificateV1'] = None, revision_counter: int = None, blinding_nonce: bytes = None) -> bytes:  # type: ignore\n    <IND>"
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/hidden_service.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/hidden_service.py",
    "file_hunks_size": 53,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/hidden_service.py:1013:6 Incompatible parameter type [6]: Expected `Sequence[str]` for 3rd positional only parameter to call `_descriptor_content` but got `Tuple[Tuple[str, str], Tuple[str, str], Tuple[str, str], Tuple[str, str], Tuple[str, bytes]]`.",
    "message": " Expected `Sequence[str]` for 3rd positional only parameter to call `_descriptor_content` but got `Tuple[Tuple[str, str], Tuple[str, str], Tuple[str, str], Tuple[str, str], Tuple[str, bytes]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1013,
    "warning_line": "      ('hs-descriptor', '3'),"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/hidden_service.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/hidden_service.py",
    "file_hunks_size": 53,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "stem/descriptor/hidden_service.py:1026:4 Incompatible return type [7]: Expected `str` but got `bytes`.",
    "message": " Expected `str` but got `bytes`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 1026,
    "warning_line": "    return desc_content",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "  @classmethod\n  def content(cls: Type['stem.descriptor.hidden_service.HiddenServiceDescriptorV3'], attr: Optional[Mapping[str, str]] = None, exclude: Sequence[str] = (), sign: bool = False, inner_layer: Optional['stem.descriptor.hidden_service.InnerLayer'] = None, outer_layer: Optional['stem.descriptor.hidden_service.OuterLayer'] = None, identity_key: Optional['cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey'] = None, signing_key: Optional['cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey'] = None, signing_cert: Optional['stem.descriptor.Ed25519CertificateV1'] = None, revision_counter: int = None, blinding_nonce: bytes = None) -> str:\n    \"\"\"\n",
        "source_code_len": 691,
        "target_code": "  @classmethod\n  def content(cls: Type['stem.descriptor.hidden_service.HiddenServiceDescriptorV3'], attr: Optional[Mapping[str, str]] = None, exclude: Sequence[str] = (), sign: bool = False, inner_layer: Optional['stem.descriptor.hidden_service.InnerLayer'] = None, outer_layer: Optional['stem.descriptor.hidden_service.OuterLayer'] = None, identity_key: Optional['cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey'] = None, signing_key: Optional['cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey'] = None, signing_cert: Optional['stem.descriptor.certificate.Ed25519CertificateV1'] = None, revision_counter: int = None, blinding_nonce: bytes = None) -> bytes:  # type: ignore\n    \"\"\"\n",
        "target_code_len": 721,
        "diff_format": "@@ -933,3 +936,3 @@\n   @classmethod\n-  def content(cls: Type['stem.descriptor.hidden_service.HiddenServiceDescriptorV3'], attr: Optional[Mapping[str, str]] = None, exclude: Sequence[str] = (), sign: bool = False, inner_layer: Optional['stem.descriptor.hidden_service.InnerLayer'] = None, outer_layer: Optional['stem.descriptor.hidden_service.OuterLayer'] = None, identity_key: Optional['cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey'] = None, signing_key: Optional['cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey'] = None, signing_cert: Optional['stem.descriptor.Ed25519CertificateV1'] = None, revision_counter: int = None, blinding_nonce: bytes = None) -> str:\n+  def content(cls: Type['stem.descriptor.hidden_service.HiddenServiceDescriptorV3'], attr: Optional[Mapping[str, str]] = None, exclude: Sequence[str] = (), sign: bool = False, inner_layer: Optional['stem.descriptor.hidden_service.InnerLayer'] = None, outer_layer: Optional['stem.descriptor.hidden_service.OuterLayer'] = None, identity_key: Optional['cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey'] = None, signing_key: Optional['cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey'] = None, signing_cert: Optional['stem.descriptor.certificate.Ed25519CertificateV1'] = None, revision_counter: int = None, blinding_nonce: bytes = None) -> bytes:  # type: ignore\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "  @classmethod\n  def content(cls: Type['stem.descriptor.hidden_service.HiddenServiceDescriptorV3'], attr: Optional[Mapping[str, str]] = None, exclude: Sequence[str] = (), sign: bool = False, inner_layer: Optional['stem.descriptor.hidden_service.InnerLayer'] = None, outer_layer: Optional['stem.descriptor.hidden_service.OuterLayer'] = None, identity_key: Optional['cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey'] = None, signing_key: Optional['cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey'] = None, signing_cert: Optional['stem.descriptor.Ed25519CertificateV1'] = None, revision_counter: int = None, blinding_nonce: bytes = None) -> str:\n    <IND>",
        "target_code_with_indent": "  @classmethod\n  def content(cls: Type['stem.descriptor.hidden_service.HiddenServiceDescriptorV3'], attr: Optional[Mapping[str, str]] = None, exclude: Sequence[str] = (), sign: bool = False, inner_layer: Optional['stem.descriptor.hidden_service.InnerLayer'] = None, outer_layer: Optional['stem.descriptor.hidden_service.OuterLayer'] = None, identity_key: Optional['cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey'] = None, signing_key: Optional['cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey'] = None, signing_cert: Optional['stem.descriptor.certificate.Ed25519CertificateV1'] = None, revision_counter: int = None, blinding_nonce: bytes = None) -> bytes:  # type: ignore\n    <IND>"
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/hidden_service.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/hidden_service.py",
    "file_hunks_size": 53,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "stem/descriptor/hidden_service.py:1029:2 Inconsistent override [14]: `stem.descriptor.hidden_service.HiddenServiceDescriptorV3.create` overrides method defined in `Descriptor` inconsistently. Parameter of type `Type[HiddenServiceDescriptorV3]` is not a supertype of the overridden parameter `Type[Descriptor]`.",
    "message": " `stem.descriptor.hidden_service.HiddenServiceDescriptorV3.create` overrides method defined in `Descriptor` inconsistently. Parameter of type `Type[HiddenServiceDescriptorV3]` is not a supertype of the overridden parameter `Type[Descriptor]`.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 1029,
    "warning_line": "  def create(cls: Type['stem.descriptor.hidden_service.HiddenServiceDescriptorV3'], attr: Optional[Mapping[str, str]] = None, exclude: Sequence[str] = (), validate: bool = True, sign: bool = False, inner_layer: Optional['stem.descriptor.hidden_service.InnerLayer'] = None, outer_layer: Optional['stem.descriptor.hidden_service.OuterLayer'] = None, identity_key: Optional['cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey'] = None, signing_key: Optional['cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey'] = None, signing_cert: Optional['stem.descriptor.Ed25519CertificateV1'] = None, revision_counter: int = None, blinding_nonce: bytes = None) -> 'stem.descriptor.hidden_service.HiddenServiceDescriptorV3':",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "  @classmethod\n  def create(cls: Type['stem.descriptor.hidden_service.HiddenServiceDescriptorV3'], attr: Optional[Mapping[str, str]] = None, exclude: Sequence[str] = (), validate: bool = True, sign: bool = False, inner_layer: Optional['stem.descriptor.hidden_service.InnerLayer'] = None, outer_layer: Optional['stem.descriptor.hidden_service.OuterLayer'] = None, identity_key: Optional['cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey'] = None, signing_key: Optional['cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey'] = None, signing_cert: Optional['stem.descriptor.Ed25519CertificateV1'] = None, revision_counter: int = None, blinding_nonce: bytes = None) -> 'stem.descriptor.hidden_service.HiddenServiceDescriptorV3':\n    return cls(cls.content(attr, exclude, sign, inner_layer, outer_layer, identity_key, signing_key, signing_cert, revision_counter, blinding_nonce), validate = validate)\n",
        "source_code_len": 931,
        "target_code": "  @classmethod\n  def create(cls: Type['stem.descriptor.hidden_service.HiddenServiceDescriptorV3'], attr: Optional[Mapping[str, str]] = None, exclude: Sequence[str] = (), validate: bool = True, sign: bool = False, inner_layer: Optional['stem.descriptor.hidden_service.InnerLayer'] = None, outer_layer: Optional['stem.descriptor.hidden_service.OuterLayer'] = None, identity_key: Optional['cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey'] = None, signing_key: Optional['cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey'] = None, signing_cert: Optional['stem.descriptor.certificate.Ed25519CertificateV1'] = None, revision_counter: int = None, blinding_nonce: bytes = None) -> 'stem.descriptor.hidden_service.HiddenServiceDescriptorV3':  # type: ignore\n    return cls(cls.content(attr, exclude, sign, inner_layer, outer_layer, identity_key, signing_key, signing_cert, revision_counter, blinding_nonce), validate = validate)\n",
        "target_code_len": 959,
        "diff_format": "@@ -1028,3 +1036,3 @@\n   @classmethod\n-  def create(cls: Type['stem.descriptor.hidden_service.HiddenServiceDescriptorV3'], attr: Optional[Mapping[str, str]] = None, exclude: Sequence[str] = (), validate: bool = True, sign: bool = False, inner_layer: Optional['stem.descriptor.hidden_service.InnerLayer'] = None, outer_layer: Optional['stem.descriptor.hidden_service.OuterLayer'] = None, identity_key: Optional['cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey'] = None, signing_key: Optional['cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey'] = None, signing_cert: Optional['stem.descriptor.Ed25519CertificateV1'] = None, revision_counter: int = None, blinding_nonce: bytes = None) -> 'stem.descriptor.hidden_service.HiddenServiceDescriptorV3':\n+  def create(cls: Type['stem.descriptor.hidden_service.HiddenServiceDescriptorV3'], attr: Optional[Mapping[str, str]] = None, exclude: Sequence[str] = (), validate: bool = True, sign: bool = False, inner_layer: Optional['stem.descriptor.hidden_service.InnerLayer'] = None, outer_layer: Optional['stem.descriptor.hidden_service.OuterLayer'] = None, identity_key: Optional['cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey'] = None, signing_key: Optional['cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey'] = None, signing_cert: Optional['stem.descriptor.certificate.Ed25519CertificateV1'] = None, revision_counter: int = None, blinding_nonce: bytes = None) -> 'stem.descriptor.hidden_service.HiddenServiceDescriptorV3':  # type: ignore\n     return cls(cls.content(attr, exclude, sign, inner_layer, outer_layer, identity_key, signing_key, signing_cert, revision_counter, blinding_nonce), validate = validate)\n",
        "source_code_with_indent": "  <DED>@classmethod\n  def create(cls: Type['stem.descriptor.hidden_service.HiddenServiceDescriptorV3'], attr: Optional[Mapping[str, str]] = None, exclude: Sequence[str] = (), validate: bool = True, sign: bool = False, inner_layer: Optional['stem.descriptor.hidden_service.InnerLayer'] = None, outer_layer: Optional['stem.descriptor.hidden_service.OuterLayer'] = None, identity_key: Optional['cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey'] = None, signing_key: Optional['cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey'] = None, signing_cert: Optional['stem.descriptor.Ed25519CertificateV1'] = None, revision_counter: int = None, blinding_nonce: bytes = None) -> 'stem.descriptor.hidden_service.HiddenServiceDescriptorV3':\n    <IND>return cls(cls.content(attr, exclude, sign, inner_layer, outer_layer, identity_key, signing_key, signing_cert, revision_counter, blinding_nonce), validate = validate)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "  <DED>@classmethod\n  def create(cls: Type['stem.descriptor.hidden_service.HiddenServiceDescriptorV3'], attr: Optional[Mapping[str, str]] = None, exclude: Sequence[str] = (), validate: bool = True, sign: bool = False, inner_layer: Optional['stem.descriptor.hidden_service.InnerLayer'] = None, outer_layer: Optional['stem.descriptor.hidden_service.OuterLayer'] = None, identity_key: Optional['cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey'] = None, signing_key: Optional['cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey'] = None, signing_cert: Optional['stem.descriptor.certificate.Ed25519CertificateV1'] = None, revision_counter: int = None, blinding_nonce: bytes = None) -> 'stem.descriptor.hidden_service.HiddenServiceDescriptorV3':  # type: ignore\n    <IND>return cls(cls.content(attr, exclude, sign, inner_layer, outer_layer, identity_key, signing_key, signing_cert, revision_counter, blinding_nonce), validate = validate)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/hidden_service.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/hidden_service.py",
    "file_hunks_size": 53,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "stem/descriptor/hidden_service.py:1029:622 Incompatible variable type [9]: revision_counter is declared to have type `int` but is used as type `None`.",
    "message": " revision_counter is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 1029,
    "warning_line": "  def create(cls: Type['stem.descriptor.hidden_service.HiddenServiceDescriptorV3'], attr: Optional[Mapping[str, str]] = None, exclude: Sequence[str] = (), validate: bool = True, sign: bool = False, inner_layer: Optional['stem.descriptor.hidden_service.InnerLayer'] = None, outer_layer: Optional['stem.descriptor.hidden_service.OuterLayer'] = None, identity_key: Optional['cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey'] = None, signing_key: Optional['cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey'] = None, signing_cert: Optional['stem.descriptor.Ed25519CertificateV1'] = None, revision_counter: int = None, blinding_nonce: bytes = None) -> 'stem.descriptor.hidden_service.HiddenServiceDescriptorV3':",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "  @classmethod\n  def create(cls: Type['stem.descriptor.hidden_service.HiddenServiceDescriptorV3'], attr: Optional[Mapping[str, str]] = None, exclude: Sequence[str] = (), validate: bool = True, sign: bool = False, inner_layer: Optional['stem.descriptor.hidden_service.InnerLayer'] = None, outer_layer: Optional['stem.descriptor.hidden_service.OuterLayer'] = None, identity_key: Optional['cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey'] = None, signing_key: Optional['cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey'] = None, signing_cert: Optional['stem.descriptor.Ed25519CertificateV1'] = None, revision_counter: int = None, blinding_nonce: bytes = None) -> 'stem.descriptor.hidden_service.HiddenServiceDescriptorV3':\n    return cls(cls.content(attr, exclude, sign, inner_layer, outer_layer, identity_key, signing_key, signing_cert, revision_counter, blinding_nonce), validate = validate)\n",
        "source_code_len": 931,
        "target_code": "  @classmethod\n  def create(cls: Type['stem.descriptor.hidden_service.HiddenServiceDescriptorV3'], attr: Optional[Mapping[str, str]] = None, exclude: Sequence[str] = (), validate: bool = True, sign: bool = False, inner_layer: Optional['stem.descriptor.hidden_service.InnerLayer'] = None, outer_layer: Optional['stem.descriptor.hidden_service.OuterLayer'] = None, identity_key: Optional['cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey'] = None, signing_key: Optional['cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey'] = None, signing_cert: Optional['stem.descriptor.certificate.Ed25519CertificateV1'] = None, revision_counter: int = None, blinding_nonce: bytes = None) -> 'stem.descriptor.hidden_service.HiddenServiceDescriptorV3':  # type: ignore\n    return cls(cls.content(attr, exclude, sign, inner_layer, outer_layer, identity_key, signing_key, signing_cert, revision_counter, blinding_nonce), validate = validate)\n",
        "target_code_len": 959,
        "diff_format": "@@ -1028,3 +1036,3 @@\n   @classmethod\n-  def create(cls: Type['stem.descriptor.hidden_service.HiddenServiceDescriptorV3'], attr: Optional[Mapping[str, str]] = None, exclude: Sequence[str] = (), validate: bool = True, sign: bool = False, inner_layer: Optional['stem.descriptor.hidden_service.InnerLayer'] = None, outer_layer: Optional['stem.descriptor.hidden_service.OuterLayer'] = None, identity_key: Optional['cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey'] = None, signing_key: Optional['cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey'] = None, signing_cert: Optional['stem.descriptor.Ed25519CertificateV1'] = None, revision_counter: int = None, blinding_nonce: bytes = None) -> 'stem.descriptor.hidden_service.HiddenServiceDescriptorV3':\n+  def create(cls: Type['stem.descriptor.hidden_service.HiddenServiceDescriptorV3'], attr: Optional[Mapping[str, str]] = None, exclude: Sequence[str] = (), validate: bool = True, sign: bool = False, inner_layer: Optional['stem.descriptor.hidden_service.InnerLayer'] = None, outer_layer: Optional['stem.descriptor.hidden_service.OuterLayer'] = None, identity_key: Optional['cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey'] = None, signing_key: Optional['cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey'] = None, signing_cert: Optional['stem.descriptor.certificate.Ed25519CertificateV1'] = None, revision_counter: int = None, blinding_nonce: bytes = None) -> 'stem.descriptor.hidden_service.HiddenServiceDescriptorV3':  # type: ignore\n     return cls(cls.content(attr, exclude, sign, inner_layer, outer_layer, identity_key, signing_key, signing_cert, revision_counter, blinding_nonce), validate = validate)\n",
        "source_code_with_indent": "  <DED>@classmethod\n  def create(cls: Type['stem.descriptor.hidden_service.HiddenServiceDescriptorV3'], attr: Optional[Mapping[str, str]] = None, exclude: Sequence[str] = (), validate: bool = True, sign: bool = False, inner_layer: Optional['stem.descriptor.hidden_service.InnerLayer'] = None, outer_layer: Optional['stem.descriptor.hidden_service.OuterLayer'] = None, identity_key: Optional['cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey'] = None, signing_key: Optional['cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey'] = None, signing_cert: Optional['stem.descriptor.Ed25519CertificateV1'] = None, revision_counter: int = None, blinding_nonce: bytes = None) -> 'stem.descriptor.hidden_service.HiddenServiceDescriptorV3':\n    <IND>return cls(cls.content(attr, exclude, sign, inner_layer, outer_layer, identity_key, signing_key, signing_cert, revision_counter, blinding_nonce), validate = validate)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "  <DED>@classmethod\n  def create(cls: Type['stem.descriptor.hidden_service.HiddenServiceDescriptorV3'], attr: Optional[Mapping[str, str]] = None, exclude: Sequence[str] = (), validate: bool = True, sign: bool = False, inner_layer: Optional['stem.descriptor.hidden_service.InnerLayer'] = None, outer_layer: Optional['stem.descriptor.hidden_service.OuterLayer'] = None, identity_key: Optional['cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey'] = None, signing_key: Optional['cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey'] = None, signing_cert: Optional['stem.descriptor.certificate.Ed25519CertificateV1'] = None, revision_counter: int = None, blinding_nonce: bytes = None) -> 'stem.descriptor.hidden_service.HiddenServiceDescriptorV3':  # type: ignore\n    <IND>return cls(cls.content(attr, exclude, sign, inner_layer, outer_layer, identity_key, signing_key, signing_cert, revision_counter, blinding_nonce), validate = validate)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/hidden_service.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/hidden_service.py",
    "file_hunks_size": 53,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "stem/descriptor/hidden_service.py:1029:652 Incompatible variable type [9]: blinding_nonce is declared to have type `bytes` but is used as type `None`.",
    "message": " blinding_nonce is declared to have type `bytes` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 1029,
    "warning_line": "  def create(cls: Type['stem.descriptor.hidden_service.HiddenServiceDescriptorV3'], attr: Optional[Mapping[str, str]] = None, exclude: Sequence[str] = (), validate: bool = True, sign: bool = False, inner_layer: Optional['stem.descriptor.hidden_service.InnerLayer'] = None, outer_layer: Optional['stem.descriptor.hidden_service.OuterLayer'] = None, identity_key: Optional['cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey'] = None, signing_key: Optional['cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey'] = None, signing_cert: Optional['stem.descriptor.Ed25519CertificateV1'] = None, revision_counter: int = None, blinding_nonce: bytes = None) -> 'stem.descriptor.hidden_service.HiddenServiceDescriptorV3':",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "  @classmethod\n  def create(cls: Type['stem.descriptor.hidden_service.HiddenServiceDescriptorV3'], attr: Optional[Mapping[str, str]] = None, exclude: Sequence[str] = (), validate: bool = True, sign: bool = False, inner_layer: Optional['stem.descriptor.hidden_service.InnerLayer'] = None, outer_layer: Optional['stem.descriptor.hidden_service.OuterLayer'] = None, identity_key: Optional['cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey'] = None, signing_key: Optional['cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey'] = None, signing_cert: Optional['stem.descriptor.Ed25519CertificateV1'] = None, revision_counter: int = None, blinding_nonce: bytes = None) -> 'stem.descriptor.hidden_service.HiddenServiceDescriptorV3':\n    return cls(cls.content(attr, exclude, sign, inner_layer, outer_layer, identity_key, signing_key, signing_cert, revision_counter, blinding_nonce), validate = validate)\n",
        "source_code_len": 931,
        "target_code": "  @classmethod\n  def create(cls: Type['stem.descriptor.hidden_service.HiddenServiceDescriptorV3'], attr: Optional[Mapping[str, str]] = None, exclude: Sequence[str] = (), validate: bool = True, sign: bool = False, inner_layer: Optional['stem.descriptor.hidden_service.InnerLayer'] = None, outer_layer: Optional['stem.descriptor.hidden_service.OuterLayer'] = None, identity_key: Optional['cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey'] = None, signing_key: Optional['cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey'] = None, signing_cert: Optional['stem.descriptor.certificate.Ed25519CertificateV1'] = None, revision_counter: int = None, blinding_nonce: bytes = None) -> 'stem.descriptor.hidden_service.HiddenServiceDescriptorV3':  # type: ignore\n    return cls(cls.content(attr, exclude, sign, inner_layer, outer_layer, identity_key, signing_key, signing_cert, revision_counter, blinding_nonce), validate = validate)\n",
        "target_code_len": 959,
        "diff_format": "@@ -1028,3 +1036,3 @@\n   @classmethod\n-  def create(cls: Type['stem.descriptor.hidden_service.HiddenServiceDescriptorV3'], attr: Optional[Mapping[str, str]] = None, exclude: Sequence[str] = (), validate: bool = True, sign: bool = False, inner_layer: Optional['stem.descriptor.hidden_service.InnerLayer'] = None, outer_layer: Optional['stem.descriptor.hidden_service.OuterLayer'] = None, identity_key: Optional['cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey'] = None, signing_key: Optional['cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey'] = None, signing_cert: Optional['stem.descriptor.Ed25519CertificateV1'] = None, revision_counter: int = None, blinding_nonce: bytes = None) -> 'stem.descriptor.hidden_service.HiddenServiceDescriptorV3':\n+  def create(cls: Type['stem.descriptor.hidden_service.HiddenServiceDescriptorV3'], attr: Optional[Mapping[str, str]] = None, exclude: Sequence[str] = (), validate: bool = True, sign: bool = False, inner_layer: Optional['stem.descriptor.hidden_service.InnerLayer'] = None, outer_layer: Optional['stem.descriptor.hidden_service.OuterLayer'] = None, identity_key: Optional['cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey'] = None, signing_key: Optional['cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey'] = None, signing_cert: Optional['stem.descriptor.certificate.Ed25519CertificateV1'] = None, revision_counter: int = None, blinding_nonce: bytes = None) -> 'stem.descriptor.hidden_service.HiddenServiceDescriptorV3':  # type: ignore\n     return cls(cls.content(attr, exclude, sign, inner_layer, outer_layer, identity_key, signing_key, signing_cert, revision_counter, blinding_nonce), validate = validate)\n",
        "source_code_with_indent": "  <DED>@classmethod\n  def create(cls: Type['stem.descriptor.hidden_service.HiddenServiceDescriptorV3'], attr: Optional[Mapping[str, str]] = None, exclude: Sequence[str] = (), validate: bool = True, sign: bool = False, inner_layer: Optional['stem.descriptor.hidden_service.InnerLayer'] = None, outer_layer: Optional['stem.descriptor.hidden_service.OuterLayer'] = None, identity_key: Optional['cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey'] = None, signing_key: Optional['cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey'] = None, signing_cert: Optional['stem.descriptor.Ed25519CertificateV1'] = None, revision_counter: int = None, blinding_nonce: bytes = None) -> 'stem.descriptor.hidden_service.HiddenServiceDescriptorV3':\n    <IND>return cls(cls.content(attr, exclude, sign, inner_layer, outer_layer, identity_key, signing_key, signing_cert, revision_counter, blinding_nonce), validate = validate)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "  <DED>@classmethod\n  def create(cls: Type['stem.descriptor.hidden_service.HiddenServiceDescriptorV3'], attr: Optional[Mapping[str, str]] = None, exclude: Sequence[str] = (), validate: bool = True, sign: bool = False, inner_layer: Optional['stem.descriptor.hidden_service.InnerLayer'] = None, outer_layer: Optional['stem.descriptor.hidden_service.OuterLayer'] = None, identity_key: Optional['cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey'] = None, signing_key: Optional['cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey'] = None, signing_cert: Optional['stem.descriptor.certificate.Ed25519CertificateV1'] = None, revision_counter: int = None, blinding_nonce: bytes = None) -> 'stem.descriptor.hidden_service.HiddenServiceDescriptorV3':  # type: ignore\n    <IND>return cls(cls.content(attr, exclude, sign, inner_layer, outer_layer, identity_key, signing_key, signing_cert, revision_counter, blinding_nonce), validate = validate)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/hidden_service.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/hidden_service.py",
    "file_hunks_size": 53,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "stem/descriptor/hidden_service.py:1030:15 Incompatible parameter type [6]: Expected `bytes` for 1st positional only parameter to call `HiddenServiceDescriptorV3.__init__` but got `str`.",
    "message": " Expected `bytes` for 1st positional only parameter to call `HiddenServiceDescriptorV3.__init__` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1030,
    "warning_line": "    return cls(cls.content(attr, exclude, sign, inner_layer, outer_layer, identity_key, signing_key, signing_cert, revision_counter, blinding_nonce), validate = validate)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "  @classmethod\n  def content(cls: Type['stem.descriptor.hidden_service.HiddenServiceDescriptorV3'], attr: Optional[Mapping[str, str]] = None, exclude: Sequence[str] = (), sign: bool = False, inner_layer: Optional['stem.descriptor.hidden_service.InnerLayer'] = None, outer_layer: Optional['stem.descriptor.hidden_service.OuterLayer'] = None, identity_key: Optional['cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey'] = None, signing_key: Optional['cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey'] = None, signing_cert: Optional['stem.descriptor.Ed25519CertificateV1'] = None, revision_counter: int = None, blinding_nonce: bytes = None) -> str:\n    \"\"\"\n",
        "source_code_len": 691,
        "target_code": "  @classmethod\n  def content(cls: Type['stem.descriptor.hidden_service.HiddenServiceDescriptorV3'], attr: Optional[Mapping[str, str]] = None, exclude: Sequence[str] = (), sign: bool = False, inner_layer: Optional['stem.descriptor.hidden_service.InnerLayer'] = None, outer_layer: Optional['stem.descriptor.hidden_service.OuterLayer'] = None, identity_key: Optional['cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey'] = None, signing_key: Optional['cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey'] = None, signing_cert: Optional['stem.descriptor.certificate.Ed25519CertificateV1'] = None, revision_counter: int = None, blinding_nonce: bytes = None) -> bytes:  # type: ignore\n    \"\"\"\n",
        "target_code_len": 721,
        "diff_format": "@@ -933,3 +936,3 @@\n   @classmethod\n-  def content(cls: Type['stem.descriptor.hidden_service.HiddenServiceDescriptorV3'], attr: Optional[Mapping[str, str]] = None, exclude: Sequence[str] = (), sign: bool = False, inner_layer: Optional['stem.descriptor.hidden_service.InnerLayer'] = None, outer_layer: Optional['stem.descriptor.hidden_service.OuterLayer'] = None, identity_key: Optional['cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey'] = None, signing_key: Optional['cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey'] = None, signing_cert: Optional['stem.descriptor.Ed25519CertificateV1'] = None, revision_counter: int = None, blinding_nonce: bytes = None) -> str:\n+  def content(cls: Type['stem.descriptor.hidden_service.HiddenServiceDescriptorV3'], attr: Optional[Mapping[str, str]] = None, exclude: Sequence[str] = (), sign: bool = False, inner_layer: Optional['stem.descriptor.hidden_service.InnerLayer'] = None, outer_layer: Optional['stem.descriptor.hidden_service.OuterLayer'] = None, identity_key: Optional['cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey'] = None, signing_key: Optional['cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey'] = None, signing_cert: Optional['stem.descriptor.certificate.Ed25519CertificateV1'] = None, revision_counter: int = None, blinding_nonce: bytes = None) -> bytes:  # type: ignore\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "  @classmethod\n  def content(cls: Type['stem.descriptor.hidden_service.HiddenServiceDescriptorV3'], attr: Optional[Mapping[str, str]] = None, exclude: Sequence[str] = (), sign: bool = False, inner_layer: Optional['stem.descriptor.hidden_service.InnerLayer'] = None, outer_layer: Optional['stem.descriptor.hidden_service.OuterLayer'] = None, identity_key: Optional['cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey'] = None, signing_key: Optional['cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey'] = None, signing_cert: Optional['stem.descriptor.Ed25519CertificateV1'] = None, revision_counter: int = None, blinding_nonce: bytes = None) -> str:\n    <IND>",
        "target_code_with_indent": "  @classmethod\n  def content(cls: Type['stem.descriptor.hidden_service.HiddenServiceDescriptorV3'], attr: Optional[Mapping[str, str]] = None, exclude: Sequence[str] = (), sign: bool = False, inner_layer: Optional['stem.descriptor.hidden_service.InnerLayer'] = None, outer_layer: Optional['stem.descriptor.hidden_service.OuterLayer'] = None, identity_key: Optional['cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey'] = None, signing_key: Optional['cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey'] = None, signing_cert: Optional['stem.descriptor.certificate.Ed25519CertificateV1'] = None, revision_counter: int = None, blinding_nonce: bytes = None) -> bytes:  # type: ignore\n    <IND>"
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/hidden_service.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/hidden_service.py",
    "file_hunks_size": 53,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/hidden_service.py:1082:65 Incompatible parameter type [6]: Expected `bytes` for 1st positional only parameter to call `HiddenServiceDescriptorV3._subcredential` but got `bool`.",
    "message": " Expected `bytes` for 1st positional only parameter to call `HiddenServiceDescriptorV3._subcredential` but got `bool`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1082,
    "warning_line": "        subcredential = HiddenServiceDescriptorV3._subcredential(identity_public_key, blinded_key)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "  @staticmethod\n  def identity_key_from_address(onion_address: str) -> bool:\n    \"\"\"\n",
        "source_code_len": 85,
        "target_code": "  @staticmethod\n  def identity_key_from_address(onion_address: str) -> bytes:\n    \"\"\"\n",
        "target_code_len": 86,
        "diff_format": "@@ -1114,3 +1122,3 @@\n   @staticmethod\n-  def identity_key_from_address(onion_address: str) -> bool:\n+  def identity_key_from_address(onion_address: str) -> bytes:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "  <DED>@staticmethod\n  def identity_key_from_address(onion_address: str) -> bool:\n    <IND>",
        "target_code_with_indent": "  <DED>@staticmethod\n  def identity_key_from_address(onion_address: str) -> bytes:\n    <IND>"
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/hidden_service.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/hidden_service.py",
    "file_hunks_size": 53,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/hidden_service.py:1149:4 Incompatible return type [7]: Expected `bool` but got `bytes`.",
    "message": " Expected `bool` but got `bytes`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 1149,
    "warning_line": "    return pubkey",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "  @staticmethod\n  def identity_key_from_address(onion_address: str) -> bool:\n    \"\"\"\n",
        "source_code_len": 85,
        "target_code": "  @staticmethod\n  def identity_key_from_address(onion_address: str) -> bytes:\n    \"\"\"\n",
        "target_code_len": 86,
        "diff_format": "@@ -1114,3 +1122,3 @@\n   @staticmethod\n-  def identity_key_from_address(onion_address: str) -> bool:\n+  def identity_key_from_address(onion_address: str) -> bytes:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "  <DED>@staticmethod\n  def identity_key_from_address(onion_address: str) -> bool:\n    <IND>",
        "target_code_with_indent": "  <DED>@staticmethod\n  def identity_key_from_address(onion_address: str) -> bytes:\n    <IND>"
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/hidden_service.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/hidden_service.py",
    "file_hunks_size": 53,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/hidden_service.py:1194:22 Incompatible parameter type [6]: Expected `bytes` for 1st positional only parameter to call `OuterLayer.__init__` but got `str`.",
    "message": " Expected `bytes` for 1st positional only parameter to call `OuterLayer.__init__` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1194,
    "warning_line": "    return OuterLayer(plaintext)"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/hidden_service.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/hidden_service.py",
    "file_hunks_size": 53,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/hidden_service.py:1231:4 Incompatible return type [7]: Expected `str` but got `bytes`.",
    "message": " Expected `str` but got `bytes`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 1231,
    "warning_line": "    return _descriptor_content(attr, exclude, ["
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/hidden_service.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/hidden_service.py",
    "file_hunks_size": 53,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/hidden_service.py:1231:46 Incompatible parameter type [6]: Expected `Sequence[str]` for 3rd positional only parameter to call `_descriptor_content` but got `typing.List[Tuple[str, Union[bytes, str]]]`.",
    "message": " Expected `Sequence[str]` for 3rd positional only parameter to call `_descriptor_content` but got `typing.List[Tuple[str, Union[bytes, str]]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1231,
    "warning_line": "    return _descriptor_content(attr, exclude, ["
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/hidden_service.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/hidden_service.py",
    "file_hunks_size": 53,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/hidden_service.py:1237:6 Incompatible parameter type [6]: Expected `Sequence[str]` for 4th positional only parameter to call `_descriptor_content` but got `Tuple[Tuple[str, bytes]]`.",
    "message": " Expected `Sequence[str]` for 4th positional only parameter to call `_descriptor_content` but got `Tuple[Tuple[str, bytes]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1237,
    "warning_line": "      ('encrypted', b'\\n' + inner_layer._encrypt(revision_counter, subcredential, blinded_key)),"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/hidden_service.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/hidden_service.py",
    "file_hunks_size": 53,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/hidden_service.py:1241:258 Incompatible variable type [9]: revision_counter is declared to have type `int` but is used as type `None`.",
    "message": " revision_counter is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 1241,
    "warning_line": "  def create(cls: Type['stem.descriptor.hidden_service.OuterLayer'], attr: Optional[Mapping[str, str]] = None, exclude: Sequence[str] = (), validate: bool = True, sign: bool = False, inner_layer: Optional['stem.descriptor.hidden_service.InnerLayer'] = None, revision_counter: int = None, authorized_clients: Optional[Sequence['stem.descriptor.hidden_service.AuthorizedClient']] = None, subcredential: bytes = None, blinded_key: bytes = None) -> 'stem.descriptor.hidden_service.OuterLayer':"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/hidden_service.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/hidden_service.py",
    "file_hunks_size": 53,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/hidden_service.py:1242:15 Incompatible parameter type [6]: Expected `bytes` for 1st positional only parameter to call `OuterLayer.__init__` but got `str`.",
    "message": " Expected `bytes` for 1st positional only parameter to call `OuterLayer.__init__` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1242,
    "warning_line": "    return cls(cls.content(attr, exclude, validate, sign, inner_layer, revision_counter, authorized_clients, subcredential, blinded_key), validate = validate)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "  @classmethod\n  def content(cls: Type['stem.descriptor.hidden_service.OuterLayer'], attr: Optional[Mapping[str, str]] = None, exclude: Sequence[str] = (), validate: bool = True, sign: bool = False, inner_layer: Optional['stem.descriptor.hidden_service.InnerLayer'] = None, revision_counter: Optional[int] = None, authorized_clients: Optional[Sequence['stem.descriptor.hidden_service.AuthorizedClient']] = None, subcredential: bytes = None, blinded_key: bytes = None) -> str:\n    try:\n",
        "source_code_len": 485,
        "target_code": "  @classmethod\n  def content(cls: Type['stem.descriptor.hidden_service.OuterLayer'], attr: Optional[Mapping[str, str]] = None, exclude: Sequence[str] = (), validate: bool = True, sign: bool = False, inner_layer: Optional['stem.descriptor.hidden_service.InnerLayer'] = None, revision_counter: Optional[int] = None, authorized_clients: Optional[Sequence['stem.descriptor.hidden_service.AuthorizedClient']] = None, subcredential: bytes = None, blinded_key: bytes = None) -> bytes:\n    try:\n",
        "target_code_len": 487,
        "diff_format": "@@ -1206,3 +1214,3 @@\n   @classmethod\n-  def content(cls: Type['stem.descriptor.hidden_service.OuterLayer'], attr: Optional[Mapping[str, str]] = None, exclude: Sequence[str] = (), validate: bool = True, sign: bool = False, inner_layer: Optional['stem.descriptor.hidden_service.InnerLayer'] = None, revision_counter: Optional[int] = None, authorized_clients: Optional[Sequence['stem.descriptor.hidden_service.AuthorizedClient']] = None, subcredential: bytes = None, blinded_key: bytes = None) -> str:\n+  def content(cls: Type['stem.descriptor.hidden_service.OuterLayer'], attr: Optional[Mapping[str, str]] = None, exclude: Sequence[str] = (), validate: bool = True, sign: bool = False, inner_layer: Optional['stem.descriptor.hidden_service.InnerLayer'] = None, revision_counter: Optional[int] = None, authorized_clients: Optional[Sequence['stem.descriptor.hidden_service.AuthorizedClient']] = None, subcredential: bytes = None, blinded_key: bytes = None) -> bytes:\n     try:\n",
        "source_code_with_indent": "  <DED>@classmethod\n  def content(cls: Type['stem.descriptor.hidden_service.OuterLayer'], attr: Optional[Mapping[str, str]] = None, exclude: Sequence[str] = (), validate: bool = True, sign: bool = False, inner_layer: Optional['stem.descriptor.hidden_service.InnerLayer'] = None, revision_counter: Optional[int] = None, authorized_clients: Optional[Sequence['stem.descriptor.hidden_service.AuthorizedClient']] = None, subcredential: bytes = None, blinded_key: bytes = None) -> str:\n    <IND>try:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "  <DED>@classmethod\n  def content(cls: Type['stem.descriptor.hidden_service.OuterLayer'], attr: Optional[Mapping[str, str]] = None, exclude: Sequence[str] = (), validate: bool = True, sign: bool = False, inner_layer: Optional['stem.descriptor.hidden_service.InnerLayer'] = None, revision_counter: Optional[int] = None, authorized_clients: Optional[Sequence['stem.descriptor.hidden_service.AuthorizedClient']] = None, subcredential: bytes = None, blinded_key: bytes = None) -> bytes:\n    <IND>try:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/hidden_service.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/hidden_service.py",
    "file_hunks_size": 53,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/hidden_service.py:1290:4 Incompatible return type [7]: Expected `bytes` but got `InnerLayer`.",
    "message": " Expected `bytes` but got `InnerLayer`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 1290,
    "warning_line": "    return InnerLayer(plaintext, validate = True, outer_layer = outer_layer)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "  @staticmethod\n  def _decrypt(outer_layer: 'stem.descriptor.hidden_service.OuterLayer', revision_counter: int, subcredential: bytes, blinded_key: bytes) -> bytes:\n    plaintext = _decrypt_layer(outer_layer.encrypted, b'hsdir-encrypted-data', revision_counter, subcredential, blinded_key)\n    return InnerLayer(plaintext, validate = True, outer_layer = outer_layer)\n\n  def _encrypt(self, revision_counter, subcredential, blinded_key):\n    # encrypt back into an outer layer's 'encrypted' field\n",
        "source_code_len": 494,
        "target_code": "  @staticmethod\n  def _decrypt(outer_layer: 'stem.descriptor.hidden_service.OuterLayer', revision_counter: int, subcredential: bytes, blinded_key: bytes) -> 'stem.descriptor.hidden_service.InnerLayer':\n    plaintext = _decrypt_layer(outer_layer.encrypted, b'hsdir-encrypted-data', revision_counter, subcredential, blinded_key)\n    return InnerLayer(stem.util.str_tools._to_bytes(plaintext), validate = True, outer_layer = outer_layer)\n\n  def _encrypt(self, revision_counter: int, subcredential: bytes, blinded_key: bytes) -> bytes:\n    # encrypt back into an outer layer's 'encrypted' field\n",
        "target_code_len": 591,
        "diff_format": "@@ -1287,7 +1295,7 @@\n   @staticmethod\n-  def _decrypt(outer_layer: 'stem.descriptor.hidden_service.OuterLayer', revision_counter: int, subcredential: bytes, blinded_key: bytes) -> bytes:\n+  def _decrypt(outer_layer: 'stem.descriptor.hidden_service.OuterLayer', revision_counter: int, subcredential: bytes, blinded_key: bytes) -> 'stem.descriptor.hidden_service.InnerLayer':\n     plaintext = _decrypt_layer(outer_layer.encrypted, b'hsdir-encrypted-data', revision_counter, subcredential, blinded_key)\n-    return InnerLayer(plaintext, validate = True, outer_layer = outer_layer)\n-\n-  def _encrypt(self, revision_counter, subcredential, blinded_key):\n+    return InnerLayer(stem.util.str_tools._to_bytes(plaintext), validate = True, outer_layer = outer_layer)\n+\n+  def _encrypt(self, revision_counter: int, subcredential: bytes, blinded_key: bytes) -> bytes:\n     # encrypt back into an outer layer's 'encrypted' field\n",
        "source_code_with_indent": "  @staticmethod\n  def _decrypt(outer_layer: 'stem.descriptor.hidden_service.OuterLayer', revision_counter: int, subcredential: bytes, blinded_key: bytes) -> bytes:\n    <IND>plaintext = _decrypt_layer(outer_layer.encrypted, b'hsdir-encrypted-data', revision_counter, subcredential, blinded_key)\n    return InnerLayer(plaintext, validate = True, outer_layer = outer_layer)\n\n  <DED>def _encrypt(self, revision_counter, subcredential, blinded_key):\n    # encrypt back into an outer layer's 'encrypted' field\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "  @staticmethod\n  def _decrypt(outer_layer: 'stem.descriptor.hidden_service.OuterLayer', revision_counter: int, subcredential: bytes, blinded_key: bytes) -> 'stem.descriptor.hidden_service.InnerLayer':\n    <IND>plaintext = _decrypt_layer(outer_layer.encrypted, b'hsdir-encrypted-data', revision_counter, subcredential, blinded_key)\n    return InnerLayer(stem.util.str_tools._to_bytes(plaintext), validate = True, outer_layer = outer_layer)\n\n  <DED>def _encrypt(self, revision_counter: int, subcredential: bytes, blinded_key: bytes) -> bytes:\n    # encrypt back into an outer layer's 'encrypted' field\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/hidden_service.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/hidden_service.py",
    "file_hunks_size": 53,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/hidden_service.py:1290:22 Incompatible parameter type [6]: Expected `bytes` for 1st positional only parameter to call `InnerLayer.__init__` but got `str`.",
    "message": " Expected `bytes` for 1st positional only parameter to call `InnerLayer.__init__` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1290,
    "warning_line": "    return InnerLayer(plaintext, validate = True, outer_layer = outer_layer)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "  @staticmethod\n  def _decrypt(outer_layer: 'stem.descriptor.hidden_service.OuterLayer', revision_counter: int, subcredential: bytes, blinded_key: bytes) -> bytes:\n    plaintext = _decrypt_layer(outer_layer.encrypted, b'hsdir-encrypted-data', revision_counter, subcredential, blinded_key)\n    return InnerLayer(plaintext, validate = True, outer_layer = outer_layer)\n\n  def _encrypt(self, revision_counter, subcredential, blinded_key):\n    # encrypt back into an outer layer's 'encrypted' field\n",
        "source_code_len": 494,
        "target_code": "  @staticmethod\n  def _decrypt(outer_layer: 'stem.descriptor.hidden_service.OuterLayer', revision_counter: int, subcredential: bytes, blinded_key: bytes) -> 'stem.descriptor.hidden_service.InnerLayer':\n    plaintext = _decrypt_layer(outer_layer.encrypted, b'hsdir-encrypted-data', revision_counter, subcredential, blinded_key)\n    return InnerLayer(stem.util.str_tools._to_bytes(plaintext), validate = True, outer_layer = outer_layer)\n\n  def _encrypt(self, revision_counter: int, subcredential: bytes, blinded_key: bytes) -> bytes:\n    # encrypt back into an outer layer's 'encrypted' field\n",
        "target_code_len": 591,
        "diff_format": "@@ -1287,7 +1295,7 @@\n   @staticmethod\n-  def _decrypt(outer_layer: 'stem.descriptor.hidden_service.OuterLayer', revision_counter: int, subcredential: bytes, blinded_key: bytes) -> bytes:\n+  def _decrypt(outer_layer: 'stem.descriptor.hidden_service.OuterLayer', revision_counter: int, subcredential: bytes, blinded_key: bytes) -> 'stem.descriptor.hidden_service.InnerLayer':\n     plaintext = _decrypt_layer(outer_layer.encrypted, b'hsdir-encrypted-data', revision_counter, subcredential, blinded_key)\n-    return InnerLayer(plaintext, validate = True, outer_layer = outer_layer)\n-\n-  def _encrypt(self, revision_counter, subcredential, blinded_key):\n+    return InnerLayer(stem.util.str_tools._to_bytes(plaintext), validate = True, outer_layer = outer_layer)\n+\n+  def _encrypt(self, revision_counter: int, subcredential: bytes, blinded_key: bytes) -> bytes:\n     # encrypt back into an outer layer's 'encrypted' field\n",
        "source_code_with_indent": "  @staticmethod\n  def _decrypt(outer_layer: 'stem.descriptor.hidden_service.OuterLayer', revision_counter: int, subcredential: bytes, blinded_key: bytes) -> bytes:\n    <IND>plaintext = _decrypt_layer(outer_layer.encrypted, b'hsdir-encrypted-data', revision_counter, subcredential, blinded_key)\n    return InnerLayer(plaintext, validate = True, outer_layer = outer_layer)\n\n  <DED>def _encrypt(self, revision_counter, subcredential, blinded_key):\n    # encrypt back into an outer layer's 'encrypted' field\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "  @staticmethod\n  def _decrypt(outer_layer: 'stem.descriptor.hidden_service.OuterLayer', revision_counter: int, subcredential: bytes, blinded_key: bytes) -> 'stem.descriptor.hidden_service.InnerLayer':\n    <IND>plaintext = _decrypt_layer(outer_layer.encrypted, b'hsdir-encrypted-data', revision_counter, subcredential, blinded_key)\n    return InnerLayer(stem.util.str_tools._to_bytes(plaintext), validate = True, outer_layer = outer_layer)\n\n  <DED>def _encrypt(self, revision_counter: int, subcredential: bytes, blinded_key: bytes) -> bytes:\n    # encrypt back into an outer layer's 'encrypted' field\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/hidden_service.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/hidden_service.py",
    "file_hunks_size": 53,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/hidden_service.py:1304:4 Incompatible return type [7]: Expected `str` but got `bytes`.",
    "message": " Expected `str` but got `bytes`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 1304,
    "warning_line": "    return _descriptor_content(attr, exclude, (",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "  @classmethod\n  def content(cls: Type['stem.descriptor.hidden_service.InnerLayer'], attr: Optional[Mapping[str, str]] = None, exclude: Sequence[str] = (), introduction_points: Optional[Sequence['stem.descriptor.hidden_service.IntroductionPointV3']] = None) -> str:\n    if introduction_points:\n",
        "source_code_len": 294,
        "target_code": "  @classmethod\n  def content(cls: Type['stem.descriptor.hidden_service.InnerLayer'], attr: Optional[Mapping[str, str]] = None, exclude: Sequence[str] = (), introduction_points: Optional[Sequence['stem.descriptor.hidden_service.IntroductionPointV3']] = None) -> bytes:\n    if introduction_points:\n",
        "target_code_len": 296,
        "diff_format": "@@ -1297,3 +1305,3 @@\n   @classmethod\n-  def content(cls: Type['stem.descriptor.hidden_service.InnerLayer'], attr: Optional[Mapping[str, str]] = None, exclude: Sequence[str] = (), introduction_points: Optional[Sequence['stem.descriptor.hidden_service.IntroductionPointV3']] = None) -> str:\n+  def content(cls: Type['stem.descriptor.hidden_service.InnerLayer'], attr: Optional[Mapping[str, str]] = None, exclude: Sequence[str] = (), introduction_points: Optional[Sequence['stem.descriptor.hidden_service.IntroductionPointV3']] = None) -> bytes:\n     if introduction_points:\n",
        "source_code_with_indent": "  <DED>@classmethod\n  def content(cls: Type['stem.descriptor.hidden_service.InnerLayer'], attr: Optional[Mapping[str, str]] = None, exclude: Sequence[str] = (), introduction_points: Optional[Sequence['stem.descriptor.hidden_service.IntroductionPointV3']] = None) -> str:\n    <IND>if introduction_points:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "  <DED>@classmethod\n  def content(cls: Type['stem.descriptor.hidden_service.InnerLayer'], attr: Optional[Mapping[str, str]] = None, exclude: Sequence[str] = (), introduction_points: Optional[Sequence['stem.descriptor.hidden_service.IntroductionPointV3']] = None) -> bytes:\n    <IND>if introduction_points:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/hidden_service.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/hidden_service.py",
    "file_hunks_size": 53,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/hidden_service.py:1305:6 Incompatible parameter type [6]: Expected `Sequence[str]` for 3rd positional only parameter to call `_descriptor_content` but got `Tuple[Tuple[str, str]]`.",
    "message": " Expected `Sequence[str]` for 3rd positional only parameter to call `_descriptor_content` but got `Tuple[Tuple[str, str]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1305,
    "warning_line": "      ('create2-formats', '2'),"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/hidden_service.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/hidden_service.py",
    "file_hunks_size": 53,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/hidden_service.py:1310:15 Incompatible parameter type [6]: Expected `bytes` for 1st positional only parameter to call `InnerLayer.__init__` but got `str`.",
    "message": " Expected `bytes` for 1st positional only parameter to call `InnerLayer.__init__` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1310,
    "warning_line": "    return cls(cls.content(attr, exclude, introduction_points), validate = validate)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "  @classmethod\n  def content(cls: Type['stem.descriptor.hidden_service.InnerLayer'], attr: Optional[Mapping[str, str]] = None, exclude: Sequence[str] = (), introduction_points: Optional[Sequence['stem.descriptor.hidden_service.IntroductionPointV3']] = None) -> str:\n    if introduction_points:\n",
        "source_code_len": 294,
        "target_code": "  @classmethod\n  def content(cls: Type['stem.descriptor.hidden_service.InnerLayer'], attr: Optional[Mapping[str, str]] = None, exclude: Sequence[str] = (), introduction_points: Optional[Sequence['stem.descriptor.hidden_service.IntroductionPointV3']] = None) -> bytes:\n    if introduction_points:\n",
        "target_code_len": 296,
        "diff_format": "@@ -1297,3 +1305,3 @@\n   @classmethod\n-  def content(cls: Type['stem.descriptor.hidden_service.InnerLayer'], attr: Optional[Mapping[str, str]] = None, exclude: Sequence[str] = (), introduction_points: Optional[Sequence['stem.descriptor.hidden_service.IntroductionPointV3']] = None) -> str:\n+  def content(cls: Type['stem.descriptor.hidden_service.InnerLayer'], attr: Optional[Mapping[str, str]] = None, exclude: Sequence[str] = (), introduction_points: Optional[Sequence['stem.descriptor.hidden_service.IntroductionPointV3']] = None) -> bytes:\n     if introduction_points:\n",
        "source_code_with_indent": "  <DED>@classmethod\n  def content(cls: Type['stem.descriptor.hidden_service.InnerLayer'], attr: Optional[Mapping[str, str]] = None, exclude: Sequence[str] = (), introduction_points: Optional[Sequence['stem.descriptor.hidden_service.IntroductionPointV3']] = None) -> str:\n    <IND>if introduction_points:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "  <DED>@classmethod\n  def content(cls: Type['stem.descriptor.hidden_service.InnerLayer'], attr: Optional[Mapping[str, str]] = None, exclude: Sequence[str] = (), introduction_points: Optional[Sequence['stem.descriptor.hidden_service.IntroductionPointV3']] = None) -> bytes:\n    <IND>if introduction_points:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/hidden_service.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/hidden_service.py",
    "file_hunks_size": 53,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/hidden_service.py:1341:50 Incompatible parameter type [6]: Expected `Union[Ed25519PrivateKey, Ed25519PublicKey, X25519PrivateKey, X25519PublicKey]` for 1st positional only parameter to call `stem.util._pubkey_bytes` but got `bytes`.",
    "message": " Expected `Union[Ed25519PrivateKey, Ed25519PublicKey, X25519PrivateKey, X25519PublicKey]` for 1st positional only parameter to call `stem.util._pubkey_bytes` but got `bytes`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1341,
    "warning_line": "  P = ed25519.decodepoint(stem.util._pubkey_bytes(identity_key))"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/microdescriptor.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/microdescriptor.py",
    "file_hunks_size": 10,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/microdescriptor.py:186:60 Incompatible parameter type [6]: Expected `typing.Callable[[str], str]` for 3rd parameter `func` to call `_parse_simple_line` but got `typing.Callable[[Named(v, typing.Any)], stem.exit_policy.MicroExitPolicy]`.",
    "message": " Expected `typing.Callable[[str], str]` for 3rd parameter `func` to call `_parse_simple_line` but got `typing.Callable[[Named(v, typing.Any)], stem.exit_policy.MicroExitPolicy]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 186,
    "warning_line": "_parse_p6_line = _parse_simple_line('p6', 'exit_policy_v6', func = lambda v: stem.exit_policy.MicroExitPolicy(v))"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/microdescriptor.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/microdescriptor.py",
    "file_hunks_size": 10,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/microdescriptor.py:250:4 Incompatible return type [7]: Expected `str` but got `bytes`.",
    "message": " Expected `str` but got `bytes`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 250,
    "warning_line": "    return _descriptor_content(attr, exclude, ("
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/microdescriptor.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/microdescriptor.py",
    "file_hunks_size": 10,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/microdescriptor.py:251:6 Incompatible parameter type [6]: Expected `Sequence[str]` for 3rd positional only parameter to call `_descriptor_content` but got `typing.Tuple[typing.Tuple[str, typing.Any]]`.",
    "message": " Expected `Sequence[str]` for 3rd positional only parameter to call `_descriptor_content` but got `typing.Tuple[typing.Tuple[str, typing.Any]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 251,
    "warning_line": "      ('onion-key', _random_crypto_blob('RSA PUBLIC KEY')),"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/microdescriptor.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/microdescriptor.py",
    "file_hunks_size": 10,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/microdescriptor.py:283:44 Incompatible parameter type [6]: Expected `bytes` for 1st positional only parameter to call `stem.descriptor._encode_digest` but got `hashlib._Hash`.",
    "message": " Expected `bytes` for 1st positional only parameter to call `stem.descriptor._encode_digest` but got `hashlib._Hash`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 283,
    "warning_line": "      return stem.descriptor._encode_digest(hashlib.sha1(self.get_bytes()), encoding)"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/microdescriptor.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/microdescriptor.py",
    "file_hunks_size": 10,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/microdescriptor.py:285:44 Incompatible parameter type [6]: Expected `bytes` for 1st positional only parameter to call `stem.descriptor._encode_digest` but got `hashlib._Hash`.",
    "message": " Expected `bytes` for 1st positional only parameter to call `stem.descriptor._encode_digest` but got `hashlib._Hash`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 285,
    "warning_line": "      return stem.descriptor._encode_digest(hashlib.sha256(self.get_bytes()), encoding)"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/networkstatus.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/networkstatus.py",
    "file_hunks_size": 58,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/networkstatus.py:334:4 Incompatible return type [7]: Expected `NetworkStatusDocument` but got `typing.Generator[NetworkStatusDocument, None, None]`.",
    "message": " Expected `NetworkStatusDocument` but got `typing.Generator[NetworkStatusDocument, None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 334,
    "warning_line": "    yield document_type(document_file.read(), validate, **kwargs)"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/networkstatus.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/networkstatus.py",
    "file_hunks_size": 58,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "stem/descriptor/networkstatus.py:340:4 Incompatible return type [7]: Expected `NetworkStatusDocument` but got `typing.Generator[NetworkStatusDocument, None, None]`.",
    "message": " Expected `NetworkStatusDocument` but got `typing.Generator[NetworkStatusDocument, None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 340,
    "warning_line": "    yield document_type(document_file.read(), validate, **kwargs)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "  else:\n    raise ValueError(\"Document type %i isn't recognized (only able to parse v2, v3, and bridge)\" % document_type)\n\n  if document_handler == DocumentHandler.DOCUMENT:\n    yield document_type(document_file.read(), validate, **kwargs)\n    return\n",
        "source_code_len": 251,
        "target_code": "  else:\n    raise ValueError(\"Document type %s isn't recognized (only able to parse v2, v3, and bridge)\" % document_type)\n\n  if document_handler == DocumentHandler.DOCUMENT:\n    yield document_type(document_file.read(), validate, **kwargs)  # type: ignore\n    return\n",
        "target_code_len": 267,
        "diff_format": "@@ -336,6 +339,6 @@\n   else:\n-    raise ValueError(\"Document type %i isn't recognized (only able to parse v2, v3, and bridge)\" % document_type)\n+    raise ValueError(\"Document type %s isn't recognized (only able to parse v2, v3, and bridge)\" % document_type)\n \n   if document_handler == DocumentHandler.DOCUMENT:\n-    yield document_type(document_file.read(), validate, **kwargs)\n+    yield document_type(document_file.read(), validate, **kwargs)  # type: ignore\n     return\n",
        "source_code_with_indent": "  <DED>else:\n    <IND>raise ValueError(\"Document type %i isn't recognized (only able to parse v2, v3, and bridge)\" % document_type)\n\n  <DED>if document_handler == DocumentHandler.DOCUMENT:\n    <IND>yield document_type(document_file.read(), validate, **kwargs)\n    return\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "  <DED>else:\n    <IND>raise ValueError(\"Document type %s isn't recognized (only able to parse v2, v3, and bridge)\" % document_type)\n\n  <DED>if document_handler == DocumentHandler.DOCUMENT:\n    <IND>yield document_type(document_file.read(), validate, **kwargs)  # type: ignore\n    return\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/networkstatus.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/networkstatus.py",
    "file_hunks_size": 58,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "stem/descriptor/networkstatus.py:358:4 Incompatible return type [7]: Expected `NetworkStatusDocument` but got `typing.Generator[NetworkStatusDocument, None, None]`.",
    "message": " Expected `NetworkStatusDocument` but got `typing.Generator[NetworkStatusDocument, None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 358,
    "warning_line": "    yield document_type(document_content, validate, **kwargs)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "  if document_handler == DocumentHandler.BARE_DOCUMENT:\n    yield document_type(document_content, validate, **kwargs)\n  elif document_handler == DocumentHandler.ENTRIES:\n",
        "source_code_len": 170,
        "target_code": "  if document_handler == DocumentHandler.BARE_DOCUMENT:\n    yield document_type(document_content, validate, **kwargs)  # type: ignore\n  elif document_handler == DocumentHandler.ENTRIES:\n",
        "target_code_len": 186,
        "diff_format": "@@ -357,3 +360,3 @@\n   if document_handler == DocumentHandler.BARE_DOCUMENT:\n-    yield document_type(document_content, validate, **kwargs)\n+    yield document_type(document_content, validate, **kwargs)  # type: ignore\n   elif document_handler == DocumentHandler.ENTRIES:\n",
        "source_code_with_indent": "  if document_handler == DocumentHandler.BARE_DOCUMENT:\n    <IND>yield document_type(document_content, validate, **kwargs)\n  <DED>elif document_handler == DocumentHandler.ENTRIES:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "  if document_handler == DocumentHandler.BARE_DOCUMENT:\n    <IND>yield document_type(document_content, validate, **kwargs)  # type: ignore\n  <DED>elif document_handler == DocumentHandler.ENTRIES:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/networkstatus.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/networkstatus.py",
    "file_hunks_size": 58,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/networkstatus.py:367:6 Incompatible parameter type [6]: Expected `Sequence[str]` for 7th parameter `extra_args` to call `stem.descriptor.router_status_entry._parse_file` but got `typing.Tuple[NetworkStatusDocument]`.",
    "message": " Expected `Sequence[str]` for 7th parameter `extra_args` to call `stem.descriptor.router_status_entry._parse_file` but got `typing.Tuple[NetworkStatusDocument]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 367,
    "warning_line": "      extra_args = (document_type(document_content, validate),),"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/networkstatus.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/networkstatus.py",
    "file_hunks_size": 58,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/networkstatus.py:372:6 Incompatible return type [7]: Expected `NetworkStatusDocument` but got `typing.Generator[stem.descriptor.router_status_entry.RouterStatusEntry, None, None]`.",
    "message": " Expected `NetworkStatusDocument` but got `typing.Generator[stem.descriptor.router_status_entry.RouterStatusEntry, None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 372,
    "warning_line": "      yield desc"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/networkstatus.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/networkstatus.py",
    "file_hunks_size": 58,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/networkstatus.py:401:57 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `KeyCertificate.__init__` but got `bytes`.",
    "message": " Expected `str` for 1st positional only parameter to call `KeyCertificate.__init__` but got `bytes`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 401,
    "warning_line": "      yield stem.descriptor.networkstatus.KeyCertificate(bytes.join(b'', keycert_content), validate = validate)"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/networkstatus.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/networkstatus.py",
    "file_hunks_size": 58,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/networkstatus.py:401:91 Incompatible parameter type [6]: Expected `str` for 2nd parameter `validate` to call `KeyCertificate.__init__` but got `bool`.",
    "message": " Expected `str` for 2nd parameter `validate` to call `KeyCertificate.__init__` but got `bool`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 401,
    "warning_line": "      yield stem.descriptor.networkstatus.KeyCertificate(bytes.join(b'', keycert_content), validate = validate)"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/networkstatus.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/networkstatus.py",
    "file_hunks_size": 58,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/networkstatus.py:426:60 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `DetachedSignature.__init__` but got `bytes`.",
    "message": " Expected `str` for 1st positional only parameter to call `DetachedSignature.__init__` but got `bytes`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 426,
    "warning_line": "      yield stem.descriptor.networkstatus.DetachedSignature(bytes.join(b'', detached_sig_content), validate = validate)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n  def __init__(self, raw_content: str, validate: bool = False) -> None:\n    super(DetachedSignature, self).__init__(raw_content, lazy_load = not validate)\n",
        "source_code_len": 156,
        "target_code": "\n  def __init__(self, raw_content: bytes, validate: bool = False) -> None:\n    super(DetachedSignature, self).__init__(raw_content, lazy_load = not validate)\n",
        "target_code_len": 158,
        "diff_format": "@@ -1910,3 +1916,3 @@\n \n-  def __init__(self, raw_content: str, validate: bool = False) -> None:\n+  def __init__(self, raw_content: bytes, validate: bool = False) -> None:\n     super(DetachedSignature, self).__init__(raw_content, lazy_load = not validate)\n",
        "source_code_with_indent": "\n  <DED>def __init__(self, raw_content: str, validate: bool = False) -> None:\n    <IND>super(DetachedSignature, self).__init__(raw_content, lazy_load = not validate)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n  <DED>def __init__(self, raw_content: bytes, validate: bool = False) -> None:\n    <IND>super(DetachedSignature, self).__init__(raw_content, lazy_load = not validate)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/networkstatus.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/networkstatus.py",
    "file_hunks_size": 58,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "stem/descriptor/networkstatus.py:456:6 Incompatible return type [7]: Expected `None` but got `str`.",
    "message": " Expected `None` but got `str`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 456,
    "warning_line": "      return stem.descriptor._encode_digest(hashlib.sha1(content), encoding)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n  def digest(self, hash_type: 'stem.descriptor.DigestHash' = DigestHash.SHA1, encoding: 'stem.descriptor.DigestEncoding' = DigestEncoding.HEX) -> None:\n    \"\"\"\n",
        "source_code_len": 161,
        "target_code": "\n  def digest(self, hash_type: 'stem.descriptor.DigestHash' = DigestHash.SHA1, encoding: 'stem.descriptor.DigestEncoding' = DigestEncoding.HEX) -> Union[str, 'hashlib._HASH']:  # type: ignore\n    \"\"\"\n",
        "target_code_len": 200,
        "diff_format": "@@ -435,3 +438,3 @@\n \n-  def digest(self, hash_type: 'stem.descriptor.DigestHash' = DigestHash.SHA1, encoding: 'stem.descriptor.DigestEncoding' = DigestEncoding.HEX) -> None:\n+  def digest(self, hash_type: 'stem.descriptor.DigestHash' = DigestHash.SHA1, encoding: 'stem.descriptor.DigestEncoding' = DigestEncoding.HEX) -> Union[str, 'hashlib._HASH']:  # type: ignore\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n  def digest(self, hash_type: 'stem.descriptor.DigestHash' = DigestHash.SHA1, encoding: 'stem.descriptor.DigestEncoding' = DigestEncoding.HEX) -> None:\n    <IND>",
        "target_code_with_indent": "\n  def digest(self, hash_type: 'stem.descriptor.DigestHash' = DigestHash.SHA1, encoding: 'stem.descriptor.DigestEncoding' = DigestEncoding.HEX) -> Union[str, 'hashlib._HASH']:  # type: ignore\n    <IND>"
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/networkstatus.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/networkstatus.py",
    "file_hunks_size": 58,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/networkstatus.py:456:44 Incompatible parameter type [6]: Expected `bytes` for 1st positional only parameter to call `stem.descriptor._encode_digest` but got `hashlib._Hash`.",
    "message": " Expected `bytes` for 1st positional only parameter to call `stem.descriptor._encode_digest` but got `hashlib._Hash`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 456,
    "warning_line": "      return stem.descriptor._encode_digest(hashlib.sha1(content), encoding)"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/networkstatus.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/networkstatus.py",
    "file_hunks_size": 58,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "stem/descriptor/networkstatus.py:458:6 Incompatible return type [7]: Expected `None` but got `str`.",
    "message": " Expected `None` but got `str`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 458,
    "warning_line": "      return stem.descriptor._encode_digest(hashlib.sha256(content), encoding)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n  def digest(self, hash_type: 'stem.descriptor.DigestHash' = DigestHash.SHA1, encoding: 'stem.descriptor.DigestEncoding' = DigestEncoding.HEX) -> None:\n    \"\"\"\n",
        "source_code_len": 161,
        "target_code": "\n  def digest(self, hash_type: 'stem.descriptor.DigestHash' = DigestHash.SHA1, encoding: 'stem.descriptor.DigestEncoding' = DigestEncoding.HEX) -> Union[str, 'hashlib._HASH']:  # type: ignore\n    \"\"\"\n",
        "target_code_len": 200,
        "diff_format": "@@ -435,3 +438,3 @@\n \n-  def digest(self, hash_type: 'stem.descriptor.DigestHash' = DigestHash.SHA1, encoding: 'stem.descriptor.DigestEncoding' = DigestEncoding.HEX) -> None:\n+  def digest(self, hash_type: 'stem.descriptor.DigestHash' = DigestHash.SHA1, encoding: 'stem.descriptor.DigestEncoding' = DigestEncoding.HEX) -> Union[str, 'hashlib._HASH']:  # type: ignore\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n  def digest(self, hash_type: 'stem.descriptor.DigestHash' = DigestHash.SHA1, encoding: 'stem.descriptor.DigestEncoding' = DigestEncoding.HEX) -> None:\n    <IND>",
        "target_code_with_indent": "\n  def digest(self, hash_type: 'stem.descriptor.DigestHash' = DigestHash.SHA1, encoding: 'stem.descriptor.DigestEncoding' = DigestEncoding.HEX) -> Union[str, 'hashlib._HASH']:  # type: ignore\n    <IND>"
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/networkstatus.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/networkstatus.py",
    "file_hunks_size": 58,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/networkstatus.py:458:44 Incompatible parameter type [6]: Expected `bytes` for 1st positional only parameter to call `stem.descriptor._encode_digest` but got `hashlib._Hash`.",
    "message": " Expected `bytes` for 1st positional only parameter to call `stem.descriptor._encode_digest` but got `hashlib._Hash`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 458,
    "warning_line": "      return stem.descriptor._encode_digest(hashlib.sha256(content), encoding)"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/networkstatus.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/networkstatus.py",
    "file_hunks_size": 58,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/networkstatus.py:604:4 Incompatible return type [7]: Expected `str` but got `bytes`.",
    "message": " Expected `str` but got `bytes`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 604,
    "warning_line": "    return _descriptor_content(attr, exclude, ("
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/networkstatus.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/networkstatus.py",
    "file_hunks_size": 58,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/networkstatus.py:605:6 Incompatible parameter type [6]: Expected `Sequence[str]` for 3rd positional only parameter to call `_descriptor_content` but got `typing.Tuple[typing.Tuple[str, str], typing.Tuple[str, str], typing.Tuple[str, typing.Any], typing.Tuple[str, str], typing.Tuple[str, typing.Any], typing.Tuple[str, typing.Any]]`.",
    "message": " Expected `Sequence[str]` for 3rd positional only parameter to call `_descriptor_content` but got `typing.Tuple[typing.Tuple[str, str], typing.Tuple[str, str], typing.Tuple[str, typing.Any], typing.Tuple[str, str], typing.Tuple[str, typing.Any], typing.Tuple[str, typing.Any]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 605,
    "warning_line": "      ('network-status-version', '2'),"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/networkstatus.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/networkstatus.py",
    "file_hunks_size": 58,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/networkstatus.py:612:6 Incompatible parameter type [6]: Expected `Sequence[str]` for 4th positional only parameter to call `_descriptor_content` but got `typing.Tuple[typing.Tuple[str, str]]`.",
    "message": " Expected `Sequence[str]` for 4th positional only parameter to call `_descriptor_content` but got `typing.Tuple[typing.Tuple[str, str]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 612,
    "warning_line": "      ('directory-signature', 'moria2' + _random_crypto_blob('SIGNATURE')),"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/networkstatus.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/networkstatus.py",
    "file_hunks_size": 58,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/networkstatus.py:632:6 Incompatible parameter type [6]: Expected `Sequence[str]` for 6th parameter `extra_args` to call `stem.descriptor.router_status_entry._parse_file` but got `typing.Tuple[NetworkStatusDocumentV2]`.",
    "message": " Expected `Sequence[str]` for 6th parameter `extra_args` to call `stem.descriptor.router_status_entry._parse_file` but got `typing.Tuple[NetworkStatusDocumentV2]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 632,
    "warning_line": "      extra_args = (self,),"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/networkstatus.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/networkstatus.py",
    "file_hunks_size": 58,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/networkstatus.py:751:11 Incompatible variable type [9]: entries is declared to have type `Dict[str, Sequence[str]]` but is used as type `typing.List[Variable[_T]]`.",
    "message": " entries is declared to have type `Dict[str, Sequence[str]]` but is used as type `typing.List[Variable[_T]]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 751,
    "warning_line": "    value, entries = _value(keyword, entries), []"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/networkstatus.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/networkstatus.py",
    "file_hunks_size": 58,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/networkstatus.py:934:82 Incompatible parameter type [6]: Expected `typing.Callable[[str], str]` for 3rd parameter `func` to call `_parse_simple_line` but got `typing.Callable[[Named(v, typing.Any)], typing.List[typing.Any]]`.",
    "message": " Expected `typing.Callable[[str], str]` for 3rd parameter `func` to call `_parse_simple_line` but got `typing.Callable[[Named(v, typing.Any)], typing.List[typing.Any]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 934,
    "warning_line": "_parse_header_known_flags_line = _parse_simple_line('known-flags', 'known_flags', func = lambda v: [entry for entry in v.split(' ') if entry])"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/networkstatus.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/networkstatus.py",
    "file_hunks_size": 58,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/networkstatus.py:935:100 Incompatible parameter type [6]: Expected `typing.Callable[[str], str]` for 3rd parameter `func` to call `_parse_simple_line` but got `typing.Callable[[Named(v, typing.Any)], Dict[str, int]]`.",
    "message": " Expected `typing.Callable[[str], str]` for 3rd parameter `func` to call `_parse_simple_line` but got `typing.Callable[[Named(v, typing.Any)], Dict[str, int]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 935,
    "warning_line": "_parse_footer_bandwidth_weights_line = _parse_simple_line('bandwidth-weights', 'bandwidth_weights', func = lambda v: _parse_int_mappings('bandwidth-weights', v, True))"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/networkstatus.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/networkstatus.py",
    "file_hunks_size": 58,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/networkstatus.py:1120:6 Incompatible parameter type [6]: Expected `Sequence[str]` for 3rd positional only parameter to call `_descriptor_content` but got `typing.Tuple[typing.Tuple[str, str], typing.Tuple[str, str], typing.Tuple[str, None], typing.Tuple[str, None], typing.Tuple[str, None], typing.Tuple[str, typing.Any], typing.Tuple[str, typing.Any], typing.Tuple[str, typing.Any], typing.Tuple[str, str], typing.Tuple[str, None], typing.Tuple[str, None], typing.Tuple[str, None], typing.Tuple[str, str], typing.Tuple[str, None]]`.",
    "message": " Expected `Sequence[str]` for 3rd positional only parameter to call `_descriptor_content` but got `typing.Tuple[typing.Tuple[str, str], typing.Tuple[str, str], typing.Tuple[str, None], typing.Tuple[str, None], typing.Tuple[str, None], typing.Tuple[str, typing.Any], typing.Tuple[str, typing.Any], typing.Tuple[str, typing.Any], typing.Tuple[str, str], typing.Tuple[str, None], typing.Tuple[str, None], typing.Tuple[str, None], typing.Tuple[str, str], typing.Tuple[str, None]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1120,
    "warning_line": "      ('network-status-version', '3'),"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/networkstatus.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/networkstatus.py",
    "file_hunks_size": 58,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/networkstatus.py:1135:6 Incompatible parameter type [6]: Expected `Sequence[str]` for 4th positional only parameter to call `_descriptor_content` but got `typing.Tuple[typing.Tuple[str, str], typing.Tuple[str, None], typing.Tuple[str, str]]`.",
    "message": " Expected `Sequence[str]` for 4th positional only parameter to call `_descriptor_content` but got `typing.Tuple[typing.Tuple[str, str], typing.Tuple[str, None], typing.Tuple[str, str]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1135,
    "warning_line": "      ('directory-footer', ''),"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/networkstatus.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/networkstatus.py",
    "file_hunks_size": 58,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/networkstatus.py:1170:4 Incompatible return type [7]: Expected `str` but got `bytes`.",
    "message": " Expected `str` but got `bytes`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 1170,
    "warning_line": "    return desc_content",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "  @classmethod\n  def content(cls: Type['stem.descriptor.networkstatus.NetworkStatusDocumentV3'], attr: Optional[Mapping[str, str]] = None, exclude: Sequence[str] = (), authorities: Optional[Sequence['stem.descriptor.networkstatus.DirectoryAuthority']] = None, routers: Optional[Sequence['stem.descriptor.router_status_entry.RouterStatusEntryV3']] = None) -> str:\n    attr = {} if attr is None else dict(attr)\n",
        "source_code_len": 409,
        "target_code": "  @classmethod\n  def content(cls: Type['stem.descriptor.networkstatus.NetworkStatusDocumentV3'], attr: Optional[Mapping[str, str]] = None, exclude: Sequence[str] = (), authorities: Optional[Sequence['stem.descriptor.networkstatus.DirectoryAuthority']] = None, routers: Optional[Sequence['stem.descriptor.router_status_entry.RouterStatusEntryV3']] = None) -> bytes:\n    attr = {} if attr is None else dict(attr)\n",
        "target_code_len": 411,
        "diff_format": "@@ -1100,3 +1103,3 @@\n   @classmethod\n-  def content(cls: Type['stem.descriptor.networkstatus.NetworkStatusDocumentV3'], attr: Optional[Mapping[str, str]] = None, exclude: Sequence[str] = (), authorities: Optional[Sequence['stem.descriptor.networkstatus.DirectoryAuthority']] = None, routers: Optional[Sequence['stem.descriptor.router_status_entry.RouterStatusEntryV3']] = None) -> str:\n+  def content(cls: Type['stem.descriptor.networkstatus.NetworkStatusDocumentV3'], attr: Optional[Mapping[str, str]] = None, exclude: Sequence[str] = (), authorities: Optional[Sequence['stem.descriptor.networkstatus.DirectoryAuthority']] = None, routers: Optional[Sequence['stem.descriptor.router_status_entry.RouterStatusEntryV3']] = None) -> bytes:\n     attr = {} if attr is None else dict(attr)\n",
        "source_code_with_indent": "  @classmethod\n  def content(cls: Type['stem.descriptor.networkstatus.NetworkStatusDocumentV3'], attr: Optional[Mapping[str, str]] = None, exclude: Sequence[str] = (), authorities: Optional[Sequence['stem.descriptor.networkstatus.DirectoryAuthority']] = None, routers: Optional[Sequence['stem.descriptor.router_status_entry.RouterStatusEntryV3']] = None) -> str:\n    <IND>attr = {} if attr is None else dict(attr)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "  @classmethod\n  def content(cls: Type['stem.descriptor.networkstatus.NetworkStatusDocumentV3'], attr: Optional[Mapping[str, str]] = None, exclude: Sequence[str] = (), authorities: Optional[Sequence['stem.descriptor.networkstatus.DirectoryAuthority']] = None, routers: Optional[Sequence['stem.descriptor.router_status_entry.RouterStatusEntryV3']] = None) -> bytes:\n    <IND>attr = {} if attr is None else dict(attr)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/networkstatus.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/networkstatus.py",
    "file_hunks_size": 58,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/networkstatus.py:1189:31 Incompatible parameter type [6]: Expected `bytes` for 1st positional only parameter to call `io.BytesIO.__init__` but got `str`.",
    "message": " Expected `bytes` for 1st positional only parameter to call `io.BytesIO.__init__` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1189,
    "warning_line": "    document_file = io.BytesIO(raw_content)"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/networkstatus.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/networkstatus.py",
    "file_hunks_size": 58,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "stem/descriptor/networkstatus.py:1197:6 Incompatible parameter type [6]: Expected `Type[stem.descriptor.router_status_entry.RouterStatusEntry]` for 3rd parameter `entry_class` to call `stem.descriptor.router_status_entry._parse_file` but got `Type[DirectoryAuthority]`.",
    "message": " Expected `Type[stem.descriptor.router_status_entry.RouterStatusEntry]` for 3rd parameter `entry_class` to call `stem.descriptor.router_status_entry._parse_file` but got `Type[DirectoryAuthority]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1197,
    "warning_line": "      entry_class = DirectoryAuthority,",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "      validate,\n      entry_class = DirectoryAuthority,\n      entry_keyword = AUTH_START,\n",
        "source_code_len": 90,
        "target_code": "      validate,\n      entry_class = DirectoryAuthority,  # type: ignore # TODO: move to another parse_file()\n      entry_keyword = AUTH_START,\n",
        "target_code_len": 143,
        "diff_format": "@@ -1196,3 +1201,3 @@\n       validate,\n-      entry_class = DirectoryAuthority,\n+      entry_class = DirectoryAuthority,  # type: ignore # TODO: move to another parse_file()\n       entry_keyword = AUTH_START,\n",
        "source_code_with_indent": "      validate,\n      entry_class = DirectoryAuthority,\n      entry_keyword = AUTH_START,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "      validate,\n      entry_class = DirectoryAuthority,  # type: ignore # TODO: move to another parse_file()\n      entry_keyword = AUTH_START,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/networkstatus.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/networkstatus.py",
    "file_hunks_size": 58,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/networkstatus.py:1212:6 Incompatible parameter type [6]: Expected `Sequence[str]` for 6th parameter `extra_args` to call `stem.descriptor.router_status_entry._parse_file` but got `typing.Tuple[NetworkStatusDocumentV3]`.",
    "message": " Expected `Sequence[str]` for 6th parameter `extra_args` to call `stem.descriptor.router_status_entry._parse_file` but got `typing.Tuple[NetworkStatusDocumentV3]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1212,
    "warning_line": "      extra_args = (self,),"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/networkstatus.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/networkstatus.py",
    "file_hunks_size": 58,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/networkstatus.py:1340:62 Incompatible parameter type [6]: Expected `Sequence[str]` for 3rd positional only parameter to call `_check_for_missing_and_disallowed_fields` but got `typing.Tuple[typing.Tuple[str, bool, bool, bool], typing.Tuple[str, bool, bool, bool], typing.Tuple[str, bool, bool, bool], typing.Tuple[str, bool, bool, bool], typing.Tuple[str, bool, bool, bool], typing.Tuple[str, bool, bool, bool], typing.Tuple[str, bool, bool, bool], typing.Tuple[str, bool, bool, bool], typing.Tuple[str, bool, bool, bool], typing.Tuple[str, bool, bool, bool], typing.Tuple[str, bool, bool, bool], typing.Tuple[str, bool, bool, bool], typing.Tuple[str, bool, bool, bool], typing.Tuple[str, bool, bool, bool], typing.Tuple[str, bool, bool, bool], typing.Tuple[str, bool, bool, bool], typing.Tuple[str, bool, bool, bool], typing.Tuple[str, bool, bool, bool], typing.Tuple[str, bool, bool, bool], typing.Tuple[str, bool, bool, bool], typing.Tuple[str, bool, bool, bool], typing.Tuple[str, bool, bool, bool], typing.Tuple[str, bool, bool, bool], typing.Tuple[str, bool, bool, bool], typing.Tuple[str, bool, bool, bool]]`.",
    "message": " Expected `Sequence[str]` for 3rd positional only parameter to call `_check_for_missing_and_disallowed_fields` but got `typing.Tuple[typing.Tuple[str, bool, bool, bool], typing.Tuple[str, bool, bool, bool], typing.Tuple[str, bool, bool, bool], typing.Tuple[str, bool, bool, bool], typing.Tuple[str, bool, bool, bool], typing.Tuple[str, bool, bool, bool], typing.Tuple[str, bool, bool, bool], typing.Tuple[str, bool, bool, bool], typing.Tuple[str, bool, bool, bool], typing.Tuple[str, bool, bool, bool], typing.Tuple[str, bool, bool, bool], typing.Tuple[str, bool, bool, bool], typing.Tuple[str, bool, bool, bool], typing.Tuple[str, bool, bool, bool], typing.Tuple[str, bool, bool, bool], typing.Tuple[str, bool, bool, bool], typing.Tuple[str, bool, bool, bool], typing.Tuple[str, bool, bool, bool], typing.Tuple[str, bool, bool, bool], typing.Tuple[str, bool, bool, bool], typing.Tuple[str, bool, bool, bool], typing.Tuple[str, bool, bool, bool], typing.Tuple[str, bool, bool, bool], typing.Tuple[str, bool, bool, bool], typing.Tuple[str, bool, bool, bool]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1340,
    "warning_line": "      _check_for_missing_and_disallowed_fields(self, entries, HEADER_STATUS_DOCUMENT_FIELDS)"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/networkstatus.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/networkstatus.py",
    "file_hunks_size": 58,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/networkstatus.py:1379:64 Incompatible parameter type [6]: Expected `Sequence[str]` for 3rd positional only parameter to call `_check_for_missing_and_disallowed_fields` but got `typing.Tuple[typing.Tuple[str, bool, bool, bool], typing.Tuple[str, bool, bool, bool], typing.Tuple[str, bool, bool, bool]]`.",
    "message": " Expected `Sequence[str]` for 3rd positional only parameter to call `_check_for_missing_and_disallowed_fields` but got `typing.Tuple[typing.Tuple[str, bool, bool, bool], typing.Tuple[str, bool, bool, bool], typing.Tuple[str, bool, bool, bool]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1379,
    "warning_line": "        _check_for_missing_and_disallowed_fields(self, entries, FOOTER_STATUS_DOCUMENT_FIELDS)"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/networkstatus.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/networkstatus.py",
    "file_hunks_size": 58,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/networkstatus.py:1594:6 Incompatible parameter type [6]: Expected `Sequence[str]` for 3rd positional only parameter to call `_descriptor_content` but got `typing.Tuple[typing.Tuple[str, str], typing.Tuple[str, str]]`.",
    "message": " Expected `Sequence[str]` for 3rd positional only parameter to call `_descriptor_content` but got `typing.Tuple[typing.Tuple[str, str], typing.Tuple[str, str]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1594,
    "warning_line": "      ('dir-source', '%s %s no.place.com %s 9030 9090' % (_random_nickname(), _random_fingerprint(), _random_ipv4_address())),"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/networkstatus.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/networkstatus.py",
    "file_hunks_size": 58,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/networkstatus.py:1599:25 Unsupported operand [58]: `+` is not supported for operand types `bytes` and `str`.",
    "message": " `+` is not supported for operand types `bytes` and `str`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 1599,
    "warning_line": "      content += b'\\n' + KeyCertificate.content()",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "  @classmethod\n  def content(cls: Type['stem.descriptor.networkstatus.KeyCertificate'], attr: Optional[Mapping[str, str]] = None, exclude: Sequence[str] = ()) -> str:\n    return _descriptor_content(attr, exclude, (\n",
        "source_code_len": 215,
        "target_code": "  @classmethod\n  def content(cls: Type['stem.descriptor.networkstatus.KeyCertificate'], attr: Optional[Mapping[str, str]] = None, exclude: Sequence[str] = ()) -> bytes:\n    return _descriptor_content(attr, exclude, (\n",
        "target_code_len": 217,
        "diff_format": "@@ -1756,3 +1762,3 @@\n   @classmethod\n-  def content(cls: Type['stem.descriptor.networkstatus.KeyCertificate'], attr: Optional[Mapping[str, str]] = None, exclude: Sequence[str] = ()) -> str:\n+  def content(cls: Type['stem.descriptor.networkstatus.KeyCertificate'], attr: Optional[Mapping[str, str]] = None, exclude: Sequence[str] = ()) -> bytes:\n     return _descriptor_content(attr, exclude, (\n",
        "source_code_with_indent": "  @classmethod\n  def content(cls: Type['stem.descriptor.networkstatus.KeyCertificate'], attr: Optional[Mapping[str, str]] = None, exclude: Sequence[str] = ()) -> str:\n    <IND>return _descriptor_content(attr, exclude, (\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "  @classmethod\n  def content(cls: Type['stem.descriptor.networkstatus.KeyCertificate'], attr: Optional[Mapping[str, str]] = None, exclude: Sequence[str] = ()) -> bytes:\n    <IND>return _descriptor_content(attr, exclude, (\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/networkstatus.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/networkstatus.py",
    "file_hunks_size": 58,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/networkstatus.py:1601:4 Incompatible return type [7]: Expected `str` but got `bytes`.",
    "message": " Expected `str` but got `bytes`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 1601,
    "warning_line": "    return content"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/networkstatus.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/networkstatus.py",
    "file_hunks_size": 58,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/networkstatus.py:1626:67 Incompatible parameter type [6]: Expected `str` for 2nd positional only parameter to call `KeyCertificate.__init__` but got `bool`.",
    "message": " Expected `str` for 2nd positional only parameter to call `KeyCertificate.__init__` but got `bool`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1626,
    "warning_line": "      self.key_certificate = KeyCertificate(content[key_div + 1:], validate)"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/networkstatus.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/networkstatus.py",
    "file_hunks_size": 58,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/networkstatus.py:1758:4 Incompatible return type [7]: Expected `str` but got `bytes`.",
    "message": " Expected `str` but got `bytes`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 1758,
    "warning_line": "    return _descriptor_content(attr, exclude, ("
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/networkstatus.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/networkstatus.py",
    "file_hunks_size": 58,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/networkstatus.py:1759:6 Incompatible parameter type [6]: Expected `Sequence[str]` for 3rd positional only parameter to call `_descriptor_content` but got `typing.Tuple[typing.Tuple[str, str], typing.Tuple[str, typing.Any], typing.Tuple[str, typing.Any], typing.Tuple[str, typing.Any], typing.Tuple[str, typing.Any], typing.Tuple[str, typing.Any]]`.",
    "message": " Expected `Sequence[str]` for 3rd positional only parameter to call `_descriptor_content` but got `typing.Tuple[typing.Tuple[str, str], typing.Tuple[str, typing.Any], typing.Tuple[str, typing.Any], typing.Tuple[str, typing.Any], typing.Tuple[str, typing.Any], typing.Tuple[str, typing.Any]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1759,
    "warning_line": "      ('dir-key-certificate-version', '3'),"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/networkstatus.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/networkstatus.py",
    "file_hunks_size": 58,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/networkstatus.py:1766:6 Incompatible parameter type [6]: Expected `Sequence[str]` for 4th positional only parameter to call `_descriptor_content` but got `typing.Tuple[typing.Tuple[str, typing.Any]]`.",
    "message": " Expected `Sequence[str]` for 4th positional only parameter to call `_descriptor_content` but got `typing.Tuple[typing.Tuple[str, typing.Any]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1766,
    "warning_line": "      ('dir-key-certification', _random_crypto_blob('SIGNATURE')),"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/networkstatus.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/networkstatus.py",
    "file_hunks_size": 58,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/networkstatus.py:1769:39 Incompatible variable type [9]: validate is declared to have type `str` but is used as type `bool`.",
    "message": " validate is declared to have type `str` but is used as type `bool`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 1769,
    "warning_line": "  def __init__(self, raw_content: str, validate: str = False) -> None:"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/networkstatus.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/networkstatus.py",
    "file_hunks_size": 58,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/networkstatus.py:1904:4 Incompatible return type [7]: Expected `str` but got `bytes`.",
    "message": " Expected `str` but got `bytes`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 1904,
    "warning_line": "    return _descriptor_content(attr, exclude, ("
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/networkstatus.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/networkstatus.py",
    "file_hunks_size": 58,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/networkstatus.py:1905:6 Incompatible parameter type [6]: Expected `Sequence[str]` for 3rd positional only parameter to call `_descriptor_content` but got `typing.Tuple[typing.Tuple[str, str], typing.Tuple[str, typing.Any], typing.Tuple[str, typing.Any], typing.Tuple[str, typing.Any]]`.",
    "message": " Expected `Sequence[str]` for 3rd positional only parameter to call `_descriptor_content` but got `typing.Tuple[typing.Tuple[str, str], typing.Tuple[str, typing.Any], typing.Tuple[str, typing.Any], typing.Tuple[str, typing.Any]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1905,
    "warning_line": "      ('consensus-digest', '6D3CC0EFA408F228410A4A8145E1B0BB0670E442'),"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/networkstatus.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/networkstatus.py",
    "file_hunks_size": 58,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/networkstatus.py:1951:31 Incompatible parameter type [6]: Expected `bytes` for 1st positional only parameter to call `io.BytesIO.__init__` but got `str`.",
    "message": " Expected `bytes` for 1st positional only parameter to call `io.BytesIO.__init__` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1951,
    "warning_line": "    document_file = io.BytesIO(raw_content)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n  def __init__(self, raw_content: str, validate: bool = False) -> None:\n    super(BridgeNetworkStatusDocument, self).__init__(raw_content)\n",
        "source_code_len": 140,
        "target_code": "\n  def __init__(self, raw_content: bytes, validate: bool = False) -> None:\n    super(BridgeNetworkStatusDocument, self).__init__(raw_content)\n",
        "target_code_len": 142,
        "diff_format": "@@ -1945,3 +1951,3 @@\n \n-  def __init__(self, raw_content: str, validate: bool = False) -> None:\n+  def __init__(self, raw_content: bytes, validate: bool = False) -> None:\n     super(BridgeNetworkStatusDocument, self).__init__(raw_content)\n",
        "source_code_with_indent": "\n  def __init__(self, raw_content: str, validate: bool = False) -> None:\n    <IND>super(BridgeNetworkStatusDocument, self).__init__(raw_content)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n  def __init__(self, raw_content: bytes, validate: bool = False) -> None:\n    <IND>super(BridgeNetworkStatusDocument, self).__init__(raw_content)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/networkstatus.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/networkstatus.py",
    "file_hunks_size": 58,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/networkstatus.py:1969:6 Incompatible parameter type [6]: Expected `Sequence[str]` for 4th parameter `extra_args` to call `stem.descriptor.router_status_entry._parse_file` but got `typing.Tuple[BridgeNetworkStatusDocument]`.",
    "message": " Expected `Sequence[str]` for 4th parameter `extra_args` to call `stem.descriptor.router_status_entry._parse_file` but got `typing.Tuple[BridgeNetworkStatusDocument]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1969,
    "warning_line": "      extra_args = (self,),"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/router_status_entry.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/router_status_entry.py",
    "file_hunks_size": 27,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/router_status_entry.py:49:159 Incompatible variable type [9]: start_position is declared to have type `int` but is used as type `None`.",
    "message": " start_position is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 49,
    "warning_line": "def _parse_file(document_file: BinaryIO, validate: bool, entry_class: Type['stem.descriptor.router_status_entry.RouterStatusEntry'], entry_keyword: str = 'r', start_position: int = None, end_position: int = None, section_end_keywords: Sequence[str] = (), extra_args: Sequence[str] = ()) -> Iterator['stem.descriptor.router_status_entry.RouterStatusEntry']:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _parse_file(document_file: BinaryIO, validate: bool, entry_class: Type['stem.descriptor.router_status_entry.RouterStatusEntry'], entry_keyword: str = 'r', start_position: int = None, end_position: int = None, section_end_keywords: Sequence[str] = (), extra_args: Sequence[str] = ()) -> Iterator['stem.descriptor.router_status_entry.RouterStatusEntry']:\n  \"\"\"\n",
        "source_code_len": 364,
        "target_code": "\ndef _parse_file(document_file: BinaryIO, validate: bool, entry_class: Type['stem.descriptor.router_status_entry.RouterStatusEntry'], entry_keyword: str = 'r', start_position: Optional[int] = None, end_position: Optional[int] = None, section_end_keywords: Tuple[str, ...] = (), extra_args: Sequence[Any] = ()) -> Iterator['stem.descriptor.router_status_entry.RouterStatusEntry']:\n  \"\"\"\n",
        "target_code_len": 386,
        "diff_format": "@@ -48,3 +49,3 @@\n \n-def _parse_file(document_file: BinaryIO, validate: bool, entry_class: Type['stem.descriptor.router_status_entry.RouterStatusEntry'], entry_keyword: str = 'r', start_position: int = None, end_position: int = None, section_end_keywords: Sequence[str] = (), extra_args: Sequence[str] = ()) -> Iterator['stem.descriptor.router_status_entry.RouterStatusEntry']:\n+def _parse_file(document_file: BinaryIO, validate: bool, entry_class: Type['stem.descriptor.router_status_entry.RouterStatusEntry'], entry_keyword: str = 'r', start_position: Optional[int] = None, end_position: Optional[int] = None, section_end_keywords: Tuple[str, ...] = (), extra_args: Sequence[Any] = ()) -> Iterator['stem.descriptor.router_status_entry.RouterStatusEntry']:\n   \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\ndef _parse_file(document_file: BinaryIO, validate: bool, entry_class: Type['stem.descriptor.router_status_entry.RouterStatusEntry'], entry_keyword: str = 'r', start_position: int = None, end_position: int = None, section_end_keywords: Sequence[str] = (), extra_args: Sequence[str] = ()) -> Iterator['stem.descriptor.router_status_entry.RouterStatusEntry']:\n  <IND>",
        "target_code_with_indent": "\ndef _parse_file(document_file: BinaryIO, validate: bool, entry_class: Type['stem.descriptor.router_status_entry.RouterStatusEntry'], entry_keyword: str = 'r', start_position: Optional[int] = None, end_position: Optional[int] = None, section_end_keywords: Tuple[str, ...] = (), extra_args: Sequence[Any] = ()) -> Iterator['stem.descriptor.router_status_entry.RouterStatusEntry']:\n  <IND>"
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/router_status_entry.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/router_status_entry.py",
    "file_hunks_size": 27,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/router_status_entry.py:49:187 Incompatible variable type [9]: end_position is declared to have type `int` but is used as type `None`.",
    "message": " end_position is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 49,
    "warning_line": "def _parse_file(document_file: BinaryIO, validate: bool, entry_class: Type['stem.descriptor.router_status_entry.RouterStatusEntry'], entry_keyword: str = 'r', start_position: int = None, end_position: int = None, section_end_keywords: Sequence[str] = (), extra_args: Sequence[str] = ()) -> Iterator['stem.descriptor.router_status_entry.RouterStatusEntry']:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _parse_file(document_file: BinaryIO, validate: bool, entry_class: Type['stem.descriptor.router_status_entry.RouterStatusEntry'], entry_keyword: str = 'r', start_position: int = None, end_position: int = None, section_end_keywords: Sequence[str] = (), extra_args: Sequence[str] = ()) -> Iterator['stem.descriptor.router_status_entry.RouterStatusEntry']:\n  \"\"\"\n",
        "source_code_len": 364,
        "target_code": "\ndef _parse_file(document_file: BinaryIO, validate: bool, entry_class: Type['stem.descriptor.router_status_entry.RouterStatusEntry'], entry_keyword: str = 'r', start_position: Optional[int] = None, end_position: Optional[int] = None, section_end_keywords: Tuple[str, ...] = (), extra_args: Sequence[Any] = ()) -> Iterator['stem.descriptor.router_status_entry.RouterStatusEntry']:\n  \"\"\"\n",
        "target_code_len": 386,
        "diff_format": "@@ -48,3 +49,3 @@\n \n-def _parse_file(document_file: BinaryIO, validate: bool, entry_class: Type['stem.descriptor.router_status_entry.RouterStatusEntry'], entry_keyword: str = 'r', start_position: int = None, end_position: int = None, section_end_keywords: Sequence[str] = (), extra_args: Sequence[str] = ()) -> Iterator['stem.descriptor.router_status_entry.RouterStatusEntry']:\n+def _parse_file(document_file: BinaryIO, validate: bool, entry_class: Type['stem.descriptor.router_status_entry.RouterStatusEntry'], entry_keyword: str = 'r', start_position: Optional[int] = None, end_position: Optional[int] = None, section_end_keywords: Tuple[str, ...] = (), extra_args: Sequence[Any] = ()) -> Iterator['stem.descriptor.router_status_entry.RouterStatusEntry']:\n   \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\ndef _parse_file(document_file: BinaryIO, validate: bool, entry_class: Type['stem.descriptor.router_status_entry.RouterStatusEntry'], entry_keyword: str = 'r', start_position: int = None, end_position: int = None, section_end_keywords: Sequence[str] = (), extra_args: Sequence[str] = ()) -> Iterator['stem.descriptor.router_status_entry.RouterStatusEntry']:\n  <IND>",
        "target_code_with_indent": "\ndef _parse_file(document_file: BinaryIO, validate: bool, entry_class: Type['stem.descriptor.router_status_entry.RouterStatusEntry'], entry_keyword: str = 'r', start_position: Optional[int] = None, end_position: Optional[int] = None, section_end_keywords: Tuple[str, ...] = (), extra_args: Sequence[Any] = ()) -> Iterator['stem.descriptor.router_status_entry.RouterStatusEntry']:\n  <IND>"
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/router_status_entry.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/router_status_entry.py",
    "file_hunks_size": 27,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/router_status_entry.py:97:25 Unsupported operand [58]: `+` is not supported for operand types `Tuple[str]` and `Sequence[str]`.",
    "message": " `+` is not supported for operand types `Tuple[str]` and `Sequence[str]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 97,
    "warning_line": "      (entry_keyword,) + section_end_keywords,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _parse_file(document_file: BinaryIO, validate: bool, entry_class: Type['stem.descriptor.router_status_entry.RouterStatusEntry'], entry_keyword: str = 'r', start_position: int = None, end_position: int = None, section_end_keywords: Sequence[str] = (), extra_args: Sequence[str] = ()) -> Iterator['stem.descriptor.router_status_entry.RouterStatusEntry']:\n  \"\"\"\n",
        "source_code_len": 364,
        "target_code": "\ndef _parse_file(document_file: BinaryIO, validate: bool, entry_class: Type['stem.descriptor.router_status_entry.RouterStatusEntry'], entry_keyword: str = 'r', start_position: Optional[int] = None, end_position: Optional[int] = None, section_end_keywords: Tuple[str, ...] = (), extra_args: Sequence[Any] = ()) -> Iterator['stem.descriptor.router_status_entry.RouterStatusEntry']:\n  \"\"\"\n",
        "target_code_len": 386,
        "diff_format": "@@ -48,3 +49,3 @@\n \n-def _parse_file(document_file: BinaryIO, validate: bool, entry_class: Type['stem.descriptor.router_status_entry.RouterStatusEntry'], entry_keyword: str = 'r', start_position: int = None, end_position: int = None, section_end_keywords: Sequence[str] = (), extra_args: Sequence[str] = ()) -> Iterator['stem.descriptor.router_status_entry.RouterStatusEntry']:\n+def _parse_file(document_file: BinaryIO, validate: bool, entry_class: Type['stem.descriptor.router_status_entry.RouterStatusEntry'], entry_keyword: str = 'r', start_position: Optional[int] = None, end_position: Optional[int] = None, section_end_keywords: Tuple[str, ...] = (), extra_args: Sequence[Any] = ()) -> Iterator['stem.descriptor.router_status_entry.RouterStatusEntry']:\n   \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\ndef _parse_file(document_file: BinaryIO, validate: bool, entry_class: Type['stem.descriptor.router_status_entry.RouterStatusEntry'], entry_keyword: str = 'r', start_position: int = None, end_position: int = None, section_end_keywords: Sequence[str] = (), extra_args: Sequence[str] = ()) -> Iterator['stem.descriptor.router_status_entry.RouterStatusEntry']:\n  <IND>",
        "target_code_with_indent": "\ndef _parse_file(document_file: BinaryIO, validate: bool, entry_class: Type['stem.descriptor.router_status_entry.RouterStatusEntry'], entry_keyword: str = 'r', start_position: Optional[int] = None, end_position: Optional[int] = None, section_end_keywords: Tuple[str, ...] = (), extra_args: Sequence[Any] = ()) -> Iterator['stem.descriptor.router_status_entry.RouterStatusEntry']:\n  <IND>"
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/router_status_entry.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/router_status_entry.py",
    "file_hunks_size": 27,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/router_status_entry.py:107:24 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `RouterStatusEntry.__init__` but got `bytes`.",
    "message": " Expected `str` for 1st positional only parameter to call `RouterStatusEntry.__init__` but got `bytes`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 107,
    "warning_line": "      yield entry_class(desc_content, validate, *extra_args)"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/router_status_entry.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/router_status_entry.py",
    "file_hunks_size": 27,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/router_status_entry.py:373:33 Incompatible parameter type [6]: Expected `bytes` for 1st positional only parameter to call `binascii.hexlify` but got `str`.",
    "message": " Expected `bytes` for 1st positional only parameter to call `binascii.hexlify` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 373,
    "warning_line": "  fingerprint = binascii.hexlify(identity_decoded).upper()"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/router_status_entry.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/router_status_entry.py",
    "file_hunks_size": 27,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "stem/descriptor/router_status_entry.py:425:2 Inconsistent override [14]: `stem.descriptor.router_status_entry.RouterStatusEntry.from_str` overrides method defined in `Descriptor` inconsistently. Parameter of type `Type[RouterStatusEntry]` is not a supertype of the overridden parameter `Type[Descriptor]`.",
    "message": " `stem.descriptor.router_status_entry.RouterStatusEntry.from_str` overrides method defined in `Descriptor` inconsistently. Parameter of type `Type[RouterStatusEntry]` is not a supertype of the overridden parameter `Type[Descriptor]`.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 425,
    "warning_line": "  def from_str(cls: Type['stem.descriptor.router_status_entry.RouterStatusEntry'], content: str, **kwargs: Any) -> 'stem.descriptor.router_status_entry.RouterStatusEntry':",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "  @classmethod\n  def from_str(cls: Type['stem.descriptor.router_status_entry.RouterStatusEntry'], content: str, **kwargs: Any) -> 'stem.descriptor.router_status_entry.RouterStatusEntry':\n    # Router status entries don't have their own @type annotation, so to make\n",
        "source_code_len": 265,
        "target_code": "  @classmethod\n  def from_str(cls: Type['stem.descriptor.router_status_entry.RouterStatusEntry'], content: str, **kwargs: Any) -> Union['stem.descriptor.router_status_entry.RouterStatusEntry', List['stem.descriptor.router_status_entry.RouterStatusEntry']]:  # type: ignore\n    # Router status entries don't have their own @type annotation, so to make\n",
        "target_code_len": 351,
        "diff_format": "@@ -424,3 +425,3 @@\n   @classmethod\n-  def from_str(cls: Type['stem.descriptor.router_status_entry.RouterStatusEntry'], content: str, **kwargs: Any) -> 'stem.descriptor.router_status_entry.RouterStatusEntry':\n+  def from_str(cls: Type['stem.descriptor.router_status_entry.RouterStatusEntry'], content: str, **kwargs: Any) -> Union['stem.descriptor.router_status_entry.RouterStatusEntry', List['stem.descriptor.router_status_entry.RouterStatusEntry']]:  # type: ignore\n     # Router status entries don't have their own @type annotation, so to make\n",
        "source_code_with_indent": "  @classmethod\n  def from_str(cls: Type['stem.descriptor.router_status_entry.RouterStatusEntry'], content: str, **kwargs: Any) -> 'stem.descriptor.router_status_entry.RouterStatusEntry':\n    # Router status entries don't have their own @type annotation, so to make\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "  @classmethod\n  def from_str(cls: Type['stem.descriptor.router_status_entry.RouterStatusEntry'], content: str, **kwargs: Any) -> Union['stem.descriptor.router_status_entry.RouterStatusEntry', List['stem.descriptor.router_status_entry.RouterStatusEntry']]:  # type: ignore\n    # Router status entries don't have their own @type annotation, so to make\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/router_status_entry.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/router_status_entry.py",
    "file_hunks_size": 27,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "stem/descriptor/router_status_entry.py:439:6 Incompatible return type [7]: Expected `RouterStatusEntry` but got `typing.List[RouterStatusEntry]`.",
    "message": " Expected `RouterStatusEntry` but got `typing.List[RouterStatusEntry]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 439,
    "warning_line": "      return results",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "  @classmethod\n  def from_str(cls: Type['stem.descriptor.router_status_entry.RouterStatusEntry'], content: str, **kwargs: Any) -> 'stem.descriptor.router_status_entry.RouterStatusEntry':\n    # Router status entries don't have their own @type annotation, so to make\n",
        "source_code_len": 265,
        "target_code": "  @classmethod\n  def from_str(cls: Type['stem.descriptor.router_status_entry.RouterStatusEntry'], content: str, **kwargs: Any) -> Union['stem.descriptor.router_status_entry.RouterStatusEntry', List['stem.descriptor.router_status_entry.RouterStatusEntry']]:  # type: ignore\n    # Router status entries don't have their own @type annotation, so to make\n",
        "target_code_len": 351,
        "diff_format": "@@ -424,3 +425,3 @@\n   @classmethod\n-  def from_str(cls: Type['stem.descriptor.router_status_entry.RouterStatusEntry'], content: str, **kwargs: Any) -> 'stem.descriptor.router_status_entry.RouterStatusEntry':\n+  def from_str(cls: Type['stem.descriptor.router_status_entry.RouterStatusEntry'], content: str, **kwargs: Any) -> Union['stem.descriptor.router_status_entry.RouterStatusEntry', List['stem.descriptor.router_status_entry.RouterStatusEntry']]:  # type: ignore\n     # Router status entries don't have their own @type annotation, so to make\n",
        "source_code_with_indent": "  @classmethod\n  def from_str(cls: Type['stem.descriptor.router_status_entry.RouterStatusEntry'], content: str, **kwargs: Any) -> 'stem.descriptor.router_status_entry.RouterStatusEntry':\n    # Router status entries don't have their own @type annotation, so to make\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "  @classmethod\n  def from_str(cls: Type['stem.descriptor.router_status_entry.RouterStatusEntry'], content: str, **kwargs: Any) -> Union['stem.descriptor.router_status_entry.RouterStatusEntry', List['stem.descriptor.router_status_entry.RouterStatusEntry']]:  # type: ignore\n    # Router status entries don't have their own @type annotation, so to make\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/router_status_entry.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/router_status_entry.py",
    "file_hunks_size": 27,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/router_status_entry.py:489:4 Incompatible return type [7]: Expected `Tuple[str]` but got `Tuple[]`.",
    "message": " Expected `Tuple[str]` but got `Tuple[]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 489,
    "warning_line": "    return ()",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n  def _required_fields(self) -> Tuple[str]:\n    \"\"\"\n",
        "source_code_len": 53,
        "target_code": "\n  def _required_fields(self) -> Tuple[str, ...]:\n    \"\"\"\n",
        "target_code_len": 58,
        "diff_format": "@@ -483,3 +484,3 @@\n \n-  def _required_fields(self) -> Tuple[str]:\n+  def _required_fields(self) -> Tuple[str, ...]:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n  <DED>def _required_fields(self) -> Tuple[str]:\n    <IND>",
        "target_code_with_indent": "\n  <DED>def _required_fields(self) -> Tuple[str, ...]:\n    <IND>"
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/router_status_entry.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/router_status_entry.py",
    "file_hunks_size": 27,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/router_status_entry.py:496:4 Incompatible return type [7]: Expected `Tuple[str]` but got `Tuple[]`.",
    "message": " Expected `Tuple[str]` but got `Tuple[]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 496,
    "warning_line": "    return ()",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n  def _single_fields(self) -> Tuple[str]:\n    \"\"\"\n",
        "source_code_len": 51,
        "target_code": "\n  def _single_fields(self) -> Tuple[str, ...]:\n    \"\"\"\n",
        "target_code_len": 56,
        "diff_format": "@@ -490,3 +491,3 @@\n \n-  def _single_fields(self) -> Tuple[str]:\n+  def _single_fields(self) -> Tuple[str, ...]:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n  <DED>def _single_fields(self) -> Tuple[str]:\n    <IND>",
        "target_code_with_indent": "\n  <DED>def _single_fields(self) -> Tuple[str, ...]:\n    <IND>"
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/router_status_entry.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/router_status_entry.py",
    "file_hunks_size": 27,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/router_status_entry.py:518:4 Incompatible return type [7]: Expected `str` but got `bytes`.",
    "message": " Expected `str` but got `bytes`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 518,
    "warning_line": "    return _descriptor_content(attr, exclude, ("
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/router_status_entry.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/router_status_entry.py",
    "file_hunks_size": 27,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/router_status_entry.py:519:6 Incompatible parameter type [6]: Expected `Sequence[str]` for 3rd positional only parameter to call `_descriptor_content` but got `Tuple[Tuple[str, str]]`.",
    "message": " Expected `Sequence[str]` for 3rd positional only parameter to call `_descriptor_content` but got `Tuple[Tuple[str, str]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 519,
    "warning_line": "      ('r', '%s p1aag7VwarGxqctS7/fS0y5FU+s oQZFLYe9e4A7bOkWKR7TaNxb0JE %s %s 9001 0' % (_random_nickname(), _random_date(), _random_ipv4_address())),"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/router_status_entry.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/router_status_entry.py",
    "file_hunks_size": 27,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/router_status_entry.py:529:4 Incompatible return type [7]: Expected `Tuple[str]` but got `Tuple[str, str, str]`.",
    "message": " Expected `Tuple[str]` but got `Tuple[str, str, str]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 529,
    "warning_line": "    return ('r', 's', 'v')",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n  def _required_fields(self) -> Tuple[str]:\n    \"\"\"\n",
        "source_code_len": 53,
        "target_code": "\n  def _required_fields(self) -> Tuple[str, ...]:\n    \"\"\"\n",
        "target_code_len": 58,
        "diff_format": "@@ -483,3 +484,3 @@\n \n-  def _required_fields(self) -> Tuple[str]:\n+  def _required_fields(self) -> Tuple[str, ...]:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n  <DED>def _required_fields(self) -> Tuple[str]:\n    <IND>",
        "target_code_with_indent": "\n  <DED>def _required_fields(self) -> Tuple[str, ...]:\n    <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n  def _single_fields(self) -> Tuple[str]:\n    \"\"\"\n",
        "source_code_len": 51,
        "target_code": "\n  def _single_fields(self) -> Tuple[str, ...]:\n    \"\"\"\n",
        "target_code_len": 56,
        "diff_format": "@@ -490,3 +491,3 @@\n \n-  def _single_fields(self) -> Tuple[str]:\n+  def _single_fields(self) -> Tuple[str, ...]:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n  <DED>def _single_fields(self) -> Tuple[str]:\n    <IND>",
        "target_code_with_indent": "\n  <DED>def _single_fields(self) -> Tuple[str, ...]:\n    <IND>"
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n  def _required_fields(self) -> Tuple[str]:\n    return ('r',)\n\n  def _single_fields(self) -> Tuple[str]:\n    return ('r', 's', 'v')\n",
        "source_code_len": 133,
        "target_code": "\n  def _required_fields(self) -> Tuple[str, ...]:\n    return ('r',)\n\n  def _single_fields(self) -> Tuple[str, ...]:\n    return ('r', 's', 'v')\n",
        "target_code_len": 143,
        "diff_format": "@@ -524,6 +525,6 @@\n \n-  def _required_fields(self) -> Tuple[str]:\n+  def _required_fields(self) -> Tuple[str, ...]:\n     return ('r',)\n \n-  def _single_fields(self) -> Tuple[str]:\n+  def _single_fields(self) -> Tuple[str, ...]:\n     return ('r', 's', 'v')\n",
        "source_code_with_indent": "\n  <DED>def _required_fields(self) -> Tuple[str]:\n    <IND>return ('r',)\n\n  <DED>def _single_fields(self) -> Tuple[str]:\n    <IND>return ('r', 's', 'v')\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n  <DED>def _required_fields(self) -> Tuple[str, ...]:\n    <IND>return ('r',)\n\n  <DED>def _single_fields(self) -> Tuple[str, ...]:\n    <IND>return ('r', 's', 'v')\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/router_status_entry.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/router_status_entry.py",
    "file_hunks_size": 27,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/router_status_entry.py:609:4 Incompatible return type [7]: Expected `str` but got `bytes`.",
    "message": " Expected `str` but got `bytes`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 609,
    "warning_line": "    return _descriptor_content(attr, exclude, ("
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/router_status_entry.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/router_status_entry.py",
    "file_hunks_size": 27,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/router_status_entry.py:610:6 Incompatible parameter type [6]: Expected `Sequence[str]` for 3rd positional only parameter to call `_descriptor_content` but got `Tuple[Tuple[str, str], Tuple[str, str]]`.",
    "message": " Expected `Sequence[str]` for 3rd positional only parameter to call `_descriptor_content` but got `Tuple[Tuple[str, str], Tuple[str, str]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 610,
    "warning_line": "      ('r', '%s p1aag7VwarGxqctS7/fS0y5FU+s oQZFLYe9e4A7bOkWKR7TaNxb0JE %s %s 9001 0' % (_random_nickname(), _random_date(), _random_ipv4_address())),"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/router_status_entry.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/router_status_entry.py",
    "file_hunks_size": 27,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/router_status_entry.py:618:4 Incompatible return type [7]: Expected `Tuple[str]` but got `Tuple[str, str]`.",
    "message": " Expected `Tuple[str]` but got `Tuple[str, str]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 618,
    "warning_line": "    return ('r', 's')"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/router_status_entry.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/router_status_entry.py",
    "file_hunks_size": 27,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/router_status_entry.py:621:4 Incompatible return type [7]: Expected `Tuple[str]` but got `Tuple[str, str, str, str, str, str]`.",
    "message": " Expected `Tuple[str]` but got `Tuple[str, str, str, str, str, str]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 621,
    "warning_line": "    return ('r', 's', 'v', 'w', 'p', 'pr')"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/router_status_entry.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/router_status_entry.py",
    "file_hunks_size": 27,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/router_status_entry.py:674:4 Incompatible return type [7]: Expected `str` but got `bytes`.",
    "message": " Expected `str` but got `bytes`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 674,
    "warning_line": "    return _descriptor_content(attr, exclude, ("
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/router_status_entry.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/router_status_entry.py",
    "file_hunks_size": 27,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/router_status_entry.py:675:6 Incompatible parameter type [6]: Expected `Sequence[str]` for 3rd positional only parameter to call `_descriptor_content` but got `Tuple[Tuple[str, str], Tuple[str, str], Tuple[str, str]]`.",
    "message": " Expected `Sequence[str]` for 3rd positional only parameter to call `_descriptor_content` but got `Tuple[Tuple[str, str], Tuple[str, str], Tuple[str, str]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 675,
    "warning_line": "      ('r', '%s ARIJF2zbqirB9IwsW0mQznccWww %s %s 9001 9030' % (_random_nickname(), _random_date(), _random_ipv4_address())),"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/router_status_entry.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/router_status_entry.py",
    "file_hunks_size": 27,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/router_status_entry.py:684:4 Incompatible return type [7]: Expected `Tuple[str]` but got `Tuple[str, str, str]`.",
    "message": " Expected `Tuple[str]` but got `Tuple[str, str, str]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 684,
    "warning_line": "    return ('r', 's', 'm')"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/router_status_entry.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/router_status_entry.py",
    "file_hunks_size": 27,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/router_status_entry.py:687:4 Incompatible return type [7]: Expected `Tuple[str]` but got `Tuple[str, str, str, str, str, str]`.",
    "message": " Expected `Tuple[str]` but got `Tuple[str, str, str, str, str, str]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 687,
    "warning_line": "    return ('r', 's', 'v', 'w', 'm', 'pr')"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/server_descriptor.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/server_descriptor.py",
    "file_hunks_size": 29,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/server_descriptor.py:131:3 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `stem.util.enum.Enum.__init__` but got `Tuple[str, str]`.",
    "message": " Expected `str` for 1st positional only parameter to call `stem.util.enum.Enum.__init__` but got `Tuple[str, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 131,
    "warning_line": "  ('ANY', 'any'),"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/server_descriptor.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/server_descriptor.py",
    "file_hunks_size": 29,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/server_descriptor.py:132:3 Incompatible parameter type [6]: Expected `str` for 2nd positional only parameter to call `stem.util.enum.Enum.__init__` but got `Tuple[str, str]`.",
    "message": " Expected `str` for 2nd positional only parameter to call `stem.util.enum.Enum.__init__` but got `Tuple[str, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 132,
    "warning_line": "  ('HTTPS', 'https'),"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/server_descriptor.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/server_descriptor.py",
    "file_hunks_size": 29,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/server_descriptor.py:133:3 Incompatible parameter type [6]: Expected `str` for 3rd positional only parameter to call `stem.util.enum.Enum.__init__` but got `Tuple[str, str]`.",
    "message": " Expected `str` for 3rd positional only parameter to call `stem.util.enum.Enum.__init__` but got `Tuple[str, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 133,
    "warning_line": "  ('EMAIL', 'email'),"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/server_descriptor.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/server_descriptor.py",
    "file_hunks_size": 29,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/server_descriptor.py:134:3 Incompatible parameter type [6]: Expected `str` for 4th positional only parameter to call `stem.util.enum.Enum.__init__` but got `Tuple[str, str]`.",
    "message": " Expected `str` for 4th positional only parameter to call `stem.util.enum.Enum.__init__` but got `Tuple[str, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 134,
    "warning_line": "  ('MOAT', 'moat'),"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/server_descriptor.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/server_descriptor.py",
    "file_hunks_size": 29,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/server_descriptor.py:135:3 Incompatible parameter type [6]: Expected `str` for 5th positional only parameter to call `stem.util.enum.Enum.__init__` but got `Tuple[str, str]`.",
    "message": " Expected `str` for 5th positional only parameter to call `stem.util.enum.Enum.__init__` but got `Tuple[str, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 135,
    "warning_line": "  ('HYPHAE', 'hyphae'),"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/server_descriptor.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/server_descriptor.py",
    "file_hunks_size": 29,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/server_descriptor.py:217:31 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `ServerDescriptor.__init__` but got `bytes`.",
    "message": " Expected `str` for 1st positional only parameter to call `ServerDescriptor.__init__` but got `bytes`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 217,
    "warning_line": "        yield BridgeDescriptor(descriptor_text, validate, **kwargs)"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/server_descriptor.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/server_descriptor.py",
    "file_hunks_size": 29,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/server_descriptor.py:219:30 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `RelayDescriptor.__init__` but got `bytes`.",
    "message": " Expected `str` for 1st positional only parameter to call `RelayDescriptor.__init__` but got `bytes`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 219,
    "warning_line": "        yield RelayDescriptor(descriptor_text, validate, **kwargs)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n  def __init__(self, raw_contents: str, validate: bool = False, skip_crypto_validation: bool = False) -> None:\n    super(RelayDescriptor, self).__init__(raw_contents, validate)\n",
        "source_code_len": 178,
        "target_code": "\n  def __init__(self, raw_contents: bytes, validate: bool = False, skip_crypto_validation: bool = False) -> None:\n    super(RelayDescriptor, self).__init__(raw_contents, validate)\n",
        "target_code_len": 180,
        "diff_format": "@@ -756,3 +760,3 @@\n \n-  def __init__(self, raw_contents: str, validate: bool = False, skip_crypto_validation: bool = False) -> None:\n+  def __init__(self, raw_contents: bytes, validate: bool = False, skip_crypto_validation: bool = False) -> None:\n     super(RelayDescriptor, self).__init__(raw_contents, validate)\n",
        "source_code_with_indent": "\n  def __init__(self, raw_contents: str, validate: bool = False, skip_crypto_validation: bool = False) -> None:\n    <IND>super(RelayDescriptor, self).__init__(raw_contents, validate)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n  def __init__(self, raw_contents: bytes, validate: bool = False, skip_crypto_validation: bool = False) -> None:\n    <IND>super(RelayDescriptor, self).__init__(raw_contents, validate)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "  @classmethod\n  def content(cls: Type['stem.descriptor.server_descriptor.RelayDescriptor'], attr: Optional[Mapping[str, str]] = None, exclude: Sequence[str] = (), sign: bool = False, signing_key: Optional['stem.descriptor.SigningKey'] = None, exit_policy: Optional['stem.exit_policy.ExitPolicy'] = None) -> str:\n    if attr is None:\n      attr = {}\n\n",
        "source_code_len": 351,
        "target_code": "  @classmethod\n  def content(cls: Type['stem.descriptor.server_descriptor.RelayDescriptor'], attr: Optional[Mapping[str, str]] = None, exclude: Sequence[str] = (), sign: bool = False, signing_key: Optional['stem.descriptor.SigningKey'] = None, exit_policy: Optional['stem.exit_policy.ExitPolicy'] = None) -> bytes:\n    attr = dict(attr) if attr else {}\n\n",
        "target_code_len": 354,
        "diff_format": "@@ -788,5 +792,4 @@\n   @classmethod\n-  def content(cls: Type['stem.descriptor.server_descriptor.RelayDescriptor'], attr: Optional[Mapping[str, str]] = None, exclude: Sequence[str] = (), sign: bool = False, signing_key: Optional['stem.descriptor.SigningKey'] = None, exit_policy: Optional['stem.exit_policy.ExitPolicy'] = None) -> str:\n-    if attr is None:\n-      attr = {}\n+  def content(cls: Type['stem.descriptor.server_descriptor.RelayDescriptor'], attr: Optional[Mapping[str, str]] = None, exclude: Sequence[str] = (), sign: bool = False, signing_key: Optional['stem.descriptor.SigningKey'] = None, exit_policy: Optional['stem.exit_policy.ExitPolicy'] = None) -> bytes:\n+    attr = dict(attr) if attr else {}\n \n",
        "source_code_with_indent": "  <DED><DED><DED><DED>@classmethod\n  def content(cls: Type['stem.descriptor.server_descriptor.RelayDescriptor'], attr: Optional[Mapping[str, str]] = None, exclude: Sequence[str] = (), sign: bool = False, signing_key: Optional['stem.descriptor.SigningKey'] = None, exit_policy: Optional['stem.exit_policy.ExitPolicy'] = None) -> str:\n    <IND>if attr is None:\n      <IND>attr = {}\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "  <DED><DED><DED><DED>@classmethod\n  def content(cls: Type['stem.descriptor.server_descriptor.RelayDescriptor'], attr: Optional[Mapping[str, str]] = None, exclude: Sequence[str] = (), sign: bool = False, signing_key: Optional['stem.descriptor.SigningKey'] = None, exit_policy: Optional['stem.exit_policy.ExitPolicy'] = None) -> bytes:\n    <IND>attr = dict(attr) if attr else {}\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/server_descriptor.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/server_descriptor.py",
    "file_hunks_size": 29,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/server_descriptor.py:404:78 Incompatible parameter type [6]: Expected `typing.Callable[[str], str]` for 3rd parameter `func` to call `_parse_simple_line` but got `typing.Callable[[Named(v, typing.Any)], stem.exit_policy.MicroExitPolicy]`.",
    "message": " Expected `typing.Callable[[str], str]` for 3rd parameter `func` to call `_parse_simple_line` but got `typing.Callable[[Named(v, typing.Any)], stem.exit_policy.MicroExitPolicy]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 404,
    "warning_line": "_parse_ipv6_policy_line = _parse_simple_line('ipv6-policy', 'exit_policy_v6', func = lambda v: stem.exit_policy.MicroExitPolicy(v))"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/server_descriptor.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/server_descriptor.py",
    "file_hunks_size": 29,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/server_descriptor.py:411:60 Incompatible parameter type [6]: Expected `typing.Callable[[str], str]` for 3rd parameter `func` to call `_parse_simple_line` but got `typing.Callable[[Named(v, typing.Any)], typing.Set[typing.Any]]`.",
    "message": " Expected `typing.Callable[[str], str]` for 3rd parameter `func` to call `_parse_simple_line` but got `typing.Callable[[Named(v, typing.Any)], typing.Set[typing.Any]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 411,
    "warning_line": "_parse_family_line = _parse_simple_line('family', 'family', func = lambda v: set(v.split(' ')))"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/server_descriptor.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/server_descriptor.py",
    "file_hunks_size": 29,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/server_descriptor.py:684:4 Incompatible return type [7]: Expected `Tuple[str]` but got `Tuple[str, str, str, str, str, str]`.",
    "message": " Expected `Tuple[str]` but got `Tuple[str, str, str, str, str, str]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 684,
    "warning_line": "    return REQUIRED_FIELDS"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/server_descriptor.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/server_descriptor.py",
    "file_hunks_size": 29,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/server_descriptor.py:687:4 Incompatible return type [7]: Expected `Tuple[str]` but got `typing.Tuple[str, ...]`.",
    "message": " Expected `Tuple[str]` but got `typing.Tuple[str, ...]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 687,
    "warning_line": "    return REQUIRED_FIELDS + SINGLE_FIELDS"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/server_descriptor.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/server_descriptor.py",
    "file_hunks_size": 29,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/server_descriptor.py:800:8 Unsupported operand [58]: `+` is not supported for operand types `typing.List[Tuple[str, typing.Any]]` and `typing.List[typing.Tuple[str, ...]]`.",
    "message": " `+` is not supported for operand types `typing.List[Tuple[str, typing.Any]]` and `typing.List[typing.Tuple[str, ...]]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 800,
    "warning_line": "    ] + ["
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/server_descriptor.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/server_descriptor.py",
    "file_hunks_size": 29,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/server_descriptor.py:822:51 Incompatible parameter type [6]: Expected `Sequence[str]` for 3rd positional only parameter to call `_descriptor_content` but got `typing.List[Tuple[str, typing.Any]]`.",
    "message": " Expected `Sequence[str]` for 3rd positional only parameter to call `_descriptor_content` but got `typing.List[Tuple[str, typing.Any]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 822,
    "warning_line": "      content = _descriptor_content(attr, exclude, base_header) + b'\\nrouter-signature\\n'"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/server_descriptor.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/server_descriptor.py",
    "file_hunks_size": 29,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/server_descriptor.py:825:6 Incompatible return type [7]: Expected `str` but got `bytes`.",
    "message": " Expected `str` but got `bytes`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 825,
    "warning_line": "      return _descriptor_content(attr, exclude, base_header, (",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "  @classmethod\n  def content(cls: Type['stem.descriptor.server_descriptor.RelayDescriptor'], attr: Optional[Mapping[str, str]] = None, exclude: Sequence[str] = (), sign: bool = False, signing_key: Optional['stem.descriptor.SigningKey'] = None, exit_policy: Optional['stem.exit_policy.ExitPolicy'] = None) -> str:\n    if attr is None:\n      attr = {}\n\n",
        "source_code_len": 351,
        "target_code": "  @classmethod\n  def content(cls: Type['stem.descriptor.server_descriptor.RelayDescriptor'], attr: Optional[Mapping[str, str]] = None, exclude: Sequence[str] = (), sign: bool = False, signing_key: Optional['stem.descriptor.SigningKey'] = None, exit_policy: Optional['stem.exit_policy.ExitPolicy'] = None) -> bytes:\n    attr = dict(attr) if attr else {}\n\n",
        "target_code_len": 354,
        "diff_format": "@@ -788,5 +792,4 @@\n   @classmethod\n-  def content(cls: Type['stem.descriptor.server_descriptor.RelayDescriptor'], attr: Optional[Mapping[str, str]] = None, exclude: Sequence[str] = (), sign: bool = False, signing_key: Optional['stem.descriptor.SigningKey'] = None, exit_policy: Optional['stem.exit_policy.ExitPolicy'] = None) -> str:\n-    if attr is None:\n-      attr = {}\n+  def content(cls: Type['stem.descriptor.server_descriptor.RelayDescriptor'], attr: Optional[Mapping[str, str]] = None, exclude: Sequence[str] = (), sign: bool = False, signing_key: Optional['stem.descriptor.SigningKey'] = None, exit_policy: Optional['stem.exit_policy.ExitPolicy'] = None) -> bytes:\n+    attr = dict(attr) if attr else {}\n \n",
        "source_code_with_indent": "  <DED><DED><DED><DED>@classmethod\n  def content(cls: Type['stem.descriptor.server_descriptor.RelayDescriptor'], attr: Optional[Mapping[str, str]] = None, exclude: Sequence[str] = (), sign: bool = False, signing_key: Optional['stem.descriptor.SigningKey'] = None, exit_policy: Optional['stem.exit_policy.ExitPolicy'] = None) -> str:\n    <IND>if attr is None:\n      <IND>attr = {}\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "  <DED><DED><DED><DED>@classmethod\n  def content(cls: Type['stem.descriptor.server_descriptor.RelayDescriptor'], attr: Optional[Mapping[str, str]] = None, exclude: Sequence[str] = (), sign: bool = False, signing_key: Optional['stem.descriptor.SigningKey'] = None, exit_policy: Optional['stem.exit_policy.ExitPolicy'] = None) -> bytes:\n    <IND>attr = dict(attr) if attr else {}\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/server_descriptor.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/server_descriptor.py",
    "file_hunks_size": 29,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/server_descriptor.py:825:48 Incompatible parameter type [6]: Expected `Sequence[str]` for 3rd positional only parameter to call `_descriptor_content` but got `typing.List[Tuple[str, typing.Any]]`.",
    "message": " Expected `Sequence[str]` for 3rd positional only parameter to call `_descriptor_content` but got `typing.List[Tuple[str, typing.Any]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 825,
    "warning_line": "      return _descriptor_content(attr, exclude, base_header, ("
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/server_descriptor.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/server_descriptor.py",
    "file_hunks_size": 29,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/server_descriptor.py:826:8 Incompatible parameter type [6]: Expected `Sequence[str]` for 4th positional only parameter to call `_descriptor_content` but got `Tuple[Tuple[str, None], Tuple[str, typing.Any]]`.",
    "message": " Expected `Sequence[str]` for 4th positional only parameter to call `_descriptor_content` but got `Tuple[Tuple[str, None], Tuple[str, typing.Any]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 826,
    "warning_line": "        ('router-sig-ed25519', None),"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/server_descriptor.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/server_descriptor.py",
    "file_hunks_size": 29,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/server_descriptor.py:850:44 Incompatible parameter type [6]: Expected `bytes` for 1st positional only parameter to call `stem.descriptor._encode_digest` but got `hashlib._Hash`.",
    "message": " Expected `bytes` for 1st positional only parameter to call `stem.descriptor._encode_digest` but got `hashlib._Hash`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 850,
    "warning_line": "      return stem.descriptor._encode_digest(hashlib.sha1(content), encoding)"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/server_descriptor.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/server_descriptor.py",
    "file_hunks_size": 29,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/server_descriptor.py:852:44 Incompatible parameter type [6]: Expected `bytes` for 1st positional only parameter to call `stem.descriptor._encode_digest` but got `hashlib._Hash`.",
    "message": " Expected `bytes` for 1st positional only parameter to call `stem.descriptor._encode_digest` but got `hashlib._Hash`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 852,
    "warning_line": "      return stem.descriptor._encode_digest(hashlib.sha256(content), encoding)"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/server_descriptor.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/server_descriptor.py",
    "file_hunks_size": 29,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/server_descriptor.py:949:4 Incompatible return type [7]: Expected `str` but got `bytes`.",
    "message": " Expected `str` but got `bytes`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 949,
    "warning_line": "    return _descriptor_content(attr, exclude, ("
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/server_descriptor.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/server_descriptor.py",
    "file_hunks_size": 29,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/server_descriptor.py:950:6 Incompatible parameter type [6]: Expected `Sequence[str]` for 3rd positional only parameter to call `_descriptor_content` but got `Tuple[Tuple[str, str], Tuple[str, str], Tuple[str, typing.Any], Tuple[str, str], Tuple[str, str]]`.",
    "message": " Expected `Sequence[str]` for 3rd positional only parameter to call `_descriptor_content` but got `Tuple[Tuple[str, str], Tuple[str, str], Tuple[str, typing.Any], Tuple[str, str], Tuple[str, str]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 950,
    "warning_line": "      ('router', '%s %s 9001 0 0' % (_random_nickname(), _random_ipv4_address())),"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/server_descriptor.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/server_descriptor.py",
    "file_hunks_size": 29,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/server_descriptor.py:1024:4 Incompatible return type [7]: Expected `Tuple[str]` but got `typing.Tuple[str, ...]`.",
    "message": " Expected `Tuple[str]` but got `typing.Tuple[str, ...]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 1024,
    "warning_line": "    return tuple(included_fields + [f for f in REQUIRED_FIELDS if f not in excluded_fields])"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/server_descriptor.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/server_descriptor.py",
    "file_hunks_size": 29,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/server_descriptor.py:1026:2 Inconsistent override [15]: `stem.descriptor.server_descriptor.BridgeDescriptor._single_fields` overrides method defined in `ServerDescriptor` inconsistently. Returned type `str` is not a subtype of the overridden return `Tuple[str]`.",
    "message": " `stem.descriptor.server_descriptor.BridgeDescriptor._single_fields` overrides method defined in `ServerDescriptor` inconsistently. Returned type `str` is not a subtype of the overridden return `Tuple[str]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 1026,
    "warning_line": "  def _single_fields(self) -> str:"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/server_descriptor.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/server_descriptor.py",
    "file_hunks_size": 29,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/server_descriptor.py:1027:4 Incompatible return type [7]: Expected `str` but got `typing.Tuple[str, ...]`.",
    "message": " Expected `str` but got `typing.Tuple[str, ...]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 1027,
    "warning_line": "    return self._required_fields() + SINGLE_FIELDS"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/server_descriptor.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/server_descriptor.py",
    "file_hunks_size": 29,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/server_descriptor.py:1030:4 Incompatible return type [7]: Expected `str` but got `None`.",
    "message": " Expected `str` but got `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 1030,
    "warning_line": "    return None"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/tordnsel.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/tordnsel.py",
    "file_hunks_size": 8,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/tordnsel.py:46:21 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `TorDNSEL.__init__` but got `bytes`.",
    "message": " Expected `str` for 1st positional only parameter to call `TorDNSEL.__init__` but got `bytes`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 46,
    "warning_line": "      yield TorDNSEL(bytes.join(b'', contents), validate, **kwargs)"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/descriptor/tordnsel.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/descriptor/tordnsel.py",
    "file_hunks_size": 8,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/descriptor/tordnsel.py:79:2 Inconsistent override [14]: `stem.descriptor.tordnsel.TorDNSEL._parse` overrides method defined in `Descriptor` inconsistently. Could not find parameter `parser_for_line` in overriding signature.",
    "message": " `stem.descriptor.tordnsel.TorDNSEL._parse` overrides method defined in `Descriptor` inconsistently. Could not find parameter `parser_for_line` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 79,
    "warning_line": "  def _parse(self, entries: Dict[str, Sequence[str]], validate: bool) -> None:"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/directory.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/directory.py",
    "file_hunks_size": 14,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/directory.py:105:133 Incompatible variable type [9]: required is declared to have type `bool` but is used as type `None`.",
    "message": " required is declared to have type `bool` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 105,
    "warning_line": "def _directory_entries(lines: Sequence[str], pop_section_func: Callable[[Sequence[str]], Sequence[str]], regexes: Sequence[Pattern], required: bool = None) -> Iterator[Dict[Pattern, Tuple[str]]]:"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/directory.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/directory.py",
    "file_hunks_size": 14,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/directory.py:236:45 Incompatible parameter type [6]: Expected `int` for 2nd positional only parameter to call `Directory.__init__` but got `Optional[int]`.",
    "message": " Expected `int` for 2nd positional only parameter to call `Directory.__init__` but got `Optional[int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 236,
    "warning_line": "    super(Authority, self).__init__(address, or_port, dir_port, fingerprint, nickname, orport_v6)"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/directory.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/directory.py",
    "file_hunks_size": 14,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/directory.py:236:54 Incompatible parameter type [6]: Expected `int` for 3rd positional only parameter to call `Directory.__init__` but got `Optional[int]`.",
    "message": " Expected `int` for 3rd positional only parameter to call `Directory.__init__` but got `Optional[int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 236,
    "warning_line": "    super(Authority, self).__init__(address, or_port, dir_port, fingerprint, nickname, orport_v6)"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/directory.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/directory.py",
    "file_hunks_size": 14,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/directory.py:236:87 Incompatible parameter type [6]: Expected `str` for 6th positional only parameter to call `Directory.__init__` but got `Optional[int]`.",
    "message": " Expected `str` for 6th positional only parameter to call `Directory.__init__` but got `Optional[int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 236,
    "warning_line": "    super(Authority, self).__init__(address, or_port, dir_port, fingerprint, nickname, orport_v6)"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/directory.py",
    "min_patch_found": false,
    "full_warning_msg": "stem/directory.py:245:2 Inconsistent override [15]: `stem.directory.Authority.from_cache` overrides method defined in `Directory` inconsistently. See https://pyre-check.org/docs/errors#covariance-and-contravariance for mutable container errors.",
    "exception": "too many values to unpack (expected 2)",
    "dd_fail": true
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/directory.py",
    "min_patch_found": false,
    "full_warning_msg": "stem/directory.py:249:2 Inconsistent override [15]: `stem.directory.Authority.from_remote` overrides method defined in `Directory` inconsistently. See https://pyre-check.org/docs/errors#covariance-and-contravariance for mutable container errors.",
    "exception": "too many values to unpack (expected 2)",
    "dd_fail": true
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/directory.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/directory.py",
    "file_hunks_size": 14,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/directory.py:258:54 Incompatible parameter type [6]: Expected `BaseException` for 2nd positional only parameter to call `stem.DownloadFailed.__init__` but got `typing.Union[None, typing.Type[BaseException], BaseException, types.TracebackType]`.",
    "message": " Expected `BaseException` for 2nd positional only parameter to call `stem.DownloadFailed.__init__` but got `typing.Union[None, typing.Type[BaseException], BaseException, types.TracebackType]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 258,
    "warning_line": "      raise stem.DownloadFailed(GITWEB_AUTHORITY_URL, exc, stacktrace, message)"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/directory.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/directory.py",
    "file_hunks_size": 14,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/directory.py:269:140 Incompatible parameter type [6]: Expected `bool` for 4th parameter `required` to call `_directory_entries` but got `Tuple[typing.Any, typing.Any]`.",
    "message": " Expected `bool` for 4th parameter `required` to call `_directory_entries` but got `Tuple[typing.Any, typing.Any]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 269,
    "warning_line": "      for matches in _directory_entries(lines, Authority._pop_section, (AUTHORITY_NAME, AUTHORITY_V3IDENT, AUTHORITY_IPV6, AUTHORITY_ADDR), required = (AUTHORITY_NAME, AUTHORITY_ADDR)):"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/directory.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/directory.py",
    "file_hunks_size": 14,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "stem/directory.py:279:10 Incompatible parameter type [6]: Expected `Optional[int]` for 6th parameter `orport_v6` to call `Authority.__init__` but got `Optional[Tuple[str]]`.",
    "message": " Expected `Optional[int]` for 6th parameter `orport_v6` to call `Authority.__init__` but got `Optional[Tuple[str]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 279,
    "warning_line": "          orport_v6 = matches.get(AUTHORITY_IPV6),",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "          nickname = nickname,\n          orport_v6 = matches.get(AUTHORITY_IPV6),\n          v3ident = matches.get(AUTHORITY_V3IDENT),\n        )\n",
        "source_code_len": 144,
        "target_code": "          nickname = nickname,\n          orport_v6 = matches.get(AUTHORITY_IPV6),  # type: ignore\n          v3ident = matches.get(AUTHORITY_V3IDENT),  # type: ignore\n        )\n",
        "target_code_len": 176,
        "diff_format": "@@ -278,4 +278,4 @@\n           nickname = nickname,\n-          orport_v6 = matches.get(AUTHORITY_IPV6),\n-          v3ident = matches.get(AUTHORITY_V3IDENT),\n+          orport_v6 = matches.get(AUTHORITY_IPV6),  # type: ignore\n+          v3ident = matches.get(AUTHORITY_V3IDENT),  # type: ignore\n         )\n",
        "source_code_with_indent": "          nickname = nickname,\n          orport_v6 = matches.get(AUTHORITY_IPV6),\n          v3ident = matches.get(AUTHORITY_V3IDENT),\n        )\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "          nickname = nickname,\n          orport_v6 = matches.get(AUTHORITY_IPV6),  # type: ignore\n          v3ident = matches.get(AUTHORITY_V3IDENT),  # type: ignore\n        )\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/directory.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/directory.py",
    "file_hunks_size": 14,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "stem/directory.py:280:10 Incompatible parameter type [6]: Expected `Optional[str]` for 7th parameter `v3ident` to call `Authority.__init__` but got `Optional[Tuple[str]]`.",
    "message": " Expected `Optional[str]` for 7th parameter `v3ident` to call `Authority.__init__` but got `Optional[Tuple[str]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 280,
    "warning_line": "          v3ident = matches.get(AUTHORITY_V3IDENT),",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "          nickname = nickname,\n          orport_v6 = matches.get(AUTHORITY_IPV6),\n          v3ident = matches.get(AUTHORITY_V3IDENT),\n        )\n",
        "source_code_len": 144,
        "target_code": "          nickname = nickname,\n          orport_v6 = matches.get(AUTHORITY_IPV6),  # type: ignore\n          v3ident = matches.get(AUTHORITY_V3IDENT),  # type: ignore\n        )\n",
        "target_code_len": 176,
        "diff_format": "@@ -278,4 +278,4 @@\n           nickname = nickname,\n-          orport_v6 = matches.get(AUTHORITY_IPV6),\n-          v3ident = matches.get(AUTHORITY_V3IDENT),\n+          orport_v6 = matches.get(AUTHORITY_IPV6),  # type: ignore\n+          v3ident = matches.get(AUTHORITY_V3IDENT),  # type: ignore\n         )\n",
        "source_code_with_indent": "          nickname = nickname,\n          orport_v6 = matches.get(AUTHORITY_IPV6),\n          v3ident = matches.get(AUTHORITY_V3IDENT),\n        )\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "          nickname = nickname,\n          orport_v6 = matches.get(AUTHORITY_IPV6),  # type: ignore\n          v3ident = matches.get(AUTHORITY_V3IDENT),  # type: ignore\n        )\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/directory.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/directory.py",
    "file_hunks_size": 14,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/directory.py:353:44 Incompatible parameter type [6]: Expected `int` for 2nd positional only parameter to call `Directory.__init__` but got `Optional[int]`.",
    "message": " Expected `int` for 2nd positional only parameter to call `Directory.__init__` but got `Optional[int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 353,
    "warning_line": "    super(Fallback, self).__init__(address, or_port, dir_port, fingerprint, nickname, orport_v6)"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/directory.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/directory.py",
    "file_hunks_size": 14,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/directory.py:353:53 Incompatible parameter type [6]: Expected `int` for 3rd positional only parameter to call `Directory.__init__` but got `Optional[int]`.",
    "message": " Expected `int` for 3rd positional only parameter to call `Directory.__init__` but got `Optional[int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 353,
    "warning_line": "    super(Fallback, self).__init__(address, or_port, dir_port, fingerprint, nickname, orport_v6)"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/directory.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/directory.py",
    "file_hunks_size": 14,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/directory.py:353:86 Incompatible parameter type [6]: Expected `str` for 6th positional only parameter to call `Directory.__init__` but got `Optional[int]`.",
    "message": " Expected `str` for 6th positional only parameter to call `Directory.__init__` but got `Optional[int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 353,
    "warning_line": "    super(Fallback, self).__init__(address, or_port, dir_port, fingerprint, nickname, orport_v6)"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/directory.py",
    "min_patch_found": false,
    "full_warning_msg": "stem/directory.py:358:2 Inconsistent override [15]: `stem.directory.Fallback.from_cache` overrides method defined in `Directory` inconsistently. See https://pyre-check.org/docs/errors#covariance-and-contravariance for mutable container errors.",
    "exception": "too many values to unpack (expected 2)",
    "dd_fail": true
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/directory.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/directory.py",
    "file_hunks_size": 14,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/directory.py:390:8 Incompatible parameter type [6]: Expected `Optional[int]` for 7th parameter `orport_v6` to call `Fallback.__init__` but got `Optional[Tuple[typing.Any, int]]`.",
    "message": " Expected `Optional[int]` for 7th parameter `orport_v6` to call `Fallback.__init__` but got `Optional[Tuple[typing.Any, int]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 390,
    "warning_line": "        orport_v6 = orport_v6,"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/directory.py",
    "min_patch_found": false,
    "full_warning_msg": "stem/directory.py:397:2 Inconsistent override [15]: `stem.directory.Fallback.from_remote` overrides method defined in `Directory` inconsistently. See https://pyre-check.org/docs/errors#covariance-and-contravariance for mutable container errors.",
    "exception": "too many values to unpack (expected 2)",
    "dd_fail": true
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/directory.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/directory.py",
    "file_hunks_size": 14,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/directory.py:406:53 Incompatible parameter type [6]: Expected `BaseException` for 2nd positional only parameter to call `stem.DownloadFailed.__init__` but got `typing.Union[None, typing.Type[BaseException], BaseException, types.TracebackType]`.",
    "message": " Expected `BaseException` for 2nd positional only parameter to call `stem.DownloadFailed.__init__` but got `typing.Union[None, typing.Type[BaseException], BaseException, types.TracebackType]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 406,
    "warning_line": "      raise stem.DownloadFailed(GITWEB_FALLBACK_URL, exc, stacktrace, message)"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/directory.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/directory.py",
    "file_hunks_size": 14,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/directory.py:435:141 Incompatible parameter type [6]: Expected `bool` for 4th parameter `required` to call `_directory_entries` but got `Tuple[typing.Any]`.",
    "message": " Expected `bool` for 4th parameter `required` to call `_directory_entries` but got `Tuple[typing.Any]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 435,
    "warning_line": "      for matches in _directory_entries(lines, Fallback._pop_section, (FALLBACK_ADDR, FALLBACK_NICKNAME, FALLBACK_EXTRAINFO, FALLBACK_IPV6), required = (FALLBACK_ADDR,)):"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/directory.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/directory.py",
    "file_hunks_size": 14,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "stem/directory.py:443:10 Incompatible parameter type [6]: Expected `Optional[str]` for 5th parameter `nickname` to call `Fallback.__init__` but got `Optional[Tuple[str]]`.",
    "message": " Expected `Optional[str]` for 5th parameter `nickname` to call `Fallback.__init__` but got `Optional[Tuple[str]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 443,
    "warning_line": "          nickname = matches.get(FALLBACK_NICKNAME),",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "          fingerprint = fingerprint,\n          nickname = matches.get(FALLBACK_NICKNAME),\n          has_extrainfo = matches.get(FALLBACK_EXTRAINFO) == '1',\n          orport_v6 = matches.get(FALLBACK_IPV6),\n          header = header,\n",
        "source_code_len": 233,
        "target_code": "          fingerprint = fingerprint,\n          nickname = matches.get(FALLBACK_NICKNAME),  # type: ignore\n          has_extrainfo = matches.get(FALLBACK_EXTRAINFO) == '1',\n          orport_v6 = matches.get(FALLBACK_IPV6),  # type: ignore\n          header = header,\n",
        "target_code_len": 265,
        "diff_format": "@@ -442,5 +442,5 @@\n           fingerprint = fingerprint,\n-          nickname = matches.get(FALLBACK_NICKNAME),\n+          nickname = matches.get(FALLBACK_NICKNAME),  # type: ignore\n           has_extrainfo = matches.get(FALLBACK_EXTRAINFO) == '1',\n-          orport_v6 = matches.get(FALLBACK_IPV6),\n+          orport_v6 = matches.get(FALLBACK_IPV6),  # type: ignore\n           header = header,\n",
        "source_code_with_indent": "          fingerprint = fingerprint,\n          nickname = matches.get(FALLBACK_NICKNAME),\n          has_extrainfo = matches.get(FALLBACK_EXTRAINFO) == '1',\n          orport_v6 = matches.get(FALLBACK_IPV6),\n          header = header,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "          fingerprint = fingerprint,\n          nickname = matches.get(FALLBACK_NICKNAME),  # type: ignore\n          has_extrainfo = matches.get(FALLBACK_EXTRAINFO) == '1',\n          orport_v6 = matches.get(FALLBACK_IPV6),  # type: ignore\n          header = header,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/directory.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/directory.py",
    "file_hunks_size": 14,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "stem/directory.py:445:10 Incompatible parameter type [6]: Expected `Optional[int]` for 7th parameter `orport_v6` to call `Fallback.__init__` but got `Optional[Tuple[str]]`.",
    "message": " Expected `Optional[int]` for 7th parameter `orport_v6` to call `Fallback.__init__` but got `Optional[Tuple[str]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 445,
    "warning_line": "          orport_v6 = matches.get(FALLBACK_IPV6),",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "          fingerprint = fingerprint,\n          nickname = matches.get(FALLBACK_NICKNAME),\n          has_extrainfo = matches.get(FALLBACK_EXTRAINFO) == '1',\n          orport_v6 = matches.get(FALLBACK_IPV6),\n          header = header,\n",
        "source_code_len": 233,
        "target_code": "          fingerprint = fingerprint,\n          nickname = matches.get(FALLBACK_NICKNAME),  # type: ignore\n          has_extrainfo = matches.get(FALLBACK_EXTRAINFO) == '1',\n          orport_v6 = matches.get(FALLBACK_IPV6),  # type: ignore\n          header = header,\n",
        "target_code_len": 265,
        "diff_format": "@@ -442,5 +442,5 @@\n           fingerprint = fingerprint,\n-          nickname = matches.get(FALLBACK_NICKNAME),\n+          nickname = matches.get(FALLBACK_NICKNAME),  # type: ignore\n           has_extrainfo = matches.get(FALLBACK_EXTRAINFO) == '1',\n-          orport_v6 = matches.get(FALLBACK_IPV6),\n+          orport_v6 = matches.get(FALLBACK_IPV6),  # type: ignore\n           header = header,\n",
        "source_code_with_indent": "          fingerprint = fingerprint,\n          nickname = matches.get(FALLBACK_NICKNAME),\n          has_extrainfo = matches.get(FALLBACK_EXTRAINFO) == '1',\n          orport_v6 = matches.get(FALLBACK_IPV6),\n          header = header,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "          fingerprint = fingerprint,\n          nickname = matches.get(FALLBACK_NICKNAME),  # type: ignore\n          has_extrainfo = matches.get(FALLBACK_EXTRAINFO) == '1',\n          orport_v6 = matches.get(FALLBACK_IPV6),  # type: ignore\n          header = header,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/directory.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/directory.py",
    "file_hunks_size": 14,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/directory.py:550:36 Incompatible parameter type [6]: Expected `int` for 1st positional only parameter to call `Sequence.__getitem__` but got `Directory`.",
    "message": " Expected `int` for 1st positional only parameter to call `Sequence.__getitem__` but got `Directory`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 550,
    "warning_line": "    new_directory = new_directories[fp]",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _fallback_directory_differences(previous_directories: Sequence['stem.directory.Dirctory'], new_directories: Sequence['stem.directory.Directory']) -> str:\n  \"\"\"\n",
        "source_code_len": 165,
        "target_code": "\ndef _fallback_directory_differences(previous_directories: Mapping[str, 'stem.directory.Fallback'], new_directories: Mapping[str, 'stem.directory.Fallback']) -> str:\n  \"\"\"\n",
        "target_code_len": 172,
        "diff_format": "@@ -516,3 +516,3 @@\n \n-def _fallback_directory_differences(previous_directories: Sequence['stem.directory.Dirctory'], new_directories: Sequence['stem.directory.Directory']) -> str:\n+def _fallback_directory_differences(previous_directories: Mapping[str, 'stem.directory.Fallback'], new_directories: Mapping[str, 'stem.directory.Fallback']) -> str:\n   \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED><DED>def _fallback_directory_differences(previous_directories: Sequence['stem.directory.Dirctory'], new_directories: Sequence['stem.directory.Directory']) -> str:\n  <IND>",
        "target_code_with_indent": "\n<DED><DED>def _fallback_directory_differences(previous_directories: Mapping[str, 'stem.directory.Fallback'], new_directories: Mapping[str, 'stem.directory.Fallback']) -> str:\n  <IND>"
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/directory.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/directory.py",
    "file_hunks_size": 14,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/directory.py:578:4 Incompatible parameter type [6]: Expected `Optional[int]` for 6th parameter `orport_v6` to call `Authority.__init__` but got `Tuple[str, int]`.",
    "message": " Expected `Optional[int]` for 6th parameter `orport_v6` to call `Authority.__init__` but got `Tuple[str, int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 578,
    "warning_line": "    orport_v6 = ('2001:858:2:2:aabb:0:563b:1526', 443),"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/directory.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/directory.py",
    "file_hunks_size": 14,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/directory.py:595:4 Incompatible parameter type [6]: Expected `Optional[int]` for 6th parameter `orport_v6` to call `Authority.__init__` but got `Tuple[str, int]`.",
    "message": " Expected `Optional[int]` for 6th parameter `orport_v6` to call `Authority.__init__` but got `Tuple[str, int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 595,
    "warning_line": "    orport_v6 = ('2001:638:a000:4140::ffff:189', 443),"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/directory.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/directory.py",
    "file_hunks_size": 14,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/directory.py:603:4 Incompatible parameter type [6]: Expected `Optional[int]` for 5th parameter `orport_v6` to call `Authority.__init__` but got `Tuple[str, int]`.",
    "message": " Expected `Optional[int]` for 5th parameter `orport_v6` to call `Authority.__init__` but got `Tuple[str, int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 603,
    "warning_line": "    orport_v6 = ('2001:678:558:1000::244', 443),"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/directory.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/directory.py",
    "file_hunks_size": 14,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/directory.py:613:4 Incompatible parameter type [6]: Expected `Optional[int]` for 6th parameter `orport_v6` to call `Authority.__init__` but got `Tuple[str, int]`.",
    "message": " Expected `Optional[int]` for 6th parameter `orport_v6` to call `Authority.__init__` but got `Tuple[str, int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 613,
    "warning_line": "    orport_v6 = ('2001:67c:289c::9', 80),"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/directory.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/directory.py",
    "file_hunks_size": 14,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/directory.py:638:4 Incompatible parameter type [6]: Expected `Optional[int]` for 6th parameter `orport_v6` to call `Authority.__init__` but got `Tuple[str, int]`.",
    "message": " Expected `Optional[int]` for 6th parameter `orport_v6` to call `Authority.__init__` but got `Tuple[str, int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 638,
    "warning_line": "    orport_v6 = ('2620:13:4000:6000::1000:118', 443),"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/interpreter/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/interpreter/__init__.py",
    "file_hunks_size": 6,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/interpreter/__init__.py:124:63 Incompatible parameter type [6]: Expected `stem.control.Controller` for 1st positional only parameter to call `commands.ControlInterpreter.__init__` but got `typing.Union[stem.control.BaseController, stem.socket.ControlSocket]`.",
    "message": " Expected `stem.control.Controller` for 1st positional only parameter to call `commands.ControlInterpreter.__init__` but got `typing.Union[stem.control.BaseController, stem.socket.ControlSocket]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 124,
    "warning_line": "    interpreter = stem.interpreter.commands.ControlInterpreter(controller)"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/interpreter/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/interpreter/__init__.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "stem/interpreter/__init__.py:129:8 Incompatible attribute type [8]: Attribute `_handle_event` declared in class `stem.control.BaseController` has type `BoundMethod[typing.Callable(stem.control.BaseController._handle_event)[[Named(self, stem.control.BaseController), Named(event_message, stem.response.ControlMessage)], None], stem.control.BaseController]` but is used as type `typing.Callable[[Named(event_message, typing.Any)], None]`.",
    "message": " Attribute `_handle_event` declared in class `stem.control.BaseController` has type `BoundMethod[typing.Callable(stem.control.BaseController._handle_event)[[Named(self, stem.control.BaseController), Named(event_message, stem.response.ControlMessage)], None], stem.control.BaseController]` but is used as type `typing.Callable[[Named(event_message, typing.Any)], None]`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 129,
    "warning_line": "        controller._handle_event = lambda event_message: print(format(str(event_message), *STANDARD_OUTPUT))",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "      if args.run_cmd.upper().startswith('SETEVENTS '):\n        controller._handle_event = lambda event_message: print(format(str(event_message), *STANDARD_OUTPUT))\n\n",
        "source_code_len": 166,
        "target_code": "      if args.run_cmd.upper().startswith('SETEVENTS '):\n        controller._handle_event = lambda event_message: print(format(str(event_message), *STANDARD_OUTPUT))  # type: ignore\n\n",
        "target_code_len": 182,
        "diff_format": "@@ -128,3 +126,3 @@\n       if args.run_cmd.upper().startswith('SETEVENTS '):\n-        controller._handle_event = lambda event_message: print(format(str(event_message), *STANDARD_OUTPUT))\n+        controller._handle_event = lambda event_message: print(format(str(event_message), *STANDARD_OUTPUT))  # type: ignore\n \n",
        "source_code_with_indent": "      <IND>if args.run_cmd.upper().startswith('SETEVENTS '):\n        <IND>controller._handle_event = lambda event_message: print(format(str(event_message), *STANDARD_OUTPUT))\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "      <IND>if args.run_cmd.upper().startswith('SETEVENTS '):\n        <IND>controller._handle_event = lambda event_message: print(format(str(event_message), *STANDARD_OUTPUT))  # type: ignore\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/interpreter/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/interpreter/__init__.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "stem/interpreter/__init__.py:129:8 Incompatible variable type [9]: controller._handle_event is declared to have type `BoundMethod[typing.Callable(stem.control.BaseController._handle_event)[[Named(self, stem.control.BaseController), Named(event_message, stem.response.ControlMessage)], None], stem.control.BaseController]` but is used as type `typing.Callable[[Named(event_message, typing.Any)], None]`.",
    "message": " controller._handle_event is declared to have type `BoundMethod[typing.Callable(stem.control.BaseController._handle_event)[[Named(self, stem.control.BaseController), Named(event_message, stem.response.ControlMessage)], None], stem.control.BaseController]` but is used as type `typing.Callable[[Named(event_message, typing.Any)], None]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 129,
    "warning_line": "        controller._handle_event = lambda event_message: print(format(str(event_message), *STANDARD_OUTPUT))",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "      if args.run_cmd.upper().startswith('SETEVENTS '):\n        controller._handle_event = lambda event_message: print(format(str(event_message), *STANDARD_OUTPUT))\n\n",
        "source_code_len": 166,
        "target_code": "      if args.run_cmd.upper().startswith('SETEVENTS '):\n        controller._handle_event = lambda event_message: print(format(str(event_message), *STANDARD_OUTPUT))  # type: ignore\n\n",
        "target_code_len": 182,
        "diff_format": "@@ -128,3 +126,3 @@\n       if args.run_cmd.upper().startswith('SETEVENTS '):\n-        controller._handle_event = lambda event_message: print(format(str(event_message), *STANDARD_OUTPUT))\n+        controller._handle_event = lambda event_message: print(format(str(event_message), *STANDARD_OUTPUT))  # type: ignore\n \n",
        "source_code_with_indent": "      <IND>if args.run_cmd.upper().startswith('SETEVENTS '):\n        <IND>controller._handle_event = lambda event_message: print(format(str(event_message), *STANDARD_OUTPUT))\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "      <IND>if args.run_cmd.upper().startswith('SETEVENTS '):\n        <IND>controller._handle_event = lambda event_message: print(format(str(event_message), *STANDARD_OUTPUT))  # type: ignore\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/interpreter/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/interpreter/__init__.py",
    "file_hunks_size": 6,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/interpreter/__init__.py:152:66 Incompatible parameter type [6]: Expected `stem.control.Controller` for 1st positional only parameter to call `autocomplete.Autocompleter.__init__` but got `typing.Union[stem.control.BaseController, stem.socket.ControlSocket]`.",
    "message": " Expected `stem.control.Controller` for 1st positional only parameter to call `autocomplete.Autocompleter.__init__` but got `typing.Union[stem.control.BaseController, stem.socket.ControlSocket]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 152,
    "warning_line": "      autocompleter = stem.interpreter.autocomplete.Autocompleter(controller)"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/interpreter/arguments.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/interpreter/arguments.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/interpreter/arguments.py:48:55 Incompatible parameter type [6]: Expected `typing.List[str]` for 1st positional only parameter to call `getopt.getopt` but got `Sequence[str]`.",
    "message": " Expected `typing.List[str]` for 1st positional only parameter to call `getopt.getopt` but got `Sequence[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 48,
    "warning_line": "    recognized_args, unrecognized_args = getopt.getopt(argv, OPT, OPT_EXPANDED)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import NamedTuple, Sequence\n\nDEFAULT_ARGS = {\n  'control_address': '127.0.0.1',\n  'control_port': 'default',\n  'user_provided_port': False,\n  'control_socket': '/var/run/tor/control',\n  'user_provided_socket': False,\n  'tor_path': 'tor',\n  'run_cmd': None,\n  'run_path': None,\n  'disable_color': False,\n  'print_help': False,\n}\n\n",
        "source_code_len": 342,
        "target_code": "\nfrom typing import Any, Dict, NamedTuple, Optional, Sequence\n\n",
        "target_code_len": 63,
        "diff_format": "@@ -14,16 +13,3 @@\n \n-from typing import NamedTuple, Sequence\n-\n-DEFAULT_ARGS = {\n-  'control_address': '127.0.0.1',\n-  'control_port': 'default',\n-  'user_provided_port': False,\n-  'control_socket': '/var/run/tor/control',\n-  'user_provided_socket': False,\n-  'tor_path': 'tor',\n-  'run_cmd': None,\n-  'run_path': None,\n-  'disable_color': False,\n-  'print_help': False,\n-}\n+from typing import Any, Dict, NamedTuple, Optional, Sequence\n \n",
        "source_code_with_indent": "\nfrom typing import NamedTuple, Sequence\n\nDEFAULT_ARGS = {\n  'control_address': '127.0.0.1',\n  'control_port': 'default',\n  'user_provided_port': False,\n  'control_socket': '/var/run/tor/control',\n  'user_provided_socket': False,\n  'tor_path': 'tor',\n  'run_cmd': None,\n  'run_path': None,\n  'disable_color': False,\n  'print_help': False,\n}\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import Any, Dict, NamedTuple, Optional, Sequence\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\ndef parse(argv: Sequence[str]) -> NamedTuple:\n  \"\"\"\n  Parses our arguments, providing a named tuple with their values.\n\n  :param list argv: input arguments to be parsed\n\n  :returns: a **named tuple** with our parsed arguments\n\n  :raises: **ValueError** if we got an invalid argument\n  \"\"\"\n\n  args = dict(DEFAULT_ARGS)\n\n  try:\n    recognized_args, unrecognized_args = getopt.getopt(argv, OPT, OPT_EXPANDED)\n\n    if unrecognized_args:\n      error_msg = \"aren't recognized arguments\" if len(unrecognized_args) > 1 else \"isn't a recognized argument\"\n      raise getopt.GetoptError(\"'%s' %s\" % (\"', '\".join(unrecognized_args), error_msg))\n  except Exception as exc:\n    raise ValueError('%s (for usage provide --help)' % exc)\n\n  for opt, arg in recognized_args:\n    if opt in ('-i', '--interface'):\n      if ':' in arg:\n        address, port = arg.rsplit(':', 1)\n      else:\n        address, port = None, arg\n\n      if address is not None:\n        if not stem.util.connection.is_valid_ipv4_address(address):\n          raise ValueError(\"'%s' isn't a valid IPv4 address\" % address)\n\n        args['control_address'] = address\n\n      if not stem.util.connection.is_valid_port(port):\n        raise ValueError(\"'%s' isn't a valid port number\" % port)\n\n      args['control_port'] = int(port)\n      args['user_provided_port'] = True\n    elif opt in ('-s', '--socket'):\n      args['control_socket'] = arg\n      args['user_provided_socket'] = True\n    elif opt in ('--tor'):\n      args['tor_path'] = arg\n    elif opt in ('--run'):\n      if os.path.exists(arg):\n        args['run_path'] = arg\n      else:\n        args['run_cmd'] = arg\n    elif opt == '--no-color':\n      args['disable_color'] = True\n    elif opt in ('-h', '--help'):\n      args['print_help'] = True\n\n  # translates our args dict into a named tuple\n\n  Args = collections.namedtuple('Args', args.keys())\n  return Args(**args)\n\n\ndef get_help() -> str:\n  \"\"\"\n  Provides our --help usage information.\n\n  :returns: **str** with our usage information\n  \"\"\"\n\n  return stem.interpreter.msg(\n    'msg.help',\n    address = DEFAULT_ARGS['control_address'],\n    port = DEFAULT_ARGS['control_port'],\n    socket = DEFAULT_ARGS['control_socket'],\n  )\n",
        "source_code_len": 2187,
        "target_code": "\nclass Arguments(NamedTuple):\n  control_address: str = '127.0.0.1'\n  control_port: Optional[int] = None\n  user_provided_port: bool = False\n  control_socket: str = '/var/run/tor/control'\n  user_provided_socket: bool = False\n  tor_path: str = 'tor'\n  run_cmd: Optional[str] = None\n  run_path: Optional[str] = None\n  disable_color: bool = False\n  print_help: bool = False\n\n  @staticmethod\n  def parse(argv: Sequence[str]) -> 'stem.interpreter.arguments.Arguments':\n    \"\"\"\n    Parses our commandline arguments into this class.\n\n    :param list argv: input arguments to be parsed\n\n    :returns: :class:`stem.interpreter.arguments.Arguments` for this\n      commandline input\n\n    :raises: **ValueError** if we got an invalid argument\n    \"\"\"\n\n    args = {}  # type: Dict[str, Any]\n\n    try:\n      recognized_args, unrecognized_args = getopt.getopt(argv, OPT, OPT_EXPANDED)  # type: ignore\n\n      if unrecognized_args:\n        error_msg = \"aren't recognized arguments\" if len(unrecognized_args) > 1 else \"isn't a recognized argument\"\n        raise getopt.GetoptError(\"'%s' %s\" % (\"', '\".join(unrecognized_args), error_msg))\n    except Exception as exc:\n      raise ValueError('%s (for usage provide --help)' % exc)\n\n    for opt, arg in recognized_args:\n      if opt in ('-i', '--interface'):\n        if ':' in arg:\n          address, port = arg.rsplit(':', 1)\n        else:\n          address, port = None, arg\n\n        if address is not None:\n          if not stem.util.connection.is_valid_ipv4_address(address):\n            raise ValueError(\"'%s' isn't a valid IPv4 address\" % address)\n\n          args['control_address'] = address\n\n        if not stem.util.connection.is_valid_port(port):\n          raise ValueError(\"'%s' isn't a valid port number\" % port)\n\n        args['control_port'] = int(port)\n        args['user_provided_port'] = True\n      elif opt in ('-s', '--socket'):\n        args['control_socket'] = arg\n        args['user_provided_socket'] = True\n      elif opt in ('--tor'):\n        args['tor_path'] = arg\n      elif opt in ('--run'):\n        if os.path.exists(arg):\n          args['run_path'] = arg\n        else:\n          args['run_cmd'] = arg\n      elif opt == '--no-color':\n        args['disable_color'] = True\n      elif opt in ('-h', '--help'):\n        args['print_help'] = True\n\n    return Arguments(**args)\n\n  @staticmethod\n  def get_help() -> str:\n    \"\"\"\n    Provides our --help usage information.\n\n    :returns: **str** with our usage information\n    \"\"\"\n\n    defaults = Arguments()\n\n    return stem.interpreter.msg(\n      'msg.help',\n      address = defaults.control_address,\n      port = defaults.control_port if defaults.control_port else 'default',\n      socket = defaults.control_socket,\n    )\n",
        "target_code_len": 2719,
        "diff_format": "@@ -33,75 +19,88 @@\n \n-def parse(argv: Sequence[str]) -> NamedTuple:\n-  \"\"\"\n-  Parses our arguments, providing a named tuple with their values.\n+class Arguments(NamedTuple):\n+  control_address: str = '127.0.0.1'\n+  control_port: Optional[int] = None\n+  user_provided_port: bool = False\n+  control_socket: str = '/var/run/tor/control'\n+  user_provided_socket: bool = False\n+  tor_path: str = 'tor'\n+  run_cmd: Optional[str] = None\n+  run_path: Optional[str] = None\n+  disable_color: bool = False\n+  print_help: bool = False\n \n-  :param list argv: input arguments to be parsed\n+  @staticmethod\n+  def parse(argv: Sequence[str]) -> 'stem.interpreter.arguments.Arguments':\n+    \"\"\"\n+    Parses our commandline arguments into this class.\n \n-  :returns: a **named tuple** with our parsed arguments\n+    :param list argv: input arguments to be parsed\n \n-  :raises: **ValueError** if we got an invalid argument\n-  \"\"\"\n+    :returns: :class:`stem.interpreter.arguments.Arguments` for this\n+      commandline input\n \n-  args = dict(DEFAULT_ARGS)\n+    :raises: **ValueError** if we got an invalid argument\n+    \"\"\"\n \n-  try:\n-    recognized_args, unrecognized_args = getopt.getopt(argv, OPT, OPT_EXPANDED)\n+    args = {}  # type: Dict[str, Any]\n \n-    if unrecognized_args:\n-      error_msg = \"aren't recognized arguments\" if len(unrecognized_args) > 1 else \"isn't a recognized argument\"\n-      raise getopt.GetoptError(\"'%s' %s\" % (\"', '\".join(unrecognized_args), error_msg))\n-  except Exception as exc:\n-    raise ValueError('%s (for usage provide --help)' % exc)\n+    try:\n+      recognized_args, unrecognized_args = getopt.getopt(argv, OPT, OPT_EXPANDED)  # type: ignore\n \n-  for opt, arg in recognized_args:\n-    if opt in ('-i', '--interface'):\n-      if ':' in arg:\n-        address, port = arg.rsplit(':', 1)\n-      else:\n-        address, port = None, arg\n+      if unrecognized_args:\n+        error_msg = \"aren't recognized arguments\" if len(unrecognized_args) > 1 else \"isn't a recognized argument\"\n+        raise getopt.GetoptError(\"'%s' %s\" % (\"', '\".join(unrecognized_args), error_msg))\n+    except Exception as exc:\n+      raise ValueError('%s (for usage provide --help)' % exc)\n \n-      if address is not None:\n-        if not stem.util.connection.is_valid_ipv4_address(address):\n-          raise ValueError(\"'%s' isn't a valid IPv4 address\" % address)\n+    for opt, arg in recognized_args:\n+      if opt in ('-i', '--interface'):\n+        if ':' in arg:\n+          address, port = arg.rsplit(':', 1)\n+        else:\n+          address, port = None, arg\n \n-        args['control_address'] = address\n+        if address is not None:\n+          if not stem.util.connection.is_valid_ipv4_address(address):\n+            raise ValueError(\"'%s' isn't a valid IPv4 address\" % address)\n \n-      if not stem.util.connection.is_valid_port(port):\n-        raise ValueError(\"'%s' isn't a valid port number\" % port)\n+          args['control_address'] = address\n \n-      args['control_port'] = int(port)\n-      args['user_provided_port'] = True\n-    elif opt in ('-s', '--socket'):\n-      args['control_socket'] = arg\n-      args['user_provided_socket'] = True\n-    elif opt in ('--tor'):\n-      args['tor_path'] = arg\n-    elif opt in ('--run'):\n-      if os.path.exists(arg):\n-        args['run_path'] = arg\n-      else:\n-        args['run_cmd'] = arg\n-    elif opt == '--no-color':\n-      args['disable_color'] = True\n-    elif opt in ('-h', '--help'):\n-      args['print_help'] = True\n+        if not stem.util.connection.is_valid_port(port):\n+          raise ValueError(\"'%s' isn't a valid port number\" % port)\n \n-  # translates our args dict into a named tuple\n+        args['control_port'] = int(port)\n+        args['user_provided_port'] = True\n+      elif opt in ('-s', '--socket'):\n+        args['control_socket'] = arg\n+        args['user_provided_socket'] = True\n+      elif opt in ('--tor'):\n+        args['tor_path'] = arg\n+      elif opt in ('--run'):\n+        if os.path.exists(arg):\n+          args['run_path'] = arg\n+        else:\n+          args['run_cmd'] = arg\n+      elif opt == '--no-color':\n+        args['disable_color'] = True\n+      elif opt in ('-h', '--help'):\n+        args['print_help'] = True\n \n-  Args = collections.namedtuple('Args', args.keys())\n-  return Args(**args)\n+    return Arguments(**args)\n \n+  @staticmethod\n+  def get_help() -> str:\n+    \"\"\"\n+    Provides our --help usage information.\n \n-def get_help() -> str:\n-  \"\"\"\n-  Provides our --help usage information.\n+    :returns: **str** with our usage information\n+    \"\"\"\n \n-  :returns: **str** with our usage information\n-  \"\"\"\n+    defaults = Arguments()\n \n-  return stem.interpreter.msg(\n-    'msg.help',\n-    address = DEFAULT_ARGS['control_address'],\n-    port = DEFAULT_ARGS['control_port'],\n-    socket = DEFAULT_ARGS['control_socket'],\n-  )\n+    return stem.interpreter.msg(\n+      'msg.help',\n+      address = defaults.control_address,\n+      port = defaults.control_port if defaults.control_port else 'default',\n+      socket = defaults.control_socket,\n+    )\n",
        "source_code_with_indent": "\ndef parse(argv: Sequence[str]) -> NamedTuple:\n  <IND>\"\"\"\n  Parses our arguments, providing a named tuple with their values.\n\n  :param list argv: input arguments to be parsed\n\n  :returns: a **named tuple** with our parsed arguments\n\n  :raises: **ValueError** if we got an invalid argument\n  \"\"\"\n\n  args = dict(DEFAULT_ARGS)\n\n  try:\n    <IND>recognized_args, unrecognized_args = getopt.getopt(argv, OPT, OPT_EXPANDED)\n\n    if unrecognized_args:\n      <IND>error_msg = \"aren't recognized arguments\" if len(unrecognized_args) > 1 else \"isn't a recognized argument\"\n      raise getopt.GetoptError(\"'%s' %s\" % (\"', '\".join(unrecognized_args), error_msg))\n  <DED><DED>except Exception as exc:\n    <IND>raise ValueError('%s (for usage provide --help)' % exc)\n\n  <DED>for opt, arg in recognized_args:\n    <IND>if opt in ('-i', '--interface'):\n      <IND>if ':' in arg:\n        <IND>address, port = arg.rsplit(':', 1)\n      <DED>else:\n        <IND>address, port = None, arg\n\n      <DED>if address is not None:\n        <IND>if not stem.util.connection.is_valid_ipv4_address(address):\n          <IND>raise ValueError(\"'%s' isn't a valid IPv4 address\" % address)\n\n        <DED>args['control_address'] = address\n\n      <DED>if not stem.util.connection.is_valid_port(port):\n        <IND>raise ValueError(\"'%s' isn't a valid port number\" % port)\n\n      <DED>args['control_port'] = int(port)\n      args['user_provided_port'] = True\n    <DED>elif opt in ('-s', '--socket'):\n      <IND>args['control_socket'] = arg\n      args['user_provided_socket'] = True\n    <DED>elif opt in ('--tor'):\n      <IND>args['tor_path'] = arg\n    <DED>elif opt in ('--run'):\n      <IND>if os.path.exists(arg):\n        <IND>args['run_path'] = arg\n      <DED>else:\n        <IND>args['run_cmd'] = arg\n    <DED><DED>elif opt == '--no-color':\n      <IND>args['disable_color'] = True\n    <DED>elif opt in ('-h', '--help'):\n      <IND>args['print_help'] = True\n\n  # translates our args dict into a named tuple\n\n  <DED><DED>Args = collections.namedtuple('Args', args.keys())\n  return Args(**args)\n\n\n<DED>def get_help() -> str:\n  <IND>\"\"\"\n  Provides our --help usage information.\n\n  :returns: **str** with our usage information\n  \"\"\"\n\n  return stem.interpreter.msg(\n    'msg.help',\n    address = DEFAULT_ARGS['control_address'],\n    port = DEFAULT_ARGS['control_port'],\n    socket = DEFAULT_ARGS['control_socket'],\n  )\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nclass Arguments(NamedTuple):\n  <IND>control_address: str = '127.0.0.1'\n  control_port: Optional[int] = None\n  user_provided_port: bool = False\n  control_socket: str = '/var/run/tor/control'\n  user_provided_socket: bool = False\n  tor_path: str = 'tor'\n  run_cmd: Optional[str] = None\n  run_path: Optional[str] = None\n  disable_color: bool = False\n  print_help: bool = False\n\n  @staticmethod\n  def parse(argv: Sequence[str]) -> 'stem.interpreter.arguments.Arguments':\n    <IND>\"\"\"\n    Parses our commandline arguments into this class.\n\n    :param list argv: input arguments to be parsed\n\n    :returns: :class:`stem.interpreter.arguments.Arguments` for this\n      commandline input\n\n    :raises: **ValueError** if we got an invalid argument\n    \"\"\"\n\n    args = {}  # type: Dict[str, Any]\n\n    try:\n      <IND>recognized_args, unrecognized_args = getopt.getopt(argv, OPT, OPT_EXPANDED)  # type: ignore\n\n      if unrecognized_args:\n        <IND>error_msg = \"aren't recognized arguments\" if len(unrecognized_args) > 1 else \"isn't a recognized argument\"\n        raise getopt.GetoptError(\"'%s' %s\" % (\"', '\".join(unrecognized_args), error_msg))\n    <DED><DED>except Exception as exc:\n      <IND>raise ValueError('%s (for usage provide --help)' % exc)\n\n    <DED>for opt, arg in recognized_args:\n      <IND>if opt in ('-i', '--interface'):\n        <IND>if ':' in arg:\n          <IND>address, port = arg.rsplit(':', 1)\n        <DED>else:\n          <IND>address, port = None, arg\n\n        <DED>if address is not None:\n          <IND>if not stem.util.connection.is_valid_ipv4_address(address):\n            <IND>raise ValueError(\"'%s' isn't a valid IPv4 address\" % address)\n\n          <DED>args['control_address'] = address\n\n        <DED>if not stem.util.connection.is_valid_port(port):\n          <IND>raise ValueError(\"'%s' isn't a valid port number\" % port)\n\n        <DED>args['control_port'] = int(port)\n        args['user_provided_port'] = True\n      <DED>elif opt in ('-s', '--socket'):\n        <IND>args['control_socket'] = arg\n        args['user_provided_socket'] = True\n      <DED>elif opt in ('--tor'):\n        <IND>args['tor_path'] = arg\n      <DED>elif opt in ('--run'):\n        <IND>if os.path.exists(arg):\n          <IND>args['run_path'] = arg\n        <DED>else:\n          <IND>args['run_cmd'] = arg\n      <DED><DED>elif opt == '--no-color':\n        <IND>args['disable_color'] = True\n      <DED>elif opt in ('-h', '--help'):\n        <IND>args['print_help'] = True\n\n    <DED><DED>return Arguments(**args)\n\n  <DED>@staticmethod\n  def get_help() -> str:\n    <IND>\"\"\"\n    Provides our --help usage information.\n\n    :returns: **str** with our usage information\n    \"\"\"\n\n    defaults = Arguments()\n\n    return stem.interpreter.msg(\n      'msg.help',\n      address = defaults.control_address,\n      port = defaults.control_port if defaults.control_port else 'default',\n      socket = defaults.control_socket,\n    )\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/interpreter/commands.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/interpreter/commands.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/interpreter/commands.py:96:2 Incompatible variable type [9]: sys.stdout is declared to have type `typing.TextIO` but is used as type `BinaryIO`.",
    "message": " sys.stdout is declared to have type `typing.TextIO` but is used as type `BinaryIO`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 96,
    "warning_line": "  sys.stdout, sys.stderr = stdout, stderr",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from stem.util.term import format\nfrom typing import BinaryIO, Iterator, Sequence, Tuple\n\n",
        "source_code_len": 90,
        "target_code": "from stem.util.term import format\nfrom typing import Iterator, List, TextIO\n\n",
        "target_code_len": 77,
        "diff_format": "@@ -23,3 +23,3 @@\n from stem.util.term import format\n-from typing import BinaryIO, Iterator, Sequence, Tuple\n+from typing import Iterator, List, TextIO\n \n",
        "source_code_with_indent": "from stem.util.term import format\nfrom typing import BinaryIO, Iterator, Sequence, Tuple\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from stem.util.term import format\nfrom typing import Iterator, List, TextIO\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "@contextlib.contextmanager\ndef redirect(stdout: BinaryIO, stderr: BinaryIO) -> Iterator[None]:\n  original = sys.stdout, sys.stderr\n",
        "source_code_len": 131,
        "target_code": "@contextlib.contextmanager\ndef redirect(stdout: TextIO, stderr: TextIO) -> Iterator[None]:\n  original = sys.stdout, sys.stderr\n",
        "target_code_len": 127,
        "diff_format": "@@ -93,3 +93,3 @@\n @contextlib.contextmanager\n-def redirect(stdout: BinaryIO, stderr: BinaryIO) -> Iterator[None]:\n+def redirect(stdout: TextIO, stderr: TextIO) -> Iterator[None]:\n   original = sys.stdout, sys.stderr\n",
        "source_code_with_indent": "<DED><DED>@contextlib.contextmanager\ndef redirect(stdout: BinaryIO, stderr: BinaryIO) -> Iterator[None]:\n  <IND>original = sys.stdout, sys.stderr\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED><DED>@contextlib.contextmanager\ndef redirect(stdout: TextIO, stderr: TextIO) -> Iterator[None]:\n  <IND>original = sys.stdout, sys.stderr\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n    self._controller._handle_event = handle_event_wrapper\n\n  def get_events(self, *event_types: 'stem.control.EventType') -> Sequence['stem.response.events.Event']:\n    events = list(self._received_events)\n    event_types = list(map(str.upper, event_types))  # make filtering case insensitive\n\n",
        "source_code_len": 295,
        "target_code": "\n    # type check disabled due to https://github.com/python/mypy/issues/708\n\n    self._controller._handle_event = handle_event_wrapper  # type: ignore\n\n  def get_events(self, *event_types: stem.control.EventType) -> List[stem.response.events.Event]:\n    events = list(self._received_events)\n\n",
        "target_code_len": 292,
        "diff_format": "@@ -139,7 +139,8 @@\n \n-    self._controller._handle_event = handle_event_wrapper\n-\n-  def get_events(self, *event_types: 'stem.control.EventType') -> Sequence['stem.response.events.Event']:\n+    # type check disabled due to https://github.com/python/mypy/issues/708\n+\n+    self._controller._handle_event = handle_event_wrapper  # type: ignore\n+\n+  def get_events(self, *event_types: stem.control.EventType) -> List[stem.response.events.Event]:\n     events = list(self._received_events)\n-    event_types = list(map(str.upper, event_types))  # make filtering case insensitive\n \n",
        "source_code_with_indent": "\n    <DED><DED>self._controller._handle_event = handle_event_wrapper\n\n  <DED>def get_events(self, *event_types: 'stem.control.EventType') -> Sequence['stem.response.events.Event']:\n    <IND>events = list(self._received_events)\n    event_types = list(map(str.upper, event_types))  # make filtering case insensitive\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    # type check disabled due to https://github.com/python/mypy/issues/708\n\n    <DED><DED>self._controller._handle_event = handle_event_wrapper  # type: ignore\n\n  <DED>def get_events(self, *event_types: stem.control.EventType) -> List[stem.response.events.Event]:\n    <IND>events = list(self._received_events)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "  @uses_settings\n  def run_command(self, command: str, config: 'stem.util.conf.Config', print_response: bool = False) -> Sequence[Tuple[str, int]]:\n    \"\"\"\n",
        "source_code_len": 156,
        "target_code": "  @uses_settings\n  def run_command(self, command: str, config: stem.util.conf.Config, print_response: bool = False) -> str:\n    \"\"\"\n",
        "target_code_len": 132,
        "diff_format": "@@ -298,3 +299,3 @@\n   @uses_settings\n-  def run_command(self, command: str, config: 'stem.util.conf.Config', print_response: bool = False) -> Sequence[Tuple[str, int]]:\n+  def run_command(self, command: str, config: stem.util.conf.Config, print_response: bool = False) -> str:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "  <DED>@uses_settings\n  def run_command(self, command: str, config: 'stem.util.conf.Config', print_response: bool = False) -> Sequence[Tuple[str, int]]:\n    <IND>",
        "target_code_with_indent": "  <DED>@uses_settings\n  def run_command(self, command: str, config: stem.util.conf.Config, print_response: bool = False) -> str:\n    <IND>"
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/interpreter/commands.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/interpreter/commands.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/interpreter/commands.py:96:14 Incompatible variable type [9]: sys.stderr is declared to have type `typing.TextIO` but is used as type `BinaryIO`.",
    "message": " sys.stderr is declared to have type `typing.TextIO` but is used as type `BinaryIO`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 96,
    "warning_line": "  sys.stdout, sys.stderr = stdout, stderr",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from stem.util.term import format\nfrom typing import BinaryIO, Iterator, Sequence, Tuple\n\n",
        "source_code_len": 90,
        "target_code": "from stem.util.term import format\nfrom typing import Iterator, List, TextIO\n\n",
        "target_code_len": 77,
        "diff_format": "@@ -23,3 +23,3 @@\n from stem.util.term import format\n-from typing import BinaryIO, Iterator, Sequence, Tuple\n+from typing import Iterator, List, TextIO\n \n",
        "source_code_with_indent": "from stem.util.term import format\nfrom typing import BinaryIO, Iterator, Sequence, Tuple\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from stem.util.term import format\nfrom typing import Iterator, List, TextIO\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "@contextlib.contextmanager\ndef redirect(stdout: BinaryIO, stderr: BinaryIO) -> Iterator[None]:\n  original = sys.stdout, sys.stderr\n",
        "source_code_len": 131,
        "target_code": "@contextlib.contextmanager\ndef redirect(stdout: TextIO, stderr: TextIO) -> Iterator[None]:\n  original = sys.stdout, sys.stderr\n",
        "target_code_len": 127,
        "diff_format": "@@ -93,3 +93,3 @@\n @contextlib.contextmanager\n-def redirect(stdout: BinaryIO, stderr: BinaryIO) -> Iterator[None]:\n+def redirect(stdout: TextIO, stderr: TextIO) -> Iterator[None]:\n   original = sys.stdout, sys.stderr\n",
        "source_code_with_indent": "<DED><DED>@contextlib.contextmanager\ndef redirect(stdout: BinaryIO, stderr: BinaryIO) -> Iterator[None]:\n  <IND>original = sys.stdout, sys.stderr\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED><DED>@contextlib.contextmanager\ndef redirect(stdout: TextIO, stderr: TextIO) -> Iterator[None]:\n  <IND>original = sys.stdout, sys.stderr\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n    self._controller._handle_event = handle_event_wrapper\n\n  def get_events(self, *event_types: 'stem.control.EventType') -> Sequence['stem.response.events.Event']:\n    events = list(self._received_events)\n    event_types = list(map(str.upper, event_types))  # make filtering case insensitive\n\n",
        "source_code_len": 295,
        "target_code": "\n    # type check disabled due to https://github.com/python/mypy/issues/708\n\n    self._controller._handle_event = handle_event_wrapper  # type: ignore\n\n  def get_events(self, *event_types: stem.control.EventType) -> List[stem.response.events.Event]:\n    events = list(self._received_events)\n\n",
        "target_code_len": 292,
        "diff_format": "@@ -139,7 +139,8 @@\n \n-    self._controller._handle_event = handle_event_wrapper\n-\n-  def get_events(self, *event_types: 'stem.control.EventType') -> Sequence['stem.response.events.Event']:\n+    # type check disabled due to https://github.com/python/mypy/issues/708\n+\n+    self._controller._handle_event = handle_event_wrapper  # type: ignore\n+\n+  def get_events(self, *event_types: stem.control.EventType) -> List[stem.response.events.Event]:\n     events = list(self._received_events)\n-    event_types = list(map(str.upper, event_types))  # make filtering case insensitive\n \n",
        "source_code_with_indent": "\n    <DED><DED>self._controller._handle_event = handle_event_wrapper\n\n  <DED>def get_events(self, *event_types: 'stem.control.EventType') -> Sequence['stem.response.events.Event']:\n    <IND>events = list(self._received_events)\n    event_types = list(map(str.upper, event_types))  # make filtering case insensitive\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    # type check disabled due to https://github.com/python/mypy/issues/708\n\n    <DED><DED>self._controller._handle_event = handle_event_wrapper  # type: ignore\n\n  <DED>def get_events(self, *event_types: stem.control.EventType) -> List[stem.response.events.Event]:\n    <IND>events = list(self._received_events)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "  @uses_settings\n  def run_command(self, command: str, config: 'stem.util.conf.Config', print_response: bool = False) -> Sequence[Tuple[str, int]]:\n    \"\"\"\n",
        "source_code_len": 156,
        "target_code": "  @uses_settings\n  def run_command(self, command: str, config: stem.util.conf.Config, print_response: bool = False) -> str:\n    \"\"\"\n",
        "target_code_len": 132,
        "diff_format": "@@ -298,3 +299,3 @@\n   @uses_settings\n-  def run_command(self, command: str, config: 'stem.util.conf.Config', print_response: bool = False) -> Sequence[Tuple[str, int]]:\n+  def run_command(self, command: str, config: stem.util.conf.Config, print_response: bool = False) -> str:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "  <DED>@uses_settings\n  def run_command(self, command: str, config: 'stem.util.conf.Config', print_response: bool = False) -> Sequence[Tuple[str, int]]:\n    <IND>",
        "target_code_with_indent": "  <DED>@uses_settings\n  def run_command(self, command: str, config: stem.util.conf.Config, print_response: bool = False) -> str:\n    <IND>"
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/interpreter/commands.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/interpreter/commands.py",
    "file_hunks_size": 9,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/interpreter/commands.py:140:4 Incompatible attribute type [8]: Attribute `_handle_event` declared in class `stem.control.Controller` has type `BoundMethod[typing.Callable(stem.control.Controller._handle_event)[[Named(self, stem.control.Controller), Named(event_message, str)], None], stem.control.Controller]` but is used as type `typing.Callable[[Named(event_message, stem.response.events.Event)], None]`.",
    "message": " Attribute `_handle_event` declared in class `stem.control.Controller` has type `BoundMethod[typing.Callable(stem.control.Controller._handle_event)[[Named(self, stem.control.Controller), Named(event_message, str)], None], stem.control.Controller]` but is used as type `typing.Callable[[Named(event_message, stem.response.events.Event)], None]`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 140,
    "warning_line": "    self._controller._handle_event = handle_event_wrapper"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/interpreter/commands.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/interpreter/commands.py",
    "file_hunks_size": 9,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/interpreter/commands.py:144:4 Incompatible variable type [9]: Unable to unpack `typing.List[str]`, expected a tuple.",
    "message": " Unable to unpack `typing.List[str]`, expected a tuple.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 144,
    "warning_line": "    event_types = list(map(str.upper, event_types))  # make filtering case insensitive"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/interpreter/commands.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/interpreter/commands.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/interpreter/commands.py:360:24 Incompatible parameter type [6]: Expected `BinaryIO` for 1st positional only parameter to call `redirect` but got `io.StringIO`.",
    "message": " Expected `BinaryIO` for 1st positional only parameter to call `redirect` but got `io.StringIO`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 360,
    "warning_line": "          with redirect(console_output, console_output):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from stem.util.term import format\nfrom typing import BinaryIO, Iterator, Sequence, Tuple\n\n",
        "source_code_len": 90,
        "target_code": "from stem.util.term import format\nfrom typing import Iterator, List, TextIO\n\n",
        "target_code_len": 77,
        "diff_format": "@@ -23,3 +23,3 @@\n from stem.util.term import format\n-from typing import BinaryIO, Iterator, Sequence, Tuple\n+from typing import Iterator, List, TextIO\n \n",
        "source_code_with_indent": "from stem.util.term import format\nfrom typing import BinaryIO, Iterator, Sequence, Tuple\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from stem.util.term import format\nfrom typing import Iterator, List, TextIO\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "@contextlib.contextmanager\ndef redirect(stdout: BinaryIO, stderr: BinaryIO) -> Iterator[None]:\n  original = sys.stdout, sys.stderr\n",
        "source_code_len": 131,
        "target_code": "@contextlib.contextmanager\ndef redirect(stdout: TextIO, stderr: TextIO) -> Iterator[None]:\n  original = sys.stdout, sys.stderr\n",
        "target_code_len": 127,
        "diff_format": "@@ -93,3 +93,3 @@\n @contextlib.contextmanager\n-def redirect(stdout: BinaryIO, stderr: BinaryIO) -> Iterator[None]:\n+def redirect(stdout: TextIO, stderr: TextIO) -> Iterator[None]:\n   original = sys.stdout, sys.stderr\n",
        "source_code_with_indent": "<DED><DED>@contextlib.contextmanager\ndef redirect(stdout: BinaryIO, stderr: BinaryIO) -> Iterator[None]:\n  <IND>original = sys.stdout, sys.stderr\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED><DED>@contextlib.contextmanager\ndef redirect(stdout: TextIO, stderr: TextIO) -> Iterator[None]:\n  <IND>original = sys.stdout, sys.stderr\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n    self._controller._handle_event = handle_event_wrapper\n\n  def get_events(self, *event_types: 'stem.control.EventType') -> Sequence['stem.response.events.Event']:\n    events = list(self._received_events)\n    event_types = list(map(str.upper, event_types))  # make filtering case insensitive\n\n",
        "source_code_len": 295,
        "target_code": "\n    # type check disabled due to https://github.com/python/mypy/issues/708\n\n    self._controller._handle_event = handle_event_wrapper  # type: ignore\n\n  def get_events(self, *event_types: stem.control.EventType) -> List[stem.response.events.Event]:\n    events = list(self._received_events)\n\n",
        "target_code_len": 292,
        "diff_format": "@@ -139,7 +139,8 @@\n \n-    self._controller._handle_event = handle_event_wrapper\n-\n-  def get_events(self, *event_types: 'stem.control.EventType') -> Sequence['stem.response.events.Event']:\n+    # type check disabled due to https://github.com/python/mypy/issues/708\n+\n+    self._controller._handle_event = handle_event_wrapper  # type: ignore\n+\n+  def get_events(self, *event_types: stem.control.EventType) -> List[stem.response.events.Event]:\n     events = list(self._received_events)\n-    event_types = list(map(str.upper, event_types))  # make filtering case insensitive\n \n",
        "source_code_with_indent": "\n    <DED><DED>self._controller._handle_event = handle_event_wrapper\n\n  <DED>def get_events(self, *event_types: 'stem.control.EventType') -> Sequence['stem.response.events.Event']:\n    <IND>events = list(self._received_events)\n    event_types = list(map(str.upper, event_types))  # make filtering case insensitive\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    # type check disabled due to https://github.com/python/mypy/issues/708\n\n    <DED><DED>self._controller._handle_event = handle_event_wrapper  # type: ignore\n\n  <DED>def get_events(self, *event_types: stem.control.EventType) -> List[stem.response.events.Event]:\n    <IND>events = list(self._received_events)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "  @uses_settings\n  def run_command(self, command: str, config: 'stem.util.conf.Config', print_response: bool = False) -> Sequence[Tuple[str, int]]:\n    \"\"\"\n",
        "source_code_len": 156,
        "target_code": "  @uses_settings\n  def run_command(self, command: str, config: stem.util.conf.Config, print_response: bool = False) -> str:\n    \"\"\"\n",
        "target_code_len": 132,
        "diff_format": "@@ -298,3 +299,3 @@\n   @uses_settings\n-  def run_command(self, command: str, config: 'stem.util.conf.Config', print_response: bool = False) -> Sequence[Tuple[str, int]]:\n+  def run_command(self, command: str, config: stem.util.conf.Config, print_response: bool = False) -> str:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "  <DED>@uses_settings\n  def run_command(self, command: str, config: 'stem.util.conf.Config', print_response: bool = False) -> Sequence[Tuple[str, int]]:\n    <IND>",
        "target_code_with_indent": "  <DED>@uses_settings\n  def run_command(self, command: str, config: stem.util.conf.Config, print_response: bool = False) -> str:\n    <IND>"
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/interpreter/commands.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/interpreter/commands.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/interpreter/commands.py:360:40 Incompatible parameter type [6]: Expected `BinaryIO` for 2nd positional only parameter to call `redirect` but got `io.StringIO`.",
    "message": " Expected `BinaryIO` for 2nd positional only parameter to call `redirect` but got `io.StringIO`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 360,
    "warning_line": "          with redirect(console_output, console_output):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from stem.util.term import format\nfrom typing import BinaryIO, Iterator, Sequence, Tuple\n\n",
        "source_code_len": 90,
        "target_code": "from stem.util.term import format\nfrom typing import Iterator, List, TextIO\n\n",
        "target_code_len": 77,
        "diff_format": "@@ -23,3 +23,3 @@\n from stem.util.term import format\n-from typing import BinaryIO, Iterator, Sequence, Tuple\n+from typing import Iterator, List, TextIO\n \n",
        "source_code_with_indent": "from stem.util.term import format\nfrom typing import BinaryIO, Iterator, Sequence, Tuple\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from stem.util.term import format\nfrom typing import Iterator, List, TextIO\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "@contextlib.contextmanager\ndef redirect(stdout: BinaryIO, stderr: BinaryIO) -> Iterator[None]:\n  original = sys.stdout, sys.stderr\n",
        "source_code_len": 131,
        "target_code": "@contextlib.contextmanager\ndef redirect(stdout: TextIO, stderr: TextIO) -> Iterator[None]:\n  original = sys.stdout, sys.stderr\n",
        "target_code_len": 127,
        "diff_format": "@@ -93,3 +93,3 @@\n @contextlib.contextmanager\n-def redirect(stdout: BinaryIO, stderr: BinaryIO) -> Iterator[None]:\n+def redirect(stdout: TextIO, stderr: TextIO) -> Iterator[None]:\n   original = sys.stdout, sys.stderr\n",
        "source_code_with_indent": "<DED><DED>@contextlib.contextmanager\ndef redirect(stdout: BinaryIO, stderr: BinaryIO) -> Iterator[None]:\n  <IND>original = sys.stdout, sys.stderr\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED><DED>@contextlib.contextmanager\ndef redirect(stdout: TextIO, stderr: TextIO) -> Iterator[None]:\n  <IND>original = sys.stdout, sys.stderr\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n    self._controller._handle_event = handle_event_wrapper\n\n  def get_events(self, *event_types: 'stem.control.EventType') -> Sequence['stem.response.events.Event']:\n    events = list(self._received_events)\n    event_types = list(map(str.upper, event_types))  # make filtering case insensitive\n\n",
        "source_code_len": 295,
        "target_code": "\n    # type check disabled due to https://github.com/python/mypy/issues/708\n\n    self._controller._handle_event = handle_event_wrapper  # type: ignore\n\n  def get_events(self, *event_types: stem.control.EventType) -> List[stem.response.events.Event]:\n    events = list(self._received_events)\n\n",
        "target_code_len": 292,
        "diff_format": "@@ -139,7 +139,8 @@\n \n-    self._controller._handle_event = handle_event_wrapper\n-\n-  def get_events(self, *event_types: 'stem.control.EventType') -> Sequence['stem.response.events.Event']:\n+    # type check disabled due to https://github.com/python/mypy/issues/708\n+\n+    self._controller._handle_event = handle_event_wrapper  # type: ignore\n+\n+  def get_events(self, *event_types: stem.control.EventType) -> List[stem.response.events.Event]:\n     events = list(self._received_events)\n-    event_types = list(map(str.upper, event_types))  # make filtering case insensitive\n \n",
        "source_code_with_indent": "\n    <DED><DED>self._controller._handle_event = handle_event_wrapper\n\n  <DED>def get_events(self, *event_types: 'stem.control.EventType') -> Sequence['stem.response.events.Event']:\n    <IND>events = list(self._received_events)\n    event_types = list(map(str.upper, event_types))  # make filtering case insensitive\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    # type check disabled due to https://github.com/python/mypy/issues/708\n\n    <DED><DED>self._controller._handle_event = handle_event_wrapper  # type: ignore\n\n  <DED>def get_events(self, *event_types: stem.control.EventType) -> List[stem.response.events.Event]:\n    <IND>events = list(self._received_events)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "  @uses_settings\n  def run_command(self, command: str, config: 'stem.util.conf.Config', print_response: bool = False) -> Sequence[Tuple[str, int]]:\n    \"\"\"\n",
        "source_code_len": 156,
        "target_code": "  @uses_settings\n  def run_command(self, command: str, config: stem.util.conf.Config, print_response: bool = False) -> str:\n    \"\"\"\n",
        "target_code_len": 132,
        "diff_format": "@@ -298,3 +299,3 @@\n   @uses_settings\n-  def run_command(self, command: str, config: 'stem.util.conf.Config', print_response: bool = False) -> Sequence[Tuple[str, int]]:\n+  def run_command(self, command: str, config: stem.util.conf.Config, print_response: bool = False) -> str:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "  <DED>@uses_settings\n  def run_command(self, command: str, config: 'stem.util.conf.Config', print_response: bool = False) -> Sequence[Tuple[str, int]]:\n    <IND>",
        "target_code_with_indent": "  <DED>@uses_settings\n  def run_command(self, command: str, config: stem.util.conf.Config, print_response: bool = False) -> str:\n    <IND>"
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/interpreter/commands.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/interpreter/commands.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/interpreter/commands.py:366:28 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `format` but got `typing.Union[bytes, str]`.",
    "message": " Expected `str` for 1st positional only parameter to call `format` but got `typing.Union[bytes, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 366,
    "warning_line": "            output = format(self._controller.msg(command).raw_content().strip(), *STANDARD_OUTPUT)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "          try:\n            output = format(self._controller.msg(command).raw_content().strip(), *STANDARD_OUTPUT)\n          except stem.ControllerError as exc:\n",
        "source_code_len": 160,
        "target_code": "          try:\n            output = format(str(self._controller.msg(command).raw_content()).strip(), *STANDARD_OUTPUT)\n          except stem.ControllerError as exc:\n",
        "target_code_len": 165,
        "diff_format": "@@ -365,3 +365,3 @@\n           try:\n-            output = format(self._controller.msg(command).raw_content().strip(), *STANDARD_OUTPUT)\n+            output = format(str(self._controller.msg(command).raw_content()).strip(), *STANDARD_OUTPUT)\n           except stem.ControllerError as exc:\n",
        "source_code_with_indent": "          <IND>try:\n            <IND>output = format(self._controller.msg(command).raw_content().strip(), *STANDARD_OUTPUT)\n          <DED>except stem.ControllerError as exc:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "          <IND>try:\n            <IND>output = format(str(self._controller.msg(command).raw_content()).strip(), *STANDARD_OUTPUT)\n          <DED>except stem.ControllerError as exc:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/interpreter/commands.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/interpreter/commands.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/interpreter/commands.py:379:4 Incompatible return type [7]: Expected `Sequence[Tuple[str, int]]` but got `str`.",
    "message": " Expected `Sequence[Tuple[str, int]]` but got `str`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 379,
    "warning_line": "    return output",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "  @uses_settings\n  def run_command(self, command: str, config: 'stem.util.conf.Config', print_response: bool = False) -> Sequence[Tuple[str, int]]:\n    \"\"\"\n",
        "source_code_len": 156,
        "target_code": "  @uses_settings\n  def run_command(self, command: str, config: stem.util.conf.Config, print_response: bool = False) -> str:\n    \"\"\"\n",
        "target_code_len": 132,
        "diff_format": "@@ -298,3 +299,3 @@\n   @uses_settings\n-  def run_command(self, command: str, config: 'stem.util.conf.Config', print_response: bool = False) -> Sequence[Tuple[str, int]]:\n+  def run_command(self, command: str, config: stem.util.conf.Config, print_response: bool = False) -> str:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "  <DED>@uses_settings\n  def run_command(self, command: str, config: 'stem.util.conf.Config', print_response: bool = False) -> Sequence[Tuple[str, int]]:\n    <IND>",
        "target_code_with_indent": "  <DED>@uses_settings\n  def run_command(self, command: str, config: stem.util.conf.Config, print_response: bool = False) -> str:\n    <IND>"
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/manual.py",
    "min_patch_found": false,
    "full_warning_msg": "stem/manual.py:321:27 Incompatible parameter type [6]: Expected `_typeshed.SupportsRead[Variable[typing.AnyStr <: [str, bytes]]]` for 1st positional only parameter to call `shutil.copyfileobj` but got `io.BufferedReader`.",
    "exception": "too many values to unpack (expected 2)",
    "dd_fail": true
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/manual.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/manual.py",
    "file_hunks_size": 16,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/manual.py:452:49 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `_get_categories` but got `Sequence[str]`.",
    "message": " Expected `str` for 1st positional only parameter to call `_get_categories` but got `Sequence[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 452,
    "warning_line": "    categories, config_options = _get_categories(man_output), collections.OrderedDict()",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import stem.util.log\nimport stem.util.system\n\nfrom typing import Any, Dict, Mapping, Optional, Sequence, TextIO, Tuple, Union\n\n",
        "source_code_len": 127,
        "target_code": "import stem.util.log\nimport stem.util.str_tools\nimport stem.util.system\n\nfrom typing import Any, Dict, IO, List, Mapping, Optional, Sequence, Tuple, Union\n\n",
        "target_code_len": 156,
        "diff_format": "@@ -63,5 +63,6 @@\n import stem.util.log\n+import stem.util.str_tools\n import stem.util.system\n \n-from typing import Any, Dict, Mapping, Optional, Sequence, TextIO, Tuple, Union\n+from typing import Any, Dict, IO, List, Mapping, Optional, Sequence, Tuple, Union\n \n",
        "source_code_with_indent": "import stem.util.log\nimport stem.util.system\n\nfrom typing import Any, Dict, Mapping, Optional, Sequence, TextIO, Tuple, Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import stem.util.log\nimport stem.util.str_tools\nimport stem.util.system\n\nfrom typing import Any, Dict, IO, List, Mapping, Optional, Sequence, Tuple, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef download_man_page(path: Optional[str] = None, file_handle: Optional[TextIO] = None, url: str = GITWEB_MANUAL_URL, timeout: int = 20) -> None:\n  \"\"\"\n",
        "source_code_len": 153,
        "target_code": "\ndef download_man_page(path: Optional[str] = None, file_handle: Optional[IO[bytes]] = None, url: str = GITWEB_MANUAL_URL, timeout: int = 20) -> None:\n  \"\"\"\n",
        "target_code_len": 156,
        "diff_format": "@@ -266,3 +267,3 @@\n \n-def download_man_page(path: Optional[str] = None, file_handle: Optional[TextIO] = None, url: str = GITWEB_MANUAL_URL, timeout: int = 20) -> None:\n+def download_man_page(path: Optional[str] = None, file_handle: Optional[IO[bytes]] = None, url: str = GITWEB_MANUAL_URL, timeout: int = 20) -> None:\n   \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>def download_man_page(path: Optional[str] = None, file_handle: Optional[TextIO] = None, url: str = GITWEB_MANUAL_URL, timeout: int = 20) -> None:\n  <IND>",
        "target_code_with_indent": "\n<DED>def download_man_page(path: Optional[str] = None, file_handle: Optional[IO[bytes]] = None, url: str = GITWEB_MANUAL_URL, timeout: int = 20) -> None:\n  <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _get_categories(content: str) -> Dict[str, str]:\n  \"\"\"\n",
        "source_code_len": 60,
        "target_code": "\ndef _get_categories(content: Sequence[str]) -> Dict[str, List[str]]:\n  \"\"\"\n",
        "target_code_len": 76,
        "diff_format": "@@ -563,3 +565,3 @@\n \n-def _get_categories(content: str) -> Dict[str, str]:\n+def _get_categories(content: Sequence[str]) -> Dict[str, List[str]]:\n   \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED><DED>def _get_categories(content: str) -> Dict[str, str]:\n  <IND>",
        "target_code_with_indent": "\n<DED><DED>def _get_categories(content: Sequence[str]) -> Dict[str, List[str]]:\n  <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n  def add_option(title: str, description: str) -> None:\n    if 'PER INSTANCE OPTIONS' in title:\n",
        "source_code_len": 97,
        "target_code": "\n  def add_option(title: str, description: List[str]) -> None:\n    if 'PER INSTANCE OPTIONS' in title:\n",
        "target_code_len": 103,
        "diff_format": "@@ -657,3 +661,3 @@\n \n-  def add_option(title: str, description: str) -> None:\n+  def add_option(title: str, description: List[str]) -> None:\n     if 'PER INSTANCE OPTIONS' in title:\n",
        "source_code_with_indent": "\n  def add_option(title: str, description: str) -> None:\n    <IND>if 'PER INSTANCE OPTIONS' in title:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n  def add_option(title: str, description: List[str]) -> None:\n    <IND>if 'PER INSTANCE OPTIONS' in title:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/manual.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/manual.py",
    "file_hunks_size": 16,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/manual.py:465:6 Incompatible parameter type [6]: Expected `Mapping[str, str]` for 4th positional only parameter to call `Manual.__init__` but got `Dict[str, Sequence[str]]`.",
    "message": " Expected `Mapping[str, str]` for 4th positional only parameter to call `Manual.__init__` but got `Dict[str, Sequence[str]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 465,
    "warning_line": "      _get_indented_descriptions(categories.get('COMMAND-LINE OPTIONS', [])),",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _get_indented_descriptions(lines: Sequence[str]) -> Dict[str, Sequence[str]]:\n  \"\"\"\n",
        "source_code_len": 89,
        "target_code": "\ndef _get_indented_descriptions(lines: Sequence[str]) -> Dict[str, str]:\n  \"\"\"\n",
        "target_code_len": 79,
        "diff_format": "@@ -609,3 +612,3 @@\n \n-def _get_indented_descriptions(lines: Sequence[str]) -> Dict[str, Sequence[str]]:\n+def _get_indented_descriptions(lines: Sequence[str]) -> Dict[str, str]:\n   \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>def _get_indented_descriptions(lines: Sequence[str]) -> Dict[str, Sequence[str]]:\n  <IND>",
        "target_code_with_indent": "\n<DED>def _get_indented_descriptions(lines: Sequence[str]) -> Dict[str, str]:\n  <IND>"
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/manual.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/manual.py",
    "file_hunks_size": 16,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/manual.py:466:6 Incompatible parameter type [6]: Expected `Mapping[str, str]` for 5th positional only parameter to call `Manual.__init__` but got `Dict[str, Sequence[str]]`.",
    "message": " Expected `Mapping[str, str]` for 5th positional only parameter to call `Manual.__init__` but got `Dict[str, Sequence[str]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 466,
    "warning_line": "      _get_indented_descriptions(categories.get('SIGNALS', [])),",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _get_indented_descriptions(lines: Sequence[str]) -> Dict[str, Sequence[str]]:\n  \"\"\"\n",
        "source_code_len": 89,
        "target_code": "\ndef _get_indented_descriptions(lines: Sequence[str]) -> Dict[str, str]:\n  \"\"\"\n",
        "target_code_len": 79,
        "diff_format": "@@ -609,3 +612,3 @@\n \n-def _get_indented_descriptions(lines: Sequence[str]) -> Dict[str, Sequence[str]]:\n+def _get_indented_descriptions(lines: Sequence[str]) -> Dict[str, str]:\n   \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>def _get_indented_descriptions(lines: Sequence[str]) -> Dict[str, Sequence[str]]:\n  <IND>",
        "target_code_with_indent": "\n<DED>def _get_indented_descriptions(lines: Sequence[str]) -> Dict[str, str]:\n  <IND>"
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/manual.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/manual.py",
    "file_hunks_size": 16,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/manual.py:467:6 Incompatible parameter type [6]: Expected `Mapping[str, str]` for 6th positional only parameter to call `Manual.__init__` but got `Dict[str, Sequence[str]]`.",
    "message": " Expected `Mapping[str, str]` for 6th positional only parameter to call `Manual.__init__` but got `Dict[str, Sequence[str]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 467,
    "warning_line": "      _get_indented_descriptions(categories.get('FILES', [])),",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _get_indented_descriptions(lines: Sequence[str]) -> Dict[str, Sequence[str]]:\n  \"\"\"\n",
        "source_code_len": 89,
        "target_code": "\ndef _get_indented_descriptions(lines: Sequence[str]) -> Dict[str, str]:\n  \"\"\"\n",
        "target_code_len": 79,
        "diff_format": "@@ -609,3 +612,3 @@\n \n-def _get_indented_descriptions(lines: Sequence[str]) -> Dict[str, Sequence[str]]:\n+def _get_indented_descriptions(lines: Sequence[str]) -> Dict[str, str]:\n   \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>def _get_indented_descriptions(lines: Sequence[str]) -> Dict[str, Sequence[str]]:\n  <IND>",
        "target_code_with_indent": "\n<DED>def _get_indented_descriptions(lines: Sequence[str]) -> Dict[str, str]:\n  <IND>"
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/manual.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/manual.py",
    "file_hunks_size": 16,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/manual.py:502:24 Incompatible parameter type [6]: Expected `Optional[TextIO]` for 1st parameter `file_handle` to call `download_man_page` but got `tempfile._TemporaryFileWrapper[bytes]`.",
    "message": " Expected `Optional[TextIO]` for 1st parameter `file_handle` to call `download_man_page` but got `tempfile._TemporaryFileWrapper[bytes]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 502,
    "warning_line": "      download_man_page(file_handle = tmp, timeout = timeout)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import stem.util.log\nimport stem.util.system\n\nfrom typing import Any, Dict, Mapping, Optional, Sequence, TextIO, Tuple, Union\n\n",
        "source_code_len": 127,
        "target_code": "import stem.util.log\nimport stem.util.str_tools\nimport stem.util.system\n\nfrom typing import Any, Dict, IO, List, Mapping, Optional, Sequence, Tuple, Union\n\n",
        "target_code_len": 156,
        "diff_format": "@@ -63,5 +63,6 @@\n import stem.util.log\n+import stem.util.str_tools\n import stem.util.system\n \n-from typing import Any, Dict, Mapping, Optional, Sequence, TextIO, Tuple, Union\n+from typing import Any, Dict, IO, List, Mapping, Optional, Sequence, Tuple, Union\n \n",
        "source_code_with_indent": "import stem.util.log\nimport stem.util.system\n\nfrom typing import Any, Dict, Mapping, Optional, Sequence, TextIO, Tuple, Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import stem.util.log\nimport stem.util.str_tools\nimport stem.util.system\n\nfrom typing import Any, Dict, IO, List, Mapping, Optional, Sequence, Tuple, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef download_man_page(path: Optional[str] = None, file_handle: Optional[TextIO] = None, url: str = GITWEB_MANUAL_URL, timeout: int = 20) -> None:\n  \"\"\"\n",
        "source_code_len": 153,
        "target_code": "\ndef download_man_page(path: Optional[str] = None, file_handle: Optional[IO[bytes]] = None, url: str = GITWEB_MANUAL_URL, timeout: int = 20) -> None:\n  \"\"\"\n",
        "target_code_len": 156,
        "diff_format": "@@ -266,3 +267,3 @@\n \n-def download_man_page(path: Optional[str] = None, file_handle: Optional[TextIO] = None, url: str = GITWEB_MANUAL_URL, timeout: int = 20) -> None:\n+def download_man_page(path: Optional[str] = None, file_handle: Optional[IO[bytes]] = None, url: str = GITWEB_MANUAL_URL, timeout: int = 20) -> None:\n   \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>def download_man_page(path: Optional[str] = None, file_handle: Optional[TextIO] = None, url: str = GITWEB_MANUAL_URL, timeout: int = 20) -> None:\n  <IND>",
        "target_code_with_indent": "\n<DED>def download_man_page(path: Optional[str] = None, file_handle: Optional[IO[bytes]] = None, url: str = GITWEB_MANUAL_URL, timeout: int = 20) -> None:\n  <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n  def add_option(title: str, description: str) -> None:\n    if 'PER INSTANCE OPTIONS' in title:\n",
        "source_code_len": 97,
        "target_code": "\n  def add_option(title: str, description: List[str]) -> None:\n    if 'PER INSTANCE OPTIONS' in title:\n",
        "target_code_len": 103,
        "diff_format": "@@ -657,3 +661,3 @@\n \n-  def add_option(title: str, description: str) -> None:\n+  def add_option(title: str, description: List[str]) -> None:\n     if 'PER INSTANCE OPTIONS' in title:\n",
        "source_code_with_indent": "\n  def add_option(title: str, description: str) -> None:\n    <IND>if 'PER INSTANCE OPTIONS' in title:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n  def add_option(title: str, description: List[str]) -> None:\n    <IND>if 'PER INSTANCE OPTIONS' in title:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/manual.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/manual.py",
    "file_hunks_size": 16,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/manual.py:637:2 Incompatible return type [7]: Expected `Dict[str, Sequence[str]]` but got `Dict[typing.Any, str]`.",
    "message": " Expected `Dict[str, Sequence[str]]` but got `Dict[typing.Any, str]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 637,
    "warning_line": "  return dict([(arg, ' '.join(desc_lines)) for arg, desc_lines in options.items() if desc_lines])",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _get_indented_descriptions(lines: Sequence[str]) -> Dict[str, Sequence[str]]:\n  \"\"\"\n",
        "source_code_len": 89,
        "target_code": "\ndef _get_indented_descriptions(lines: Sequence[str]) -> Dict[str, str]:\n  \"\"\"\n",
        "target_code_len": 79,
        "diff_format": "@@ -609,3 +612,3 @@\n \n-def _get_indented_descriptions(lines: Sequence[str]) -> Dict[str, Sequence[str]]:\n+def _get_indented_descriptions(lines: Sequence[str]) -> Dict[str, str]:\n   \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>def _get_indented_descriptions(lines: Sequence[str]) -> Dict[str, Sequence[str]]:\n  <IND>",
        "target_code_with_indent": "\n<DED>def _get_indented_descriptions(lines: Sequence[str]) -> Dict[str, str]:\n  <IND>"
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/manual.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/manual.py",
    "file_hunks_size": 16,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/manual.py:673:65 Incompatible parameter type [6]: Expected `str` for 4th positional only parameter to call `ConfigOption.__init__` but got `Union[Sequence[str], str]`.",
    "message": " Expected `str` for 4th positional only parameter to call `ConfigOption.__init__` but got `Union[Sequence[str], str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 673,
    "warning_line": "      config_options[name] = ConfigOption(name, category, usage, summary, _join_lines(description).strip())",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import stem.util.log\nimport stem.util.system\n\nfrom typing import Any, Dict, Mapping, Optional, Sequence, TextIO, Tuple, Union\n\n",
        "source_code_len": 127,
        "target_code": "import stem.util.log\nimport stem.util.str_tools\nimport stem.util.system\n\nfrom typing import Any, Dict, IO, List, Mapping, Optional, Sequence, Tuple, Union\n\n",
        "target_code_len": 156,
        "diff_format": "@@ -63,5 +63,6 @@\n import stem.util.log\n+import stem.util.str_tools\n import stem.util.system\n \n-from typing import Any, Dict, Mapping, Optional, Sequence, TextIO, Tuple, Union\n+from typing import Any, Dict, IO, List, Mapping, Optional, Sequence, Tuple, Union\n \n",
        "source_code_with_indent": "import stem.util.log\nimport stem.util.system\n\nfrom typing import Any, Dict, Mapping, Optional, Sequence, TextIO, Tuple, Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import stem.util.log\nimport stem.util.str_tools\nimport stem.util.system\n\nfrom typing import Any, Dict, IO, List, Mapping, Optional, Sequence, Tuple, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef download_man_page(path: Optional[str] = None, file_handle: Optional[TextIO] = None, url: str = GITWEB_MANUAL_URL, timeout: int = 20) -> None:\n  \"\"\"\n",
        "source_code_len": 153,
        "target_code": "\ndef download_man_page(path: Optional[str] = None, file_handle: Optional[IO[bytes]] = None, url: str = GITWEB_MANUAL_URL, timeout: int = 20) -> None:\n  \"\"\"\n",
        "target_code_len": 156,
        "diff_format": "@@ -266,3 +267,3 @@\n \n-def download_man_page(path: Optional[str] = None, file_handle: Optional[TextIO] = None, url: str = GITWEB_MANUAL_URL, timeout: int = 20) -> None:\n+def download_man_page(path: Optional[str] = None, file_handle: Optional[IO[bytes]] = None, url: str = GITWEB_MANUAL_URL, timeout: int = 20) -> None:\n   \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>def download_man_page(path: Optional[str] = None, file_handle: Optional[TextIO] = None, url: str = GITWEB_MANUAL_URL, timeout: int = 20) -> None:\n  <IND>",
        "target_code_with_indent": "\n<DED>def download_man_page(path: Optional[str] = None, file_handle: Optional[IO[bytes]] = None, url: str = GITWEB_MANUAL_URL, timeout: int = 20) -> None:\n  <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _add_config_options(config_options: Mapping[str, 'stem.manual.ConfigOption'], category: str, lines: Sequence[str]) -> None:\n  \"\"\"\n",
        "source_code_len": 135,
        "target_code": "\ndef _add_config_options(config_options: Dict[str, 'stem.manual.ConfigOption'], category: str, lines: Sequence[str]) -> None:\n  \"\"\"\n",
        "target_code_len": 132,
        "diff_format": "@@ -639,3 +643,3 @@\n \n-def _add_config_options(config_options: Mapping[str, 'stem.manual.ConfigOption'], category: str, lines: Sequence[str]) -> None:\n+def _add_config_options(config_options: Dict[str, 'stem.manual.ConfigOption'], category: str, lines: Sequence[str]) -> None:\n   \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>def _add_config_options(config_options: Mapping[str, 'stem.manual.ConfigOption'], category: str, lines: Sequence[str]) -> None:\n  <IND>",
        "target_code_with_indent": "\n<DED>def _add_config_options(config_options: Dict[str, 'stem.manual.ConfigOption'], category: str, lines: Sequence[str]) -> None:\n  <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n  def add_option(title: str, description: str) -> None:\n    if 'PER INSTANCE OPTIONS' in title:\n",
        "source_code_len": 97,
        "target_code": "\n  def add_option(title: str, description: List[str]) -> None:\n    if 'PER INSTANCE OPTIONS' in title:\n",
        "target_code_len": 103,
        "diff_format": "@@ -657,3 +661,3 @@\n \n-  def add_option(title: str, description: str) -> None:\n+  def add_option(title: str, description: List[str]) -> None:\n     if 'PER INSTANCE OPTIONS' in title:\n",
        "source_code_with_indent": "\n  def add_option(title: str, description: str) -> None:\n    <IND>if 'PER INSTANCE OPTIONS' in title:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n  def add_option(title: str, description: List[str]) -> None:\n    <IND>if 'PER INSTANCE OPTIONS' in title:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "      name, usage = title.split(' ', 1) if ' ' in title else (title, '')\n      summary = _config().get('manual.summary.%s' % name.lower(), '')\n      config_options[name] = ConfigOption(name, category, usage, summary, _join_lines(description).strip())\n",
        "source_code_len": 251,
        "target_code": "      name, usage = title.split(' ', 1) if ' ' in title else (title, '')\n      summary = str(_config().get('manual.summary.%s' % name.lower(), ''))\n      config_options[name] = ConfigOption(name, category, usage, summary, _join_lines(description).strip())\n",
        "target_code_len": 256,
        "diff_format": "@@ -671,3 +675,3 @@\n       name, usage = title.split(' ', 1) if ' ' in title else (title, '')\n-      summary = _config().get('manual.summary.%s' % name.lower(), '')\n+      summary = str(_config().get('manual.summary.%s' % name.lower(), ''))\n       config_options[name] = ConfigOption(name, category, usage, summary, _join_lines(description).strip())\n",
        "source_code_with_indent": "      <IND>name, usage = title.split(' ', 1) if ' ' in title else (title, '')\n      summary = _config().get('manual.summary.%s' % name.lower(), '')\n      config_options[name] = ConfigOption(name, category, usage, summary, _join_lines(description).strip())\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "      <IND>name, usage = title.split(' ', 1) if ' ' in title else (title, '')\n      summary = str(_config().get('manual.summary.%s' % name.lower(), ''))\n      config_options[name] = ConfigOption(name, category, usage, summary, _join_lines(description).strip())\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/manual.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/manual.py",
    "file_hunks_size": 16,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/manual.py:689:31 Incompatible parameter type [6]: Expected `str` for 2nd positional only parameter to anonymous call but got `typing.List[typing.Any]`.",
    "message": " Expected `str` for 2nd positional only parameter to anonymous call but got `typing.List[typing.Any]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 689,
    "warning_line": "        add_option(last_title, description)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import stem.util.log\nimport stem.util.system\n\nfrom typing import Any, Dict, Mapping, Optional, Sequence, TextIO, Tuple, Union\n\n",
        "source_code_len": 127,
        "target_code": "import stem.util.log\nimport stem.util.str_tools\nimport stem.util.system\n\nfrom typing import Any, Dict, IO, List, Mapping, Optional, Sequence, Tuple, Union\n\n",
        "target_code_len": 156,
        "diff_format": "@@ -63,5 +63,6 @@\n import stem.util.log\n+import stem.util.str_tools\n import stem.util.system\n \n-from typing import Any, Dict, Mapping, Optional, Sequence, TextIO, Tuple, Union\n+from typing import Any, Dict, IO, List, Mapping, Optional, Sequence, Tuple, Union\n \n",
        "source_code_with_indent": "import stem.util.log\nimport stem.util.system\n\nfrom typing import Any, Dict, Mapping, Optional, Sequence, TextIO, Tuple, Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import stem.util.log\nimport stem.util.str_tools\nimport stem.util.system\n\nfrom typing import Any, Dict, IO, List, Mapping, Optional, Sequence, Tuple, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef download_man_page(path: Optional[str] = None, file_handle: Optional[TextIO] = None, url: str = GITWEB_MANUAL_URL, timeout: int = 20) -> None:\n  \"\"\"\n",
        "source_code_len": 153,
        "target_code": "\ndef download_man_page(path: Optional[str] = None, file_handle: Optional[IO[bytes]] = None, url: str = GITWEB_MANUAL_URL, timeout: int = 20) -> None:\n  \"\"\"\n",
        "target_code_len": 156,
        "diff_format": "@@ -266,3 +267,3 @@\n \n-def download_man_page(path: Optional[str] = None, file_handle: Optional[TextIO] = None, url: str = GITWEB_MANUAL_URL, timeout: int = 20) -> None:\n+def download_man_page(path: Optional[str] = None, file_handle: Optional[IO[bytes]] = None, url: str = GITWEB_MANUAL_URL, timeout: int = 20) -> None:\n   \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>def download_man_page(path: Optional[str] = None, file_handle: Optional[TextIO] = None, url: str = GITWEB_MANUAL_URL, timeout: int = 20) -> None:\n  <IND>",
        "target_code_with_indent": "\n<DED>def download_man_page(path: Optional[str] = None, file_handle: Optional[IO[bytes]] = None, url: str = GITWEB_MANUAL_URL, timeout: int = 20) -> None:\n  <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n  def add_option(title: str, description: str) -> None:\n    if 'PER INSTANCE OPTIONS' in title:\n",
        "source_code_len": 97,
        "target_code": "\n  def add_option(title: str, description: List[str]) -> None:\n    if 'PER INSTANCE OPTIONS' in title:\n",
        "target_code_len": 103,
        "diff_format": "@@ -657,3 +661,3 @@\n \n-  def add_option(title: str, description: str) -> None:\n+  def add_option(title: str, description: List[str]) -> None:\n     if 'PER INSTANCE OPTIONS' in title:\n",
        "source_code_with_indent": "\n  def add_option(title: str, description: str) -> None:\n    <IND>if 'PER INSTANCE OPTIONS' in title:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n  def add_option(title: str, description: List[str]) -> None:\n    <IND>if 'PER INSTANCE OPTIONS' in title:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/manual.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/manual.py",
    "file_hunks_size": 16,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/manual.py:699:27 Incompatible parameter type [6]: Expected `str` for 2nd positional only parameter to anonymous call but got `typing.List[typing.Any]`.",
    "message": " Expected `str` for 2nd positional only parameter to anonymous call but got `typing.List[typing.Any]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 699,
    "warning_line": "    add_option(last_title, description)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import stem.util.log\nimport stem.util.system\n\nfrom typing import Any, Dict, Mapping, Optional, Sequence, TextIO, Tuple, Union\n\n",
        "source_code_len": 127,
        "target_code": "import stem.util.log\nimport stem.util.str_tools\nimport stem.util.system\n\nfrom typing import Any, Dict, IO, List, Mapping, Optional, Sequence, Tuple, Union\n\n",
        "target_code_len": 156,
        "diff_format": "@@ -63,5 +63,6 @@\n import stem.util.log\n+import stem.util.str_tools\n import stem.util.system\n \n-from typing import Any, Dict, Mapping, Optional, Sequence, TextIO, Tuple, Union\n+from typing import Any, Dict, IO, List, Mapping, Optional, Sequence, Tuple, Union\n \n",
        "source_code_with_indent": "import stem.util.log\nimport stem.util.system\n\nfrom typing import Any, Dict, Mapping, Optional, Sequence, TextIO, Tuple, Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import stem.util.log\nimport stem.util.str_tools\nimport stem.util.system\n\nfrom typing import Any, Dict, IO, List, Mapping, Optional, Sequence, Tuple, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef download_man_page(path: Optional[str] = None, file_handle: Optional[TextIO] = None, url: str = GITWEB_MANUAL_URL, timeout: int = 20) -> None:\n  \"\"\"\n",
        "source_code_len": 153,
        "target_code": "\ndef download_man_page(path: Optional[str] = None, file_handle: Optional[IO[bytes]] = None, url: str = GITWEB_MANUAL_URL, timeout: int = 20) -> None:\n  \"\"\"\n",
        "target_code_len": 156,
        "diff_format": "@@ -266,3 +267,3 @@\n \n-def download_man_page(path: Optional[str] = None, file_handle: Optional[TextIO] = None, url: str = GITWEB_MANUAL_URL, timeout: int = 20) -> None:\n+def download_man_page(path: Optional[str] = None, file_handle: Optional[IO[bytes]] = None, url: str = GITWEB_MANUAL_URL, timeout: int = 20) -> None:\n   \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>def download_man_page(path: Optional[str] = None, file_handle: Optional[TextIO] = None, url: str = GITWEB_MANUAL_URL, timeout: int = 20) -> None:\n  <IND>",
        "target_code_with_indent": "\n<DED>def download_man_page(path: Optional[str] = None, file_handle: Optional[IO[bytes]] = None, url: str = GITWEB_MANUAL_URL, timeout: int = 20) -> None:\n  <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n  def add_option(title: str, description: str) -> None:\n    if 'PER INSTANCE OPTIONS' in title:\n",
        "source_code_len": 97,
        "target_code": "\n  def add_option(title: str, description: List[str]) -> None:\n    if 'PER INSTANCE OPTIONS' in title:\n",
        "target_code_len": 103,
        "diff_format": "@@ -657,3 +661,3 @@\n \n-  def add_option(title: str, description: str) -> None:\n+  def add_option(title: str, description: List[str]) -> None:\n     if 'PER INSTANCE OPTIONS' in title:\n",
        "source_code_with_indent": "\n  def add_option(title: str, description: str) -> None:\n    <IND>if 'PER INSTANCE OPTIONS' in title:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n  def add_option(title: str, description: List[str]) -> None:\n    <IND>if 'PER INSTANCE OPTIONS' in title:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/response/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/response/__init__.py",
    "file_hunks_size": 18,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/response/__init__.py:235:6 Incompatible return type [7]: Expected `Sequence[Tuple[str, str, bytes]]` but got `typing.List[Tuple[str, str, str]]`.",
    "message": " Expected `Sequence[Tuple[str, str, bytes]]` but got `typing.List[Tuple[str, str, str]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 235,
    "warning_line": "      return [(code, div, stem.util.str_tools._to_unicode(content)) for (code, div, content) in self._parsed_content]",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import Any, Iterator, Optional, Sequence, Tuple, Union\n\n",
        "source_code_len": 69,
        "target_code": "\nfrom typing import Any, Iterator, List, Optional, Sequence, Tuple, Union\n\n",
        "target_code_len": 75,
        "diff_format": "@@ -40,3 +40,3 @@\n \n-from typing import Any, Iterator, Optional, Sequence, Tuple, Union\n+from typing import Any, Iterator, List, Optional, Sequence, Tuple, Union\n \n",
        "source_code_with_indent": "\nfrom typing import Any, Iterator, Optional, Sequence, Tuple, Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import Any, Iterator, List, Optional, Sequence, Tuple, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n  def content(self, get_bytes: bool = False) -> Sequence[Tuple[str, str, bytes]]:\n    \"\"\"\n",
        "source_code_len": 91,
        "target_code": "\n  # TODO: drop this alias when we provide better type support\n\n  def _content_bytes(self) -> List[Tuple[str, str, bytes]]:\n    return self.content(get_bytes = True)  # type: ignore\n\n  def content(self, get_bytes: bool = False) -> List[Tuple[str, str, str]]:\n    \"\"\"\n",
        "target_code_len": 267,
        "diff_format": "@@ -199,3 +239,8 @@\n \n-  def content(self, get_bytes: bool = False) -> Sequence[Tuple[str, str, bytes]]:\n+  # TODO: drop this alias when we provide better type support\n+\n+  def _content_bytes(self) -> List[Tuple[str, str, bytes]]:\n+    return self.content(get_bytes = True)  # type: ignore\n+\n+  def content(self, get_bytes: bool = False) -> List[Tuple[str, str, str]]:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n  <DED>def content(self, get_bytes: bool = False) -> Sequence[Tuple[str, str, bytes]]:\n    <IND>",
        "target_code_with_indent": "\n  # TODO: drop this alias when we provide better type support\n\n  <DED>def _content_bytes(self) -> List[Tuple[str, str, bytes]]:\n    <IND>return self.content(get_bytes = True)  # type: ignore\n\n  <DED>def content(self, get_bytes: bool = False) -> List[Tuple[str, str, str]]:\n    <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "    else:\n      return list(self._parsed_content)\n\n  def raw_content(self, get_bytes: bytes = False) -> Union[str, bytes]:\n    \"\"\"\n",
        "source_code_len": 131,
        "target_code": "    else:\n      return list(self._parsed_content)  # type: ignore\n\n  def raw_content(self, get_bytes: bool = False) -> Union[str, bytes]:\n    \"\"\"\n",
        "target_code_len": 146,
        "diff_format": "@@ -236,5 +281,5 @@\n     else:\n-      return list(self._parsed_content)\n-\n-  def raw_content(self, get_bytes: bytes = False) -> Union[str, bytes]:\n+      return list(self._parsed_content)  # type: ignore\n+\n+  def raw_content(self, get_bytes: bool = False) -> Union[str, bytes]:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "    <DED>else:\n      <IND>return list(self._parsed_content)\n\n  <DED><DED>def raw_content(self, get_bytes: bytes = False) -> Union[str, bytes]:\n    <IND>",
        "target_code_with_indent": "    <DED>else:\n      <IND>return list(self._parsed_content)  # type: ignore\n\n  <DED><DED>def raw_content(self, get_bytes: bool = False) -> Union[str, bytes]:\n    <IND>"
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/response/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/response/__init__.py",
    "file_hunks_size": 18,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "stem/response/__init__.py:239:24 Incompatible variable type [9]: get_bytes is declared to have type `bytes` but is used as type `bool`.",
    "message": " get_bytes is declared to have type `bytes` but is used as type `bool`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 239,
    "warning_line": "  def raw_content(self, get_bytes: bytes = False) -> Union[str, bytes]:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "    else:\n      return list(self._parsed_content)\n\n  def raw_content(self, get_bytes: bytes = False) -> Union[str, bytes]:\n    \"\"\"\n",
        "source_code_len": 131,
        "target_code": "    else:\n      return list(self._parsed_content)  # type: ignore\n\n  def raw_content(self, get_bytes: bool = False) -> Union[str, bytes]:\n    \"\"\"\n",
        "target_code_len": 146,
        "diff_format": "@@ -236,5 +281,5 @@\n     else:\n-      return list(self._parsed_content)\n-\n-  def raw_content(self, get_bytes: bytes = False) -> Union[str, bytes]:\n+      return list(self._parsed_content)  # type: ignore\n+\n+  def raw_content(self, get_bytes: bool = False) -> Union[str, bytes]:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "    <DED>else:\n      <IND>return list(self._parsed_content)\n\n  <DED><DED>def raw_content(self, get_bytes: bytes = False) -> Union[str, bytes]:\n    <IND>",
        "target_code_with_indent": "    <DED>else:\n      <IND>return list(self._parsed_content)  # type: ignore\n\n  <DED><DED>def raw_content(self, get_bytes: bool = False) -> Union[str, bytes]:\n    <IND>"
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/response/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/response/__init__.py",
    "file_hunks_size": 18,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "stem/response/__init__.py:446:6 Incompatible return type [7]: Expected `str` but got `Union[bytes, str]`.",
    "message": " Expected `str` but got `Union[bytes, str]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 446,
    "warning_line": "      return next_entry",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "      self._remainder = remainder\n      return next_entry\n\n",
        "source_code_len": 59,
        "target_code": "      self._remainder = remainder\n      return next_entry  # type: ignore\n\n  # TODO: drop this alias when we provide better type support\n\n  def _pop_mapping_bytes(self, quoted: bool = False, escaped: bool = False) -> Tuple[str, bytes]:\n    return self.pop_mapping(quoted, escaped, get_bytes = True)  # type: ignore\n\n",
        "target_code_len": 316,
        "diff_format": "@@ -445,3 +491,8 @@\n       self._remainder = remainder\n-      return next_entry\n+      return next_entry  # type: ignore\n+\n+  # TODO: drop this alias when we provide better type support\n+\n+  def _pop_mapping_bytes(self, quoted: bool = False, escaped: bool = False) -> Tuple[str, bytes]:\n+    return self.pop_mapping(quoted, escaped, get_bytes = True)  # type: ignore\n \n",
        "source_code_with_indent": "      self._remainder = remainder\n      return next_entry\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "      self._remainder = remainder\n      return next_entry  # type: ignore\n\n  # TODO: drop this alias when we provide better type support\n\n  <DED><DED>def _pop_mapping_bytes(self, quoted: bool = False, escaped: bool = False) -> Tuple[str, bytes]:\n    <IND>return self.pop_mapping(quoted, escaped, get_bytes = True)  # type: ignore\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/response/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/response/__init__.py",
    "file_hunks_size": 18,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "stem/response/__init__.py:482:6 Incompatible return type [7]: Expected `Tuple[str, str]` but got `Tuple[typing.Any, Union[bytes, str]]`.",
    "message": " Expected `Tuple[str, str]` but got `Tuple[typing.Any, Union[bytes, str]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 482,
    "warning_line": "      return (key, next_entry)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "      self._remainder = remainder\n      return (key, next_entry)\n\n",
        "source_code_len": 66,
        "target_code": "      self._remainder = remainder\n      return (key, next_entry)  # type: ignore\n\n",
        "target_code_len": 82,
        "diff_format": "@@ -481,3 +532,3 @@\n       self._remainder = remainder\n-      return (key, next_entry)\n+      return (key, next_entry)  # type: ignore\n \n",
        "source_code_with_indent": "      self._remainder = remainder\n      return (key, next_entry)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "      self._remainder = remainder\n      return (key, next_entry)  # type: ignore\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/response/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/response/__init__.py",
    "file_hunks_size": 18,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "stem/response/__init__.py:569:2 Incompatible return type [7]: Expected `Tuple[int, int]` but got `typing.Tuple[typing.Any, ...]`.",
    "message": " Expected `Tuple[int, int]` but got `typing.Tuple[typing.Any, ...]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 569,
    "warning_line": "  return tuple(indices)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n  return tuple(indices)\n\n",
        "source_code_len": 26,
        "target_code": "\n  return tuple(indices)  # type: ignore\n\n",
        "target_code_len": 42,
        "diff_format": "@@ -568,3 +619,3 @@\n \n-  return tuple(indices)\n+  return tuple(indices)  # type: ignore\n \n",
        "source_code_with_indent": "\n  <DED>return tuple(indices)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n  <DED>return tuple(indices)  # type: ignore\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/response/getconf.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/response/getconf.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/response/getconf.py:35:45 Incompatible parameter type [6]: Expected `typing.Union[bytes, typing.Tuple[bytes, ...]]` for 1st positional only parameter to call `bytes.startswith` but got `str`.",
    "message": " Expected `typing.Union[bytes, typing.Tuple[bytes, ...]]` for 1st positional only parameter to call `bytes.startswith` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 35,
    "warning_line": "        if code == '552' and line.startswith('Unrecognized configuration key \"') and line.endswith('\"'):"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/response/getconf.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/response/getconf.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/response/getconf.py:35:99 Incompatible parameter type [6]: Expected `typing.Union[bytes, typing.Tuple[bytes, ...]]` for 1st positional only parameter to call `bytes.endswith` but got `str`.",
    "message": " Expected `typing.Union[bytes, typing.Tuple[bytes, ...]]` for 1st positional only parameter to call `bytes.endswith` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 35,
    "warning_line": "        if code == '552' and line.startswith('Unrecognized configuration key \"') and line.endswith('\"'):"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/response/getinfo.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/response/getinfo.py",
    "file_hunks_size": 5,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/response/getinfo.py:42:45 Incompatible parameter type [6]: Expected `typing.Union[bytes, typing.Tuple[bytes, ...]]` for 1st positional only parameter to call `bytes.startswith` but got `str`.",
    "message": " Expected `typing.Union[bytes, typing.Tuple[bytes, ...]]` for 1st positional only parameter to call `bytes.startswith` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 42,
    "warning_line": "        if code == '552' and line.startswith('Unrecognized key \"') and line.endswith('\"'):"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/response/getinfo.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/response/getinfo.py",
    "file_hunks_size": 5,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/response/getinfo.py:42:85 Incompatible parameter type [6]: Expected `typing.Union[bytes, typing.Tuple[bytes, ...]]` for 1st positional only parameter to call `bytes.endswith` but got `str`.",
    "message": " Expected `typing.Union[bytes, typing.Tuple[bytes, ...]]` for 1st positional only parameter to call `bytes.endswith` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 42,
    "warning_line": "        if code == '552' and line.startswith('Unrecognized key \"') and line.endswith('\"'):"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/response/getinfo.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/response/getinfo.py",
    "file_hunks_size": 5,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/response/getinfo.py:48:47 Incompatible parameter type [6]: Expected `typing.Optional[str]` for 2nd positional only parameter to call `stem.OperationFailed.__init__` but got `typing.Optional[bytes]`.",
    "message": " Expected `typing.Optional[str]` for 2nd positional only parameter to call `stem.OperationFailed.__init__` but got `typing.Optional[bytes]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 48,
    "warning_line": "        raise stem.OperationFailed(error_code, error_msg)"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/response/mapaddress.py",
    "min_patch_found": false,
    "full_warning_msg": "stem/response/mapaddress.py:28:42 Incompatible parameter type [6]: Expected `typing.Optional[str]` for 2nd positional only parameter to call `stem.OperationFailed.__init__` but got `bytes`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/response/mapaddress.py",
    "min_patch_found": false,
    "full_warning_msg": "stem/response/mapaddress.py:30:43 Incompatible parameter type [6]: Expected `typing.Optional[str]` for 2nd positional only parameter to call `stem.OperationFailed.__init__` but got `bytes`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/response/mapaddress.py",
    "min_patch_found": false,
    "full_warning_msg": "stem/response/mapaddress.py:39:37 Incompatible parameter type [6]: Expected `typing.Optional[bytes]` for 1st positional only parameter to call `bytes.split` but got `str`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/socket.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/socket.py",
    "file_hunks_size": 19,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/socket.py:396:22 Incompatible parameter type [6]: Expected `bool` for 1st positional only parameter to call `_socket.socket.setblocking` but got `int`.",
    "message": " Expected `bool` for 1st positional only parameter to call `_socket.socket.setblocking` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 396,
    "warning_line": "        s.setblocking(0)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from types import TracebackType\nfrom typing import BinaryIO, Callable, Optional, Type\n\n",
        "source_code_len": 87,
        "target_code": "from types import TracebackType\nfrom typing import BinaryIO, Callable, List, Optional, Tuple, Type, Union, overload\n\n",
        "target_code_len": 117,
        "diff_format": "@@ -82,3 +82,3 @@\n from types import TracebackType\n-from typing import BinaryIO, Callable, Optional, Type\n+from typing import BinaryIO, Callable, List, Optional, Tuple, Type, Union, overload\n \n",
        "source_code_with_indent": "from types import TracebackType\nfrom typing import BinaryIO, Callable, Optional, Type\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from types import TracebackType\nfrom typing import BinaryIO, Callable, List, Optional, Tuple, Type, Union, overload\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n  def _recv(self, handler: Callable[[socket.socket, BinaryIO], None]) -> bytes:\n    \"\"\"\n",
        "source_code_len": 89,
        "target_code": "\n  @overload\n  def _recv(self, handler: Callable[[ssl.SSLSocket, BinaryIO], bytes]) -> bytes:\n    ...\n\n  @overload\n  def _recv(self, handler: Callable[[socket.socket, BinaryIO], stem.response.ControlMessage]) -> stem.response.ControlMessage:\n    ...\n\n  def _recv(self, handler):\n    \"\"\"\n",
        "target_code_len": 287,
        "diff_format": "@@ -244,3 +245,11 @@\n \n-  def _recv(self, handler: Callable[[socket.socket, BinaryIO], None]) -> bytes:\n+  @overload\n+  def _recv(self, handler: Callable[[ssl.SSLSocket, BinaryIO], bytes]) -> bytes:\n+    ...\n+\n+  @overload\n+  def _recv(self, handler: Callable[[socket.socket, BinaryIO], stem.response.ControlMessage]) -> stem.response.ControlMessage:\n+    ...\n+\n+  def _recv(self, handler):\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n  <DED><DED><DED>def _recv(self, handler: Callable[[socket.socket, BinaryIO], None]) -> bytes:\n    <IND>",
        "target_code_with_indent": "\n  <DED><DED><DED>@overload\n  def _recv(self, handler: Callable[[ssl.SSLSocket, BinaryIO], bytes]) -> bytes:\n    <IND>...\n\n  <DED>@overload\n  def _recv(self, handler: Callable[[socket.socket, BinaryIO], stem.response.ControlMessage]) -> stem.response.ControlMessage:\n    <IND>...\n\n  <DED>def _recv(self, handler):\n    <IND>"
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def wrapped_recv(s: socket.socket, sf: BinaryIO) -> bytes:\n      if timeout is None:\n        return s.recv()\n      else:\n        s.setblocking(0)\n        s.settimeout(timeout)\n",
        "source_code_len": 181,
        "target_code": "\n    def wrapped_recv(s: ssl.SSLSocket, sf: BinaryIO) -> bytes:\n      if timeout is None:\n        return s.recv(1024)\n      else:\n        s.setblocking(False)\n        s.settimeout(timeout)\n",
        "target_code_len": 189,
        "diff_format": "@@ -391,7 +400,7 @@\n \n-    def wrapped_recv(s: socket.socket, sf: BinaryIO) -> bytes:\n+    def wrapped_recv(s: ssl.SSLSocket, sf: BinaryIO) -> bytes:\n       if timeout is None:\n-        return s.recv()\n+        return s.recv(1024)\n       else:\n-        s.setblocking(0)\n+        s.setblocking(False)\n         s.settimeout(timeout)\n",
        "source_code_with_indent": "\n    def wrapped_recv(s: socket.socket, sf: BinaryIO) -> bytes:\n      <IND>if timeout is None:\n        <IND>return s.recv()\n      <DED>else:\n        <IND>s.setblocking(0)\n        s.settimeout(timeout)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    def wrapped_recv(s: ssl.SSLSocket, sf: BinaryIO) -> bytes:\n      <IND>if timeout is None:\n        <IND>return s.recv(1024)\n      <DED>else:\n        <IND>s.setblocking(False)\n        s.settimeout(timeout)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n  parsed_content, raw_content, first_line = None, None, True\n\n",
        "source_code_len": 63,
        "target_code": "\n  parsed_content = []  # type: List[Tuple[str, str, bytes]]\n  raw_content = bytearray()\n  first_line = True\n\n",
        "target_code_len": 110,
        "diff_format": "@@ -620,3 +631,5 @@\n \n-  parsed_content, raw_content, first_line = None, None, True\n+  parsed_content = []  # type: List[Tuple[str, str, bytes]]\n+  raw_content = bytearray()\n+  first_line = True\n \n",
        "source_code_with_indent": "\n  parsed_content, raw_content, first_line = None, None, True\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n  parsed_content = []  # type: List[Tuple[str, str, bytes]]\n  raw_content = bytearray()\n  first_line = True\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/socket.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/socket.py",
    "file_hunks_size": 19,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/socket.py:402:10 Incompatible return type [7]: Expected `bytes` but got `None`.",
    "message": " Expected `bytes` but got `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 402,
    "warning_line": "          return None"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/socket.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/socket.py",
    "file_hunks_size": 19,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/socket.py:406:22 Incompatible parameter type [6]: Expected `typing.Callable[[socket.socket, BinaryIO], None]` for 1st positional only parameter to call `BaseSocket._recv` but got `typing.Callable[[Named(s, socket.socket), Named(sf, BinaryIO)], bytes]`.",
    "message": " Expected `typing.Callable[[socket.socket, BinaryIO], None]` for 1st positional only parameter to call `BaseSocket._recv` but got `typing.Callable[[Named(s, socket.socket), Named(sf, BinaryIO)], bytes]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 406,
    "warning_line": "    return self._recv(wrapped_recv)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from types import TracebackType\nfrom typing import BinaryIO, Callable, Optional, Type\n\n",
        "source_code_len": 87,
        "target_code": "from types import TracebackType\nfrom typing import BinaryIO, Callable, List, Optional, Tuple, Type, Union, overload\n\n",
        "target_code_len": 117,
        "diff_format": "@@ -82,3 +82,3 @@\n from types import TracebackType\n-from typing import BinaryIO, Callable, Optional, Type\n+from typing import BinaryIO, Callable, List, Optional, Tuple, Type, Union, overload\n \n",
        "source_code_with_indent": "from types import TracebackType\nfrom typing import BinaryIO, Callable, Optional, Type\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from types import TracebackType\nfrom typing import BinaryIO, Callable, List, Optional, Tuple, Type, Union, overload\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n  def _recv(self, handler: Callable[[socket.socket, BinaryIO], None]) -> bytes:\n    \"\"\"\n",
        "source_code_len": 89,
        "target_code": "\n  @overload\n  def _recv(self, handler: Callable[[ssl.SSLSocket, BinaryIO], bytes]) -> bytes:\n    ...\n\n  @overload\n  def _recv(self, handler: Callable[[socket.socket, BinaryIO], stem.response.ControlMessage]) -> stem.response.ControlMessage:\n    ...\n\n  def _recv(self, handler):\n    \"\"\"\n",
        "target_code_len": 287,
        "diff_format": "@@ -244,3 +245,11 @@\n \n-  def _recv(self, handler: Callable[[socket.socket, BinaryIO], None]) -> bytes:\n+  @overload\n+  def _recv(self, handler: Callable[[ssl.SSLSocket, BinaryIO], bytes]) -> bytes:\n+    ...\n+\n+  @overload\n+  def _recv(self, handler: Callable[[socket.socket, BinaryIO], stem.response.ControlMessage]) -> stem.response.ControlMessage:\n+    ...\n+\n+  def _recv(self, handler):\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n  <DED><DED><DED>def _recv(self, handler: Callable[[socket.socket, BinaryIO], None]) -> bytes:\n    <IND>",
        "target_code_with_indent": "\n  <DED><DED><DED>@overload\n  def _recv(self, handler: Callable[[ssl.SSLSocket, BinaryIO], bytes]) -> bytes:\n    <IND>...\n\n  <DED>@overload\n  def _recv(self, handler: Callable[[socket.socket, BinaryIO], stem.response.ControlMessage]) -> stem.response.ControlMessage:\n    <IND>...\n\n  <DED>def _recv(self, handler):\n    <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n  parsed_content, raw_content, first_line = None, None, True\n\n",
        "source_code_len": 63,
        "target_code": "\n  parsed_content = []  # type: List[Tuple[str, str, bytes]]\n  raw_content = bytearray()\n  first_line = True\n\n",
        "target_code_len": 110,
        "diff_format": "@@ -620,3 +631,5 @@\n \n-  parsed_content, raw_content, first_line = None, None, True\n+  parsed_content = []  # type: List[Tuple[str, str, bytes]]\n+  raw_content = bytearray()\n+  first_line = True\n \n",
        "source_code_with_indent": "\n  parsed_content, raw_content, first_line = None, None, True\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n  parsed_content = []  # type: List[Tuple[str, str, bytes]]\n  raw_content = bytearray()\n  first_line = True\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/socket.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/socket.py",
    "file_hunks_size": 19,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/socket.py:459:4 Incompatible return type [7]: Expected `stem.response.ControlMessage` but got `bytes`.",
    "message": " Expected `stem.response.ControlMessage` but got `bytes`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 459,
    "warning_line": "    return self._recv(lambda s, sf: recv_message(sf))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from types import TracebackType\nfrom typing import BinaryIO, Callable, Optional, Type\n\n",
        "source_code_len": 87,
        "target_code": "from types import TracebackType\nfrom typing import BinaryIO, Callable, List, Optional, Tuple, Type, Union, overload\n\n",
        "target_code_len": 117,
        "diff_format": "@@ -82,3 +82,3 @@\n from types import TracebackType\n-from typing import BinaryIO, Callable, Optional, Type\n+from typing import BinaryIO, Callable, List, Optional, Tuple, Type, Union, overload\n \n",
        "source_code_with_indent": "from types import TracebackType\nfrom typing import BinaryIO, Callable, Optional, Type\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from types import TracebackType\nfrom typing import BinaryIO, Callable, List, Optional, Tuple, Type, Union, overload\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n  def _recv(self, handler: Callable[[socket.socket, BinaryIO], None]) -> bytes:\n    \"\"\"\n",
        "source_code_len": 89,
        "target_code": "\n  @overload\n  def _recv(self, handler: Callable[[ssl.SSLSocket, BinaryIO], bytes]) -> bytes:\n    ...\n\n  @overload\n  def _recv(self, handler: Callable[[socket.socket, BinaryIO], stem.response.ControlMessage]) -> stem.response.ControlMessage:\n    ...\n\n  def _recv(self, handler):\n    \"\"\"\n",
        "target_code_len": 287,
        "diff_format": "@@ -244,3 +245,11 @@\n \n-  def _recv(self, handler: Callable[[socket.socket, BinaryIO], None]) -> bytes:\n+  @overload\n+  def _recv(self, handler: Callable[[ssl.SSLSocket, BinaryIO], bytes]) -> bytes:\n+    ...\n+\n+  @overload\n+  def _recv(self, handler: Callable[[socket.socket, BinaryIO], stem.response.ControlMessage]) -> stem.response.ControlMessage:\n+    ...\n+\n+  def _recv(self, handler):\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n  <DED><DED><DED>def _recv(self, handler: Callable[[socket.socket, BinaryIO], None]) -> bytes:\n    <IND>",
        "target_code_with_indent": "\n  <DED><DED><DED>@overload\n  def _recv(self, handler: Callable[[ssl.SSLSocket, BinaryIO], bytes]) -> bytes:\n    <IND>...\n\n  <DED>@overload\n  def _recv(self, handler: Callable[[socket.socket, BinaryIO], stem.response.ControlMessage]) -> stem.response.ControlMessage:\n    <IND>...\n\n  <DED>def _recv(self, handler):\n    <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n  parsed_content, raw_content, first_line = None, None, True\n\n",
        "source_code_len": 63,
        "target_code": "\n  parsed_content = []  # type: List[Tuple[str, str, bytes]]\n  raw_content = bytearray()\n  first_line = True\n\n",
        "target_code_len": 110,
        "diff_format": "@@ -620,3 +631,5 @@\n \n-  parsed_content, raw_content, first_line = None, None, True\n+  parsed_content = []  # type: List[Tuple[str, str, bytes]]\n+  raw_content = bytearray()\n+  first_line = True\n \n",
        "source_code_with_indent": "\n  parsed_content, raw_content, first_line = None, None, True\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n  parsed_content = []  # type: List[Tuple[str, str, bytes]]\n  raw_content = bytearray()\n  first_line = True\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/socket.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/socket.py",
    "file_hunks_size": 19,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/socket.py:459:22 Incompatible parameter type [6]: Expected `typing.Callable[[socket.socket, BinaryIO], None]` for 1st positional only parameter to call `BaseSocket._recv` but got `typing.Callable[[Named(s, typing.Any), Named(sf, typing.Any)], stem.response.ControlMessage]`.",
    "message": " Expected `typing.Callable[[socket.socket, BinaryIO], None]` for 1st positional only parameter to call `BaseSocket._recv` but got `typing.Callable[[Named(s, typing.Any), Named(sf, typing.Any)], stem.response.ControlMessage]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 459,
    "warning_line": "    return self._recv(lambda s, sf: recv_message(sf))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from types import TracebackType\nfrom typing import BinaryIO, Callable, Optional, Type\n\n",
        "source_code_len": 87,
        "target_code": "from types import TracebackType\nfrom typing import BinaryIO, Callable, List, Optional, Tuple, Type, Union, overload\n\n",
        "target_code_len": 117,
        "diff_format": "@@ -82,3 +82,3 @@\n from types import TracebackType\n-from typing import BinaryIO, Callable, Optional, Type\n+from typing import BinaryIO, Callable, List, Optional, Tuple, Type, Union, overload\n \n",
        "source_code_with_indent": "from types import TracebackType\nfrom typing import BinaryIO, Callable, Optional, Type\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from types import TracebackType\nfrom typing import BinaryIO, Callable, List, Optional, Tuple, Type, Union, overload\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n  def _recv(self, handler: Callable[[socket.socket, BinaryIO], None]) -> bytes:\n    \"\"\"\n",
        "source_code_len": 89,
        "target_code": "\n  @overload\n  def _recv(self, handler: Callable[[ssl.SSLSocket, BinaryIO], bytes]) -> bytes:\n    ...\n\n  @overload\n  def _recv(self, handler: Callable[[socket.socket, BinaryIO], stem.response.ControlMessage]) -> stem.response.ControlMessage:\n    ...\n\n  def _recv(self, handler):\n    \"\"\"\n",
        "target_code_len": 287,
        "diff_format": "@@ -244,3 +245,11 @@\n \n-  def _recv(self, handler: Callable[[socket.socket, BinaryIO], None]) -> bytes:\n+  @overload\n+  def _recv(self, handler: Callable[[ssl.SSLSocket, BinaryIO], bytes]) -> bytes:\n+    ...\n+\n+  @overload\n+  def _recv(self, handler: Callable[[socket.socket, BinaryIO], stem.response.ControlMessage]) -> stem.response.ControlMessage:\n+    ...\n+\n+  def _recv(self, handler):\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n  <DED><DED><DED>def _recv(self, handler: Callable[[socket.socket, BinaryIO], None]) -> bytes:\n    <IND>",
        "target_code_with_indent": "\n  <DED><DED><DED>@overload\n  def _recv(self, handler: Callable[[ssl.SSLSocket, BinaryIO], bytes]) -> bytes:\n    <IND>...\n\n  <DED>@overload\n  def _recv(self, handler: Callable[[socket.socket, BinaryIO], stem.response.ControlMessage]) -> stem.response.ControlMessage:\n    <IND>...\n\n  <DED>def _recv(self, handler):\n    <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n  parsed_content, raw_content, first_line = None, None, True\n\n",
        "source_code_len": 63,
        "target_code": "\n  parsed_content = []  # type: List[Tuple[str, str, bytes]]\n  raw_content = bytearray()\n  first_line = True\n\n",
        "target_code_len": 110,
        "diff_format": "@@ -620,3 +631,5 @@\n \n-  parsed_content, raw_content, first_line = None, None, True\n+  parsed_content = []  # type: List[Tuple[str, str, bytes]]\n+  raw_content = bytearray()\n+  first_line = True\n \n",
        "source_code_with_indent": "\n  parsed_content, raw_content, first_line = None, None, True\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n  parsed_content = []  # type: List[Tuple[str, str, bytes]]\n  raw_content = bytearray()\n  first_line = True\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/socket.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/socket.py",
    "file_hunks_size": 19,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/socket.py:572:4 Incompatible variable type [9]: message is declared to have type `str` but is used as type `None`.",
    "message": " message is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 572,
    "warning_line": "    message = send_formatting(message)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef send_formatting(message: str) -> None:\n  \"\"\"\n",
        "source_code_len": 50,
        "target_code": "\ndef send_formatting(message: str) -> str:\n  \"\"\"\n",
        "target_code_len": 49,
        "diff_format": "@@ -724,3 +737,3 @@\n \n-def send_formatting(message: str) -> None:\n+def send_formatting(message: str) -> str:\n   \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED><DED><DED>def send_formatting(message: str) -> None:\n  <IND>",
        "target_code_with_indent": "\n<DED><DED><DED>def send_formatting(message: str) -> str:\n  <IND>"
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/socket.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/socket.py",
    "file_hunks_size": 19,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/socket.py:652:96 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `log.escape` but got `bytes`.",
    "message": " Expected `str` for 1st positional only parameter to call `log.escape` but got `bytes`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 652,
    "warning_line": "      log.info(ERROR_MSG % ('ProtocolError', 'malformed status code/divider, \"%s\"' % log.escape(line)))",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    elif not MESSAGE_PREFIX.match(line):\n      log.info(ERROR_MSG % ('ProtocolError', 'malformed status code/divider, \"%s\"' % log.escape(line)))\n      raise stem.ProtocolError('Badly formatted reply line: beginning is malformed')\n    elif not line.endswith(b'\\r\\n'):\n      log.info(ERROR_MSG % ('ProtocolError', 'no CRLF linebreak, \"%s\"' % log.escape(line)))\n      raise stem.ProtocolError('All lines should end with CRLF')\n",
        "source_code_len": 424,
        "target_code": "    elif not MESSAGE_PREFIX.match(line):\n      log.info(ERROR_MSG % ('ProtocolError', 'malformed status code/divider, \"%s\"' % log.escape(line.decode('utf-8'))))\n      raise stem.ProtocolError('Badly formatted reply line: beginning is malformed')\n    elif not line.endswith(b'\\r\\n'):\n      log.info(ERROR_MSG % ('ProtocolError', 'no CRLF linebreak, \"%s\"' % log.escape(line.decode('utf-8'))))\n      raise stem.ProtocolError('All lines should end with CRLF')\n",
        "target_code_len": 456,
        "diff_format": "@@ -651,6 +664,6 @@\n     elif not MESSAGE_PREFIX.match(line):\n-      log.info(ERROR_MSG % ('ProtocolError', 'malformed status code/divider, \"%s\"' % log.escape(line)))\n+      log.info(ERROR_MSG % ('ProtocolError', 'malformed status code/divider, \"%s\"' % log.escape(line.decode('utf-8'))))\n       raise stem.ProtocolError('Badly formatted reply line: beginning is malformed')\n     elif not line.endswith(b'\\r\\n'):\n-      log.info(ERROR_MSG % ('ProtocolError', 'no CRLF linebreak, \"%s\"' % log.escape(line)))\n+      log.info(ERROR_MSG % ('ProtocolError', 'no CRLF linebreak, \"%s\"' % log.escape(line.decode('utf-8'))))\n       raise stem.ProtocolError('All lines should end with CRLF')\n",
        "source_code_with_indent": "    <DED>elif not MESSAGE_PREFIX.match(line):\n      <IND>log.info(ERROR_MSG % ('ProtocolError', 'malformed status code/divider, \"%s\"' % log.escape(line)))\n      raise stem.ProtocolError('Badly formatted reply line: beginning is malformed')\n    <DED>elif not line.endswith(b'\\r\\n'):\n      <IND>log.info(ERROR_MSG % ('ProtocolError', 'no CRLF linebreak, \"%s\"' % log.escape(line)))\n      raise stem.ProtocolError('All lines should end with CRLF')\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>elif not MESSAGE_PREFIX.match(line):\n      <IND>log.info(ERROR_MSG % ('ProtocolError', 'malformed status code/divider, \"%s\"' % log.escape(line.decode('utf-8'))))\n      raise stem.ProtocolError('Badly formatted reply line: beginning is malformed')\n    <DED>elif not line.endswith(b'\\r\\n'):\n      <IND>log.info(ERROR_MSG % ('ProtocolError', 'no CRLF linebreak, \"%s\"' % log.escape(line.decode('utf-8'))))\n      raise stem.ProtocolError('All lines should end with CRLF')\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/socket.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/socket.py",
    "file_hunks_size": 19,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/socket.py:655:84 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `log.escape` but got `bytes`.",
    "message": " Expected `str` for 1st positional only parameter to call `log.escape` but got `bytes`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 655,
    "warning_line": "      log.info(ERROR_MSG % ('ProtocolError', 'no CRLF linebreak, \"%s\"' % log.escape(line)))",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    elif not MESSAGE_PREFIX.match(line):\n      log.info(ERROR_MSG % ('ProtocolError', 'malformed status code/divider, \"%s\"' % log.escape(line)))\n      raise stem.ProtocolError('Badly formatted reply line: beginning is malformed')\n    elif not line.endswith(b'\\r\\n'):\n      log.info(ERROR_MSG % ('ProtocolError', 'no CRLF linebreak, \"%s\"' % log.escape(line)))\n      raise stem.ProtocolError('All lines should end with CRLF')\n",
        "source_code_len": 424,
        "target_code": "    elif not MESSAGE_PREFIX.match(line):\n      log.info(ERROR_MSG % ('ProtocolError', 'malformed status code/divider, \"%s\"' % log.escape(line.decode('utf-8'))))\n      raise stem.ProtocolError('Badly formatted reply line: beginning is malformed')\n    elif not line.endswith(b'\\r\\n'):\n      log.info(ERROR_MSG % ('ProtocolError', 'no CRLF linebreak, \"%s\"' % log.escape(line.decode('utf-8'))))\n      raise stem.ProtocolError('All lines should end with CRLF')\n",
        "target_code_len": 456,
        "diff_format": "@@ -651,6 +664,6 @@\n     elif not MESSAGE_PREFIX.match(line):\n-      log.info(ERROR_MSG % ('ProtocolError', 'malformed status code/divider, \"%s\"' % log.escape(line)))\n+      log.info(ERROR_MSG % ('ProtocolError', 'malformed status code/divider, \"%s\"' % log.escape(line.decode('utf-8'))))\n       raise stem.ProtocolError('Badly formatted reply line: beginning is malformed')\n     elif not line.endswith(b'\\r\\n'):\n-      log.info(ERROR_MSG % ('ProtocolError', 'no CRLF linebreak, \"%s\"' % log.escape(line)))\n+      log.info(ERROR_MSG % ('ProtocolError', 'no CRLF linebreak, \"%s\"' % log.escape(line.decode('utf-8'))))\n       raise stem.ProtocolError('All lines should end with CRLF')\n",
        "source_code_with_indent": "    <DED>elif not MESSAGE_PREFIX.match(line):\n      <IND>log.info(ERROR_MSG % ('ProtocolError', 'malformed status code/divider, \"%s\"' % log.escape(line)))\n      raise stem.ProtocolError('Badly formatted reply line: beginning is malformed')\n    <DED>elif not line.endswith(b'\\r\\n'):\n      <IND>log.info(ERROR_MSG % ('ProtocolError', 'no CRLF linebreak, \"%s\"' % log.escape(line)))\n      raise stem.ProtocolError('All lines should end with CRLF')\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>elif not MESSAGE_PREFIX.match(line):\n      <IND>log.info(ERROR_MSG % ('ProtocolError', 'malformed status code/divider, \"%s\"' % log.escape(line.decode('utf-8'))))\n      raise stem.ProtocolError('Badly formatted reply line: beginning is malformed')\n    <DED>elif not line.endswith(b'\\r\\n'):\n      <IND>log.info(ERROR_MSG % ('ProtocolError', 'no CRLF linebreak, \"%s\"' % log.escape(line.decode('utf-8'))))\n      raise stem.ProtocolError('All lines should end with CRLF')\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/socket.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/socket.py",
    "file_hunks_size": 19,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/socket.py:669:85 Incompatible parameter type [6]: Expected `Optional[int]` for 3rd parameter `arrived_at` to call `stem.response.ControlMessage.__init__` but got `Optional[float]`.",
    "message": " Expected `Optional[int]` for 3rd parameter `arrived_at` to call `stem.response.ControlMessage.__init__` but got `Optional[float]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 669,
    "warning_line": "        return stem.response.ControlMessage([(status_code, divider, content)], line, arrived_at = arrived_at)"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/socket.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/socket.py",
    "file_hunks_size": 19,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/socket.py:682:42 Incompatible parameter type [6]: Expected `typing.Sequence[typing.Tuple[str, str, bytes]]` for 1st positional only parameter to call `stem.response.ControlMessage.__init__` but got `Optional[typing.List[typing.Any]]`.",
    "message": " Expected `typing.Sequence[typing.Tuple[str, str, bytes]]` for 1st positional only parameter to call `stem.response.ControlMessage.__init__` but got `Optional[typing.List[typing.Any]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 682,
    "warning_line": "      return stem.response.ControlMessage(parsed_content, bytes(raw_content), arrived_at = arrived_at)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from types import TracebackType\nfrom typing import BinaryIO, Callable, Optional, Type\n\n",
        "source_code_len": 87,
        "target_code": "from types import TracebackType\nfrom typing import BinaryIO, Callable, List, Optional, Tuple, Type, Union, overload\n\n",
        "target_code_len": 117,
        "diff_format": "@@ -82,3 +82,3 @@\n from types import TracebackType\n-from typing import BinaryIO, Callable, Optional, Type\n+from typing import BinaryIO, Callable, List, Optional, Tuple, Type, Union, overload\n \n",
        "source_code_with_indent": "from types import TracebackType\nfrom typing import BinaryIO, Callable, Optional, Type\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from types import TracebackType\nfrom typing import BinaryIO, Callable, List, Optional, Tuple, Type, Union, overload\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n  parsed_content, raw_content, first_line = None, None, True\n\n",
        "source_code_len": 63,
        "target_code": "\n  parsed_content = []  # type: List[Tuple[str, str, bytes]]\n  raw_content = bytearray()\n  first_line = True\n\n",
        "target_code_len": 110,
        "diff_format": "@@ -620,3 +631,5 @@\n \n-  parsed_content, raw_content, first_line = None, None, True\n+  parsed_content = []  # type: List[Tuple[str, str, bytes]]\n+  raw_content = bytearray()\n+  first_line = True\n \n",
        "source_code_with_indent": "\n  parsed_content, raw_content, first_line = None, None, True\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n  parsed_content = []  # type: List[Tuple[str, str, bytes]]\n  raw_content = bytearray()\n  first_line = True\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/socket.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/socket.py",
    "file_hunks_size": 19,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/socket.py:682:78 Incompatible parameter type [6]: Expected `Optional[int]` for 3rd parameter `arrived_at` to call `stem.response.ControlMessage.__init__` but got `Optional[float]`.",
    "message": " Expected `Optional[int]` for 3rd parameter `arrived_at` to call `stem.response.ControlMessage.__init__` but got `Optional[float]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 682,
    "warning_line": "      return stem.response.ControlMessage(parsed_content, bytes(raw_content), arrived_at = arrived_at)"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/socket.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/socket.py",
    "file_hunks_size": 19,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/socket.py:694:164 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `log.escape` but got `bytes`.",
    "message": " Expected `str` for 1st positional only parameter to call `log.escape` but got `bytes`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 694,
    "warning_line": "          log.info(ERROR_MSG % ('SocketClosed', 'received an exception while mid-way through a data reply (exception: \"%s\", read content: \"%s\")' % (exc, log.escape(bytes(raw_content)))))",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        except socket.error as exc:\n          log.info(ERROR_MSG % ('SocketClosed', 'received an exception while mid-way through a data reply (exception: \"%s\", read content: \"%s\")' % (exc, log.escape(bytes(raw_content)))))\n          raise stem.SocketClosed(exc)\n",
        "source_code_len": 262,
        "target_code": "        except socket.error as exc:\n          log.info(ERROR_MSG % ('SocketClosed', 'received an exception while mid-way through a data reply (exception: \"%s\", read content: \"%s\")' % (exc, log.escape(bytes(raw_content).decode('utf-8')))))\n          raise stem.SocketClosed(exc)\n",
        "target_code_len": 278,
        "diff_format": "@@ -693,3 +706,3 @@\n         except socket.error as exc:\n-          log.info(ERROR_MSG % ('SocketClosed', 'received an exception while mid-way through a data reply (exception: \"%s\", read content: \"%s\")' % (exc, log.escape(bytes(raw_content)))))\n+          log.info(ERROR_MSG % ('SocketClosed', 'received an exception while mid-way through a data reply (exception: \"%s\", read content: \"%s\")' % (exc, log.escape(bytes(raw_content).decode('utf-8')))))\n           raise stem.SocketClosed(exc)\n",
        "source_code_with_indent": "        <DED>except socket.error as exc:\n          <IND>log.info(ERROR_MSG % ('SocketClosed', 'received an exception while mid-way through a data reply (exception: \"%s\", read content: \"%s\")' % (exc, log.escape(bytes(raw_content)))))\n          raise stem.SocketClosed(exc)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>except socket.error as exc:\n          <IND>log.info(ERROR_MSG % ('SocketClosed', 'received an exception while mid-way through a data reply (exception: \"%s\", read content: \"%s\")' % (exc, log.escape(bytes(raw_content).decode('utf-8')))))\n          raise stem.SocketClosed(exc)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/socket.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/socket.py",
    "file_hunks_size": 19,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/socket.py:698:112 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `log.escape` but got `bytes`.",
    "message": " Expected `str` for 1st positional only parameter to call `log.escape` but got `bytes`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 698,
    "warning_line": "          log.info(ERROR_MSG % ('ProtocolError', 'CRLF linebreaks missing from a data reply, \"%s\"' % log.escape(bytes(raw_content))))",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        if not line.endswith(b'\\r\\n'):\n          log.info(ERROR_MSG % ('ProtocolError', 'CRLF linebreaks missing from a data reply, \"%s\"' % log.escape(bytes(raw_content))))\n          raise stem.ProtocolError('All lines should end with CRLF')\n",
        "source_code_len": 242,
        "target_code": "        if not line.endswith(b'\\r\\n'):\n          log.info(ERROR_MSG % ('ProtocolError', 'CRLF linebreaks missing from a data reply, \"%s\"' % log.escape(bytes(raw_content).decode('utf-8'))))\n          raise stem.ProtocolError('All lines should end with CRLF')\n",
        "target_code_len": 258,
        "diff_format": "@@ -697,3 +710,3 @@\n         if not line.endswith(b'\\r\\n'):\n-          log.info(ERROR_MSG % ('ProtocolError', 'CRLF linebreaks missing from a data reply, \"%s\"' % log.escape(bytes(raw_content))))\n+          log.info(ERROR_MSG % ('ProtocolError', 'CRLF linebreaks missing from a data reply, \"%s\"' % log.escape(bytes(raw_content).decode('utf-8'))))\n           raise stem.ProtocolError('All lines should end with CRLF')\n",
        "source_code_with_indent": "        <DED>if not line.endswith(b'\\r\\n'):\n          <IND>log.info(ERROR_MSG % ('ProtocolError', 'CRLF linebreaks missing from a data reply, \"%s\"' % log.escape(bytes(raw_content))))\n          raise stem.ProtocolError('All lines should end with CRLF')\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>if not line.endswith(b'\\r\\n'):\n          <IND>log.info(ERROR_MSG % ('ProtocolError', 'CRLF linebreaks missing from a data reply, \"%s\"' % log.escape(bytes(raw_content).decode('utf-8'))))\n          raise stem.ProtocolError('All lines should end with CRLF')\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/socket.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/socket.py",
    "file_hunks_size": 19,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/socket.py:749:4 Incompatible return type [7]: Expected `None` but got `str`.",
    "message": " Expected `None` but got `str`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 749,
    "warning_line": "    return '+%s\\r\\n.\\r\\n' % message.replace('\\n', '\\r\\n')",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef send_formatting(message: str) -> None:\n  \"\"\"\n",
        "source_code_len": 50,
        "target_code": "\ndef send_formatting(message: str) -> str:\n  \"\"\"\n",
        "target_code_len": 49,
        "diff_format": "@@ -724,3 +737,3 @@\n \n-def send_formatting(message: str) -> None:\n+def send_formatting(message: str) -> str:\n   \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED><DED><DED>def send_formatting(message: str) -> None:\n  <IND>",
        "target_code_with_indent": "\n<DED><DED><DED>def send_formatting(message: str) -> str:\n  <IND>"
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/socket.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/socket.py",
    "file_hunks_size": 19,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/socket.py:751:4 Incompatible return type [7]: Expected `None` but got `str`.",
    "message": " Expected `None` but got `str`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 751,
    "warning_line": "    return message + '\\r\\n'",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef send_formatting(message: str) -> None:\n  \"\"\"\n",
        "source_code_len": 50,
        "target_code": "\ndef send_formatting(message: str) -> str:\n  \"\"\"\n",
        "target_code_len": 49,
        "diff_format": "@@ -724,3 +737,3 @@\n \n-def send_formatting(message: str) -> None:\n+def send_formatting(message: str) -> str:\n   \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED><DED><DED>def send_formatting(message: str) -> None:\n  <IND>",
        "target_code_with_indent": "\n<DED><DED><DED>def send_formatting(message: str) -> str:\n  <IND>"
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/util/conf.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/util/conf.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/util/conf.py:223:31 Incompatible parameter type [6]: Expected `typing.Callable[[str, typing.Any], typing.Any]` for 1st positional only parameter to call `Config.add_listener` but got `BoundMethod[typing.Callable(_SyncListener.update)[[Named(self, _SyncListener), Named(config, Config), Named(key, str)], None], _SyncListener]`.",
    "message": " Expected `typing.Callable[[str, typing.Any], typing.Any]` for 1st positional only parameter to call `Config.add_listener` but got `BoundMethod[typing.Callable(_SyncListener.update)[[Named(self, _SyncListener), Named(config, Config), Named(key, str)], None], _SyncListener]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 223,
    "warning_line": "  selected_config.add_listener(_SyncListener(conf_mappings, handler).update)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n  def add_listener(self, listener: Callable[[str, Any], Any], backfill: bool = True) -> None:\n    \"\"\"\n",
        "source_code_len": 103,
        "target_code": "\n  def add_listener(self, listener: Callable[['stem.util.conf.Config', str], Any], backfill: bool = True) -> None:\n    \"\"\"\n",
        "target_code_len": 123,
        "diff_format": "@@ -579,3 +581,3 @@\n \n-  def add_listener(self, listener: Callable[[str, Any], Any], backfill: bool = True) -> None:\n+  def add_listener(self, listener: Callable[['stem.util.conf.Config', str], Any], backfill: bool = True) -> None:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n  <DED><DED>def add_listener(self, listener: Callable[[str, Any], Any], backfill: bool = True) -> None:\n    <IND>",
        "target_code_with_indent": "\n  <DED><DED>def add_listener(self, listener: Callable[['stem.util.conf.Config', str], Any], backfill: bool = True) -> None:\n    <IND>"
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/util/conf.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/util/conf.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/util/conf.py:594:19 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to anonymous call but got `Config`.",
    "message": " Expected `str` for 1st positional only parameter to anonymous call but got `Config`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 594,
    "warning_line": "          listener(self, key)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n  def add_listener(self, listener: Callable[[str, Any], Any], backfill: bool = True) -> None:\n    \"\"\"\n",
        "source_code_len": 103,
        "target_code": "\n  def add_listener(self, listener: Callable[['stem.util.conf.Config', str], Any], backfill: bool = True) -> None:\n    \"\"\"\n",
        "target_code_len": 123,
        "diff_format": "@@ -579,3 +581,3 @@\n \n-  def add_listener(self, listener: Callable[[str, Any], Any], backfill: bool = True) -> None:\n+  def add_listener(self, listener: Callable[['stem.util.conf.Config', str], Any], backfill: bool = True) -> None:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n  <DED><DED>def add_listener(self, listener: Callable[[str, Any], Any], backfill: bool = True) -> None:\n    <IND>",
        "target_code_with_indent": "\n  <DED><DED>def add_listener(self, listener: Callable[['stem.util.conf.Config', str], Any], backfill: bool = True) -> None:\n    <IND>"
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/util/conf.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/util/conf.py",
    "file_hunks_size": 9,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/util/conf.py:622:4 Incompatible return type [7]: Expected `Sequence[str]` but got `typing.Set[str]`.",
    "message": " Expected `Sequence[str]` but got `typing.Set[str]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 622,
    "warning_line": "    return set(self.keys()).difference(self._requested_keys)"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/util/conf.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/util/conf.py",
    "file_hunks_size": 9,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/util/conf.py:717:18 Incompatible parameter type [6]: Expected `Union[_SupportsTrunc, bytes, str, typing.SupportsInt, typing_extensions.SupportsIndex]` for 1st positional only parameter to call `int.__new__` but got `Union[Sequence[str], str]`.",
    "message": " Expected `Union[_SupportsTrunc, bytes, str, typing.SupportsInt, typing_extensions.SupportsIndex]` for 1st positional only parameter to call `int.__new__` but got `Union[Sequence[str], str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 717,
    "warning_line": "        val = int(val)"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/util/conf.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/util/conf.py",
    "file_hunks_size": 9,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/util/conf.py:723:20 Incompatible parameter type [6]: Expected `Union[bytearray, bytes, str, typing.SupportsFloat, typing_extensions.SupportsIndex]` for 1st positional only parameter to call `float.__new__` but got `Union[Sequence[str], str]`.",
    "message": " Expected `Union[bytearray, bytes, str, typing.SupportsFloat, typing_extensions.SupportsIndex]` for 1st positional only parameter to call `float.__new__` but got `Union[Sequence[str], str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 723,
    "warning_line": "        val = float(val)"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/util/connection.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/util/connection.py",
    "file_hunks_size": 10,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/util/connection.py:78:3 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `enum.Enum.__init__` but got `typing.Tuple[str, str]`.",
    "message": " Expected `str` for 1st positional only parameter to call `enum.Enum.__init__` but got `typing.Tuple[str, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 78,
    "warning_line": "  ('PROC', 'proc'),"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/util/connection.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/util/connection.py",
    "file_hunks_size": 10,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/util/connection.py:79:3 Incompatible parameter type [6]: Expected `str` for 2nd positional only parameter to call `enum.Enum.__init__` but got `typing.Tuple[str, str]`.",
    "message": " Expected `str` for 2nd positional only parameter to call `enum.Enum.__init__` but got `typing.Tuple[str, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 79,
    "warning_line": "  ('NETSTAT', 'netstat'),"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/util/connection.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/util/connection.py",
    "file_hunks_size": 10,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/util/connection.py:80:3 Incompatible parameter type [6]: Expected `str` for 3rd positional only parameter to call `enum.Enum.__init__` but got `typing.Tuple[str, str]`.",
    "message": " Expected `str` for 3rd positional only parameter to call `enum.Enum.__init__` but got `typing.Tuple[str, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 80,
    "warning_line": "  ('NETSTAT_WINDOWS', 'netstat (windows)'),"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/util/connection.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/util/connection.py",
    "file_hunks_size": 10,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/util/connection.py:81:3 Incompatible parameter type [6]: Expected `str` for 4th positional only parameter to call `enum.Enum.__init__` but got `typing.Tuple[str, str]`.",
    "message": " Expected `str` for 4th positional only parameter to call `enum.Enum.__init__` but got `typing.Tuple[str, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 81,
    "warning_line": "  ('SS', 'ss'),"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/util/connection.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/util/connection.py",
    "file_hunks_size": 10,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/util/connection.py:82:3 Incompatible parameter type [6]: Expected `str` for 5th positional only parameter to call `enum.Enum.__init__` but got `typing.Tuple[str, str]`.",
    "message": " Expected `str` for 5th positional only parameter to call `enum.Enum.__init__` but got `typing.Tuple[str, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 82,
    "warning_line": "  ('LSOF', 'lsof'),"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/util/connection.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/util/connection.py",
    "file_hunks_size": 10,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/util/connection.py:83:3 Incompatible parameter type [6]: Expected `str` for 6th positional only parameter to call `enum.Enum.__init__` but got `typing.Tuple[str, str]`.",
    "message": " Expected `str` for 6th positional only parameter to call `enum.Enum.__init__` but got `typing.Tuple[str, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 83,
    "warning_line": "  ('BSD_SOCKSTAT', 'sockstat (bsd)'),"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/util/connection.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/util/connection.py",
    "file_hunks_size": 10,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/util/connection.py:84:3 Incompatible parameter type [6]: Expected `str` for 7th positional only parameter to call `enum.Enum.__init__` but got `typing.Tuple[str, str]`.",
    "message": " Expected `str` for 7th positional only parameter to call `enum.Enum.__init__` but got `typing.Tuple[str, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 84,
    "warning_line": "  ('BSD_PROCSTAT', 'procstat (bsd)'),"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/util/connection.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/util/connection.py",
    "file_hunks_size": 10,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/util/connection.py:85:3 Incompatible parameter type [6]: Expected `str` for 8th positional only parameter to call `enum.Enum.__init__` but got `typing.Tuple[str, str]`.",
    "message": " Expected `str` for 8th positional only parameter to call `enum.Enum.__init__` but got `typing.Tuple[str, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 85,
    "warning_line": "  ('BSD_FSTAT', 'fstat (bsd)')"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/util/connection.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/util/connection.py",
    "file_hunks_size": 10,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/util/connection.py:187:60 Incompatible parameter type [6]: Expected `int` for 4th positional only parameter to call `stem.DownloadTimeout.__init__` but got `Optional[int]`.",
    "message": " Expected `int` for 4th positional only parameter to call `stem.DownloadTimeout.__init__` but got `Optional[int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 187,
    "warning_line": "    raise stem.DownloadTimeout(url, exc, sys.exc_info()[2], timeout)"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/util/connection.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/util/connection.py",
    "file_hunks_size": 10,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/util/connection.py:192:6 Incompatible variable type [9]: timeout is declared to have type `Optional[int]` but is used as type `float`.",
    "message": " timeout is declared to have type `Optional[int]` but is used as type `float`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 192,
    "warning_line": "      timeout -= time.time() - start_time"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/util/connection.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/util/connection.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "stem/util/connection.py:257:44 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `stem.util.system.pid_by_name` but got `Optional[str]`.",
    "message": " Expected `str` for 1st positional only parameter to call `stem.util.system.pid_by_name` but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 257,
    "warning_line": "    all_pids = stem.util.system.pid_by_name(process_name, True)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "  if process_pid is None:\n    all_pids = stem.util.system.pid_by_name(process_name, True)\n\n",
        "source_code_len": 91,
        "target_code": "  if process_pid is None:\n    all_pids = stem.util.system.pid_by_name(process_name, True)  # type: List[int] # type: ignore\n\n",
        "target_code_len": 125,
        "diff_format": "@@ -256,3 +256,3 @@\n   if process_pid is None:\n-    all_pids = stem.util.system.pid_by_name(process_name, True)\n+    all_pids = stem.util.system.pid_by_name(process_name, True)  # type: List[int] # type: ignore\n \n",
        "source_code_with_indent": "  <DED><DED>if process_pid is None:\n    <IND>all_pids = stem.util.system.pid_by_name(process_name, True)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "  <DED><DED>if process_pid is None:\n    <IND>all_pids = stem.util.system.pid_by_name(process_name, True)  # type: List[int] # type: ignore\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/util/connection.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/util/connection.py",
    "file_hunks_size": 10,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/util/connection.py:259:11 Incompatible parameter type [6]: Expected `typing.Sized` for 1st positional only parameter to call `len` but got `Union[Sequence[int], int]`.",
    "message": " Expected `typing.Sized` for 1st positional only parameter to call `len` but got `Union[Sequence[int], int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 259,
    "warning_line": "    if len(all_pids) == 0:"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/util/connection.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/util/connection.py",
    "file_hunks_size": 10,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/util/connection.py:262:13 Incompatible parameter type [6]: Expected `typing.Sized` for 1st positional only parameter to call `len` but got `Union[Sequence[int], int]`.",
    "message": " Expected `typing.Sized` for 1st positional only parameter to call `len` but got `Union[Sequence[int], int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 262,
    "warning_line": "    elif len(all_pids) == 1:"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/util/connection.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/util/connection.py",
    "file_hunks_size": 10,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/util/connection.py:297:6 Incompatible return type [7]: Expected `str` but got `typing.Tuple[None, None]`.",
    "message": " Expected `str` but got `typing.Tuple[None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 297,
    "warning_line": "      return None, None"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/util/connection.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/util/connection.py",
    "file_hunks_size": 10,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/util/connection.py:300:6 Incompatible return type [7]: Expected `str` but got `typing.Tuple[None, None]`.",
    "message": " Expected `str` but got `typing.Tuple[None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 300,
    "warning_line": "      return None, None"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/util/connection.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/util/connection.py",
    "file_hunks_size": 10,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/util/connection.py:303:6 Incompatible return type [7]: Expected `str` but got `typing.Tuple[str, int]`.",
    "message": " Expected `str` but got `typing.Tuple[str, int]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 303,
    "warning_line": "      return addr.lstrip('[').rstrip(']'), int(port)"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/util/connection.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/util/connection.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "stem/util/connection.py:528:16 Incompatible parameter type [6]: Expected `Union[_SupportsTrunc, bytes, str, typing.SupportsInt, typing_extensions.SupportsIndex]` for 1st positional only parameter to call `int.__new__` but got `Union[Sequence[int], Sequence[str], int, str]`.",
    "message": " Expected `Union[_SupportsTrunc, bytes, str, typing.SupportsInt, typing_extensions.SupportsIndex]` for 1st positional only parameter to call `int.__new__` but got `Union[Sequence[int], Sequence[str], int, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 528,
    "warning_line": "    value = int(entry)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n  try:\n    value = int(entry)\n\n",
        "source_code_len": 32,
        "target_code": "\n  if isinstance(entry, (tuple, list)):\n    for port in entry:\n      if not is_valid_port(port, allow_zero):\n        return False\n\n    return True\n\n  try:\n    value = int(entry)  # type: ignore\n\n",
        "target_code_len": 195,
        "diff_format": "@@ -526,4 +526,11 @@\n \n+  if isinstance(entry, (tuple, list)):\n+    for port in entry:\n+      if not is_valid_port(port, allow_zero):\n+        return False\n+\n+    return True\n+\n   try:\n-    value = int(entry)\n+    value = int(entry)  # type: ignore\n \n",
        "source_code_with_indent": "\n  try:\n    <IND>value = int(entry)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n  if isinstance(entry, (tuple, list)):\n    <IND>for port in entry:\n      <IND>if not is_valid_port(port, allow_zero):\n        <IND>return False\n\n    <DED><DED>return True\n\n  <DED>try:\n    <IND>value = int(entry)  # type: ignore\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/util/enum.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/util/enum.py",
    "file_hunks_size": 12,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/util/enum.py:64:15 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `Enum.__init__` but got `typing.Tuple[str, str]`.",
    "message": " Expected `str` for 1st positional only parameter to call `Enum.__init__` but got `typing.Tuple[str, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 64,
    "warning_line": "  return Enum(*[(v, v) for v in args])",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import Iterator, Sequence\n\n\ndef UppercaseEnum(*args: str) -> 'stem.util.enum.Enum':\n  \"\"\"\n",
        "source_code_len": 103,
        "target_code": "\nfrom typing import Any, Iterator, List, Sequence, Tuple, Union\n\n\ndef UppercaseEnum(*args: str) -> 'Enum':\n  \"\"\"\n",
        "target_code_len": 113,
        "diff_format": "@@ -42,6 +42,6 @@\n \n-from typing import Iterator, Sequence\n+from typing import Any, Iterator, List, Sequence, Tuple, Union\n \n \n-def UppercaseEnum(*args: str) -> 'stem.util.enum.Enum':\n+def UppercaseEnum(*args: str) -> 'Enum':\n   \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\nfrom typing import Iterator, Sequence\n\n\ndef UppercaseEnum(*args: str) -> 'stem.util.enum.Enum':\n  <IND>",
        "target_code_with_indent": "\nfrom typing import Any, Iterator, List, Sequence, Tuple, Union\n\n\ndef UppercaseEnum(*args: str) -> 'Enum':\n  <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n  def __init__(self, *args: str) -> None:\n    from stem.util.str_tools import _to_camel_case\n",
        "source_code_len": 94,
        "target_code": "\n  def __init__(self, *args: Union[str, Tuple[str, Any]]) -> None:\n    from stem.util.str_tools import _to_camel_case\n",
        "target_code_len": 118,
        "diff_format": "@@ -71,3 +71,3 @@\n \n-  def __init__(self, *args: str) -> None:\n+  def __init__(self, *args: Union[str, Tuple[str, Any]]) -> None:\n     from stem.util.str_tools import _to_camel_case\n",
        "source_code_with_indent": "\n  def __init__(self, *args: str) -> None:\n    <IND>from stem.util.str_tools import _to_camel_case\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n  def __init__(self, *args: Union[str, Tuple[str, Any]]) -> None:\n    <IND>from stem.util.str_tools import _to_camel_case\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/util/log.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/util/log.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/util/log.py:188:4 Incompatible return type [7]: Expected `None` but got `bool`.",
    "message": " Expected `None` but got `bool`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 188,
    "warning_line": "    return False",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef log_once(message_id: str, runlevel: 'stem.util.log.Runlevel', message: str) -> None:\n  \"\"\"\n",
        "source_code_len": 96,
        "target_code": "\ndef log_once(message_id: str, runlevel: 'stem.util.log.Runlevel', message: str) -> bool:\n  \"\"\"\n",
        "target_code_len": 96,
        "diff_format": "@@ -174,3 +174,3 @@\n \n-def log_once(message_id: str, runlevel: 'stem.util.log.Runlevel', message: str) -> None:\n+def log_once(message_id: str, runlevel: 'stem.util.log.Runlevel', message: str) -> bool:\n   \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED><DED>def log_once(message_id: str, runlevel: 'stem.util.log.Runlevel', message: str) -> None:\n  <IND>",
        "target_code_with_indent": "\n<DED><DED>def log_once(message_id: str, runlevel: 'stem.util.log.Runlevel', message: str) -> bool:\n  <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    log(runlevel, message)\n\n",
        "source_code_len": 28,
        "target_code": "    log(runlevel, message)\n    return True\n\n",
        "target_code_len": 44,
        "diff_format": "@@ -191,2 +191,3 @@\n     log(runlevel, message)\n+    return True\n \n",
        "source_code_with_indent": "    log(runlevel, message)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    log(runlevel, message)\n    return True\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/util/proc.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/util/proc.py",
    "file_hunks_size": 6,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/util/proc.py:78:3 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `stem.util.enum.Enum.__init__` but got `Tuple[str, str]`.",
    "message": " Expected `str` for 1st positional only parameter to call `stem.util.enum.Enum.__init__` but got `Tuple[str, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 78,
    "warning_line": "  ('COMMAND', 'command'), ('CPU_UTIME', 'utime'),"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/util/proc.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/util/proc.py",
    "file_hunks_size": 6,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/util/proc.py:78:27 Incompatible parameter type [6]: Expected `str` for 2nd positional only parameter to call `stem.util.enum.Enum.__init__` but got `Tuple[str, str]`.",
    "message": " Expected `str` for 2nd positional only parameter to call `stem.util.enum.Enum.__init__` but got `Tuple[str, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 78,
    "warning_line": "  ('COMMAND', 'command'), ('CPU_UTIME', 'utime'),"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/util/proc.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/util/proc.py",
    "file_hunks_size": 6,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/util/proc.py:79:3 Incompatible parameter type [6]: Expected `str` for 3rd positional only parameter to call `stem.util.enum.Enum.__init__` but got `Tuple[str, str]`.",
    "message": " Expected `str` for 3rd positional only parameter to call `stem.util.enum.Enum.__init__` but got `Tuple[str, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 79,
    "warning_line": "  ('CPU_STIME', 'stime'), ('START_TIME', 'start time')"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/util/proc.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/util/proc.py",
    "file_hunks_size": 6,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/util/proc.py:79:27 Incompatible parameter type [6]: Expected `str` for 4th positional only parameter to call `stem.util.enum.Enum.__init__` but got `Tuple[str, str]`.",
    "message": " Expected `str` for 4th positional only parameter to call `stem.util.enum.Enum.__init__` but got `Tuple[str, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 79,
    "warning_line": "  ('CPU_STIME', 'stime'), ('START_TIME', 'start time')"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/util/proc.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/util/proc.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/util/proc.py:119:49 Incompatible parameter type [6]: Expected `int` for 3rd positional only parameter to call `_log_runtime` but got `float`.",
    "message": " Expected `int` for 3rd positional only parameter to call `_log_runtime` but got `float`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 119,
    "warning_line": "    _log_runtime(parameter, '/proc/stat[btime]', start_time)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _log_runtime(parameter: str, proc_location: str, start_time: int) -> None:\n  \"\"\"\n",
        "source_code_len": 86,
        "target_code": "\ndef _log_runtime(parameter: str, proc_location: str, start_time: float) -> None:\n  \"\"\"\n",
        "target_code_len": 88,
        "diff_format": "@@ -556,3 +556,3 @@\n \n-def _log_runtime(parameter: str, proc_location: str, start_time: int) -> None:\n+def _log_runtime(parameter: str, proc_location: str, start_time: float) -> None:\n   \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED><DED>def _log_runtime(parameter: str, proc_location: str, start_time: int) -> None:\n  <IND>",
        "target_code_with_indent": "\n<DED><DED>def _log_runtime(parameter: str, proc_location: str, start_time: float) -> None:\n  <IND>"
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/util/proc.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/util/proc.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/util/proc.py:123:28 Incompatible parameter type [6]: Expected `Type[Exception]` for 2nd positional only parameter to call `_log_failure` but got `OSError`.",
    "message": " Expected `Type[Exception]` for 2nd positional only parameter to call `_log_failure` but got `OSError`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 123,
    "warning_line": "    _log_failure(parameter, exc)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _log_failure(parameter: str, exc: Type[Exception]) -> None:\n  \"\"\"\n",
        "source_code_len": 71,
        "target_code": "\ndef _log_failure(parameter: str, exc: BaseException) -> None:\n  \"\"\"\n",
        "target_code_len": 69,
        "diff_format": "@@ -569,3 +569,3 @@\n \n-def _log_failure(parameter: str, exc: Type[Exception]) -> None:\n+def _log_failure(parameter: str, exc: BaseException) -> None:\n   \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>def _log_failure(parameter: str, exc: Type[Exception]) -> None:\n  <IND>",
        "target_code_with_indent": "\n<DED>def _log_failure(parameter: str, exc: BaseException) -> None:\n  <IND>"
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/util/proc.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/util/proc.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/util/proc.py:142:55 Incompatible parameter type [6]: Expected `int` for 3rd positional only parameter to call `_log_runtime` but got `float`.",
    "message": " Expected `int` for 3rd positional only parameter to call `_log_runtime` but got `float`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 142,
    "warning_line": "    _log_runtime(parameter, '/proc/meminfo[MemTotal]', start_time)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _log_runtime(parameter: str, proc_location: str, start_time: int) -> None:\n  \"\"\"\n",
        "source_code_len": 86,
        "target_code": "\ndef _log_runtime(parameter: str, proc_location: str, start_time: float) -> None:\n  \"\"\"\n",
        "target_code_len": 88,
        "diff_format": "@@ -556,3 +556,3 @@\n \n-def _log_runtime(parameter: str, proc_location: str, start_time: int) -> None:\n+def _log_runtime(parameter: str, proc_location: str, start_time: float) -> None:\n   \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED><DED>def _log_runtime(parameter: str, proc_location: str, start_time: int) -> None:\n  <IND>",
        "target_code_with_indent": "\n<DED><DED>def _log_runtime(parameter: str, proc_location: str, start_time: float) -> None:\n  <IND>"
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/util/proc.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/util/proc.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/util/proc.py:146:28 Incompatible parameter type [6]: Expected `Type[Exception]` for 2nd positional only parameter to call `_log_failure` but got `OSError`.",
    "message": " Expected `Type[Exception]` for 2nd positional only parameter to call `_log_failure` but got `OSError`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 146,
    "warning_line": "    _log_failure(parameter, exc)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _log_failure(parameter: str, exc: Type[Exception]) -> None:\n  \"\"\"\n",
        "source_code_len": 71,
        "target_code": "\ndef _log_failure(parameter: str, exc: BaseException) -> None:\n  \"\"\"\n",
        "target_code_len": 69,
        "diff_format": "@@ -569,3 +569,3 @@\n \n-def _log_failure(parameter: str, exc: Type[Exception]) -> None:\n+def _log_failure(parameter: str, exc: BaseException) -> None:\n   \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>def _log_failure(parameter: str, exc: Type[Exception]) -> None:\n  <IND>",
        "target_code_with_indent": "\n<DED>def _log_failure(parameter: str, exc: BaseException) -> None:\n  <IND>"
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/util/proc.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/util/proc.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/util/proc.py:171:30 Incompatible parameter type [6]: Expected `Type[Exception]` for 2nd positional only parameter to call `_log_failure` but got `OSError`.",
    "message": " Expected `Type[Exception]` for 2nd positional only parameter to call `_log_failure` but got `OSError`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 171,
    "warning_line": "      _log_failure(parameter, exc)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _log_failure(parameter: str, exc: Type[Exception]) -> None:\n  \"\"\"\n",
        "source_code_len": 71,
        "target_code": "\ndef _log_failure(parameter: str, exc: BaseException) -> None:\n  \"\"\"\n",
        "target_code_len": 69,
        "diff_format": "@@ -569,3 +569,3 @@\n \n-def _log_failure(parameter: str, exc: Type[Exception]) -> None:\n+def _log_failure(parameter: str, exc: BaseException) -> None:\n   \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>def _log_failure(parameter: str, exc: Type[Exception]) -> None:\n  <IND>",
        "target_code_with_indent": "\n<DED>def _log_failure(parameter: str, exc: BaseException) -> None:\n  <IND>"
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/util/proc.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/util/proc.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/util/proc.py:174:41 Incompatible parameter type [6]: Expected `int` for 3rd positional only parameter to call `_log_runtime` but got `float`.",
    "message": " Expected `int` for 3rd positional only parameter to call `_log_runtime` but got `float`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 174,
    "warning_line": "  _log_runtime(parameter, proc_cwd_link, start_time)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _log_runtime(parameter: str, proc_location: str, start_time: int) -> None:\n  \"\"\"\n",
        "source_code_len": 86,
        "target_code": "\ndef _log_runtime(parameter: str, proc_location: str, start_time: float) -> None:\n  \"\"\"\n",
        "target_code_len": 88,
        "diff_format": "@@ -556,3 +556,3 @@\n \n-def _log_runtime(parameter: str, proc_location: str, start_time: int) -> None:\n+def _log_runtime(parameter: str, proc_location: str, start_time: float) -> None:\n   \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED><DED>def _log_runtime(parameter: str, proc_location: str, start_time: int) -> None:\n  <IND>",
        "target_code_with_indent": "\n<DED><DED>def _log_runtime(parameter: str, proc_location: str, start_time: float) -> None:\n  <IND>"
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/util/proc.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/util/proc.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/util/proc.py:195:53 Incompatible parameter type [6]: Expected `int` for 3rd positional only parameter to call `_log_runtime` but got `float`.",
    "message": " Expected `int` for 3rd positional only parameter to call `_log_runtime` but got `float`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 195,
    "warning_line": "    _log_runtime(parameter, '%s[Uid]' % status_path, start_time)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _log_runtime(parameter: str, proc_location: str, start_time: int) -> None:\n  \"\"\"\n",
        "source_code_len": 86,
        "target_code": "\ndef _log_runtime(parameter: str, proc_location: str, start_time: float) -> None:\n  \"\"\"\n",
        "target_code_len": 88,
        "diff_format": "@@ -556,3 +556,3 @@\n \n-def _log_runtime(parameter: str, proc_location: str, start_time: int) -> None:\n+def _log_runtime(parameter: str, proc_location: str, start_time: float) -> None:\n   \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED><DED>def _log_runtime(parameter: str, proc_location: str, start_time: int) -> None:\n  <IND>",
        "target_code_with_indent": "\n<DED><DED>def _log_runtime(parameter: str, proc_location: str, start_time: float) -> None:\n  <IND>"
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/util/proc.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/util/proc.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/util/proc.py:199:28 Incompatible parameter type [6]: Expected `Type[Exception]` for 2nd positional only parameter to call `_log_failure` but got `OSError`.",
    "message": " Expected `Type[Exception]` for 2nd positional only parameter to call `_log_failure` but got `OSError`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 199,
    "warning_line": "    _log_failure(parameter, exc)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _log_failure(parameter: str, exc: Type[Exception]) -> None:\n  \"\"\"\n",
        "source_code_len": 71,
        "target_code": "\ndef _log_failure(parameter: str, exc: BaseException) -> None:\n  \"\"\"\n",
        "target_code_len": 69,
        "diff_format": "@@ -569,3 +569,3 @@\n \n-def _log_failure(parameter: str, exc: Type[Exception]) -> None:\n+def _log_failure(parameter: str, exc: BaseException) -> None:\n   \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>def _log_failure(parameter: str, exc: Type[Exception]) -> None:\n  <IND>",
        "target_code_with_indent": "\n<DED>def _log_failure(parameter: str, exc: BaseException) -> None:\n  <IND>"
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/util/proc.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/util/proc.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/util/proc.py:228:62 Incompatible parameter type [6]: Expected `int` for 3rd positional only parameter to call `_log_runtime` but got `float`.",
    "message": " Expected `int` for 3rd positional only parameter to call `_log_runtime` but got `float`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 228,
    "warning_line": "    _log_runtime(parameter, '%s[VmRSS|VmSize]' % status_path, start_time)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _log_runtime(parameter: str, proc_location: str, start_time: int) -> None:\n  \"\"\"\n",
        "source_code_len": 86,
        "target_code": "\ndef _log_runtime(parameter: str, proc_location: str, start_time: float) -> None:\n  \"\"\"\n",
        "target_code_len": 88,
        "diff_format": "@@ -556,3 +556,3 @@\n \n-def _log_runtime(parameter: str, proc_location: str, start_time: int) -> None:\n+def _log_runtime(parameter: str, proc_location: str, start_time: float) -> None:\n   \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED><DED>def _log_runtime(parameter: str, proc_location: str, start_time: int) -> None:\n  <IND>",
        "target_code_with_indent": "\n<DED><DED>def _log_runtime(parameter: str, proc_location: str, start_time: float) -> None:\n  <IND>"
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/util/proc.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/util/proc.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/util/proc.py:232:28 Incompatible parameter type [6]: Expected `Type[Exception]` for 2nd positional only parameter to call `_log_failure` but got `OSError`.",
    "message": " Expected `Type[Exception]` for 2nd positional only parameter to call `_log_failure` but got `OSError`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 232,
    "warning_line": "    _log_failure(parameter, exc)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _log_failure(parameter: str, exc: Type[Exception]) -> None:\n  \"\"\"\n",
        "source_code_len": 71,
        "target_code": "\ndef _log_failure(parameter: str, exc: BaseException) -> None:\n  \"\"\"\n",
        "target_code_len": 69,
        "diff_format": "@@ -569,3 +569,3 @@\n \n-def _log_failure(parameter: str, exc: Type[Exception]) -> None:\n+def _log_failure(parameter: str, exc: BaseException) -> None:\n   \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>def _log_failure(parameter: str, exc: Type[Exception]) -> None:\n  <IND>",
        "target_code_with_indent": "\n<DED>def _log_failure(parameter: str, exc: BaseException) -> None:\n  <IND>"
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/util/proc.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/util/proc.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/util/proc.py:270:28 Incompatible parameter type [6]: Expected `Type[Exception]` for 2nd positional only parameter to call `_log_failure` but got `OSError`.",
    "message": " Expected `Type[Exception]` for 2nd positional only parameter to call `_log_failure` but got `OSError`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 270,
    "warning_line": "    _log_failure(parameter, exc)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _log_failure(parameter: str, exc: Type[Exception]) -> None:\n  \"\"\"\n",
        "source_code_len": 71,
        "target_code": "\ndef _log_failure(parameter: str, exc: BaseException) -> None:\n  \"\"\"\n",
        "target_code_len": 69,
        "diff_format": "@@ -569,3 +569,3 @@\n \n-def _log_failure(parameter: str, exc: Type[Exception]) -> None:\n+def _log_failure(parameter: str, exc: BaseException) -> None:\n   \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>def _log_failure(parameter: str, exc: Type[Exception]) -> None:\n  <IND>",
        "target_code_with_indent": "\n<DED>def _log_failure(parameter: str, exc: BaseException) -> None:\n  <IND>"
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/util/proc.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/util/proc.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/util/proc.py:293:8 Incompatible return type [7]: Expected `Sequence[typing.Any]` but got `float`.",
    "message": " Expected `Sequence[typing.Any]` but got `float`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 293,
    "warning_line": "        return system_start_time()",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "      if pid == 0:\n        return system_start_time()\n      else:\n",
        "source_code_len": 66,
        "target_code": "      if pid == 0:\n        results.append(str(system_start_time()))\n      else:\n",
        "target_code_len": 80,
        "diff_format": "@@ -292,3 +292,3 @@\n       if pid == 0:\n-        return system_start_time()\n+        results.append(str(system_start_time()))\n       else:\n",
        "source_code_with_indent": "      <IND>if pid == 0:\n        <IND>return system_start_time()\n      <DED>else:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "      <IND>if pid == 0:\n        <IND>results.append(str(system_start_time()))\n      <DED>else:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/util/proc.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/util/proc.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/util/proc.py:301:37 Incompatible parameter type [6]: Expected `int` for 3rd positional only parameter to call `_log_runtime` but got `float`.",
    "message": " Expected `int` for 3rd positional only parameter to call `_log_runtime` but got `float`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 301,
    "warning_line": "  _log_runtime(parameter, stat_path, start_time)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _log_runtime(parameter: str, proc_location: str, start_time: int) -> None:\n  \"\"\"\n",
        "source_code_len": 86,
        "target_code": "\ndef _log_runtime(parameter: str, proc_location: str, start_time: float) -> None:\n  \"\"\"\n",
        "target_code_len": 88,
        "diff_format": "@@ -556,3 +556,3 @@\n \n-def _log_runtime(parameter: str, proc_location: str, start_time: int) -> None:\n+def _log_runtime(parameter: str, proc_location: str, start_time: float) -> None:\n   \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED><DED>def _log_runtime(parameter: str, proc_location: str, start_time: int) -> None:\n  <IND>",
        "target_code_with_indent": "\n<DED><DED>def _log_runtime(parameter: str, proc_location: str, start_time: float) -> None:\n  <IND>"
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/util/proc.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/util/proc.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/util/proc.py:392:34 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `_unpack_addr` but got `bytes`.",
    "message": " Expected `str` for 1st positional only parameter to call `_unpack_addr` but got `bytes`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 392,
    "warning_line": "            l_addr = _unpack_addr(l_dst[:div])",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _unpack_addr(addr: str) -> str:\n  \"\"\"\n",
        "source_code_len": 43,
        "target_code": "\ndef _unpack_addr(addr: bytes) -> str:\n  \"\"\"\n",
        "target_code_len": 45,
        "diff_format": "@@ -454,3 +454,3 @@\n \n-def _unpack_addr(addr: str) -> str:\n+def _unpack_addr(addr: bytes) -> str:\n   \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>def _unpack_addr(addr: str) -> str:\n  <IND>",
        "target_code_with_indent": "\n<DED>def _unpack_addr(addr: bytes) -> str:\n  <IND>"
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/util/proc.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/util/proc.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/util/proc.py:396:34 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `_unpack_addr` but got `bytes`.",
    "message": " Expected `str` for 1st positional only parameter to call `_unpack_addr` but got `bytes`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 396,
    "warning_line": "            r_addr = _unpack_addr(r_dst[:div])",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _unpack_addr(addr: str) -> str:\n  \"\"\"\n",
        "source_code_len": 43,
        "target_code": "\ndef _unpack_addr(addr: bytes) -> str:\n  \"\"\"\n",
        "target_code_len": 45,
        "diff_format": "@@ -454,3 +454,3 @@\n \n-def _unpack_addr(addr: str) -> str:\n+def _unpack_addr(addr: bytes) -> str:\n   \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>def _unpack_addr(addr: str) -> str:\n  <IND>",
        "target_code_with_indent": "\n<DED>def _unpack_addr(addr: bytes) -> str:\n  <IND>"
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/util/proc.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/util/proc.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/util/proc.py:410:51 Incompatible parameter type [6]: Expected `int` for 3rd positional only parameter to call `_log_runtime` but got `float`.",
    "message": " Expected `int` for 3rd positional only parameter to call `_log_runtime` but got `float`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 410,
    "warning_line": "    _log_runtime(parameter, '/proc/net/[tcp|udp]', start_time)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _log_runtime(parameter: str, proc_location: str, start_time: int) -> None:\n  \"\"\"\n",
        "source_code_len": 86,
        "target_code": "\ndef _log_runtime(parameter: str, proc_location: str, start_time: float) -> None:\n  \"\"\"\n",
        "target_code_len": 88,
        "diff_format": "@@ -556,3 +556,3 @@\n \n-def _log_runtime(parameter: str, proc_location: str, start_time: int) -> None:\n+def _log_runtime(parameter: str, proc_location: str, start_time: float) -> None:\n   \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED><DED>def _log_runtime(parameter: str, proc_location: str, start_time: int) -> None:\n  <IND>",
        "target_code_with_indent": "\n<DED><DED>def _log_runtime(parameter: str, proc_location: str, start_time: float) -> None:\n  <IND>"
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/util/proc.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/util/proc.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/util/proc.py:413:28 Incompatible parameter type [6]: Expected `Type[Exception]` for 2nd positional only parameter to call `_log_failure` but got `OSError`.",
    "message": " Expected `Type[Exception]` for 2nd positional only parameter to call `_log_failure` but got `OSError`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 413,
    "warning_line": "    _log_failure(parameter, exc)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _log_failure(parameter: str, exc: Type[Exception]) -> None:\n  \"\"\"\n",
        "source_code_len": 71,
        "target_code": "\ndef _log_failure(parameter: str, exc: BaseException) -> None:\n  \"\"\"\n",
        "target_code_len": 69,
        "diff_format": "@@ -569,3 +569,3 @@\n \n-def _log_failure(parameter: str, exc: Type[Exception]) -> None:\n+def _log_failure(parameter: str, exc: BaseException) -> None:\n   \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>def _log_failure(parameter: str, exc: Type[Exception]) -> None:\n  <IND>",
        "target_code_with_indent": "\n<DED>def _log_failure(parameter: str, exc: BaseException) -> None:\n  <IND>"
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/util/proc.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/util/proc.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/util/proc.py:553:28 Incompatible parameter type [6]: Expected `Type[Exception]` for 2nd positional only parameter to call `_log_failure` but got `OSError`.",
    "message": " Expected `Type[Exception]` for 2nd positional only parameter to call `_log_failure` but got `OSError`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 553,
    "warning_line": "    _log_failure(parameter, exc)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _log_failure(parameter: str, exc: Type[Exception]) -> None:\n  \"\"\"\n",
        "source_code_len": 71,
        "target_code": "\ndef _log_failure(parameter: str, exc: BaseException) -> None:\n  \"\"\"\n",
        "target_code_len": 69,
        "diff_format": "@@ -569,3 +569,3 @@\n \n-def _log_failure(parameter: str, exc: Type[Exception]) -> None:\n+def _log_failure(parameter: str, exc: BaseException) -> None:\n   \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>def _log_failure(parameter: str, exc: Type[Exception]) -> None:\n  <IND>",
        "target_code_with_indent": "\n<DED>def _log_failure(parameter: str, exc: BaseException) -> None:\n  <IND>"
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/util/str_tools.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/util/str_tools.py",
    "file_hunks_size": 11,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/util/str_tools.py:106:2 Incompatible return type [7]: Expected `str` but got `bytes`.",
    "message": " Expected `str` but got `bytes`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 106,
    "warning_line": "  return base64.b64decode(msg + padding_chr * missing_padding)"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/util/str_tools.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/util/str_tools.py",
    "file_hunks_size": 11,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/util/str_tools.py:106:32 Incompatible parameter type [6]: Expected `bytes` for 1st positional only parameter to call `bytes.__add__` but got `Union[bytes, str]`.",
    "message": " Expected `bytes` for 1st positional only parameter to call `bytes.__add__` but got `Union[bytes, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 106,
    "warning_line": "  return base64.b64decode(msg + padding_chr * missing_padding)"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/util/str_tools.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/util/str_tools.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/util/str_tools.py:223:4 Incompatible return type [7]: Expected `str` but got `Union[Tuple[str, str], str]`.",
    "message": " Expected `str` but got `Union[Tuple[str, str], str]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 223,
    "warning_line": "    return (msg, '') if get_remainder else msg",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef crop(msg: str, size: int, min_word_length: int = 4, min_crop: int = 0, ending: 'stem.util.str_tools.Ending' = Ending.ELLIPSE, get_remainder: bool = False) -> str:\n  \"\"\"\n",
        "source_code_len": 174,
        "target_code": "\ndef crop(msg: str, size: int, min_word_length: int = 4, min_crop: int = 0, ending: 'stem.util.str_tools.Ending' = Ending.ELLIPSE, get_remainder: bool = False) -> Union[str, Tuple[str, str]]:\n  \"\"\"\n",
        "target_code_len": 198,
        "diff_format": "@@ -176,3 +186,3 @@\n \n-def crop(msg: str, size: int, min_word_length: int = 4, min_crop: int = 0, ending: 'stem.util.str_tools.Ending' = Ending.ELLIPSE, get_remainder: bool = False) -> str:\n+def crop(msg: str, size: int, min_word_length: int = 4, min_crop: int = 0, ending: 'stem.util.str_tools.Ending' = Ending.ELLIPSE, get_remainder: bool = False) -> Union[str, Tuple[str, str]]:\n   \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\ndef crop(msg: str, size: int, min_word_length: int = 4, min_crop: int = 0, ending: 'stem.util.str_tools.Ending' = Ending.ELLIPSE, get_remainder: bool = False) -> str:\n  <IND>",
        "target_code_with_indent": "\ndef crop(msg: str, size: int, min_word_length: int = 4, min_crop: int = 0, ending: 'stem.util.str_tools.Ending' = Ending.ELLIPSE, get_remainder: bool = False) -> Union[str, Tuple[str, str]]:\n  <IND>"
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/util/str_tools.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/util/str_tools.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/util/str_tools.py:237:6 Incompatible return type [7]: Expected `str` but got `Union[str, Tuple[str, str]]`.",
    "message": " Expected `str` but got `Union[str, Tuple[str, str]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 237,
    "warning_line": "      return ('', msg) if get_remainder else ''",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef crop(msg: str, size: int, min_word_length: int = 4, min_crop: int = 0, ending: 'stem.util.str_tools.Ending' = Ending.ELLIPSE, get_remainder: bool = False) -> str:\n  \"\"\"\n",
        "source_code_len": 174,
        "target_code": "\ndef crop(msg: str, size: int, min_word_length: int = 4, min_crop: int = 0, ending: 'stem.util.str_tools.Ending' = Ending.ELLIPSE, get_remainder: bool = False) -> Union[str, Tuple[str, str]]:\n  \"\"\"\n",
        "target_code_len": 198,
        "diff_format": "@@ -176,3 +186,3 @@\n \n-def crop(msg: str, size: int, min_word_length: int = 4, min_crop: int = 0, ending: 'stem.util.str_tools.Ending' = Ending.ELLIPSE, get_remainder: bool = False) -> str:\n+def crop(msg: str, size: int, min_word_length: int = 4, min_crop: int = 0, ending: 'stem.util.str_tools.Ending' = Ending.ELLIPSE, get_remainder: bool = False) -> Union[str, Tuple[str, str]]:\n   \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\ndef crop(msg: str, size: int, min_word_length: int = 4, min_crop: int = 0, ending: 'stem.util.str_tools.Ending' = Ending.ELLIPSE, get_remainder: bool = False) -> str:\n  <IND>",
        "target_code_with_indent": "\ndef crop(msg: str, size: int, min_word_length: int = 4, min_crop: int = 0, ending: 'stem.util.str_tools.Ending' = Ending.ELLIPSE, get_remainder: bool = False) -> Union[str, Tuple[str, str]]:\n  <IND>"
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/util/str_tools.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/util/str_tools.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/util/str_tools.py:254:6 Incompatible return type [7]: Expected `str` but got `Union[str, Tuple[str, str]]`.",
    "message": " Expected `str` but got `Union[str, Tuple[str, str]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 254,
    "warning_line": "      return ('', msg) if get_remainder else ''",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef crop(msg: str, size: int, min_word_length: int = 4, min_crop: int = 0, ending: 'stem.util.str_tools.Ending' = Ending.ELLIPSE, get_remainder: bool = False) -> str:\n  \"\"\"\n",
        "source_code_len": 174,
        "target_code": "\ndef crop(msg: str, size: int, min_word_length: int = 4, min_crop: int = 0, ending: 'stem.util.str_tools.Ending' = Ending.ELLIPSE, get_remainder: bool = False) -> Union[str, Tuple[str, str]]:\n  \"\"\"\n",
        "target_code_len": 198,
        "diff_format": "@@ -176,3 +186,3 @@\n \n-def crop(msg: str, size: int, min_word_length: int = 4, min_crop: int = 0, ending: 'stem.util.str_tools.Ending' = Ending.ELLIPSE, get_remainder: bool = False) -> str:\n+def crop(msg: str, size: int, min_word_length: int = 4, min_crop: int = 0, ending: 'stem.util.str_tools.Ending' = Ending.ELLIPSE, get_remainder: bool = False) -> Union[str, Tuple[str, str]]:\n   \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\ndef crop(msg: str, size: int, min_word_length: int = 4, min_crop: int = 0, ending: 'stem.util.str_tools.Ending' = Ending.ELLIPSE, get_remainder: bool = False) -> str:\n  <IND>",
        "target_code_with_indent": "\ndef crop(msg: str, size: int, min_word_length: int = 4, min_crop: int = 0, ending: 'stem.util.str_tools.Ending' = Ending.ELLIPSE, get_remainder: bool = False) -> Union[str, Tuple[str, str]]:\n  <IND>"
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/util/str_tools.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/util/str_tools.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/util/str_tools.py:288:2 Incompatible return type [7]: Expected `str` but got `Union[Tuple[str, str], str]`.",
    "message": " Expected `str` but got `Union[Tuple[str, str], str]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 288,
    "warning_line": "  return (return_msg, remainder) if get_remainder else return_msg",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef crop(msg: str, size: int, min_word_length: int = 4, min_crop: int = 0, ending: 'stem.util.str_tools.Ending' = Ending.ELLIPSE, get_remainder: bool = False) -> str:\n  \"\"\"\n",
        "source_code_len": 174,
        "target_code": "\ndef crop(msg: str, size: int, min_word_length: int = 4, min_crop: int = 0, ending: 'stem.util.str_tools.Ending' = Ending.ELLIPSE, get_remainder: bool = False) -> Union[str, Tuple[str, str]]:\n  \"\"\"\n",
        "target_code_len": 198,
        "diff_format": "@@ -176,3 +186,3 @@\n \n-def crop(msg: str, size: int, min_word_length: int = 4, min_crop: int = 0, ending: 'stem.util.str_tools.Ending' = Ending.ELLIPSE, get_remainder: bool = False) -> str:\n+def crop(msg: str, size: int, min_word_length: int = 4, min_crop: int = 0, ending: 'stem.util.str_tools.Ending' = Ending.ELLIPSE, get_remainder: bool = False) -> Union[str, Tuple[str, str]]:\n   \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\ndef crop(msg: str, size: int, min_word_length: int = 4, min_crop: int = 0, ending: 'stem.util.str_tools.Ending' = Ending.ELLIPSE, get_remainder: bool = False) -> str:\n  <IND>",
        "target_code_with_indent": "\ndef crop(msg: str, size: int, min_word_length: int = 4, min_crop: int = 0, ending: 'stem.util.str_tools.Ending' = Ending.ELLIPSE, get_remainder: bool = False) -> Union[str, Tuple[str, str]]:\n  <IND>"
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/util/str_tools.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/util/str_tools.py",
    "file_hunks_size": 11,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/util/str_tools.py:323:22 Incompatible parameter type [6]: Expected `Tuple[int, str, str]` for 1st positional only parameter to call `_get_label` but got `Tuple[Tuple[float, str, str], Tuple[float, str, str], Tuple[float, str, str], Tuple[float, str, str], Tuple[float, str, str], Tuple[float, str, str]]`.",
    "message": " Expected `Tuple[int, str, str]` for 1st positional only parameter to call `_get_label` but got `Tuple[Tuple[float, str, str], Tuple[float, str, str], Tuple[float, str, str], Tuple[float, str, str], Tuple[float, str, str], Tuple[float, str, str]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 323,
    "warning_line": "    return _get_label(SIZE_UNITS_BYTES, byte_count, decimal, is_long, round)"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/util/str_tools.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/util/str_tools.py",
    "file_hunks_size": 11,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/util/str_tools.py:325:22 Incompatible parameter type [6]: Expected `Tuple[int, str, str]` for 1st positional only parameter to call `_get_label` but got `Tuple[Tuple[float, str, str], Tuple[float, str, str], Tuple[float, str, str], Tuple[float, str, str], Tuple[float, str, str], Tuple[float, str, str]]`.",
    "message": " Expected `Tuple[int, str, str]` for 1st positional only parameter to call `_get_label` but got `Tuple[Tuple[float, str, str], Tuple[float, str, str], Tuple[float, str, str], Tuple[float, str, str], Tuple[float, str, str], Tuple[float, str, str]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 325,
    "warning_line": "    return _get_label(SIZE_UNITS_BITS, byte_count, decimal, is_long, round)"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/util/str_tools.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/util/str_tools.py",
    "file_hunks_size": 11,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/util/str_tools.py:356:20 Incompatible parameter type [6]: Expected `Tuple[int, str, str]` for 1st positional only parameter to call `_get_label` but got `Tuple[Tuple[float, str, str], Tuple[float, str, str], Tuple[float, str, str], Tuple[float, str, str]]`.",
    "message": " Expected `Tuple[int, str, str]` for 1st positional only parameter to call `_get_label` but got `Tuple[Tuple[float, str, str], Tuple[float, str, str], Tuple[float, str, str], Tuple[float, str, str]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 356,
    "warning_line": "  return _get_label(TIME_UNITS, seconds, decimal, is_long)"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/util/str_tools.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/util/str_tools.py",
    "file_hunks_size": 11,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/util/str_tools.py:383:36 Incompatible parameter type [6]: Expected `Tuple[int, str, str]` for 1st positional only parameter to call `_get_label` but got `Tuple[Tuple[float, str, str], Tuple[float, str, str], Tuple[float, str, str], Tuple[float, str, str]]`.",
    "message": " Expected `Tuple[int, str, str]` for 1st positional only parameter to call `_get_label` but got `Tuple[Tuple[float, str, str], Tuple[float, str, str], Tuple[float, str, str], Tuple[float, str, str]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 383,
    "warning_line": "      time_labels.append(_get_label(TIME_UNITS, seconds, 0, is_long))"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/util/str_tools.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/util/str_tools.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/util/str_tools.py:384:6 Incompatible variable type [9]: seconds is declared to have type `int` but is used as type `float`.",
    "message": " seconds is declared to have type `int` but is used as type `float`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 384,
    "warning_line": "      seconds %= count_per_unit",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "      time_labels.append(_get_label(TIME_UNITS, seconds, 0, is_long))\n      seconds %= count_per_unit\n\n",
        "source_code_len": 103,
        "target_code": "      time_labels.append(_get_label(TIME_UNITS, seconds, 0, is_long))\n      seconds %= int(count_per_unit)\n\n",
        "target_code_len": 108,
        "diff_format": "@@ -383,3 +393,3 @@\n       time_labels.append(_get_label(TIME_UNITS, seconds, 0, is_long))\n-      seconds %= count_per_unit\n+      seconds %= int(count_per_unit)\n \n",
        "source_code_with_indent": "      <IND>time_labels.append(_get_label(TIME_UNITS, seconds, 0, is_long))\n      seconds %= count_per_unit\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "      <IND>time_labels.append(_get_label(TIME_UNITS, seconds, 0, is_long))\n      seconds %= int(count_per_unit)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/util/str_tools.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/util/str_tools.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/util/str_tools.py:416:4 Incompatible variable type [9]: seconds is declared to have type `int` but is used as type `float`.",
    "message": " seconds is declared to have type `int` but is used as type `float`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 416,
    "warning_line": "    seconds %= amount",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    count = int(seconds / amount)\n    seconds %= amount\n    time_comp[label.strip()] = count\n",
        "source_code_len": 93,
        "target_code": "    count = int(seconds / amount)\n    seconds %= int(amount)\n    time_comp[label.strip()] = count\n",
        "target_code_len": 98,
        "diff_format": "@@ -415,3 +425,3 @@\n     count = int(seconds / amount)\n-    seconds %= amount\n+    seconds %= int(amount)\n     time_comp[label.strip()] = count\n",
        "source_code_with_indent": "    <IND>count = int(seconds / amount)\n    seconds %= amount\n    time_comp[label.strip()] = count\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <IND>count = int(seconds / amount)\n    seconds %= int(amount)\n    time_comp[label.strip()] = count\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/util/str_tools.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/util/str_tools.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/util/str_tools.py:582:8 Incompatible return type [7]: Expected `str` but got implicit return value of `None`.",
    "message": " Expected `str` but got implicit return value of `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 582,
    "warning_line": "        return count_label + short_label",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        return count_label + short_label\n",
        "source_code_len": 41,
        "target_code": "        return count_label + short_label\n\n  raise ValueError('BUG: value should always be divisible by a unit (%s)' % str(units))\n",
        "target_code_len": 130,
        "diff_format": "@@ -582,1 +592,3 @@\n         return count_label + short_label\n+\n+  raise ValueError('BUG: value should always be divisible by a unit (%s)' % str(units))\n",
        "source_code_with_indent": "        <IND>return count_label + short_label\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>return count_label + short_label\n\n  <DED><DED><DED>raise ValueError('BUG: value should always be divisible by a unit (%s)' % str(units))\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/util/system.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/util/system.py",
    "file_hunks_size": 14,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/util/system.py:503:29 Incompatible parameter type [6]: Expected `Optional[Sequence[int]]` for 2nd positional only parameter to call `size_of` but got `Union[Sequence[int], typing.Set[typing.Any]]`.",
    "message": " Expected `Optional[Sequence[int]]` for 2nd positional only parameter to call `size_of` but got `Union[Sequence[int], typing.Set[typing.Any]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 503,
    "warning_line": "      size += size_of(entry, exclude)"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/util/system.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/util/system.py",
    "file_hunks_size": 14,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/util/system.py:719:2 Incompatible return type [7]: Expected `Union[Sequence[int], int]` but got `Optional[typing.List[Variable[_T]]]`.",
    "message": " Expected `Union[Sequence[int], int]` but got `Optional[typing.List[Variable[_T]]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 719,
    "warning_line": "  return [] if multiple else None"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/util/system.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/util/system.py",
    "file_hunks_size": 14,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/util/system.py:1064:23 Incompatible parameter type [6]: Expected `Union[TextIO, str]` for 1st positional only parameter to call `tail` but got `io.BufferedReader`.",
    "message": " Expected `Union[TextIO, str]` for 1st positional only parameter to call `tail` but got `io.BufferedReader`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1064,
    "warning_line": "      for line in tail(target_file, lines):"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/util/system.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/util/system.py",
    "file_hunks_size": 14,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/util/system.py:1081:60 Unsupported operand [58]: `+` is not supported for operand types `str` and `Union[bytes, str]`.",
    "message": " `+` is not supported for operand types `str` and `Union[bytes, str]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 1081,
    "warning_line": "      content, completed_lines = (target.read(BLOCK_SIZE) + content).split(b'\\n', 1)"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/util/system.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/util/system.py",
    "file_hunks_size": 14,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/util/system.py:1081:75 Incompatible parameter type [6]: Expected `Optional[str]` for 1st positional only parameter to call `str.split` but got `bytes`.",
    "message": " Expected `Optional[str]` for 1st positional only parameter to call `str.split` but got `bytes`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1081,
    "warning_line": "      content, completed_lines = (target.read(BLOCK_SIZE) + content).split(b'\\n', 1)"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/util/system.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/util/system.py",
    "file_hunks_size": 14,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/util/system.py:1085:54 Unsupported operand [58]: `+` is not supported for operand types `str` and `Union[bytes, str]`.",
    "message": " `+` is not supported for operand types `str` and `Union[bytes, str]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 1085,
    "warning_line": "      completed_lines = target.read(block_end_byte) + content"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/version.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/version.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/version.py:175:6 Incompatible return type [7]: Expected `typing.Callable[[typing.Any, typing.Any], bool]` but got `bool`.",
    "message": " Expected `typing.Callable[[typing.Any, typing.Any], bool]` but got `bool`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 175,
    "warning_line": "      return False",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n  def _compare(self, other: Any, method: Callable[[Any, Any], bool]) -> Callable[[Any, Any], bool]:\n    \"\"\"\n",
        "source_code_len": 109,
        "target_code": "\n  def _compare(self, other: Any, method: Callable[[Any, Any], bool]) -> bool:\n    \"\"\"\n",
        "target_code_len": 87,
        "diff_format": "@@ -168,3 +167,3 @@\n \n-  def _compare(self, other: Any, method: Callable[[Any, Any], bool]) -> Callable[[Any, Any], bool]:\n+  def _compare(self, other: Any, method: Callable[[Any, Any], bool]) -> bool:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n  <DED>def _compare(self, other: Any, method: Callable[[Any, Any], bool]) -> Callable[[Any, Any], bool]:\n    <IND>",
        "target_code_with_indent": "\n  <DED>def _compare(self, other: Any, method: Callable[[Any, Any], bool]) -> bool:\n    <IND>"
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/version.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/version.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/version.py:188:8 Incompatible return type [7]: Expected `typing.Callable[[typing.Any, typing.Any], bool]` but got `bool`.",
    "message": " Expected `typing.Callable[[typing.Any, typing.Any], bool]` but got `bool`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 188,
    "warning_line": "        return method(my_version, other_version)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n  def _compare(self, other: Any, method: Callable[[Any, Any], bool]) -> Callable[[Any, Any], bool]:\n    \"\"\"\n",
        "source_code_len": 109,
        "target_code": "\n  def _compare(self, other: Any, method: Callable[[Any, Any], bool]) -> bool:\n    \"\"\"\n",
        "target_code_len": 87,
        "diff_format": "@@ -168,3 +167,3 @@\n \n-  def _compare(self, other: Any, method: Callable[[Any, Any], bool]) -> Callable[[Any, Any], bool]:\n+  def _compare(self, other: Any, method: Callable[[Any, Any], bool]) -> bool:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n  <DED>def _compare(self, other: Any, method: Callable[[Any, Any], bool]) -> Callable[[Any, Any], bool]:\n    <IND>",
        "target_code_with_indent": "\n  <DED>def _compare(self, other: Any, method: Callable[[Any, Any], bool]) -> bool:\n    <IND>"
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/version.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/version.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/version.py:198:4 Incompatible return type [7]: Expected `typing.Callable[[typing.Any, typing.Any], bool]` but got `bool`.",
    "message": " Expected `typing.Callable[[typing.Any, typing.Any], bool]` but got `bool`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 198,
    "warning_line": "    return method(my_status, other_status)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n  def _compare(self, other: Any, method: Callable[[Any, Any], bool]) -> Callable[[Any, Any], bool]:\n    \"\"\"\n",
        "source_code_len": 109,
        "target_code": "\n  def _compare(self, other: Any, method: Callable[[Any, Any], bool]) -> bool:\n    \"\"\"\n",
        "target_code_len": 87,
        "diff_format": "@@ -168,3 +167,3 @@\n \n-  def _compare(self, other: Any, method: Callable[[Any, Any], bool]) -> Callable[[Any, Any], bool]:\n+  def _compare(self, other: Any, method: Callable[[Any, Any], bool]) -> bool:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n  <DED>def _compare(self, other: Any, method: Callable[[Any, Any], bool]) -> Callable[[Any, Any], bool]:\n    <IND>",
        "target_code_with_indent": "\n  <DED>def _compare(self, other: Any, method: Callable[[Any, Any], bool]) -> bool:\n    <IND>"
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/version.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/version.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/version.py:204:4 Incompatible return type [7]: Expected `bool` but got `typing.Callable[[typing.Any, typing.Any], bool]`.",
    "message": " Expected `bool` but got `typing.Callable[[typing.Any, typing.Any], bool]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 204,
    "warning_line": "    return self._compare(other, lambda s, o: s == o)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n  def _compare(self, other: Any, method: Callable[[Any, Any], bool]) -> Callable[[Any, Any], bool]:\n    \"\"\"\n",
        "source_code_len": 109,
        "target_code": "\n  def _compare(self, other: Any, method: Callable[[Any, Any], bool]) -> bool:\n    \"\"\"\n",
        "target_code_len": 87,
        "diff_format": "@@ -168,3 +167,3 @@\n \n-  def _compare(self, other: Any, method: Callable[[Any, Any], bool]) -> Callable[[Any, Any], bool]:\n+  def _compare(self, other: Any, method: Callable[[Any, Any], bool]) -> bool:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n  <DED>def _compare(self, other: Any, method: Callable[[Any, Any], bool]) -> Callable[[Any, Any], bool]:\n    <IND>",
        "target_code_with_indent": "\n  <DED>def _compare(self, other: Any, method: Callable[[Any, Any], bool]) -> bool:\n    <IND>"
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/version.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/version.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/version.py:214:4 Incompatible return type [7]: Expected `bool` but got `typing.Callable[[typing.Any, typing.Any], bool]`.",
    "message": " Expected `bool` but got `typing.Callable[[typing.Any, typing.Any], bool]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 214,
    "warning_line": "    return self._compare(other, lambda s, o: s > o)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n  def _compare(self, other: Any, method: Callable[[Any, Any], bool]) -> Callable[[Any, Any], bool]:\n    \"\"\"\n",
        "source_code_len": 109,
        "target_code": "\n  def _compare(self, other: Any, method: Callable[[Any, Any], bool]) -> bool:\n    \"\"\"\n",
        "target_code_len": 87,
        "diff_format": "@@ -168,3 +167,3 @@\n \n-  def _compare(self, other: Any, method: Callable[[Any, Any], bool]) -> Callable[[Any, Any], bool]:\n+  def _compare(self, other: Any, method: Callable[[Any, Any], bool]) -> bool:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n  <DED>def _compare(self, other: Any, method: Callable[[Any, Any], bool]) -> Callable[[Any, Any], bool]:\n    <IND>",
        "target_code_with_indent": "\n  <DED>def _compare(self, other: Any, method: Callable[[Any, Any], bool]) -> bool:\n    <IND>"
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/version.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/version.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/version.py:217:4 Incompatible return type [7]: Expected `bool` but got `typing.Callable[[typing.Any, typing.Any], bool]`.",
    "message": " Expected `bool` but got `typing.Callable[[typing.Any, typing.Any], bool]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 217,
    "warning_line": "    return self._compare(other, lambda s, o: s >= o)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n  def _compare(self, other: Any, method: Callable[[Any, Any], bool]) -> Callable[[Any, Any], bool]:\n    \"\"\"\n",
        "source_code_len": 109,
        "target_code": "\n  def _compare(self, other: Any, method: Callable[[Any, Any], bool]) -> bool:\n    \"\"\"\n",
        "target_code_len": 87,
        "diff_format": "@@ -168,3 +167,3 @@\n \n-  def _compare(self, other: Any, method: Callable[[Any, Any], bool]) -> Callable[[Any, Any], bool]:\n+  def _compare(self, other: Any, method: Callable[[Any, Any], bool]) -> bool:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n  <DED>def _compare(self, other: Any, method: Callable[[Any, Any], bool]) -> Callable[[Any, Any], bool]:\n    <IND>",
        "target_code_with_indent": "\n  <DED>def _compare(self, other: Any, method: Callable[[Any, Any], bool]) -> bool:\n    <IND>"
      }
    ]
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/version.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/version.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/version.py:221:3 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `stem.util.enum.Enum.__init__` but got `typing.Tuple[str, Version]`.",
    "message": " Expected `str` for 1st positional only parameter to call `stem.util.enum.Enum.__init__` but got `typing.Tuple[str, Version]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 221,
    "warning_line": "  ('DORMANT_MODE', Version('0.4.0.1-alpha')),"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/version.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/torproject-stem/stem/version.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stem/version.py:222:3 Incompatible parameter type [6]: Expected `str` for 2nd positional only parameter to call `stem.util.enum.Enum.__init__` but got `typing.Tuple[str, Version]`.",
    "message": " Expected `str` for 2nd positional only parameter to call `stem.util.enum.Enum.__init__` but got `typing.Tuple[str, Version]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 222,
    "warning_line": "  ('HSFETCH_V3', Version('0.4.1.1-alpha')),"
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "test/runner.py",
    "min_patch_found": false,
    "full_warning_msg": "test/runner.py:73:3 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `stem.util.enum.Enum.__init__` but got `typing.Tuple[str, str]`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "test/runner.py",
    "min_patch_found": false,
    "full_warning_msg": "test/runner.py:74:3 Incompatible parameter type [6]: Expected `str` for 2nd positional only parameter to call `stem.util.enum.Enum.__init__` but got `typing.Tuple[str, str]`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "test/runner.py",
    "min_patch_found": false,
    "full_warning_msg": "test/runner.py:75:3 Incompatible parameter type [6]: Expected `str` for 3rd positional only parameter to call `stem.util.enum.Enum.__init__` but got `typing.Tuple[str, str]`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "test/runner.py",
    "min_patch_found": false,
    "full_warning_msg": "test/runner.py:76:3 Incompatible parameter type [6]: Expected `str` for 4th positional only parameter to call `stem.util.enum.Enum.__init__` but got `typing.Tuple[str, str]`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "torproject/stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "test/runner.py",
    "min_patch_found": false,
    "full_warning_msg": "test/runner.py:77:3 Incompatible parameter type [6]: Expected `str` for 5th positional only parameter to call `stem.util.enum.Enum.__init__` but got `typing.Tuple[str, str]`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  }
]