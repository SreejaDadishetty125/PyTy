[
  {
    "project": "terrencepreilly/darglint",
    "commit": "e2ac0c6babe56726a5f71446010dc6354e2a7ea5",
    "filename": "darglint/analysis/assert_visitor.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/terrencepreilly-darglint/darglint/analysis/assert_visitor.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "darglint/analysis/assert_visitor.py:18:8 Incompatible attribute type [8]: Attribute `asserts` declared in class `AssertVisitor` has type `_ast.AST` but is used as type `List[Variable[_T]]`.",
    "message": " Attribute `asserts` declared in class `AssertVisitor` has type `_ast.AST` but is used as type `List[Variable[_T]]`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 18,
    "warning_line": "        self.asserts = list()  # type: ast.AST",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "    def __init__(self, *args, **kwargs):\n        # type: (List[Any], Dict[str, Any]) -> None\n\n        # Allow the raise visitor to be used in a mixin.\n        super(AssertVisitor, self).__init__(*args, **kwargs)\n\n        self.asserts = list()  # type: ast.AST\n\n",
        "source_code_len": 261,
        "target_code": "    def __init__(self, *args, **kwargs):\n        # type: (Any, Any) -> None\n\n        # Allow the raise visitor to be used in a mixin.\n        # TODO: https://github.com/python/mypy/issues/4001\n        super(AssertVisitor, self).__init__(*args, **kwargs)  # type: ignore\n\n        self.asserts = list()  # type: List[ast.Assert]\n\n",
        "target_code_len": 328,
        "diff_format": "@@ -12,8 +12,9 @@\n     def __init__(self, *args, **kwargs):\n-        # type: (List[Any], Dict[str, Any]) -> None\n+        # type: (Any, Any) -> None\n \n         # Allow the raise visitor to be used in a mixin.\n-        super(AssertVisitor, self).__init__(*args, **kwargs)\n+        # TODO: https://github.com/python/mypy/issues/4001\n+        super(AssertVisitor, self).__init__(*args, **kwargs)  # type: ignore\n \n-        self.asserts = list()  # type: ast.AST\n+        self.asserts = list()  # type: List[ast.Assert]\n \n",
        "source_code_with_indent": "    <IND>def __init__(self, *args, **kwargs):\n        # type: (List[Any], Dict[str, Any]) -> None\n\n        # Allow the raise visitor to be used in a mixin.\n        <IND>super(AssertVisitor, self).__init__(*args, **kwargs)\n\n        self.asserts = list()  # type: ast.AST\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <IND>def __init__(self, *args, **kwargs):\n        # type: (Any, Any) -> None\n\n        # Allow the raise visitor to be used in a mixin.\n        # TODO: https://github.com/python/mypy/issues/4001\n        <IND>super(AssertVisitor, self).__init__(*args, **kwargs)  # type: ignore\n\n        self.asserts = list()  # type: List[ast.Assert]\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "terrencepreilly/darglint",
    "commit": "e2ac0c6babe56726a5f71446010dc6354e2a7ea5",
    "filename": "darglint/analysis/function_scoped_visitor.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/terrencepreilly-darglint/darglint/analysis/function_scoped_visitor.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "darglint/analysis/function_scoped_visitor.py:23:12 Incompatible return type [7]: Expected `_ast.AST` but got implicit return value of `None`.",
    "message": " Expected `_ast.AST` but got implicit return value of `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 23,
    "warning_line": "            return getattr(",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            )(node)\n\n",
        "source_code_len": 21,
        "target_code": "            )(node)\n        else:\n            # Return a synthetic Pass node, to make type checking happy\n            # (and to not violate the contract.)  Since it has no children,\n            # it will effectively stop the visit.\n            return ast.Pass()\n\n",
        "target_code_len": 263,
        "diff_format": "@@ -27,2 +33,7 @@\n             )(node)\n+        else:\n+            # Return a synthetic Pass node, to make type checking happy\n+            # (and to not violate the contract.)  Since it has no children,\n+            # it will effectively stop the visit.\n+            return ast.Pass()\n \n",
        "source_code_with_indent": "            )(node)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            )(node)\n        <DED>else:\n            # Return a synthetic Pass node, to make type checking happy\n            # (and to not violate the contract.)  Since it has no children,\n            # it will effectively stop the visit.\n            <IND>return ast.Pass()\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "terrencepreilly/darglint",
    "commit": "e2ac0c6babe56726a5f71446010dc6354e2a7ea5",
    "filename": "darglint/analysis/function_scoped_visitor.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/terrencepreilly-darglint/darglint/analysis/function_scoped_visitor.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "darglint/analysis/function_scoped_visitor.py:33:12 Incompatible return type [7]: Expected `_ast.AST` but got implicit return value of `None`.",
    "message": " Expected `_ast.AST` but got implicit return value of `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 33,
    "warning_line": "            return getattr(",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            )(node)\n\n",
        "source_code_len": 21,
        "target_code": "            )(node)\n        else:\n            return ast.Pass()\n\n",
        "target_code_len": 65,
        "diff_format": "@@ -37,2 +48,4 @@\n             )(node)\n+        else:\n+            return ast.Pass()\n \n",
        "source_code_with_indent": "            )(node)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            )(node)\n        <DED>else:\n            <IND>return ast.Pass()\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "terrencepreilly/darglint",
    "commit": "e2ac0c6babe56726a5f71446010dc6354e2a7ea5",
    "filename": "darglint/analysis/function_scoped_visitor.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/terrencepreilly-darglint/darglint/analysis/function_scoped_visitor.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "darglint/analysis/function_scoped_visitor.py:43:12 Incompatible return type [7]: Expected `_ast.AST` but got implicit return value of `None`.",
    "message": " Expected `_ast.AST` but got implicit return value of `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 43,
    "warning_line": "            return getattr(",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            )(node)\n",
        "source_code_len": 20,
        "target_code": "            )(node)\n        else:\n            return ast.Pass()\n",
        "target_code_len": 64,
        "diff_format": "@@ -47,1 +60,3 @@\n             )(node)\n+        else:\n+            return ast.Pass()\n",
        "source_code_with_indent": "            )(node)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            )(node)\n        <DED>else:\n            <IND>return ast.Pass()\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "terrencepreilly/darglint",
    "commit": "e2ac0c6babe56726a5f71446010dc6354e2a7ea5",
    "filename": "darglint/analysis/yield_visitor.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/terrencepreilly-darglint/darglint/analysis/yield_visitor.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "darglint/analysis/yield_visitor.py:30:4 Inconsistent override [14]: `darglint.analysis.yield_visitor.YieldVisitor.visit_YieldFrom` overrides method defined in `ast.NodeVisitor` inconsistently. Parameter of type `_ast.Yield` is not a supertype of the overridden parameter `_ast.YieldFrom`.",
    "message": " `darglint.analysis.yield_visitor.YieldVisitor.visit_YieldFrom` overrides method defined in `ast.NodeVisitor` inconsistently. Parameter of type `_ast.Yield` is not a supertype of the overridden parameter `_ast.YieldFrom`.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 30,
    "warning_line": "    def visit_YieldFrom(self, node):",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def visit_YieldFrom(self, node):\n        # type: (ast.Yield) -> ast.AST\n        self.yields.append(node)\n",
        "source_code_len": 109,
        "target_code": "    def visit_YieldFrom(self, node):\n        # type: (ast.YieldFrom) -> ast.AST\n        self.yields.append(node)\n",
        "target_code_len": 113,
        "diff_format": "@@ -30,3 +33,3 @@\n     def visit_YieldFrom(self, node):\n-        # type: (ast.Yield) -> ast.AST\n+        # type: (ast.YieldFrom) -> ast.AST\n         self.yields.append(node)\n",
        "source_code_with_indent": "    <DED>def visit_YieldFrom(self, node):\n        # type: (ast.Yield) -> ast.AST\n        <IND>self.yields.append(node)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def visit_YieldFrom(self, node):\n        # type: (ast.YieldFrom) -> ast.AST\n        <IND>self.yields.append(node)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "terrencepreilly/darglint",
    "commit": "e2ac0c6babe56726a5f71446010dc6354e2a7ea5",
    "filename": "darglint/config.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/terrencepreilly-darglint/darglint/config.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "darglint/config.py:270:8 Incompatible parameter type [6]: Expected `bool` for 7th parameter `ignore_properties` to call `Configuration.__init__` but got `typing.Union[bool, str]`.",
    "message": " Expected `bool` for 7th parameter `ignore_properties` to call `Configuration.__init__` but got `typing.Union[bool, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 270,
    "warning_line": "        ignore_properties=ignore_properties,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        if 'ignore_properties' in config['darglint']:\n            ignore_properties = config['darglint']['ignore_properties']\n        if 'docstring_style' in config['darglint']:\n",
        "source_code_len": 178,
        "target_code": "        if 'ignore_properties' in config['darglint']:\n            ignore_properties = bool(config['darglint']['ignore_properties'])\n        if 'docstring_style' in config['darglint']:\n",
        "target_code_len": 184,
        "diff_format": "@@ -240,3 +240,3 @@\n         if 'ignore_properties' in config['darglint']:\n-            ignore_properties = config['darglint']['ignore_properties']\n+            ignore_properties = bool(config['darglint']['ignore_properties'])\n         if 'docstring_style' in config['darglint']:\n",
        "source_code_with_indent": "        <DED><DED>if 'ignore_properties' in config['darglint']:\n            <IND>ignore_properties = config['darglint']['ignore_properties']\n        <DED>if 'docstring_style' in config['darglint']:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED><DED>if 'ignore_properties' in config['darglint']:\n            <IND>ignore_properties = bool(config['darglint']['ignore_properties'])\n        <DED>if 'docstring_style' in config['darglint']:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "terrencepreilly/darglint",
    "commit": "e2ac0c6babe56726a5f71446010dc6354e2a7ea5",
    "filename": "darglint/docstring/numpy.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/terrencepreilly-darglint/darglint/docstring/numpy.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "darglint/docstring/numpy.py:196:30 Unbound name [10]: Name `ExceptionTypeIdentifier` is used but not defined in the current scope.",
    "message": " Name `ExceptionTypeIdentifier` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 196,
    "warning_line": "            type_identifier = ExceptionTypeIdentifier",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    Tuple,\n    Union,\n",
        "source_code_len": 22,
        "target_code": "    Tuple,\n    Type,\n    Union,\n",
        "target_code_len": 32,
        "diff_format": "@@ -15,2 +15,3 @@\n     Tuple,\n+    Type,\n     Union,\n",
        "source_code_with_indent": "    Tuple,\n    Union,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    Tuple,\n    Type,\n    Union,\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        if section == Sections.ARGUMENTS_SECTION:\n            item_identifier = ArgumentItemIdentifier\n            type_identifier = ArgumentTypeIdentifier\n        elif section == Sections.RAISES_SECTION:\n            item_identifier = ExceptionItemIdentifier\n            type_identifier = ExceptionTypeIdentifier\n\n",
        "source_code_len": 314,
        "target_code": "        if section == Sections.ARGUMENTS_SECTION:\n            item_identifier = ArgumentItemIdentifier  # type: Type[Identifier]\n            type_identifier = ArgumentTypeIdentifier  # type: Type[Identifier]\n        elif section == Sections.RAISES_SECTION:\n            item_identifier = ExceptionItemIdentifier\n\n            # The type is the same as the thing being raised.\n            type_identifier = ExceptionItemIdentifier\n\n",
        "target_code_len": 429,
        "diff_format": "@@ -191,7 +194,9 @@\n         if section == Sections.ARGUMENTS_SECTION:\n-            item_identifier = ArgumentItemIdentifier\n-            type_identifier = ArgumentTypeIdentifier\n+            item_identifier = ArgumentItemIdentifier  # type: Type[Identifier]\n+            type_identifier = ArgumentTypeIdentifier  # type: Type[Identifier]\n         elif section == Sections.RAISES_SECTION:\n             item_identifier = ExceptionItemIdentifier\n-            type_identifier = ExceptionTypeIdentifier\n+\n+            # The type is the same as the thing being raised.\n+            type_identifier = ExceptionItemIdentifier\n \n",
        "source_code_with_indent": "        <DED>if section == Sections.ARGUMENTS_SECTION:\n            <IND>item_identifier = ArgumentItemIdentifier\n            type_identifier = ArgumentTypeIdentifier\n        <DED>elif section == Sections.RAISES_SECTION:\n            <IND>item_identifier = ExceptionItemIdentifier\n            type_identifier = ExceptionTypeIdentifier\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>if section == Sections.ARGUMENTS_SECTION:\n            <IND>item_identifier = ArgumentItemIdentifier  # type: Type[Identifier]\n            type_identifier = ArgumentTypeIdentifier  # type: Type[Identifier]\n        <DED>elif section == Sections.RAISES_SECTION:\n            <IND>item_identifier = ExceptionItemIdentifier\n\n            # The type is the same as the thing being raised.\n            type_identifier = ExceptionItemIdentifier\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "terrencepreilly/darglint",
    "commit": "e2ac0c6babe56726a5f71446010dc6354e2a7ea5",
    "filename": "darglint/function_description.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/terrencepreilly-darglint/darglint/function_description.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "darglint/function_description.py:59:4 Incompatible return type [7]: Expected `str` but got `Optional[str]`.",
    "message": " Expected `str` but got `Optional[str]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 59,
    "warning_line": "    return ast.get_docstring(fun)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _get_docstring(fun):  # type: (ast.AST) -> str\n    return ast.get_docstring(fun)\n",
        "source_code_len": 86,
        "target_code": "\ndef _get_docstring(fun):  # type: (ast.AST) -> Optional[str]\n    return ast.get_docstring(fun)\n",
        "target_code_len": 96,
        "diff_format": "@@ -57,3 +57,3 @@\n \n-def _get_docstring(fun):  # type: (ast.AST) -> str\n+def _get_docstring(fun):  # type: (ast.AST) -> Optional[str]\n     return ast.get_docstring(fun)\n",
        "source_code_with_indent": "\n<DED>def _get_docstring(fun):  # type: (ast.AST) -> str\n    <IND>return ast.get_docstring(fun)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def _get_docstring(fun):  # type: (ast.AST) -> Optional[str]\n    <IND>return ast.get_docstring(fun)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]