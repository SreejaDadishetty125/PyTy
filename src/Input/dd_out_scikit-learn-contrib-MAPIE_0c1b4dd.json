[
  {
    "project": "scikit-learn-contrib/MAPIE",
    "commit": "0c1b4dd76807893db7d13f1878c9e6e83f1efb6d",
    "filename": "examples/plot_barber2020_simulations.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/scikit-learn-contrib-MAPIE/examples/plot_barber2020_simulations.py",
    "file_hunks_size": 1,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "examples/plot_barber2020_simulations.py:100:20 Incompatible parameter type [6]: Expected `typing.Iterable[float]` for 2nd parameter `alpha` to call `MapieRegressor.__init__` but got `float`.",
    "message": " Expected `typing.Iterable[float]` for 2nd parameter `alpha` to call `MapieRegressor.__init__` but got `float`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 100,
    "warning_line": "                    alpha=alpha,"
  },
  {
    "project": "scikit-learn-contrib/MAPIE",
    "commit": "0c1b4dd76807893db7d13f1878c9e6e83f1efb6d",
    "filename": "examples/plot_homoscedastic_1d_data.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/scikit-learn-contrib-MAPIE/examples/plot_homoscedastic_1d_data.py",
    "file_hunks_size": 1,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "examples/plot_homoscedastic_1d_data.py:146:8 Incompatible parameter type [6]: Expected `typing.Iterable[float]` for 2nd parameter `alpha` to call `MapieRegressor.__init__` but got `float`.",
    "message": " Expected `typing.Iterable[float]` for 2nd parameter `alpha` to call `MapieRegressor.__init__` but got `float`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 146,
    "warning_line": "        alpha=0.05,"
  },
  {
    "project": "scikit-learn-contrib/MAPIE",
    "commit": "0c1b4dd76807893db7d13f1878c9e6e83f1efb6d",
    "filename": "examples/plot_nested-cv.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/scikit-learn-contrib-MAPIE/examples/plot_nested-cv.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "examples/plot_nested-cv.py:91:4 Incompatible parameter type [6]: Expected `typing.Iterable[float]` for 2nd parameter `alpha` to call `MapieRegressor.__init__` but got `float`.",
    "message": " Expected `typing.Iterable[float]` for 2nd parameter `alpha` to call `MapieRegressor.__init__` but got `float`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 91,
    "warning_line": "    alpha=alpha,"
  },
  {
    "project": "scikit-learn-contrib/MAPIE",
    "commit": "0c1b4dd76807893db7d13f1878c9e6e83f1efb6d",
    "filename": "examples/plot_nested-cv.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/scikit-learn-contrib-MAPIE/examples/plot_nested-cv.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "examples/plot_nested-cv.py:116:4 Incompatible parameter type [6]: Expected `typing.Iterable[float]` for 2nd parameter `alpha` to call `MapieRegressor.__init__` but got `float`.",
    "message": " Expected `typing.Iterable[float]` for 2nd parameter `alpha` to call `MapieRegressor.__init__` but got `float`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 116,
    "warning_line": "    alpha=alpha,"
  },
  {
    "project": "scikit-learn-contrib/MAPIE",
    "commit": "0c1b4dd76807893db7d13f1878c9e6e83f1efb6d",
    "filename": "mapie/estimators.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/scikit-learn-contrib-MAPIE/mapie/estimators.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mapie/estimators.py:123:8 Incompatible variable type [9]: alpha is declared to have type `Iterable[float]` but is used as type `float`.",
    "message": " alpha is declared to have type `Iterable[float]` but is used as type `float`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 123,
    "warning_line": "        alpha: Iterable[float] = 0.1,",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        estimator: Optional[RegressorMixin] = None,\n        alpha: Iterable[float] = 0.1,\n        method: str = \"plus\",\n",
        "source_code_len": 120,
        "target_code": "        estimator: Optional[RegressorMixin] = None,\n        alpha: Union[float, Iterable[float]] = 0.1,\n        method: str = \"plus\",\n",
        "target_code_len": 134,
        "diff_format": "@@ -122,3 +122,3 @@\n         estimator: Optional[RegressorMixin] = None,\n-        alpha: Iterable[float] = 0.1,\n+        alpha: Union[float, Iterable[float]] = 0.1,\n         method: str = \"plus\",\n",
        "source_code_with_indent": "        estimator: Optional[RegressorMixin] = None,\n        alpha: Iterable[float] = 0.1,\n        method: str = \"plus\",\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        estimator: Optional[RegressorMixin] = None,\n        alpha: Union[float, Iterable[float]] = 0.1,\n        method: str = \"plus\",\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _check_alpha(self, alpha: Iterable[float]) -> np.ndarray:\n        \"\"\"\n",
        "source_code_len": 79,
        "target_code": "\n    def _check_alpha(self, alpha: Union[float, Iterable[float]]) -> np.ndarray:\n        \"\"\"\n",
        "target_code_len": 93,
        "diff_format": "@@ -207,3 +207,3 @@\n \n-    def _check_alpha(self, alpha: Iterable[float]) -> np.ndarray:\n+    def _check_alpha(self, alpha: Union[float, Iterable[float]]) -> np.ndarray:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def _check_alpha(self, alpha: Iterable[float]) -> np.ndarray:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def _check_alpha(self, alpha: Union[float, Iterable[float]]) -> np.ndarray:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        y_pred = self.single_estimator_.predict(X)\n        self.alpha = self._check_alpha(self.alpha)\n        if self.method in [\"naive\", \"base\"]:\n            quantile = np.quantile(self.residuals_, 1 - self.alpha, interpolation=\"higher\")\n            # broadcast y_pred to get y_pred_low/up of shape (n_samples_test, len(alpha))\n",
        "source_code_len": 329,
        "target_code": "        y_pred = self.single_estimator_.predict(X)\n        alpha = self._check_alpha(self.alpha)\n        if self.method in [\"naive\", \"base\"]:\n            quantile = np.quantile(self.residuals_, 1 - alpha, interpolation=\"higher\")\n            # broadcast y_pred to get y_pred_low/up of shape (n_samples_test, len(alpha))\n",
        "target_code_len": 319,
        "diff_format": "@@ -315,5 +314,5 @@\n         y_pred = self.single_estimator_.predict(X)\n-        self.alpha = self._check_alpha(self.alpha)\n+        alpha = self._check_alpha(self.alpha)\n         if self.method in [\"naive\", \"base\"]:\n-            quantile = np.quantile(self.residuals_, 1 - self.alpha, interpolation=\"higher\")\n+            quantile = np.quantile(self.residuals_, 1 - alpha, interpolation=\"higher\")\n             # broadcast y_pred to get y_pred_low/up of shape (n_samples_test, len(alpha))\n",
        "source_code_with_indent": "        y_pred = self.single_estimator_.predict(X)\n        self.alpha = self._check_alpha(self.alpha)\n        if self.method in [\"naive\", \"base\"]:\n            <IND>quantile = np.quantile(self.residuals_, 1 - self.alpha, interpolation=\"higher\")\n            # broadcast y_pred to get y_pred_low/up of shape (n_samples_test, len(alpha))\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        y_pred = self.single_estimator_.predict(X)\n        alpha = self._check_alpha(self.alpha)\n        if self.method in [\"naive\", \"base\"]:\n            <IND>quantile = np.quantile(self.residuals_, 1 - alpha, interpolation=\"higher\")\n            # broadcast y_pred to get y_pred_low/up of shape (n_samples_test, len(alpha))\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            # transpose to get array of shape (n_test_samples, len(alpha))\n            y_pred_low = np.quantile(lower_bounds, self.alpha, axis=1, interpolation=\"lower\").T\n            y_pred_up = np.quantile(upper_bounds, 1 - self.alpha, axis=1, interpolation=\"higher\").T\n            if self.ensemble:\n",
        "source_code_len": 301,
        "target_code": "            # transpose to get array of shape (n_test_samples, len(alpha))\n            y_pred_low = np.quantile(lower_bounds, alpha, axis=1, interpolation=\"lower\").T\n            y_pred_up = np.quantile(upper_bounds, 1 - alpha, axis=1, interpolation=\"higher\").T\n            if self.ensemble:\n",
        "target_code_len": 291,
        "diff_format": "@@ -332,4 +331,4 @@\n             # transpose to get array of shape (n_test_samples, len(alpha))\n-            y_pred_low = np.quantile(lower_bounds, self.alpha, axis=1, interpolation=\"lower\").T\n-            y_pred_up = np.quantile(upper_bounds, 1 - self.alpha, axis=1, interpolation=\"higher\").T\n+            y_pred_low = np.quantile(lower_bounds, alpha, axis=1, interpolation=\"lower\").T\n+            y_pred_up = np.quantile(upper_bounds, 1 - alpha, axis=1, interpolation=\"higher\").T\n             if self.ensemble:\n",
        "source_code_with_indent": "            # transpose to get array of shape (n_test_samples, len(alpha))\n            <DED>y_pred_low = np.quantile(lower_bounds, self.alpha, axis=1, interpolation=\"lower\").T\n            y_pred_up = np.quantile(upper_bounds, 1 - self.alpha, axis=1, interpolation=\"higher\").T\n            if self.ensemble:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            # transpose to get array of shape (n_test_samples, len(alpha))\n            <DED>y_pred_low = np.quantile(lower_bounds, alpha, axis=1, interpolation=\"lower\").T\n            y_pred_up = np.quantile(upper_bounds, 1 - alpha, axis=1, interpolation=\"higher\").T\n            if self.ensemble:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "scikit-learn-contrib/MAPIE",
    "commit": "0c1b4dd76807893db7d13f1878c9e6e83f1efb6d",
    "filename": "mapie/estimators.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/scikit-learn-contrib-MAPIE/mapie/estimators.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mapie/estimators.py:334:54 Unsupported operand [58]: `-` is not supported for operand types `int` and `Iterable[float]`.",
    "message": " `-` is not supported for operand types `int` and `Iterable[float]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 334,
    "warning_line": "            y_pred_up = np.quantile(upper_bounds, 1 - self.alpha, axis=1, interpolation=\"higher\").T",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        y_pred = self.single_estimator_.predict(X)\n        self.alpha = self._check_alpha(self.alpha)\n        if self.method in [\"naive\", \"base\"]:\n            quantile = np.quantile(self.residuals_, 1 - self.alpha, interpolation=\"higher\")\n            # broadcast y_pred to get y_pred_low/up of shape (n_samples_test, len(alpha))\n",
        "source_code_len": 329,
        "target_code": "        y_pred = self.single_estimator_.predict(X)\n        alpha = self._check_alpha(self.alpha)\n        if self.method in [\"naive\", \"base\"]:\n            quantile = np.quantile(self.residuals_, 1 - alpha, interpolation=\"higher\")\n            # broadcast y_pred to get y_pred_low/up of shape (n_samples_test, len(alpha))\n",
        "target_code_len": 319,
        "diff_format": "@@ -315,5 +314,5 @@\n         y_pred = self.single_estimator_.predict(X)\n-        self.alpha = self._check_alpha(self.alpha)\n+        alpha = self._check_alpha(self.alpha)\n         if self.method in [\"naive\", \"base\"]:\n-            quantile = np.quantile(self.residuals_, 1 - self.alpha, interpolation=\"higher\")\n+            quantile = np.quantile(self.residuals_, 1 - alpha, interpolation=\"higher\")\n             # broadcast y_pred to get y_pred_low/up of shape (n_samples_test, len(alpha))\n",
        "source_code_with_indent": "        y_pred = self.single_estimator_.predict(X)\n        self.alpha = self._check_alpha(self.alpha)\n        if self.method in [\"naive\", \"base\"]:\n            <IND>quantile = np.quantile(self.residuals_, 1 - self.alpha, interpolation=\"higher\")\n            # broadcast y_pred to get y_pred_low/up of shape (n_samples_test, len(alpha))\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        y_pred = self.single_estimator_.predict(X)\n        alpha = self._check_alpha(self.alpha)\n        if self.method in [\"naive\", \"base\"]:\n            <IND>quantile = np.quantile(self.residuals_, 1 - alpha, interpolation=\"higher\")\n            # broadcast y_pred to get y_pred_low/up of shape (n_samples_test, len(alpha))\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            # transpose to get array of shape (n_test_samples, len(alpha))\n            y_pred_low = np.quantile(lower_bounds, self.alpha, axis=1, interpolation=\"lower\").T\n            y_pred_up = np.quantile(upper_bounds, 1 - self.alpha, axis=1, interpolation=\"higher\").T\n            if self.ensemble:\n",
        "source_code_len": 301,
        "target_code": "            # transpose to get array of shape (n_test_samples, len(alpha))\n            y_pred_low = np.quantile(lower_bounds, alpha, axis=1, interpolation=\"lower\").T\n            y_pred_up = np.quantile(upper_bounds, 1 - alpha, axis=1, interpolation=\"higher\").T\n            if self.ensemble:\n",
        "target_code_len": 291,
        "diff_format": "@@ -332,4 +331,4 @@\n             # transpose to get array of shape (n_test_samples, len(alpha))\n-            y_pred_low = np.quantile(lower_bounds, self.alpha, axis=1, interpolation=\"lower\").T\n-            y_pred_up = np.quantile(upper_bounds, 1 - self.alpha, axis=1, interpolation=\"higher\").T\n+            y_pred_low = np.quantile(lower_bounds, alpha, axis=1, interpolation=\"lower\").T\n+            y_pred_up = np.quantile(upper_bounds, 1 - alpha, axis=1, interpolation=\"higher\").T\n             if self.ensemble:\n",
        "source_code_with_indent": "            # transpose to get array of shape (n_test_samples, len(alpha))\n            <DED>y_pred_low = np.quantile(lower_bounds, self.alpha, axis=1, interpolation=\"lower\").T\n            y_pred_up = np.quantile(upper_bounds, 1 - self.alpha, axis=1, interpolation=\"higher\").T\n            if self.ensemble:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            # transpose to get array of shape (n_test_samples, len(alpha))\n            <DED>y_pred_low = np.quantile(lower_bounds, alpha, axis=1, interpolation=\"lower\").T\n            y_pred_up = np.quantile(upper_bounds, 1 - alpha, axis=1, interpolation=\"higher\").T\n            if self.ensemble:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "scikit-learn-contrib/MAPIE",
    "commit": "0c1b4dd76807893db7d13f1878c9e6e83f1efb6d",
    "filename": "mapie/tests/test_estimators.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/scikit-learn-contrib-MAPIE/mapie/tests/test_estimators.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mapie/tests/test_estimators.py:114:57 Incompatible parameter type [6]: Expected `typing.Iterable[float]` for 2nd positional only parameter to call `MapieRegressor.__init__` but got `object`.",
    "message": " Expected `typing.Iterable[float]` for 2nd positional only parameter to call `MapieRegressor.__init__` but got `object`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 114,
    "warning_line": "    mapie = MapieRegressor(estimator=DummyRegressor(), **STRATEGIES[strategy])"
  },
  {
    "project": "scikit-learn-contrib/MAPIE",
    "commit": "0c1b4dd76807893db7d13f1878c9e6e83f1efb6d",
    "filename": "mapie/tests/test_estimators.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/scikit-learn-contrib-MAPIE/mapie/tests/test_estimators.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mapie/tests/test_estimators.py:124:27 Incompatible parameter type [6]: Expected `typing.Iterable[float]` for 1st parameter `alpha` to call `MapieRegressor.__init__` but got `int`.",
    "message": " Expected `typing.Iterable[float]` for 1st parameter `alpha` to call `MapieRegressor.__init__` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 124,
    "warning_line": "    mapie = MapieRegressor(alpha=alpha)"
  },
  {
    "project": "scikit-learn-contrib/MAPIE",
    "commit": "0c1b4dd76807893db7d13f1878c9e6e83f1efb6d",
    "filename": "mapie/tests/test_estimators.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/scikit-learn-contrib-MAPIE/mapie/tests/test_estimators.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mapie/tests/test_estimators.py:136:27 Incompatible parameter type [6]: Expected `typing.Iterable[float]` for 1st parameter `alpha` to call `MapieRegressor.__init__` but got `int`.",
    "message": " Expected `typing.Iterable[float]` for 1st parameter `alpha` to call `MapieRegressor.__init__` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 136,
    "warning_line": "    mapie = MapieRegressor(alpha=alpha)"
  },
  {
    "project": "scikit-learn-contrib/MAPIE",
    "commit": "0c1b4dd76807893db7d13f1878c9e6e83f1efb6d",
    "filename": "mapie/tests/test_estimators.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/scikit-learn-contrib-MAPIE/mapie/tests/test_estimators.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mapie/tests/test_estimators.py:228:48 Incompatible parameter type [6]: Expected `typing.Iterable[float]` for 2nd positional only parameter to call `MapieRegressor.__init__` but got `object`.",
    "message": " Expected `typing.Iterable[float]` for 2nd positional only parameter to call `MapieRegressor.__init__` but got `object`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 228,
    "warning_line": "    mapie = MapieRegressor(ensemble=ensemble, **STRATEGIES[strategy])"
  },
  {
    "project": "scikit-learn-contrib/MAPIE",
    "commit": "0c1b4dd76807893db7d13f1878c9e6e83f1efb6d",
    "filename": "mapie/tests/test_estimators.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/scikit-learn-contrib-MAPIE/mapie/tests/test_estimators.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mapie/tests/test_estimators.py:257:48 Incompatible parameter type [6]: Expected `typing.Iterable[float]` for 2nd positional only parameter to call `MapieRegressor.__init__` but got `object`.",
    "message": " Expected `typing.Iterable[float]` for 2nd positional only parameter to call `MapieRegressor.__init__` but got `object`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 257,
    "warning_line": "    mapie = MapieRegressor(ensemble=ensemble, **STRATEGIES[strategy])"
  },
  {
    "project": "scikit-learn-contrib/MAPIE",
    "commit": "0c1b4dd76807893db7d13f1878c9e6e83f1efb6d",
    "filename": "mapie/tests/test_estimators.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/scikit-learn-contrib-MAPIE/mapie/tests/test_estimators.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mapie/tests/test_estimators.py:267:57 Incompatible parameter type [6]: Expected `typing.Iterable[float]` for 2nd parameter `alpha` to call `MapieRegressor.__init__` but got `float`.",
    "message": " Expected `typing.Iterable[float]` for 2nd parameter `alpha` to call `MapieRegressor.__init__` but got `float`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 267,
    "warning_line": "    mapie = MapieRegressor(estimator=LinearRegression(), alpha=0.05, **STRATEGIES[strategy])"
  }
]