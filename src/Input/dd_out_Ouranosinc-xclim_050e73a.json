[
  {
    "project": "Ouranosinc/xclim",
    "commit": "050e73a7f7ca5d39d2c179c7368fa0826a208b1a",
    "filename": "xclim/indices/_anuclim.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Ouranosinc-xclim/xclim/indices/_anuclim.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "xclim/indices/_anuclim.py:431:26 Incompatible variable type [9]: op is declared to have type `str` but is used as type `None`.",
    "message": " op is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 431,
    "warning_line": "    pr: xarray.DataArray, op: str = None, input_freq: str = None, freq: str = \"YS\""
  },
  {
    "project": "Ouranosinc/xclim",
    "commit": "050e73a7f7ca5d39d2c179c7368fa0826a208b1a",
    "filename": "xclim/indices/_anuclim.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Ouranosinc-xclim/xclim/indices/_anuclim.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "xclim/indices/_anuclim.py:431:42 Incompatible variable type [9]: input_freq is declared to have type `str` but is used as type `None`.",
    "message": " input_freq is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 431,
    "warning_line": "    pr: xarray.DataArray, op: str = None, input_freq: str = None, freq: str = \"YS\""
  },
  {
    "project": "Ouranosinc/xclim",
    "commit": "050e73a7f7ca5d39d2c179c7368fa0826a208b1a",
    "filename": "xclim/sdba/utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Ouranosinc-xclim/xclim/sdba/utils.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "xclim/sdba/utils.py:331:27 Incompatible parameter type [6]: Expected `Sequence[Union[float, int]]` for 2nd parameter `left` to call `add_endpoints` but got `Sequence[typing.List[typing.Any]]`.",
    "message": " Expected `Sequence[Union[float, int]]` for 2nd parameter `left` to call `add_endpoints` but got `Sequence[typing.List[typing.Any]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 331,
    "warning_line": "    xq = add_endpoints(xq, left=[q_l, x_l], right=[q_r, x_r])",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\"\"\"SDBA utilities module.\"\"\"\nfrom typing import Mapping, Optional, Sequence, Union\nfrom warnings import warn\n",
        "source_code_len": 109,
        "target_code": "\"\"\"SDBA utilities module.\"\"\"\nfrom typing import List, Mapping, Optional, Union\nfrom warnings import warn\n",
        "target_code_len": 105,
        "diff_format": "@@ -1,3 +1,3 @@\n \"\"\"SDBA utilities module.\"\"\"\n-from typing import Mapping, Optional, Sequence, Union\n+from typing import List, Mapping, Optional, Union\n from warnings import warn\n",
        "source_code_with_indent": "\"\"\"SDBA utilities module.\"\"\"\nfrom typing import Mapping, Optional, Sequence, Union\nfrom warnings import warn\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\"\"\"SDBA utilities module.\"\"\"\nfrom typing import List, Mapping, Optional, Union\nfrom warnings import warn\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    da: xr.DataArray,\n    left: Sequence[Union[int, float]],\n    right: Sequence[Union[int, float]],\n    dim: str = \"quantiles\",\n",
        "source_code_len": 129,
        "target_code": "    da: xr.DataArray,\n    left: List[Union[int, float, xr.DataArray, List[Union[int, float]]]],\n    right: List[Union[int, float, xr.DataArray, List[Union[int, float]]]],\n    dim: str = \"quantiles\",\n",
        "target_code_len": 199,
        "diff_format": "@@ -336,4 +336,4 @@\n     da: xr.DataArray,\n-    left: Sequence[Union[int, float]],\n-    right: Sequence[Union[int, float]],\n+    left: List[Union[int, float, xr.DataArray, List[Union[int, float]]]],\n+    right: List[Union[int, float, xr.DataArray, List[Union[int, float]]]],\n     dim: str = \"quantiles\",\n",
        "source_code_with_indent": "    da: xr.DataArray,\n    left: Sequence[Union[int, float]],\n    right: Sequence[Union[int, float]],\n    dim: str = \"quantiles\",\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    da: xr.DataArray,\n    left: List[Union[int, float, xr.DataArray, List[Union[int, float]]]],\n    right: List[Union[int, float, xr.DataArray, List[Union[int, float]]]],\n    dim: str = \"quantiles\",\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]