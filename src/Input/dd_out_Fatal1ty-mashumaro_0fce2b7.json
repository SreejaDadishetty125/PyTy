[
  {
    "project": "Fatal1ty/mashumaro",
    "commit": "0fce2b7c2c414022c0ac2c1d97ba4b54932f2892",
    "filename": "mashumaro/serializer/json.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Fatal1ty-mashumaro/mashumaro/serializer/json.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mashumaro/serializer/json.py:26:15 Call error [29]: `Optional[typing.Callable[[Dict[typing.Any, typing.Any]], Union[bytearray, bytes, str]]]` is not a function.",
    "message": " `Optional[typing.Callable[[Dict[typing.Any, typing.Any]], Union[bytearray, bytes, str]]]` is not a function.",
    "rule_id": "Call error [29]",
    "warning_line_no": 26,
    "warning_line": "        return encoder(",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def to_json(\n            self: T,\n            encoder: Optional[Encoder] = json.dumps,\n            dict_params: Optional[Mapping] = MappingProxyType({}),\n            **encoder_kwargs) -> EncodedData:\n\n",
        "source_code_len": 205,
        "target_code": "    def to_json(\n        self: T,\n        encoder: Encoder = json.dumps,\n        dict_params: Mapping = MappingProxyType({}),\n        **encoder_kwargs,\n    ) -> EncodedData:\n\n",
        "target_code_len": 175,
        "diff_format": "@@ -20,6 +29,7 @@\n     def to_json(\n-            self: T,\n-            encoder: Optional[Encoder] = json.dumps,\n-            dict_params: Optional[Mapping] = MappingProxyType({}),\n-            **encoder_kwargs) -> EncodedData:\n+        self: T,\n+        encoder: Encoder = json.dumps,\n+        dict_params: Mapping = MappingProxyType({}),\n+        **encoder_kwargs,\n+    ) -> EncodedData:\n \n",
        "source_code_with_indent": "    <IND>def to_json(\n            self: T,\n            encoder: Optional[Encoder] = json.dumps,\n            dict_params: Optional[Mapping] = MappingProxyType({}),\n            **encoder_kwargs) -> EncodedData:\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <IND>def to_json(\n        self: T,\n        encoder: Encoder = json.dumps,\n        dict_params: Mapping = MappingProxyType({}),\n        **encoder_kwargs,\n    ) -> EncodedData:\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Fatal1ty/mashumaro",
    "commit": "0fce2b7c2c414022c0ac2c1d97ba4b54932f2892",
    "filename": "mashumaro/serializer/json.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Fatal1ty-mashumaro/mashumaro/serializer/json.py",
    "file_hunks_size": 6,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mashumaro/serializer/json.py:35:12 Incompatible variable type [9]: decoder is declared to have type `Optional[typing.Callable[[Union[bytearray, bytes, str]], Dict[typing.Any, typing.Any]]]` but is used as type `typing.Callable(json.loads)[[Named(s, Union[bytes, str]), KeywordOnly(cls, Optional[Type[json.decoder.JSONDecoder]], default), KeywordOnly(object_hook, Optional[typing.Callable[[Dict[typing.Any, typing.Any]], typing.Any]], default), KeywordOnly(parse_float, Optional[typing.Callable[[str], typing.Any]], default), KeywordOnly(parse_int, Optional[typing.Callable[[str], typing.Any]], default), KeywordOnly(parse_constant, Optional[typing.Callable[[str], typing.Any]], default), KeywordOnly(object_pairs_hook, Optional[typing.Callable[[typing.List[typing.Tuple[typing.Any, typing.Any]]], typing.Any]], default), Keywords(typing.Any)], typing.Any]`.",
    "message": " decoder is declared to have type `Optional[typing.Callable[[Union[bytearray, bytes, str]], Dict[typing.Any, typing.Any]]]` but is used as type `typing.Callable(json.loads)[[Named(s, Union[bytes, str]), KeywordOnly(cls, Optional[Type[json.decoder.JSONDecoder]], default), KeywordOnly(object_hook, Optional[typing.Callable[[Dict[typing.Any, typing.Any]], typing.Any]], default), KeywordOnly(parse_float, Optional[typing.Callable[[str], typing.Any]], default), KeywordOnly(parse_int, Optional[typing.Callable[[str], typing.Any]], default), KeywordOnly(parse_constant, Optional[typing.Callable[[str], typing.Any]], default), KeywordOnly(object_pairs_hook, Optional[typing.Callable[[typing.List[typing.Tuple[typing.Any, typing.Any]]], typing.Any]], default), Keywords(typing.Any)], typing.Any]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 35,
    "warning_line": "            decoder: Optional[Decoder] = json.loads,"
  },
  {
    "project": "Fatal1ty/mashumaro",
    "commit": "0fce2b7c2c414022c0ac2c1d97ba4b54932f2892",
    "filename": "mashumaro/serializer/json.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Fatal1ty-mashumaro/mashumaro/serializer/json.py",
    "file_hunks_size": 6,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mashumaro/serializer/json.py:39:8 Incompatible return type [7]: Expected `Variable[T (bound to DataClassJSONMixin)]` but got `mashumaro.serializer.base.dict.DataClassDictMixin`.",
    "message": " Expected `Variable[T (bound to DataClassJSONMixin)]` but got `mashumaro.serializer.base.dict.DataClassDictMixin`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 39,
    "warning_line": "        return cls.from_dict("
  },
  {
    "project": "Fatal1ty/mashumaro",
    "commit": "0fce2b7c2c414022c0ac2c1d97ba4b54932f2892",
    "filename": "mashumaro/serializer/json.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Fatal1ty-mashumaro/mashumaro/serializer/json.py",
    "file_hunks_size": 6,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mashumaro/serializer/json.py:40:12 Call error [29]: `Optional[typing.Callable[[Union[bytearray, bytes, str]], Dict[typing.Any, typing.Any]]]` is not a function.",
    "message": " `Optional[typing.Callable[[Union[bytearray, bytes, str]], Dict[typing.Any, typing.Any]]]` is not a function.",
    "rule_id": "Call error [29]",
    "warning_line_no": 40,
    "warning_line": "            decoder(data, **decoder_kwargs),"
  },
  {
    "project": "Fatal1ty/mashumaro",
    "commit": "0fce2b7c2c414022c0ac2c1d97ba4b54932f2892",
    "filename": "mashumaro/serializer/msgpack.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Fatal1ty-mashumaro/mashumaro/serializer/msgpack.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mashumaro/serializer/msgpack.py:30:15 Call error [29]: `Optional[typing.Callable[[Dict[typing.Any, typing.Any]], Union[bytearray, bytes, str]]]` is not a function.",
    "message": " `Optional[typing.Callable[[Dict[typing.Any, typing.Any]], Union[bytearray, bytes, str]]]` is not a function.",
    "rule_id": "Call error [29]",
    "warning_line_no": 30,
    "warning_line": "        return encoder(",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def to_msgpack(\n            self: T,\n            encoder: Optional[Encoder] = partial(\n                msgpack.packb, use_bin_type = True\n            ),\n            dict_params: Optional[Mapping] = MappingProxyType({}),\n            **encoder_kwargs) -> EncodedData:\n\n",
        "source_code_len": 271,
        "target_code": "    def to_msgpack(\n        self: T,\n        encoder: Encoder = partial(msgpack.packb, use_bin_type=True),\n        dict_params: Mapping = MappingProxyType({}),\n        **encoder_kwargs,\n    ) -> EncodedData:\n\n",
        "target_code_len": 209,
        "diff_format": "@@ -22,8 +30,7 @@\n     def to_msgpack(\n-            self: T,\n-            encoder: Optional[Encoder] = partial(\n-                msgpack.packb, use_bin_type = True\n-            ),\n-            dict_params: Optional[Mapping] = MappingProxyType({}),\n-            **encoder_kwargs) -> EncodedData:\n+        self: T,\n+        encoder: Encoder = partial(msgpack.packb, use_bin_type=True),\n+        dict_params: Mapping = MappingProxyType({}),\n+        **encoder_kwargs,\n+    ) -> EncodedData:\n \n",
        "source_code_with_indent": "    <IND>def to_msgpack(\n            self: T,\n            encoder: Optional[Encoder] = partial(\n                msgpack.packb, use_bin_type = True\n            ),\n            dict_params: Optional[Mapping] = MappingProxyType({}),\n            **encoder_kwargs) -> EncodedData:\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <IND>def to_msgpack(\n        self: T,\n        encoder: Encoder = partial(msgpack.packb, use_bin_type=True),\n        dict_params: Mapping = MappingProxyType({}),\n        **encoder_kwargs,\n    ) -> EncodedData:\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Fatal1ty/mashumaro",
    "commit": "0fce2b7c2c414022c0ac2c1d97ba4b54932f2892",
    "filename": "mashumaro/serializer/msgpack.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Fatal1ty-mashumaro/mashumaro/serializer/msgpack.py",
    "file_hunks_size": 5,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mashumaro/serializer/msgpack.py:42:8 Incompatible return type [7]: Expected `Variable[T (bound to DataClassMessagePackMixin)]` but got `mashumaro.serializer.base.dict.DataClassDictMixin`.",
    "message": " Expected `Variable[T (bound to DataClassMessagePackMixin)]` but got `mashumaro.serializer.base.dict.DataClassDictMixin`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 42,
    "warning_line": "        return cls.from_dict("
  },
  {
    "project": "Fatal1ty/mashumaro",
    "commit": "0fce2b7c2c414022c0ac2c1d97ba4b54932f2892",
    "filename": "mashumaro/serializer/msgpack.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Fatal1ty-mashumaro/mashumaro/serializer/msgpack.py",
    "file_hunks_size": 5,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mashumaro/serializer/msgpack.py:43:12 Call error [29]: `Optional[typing.Callable[[Union[bytearray, bytes, str]], Dict[typing.Any, typing.Any]]]` is not a function.",
    "message": " `Optional[typing.Callable[[Union[bytearray, bytes, str]], Dict[typing.Any, typing.Any]]]` is not a function.",
    "rule_id": "Call error [29]",
    "warning_line_no": 43,
    "warning_line": "            decoder(data, **decoder_kwargs),"
  },
  {
    "project": "Fatal1ty/mashumaro",
    "commit": "0fce2b7c2c414022c0ac2c1d97ba4b54932f2892",
    "filename": "mashumaro/serializer/yaml.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Fatal1ty-mashumaro/mashumaro/serializer/yaml.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mashumaro/serializer/yaml.py:27:15 Call error [29]: `Optional[typing.Callable[[Dict[typing.Any, typing.Any]], Union[bytes, str]]]` is not a function.",
    "message": " `Optional[typing.Callable[[Dict[typing.Any, typing.Any]], Union[bytes, str]]]` is not a function.",
    "rule_id": "Call error [29]",
    "warning_line_no": 27,
    "warning_line": "        return encoder(",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def to_yaml(\n            self: T,\n            encoder: Optional[Encoder] = yaml.dump,\n            dict_params: Optional[Mapping] = MappingProxyType({}),\n            **encoder_kwargs) -> EncodedData:\n\n",
        "source_code_len": 204,
        "target_code": "    def to_yaml(\n        self: T,\n        encoder: Encoder = yaml.dump,\n        dict_params: Mapping = MappingProxyType({}),\n        **encoder_kwargs,\n    ) -> EncodedData:\n\n",
        "target_code_len": 174,
        "diff_format": "@@ -21,6 +20,7 @@\n     def to_yaml(\n-            self: T,\n-            encoder: Optional[Encoder] = yaml.dump,\n-            dict_params: Optional[Mapping] = MappingProxyType({}),\n-            **encoder_kwargs) -> EncodedData:\n+        self: T,\n+        encoder: Encoder = yaml.dump,\n+        dict_params: Mapping = MappingProxyType({}),\n+        **encoder_kwargs,\n+    ) -> EncodedData:\n \n",
        "source_code_with_indent": "    <IND>def to_yaml(\n            self: T,\n            encoder: Optional[Encoder] = yaml.dump,\n            dict_params: Optional[Mapping] = MappingProxyType({}),\n            **encoder_kwargs) -> EncodedData:\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <IND>def to_yaml(\n        self: T,\n        encoder: Encoder = yaml.dump,\n        dict_params: Mapping = MappingProxyType({}),\n        **encoder_kwargs,\n    ) -> EncodedData:\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Fatal1ty/mashumaro",
    "commit": "0fce2b7c2c414022c0ac2c1d97ba4b54932f2892",
    "filename": "mashumaro/serializer/yaml.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Fatal1ty-mashumaro/mashumaro/serializer/yaml.py",
    "file_hunks_size": 6,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mashumaro/serializer/yaml.py:39:8 Incompatible return type [7]: Expected `Variable[T (bound to DataClassYAMLMixin)]` but got `mashumaro.serializer.base.dict.DataClassDictMixin`.",
    "message": " Expected `Variable[T (bound to DataClassYAMLMixin)]` but got `mashumaro.serializer.base.dict.DataClassDictMixin`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 39,
    "warning_line": "        return cls.from_dict("
  },
  {
    "project": "Fatal1ty/mashumaro",
    "commit": "0fce2b7c2c414022c0ac2c1d97ba4b54932f2892",
    "filename": "mashumaro/serializer/yaml.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Fatal1ty-mashumaro/mashumaro/serializer/yaml.py",
    "file_hunks_size": 6,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mashumaro/serializer/yaml.py:40:12 Call error [29]: `Optional[typing.Callable[[Union[bytes, str]], Dict[typing.Any, typing.Any]]]` is not a function.",
    "message": " `Optional[typing.Callable[[Union[bytes, str]], Dict[typing.Any, typing.Any]]]` is not a function.",
    "rule_id": "Call error [29]",
    "warning_line_no": 40,
    "warning_line": "            decoder(data, **decoder_kwargs),"
  }
]