[
  {
    "project": "SeldonIO/alibi",
    "commit": "279472571719369b3afba7c65f84d5ed80154c6f",
    "filename": "alibi/explainers/anchor_base.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/SeldonIO-alibi/alibi/explainers/anchor_base.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "alibi/explainers/anchor_base.py:859:4 Inconsistent override [15]: `alibi.explainers.anchor_base.DistributedAnchorBaseBeam.draw_samples` overrides method defined in `AnchorBaseBeam` inconsistently. Returned type `unknown` is not a subtype of the overridden return `Tuple[typing.Tuple[typing.Any, ...], typing.Tuple[typing.Any, ...]]`.",
    "message": " `alibi.explainers.anchor_base.DistributedAnchorBaseBeam.draw_samples` overrides method defined in `AnchorBaseBeam` inconsistently. Returned type `unknown` is not a subtype of the overridden return `Tuple[typing.Tuple[typing.Any, ...], typing.Tuple[typing.Any, ...]]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 859,
    "warning_line": "    def draw_samples(self, anchors: list, batch_size: int) -> Tuple[np.ndarray, np.ndarray]:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n    def draw_samples(self, anchors: list, batch_size: int) -> Tuple[np.ndarray, np.ndarray]:\n        \"\"\"\n",
        "source_code_len": 106,
        "target_code": "\n    def draw_samples(self, anchors: list, batch_size: int) -> Tuple[np.ndarray, np.ndarray]:  # type: ignore\n        \"\"\"\n",
        "target_code_len": 122,
        "diff_format": "@@ -858,3 +856,3 @@\n \n-    def draw_samples(self, anchors: list, batch_size: int) -> Tuple[np.ndarray, np.ndarray]:\n+    def draw_samples(self, anchors: list, batch_size: int) -> Tuple[np.ndarray, np.ndarray]:  # type: ignore\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def draw_samples(self, anchors: list, batch_size: int) -> Tuple[np.ndarray, np.ndarray]:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def draw_samples(self, anchors: list, batch_size: int) -> Tuple[np.ndarray, np.ndarray]:  # type: ignore\n        <IND>"
      }
    ]
  },
  {
    "project": "SeldonIO/alibi",
    "commit": "279472571719369b3afba7c65f84d5ed80154c6f",
    "filename": "alibi/utils/approximation_methods.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/SeldonIO-alibi/alibi/utils/approximation_methods.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "alibi/utils/approximation_methods.py:135:20 Incompatible parameter type [6]: Expected `typing.Iterable[Variable[_T]]` for 1st positional only parameter to call `list.__init__` but got `float`.",
    "message": " Expected `typing.Iterable[Variable[_T]]` for 1st positional only parameter to call `list.__init__` but got `float`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 135,
    "warning_line": "        return list(0.5 * np.polynomial.legendre.leggauss(n)[1])",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        # Scaling from 2 to 1\n        return list(0.5 * np.polynomial.legendre.leggauss(n)[1])\n\n",
        "source_code_len": 96,
        "target_code": "        # Scaling from 2 to 1\n        return list(0.5 * np.polynomial.legendre.leggauss(n)[1])  # type: ignore\n\n",
        "target_code_len": 112,
        "diff_format": "@@ -134,3 +134,3 @@\n         # Scaling from 2 to 1\n-        return list(0.5 * np.polynomial.legendre.leggauss(n)[1])\n+        return list(0.5 * np.polynomial.legendre.leggauss(n)[1])  # type: ignore\n \n",
        "source_code_with_indent": "        # Scaling from 2 to 1\n        return list(0.5 * np.polynomial.legendre.leggauss(n)[1])\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        # Scaling from 2 to 1\n        return list(0.5 * np.polynomial.legendre.leggauss(n)[1])  # type: ignore\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "SeldonIO/alibi",
    "commit": "279472571719369b3afba7c65f84d5ed80154c6f",
    "filename": "alibi/utils/approximation_methods.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/SeldonIO-alibi/alibi/utils/approximation_methods.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "alibi/utils/approximation_methods.py:140:20 Incompatible parameter type [6]: Expected `typing.Iterable[Variable[_T]]` for 1st positional only parameter to call `list.__init__` but got `float`.",
    "message": " Expected `typing.Iterable[Variable[_T]]` for 1st positional only parameter to call `list.__init__` but got `float`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 140,
    "warning_line": "        return list(0.5 * (1 + np.polynomial.legendre.leggauss(n)[0]))",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        # Scaling from [-1, 1] to [0, 1]\n        return list(0.5 * (1 + np.polynomial.legendre.leggauss(n)[0]))\n\n",
        "source_code_len": 113,
        "target_code": "        # Scaling from [-1, 1] to [0, 1]\n        return list(0.5 * (1 + np.polynomial.legendre.leggauss(n)[0]))  # type: ignore\n\n",
        "target_code_len": 129,
        "diff_format": "@@ -139,3 +139,3 @@\n         # Scaling from [-1, 1] to [0, 1]\n-        return list(0.5 * (1 + np.polynomial.legendre.leggauss(n)[0]))\n+        return list(0.5 * (1 + np.polynomial.legendre.leggauss(n)[0]))  # type: ignore\n \n",
        "source_code_with_indent": "        # Scaling from [-1, 1] to [0, 1]\n        return list(0.5 * (1 + np.polynomial.legendre.leggauss(n)[0]))\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        # Scaling from [-1, 1] to [0, 1]\n        return list(0.5 * (1 + np.polynomial.legendre.leggauss(n)[0]))  # type: ignore\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "SeldonIO/alibi",
    "commit": "279472571719369b3afba7c65f84d5ed80154c6f",
    "filename": "alibi/utils/visualization.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/SeldonIO-alibi/alibi/utils/visualization.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "alibi/utils/visualization.py:69:41 Unsupported operand [58]: `-` is not supported for operand types `int` and `Union[float, int]`.",
    "message": " `-` is not supported for operand types `int` and `Union[float, int]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 69,
    "warning_line": "            np.abs(attr_combined), 100 - outlier_perc"
  },
  {
    "project": "SeldonIO/alibi",
    "commit": "279472571719369b3afba7c65f84d5ed80154c6f",
    "filename": "alibi/utils/visualization.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/SeldonIO-alibi/alibi/utils/visualization.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "alibi/utils/visualization.py:73:67 Unsupported operand [58]: `-` is not supported for operand types `int` and `Union[float, int]`.",
    "message": " `-` is not supported for operand types `int` and `Union[float, int]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 73,
    "warning_line": "        threshold = _cumulative_sum_threshold(attr_combined, 100 - outlier_perc)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        attr_combined = np.abs(attr_combined)\n        threshold = _cumulative_sum_threshold(attr_combined, 100 - outlier_perc)\n    else:\n        raise AssertionError(\"Visualize Sign type is not valid.\")\n    return _normalize_scale(attr_combined, threshold)\n\n",
        "source_code_len": 258,
        "target_code": "        attr_combined = np.abs(attr_combined)\n        threshold = _cumulative_sum_threshold(attr_combined, 100 - outlier_perc)  # type: ignore\n    else:\n        raise AssertionError(\"Visualize Sign type is not valid.\")\n    return _normalize_scale(attr_combined, threshold)  # type: ignore\n\n",
        "target_code_len": 290,
        "diff_format": "@@ -72,6 +72,6 @@\n         attr_combined = np.abs(attr_combined)\n-        threshold = _cumulative_sum_threshold(attr_combined, 100 - outlier_perc)\n+        threshold = _cumulative_sum_threshold(attr_combined, 100 - outlier_perc)  # type: ignore\n     else:\n         raise AssertionError(\"Visualize Sign type is not valid.\")\n-    return _normalize_scale(attr_combined, threshold)\n+    return _normalize_scale(attr_combined, threshold)  # type: ignore\n \n",
        "source_code_with_indent": "        <IND>attr_combined = np.abs(attr_combined)\n        threshold = _cumulative_sum_threshold(attr_combined, 100 - outlier_perc)\n    <DED>else:\n        <IND>raise AssertionError(\"Visualize Sign type is not valid.\")\n    <DED>return _normalize_scale(attr_combined, threshold)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>attr_combined = np.abs(attr_combined)\n        threshold = _cumulative_sum_threshold(attr_combined, 100 - outlier_perc)  # type: ignore\n    <DED>else:\n        <IND>raise AssertionError(\"Visualize Sign type is not valid.\")\n    <DED>return _normalize_scale(attr_combined, threshold)  # type: ignore\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]