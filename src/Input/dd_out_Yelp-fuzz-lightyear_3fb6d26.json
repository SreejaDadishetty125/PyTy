[
  {
    "project": "Yelp/fuzz-lightyear",
    "commit": "3fb6d2697753485424d0a0bdd98d9eac518fbf20",
    "filename": "fuzz_lightyear/request.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Yelp-fuzz-lightyear/fuzz_lightyear/request.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "fuzz_lightyear/request.py:190:12 Incompatible variable type [9]: auth is declared to have type `Optional[Dict[str, typing.Any]]` but is used as type `typing.Callable[..., Dict[str, typing.Any]]`.",
    "message": " auth is declared to have type `Optional[Dict[str, typing.Any]]` but is used as type `typing.Callable[..., Dict[str, typing.Any]]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 190,
    "warning_line": "            auth = get_victim_session_factory()",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self,\n        auth: Optional[Dict[str, Any]] = None,\n        *args: Any,\n",
        "source_code_len": 81,
        "target_code": "        self,\n        auth: Optional[Callable[..., Dict[str, Any]]] = None,\n        *args: Any,\n",
        "target_code_len": 96,
        "diff_format": "@@ -157,3 +157,3 @@\n         self,\n-        auth: Optional[Dict[str, Any]] = None,\n+        auth: Optional[Callable[..., Dict[str, Any]]] = None,\n         *args: Any,\n",
        "source_code_with_indent": "        self,\n        auth: Optional[Dict[str, Any]] = None,\n        *args: Any,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self,\n        auth: Optional[Callable[..., Dict[str, Any]]] = None,\n        *args: Any,\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        if header_args.args == ['operation_id']:\n            auth = auth(self.operation_id)\n        else:\n            auth = auth()\n\n",
        "source_code_len": 133,
        "target_code": "        if header_args.args == ['operation_id']:\n            auth_header = auth(self.operation_id)\n        else:\n            auth_header = auth()\n\n",
        "target_code_len": 147,
        "diff_format": "@@ -192,5 +192,5 @@\n         if header_args.args == ['operation_id']:\n-            auth = auth(self.operation_id)\n+            auth_header = auth(self.operation_id)\n         else:\n-            auth = auth()\n+            auth_header = auth()\n \n",
        "source_code_with_indent": "        if header_args.args == ['operation_id']:\n            <IND>auth = auth(self.operation_id)\n        <DED>else:\n            <IND>auth = auth()\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        if header_args.args == ['operation_id']:\n            <IND>auth_header = auth(self.operation_id)\n        <DED>else:\n            <IND>auth_header = auth()\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        _merge_auth_headers(self.fuzzed_input, auth)\n\n",
        "source_code_len": 55,
        "target_code": "\n        _merge_auth_headers(self.fuzzed_input, auth_header)\n\n",
        "target_code_len": 62,
        "diff_format": "@@ -199,3 +199,3 @@\n \n-        _merge_auth_headers(self.fuzzed_input, auth)\n+        _merge_auth_headers(self.fuzzed_input, auth_header)\n \n",
        "source_code_with_indent": "\n        <DED>_merge_auth_headers(self.fuzzed_input, auth)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        <DED>_merge_auth_headers(self.fuzzed_input, auth_header)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Yelp/fuzz-lightyear",
    "commit": "3fb6d2697753485424d0a0bdd98d9eac518fbf20",
    "filename": "fuzz_lightyear/request.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Yelp-fuzz-lightyear/fuzz_lightyear/request.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "fuzz_lightyear/request.py:193:19 Call error [29]: `Optional[Dict[str, typing.Any]]` is not a function.",
    "message": " `Optional[Dict[str, typing.Any]]` is not a function.",
    "rule_id": "Call error [29]",
    "warning_line_no": 193,
    "warning_line": "            auth = auth(self.operation_id)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self,\n        auth: Optional[Dict[str, Any]] = None,\n        *args: Any,\n",
        "source_code_len": 81,
        "target_code": "        self,\n        auth: Optional[Callable[..., Dict[str, Any]]] = None,\n        *args: Any,\n",
        "target_code_len": 96,
        "diff_format": "@@ -157,3 +157,3 @@\n         self,\n-        auth: Optional[Dict[str, Any]] = None,\n+        auth: Optional[Callable[..., Dict[str, Any]]] = None,\n         *args: Any,\n",
        "source_code_with_indent": "        self,\n        auth: Optional[Dict[str, Any]] = None,\n        *args: Any,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self,\n        auth: Optional[Callable[..., Dict[str, Any]]] = None,\n        *args: Any,\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        if header_args.args == ['operation_id']:\n            auth = auth(self.operation_id)\n        else:\n            auth = auth()\n\n",
        "source_code_len": 133,
        "target_code": "        if header_args.args == ['operation_id']:\n            auth_header = auth(self.operation_id)\n        else:\n            auth_header = auth()\n\n",
        "target_code_len": 147,
        "diff_format": "@@ -192,5 +192,5 @@\n         if header_args.args == ['operation_id']:\n-            auth = auth(self.operation_id)\n+            auth_header = auth(self.operation_id)\n         else:\n-            auth = auth()\n+            auth_header = auth()\n \n",
        "source_code_with_indent": "        if header_args.args == ['operation_id']:\n            <IND>auth = auth(self.operation_id)\n        <DED>else:\n            <IND>auth = auth()\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        if header_args.args == ['operation_id']:\n            <IND>auth_header = auth(self.operation_id)\n        <DED>else:\n            <IND>auth_header = auth()\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        _merge_auth_headers(self.fuzzed_input, auth)\n\n",
        "source_code_len": 55,
        "target_code": "\n        _merge_auth_headers(self.fuzzed_input, auth_header)\n\n",
        "target_code_len": 62,
        "diff_format": "@@ -199,3 +199,3 @@\n \n-        _merge_auth_headers(self.fuzzed_input, auth)\n+        _merge_auth_headers(self.fuzzed_input, auth_header)\n \n",
        "source_code_with_indent": "\n        <DED>_merge_auth_headers(self.fuzzed_input, auth)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        <DED>_merge_auth_headers(self.fuzzed_input, auth_header)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Yelp/fuzz-lightyear",
    "commit": "3fb6d2697753485424d0a0bdd98d9eac518fbf20",
    "filename": "fuzz_lightyear/request.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Yelp-fuzz-lightyear/fuzz_lightyear/request.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "fuzz_lightyear/request.py:195:19 Call error [29]: `Optional[Dict[str, typing.Any]]` is not a function.",
    "message": " `Optional[Dict[str, typing.Any]]` is not a function.",
    "rule_id": "Call error [29]",
    "warning_line_no": 195,
    "warning_line": "            auth = auth()",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self,\n        auth: Optional[Dict[str, Any]] = None,\n        *args: Any,\n",
        "source_code_len": 81,
        "target_code": "        self,\n        auth: Optional[Callable[..., Dict[str, Any]]] = None,\n        *args: Any,\n",
        "target_code_len": 96,
        "diff_format": "@@ -157,3 +157,3 @@\n         self,\n-        auth: Optional[Dict[str, Any]] = None,\n+        auth: Optional[Callable[..., Dict[str, Any]]] = None,\n         *args: Any,\n",
        "source_code_with_indent": "        self,\n        auth: Optional[Dict[str, Any]] = None,\n        *args: Any,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self,\n        auth: Optional[Callable[..., Dict[str, Any]]] = None,\n        *args: Any,\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        if header_args.args == ['operation_id']:\n            auth = auth(self.operation_id)\n        else:\n            auth = auth()\n\n",
        "source_code_len": 133,
        "target_code": "        if header_args.args == ['operation_id']:\n            auth_header = auth(self.operation_id)\n        else:\n            auth_header = auth()\n\n",
        "target_code_len": 147,
        "diff_format": "@@ -192,5 +192,5 @@\n         if header_args.args == ['operation_id']:\n-            auth = auth(self.operation_id)\n+            auth_header = auth(self.operation_id)\n         else:\n-            auth = auth()\n+            auth_header = auth()\n \n",
        "source_code_with_indent": "        if header_args.args == ['operation_id']:\n            <IND>auth = auth(self.operation_id)\n        <DED>else:\n            <IND>auth = auth()\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        if header_args.args == ['operation_id']:\n            <IND>auth_header = auth(self.operation_id)\n        <DED>else:\n            <IND>auth_header = auth()\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        _merge_auth_headers(self.fuzzed_input, auth)\n\n",
        "source_code_len": 55,
        "target_code": "\n        _merge_auth_headers(self.fuzzed_input, auth_header)\n\n",
        "target_code_len": 62,
        "diff_format": "@@ -199,3 +199,3 @@\n \n-        _merge_auth_headers(self.fuzzed_input, auth)\n+        _merge_auth_headers(self.fuzzed_input, auth_header)\n \n",
        "source_code_with_indent": "\n        <DED>_merge_auth_headers(self.fuzzed_input, auth)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        <DED>_merge_auth_headers(self.fuzzed_input, auth_header)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]