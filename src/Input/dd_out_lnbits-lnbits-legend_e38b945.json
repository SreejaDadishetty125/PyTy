[
  {
    "project": "lnbits/lnbits-legend",
    "commit": "e38b945d5ca504ce46d7d58f6bbe034c68cbfd2d",
    "filename": "lnbits/extensions/bleskomat/crud.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/lnbits-lnbits-legend/lnbits/extensions/bleskomat/crud.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "lnbits/extensions/bleskomat/crud.py:112:4 Incompatible return type [7]: Expected `BleskomatLnurl` but got `Optional[BleskomatLnurl]`.",
    "message": " Expected `BleskomatLnurl` but got `Optional[BleskomatLnurl]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 112,
    "warning_line": "    return BleskomatLnurl(**row) if row else None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nasync def get_bleskomat_lnurl(secret: str) -> BleskomatLnurl:\n    hash = generate_bleskomat_lnurl_hash(secret)\n",
        "source_code_len": 112,
        "target_code": "\nasync def get_bleskomat_lnurl(secret: str) -> Optional[BleskomatLnurl]:\n    hash = generate_bleskomat_lnurl_hash(secret)\n",
        "target_code_len": 122,
        "diff_format": "@@ -108,3 +108,3 @@\n \n-async def get_bleskomat_lnurl(secret: str) -> BleskomatLnurl:\n+async def get_bleskomat_lnurl(secret: str) -> Optional[BleskomatLnurl]:\n     hash = generate_bleskomat_lnurl_hash(secret)\n",
        "source_code_with_indent": "\n<DED>async def get_bleskomat_lnurl(secret: str) -> BleskomatLnurl:\n    <IND>hash = generate_bleskomat_lnurl_hash(secret)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>async def get_bleskomat_lnurl(secret: str) -> Optional[BleskomatLnurl]:\n    <IND>hash = generate_bleskomat_lnurl_hash(secret)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "lnbits/lnbits-legend",
    "commit": "e38b945d5ca504ce46d7d58f6bbe034c68cbfd2d",
    "filename": "lnbits/extensions/lnticket/crud.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/lnbits-lnbits-legend/lnbits/extensions/lnticket/crud.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "lnbits/extensions/lnticket/crud.py:73:12 Incompatible return type [7]: Expected `Tickets` but got `Optional[Tickets]`.",
    "message": " Expected `Tickets` but got `Optional[Tickets]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 73,
    "warning_line": "            return ticket",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ticket = await get_ticket(payment_hash)\n        if formdata.webhook:\n            async with httpx.AsyncClient() as client:\n                try:\n                    r = await client.post(\n                        formdata.webhook,\n                        json={\n                            \"form\": ticket.form,\n                            \"name\": ticket.name,\n                            \"email\": ticket.email,\n                            \"content\": ticket.ltext,\n                        },\n                        timeout=40,\n                    )\n                except AssertionError:\n                    webhook = None\n            return ticket\n    ticket = await get_ticket(payment_hash)\n    return\n\n",
        "source_code_len": 711,
        "target_code": "        ticket = await get_ticket(payment_hash)\n        assert ticket, \"Newly paid ticket could not be retrieved\"\n\n        if formdata.webhook:\n            async with httpx.AsyncClient() as client:\n                await client.post(\n                    formdata.webhook,\n                    json={\n                        \"form\": ticket.form,\n                        \"name\": ticket.name,\n                        \"email\": ticket.email,\n                        \"content\": ticket.ltext,\n                    },\n                    timeout=40,\n                )\n            return ticket\n\n    ticket = await get_ticket(payment_hash)\n    assert ticket, \"Newly paid ticket could not be retrieved\"\n    return ticket\n\n",
        "target_code_len": 709,
        "diff_format": "@@ -57,20 +57,21 @@\n         ticket = await get_ticket(payment_hash)\n+        assert ticket, \"Newly paid ticket could not be retrieved\"\n+\n         if formdata.webhook:\n             async with httpx.AsyncClient() as client:\n-                try:\n-                    r = await client.post(\n-                        formdata.webhook,\n-                        json={\n-                            \"form\": ticket.form,\n-                            \"name\": ticket.name,\n-                            \"email\": ticket.email,\n-                            \"content\": ticket.ltext,\n-                        },\n-                        timeout=40,\n-                    )\n-                except AssertionError:\n-                    webhook = None\n+                await client.post(\n+                    formdata.webhook,\n+                    json={\n+                        \"form\": ticket.form,\n+                        \"name\": ticket.name,\n+                        \"email\": ticket.email,\n+                        \"content\": ticket.ltext,\n+                    },\n+                    timeout=40,\n+                )\n             return ticket\n+\n     ticket = await get_ticket(payment_hash)\n-    return\n+    assert ticket, \"Newly paid ticket could not be retrieved\"\n+    return ticket\n \n",
        "source_code_with_indent": "        ticket = await get_ticket(payment_hash)\n        if formdata.webhook:\n            <IND>async with httpx.AsyncClient() as client:\n                <IND>try:\n                    <IND>r = await client.post(\n                        formdata.webhook,\n                        json={\n                            \"form\": ticket.form,\n                            \"name\": ticket.name,\n                            \"email\": ticket.email,\n                            \"content\": ticket.ltext,\n                        },\n                        timeout=40,\n                    )\n                <DED>except AssertionError:\n                    <IND>webhook = None\n            <DED><DED>return ticket\n    <DED><DED>ticket = await get_ticket(payment_hash)\n    return\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ticket = await get_ticket(payment_hash)\n        assert ticket, \"Newly paid ticket could not be retrieved\"\n\n        if formdata.webhook:\n            <IND>async with httpx.AsyncClient() as client:\n                <IND>await client.post(\n                    formdata.webhook,\n                    json={\n                        \"form\": ticket.form,\n                        \"name\": ticket.name,\n                        \"email\": ticket.email,\n                        \"content\": ticket.ltext,\n                    },\n                    timeout=40,\n                )\n            <DED>return ticket\n\n    <DED><DED>ticket = await get_ticket(payment_hash)\n    assert ticket, \"Newly paid ticket could not be retrieved\"\n    return ticket\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "lnbits/lnbits-legend",
    "commit": "e38b945d5ca504ce46d7d58f6bbe034c68cbfd2d",
    "filename": "lnbits/extensions/lnticket/crud.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/lnbits-lnbits-legend/lnbits/extensions/lnticket/crud.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "lnbits/extensions/lnticket/crud.py:75:4 Incompatible return type [7]: Expected `Tickets` but got `None`.",
    "message": " Expected `Tickets` but got `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 75,
    "warning_line": "    return",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ticket = await get_ticket(payment_hash)\n        if formdata.webhook:\n            async with httpx.AsyncClient() as client:\n                try:\n                    r = await client.post(\n                        formdata.webhook,\n                        json={\n                            \"form\": ticket.form,\n                            \"name\": ticket.name,\n                            \"email\": ticket.email,\n                            \"content\": ticket.ltext,\n                        },\n                        timeout=40,\n                    )\n                except AssertionError:\n                    webhook = None\n            return ticket\n    ticket = await get_ticket(payment_hash)\n    return\n\n",
        "source_code_len": 711,
        "target_code": "        ticket = await get_ticket(payment_hash)\n        assert ticket, \"Newly paid ticket could not be retrieved\"\n\n        if formdata.webhook:\n            async with httpx.AsyncClient() as client:\n                await client.post(\n                    formdata.webhook,\n                    json={\n                        \"form\": ticket.form,\n                        \"name\": ticket.name,\n                        \"email\": ticket.email,\n                        \"content\": ticket.ltext,\n                    },\n                    timeout=40,\n                )\n            return ticket\n\n    ticket = await get_ticket(payment_hash)\n    assert ticket, \"Newly paid ticket could not be retrieved\"\n    return ticket\n\n",
        "target_code_len": 709,
        "diff_format": "@@ -57,20 +57,21 @@\n         ticket = await get_ticket(payment_hash)\n+        assert ticket, \"Newly paid ticket could not be retrieved\"\n+\n         if formdata.webhook:\n             async with httpx.AsyncClient() as client:\n-                try:\n-                    r = await client.post(\n-                        formdata.webhook,\n-                        json={\n-                            \"form\": ticket.form,\n-                            \"name\": ticket.name,\n-                            \"email\": ticket.email,\n-                            \"content\": ticket.ltext,\n-                        },\n-                        timeout=40,\n-                    )\n-                except AssertionError:\n-                    webhook = None\n+                await client.post(\n+                    formdata.webhook,\n+                    json={\n+                        \"form\": ticket.form,\n+                        \"name\": ticket.name,\n+                        \"email\": ticket.email,\n+                        \"content\": ticket.ltext,\n+                    },\n+                    timeout=40,\n+                )\n             return ticket\n+\n     ticket = await get_ticket(payment_hash)\n-    return\n+    assert ticket, \"Newly paid ticket could not be retrieved\"\n+    return ticket\n \n",
        "source_code_with_indent": "        ticket = await get_ticket(payment_hash)\n        if formdata.webhook:\n            <IND>async with httpx.AsyncClient() as client:\n                <IND>try:\n                    <IND>r = await client.post(\n                        formdata.webhook,\n                        json={\n                            \"form\": ticket.form,\n                            \"name\": ticket.name,\n                            \"email\": ticket.email,\n                            \"content\": ticket.ltext,\n                        },\n                        timeout=40,\n                    )\n                <DED>except AssertionError:\n                    <IND>webhook = None\n            <DED><DED>return ticket\n    <DED><DED>ticket = await get_ticket(payment_hash)\n    return\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ticket = await get_ticket(payment_hash)\n        assert ticket, \"Newly paid ticket could not be retrieved\"\n\n        if formdata.webhook:\n            <IND>async with httpx.AsyncClient() as client:\n                <IND>await client.post(\n                    formdata.webhook,\n                    json={\n                        \"form\": ticket.form,\n                        \"name\": ticket.name,\n                        \"email\": ticket.email,\n                        \"content\": ticket.ltext,\n                    },\n                    timeout=40,\n                )\n            <DED>return ticket\n\n    <DED><DED>ticket = await get_ticket(payment_hash)\n    assert ticket, \"Newly paid ticket could not be retrieved\"\n    return ticket\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "lnbits/lnbits-legend",
    "commit": "e38b945d5ca504ce46d7d58f6bbe034c68cbfd2d",
    "filename": "lnbits/extensions/subdomains/crud.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/lnbits-lnbits-legend/lnbits/extensions/subdomains/crud.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "lnbits/extensions/subdomains/crud.py:40:4 Incompatible variable type [9]: subdomain is declared to have type `str` but is used as type `Optional[Subdomains]`.",
    "message": " subdomain is declared to have type `str` but is used as type `Optional[Subdomains]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 40,
    "warning_line": "    subdomain = await get_subdomain(payment_hash)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    subdomain = await get_subdomain(payment_hash)\n    assert subdomain, \"Newly created subdomain couldn't be retrieved\"\n    return subdomain\n\n",
        "source_code_len": 143,
        "target_code": "\n    new_subdomain = await get_subdomain(payment_hash)\n    assert new_subdomain, \"Newly created subdomain couldn't be retrieved\"\n    return new_subdomain\n\n",
        "target_code_len": 155,
        "diff_format": "@@ -39,5 +38,5 @@\n \n-    subdomain = await get_subdomain(payment_hash)\n-    assert subdomain, \"Newly created subdomain couldn't be retrieved\"\n-    return subdomain\n+    new_subdomain = await get_subdomain(payment_hash)\n+    assert new_subdomain, \"Newly created subdomain couldn't be retrieved\"\n+    return new_subdomain\n \n",
        "source_code_with_indent": "\n    subdomain = await get_subdomain(payment_hash)\n    assert subdomain, \"Newly created subdomain couldn't be retrieved\"\n    return subdomain\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    new_subdomain = await get_subdomain(payment_hash)\n    assert new_subdomain, \"Newly created subdomain couldn't be retrieved\"\n    return new_subdomain\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "lnbits/lnbits-legend",
    "commit": "e38b945d5ca504ce46d7d58f6bbe034c68cbfd2d",
    "filename": "lnbits/extensions/subdomains/crud.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/lnbits-lnbits-legend/lnbits/extensions/subdomains/crud.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "lnbits/extensions/subdomains/crud.py:42:4 Incompatible return type [7]: Expected `Subdomains` but got `str`.",
    "message": " Expected `Subdomains` but got `str`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 42,
    "warning_line": "    return subdomain",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    subdomain = await get_subdomain(payment_hash)\n    assert subdomain, \"Newly created subdomain couldn't be retrieved\"\n    return subdomain\n\n",
        "source_code_len": 143,
        "target_code": "\n    new_subdomain = await get_subdomain(payment_hash)\n    assert new_subdomain, \"Newly created subdomain couldn't be retrieved\"\n    return new_subdomain\n\n",
        "target_code_len": 155,
        "diff_format": "@@ -39,5 +38,5 @@\n \n-    subdomain = await get_subdomain(payment_hash)\n-    assert subdomain, \"Newly created subdomain couldn't be retrieved\"\n-    return subdomain\n+    new_subdomain = await get_subdomain(payment_hash)\n+    assert new_subdomain, \"Newly created subdomain couldn't be retrieved\"\n+    return new_subdomain\n \n",
        "source_code_with_indent": "\n    subdomain = await get_subdomain(payment_hash)\n    assert subdomain, \"Newly created subdomain couldn't be retrieved\"\n    return subdomain\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    new_subdomain = await get_subdomain(payment_hash)\n    assert new_subdomain, \"Newly created subdomain couldn't be retrieved\"\n    return new_subdomain\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "lnbits/lnbits-legend",
    "commit": "e38b945d5ca504ce46d7d58f6bbe034c68cbfd2d",
    "filename": "lnbits/extensions/subdomains/crud.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/lnbits-lnbits-legend/lnbits/extensions/subdomains/crud.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "lnbits/extensions/subdomains/crud.py:74:4 Incompatible return type [7]: Expected `Subdomains` but got `Optional[Subdomains]`.",
    "message": " Expected `Subdomains` but got `Optional[Subdomains]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 74,
    "warning_line": "    return subdomain",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    subdomain = await get_subdomain(payment_hash)\n    return subdomain\n\n",
        "source_code_len": 73,
        "target_code": "\n    new_subdomain = await get_subdomain(payment_hash)\n    assert new_subdomain, \"Newly paid subdomain couldn't be retrieved\"\n    return new_subdomain\n\n",
        "target_code_len": 152,
        "diff_format": "@@ -72,4 +71,5 @@\n \n-    subdomain = await get_subdomain(payment_hash)\n-    return subdomain\n+    new_subdomain = await get_subdomain(payment_hash)\n+    assert new_subdomain, \"Newly paid subdomain couldn't be retrieved\"\n+    return new_subdomain\n \n",
        "source_code_with_indent": "\n    <DED>subdomain = await get_subdomain(payment_hash)\n    return subdomain\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>new_subdomain = await get_subdomain(payment_hash)\n    assert new_subdomain, \"Newly paid subdomain couldn't be retrieved\"\n    return new_subdomain\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "lnbits/lnbits-legend",
    "commit": "e38b945d5ca504ce46d7d58f6bbe034c68cbfd2d",
    "filename": "lnbits/extensions/subdomains/crud.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/lnbits-lnbits-legend/lnbits/extensions/subdomains/crud.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "lnbits/extensions/subdomains/crud.py:146:4 Incompatible variable type [9]: domain is declared to have type `str` but is used as type `Optional[Domains]`.",
    "message": " domain is declared to have type `str` but is used as type `Optional[Domains]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 146,
    "warning_line": "    domain = await get_domain(domain_id)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    domain = await get_domain(domain_id)\n    assert domain, \"Newly created domain couldn't be retrieved\"\n    return domain\n\n",
        "source_code_len": 125,
        "target_code": "\n    new_domain = await get_domain(domain_id)\n    assert new_domain, \"Newly created domain couldn't be retrieved\"\n    return new_domain\n\n",
        "target_code_len": 137,
        "diff_format": "@@ -145,5 +144,5 @@\n \n-    domain = await get_domain(domain_id)\n-    assert domain, \"Newly created domain couldn't be retrieved\"\n-    return domain\n+    new_domain = await get_domain(domain_id)\n+    assert new_domain, \"Newly created domain couldn't be retrieved\"\n+    return new_domain\n \n",
        "source_code_with_indent": "\n    domain = await get_domain(domain_id)\n    assert domain, \"Newly created domain couldn't be retrieved\"\n    return domain\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    new_domain = await get_domain(domain_id)\n    assert new_domain, \"Newly created domain couldn't be retrieved\"\n    return new_domain\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "lnbits/lnbits-legend",
    "commit": "e38b945d5ca504ce46d7d58f6bbe034c68cbfd2d",
    "filename": "lnbits/extensions/subdomains/crud.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/lnbits-lnbits-legend/lnbits/extensions/subdomains/crud.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "lnbits/extensions/subdomains/crud.py:148:4 Incompatible return type [7]: Expected `Domains` but got `str`.",
    "message": " Expected `Domains` but got `str`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 148,
    "warning_line": "    return domain",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    domain = await get_domain(domain_id)\n    assert domain, \"Newly created domain couldn't be retrieved\"\n    return domain\n\n",
        "source_code_len": 125,
        "target_code": "\n    new_domain = await get_domain(domain_id)\n    assert new_domain, \"Newly created domain couldn't be retrieved\"\n    return new_domain\n\n",
        "target_code_len": 137,
        "diff_format": "@@ -145,5 +144,5 @@\n \n-    domain = await get_domain(domain_id)\n-    assert domain, \"Newly created domain couldn't be retrieved\"\n-    return domain\n+    new_domain = await get_domain(domain_id)\n+    assert new_domain, \"Newly created domain couldn't be retrieved\"\n+    return new_domain\n \n",
        "source_code_with_indent": "\n    domain = await get_domain(domain_id)\n    assert domain, \"Newly created domain couldn't be retrieved\"\n    return domain\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    new_domain = await get_domain(domain_id)\n    assert new_domain, \"Newly created domain couldn't be retrieved\"\n    return new_domain\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]