[
  {
    "project": "kinnala/scikit-fem",
    "commit": "748919c1cac9c848233be4f3d7200577def319c7",
    "filename": "skfem/mesh/mesh.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/kinnala-scikit-fem/skfem/mesh/mesh.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "skfem/mesh/mesh.py:187:12 Incompatible variable type [9]: boundaries is declared to have type `None` but is used as type `Dict[typing.Any, typing.Any]`.",
    "message": " boundaries is declared to have type `None` but is used as type `Dict[typing.Any, typing.Any]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 187,
    "warning_line": "            boundaries = {k: v.tolist() for k, v in self.boundaries.items()}",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import warnings\nfrom typing import Dict, Optional, Tuple, Type, TypeVar, Union, Callable\n\n",
        "source_code_len": 90,
        "target_code": "import warnings\nfrom typing import (Dict, Optional, Tuple,\n                    Type, TypeVar, Union,\n                    Callable, List)\n\n",
        "target_code_len": 138,
        "diff_format": "@@ -1,3 +1,5 @@\n import warnings\n-from typing import Dict, Optional, Tuple, Type, TypeVar, Union, Callable\n+from typing import (Dict, Optional, Tuple,\n+                    Type, TypeVar, Union,\n+                    Callable, List)\n \n",
        "source_code_with_indent": "import warnings\nfrom typing import Dict, Optional, Tuple, Type, TypeVar, Union, Callable\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import warnings\nfrom typing import (Dict, Optional, Tuple,\n                    Type, TypeVar, Union,\n                    Callable, List)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def to_dict(self) -> Dict[str, ndarray]:\n        \"\"\"Return json serializable dictionary.\"\"\"\n        boundaries: Optional[Dict[str, ndarray]] = None\n        subdomains: Optional[Dict[str, ndarray]] = None\n        if self.boundaries is not None:\n",
        "source_code_len": 249,
        "target_code": "\n    def to_dict(self) -> Dict[str, Optional[Dict[str, List[float]]]]:\n        \"\"\"Return json serializable dictionary.\"\"\"\n        boundaries: Optional[Dict[str, List[float]]] = None\n        subdomains: Optional[Dict[str, List[float]]] = None\n        if self.boundaries is not None:\n",
        "target_code_len": 282,
        "diff_format": "@@ -181,6 +183,6 @@\n \n-    def to_dict(self) -> Dict[str, ndarray]:\n+    def to_dict(self) -> Dict[str, Optional[Dict[str, List[float]]]]:\n         \"\"\"Return json serializable dictionary.\"\"\"\n-        boundaries: Optional[Dict[str, ndarray]] = None\n-        subdomains: Optional[Dict[str, ndarray]] = None\n+        boundaries: Optional[Dict[str, List[float]]] = None\n+        subdomains: Optional[Dict[str, List[float]]] = None\n         if self.boundaries is not None:\n",
        "source_code_with_indent": "\n    <DED>def to_dict(self) -> Dict[str, ndarray]:\n        <IND>\"\"\"Return json serializable dictionary.\"\"\"\n        boundaries: Optional[Dict[str, ndarray]] = None\n        subdomains: Optional[Dict[str, ndarray]] = None\n        if self.boundaries is not None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def to_dict(self) -> Dict[str, Optional[Dict[str, List[float]]]]:\n        <IND>\"\"\"Return json serializable dictionary.\"\"\"\n        boundaries: Optional[Dict[str, List[float]]] = None\n        subdomains: Optional[Dict[str, List[float]]] = None\n        if self.boundaries is not None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "kinnala/scikit-fem",
    "commit": "748919c1cac9c848233be4f3d7200577def319c7",
    "filename": "skfem/mesh/mesh.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/kinnala-scikit-fem/skfem/mesh/mesh.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "skfem/mesh/mesh.py:189:12 Incompatible variable type [9]: subdomains is declared to have type `None` but is used as type `Dict[typing.Any, typing.Any]`.",
    "message": " subdomains is declared to have type `None` but is used as type `Dict[typing.Any, typing.Any]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 189,
    "warning_line": "            subdomains = {k: v.tolist() for k, v in self.subdomains.items()}",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import warnings\nfrom typing import Dict, Optional, Tuple, Type, TypeVar, Union, Callable\n\n",
        "source_code_len": 90,
        "target_code": "import warnings\nfrom typing import (Dict, Optional, Tuple,\n                    Type, TypeVar, Union,\n                    Callable, List)\n\n",
        "target_code_len": 138,
        "diff_format": "@@ -1,3 +1,5 @@\n import warnings\n-from typing import Dict, Optional, Tuple, Type, TypeVar, Union, Callable\n+from typing import (Dict, Optional, Tuple,\n+                    Type, TypeVar, Union,\n+                    Callable, List)\n \n",
        "source_code_with_indent": "import warnings\nfrom typing import Dict, Optional, Tuple, Type, TypeVar, Union, Callable\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import warnings\nfrom typing import (Dict, Optional, Tuple,\n                    Type, TypeVar, Union,\n                    Callable, List)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def to_dict(self) -> Dict[str, ndarray]:\n        \"\"\"Return json serializable dictionary.\"\"\"\n        boundaries: Optional[Dict[str, ndarray]] = None\n        subdomains: Optional[Dict[str, ndarray]] = None\n        if self.boundaries is not None:\n",
        "source_code_len": 249,
        "target_code": "\n    def to_dict(self) -> Dict[str, Optional[Dict[str, List[float]]]]:\n        \"\"\"Return json serializable dictionary.\"\"\"\n        boundaries: Optional[Dict[str, List[float]]] = None\n        subdomains: Optional[Dict[str, List[float]]] = None\n        if self.boundaries is not None:\n",
        "target_code_len": 282,
        "diff_format": "@@ -181,6 +183,6 @@\n \n-    def to_dict(self) -> Dict[str, ndarray]:\n+    def to_dict(self) -> Dict[str, Optional[Dict[str, List[float]]]]:\n         \"\"\"Return json serializable dictionary.\"\"\"\n-        boundaries: Optional[Dict[str, ndarray]] = None\n-        subdomains: Optional[Dict[str, ndarray]] = None\n+        boundaries: Optional[Dict[str, List[float]]] = None\n+        subdomains: Optional[Dict[str, List[float]]] = None\n         if self.boundaries is not None:\n",
        "source_code_with_indent": "\n    <DED>def to_dict(self) -> Dict[str, ndarray]:\n        <IND>\"\"\"Return json serializable dictionary.\"\"\"\n        boundaries: Optional[Dict[str, ndarray]] = None\n        subdomains: Optional[Dict[str, ndarray]] = None\n        if self.boundaries is not None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def to_dict(self) -> Dict[str, Optional[Dict[str, List[float]]]]:\n        <IND>\"\"\"Return json serializable dictionary.\"\"\"\n        boundaries: Optional[Dict[str, List[float]]] = None\n        subdomains: Optional[Dict[str, List[float]]] = None\n        if self.boundaries is not None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]