[
  {
    "project": "Trusted-AI/adversarial-robustness-toolbox",
    "commit": "e0fa8f8ea72fb2eddde6ab0621d9215ee8d506a7",
    "filename": "art/attacks/inference/attribute_inference/meminf_based.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Trusted-AI-adversarial-robustness-toolbox/art/attacks/inference/attribute_inference/meminf_based.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "art/attacks/inference/attribute_inference/meminf_based.py:65:12 Incompatible attribute type [8]: Attribute `_estimator_requirements` declared in class `AttributeInferenceMembership` has type `typing.Tuple[typing.Type[BaseEstimator], typing.Type[ClassifierMixin]]` but is used as type `typing.Tuple[Union[typing.Type[BaseEstimator], typing.Type[ClassifierMixin]], ...]`.",
    "message": " Attribute `_estimator_requirements` declared in class `AttributeInferenceMembership` has type `typing.Tuple[typing.Type[BaseEstimator], typing.Type[ClassifierMixin]]` but is used as type `typing.Tuple[Union[typing.Type[BaseEstimator], typing.Type[ClassifierMixin]], ...]`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 65,
    "warning_line": "            self._estimator_requirements = self._estimator_requirements + membership_attack._estimator_requirements",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from art.attacks.attack import AttributeInferenceAttack, MembershipInferenceAttack\n\n",
        "source_code_len": 84,
        "target_code": "from art.attacks.attack import AttributeInferenceAttack, MembershipInferenceAttack\nfrom art.exceptions import EstimatorError\n\n",
        "target_code_len": 126,
        "diff_format": "@@ -30,2 +30,3 @@\n from art.attacks.attack import AttributeInferenceAttack, MembershipInferenceAttack\n+from art.exceptions import EstimatorError\n \n",
        "source_code_with_indent": "from art.attacks.attack import AttributeInferenceAttack, MembershipInferenceAttack\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from art.attacks.attack import AttributeInferenceAttack, MembershipInferenceAttack\nfrom art.exceptions import EstimatorError\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        super().__init__(estimator=classifier, attack_feature=attack_feature)\n        if self._estimator_requirements:\n            self._estimator_requirements = self._estimator_requirements + membership_attack._estimator_requirements\n        else:\n            self._estimator_requirements = membership_attack._estimator_requirements\n\n",
        "source_code_len": 335,
        "target_code": "        super().__init__(estimator=classifier, attack_feature=attack_feature)\n        if not all(t in type(classifier).__mro__ for t in membership_attack.estimator_requirements):\n            raise EstimatorError(membership_attack, membership_attack.estimator_requirements, classifier)\n\n",
        "target_code_len": 286,
        "diff_format": "@@ -63,6 +64,4 @@\n         super().__init__(estimator=classifier, attack_feature=attack_feature)\n-        if self._estimator_requirements:\n-            self._estimator_requirements = self._estimator_requirements + membership_attack._estimator_requirements\n-        else:\n-            self._estimator_requirements = membership_attack._estimator_requirements\n+        if not all(t in type(classifier).__mro__ for t in membership_attack.estimator_requirements):\n+            raise EstimatorError(membership_attack, membership_attack.estimator_requirements, classifier)\n \n",
        "source_code_with_indent": "        super().__init__(estimator=classifier, attack_feature=attack_feature)\n        if self._estimator_requirements:\n            <IND>self._estimator_requirements = self._estimator_requirements + membership_attack._estimator_requirements\n        <DED>else:\n            <IND>self._estimator_requirements = membership_attack._estimator_requirements\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        super().__init__(estimator=classifier, attack_feature=attack_feature)\n        if not all(t in type(classifier).__mro__ for t in membership_attack.estimator_requirements):\n            <IND>raise EstimatorError(membership_attack, membership_attack.estimator_requirements, classifier)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Trusted-AI/adversarial-robustness-toolbox",
    "commit": "e0fa8f8ea72fb2eddde6ab0621d9215ee8d506a7",
    "filename": "art/attacks/inference/attribute_inference/meminf_based.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Trusted-AI-adversarial-robustness-toolbox/art/attacks/inference/attribute_inference/meminf_based.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "art/attacks/inference/attribute_inference/meminf_based.py:65:74 Unsupported operand [58]: `+` is not supported for operand types `typing.Tuple[typing.Type[BaseEstimator], typing.Type[ClassifierMixin]]` and `Union[None, typing.Tuple[], typing.Tuple[typing.Any, ...]]`.",
    "message": " `+` is not supported for operand types `typing.Tuple[typing.Type[BaseEstimator], typing.Type[ClassifierMixin]]` and `Union[None, typing.Tuple[], typing.Tuple[typing.Any, ...]]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 65,
    "warning_line": "            self._estimator_requirements = self._estimator_requirements + membership_attack._estimator_requirements",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from art.attacks.attack import AttributeInferenceAttack, MembershipInferenceAttack\n\n",
        "source_code_len": 84,
        "target_code": "from art.attacks.attack import AttributeInferenceAttack, MembershipInferenceAttack\nfrom art.exceptions import EstimatorError\n\n",
        "target_code_len": 126,
        "diff_format": "@@ -30,2 +30,3 @@\n from art.attacks.attack import AttributeInferenceAttack, MembershipInferenceAttack\n+from art.exceptions import EstimatorError\n \n",
        "source_code_with_indent": "from art.attacks.attack import AttributeInferenceAttack, MembershipInferenceAttack\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from art.attacks.attack import AttributeInferenceAttack, MembershipInferenceAttack\nfrom art.exceptions import EstimatorError\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        super().__init__(estimator=classifier, attack_feature=attack_feature)\n        if self._estimator_requirements:\n            self._estimator_requirements = self._estimator_requirements + membership_attack._estimator_requirements\n        else:\n            self._estimator_requirements = membership_attack._estimator_requirements\n\n",
        "source_code_len": 335,
        "target_code": "        super().__init__(estimator=classifier, attack_feature=attack_feature)\n        if not all(t in type(classifier).__mro__ for t in membership_attack.estimator_requirements):\n            raise EstimatorError(membership_attack, membership_attack.estimator_requirements, classifier)\n\n",
        "target_code_len": 286,
        "diff_format": "@@ -63,6 +64,4 @@\n         super().__init__(estimator=classifier, attack_feature=attack_feature)\n-        if self._estimator_requirements:\n-            self._estimator_requirements = self._estimator_requirements + membership_attack._estimator_requirements\n-        else:\n-            self._estimator_requirements = membership_attack._estimator_requirements\n+        if not all(t in type(classifier).__mro__ for t in membership_attack.estimator_requirements):\n+            raise EstimatorError(membership_attack, membership_attack.estimator_requirements, classifier)\n \n",
        "source_code_with_indent": "        super().__init__(estimator=classifier, attack_feature=attack_feature)\n        if self._estimator_requirements:\n            <IND>self._estimator_requirements = self._estimator_requirements + membership_attack._estimator_requirements\n        <DED>else:\n            <IND>self._estimator_requirements = membership_attack._estimator_requirements\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        super().__init__(estimator=classifier, attack_feature=attack_feature)\n        if not all(t in type(classifier).__mro__ for t in membership_attack.estimator_requirements):\n            <IND>raise EstimatorError(membership_attack, membership_attack.estimator_requirements, classifier)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Trusted-AI/adversarial-robustness-toolbox",
    "commit": "e0fa8f8ea72fb2eddde6ab0621d9215ee8d506a7",
    "filename": "art/attacks/inference/attribute_inference/meminf_based.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Trusted-AI-adversarial-robustness-toolbox/art/attacks/inference/attribute_inference/meminf_based.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "art/attacks/inference/attribute_inference/meminf_based.py:67:12 Incompatible attribute type [8]: Attribute `_estimator_requirements` declared in class `AttributeInferenceMembership` has type `typing.Tuple[typing.Type[BaseEstimator], typing.Type[ClassifierMixin]]` but is used as type `Union[None, typing.Tuple[], typing.Tuple[typing.Any, ...]]`.",
    "message": " Attribute `_estimator_requirements` declared in class `AttributeInferenceMembership` has type `typing.Tuple[typing.Type[BaseEstimator], typing.Type[ClassifierMixin]]` but is used as type `Union[None, typing.Tuple[], typing.Tuple[typing.Any, ...]]`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 67,
    "warning_line": "            self._estimator_requirements = membership_attack._estimator_requirements",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from art.attacks.attack import AttributeInferenceAttack, MembershipInferenceAttack\n\n",
        "source_code_len": 84,
        "target_code": "from art.attacks.attack import AttributeInferenceAttack, MembershipInferenceAttack\nfrom art.exceptions import EstimatorError\n\n",
        "target_code_len": 126,
        "diff_format": "@@ -30,2 +30,3 @@\n from art.attacks.attack import AttributeInferenceAttack, MembershipInferenceAttack\n+from art.exceptions import EstimatorError\n \n",
        "source_code_with_indent": "from art.attacks.attack import AttributeInferenceAttack, MembershipInferenceAttack\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from art.attacks.attack import AttributeInferenceAttack, MembershipInferenceAttack\nfrom art.exceptions import EstimatorError\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        super().__init__(estimator=classifier, attack_feature=attack_feature)\n        if self._estimator_requirements:\n            self._estimator_requirements = self._estimator_requirements + membership_attack._estimator_requirements\n        else:\n            self._estimator_requirements = membership_attack._estimator_requirements\n\n",
        "source_code_len": 335,
        "target_code": "        super().__init__(estimator=classifier, attack_feature=attack_feature)\n        if not all(t in type(classifier).__mro__ for t in membership_attack.estimator_requirements):\n            raise EstimatorError(membership_attack, membership_attack.estimator_requirements, classifier)\n\n",
        "target_code_len": 286,
        "diff_format": "@@ -63,6 +64,4 @@\n         super().__init__(estimator=classifier, attack_feature=attack_feature)\n-        if self._estimator_requirements:\n-            self._estimator_requirements = self._estimator_requirements + membership_attack._estimator_requirements\n-        else:\n-            self._estimator_requirements = membership_attack._estimator_requirements\n+        if not all(t in type(classifier).__mro__ for t in membership_attack.estimator_requirements):\n+            raise EstimatorError(membership_attack, membership_attack.estimator_requirements, classifier)\n \n",
        "source_code_with_indent": "        super().__init__(estimator=classifier, attack_feature=attack_feature)\n        if self._estimator_requirements:\n            <IND>self._estimator_requirements = self._estimator_requirements + membership_attack._estimator_requirements\n        <DED>else:\n            <IND>self._estimator_requirements = membership_attack._estimator_requirements\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        super().__init__(estimator=classifier, attack_feature=attack_feature)\n        if not all(t in type(classifier).__mro__ for t in membership_attack.estimator_requirements):\n            <IND>raise EstimatorError(membership_attack, membership_attack.estimator_requirements, classifier)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Trusted-AI/adversarial-robustness-toolbox",
    "commit": "e0fa8f8ea72fb2eddde6ab0621d9215ee8d506a7",
    "filename": "art/attacks/inference/attribute_inference/meminf_based.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Trusted-AI-adversarial-robustness-toolbox/art/attacks/inference/attribute_inference/meminf_based.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "art/attacks/inference/attribute_inference/meminf_based.py:117:42 Incompatible parameter type [6]: Expected `typing.Iterable[Variable[_T]]` for 1st positional only parameter to call `enumerate.__init__` but got `Optional[List[typing.Any]]`.",
    "message": " Expected `typing.Iterable[Variable[_T]]` for 1st positional only parameter to call `enumerate.__init__` but got `Optional[List[typing.Any]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 117,
    "warning_line": "            for index, value in enumerate(values):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        values: Optional[List] = kwargs.get(\"values\")\n\n",
        "source_code_len": 55,
        "target_code": "        values: Optional[List] = kwargs.get(\"values\")\n        if not values:\n            raise ValueError(\"`values` cannot be None or empty\")\n\n",
        "target_code_len": 143,
        "diff_format": "@@ -93,2 +92,4 @@\n         values: Optional[List] = kwargs.get(\"values\")\n+        if not values:\n+            raise ValueError(\"`values` cannot be None or empty\")\n \n",
        "source_code_with_indent": "        <DED>values: Optional[List] = kwargs.get(\"values\")\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>values: Optional[List] = kwargs.get(\"values\")\n        if not values:\n            <IND>raise ValueError(\"`values` cannot be None or empty\")\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Trusted-AI/adversarial-robustness-toolbox",
    "commit": "e0fa8f8ea72fb2eddde6ab0621d9215ee8d506a7",
    "filename": "art/attacks/inference/attribute_inference/meminf_based.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Trusted-AI-adversarial-robustness-toolbox/art/attacks/inference/attribute_inference/meminf_based.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "art/attacks/inference/attribute_inference/meminf_based.py:122:42 Incompatible parameter type [6]: Expected `typing.Iterable[Variable[_T]]` for 1st positional only parameter to call `enumerate.__init__` but got `Optional[List[typing.Any]]`.",
    "message": " Expected `typing.Iterable[Variable[_T]]` for 1st positional only parameter to call `enumerate.__init__` but got `Optional[List[typing.Any]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 122,
    "warning_line": "            for index, value in enumerate(values):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        values: Optional[List] = kwargs.get(\"values\")\n\n",
        "source_code_len": 55,
        "target_code": "        values: Optional[List] = kwargs.get(\"values\")\n        if not values:\n            raise ValueError(\"`values` cannot be None or empty\")\n\n",
        "target_code_len": 143,
        "diff_format": "@@ -93,2 +92,4 @@\n         values: Optional[List] = kwargs.get(\"values\")\n+        if not values:\n+            raise ValueError(\"`values` cannot be None or empty\")\n \n",
        "source_code_with_indent": "        <DED>values: Optional[List] = kwargs.get(\"values\")\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>values: Optional[List] = kwargs.get(\"values\")\n        if not values:\n            <IND>raise ValueError(\"`values` cannot be None or empty\")\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Trusted-AI/adversarial-robustness-toolbox",
    "commit": "e0fa8f8ea72fb2eddde6ab0621d9215ee8d506a7",
    "filename": "art/attacks/inference/attribute_inference/meminf_based.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Trusted-AI-adversarial-robustness-toolbox/art/attacks/inference/attribute_inference/meminf_based.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "art/attacks/inference/attribute_inference/meminf_based.py:123:55 Incompatible parameter type [6]: Expected `typing.Sized` for 1st positional only parameter to call `len` but got `Optional[List[typing.Any]]`.",
    "message": " Expected `typing.Sized` for 1st positional only parameter to call `len` but got `Optional[List[typing.Any]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 123,
    "warning_line": "                curr_value = np.zeros((x.shape[0], len(values)))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        values: Optional[List] = kwargs.get(\"values\")\n\n",
        "source_code_len": 55,
        "target_code": "        values: Optional[List] = kwargs.get(\"values\")\n        if not values:\n            raise ValueError(\"`values` cannot be None or empty\")\n\n",
        "target_code_len": 143,
        "diff_format": "@@ -93,2 +92,4 @@\n         values: Optional[List] = kwargs.get(\"values\")\n+        if not values:\n+            raise ValueError(\"`values` cannot be None or empty\")\n \n",
        "source_code_with_indent": "        <DED>values: Optional[List] = kwargs.get(\"values\")\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>values: Optional[List] = kwargs.get(\"values\")\n        if not values:\n            <IND>raise ValueError(\"`values` cannot be None or empty\")\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Trusted-AI/adversarial-robustness-toolbox",
    "commit": "e0fa8f8ea72fb2eddde6ab0621d9215ee8d506a7",
    "filename": "art/attacks/inference/attribute_inference/meminf_based.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Trusted-AI-adversarial-robustness-toolbox/art/attacks/inference/attribute_inference/meminf_based.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "art/attacks/inference/attribute_inference/meminf_based.py:125:54 Incompatible parameter type [6]: Expected `typing.Iterable[Variable[_T]]` for 1st positional only parameter to call `enumerate.__init__` but got `Optional[List[typing.Any]]`.",
    "message": " Expected `typing.Iterable[Variable[_T]]` for 1st positional only parameter to call `enumerate.__init__` but got `Optional[List[typing.Any]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 125,
    "warning_line": "                for not_index, not_value in enumerate(values):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        values: Optional[List] = kwargs.get(\"values\")\n\n",
        "source_code_len": 55,
        "target_code": "        values: Optional[List] = kwargs.get(\"values\")\n        if not values:\n            raise ValueError(\"`values` cannot be None or empty\")\n\n",
        "target_code_len": 143,
        "diff_format": "@@ -93,2 +92,4 @@\n         values: Optional[List] = kwargs.get(\"values\")\n+        if not values:\n+            raise ValueError(\"`values` cannot be None or empty\")\n \n",
        "source_code_with_indent": "        <DED>values: Optional[List] = kwargs.get(\"values\")\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>values: Optional[List] = kwargs.get(\"values\")\n        if not values:\n            <IND>raise ValueError(\"`values` cannot be None or empty\")\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Trusted-AI/adversarial-robustness-toolbox",
    "commit": "e0fa8f8ea72fb2eddde6ab0621d9215ee8d506a7",
    "filename": "art/attacks/inference/attribute_inference/meminf_based.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Trusted-AI-adversarial-robustness-toolbox/art/attacks/inference/attribute_inference/meminf_based.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "art/attacks/inference/attribute_inference/meminf_based.py:139:42 Incompatible parameter type [6]: Expected `typing.Iterable[Variable[_T]]` for 1st positional only parameter to call `enumerate.__init__` but got `Optional[List[typing.Any]]`.",
    "message": " Expected `typing.Iterable[Variable[_T]]` for 1st positional only parameter to call `enumerate.__init__` but got `Optional[List[typing.Any]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 139,
    "warning_line": "            for index, value in enumerate(values):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        values: Optional[List] = kwargs.get(\"values\")\n\n",
        "source_code_len": 55,
        "target_code": "        values: Optional[List] = kwargs.get(\"values\")\n        if not values:\n            raise ValueError(\"`values` cannot be None or empty\")\n\n",
        "target_code_len": 143,
        "diff_format": "@@ -93,2 +92,4 @@\n         values: Optional[List] = kwargs.get(\"values\")\n+        if not values:\n+            raise ValueError(\"`values` cannot be None or empty\")\n \n",
        "source_code_with_indent": "        <DED>values: Optional[List] = kwargs.get(\"values\")\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>values: Optional[List] = kwargs.get(\"values\")\n        if not values:\n            <IND>raise ValueError(\"`values` cannot be None or empty\")\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Trusted-AI/adversarial-robustness-toolbox",
    "commit": "e0fa8f8ea72fb2eddde6ab0621d9215ee8d506a7",
    "filename": "art/attacks/inference/attribute_inference/meminf_based.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Trusted-AI-adversarial-robustness-toolbox/art/attacks/inference/attribute_inference/meminf_based.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "art/attacks/inference/attribute_inference/meminf_based.py:140:42 Incompatible parameter type [6]: Expected `typing.Sized` for 1st positional only parameter to call `len` but got `Optional[List[typing.Any]]`.",
    "message": " Expected `typing.Sized` for 1st positional only parameter to call `len` but got `Optional[List[typing.Any]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 140,
    "warning_line": "                curr_value = np.zeros(len(values))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        values: Optional[List] = kwargs.get(\"values\")\n\n",
        "source_code_len": 55,
        "target_code": "        values: Optional[List] = kwargs.get(\"values\")\n        if not values:\n            raise ValueError(\"`values` cannot be None or empty\")\n\n",
        "target_code_len": 143,
        "diff_format": "@@ -93,2 +92,4 @@\n         values: Optional[List] = kwargs.get(\"values\")\n+        if not values:\n+            raise ValueError(\"`values` cannot be None or empty\")\n \n",
        "source_code_with_indent": "        <DED>values: Optional[List] = kwargs.get(\"values\")\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>values: Optional[List] = kwargs.get(\"values\")\n        if not values:\n            <IND>raise ValueError(\"`values` cannot be None or empty\")\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Trusted-AI/adversarial-robustness-toolbox",
    "commit": "e0fa8f8ea72fb2eddde6ab0621d9215ee8d506a7",
    "filename": "art/attacks/inference/attribute_inference/meminf_based.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Trusted-AI-adversarial-robustness-toolbox/art/attacks/inference/attribute_inference/meminf_based.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "art/attacks/inference/attribute_inference/meminf_based.py:142:54 Incompatible parameter type [6]: Expected `typing.Iterable[Variable[_T]]` for 1st positional only parameter to call `enumerate.__init__` but got `Optional[List[typing.Any]]`.",
    "message": " Expected `typing.Iterable[Variable[_T]]` for 1st positional only parameter to call `enumerate.__init__` but got `Optional[List[typing.Any]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 142,
    "warning_line": "                for not_index, not_value in enumerate(values):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        values: Optional[List] = kwargs.get(\"values\")\n\n",
        "source_code_len": 55,
        "target_code": "        values: Optional[List] = kwargs.get(\"values\")\n        if not values:\n            raise ValueError(\"`values` cannot be None or empty\")\n\n",
        "target_code_len": 143,
        "diff_format": "@@ -93,2 +92,4 @@\n         values: Optional[List] = kwargs.get(\"values\")\n+        if not values:\n+            raise ValueError(\"`values` cannot be None or empty\")\n \n",
        "source_code_with_indent": "        <DED>values: Optional[List] = kwargs.get(\"values\")\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>values: Optional[List] = kwargs.get(\"values\")\n        if not values:\n            <IND>raise ValueError(\"`values` cannot be None or empty\")\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]