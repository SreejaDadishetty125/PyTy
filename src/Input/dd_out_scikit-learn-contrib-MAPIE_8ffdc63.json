[
  {
    "project": "scikit-learn-contrib/MAPIE",
    "commit": "8ffdc639645c54503ea4387c2a0d8e38e317305f",
    "filename": "mapie/tests/test_classification.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/scikit-learn-contrib-MAPIE/mapie/tests/test_classification.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mapie/tests/test_classification.py:116:40 Invalid type [31]: Expression `np.ndarray()` is not a valid type.",
    "message": " Expression `np.ndarray()` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 116,
    "warning_line": "    def predict(self, X: np.ndarray) -> np.ndarray():",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def predict(self, X: np.ndarray) -> np.ndarray():\n        return np.array([1, 2, 1])\n\n    def predict_proba(self, X: np.ndarray) -> np.ndarray():\n        if np.max(X) <= 2:\n",
        "source_code_len": 178,
        "target_code": "\n    def predict(self, X: np.ndarray) -> np.ndarray:\n        return np.array([1, 2, 1])\n\n    def predict_proba(self, X: np.ndarray) -> np.ndarray:\n        if np.max(X) <= 2:\n",
        "target_code_len": 174,
        "diff_format": "@@ -115,6 +115,6 @@\n \n-    def predict(self, X: np.ndarray) -> np.ndarray():\n+    def predict(self, X: np.ndarray) -> np.ndarray:\n         return np.array([1, 2, 1])\n \n-    def predict_proba(self, X: np.ndarray) -> np.ndarray():\n+    def predict_proba(self, X: np.ndarray) -> np.ndarray:\n         if np.max(X) <= 2:\n",
        "source_code_with_indent": "\n    <DED>def predict(self, X: np.ndarray) -> np.ndarray():\n        <IND>return np.array([1, 2, 1])\n\n    <DED>def predict_proba(self, X: np.ndarray) -> np.ndarray():\n        <IND>if np.max(X) <= 2:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def predict(self, X: np.ndarray) -> np.ndarray:\n        <IND>return np.array([1, 2, 1])\n\n    <DED>def predict_proba(self, X: np.ndarray) -> np.ndarray:\n        <IND>if np.max(X) <= 2:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "scikit-learn-contrib/MAPIE",
    "commit": "8ffdc639645c54503ea4387c2a0d8e38e317305f",
    "filename": "mapie/tests/test_classification.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/scikit-learn-contrib-MAPIE/mapie/tests/test_classification.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mapie/tests/test_classification.py:119:46 Invalid type [31]: Expression `np.ndarray()` is not a valid type.",
    "message": " Expression `np.ndarray()` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 119,
    "warning_line": "    def predict_proba(self, X: np.ndarray) -> np.ndarray():",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def predict(self, X: np.ndarray) -> np.ndarray():\n        return np.array([1, 2, 1])\n\n    def predict_proba(self, X: np.ndarray) -> np.ndarray():\n        if np.max(X) <= 2:\n",
        "source_code_len": 178,
        "target_code": "\n    def predict(self, X: np.ndarray) -> np.ndarray:\n        return np.array([1, 2, 1])\n\n    def predict_proba(self, X: np.ndarray) -> np.ndarray:\n        if np.max(X) <= 2:\n",
        "target_code_len": 174,
        "diff_format": "@@ -115,6 +115,6 @@\n \n-    def predict(self, X: np.ndarray) -> np.ndarray():\n+    def predict(self, X: np.ndarray) -> np.ndarray:\n         return np.array([1, 2, 1])\n \n-    def predict_proba(self, X: np.ndarray) -> np.ndarray():\n+    def predict_proba(self, X: np.ndarray) -> np.ndarray:\n         if np.max(X) <= 2:\n",
        "source_code_with_indent": "\n    <DED>def predict(self, X: np.ndarray) -> np.ndarray():\n        <IND>return np.array([1, 2, 1])\n\n    <DED>def predict_proba(self, X: np.ndarray) -> np.ndarray():\n        <IND>if np.max(X) <= 2:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def predict(self, X: np.ndarray) -> np.ndarray:\n        <IND>return np.array([1, 2, 1])\n\n    <DED>def predict_proba(self, X: np.ndarray) -> np.ndarray:\n        <IND>if np.max(X) <= 2:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]