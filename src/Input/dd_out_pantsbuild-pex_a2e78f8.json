[
  {
    "project": "pantsbuild/pex",
    "commit": "a2e78f8402241e1100d9757d9b3c76adde1189db",
    "filename": "tests/tools/commands/test_venv.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pantsbuild-pex/tests/tools/commands/test_venv.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/tools/commands/test_venv.py:55:8 Incompatible return type [7]: Expected `str` but got `typing.Generator[typing.Any, None, None]`.",
    "message": " Expected `str` but got `typing.Generator[typing.Any, None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 55,
    "warning_line": "        yield os.path.realpath(pex_path)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "if TYPE_CHECKING:\n    from typing import Callable, Tuple, Any, Dict, Optional, Iterable\n\n    CreatePexVenv = Callable[[Tuple[str, ...]], Virtualenv]\n\n",
        "source_code_len": 150,
        "target_code": "if TYPE_CHECKING:\n    from typing import Any, Dict, Iterable, Iterator, Optional, Protocol, Tuple, Text\n\n    class CreatePexVenv(Protocol):\n        def __call__(self, *options):\n            # type: (*str) -> Virtualenv\n            pass\n\n",
        "target_code_len": 237,
        "diff_format": "@@ -21,5 +21,8 @@\n if TYPE_CHECKING:\n-    from typing import Callable, Tuple, Any, Dict, Optional, Iterable\n-\n-    CreatePexVenv = Callable[[Tuple[str, ...]], Virtualenv]\n+    from typing import Any, Dict, Iterable, Iterator, Optional, Protocol, Tuple, Text\n+\n+    class CreatePexVenv(Protocol):\n+        def __call__(self, *options):\n+            # type: (*str) -> Virtualenv\n+            pass\n \n",
        "source_code_with_indent": "if TYPE_CHECKING:\n    <IND>from typing import Callable, Tuple, Any, Dict, Optional, Iterable\n\n    CreatePexVenv = Callable[[Tuple[str, ...]], Virtualenv]\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "if TYPE_CHECKING:\n    <IND>from typing import Any, Dict, Iterable, Iterator, Optional, Protocol, Tuple, Text\n\n    class CreatePexVenv(Protocol):\n        <IND>def __call__(self, *options):\n            # type: (*str) -> Virtualenv\n            <IND>pass\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def pex():\n    # type: () -> str\n    with temporary_dir() as tmpdir:\n",
        "source_code_len": 69,
        "target_code": "def pex():\n    # type: () -> Iterator[str]\n    with temporary_dir() as tmpdir:\n",
        "target_code_len": 79,
        "diff_format": "@@ -31,3 +34,3 @@\n def pex():\n-    # type: () -> str\n+    # type: () -> Iterator[str]\n     with temporary_dir() as tmpdir:\n",
        "source_code_with_indent": "def pex():\n    # type: () -> str\n    <IND>with temporary_dir() as tmpdir:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "def pex():\n    # type: () -> Iterator[str]\n    <IND>with temporary_dir() as tmpdir:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def create_pex_venv(pex):\n    # type: (str) -> CreatePexVenv\n    with temporary_dir() as tmpdir:\n",
        "source_code_len": 97,
        "target_code": "def create_pex_venv(pex):\n    # type: (str) -> Iterator[CreatePexVenv]\n    with temporary_dir() as tmpdir:\n",
        "target_code_len": 107,
        "diff_format": "@@ -66,3 +69,3 @@\n def create_pex_venv(pex):\n-    # type: (str) -> CreatePexVenv\n+    # type: (str) -> Iterator[CreatePexVenv]\n     with temporary_dir() as tmpdir:\n",
        "source_code_with_indent": "def create_pex_venv(pex):\n    # type: (str) -> CreatePexVenv\n    <IND>with temporary_dir() as tmpdir:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "def create_pex_venv(pex):\n    # type: (str) -> Iterator[CreatePexVenv]\n    <IND>with temporary_dir() as tmpdir:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pantsbuild/pex",
    "commit": "a2e78f8402241e1100d9757d9b3c76adde1189db",
    "filename": "tests/tools/commands/test_venv.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pantsbuild-pex/tests/tools/commands/test_venv.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/tools/commands/test_venv.py:78:8 Incompatible return type [7]: Expected `typing.Callable[[typing.Tuple[str, ...]], Virtualenv]` but got `typing.Generator[typing.Callable[[Variable(str)], Virtualenv], None, None]`.",
    "message": " Expected `typing.Callable[[typing.Tuple[str, ...]], Virtualenv]` but got `typing.Generator[typing.Callable[[Variable(str)], Virtualenv], None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 78,
    "warning_line": "        yield _create_pex_venv",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "if TYPE_CHECKING:\n    from typing import Callable, Tuple, Any, Dict, Optional, Iterable\n\n    CreatePexVenv = Callable[[Tuple[str, ...]], Virtualenv]\n\n",
        "source_code_len": 150,
        "target_code": "if TYPE_CHECKING:\n    from typing import Any, Dict, Iterable, Iterator, Optional, Protocol, Tuple, Text\n\n    class CreatePexVenv(Protocol):\n        def __call__(self, *options):\n            # type: (*str) -> Virtualenv\n            pass\n\n",
        "target_code_len": 237,
        "diff_format": "@@ -21,5 +21,8 @@\n if TYPE_CHECKING:\n-    from typing import Callable, Tuple, Any, Dict, Optional, Iterable\n-\n-    CreatePexVenv = Callable[[Tuple[str, ...]], Virtualenv]\n+    from typing import Any, Dict, Iterable, Iterator, Optional, Protocol, Tuple, Text\n+\n+    class CreatePexVenv(Protocol):\n+        def __call__(self, *options):\n+            # type: (*str) -> Virtualenv\n+            pass\n \n",
        "source_code_with_indent": "if TYPE_CHECKING:\n    <IND>from typing import Callable, Tuple, Any, Dict, Optional, Iterable\n\n    CreatePexVenv = Callable[[Tuple[str, ...]], Virtualenv]\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "if TYPE_CHECKING:\n    <IND>from typing import Any, Dict, Iterable, Iterator, Optional, Protocol, Tuple, Text\n\n    class CreatePexVenv(Protocol):\n        <IND>def __call__(self, *options):\n            # type: (*str) -> Virtualenv\n            <IND>pass\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def create_pex_venv(pex):\n    # type: (str) -> CreatePexVenv\n    with temporary_dir() as tmpdir:\n",
        "source_code_len": 97,
        "target_code": "def create_pex_venv(pex):\n    # type: (str) -> Iterator[CreatePexVenv]\n    with temporary_dir() as tmpdir:\n",
        "target_code_len": 107,
        "diff_format": "@@ -66,3 +69,3 @@\n def create_pex_venv(pex):\n-    # type: (str) -> CreatePexVenv\n+    # type: (str) -> Iterator[CreatePexVenv]\n     with temporary_dir() as tmpdir:\n",
        "source_code_with_indent": "def create_pex_venv(pex):\n    # type: (str) -> CreatePexVenv\n    <IND>with temporary_dir() as tmpdir:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "def create_pex_venv(pex):\n    # type: (str) -> Iterator[CreatePexVenv]\n    <IND>with temporary_dir() as tmpdir:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pantsbuild/pex",
    "commit": "a2e78f8402241e1100d9757d9b3c76adde1189db",
    "filename": "tests/tools/commands/test_venv.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pantsbuild-pex/tests/tools/commands/test_venv.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/tools/commands/test_venv.py:83:27 Incompatible parameter type [6]: Expected `typing.Tuple[str, ...]` for 1st positional only parameter to anonymous call but got `str`.",
    "message": " Expected `typing.Tuple[str, ...]` for 1st positional only parameter to anonymous call but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 83,
    "warning_line": "    venv = create_pex_venv(\"--pip\")",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "if TYPE_CHECKING:\n    from typing import Callable, Tuple, Any, Dict, Optional, Iterable\n\n    CreatePexVenv = Callable[[Tuple[str, ...]], Virtualenv]\n\n",
        "source_code_len": 150,
        "target_code": "if TYPE_CHECKING:\n    from typing import Any, Dict, Iterable, Iterator, Optional, Protocol, Tuple, Text\n\n    class CreatePexVenv(Protocol):\n        def __call__(self, *options):\n            # type: (*str) -> Virtualenv\n            pass\n\n",
        "target_code_len": 237,
        "diff_format": "@@ -21,5 +21,8 @@\n if TYPE_CHECKING:\n-    from typing import Callable, Tuple, Any, Dict, Optional, Iterable\n-\n-    CreatePexVenv = Callable[[Tuple[str, ...]], Virtualenv]\n+    from typing import Any, Dict, Iterable, Iterator, Optional, Protocol, Tuple, Text\n+\n+    class CreatePexVenv(Protocol):\n+        def __call__(self, *options):\n+            # type: (*str) -> Virtualenv\n+            pass\n \n",
        "source_code_with_indent": "if TYPE_CHECKING:\n    <IND>from typing import Callable, Tuple, Any, Dict, Optional, Iterable\n\n    CreatePexVenv = Callable[[Tuple[str, ...]], Virtualenv]\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "if TYPE_CHECKING:\n    <IND>from typing import Any, Dict, Iterable, Iterator, Optional, Protocol, Tuple, Text\n\n    class CreatePexVenv(Protocol):\n        <IND>def __call__(self, *options):\n            # type: (*str) -> Virtualenv\n            <IND>pass\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def create_pex_venv(pex):\n    # type: (str) -> CreatePexVenv\n    with temporary_dir() as tmpdir:\n",
        "source_code_len": 97,
        "target_code": "def create_pex_venv(pex):\n    # type: (str) -> Iterator[CreatePexVenv]\n    with temporary_dir() as tmpdir:\n",
        "target_code_len": 107,
        "diff_format": "@@ -66,3 +69,3 @@\n def create_pex_venv(pex):\n-    # type: (str) -> CreatePexVenv\n+    # type: (str) -> Iterator[CreatePexVenv]\n     with temporary_dir() as tmpdir:\n",
        "source_code_with_indent": "def create_pex_venv(pex):\n    # type: (str) -> CreatePexVenv\n    <IND>with temporary_dir() as tmpdir:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "def create_pex_venv(pex):\n    # type: (str) -> Iterator[CreatePexVenv]\n    <IND>with temporary_dir() as tmpdir:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pantsbuild/pex",
    "commit": "a2e78f8402241e1100d9757d9b3c76adde1189db",
    "filename": "tests/tools/commands/test_venv.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pantsbuild-pex/tests/tools/commands/test_venv.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/tools/commands/test_venv.py:90:33 Incompatible parameter type [6]: Expected `typing.Tuple[str, ...]` for 1st positional only parameter to anonymous call but got `str`.",
    "message": " Expected `typing.Tuple[str, ...]` for 1st positional only parameter to anonymous call but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 90,
    "warning_line": "    venv_force = create_pex_venv(\"--force\")",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "if TYPE_CHECKING:\n    from typing import Callable, Tuple, Any, Dict, Optional, Iterable\n\n    CreatePexVenv = Callable[[Tuple[str, ...]], Virtualenv]\n\n",
        "source_code_len": 150,
        "target_code": "if TYPE_CHECKING:\n    from typing import Any, Dict, Iterable, Iterator, Optional, Protocol, Tuple, Text\n\n    class CreatePexVenv(Protocol):\n        def __call__(self, *options):\n            # type: (*str) -> Virtualenv\n            pass\n\n",
        "target_code_len": 237,
        "diff_format": "@@ -21,5 +21,8 @@\n if TYPE_CHECKING:\n-    from typing import Callable, Tuple, Any, Dict, Optional, Iterable\n-\n-    CreatePexVenv = Callable[[Tuple[str, ...]], Virtualenv]\n+    from typing import Any, Dict, Iterable, Iterator, Optional, Protocol, Tuple, Text\n+\n+    class CreatePexVenv(Protocol):\n+        def __call__(self, *options):\n+            # type: (*str) -> Virtualenv\n+            pass\n \n",
        "source_code_with_indent": "if TYPE_CHECKING:\n    <IND>from typing import Callable, Tuple, Any, Dict, Optional, Iterable\n\n    CreatePexVenv = Callable[[Tuple[str, ...]], Virtualenv]\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "if TYPE_CHECKING:\n    <IND>from typing import Any, Dict, Iterable, Iterator, Optional, Protocol, Tuple, Text\n\n    class CreatePexVenv(Protocol):\n        <IND>def __call__(self, *options):\n            # type: (*str) -> Virtualenv\n            <IND>pass\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def create_pex_venv(pex):\n    # type: (str) -> CreatePexVenv\n    with temporary_dir() as tmpdir:\n",
        "source_code_len": 97,
        "target_code": "def create_pex_venv(pex):\n    # type: (str) -> Iterator[CreatePexVenv]\n    with temporary_dir() as tmpdir:\n",
        "target_code_len": 107,
        "diff_format": "@@ -66,3 +69,3 @@\n def create_pex_venv(pex):\n-    # type: (str) -> CreatePexVenv\n+    # type: (str) -> Iterator[CreatePexVenv]\n     with temporary_dir() as tmpdir:\n",
        "source_code_with_indent": "def create_pex_venv(pex):\n    # type: (str) -> CreatePexVenv\n    <IND>with temporary_dir() as tmpdir:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "def create_pex_venv(pex):\n    # type: (str) -> Iterator[CreatePexVenv]\n    <IND>with temporary_dir() as tmpdir:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pantsbuild/pex",
    "commit": "a2e78f8402241e1100d9757d9b3c76adde1189db",
    "filename": "tests/tools/commands/test_venv.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pantsbuild-pex/tests/tools/commands/test_venv.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/tools/commands/test_venv.py:133:16 Incompatible parameter type [6]: Expected `_typeshed.SupportsKeysAndGetItem[Variable[_KT], Variable[_VT]]` for 1st positional only parameter to call `dict.__init__` but got `typing.Generator[typing.List[str], None, None]`.",
    "message": " Expected `_typeshed.SupportsKeysAndGetItem[Variable[_KT], Variable[_VT]]` for 1st positional only parameter to call `dict.__init__` but got `typing.Generator[typing.List[str], None, None]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 133,
    "warning_line": "    return dict(line.split(\" \", 1) for line in output.splitlines())",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from pex.tools.commands.virtualenv import Virtualenv\nfrom pex.typing import TYPE_CHECKING\nfrom pex.util import named_temporary_file\n",
        "source_code_len": 132,
        "target_code": "from pex.tools.commands.virtualenv import Virtualenv\nfrom pex.typing import TYPE_CHECKING, cast\nfrom pex.util import named_temporary_file\n",
        "target_code_len": 138,
        "diff_format": "@@ -17,3 +17,3 @@\n from pex.tools.commands.virtualenv import Virtualenv\n-from pex.typing import TYPE_CHECKING\n+from pex.typing import TYPE_CHECKING, cast\n from pex.util import named_temporary_file\n",
        "source_code_with_indent": "from pex.tools.commands.virtualenv import Virtualenv\nfrom pex.typing import TYPE_CHECKING\nfrom pex.util import named_temporary_file\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from pex.tools.commands.virtualenv import Virtualenv\nfrom pex.typing import TYPE_CHECKING, cast\nfrom pex.util import named_temporary_file\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "if TYPE_CHECKING:\n    from typing import Callable, Tuple, Any, Dict, Optional, Iterable\n\n    CreatePexVenv = Callable[[Tuple[str, ...]], Virtualenv]\n\n",
        "source_code_len": 150,
        "target_code": "if TYPE_CHECKING:\n    from typing import Any, Dict, Iterable, Iterator, Optional, Protocol, Tuple, Text\n\n    class CreatePexVenv(Protocol):\n        def __call__(self, *options):\n            # type: (*str) -> Virtualenv\n            pass\n\n",
        "target_code_len": 237,
        "diff_format": "@@ -21,5 +21,8 @@\n if TYPE_CHECKING:\n-    from typing import Callable, Tuple, Any, Dict, Optional, Iterable\n-\n-    CreatePexVenv = Callable[[Tuple[str, ...]], Virtualenv]\n+    from typing import Any, Dict, Iterable, Iterator, Optional, Protocol, Tuple, Text\n+\n+    class CreatePexVenv(Protocol):\n+        def __call__(self, *options):\n+            # type: (*str) -> Virtualenv\n+            pass\n \n",
        "source_code_with_indent": "if TYPE_CHECKING:\n    <IND>from typing import Callable, Tuple, Any, Dict, Optional, Iterable\n\n    CreatePexVenv = Callable[[Tuple[str, ...]], Virtualenv]\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "if TYPE_CHECKING:\n    <IND>from typing import Any, Dict, Iterable, Iterator, Optional, Protocol, Tuple, Text\n\n    class CreatePexVenv(Protocol):\n        <IND>def __call__(self, *options):\n            # type: (*str) -> Virtualenv\n            <IND>pass\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def create_pex_venv(pex):\n    # type: (str) -> CreatePexVenv\n    with temporary_dir() as tmpdir:\n",
        "source_code_len": 97,
        "target_code": "def create_pex_venv(pex):\n    # type: (str) -> Iterator[CreatePexVenv]\n    with temporary_dir() as tmpdir:\n",
        "target_code_len": 107,
        "diff_format": "@@ -66,3 +69,3 @@\n def create_pex_venv(pex):\n-    # type: (str) -> CreatePexVenv\n+    # type: (str) -> Iterator[CreatePexVenv]\n     with temporary_dir() as tmpdir:\n",
        "source_code_with_indent": "def create_pex_venv(pex):\n    # type: (str) -> CreatePexVenv\n    <IND>with temporary_dir() as tmpdir:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "def create_pex_venv(pex):\n    # type: (str) -> Iterator[CreatePexVenv]\n    <IND>with temporary_dir() as tmpdir:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def parse_fabric_version_output(output):\n    # type: (str) -> Dict[str, str]\n    return dict(line.split(\" \", 1) for line in output.splitlines())\n\n",
        "source_code_len": 146,
        "target_code": "def parse_fabric_version_output(output):\n    # type: (Text) -> Dict[Text, Text]\n    return dict(cast(\"Tuple[Text, Text]\", line.split(\" \", 1)) for line in output.splitlines())\n\n",
        "target_code_len": 176,
        "diff_format": "@@ -131,4 +134,4 @@\n def parse_fabric_version_output(output):\n-    # type: (str) -> Dict[str, str]\n-    return dict(line.split(\" \", 1) for line in output.splitlines())\n+    # type: (Text) -> Dict[Text, Text]\n+    return dict(cast(\"Tuple[Text, Text]\", line.split(\" \", 1)) for line in output.splitlines())\n \n",
        "source_code_with_indent": "<DED>def parse_fabric_version_output(output):\n    # type: (str) -> Dict[str, str]\n    <IND>return dict(line.split(\" \", 1) for line in output.splitlines())\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED>def parse_fabric_version_output(output):\n    # type: (Text) -> Dict[Text, Text]\n    <IND>return dict(cast(\"Tuple[Text, Text]\", line.split(\" \", 1)) for line in output.splitlines())\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]