[
  {
    "project": "psycopg/psycopg",
    "commit": "a4f2845a9b4bf97945fd65d2ea2b4f7a32986e17",
    "filename": "psycopg3/adapt.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/psycopg-psycopg/psycopg3/adapt.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "psycopg3/adapt.py:68:57 Incompatible parameter type [6]: Expected `typing.Type[typing.Any]` for 1st positional only parameter to call `issubclass` but got `Adapter`.",
    "message": " Expected `typing.Type[typing.Any]` for 1st positional only parameter to call `issubclass` but got `Adapter`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 68,
    "warning_line": "            or (isinstance(adapter, type) and issubclass(adapter, Adapter))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import codecs\nfrom typing import cast\nfrom typing import Any, Callable, Dict, Generator, List, Optional, Sequence\nfrom typing import Tuple, Union\n\n",
        "source_code_len": 147,
        "target_code": "import codecs\nfrom typing import Any, Callable, Dict, Generator, List, Optional, Sequence\nfrom typing import Tuple, Type, Union\n\n",
        "target_code_len": 129,
        "diff_format": "@@ -7,5 +7,4 @@\n import codecs\n-from typing import cast\n from typing import Any, Callable, Dict, Generator, List, Optional, Sequence\n-from typing import Tuple, Union\n+from typing import Tuple, Type, Union\n \n",
        "source_code_with_indent": "import codecs\nfrom typing import cast\nfrom typing import Any, Callable, Dict, Generator, List, Optional, Sequence\nfrom typing import Tuple, Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import codecs\nfrom typing import Any, Callable, Dict, Generator, List, Optional, Sequence\nfrom typing import Tuple, Type, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "AdapterFunc = Callable[[Any], MaybeOid]\nAdapterType = Union[\"Adapter\", AdapterFunc]\nAdaptersMap = Dict[Tuple[type, Format], AdapterType]\n",
        "source_code_len": 137,
        "target_code": "AdapterFunc = Callable[[Any], MaybeOid]\nAdapterType = Union[Type[\"Adapter\"], AdapterFunc]\nAdaptersMap = Dict[Tuple[type, Format], AdapterType]\n",
        "target_code_len": 143,
        "diff_format": "@@ -27,3 +26,3 @@\n AdapterFunc = Callable[[Any], MaybeOid]\n-AdapterType = Union[\"Adapter\", AdapterFunc]\n+AdapterType = Union[Type[\"Adapter\"], AdapterFunc]\n AdaptersMap = Dict[Tuple[type, Format], AdapterType]\n",
        "source_code_with_indent": "AdapterFunc = Callable[[Any], MaybeOid]\nAdapterType = Union[\"Adapter\", AdapterFunc]\nAdaptersMap = Dict[Tuple[type, Format], AdapterType]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "AdapterFunc = Callable[[Any], MaybeOid]\nAdapterType = Union[Type[\"Adapter\"], AdapterFunc]\nAdaptersMap = Dict[Tuple[type, Format], AdapterType]\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "TypeCasterFunc = Callable[[bytes], Any]\nTypeCasterType = Union[\"TypeCaster\", TypeCasterFunc]\nTypeCastersMap = Dict[Tuple[int, Format], TypeCasterType]\n",
        "source_code_len": 151,
        "target_code": "TypeCasterFunc = Callable[[bytes], Any]\nTypeCasterType = Union[Type[\"TypeCaster\"], TypeCasterFunc]\nTypeCastersMap = Dict[Tuple[int, Format], TypeCasterType]\n",
        "target_code_len": 157,
        "diff_format": "@@ -31,3 +30,3 @@\n TypeCasterFunc = Callable[[bytes], Any]\n-TypeCasterType = Union[\"TypeCaster\", TypeCasterFunc]\n+TypeCasterType = Union[Type[\"TypeCaster\"], TypeCasterFunc]\n TypeCastersMap = Dict[Tuple[int, Format], TypeCasterType]\n",
        "source_code_with_indent": "TypeCasterFunc = Callable[[bytes], Any]\nTypeCasterType = Union[\"TypeCaster\", TypeCasterFunc]\nTypeCastersMap = Dict[Tuple[int, Format], TypeCasterType]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "TypeCasterFunc = Callable[[bytes], Any]\nTypeCasterType = Union[Type[\"TypeCaster\"], TypeCasterFunc]\nTypeCastersMap = Dict[Tuple[int, Format], TypeCasterType]\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __init__(self, cls: type, conn: BaseConnection):\n        self.cls = cls\n",
        "source_code_len": 81,
        "target_code": "\n    def __init__(self, cls: type, conn: Optional[BaseConnection]):\n        self.cls = cls\n",
        "target_code_len": 91,
        "diff_format": "@@ -38,3 +37,3 @@\n \n-    def __init__(self, cls: type, conn: BaseConnection):\n+    def __init__(self, cls: type, conn: Optional[BaseConnection]):\n         self.cls = cls\n",
        "source_code_with_indent": "\n    def __init__(self, cls: type, conn: BaseConnection):\n        <IND>self.cls = cls\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    def __init__(self, cls: type, conn: Optional[BaseConnection]):\n        <IND>self.cls = cls\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        else:\n            return cast(AdapterFunc, adapter)\n\n",
        "source_code_len": 61,
        "target_code": "        else:\n            return adapter\n\n",
        "target_code_len": 42,
        "diff_format": "@@ -261,3 +260,3 @@\n         else:\n-            return cast(AdapterFunc, adapter)\n+            return adapter\n \n",
        "source_code_with_indent": "        <DED>else:\n            <IND>return cast(AdapterFunc, adapter)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>else:\n            <IND>return adapter\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        else:\n            return cast(TypeCasterFunc, caster)\n\n",
        "source_code_len": 63,
        "target_code": "        else:\n            return caster\n\n",
        "target_code_len": 41,
        "diff_format": "@@ -309,3 +308,3 @@\n         else:\n-            return cast(TypeCasterFunc, caster)\n+            return caster\n \n",
        "source_code_with_indent": "        <DED>else:\n            <IND>return cast(TypeCasterFunc, caster)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>else:\n            <IND>return caster\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "psycopg/psycopg",
    "commit": "a4f2845a9b4bf97945fd65d2ea2b4f7a32986e17",
    "filename": "psycopg3/adapt.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/psycopg-psycopg/psycopg3/adapt.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "psycopg3/adapt.py:134:56 Incompatible parameter type [6]: Expected `typing.Type[typing.Any]` for 1st positional only parameter to call `issubclass` but got `TypeCaster`.",
    "message": " Expected `typing.Type[typing.Any]` for 1st positional only parameter to call `issubclass` but got `TypeCaster`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 134,
    "warning_line": "            or (isinstance(caster, type) and issubclass(caster, TypeCaster))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import codecs\nfrom typing import cast\nfrom typing import Any, Callable, Dict, Generator, List, Optional, Sequence\nfrom typing import Tuple, Union\n\n",
        "source_code_len": 147,
        "target_code": "import codecs\nfrom typing import Any, Callable, Dict, Generator, List, Optional, Sequence\nfrom typing import Tuple, Type, Union\n\n",
        "target_code_len": 129,
        "diff_format": "@@ -7,5 +7,4 @@\n import codecs\n-from typing import cast\n from typing import Any, Callable, Dict, Generator, List, Optional, Sequence\n-from typing import Tuple, Union\n+from typing import Tuple, Type, Union\n \n",
        "source_code_with_indent": "import codecs\nfrom typing import cast\nfrom typing import Any, Callable, Dict, Generator, List, Optional, Sequence\nfrom typing import Tuple, Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import codecs\nfrom typing import Any, Callable, Dict, Generator, List, Optional, Sequence\nfrom typing import Tuple, Type, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "AdapterFunc = Callable[[Any], MaybeOid]\nAdapterType = Union[\"Adapter\", AdapterFunc]\nAdaptersMap = Dict[Tuple[type, Format], AdapterType]\n",
        "source_code_len": 137,
        "target_code": "AdapterFunc = Callable[[Any], MaybeOid]\nAdapterType = Union[Type[\"Adapter\"], AdapterFunc]\nAdaptersMap = Dict[Tuple[type, Format], AdapterType]\n",
        "target_code_len": 143,
        "diff_format": "@@ -27,3 +26,3 @@\n AdapterFunc = Callable[[Any], MaybeOid]\n-AdapterType = Union[\"Adapter\", AdapterFunc]\n+AdapterType = Union[Type[\"Adapter\"], AdapterFunc]\n AdaptersMap = Dict[Tuple[type, Format], AdapterType]\n",
        "source_code_with_indent": "AdapterFunc = Callable[[Any], MaybeOid]\nAdapterType = Union[\"Adapter\", AdapterFunc]\nAdaptersMap = Dict[Tuple[type, Format], AdapterType]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "AdapterFunc = Callable[[Any], MaybeOid]\nAdapterType = Union[Type[\"Adapter\"], AdapterFunc]\nAdaptersMap = Dict[Tuple[type, Format], AdapterType]\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "TypeCasterFunc = Callable[[bytes], Any]\nTypeCasterType = Union[\"TypeCaster\", TypeCasterFunc]\nTypeCastersMap = Dict[Tuple[int, Format], TypeCasterType]\n",
        "source_code_len": 151,
        "target_code": "TypeCasterFunc = Callable[[bytes], Any]\nTypeCasterType = Union[Type[\"TypeCaster\"], TypeCasterFunc]\nTypeCastersMap = Dict[Tuple[int, Format], TypeCasterType]\n",
        "target_code_len": 157,
        "diff_format": "@@ -31,3 +30,3 @@\n TypeCasterFunc = Callable[[bytes], Any]\n-TypeCasterType = Union[\"TypeCaster\", TypeCasterFunc]\n+TypeCasterType = Union[Type[\"TypeCaster\"], TypeCasterFunc]\n TypeCastersMap = Dict[Tuple[int, Format], TypeCasterType]\n",
        "source_code_with_indent": "TypeCasterFunc = Callable[[bytes], Any]\nTypeCasterType = Union[\"TypeCaster\", TypeCasterFunc]\nTypeCastersMap = Dict[Tuple[int, Format], TypeCasterType]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "TypeCasterFunc = Callable[[bytes], Any]\nTypeCasterType = Union[Type[\"TypeCaster\"], TypeCasterFunc]\nTypeCastersMap = Dict[Tuple[int, Format], TypeCasterType]\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __init__(self, cls: type, conn: BaseConnection):\n        self.cls = cls\n",
        "source_code_len": 81,
        "target_code": "\n    def __init__(self, cls: type, conn: Optional[BaseConnection]):\n        self.cls = cls\n",
        "target_code_len": 91,
        "diff_format": "@@ -38,3 +37,3 @@\n \n-    def __init__(self, cls: type, conn: BaseConnection):\n+    def __init__(self, cls: type, conn: Optional[BaseConnection]):\n         self.cls = cls\n",
        "source_code_with_indent": "\n    def __init__(self, cls: type, conn: BaseConnection):\n        <IND>self.cls = cls\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    def __init__(self, cls: type, conn: Optional[BaseConnection]):\n        <IND>self.cls = cls\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        else:\n            return cast(AdapterFunc, adapter)\n\n",
        "source_code_len": 61,
        "target_code": "        else:\n            return adapter\n\n",
        "target_code_len": 42,
        "diff_format": "@@ -261,3 +260,3 @@\n         else:\n-            return cast(AdapterFunc, adapter)\n+            return adapter\n \n",
        "source_code_with_indent": "        <DED>else:\n            <IND>return cast(AdapterFunc, adapter)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>else:\n            <IND>return adapter\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        else:\n            return cast(TypeCasterFunc, caster)\n\n",
        "source_code_len": 63,
        "target_code": "        else:\n            return caster\n\n",
        "target_code_len": 41,
        "diff_format": "@@ -309,3 +308,3 @@\n         else:\n-            return cast(TypeCasterFunc, caster)\n+            return caster\n \n",
        "source_code_with_indent": "        <DED>else:\n            <IND>return cast(TypeCasterFunc, caster)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>else:\n            <IND>return caster\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "psycopg/psycopg",
    "commit": "a4f2845a9b4bf97945fd65d2ea2b4f7a32986e17",
    "filename": "psycopg3/types/array.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/psycopg-psycopg/psycopg3/types/array.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "psycopg3/types/array.py:157:40 Incompatible parameter type [6]: Expected `typing.Union[typing.Callable[[bytes], typing.Any], TypeCaster]` for 2nd positional only parameter to call `TypeCaster.register` but got `typing.Type[typing.Any]`.",
    "message": " Expected `typing.Union[typing.Callable[[bytes], typing.Any], TypeCaster]` for 2nd positional only parameter to call `TypeCaster.register` but got `typing.Type[typing.Any]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 157,
    "warning_line": "        return TypeCaster.register(oid, t, context=context, format=format)"
  },
  {
    "project": "psycopg/psycopg",
    "commit": "a4f2845a9b4bf97945fd65d2ea2b4f7a32986e17",
    "filename": "psycopg3/types/array.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/psycopg-psycopg/psycopg3/types/array.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "psycopg3/types/array.py:169:4 Inconsistent override [15]: `base_caster` overrides attribute defined in `ArrayCasterBase` inconsistently. Type `typing.Type[UnknownCaster]` is not a subtype of the overridden attribute `typing.Union[typing.Callable[[bytes], typing.Any], TypeCaster]`.",
    "message": " `base_caster` overrides attribute defined in `ArrayCasterBase` inconsistently. Type `typing.Type[UnknownCaster]` is not a subtype of the overridden attribute `typing.Union[typing.Callable[[bytes], typing.Any], TypeCaster]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 169,
    "warning_line": "    base_caster = UnknownCaster"
  }
]