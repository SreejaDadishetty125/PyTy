[
  {
    "project": "idom-team/idom",
    "commit": "821dd559d27c972a6e581efac08a2fbe851be125",
    "filename": "idom/widgets/utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/idom-team-idom/idom/widgets/utils.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "idom/widgets/utils.py:213:4 Incompatible return type [7]: Expected `Tuple[MountFunc, typing.Callable[..., idom.core.element.Element]]` but got `Tuple[typing.Callable[[Named(_func_, typing.Callable[..., idom.core.element.Element]), Variable(typing.Any), Keywords(typing.Any)], None], typing.Any]`.",
    "message": " Expected `Tuple[MountFunc, typing.Callable[..., idom.core.element.Element]]` but got `Tuple[typing.Callable[[Named(_func_, typing.Callable[..., idom.core.element.Element]), Variable(typing.Any), Keywords(typing.Any)], None], typing.Any]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 213,
    "warning_line": "    return swap, HotSwap",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from pathlib import Path\nfrom typing import Any, Callable, Tuple, Optional, Dict, Union, Set\n\n",
        "source_code_len": 94,
        "target_code": "from pathlib import Path\nfrom typing import Any, Callable, Tuple, Optional, Dict, Union, Set, cast\n\n",
        "target_code_len": 100,
        "diff_format": "@@ -1,3 +1,3 @@\n from pathlib import Path\n-from typing import Any, Callable, Tuple, Optional, Dict, Union, Set\n+from typing import Any, Callable, Tuple, Optional, Dict, Union, Set, cast\n \n",
        "source_code_with_indent": "from pathlib import Path\nfrom typing import Any, Callable, Tuple, Optional, Dict, Union, Set\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from pathlib import Path\nfrom typing import Any, Callable, Tuple, Optional, Dict, Union, Set, cast\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    return swap, HotSwap\n\n",
        "source_code_len": 27,
        "target_code": "\n    return cast(MountFunc, swap), HotSwap\n\n",
        "target_code_len": 44,
        "diff_format": "@@ -212,3 +212,3 @@\n \n-    return swap, HotSwap\n+    return cast(MountFunc, swap), HotSwap\n \n",
        "source_code_with_indent": "\n    <DED><DED>return swap, HotSwap\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED><DED>return cast(MountFunc, swap), HotSwap\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]