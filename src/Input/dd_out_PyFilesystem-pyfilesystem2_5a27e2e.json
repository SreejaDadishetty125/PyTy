[
  {
    "project": "PyFilesystem/pyfilesystem2",
    "commit": "5a27e2e29df780ecbabf92d31d44b7f3ce271918",
    "filename": "fs/ftpfs.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/PyFilesystem-pyfilesystem2/fs/ftpfs.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "fs/ftpfs.py:238:4 Inconsistent override [14]: `fs.ftpfs.FTPFile.readinto` overrides method defined in `io.RawIOBase` inconsistently. Parameter of type `bytearray` is not a supertype of the overridden parameter `Union[array.array[typing.Any], bytearray, memoryview, mmap.mmap]`.",
    "message": " `fs.ftpfs.FTPFile.readinto` overrides method defined in `io.RawIOBase` inconsistently. Parameter of type `bytearray` is not a supertype of the overridden parameter `Union[array.array[typing.Any], bytearray, memoryview, mmap.mmap]`.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 238,
    "warning_line": "    def readinto(self, buffer):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nimport calendar\n",
        "source_code_len": 17,
        "target_code": "\nimport array\nimport calendar\n",
        "target_code_len": 30,
        "diff_format": "@@ -6,2 +6,3 @@\n \n+import array\n import calendar\n",
        "source_code_with_indent": "\nimport calendar\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nimport array\nimport calendar\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "    def readinto(self, buffer):\n        # type: (bytearray) -> int\n        data = self.read(len(buffer))\n        bytes_read = len(data)\n        buffer[:bytes_read] = data\n        return bytes_read\n\n    def readline(self, size=-1):\n        # type: (int) -> bytes\n        return next(line_iterator(self, size))  # type: ignore\n",
        "source_code_len": 325,
        "target_code": "    def readinto(self, buffer):\n        # type: (Union[bytearray, memoryview, array.array[Any], mmap.mmap]) -> int\n        data = self.read(len(buffer))\n        bytes_read = len(data)\n        if isinstance(buffer, array.array):\n            buffer[:bytes_read] = array.array(buffer.typecode, data)\n        else:\n            buffer[:bytes_read] = data  # type: ignore\n        return bytes_read\n\n    def readline(self, size=None):\n        # type: (Optional[int]) -> bytes\n        return next(line_iterator(self, size))  # type: ignore\n",
        "target_code_len": 532,
        "diff_format": "@@ -238,10 +240,13 @@\n     def readinto(self, buffer):\n-        # type: (bytearray) -> int\n+        # type: (Union[bytearray, memoryview, array.array[Any], mmap.mmap]) -> int\n         data = self.read(len(buffer))\n         bytes_read = len(data)\n-        buffer[:bytes_read] = data\n+        if isinstance(buffer, array.array):\n+            buffer[:bytes_read] = array.array(buffer.typecode, data)\n+        else:\n+            buffer[:bytes_read] = data  # type: ignore\n         return bytes_read\n \n-    def readline(self, size=-1):\n-        # type: (int) -> bytes\n+    def readline(self, size=None):\n+        # type: (Optional[int]) -> bytes\n         return next(line_iterator(self, size))  # type: ignore\n",
        "source_code_with_indent": "    <DED>def readinto(self, buffer):\n        # type: (bytearray) -> int\n        <IND>data = self.read(len(buffer))\n        bytes_read = len(data)\n        buffer[:bytes_read] = data\n        return bytes_read\n\n    <DED>def readline(self, size=-1):\n        # type: (int) -> bytes\n        <IND>return next(line_iterator(self, size))  # type: ignore\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def readinto(self, buffer):\n        # type: (Union[bytearray, memoryview, array.array[Any], mmap.mmap]) -> int\n        <IND>data = self.read(len(buffer))\n        bytes_read = len(data)\n        if isinstance(buffer, array.array):\n            <IND>buffer[:bytes_read] = array.array(buffer.typecode, data)\n        <DED>else:\n            <IND>buffer[:bytes_read] = data  # type: ignore\n        <DED>return bytes_read\n\n    <DED>def readline(self, size=None):\n        # type: (Optional[int]) -> bytes\n        <IND>return next(line_iterator(self, size))  # type: ignore\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "PyFilesystem/pyfilesystem2",
    "commit": "5a27e2e29df780ecbabf92d31d44b7f3ce271918",
    "filename": "fs/ftpfs.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/PyFilesystem-pyfilesystem2/fs/ftpfs.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "fs/ftpfs.py:245:4 Inconsistent override [14]: `fs.ftpfs.FTPFile.readline` overrides method defined in `io.IOBase` inconsistently. Parameter of type `int` is not a supertype of the overridden parameter `Optional[int]`.",
    "message": " `fs.ftpfs.FTPFile.readline` overrides method defined in `io.IOBase` inconsistently. Parameter of type `int` is not a supertype of the overridden parameter `Optional[int]`.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 245,
    "warning_line": "    def readline(self, size=-1):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nimport calendar\n",
        "source_code_len": 17,
        "target_code": "\nimport array\nimport calendar\n",
        "target_code_len": 30,
        "diff_format": "@@ -6,2 +6,3 @@\n \n+import array\n import calendar\n",
        "source_code_with_indent": "\nimport calendar\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nimport array\nimport calendar\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "    def readinto(self, buffer):\n        # type: (bytearray) -> int\n        data = self.read(len(buffer))\n        bytes_read = len(data)\n        buffer[:bytes_read] = data\n        return bytes_read\n\n    def readline(self, size=-1):\n        # type: (int) -> bytes\n        return next(line_iterator(self, size))  # type: ignore\n",
        "source_code_len": 325,
        "target_code": "    def readinto(self, buffer):\n        # type: (Union[bytearray, memoryview, array.array[Any], mmap.mmap]) -> int\n        data = self.read(len(buffer))\n        bytes_read = len(data)\n        if isinstance(buffer, array.array):\n            buffer[:bytes_read] = array.array(buffer.typecode, data)\n        else:\n            buffer[:bytes_read] = data  # type: ignore\n        return bytes_read\n\n    def readline(self, size=None):\n        # type: (Optional[int]) -> bytes\n        return next(line_iterator(self, size))  # type: ignore\n",
        "target_code_len": 532,
        "diff_format": "@@ -238,10 +240,13 @@\n     def readinto(self, buffer):\n-        # type: (bytearray) -> int\n+        # type: (Union[bytearray, memoryview, array.array[Any], mmap.mmap]) -> int\n         data = self.read(len(buffer))\n         bytes_read = len(data)\n-        buffer[:bytes_read] = data\n+        if isinstance(buffer, array.array):\n+            buffer[:bytes_read] = array.array(buffer.typecode, data)\n+        else:\n+            buffer[:bytes_read] = data  # type: ignore\n         return bytes_read\n \n-    def readline(self, size=-1):\n-        # type: (int) -> bytes\n+    def readline(self, size=None):\n+        # type: (Optional[int]) -> bytes\n         return next(line_iterator(self, size))  # type: ignore\n",
        "source_code_with_indent": "    <DED>def readinto(self, buffer):\n        # type: (bytearray) -> int\n        <IND>data = self.read(len(buffer))\n        bytes_read = len(data)\n        buffer[:bytes_read] = data\n        return bytes_read\n\n    <DED>def readline(self, size=-1):\n        # type: (int) -> bytes\n        <IND>return next(line_iterator(self, size))  # type: ignore\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def readinto(self, buffer):\n        # type: (Union[bytearray, memoryview, array.array[Any], mmap.mmap]) -> int\n        <IND>data = self.read(len(buffer))\n        bytes_read = len(data)\n        if isinstance(buffer, array.array):\n            <IND>buffer[:bytes_read] = array.array(buffer.typecode, data)\n        <DED>else:\n            <IND>buffer[:bytes_read] = data  # type: ignore\n        <DED>return bytes_read\n\n    <DED>def readline(self, size=None):\n        # type: (Optional[int]) -> bytes\n        <IND>return next(line_iterator(self, size))  # type: ignore\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "PyFilesystem/pyfilesystem2",
    "commit": "5a27e2e29df780ecbabf92d31d44b7f3ce271918",
    "filename": "fs/ftpfs.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/PyFilesystem-pyfilesystem2/fs/ftpfs.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "fs/ftpfs.py:264:4 Inconsistent override [14]: `fs.ftpfs.FTPFile.write` overrides method defined in `io.RawIOBase` inconsistently. Parameter of type `bytes` is not a supertype of the overridden parameter `Union[array.array[typing.Any], bytearray, bytes, memoryview, mmap.mmap]`.",
    "message": " `fs.ftpfs.FTPFile.write` overrides method defined in `io.RawIOBase` inconsistently. Parameter of type `bytes` is not a supertype of the overridden parameter `Union[array.array[typing.Any], bytearray, bytes, memoryview, mmap.mmap]`.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 264,
    "warning_line": "    def write(self, data):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nimport calendar\n",
        "source_code_len": 17,
        "target_code": "\nimport array\nimport calendar\n",
        "target_code_len": 30,
        "diff_format": "@@ -6,2 +6,3 @@\n \n+import array\n import calendar\n",
        "source_code_with_indent": "\nimport calendar\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nimport array\nimport calendar\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def write(self, data):\n        # type: (bytes) -> int\n        if not self.mode.writing:\n            raise IOError(\"File not open for writing\")\n\n",
        "source_code_len": 148,
        "target_code": "    def write(self, data):\n        # type: (Union[bytes, bytearray, memoryview, array.array[Any], mmap.mmap]) -> int\n        if not self.mode.writing:\n            raise IOError(\"File not open for writing\")\n\n        if isinstance(data, array.array):\n            data = data.tobytes()\n\n",
        "target_code_len": 284,
        "diff_format": "@@ -264,5 +269,8 @@\n     def write(self, data):\n-        # type: (bytes) -> int\n+        # type: (Union[bytes, bytearray, memoryview, array.array[Any], mmap.mmap]) -> int\n         if not self.mode.writing:\n             raise IOError(\"File not open for writing\")\n+\n+        if isinstance(data, array.array):\n+            data = data.tobytes()\n \n",
        "source_code_with_indent": "    <DED>def write(self, data):\n        # type: (bytes) -> int\n        <IND>if not self.mode.writing:\n            <IND>raise IOError(\"File not open for writing\")\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def write(self, data):\n        # type: (Union[bytes, bytearray, memoryview, array.array[Any], mmap.mmap]) -> int\n        <IND>if not self.mode.writing:\n            <IND>raise IOError(\"File not open for writing\")\n\n        <DED>if isinstance(data, array.array):\n            <IND>data = data.tobytes()\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "PyFilesystem/pyfilesystem2",
    "commit": "5a27e2e29df780ecbabf92d31d44b7f3ce271918",
    "filename": "fs/ftpfs.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/PyFilesystem-pyfilesystem2/fs/ftpfs.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "fs/ftpfs.py:283:4 Inconsistent override [14]: `fs.ftpfs.FTPFile.writelines` overrides method defined in `io.IOBase` inconsistently. Parameter of type `Iterable[bytes]` is not a supertype of the overridden parameter `Iterable[Union[array.array[typing.Any], bytearray, bytes, memoryview, mmap.mmap]]`.",
    "message": " `fs.ftpfs.FTPFile.writelines` overrides method defined in `io.IOBase` inconsistently. Parameter of type `Iterable[bytes]` is not a supertype of the overridden parameter `Iterable[Union[array.array[typing.Any], bytearray, bytes, memoryview, mmap.mmap]]`.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 283,
    "warning_line": "    def writelines(self, lines):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nimport calendar\n",
        "source_code_len": 17,
        "target_code": "\nimport array\nimport calendar\n",
        "target_code_len": 30,
        "diff_format": "@@ -6,2 +6,3 @@\n \n+import array\n import calendar\n",
        "source_code_with_indent": "\nimport calendar\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nimport array\nimport calendar\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def write(self, data):\n        # type: (bytes) -> int\n        if not self.mode.writing:\n            raise IOError(\"File not open for writing\")\n\n",
        "source_code_len": 148,
        "target_code": "    def write(self, data):\n        # type: (Union[bytes, bytearray, memoryview, array.array[Any], mmap.mmap]) -> int\n        if not self.mode.writing:\n            raise IOError(\"File not open for writing\")\n\n        if isinstance(data, array.array):\n            data = data.tobytes()\n\n",
        "target_code_len": 284,
        "diff_format": "@@ -264,5 +269,8 @@\n     def write(self, data):\n-        # type: (bytes) -> int\n+        # type: (Union[bytes, bytearray, memoryview, array.array[Any], mmap.mmap]) -> int\n         if not self.mode.writing:\n             raise IOError(\"File not open for writing\")\n+\n+        if isinstance(data, array.array):\n+            data = data.tobytes()\n \n",
        "source_code_with_indent": "    <DED>def write(self, data):\n        # type: (bytes) -> int\n        <IND>if not self.mode.writing:\n            <IND>raise IOError(\"File not open for writing\")\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def write(self, data):\n        # type: (Union[bytes, bytearray, memoryview, array.array[Any], mmap.mmap]) -> int\n        <IND>if not self.mode.writing:\n            <IND>raise IOError(\"File not open for writing\")\n\n        <DED>if isinstance(data, array.array):\n            <IND>data = data.tobytes()\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def writelines(self, lines):\n        # type: (Iterable[bytes]) -> None\n        self.write(b\"\".join(lines))\n\n",
        "source_code_len": 112,
        "target_code": "    def writelines(self, lines):\n        # type: (Iterable[Union[bytes, bytearray, memoryview, array.array[Any], mmap.mmap]]) -> None\n        for line in lines:\n            self.write(line)\n\n",
        "target_code_len": 191,
        "diff_format": "@@ -283,4 +291,5 @@\n     def writelines(self, lines):\n-        # type: (Iterable[bytes]) -> None\n-        self.write(b\"\".join(lines))\n+        # type: (Iterable[Union[bytes, bytearray, memoryview, array.array[Any], mmap.mmap]]) -> None\n+        for line in lines:\n+            self.write(line)\n \n",
        "source_code_with_indent": "    <DED>def writelines(self, lines):\n        # type: (Iterable[bytes]) -> None\n        <IND>self.write(b\"\".join(lines))\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def writelines(self, lines):\n        # type: (Iterable[Union[bytes, bytearray, memoryview, array.array[Any], mmap.mmap]]) -> None\n        <IND>for line in lines:\n            <IND>self.write(line)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]