[
  {
    "project": "openbmc/openbmc",
    "commit": "c9f7865a347606a64696048817b0f09d9c3fcd31",
    "filename": "bitbake/lib/bb/COW.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/openbmc-openbmc/bitbake/lib/bb/COW.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bitbake/lib/bb/COW.py:35:4 Unbound name [10]: Name `long` is used but not defined in the current scope.",
    "message": " Name `long` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 35,
    "warning_line": "        return \"<COWDict Level: %i Current Keys: %i>\" % (cls.__count__, len(cls.__dict__) - 3)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "#\n#Please Note:\n# Be careful when using mutable types (ie Dict and Lists) - operations involving these are SLOW.\n",
        "source_code_len": 113,
        "target_code": "#\n# Please Note:\n# Be careful when using mutable types (ie Dict and Lists) - operations involving these are SLOW.\n",
        "target_code_len": 114,
        "diff_format": "@@ -5,3 +5,3 @@\n #\n-#Please Note:\n+# Please Note:\n # Be careful when using mutable types (ie Dict and Lists) - operations involving these are SLOW.\n",
        "source_code_with_indent": "#\n#Please Note:\n# Be careful when using mutable types (ie Dict and Lists) - operations involving these are SLOW.\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "#\n# Please Note:\n# Be careful when using mutable types (ie Dict and Lists) - operations involving these are SLOW.\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "openbmc/openbmc",
    "commit": "c9f7865a347606a64696048817b0f09d9c3fcd31",
    "filename": "bitbake/lib/bb/COW.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/openbmc-openbmc/bitbake/lib/bb/COW.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bitbake/lib/bb/COW.py:38:4 Unbound name [10]: Name `basestring` is used but not defined in the current scope.",
    "message": " Name `basestring` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 38,
    "warning_line": "    def cow(cls):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "#\n#Please Note:\n# Be careful when using mutable types (ie Dict and Lists) - operations involving these are SLOW.\n",
        "source_code_len": 113,
        "target_code": "#\n# Please Note:\n# Be careful when using mutable types (ie Dict and Lists) - operations involving these are SLOW.\n",
        "target_code_len": 114,
        "diff_format": "@@ -5,3 +5,3 @@\n #\n-#Please Note:\n+# Please Note:\n # Be careful when using mutable types (ie Dict and Lists) - operations involving these are SLOW.\n",
        "source_code_with_indent": "#\n#Please Note:\n# Be careful when using mutable types (ie Dict and Lists) - operations involving these are SLOW.\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "#\n# Please Note:\n# Be careful when using mutable types (ie Dict and Lists) - operations involving these are SLOW.\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "openbmc/openbmc",
    "commit": "c9f7865a347606a64696048817b0f09d9c3fcd31",
    "filename": "poky/bitbake/lib/bb/COW.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/openbmc-openbmc/poky/bitbake/lib/bb/COW.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "poky/bitbake/lib/bb/COW.py:185:4 Incompatible attribute type [8]: Attribute `__warn__` declared in class `COWDictMeta` has type `bool` but is used as type `typing.TextIO`.",
    "message": " Attribute `__warn__` declared in class `COWDictMeta` has type `bool` but is used as type `typing.TextIO`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 185,
    "warning_line": "    COWDictBase.__warn__ = sys.stderr",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n# These are the actual classes you use!\nclass COWDictBase(object, metaclass = COWDictMeta):\n    __count__ = 0\n\nclass COWSetBase(object, metaclass = COWSetMeta):\n    __count__ = 0\n\nif __name__ == \"__main__\":\n    import sys\n    COWDictBase.__warn__ = sys.stderr\n    a = COWDictBase()\n    print(\"a\", a)\n\n    a['a'] = 'a'\n    a['b'] = 'b'\n    a['dict'] = {}\n\n    b = a.copy()\n    print(\"b\", b)\n    b['c'] = 'b'\n\n    print()\n\n    print(\"a\", a)\n    for x in a.iteritems():\n        print(x)\n    print(\"--\")\n    print(\"b\", b)\n    for x in b.iteritems():\n        print(x)\n    print()\n\n    b['dict']['a'] = 'b'\n    b['a'] = 'c'\n\n    print(\"a\", a)\n    for x in a.iteritems():\n        print(x)\n    print(\"--\")\n    print(\"b\", b)\n    for x in b.iteritems():\n        print(x)\n    print()\n\n    try:\n        b['dict2']\n    except KeyError as e:\n        print(\"Okay!\")\n\n    a['set'] = COWSetBase()\n    a['set'].add(\"o1\")\n    a['set'].add(\"o1\")\n    a['set'].add(\"o2\")\n\n    print(\"a\", a)\n    for x in a['set'].itervalues():\n        print(x)\n    print(\"--\")\n    print(\"b\", b)\n    for x in b['set'].itervalues():\n        print(x)\n    print()\n\n    b['set'].add('o3')\n\n    print(\"a\", a)\n    for x in a['set'].itervalues():\n        print(x)\n    print(\"--\")\n    print(\"b\", b)\n    for x in b['set'].itervalues():\n        print(x)\n    print()\n\n    a['set2'] = set()\n    a['set2'].add(\"o1\")\n    a['set2'].add(\"o1\")\n    a['set2'].add(\"o2\")\n\n    print(\"a\", a)\n    for x in a.iteritems():\n        print(x)\n    print(\"--\")\n    print(\"b\", b)\n    for x in b.iteritems(readonly=True):\n        print(x)\n    print()\n\n    del b['b']\n    try:\n        print(b['b'])\n    except KeyError:\n        print(\"Yay! deleted key raises error\")\n\n    if 'b' in b:\n        print(\"Boo!\")\n    else:\n        print(\"Yay - has_key with delete works!\")\n\n    print(\"a\", a)\n    for x in a.iteritems():\n        print(x)\n    print(\"--\")\n    print(\"b\", b)\n    for x in b.iteritems(readonly=True):\n        print(x)\n    print()\n\n    b.__revertitem__('b')\n\n    print(\"a\", a)\n    for x in a.iteritems():\n        print(x)\n    print(\"--\")\n    print(\"b\", b)\n    for x in b.iteritems(readonly=True):\n        print(x)\n    print()\n\n    b.__revertitem__('dict')\n    print(\"a\", a)\n    for x in a.iteritems():\n        print(x)\n    print(\"--\")\n    print(\"b\", b)\n    for x in b.iteritems(readonly=True):\n        print(x)\n    print()\n",
        "source_code_len": 2354,
        "target_code": "\n\n# These are the actual classes you use!\nclass COWDictBase(metaclass=COWDictMeta):\n    __count__ = 0\n\n\nclass COWSetBase(metaclass=COWSetMeta):\n    __count__ = 0\n",
        "target_code_len": 162,
        "diff_format": "@@ -175,129 +187,9 @@\n \n+\n # These are the actual classes you use!\n-class COWDictBase(object, metaclass = COWDictMeta):\n+class COWDictBase(metaclass=COWDictMeta):\n     __count__ = 0\n \n-class COWSetBase(object, metaclass = COWSetMeta):\n+\n+class COWSetBase(metaclass=COWSetMeta):\n     __count__ = 0\n-\n-if __name__ == \"__main__\":\n-    import sys\n-    COWDictBase.__warn__ = sys.stderr\n-    a = COWDictBase()\n-    print(\"a\", a)\n-\n-    a['a'] = 'a'\n-    a['b'] = 'b'\n-    a['dict'] = {}\n-\n-    b = a.copy()\n-    print(\"b\", b)\n-    b['c'] = 'b'\n-\n-    print()\n-\n-    print(\"a\", a)\n-    for x in a.iteritems():\n-        print(x)\n-    print(\"--\")\n-    print(\"b\", b)\n-    for x in b.iteritems():\n-        print(x)\n-    print()\n-\n-    b['dict']['a'] = 'b'\n-    b['a'] = 'c'\n-\n-    print(\"a\", a)\n-    for x in a.iteritems():\n-        print(x)\n-    print(\"--\")\n-    print(\"b\", b)\n-    for x in b.iteritems():\n-        print(x)\n-    print()\n-\n-    try:\n-        b['dict2']\n-    except KeyError as e:\n-        print(\"Okay!\")\n-\n-    a['set'] = COWSetBase()\n-    a['set'].add(\"o1\")\n-    a['set'].add(\"o1\")\n-    a['set'].add(\"o2\")\n-\n-    print(\"a\", a)\n-    for x in a['set'].itervalues():\n-        print(x)\n-    print(\"--\")\n-    print(\"b\", b)\n-    for x in b['set'].itervalues():\n-        print(x)\n-    print()\n-\n-    b['set'].add('o3')\n-\n-    print(\"a\", a)\n-    for x in a['set'].itervalues():\n-        print(x)\n-    print(\"--\")\n-    print(\"b\", b)\n-    for x in b['set'].itervalues():\n-        print(x)\n-    print()\n-\n-    a['set2'] = set()\n-    a['set2'].add(\"o1\")\n-    a['set2'].add(\"o1\")\n-    a['set2'].add(\"o2\")\n-\n-    print(\"a\", a)\n-    for x in a.iteritems():\n-        print(x)\n-    print(\"--\")\n-    print(\"b\", b)\n-    for x in b.iteritems(readonly=True):\n-        print(x)\n-    print()\n-\n-    del b['b']\n-    try:\n-        print(b['b'])\n-    except KeyError:\n-        print(\"Yay! deleted key raises error\")\n-\n-    if 'b' in b:\n-        print(\"Boo!\")\n-    else:\n-        print(\"Yay - has_key with delete works!\")\n-\n-    print(\"a\", a)\n-    for x in a.iteritems():\n-        print(x)\n-    print(\"--\")\n-    print(\"b\", b)\n-    for x in b.iteritems(readonly=True):\n-        print(x)\n-    print()\n-\n-    b.__revertitem__('b')\n-\n-    print(\"a\", a)\n-    for x in a.iteritems():\n-        print(x)\n-    print(\"--\")\n-    print(\"b\", b)\n-    for x in b.iteritems(readonly=True):\n-        print(x)\n-    print()\n-\n-    b.__revertitem__('dict')\n-    print(\"a\", a)\n-    for x in a.iteritems():\n-        print(x)\n-    print(\"--\")\n-    print(\"b\", b)\n-    for x in b.iteritems(readonly=True):\n-        print(x)\n-    print()\n",
        "source_code_with_indent": "\n# These are the actual classes you use!\n<DED><DED>class COWDictBase(object, metaclass = COWDictMeta):\n    <IND>__count__ = 0\n\n<DED>class COWSetBase(object, metaclass = COWSetMeta):\n    <IND>__count__ = 0\n\n<DED>if __name__ == \"__main__\":\n    <IND>import sys\n    COWDictBase.__warn__ = sys.stderr\n    a = COWDictBase()\n    print(\"a\", a)\n\n    a['a'] = 'a'\n    a['b'] = 'b'\n    a['dict'] = {}\n\n    b = a.copy()\n    print(\"b\", b)\n    b['c'] = 'b'\n\n    print()\n\n    print(\"a\", a)\n    for x in a.iteritems():\n        <IND>print(x)\n    <DED>print(\"--\")\n    print(\"b\", b)\n    for x in b.iteritems():\n        <IND>print(x)\n    <DED>print()\n\n    b['dict']['a'] = 'b'\n    b['a'] = 'c'\n\n    print(\"a\", a)\n    for x in a.iteritems():\n        <IND>print(x)\n    <DED>print(\"--\")\n    print(\"b\", b)\n    for x in b.iteritems():\n        <IND>print(x)\n    <DED>print()\n\n    try:\n        <IND>b['dict2']\n    <DED>except KeyError as e:\n        <IND>print(\"Okay!\")\n\n    <DED>a['set'] = COWSetBase()\n    a['set'].add(\"o1\")\n    a['set'].add(\"o1\")\n    a['set'].add(\"o2\")\n\n    print(\"a\", a)\n    for x in a['set'].itervalues():\n        <IND>print(x)\n    <DED>print(\"--\")\n    print(\"b\", b)\n    for x in b['set'].itervalues():\n        <IND>print(x)\n    <DED>print()\n\n    b['set'].add('o3')\n\n    print(\"a\", a)\n    for x in a['set'].itervalues():\n        <IND>print(x)\n    <DED>print(\"--\")\n    print(\"b\", b)\n    for x in b['set'].itervalues():\n        <IND>print(x)\n    <DED>print()\n\n    a['set2'] = set()\n    a['set2'].add(\"o1\")\n    a['set2'].add(\"o1\")\n    a['set2'].add(\"o2\")\n\n    print(\"a\", a)\n    for x in a.iteritems():\n        <IND>print(x)\n    <DED>print(\"--\")\n    print(\"b\", b)\n    for x in b.iteritems(readonly=True):\n        <IND>print(x)\n    <DED>print()\n\n    del b['b']\n    try:\n        <IND>print(b['b'])\n    <DED>except KeyError:\n        <IND>print(\"Yay! deleted key raises error\")\n\n    <DED>if 'b' in b:\n        <IND>print(\"Boo!\")\n    <DED>else:\n        <IND>print(\"Yay - has_key with delete works!\")\n\n    <DED>print(\"a\", a)\n    for x in a.iteritems():\n        <IND>print(x)\n    <DED>print(\"--\")\n    print(\"b\", b)\n    for x in b.iteritems(readonly=True):\n        <IND>print(x)\n    <DED>print()\n\n    b.__revertitem__('b')\n\n    print(\"a\", a)\n    for x in a.iteritems():\n        <IND>print(x)\n    <DED>print(\"--\")\n    print(\"b\", b)\n    for x in b.iteritems(readonly=True):\n        <IND>print(x)\n    <DED>print()\n\n    b.__revertitem__('dict')\n    print(\"a\", a)\n    for x in a.iteritems():\n        <IND>print(x)\n    <DED>print(\"--\")\n    print(\"b\", b)\n    for x in b.iteritems(readonly=True):\n        <IND>print(x)\n    <DED>print()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n\n# These are the actual classes you use!\n<DED><DED>class COWDictBase(metaclass=COWDictMeta):\n    <IND>__count__ = 0\n\n\n<DED>class COWSetBase(metaclass=COWSetMeta):\n    <IND>__count__ = 0\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "openbmc/openbmc",
    "commit": "c9f7865a347606a64696048817b0f09d9c3fcd31",
    "filename": "poky/bitbake/lib/bb/COW.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/openbmc-openbmc/poky/bitbake/lib/bb/COW.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "poky/bitbake/lib/bb/COW.py:186:8 Call error [29]: `typing.Type[COWDictBase]` is not a function.",
    "message": " `typing.Type[COWDictBase]` is not a function.",
    "rule_id": "Call error [29]",
    "warning_line_no": 186,
    "warning_line": "    a = COWDictBase()",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n# These are the actual classes you use!\nclass COWDictBase(object, metaclass = COWDictMeta):\n    __count__ = 0\n\nclass COWSetBase(object, metaclass = COWSetMeta):\n    __count__ = 0\n\nif __name__ == \"__main__\":\n    import sys\n    COWDictBase.__warn__ = sys.stderr\n    a = COWDictBase()\n    print(\"a\", a)\n\n    a['a'] = 'a'\n    a['b'] = 'b'\n    a['dict'] = {}\n\n    b = a.copy()\n    print(\"b\", b)\n    b['c'] = 'b'\n\n    print()\n\n    print(\"a\", a)\n    for x in a.iteritems():\n        print(x)\n    print(\"--\")\n    print(\"b\", b)\n    for x in b.iteritems():\n        print(x)\n    print()\n\n    b['dict']['a'] = 'b'\n    b['a'] = 'c'\n\n    print(\"a\", a)\n    for x in a.iteritems():\n        print(x)\n    print(\"--\")\n    print(\"b\", b)\n    for x in b.iteritems():\n        print(x)\n    print()\n\n    try:\n        b['dict2']\n    except KeyError as e:\n        print(\"Okay!\")\n\n    a['set'] = COWSetBase()\n    a['set'].add(\"o1\")\n    a['set'].add(\"o1\")\n    a['set'].add(\"o2\")\n\n    print(\"a\", a)\n    for x in a['set'].itervalues():\n        print(x)\n    print(\"--\")\n    print(\"b\", b)\n    for x in b['set'].itervalues():\n        print(x)\n    print()\n\n    b['set'].add('o3')\n\n    print(\"a\", a)\n    for x in a['set'].itervalues():\n        print(x)\n    print(\"--\")\n    print(\"b\", b)\n    for x in b['set'].itervalues():\n        print(x)\n    print()\n\n    a['set2'] = set()\n    a['set2'].add(\"o1\")\n    a['set2'].add(\"o1\")\n    a['set2'].add(\"o2\")\n\n    print(\"a\", a)\n    for x in a.iteritems():\n        print(x)\n    print(\"--\")\n    print(\"b\", b)\n    for x in b.iteritems(readonly=True):\n        print(x)\n    print()\n\n    del b['b']\n    try:\n        print(b['b'])\n    except KeyError:\n        print(\"Yay! deleted key raises error\")\n\n    if 'b' in b:\n        print(\"Boo!\")\n    else:\n        print(\"Yay - has_key with delete works!\")\n\n    print(\"a\", a)\n    for x in a.iteritems():\n        print(x)\n    print(\"--\")\n    print(\"b\", b)\n    for x in b.iteritems(readonly=True):\n        print(x)\n    print()\n\n    b.__revertitem__('b')\n\n    print(\"a\", a)\n    for x in a.iteritems():\n        print(x)\n    print(\"--\")\n    print(\"b\", b)\n    for x in b.iteritems(readonly=True):\n        print(x)\n    print()\n\n    b.__revertitem__('dict')\n    print(\"a\", a)\n    for x in a.iteritems():\n        print(x)\n    print(\"--\")\n    print(\"b\", b)\n    for x in b.iteritems(readonly=True):\n        print(x)\n    print()\n",
        "source_code_len": 2354,
        "target_code": "\n\n# These are the actual classes you use!\nclass COWDictBase(metaclass=COWDictMeta):\n    __count__ = 0\n\n\nclass COWSetBase(metaclass=COWSetMeta):\n    __count__ = 0\n",
        "target_code_len": 162,
        "diff_format": "@@ -175,129 +187,9 @@\n \n+\n # These are the actual classes you use!\n-class COWDictBase(object, metaclass = COWDictMeta):\n+class COWDictBase(metaclass=COWDictMeta):\n     __count__ = 0\n \n-class COWSetBase(object, metaclass = COWSetMeta):\n+\n+class COWSetBase(metaclass=COWSetMeta):\n     __count__ = 0\n-\n-if __name__ == \"__main__\":\n-    import sys\n-    COWDictBase.__warn__ = sys.stderr\n-    a = COWDictBase()\n-    print(\"a\", a)\n-\n-    a['a'] = 'a'\n-    a['b'] = 'b'\n-    a['dict'] = {}\n-\n-    b = a.copy()\n-    print(\"b\", b)\n-    b['c'] = 'b'\n-\n-    print()\n-\n-    print(\"a\", a)\n-    for x in a.iteritems():\n-        print(x)\n-    print(\"--\")\n-    print(\"b\", b)\n-    for x in b.iteritems():\n-        print(x)\n-    print()\n-\n-    b['dict']['a'] = 'b'\n-    b['a'] = 'c'\n-\n-    print(\"a\", a)\n-    for x in a.iteritems():\n-        print(x)\n-    print(\"--\")\n-    print(\"b\", b)\n-    for x in b.iteritems():\n-        print(x)\n-    print()\n-\n-    try:\n-        b['dict2']\n-    except KeyError as e:\n-        print(\"Okay!\")\n-\n-    a['set'] = COWSetBase()\n-    a['set'].add(\"o1\")\n-    a['set'].add(\"o1\")\n-    a['set'].add(\"o2\")\n-\n-    print(\"a\", a)\n-    for x in a['set'].itervalues():\n-        print(x)\n-    print(\"--\")\n-    print(\"b\", b)\n-    for x in b['set'].itervalues():\n-        print(x)\n-    print()\n-\n-    b['set'].add('o3')\n-\n-    print(\"a\", a)\n-    for x in a['set'].itervalues():\n-        print(x)\n-    print(\"--\")\n-    print(\"b\", b)\n-    for x in b['set'].itervalues():\n-        print(x)\n-    print()\n-\n-    a['set2'] = set()\n-    a['set2'].add(\"o1\")\n-    a['set2'].add(\"o1\")\n-    a['set2'].add(\"o2\")\n-\n-    print(\"a\", a)\n-    for x in a.iteritems():\n-        print(x)\n-    print(\"--\")\n-    print(\"b\", b)\n-    for x in b.iteritems(readonly=True):\n-        print(x)\n-    print()\n-\n-    del b['b']\n-    try:\n-        print(b['b'])\n-    except KeyError:\n-        print(\"Yay! deleted key raises error\")\n-\n-    if 'b' in b:\n-        print(\"Boo!\")\n-    else:\n-        print(\"Yay - has_key with delete works!\")\n-\n-    print(\"a\", a)\n-    for x in a.iteritems():\n-        print(x)\n-    print(\"--\")\n-    print(\"b\", b)\n-    for x in b.iteritems(readonly=True):\n-        print(x)\n-    print()\n-\n-    b.__revertitem__('b')\n-\n-    print(\"a\", a)\n-    for x in a.iteritems():\n-        print(x)\n-    print(\"--\")\n-    print(\"b\", b)\n-    for x in b.iteritems(readonly=True):\n-        print(x)\n-    print()\n-\n-    b.__revertitem__('dict')\n-    print(\"a\", a)\n-    for x in a.iteritems():\n-        print(x)\n-    print(\"--\")\n-    print(\"b\", b)\n-    for x in b.iteritems(readonly=True):\n-        print(x)\n-    print()\n",
        "source_code_with_indent": "\n# These are the actual classes you use!\n<DED><DED>class COWDictBase(object, metaclass = COWDictMeta):\n    <IND>__count__ = 0\n\n<DED>class COWSetBase(object, metaclass = COWSetMeta):\n    <IND>__count__ = 0\n\n<DED>if __name__ == \"__main__\":\n    <IND>import sys\n    COWDictBase.__warn__ = sys.stderr\n    a = COWDictBase()\n    print(\"a\", a)\n\n    a['a'] = 'a'\n    a['b'] = 'b'\n    a['dict'] = {}\n\n    b = a.copy()\n    print(\"b\", b)\n    b['c'] = 'b'\n\n    print()\n\n    print(\"a\", a)\n    for x in a.iteritems():\n        <IND>print(x)\n    <DED>print(\"--\")\n    print(\"b\", b)\n    for x in b.iteritems():\n        <IND>print(x)\n    <DED>print()\n\n    b['dict']['a'] = 'b'\n    b['a'] = 'c'\n\n    print(\"a\", a)\n    for x in a.iteritems():\n        <IND>print(x)\n    <DED>print(\"--\")\n    print(\"b\", b)\n    for x in b.iteritems():\n        <IND>print(x)\n    <DED>print()\n\n    try:\n        <IND>b['dict2']\n    <DED>except KeyError as e:\n        <IND>print(\"Okay!\")\n\n    <DED>a['set'] = COWSetBase()\n    a['set'].add(\"o1\")\n    a['set'].add(\"o1\")\n    a['set'].add(\"o2\")\n\n    print(\"a\", a)\n    for x in a['set'].itervalues():\n        <IND>print(x)\n    <DED>print(\"--\")\n    print(\"b\", b)\n    for x in b['set'].itervalues():\n        <IND>print(x)\n    <DED>print()\n\n    b['set'].add('o3')\n\n    print(\"a\", a)\n    for x in a['set'].itervalues():\n        <IND>print(x)\n    <DED>print(\"--\")\n    print(\"b\", b)\n    for x in b['set'].itervalues():\n        <IND>print(x)\n    <DED>print()\n\n    a['set2'] = set()\n    a['set2'].add(\"o1\")\n    a['set2'].add(\"o1\")\n    a['set2'].add(\"o2\")\n\n    print(\"a\", a)\n    for x in a.iteritems():\n        <IND>print(x)\n    <DED>print(\"--\")\n    print(\"b\", b)\n    for x in b.iteritems(readonly=True):\n        <IND>print(x)\n    <DED>print()\n\n    del b['b']\n    try:\n        <IND>print(b['b'])\n    <DED>except KeyError:\n        <IND>print(\"Yay! deleted key raises error\")\n\n    <DED>if 'b' in b:\n        <IND>print(\"Boo!\")\n    <DED>else:\n        <IND>print(\"Yay - has_key with delete works!\")\n\n    <DED>print(\"a\", a)\n    for x in a.iteritems():\n        <IND>print(x)\n    <DED>print(\"--\")\n    print(\"b\", b)\n    for x in b.iteritems(readonly=True):\n        <IND>print(x)\n    <DED>print()\n\n    b.__revertitem__('b')\n\n    print(\"a\", a)\n    for x in a.iteritems():\n        <IND>print(x)\n    <DED>print(\"--\")\n    print(\"b\", b)\n    for x in b.iteritems(readonly=True):\n        <IND>print(x)\n    <DED>print()\n\n    b.__revertitem__('dict')\n    print(\"a\", a)\n    for x in a.iteritems():\n        <IND>print(x)\n    <DED>print(\"--\")\n    print(\"b\", b)\n    for x in b.iteritems(readonly=True):\n        <IND>print(x)\n    <DED>print()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n\n# These are the actual classes you use!\n<DED><DED>class COWDictBase(metaclass=COWDictMeta):\n    <IND>__count__ = 0\n\n\n<DED>class COWSetBase(metaclass=COWSetMeta):\n    <IND>__count__ = 0\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "openbmc/openbmc",
    "commit": "c9f7865a347606a64696048817b0f09d9c3fcd31",
    "filename": "poky/bitbake/lib/bb/COW.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/openbmc-openbmc/poky/bitbake/lib/bb/COW.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "poky/bitbake/lib/bb/COW.py:225:15 Call error [29]: `typing.Type[COWSetBase]` is not a function.",
    "message": " `typing.Type[COWSetBase]` is not a function.",
    "rule_id": "Call error [29]",
    "warning_line_no": 225,
    "warning_line": "    a['set'] = COWSetBase()",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n# These are the actual classes you use!\nclass COWDictBase(object, metaclass = COWDictMeta):\n    __count__ = 0\n\nclass COWSetBase(object, metaclass = COWSetMeta):\n    __count__ = 0\n\nif __name__ == \"__main__\":\n    import sys\n    COWDictBase.__warn__ = sys.stderr\n    a = COWDictBase()\n    print(\"a\", a)\n\n    a['a'] = 'a'\n    a['b'] = 'b'\n    a['dict'] = {}\n\n    b = a.copy()\n    print(\"b\", b)\n    b['c'] = 'b'\n\n    print()\n\n    print(\"a\", a)\n    for x in a.iteritems():\n        print(x)\n    print(\"--\")\n    print(\"b\", b)\n    for x in b.iteritems():\n        print(x)\n    print()\n\n    b['dict']['a'] = 'b'\n    b['a'] = 'c'\n\n    print(\"a\", a)\n    for x in a.iteritems():\n        print(x)\n    print(\"--\")\n    print(\"b\", b)\n    for x in b.iteritems():\n        print(x)\n    print()\n\n    try:\n        b['dict2']\n    except KeyError as e:\n        print(\"Okay!\")\n\n    a['set'] = COWSetBase()\n    a['set'].add(\"o1\")\n    a['set'].add(\"o1\")\n    a['set'].add(\"o2\")\n\n    print(\"a\", a)\n    for x in a['set'].itervalues():\n        print(x)\n    print(\"--\")\n    print(\"b\", b)\n    for x in b['set'].itervalues():\n        print(x)\n    print()\n\n    b['set'].add('o3')\n\n    print(\"a\", a)\n    for x in a['set'].itervalues():\n        print(x)\n    print(\"--\")\n    print(\"b\", b)\n    for x in b['set'].itervalues():\n        print(x)\n    print()\n\n    a['set2'] = set()\n    a['set2'].add(\"o1\")\n    a['set2'].add(\"o1\")\n    a['set2'].add(\"o2\")\n\n    print(\"a\", a)\n    for x in a.iteritems():\n        print(x)\n    print(\"--\")\n    print(\"b\", b)\n    for x in b.iteritems(readonly=True):\n        print(x)\n    print()\n\n    del b['b']\n    try:\n        print(b['b'])\n    except KeyError:\n        print(\"Yay! deleted key raises error\")\n\n    if 'b' in b:\n        print(\"Boo!\")\n    else:\n        print(\"Yay - has_key with delete works!\")\n\n    print(\"a\", a)\n    for x in a.iteritems():\n        print(x)\n    print(\"--\")\n    print(\"b\", b)\n    for x in b.iteritems(readonly=True):\n        print(x)\n    print()\n\n    b.__revertitem__('b')\n\n    print(\"a\", a)\n    for x in a.iteritems():\n        print(x)\n    print(\"--\")\n    print(\"b\", b)\n    for x in b.iteritems(readonly=True):\n        print(x)\n    print()\n\n    b.__revertitem__('dict')\n    print(\"a\", a)\n    for x in a.iteritems():\n        print(x)\n    print(\"--\")\n    print(\"b\", b)\n    for x in b.iteritems(readonly=True):\n        print(x)\n    print()\n",
        "source_code_len": 2354,
        "target_code": "\n\n# These are the actual classes you use!\nclass COWDictBase(metaclass=COWDictMeta):\n    __count__ = 0\n\n\nclass COWSetBase(metaclass=COWSetMeta):\n    __count__ = 0\n",
        "target_code_len": 162,
        "diff_format": "@@ -175,129 +187,9 @@\n \n+\n # These are the actual classes you use!\n-class COWDictBase(object, metaclass = COWDictMeta):\n+class COWDictBase(metaclass=COWDictMeta):\n     __count__ = 0\n \n-class COWSetBase(object, metaclass = COWSetMeta):\n+\n+class COWSetBase(metaclass=COWSetMeta):\n     __count__ = 0\n-\n-if __name__ == \"__main__\":\n-    import sys\n-    COWDictBase.__warn__ = sys.stderr\n-    a = COWDictBase()\n-    print(\"a\", a)\n-\n-    a['a'] = 'a'\n-    a['b'] = 'b'\n-    a['dict'] = {}\n-\n-    b = a.copy()\n-    print(\"b\", b)\n-    b['c'] = 'b'\n-\n-    print()\n-\n-    print(\"a\", a)\n-    for x in a.iteritems():\n-        print(x)\n-    print(\"--\")\n-    print(\"b\", b)\n-    for x in b.iteritems():\n-        print(x)\n-    print()\n-\n-    b['dict']['a'] = 'b'\n-    b['a'] = 'c'\n-\n-    print(\"a\", a)\n-    for x in a.iteritems():\n-        print(x)\n-    print(\"--\")\n-    print(\"b\", b)\n-    for x in b.iteritems():\n-        print(x)\n-    print()\n-\n-    try:\n-        b['dict2']\n-    except KeyError as e:\n-        print(\"Okay!\")\n-\n-    a['set'] = COWSetBase()\n-    a['set'].add(\"o1\")\n-    a['set'].add(\"o1\")\n-    a['set'].add(\"o2\")\n-\n-    print(\"a\", a)\n-    for x in a['set'].itervalues():\n-        print(x)\n-    print(\"--\")\n-    print(\"b\", b)\n-    for x in b['set'].itervalues():\n-        print(x)\n-    print()\n-\n-    b['set'].add('o3')\n-\n-    print(\"a\", a)\n-    for x in a['set'].itervalues():\n-        print(x)\n-    print(\"--\")\n-    print(\"b\", b)\n-    for x in b['set'].itervalues():\n-        print(x)\n-    print()\n-\n-    a['set2'] = set()\n-    a['set2'].add(\"o1\")\n-    a['set2'].add(\"o1\")\n-    a['set2'].add(\"o2\")\n-\n-    print(\"a\", a)\n-    for x in a.iteritems():\n-        print(x)\n-    print(\"--\")\n-    print(\"b\", b)\n-    for x in b.iteritems(readonly=True):\n-        print(x)\n-    print()\n-\n-    del b['b']\n-    try:\n-        print(b['b'])\n-    except KeyError:\n-        print(\"Yay! deleted key raises error\")\n-\n-    if 'b' in b:\n-        print(\"Boo!\")\n-    else:\n-        print(\"Yay - has_key with delete works!\")\n-\n-    print(\"a\", a)\n-    for x in a.iteritems():\n-        print(x)\n-    print(\"--\")\n-    print(\"b\", b)\n-    for x in b.iteritems(readonly=True):\n-        print(x)\n-    print()\n-\n-    b.__revertitem__('b')\n-\n-    print(\"a\", a)\n-    for x in a.iteritems():\n-        print(x)\n-    print(\"--\")\n-    print(\"b\", b)\n-    for x in b.iteritems(readonly=True):\n-        print(x)\n-    print()\n-\n-    b.__revertitem__('dict')\n-    print(\"a\", a)\n-    for x in a.iteritems():\n-        print(x)\n-    print(\"--\")\n-    print(\"b\", b)\n-    for x in b.iteritems(readonly=True):\n-        print(x)\n-    print()\n",
        "source_code_with_indent": "\n# These are the actual classes you use!\n<DED><DED>class COWDictBase(object, metaclass = COWDictMeta):\n    <IND>__count__ = 0\n\n<DED>class COWSetBase(object, metaclass = COWSetMeta):\n    <IND>__count__ = 0\n\n<DED>if __name__ == \"__main__\":\n    <IND>import sys\n    COWDictBase.__warn__ = sys.stderr\n    a = COWDictBase()\n    print(\"a\", a)\n\n    a['a'] = 'a'\n    a['b'] = 'b'\n    a['dict'] = {}\n\n    b = a.copy()\n    print(\"b\", b)\n    b['c'] = 'b'\n\n    print()\n\n    print(\"a\", a)\n    for x in a.iteritems():\n        <IND>print(x)\n    <DED>print(\"--\")\n    print(\"b\", b)\n    for x in b.iteritems():\n        <IND>print(x)\n    <DED>print()\n\n    b['dict']['a'] = 'b'\n    b['a'] = 'c'\n\n    print(\"a\", a)\n    for x in a.iteritems():\n        <IND>print(x)\n    <DED>print(\"--\")\n    print(\"b\", b)\n    for x in b.iteritems():\n        <IND>print(x)\n    <DED>print()\n\n    try:\n        <IND>b['dict2']\n    <DED>except KeyError as e:\n        <IND>print(\"Okay!\")\n\n    <DED>a['set'] = COWSetBase()\n    a['set'].add(\"o1\")\n    a['set'].add(\"o1\")\n    a['set'].add(\"o2\")\n\n    print(\"a\", a)\n    for x in a['set'].itervalues():\n        <IND>print(x)\n    <DED>print(\"--\")\n    print(\"b\", b)\n    for x in b['set'].itervalues():\n        <IND>print(x)\n    <DED>print()\n\n    b['set'].add('o3')\n\n    print(\"a\", a)\n    for x in a['set'].itervalues():\n        <IND>print(x)\n    <DED>print(\"--\")\n    print(\"b\", b)\n    for x in b['set'].itervalues():\n        <IND>print(x)\n    <DED>print()\n\n    a['set2'] = set()\n    a['set2'].add(\"o1\")\n    a['set2'].add(\"o1\")\n    a['set2'].add(\"o2\")\n\n    print(\"a\", a)\n    for x in a.iteritems():\n        <IND>print(x)\n    <DED>print(\"--\")\n    print(\"b\", b)\n    for x in b.iteritems(readonly=True):\n        <IND>print(x)\n    <DED>print()\n\n    del b['b']\n    try:\n        <IND>print(b['b'])\n    <DED>except KeyError:\n        <IND>print(\"Yay! deleted key raises error\")\n\n    <DED>if 'b' in b:\n        <IND>print(\"Boo!\")\n    <DED>else:\n        <IND>print(\"Yay - has_key with delete works!\")\n\n    <DED>print(\"a\", a)\n    for x in a.iteritems():\n        <IND>print(x)\n    <DED>print(\"--\")\n    print(\"b\", b)\n    for x in b.iteritems(readonly=True):\n        <IND>print(x)\n    <DED>print()\n\n    b.__revertitem__('b')\n\n    print(\"a\", a)\n    for x in a.iteritems():\n        <IND>print(x)\n    <DED>print(\"--\")\n    print(\"b\", b)\n    for x in b.iteritems(readonly=True):\n        <IND>print(x)\n    <DED>print()\n\n    b.__revertitem__('dict')\n    print(\"a\", a)\n    for x in a.iteritems():\n        <IND>print(x)\n    <DED>print(\"--\")\n    print(\"b\", b)\n    for x in b.iteritems(readonly=True):\n        <IND>print(x)\n    <DED>print()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n\n# These are the actual classes you use!\n<DED><DED>class COWDictBase(metaclass=COWDictMeta):\n    <IND>__count__ = 0\n\n\n<DED>class COWSetBase(metaclass=COWSetMeta):\n    <IND>__count__ = 0\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "openbmc/openbmc",
    "commit": "c9f7865a347606a64696048817b0f09d9c3fcd31",
    "filename": "poky/bitbake/lib/bb/namedtuple_with_abc.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/openbmc-openbmc/poky/bitbake/lib/bb/namedtuple_with_abc.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "poky/bitbake/lib/bb/namedtuple_with_abc.py:69:43 Unsupported operand [58]: `<` is not supported for operand types `typing.Union[int, str]` and `int`.",
    "message": " `<` is not supported for operand types `typing.Union[int, str]` and `int`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 69,
    "warning_line": "        _fields = abstractproperty()\"\"\" if version_info[0] < 3 else",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nexec(\n    # Python 2.x metaclass declaration syntax\n    \"\"\"class _NamedTupleABC(object):\n        '''The abstract base class + mix-in for named tuples.'''\n        __metaclass__ = _NamedTupleABCMeta\n        _fields = abstractproperty()\"\"\" if version_info[0] < 3 else\n    # Python 3.x metaclass declaration syntax\n    \"\"\"class _NamedTupleABC(metaclass=_NamedTupleABCMeta):\n        '''The abstract base class + mix-in for named tuples.'''\n        _fields = abstractproperty()\"\"\"\n)\n\n",
        "source_code_len": 479,
        "target_code": "\nclass _NamedTupleABC(metaclass=_NamedTupleABCMeta):\n    '''The abstract base class + mix-in for named tuples.'''\n    _fields = abstractproperty()\n\n",
        "target_code_len": 148,
        "diff_format": "@@ -63,13 +63,5 @@\n \n-exec(\n-    # Python 2.x metaclass declaration syntax\n-    \"\"\"class _NamedTupleABC(object):\n-        '''The abstract base class + mix-in for named tuples.'''\n-        __metaclass__ = _NamedTupleABCMeta\n-        _fields = abstractproperty()\"\"\" if version_info[0] < 3 else\n-    # Python 3.x metaclass declaration syntax\n-    \"\"\"class _NamedTupleABC(metaclass=_NamedTupleABCMeta):\n-        '''The abstract base class + mix-in for named tuples.'''\n-        _fields = abstractproperty()\"\"\"\n-)\n+class _NamedTupleABC(metaclass=_NamedTupleABCMeta):\n+    '''The abstract base class + mix-in for named tuples.'''\n+    _fields = abstractproperty()\n \n",
        "source_code_with_indent": "\n<DED><DED>exec(\n    # Python 2.x metaclass declaration syntax\n    \"\"\"class _NamedTupleABC(object):\n        '''The abstract base class + mix-in for named tuples.'''\n        __metaclass__ = _NamedTupleABCMeta\n        _fields = abstractproperty()\"\"\" if version_info[0] < 3 else\n    # Python 3.x metaclass declaration syntax\n    \"\"\"class _NamedTupleABC(metaclass=_NamedTupleABCMeta):\n        '''The abstract base class + mix-in for named tuples.'''\n        _fields = abstractproperty()\"\"\"\n)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED><DED>class _NamedTupleABC(metaclass=_NamedTupleABCMeta):\n    <IND>'''The abstract base class + mix-in for named tuples.'''\n    _fields = abstractproperty()\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "openbmc/openbmc",
    "commit": "c9f7865a347606a64696048817b0f09d9c3fcd31",
    "filename": "poky/bitbake/lib/bb/namedtuple_with_abc.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/openbmc-openbmc/poky/bitbake/lib/bb/namedtuple_with_abc.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "poky/bitbake/lib/bb/namedtuple_with_abc.py:77:18 Unbound name [10]: Name `_NamedTupleABC` is used but not defined in the current scope.",
    "message": " Name `_NamedTupleABC` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 77,
    "warning_line": "_namedtuple.abc = _NamedTupleABC",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nexec(\n    # Python 2.x metaclass declaration syntax\n    \"\"\"class _NamedTupleABC(object):\n        '''The abstract base class + mix-in for named tuples.'''\n        __metaclass__ = _NamedTupleABCMeta\n        _fields = abstractproperty()\"\"\" if version_info[0] < 3 else\n    # Python 3.x metaclass declaration syntax\n    \"\"\"class _NamedTupleABC(metaclass=_NamedTupleABCMeta):\n        '''The abstract base class + mix-in for named tuples.'''\n        _fields = abstractproperty()\"\"\"\n)\n\n",
        "source_code_len": 479,
        "target_code": "\nclass _NamedTupleABC(metaclass=_NamedTupleABCMeta):\n    '''The abstract base class + mix-in for named tuples.'''\n    _fields = abstractproperty()\n\n",
        "target_code_len": 148,
        "diff_format": "@@ -63,13 +63,5 @@\n \n-exec(\n-    # Python 2.x metaclass declaration syntax\n-    \"\"\"class _NamedTupleABC(object):\n-        '''The abstract base class + mix-in for named tuples.'''\n-        __metaclass__ = _NamedTupleABCMeta\n-        _fields = abstractproperty()\"\"\" if version_info[0] < 3 else\n-    # Python 3.x metaclass declaration syntax\n-    \"\"\"class _NamedTupleABC(metaclass=_NamedTupleABCMeta):\n-        '''The abstract base class + mix-in for named tuples.'''\n-        _fields = abstractproperty()\"\"\"\n-)\n+class _NamedTupleABC(metaclass=_NamedTupleABCMeta):\n+    '''The abstract base class + mix-in for named tuples.'''\n+    _fields = abstractproperty()\n \n",
        "source_code_with_indent": "\n<DED><DED>exec(\n    # Python 2.x metaclass declaration syntax\n    \"\"\"class _NamedTupleABC(object):\n        '''The abstract base class + mix-in for named tuples.'''\n        __metaclass__ = _NamedTupleABCMeta\n        _fields = abstractproperty()\"\"\" if version_info[0] < 3 else\n    # Python 3.x metaclass declaration syntax\n    \"\"\"class _NamedTupleABC(metaclass=_NamedTupleABCMeta):\n        '''The abstract base class + mix-in for named tuples.'''\n        _fields = abstractproperty()\"\"\"\n)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED><DED>class _NamedTupleABC(metaclass=_NamedTupleABCMeta):\n    <IND>'''The abstract base class + mix-in for named tuples.'''\n    _fields = abstractproperty()\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]