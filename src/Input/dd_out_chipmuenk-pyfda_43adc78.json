[
  {
    "project": "chipmuenk/pyfda",
    "commit": "43adc7823c29dc83ef5bffb205c666b5c2fc7d5d",
    "filename": "pyfda/fixpoint_widgets/fir_df_pyfixp.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/chipmuenk-pyfda/pyfda/fixpoint_widgets/fir_df_pyfixp.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pyfda/fixpoint_widgets/fir_df_pyfixp.py:127:15 Invalid type [31]: Expression `typing.Tuple(numpy.ndarray, numpy.ndarray)` is not a valid type.",
    "message": " Expression `typing.Tuple(numpy.ndarray, numpy.ndarray)` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 127,
    "warning_line": "            -> typing.Tuple(np.ndarray, np.ndarray):",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def lfilter_zi(self, b: iterable, x: iterable, zi: iterable = None)\\\n            -> typing.Tuple(np.ndarray, np.ndarray):\n        \"\"\"\n",
        "source_code_len": 138,
        "target_code": "    def lfilter_zi(self, b: iterable, x: iterable, zi: iterable = None)\\\n            -> typing.Tuple[np.ndarray, np.ndarray]:\n        \"\"\"\n",
        "target_code_len": 138,
        "diff_format": "@@ -126,3 +126,3 @@\n     def lfilter_zi(self, b: iterable, x: iterable, zi: iterable = None)\\\n-            -> typing.Tuple(np.ndarray, np.ndarray):\n+            -> typing.Tuple[np.ndarray, np.ndarray]:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "    <DED>def lfilter_zi(self, b: iterable, x: iterable, zi: iterable = None)            -> typing.Tuple(np.ndarray, np.ndarray):\n        <IND>",
        "target_code_with_indent": "    <DED>def lfilter_zi(self, b: iterable, x: iterable, zi: iterable = None)            -> typing.Tuple[np.ndarray, np.ndarray]:\n        <IND>"
      }
    ]
  }
]