[
  {
    "project": "ronf/asyncssh",
    "commit": "88dcdac875e186bcd47b9c15f66b2935317033c6",
    "filename": "asyncssh/crypto/umac.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ronf-asyncssh/asyncssh/crypto/umac.py",
    "file_hunks_size": 14,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "asyncssh/crypto/umac.py:120:34 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `ctypes.LibraryLoader.LoadLibrary` but got `typing.Optional[str]`.",
    "message": " Expected `str` for 1st positional only parameter to call `ctypes.LibraryLoader.LoadLibrary` but got `typing.Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 120,
    "warning_line": "_nettle = ctypes.cdll.LoadLibrary(_nettle_lib)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import sys\n\n",
        "source_code_len": 12,
        "target_code": "import sys\nfrom typing import TYPE_CHECKING, Callable, Optional\n\n\nif TYPE_CHECKING:\n    _ByteArray = ctypes.Array[ctypes.c_char]\n    _SetKey = Callable[[_ByteArray, bytes], None]\n    _SetNonce = Callable[[_ByteArray, ctypes.c_size_t, bytes], None]\n    _Update = Callable[[_ByteArray, ctypes.c_size_t, bytes], None]\n    _Digest = Callable[[_ByteArray, ctypes.c_size_t, _ByteArray], None]\n    _New = Callable[[bytes, Optional[bytes], Optional[bytes]], object]\n\n",
        "target_code_len": 459,
        "diff_format": "@@ -26,2 +26,12 @@\n import sys\n+from typing import TYPE_CHECKING, Callable, Optional\n+\n+\n+if TYPE_CHECKING:\n+    _ByteArray = ctypes.Array[ctypes.c_char]\n+    _SetKey = Callable[[_ByteArray, bytes], None]\n+    _SetNonce = Callable[[_ByteArray, ctypes.c_size_t, bytes], None]\n+    _Update = Callable[[_ByteArray, ctypes.c_size_t, bytes], None]\n+    _Digest = Callable[[_ByteArray, ctypes.c_size_t, _ByteArray], None]\n+    _New = Callable[[bytes, Optional[bytes], Optional[bytes]], object]\n \n",
        "source_code_with_indent": "import sys\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import sys\nfrom typing import TYPE_CHECKING, Callable, Optional\n\n\nif TYPE_CHECKING:\n    <IND>_ByteArray = ctypes.Array[ctypes.c_char]\n    _SetKey = Callable[[_ByteArray, bytes], None]\n    _SetNonce = Callable[[_ByteArray, ctypes.c_size_t, bytes], None]\n    _Update = Callable[[_ByteArray, ctypes.c_size_t, bytes], None]\n    _Digest = Callable[[_ByteArray, ctypes.c_size_t, _ByteArray], None]\n    _New = Callable[[bytes, Optional[bytes], Optional[bytes]], object]\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef __build_umac(size):\n    \"\"\"Function to build UMAC wrapper for a specific digest size\"\"\"\n",
        "source_code_len": 93,
        "target_code": "\ndef _build_umac(size: int) -> '_New':\n    \"\"\"Function to build UMAC wrapper for a specific digest size\"\"\"\n",
        "target_code_len": 107,
        "diff_format": "@@ -32,3 +42,3 @@\n \n-def __build_umac(size):\n+def _build_umac(size: int) -> '_New':\n     \"\"\"Function to build UMAC wrapper for a specific digest size\"\"\"\n",
        "source_code_with_indent": "\ndef __build_umac(size):\n    <IND>\"\"\"Function to build UMAC wrapper for a specific digest size\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\ndef _build_umac(size: int) -> '_New':\n    <IND>\"\"\"Function to build UMAC wrapper for a specific digest size\"\"\"\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    globals()[_name] = _UMAC.new\n\n",
        "source_code_len": 35,
        "target_code": "\n    return _UMAC.new\n\n",
        "target_code_len": 23,
        "diff_format": "@@ -113,3 +125,3 @@\n \n-    globals()[_name] = _UMAC.new\n+    return _UMAC.new\n \n",
        "source_code_with_indent": "\n    <DED><DED>globals()[_name] = _UMAC.new\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED><DED>return _UMAC.new\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n_nettle = ctypes.cdll.LoadLibrary(_nettle_lib)\n\nfor _size in (32, 64, 96, 128):\n    __build_umac(_size)\n",
        "source_code_len": 105,
        "target_code": "\nif _nettle_lib: # pragma: no branch\n    _nettle = ctypes.cdll.LoadLibrary(_nettle_lib)\n\n    umac32, umac64, umac96, umac128 = map(_build_umac, (32, 64, 96, 128))\n",
        "target_code_len": 163,
        "diff_format": "@@ -119,5 +131,5 @@\n \n-_nettle = ctypes.cdll.LoadLibrary(_nettle_lib)\n+if _nettle_lib: # pragma: no branch\n+    _nettle = ctypes.cdll.LoadLibrary(_nettle_lib)\n \n-for _size in (32, 64, 96, 128):\n-    __build_umac(_size)\n+    umac32, umac64, umac96, umac128 = map(_build_umac, (32, 64, 96, 128))\n",
        "source_code_with_indent": "\n_nettle = ctypes.cdll.LoadLibrary(_nettle_lib)\n\nfor _size in (32, 64, 96, 128):\n    <IND>__build_umac(_size)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nif _nettle_lib: # pragma: no branch\n    <IND>_nettle = ctypes.cdll.LoadLibrary(_nettle_lib)\n\n    umac32, umac64, umac96, umac128 = map(_build_umac, (32, 64, 96, 128))\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ronf/asyncssh",
    "commit": "88dcdac875e186bcd47b9c15f66b2935317033c6",
    "filename": "asyncssh/mac.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ronf-asyncssh/asyncssh/mac.py",
    "file_hunks_size": 20,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "asyncssh/mac.py:171:0 Incompatible variable type [9]: _mac_algs_list is declared to have type `typing.Tuple[typing.Tuple[bytes, int, int, bool, typing.Type[_NullMAC], typing.Tuple[], bool]]` but is used as type `typing.Tuple[typing.Union[typing.Tuple[bytes, int, int, bool, typing.Type[_HMAC], typing.Tuple[typing.Callable(md5)[[typing.Union[array.array[typing.Any], bytearray, bytes, memoryview, mmap.mmap], default], hashlib._Hash]], bool], typing.Tuple[bytes, int, int, bool, typing.Type[_HMAC], typing.Tuple[typing.Callable(md5)[[typing.Union[array.array[typing.Any], bytearray, bytes, memoryview, mmap.mmap], default], hashlib._Hash]], bool], typing.Tuple[bytes, int, int, bool, typing.Type[_HMAC], typing.Tuple[typing.Callable(sha1)[[typing.Union[array.array[typing.Any], bytearray, bytes, memoryview, mmap.mmap], default], hashlib._Hash]], bool], typing.Tuple[bytes, int, int, bool, typing.Type[_HMAC], typing.Tuple[typing.Callable(sha1)[[typing.Union[array.array[typing.Any], bytearray, bytes, memoryview, mmap.mmap], default], hashlib._Hash]], bool], typing.Tuple[bytes, int, int, bool, typing.Type[_HMAC], typing.Tuple[typing.Callable(sha256)[[typing.Union[array.array[typing.Any], bytearray, bytes, memoryview, mmap.mmap], default], hashlib._Hash]], bool], typing.Tuple[bytes, int, int, bool, typing.Type[_HMAC], typing.Tuple[typing.Callable(sha256)[[typing.Union[array.array[typing.Any], bytearray, bytes, memoryview, mmap.mmap], default], hashlib._Hash]], bool], typing.Tuple[bytes, int, int, bool, typing.Type[_HMAC], typing.Tuple[typing.Callable(sha512)[[typing.Union[array.array[typing.Any], bytearray, bytes, memoryview, mmap.mmap], default], hashlib._Hash]], bool], typing.Tuple[bytes, int, int, bool, typing.Type[_HMAC], typing.Tuple[typing.Callable(sha512)[[typing.Union[array.array[typing.Any], bytearray, bytes, memoryview, mmap.mmap], default], hashlib._Hash]], bool]], ...]`.",
    "message": " _mac_algs_list is declared to have type `typing.Tuple[typing.Tuple[bytes, int, int, bool, typing.Type[_NullMAC], typing.Tuple[], bool]]` but is used as type `typing.Tuple[typing.Union[typing.Tuple[bytes, int, int, bool, typing.Type[_HMAC], typing.Tuple[typing.Callable(md5)[[typing.Union[array.array[typing.Any], bytearray, bytes, memoryview, mmap.mmap], default], hashlib._Hash]], bool], typing.Tuple[bytes, int, int, bool, typing.Type[_HMAC], typing.Tuple[typing.Callable(md5)[[typing.Union[array.array[typing.Any], bytearray, bytes, memoryview, mmap.mmap], default], hashlib._Hash]], bool], typing.Tuple[bytes, int, int, bool, typing.Type[_HMAC], typing.Tuple[typing.Callable(sha1)[[typing.Union[array.array[typing.Any], bytearray, bytes, memoryview, mmap.mmap], default], hashlib._Hash]], bool], typing.Tuple[bytes, int, int, bool, typing.Type[_HMAC], typing.Tuple[typing.Callable(sha1)[[typing.Union[array.array[typing.Any], bytearray, bytes, memoryview, mmap.mmap], default], hashlib._Hash]], bool], typing.Tuple[bytes, int, int, bool, typing.Type[_HMAC], typing.Tuple[typing.Callable(sha256)[[typing.Union[array.array[typing.Any], bytearray, bytes, memoryview, mmap.mmap], default], hashlib._Hash]], bool], typing.Tuple[bytes, int, int, bool, typing.Type[_HMAC], typing.Tuple[typing.Callable(sha256)[[typing.Union[array.array[typing.Any], bytearray, bytes, memoryview, mmap.mmap], default], hashlib._Hash]], bool], typing.Tuple[bytes, int, int, bool, typing.Type[_HMAC], typing.Tuple[typing.Callable(sha512)[[typing.Union[array.array[typing.Any], bytearray, bytes, memoryview, mmap.mmap], default], hashlib._Hash]], bool], typing.Tuple[bytes, int, int, bool, typing.Type[_HMAC], typing.Tuple[typing.Callable(sha512)[[typing.Union[array.array[typing.Any], bytearray, bytes, memoryview, mmap.mmap], default], hashlib._Hash]], bool]], ...]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 171,
    "warning_line": "_mac_algs_list += (",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nimport hmac\nfrom hashlib import md5, sha1, sha224, sha256, sha384, sha512\n\n",
        "source_code_len": 76,
        "target_code": "\nfrom hashlib import md5, sha1, sha224, sha256, sha384, sha512\nimport hmac\nfrom typing import Dict, Callable, List, Tuple\n\n",
        "target_code_len": 123,
        "diff_format": "@@ -22,4 +22,5 @@\n \n+from hashlib import md5, sha1, sha224, sha256, sha384, sha512\n import hmac\n-from hashlib import md5, sha1, sha224, sha256, sha384, sha512\n+from typing import Dict, Callable, List, Tuple\n \n",
        "source_code_with_indent": "\nimport hmac\nfrom hashlib import md5, sha1, sha224, sha256, sha384, sha512\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom hashlib import md5, sha1, sha224, sha256, sha384, sha512\nimport hmac\nfrom typing import Dict, Callable, List, Tuple\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n_OPENSSH = b'@openssh.com'\n",
        "source_code_len": 28,
        "target_code": "\n_MACAlgsArgs = Tuple[bytes, int, int, bool, Callable, Tuple, bool]\n_MACHandler = Tuple[Callable, int, Tuple]\n_MACParams = Tuple[int, int, bool]\n\n\n_OPENSSH = b'@openssh.com'\n",
        "target_code_len": 174,
        "diff_format": "@@ -34,2 +35,7 @@\n \n+_MACAlgsArgs = Tuple[bytes, int, int, bool, Callable, Tuple, bool]\n+_MACHandler = Tuple[Callable, int, Tuple]\n+_MACParams = Tuple[int, int, bool]\n+\n+\n _OPENSSH = b'@openssh.com'\n",
        "source_code_with_indent": "\n<DED>_OPENSSH = b'@openssh.com'\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>_MACAlgsArgs = Tuple[bytes, int, int, bool, Callable, Tuple, bool]\n_MACHandler = Tuple[Callable, int, Tuple]\n_MACParams = Tuple[int, int, bool]\n\n\n_OPENSSH = b'@openssh.com'\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n_mac_algs_list = (\n    (b'',                         0,  0, False, _NullMAC, (),         True),\n",
        "source_code_len": 97,
        "target_code": "\n_mac_algs_list: Tuple[_MACAlgsArgs, ...] = (\n    (b'',                         0,  0, False, _NullMAC, (),         True),\n",
        "target_code_len": 123,
        "diff_format": "@@ -161,3 +169,3 @@\n \n-_mac_algs_list = (\n+_mac_algs_list: Tuple[_MACAlgsArgs, ...] = (\n     (b'',                         0,  0, False, _NullMAC, (),         True),\n",
        "source_code_with_indent": "\n<DED>_mac_algs_list = (\n    (b'',                         0,  0, False, _NullMAC, (),         True),\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>_mac_algs_list: Tuple[_MACAlgsArgs, ...] = (\n    (b'',                         0,  0, False, _NullMAC, (),         True),\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ronf/asyncssh",
    "commit": "88dcdac875e186bcd47b9c15f66b2935317033c6",
    "filename": "asyncssh/mac.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ronf-asyncssh/asyncssh/mac.py",
    "file_hunks_size": 20,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "asyncssh/mac.py:186:0 Incompatible variable type [9]: _mac_algs_list is declared to have type `typing.Tuple[typing.Tuple[bytes, int, int, bool, typing.Type[_NullMAC], typing.Tuple[], bool]]` but is used as type `typing.Tuple[typing.Union[typing.Tuple[bytes, int, int, bool, typing.Type[_HMAC], typing.Tuple[typing.Callable(md5)[[typing.Union[array.array[typing.Any], bytearray, bytes, memoryview, mmap.mmap], default], hashlib._Hash]], bool], typing.Tuple[bytes, int, int, bool, typing.Type[_HMAC], typing.Tuple[typing.Callable(md5)[[typing.Union[array.array[typing.Any], bytearray, bytes, memoryview, mmap.mmap], default], hashlib._Hash]], bool], typing.Tuple[bytes, int, int, bool, typing.Type[_HMAC], typing.Tuple[typing.Callable(sha1)[[typing.Union[array.array[typing.Any], bytearray, bytes, memoryview, mmap.mmap], default], hashlib._Hash]], bool], typing.Tuple[bytes, int, int, bool, typing.Type[_HMAC], typing.Tuple[typing.Callable(sha1)[[typing.Union[array.array[typing.Any], bytearray, bytes, memoryview, mmap.mmap], default], hashlib._Hash]], bool], typing.Tuple[bytes, int, int, bool, typing.Type[_HMAC], typing.Tuple[typing.Callable(sha256)[[typing.Union[array.array[typing.Any], bytearray, bytes, memoryview, mmap.mmap], default], hashlib._Hash]], bool], typing.Tuple[bytes, int, int, bool, typing.Type[_HMAC], typing.Tuple[typing.Callable(sha256)[[typing.Union[array.array[typing.Any], bytearray, bytes, memoryview, mmap.mmap], default], hashlib._Hash]], bool], typing.Tuple[bytes, int, int, bool, typing.Type[_HMAC], typing.Tuple[typing.Callable(sha512)[[typing.Union[array.array[typing.Any], bytearray, bytes, memoryview, mmap.mmap], default], hashlib._Hash]], bool], typing.Tuple[bytes, int, int, bool, typing.Type[_HMAC], typing.Tuple[typing.Callable(sha512)[[typing.Union[array.array[typing.Any], bytearray, bytes, memoryview, mmap.mmap], default], hashlib._Hash]], bool], typing.Tuple[bytes, int, int, bool, typing.Type[_HMAC], typing.Tuple[typing.Callable(sha224)[[typing.Union[array.array[typing.Any], bytearray, bytes, memoryview, mmap.mmap], default], hashlib._Hash]], bool], typing.Tuple[bytes, int, int, bool, typing.Type[_HMAC], typing.Tuple[typing.Callable(sha256)[[typing.Union[array.array[typing.Any], bytearray, bytes, memoryview, mmap.mmap], default], hashlib._Hash]], bool], typing.Tuple[bytes, int, int, bool, typing.Type[_HMAC], typing.Tuple[typing.Callable(sha256)[[typing.Union[array.array[typing.Any], bytearray, bytes, memoryview, mmap.mmap], default], hashlib._Hash]], bool], typing.Tuple[bytes, int, int, bool, typing.Type[_HMAC], typing.Tuple[typing.Callable(sha384)[[typing.Union[array.array[typing.Any], bytearray, bytes, memoryview, mmap.mmap], default], hashlib._Hash]], bool], typing.Tuple[bytes, int, int, bool, typing.Type[_HMAC], typing.Tuple[typing.Callable(sha512)[[typing.Union[array.array[typing.Any], bytearray, bytes, memoryview, mmap.mmap], default], hashlib._Hash]], bool]], ...]`.",
    "message": " _mac_algs_list is declared to have type `typing.Tuple[typing.Tuple[bytes, int, int, bool, typing.Type[_NullMAC], typing.Tuple[], bool]]` but is used as type `typing.Tuple[typing.Union[typing.Tuple[bytes, int, int, bool, typing.Type[_HMAC], typing.Tuple[typing.Callable(md5)[[typing.Union[array.array[typing.Any], bytearray, bytes, memoryview, mmap.mmap], default], hashlib._Hash]], bool], typing.Tuple[bytes, int, int, bool, typing.Type[_HMAC], typing.Tuple[typing.Callable(md5)[[typing.Union[array.array[typing.Any], bytearray, bytes, memoryview, mmap.mmap], default], hashlib._Hash]], bool], typing.Tuple[bytes, int, int, bool, typing.Type[_HMAC], typing.Tuple[typing.Callable(sha1)[[typing.Union[array.array[typing.Any], bytearray, bytes, memoryview, mmap.mmap], default], hashlib._Hash]], bool], typing.Tuple[bytes, int, int, bool, typing.Type[_HMAC], typing.Tuple[typing.Callable(sha1)[[typing.Union[array.array[typing.Any], bytearray, bytes, memoryview, mmap.mmap], default], hashlib._Hash]], bool], typing.Tuple[bytes, int, int, bool, typing.Type[_HMAC], typing.Tuple[typing.Callable(sha256)[[typing.Union[array.array[typing.Any], bytearray, bytes, memoryview, mmap.mmap], default], hashlib._Hash]], bool], typing.Tuple[bytes, int, int, bool, typing.Type[_HMAC], typing.Tuple[typing.Callable(sha256)[[typing.Union[array.array[typing.Any], bytearray, bytes, memoryview, mmap.mmap], default], hashlib._Hash]], bool], typing.Tuple[bytes, int, int, bool, typing.Type[_HMAC], typing.Tuple[typing.Callable(sha512)[[typing.Union[array.array[typing.Any], bytearray, bytes, memoryview, mmap.mmap], default], hashlib._Hash]], bool], typing.Tuple[bytes, int, int, bool, typing.Type[_HMAC], typing.Tuple[typing.Callable(sha512)[[typing.Union[array.array[typing.Any], bytearray, bytes, memoryview, mmap.mmap], default], hashlib._Hash]], bool], typing.Tuple[bytes, int, int, bool, typing.Type[_HMAC], typing.Tuple[typing.Callable(sha224)[[typing.Union[array.array[typing.Any], bytearray, bytes, memoryview, mmap.mmap], default], hashlib._Hash]], bool], typing.Tuple[bytes, int, int, bool, typing.Type[_HMAC], typing.Tuple[typing.Callable(sha256)[[typing.Union[array.array[typing.Any], bytearray, bytes, memoryview, mmap.mmap], default], hashlib._Hash]], bool], typing.Tuple[bytes, int, int, bool, typing.Type[_HMAC], typing.Tuple[typing.Callable(sha256)[[typing.Union[array.array[typing.Any], bytearray, bytes, memoryview, mmap.mmap], default], hashlib._Hash]], bool], typing.Tuple[bytes, int, int, bool, typing.Type[_HMAC], typing.Tuple[typing.Callable(sha384)[[typing.Union[array.array[typing.Any], bytearray, bytes, memoryview, mmap.mmap], default], hashlib._Hash]], bool], typing.Tuple[bytes, int, int, bool, typing.Type[_HMAC], typing.Tuple[typing.Callable(sha512)[[typing.Union[array.array[typing.Any], bytearray, bytes, memoryview, mmap.mmap], default], hashlib._Hash]], bool]], ...]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 186,
    "warning_line": "_mac_algs_list += (",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nimport hmac\nfrom hashlib import md5, sha1, sha224, sha256, sha384, sha512\n\n",
        "source_code_len": 76,
        "target_code": "\nfrom hashlib import md5, sha1, sha224, sha256, sha384, sha512\nimport hmac\nfrom typing import Dict, Callable, List, Tuple\n\n",
        "target_code_len": 123,
        "diff_format": "@@ -22,4 +22,5 @@\n \n+from hashlib import md5, sha1, sha224, sha256, sha384, sha512\n import hmac\n-from hashlib import md5, sha1, sha224, sha256, sha384, sha512\n+from typing import Dict, Callable, List, Tuple\n \n",
        "source_code_with_indent": "\nimport hmac\nfrom hashlib import md5, sha1, sha224, sha256, sha384, sha512\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom hashlib import md5, sha1, sha224, sha256, sha384, sha512\nimport hmac\nfrom typing import Dict, Callable, List, Tuple\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n_OPENSSH = b'@openssh.com'\n",
        "source_code_len": 28,
        "target_code": "\n_MACAlgsArgs = Tuple[bytes, int, int, bool, Callable, Tuple, bool]\n_MACHandler = Tuple[Callable, int, Tuple]\n_MACParams = Tuple[int, int, bool]\n\n\n_OPENSSH = b'@openssh.com'\n",
        "target_code_len": 174,
        "diff_format": "@@ -34,2 +35,7 @@\n \n+_MACAlgsArgs = Tuple[bytes, int, int, bool, Callable, Tuple, bool]\n+_MACHandler = Tuple[Callable, int, Tuple]\n+_MACParams = Tuple[int, int, bool]\n+\n+\n _OPENSSH = b'@openssh.com'\n",
        "source_code_with_indent": "\n<DED>_OPENSSH = b'@openssh.com'\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>_MACAlgsArgs = Tuple[bytes, int, int, bool, Callable, Tuple, bool]\n_MACHandler = Tuple[Callable, int, Tuple]\n_MACParams = Tuple[int, int, bool]\n\n\n_OPENSSH = b'@openssh.com'\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n_mac_algs_list = (\n    (b'',                         0,  0, False, _NullMAC, (),         True),\n",
        "source_code_len": 97,
        "target_code": "\n_mac_algs_list: Tuple[_MACAlgsArgs, ...] = (\n    (b'',                         0,  0, False, _NullMAC, (),         True),\n",
        "target_code_len": 123,
        "diff_format": "@@ -161,3 +169,3 @@\n \n-_mac_algs_list = (\n+_mac_algs_list: Tuple[_MACAlgsArgs, ...] = (\n     (b'',                         0,  0, False, _NullMAC, (),         True),\n",
        "source_code_with_indent": "\n<DED>_mac_algs_list = (\n    (b'',                         0,  0, False, _NullMAC, (),         True),\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>_mac_algs_list: Tuple[_MACAlgsArgs, ...] = (\n    (b'',                         0,  0, False, _NullMAC, (),         True),\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]