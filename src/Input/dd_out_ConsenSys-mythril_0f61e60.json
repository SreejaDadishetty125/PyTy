[
  {
    "project": "ConsenSys/mythril",
    "commit": "0f61e60a09afc9d30cec6df5f867af4f7ff2ed89",
    "filename": "mythril/laser/ethereum/natives.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ConsenSys-mythril/mythril/laser/ethereum/natives.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mythril/laser/ethereum/natives.py:62:8 Incompatible variable type [9]: data is declared to have type `List[int]` but is used as type `bytearray`.",
    "message": " data is declared to have type `List[int]` but is used as type `bytearray`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 62,
    "warning_line": "        data = bytearray(data)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    try:\n        data = bytearray(data)\n        v = extract32(data, 32)\n        r = extract32(data, 64)\n        s = extract32(data, 96)\n    except TypeError:\n",
        "source_code_len": 158,
        "target_code": "    try:\n        byte_data = bytearray(data)\n        v = extract32(byte_data, 32)\n        r = extract32(byte_data, 64)\n        s = extract32(byte_data, 96)\n    except TypeError:\n",
        "target_code_len": 178,
        "diff_format": "@@ -61,6 +61,6 @@\n     try:\n-        data = bytearray(data)\n-        v = extract32(data, 32)\n-        r = extract32(data, 64)\n-        s = extract32(data, 96)\n+        byte_data = bytearray(data)\n+        v = extract32(byte_data, 32)\n+        r = extract32(byte_data, 64)\n+        s = extract32(byte_data, 96)\n     except TypeError:\n",
        "source_code_with_indent": "    try:\n        <IND>data = bytearray(data)\n        v = extract32(data, 32)\n        r = extract32(data, 64)\n        s = extract32(data, 96)\n    <DED>except TypeError:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    try:\n        <IND>byte_data = bytearray(data)\n        v = extract32(byte_data, 32)\n        r = extract32(byte_data, 64)\n        s = extract32(byte_data, 96)\n    <DED>except TypeError:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ConsenSys/mythril",
    "commit": "0f61e60a09afc9d30cec6df5f867af4f7ff2ed89",
    "filename": "mythril/laser/ethereum/natives.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ConsenSys-mythril/mythril/laser/ethereum/natives.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mythril/laser/ethereum/natives.py:63:22 Incompatible parameter type [6]: Expected `bytearray` for 1st positional only parameter to call `extract32` but got `List[int]`.",
    "message": " Expected `bytearray` for 1st positional only parameter to call `extract32` but got `List[int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 63,
    "warning_line": "        v = extract32(data, 32)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    try:\n        data = bytearray(data)\n        v = extract32(data, 32)\n        r = extract32(data, 64)\n        s = extract32(data, 96)\n    except TypeError:\n",
        "source_code_len": 158,
        "target_code": "    try:\n        byte_data = bytearray(data)\n        v = extract32(byte_data, 32)\n        r = extract32(byte_data, 64)\n        s = extract32(byte_data, 96)\n    except TypeError:\n",
        "target_code_len": 178,
        "diff_format": "@@ -61,6 +61,6 @@\n     try:\n-        data = bytearray(data)\n-        v = extract32(data, 32)\n-        r = extract32(data, 64)\n-        s = extract32(data, 96)\n+        byte_data = bytearray(data)\n+        v = extract32(byte_data, 32)\n+        r = extract32(byte_data, 64)\n+        s = extract32(byte_data, 96)\n     except TypeError:\n",
        "source_code_with_indent": "    try:\n        <IND>data = bytearray(data)\n        v = extract32(data, 32)\n        r = extract32(data, 64)\n        s = extract32(data, 96)\n    <DED>except TypeError:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    try:\n        <IND>byte_data = bytearray(data)\n        v = extract32(byte_data, 32)\n        r = extract32(byte_data, 64)\n        s = extract32(byte_data, 96)\n    <DED>except TypeError:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ConsenSys/mythril",
    "commit": "0f61e60a09afc9d30cec6df5f867af4f7ff2ed89",
    "filename": "mythril/laser/ethereum/natives.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ConsenSys-mythril/mythril/laser/ethereum/natives.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mythril/laser/ethereum/natives.py:64:22 Incompatible parameter type [6]: Expected `bytearray` for 1st positional only parameter to call `extract32` but got `List[int]`.",
    "message": " Expected `bytearray` for 1st positional only parameter to call `extract32` but got `List[int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 64,
    "warning_line": "        r = extract32(data, 64)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    try:\n        data = bytearray(data)\n        v = extract32(data, 32)\n        r = extract32(data, 64)\n        s = extract32(data, 96)\n    except TypeError:\n",
        "source_code_len": 158,
        "target_code": "    try:\n        byte_data = bytearray(data)\n        v = extract32(byte_data, 32)\n        r = extract32(byte_data, 64)\n        s = extract32(byte_data, 96)\n    except TypeError:\n",
        "target_code_len": 178,
        "diff_format": "@@ -61,6 +61,6 @@\n     try:\n-        data = bytearray(data)\n-        v = extract32(data, 32)\n-        r = extract32(data, 64)\n-        s = extract32(data, 96)\n+        byte_data = bytearray(data)\n+        v = extract32(byte_data, 32)\n+        r = extract32(byte_data, 64)\n+        s = extract32(byte_data, 96)\n     except TypeError:\n",
        "source_code_with_indent": "    try:\n        <IND>data = bytearray(data)\n        v = extract32(data, 32)\n        r = extract32(data, 64)\n        s = extract32(data, 96)\n    <DED>except TypeError:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    try:\n        <IND>byte_data = bytearray(data)\n        v = extract32(byte_data, 32)\n        r = extract32(byte_data, 64)\n        s = extract32(byte_data, 96)\n    <DED>except TypeError:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ConsenSys/mythril",
    "commit": "0f61e60a09afc9d30cec6df5f867af4f7ff2ed89",
    "filename": "mythril/laser/ethereum/natives.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ConsenSys-mythril/mythril/laser/ethereum/natives.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mythril/laser/ethereum/natives.py:65:22 Incompatible parameter type [6]: Expected `bytearray` for 1st positional only parameter to call `extract32` but got `List[int]`.",
    "message": " Expected `bytearray` for 1st positional only parameter to call `extract32` but got `List[int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 65,
    "warning_line": "        s = extract32(data, 96)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    try:\n        data = bytearray(data)\n        v = extract32(data, 32)\n        r = extract32(data, 64)\n        s = extract32(data, 96)\n    except TypeError:\n",
        "source_code_len": 158,
        "target_code": "    try:\n        byte_data = bytearray(data)\n        v = extract32(byte_data, 32)\n        r = extract32(byte_data, 64)\n        s = extract32(byte_data, 96)\n    except TypeError:\n",
        "target_code_len": 178,
        "diff_format": "@@ -61,6 +61,6 @@\n     try:\n-        data = bytearray(data)\n-        v = extract32(data, 32)\n-        r = extract32(data, 64)\n-        s = extract32(data, 96)\n+        byte_data = bytearray(data)\n+        v = extract32(byte_data, 32)\n+        r = extract32(byte_data, 64)\n+        s = extract32(byte_data, 96)\n     except TypeError:\n",
        "source_code_with_indent": "    try:\n        <IND>data = bytearray(data)\n        v = extract32(data, 32)\n        r = extract32(data, 64)\n        s = extract32(data, 96)\n    <DED>except TypeError:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    try:\n        <IND>byte_data = bytearray(data)\n        v = extract32(byte_data, 32)\n        r = extract32(byte_data, 64)\n        s = extract32(byte_data, 96)\n    <DED>except TypeError:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ConsenSys/mythril",
    "commit": "0f61e60a09afc9d30cec6df5f867af4f7ff2ed89",
    "filename": "mythril/laser/ethereum/natives.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ConsenSys-mythril/mythril/laser/ethereum/natives.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mythril/laser/ethereum/natives.py:75:73 Unsupported operand [58]: `+` is not supported for operand types `str` and `Exception`.",
    "message": " `+` is not supported for operand types `str` and `Exception`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 75,
    "warning_line": "        log.debug(\"An error has occured while extracting public key: \" + e)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    except Exception as e:\n        log.debug(\"An error has occured while extracting public key: \" + e)\n        return []\n    o = [0] * 12 + [x for x in sha3(pub)[-20:]]\n    return o\n\n",
        "source_code_len": 183,
        "target_code": "    except Exception as e:\n        log.debug(\"An error has occured while extracting public key: \" + str(e))\n        return []\n    o = [0] * 12 + [x for x in sha3(pub)[-20:]]\n    return list(bytearray(o))\n\n",
        "target_code_len": 205,
        "diff_format": "@@ -74,6 +74,6 @@\n     except Exception as e:\n-        log.debug(\"An error has occured while extracting public key: \" + e)\n+        log.debug(\"An error has occured while extracting public key: \" + str(e))\n         return []\n     o = [0] * 12 + [x for x in sha3(pub)[-20:]]\n-    return o\n+    return list(bytearray(o))\n \n",
        "source_code_with_indent": "    <DED>except Exception as e:\n        <IND>log.debug(\"An error has occured while extracting public key: \" + e)\n        return []\n    <DED>o = [0] * 12 + [x for x in sha3(pub)[-20:]]\n    return o\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>except Exception as e:\n        <IND>log.debug(\"An error has occured while extracting public key: \" + str(e))\n        return []\n    <DED>o = [0] * 12 + [x for x in sha3(pub)[-20:]]\n    return list(bytearray(o))\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ConsenSys/mythril",
    "commit": "0f61e60a09afc9d30cec6df5f867af4f7ff2ed89",
    "filename": "mythril/laser/ethereum/natives.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ConsenSys-mythril/mythril/laser/ethereum/natives.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mythril/laser/ethereum/natives.py:88:8 Incompatible variable type [9]: data is declared to have type `List[int]` but is used as type `bytes`.",
    "message": " data is declared to have type `List[int]` but is used as type `bytes`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 88,
    "warning_line": "        data = bytes(data)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    try:\n        data = bytes(data)\n    except TypeError:\n        raise NativeContractException\n    return hashlib.sha256(data).digest()\n\n\ndef ripemd160(data: List[int]) -> bytes:\n    \"\"\"\n",
        "source_code_len": 188,
        "target_code": "    try:\n        byte_data = bytes(data)\n    except TypeError:\n        raise NativeContractException\n    return list(bytearray(hashlib.sha256(byte_data).digest()))\n\n\ndef ripemd160(data: List[int]) -> List[int]:\n    \"\"\"\n",
        "target_code_len": 219,
        "diff_format": "@@ -87,9 +87,9 @@\n     try:\n-        data = bytes(data)\n+        byte_data = bytes(data)\n     except TypeError:\n         raise NativeContractException\n-    return hashlib.sha256(data).digest()\n+    return list(bytearray(hashlib.sha256(byte_data).digest()))\n \n \n-def ripemd160(data: List[int]) -> bytes:\n+def ripemd160(data: List[int]) -> List[int]:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "    try:\n        <IND>data = bytes(data)\n    <DED>except TypeError:\n        <IND>raise NativeContractException\n    <DED>return hashlib.sha256(data).digest()\n\n\n<DED>def ripemd160(data: List[int]) -> bytes:\n    <IND>",
        "target_code_with_indent": "    try:\n        <IND>byte_data = bytes(data)\n    <DED>except TypeError:\n        <IND>raise NativeContractException\n    <DED>return list(bytearray(hashlib.sha256(byte_data).digest()))\n\n\n<DED>def ripemd160(data: List[int]) -> List[int]:\n    <IND>"
      }
    ]
  },
  {
    "project": "ConsenSys/mythril",
    "commit": "0f61e60a09afc9d30cec6df5f867af4f7ff2ed89",
    "filename": "mythril/laser/ethereum/natives.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ConsenSys-mythril/mythril/laser/ethereum/natives.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mythril/laser/ethereum/natives.py:91:4 Incompatible return type [7]: Expected `List[int]` but got `bytes`.",
    "message": " Expected `List[int]` but got `bytes`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 91,
    "warning_line": "    return hashlib.sha256(data).digest()",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    try:\n        data = bytes(data)\n    except TypeError:\n        raise NativeContractException\n    return hashlib.sha256(data).digest()\n\n\ndef ripemd160(data: List[int]) -> bytes:\n    \"\"\"\n",
        "source_code_len": 188,
        "target_code": "    try:\n        byte_data = bytes(data)\n    except TypeError:\n        raise NativeContractException\n    return list(bytearray(hashlib.sha256(byte_data).digest()))\n\n\ndef ripemd160(data: List[int]) -> List[int]:\n    \"\"\"\n",
        "target_code_len": 219,
        "diff_format": "@@ -87,9 +87,9 @@\n     try:\n-        data = bytes(data)\n+        byte_data = bytes(data)\n     except TypeError:\n         raise NativeContractException\n-    return hashlib.sha256(data).digest()\n+    return list(bytearray(hashlib.sha256(byte_data).digest()))\n \n \n-def ripemd160(data: List[int]) -> bytes:\n+def ripemd160(data: List[int]) -> List[int]:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "    try:\n        <IND>data = bytes(data)\n    <DED>except TypeError:\n        <IND>raise NativeContractException\n    <DED>return hashlib.sha256(data).digest()\n\n\n<DED>def ripemd160(data: List[int]) -> bytes:\n    <IND>",
        "target_code_with_indent": "    try:\n        <IND>byte_data = bytes(data)\n    <DED>except TypeError:\n        <IND>raise NativeContractException\n    <DED>return list(bytearray(hashlib.sha256(byte_data).digest()))\n\n\n<DED>def ripemd160(data: List[int]) -> List[int]:\n    <IND>"
      }
    ]
  },
  {
    "project": "ConsenSys/mythril",
    "commit": "0f61e60a09afc9d30cec6df5f867af4f7ff2ed89",
    "filename": "mythril/laser/ethereum/natives.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ConsenSys-mythril/mythril/laser/ethereum/natives.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mythril/laser/ethereum/natives.py:91:26 Incompatible parameter type [6]: Expected `Union[array.array[typing.Any], bytearray, bytes, memoryview, mmap.mmap]` for 1st positional only parameter to call `hashlib.sha256` but got `List[int]`.",
    "message": " Expected `Union[array.array[typing.Any], bytearray, bytes, memoryview, mmap.mmap]` for 1st positional only parameter to call `hashlib.sha256` but got `List[int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 91,
    "warning_line": "    return hashlib.sha256(data).digest()",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    try:\n        data = bytes(data)\n    except TypeError:\n        raise NativeContractException\n    return hashlib.sha256(data).digest()\n\n\ndef ripemd160(data: List[int]) -> bytes:\n    \"\"\"\n",
        "source_code_len": 188,
        "target_code": "    try:\n        byte_data = bytes(data)\n    except TypeError:\n        raise NativeContractException\n    return list(bytearray(hashlib.sha256(byte_data).digest()))\n\n\ndef ripemd160(data: List[int]) -> List[int]:\n    \"\"\"\n",
        "target_code_len": 219,
        "diff_format": "@@ -87,9 +87,9 @@\n     try:\n-        data = bytes(data)\n+        byte_data = bytes(data)\n     except TypeError:\n         raise NativeContractException\n-    return hashlib.sha256(data).digest()\n+    return list(bytearray(hashlib.sha256(byte_data).digest()))\n \n \n-def ripemd160(data: List[int]) -> bytes:\n+def ripemd160(data: List[int]) -> List[int]:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "    try:\n        <IND>data = bytes(data)\n    <DED>except TypeError:\n        <IND>raise NativeContractException\n    <DED>return hashlib.sha256(data).digest()\n\n\n<DED>def ripemd160(data: List[int]) -> bytes:\n    <IND>",
        "target_code_with_indent": "    try:\n        <IND>byte_data = bytes(data)\n    <DED>except TypeError:\n        <IND>raise NativeContractException\n    <DED>return list(bytearray(hashlib.sha256(byte_data).digest()))\n\n\n<DED>def ripemd160(data: List[int]) -> List[int]:\n    <IND>"
      }
    ]
  },
  {
    "project": "ConsenSys/mythril",
    "commit": "0f61e60a09afc9d30cec6df5f867af4f7ff2ed89",
    "filename": "mythril/laser/ethereum/natives.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ConsenSys-mythril/mythril/laser/ethereum/natives.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mythril/laser/ethereum/natives.py:101:8 Incompatible variable type [9]: data is declared to have type `List[int]` but is used as type `bytes`.",
    "message": " data is declared to have type `List[int]` but is used as type `bytes`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 101,
    "warning_line": "        data = bytes(data)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    try:\n        data = bytes(data)\n    except TypeError:\n        raise NativeContractException\n    return hashlib.sha256(data).digest()\n\n\ndef ripemd160(data: List[int]) -> bytes:\n    \"\"\"\n",
        "source_code_len": 188,
        "target_code": "    try:\n        byte_data = bytes(data)\n    except TypeError:\n        raise NativeContractException\n    return list(bytearray(hashlib.sha256(byte_data).digest()))\n\n\ndef ripemd160(data: List[int]) -> List[int]:\n    \"\"\"\n",
        "target_code_len": 219,
        "diff_format": "@@ -87,9 +87,9 @@\n     try:\n-        data = bytes(data)\n+        byte_data = bytes(data)\n     except TypeError:\n         raise NativeContractException\n-    return hashlib.sha256(data).digest()\n+    return list(bytearray(hashlib.sha256(byte_data).digest()))\n \n \n-def ripemd160(data: List[int]) -> bytes:\n+def ripemd160(data: List[int]) -> List[int]:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "    try:\n        <IND>data = bytes(data)\n    <DED>except TypeError:\n        <IND>raise NativeContractException\n    <DED>return hashlib.sha256(data).digest()\n\n\n<DED>def ripemd160(data: List[int]) -> bytes:\n    <IND>",
        "target_code_with_indent": "    try:\n        <IND>byte_data = bytes(data)\n    <DED>except TypeError:\n        <IND>raise NativeContractException\n    <DED>return list(bytearray(hashlib.sha256(byte_data).digest()))\n\n\n<DED>def ripemd160(data: List[int]) -> List[int]:\n    <IND>"
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    try:\n        data = bytes(data)\n    except TypeError:\n        raise NativeContractException\n    digest = hashlib.new(\"ripemd160\", data).digest()\n    padded = 12 * [0] + list(digest)\n    return bytes(padded)\n\n",
        "source_code_len": 212,
        "target_code": "    try:\n        bytes_data = bytes(data)\n    except TypeError:\n        raise NativeContractException\n    digest = hashlib.new(\"ripemd160\", bytes_data).digest()\n    padded = 12 * [0] + list(digest)\n    return list(bytearray(bytes(padded)))\n\n",
        "target_code_len": 241,
        "diff_format": "@@ -100,8 +100,8 @@\n     try:\n-        data = bytes(data)\n+        bytes_data = bytes(data)\n     except TypeError:\n         raise NativeContractException\n-    digest = hashlib.new(\"ripemd160\", data).digest()\n+    digest = hashlib.new(\"ripemd160\", bytes_data).digest()\n     padded = 12 * [0] + list(digest)\n-    return bytes(padded)\n+    return list(bytearray(bytes(padded)))\n \n",
        "source_code_with_indent": "    try:\n        <IND>data = bytes(data)\n    <DED>except TypeError:\n        <IND>raise NativeContractException\n    <DED>digest = hashlib.new(\"ripemd160\", data).digest()\n    padded = 12 * [0] + list(digest)\n    return bytes(padded)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    try:\n        <IND>bytes_data = bytes(data)\n    <DED>except TypeError:\n        <IND>raise NativeContractException\n    <DED>digest = hashlib.new(\"ripemd160\", bytes_data).digest()\n    padded = 12 * [0] + list(digest)\n    return list(bytearray(bytes(padded)))\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ConsenSys/mythril",
    "commit": "0f61e60a09afc9d30cec6df5f867af4f7ff2ed89",
    "filename": "mythril/laser/ethereum/natives.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ConsenSys-mythril/mythril/laser/ethereum/natives.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mythril/laser/ethereum/natives.py:104:38 Incompatible parameter type [6]: Expected `Union[array.array[typing.Any], bytearray, bytes, memoryview, mmap.mmap]` for 2nd positional only parameter to call `hashlib.new` but got `List[int]`.",
    "message": " Expected `Union[array.array[typing.Any], bytearray, bytes, memoryview, mmap.mmap]` for 2nd positional only parameter to call `hashlib.new` but got `List[int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 104,
    "warning_line": "    digest = hashlib.new(\"ripemd160\", data).digest()",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    try:\n        data = bytes(data)\n    except TypeError:\n        raise NativeContractException\n    return hashlib.sha256(data).digest()\n\n\ndef ripemd160(data: List[int]) -> bytes:\n    \"\"\"\n",
        "source_code_len": 188,
        "target_code": "    try:\n        byte_data = bytes(data)\n    except TypeError:\n        raise NativeContractException\n    return list(bytearray(hashlib.sha256(byte_data).digest()))\n\n\ndef ripemd160(data: List[int]) -> List[int]:\n    \"\"\"\n",
        "target_code_len": 219,
        "diff_format": "@@ -87,9 +87,9 @@\n     try:\n-        data = bytes(data)\n+        byte_data = bytes(data)\n     except TypeError:\n         raise NativeContractException\n-    return hashlib.sha256(data).digest()\n+    return list(bytearray(hashlib.sha256(byte_data).digest()))\n \n \n-def ripemd160(data: List[int]) -> bytes:\n+def ripemd160(data: List[int]) -> List[int]:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "    try:\n        <IND>data = bytes(data)\n    <DED>except TypeError:\n        <IND>raise NativeContractException\n    <DED>return hashlib.sha256(data).digest()\n\n\n<DED>def ripemd160(data: List[int]) -> bytes:\n    <IND>",
        "target_code_with_indent": "    try:\n        <IND>byte_data = bytes(data)\n    <DED>except TypeError:\n        <IND>raise NativeContractException\n    <DED>return list(bytearray(hashlib.sha256(byte_data).digest()))\n\n\n<DED>def ripemd160(data: List[int]) -> List[int]:\n    <IND>"
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    try:\n        data = bytes(data)\n    except TypeError:\n        raise NativeContractException\n    digest = hashlib.new(\"ripemd160\", data).digest()\n    padded = 12 * [0] + list(digest)\n    return bytes(padded)\n\n",
        "source_code_len": 212,
        "target_code": "    try:\n        bytes_data = bytes(data)\n    except TypeError:\n        raise NativeContractException\n    digest = hashlib.new(\"ripemd160\", bytes_data).digest()\n    padded = 12 * [0] + list(digest)\n    return list(bytearray(bytes(padded)))\n\n",
        "target_code_len": 241,
        "diff_format": "@@ -100,8 +100,8 @@\n     try:\n-        data = bytes(data)\n+        bytes_data = bytes(data)\n     except TypeError:\n         raise NativeContractException\n-    digest = hashlib.new(\"ripemd160\", data).digest()\n+    digest = hashlib.new(\"ripemd160\", bytes_data).digest()\n     padded = 12 * [0] + list(digest)\n-    return bytes(padded)\n+    return list(bytearray(bytes(padded)))\n \n",
        "source_code_with_indent": "    try:\n        <IND>data = bytes(data)\n    <DED>except TypeError:\n        <IND>raise NativeContractException\n    <DED>digest = hashlib.new(\"ripemd160\", data).digest()\n    padded = 12 * [0] + list(digest)\n    return bytes(padded)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    try:\n        <IND>bytes_data = bytes(data)\n    <DED>except TypeError:\n        <IND>raise NativeContractException\n    <DED>digest = hashlib.new(\"ripemd160\", bytes_data).digest()\n    padded = 12 * [0] + list(digest)\n    return list(bytearray(bytes(padded)))\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]