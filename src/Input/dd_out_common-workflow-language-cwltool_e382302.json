[
  {
    "project": "common-workflow-language/cwltool",
    "commit": "e38230263591d4a89c46db25a25bb489d36d528c",
    "filename": "tests/test_toolargparse.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/common-workflow-language-cwltool/tests/test_toolargparse.py",
    "file_hunks_size": 9,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/test_toolargparse.py:116:4 Inconsistent override [15]: `tests.test_toolargparse.NoopJobExecutor.execute` overrides method defined in `cwltool.executors.JobExecutor` inconsistently. Returned type `unknown` is not a subtype of the overridden return `typing.Tuple[typing.Union[None, typing.MutableMapping[str, typing.Union[None, typing.MutableMapping[str, typing.Union[None, typing.MutableMapping[str, typing.Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], typing.MutableSequence[typing.Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], bool, float, int, str]], typing.MutableSequence[typing.Union[None, typing.MutableMapping[str, typing.Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], typing.MutableSequence[typing.Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], bool, float, int, str]], bool, float, int, str]], typing.MutableSequence[typing.MutableMapping[str, typing.Union[None, typing.MutableMapping[str, typing.Union[None, typing.MutableMapping[str, typing.Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], typing.MutableSequence[typing.Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], bool, float, int, str]], typing.MutableSequence[typing.Union[None, typing.MutableMapping[str, typing.Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], typing.MutableSequence[typing.Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], bool, float, int, str]], bool, float, int, str]]]], str]`.",
    "message": " `tests.test_toolargparse.NoopJobExecutor.execute` overrides method defined in `cwltool.executors.JobExecutor` inconsistently. Returned type `unknown` is not a subtype of the overridden return `typing.Tuple[typing.Union[None, typing.MutableMapping[str, typing.Union[None, typing.MutableMapping[str, typing.Union[None, typing.MutableMapping[str, typing.Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], typing.MutableSequence[typing.Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], bool, float, int, str]], typing.MutableSequence[typing.Union[None, typing.MutableMapping[str, typing.Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], typing.MutableSequence[typing.Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], bool, float, int, str]], bool, float, int, str]], typing.MutableSequence[typing.MutableMapping[str, typing.Union[None, typing.MutableMapping[str, typing.Union[None, typing.MutableMapping[str, typing.Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], typing.MutableSequence[typing.Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], bool, float, int, str]], typing.MutableSequence[typing.Union[None, typing.MutableMapping[str, typing.Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], typing.MutableSequence[typing.Union[None, typing.MutableMapping[str, typing.Any], typing.MutableSequence[typing.Any], bool, float, int, str]], bool, float, int, str]], bool, float, int, str]]]], str]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 116,
    "warning_line": "    def execute("
  },
  {
    "project": "common-workflow-language/cwltool",
    "commit": "e38230263591d4a89c46db25a25bb489d36d528c",
    "filename": "tests/test_toolargparse.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/common-workflow-language-cwltool/tests/test_toolargparse.py",
    "file_hunks_size": 9,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/test_toolargparse.py:121:8 Incompatible variable type [9]: logger is declared to have type `logging.Logger` but is used as type `None`.",
    "message": " logger is declared to have type `logging.Logger` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 121,
    "warning_line": "        logger=None,  # type: logging.Logger"
  },
  {
    "project": "common-workflow-language/cwltool",
    "commit": "e38230263591d4a89c46db25a25bb489d36d528c",
    "filename": "tests/util.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/common-workflow-language-cwltool/tests/util.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/util.py:21:4 Incompatible variable type [9]: runtime_context is declared to have type `RuntimeContext` but is used as type `None`.",
    "message": " runtime_context is declared to have type `RuntimeContext` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 21,
    "warning_line": "    runtime_context=None,  # type: RuntimeContext",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "import tempfile\n\nimport pytest\nfrom pkg_resources import ResolutionError  # type: ignore\nfrom pkg_resources import Requirement, resource_filename\n\n",
        "source_code_len": 147,
        "target_code": "import tempfile\nfrom typing import Any, Callable, Dict, Generator, List, Mapping, Optional, Tuple, Union\n\nimport pytest  # type: ignore\nfrom pkg_resources import Requirement, ResolutionError, resource_filename\n\n",
        "target_code_len": 211,
        "diff_format": "@@ -7,6 +7,6 @@\n import tempfile\n+from typing import Any, Callable, Dict, Generator, List, Mapping, Optional, Tuple, Union\n \n-import pytest\n-from pkg_resources import ResolutionError  # type: ignore\n-from pkg_resources import Requirement, resource_filename\n+import pytest  # type: ignore\n+from pkg_resources import Requirement, ResolutionError, resource_filename\n \n",
        "source_code_with_indent": "import tempfile\n\nimport pytest\nfrom pkg_resources import ResolutionError  # type: ignore\nfrom pkg_resources import Requirement, resource_filename\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import tempfile\nfrom typing import Any, Callable, Dict, Generator, List, Mapping, Optional, Tuple, Union\n\nimport pytest  # type: ignore\nfrom pkg_resources import Requirement, ResolutionError, resource_filename\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def get_windows_safe_factory(\n    runtime_context=None,  # type: RuntimeContext\n    loading_context=None,  # type: LoadingContext\n    executor=None,  # type: Any\n):  # type: (...) -> Factory\n    if onWindows():\n",
        "source_code_len": 211,
        "target_code": "def get_windows_safe_factory(\n        runtime_context: Optional[RuntimeContext] = None,\n        loading_context: Optional[LoadingContext] = None,\n    executor: Optional[Callable[..., Tuple[Optional[Dict[str, Any]], str]]] = None, \n) -> Factory:\n    if onWindows():\n",
        "target_code_len": 265,
        "diff_format": "@@ -20,6 +20,6 @@\n def get_windows_safe_factory(\n-    runtime_context=None,  # type: RuntimeContext\n-    loading_context=None,  # type: LoadingContext\n-    executor=None,  # type: Any\n-):  # type: (...) -> Factory\n+        runtime_context: Optional[RuntimeContext] = None,\n+        loading_context: Optional[LoadingContext] = None,\n+    executor: Optional[Callable[..., Tuple[Optional[Dict[str, Any]], str]]] = None, \n+) -> Factory:\n     if onWindows():\n",
        "source_code_with_indent": "def get_windows_safe_factory(\n    runtime_context=None,  # type: RuntimeContext\n    loading_context=None,  # type: LoadingContext\n    executor=None,  # type: Any\n):  # type: (...) -> Factory\n    <IND>if onWindows():\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "def get_windows_safe_factory(\n        runtime_context: Optional[RuntimeContext] = None,\n        loading_context: Optional[LoadingContext] = None,\n    executor: Optional[Callable[..., Tuple[Optional[Dict[str, Any]], str]]] = None, \n) -> Factory:\n    <IND>if onWindows():\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "common-workflow-language/cwltool",
    "commit": "e38230263591d4a89c46db25a25bb489d36d528c",
    "filename": "tests/util.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/common-workflow-language-cwltool/tests/util.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/util.py:22:4 Incompatible variable type [9]: loading_context is declared to have type `LoadingContext` but is used as type `None`.",
    "message": " loading_context is declared to have type `LoadingContext` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 22,
    "warning_line": "    loading_context=None,  # type: LoadingContext",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "import tempfile\n\nimport pytest\nfrom pkg_resources import ResolutionError  # type: ignore\nfrom pkg_resources import Requirement, resource_filename\n\n",
        "source_code_len": 147,
        "target_code": "import tempfile\nfrom typing import Any, Callable, Dict, Generator, List, Mapping, Optional, Tuple, Union\n\nimport pytest  # type: ignore\nfrom pkg_resources import Requirement, ResolutionError, resource_filename\n\n",
        "target_code_len": 211,
        "diff_format": "@@ -7,6 +7,6 @@\n import tempfile\n+from typing import Any, Callable, Dict, Generator, List, Mapping, Optional, Tuple, Union\n \n-import pytest\n-from pkg_resources import ResolutionError  # type: ignore\n-from pkg_resources import Requirement, resource_filename\n+import pytest  # type: ignore\n+from pkg_resources import Requirement, ResolutionError, resource_filename\n \n",
        "source_code_with_indent": "import tempfile\n\nimport pytest\nfrom pkg_resources import ResolutionError  # type: ignore\nfrom pkg_resources import Requirement, resource_filename\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import tempfile\nfrom typing import Any, Callable, Dict, Generator, List, Mapping, Optional, Tuple, Union\n\nimport pytest  # type: ignore\nfrom pkg_resources import Requirement, ResolutionError, resource_filename\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def get_windows_safe_factory(\n    runtime_context=None,  # type: RuntimeContext\n    loading_context=None,  # type: LoadingContext\n    executor=None,  # type: Any\n):  # type: (...) -> Factory\n    if onWindows():\n",
        "source_code_len": 211,
        "target_code": "def get_windows_safe_factory(\n        runtime_context: Optional[RuntimeContext] = None,\n        loading_context: Optional[LoadingContext] = None,\n    executor: Optional[Callable[..., Tuple[Optional[Dict[str, Any]], str]]] = None, \n) -> Factory:\n    if onWindows():\n",
        "target_code_len": 265,
        "diff_format": "@@ -20,6 +20,6 @@\n def get_windows_safe_factory(\n-    runtime_context=None,  # type: RuntimeContext\n-    loading_context=None,  # type: LoadingContext\n-    executor=None,  # type: Any\n-):  # type: (...) -> Factory\n+        runtime_context: Optional[RuntimeContext] = None,\n+        loading_context: Optional[LoadingContext] = None,\n+    executor: Optional[Callable[..., Tuple[Optional[Dict[str, Any]], str]]] = None, \n+) -> Factory:\n     if onWindows():\n",
        "source_code_with_indent": "def get_windows_safe_factory(\n    runtime_context=None,  # type: RuntimeContext\n    loading_context=None,  # type: LoadingContext\n    executor=None,  # type: Any\n):  # type: (...) -> Factory\n    <IND>if onWindows():\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "def get_windows_safe_factory(\n        runtime_context: Optional[RuntimeContext] = None,\n        loading_context: Optional[LoadingContext] = None,\n    executor: Optional[Callable[..., Tuple[Optional[Dict[str, Any]], str]]] = None, \n) -> Factory:\n    <IND>if onWindows():\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]