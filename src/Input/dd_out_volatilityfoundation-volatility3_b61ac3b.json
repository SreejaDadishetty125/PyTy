[
  {
    "project": "volatilityfoundation/volatility3",
    "commit": "b61ac3bd477e0af8d03d3abd1afb8f9f57b51253",
    "filename": "volatility/framework/automagic/symbol_finder.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/volatilityfoundation-volatility3/volatility/framework/automagic/symbol_finder.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "volatility/framework/automagic/symbol_finder.py:45:8 Incompatible attribute type [8]: Attribute `_requirements` declared in class `SymbolFinder` has type `List[Tuple[str, interfaces.configuration.ConstructableRequirementInterface]]` but is used as type `List[Tuple[str, typing.Union[requirements.SymbolRequirement, requirements.TranslationLayerRequirement]]]`.",
    "message": " Attribute `_requirements` declared in class `SymbolFinder` has type `List[Tuple[str, interfaces.configuration.ConstructableRequirementInterface]]` but is used as type `List[Tuple[str, typing.Union[requirements.SymbolRequirement, requirements.TranslationLayerRequirement]]]`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 45,
    "warning_line": "        self._requirements = self.find_requirements("
  },
  {
    "project": "volatilityfoundation/volatility3",
    "commit": "b61ac3bd477e0af8d03d3abd1afb8f9f57b51253",
    "filename": "volatility/framework/interfaces/automagic.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/volatilityfoundation-volatility3/volatility/framework/interfaces/automagic.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "volatility/framework/interfaces/automagic.py:80:32 Incompatible parameter type [6]: Expected `Tuple[str, Variable[R (bound to interfaces.configuration.RequirementInterface)]]` for 1st positional only parameter to call `list.append` but got `Tuple[str, interfaces.configuration.RequirementInterface]`.",
    "message": " Expected `Tuple[str, Variable[R (bound to interfaces.configuration.RequirementInterface)]]` for 1st positional only parameter to call `list.append` but got `Tuple[str, interfaces.configuration.RequirementInterface]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 80,
    "warning_line": "                results.append((sub_config_path, requirement_root))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                          requirement_root: interfaces.configuration.RequirementInterface,\n                          requirement_type: Union[Tuple[Type[R], ...], Type[R]],\n                          shortcut: bool = True) -> List[Tuple[str, R]]:\n        \"\"\"Determines if there is actually an unfulfilled requirement waiting\n",
        "source_code_len": 323,
        "target_code": "                          requirement_root: interfaces.configuration.RequirementInterface,\n                          requirement_type: Union[Tuple[Type[interfaces.configuration.RequirementInterface], ...],\n                                                  Type[interfaces.configuration.RequirementInterface]],\n                          shortcut: bool = True) -> List[Tuple[str, interfaces.configuration.RequirementInterface]]:\n        \"\"\"Determines if there is actually an unfulfilled requirement waiting\n",
        "target_code_len": 505,
        "diff_format": "@@ -58,4 +56,5 @@\n                           requirement_root: interfaces.configuration.RequirementInterface,\n-                          requirement_type: Union[Tuple[Type[R], ...], Type[R]],\n-                          shortcut: bool = True) -> List[Tuple[str, R]]:\n+                          requirement_type: Union[Tuple[Type[interfaces.configuration.RequirementInterface], ...],\n+                                                  Type[interfaces.configuration.RequirementInterface]],\n+                          shortcut: bool = True) -> List[Tuple[str, interfaces.configuration.RequirementInterface]]:\n         \"\"\"Determines if there is actually an unfulfilled requirement waiting\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "                          requirement_root: interfaces.configuration.RequirementInterface,\n                          requirement_type: Union[Tuple[Type[R], ...], Type[R]],\n                          shortcut: bool = True) -> List[Tuple[str, R]]:\n        <IND>",
        "target_code_with_indent": "                          requirement_root: interfaces.configuration.RequirementInterface,\n                          requirement_type: Union[Tuple[Type[interfaces.configuration.RequirementInterface], ...],\n                                                  Type[interfaces.configuration.RequirementInterface]],\n                          shortcut: bool = True) -> List[Tuple[str, interfaces.configuration.RequirementInterface]]:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        sub_config_path = interfaces.configuration.path_join(config_path, requirement_root.name)\n        results = []  # type: List[Tuple[str, R]]\n        recurse = not shortcut\n",
        "source_code_len": 178,
        "target_code": "        sub_config_path = interfaces.configuration.path_join(config_path, requirement_root.name)\n        results = []  # type: List[Tuple[str, interfaces.configuration.RequirementInterface]]\n        recurse = not shortcut\n",
        "target_code_len": 222,
        "diff_format": "@@ -75,3 +74,3 @@\n         sub_config_path = interfaces.configuration.path_join(config_path, requirement_root.name)\n-        results = []  # type: List[Tuple[str, R]]\n+        results = []  # type: List[Tuple[str, interfaces.configuration.RequirementInterface]]\n         recurse = not shortcut\n",
        "source_code_with_indent": "        sub_config_path = interfaces.configuration.path_join(config_path, requirement_root.name)\n        results = []  # type: List[Tuple[str, R]]\n        recurse = not shortcut\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        sub_config_path = interfaces.configuration.path_join(config_path, requirement_root.name)\n        results = []  # type: List[Tuple[str, interfaces.configuration.RequirementInterface]]\n        recurse = not shortcut\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "volatilityfoundation/volatility3",
    "commit": "b61ac3bd477e0af8d03d3abd1afb8f9f57b51253",
    "filename": "volatility/framework/objects/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/volatilityfoundation-volatility3/volatility/framework/objects/__init__.py",
    "file_hunks_size": 10,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "volatility/framework/objects/__init__.py:45:12 Incompatible parameter type [6]: Expected `int` for 1st positional only parameter to call `int.to_bytes` but got `Union[bool, bytes, float, int, str]`.",
    "message": " Expected `int` for 1st positional only parameter to call `int.to_bytes` but got `Union[bool, bytes, float, int, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 45,
    "warning_line": "            value, length = data_format.length, byteorder = data_format.byteorder, signed = data_format.signed)"
  },
  {
    "project": "volatilityfoundation/volatility3",
    "commit": "b61ac3bd477e0af8d03d3abd1afb8f9f57b51253",
    "filename": "volatility/framework/objects/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/volatilityfoundation-volatility3/volatility/framework/objects/__init__.py",
    "file_hunks_size": 10,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "volatility/framework/objects/__init__.py:95:16 Incompatible variable type [9]: new_value is declared to have type `Union[bool, bytes, float, int, str]` but is used as type `None`.",
    "message": " new_value is declared to have type `Union[bool, bytes, float, int, str]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 95,
    "warning_line": "                new_value: Union[int, float, bool, bytes, str] = None,"
  },
  {
    "project": "volatilityfoundation/volatility3",
    "commit": "b61ac3bd477e0af8d03d3abd1afb8f9f57b51253",
    "filename": "volatility/framework/plugins/mac/pslist.py",
    "min_patch_found": false,
    "full_warning_msg": "volatility/framework/plugins/mac/pslist.py:55:57 Incompatible parameter type [6]: Expected `int` for 3rd positional only parameter to call `interfaces.context.ContextInterface.module` but got `typing.Tuple[int, int]`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "volatilityfoundation/volatility3",
    "commit": "b61ac3bd477e0af8d03d3abd1afb8f9f57b51253",
    "filename": "volatility/framework/plugins/windows/handles.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/volatilityfoundation-volatility3/volatility/framework/plugins/windows/handles.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "volatility/framework/plugins/windows/handles.py:147:32 Incompatible parameter type [6]: Expected `typing.Iterable[Variable[_T]]` for 1st positional only parameter to call `enumerate.__init__` but got `interfaces.objects.ObjectInterface`.",
    "message": " Expected `typing.Iterable[Variable[_T]]` for 1st positional only parameter to call `enumerate.__init__` but got `interfaces.objects.ObjectInterface`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 147,
    "warning_line": "        for i, ptr in enumerate(ptrs):",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n        for i, ptr in enumerate(ptrs):\n            # the first entry in the table is always null. break the\n",
        "source_code_len": 109,
        "target_code": "\n        for i, ptr in enumerate(ptrs):  #type: ignore\n            # the first entry in the table is always null. break the\n",
        "target_code_len": 124,
        "diff_format": "@@ -146,3 +146,3 @@\n \n-        for i, ptr in enumerate(ptrs):\n+        for i, ptr in enumerate(ptrs):  #type: ignore\n             # the first entry in the table is always null. break the\n",
        "source_code_with_indent": "\n        for i, ptr in enumerate(ptrs):\n            # the first entry in the table is always null. break the\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        for i, ptr in enumerate(ptrs):  #type: ignore\n            # the first entry in the table is always null. break the\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "volatilityfoundation/volatility3",
    "commit": "b61ac3bd477e0af8d03d3abd1afb8f9f57b51253",
    "filename": "volatility/framework/plugins/windows/registry/userassist.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/volatilityfoundation-volatility3/volatility/framework/plugins/windows/registry/userassist.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "volatility/framework/plugins/windows/registry/userassist.py:152:20 Incompatible variable type [9]: result is declared to have type `typing.Tuple[typing_extensions.Literal[0], typing.Tuple[format_hints.Hex, typing.Any, typing.Any, typing.Union[datetime.datetime, interfaces.renderers.BaseAbsentValue], typing_extensions.Literal['Key'], renderers.NotApplicableValue, renderers.NotApplicableValue, renderers.NotApplicableValue, renderers.NotApplicableValue, renderers.NotApplicableValue, renderers.NotApplicableValue, renderers.NotApplicableValue]]` but is used as type `typing.Tuple[typing_extensions.Literal[1], typing.Tuple[format_hints.Hex, typing.Any, typing.Any, typing.Union[datetime.datetime, interfaces.renderers.BaseAbsentValue], typing_extensions.Literal['Subkey'], typing.Any, renderers.NotApplicableValue, renderers.NotApplicableValue, renderers.NotApplicableValue, renderers.NotApplicableValue, renderers.NotApplicableValue, renderers.NotApplicableValue]]`.",
    "message": " result is declared to have type `typing.Tuple[typing_extensions.Literal[0], typing.Tuple[format_hints.Hex, typing.Any, typing.Any, typing.Union[datetime.datetime, interfaces.renderers.BaseAbsentValue], typing_extensions.Literal['Key'], renderers.NotApplicableValue, renderers.NotApplicableValue, renderers.NotApplicableValue, renderers.NotApplicableValue, renderers.NotApplicableValue, renderers.NotApplicableValue, renderers.NotApplicableValue]]` but is used as type `typing.Tuple[typing_extensions.Literal[1], typing.Tuple[format_hints.Hex, typing.Any, typing.Any, typing.Union[datetime.datetime, interfaces.renderers.BaseAbsentValue], typing_extensions.Literal['Subkey'], typing.Any, renderers.NotApplicableValue, renderers.NotApplicableValue, renderers.NotApplicableValue, renderers.NotApplicableValue, renderers.NotApplicableValue, renderers.NotApplicableValue]]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 152,
    "warning_line": "                    result = (1, (",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import os\nfrom typing import List\n\n",
        "source_code_len": 35,
        "target_code": "import os\nfrom typing import Any, List, Tuple\n\n",
        "target_code_len": 47,
        "diff_format": "@@ -5,3 +5,3 @@\n import os\n-from typing import List\n+from typing import Any, List, Tuple\n \n",
        "source_code_with_indent": "import os\nfrom typing import List\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import os\nfrom typing import Any, List, Tuple\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "volatilityfoundation/volatility3",
    "commit": "b61ac3bd477e0af8d03d3abd1afb8f9f57b51253",
    "filename": "volatility/framework/plugins/windows/registry/userassist.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/volatilityfoundation-volatility3/volatility/framework/plugins/windows/registry/userassist.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "volatility/framework/plugins/windows/registry/userassist.py:183:20 Incompatible variable type [9]: result is declared to have type `typing.Tuple[typing_extensions.Literal[0], typing.Tuple[format_hints.Hex, typing.Any, typing.Any, typing.Union[datetime.datetime, interfaces.renderers.BaseAbsentValue], typing_extensions.Literal['Key'], renderers.NotApplicableValue, renderers.NotApplicableValue, renderers.NotApplicableValue, renderers.NotApplicableValue, renderers.NotApplicableValue, renderers.NotApplicableValue, renderers.NotApplicableValue]]` but is used as type `typing.Tuple[typing_extensions.Literal[1], typing.Tuple[format_hints.Hex, typing.Any, typing.Any, typing.Union[datetime.datetime, interfaces.renderers.BaseAbsentValue], typing_extensions.Literal['Value'], typing.Any, typing.Any, typing.Any, typing.Any, typing.Any, typing.Any, format_hints.HexBytes]]`.",
    "message": " result is declared to have type `typing.Tuple[typing_extensions.Literal[0], typing.Tuple[format_hints.Hex, typing.Any, typing.Any, typing.Union[datetime.datetime, interfaces.renderers.BaseAbsentValue], typing_extensions.Literal['Key'], renderers.NotApplicableValue, renderers.NotApplicableValue, renderers.NotApplicableValue, renderers.NotApplicableValue, renderers.NotApplicableValue, renderers.NotApplicableValue, renderers.NotApplicableValue]]` but is used as type `typing.Tuple[typing_extensions.Literal[1], typing.Tuple[format_hints.Hex, typing.Any, typing.Any, typing.Union[datetime.datetime, interfaces.renderers.BaseAbsentValue], typing_extensions.Literal['Value'], typing.Any, typing.Any, typing.Any, typing.Any, typing.Any, typing.Any, format_hints.HexBytes]]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 183,
    "warning_line": "                    result = (1, (",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import os\nfrom typing import List\n\n",
        "source_code_len": 35,
        "target_code": "import os\nfrom typing import Any, List, Tuple\n\n",
        "target_code_len": 47,
        "diff_format": "@@ -5,3 +5,3 @@\n import os\n-from typing import List\n+from typing import Any, List, Tuple\n \n",
        "source_code_with_indent": "import os\nfrom typing import List\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import os\nfrom typing import Any, List, Tuple\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "volatilityfoundation/volatility3",
    "commit": "b61ac3bd477e0af8d03d3abd1afb8f9f57b51253",
    "filename": "volatility/framework/plugins/windows/ssdt.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/volatilityfoundation-volatility3/volatility/framework/plugins/windows/ssdt.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "volatility/framework/plugins/windows/ssdt.py:101:20 Incompatible return type [7]: Expected `Iterator[Tuple[int, Tuple[int, int, str, str]]]` but got `typing.Generator[Tuple[int, Tuple[int, format_hints.Hex, str, renderers.NotAvailableValue]], None, None]`.",
    "message": " Expected `Iterator[Tuple[int, Tuple[int, int, str, str]]]` but got `typing.Generator[Tuple[int, Tuple[int, format_hints.Hex, str, renderers.NotAvailableValue]], None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 101,
    "warning_line": "                    yield (0, (idx, format_hints.Hex(function), module_name, renderers.NotAvailableValue()))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _generator(self, mods: Iterator[Any]) -> Iterator[Tuple[int, Tuple[int, int, str, str]]]:\n\n",
        "source_code_len": 100,
        "target_code": "\n    def _generator(self, mods: Iterator[Any]) -> Iterator[Tuple[int, Tuple[int, int, Any, Any]]]:\n\n",
        "target_code_len": 100,
        "diff_format": "@@ -25,3 +25,3 @@\n \n-    def _generator(self, mods: Iterator[Any]) -> Iterator[Tuple[int, Tuple[int, int, str, str]]]:\n+    def _generator(self, mods: Iterator[Any]) -> Iterator[Tuple[int, Tuple[int, int, Any, Any]]]:\n \n",
        "source_code_with_indent": "\n    <DED>def _generator(self, mods: Iterator[Any]) -> Iterator[Tuple[int, Tuple[int, int, str, str]]]:\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def _generator(self, mods: Iterator[Any]) -> Iterator[Tuple[int, Tuple[int, int, Any, Any]]]:\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "volatilityfoundation/volatility3",
    "commit": "b61ac3bd477e0af8d03d3abd1afb8f9f57b51253",
    "filename": "volatility/framework/plugins/windows/verinfo.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/volatilityfoundation-volatility3/volatility/framework/plugins/windows/verinfo.py",
    "file_hunks_size": 1,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "volatility/framework/plugins/windows/verinfo.py:96:17 Incompatible variable type [9]: major is declared to have type `renderers.NotAvailableValue` but is used as type `int`.",
    "message": " major is declared to have type `renderers.NotAvailableValue` but is used as type `int`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 96,
    "warning_line": "                (major, minor, product, build) = self.get_version_information(self._context, pe_table_name,"
  },
  {
    "project": "volatilityfoundation/volatility3",
    "commit": "b61ac3bd477e0af8d03d3abd1afb8f9f57b51253",
    "filename": "volatility/framework/plugins/windows/verinfo.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/volatilityfoundation-volatility3/volatility/framework/plugins/windows/verinfo.py",
    "file_hunks_size": 1,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "volatility/framework/plugins/windows/verinfo.py:96:24 Incompatible variable type [9]: minor is declared to have type `renderers.NotAvailableValue` but is used as type `int`.",
    "message": " minor is declared to have type `renderers.NotAvailableValue` but is used as type `int`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 96,
    "warning_line": "                (major, minor, product, build) = self.get_version_information(self._context, pe_table_name,"
  },
  {
    "project": "volatilityfoundation/volatility3",
    "commit": "b61ac3bd477e0af8d03d3abd1afb8f9f57b51253",
    "filename": "volatility/framework/plugins/windows/verinfo.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/volatilityfoundation-volatility3/volatility/framework/plugins/windows/verinfo.py",
    "file_hunks_size": 1,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "volatility/framework/plugins/windows/verinfo.py:96:31 Incompatible variable type [9]: product is declared to have type `renderers.NotAvailableValue` but is used as type `int`.",
    "message": " product is declared to have type `renderers.NotAvailableValue` but is used as type `int`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 96,
    "warning_line": "                (major, minor, product, build) = self.get_version_information(self._context, pe_table_name,"
  },
  {
    "project": "volatilityfoundation/volatility3",
    "commit": "b61ac3bd477e0af8d03d3abd1afb8f9f57b51253",
    "filename": "volatility/framework/plugins/windows/verinfo.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/volatilityfoundation-volatility3/volatility/framework/plugins/windows/verinfo.py",
    "file_hunks_size": 1,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "volatility/framework/plugins/windows/verinfo.py:96:40 Incompatible variable type [9]: build is declared to have type `renderers.NotAvailableValue` but is used as type `int`.",
    "message": " build is declared to have type `renderers.NotAvailableValue` but is used as type `int`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 96,
    "warning_line": "                (major, minor, product, build) = self.get_version_information(self._context, pe_table_name,"
  },
  {
    "project": "volatilityfoundation/volatility3",
    "commit": "b61ac3bd477e0af8d03d3abd1afb8f9f57b51253",
    "filename": "volatility/framework/plugins/windows/verinfo.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/volatilityfoundation-volatility3/volatility/framework/plugins/windows/verinfo.py",
    "file_hunks_size": 1,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "volatility/framework/plugins/windows/verinfo.py:99:17 Incompatible variable type [9]: major is declared to have type `renderers.NotAvailableValue` but is used as type `renderers.UnreadableValue`.",
    "message": " major is declared to have type `renderers.NotAvailableValue` but is used as type `renderers.UnreadableValue`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 99,
    "warning_line": "                (major, minor, product, build) = [renderers.UnreadableValue()] * 4"
  },
  {
    "project": "volatilityfoundation/volatility3",
    "commit": "b61ac3bd477e0af8d03d3abd1afb8f9f57b51253",
    "filename": "volatility/framework/plugins/windows/verinfo.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/volatilityfoundation-volatility3/volatility/framework/plugins/windows/verinfo.py",
    "file_hunks_size": 1,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "volatility/framework/plugins/windows/verinfo.py:99:24 Incompatible variable type [9]: minor is declared to have type `renderers.NotAvailableValue` but is used as type `renderers.UnreadableValue`.",
    "message": " minor is declared to have type `renderers.NotAvailableValue` but is used as type `renderers.UnreadableValue`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 99,
    "warning_line": "                (major, minor, product, build) = [renderers.UnreadableValue()] * 4"
  },
  {
    "project": "volatilityfoundation/volatility3",
    "commit": "b61ac3bd477e0af8d03d3abd1afb8f9f57b51253",
    "filename": "volatility/framework/plugins/windows/verinfo.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/volatilityfoundation-volatility3/volatility/framework/plugins/windows/verinfo.py",
    "file_hunks_size": 1,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "volatility/framework/plugins/windows/verinfo.py:99:31 Incompatible variable type [9]: product is declared to have type `renderers.NotAvailableValue` but is used as type `renderers.UnreadableValue`.",
    "message": " product is declared to have type `renderers.NotAvailableValue` but is used as type `renderers.UnreadableValue`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 99,
    "warning_line": "                (major, minor, product, build) = [renderers.UnreadableValue()] * 4"
  },
  {
    "project": "volatilityfoundation/volatility3",
    "commit": "b61ac3bd477e0af8d03d3abd1afb8f9f57b51253",
    "filename": "volatility/framework/plugins/windows/verinfo.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/volatilityfoundation-volatility3/volatility/framework/plugins/windows/verinfo.py",
    "file_hunks_size": 1,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "volatility/framework/plugins/windows/verinfo.py:99:40 Incompatible variable type [9]: build is declared to have type `renderers.NotAvailableValue` but is used as type `renderers.UnreadableValue`.",
    "message": " build is declared to have type `renderers.NotAvailableValue` but is used as type `renderers.UnreadableValue`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 99,
    "warning_line": "                (major, minor, product, build) = [renderers.UnreadableValue()] * 4"
  },
  {
    "project": "volatilityfoundation/volatility3",
    "commit": "b61ac3bd477e0af8d03d3abd1afb8f9f57b51253",
    "filename": "volatility/framework/plugins/windows/verinfo.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/volatilityfoundation-volatility3/volatility/framework/plugins/windows/verinfo.py",
    "file_hunks_size": 1,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "volatility/framework/plugins/windows/verinfo.py:118:21 Incompatible variable type [9]: major is declared to have type `renderers.NotAvailableValue` but is used as type `int`.",
    "message": " major is declared to have type `renderers.NotAvailableValue` but is used as type `int`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 118,
    "warning_line": "                    (major, minor, product, build) = self.get_version_information(self._context, pe_table_name,"
  },
  {
    "project": "volatilityfoundation/volatility3",
    "commit": "b61ac3bd477e0af8d03d3abd1afb8f9f57b51253",
    "filename": "volatility/framework/plugins/windows/verinfo.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/volatilityfoundation-volatility3/volatility/framework/plugins/windows/verinfo.py",
    "file_hunks_size": 1,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "volatility/framework/plugins/windows/verinfo.py:118:28 Incompatible variable type [9]: minor is declared to have type `renderers.NotAvailableValue` but is used as type `int`.",
    "message": " minor is declared to have type `renderers.NotAvailableValue` but is used as type `int`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 118,
    "warning_line": "                    (major, minor, product, build) = self.get_version_information(self._context, pe_table_name,"
  },
  {
    "project": "volatilityfoundation/volatility3",
    "commit": "b61ac3bd477e0af8d03d3abd1afb8f9f57b51253",
    "filename": "volatility/framework/plugins/windows/verinfo.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/volatilityfoundation-volatility3/volatility/framework/plugins/windows/verinfo.py",
    "file_hunks_size": 1,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "volatility/framework/plugins/windows/verinfo.py:118:35 Incompatible variable type [9]: product is declared to have type `renderers.NotAvailableValue` but is used as type `int`.",
    "message": " product is declared to have type `renderers.NotAvailableValue` but is used as type `int`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 118,
    "warning_line": "                    (major, minor, product, build) = self.get_version_information(self._context, pe_table_name,"
  },
  {
    "project": "volatilityfoundation/volatility3",
    "commit": "b61ac3bd477e0af8d03d3abd1afb8f9f57b51253",
    "filename": "volatility/framework/plugins/windows/verinfo.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/volatilityfoundation-volatility3/volatility/framework/plugins/windows/verinfo.py",
    "file_hunks_size": 1,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "volatility/framework/plugins/windows/verinfo.py:118:44 Incompatible variable type [9]: build is declared to have type `renderers.NotAvailableValue` but is used as type `int`.",
    "message": " build is declared to have type `renderers.NotAvailableValue` but is used as type `int`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 118,
    "warning_line": "                    (major, minor, product, build) = self.get_version_information(self._context, pe_table_name,"
  },
  {
    "project": "volatilityfoundation/volatility3",
    "commit": "b61ac3bd477e0af8d03d3abd1afb8f9f57b51253",
    "filename": "volatility/framework/plugins/windows/verinfo.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/volatilityfoundation-volatility3/volatility/framework/plugins/windows/verinfo.py",
    "file_hunks_size": 1,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "volatility/framework/plugins/windows/verinfo.py:121:21 Incompatible variable type [9]: major is declared to have type `renderers.NotAvailableValue` but is used as type `renderers.UnreadableValue`.",
    "message": " major is declared to have type `renderers.NotAvailableValue` but is used as type `renderers.UnreadableValue`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 121,
    "warning_line": "                    (major, minor, product, build) = [renderers.UnreadableValue()] * 4"
  },
  {
    "project": "volatilityfoundation/volatility3",
    "commit": "b61ac3bd477e0af8d03d3abd1afb8f9f57b51253",
    "filename": "volatility/framework/plugins/windows/verinfo.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/volatilityfoundation-volatility3/volatility/framework/plugins/windows/verinfo.py",
    "file_hunks_size": 1,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "volatility/framework/plugins/windows/verinfo.py:121:28 Incompatible variable type [9]: minor is declared to have type `renderers.NotAvailableValue` but is used as type `renderers.UnreadableValue`.",
    "message": " minor is declared to have type `renderers.NotAvailableValue` but is used as type `renderers.UnreadableValue`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 121,
    "warning_line": "                    (major, minor, product, build) = [renderers.UnreadableValue()] * 4"
  },
  {
    "project": "volatilityfoundation/volatility3",
    "commit": "b61ac3bd477e0af8d03d3abd1afb8f9f57b51253",
    "filename": "volatility/framework/plugins/windows/verinfo.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/volatilityfoundation-volatility3/volatility/framework/plugins/windows/verinfo.py",
    "file_hunks_size": 1,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "volatility/framework/plugins/windows/verinfo.py:121:35 Incompatible variable type [9]: product is declared to have type `renderers.NotAvailableValue` but is used as type `renderers.UnreadableValue`.",
    "message": " product is declared to have type `renderers.NotAvailableValue` but is used as type `renderers.UnreadableValue`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 121,
    "warning_line": "                    (major, minor, product, build) = [renderers.UnreadableValue()] * 4"
  },
  {
    "project": "volatilityfoundation/volatility3",
    "commit": "b61ac3bd477e0af8d03d3abd1afb8f9f57b51253",
    "filename": "volatility/framework/plugins/windows/verinfo.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/volatilityfoundation-volatility3/volatility/framework/plugins/windows/verinfo.py",
    "file_hunks_size": 1,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "volatility/framework/plugins/windows/verinfo.py:121:44 Incompatible variable type [9]: build is declared to have type `renderers.NotAvailableValue` but is used as type `renderers.UnreadableValue`.",
    "message": " build is declared to have type `renderers.NotAvailableValue` but is used as type `renderers.UnreadableValue`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 121,
    "warning_line": "                    (major, minor, product, build) = [renderers.UnreadableValue()] * 4"
  }
]