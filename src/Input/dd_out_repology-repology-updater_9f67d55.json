[
  {
    "project": "repology/repology-updater",
    "commit": "9f67d556944fe256c990593f673713e299feaf8a",
    "filename": "repology/packagemaker/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/repology-repology-updater/repology/packagemaker/__init__.py",
    "file_hunks_size": 17,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "repology/packagemaker/__init__.py:136:37 Incompatible parameter type [6]: Expected `PackageMakerBase` for 1st positional only parameter to call `PackageMakerBase._simple_setter` but got `str`.",
    "message": " Expected `PackageMakerBase` for 1st positional only parameter to call `PackageMakerBase._simple_setter` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 136,
    "warning_line": "    @PackageMakerBase._simple_setter('origin', str, nzs.strip, nzs.forbid_newlines)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from functools import wraps\nfrom typing import Any, Callable, Iterable, Optional\n\nfrom repology.logger import Logger\nfrom repology.package import Package\nfrom repology.packagemaker import normalizers as nzs\n\n",
        "source_code_len": 208,
        "target_code": "from functools import wraps\nfrom typing import Any, Callable, Dict, Iterable, List, Optional, Type\n\nfrom repology.logger import Logger\nfrom repology.package import Package, PackageStatus\nfrom repology.packagemaker import normalizers as nzs\nfrom repology.packagemaker.normalizers import NormalizerFunction\n\n",
        "target_code_len": 306,
        "diff_format": "@@ -24,7 +22,8 @@\n from functools import wraps\n-from typing import Any, Callable, Iterable, Optional\n+from typing import Any, Callable, Dict, Iterable, List, Optional, Type\n \n from repology.logger import Logger\n-from repology.package import Package\n+from repology.package import Package, PackageStatus\n from repology.packagemaker import normalizers as nzs\n+from repology.packagemaker.normalizers import NormalizerFunction\n \n",
        "source_code_with_indent": "from functools import wraps\nfrom typing import Any, Callable, Iterable, Optional\n\nfrom repology.logger import Logger\nfrom repology.package import Package\nfrom repology.packagemaker import normalizers as nzs\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from functools import wraps\nfrom typing import Any, Callable, Dict, Iterable, List, Optional, Type\n\nfrom repology.logger import Logger\nfrom repology.package import Package, PackageStatus\nfrom repology.packagemaker import normalizers as nzs\nfrom repology.packagemaker.normalizers import NormalizerFunction\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _iter_unique(iterable, existing=None):\n    seen = set(existing) if existing else set()\n    for value in iterable:\n        if value not in seen:\n            seen.add(value)\n            yield value\n\n",
        "source_code_len": 202,
        "target_code": "\nclass PackageTemplate:\n    __slots__ = [\n        'subrepo',\n\n        'name',\n        'basename',\n\n        'version',\n        'origversion',\n        'rawversion',\n\n        'arch',\n        'summary',\n        'maintainers',\n        'categories',\n        'homepages',\n        'licenses',\n        'downloads',\n\n        'flags',\n\n        'extrafields',\n    ]\n\n    subrepo: Optional[str]\n\n    name: Optional[str]\n    basename: Optional[str]\n\n    version: Optional[str]\n    origversion: Optional[str]\n    rawversion: Optional[str]\n\n    arch: Optional[str]\n    summary: Optional[str]\n    maintainers: List[str]\n    categories: List[str]\n    homepages: List[str]\n    licenses: List[str]\n    downloads: List[str]\n\n    flags: int\n\n    extrafields: Dict[str, str]\n\n    def __init__(self) -> None:\n        self.subrepo = None\n\n        self.name = None\n        self.basename = None\n\n        self.version = None\n        self.origversion = None\n        self.rawversion = None\n\n        self.arch = None\n        self.summary = None\n        self.maintainers = []\n        self.categories = []\n        self.homepages = []\n        self.licenses = []\n        self.downloads = []\n\n        self.flags = 0\n\n        self.extrafields = {}\n\n",
        "target_code_len": 1212,
        "diff_format": "@@ -34,8 +33,68 @@\n \n-def _iter_unique(iterable, existing=None):\n-    seen = set(existing) if existing else set()\n-    for value in iterable:\n-        if value not in seen:\n-            seen.add(value)\n-            yield value\n+class PackageTemplate:\n+    __slots__ = [\n+        'subrepo',\n+\n+        'name',\n+        'basename',\n+\n+        'version',\n+        'origversion',\n+        'rawversion',\n+\n+        'arch',\n+        'summary',\n+        'maintainers',\n+        'categories',\n+        'homepages',\n+        'licenses',\n+        'downloads',\n+\n+        'flags',\n+\n+        'extrafields',\n+    ]\n+\n+    subrepo: Optional[str]\n+\n+    name: Optional[str]\n+    basename: Optional[str]\n+\n+    version: Optional[str]\n+    origversion: Optional[str]\n+    rawversion: Optional[str]\n+\n+    arch: Optional[str]\n+    summary: Optional[str]\n+    maintainers: List[str]\n+    categories: List[str]\n+    homepages: List[str]\n+    licenses: List[str]\n+    downloads: List[str]\n+\n+    flags: int\n+\n+    extrafields: Dict[str, str]\n+\n+    def __init__(self) -> None:\n+        self.subrepo = None\n+\n+        self.name = None\n+        self.basename = None\n+\n+        self.version = None\n+        self.origversion = None\n+        self.rawversion = None\n+\n+        self.arch = None\n+        self.summary = None\n+        self.maintainers = []\n+        self.categories = []\n+        self.homepages = []\n+        self.licenses = []\n+        self.downloads = []\n+\n+        self.flags = 0\n+\n+        self.extrafields = {}\n \n",
        "source_code_with_indent": "\ndef _iter_unique(iterable, existing=None):\n    <IND>seen = set(existing) if existing else set()\n    for value in iterable:\n        <IND>if value not in seen:\n            <IND>seen.add(value)\n            yield value\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nclass PackageTemplate:\n    <IND>__slots__ = [\n        'subrepo',\n\n        'name',\n        'basename',\n\n        'version',\n        'origversion',\n        'rawversion',\n\n        'arch',\n        'summary',\n        'maintainers',\n        'categories',\n        'homepages',\n        'licenses',\n        'downloads',\n\n        'flags',\n\n        'extrafields',\n    ]\n\n    subrepo: Optional[str]\n\n    name: Optional[str]\n    basename: Optional[str]\n\n    version: Optional[str]\n    origversion: Optional[str]\n    rawversion: Optional[str]\n\n    arch: Optional[str]\n    summary: Optional[str]\n    maintainers: List[str]\n    categories: List[str]\n    homepages: List[str]\n    licenses: List[str]\n    downloads: List[str]\n\n    flags: int\n\n    extrafields: Dict[str, str]\n\n    def __init__(self) -> None:\n        <IND>self.subrepo = None\n\n        self.name = None\n        self.basename = None\n\n        self.version = None\n        self.origversion = None\n        self.rawversion = None\n\n        self.arch = None\n        self.summary = None\n        self.maintainers = []\n        self.categories = []\n        self.homepages = []\n        self.licenses = []\n        self.downloads = []\n\n        self.flags = 0\n\n        self.extrafields = {}\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _omnivorous_setter(fieldname, want_type, *normalizers):  # noqa: N805\n        def inner(method):\n            @wraps(method)\n            def wrapper(self, *args):\n                values = self._normalize_args(args, fieldname, want_type, normalizers)\n                if values:\n                    return method(self, *values)\n            return wrapper\n        return inner\n\n    def _simple_setter(fieldname, want_type, *normalizers):  # noqa: N805\n        def inner(method):\n            @wraps(method)\n            def wrapper(self, arg, *other_args):\n                if arg is None:\n                    pass\n                elif isinstance(arg, str) and want_type is int or isinstance(arg, int) and want_type is str:\n                    arg = want_type(arg)\n                elif not isinstance(arg, want_type):\n                    raise RuntimeError('unexpected type {} for {} (expected {})'.format(arg.__class__.__name__, fieldname, want_type.__name__))\n                value = self._apply_normalizers(arg, fieldname, normalizers)\n                if value:\n                    return method(self, value, *other_args)\n            return wrapper\n        return inner\n\n",
        "source_code_len": 1176,
        "target_code": "\n\ndef _omnivorous_setter(fieldname: str, want_type: Type[Any], *normalizers: NormalizerFunction) -> Callable[[Callable[..., Any]], Any]:\n    def inner(method: Callable[..., Any]) -> Callable[..., Any]:\n        @wraps(method)\n        def wrapper(self: PackageMakerBase, *args: Any) -> Any:\n            values = self._normalize_args(args, fieldname, want_type, normalizers)\n            if values:\n                return method(self, *values)\n        return wrapper\n    return inner\n\n\ndef _simple_setter(fieldname: str, want_type: Type[Any], *normalizers: NormalizerFunction) -> Callable[[Callable[..., Any]], Any]:\n    def inner(method: Callable[..., Any]) -> Callable[..., Any]:\n        @wraps(method)\n        def wrapper(self: PackageMakerBase, arg: Any, *other_args: Any) -> Any:\n            if arg is None:\n                pass\n            elif isinstance(arg, str) and want_type is int or isinstance(arg, int) and want_type is str:\n                arg = want_type(arg)\n            elif not isinstance(arg, want_type):\n                raise RuntimeError('unexpected type {} for {} (expected {})'.format(arg.__class__.__name__, fieldname, want_type.__name__))\n            value = self._apply_normalizers(arg, fieldname, normalizers)\n            if value:\n                return method(self, value, *other_args)\n        return wrapper\n    return inner\n\n\ndef _extend_unique(existing: List[str], iterable: Iterable[str]) -> None:\n    seen = set(existing) if existing else set()\n\n    for value in iterable:\n        if value not in seen:\n            seen.add(value)\n            existing.append(value)\n\n",
        "target_code_len": 1598,
        "diff_format": "@@ -92,27 +151,38 @@\n \n-    def _omnivorous_setter(fieldname, want_type, *normalizers):  # noqa: N805\n-        def inner(method):\n-            @wraps(method)\n-            def wrapper(self, *args):\n-                values = self._normalize_args(args, fieldname, want_type, normalizers)\n-                if values:\n-                    return method(self, *values)\n-            return wrapper\n-        return inner\n-\n-    def _simple_setter(fieldname, want_type, *normalizers):  # noqa: N805\n-        def inner(method):\n-            @wraps(method)\n-            def wrapper(self, arg, *other_args):\n-                if arg is None:\n-                    pass\n-                elif isinstance(arg, str) and want_type is int or isinstance(arg, int) and want_type is str:\n-                    arg = want_type(arg)\n-                elif not isinstance(arg, want_type):\n-                    raise RuntimeError('unexpected type {} for {} (expected {})'.format(arg.__class__.__name__, fieldname, want_type.__name__))\n-                value = self._apply_normalizers(arg, fieldname, normalizers)\n-                if value:\n-                    return method(self, value, *other_args)\n-            return wrapper\n-        return inner\n+\n+def _omnivorous_setter(fieldname: str, want_type: Type[Any], *normalizers: NormalizerFunction) -> Callable[[Callable[..., Any]], Any]:\n+    def inner(method: Callable[..., Any]) -> Callable[..., Any]:\n+        @wraps(method)\n+        def wrapper(self: PackageMakerBase, *args: Any) -> Any:\n+            values = self._normalize_args(args, fieldname, want_type, normalizers)\n+            if values:\n+                return method(self, *values)\n+        return wrapper\n+    return inner\n+\n+\n+def _simple_setter(fieldname: str, want_type: Type[Any], *normalizers: NormalizerFunction) -> Callable[[Callable[..., Any]], Any]:\n+    def inner(method: Callable[..., Any]) -> Callable[..., Any]:\n+        @wraps(method)\n+        def wrapper(self: PackageMakerBase, arg: Any, *other_args: Any) -> Any:\n+            if arg is None:\n+                pass\n+            elif isinstance(arg, str) and want_type is int or isinstance(arg, int) and want_type is str:\n+                arg = want_type(arg)\n+            elif not isinstance(arg, want_type):\n+                raise RuntimeError('unexpected type {} for {} (expected {})'.format(arg.__class__.__name__, fieldname, want_type.__name__))\n+            value = self._apply_normalizers(arg, fieldname, normalizers)\n+            if value:\n+                return method(self, value, *other_args)\n+        return wrapper\n+    return inner\n+\n+\n+def _extend_unique(existing: List[str], iterable: Iterable[str]) -> None:\n+    seen = set(existing) if existing else set()\n+\n+    for value in iterable:\n+        if value not in seen:\n+            seen.add(value)\n+            existing.append(value)\n \n",
        "source_code_with_indent": "\n    <DED>def _omnivorous_setter(fieldname, want_type, *normalizers):  # noqa: N805\n        <IND>def inner(method):\n            <IND>@wraps(method)\n            def wrapper(self, *args):\n                <IND>values = self._normalize_args(args, fieldname, want_type, normalizers)\n                if values:\n                    <IND>return method(self, *values)\n            <DED><DED>return wrapper\n        <DED>return inner\n\n    <DED>def _simple_setter(fieldname, want_type, *normalizers):  # noqa: N805\n        <IND>def inner(method):\n            <IND>@wraps(method)\n            def wrapper(self, arg, *other_args):\n                <IND>if arg is None:\n                    <IND>pass\n                <DED>elif isinstance(arg, str) and want_type is int or isinstance(arg, int) and want_type is str:\n                    <IND>arg = want_type(arg)\n                <DED>elif not isinstance(arg, want_type):\n                    <IND>raise RuntimeError('unexpected type {} for {} (expected {})'.format(arg.__class__.__name__, fieldname, want_type.__name__))\n                <DED>value = self._apply_normalizers(arg, fieldname, normalizers)\n                if value:\n                    <IND>return method(self, value, *other_args)\n            <DED><DED>return wrapper\n        <DED>return inner\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n\n<DED><DED>def _omnivorous_setter(fieldname: str, want_type: Type[Any], *normalizers: NormalizerFunction) -> Callable[[Callable[..., Any]], Any]:\n    <IND>def inner(method: Callable[..., Any]) -> Callable[..., Any]:\n        <IND>@wraps(method)\n        def wrapper(self: PackageMakerBase, *args: Any) -> Any:\n            <IND>values = self._normalize_args(args, fieldname, want_type, normalizers)\n            if values:\n                <IND>return method(self, *values)\n        <DED><DED>return wrapper\n    <DED>return inner\n\n\n<DED>def _simple_setter(fieldname: str, want_type: Type[Any], *normalizers: NormalizerFunction) -> Callable[[Callable[..., Any]], Any]:\n    <IND>def inner(method: Callable[..., Any]) -> Callable[..., Any]:\n        <IND>@wraps(method)\n        def wrapper(self: PackageMakerBase, arg: Any, *other_args: Any) -> Any:\n            <IND>if arg is None:\n                <IND>pass\n            <DED>elif isinstance(arg, str) and want_type is int or isinstance(arg, int) and want_type is str:\n                <IND>arg = want_type(arg)\n            <DED>elif not isinstance(arg, want_type):\n                <IND>raise RuntimeError('unexpected type {} for {} (expected {})'.format(arg.__class__.__name__, fieldname, want_type.__name__))\n            <DED>value = self._apply_normalizers(arg, fieldname, normalizers)\n            if value:\n                <IND>return method(self, value, *other_args)\n        <DED><DED>return wrapper\n    <DED>return inner\n\n\n<DED>def _extend_unique(existing: List[str], iterable: Iterable[str]) -> None:\n    <IND>seen = set(existing) if existing else set()\n\n    for value in iterable:\n        <IND>if value not in seen:\n            <IND>seen.add(value)\n            existing.append(value)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "class PackageMaker(PackageMakerBase):\n    _package: Package\n    _ident: Optional[str]\n",
        "source_code_len": 86,
        "target_code": "class PackageMaker(PackageMakerBase):\n    _package: PackageTemplate\n    _ident: Optional[str]\n",
        "target_code_len": 94,
        "diff_format": "@@ -120,3 +190,3 @@\n class PackageMaker(PackageMakerBase):\n-    _package: Package\n+    _package: PackageTemplate\n     _ident: Optional[str]\n",
        "source_code_with_indent": "<DED><DED>class PackageMaker(PackageMakerBase):\n    <IND>_package: Package\n    _ident: Optional[str]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED><DED><DED>class PackageMaker(PackageMakerBase):\n    <IND>_package: PackageTemplate\n    _ident: Optional[str]\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        super(PackageMaker, self).__init__(logger)\n        self._package = Package()\n        self._ident = ident\n",
        "source_code_len": 113,
        "target_code": "        super(PackageMaker, self).__init__(logger)\n        self._package = PackageTemplate()\n        self._ident = ident\n",
        "target_code_len": 121,
        "diff_format": "@@ -127,3 +197,3 @@\n         super(PackageMaker, self).__init__(logger)\n-        self._package = Package()\n+        self._package = PackageTemplate()\n         self._ident = ident\n",
        "source_code_with_indent": "        <IND>super(PackageMaker, self).__init__(logger)\n        self._package = Package()\n        self._ident = ident\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>super(PackageMaker, self).__init__(logger)\n        self._package = PackageTemplate()\n        self._ident = ident\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    @PackageMakerBase._simple_setter('origin', str, nzs.strip, nzs.forbid_newlines)\n    def set_origin(self, origin: str) -> None:\n",
        "source_code_len": 132,
        "target_code": "\n    @_simple_setter('origin', str, nzs.strip, nzs.forbid_newlines)\n    def set_origin(self, origin: str) -> None:\n",
        "target_code_len": 115,
        "diff_format": "@@ -135,3 +205,3 @@\n \n-    @PackageMakerBase._simple_setter('origin', str, nzs.strip, nzs.forbid_newlines)\n+    @_simple_setter('origin', str, nzs.strip, nzs.forbid_newlines)\n     def set_origin(self, origin: str) -> None:\n",
        "source_code_with_indent": "\n    <DED>@PackageMakerBase._simple_setter('origin', str, nzs.strip, nzs.forbid_newlines)\n    def set_origin(self, origin: str) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>@_simple_setter('origin', str, nzs.strip, nzs.forbid_newlines)\n    def set_origin(self, origin: str) -> None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    @PackageMakerBase._simple_setter('name', str, nzs.strip, nzs.forbid_newlines)\n    def set_name(self, name: str) -> None:\n",
        "source_code_len": 126,
        "target_code": "\n    @_simple_setter('name', str, nzs.strip, nzs.forbid_newlines)\n    def set_name(self, name: str) -> None:\n",
        "target_code_len": 109,
        "diff_format": "@@ -140,3 +210,3 @@\n \n-    @PackageMakerBase._simple_setter('name', str, nzs.strip, nzs.forbid_newlines)\n+    @_simple_setter('name', str, nzs.strip, nzs.forbid_newlines)\n     def set_name(self, name: str) -> None:\n",
        "source_code_with_indent": "\n    <DED>@PackageMakerBase._simple_setter('name', str, nzs.strip, nzs.forbid_newlines)\n    def set_name(self, name: str) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>@_simple_setter('name', str, nzs.strip, nzs.forbid_newlines)\n    def set_name(self, name: str) -> None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    @PackageMakerBase._simple_setter('basename', str, nzs.strip, nzs.forbid_newlines)\n    def set_basename(self, basename: str) -> None:\n",
        "source_code_len": 138,
        "target_code": "\n    @_simple_setter('basename', str, nzs.strip, nzs.forbid_newlines)\n    def set_basename(self, basename: str) -> None:\n",
        "target_code_len": 121,
        "diff_format": "@@ -144,3 +214,3 @@\n \n-    @PackageMakerBase._simple_setter('basename', str, nzs.strip, nzs.forbid_newlines)\n+    @_simple_setter('basename', str, nzs.strip, nzs.forbid_newlines)\n     def set_basename(self, basename: str) -> None:\n",
        "source_code_with_indent": "\n    <DED>@PackageMakerBase._simple_setter('basename', str, nzs.strip, nzs.forbid_newlines)\n    def set_basename(self, basename: str) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>@_simple_setter('basename', str, nzs.strip, nzs.forbid_newlines)\n    def set_basename(self, basename: str) -> None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def prefix_name(self, prefix: str) -> None:\n        self._package.name = prefix + self._package.name\n\n    @PackageMakerBase._simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n    def set_version(self, version: str, version_normalizer: Optional[Callable[[str], str]] = None) -> None:\n",
        "source_code_len": 299,
        "target_code": "    def prefix_name(self, prefix: str) -> None:\n        assert(self._package.name)\n        self._package.name = prefix + self._package.name\n\n    @_simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n    def set_version(self, version: str, version_normalizer: Optional[Callable[[str], str]] = None) -> None:\n",
        "target_code_len": 317,
        "diff_format": "@@ -149,5 +219,6 @@\n     def prefix_name(self, prefix: str) -> None:\n+        assert(self._package.name)\n         self._package.name = prefix + self._package.name\n \n-    @PackageMakerBase._simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n+    @_simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n     def set_version(self, version: str, version_normalizer: Optional[Callable[[str], str]] = None) -> None:\n",
        "source_code_with_indent": "    <DED>def prefix_name(self, prefix: str) -> None:\n        <IND>self._package.name = prefix + self._package.name\n\n    <DED>@PackageMakerBase._simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n    def set_version(self, version: str, version_normalizer: Optional[Callable[[str], str]] = None) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def prefix_name(self, prefix: str) -> None:\n        <IND>assert(self._package.name)\n        self._package.name = prefix + self._package.name\n\n    <DED>@_simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n    def set_version(self, version: str, version_normalizer: Optional[Callable[[str], str]] = None) -> None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    @PackageMakerBase._simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n    def set_rawversion(self, rawversion: str) -> None:\n",
        "source_code_len": 141,
        "target_code": "\n    @_simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n    def set_rawversion(self, rawversion: str) -> None:\n",
        "target_code_len": 124,
        "diff_format": "@@ -157,3 +228,3 @@\n \n-    @PackageMakerBase._simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n+    @_simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n     def set_rawversion(self, rawversion: str) -> None:\n",
        "source_code_with_indent": "\n    <DED>@PackageMakerBase._simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n    def set_rawversion(self, rawversion: str) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>@_simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n    def set_rawversion(self, rawversion: str) -> None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    @PackageMakerBase._simple_setter('arch', str, nzs.strip, nzs.forbid_newlines)\n    def set_arch(self, arch: str) -> None:\n",
        "source_code_len": 126,
        "target_code": "\n    @_simple_setter('arch', str, nzs.strip, nzs.forbid_newlines)\n    def set_arch(self, arch: str) -> None:\n",
        "target_code_len": 109,
        "diff_format": "@@ -167,3 +238,3 @@\n \n-    @PackageMakerBase._simple_setter('arch', str, nzs.strip, nzs.forbid_newlines)\n+    @_simple_setter('arch', str, nzs.strip, nzs.forbid_newlines)\n     def set_arch(self, arch: str) -> None:\n",
        "source_code_with_indent": "\n    <DED>@PackageMakerBase._simple_setter('arch', str, nzs.strip, nzs.forbid_newlines)\n    def set_arch(self, arch: str) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>@_simple_setter('arch', str, nzs.strip, nzs.forbid_newlines)\n    def set_arch(self, arch: str) -> None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    @PackageMakerBase._simple_setter('subrepo', str, nzs.strip, nzs.forbid_newlines)\n    def set_subrepo(self, subrepo: str) -> None:\n",
        "source_code_len": 135,
        "target_code": "\n    @_simple_setter('subrepo', str, nzs.strip, nzs.forbid_newlines)\n    def set_subrepo(self, subrepo: str) -> None:\n",
        "target_code_len": 118,
        "diff_format": "@@ -171,3 +242,3 @@\n \n-    @PackageMakerBase._simple_setter('subrepo', str, nzs.strip, nzs.forbid_newlines)\n+    @_simple_setter('subrepo', str, nzs.strip, nzs.forbid_newlines)\n     def set_subrepo(self, subrepo: str) -> None:\n",
        "source_code_with_indent": "\n    <DED>@PackageMakerBase._simple_setter('subrepo', str, nzs.strip, nzs.forbid_newlines)\n    def set_subrepo(self, subrepo: str) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>@_simple_setter('subrepo', str, nzs.strip, nzs.forbid_newlines)\n    def set_subrepo(self, subrepo: str) -> None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    @PackageMakerBase._simple_setter('summary', str, nzs.strip)\n    def set_summary(self, summary: str) -> None:\n        self._package.comment = summary\n\n    @PackageMakerBase._omnivorous_setter('maintainer', str, nzs.strip, nzs.forbid_newlines, nzs.tolower)\n    def add_maintainers(self, *args: Any) -> None:\n        self._package.maintainers.extend(_iter_unique(args, self._package.maintainers))\n\n    @PackageMakerBase._omnivorous_setter('category', str, nzs.strip, nzs.forbid_newlines)\n    def add_categories(self, *args: Any) -> None:\n        # XXX: convert into array\n        if not self._package.category:\n            self._package.category = args[0]\n\n    @PackageMakerBase._omnivorous_setter('homepage', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n    def add_homepages(self, *args: Any) -> None:\n        # XXX: convert into array\n        if not self._package.homepage:\n            self._package.homepage = args[0]\n\n    @PackageMakerBase._omnivorous_setter('license', str, nzs.strip, nzs.forbid_newlines)\n    def add_licenses(self, *args: Any) -> None:\n        self._package.licenses.extend(args)\n\n    @PackageMakerBase._omnivorous_setter('download', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n    def add_downloads(self, *args: Any) -> None:\n        self._package.downloads.extend(_iter_unique(args, self._package.downloads))\n\n    def set_flags(self, mask: int, is_set: bool = True) -> None:\n        self._package.set_flag(mask, is_set)\n\n",
        "source_code_len": 1494,
        "target_code": "\n    @_simple_setter('summary', str, nzs.strip)\n    def set_summary(self, summary: str) -> None:\n        self._package.summary = summary\n\n    @_omnivorous_setter('maintainer', str, nzs.strip, nzs.forbid_newlines, nzs.tolower)\n    def add_maintainers(self, *args: Any) -> None:\n        _extend_unique(self._package.maintainers, args)\n\n    @_omnivorous_setter('category', str, nzs.strip, nzs.forbid_newlines)\n    def add_categories(self, *args: Any) -> None:\n        _extend_unique(self._package.categories, args)\n\n    @_omnivorous_setter('homepage', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n    def add_homepages(self, *args: Any) -> None:\n        _extend_unique(self._package.homepages, args)\n\n    @_omnivorous_setter('license', str, nzs.strip, nzs.forbid_newlines)\n    def add_licenses(self, *args: Any) -> None:\n        _extend_unique(self._package.licenses, args)\n\n    @_omnivorous_setter('download', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n    def add_downloads(self, *args: Any) -> None:\n        _extend_unique(self._package.downloads, args)\n\n    def set_flags(self, mask: int, is_set: bool = True) -> None:\n        if is_set:\n            self._package.flags |= mask\n        else:\n            self._package.flags &= ~mask\n\n",
        "target_code_len": 1281,
        "diff_format": "@@ -175,32 +246,31 @@\n \n-    @PackageMakerBase._simple_setter('summary', str, nzs.strip)\n+    @_simple_setter('summary', str, nzs.strip)\n     def set_summary(self, summary: str) -> None:\n-        self._package.comment = summary\n-\n-    @PackageMakerBase._omnivorous_setter('maintainer', str, nzs.strip, nzs.forbid_newlines, nzs.tolower)\n+        self._package.summary = summary\n+\n+    @_omnivorous_setter('maintainer', str, nzs.strip, nzs.forbid_newlines, nzs.tolower)\n     def add_maintainers(self, *args: Any) -> None:\n-        self._package.maintainers.extend(_iter_unique(args, self._package.maintainers))\n-\n-    @PackageMakerBase._omnivorous_setter('category', str, nzs.strip, nzs.forbid_newlines)\n+        _extend_unique(self._package.maintainers, args)\n+\n+    @_omnivorous_setter('category', str, nzs.strip, nzs.forbid_newlines)\n     def add_categories(self, *args: Any) -> None:\n-        # XXX: convert into array\n-        if not self._package.category:\n-            self._package.category = args[0]\n-\n-    @PackageMakerBase._omnivorous_setter('homepage', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n+        _extend_unique(self._package.categories, args)\n+\n+    @_omnivorous_setter('homepage', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n     def add_homepages(self, *args: Any) -> None:\n-        # XXX: convert into array\n-        if not self._package.homepage:\n-            self._package.homepage = args[0]\n-\n-    @PackageMakerBase._omnivorous_setter('license', str, nzs.strip, nzs.forbid_newlines)\n+        _extend_unique(self._package.homepages, args)\n+\n+    @_omnivorous_setter('license', str, nzs.strip, nzs.forbid_newlines)\n     def add_licenses(self, *args: Any) -> None:\n-        self._package.licenses.extend(args)\n-\n-    @PackageMakerBase._omnivorous_setter('download', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n+        _extend_unique(self._package.licenses, args)\n+\n+    @_omnivorous_setter('download', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n     def add_downloads(self, *args: Any) -> None:\n-        self._package.downloads.extend(_iter_unique(args, self._package.downloads))\n+        _extend_unique(self._package.downloads, args)\n \n     def set_flags(self, mask: int, is_set: bool = True) -> None:\n-        self._package.set_flag(mask, is_set)\n+        if is_set:\n+            self._package.flags |= mask\n+        else:\n+            self._package.flags &= ~mask\n \n",
        "source_code_with_indent": "\n    <DED>@PackageMakerBase._simple_setter('summary', str, nzs.strip)\n    def set_summary(self, summary: str) -> None:\n        <IND>self._package.comment = summary\n\n    <DED>@PackageMakerBase._omnivorous_setter('maintainer', str, nzs.strip, nzs.forbid_newlines, nzs.tolower)\n    def add_maintainers(self, *args: Any) -> None:\n        <IND>self._package.maintainers.extend(_iter_unique(args, self._package.maintainers))\n\n    <DED>@PackageMakerBase._omnivorous_setter('category', str, nzs.strip, nzs.forbid_newlines)\n    def add_categories(self, *args: Any) -> None:\n        # XXX: convert into array\n        <IND>if not self._package.category:\n            <IND>self._package.category = args[0]\n\n    <DED><DED>@PackageMakerBase._omnivorous_setter('homepage', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n    def add_homepages(self, *args: Any) -> None:\n        # XXX: convert into array\n        <IND>if not self._package.homepage:\n            <IND>self._package.homepage = args[0]\n\n    <DED><DED>@PackageMakerBase._omnivorous_setter('license', str, nzs.strip, nzs.forbid_newlines)\n    def add_licenses(self, *args: Any) -> None:\n        <IND>self._package.licenses.extend(args)\n\n    <DED>@PackageMakerBase._omnivorous_setter('download', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n    def add_downloads(self, *args: Any) -> None:\n        <IND>self._package.downloads.extend(_iter_unique(args, self._package.downloads))\n\n    <DED>def set_flags(self, mask: int, is_set: bool = True) -> None:\n        <IND>self._package.set_flag(mask, is_set)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>@_simple_setter('summary', str, nzs.strip)\n    def set_summary(self, summary: str) -> None:\n        <IND>self._package.summary = summary\n\n    <DED>@_omnivorous_setter('maintainer', str, nzs.strip, nzs.forbid_newlines, nzs.tolower)\n    def add_maintainers(self, *args: Any) -> None:\n        <IND>_extend_unique(self._package.maintainers, args)\n\n    <DED>@_omnivorous_setter('category', str, nzs.strip, nzs.forbid_newlines)\n    def add_categories(self, *args: Any) -> None:\n        <IND>_extend_unique(self._package.categories, args)\n\n    <DED>@_omnivorous_setter('homepage', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n    def add_homepages(self, *args: Any) -> None:\n        <IND>_extend_unique(self._package.homepages, args)\n\n    <DED>@_omnivorous_setter('license', str, nzs.strip, nzs.forbid_newlines)\n    def add_licenses(self, *args: Any) -> None:\n        <IND>_extend_unique(self._package.licenses, args)\n\n    <DED>@_omnivorous_setter('download', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n    def add_downloads(self, *args: Any) -> None:\n        <IND>_extend_unique(self._package.downloads, args)\n\n    <DED>def set_flags(self, mask: int, is_set: bool = True) -> None:\n        <IND>if is_set:\n            <IND>self._package.flags |= mask\n        <DED>else:\n            <IND>self._package.flags &= ~mask\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def unwrap(self) -> Package:\n        return self._package\n\n",
        "source_code_len": 64,
        "target_code": "\n    def spawn(self, repo: str, family: str, subrepo: Optional[str] = None, shadow: bool = False, default_maintainer: Optional[str] = None) -> Package:\n        if self._package.name is None:\n            raise RuntimeError('Attempt to spawn Package with unset name')\n        if self._package.version is None:\n            raise RuntimeError('Attempt to spawn Package with unset version')\n\n        maintainers: List[str] = self._package.maintainers if self._package.maintainers else [default_maintainer] if default_maintainer else []\n\n        return Package(\n            repo=repo,\n            family=family,\n            subrepo=self._package.subrepo or subrepo,\n\n            name=self._package.name,\n            basename=self._package.basename,\n\n            version=self._package.version,\n            origversion=self._package.version,\n            rawversion=self._package.rawversion if self._package.rawversion is not None else self._package.version,\n\n            arch=self._package.arch,\n\n            maintainers=maintainers,\n            category=self._package.categories[0] if self._package.categories else None,  # XXX: convert to array\n            comment=self._package.summary,\n            homepage=self._package.homepages[0] if self._package.homepages else None,  # XXX: convert to array\n            licenses=self._package.licenses,\n            downloads=self._package.downloads,\n\n            flags=self._package.flags,\n            shadow=shadow,\n\n            extrafields=self._package.extrafields,\n        )\n\n",
        "target_code_len": 1515,
        "diff_format": "@@ -209,4 +279,36 @@\n \n-    def unwrap(self) -> Package:\n-        return self._package\n+    def spawn(self, repo: str, family: str, subrepo: Optional[str] = None, shadow: bool = False, default_maintainer: Optional[str] = None) -> Package:\n+        if self._package.name is None:\n+            raise RuntimeError('Attempt to spawn Package with unset name')\n+        if self._package.version is None:\n+            raise RuntimeError('Attempt to spawn Package with unset version')\n+\n+        maintainers: List[str] = self._package.maintainers if self._package.maintainers else [default_maintainer] if default_maintainer else []\n+\n+        return Package(\n+            repo=repo,\n+            family=family,\n+            subrepo=self._package.subrepo or subrepo,\n+\n+            name=self._package.name,\n+            basename=self._package.basename,\n+\n+            version=self._package.version,\n+            origversion=self._package.version,\n+            rawversion=self._package.rawversion if self._package.rawversion is not None else self._package.version,\n+\n+            arch=self._package.arch,\n+\n+            maintainers=maintainers,\n+            category=self._package.categories[0] if self._package.categories else None,  # XXX: convert to array\n+            comment=self._package.summary,\n+            homepage=self._package.homepages[0] if self._package.homepages else None,  # XXX: convert to array\n+            licenses=self._package.licenses,\n+            downloads=self._package.downloads,\n+\n+            flags=self._package.flags,\n+            shadow=shadow,\n+\n+            extrafields=self._package.extrafields,\n+        )\n \n",
        "source_code_with_indent": "\n    <DED>def unwrap(self) -> Package:\n        <IND>return self._package\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def spawn(self, repo: str, family: str, subrepo: Optional[str] = None, shadow: bool = False, default_maintainer: Optional[str] = None) -> Package:\n        <IND>if self._package.name is None:\n            <IND>raise RuntimeError('Attempt to spawn Package with unset name')\n        <DED>if self._package.version is None:\n            <IND>raise RuntimeError('Attempt to spawn Package with unset version')\n\n        <DED>maintainers: List[str] = self._package.maintainers if self._package.maintainers else [default_maintainer] if default_maintainer else []\n\n        return Package(\n            repo=repo,\n            family=family,\n            subrepo=self._package.subrepo or subrepo,\n\n            name=self._package.name,\n            basename=self._package.basename,\n\n            version=self._package.version,\n            origversion=self._package.version,\n            rawversion=self._package.rawversion if self._package.rawversion is not None else self._package.version,\n\n            arch=self._package.arch,\n\n            maintainers=maintainers,\n            category=self._package.categories[0] if self._package.categories else None,  # XXX: convert to array\n            comment=self._package.summary,\n            homepage=self._package.homepages[0] if self._package.homepages else None,  # XXX: convert to array\n            licenses=self._package.licenses,\n            downloads=self._package.downloads,\n\n            flags=self._package.flags,\n            shadow=shadow,\n\n            extrafields=self._package.extrafields,\n        )\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "repology/repology-updater",
    "commit": "9f67d556944fe256c990593f673713e299feaf8a",
    "filename": "repology/packagemaker/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/repology-repology-updater/repology/packagemaker/__init__.py",
    "file_hunks_size": 17,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "repology/packagemaker/__init__.py:141:37 Incompatible parameter type [6]: Expected `PackageMakerBase` for 1st positional only parameter to call `PackageMakerBase._simple_setter` but got `str`.",
    "message": " Expected `PackageMakerBase` for 1st positional only parameter to call `PackageMakerBase._simple_setter` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 141,
    "warning_line": "    @PackageMakerBase._simple_setter('name', str, nzs.strip, nzs.forbid_newlines)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from functools import wraps\nfrom typing import Any, Callable, Iterable, Optional\n\nfrom repology.logger import Logger\nfrom repology.package import Package\nfrom repology.packagemaker import normalizers as nzs\n\n",
        "source_code_len": 208,
        "target_code": "from functools import wraps\nfrom typing import Any, Callable, Dict, Iterable, List, Optional, Type\n\nfrom repology.logger import Logger\nfrom repology.package import Package, PackageStatus\nfrom repology.packagemaker import normalizers as nzs\nfrom repology.packagemaker.normalizers import NormalizerFunction\n\n",
        "target_code_len": 306,
        "diff_format": "@@ -24,7 +22,8 @@\n from functools import wraps\n-from typing import Any, Callable, Iterable, Optional\n+from typing import Any, Callable, Dict, Iterable, List, Optional, Type\n \n from repology.logger import Logger\n-from repology.package import Package\n+from repology.package import Package, PackageStatus\n from repology.packagemaker import normalizers as nzs\n+from repology.packagemaker.normalizers import NormalizerFunction\n \n",
        "source_code_with_indent": "from functools import wraps\nfrom typing import Any, Callable, Iterable, Optional\n\nfrom repology.logger import Logger\nfrom repology.package import Package\nfrom repology.packagemaker import normalizers as nzs\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from functools import wraps\nfrom typing import Any, Callable, Dict, Iterable, List, Optional, Type\n\nfrom repology.logger import Logger\nfrom repology.package import Package, PackageStatus\nfrom repology.packagemaker import normalizers as nzs\nfrom repology.packagemaker.normalizers import NormalizerFunction\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _iter_unique(iterable, existing=None):\n    seen = set(existing) if existing else set()\n    for value in iterable:\n        if value not in seen:\n            seen.add(value)\n            yield value\n\n",
        "source_code_len": 202,
        "target_code": "\nclass PackageTemplate:\n    __slots__ = [\n        'subrepo',\n\n        'name',\n        'basename',\n\n        'version',\n        'origversion',\n        'rawversion',\n\n        'arch',\n        'summary',\n        'maintainers',\n        'categories',\n        'homepages',\n        'licenses',\n        'downloads',\n\n        'flags',\n\n        'extrafields',\n    ]\n\n    subrepo: Optional[str]\n\n    name: Optional[str]\n    basename: Optional[str]\n\n    version: Optional[str]\n    origversion: Optional[str]\n    rawversion: Optional[str]\n\n    arch: Optional[str]\n    summary: Optional[str]\n    maintainers: List[str]\n    categories: List[str]\n    homepages: List[str]\n    licenses: List[str]\n    downloads: List[str]\n\n    flags: int\n\n    extrafields: Dict[str, str]\n\n    def __init__(self) -> None:\n        self.subrepo = None\n\n        self.name = None\n        self.basename = None\n\n        self.version = None\n        self.origversion = None\n        self.rawversion = None\n\n        self.arch = None\n        self.summary = None\n        self.maintainers = []\n        self.categories = []\n        self.homepages = []\n        self.licenses = []\n        self.downloads = []\n\n        self.flags = 0\n\n        self.extrafields = {}\n\n",
        "target_code_len": 1212,
        "diff_format": "@@ -34,8 +33,68 @@\n \n-def _iter_unique(iterable, existing=None):\n-    seen = set(existing) if existing else set()\n-    for value in iterable:\n-        if value not in seen:\n-            seen.add(value)\n-            yield value\n+class PackageTemplate:\n+    __slots__ = [\n+        'subrepo',\n+\n+        'name',\n+        'basename',\n+\n+        'version',\n+        'origversion',\n+        'rawversion',\n+\n+        'arch',\n+        'summary',\n+        'maintainers',\n+        'categories',\n+        'homepages',\n+        'licenses',\n+        'downloads',\n+\n+        'flags',\n+\n+        'extrafields',\n+    ]\n+\n+    subrepo: Optional[str]\n+\n+    name: Optional[str]\n+    basename: Optional[str]\n+\n+    version: Optional[str]\n+    origversion: Optional[str]\n+    rawversion: Optional[str]\n+\n+    arch: Optional[str]\n+    summary: Optional[str]\n+    maintainers: List[str]\n+    categories: List[str]\n+    homepages: List[str]\n+    licenses: List[str]\n+    downloads: List[str]\n+\n+    flags: int\n+\n+    extrafields: Dict[str, str]\n+\n+    def __init__(self) -> None:\n+        self.subrepo = None\n+\n+        self.name = None\n+        self.basename = None\n+\n+        self.version = None\n+        self.origversion = None\n+        self.rawversion = None\n+\n+        self.arch = None\n+        self.summary = None\n+        self.maintainers = []\n+        self.categories = []\n+        self.homepages = []\n+        self.licenses = []\n+        self.downloads = []\n+\n+        self.flags = 0\n+\n+        self.extrafields = {}\n \n",
        "source_code_with_indent": "\ndef _iter_unique(iterable, existing=None):\n    <IND>seen = set(existing) if existing else set()\n    for value in iterable:\n        <IND>if value not in seen:\n            <IND>seen.add(value)\n            yield value\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nclass PackageTemplate:\n    <IND>__slots__ = [\n        'subrepo',\n\n        'name',\n        'basename',\n\n        'version',\n        'origversion',\n        'rawversion',\n\n        'arch',\n        'summary',\n        'maintainers',\n        'categories',\n        'homepages',\n        'licenses',\n        'downloads',\n\n        'flags',\n\n        'extrafields',\n    ]\n\n    subrepo: Optional[str]\n\n    name: Optional[str]\n    basename: Optional[str]\n\n    version: Optional[str]\n    origversion: Optional[str]\n    rawversion: Optional[str]\n\n    arch: Optional[str]\n    summary: Optional[str]\n    maintainers: List[str]\n    categories: List[str]\n    homepages: List[str]\n    licenses: List[str]\n    downloads: List[str]\n\n    flags: int\n\n    extrafields: Dict[str, str]\n\n    def __init__(self) -> None:\n        <IND>self.subrepo = None\n\n        self.name = None\n        self.basename = None\n\n        self.version = None\n        self.origversion = None\n        self.rawversion = None\n\n        self.arch = None\n        self.summary = None\n        self.maintainers = []\n        self.categories = []\n        self.homepages = []\n        self.licenses = []\n        self.downloads = []\n\n        self.flags = 0\n\n        self.extrafields = {}\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _omnivorous_setter(fieldname, want_type, *normalizers):  # noqa: N805\n        def inner(method):\n            @wraps(method)\n            def wrapper(self, *args):\n                values = self._normalize_args(args, fieldname, want_type, normalizers)\n                if values:\n                    return method(self, *values)\n            return wrapper\n        return inner\n\n    def _simple_setter(fieldname, want_type, *normalizers):  # noqa: N805\n        def inner(method):\n            @wraps(method)\n            def wrapper(self, arg, *other_args):\n                if arg is None:\n                    pass\n                elif isinstance(arg, str) and want_type is int or isinstance(arg, int) and want_type is str:\n                    arg = want_type(arg)\n                elif not isinstance(arg, want_type):\n                    raise RuntimeError('unexpected type {} for {} (expected {})'.format(arg.__class__.__name__, fieldname, want_type.__name__))\n                value = self._apply_normalizers(arg, fieldname, normalizers)\n                if value:\n                    return method(self, value, *other_args)\n            return wrapper\n        return inner\n\n",
        "source_code_len": 1176,
        "target_code": "\n\ndef _omnivorous_setter(fieldname: str, want_type: Type[Any], *normalizers: NormalizerFunction) -> Callable[[Callable[..., Any]], Any]:\n    def inner(method: Callable[..., Any]) -> Callable[..., Any]:\n        @wraps(method)\n        def wrapper(self: PackageMakerBase, *args: Any) -> Any:\n            values = self._normalize_args(args, fieldname, want_type, normalizers)\n            if values:\n                return method(self, *values)\n        return wrapper\n    return inner\n\n\ndef _simple_setter(fieldname: str, want_type: Type[Any], *normalizers: NormalizerFunction) -> Callable[[Callable[..., Any]], Any]:\n    def inner(method: Callable[..., Any]) -> Callable[..., Any]:\n        @wraps(method)\n        def wrapper(self: PackageMakerBase, arg: Any, *other_args: Any) -> Any:\n            if arg is None:\n                pass\n            elif isinstance(arg, str) and want_type is int or isinstance(arg, int) and want_type is str:\n                arg = want_type(arg)\n            elif not isinstance(arg, want_type):\n                raise RuntimeError('unexpected type {} for {} (expected {})'.format(arg.__class__.__name__, fieldname, want_type.__name__))\n            value = self._apply_normalizers(arg, fieldname, normalizers)\n            if value:\n                return method(self, value, *other_args)\n        return wrapper\n    return inner\n\n\ndef _extend_unique(existing: List[str], iterable: Iterable[str]) -> None:\n    seen = set(existing) if existing else set()\n\n    for value in iterable:\n        if value not in seen:\n            seen.add(value)\n            existing.append(value)\n\n",
        "target_code_len": 1598,
        "diff_format": "@@ -92,27 +151,38 @@\n \n-    def _omnivorous_setter(fieldname, want_type, *normalizers):  # noqa: N805\n-        def inner(method):\n-            @wraps(method)\n-            def wrapper(self, *args):\n-                values = self._normalize_args(args, fieldname, want_type, normalizers)\n-                if values:\n-                    return method(self, *values)\n-            return wrapper\n-        return inner\n-\n-    def _simple_setter(fieldname, want_type, *normalizers):  # noqa: N805\n-        def inner(method):\n-            @wraps(method)\n-            def wrapper(self, arg, *other_args):\n-                if arg is None:\n-                    pass\n-                elif isinstance(arg, str) and want_type is int or isinstance(arg, int) and want_type is str:\n-                    arg = want_type(arg)\n-                elif not isinstance(arg, want_type):\n-                    raise RuntimeError('unexpected type {} for {} (expected {})'.format(arg.__class__.__name__, fieldname, want_type.__name__))\n-                value = self._apply_normalizers(arg, fieldname, normalizers)\n-                if value:\n-                    return method(self, value, *other_args)\n-            return wrapper\n-        return inner\n+\n+def _omnivorous_setter(fieldname: str, want_type: Type[Any], *normalizers: NormalizerFunction) -> Callable[[Callable[..., Any]], Any]:\n+    def inner(method: Callable[..., Any]) -> Callable[..., Any]:\n+        @wraps(method)\n+        def wrapper(self: PackageMakerBase, *args: Any) -> Any:\n+            values = self._normalize_args(args, fieldname, want_type, normalizers)\n+            if values:\n+                return method(self, *values)\n+        return wrapper\n+    return inner\n+\n+\n+def _simple_setter(fieldname: str, want_type: Type[Any], *normalizers: NormalizerFunction) -> Callable[[Callable[..., Any]], Any]:\n+    def inner(method: Callable[..., Any]) -> Callable[..., Any]:\n+        @wraps(method)\n+        def wrapper(self: PackageMakerBase, arg: Any, *other_args: Any) -> Any:\n+            if arg is None:\n+                pass\n+            elif isinstance(arg, str) and want_type is int or isinstance(arg, int) and want_type is str:\n+                arg = want_type(arg)\n+            elif not isinstance(arg, want_type):\n+                raise RuntimeError('unexpected type {} for {} (expected {})'.format(arg.__class__.__name__, fieldname, want_type.__name__))\n+            value = self._apply_normalizers(arg, fieldname, normalizers)\n+            if value:\n+                return method(self, value, *other_args)\n+        return wrapper\n+    return inner\n+\n+\n+def _extend_unique(existing: List[str], iterable: Iterable[str]) -> None:\n+    seen = set(existing) if existing else set()\n+\n+    for value in iterable:\n+        if value not in seen:\n+            seen.add(value)\n+            existing.append(value)\n \n",
        "source_code_with_indent": "\n    <DED>def _omnivorous_setter(fieldname, want_type, *normalizers):  # noqa: N805\n        <IND>def inner(method):\n            <IND>@wraps(method)\n            def wrapper(self, *args):\n                <IND>values = self._normalize_args(args, fieldname, want_type, normalizers)\n                if values:\n                    <IND>return method(self, *values)\n            <DED><DED>return wrapper\n        <DED>return inner\n\n    <DED>def _simple_setter(fieldname, want_type, *normalizers):  # noqa: N805\n        <IND>def inner(method):\n            <IND>@wraps(method)\n            def wrapper(self, arg, *other_args):\n                <IND>if arg is None:\n                    <IND>pass\n                <DED>elif isinstance(arg, str) and want_type is int or isinstance(arg, int) and want_type is str:\n                    <IND>arg = want_type(arg)\n                <DED>elif not isinstance(arg, want_type):\n                    <IND>raise RuntimeError('unexpected type {} for {} (expected {})'.format(arg.__class__.__name__, fieldname, want_type.__name__))\n                <DED>value = self._apply_normalizers(arg, fieldname, normalizers)\n                if value:\n                    <IND>return method(self, value, *other_args)\n            <DED><DED>return wrapper\n        <DED>return inner\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n\n<DED><DED>def _omnivorous_setter(fieldname: str, want_type: Type[Any], *normalizers: NormalizerFunction) -> Callable[[Callable[..., Any]], Any]:\n    <IND>def inner(method: Callable[..., Any]) -> Callable[..., Any]:\n        <IND>@wraps(method)\n        def wrapper(self: PackageMakerBase, *args: Any) -> Any:\n            <IND>values = self._normalize_args(args, fieldname, want_type, normalizers)\n            if values:\n                <IND>return method(self, *values)\n        <DED><DED>return wrapper\n    <DED>return inner\n\n\n<DED>def _simple_setter(fieldname: str, want_type: Type[Any], *normalizers: NormalizerFunction) -> Callable[[Callable[..., Any]], Any]:\n    <IND>def inner(method: Callable[..., Any]) -> Callable[..., Any]:\n        <IND>@wraps(method)\n        def wrapper(self: PackageMakerBase, arg: Any, *other_args: Any) -> Any:\n            <IND>if arg is None:\n                <IND>pass\n            <DED>elif isinstance(arg, str) and want_type is int or isinstance(arg, int) and want_type is str:\n                <IND>arg = want_type(arg)\n            <DED>elif not isinstance(arg, want_type):\n                <IND>raise RuntimeError('unexpected type {} for {} (expected {})'.format(arg.__class__.__name__, fieldname, want_type.__name__))\n            <DED>value = self._apply_normalizers(arg, fieldname, normalizers)\n            if value:\n                <IND>return method(self, value, *other_args)\n        <DED><DED>return wrapper\n    <DED>return inner\n\n\n<DED>def _extend_unique(existing: List[str], iterable: Iterable[str]) -> None:\n    <IND>seen = set(existing) if existing else set()\n\n    for value in iterable:\n        <IND>if value not in seen:\n            <IND>seen.add(value)\n            existing.append(value)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "class PackageMaker(PackageMakerBase):\n    _package: Package\n    _ident: Optional[str]\n",
        "source_code_len": 86,
        "target_code": "class PackageMaker(PackageMakerBase):\n    _package: PackageTemplate\n    _ident: Optional[str]\n",
        "target_code_len": 94,
        "diff_format": "@@ -120,3 +190,3 @@\n class PackageMaker(PackageMakerBase):\n-    _package: Package\n+    _package: PackageTemplate\n     _ident: Optional[str]\n",
        "source_code_with_indent": "<DED><DED>class PackageMaker(PackageMakerBase):\n    <IND>_package: Package\n    _ident: Optional[str]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED><DED><DED>class PackageMaker(PackageMakerBase):\n    <IND>_package: PackageTemplate\n    _ident: Optional[str]\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        super(PackageMaker, self).__init__(logger)\n        self._package = Package()\n        self._ident = ident\n",
        "source_code_len": 113,
        "target_code": "        super(PackageMaker, self).__init__(logger)\n        self._package = PackageTemplate()\n        self._ident = ident\n",
        "target_code_len": 121,
        "diff_format": "@@ -127,3 +197,3 @@\n         super(PackageMaker, self).__init__(logger)\n-        self._package = Package()\n+        self._package = PackageTemplate()\n         self._ident = ident\n",
        "source_code_with_indent": "        <IND>super(PackageMaker, self).__init__(logger)\n        self._package = Package()\n        self._ident = ident\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>super(PackageMaker, self).__init__(logger)\n        self._package = PackageTemplate()\n        self._ident = ident\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    @PackageMakerBase._simple_setter('origin', str, nzs.strip, nzs.forbid_newlines)\n    def set_origin(self, origin: str) -> None:\n",
        "source_code_len": 132,
        "target_code": "\n    @_simple_setter('origin', str, nzs.strip, nzs.forbid_newlines)\n    def set_origin(self, origin: str) -> None:\n",
        "target_code_len": 115,
        "diff_format": "@@ -135,3 +205,3 @@\n \n-    @PackageMakerBase._simple_setter('origin', str, nzs.strip, nzs.forbid_newlines)\n+    @_simple_setter('origin', str, nzs.strip, nzs.forbid_newlines)\n     def set_origin(self, origin: str) -> None:\n",
        "source_code_with_indent": "\n    <DED>@PackageMakerBase._simple_setter('origin', str, nzs.strip, nzs.forbid_newlines)\n    def set_origin(self, origin: str) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>@_simple_setter('origin', str, nzs.strip, nzs.forbid_newlines)\n    def set_origin(self, origin: str) -> None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    @PackageMakerBase._simple_setter('name', str, nzs.strip, nzs.forbid_newlines)\n    def set_name(self, name: str) -> None:\n",
        "source_code_len": 126,
        "target_code": "\n    @_simple_setter('name', str, nzs.strip, nzs.forbid_newlines)\n    def set_name(self, name: str) -> None:\n",
        "target_code_len": 109,
        "diff_format": "@@ -140,3 +210,3 @@\n \n-    @PackageMakerBase._simple_setter('name', str, nzs.strip, nzs.forbid_newlines)\n+    @_simple_setter('name', str, nzs.strip, nzs.forbid_newlines)\n     def set_name(self, name: str) -> None:\n",
        "source_code_with_indent": "\n    <DED>@PackageMakerBase._simple_setter('name', str, nzs.strip, nzs.forbid_newlines)\n    def set_name(self, name: str) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>@_simple_setter('name', str, nzs.strip, nzs.forbid_newlines)\n    def set_name(self, name: str) -> None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    @PackageMakerBase._simple_setter('basename', str, nzs.strip, nzs.forbid_newlines)\n    def set_basename(self, basename: str) -> None:\n",
        "source_code_len": 138,
        "target_code": "\n    @_simple_setter('basename', str, nzs.strip, nzs.forbid_newlines)\n    def set_basename(self, basename: str) -> None:\n",
        "target_code_len": 121,
        "diff_format": "@@ -144,3 +214,3 @@\n \n-    @PackageMakerBase._simple_setter('basename', str, nzs.strip, nzs.forbid_newlines)\n+    @_simple_setter('basename', str, nzs.strip, nzs.forbid_newlines)\n     def set_basename(self, basename: str) -> None:\n",
        "source_code_with_indent": "\n    <DED>@PackageMakerBase._simple_setter('basename', str, nzs.strip, nzs.forbid_newlines)\n    def set_basename(self, basename: str) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>@_simple_setter('basename', str, nzs.strip, nzs.forbid_newlines)\n    def set_basename(self, basename: str) -> None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def prefix_name(self, prefix: str) -> None:\n        self._package.name = prefix + self._package.name\n\n    @PackageMakerBase._simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n    def set_version(self, version: str, version_normalizer: Optional[Callable[[str], str]] = None) -> None:\n",
        "source_code_len": 299,
        "target_code": "    def prefix_name(self, prefix: str) -> None:\n        assert(self._package.name)\n        self._package.name = prefix + self._package.name\n\n    @_simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n    def set_version(self, version: str, version_normalizer: Optional[Callable[[str], str]] = None) -> None:\n",
        "target_code_len": 317,
        "diff_format": "@@ -149,5 +219,6 @@\n     def prefix_name(self, prefix: str) -> None:\n+        assert(self._package.name)\n         self._package.name = prefix + self._package.name\n \n-    @PackageMakerBase._simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n+    @_simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n     def set_version(self, version: str, version_normalizer: Optional[Callable[[str], str]] = None) -> None:\n",
        "source_code_with_indent": "    <DED>def prefix_name(self, prefix: str) -> None:\n        <IND>self._package.name = prefix + self._package.name\n\n    <DED>@PackageMakerBase._simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n    def set_version(self, version: str, version_normalizer: Optional[Callable[[str], str]] = None) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def prefix_name(self, prefix: str) -> None:\n        <IND>assert(self._package.name)\n        self._package.name = prefix + self._package.name\n\n    <DED>@_simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n    def set_version(self, version: str, version_normalizer: Optional[Callable[[str], str]] = None) -> None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    @PackageMakerBase._simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n    def set_rawversion(self, rawversion: str) -> None:\n",
        "source_code_len": 141,
        "target_code": "\n    @_simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n    def set_rawversion(self, rawversion: str) -> None:\n",
        "target_code_len": 124,
        "diff_format": "@@ -157,3 +228,3 @@\n \n-    @PackageMakerBase._simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n+    @_simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n     def set_rawversion(self, rawversion: str) -> None:\n",
        "source_code_with_indent": "\n    <DED>@PackageMakerBase._simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n    def set_rawversion(self, rawversion: str) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>@_simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n    def set_rawversion(self, rawversion: str) -> None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    @PackageMakerBase._simple_setter('arch', str, nzs.strip, nzs.forbid_newlines)\n    def set_arch(self, arch: str) -> None:\n",
        "source_code_len": 126,
        "target_code": "\n    @_simple_setter('arch', str, nzs.strip, nzs.forbid_newlines)\n    def set_arch(self, arch: str) -> None:\n",
        "target_code_len": 109,
        "diff_format": "@@ -167,3 +238,3 @@\n \n-    @PackageMakerBase._simple_setter('arch', str, nzs.strip, nzs.forbid_newlines)\n+    @_simple_setter('arch', str, nzs.strip, nzs.forbid_newlines)\n     def set_arch(self, arch: str) -> None:\n",
        "source_code_with_indent": "\n    <DED>@PackageMakerBase._simple_setter('arch', str, nzs.strip, nzs.forbid_newlines)\n    def set_arch(self, arch: str) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>@_simple_setter('arch', str, nzs.strip, nzs.forbid_newlines)\n    def set_arch(self, arch: str) -> None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    @PackageMakerBase._simple_setter('subrepo', str, nzs.strip, nzs.forbid_newlines)\n    def set_subrepo(self, subrepo: str) -> None:\n",
        "source_code_len": 135,
        "target_code": "\n    @_simple_setter('subrepo', str, nzs.strip, nzs.forbid_newlines)\n    def set_subrepo(self, subrepo: str) -> None:\n",
        "target_code_len": 118,
        "diff_format": "@@ -171,3 +242,3 @@\n \n-    @PackageMakerBase._simple_setter('subrepo', str, nzs.strip, nzs.forbid_newlines)\n+    @_simple_setter('subrepo', str, nzs.strip, nzs.forbid_newlines)\n     def set_subrepo(self, subrepo: str) -> None:\n",
        "source_code_with_indent": "\n    <DED>@PackageMakerBase._simple_setter('subrepo', str, nzs.strip, nzs.forbid_newlines)\n    def set_subrepo(self, subrepo: str) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>@_simple_setter('subrepo', str, nzs.strip, nzs.forbid_newlines)\n    def set_subrepo(self, subrepo: str) -> None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    @PackageMakerBase._simple_setter('summary', str, nzs.strip)\n    def set_summary(self, summary: str) -> None:\n        self._package.comment = summary\n\n    @PackageMakerBase._omnivorous_setter('maintainer', str, nzs.strip, nzs.forbid_newlines, nzs.tolower)\n    def add_maintainers(self, *args: Any) -> None:\n        self._package.maintainers.extend(_iter_unique(args, self._package.maintainers))\n\n    @PackageMakerBase._omnivorous_setter('category', str, nzs.strip, nzs.forbid_newlines)\n    def add_categories(self, *args: Any) -> None:\n        # XXX: convert into array\n        if not self._package.category:\n            self._package.category = args[0]\n\n    @PackageMakerBase._omnivorous_setter('homepage', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n    def add_homepages(self, *args: Any) -> None:\n        # XXX: convert into array\n        if not self._package.homepage:\n            self._package.homepage = args[0]\n\n    @PackageMakerBase._omnivorous_setter('license', str, nzs.strip, nzs.forbid_newlines)\n    def add_licenses(self, *args: Any) -> None:\n        self._package.licenses.extend(args)\n\n    @PackageMakerBase._omnivorous_setter('download', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n    def add_downloads(self, *args: Any) -> None:\n        self._package.downloads.extend(_iter_unique(args, self._package.downloads))\n\n    def set_flags(self, mask: int, is_set: bool = True) -> None:\n        self._package.set_flag(mask, is_set)\n\n",
        "source_code_len": 1494,
        "target_code": "\n    @_simple_setter('summary', str, nzs.strip)\n    def set_summary(self, summary: str) -> None:\n        self._package.summary = summary\n\n    @_omnivorous_setter('maintainer', str, nzs.strip, nzs.forbid_newlines, nzs.tolower)\n    def add_maintainers(self, *args: Any) -> None:\n        _extend_unique(self._package.maintainers, args)\n\n    @_omnivorous_setter('category', str, nzs.strip, nzs.forbid_newlines)\n    def add_categories(self, *args: Any) -> None:\n        _extend_unique(self._package.categories, args)\n\n    @_omnivorous_setter('homepage', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n    def add_homepages(self, *args: Any) -> None:\n        _extend_unique(self._package.homepages, args)\n\n    @_omnivorous_setter('license', str, nzs.strip, nzs.forbid_newlines)\n    def add_licenses(self, *args: Any) -> None:\n        _extend_unique(self._package.licenses, args)\n\n    @_omnivorous_setter('download', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n    def add_downloads(self, *args: Any) -> None:\n        _extend_unique(self._package.downloads, args)\n\n    def set_flags(self, mask: int, is_set: bool = True) -> None:\n        if is_set:\n            self._package.flags |= mask\n        else:\n            self._package.flags &= ~mask\n\n",
        "target_code_len": 1281,
        "diff_format": "@@ -175,32 +246,31 @@\n \n-    @PackageMakerBase._simple_setter('summary', str, nzs.strip)\n+    @_simple_setter('summary', str, nzs.strip)\n     def set_summary(self, summary: str) -> None:\n-        self._package.comment = summary\n-\n-    @PackageMakerBase._omnivorous_setter('maintainer', str, nzs.strip, nzs.forbid_newlines, nzs.tolower)\n+        self._package.summary = summary\n+\n+    @_omnivorous_setter('maintainer', str, nzs.strip, nzs.forbid_newlines, nzs.tolower)\n     def add_maintainers(self, *args: Any) -> None:\n-        self._package.maintainers.extend(_iter_unique(args, self._package.maintainers))\n-\n-    @PackageMakerBase._omnivorous_setter('category', str, nzs.strip, nzs.forbid_newlines)\n+        _extend_unique(self._package.maintainers, args)\n+\n+    @_omnivorous_setter('category', str, nzs.strip, nzs.forbid_newlines)\n     def add_categories(self, *args: Any) -> None:\n-        # XXX: convert into array\n-        if not self._package.category:\n-            self._package.category = args[0]\n-\n-    @PackageMakerBase._omnivorous_setter('homepage', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n+        _extend_unique(self._package.categories, args)\n+\n+    @_omnivorous_setter('homepage', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n     def add_homepages(self, *args: Any) -> None:\n-        # XXX: convert into array\n-        if not self._package.homepage:\n-            self._package.homepage = args[0]\n-\n-    @PackageMakerBase._omnivorous_setter('license', str, nzs.strip, nzs.forbid_newlines)\n+        _extend_unique(self._package.homepages, args)\n+\n+    @_omnivorous_setter('license', str, nzs.strip, nzs.forbid_newlines)\n     def add_licenses(self, *args: Any) -> None:\n-        self._package.licenses.extend(args)\n-\n-    @PackageMakerBase._omnivorous_setter('download', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n+        _extend_unique(self._package.licenses, args)\n+\n+    @_omnivorous_setter('download', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n     def add_downloads(self, *args: Any) -> None:\n-        self._package.downloads.extend(_iter_unique(args, self._package.downloads))\n+        _extend_unique(self._package.downloads, args)\n \n     def set_flags(self, mask: int, is_set: bool = True) -> None:\n-        self._package.set_flag(mask, is_set)\n+        if is_set:\n+            self._package.flags |= mask\n+        else:\n+            self._package.flags &= ~mask\n \n",
        "source_code_with_indent": "\n    <DED>@PackageMakerBase._simple_setter('summary', str, nzs.strip)\n    def set_summary(self, summary: str) -> None:\n        <IND>self._package.comment = summary\n\n    <DED>@PackageMakerBase._omnivorous_setter('maintainer', str, nzs.strip, nzs.forbid_newlines, nzs.tolower)\n    def add_maintainers(self, *args: Any) -> None:\n        <IND>self._package.maintainers.extend(_iter_unique(args, self._package.maintainers))\n\n    <DED>@PackageMakerBase._omnivorous_setter('category', str, nzs.strip, nzs.forbid_newlines)\n    def add_categories(self, *args: Any) -> None:\n        # XXX: convert into array\n        <IND>if not self._package.category:\n            <IND>self._package.category = args[0]\n\n    <DED><DED>@PackageMakerBase._omnivorous_setter('homepage', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n    def add_homepages(self, *args: Any) -> None:\n        # XXX: convert into array\n        <IND>if not self._package.homepage:\n            <IND>self._package.homepage = args[0]\n\n    <DED><DED>@PackageMakerBase._omnivorous_setter('license', str, nzs.strip, nzs.forbid_newlines)\n    def add_licenses(self, *args: Any) -> None:\n        <IND>self._package.licenses.extend(args)\n\n    <DED>@PackageMakerBase._omnivorous_setter('download', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n    def add_downloads(self, *args: Any) -> None:\n        <IND>self._package.downloads.extend(_iter_unique(args, self._package.downloads))\n\n    <DED>def set_flags(self, mask: int, is_set: bool = True) -> None:\n        <IND>self._package.set_flag(mask, is_set)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>@_simple_setter('summary', str, nzs.strip)\n    def set_summary(self, summary: str) -> None:\n        <IND>self._package.summary = summary\n\n    <DED>@_omnivorous_setter('maintainer', str, nzs.strip, nzs.forbid_newlines, nzs.tolower)\n    def add_maintainers(self, *args: Any) -> None:\n        <IND>_extend_unique(self._package.maintainers, args)\n\n    <DED>@_omnivorous_setter('category', str, nzs.strip, nzs.forbid_newlines)\n    def add_categories(self, *args: Any) -> None:\n        <IND>_extend_unique(self._package.categories, args)\n\n    <DED>@_omnivorous_setter('homepage', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n    def add_homepages(self, *args: Any) -> None:\n        <IND>_extend_unique(self._package.homepages, args)\n\n    <DED>@_omnivorous_setter('license', str, nzs.strip, nzs.forbid_newlines)\n    def add_licenses(self, *args: Any) -> None:\n        <IND>_extend_unique(self._package.licenses, args)\n\n    <DED>@_omnivorous_setter('download', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n    def add_downloads(self, *args: Any) -> None:\n        <IND>_extend_unique(self._package.downloads, args)\n\n    <DED>def set_flags(self, mask: int, is_set: bool = True) -> None:\n        <IND>if is_set:\n            <IND>self._package.flags |= mask\n        <DED>else:\n            <IND>self._package.flags &= ~mask\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def unwrap(self) -> Package:\n        return self._package\n\n",
        "source_code_len": 64,
        "target_code": "\n    def spawn(self, repo: str, family: str, subrepo: Optional[str] = None, shadow: bool = False, default_maintainer: Optional[str] = None) -> Package:\n        if self._package.name is None:\n            raise RuntimeError('Attempt to spawn Package with unset name')\n        if self._package.version is None:\n            raise RuntimeError('Attempt to spawn Package with unset version')\n\n        maintainers: List[str] = self._package.maintainers if self._package.maintainers else [default_maintainer] if default_maintainer else []\n\n        return Package(\n            repo=repo,\n            family=family,\n            subrepo=self._package.subrepo or subrepo,\n\n            name=self._package.name,\n            basename=self._package.basename,\n\n            version=self._package.version,\n            origversion=self._package.version,\n            rawversion=self._package.rawversion if self._package.rawversion is not None else self._package.version,\n\n            arch=self._package.arch,\n\n            maintainers=maintainers,\n            category=self._package.categories[0] if self._package.categories else None,  # XXX: convert to array\n            comment=self._package.summary,\n            homepage=self._package.homepages[0] if self._package.homepages else None,  # XXX: convert to array\n            licenses=self._package.licenses,\n            downloads=self._package.downloads,\n\n            flags=self._package.flags,\n            shadow=shadow,\n\n            extrafields=self._package.extrafields,\n        )\n\n",
        "target_code_len": 1515,
        "diff_format": "@@ -209,4 +279,36 @@\n \n-    def unwrap(self) -> Package:\n-        return self._package\n+    def spawn(self, repo: str, family: str, subrepo: Optional[str] = None, shadow: bool = False, default_maintainer: Optional[str] = None) -> Package:\n+        if self._package.name is None:\n+            raise RuntimeError('Attempt to spawn Package with unset name')\n+        if self._package.version is None:\n+            raise RuntimeError('Attempt to spawn Package with unset version')\n+\n+        maintainers: List[str] = self._package.maintainers if self._package.maintainers else [default_maintainer] if default_maintainer else []\n+\n+        return Package(\n+            repo=repo,\n+            family=family,\n+            subrepo=self._package.subrepo or subrepo,\n+\n+            name=self._package.name,\n+            basename=self._package.basename,\n+\n+            version=self._package.version,\n+            origversion=self._package.version,\n+            rawversion=self._package.rawversion if self._package.rawversion is not None else self._package.version,\n+\n+            arch=self._package.arch,\n+\n+            maintainers=maintainers,\n+            category=self._package.categories[0] if self._package.categories else None,  # XXX: convert to array\n+            comment=self._package.summary,\n+            homepage=self._package.homepages[0] if self._package.homepages else None,  # XXX: convert to array\n+            licenses=self._package.licenses,\n+            downloads=self._package.downloads,\n+\n+            flags=self._package.flags,\n+            shadow=shadow,\n+\n+            extrafields=self._package.extrafields,\n+        )\n \n",
        "source_code_with_indent": "\n    <DED>def unwrap(self) -> Package:\n        <IND>return self._package\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def spawn(self, repo: str, family: str, subrepo: Optional[str] = None, shadow: bool = False, default_maintainer: Optional[str] = None) -> Package:\n        <IND>if self._package.name is None:\n            <IND>raise RuntimeError('Attempt to spawn Package with unset name')\n        <DED>if self._package.version is None:\n            <IND>raise RuntimeError('Attempt to spawn Package with unset version')\n\n        <DED>maintainers: List[str] = self._package.maintainers if self._package.maintainers else [default_maintainer] if default_maintainer else []\n\n        return Package(\n            repo=repo,\n            family=family,\n            subrepo=self._package.subrepo or subrepo,\n\n            name=self._package.name,\n            basename=self._package.basename,\n\n            version=self._package.version,\n            origversion=self._package.version,\n            rawversion=self._package.rawversion if self._package.rawversion is not None else self._package.version,\n\n            arch=self._package.arch,\n\n            maintainers=maintainers,\n            category=self._package.categories[0] if self._package.categories else None,  # XXX: convert to array\n            comment=self._package.summary,\n            homepage=self._package.homepages[0] if self._package.homepages else None,  # XXX: convert to array\n            licenses=self._package.licenses,\n            downloads=self._package.downloads,\n\n            flags=self._package.flags,\n            shadow=shadow,\n\n            extrafields=self._package.extrafields,\n        )\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "repology/repology-updater",
    "commit": "9f67d556944fe256c990593f673713e299feaf8a",
    "filename": "repology/packagemaker/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/repology-repology-updater/repology/packagemaker/__init__.py",
    "file_hunks_size": 17,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "repology/packagemaker/__init__.py:145:37 Incompatible parameter type [6]: Expected `PackageMakerBase` for 1st positional only parameter to call `PackageMakerBase._simple_setter` but got `str`.",
    "message": " Expected `PackageMakerBase` for 1st positional only parameter to call `PackageMakerBase._simple_setter` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 145,
    "warning_line": "    @PackageMakerBase._simple_setter('basename', str, nzs.strip, nzs.forbid_newlines)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from functools import wraps\nfrom typing import Any, Callable, Iterable, Optional\n\nfrom repology.logger import Logger\nfrom repology.package import Package\nfrom repology.packagemaker import normalizers as nzs\n\n",
        "source_code_len": 208,
        "target_code": "from functools import wraps\nfrom typing import Any, Callable, Dict, Iterable, List, Optional, Type\n\nfrom repology.logger import Logger\nfrom repology.package import Package, PackageStatus\nfrom repology.packagemaker import normalizers as nzs\nfrom repology.packagemaker.normalizers import NormalizerFunction\n\n",
        "target_code_len": 306,
        "diff_format": "@@ -24,7 +22,8 @@\n from functools import wraps\n-from typing import Any, Callable, Iterable, Optional\n+from typing import Any, Callable, Dict, Iterable, List, Optional, Type\n \n from repology.logger import Logger\n-from repology.package import Package\n+from repology.package import Package, PackageStatus\n from repology.packagemaker import normalizers as nzs\n+from repology.packagemaker.normalizers import NormalizerFunction\n \n",
        "source_code_with_indent": "from functools import wraps\nfrom typing import Any, Callable, Iterable, Optional\n\nfrom repology.logger import Logger\nfrom repology.package import Package\nfrom repology.packagemaker import normalizers as nzs\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from functools import wraps\nfrom typing import Any, Callable, Dict, Iterable, List, Optional, Type\n\nfrom repology.logger import Logger\nfrom repology.package import Package, PackageStatus\nfrom repology.packagemaker import normalizers as nzs\nfrom repology.packagemaker.normalizers import NormalizerFunction\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _iter_unique(iterable, existing=None):\n    seen = set(existing) if existing else set()\n    for value in iterable:\n        if value not in seen:\n            seen.add(value)\n            yield value\n\n",
        "source_code_len": 202,
        "target_code": "\nclass PackageTemplate:\n    __slots__ = [\n        'subrepo',\n\n        'name',\n        'basename',\n\n        'version',\n        'origversion',\n        'rawversion',\n\n        'arch',\n        'summary',\n        'maintainers',\n        'categories',\n        'homepages',\n        'licenses',\n        'downloads',\n\n        'flags',\n\n        'extrafields',\n    ]\n\n    subrepo: Optional[str]\n\n    name: Optional[str]\n    basename: Optional[str]\n\n    version: Optional[str]\n    origversion: Optional[str]\n    rawversion: Optional[str]\n\n    arch: Optional[str]\n    summary: Optional[str]\n    maintainers: List[str]\n    categories: List[str]\n    homepages: List[str]\n    licenses: List[str]\n    downloads: List[str]\n\n    flags: int\n\n    extrafields: Dict[str, str]\n\n    def __init__(self) -> None:\n        self.subrepo = None\n\n        self.name = None\n        self.basename = None\n\n        self.version = None\n        self.origversion = None\n        self.rawversion = None\n\n        self.arch = None\n        self.summary = None\n        self.maintainers = []\n        self.categories = []\n        self.homepages = []\n        self.licenses = []\n        self.downloads = []\n\n        self.flags = 0\n\n        self.extrafields = {}\n\n",
        "target_code_len": 1212,
        "diff_format": "@@ -34,8 +33,68 @@\n \n-def _iter_unique(iterable, existing=None):\n-    seen = set(existing) if existing else set()\n-    for value in iterable:\n-        if value not in seen:\n-            seen.add(value)\n-            yield value\n+class PackageTemplate:\n+    __slots__ = [\n+        'subrepo',\n+\n+        'name',\n+        'basename',\n+\n+        'version',\n+        'origversion',\n+        'rawversion',\n+\n+        'arch',\n+        'summary',\n+        'maintainers',\n+        'categories',\n+        'homepages',\n+        'licenses',\n+        'downloads',\n+\n+        'flags',\n+\n+        'extrafields',\n+    ]\n+\n+    subrepo: Optional[str]\n+\n+    name: Optional[str]\n+    basename: Optional[str]\n+\n+    version: Optional[str]\n+    origversion: Optional[str]\n+    rawversion: Optional[str]\n+\n+    arch: Optional[str]\n+    summary: Optional[str]\n+    maintainers: List[str]\n+    categories: List[str]\n+    homepages: List[str]\n+    licenses: List[str]\n+    downloads: List[str]\n+\n+    flags: int\n+\n+    extrafields: Dict[str, str]\n+\n+    def __init__(self) -> None:\n+        self.subrepo = None\n+\n+        self.name = None\n+        self.basename = None\n+\n+        self.version = None\n+        self.origversion = None\n+        self.rawversion = None\n+\n+        self.arch = None\n+        self.summary = None\n+        self.maintainers = []\n+        self.categories = []\n+        self.homepages = []\n+        self.licenses = []\n+        self.downloads = []\n+\n+        self.flags = 0\n+\n+        self.extrafields = {}\n \n",
        "source_code_with_indent": "\ndef _iter_unique(iterable, existing=None):\n    <IND>seen = set(existing) if existing else set()\n    for value in iterable:\n        <IND>if value not in seen:\n            <IND>seen.add(value)\n            yield value\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nclass PackageTemplate:\n    <IND>__slots__ = [\n        'subrepo',\n\n        'name',\n        'basename',\n\n        'version',\n        'origversion',\n        'rawversion',\n\n        'arch',\n        'summary',\n        'maintainers',\n        'categories',\n        'homepages',\n        'licenses',\n        'downloads',\n\n        'flags',\n\n        'extrafields',\n    ]\n\n    subrepo: Optional[str]\n\n    name: Optional[str]\n    basename: Optional[str]\n\n    version: Optional[str]\n    origversion: Optional[str]\n    rawversion: Optional[str]\n\n    arch: Optional[str]\n    summary: Optional[str]\n    maintainers: List[str]\n    categories: List[str]\n    homepages: List[str]\n    licenses: List[str]\n    downloads: List[str]\n\n    flags: int\n\n    extrafields: Dict[str, str]\n\n    def __init__(self) -> None:\n        <IND>self.subrepo = None\n\n        self.name = None\n        self.basename = None\n\n        self.version = None\n        self.origversion = None\n        self.rawversion = None\n\n        self.arch = None\n        self.summary = None\n        self.maintainers = []\n        self.categories = []\n        self.homepages = []\n        self.licenses = []\n        self.downloads = []\n\n        self.flags = 0\n\n        self.extrafields = {}\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _omnivorous_setter(fieldname, want_type, *normalizers):  # noqa: N805\n        def inner(method):\n            @wraps(method)\n            def wrapper(self, *args):\n                values = self._normalize_args(args, fieldname, want_type, normalizers)\n                if values:\n                    return method(self, *values)\n            return wrapper\n        return inner\n\n    def _simple_setter(fieldname, want_type, *normalizers):  # noqa: N805\n        def inner(method):\n            @wraps(method)\n            def wrapper(self, arg, *other_args):\n                if arg is None:\n                    pass\n                elif isinstance(arg, str) and want_type is int or isinstance(arg, int) and want_type is str:\n                    arg = want_type(arg)\n                elif not isinstance(arg, want_type):\n                    raise RuntimeError('unexpected type {} for {} (expected {})'.format(arg.__class__.__name__, fieldname, want_type.__name__))\n                value = self._apply_normalizers(arg, fieldname, normalizers)\n                if value:\n                    return method(self, value, *other_args)\n            return wrapper\n        return inner\n\n",
        "source_code_len": 1176,
        "target_code": "\n\ndef _omnivorous_setter(fieldname: str, want_type: Type[Any], *normalizers: NormalizerFunction) -> Callable[[Callable[..., Any]], Any]:\n    def inner(method: Callable[..., Any]) -> Callable[..., Any]:\n        @wraps(method)\n        def wrapper(self: PackageMakerBase, *args: Any) -> Any:\n            values = self._normalize_args(args, fieldname, want_type, normalizers)\n            if values:\n                return method(self, *values)\n        return wrapper\n    return inner\n\n\ndef _simple_setter(fieldname: str, want_type: Type[Any], *normalizers: NormalizerFunction) -> Callable[[Callable[..., Any]], Any]:\n    def inner(method: Callable[..., Any]) -> Callable[..., Any]:\n        @wraps(method)\n        def wrapper(self: PackageMakerBase, arg: Any, *other_args: Any) -> Any:\n            if arg is None:\n                pass\n            elif isinstance(arg, str) and want_type is int or isinstance(arg, int) and want_type is str:\n                arg = want_type(arg)\n            elif not isinstance(arg, want_type):\n                raise RuntimeError('unexpected type {} for {} (expected {})'.format(arg.__class__.__name__, fieldname, want_type.__name__))\n            value = self._apply_normalizers(arg, fieldname, normalizers)\n            if value:\n                return method(self, value, *other_args)\n        return wrapper\n    return inner\n\n\ndef _extend_unique(existing: List[str], iterable: Iterable[str]) -> None:\n    seen = set(existing) if existing else set()\n\n    for value in iterable:\n        if value not in seen:\n            seen.add(value)\n            existing.append(value)\n\n",
        "target_code_len": 1598,
        "diff_format": "@@ -92,27 +151,38 @@\n \n-    def _omnivorous_setter(fieldname, want_type, *normalizers):  # noqa: N805\n-        def inner(method):\n-            @wraps(method)\n-            def wrapper(self, *args):\n-                values = self._normalize_args(args, fieldname, want_type, normalizers)\n-                if values:\n-                    return method(self, *values)\n-            return wrapper\n-        return inner\n-\n-    def _simple_setter(fieldname, want_type, *normalizers):  # noqa: N805\n-        def inner(method):\n-            @wraps(method)\n-            def wrapper(self, arg, *other_args):\n-                if arg is None:\n-                    pass\n-                elif isinstance(arg, str) and want_type is int or isinstance(arg, int) and want_type is str:\n-                    arg = want_type(arg)\n-                elif not isinstance(arg, want_type):\n-                    raise RuntimeError('unexpected type {} for {} (expected {})'.format(arg.__class__.__name__, fieldname, want_type.__name__))\n-                value = self._apply_normalizers(arg, fieldname, normalizers)\n-                if value:\n-                    return method(self, value, *other_args)\n-            return wrapper\n-        return inner\n+\n+def _omnivorous_setter(fieldname: str, want_type: Type[Any], *normalizers: NormalizerFunction) -> Callable[[Callable[..., Any]], Any]:\n+    def inner(method: Callable[..., Any]) -> Callable[..., Any]:\n+        @wraps(method)\n+        def wrapper(self: PackageMakerBase, *args: Any) -> Any:\n+            values = self._normalize_args(args, fieldname, want_type, normalizers)\n+            if values:\n+                return method(self, *values)\n+        return wrapper\n+    return inner\n+\n+\n+def _simple_setter(fieldname: str, want_type: Type[Any], *normalizers: NormalizerFunction) -> Callable[[Callable[..., Any]], Any]:\n+    def inner(method: Callable[..., Any]) -> Callable[..., Any]:\n+        @wraps(method)\n+        def wrapper(self: PackageMakerBase, arg: Any, *other_args: Any) -> Any:\n+            if arg is None:\n+                pass\n+            elif isinstance(arg, str) and want_type is int or isinstance(arg, int) and want_type is str:\n+                arg = want_type(arg)\n+            elif not isinstance(arg, want_type):\n+                raise RuntimeError('unexpected type {} for {} (expected {})'.format(arg.__class__.__name__, fieldname, want_type.__name__))\n+            value = self._apply_normalizers(arg, fieldname, normalizers)\n+            if value:\n+                return method(self, value, *other_args)\n+        return wrapper\n+    return inner\n+\n+\n+def _extend_unique(existing: List[str], iterable: Iterable[str]) -> None:\n+    seen = set(existing) if existing else set()\n+\n+    for value in iterable:\n+        if value not in seen:\n+            seen.add(value)\n+            existing.append(value)\n \n",
        "source_code_with_indent": "\n    <DED>def _omnivorous_setter(fieldname, want_type, *normalizers):  # noqa: N805\n        <IND>def inner(method):\n            <IND>@wraps(method)\n            def wrapper(self, *args):\n                <IND>values = self._normalize_args(args, fieldname, want_type, normalizers)\n                if values:\n                    <IND>return method(self, *values)\n            <DED><DED>return wrapper\n        <DED>return inner\n\n    <DED>def _simple_setter(fieldname, want_type, *normalizers):  # noqa: N805\n        <IND>def inner(method):\n            <IND>@wraps(method)\n            def wrapper(self, arg, *other_args):\n                <IND>if arg is None:\n                    <IND>pass\n                <DED>elif isinstance(arg, str) and want_type is int or isinstance(arg, int) and want_type is str:\n                    <IND>arg = want_type(arg)\n                <DED>elif not isinstance(arg, want_type):\n                    <IND>raise RuntimeError('unexpected type {} for {} (expected {})'.format(arg.__class__.__name__, fieldname, want_type.__name__))\n                <DED>value = self._apply_normalizers(arg, fieldname, normalizers)\n                if value:\n                    <IND>return method(self, value, *other_args)\n            <DED><DED>return wrapper\n        <DED>return inner\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n\n<DED><DED>def _omnivorous_setter(fieldname: str, want_type: Type[Any], *normalizers: NormalizerFunction) -> Callable[[Callable[..., Any]], Any]:\n    <IND>def inner(method: Callable[..., Any]) -> Callable[..., Any]:\n        <IND>@wraps(method)\n        def wrapper(self: PackageMakerBase, *args: Any) -> Any:\n            <IND>values = self._normalize_args(args, fieldname, want_type, normalizers)\n            if values:\n                <IND>return method(self, *values)\n        <DED><DED>return wrapper\n    <DED>return inner\n\n\n<DED>def _simple_setter(fieldname: str, want_type: Type[Any], *normalizers: NormalizerFunction) -> Callable[[Callable[..., Any]], Any]:\n    <IND>def inner(method: Callable[..., Any]) -> Callable[..., Any]:\n        <IND>@wraps(method)\n        def wrapper(self: PackageMakerBase, arg: Any, *other_args: Any) -> Any:\n            <IND>if arg is None:\n                <IND>pass\n            <DED>elif isinstance(arg, str) and want_type is int or isinstance(arg, int) and want_type is str:\n                <IND>arg = want_type(arg)\n            <DED>elif not isinstance(arg, want_type):\n                <IND>raise RuntimeError('unexpected type {} for {} (expected {})'.format(arg.__class__.__name__, fieldname, want_type.__name__))\n            <DED>value = self._apply_normalizers(arg, fieldname, normalizers)\n            if value:\n                <IND>return method(self, value, *other_args)\n        <DED><DED>return wrapper\n    <DED>return inner\n\n\n<DED>def _extend_unique(existing: List[str], iterable: Iterable[str]) -> None:\n    <IND>seen = set(existing) if existing else set()\n\n    for value in iterable:\n        <IND>if value not in seen:\n            <IND>seen.add(value)\n            existing.append(value)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "class PackageMaker(PackageMakerBase):\n    _package: Package\n    _ident: Optional[str]\n",
        "source_code_len": 86,
        "target_code": "class PackageMaker(PackageMakerBase):\n    _package: PackageTemplate\n    _ident: Optional[str]\n",
        "target_code_len": 94,
        "diff_format": "@@ -120,3 +190,3 @@\n class PackageMaker(PackageMakerBase):\n-    _package: Package\n+    _package: PackageTemplate\n     _ident: Optional[str]\n",
        "source_code_with_indent": "<DED><DED>class PackageMaker(PackageMakerBase):\n    <IND>_package: Package\n    _ident: Optional[str]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED><DED><DED>class PackageMaker(PackageMakerBase):\n    <IND>_package: PackageTemplate\n    _ident: Optional[str]\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        super(PackageMaker, self).__init__(logger)\n        self._package = Package()\n        self._ident = ident\n",
        "source_code_len": 113,
        "target_code": "        super(PackageMaker, self).__init__(logger)\n        self._package = PackageTemplate()\n        self._ident = ident\n",
        "target_code_len": 121,
        "diff_format": "@@ -127,3 +197,3 @@\n         super(PackageMaker, self).__init__(logger)\n-        self._package = Package()\n+        self._package = PackageTemplate()\n         self._ident = ident\n",
        "source_code_with_indent": "        <IND>super(PackageMaker, self).__init__(logger)\n        self._package = Package()\n        self._ident = ident\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>super(PackageMaker, self).__init__(logger)\n        self._package = PackageTemplate()\n        self._ident = ident\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    @PackageMakerBase._simple_setter('origin', str, nzs.strip, nzs.forbid_newlines)\n    def set_origin(self, origin: str) -> None:\n",
        "source_code_len": 132,
        "target_code": "\n    @_simple_setter('origin', str, nzs.strip, nzs.forbid_newlines)\n    def set_origin(self, origin: str) -> None:\n",
        "target_code_len": 115,
        "diff_format": "@@ -135,3 +205,3 @@\n \n-    @PackageMakerBase._simple_setter('origin', str, nzs.strip, nzs.forbid_newlines)\n+    @_simple_setter('origin', str, nzs.strip, nzs.forbid_newlines)\n     def set_origin(self, origin: str) -> None:\n",
        "source_code_with_indent": "\n    <DED>@PackageMakerBase._simple_setter('origin', str, nzs.strip, nzs.forbid_newlines)\n    def set_origin(self, origin: str) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>@_simple_setter('origin', str, nzs.strip, nzs.forbid_newlines)\n    def set_origin(self, origin: str) -> None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    @PackageMakerBase._simple_setter('name', str, nzs.strip, nzs.forbid_newlines)\n    def set_name(self, name: str) -> None:\n",
        "source_code_len": 126,
        "target_code": "\n    @_simple_setter('name', str, nzs.strip, nzs.forbid_newlines)\n    def set_name(self, name: str) -> None:\n",
        "target_code_len": 109,
        "diff_format": "@@ -140,3 +210,3 @@\n \n-    @PackageMakerBase._simple_setter('name', str, nzs.strip, nzs.forbid_newlines)\n+    @_simple_setter('name', str, nzs.strip, nzs.forbid_newlines)\n     def set_name(self, name: str) -> None:\n",
        "source_code_with_indent": "\n    <DED>@PackageMakerBase._simple_setter('name', str, nzs.strip, nzs.forbid_newlines)\n    def set_name(self, name: str) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>@_simple_setter('name', str, nzs.strip, nzs.forbid_newlines)\n    def set_name(self, name: str) -> None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    @PackageMakerBase._simple_setter('basename', str, nzs.strip, nzs.forbid_newlines)\n    def set_basename(self, basename: str) -> None:\n",
        "source_code_len": 138,
        "target_code": "\n    @_simple_setter('basename', str, nzs.strip, nzs.forbid_newlines)\n    def set_basename(self, basename: str) -> None:\n",
        "target_code_len": 121,
        "diff_format": "@@ -144,3 +214,3 @@\n \n-    @PackageMakerBase._simple_setter('basename', str, nzs.strip, nzs.forbid_newlines)\n+    @_simple_setter('basename', str, nzs.strip, nzs.forbid_newlines)\n     def set_basename(self, basename: str) -> None:\n",
        "source_code_with_indent": "\n    <DED>@PackageMakerBase._simple_setter('basename', str, nzs.strip, nzs.forbid_newlines)\n    def set_basename(self, basename: str) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>@_simple_setter('basename', str, nzs.strip, nzs.forbid_newlines)\n    def set_basename(self, basename: str) -> None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def prefix_name(self, prefix: str) -> None:\n        self._package.name = prefix + self._package.name\n\n    @PackageMakerBase._simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n    def set_version(self, version: str, version_normalizer: Optional[Callable[[str], str]] = None) -> None:\n",
        "source_code_len": 299,
        "target_code": "    def prefix_name(self, prefix: str) -> None:\n        assert(self._package.name)\n        self._package.name = prefix + self._package.name\n\n    @_simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n    def set_version(self, version: str, version_normalizer: Optional[Callable[[str], str]] = None) -> None:\n",
        "target_code_len": 317,
        "diff_format": "@@ -149,5 +219,6 @@\n     def prefix_name(self, prefix: str) -> None:\n+        assert(self._package.name)\n         self._package.name = prefix + self._package.name\n \n-    @PackageMakerBase._simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n+    @_simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n     def set_version(self, version: str, version_normalizer: Optional[Callable[[str], str]] = None) -> None:\n",
        "source_code_with_indent": "    <DED>def prefix_name(self, prefix: str) -> None:\n        <IND>self._package.name = prefix + self._package.name\n\n    <DED>@PackageMakerBase._simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n    def set_version(self, version: str, version_normalizer: Optional[Callable[[str], str]] = None) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def prefix_name(self, prefix: str) -> None:\n        <IND>assert(self._package.name)\n        self._package.name = prefix + self._package.name\n\n    <DED>@_simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n    def set_version(self, version: str, version_normalizer: Optional[Callable[[str], str]] = None) -> None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    @PackageMakerBase._simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n    def set_rawversion(self, rawversion: str) -> None:\n",
        "source_code_len": 141,
        "target_code": "\n    @_simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n    def set_rawversion(self, rawversion: str) -> None:\n",
        "target_code_len": 124,
        "diff_format": "@@ -157,3 +228,3 @@\n \n-    @PackageMakerBase._simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n+    @_simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n     def set_rawversion(self, rawversion: str) -> None:\n",
        "source_code_with_indent": "\n    <DED>@PackageMakerBase._simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n    def set_rawversion(self, rawversion: str) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>@_simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n    def set_rawversion(self, rawversion: str) -> None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    @PackageMakerBase._simple_setter('arch', str, nzs.strip, nzs.forbid_newlines)\n    def set_arch(self, arch: str) -> None:\n",
        "source_code_len": 126,
        "target_code": "\n    @_simple_setter('arch', str, nzs.strip, nzs.forbid_newlines)\n    def set_arch(self, arch: str) -> None:\n",
        "target_code_len": 109,
        "diff_format": "@@ -167,3 +238,3 @@\n \n-    @PackageMakerBase._simple_setter('arch', str, nzs.strip, nzs.forbid_newlines)\n+    @_simple_setter('arch', str, nzs.strip, nzs.forbid_newlines)\n     def set_arch(self, arch: str) -> None:\n",
        "source_code_with_indent": "\n    <DED>@PackageMakerBase._simple_setter('arch', str, nzs.strip, nzs.forbid_newlines)\n    def set_arch(self, arch: str) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>@_simple_setter('arch', str, nzs.strip, nzs.forbid_newlines)\n    def set_arch(self, arch: str) -> None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    @PackageMakerBase._simple_setter('subrepo', str, nzs.strip, nzs.forbid_newlines)\n    def set_subrepo(self, subrepo: str) -> None:\n",
        "source_code_len": 135,
        "target_code": "\n    @_simple_setter('subrepo', str, nzs.strip, nzs.forbid_newlines)\n    def set_subrepo(self, subrepo: str) -> None:\n",
        "target_code_len": 118,
        "diff_format": "@@ -171,3 +242,3 @@\n \n-    @PackageMakerBase._simple_setter('subrepo', str, nzs.strip, nzs.forbid_newlines)\n+    @_simple_setter('subrepo', str, nzs.strip, nzs.forbid_newlines)\n     def set_subrepo(self, subrepo: str) -> None:\n",
        "source_code_with_indent": "\n    <DED>@PackageMakerBase._simple_setter('subrepo', str, nzs.strip, nzs.forbid_newlines)\n    def set_subrepo(self, subrepo: str) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>@_simple_setter('subrepo', str, nzs.strip, nzs.forbid_newlines)\n    def set_subrepo(self, subrepo: str) -> None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    @PackageMakerBase._simple_setter('summary', str, nzs.strip)\n    def set_summary(self, summary: str) -> None:\n        self._package.comment = summary\n\n    @PackageMakerBase._omnivorous_setter('maintainer', str, nzs.strip, nzs.forbid_newlines, nzs.tolower)\n    def add_maintainers(self, *args: Any) -> None:\n        self._package.maintainers.extend(_iter_unique(args, self._package.maintainers))\n\n    @PackageMakerBase._omnivorous_setter('category', str, nzs.strip, nzs.forbid_newlines)\n    def add_categories(self, *args: Any) -> None:\n        # XXX: convert into array\n        if not self._package.category:\n            self._package.category = args[0]\n\n    @PackageMakerBase._omnivorous_setter('homepage', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n    def add_homepages(self, *args: Any) -> None:\n        # XXX: convert into array\n        if not self._package.homepage:\n            self._package.homepage = args[0]\n\n    @PackageMakerBase._omnivorous_setter('license', str, nzs.strip, nzs.forbid_newlines)\n    def add_licenses(self, *args: Any) -> None:\n        self._package.licenses.extend(args)\n\n    @PackageMakerBase._omnivorous_setter('download', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n    def add_downloads(self, *args: Any) -> None:\n        self._package.downloads.extend(_iter_unique(args, self._package.downloads))\n\n    def set_flags(self, mask: int, is_set: bool = True) -> None:\n        self._package.set_flag(mask, is_set)\n\n",
        "source_code_len": 1494,
        "target_code": "\n    @_simple_setter('summary', str, nzs.strip)\n    def set_summary(self, summary: str) -> None:\n        self._package.summary = summary\n\n    @_omnivorous_setter('maintainer', str, nzs.strip, nzs.forbid_newlines, nzs.tolower)\n    def add_maintainers(self, *args: Any) -> None:\n        _extend_unique(self._package.maintainers, args)\n\n    @_omnivorous_setter('category', str, nzs.strip, nzs.forbid_newlines)\n    def add_categories(self, *args: Any) -> None:\n        _extend_unique(self._package.categories, args)\n\n    @_omnivorous_setter('homepage', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n    def add_homepages(self, *args: Any) -> None:\n        _extend_unique(self._package.homepages, args)\n\n    @_omnivorous_setter('license', str, nzs.strip, nzs.forbid_newlines)\n    def add_licenses(self, *args: Any) -> None:\n        _extend_unique(self._package.licenses, args)\n\n    @_omnivorous_setter('download', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n    def add_downloads(self, *args: Any) -> None:\n        _extend_unique(self._package.downloads, args)\n\n    def set_flags(self, mask: int, is_set: bool = True) -> None:\n        if is_set:\n            self._package.flags |= mask\n        else:\n            self._package.flags &= ~mask\n\n",
        "target_code_len": 1281,
        "diff_format": "@@ -175,32 +246,31 @@\n \n-    @PackageMakerBase._simple_setter('summary', str, nzs.strip)\n+    @_simple_setter('summary', str, nzs.strip)\n     def set_summary(self, summary: str) -> None:\n-        self._package.comment = summary\n-\n-    @PackageMakerBase._omnivorous_setter('maintainer', str, nzs.strip, nzs.forbid_newlines, nzs.tolower)\n+        self._package.summary = summary\n+\n+    @_omnivorous_setter('maintainer', str, nzs.strip, nzs.forbid_newlines, nzs.tolower)\n     def add_maintainers(self, *args: Any) -> None:\n-        self._package.maintainers.extend(_iter_unique(args, self._package.maintainers))\n-\n-    @PackageMakerBase._omnivorous_setter('category', str, nzs.strip, nzs.forbid_newlines)\n+        _extend_unique(self._package.maintainers, args)\n+\n+    @_omnivorous_setter('category', str, nzs.strip, nzs.forbid_newlines)\n     def add_categories(self, *args: Any) -> None:\n-        # XXX: convert into array\n-        if not self._package.category:\n-            self._package.category = args[0]\n-\n-    @PackageMakerBase._omnivorous_setter('homepage', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n+        _extend_unique(self._package.categories, args)\n+\n+    @_omnivorous_setter('homepage', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n     def add_homepages(self, *args: Any) -> None:\n-        # XXX: convert into array\n-        if not self._package.homepage:\n-            self._package.homepage = args[0]\n-\n-    @PackageMakerBase._omnivorous_setter('license', str, nzs.strip, nzs.forbid_newlines)\n+        _extend_unique(self._package.homepages, args)\n+\n+    @_omnivorous_setter('license', str, nzs.strip, nzs.forbid_newlines)\n     def add_licenses(self, *args: Any) -> None:\n-        self._package.licenses.extend(args)\n-\n-    @PackageMakerBase._omnivorous_setter('download', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n+        _extend_unique(self._package.licenses, args)\n+\n+    @_omnivorous_setter('download', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n     def add_downloads(self, *args: Any) -> None:\n-        self._package.downloads.extend(_iter_unique(args, self._package.downloads))\n+        _extend_unique(self._package.downloads, args)\n \n     def set_flags(self, mask: int, is_set: bool = True) -> None:\n-        self._package.set_flag(mask, is_set)\n+        if is_set:\n+            self._package.flags |= mask\n+        else:\n+            self._package.flags &= ~mask\n \n",
        "source_code_with_indent": "\n    <DED>@PackageMakerBase._simple_setter('summary', str, nzs.strip)\n    def set_summary(self, summary: str) -> None:\n        <IND>self._package.comment = summary\n\n    <DED>@PackageMakerBase._omnivorous_setter('maintainer', str, nzs.strip, nzs.forbid_newlines, nzs.tolower)\n    def add_maintainers(self, *args: Any) -> None:\n        <IND>self._package.maintainers.extend(_iter_unique(args, self._package.maintainers))\n\n    <DED>@PackageMakerBase._omnivorous_setter('category', str, nzs.strip, nzs.forbid_newlines)\n    def add_categories(self, *args: Any) -> None:\n        # XXX: convert into array\n        <IND>if not self._package.category:\n            <IND>self._package.category = args[0]\n\n    <DED><DED>@PackageMakerBase._omnivorous_setter('homepage', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n    def add_homepages(self, *args: Any) -> None:\n        # XXX: convert into array\n        <IND>if not self._package.homepage:\n            <IND>self._package.homepage = args[0]\n\n    <DED><DED>@PackageMakerBase._omnivorous_setter('license', str, nzs.strip, nzs.forbid_newlines)\n    def add_licenses(self, *args: Any) -> None:\n        <IND>self._package.licenses.extend(args)\n\n    <DED>@PackageMakerBase._omnivorous_setter('download', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n    def add_downloads(self, *args: Any) -> None:\n        <IND>self._package.downloads.extend(_iter_unique(args, self._package.downloads))\n\n    <DED>def set_flags(self, mask: int, is_set: bool = True) -> None:\n        <IND>self._package.set_flag(mask, is_set)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>@_simple_setter('summary', str, nzs.strip)\n    def set_summary(self, summary: str) -> None:\n        <IND>self._package.summary = summary\n\n    <DED>@_omnivorous_setter('maintainer', str, nzs.strip, nzs.forbid_newlines, nzs.tolower)\n    def add_maintainers(self, *args: Any) -> None:\n        <IND>_extend_unique(self._package.maintainers, args)\n\n    <DED>@_omnivorous_setter('category', str, nzs.strip, nzs.forbid_newlines)\n    def add_categories(self, *args: Any) -> None:\n        <IND>_extend_unique(self._package.categories, args)\n\n    <DED>@_omnivorous_setter('homepage', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n    def add_homepages(self, *args: Any) -> None:\n        <IND>_extend_unique(self._package.homepages, args)\n\n    <DED>@_omnivorous_setter('license', str, nzs.strip, nzs.forbid_newlines)\n    def add_licenses(self, *args: Any) -> None:\n        <IND>_extend_unique(self._package.licenses, args)\n\n    <DED>@_omnivorous_setter('download', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n    def add_downloads(self, *args: Any) -> None:\n        <IND>_extend_unique(self._package.downloads, args)\n\n    <DED>def set_flags(self, mask: int, is_set: bool = True) -> None:\n        <IND>if is_set:\n            <IND>self._package.flags |= mask\n        <DED>else:\n            <IND>self._package.flags &= ~mask\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def unwrap(self) -> Package:\n        return self._package\n\n",
        "source_code_len": 64,
        "target_code": "\n    def spawn(self, repo: str, family: str, subrepo: Optional[str] = None, shadow: bool = False, default_maintainer: Optional[str] = None) -> Package:\n        if self._package.name is None:\n            raise RuntimeError('Attempt to spawn Package with unset name')\n        if self._package.version is None:\n            raise RuntimeError('Attempt to spawn Package with unset version')\n\n        maintainers: List[str] = self._package.maintainers if self._package.maintainers else [default_maintainer] if default_maintainer else []\n\n        return Package(\n            repo=repo,\n            family=family,\n            subrepo=self._package.subrepo or subrepo,\n\n            name=self._package.name,\n            basename=self._package.basename,\n\n            version=self._package.version,\n            origversion=self._package.version,\n            rawversion=self._package.rawversion if self._package.rawversion is not None else self._package.version,\n\n            arch=self._package.arch,\n\n            maintainers=maintainers,\n            category=self._package.categories[0] if self._package.categories else None,  # XXX: convert to array\n            comment=self._package.summary,\n            homepage=self._package.homepages[0] if self._package.homepages else None,  # XXX: convert to array\n            licenses=self._package.licenses,\n            downloads=self._package.downloads,\n\n            flags=self._package.flags,\n            shadow=shadow,\n\n            extrafields=self._package.extrafields,\n        )\n\n",
        "target_code_len": 1515,
        "diff_format": "@@ -209,4 +279,36 @@\n \n-    def unwrap(self) -> Package:\n-        return self._package\n+    def spawn(self, repo: str, family: str, subrepo: Optional[str] = None, shadow: bool = False, default_maintainer: Optional[str] = None) -> Package:\n+        if self._package.name is None:\n+            raise RuntimeError('Attempt to spawn Package with unset name')\n+        if self._package.version is None:\n+            raise RuntimeError('Attempt to spawn Package with unset version')\n+\n+        maintainers: List[str] = self._package.maintainers if self._package.maintainers else [default_maintainer] if default_maintainer else []\n+\n+        return Package(\n+            repo=repo,\n+            family=family,\n+            subrepo=self._package.subrepo or subrepo,\n+\n+            name=self._package.name,\n+            basename=self._package.basename,\n+\n+            version=self._package.version,\n+            origversion=self._package.version,\n+            rawversion=self._package.rawversion if self._package.rawversion is not None else self._package.version,\n+\n+            arch=self._package.arch,\n+\n+            maintainers=maintainers,\n+            category=self._package.categories[0] if self._package.categories else None,  # XXX: convert to array\n+            comment=self._package.summary,\n+            homepage=self._package.homepages[0] if self._package.homepages else None,  # XXX: convert to array\n+            licenses=self._package.licenses,\n+            downloads=self._package.downloads,\n+\n+            flags=self._package.flags,\n+            shadow=shadow,\n+\n+            extrafields=self._package.extrafields,\n+        )\n \n",
        "source_code_with_indent": "\n    <DED>def unwrap(self) -> Package:\n        <IND>return self._package\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def spawn(self, repo: str, family: str, subrepo: Optional[str] = None, shadow: bool = False, default_maintainer: Optional[str] = None) -> Package:\n        <IND>if self._package.name is None:\n            <IND>raise RuntimeError('Attempt to spawn Package with unset name')\n        <DED>if self._package.version is None:\n            <IND>raise RuntimeError('Attempt to spawn Package with unset version')\n\n        <DED>maintainers: List[str] = self._package.maintainers if self._package.maintainers else [default_maintainer] if default_maintainer else []\n\n        return Package(\n            repo=repo,\n            family=family,\n            subrepo=self._package.subrepo or subrepo,\n\n            name=self._package.name,\n            basename=self._package.basename,\n\n            version=self._package.version,\n            origversion=self._package.version,\n            rawversion=self._package.rawversion if self._package.rawversion is not None else self._package.version,\n\n            arch=self._package.arch,\n\n            maintainers=maintainers,\n            category=self._package.categories[0] if self._package.categories else None,  # XXX: convert to array\n            comment=self._package.summary,\n            homepage=self._package.homepages[0] if self._package.homepages else None,  # XXX: convert to array\n            licenses=self._package.licenses,\n            downloads=self._package.downloads,\n\n            flags=self._package.flags,\n            shadow=shadow,\n\n            extrafields=self._package.extrafields,\n        )\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "repology/repology-updater",
    "commit": "9f67d556944fe256c990593f673713e299feaf8a",
    "filename": "repology/packagemaker/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/repology-repology-updater/repology/packagemaker/__init__.py",
    "file_hunks_size": 17,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "repology/packagemaker/__init__.py:152:37 Incompatible parameter type [6]: Expected `PackageMakerBase` for 1st positional only parameter to call `PackageMakerBase._simple_setter` but got `str`.",
    "message": " Expected `PackageMakerBase` for 1st positional only parameter to call `PackageMakerBase._simple_setter` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 152,
    "warning_line": "    @PackageMakerBase._simple_setter('version', str, nzs.strip, nzs.forbid_newlines)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from functools import wraps\nfrom typing import Any, Callable, Iterable, Optional\n\nfrom repology.logger import Logger\nfrom repology.package import Package\nfrom repology.packagemaker import normalizers as nzs\n\n",
        "source_code_len": 208,
        "target_code": "from functools import wraps\nfrom typing import Any, Callable, Dict, Iterable, List, Optional, Type\n\nfrom repology.logger import Logger\nfrom repology.package import Package, PackageStatus\nfrom repology.packagemaker import normalizers as nzs\nfrom repology.packagemaker.normalizers import NormalizerFunction\n\n",
        "target_code_len": 306,
        "diff_format": "@@ -24,7 +22,8 @@\n from functools import wraps\n-from typing import Any, Callable, Iterable, Optional\n+from typing import Any, Callable, Dict, Iterable, List, Optional, Type\n \n from repology.logger import Logger\n-from repology.package import Package\n+from repology.package import Package, PackageStatus\n from repology.packagemaker import normalizers as nzs\n+from repology.packagemaker.normalizers import NormalizerFunction\n \n",
        "source_code_with_indent": "from functools import wraps\nfrom typing import Any, Callable, Iterable, Optional\n\nfrom repology.logger import Logger\nfrom repology.package import Package\nfrom repology.packagemaker import normalizers as nzs\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from functools import wraps\nfrom typing import Any, Callable, Dict, Iterable, List, Optional, Type\n\nfrom repology.logger import Logger\nfrom repology.package import Package, PackageStatus\nfrom repology.packagemaker import normalizers as nzs\nfrom repology.packagemaker.normalizers import NormalizerFunction\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _iter_unique(iterable, existing=None):\n    seen = set(existing) if existing else set()\n    for value in iterable:\n        if value not in seen:\n            seen.add(value)\n            yield value\n\n",
        "source_code_len": 202,
        "target_code": "\nclass PackageTemplate:\n    __slots__ = [\n        'subrepo',\n\n        'name',\n        'basename',\n\n        'version',\n        'origversion',\n        'rawversion',\n\n        'arch',\n        'summary',\n        'maintainers',\n        'categories',\n        'homepages',\n        'licenses',\n        'downloads',\n\n        'flags',\n\n        'extrafields',\n    ]\n\n    subrepo: Optional[str]\n\n    name: Optional[str]\n    basename: Optional[str]\n\n    version: Optional[str]\n    origversion: Optional[str]\n    rawversion: Optional[str]\n\n    arch: Optional[str]\n    summary: Optional[str]\n    maintainers: List[str]\n    categories: List[str]\n    homepages: List[str]\n    licenses: List[str]\n    downloads: List[str]\n\n    flags: int\n\n    extrafields: Dict[str, str]\n\n    def __init__(self) -> None:\n        self.subrepo = None\n\n        self.name = None\n        self.basename = None\n\n        self.version = None\n        self.origversion = None\n        self.rawversion = None\n\n        self.arch = None\n        self.summary = None\n        self.maintainers = []\n        self.categories = []\n        self.homepages = []\n        self.licenses = []\n        self.downloads = []\n\n        self.flags = 0\n\n        self.extrafields = {}\n\n",
        "target_code_len": 1212,
        "diff_format": "@@ -34,8 +33,68 @@\n \n-def _iter_unique(iterable, existing=None):\n-    seen = set(existing) if existing else set()\n-    for value in iterable:\n-        if value not in seen:\n-            seen.add(value)\n-            yield value\n+class PackageTemplate:\n+    __slots__ = [\n+        'subrepo',\n+\n+        'name',\n+        'basename',\n+\n+        'version',\n+        'origversion',\n+        'rawversion',\n+\n+        'arch',\n+        'summary',\n+        'maintainers',\n+        'categories',\n+        'homepages',\n+        'licenses',\n+        'downloads',\n+\n+        'flags',\n+\n+        'extrafields',\n+    ]\n+\n+    subrepo: Optional[str]\n+\n+    name: Optional[str]\n+    basename: Optional[str]\n+\n+    version: Optional[str]\n+    origversion: Optional[str]\n+    rawversion: Optional[str]\n+\n+    arch: Optional[str]\n+    summary: Optional[str]\n+    maintainers: List[str]\n+    categories: List[str]\n+    homepages: List[str]\n+    licenses: List[str]\n+    downloads: List[str]\n+\n+    flags: int\n+\n+    extrafields: Dict[str, str]\n+\n+    def __init__(self) -> None:\n+        self.subrepo = None\n+\n+        self.name = None\n+        self.basename = None\n+\n+        self.version = None\n+        self.origversion = None\n+        self.rawversion = None\n+\n+        self.arch = None\n+        self.summary = None\n+        self.maintainers = []\n+        self.categories = []\n+        self.homepages = []\n+        self.licenses = []\n+        self.downloads = []\n+\n+        self.flags = 0\n+\n+        self.extrafields = {}\n \n",
        "source_code_with_indent": "\ndef _iter_unique(iterable, existing=None):\n    <IND>seen = set(existing) if existing else set()\n    for value in iterable:\n        <IND>if value not in seen:\n            <IND>seen.add(value)\n            yield value\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nclass PackageTemplate:\n    <IND>__slots__ = [\n        'subrepo',\n\n        'name',\n        'basename',\n\n        'version',\n        'origversion',\n        'rawversion',\n\n        'arch',\n        'summary',\n        'maintainers',\n        'categories',\n        'homepages',\n        'licenses',\n        'downloads',\n\n        'flags',\n\n        'extrafields',\n    ]\n\n    subrepo: Optional[str]\n\n    name: Optional[str]\n    basename: Optional[str]\n\n    version: Optional[str]\n    origversion: Optional[str]\n    rawversion: Optional[str]\n\n    arch: Optional[str]\n    summary: Optional[str]\n    maintainers: List[str]\n    categories: List[str]\n    homepages: List[str]\n    licenses: List[str]\n    downloads: List[str]\n\n    flags: int\n\n    extrafields: Dict[str, str]\n\n    def __init__(self) -> None:\n        <IND>self.subrepo = None\n\n        self.name = None\n        self.basename = None\n\n        self.version = None\n        self.origversion = None\n        self.rawversion = None\n\n        self.arch = None\n        self.summary = None\n        self.maintainers = []\n        self.categories = []\n        self.homepages = []\n        self.licenses = []\n        self.downloads = []\n\n        self.flags = 0\n\n        self.extrafields = {}\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _omnivorous_setter(fieldname, want_type, *normalizers):  # noqa: N805\n        def inner(method):\n            @wraps(method)\n            def wrapper(self, *args):\n                values = self._normalize_args(args, fieldname, want_type, normalizers)\n                if values:\n                    return method(self, *values)\n            return wrapper\n        return inner\n\n    def _simple_setter(fieldname, want_type, *normalizers):  # noqa: N805\n        def inner(method):\n            @wraps(method)\n            def wrapper(self, arg, *other_args):\n                if arg is None:\n                    pass\n                elif isinstance(arg, str) and want_type is int or isinstance(arg, int) and want_type is str:\n                    arg = want_type(arg)\n                elif not isinstance(arg, want_type):\n                    raise RuntimeError('unexpected type {} for {} (expected {})'.format(arg.__class__.__name__, fieldname, want_type.__name__))\n                value = self._apply_normalizers(arg, fieldname, normalizers)\n                if value:\n                    return method(self, value, *other_args)\n            return wrapper\n        return inner\n\n",
        "source_code_len": 1176,
        "target_code": "\n\ndef _omnivorous_setter(fieldname: str, want_type: Type[Any], *normalizers: NormalizerFunction) -> Callable[[Callable[..., Any]], Any]:\n    def inner(method: Callable[..., Any]) -> Callable[..., Any]:\n        @wraps(method)\n        def wrapper(self: PackageMakerBase, *args: Any) -> Any:\n            values = self._normalize_args(args, fieldname, want_type, normalizers)\n            if values:\n                return method(self, *values)\n        return wrapper\n    return inner\n\n\ndef _simple_setter(fieldname: str, want_type: Type[Any], *normalizers: NormalizerFunction) -> Callable[[Callable[..., Any]], Any]:\n    def inner(method: Callable[..., Any]) -> Callable[..., Any]:\n        @wraps(method)\n        def wrapper(self: PackageMakerBase, arg: Any, *other_args: Any) -> Any:\n            if arg is None:\n                pass\n            elif isinstance(arg, str) and want_type is int or isinstance(arg, int) and want_type is str:\n                arg = want_type(arg)\n            elif not isinstance(arg, want_type):\n                raise RuntimeError('unexpected type {} for {} (expected {})'.format(arg.__class__.__name__, fieldname, want_type.__name__))\n            value = self._apply_normalizers(arg, fieldname, normalizers)\n            if value:\n                return method(self, value, *other_args)\n        return wrapper\n    return inner\n\n\ndef _extend_unique(existing: List[str], iterable: Iterable[str]) -> None:\n    seen = set(existing) if existing else set()\n\n    for value in iterable:\n        if value not in seen:\n            seen.add(value)\n            existing.append(value)\n\n",
        "target_code_len": 1598,
        "diff_format": "@@ -92,27 +151,38 @@\n \n-    def _omnivorous_setter(fieldname, want_type, *normalizers):  # noqa: N805\n-        def inner(method):\n-            @wraps(method)\n-            def wrapper(self, *args):\n-                values = self._normalize_args(args, fieldname, want_type, normalizers)\n-                if values:\n-                    return method(self, *values)\n-            return wrapper\n-        return inner\n-\n-    def _simple_setter(fieldname, want_type, *normalizers):  # noqa: N805\n-        def inner(method):\n-            @wraps(method)\n-            def wrapper(self, arg, *other_args):\n-                if arg is None:\n-                    pass\n-                elif isinstance(arg, str) and want_type is int or isinstance(arg, int) and want_type is str:\n-                    arg = want_type(arg)\n-                elif not isinstance(arg, want_type):\n-                    raise RuntimeError('unexpected type {} for {} (expected {})'.format(arg.__class__.__name__, fieldname, want_type.__name__))\n-                value = self._apply_normalizers(arg, fieldname, normalizers)\n-                if value:\n-                    return method(self, value, *other_args)\n-            return wrapper\n-        return inner\n+\n+def _omnivorous_setter(fieldname: str, want_type: Type[Any], *normalizers: NormalizerFunction) -> Callable[[Callable[..., Any]], Any]:\n+    def inner(method: Callable[..., Any]) -> Callable[..., Any]:\n+        @wraps(method)\n+        def wrapper(self: PackageMakerBase, *args: Any) -> Any:\n+            values = self._normalize_args(args, fieldname, want_type, normalizers)\n+            if values:\n+                return method(self, *values)\n+        return wrapper\n+    return inner\n+\n+\n+def _simple_setter(fieldname: str, want_type: Type[Any], *normalizers: NormalizerFunction) -> Callable[[Callable[..., Any]], Any]:\n+    def inner(method: Callable[..., Any]) -> Callable[..., Any]:\n+        @wraps(method)\n+        def wrapper(self: PackageMakerBase, arg: Any, *other_args: Any) -> Any:\n+            if arg is None:\n+                pass\n+            elif isinstance(arg, str) and want_type is int or isinstance(arg, int) and want_type is str:\n+                arg = want_type(arg)\n+            elif not isinstance(arg, want_type):\n+                raise RuntimeError('unexpected type {} for {} (expected {})'.format(arg.__class__.__name__, fieldname, want_type.__name__))\n+            value = self._apply_normalizers(arg, fieldname, normalizers)\n+            if value:\n+                return method(self, value, *other_args)\n+        return wrapper\n+    return inner\n+\n+\n+def _extend_unique(existing: List[str], iterable: Iterable[str]) -> None:\n+    seen = set(existing) if existing else set()\n+\n+    for value in iterable:\n+        if value not in seen:\n+            seen.add(value)\n+            existing.append(value)\n \n",
        "source_code_with_indent": "\n    <DED>def _omnivorous_setter(fieldname, want_type, *normalizers):  # noqa: N805\n        <IND>def inner(method):\n            <IND>@wraps(method)\n            def wrapper(self, *args):\n                <IND>values = self._normalize_args(args, fieldname, want_type, normalizers)\n                if values:\n                    <IND>return method(self, *values)\n            <DED><DED>return wrapper\n        <DED>return inner\n\n    <DED>def _simple_setter(fieldname, want_type, *normalizers):  # noqa: N805\n        <IND>def inner(method):\n            <IND>@wraps(method)\n            def wrapper(self, arg, *other_args):\n                <IND>if arg is None:\n                    <IND>pass\n                <DED>elif isinstance(arg, str) and want_type is int or isinstance(arg, int) and want_type is str:\n                    <IND>arg = want_type(arg)\n                <DED>elif not isinstance(arg, want_type):\n                    <IND>raise RuntimeError('unexpected type {} for {} (expected {})'.format(arg.__class__.__name__, fieldname, want_type.__name__))\n                <DED>value = self._apply_normalizers(arg, fieldname, normalizers)\n                if value:\n                    <IND>return method(self, value, *other_args)\n            <DED><DED>return wrapper\n        <DED>return inner\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n\n<DED><DED>def _omnivorous_setter(fieldname: str, want_type: Type[Any], *normalizers: NormalizerFunction) -> Callable[[Callable[..., Any]], Any]:\n    <IND>def inner(method: Callable[..., Any]) -> Callable[..., Any]:\n        <IND>@wraps(method)\n        def wrapper(self: PackageMakerBase, *args: Any) -> Any:\n            <IND>values = self._normalize_args(args, fieldname, want_type, normalizers)\n            if values:\n                <IND>return method(self, *values)\n        <DED><DED>return wrapper\n    <DED>return inner\n\n\n<DED>def _simple_setter(fieldname: str, want_type: Type[Any], *normalizers: NormalizerFunction) -> Callable[[Callable[..., Any]], Any]:\n    <IND>def inner(method: Callable[..., Any]) -> Callable[..., Any]:\n        <IND>@wraps(method)\n        def wrapper(self: PackageMakerBase, arg: Any, *other_args: Any) -> Any:\n            <IND>if arg is None:\n                <IND>pass\n            <DED>elif isinstance(arg, str) and want_type is int or isinstance(arg, int) and want_type is str:\n                <IND>arg = want_type(arg)\n            <DED>elif not isinstance(arg, want_type):\n                <IND>raise RuntimeError('unexpected type {} for {} (expected {})'.format(arg.__class__.__name__, fieldname, want_type.__name__))\n            <DED>value = self._apply_normalizers(arg, fieldname, normalizers)\n            if value:\n                <IND>return method(self, value, *other_args)\n        <DED><DED>return wrapper\n    <DED>return inner\n\n\n<DED>def _extend_unique(existing: List[str], iterable: Iterable[str]) -> None:\n    <IND>seen = set(existing) if existing else set()\n\n    for value in iterable:\n        <IND>if value not in seen:\n            <IND>seen.add(value)\n            existing.append(value)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "class PackageMaker(PackageMakerBase):\n    _package: Package\n    _ident: Optional[str]\n",
        "source_code_len": 86,
        "target_code": "class PackageMaker(PackageMakerBase):\n    _package: PackageTemplate\n    _ident: Optional[str]\n",
        "target_code_len": 94,
        "diff_format": "@@ -120,3 +190,3 @@\n class PackageMaker(PackageMakerBase):\n-    _package: Package\n+    _package: PackageTemplate\n     _ident: Optional[str]\n",
        "source_code_with_indent": "<DED><DED>class PackageMaker(PackageMakerBase):\n    <IND>_package: Package\n    _ident: Optional[str]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED><DED><DED>class PackageMaker(PackageMakerBase):\n    <IND>_package: PackageTemplate\n    _ident: Optional[str]\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        super(PackageMaker, self).__init__(logger)\n        self._package = Package()\n        self._ident = ident\n",
        "source_code_len": 113,
        "target_code": "        super(PackageMaker, self).__init__(logger)\n        self._package = PackageTemplate()\n        self._ident = ident\n",
        "target_code_len": 121,
        "diff_format": "@@ -127,3 +197,3 @@\n         super(PackageMaker, self).__init__(logger)\n-        self._package = Package()\n+        self._package = PackageTemplate()\n         self._ident = ident\n",
        "source_code_with_indent": "        <IND>super(PackageMaker, self).__init__(logger)\n        self._package = Package()\n        self._ident = ident\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>super(PackageMaker, self).__init__(logger)\n        self._package = PackageTemplate()\n        self._ident = ident\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    @PackageMakerBase._simple_setter('origin', str, nzs.strip, nzs.forbid_newlines)\n    def set_origin(self, origin: str) -> None:\n",
        "source_code_len": 132,
        "target_code": "\n    @_simple_setter('origin', str, nzs.strip, nzs.forbid_newlines)\n    def set_origin(self, origin: str) -> None:\n",
        "target_code_len": 115,
        "diff_format": "@@ -135,3 +205,3 @@\n \n-    @PackageMakerBase._simple_setter('origin', str, nzs.strip, nzs.forbid_newlines)\n+    @_simple_setter('origin', str, nzs.strip, nzs.forbid_newlines)\n     def set_origin(self, origin: str) -> None:\n",
        "source_code_with_indent": "\n    <DED>@PackageMakerBase._simple_setter('origin', str, nzs.strip, nzs.forbid_newlines)\n    def set_origin(self, origin: str) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>@_simple_setter('origin', str, nzs.strip, nzs.forbid_newlines)\n    def set_origin(self, origin: str) -> None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    @PackageMakerBase._simple_setter('name', str, nzs.strip, nzs.forbid_newlines)\n    def set_name(self, name: str) -> None:\n",
        "source_code_len": 126,
        "target_code": "\n    @_simple_setter('name', str, nzs.strip, nzs.forbid_newlines)\n    def set_name(self, name: str) -> None:\n",
        "target_code_len": 109,
        "diff_format": "@@ -140,3 +210,3 @@\n \n-    @PackageMakerBase._simple_setter('name', str, nzs.strip, nzs.forbid_newlines)\n+    @_simple_setter('name', str, nzs.strip, nzs.forbid_newlines)\n     def set_name(self, name: str) -> None:\n",
        "source_code_with_indent": "\n    <DED>@PackageMakerBase._simple_setter('name', str, nzs.strip, nzs.forbid_newlines)\n    def set_name(self, name: str) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>@_simple_setter('name', str, nzs.strip, nzs.forbid_newlines)\n    def set_name(self, name: str) -> None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    @PackageMakerBase._simple_setter('basename', str, nzs.strip, nzs.forbid_newlines)\n    def set_basename(self, basename: str) -> None:\n",
        "source_code_len": 138,
        "target_code": "\n    @_simple_setter('basename', str, nzs.strip, nzs.forbid_newlines)\n    def set_basename(self, basename: str) -> None:\n",
        "target_code_len": 121,
        "diff_format": "@@ -144,3 +214,3 @@\n \n-    @PackageMakerBase._simple_setter('basename', str, nzs.strip, nzs.forbid_newlines)\n+    @_simple_setter('basename', str, nzs.strip, nzs.forbid_newlines)\n     def set_basename(self, basename: str) -> None:\n",
        "source_code_with_indent": "\n    <DED>@PackageMakerBase._simple_setter('basename', str, nzs.strip, nzs.forbid_newlines)\n    def set_basename(self, basename: str) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>@_simple_setter('basename', str, nzs.strip, nzs.forbid_newlines)\n    def set_basename(self, basename: str) -> None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def prefix_name(self, prefix: str) -> None:\n        self._package.name = prefix + self._package.name\n\n    @PackageMakerBase._simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n    def set_version(self, version: str, version_normalizer: Optional[Callable[[str], str]] = None) -> None:\n",
        "source_code_len": 299,
        "target_code": "    def prefix_name(self, prefix: str) -> None:\n        assert(self._package.name)\n        self._package.name = prefix + self._package.name\n\n    @_simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n    def set_version(self, version: str, version_normalizer: Optional[Callable[[str], str]] = None) -> None:\n",
        "target_code_len": 317,
        "diff_format": "@@ -149,5 +219,6 @@\n     def prefix_name(self, prefix: str) -> None:\n+        assert(self._package.name)\n         self._package.name = prefix + self._package.name\n \n-    @PackageMakerBase._simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n+    @_simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n     def set_version(self, version: str, version_normalizer: Optional[Callable[[str], str]] = None) -> None:\n",
        "source_code_with_indent": "    <DED>def prefix_name(self, prefix: str) -> None:\n        <IND>self._package.name = prefix + self._package.name\n\n    <DED>@PackageMakerBase._simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n    def set_version(self, version: str, version_normalizer: Optional[Callable[[str], str]] = None) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def prefix_name(self, prefix: str) -> None:\n        <IND>assert(self._package.name)\n        self._package.name = prefix + self._package.name\n\n    <DED>@_simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n    def set_version(self, version: str, version_normalizer: Optional[Callable[[str], str]] = None) -> None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    @PackageMakerBase._simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n    def set_rawversion(self, rawversion: str) -> None:\n",
        "source_code_len": 141,
        "target_code": "\n    @_simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n    def set_rawversion(self, rawversion: str) -> None:\n",
        "target_code_len": 124,
        "diff_format": "@@ -157,3 +228,3 @@\n \n-    @PackageMakerBase._simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n+    @_simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n     def set_rawversion(self, rawversion: str) -> None:\n",
        "source_code_with_indent": "\n    <DED>@PackageMakerBase._simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n    def set_rawversion(self, rawversion: str) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>@_simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n    def set_rawversion(self, rawversion: str) -> None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    @PackageMakerBase._simple_setter('arch', str, nzs.strip, nzs.forbid_newlines)\n    def set_arch(self, arch: str) -> None:\n",
        "source_code_len": 126,
        "target_code": "\n    @_simple_setter('arch', str, nzs.strip, nzs.forbid_newlines)\n    def set_arch(self, arch: str) -> None:\n",
        "target_code_len": 109,
        "diff_format": "@@ -167,3 +238,3 @@\n \n-    @PackageMakerBase._simple_setter('arch', str, nzs.strip, nzs.forbid_newlines)\n+    @_simple_setter('arch', str, nzs.strip, nzs.forbid_newlines)\n     def set_arch(self, arch: str) -> None:\n",
        "source_code_with_indent": "\n    <DED>@PackageMakerBase._simple_setter('arch', str, nzs.strip, nzs.forbid_newlines)\n    def set_arch(self, arch: str) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>@_simple_setter('arch', str, nzs.strip, nzs.forbid_newlines)\n    def set_arch(self, arch: str) -> None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    @PackageMakerBase._simple_setter('subrepo', str, nzs.strip, nzs.forbid_newlines)\n    def set_subrepo(self, subrepo: str) -> None:\n",
        "source_code_len": 135,
        "target_code": "\n    @_simple_setter('subrepo', str, nzs.strip, nzs.forbid_newlines)\n    def set_subrepo(self, subrepo: str) -> None:\n",
        "target_code_len": 118,
        "diff_format": "@@ -171,3 +242,3 @@\n \n-    @PackageMakerBase._simple_setter('subrepo', str, nzs.strip, nzs.forbid_newlines)\n+    @_simple_setter('subrepo', str, nzs.strip, nzs.forbid_newlines)\n     def set_subrepo(self, subrepo: str) -> None:\n",
        "source_code_with_indent": "\n    <DED>@PackageMakerBase._simple_setter('subrepo', str, nzs.strip, nzs.forbid_newlines)\n    def set_subrepo(self, subrepo: str) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>@_simple_setter('subrepo', str, nzs.strip, nzs.forbid_newlines)\n    def set_subrepo(self, subrepo: str) -> None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    @PackageMakerBase._simple_setter('summary', str, nzs.strip)\n    def set_summary(self, summary: str) -> None:\n        self._package.comment = summary\n\n    @PackageMakerBase._omnivorous_setter('maintainer', str, nzs.strip, nzs.forbid_newlines, nzs.tolower)\n    def add_maintainers(self, *args: Any) -> None:\n        self._package.maintainers.extend(_iter_unique(args, self._package.maintainers))\n\n    @PackageMakerBase._omnivorous_setter('category', str, nzs.strip, nzs.forbid_newlines)\n    def add_categories(self, *args: Any) -> None:\n        # XXX: convert into array\n        if not self._package.category:\n            self._package.category = args[0]\n\n    @PackageMakerBase._omnivorous_setter('homepage', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n    def add_homepages(self, *args: Any) -> None:\n        # XXX: convert into array\n        if not self._package.homepage:\n            self._package.homepage = args[0]\n\n    @PackageMakerBase._omnivorous_setter('license', str, nzs.strip, nzs.forbid_newlines)\n    def add_licenses(self, *args: Any) -> None:\n        self._package.licenses.extend(args)\n\n    @PackageMakerBase._omnivorous_setter('download', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n    def add_downloads(self, *args: Any) -> None:\n        self._package.downloads.extend(_iter_unique(args, self._package.downloads))\n\n    def set_flags(self, mask: int, is_set: bool = True) -> None:\n        self._package.set_flag(mask, is_set)\n\n",
        "source_code_len": 1494,
        "target_code": "\n    @_simple_setter('summary', str, nzs.strip)\n    def set_summary(self, summary: str) -> None:\n        self._package.summary = summary\n\n    @_omnivorous_setter('maintainer', str, nzs.strip, nzs.forbid_newlines, nzs.tolower)\n    def add_maintainers(self, *args: Any) -> None:\n        _extend_unique(self._package.maintainers, args)\n\n    @_omnivorous_setter('category', str, nzs.strip, nzs.forbid_newlines)\n    def add_categories(self, *args: Any) -> None:\n        _extend_unique(self._package.categories, args)\n\n    @_omnivorous_setter('homepage', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n    def add_homepages(self, *args: Any) -> None:\n        _extend_unique(self._package.homepages, args)\n\n    @_omnivorous_setter('license', str, nzs.strip, nzs.forbid_newlines)\n    def add_licenses(self, *args: Any) -> None:\n        _extend_unique(self._package.licenses, args)\n\n    @_omnivorous_setter('download', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n    def add_downloads(self, *args: Any) -> None:\n        _extend_unique(self._package.downloads, args)\n\n    def set_flags(self, mask: int, is_set: bool = True) -> None:\n        if is_set:\n            self._package.flags |= mask\n        else:\n            self._package.flags &= ~mask\n\n",
        "target_code_len": 1281,
        "diff_format": "@@ -175,32 +246,31 @@\n \n-    @PackageMakerBase._simple_setter('summary', str, nzs.strip)\n+    @_simple_setter('summary', str, nzs.strip)\n     def set_summary(self, summary: str) -> None:\n-        self._package.comment = summary\n-\n-    @PackageMakerBase._omnivorous_setter('maintainer', str, nzs.strip, nzs.forbid_newlines, nzs.tolower)\n+        self._package.summary = summary\n+\n+    @_omnivorous_setter('maintainer', str, nzs.strip, nzs.forbid_newlines, nzs.tolower)\n     def add_maintainers(self, *args: Any) -> None:\n-        self._package.maintainers.extend(_iter_unique(args, self._package.maintainers))\n-\n-    @PackageMakerBase._omnivorous_setter('category', str, nzs.strip, nzs.forbid_newlines)\n+        _extend_unique(self._package.maintainers, args)\n+\n+    @_omnivorous_setter('category', str, nzs.strip, nzs.forbid_newlines)\n     def add_categories(self, *args: Any) -> None:\n-        # XXX: convert into array\n-        if not self._package.category:\n-            self._package.category = args[0]\n-\n-    @PackageMakerBase._omnivorous_setter('homepage', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n+        _extend_unique(self._package.categories, args)\n+\n+    @_omnivorous_setter('homepage', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n     def add_homepages(self, *args: Any) -> None:\n-        # XXX: convert into array\n-        if not self._package.homepage:\n-            self._package.homepage = args[0]\n-\n-    @PackageMakerBase._omnivorous_setter('license', str, nzs.strip, nzs.forbid_newlines)\n+        _extend_unique(self._package.homepages, args)\n+\n+    @_omnivorous_setter('license', str, nzs.strip, nzs.forbid_newlines)\n     def add_licenses(self, *args: Any) -> None:\n-        self._package.licenses.extend(args)\n-\n-    @PackageMakerBase._omnivorous_setter('download', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n+        _extend_unique(self._package.licenses, args)\n+\n+    @_omnivorous_setter('download', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n     def add_downloads(self, *args: Any) -> None:\n-        self._package.downloads.extend(_iter_unique(args, self._package.downloads))\n+        _extend_unique(self._package.downloads, args)\n \n     def set_flags(self, mask: int, is_set: bool = True) -> None:\n-        self._package.set_flag(mask, is_set)\n+        if is_set:\n+            self._package.flags |= mask\n+        else:\n+            self._package.flags &= ~mask\n \n",
        "source_code_with_indent": "\n    <DED>@PackageMakerBase._simple_setter('summary', str, nzs.strip)\n    def set_summary(self, summary: str) -> None:\n        <IND>self._package.comment = summary\n\n    <DED>@PackageMakerBase._omnivorous_setter('maintainer', str, nzs.strip, nzs.forbid_newlines, nzs.tolower)\n    def add_maintainers(self, *args: Any) -> None:\n        <IND>self._package.maintainers.extend(_iter_unique(args, self._package.maintainers))\n\n    <DED>@PackageMakerBase._omnivorous_setter('category', str, nzs.strip, nzs.forbid_newlines)\n    def add_categories(self, *args: Any) -> None:\n        # XXX: convert into array\n        <IND>if not self._package.category:\n            <IND>self._package.category = args[0]\n\n    <DED><DED>@PackageMakerBase._omnivorous_setter('homepage', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n    def add_homepages(self, *args: Any) -> None:\n        # XXX: convert into array\n        <IND>if not self._package.homepage:\n            <IND>self._package.homepage = args[0]\n\n    <DED><DED>@PackageMakerBase._omnivorous_setter('license', str, nzs.strip, nzs.forbid_newlines)\n    def add_licenses(self, *args: Any) -> None:\n        <IND>self._package.licenses.extend(args)\n\n    <DED>@PackageMakerBase._omnivorous_setter('download', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n    def add_downloads(self, *args: Any) -> None:\n        <IND>self._package.downloads.extend(_iter_unique(args, self._package.downloads))\n\n    <DED>def set_flags(self, mask: int, is_set: bool = True) -> None:\n        <IND>self._package.set_flag(mask, is_set)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>@_simple_setter('summary', str, nzs.strip)\n    def set_summary(self, summary: str) -> None:\n        <IND>self._package.summary = summary\n\n    <DED>@_omnivorous_setter('maintainer', str, nzs.strip, nzs.forbid_newlines, nzs.tolower)\n    def add_maintainers(self, *args: Any) -> None:\n        <IND>_extend_unique(self._package.maintainers, args)\n\n    <DED>@_omnivorous_setter('category', str, nzs.strip, nzs.forbid_newlines)\n    def add_categories(self, *args: Any) -> None:\n        <IND>_extend_unique(self._package.categories, args)\n\n    <DED>@_omnivorous_setter('homepage', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n    def add_homepages(self, *args: Any) -> None:\n        <IND>_extend_unique(self._package.homepages, args)\n\n    <DED>@_omnivorous_setter('license', str, nzs.strip, nzs.forbid_newlines)\n    def add_licenses(self, *args: Any) -> None:\n        <IND>_extend_unique(self._package.licenses, args)\n\n    <DED>@_omnivorous_setter('download', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n    def add_downloads(self, *args: Any) -> None:\n        <IND>_extend_unique(self._package.downloads, args)\n\n    <DED>def set_flags(self, mask: int, is_set: bool = True) -> None:\n        <IND>if is_set:\n            <IND>self._package.flags |= mask\n        <DED>else:\n            <IND>self._package.flags &= ~mask\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def unwrap(self) -> Package:\n        return self._package\n\n",
        "source_code_len": 64,
        "target_code": "\n    def spawn(self, repo: str, family: str, subrepo: Optional[str] = None, shadow: bool = False, default_maintainer: Optional[str] = None) -> Package:\n        if self._package.name is None:\n            raise RuntimeError('Attempt to spawn Package with unset name')\n        if self._package.version is None:\n            raise RuntimeError('Attempt to spawn Package with unset version')\n\n        maintainers: List[str] = self._package.maintainers if self._package.maintainers else [default_maintainer] if default_maintainer else []\n\n        return Package(\n            repo=repo,\n            family=family,\n            subrepo=self._package.subrepo or subrepo,\n\n            name=self._package.name,\n            basename=self._package.basename,\n\n            version=self._package.version,\n            origversion=self._package.version,\n            rawversion=self._package.rawversion if self._package.rawversion is not None else self._package.version,\n\n            arch=self._package.arch,\n\n            maintainers=maintainers,\n            category=self._package.categories[0] if self._package.categories else None,  # XXX: convert to array\n            comment=self._package.summary,\n            homepage=self._package.homepages[0] if self._package.homepages else None,  # XXX: convert to array\n            licenses=self._package.licenses,\n            downloads=self._package.downloads,\n\n            flags=self._package.flags,\n            shadow=shadow,\n\n            extrafields=self._package.extrafields,\n        )\n\n",
        "target_code_len": 1515,
        "diff_format": "@@ -209,4 +279,36 @@\n \n-    def unwrap(self) -> Package:\n-        return self._package\n+    def spawn(self, repo: str, family: str, subrepo: Optional[str] = None, shadow: bool = False, default_maintainer: Optional[str] = None) -> Package:\n+        if self._package.name is None:\n+            raise RuntimeError('Attempt to spawn Package with unset name')\n+        if self._package.version is None:\n+            raise RuntimeError('Attempt to spawn Package with unset version')\n+\n+        maintainers: List[str] = self._package.maintainers if self._package.maintainers else [default_maintainer] if default_maintainer else []\n+\n+        return Package(\n+            repo=repo,\n+            family=family,\n+            subrepo=self._package.subrepo or subrepo,\n+\n+            name=self._package.name,\n+            basename=self._package.basename,\n+\n+            version=self._package.version,\n+            origversion=self._package.version,\n+            rawversion=self._package.rawversion if self._package.rawversion is not None else self._package.version,\n+\n+            arch=self._package.arch,\n+\n+            maintainers=maintainers,\n+            category=self._package.categories[0] if self._package.categories else None,  # XXX: convert to array\n+            comment=self._package.summary,\n+            homepage=self._package.homepages[0] if self._package.homepages else None,  # XXX: convert to array\n+            licenses=self._package.licenses,\n+            downloads=self._package.downloads,\n+\n+            flags=self._package.flags,\n+            shadow=shadow,\n+\n+            extrafields=self._package.extrafields,\n+        )\n \n",
        "source_code_with_indent": "\n    <DED>def unwrap(self) -> Package:\n        <IND>return self._package\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def spawn(self, repo: str, family: str, subrepo: Optional[str] = None, shadow: bool = False, default_maintainer: Optional[str] = None) -> Package:\n        <IND>if self._package.name is None:\n            <IND>raise RuntimeError('Attempt to spawn Package with unset name')\n        <DED>if self._package.version is None:\n            <IND>raise RuntimeError('Attempt to spawn Package with unset version')\n\n        <DED>maintainers: List[str] = self._package.maintainers if self._package.maintainers else [default_maintainer] if default_maintainer else []\n\n        return Package(\n            repo=repo,\n            family=family,\n            subrepo=self._package.subrepo or subrepo,\n\n            name=self._package.name,\n            basename=self._package.basename,\n\n            version=self._package.version,\n            origversion=self._package.version,\n            rawversion=self._package.rawversion if self._package.rawversion is not None else self._package.version,\n\n            arch=self._package.arch,\n\n            maintainers=maintainers,\n            category=self._package.categories[0] if self._package.categories else None,  # XXX: convert to array\n            comment=self._package.summary,\n            homepage=self._package.homepages[0] if self._package.homepages else None,  # XXX: convert to array\n            licenses=self._package.licenses,\n            downloads=self._package.downloads,\n\n            flags=self._package.flags,\n            shadow=shadow,\n\n            extrafields=self._package.extrafields,\n        )\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "repology/repology-updater",
    "commit": "9f67d556944fe256c990593f673713e299feaf8a",
    "filename": "repology/packagemaker/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/repology-repology-updater/repology/packagemaker/__init__.py",
    "file_hunks_size": 17,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "repology/packagemaker/__init__.py:158:37 Incompatible parameter type [6]: Expected `PackageMakerBase` for 1st positional only parameter to call `PackageMakerBase._simple_setter` but got `str`.",
    "message": " Expected `PackageMakerBase` for 1st positional only parameter to call `PackageMakerBase._simple_setter` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 158,
    "warning_line": "    @PackageMakerBase._simple_setter('version', str, nzs.strip, nzs.forbid_newlines)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from functools import wraps\nfrom typing import Any, Callable, Iterable, Optional\n\nfrom repology.logger import Logger\nfrom repology.package import Package\nfrom repology.packagemaker import normalizers as nzs\n\n",
        "source_code_len": 208,
        "target_code": "from functools import wraps\nfrom typing import Any, Callable, Dict, Iterable, List, Optional, Type\n\nfrom repology.logger import Logger\nfrom repology.package import Package, PackageStatus\nfrom repology.packagemaker import normalizers as nzs\nfrom repology.packagemaker.normalizers import NormalizerFunction\n\n",
        "target_code_len": 306,
        "diff_format": "@@ -24,7 +22,8 @@\n from functools import wraps\n-from typing import Any, Callable, Iterable, Optional\n+from typing import Any, Callable, Dict, Iterable, List, Optional, Type\n \n from repology.logger import Logger\n-from repology.package import Package\n+from repology.package import Package, PackageStatus\n from repology.packagemaker import normalizers as nzs\n+from repology.packagemaker.normalizers import NormalizerFunction\n \n",
        "source_code_with_indent": "from functools import wraps\nfrom typing import Any, Callable, Iterable, Optional\n\nfrom repology.logger import Logger\nfrom repology.package import Package\nfrom repology.packagemaker import normalizers as nzs\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from functools import wraps\nfrom typing import Any, Callable, Dict, Iterable, List, Optional, Type\n\nfrom repology.logger import Logger\nfrom repology.package import Package, PackageStatus\nfrom repology.packagemaker import normalizers as nzs\nfrom repology.packagemaker.normalizers import NormalizerFunction\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _iter_unique(iterable, existing=None):\n    seen = set(existing) if existing else set()\n    for value in iterable:\n        if value not in seen:\n            seen.add(value)\n            yield value\n\n",
        "source_code_len": 202,
        "target_code": "\nclass PackageTemplate:\n    __slots__ = [\n        'subrepo',\n\n        'name',\n        'basename',\n\n        'version',\n        'origversion',\n        'rawversion',\n\n        'arch',\n        'summary',\n        'maintainers',\n        'categories',\n        'homepages',\n        'licenses',\n        'downloads',\n\n        'flags',\n\n        'extrafields',\n    ]\n\n    subrepo: Optional[str]\n\n    name: Optional[str]\n    basename: Optional[str]\n\n    version: Optional[str]\n    origversion: Optional[str]\n    rawversion: Optional[str]\n\n    arch: Optional[str]\n    summary: Optional[str]\n    maintainers: List[str]\n    categories: List[str]\n    homepages: List[str]\n    licenses: List[str]\n    downloads: List[str]\n\n    flags: int\n\n    extrafields: Dict[str, str]\n\n    def __init__(self) -> None:\n        self.subrepo = None\n\n        self.name = None\n        self.basename = None\n\n        self.version = None\n        self.origversion = None\n        self.rawversion = None\n\n        self.arch = None\n        self.summary = None\n        self.maintainers = []\n        self.categories = []\n        self.homepages = []\n        self.licenses = []\n        self.downloads = []\n\n        self.flags = 0\n\n        self.extrafields = {}\n\n",
        "target_code_len": 1212,
        "diff_format": "@@ -34,8 +33,68 @@\n \n-def _iter_unique(iterable, existing=None):\n-    seen = set(existing) if existing else set()\n-    for value in iterable:\n-        if value not in seen:\n-            seen.add(value)\n-            yield value\n+class PackageTemplate:\n+    __slots__ = [\n+        'subrepo',\n+\n+        'name',\n+        'basename',\n+\n+        'version',\n+        'origversion',\n+        'rawversion',\n+\n+        'arch',\n+        'summary',\n+        'maintainers',\n+        'categories',\n+        'homepages',\n+        'licenses',\n+        'downloads',\n+\n+        'flags',\n+\n+        'extrafields',\n+    ]\n+\n+    subrepo: Optional[str]\n+\n+    name: Optional[str]\n+    basename: Optional[str]\n+\n+    version: Optional[str]\n+    origversion: Optional[str]\n+    rawversion: Optional[str]\n+\n+    arch: Optional[str]\n+    summary: Optional[str]\n+    maintainers: List[str]\n+    categories: List[str]\n+    homepages: List[str]\n+    licenses: List[str]\n+    downloads: List[str]\n+\n+    flags: int\n+\n+    extrafields: Dict[str, str]\n+\n+    def __init__(self) -> None:\n+        self.subrepo = None\n+\n+        self.name = None\n+        self.basename = None\n+\n+        self.version = None\n+        self.origversion = None\n+        self.rawversion = None\n+\n+        self.arch = None\n+        self.summary = None\n+        self.maintainers = []\n+        self.categories = []\n+        self.homepages = []\n+        self.licenses = []\n+        self.downloads = []\n+\n+        self.flags = 0\n+\n+        self.extrafields = {}\n \n",
        "source_code_with_indent": "\ndef _iter_unique(iterable, existing=None):\n    <IND>seen = set(existing) if existing else set()\n    for value in iterable:\n        <IND>if value not in seen:\n            <IND>seen.add(value)\n            yield value\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nclass PackageTemplate:\n    <IND>__slots__ = [\n        'subrepo',\n\n        'name',\n        'basename',\n\n        'version',\n        'origversion',\n        'rawversion',\n\n        'arch',\n        'summary',\n        'maintainers',\n        'categories',\n        'homepages',\n        'licenses',\n        'downloads',\n\n        'flags',\n\n        'extrafields',\n    ]\n\n    subrepo: Optional[str]\n\n    name: Optional[str]\n    basename: Optional[str]\n\n    version: Optional[str]\n    origversion: Optional[str]\n    rawversion: Optional[str]\n\n    arch: Optional[str]\n    summary: Optional[str]\n    maintainers: List[str]\n    categories: List[str]\n    homepages: List[str]\n    licenses: List[str]\n    downloads: List[str]\n\n    flags: int\n\n    extrafields: Dict[str, str]\n\n    def __init__(self) -> None:\n        <IND>self.subrepo = None\n\n        self.name = None\n        self.basename = None\n\n        self.version = None\n        self.origversion = None\n        self.rawversion = None\n\n        self.arch = None\n        self.summary = None\n        self.maintainers = []\n        self.categories = []\n        self.homepages = []\n        self.licenses = []\n        self.downloads = []\n\n        self.flags = 0\n\n        self.extrafields = {}\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _omnivorous_setter(fieldname, want_type, *normalizers):  # noqa: N805\n        def inner(method):\n            @wraps(method)\n            def wrapper(self, *args):\n                values = self._normalize_args(args, fieldname, want_type, normalizers)\n                if values:\n                    return method(self, *values)\n            return wrapper\n        return inner\n\n    def _simple_setter(fieldname, want_type, *normalizers):  # noqa: N805\n        def inner(method):\n            @wraps(method)\n            def wrapper(self, arg, *other_args):\n                if arg is None:\n                    pass\n                elif isinstance(arg, str) and want_type is int or isinstance(arg, int) and want_type is str:\n                    arg = want_type(arg)\n                elif not isinstance(arg, want_type):\n                    raise RuntimeError('unexpected type {} for {} (expected {})'.format(arg.__class__.__name__, fieldname, want_type.__name__))\n                value = self._apply_normalizers(arg, fieldname, normalizers)\n                if value:\n                    return method(self, value, *other_args)\n            return wrapper\n        return inner\n\n",
        "source_code_len": 1176,
        "target_code": "\n\ndef _omnivorous_setter(fieldname: str, want_type: Type[Any], *normalizers: NormalizerFunction) -> Callable[[Callable[..., Any]], Any]:\n    def inner(method: Callable[..., Any]) -> Callable[..., Any]:\n        @wraps(method)\n        def wrapper(self: PackageMakerBase, *args: Any) -> Any:\n            values = self._normalize_args(args, fieldname, want_type, normalizers)\n            if values:\n                return method(self, *values)\n        return wrapper\n    return inner\n\n\ndef _simple_setter(fieldname: str, want_type: Type[Any], *normalizers: NormalizerFunction) -> Callable[[Callable[..., Any]], Any]:\n    def inner(method: Callable[..., Any]) -> Callable[..., Any]:\n        @wraps(method)\n        def wrapper(self: PackageMakerBase, arg: Any, *other_args: Any) -> Any:\n            if arg is None:\n                pass\n            elif isinstance(arg, str) and want_type is int or isinstance(arg, int) and want_type is str:\n                arg = want_type(arg)\n            elif not isinstance(arg, want_type):\n                raise RuntimeError('unexpected type {} for {} (expected {})'.format(arg.__class__.__name__, fieldname, want_type.__name__))\n            value = self._apply_normalizers(arg, fieldname, normalizers)\n            if value:\n                return method(self, value, *other_args)\n        return wrapper\n    return inner\n\n\ndef _extend_unique(existing: List[str], iterable: Iterable[str]) -> None:\n    seen = set(existing) if existing else set()\n\n    for value in iterable:\n        if value not in seen:\n            seen.add(value)\n            existing.append(value)\n\n",
        "target_code_len": 1598,
        "diff_format": "@@ -92,27 +151,38 @@\n \n-    def _omnivorous_setter(fieldname, want_type, *normalizers):  # noqa: N805\n-        def inner(method):\n-            @wraps(method)\n-            def wrapper(self, *args):\n-                values = self._normalize_args(args, fieldname, want_type, normalizers)\n-                if values:\n-                    return method(self, *values)\n-            return wrapper\n-        return inner\n-\n-    def _simple_setter(fieldname, want_type, *normalizers):  # noqa: N805\n-        def inner(method):\n-            @wraps(method)\n-            def wrapper(self, arg, *other_args):\n-                if arg is None:\n-                    pass\n-                elif isinstance(arg, str) and want_type is int or isinstance(arg, int) and want_type is str:\n-                    arg = want_type(arg)\n-                elif not isinstance(arg, want_type):\n-                    raise RuntimeError('unexpected type {} for {} (expected {})'.format(arg.__class__.__name__, fieldname, want_type.__name__))\n-                value = self._apply_normalizers(arg, fieldname, normalizers)\n-                if value:\n-                    return method(self, value, *other_args)\n-            return wrapper\n-        return inner\n+\n+def _omnivorous_setter(fieldname: str, want_type: Type[Any], *normalizers: NormalizerFunction) -> Callable[[Callable[..., Any]], Any]:\n+    def inner(method: Callable[..., Any]) -> Callable[..., Any]:\n+        @wraps(method)\n+        def wrapper(self: PackageMakerBase, *args: Any) -> Any:\n+            values = self._normalize_args(args, fieldname, want_type, normalizers)\n+            if values:\n+                return method(self, *values)\n+        return wrapper\n+    return inner\n+\n+\n+def _simple_setter(fieldname: str, want_type: Type[Any], *normalizers: NormalizerFunction) -> Callable[[Callable[..., Any]], Any]:\n+    def inner(method: Callable[..., Any]) -> Callable[..., Any]:\n+        @wraps(method)\n+        def wrapper(self: PackageMakerBase, arg: Any, *other_args: Any) -> Any:\n+            if arg is None:\n+                pass\n+            elif isinstance(arg, str) and want_type is int or isinstance(arg, int) and want_type is str:\n+                arg = want_type(arg)\n+            elif not isinstance(arg, want_type):\n+                raise RuntimeError('unexpected type {} for {} (expected {})'.format(arg.__class__.__name__, fieldname, want_type.__name__))\n+            value = self._apply_normalizers(arg, fieldname, normalizers)\n+            if value:\n+                return method(self, value, *other_args)\n+        return wrapper\n+    return inner\n+\n+\n+def _extend_unique(existing: List[str], iterable: Iterable[str]) -> None:\n+    seen = set(existing) if existing else set()\n+\n+    for value in iterable:\n+        if value not in seen:\n+            seen.add(value)\n+            existing.append(value)\n \n",
        "source_code_with_indent": "\n    <DED>def _omnivorous_setter(fieldname, want_type, *normalizers):  # noqa: N805\n        <IND>def inner(method):\n            <IND>@wraps(method)\n            def wrapper(self, *args):\n                <IND>values = self._normalize_args(args, fieldname, want_type, normalizers)\n                if values:\n                    <IND>return method(self, *values)\n            <DED><DED>return wrapper\n        <DED>return inner\n\n    <DED>def _simple_setter(fieldname, want_type, *normalizers):  # noqa: N805\n        <IND>def inner(method):\n            <IND>@wraps(method)\n            def wrapper(self, arg, *other_args):\n                <IND>if arg is None:\n                    <IND>pass\n                <DED>elif isinstance(arg, str) and want_type is int or isinstance(arg, int) and want_type is str:\n                    <IND>arg = want_type(arg)\n                <DED>elif not isinstance(arg, want_type):\n                    <IND>raise RuntimeError('unexpected type {} for {} (expected {})'.format(arg.__class__.__name__, fieldname, want_type.__name__))\n                <DED>value = self._apply_normalizers(arg, fieldname, normalizers)\n                if value:\n                    <IND>return method(self, value, *other_args)\n            <DED><DED>return wrapper\n        <DED>return inner\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n\n<DED><DED>def _omnivorous_setter(fieldname: str, want_type: Type[Any], *normalizers: NormalizerFunction) -> Callable[[Callable[..., Any]], Any]:\n    <IND>def inner(method: Callable[..., Any]) -> Callable[..., Any]:\n        <IND>@wraps(method)\n        def wrapper(self: PackageMakerBase, *args: Any) -> Any:\n            <IND>values = self._normalize_args(args, fieldname, want_type, normalizers)\n            if values:\n                <IND>return method(self, *values)\n        <DED><DED>return wrapper\n    <DED>return inner\n\n\n<DED>def _simple_setter(fieldname: str, want_type: Type[Any], *normalizers: NormalizerFunction) -> Callable[[Callable[..., Any]], Any]:\n    <IND>def inner(method: Callable[..., Any]) -> Callable[..., Any]:\n        <IND>@wraps(method)\n        def wrapper(self: PackageMakerBase, arg: Any, *other_args: Any) -> Any:\n            <IND>if arg is None:\n                <IND>pass\n            <DED>elif isinstance(arg, str) and want_type is int or isinstance(arg, int) and want_type is str:\n                <IND>arg = want_type(arg)\n            <DED>elif not isinstance(arg, want_type):\n                <IND>raise RuntimeError('unexpected type {} for {} (expected {})'.format(arg.__class__.__name__, fieldname, want_type.__name__))\n            <DED>value = self._apply_normalizers(arg, fieldname, normalizers)\n            if value:\n                <IND>return method(self, value, *other_args)\n        <DED><DED>return wrapper\n    <DED>return inner\n\n\n<DED>def _extend_unique(existing: List[str], iterable: Iterable[str]) -> None:\n    <IND>seen = set(existing) if existing else set()\n\n    for value in iterable:\n        <IND>if value not in seen:\n            <IND>seen.add(value)\n            existing.append(value)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "class PackageMaker(PackageMakerBase):\n    _package: Package\n    _ident: Optional[str]\n",
        "source_code_len": 86,
        "target_code": "class PackageMaker(PackageMakerBase):\n    _package: PackageTemplate\n    _ident: Optional[str]\n",
        "target_code_len": 94,
        "diff_format": "@@ -120,3 +190,3 @@\n class PackageMaker(PackageMakerBase):\n-    _package: Package\n+    _package: PackageTemplate\n     _ident: Optional[str]\n",
        "source_code_with_indent": "<DED><DED>class PackageMaker(PackageMakerBase):\n    <IND>_package: Package\n    _ident: Optional[str]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED><DED><DED>class PackageMaker(PackageMakerBase):\n    <IND>_package: PackageTemplate\n    _ident: Optional[str]\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        super(PackageMaker, self).__init__(logger)\n        self._package = Package()\n        self._ident = ident\n",
        "source_code_len": 113,
        "target_code": "        super(PackageMaker, self).__init__(logger)\n        self._package = PackageTemplate()\n        self._ident = ident\n",
        "target_code_len": 121,
        "diff_format": "@@ -127,3 +197,3 @@\n         super(PackageMaker, self).__init__(logger)\n-        self._package = Package()\n+        self._package = PackageTemplate()\n         self._ident = ident\n",
        "source_code_with_indent": "        <IND>super(PackageMaker, self).__init__(logger)\n        self._package = Package()\n        self._ident = ident\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>super(PackageMaker, self).__init__(logger)\n        self._package = PackageTemplate()\n        self._ident = ident\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    @PackageMakerBase._simple_setter('origin', str, nzs.strip, nzs.forbid_newlines)\n    def set_origin(self, origin: str) -> None:\n",
        "source_code_len": 132,
        "target_code": "\n    @_simple_setter('origin', str, nzs.strip, nzs.forbid_newlines)\n    def set_origin(self, origin: str) -> None:\n",
        "target_code_len": 115,
        "diff_format": "@@ -135,3 +205,3 @@\n \n-    @PackageMakerBase._simple_setter('origin', str, nzs.strip, nzs.forbid_newlines)\n+    @_simple_setter('origin', str, nzs.strip, nzs.forbid_newlines)\n     def set_origin(self, origin: str) -> None:\n",
        "source_code_with_indent": "\n    <DED>@PackageMakerBase._simple_setter('origin', str, nzs.strip, nzs.forbid_newlines)\n    def set_origin(self, origin: str) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>@_simple_setter('origin', str, nzs.strip, nzs.forbid_newlines)\n    def set_origin(self, origin: str) -> None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    @PackageMakerBase._simple_setter('name', str, nzs.strip, nzs.forbid_newlines)\n    def set_name(self, name: str) -> None:\n",
        "source_code_len": 126,
        "target_code": "\n    @_simple_setter('name', str, nzs.strip, nzs.forbid_newlines)\n    def set_name(self, name: str) -> None:\n",
        "target_code_len": 109,
        "diff_format": "@@ -140,3 +210,3 @@\n \n-    @PackageMakerBase._simple_setter('name', str, nzs.strip, nzs.forbid_newlines)\n+    @_simple_setter('name', str, nzs.strip, nzs.forbid_newlines)\n     def set_name(self, name: str) -> None:\n",
        "source_code_with_indent": "\n    <DED>@PackageMakerBase._simple_setter('name', str, nzs.strip, nzs.forbid_newlines)\n    def set_name(self, name: str) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>@_simple_setter('name', str, nzs.strip, nzs.forbid_newlines)\n    def set_name(self, name: str) -> None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    @PackageMakerBase._simple_setter('basename', str, nzs.strip, nzs.forbid_newlines)\n    def set_basename(self, basename: str) -> None:\n",
        "source_code_len": 138,
        "target_code": "\n    @_simple_setter('basename', str, nzs.strip, nzs.forbid_newlines)\n    def set_basename(self, basename: str) -> None:\n",
        "target_code_len": 121,
        "diff_format": "@@ -144,3 +214,3 @@\n \n-    @PackageMakerBase._simple_setter('basename', str, nzs.strip, nzs.forbid_newlines)\n+    @_simple_setter('basename', str, nzs.strip, nzs.forbid_newlines)\n     def set_basename(self, basename: str) -> None:\n",
        "source_code_with_indent": "\n    <DED>@PackageMakerBase._simple_setter('basename', str, nzs.strip, nzs.forbid_newlines)\n    def set_basename(self, basename: str) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>@_simple_setter('basename', str, nzs.strip, nzs.forbid_newlines)\n    def set_basename(self, basename: str) -> None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def prefix_name(self, prefix: str) -> None:\n        self._package.name = prefix + self._package.name\n\n    @PackageMakerBase._simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n    def set_version(self, version: str, version_normalizer: Optional[Callable[[str], str]] = None) -> None:\n",
        "source_code_len": 299,
        "target_code": "    def prefix_name(self, prefix: str) -> None:\n        assert(self._package.name)\n        self._package.name = prefix + self._package.name\n\n    @_simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n    def set_version(self, version: str, version_normalizer: Optional[Callable[[str], str]] = None) -> None:\n",
        "target_code_len": 317,
        "diff_format": "@@ -149,5 +219,6 @@\n     def prefix_name(self, prefix: str) -> None:\n+        assert(self._package.name)\n         self._package.name = prefix + self._package.name\n \n-    @PackageMakerBase._simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n+    @_simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n     def set_version(self, version: str, version_normalizer: Optional[Callable[[str], str]] = None) -> None:\n",
        "source_code_with_indent": "    <DED>def prefix_name(self, prefix: str) -> None:\n        <IND>self._package.name = prefix + self._package.name\n\n    <DED>@PackageMakerBase._simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n    def set_version(self, version: str, version_normalizer: Optional[Callable[[str], str]] = None) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def prefix_name(self, prefix: str) -> None:\n        <IND>assert(self._package.name)\n        self._package.name = prefix + self._package.name\n\n    <DED>@_simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n    def set_version(self, version: str, version_normalizer: Optional[Callable[[str], str]] = None) -> None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    @PackageMakerBase._simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n    def set_rawversion(self, rawversion: str) -> None:\n",
        "source_code_len": 141,
        "target_code": "\n    @_simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n    def set_rawversion(self, rawversion: str) -> None:\n",
        "target_code_len": 124,
        "diff_format": "@@ -157,3 +228,3 @@\n \n-    @PackageMakerBase._simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n+    @_simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n     def set_rawversion(self, rawversion: str) -> None:\n",
        "source_code_with_indent": "\n    <DED>@PackageMakerBase._simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n    def set_rawversion(self, rawversion: str) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>@_simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n    def set_rawversion(self, rawversion: str) -> None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    @PackageMakerBase._simple_setter('arch', str, nzs.strip, nzs.forbid_newlines)\n    def set_arch(self, arch: str) -> None:\n",
        "source_code_len": 126,
        "target_code": "\n    @_simple_setter('arch', str, nzs.strip, nzs.forbid_newlines)\n    def set_arch(self, arch: str) -> None:\n",
        "target_code_len": 109,
        "diff_format": "@@ -167,3 +238,3 @@\n \n-    @PackageMakerBase._simple_setter('arch', str, nzs.strip, nzs.forbid_newlines)\n+    @_simple_setter('arch', str, nzs.strip, nzs.forbid_newlines)\n     def set_arch(self, arch: str) -> None:\n",
        "source_code_with_indent": "\n    <DED>@PackageMakerBase._simple_setter('arch', str, nzs.strip, nzs.forbid_newlines)\n    def set_arch(self, arch: str) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>@_simple_setter('arch', str, nzs.strip, nzs.forbid_newlines)\n    def set_arch(self, arch: str) -> None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    @PackageMakerBase._simple_setter('subrepo', str, nzs.strip, nzs.forbid_newlines)\n    def set_subrepo(self, subrepo: str) -> None:\n",
        "source_code_len": 135,
        "target_code": "\n    @_simple_setter('subrepo', str, nzs.strip, nzs.forbid_newlines)\n    def set_subrepo(self, subrepo: str) -> None:\n",
        "target_code_len": 118,
        "diff_format": "@@ -171,3 +242,3 @@\n \n-    @PackageMakerBase._simple_setter('subrepo', str, nzs.strip, nzs.forbid_newlines)\n+    @_simple_setter('subrepo', str, nzs.strip, nzs.forbid_newlines)\n     def set_subrepo(self, subrepo: str) -> None:\n",
        "source_code_with_indent": "\n    <DED>@PackageMakerBase._simple_setter('subrepo', str, nzs.strip, nzs.forbid_newlines)\n    def set_subrepo(self, subrepo: str) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>@_simple_setter('subrepo', str, nzs.strip, nzs.forbid_newlines)\n    def set_subrepo(self, subrepo: str) -> None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    @PackageMakerBase._simple_setter('summary', str, nzs.strip)\n    def set_summary(self, summary: str) -> None:\n        self._package.comment = summary\n\n    @PackageMakerBase._omnivorous_setter('maintainer', str, nzs.strip, nzs.forbid_newlines, nzs.tolower)\n    def add_maintainers(self, *args: Any) -> None:\n        self._package.maintainers.extend(_iter_unique(args, self._package.maintainers))\n\n    @PackageMakerBase._omnivorous_setter('category', str, nzs.strip, nzs.forbid_newlines)\n    def add_categories(self, *args: Any) -> None:\n        # XXX: convert into array\n        if not self._package.category:\n            self._package.category = args[0]\n\n    @PackageMakerBase._omnivorous_setter('homepage', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n    def add_homepages(self, *args: Any) -> None:\n        # XXX: convert into array\n        if not self._package.homepage:\n            self._package.homepage = args[0]\n\n    @PackageMakerBase._omnivorous_setter('license', str, nzs.strip, nzs.forbid_newlines)\n    def add_licenses(self, *args: Any) -> None:\n        self._package.licenses.extend(args)\n\n    @PackageMakerBase._omnivorous_setter('download', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n    def add_downloads(self, *args: Any) -> None:\n        self._package.downloads.extend(_iter_unique(args, self._package.downloads))\n\n    def set_flags(self, mask: int, is_set: bool = True) -> None:\n        self._package.set_flag(mask, is_set)\n\n",
        "source_code_len": 1494,
        "target_code": "\n    @_simple_setter('summary', str, nzs.strip)\n    def set_summary(self, summary: str) -> None:\n        self._package.summary = summary\n\n    @_omnivorous_setter('maintainer', str, nzs.strip, nzs.forbid_newlines, nzs.tolower)\n    def add_maintainers(self, *args: Any) -> None:\n        _extend_unique(self._package.maintainers, args)\n\n    @_omnivorous_setter('category', str, nzs.strip, nzs.forbid_newlines)\n    def add_categories(self, *args: Any) -> None:\n        _extend_unique(self._package.categories, args)\n\n    @_omnivorous_setter('homepage', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n    def add_homepages(self, *args: Any) -> None:\n        _extend_unique(self._package.homepages, args)\n\n    @_omnivorous_setter('license', str, nzs.strip, nzs.forbid_newlines)\n    def add_licenses(self, *args: Any) -> None:\n        _extend_unique(self._package.licenses, args)\n\n    @_omnivorous_setter('download', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n    def add_downloads(self, *args: Any) -> None:\n        _extend_unique(self._package.downloads, args)\n\n    def set_flags(self, mask: int, is_set: bool = True) -> None:\n        if is_set:\n            self._package.flags |= mask\n        else:\n            self._package.flags &= ~mask\n\n",
        "target_code_len": 1281,
        "diff_format": "@@ -175,32 +246,31 @@\n \n-    @PackageMakerBase._simple_setter('summary', str, nzs.strip)\n+    @_simple_setter('summary', str, nzs.strip)\n     def set_summary(self, summary: str) -> None:\n-        self._package.comment = summary\n-\n-    @PackageMakerBase._omnivorous_setter('maintainer', str, nzs.strip, nzs.forbid_newlines, nzs.tolower)\n+        self._package.summary = summary\n+\n+    @_omnivorous_setter('maintainer', str, nzs.strip, nzs.forbid_newlines, nzs.tolower)\n     def add_maintainers(self, *args: Any) -> None:\n-        self._package.maintainers.extend(_iter_unique(args, self._package.maintainers))\n-\n-    @PackageMakerBase._omnivorous_setter('category', str, nzs.strip, nzs.forbid_newlines)\n+        _extend_unique(self._package.maintainers, args)\n+\n+    @_omnivorous_setter('category', str, nzs.strip, nzs.forbid_newlines)\n     def add_categories(self, *args: Any) -> None:\n-        # XXX: convert into array\n-        if not self._package.category:\n-            self._package.category = args[0]\n-\n-    @PackageMakerBase._omnivorous_setter('homepage', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n+        _extend_unique(self._package.categories, args)\n+\n+    @_omnivorous_setter('homepage', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n     def add_homepages(self, *args: Any) -> None:\n-        # XXX: convert into array\n-        if not self._package.homepage:\n-            self._package.homepage = args[0]\n-\n-    @PackageMakerBase._omnivorous_setter('license', str, nzs.strip, nzs.forbid_newlines)\n+        _extend_unique(self._package.homepages, args)\n+\n+    @_omnivorous_setter('license', str, nzs.strip, nzs.forbid_newlines)\n     def add_licenses(self, *args: Any) -> None:\n-        self._package.licenses.extend(args)\n-\n-    @PackageMakerBase._omnivorous_setter('download', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n+        _extend_unique(self._package.licenses, args)\n+\n+    @_omnivorous_setter('download', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n     def add_downloads(self, *args: Any) -> None:\n-        self._package.downloads.extend(_iter_unique(args, self._package.downloads))\n+        _extend_unique(self._package.downloads, args)\n \n     def set_flags(self, mask: int, is_set: bool = True) -> None:\n-        self._package.set_flag(mask, is_set)\n+        if is_set:\n+            self._package.flags |= mask\n+        else:\n+            self._package.flags &= ~mask\n \n",
        "source_code_with_indent": "\n    <DED>@PackageMakerBase._simple_setter('summary', str, nzs.strip)\n    def set_summary(self, summary: str) -> None:\n        <IND>self._package.comment = summary\n\n    <DED>@PackageMakerBase._omnivorous_setter('maintainer', str, nzs.strip, nzs.forbid_newlines, nzs.tolower)\n    def add_maintainers(self, *args: Any) -> None:\n        <IND>self._package.maintainers.extend(_iter_unique(args, self._package.maintainers))\n\n    <DED>@PackageMakerBase._omnivorous_setter('category', str, nzs.strip, nzs.forbid_newlines)\n    def add_categories(self, *args: Any) -> None:\n        # XXX: convert into array\n        <IND>if not self._package.category:\n            <IND>self._package.category = args[0]\n\n    <DED><DED>@PackageMakerBase._omnivorous_setter('homepage', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n    def add_homepages(self, *args: Any) -> None:\n        # XXX: convert into array\n        <IND>if not self._package.homepage:\n            <IND>self._package.homepage = args[0]\n\n    <DED><DED>@PackageMakerBase._omnivorous_setter('license', str, nzs.strip, nzs.forbid_newlines)\n    def add_licenses(self, *args: Any) -> None:\n        <IND>self._package.licenses.extend(args)\n\n    <DED>@PackageMakerBase._omnivorous_setter('download', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n    def add_downloads(self, *args: Any) -> None:\n        <IND>self._package.downloads.extend(_iter_unique(args, self._package.downloads))\n\n    <DED>def set_flags(self, mask: int, is_set: bool = True) -> None:\n        <IND>self._package.set_flag(mask, is_set)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>@_simple_setter('summary', str, nzs.strip)\n    def set_summary(self, summary: str) -> None:\n        <IND>self._package.summary = summary\n\n    <DED>@_omnivorous_setter('maintainer', str, nzs.strip, nzs.forbid_newlines, nzs.tolower)\n    def add_maintainers(self, *args: Any) -> None:\n        <IND>_extend_unique(self._package.maintainers, args)\n\n    <DED>@_omnivorous_setter('category', str, nzs.strip, nzs.forbid_newlines)\n    def add_categories(self, *args: Any) -> None:\n        <IND>_extend_unique(self._package.categories, args)\n\n    <DED>@_omnivorous_setter('homepage', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n    def add_homepages(self, *args: Any) -> None:\n        <IND>_extend_unique(self._package.homepages, args)\n\n    <DED>@_omnivorous_setter('license', str, nzs.strip, nzs.forbid_newlines)\n    def add_licenses(self, *args: Any) -> None:\n        <IND>_extend_unique(self._package.licenses, args)\n\n    <DED>@_omnivorous_setter('download', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n    def add_downloads(self, *args: Any) -> None:\n        <IND>_extend_unique(self._package.downloads, args)\n\n    <DED>def set_flags(self, mask: int, is_set: bool = True) -> None:\n        <IND>if is_set:\n            <IND>self._package.flags |= mask\n        <DED>else:\n            <IND>self._package.flags &= ~mask\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def unwrap(self) -> Package:\n        return self._package\n\n",
        "source_code_len": 64,
        "target_code": "\n    def spawn(self, repo: str, family: str, subrepo: Optional[str] = None, shadow: bool = False, default_maintainer: Optional[str] = None) -> Package:\n        if self._package.name is None:\n            raise RuntimeError('Attempt to spawn Package with unset name')\n        if self._package.version is None:\n            raise RuntimeError('Attempt to spawn Package with unset version')\n\n        maintainers: List[str] = self._package.maintainers if self._package.maintainers else [default_maintainer] if default_maintainer else []\n\n        return Package(\n            repo=repo,\n            family=family,\n            subrepo=self._package.subrepo or subrepo,\n\n            name=self._package.name,\n            basename=self._package.basename,\n\n            version=self._package.version,\n            origversion=self._package.version,\n            rawversion=self._package.rawversion if self._package.rawversion is not None else self._package.version,\n\n            arch=self._package.arch,\n\n            maintainers=maintainers,\n            category=self._package.categories[0] if self._package.categories else None,  # XXX: convert to array\n            comment=self._package.summary,\n            homepage=self._package.homepages[0] if self._package.homepages else None,  # XXX: convert to array\n            licenses=self._package.licenses,\n            downloads=self._package.downloads,\n\n            flags=self._package.flags,\n            shadow=shadow,\n\n            extrafields=self._package.extrafields,\n        )\n\n",
        "target_code_len": 1515,
        "diff_format": "@@ -209,4 +279,36 @@\n \n-    def unwrap(self) -> Package:\n-        return self._package\n+    def spawn(self, repo: str, family: str, subrepo: Optional[str] = None, shadow: bool = False, default_maintainer: Optional[str] = None) -> Package:\n+        if self._package.name is None:\n+            raise RuntimeError('Attempt to spawn Package with unset name')\n+        if self._package.version is None:\n+            raise RuntimeError('Attempt to spawn Package with unset version')\n+\n+        maintainers: List[str] = self._package.maintainers if self._package.maintainers else [default_maintainer] if default_maintainer else []\n+\n+        return Package(\n+            repo=repo,\n+            family=family,\n+            subrepo=self._package.subrepo or subrepo,\n+\n+            name=self._package.name,\n+            basename=self._package.basename,\n+\n+            version=self._package.version,\n+            origversion=self._package.version,\n+            rawversion=self._package.rawversion if self._package.rawversion is not None else self._package.version,\n+\n+            arch=self._package.arch,\n+\n+            maintainers=maintainers,\n+            category=self._package.categories[0] if self._package.categories else None,  # XXX: convert to array\n+            comment=self._package.summary,\n+            homepage=self._package.homepages[0] if self._package.homepages else None,  # XXX: convert to array\n+            licenses=self._package.licenses,\n+            downloads=self._package.downloads,\n+\n+            flags=self._package.flags,\n+            shadow=shadow,\n+\n+            extrafields=self._package.extrafields,\n+        )\n \n",
        "source_code_with_indent": "\n    <DED>def unwrap(self) -> Package:\n        <IND>return self._package\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def spawn(self, repo: str, family: str, subrepo: Optional[str] = None, shadow: bool = False, default_maintainer: Optional[str] = None) -> Package:\n        <IND>if self._package.name is None:\n            <IND>raise RuntimeError('Attempt to spawn Package with unset name')\n        <DED>if self._package.version is None:\n            <IND>raise RuntimeError('Attempt to spawn Package with unset version')\n\n        <DED>maintainers: List[str] = self._package.maintainers if self._package.maintainers else [default_maintainer] if default_maintainer else []\n\n        return Package(\n            repo=repo,\n            family=family,\n            subrepo=self._package.subrepo or subrepo,\n\n            name=self._package.name,\n            basename=self._package.basename,\n\n            version=self._package.version,\n            origversion=self._package.version,\n            rawversion=self._package.rawversion if self._package.rawversion is not None else self._package.version,\n\n            arch=self._package.arch,\n\n            maintainers=maintainers,\n            category=self._package.categories[0] if self._package.categories else None,  # XXX: convert to array\n            comment=self._package.summary,\n            homepage=self._package.homepages[0] if self._package.homepages else None,  # XXX: convert to array\n            licenses=self._package.licenses,\n            downloads=self._package.downloads,\n\n            flags=self._package.flags,\n            shadow=shadow,\n\n            extrafields=self._package.extrafields,\n        )\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "repology/repology-updater",
    "commit": "9f67d556944fe256c990593f673713e299feaf8a",
    "filename": "repology/packagemaker/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/repology-repology-updater/repology/packagemaker/__init__.py",
    "file_hunks_size": 17,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "repology/packagemaker/__init__.py:168:37 Incompatible parameter type [6]: Expected `PackageMakerBase` for 1st positional only parameter to call `PackageMakerBase._simple_setter` but got `str`.",
    "message": " Expected `PackageMakerBase` for 1st positional only parameter to call `PackageMakerBase._simple_setter` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 168,
    "warning_line": "    @PackageMakerBase._simple_setter('arch', str, nzs.strip, nzs.forbid_newlines)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from functools import wraps\nfrom typing import Any, Callable, Iterable, Optional\n\nfrom repology.logger import Logger\nfrom repology.package import Package\nfrom repology.packagemaker import normalizers as nzs\n\n",
        "source_code_len": 208,
        "target_code": "from functools import wraps\nfrom typing import Any, Callable, Dict, Iterable, List, Optional, Type\n\nfrom repology.logger import Logger\nfrom repology.package import Package, PackageStatus\nfrom repology.packagemaker import normalizers as nzs\nfrom repology.packagemaker.normalizers import NormalizerFunction\n\n",
        "target_code_len": 306,
        "diff_format": "@@ -24,7 +22,8 @@\n from functools import wraps\n-from typing import Any, Callable, Iterable, Optional\n+from typing import Any, Callable, Dict, Iterable, List, Optional, Type\n \n from repology.logger import Logger\n-from repology.package import Package\n+from repology.package import Package, PackageStatus\n from repology.packagemaker import normalizers as nzs\n+from repology.packagemaker.normalizers import NormalizerFunction\n \n",
        "source_code_with_indent": "from functools import wraps\nfrom typing import Any, Callable, Iterable, Optional\n\nfrom repology.logger import Logger\nfrom repology.package import Package\nfrom repology.packagemaker import normalizers as nzs\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from functools import wraps\nfrom typing import Any, Callable, Dict, Iterable, List, Optional, Type\n\nfrom repology.logger import Logger\nfrom repology.package import Package, PackageStatus\nfrom repology.packagemaker import normalizers as nzs\nfrom repology.packagemaker.normalizers import NormalizerFunction\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _iter_unique(iterable, existing=None):\n    seen = set(existing) if existing else set()\n    for value in iterable:\n        if value not in seen:\n            seen.add(value)\n            yield value\n\n",
        "source_code_len": 202,
        "target_code": "\nclass PackageTemplate:\n    __slots__ = [\n        'subrepo',\n\n        'name',\n        'basename',\n\n        'version',\n        'origversion',\n        'rawversion',\n\n        'arch',\n        'summary',\n        'maintainers',\n        'categories',\n        'homepages',\n        'licenses',\n        'downloads',\n\n        'flags',\n\n        'extrafields',\n    ]\n\n    subrepo: Optional[str]\n\n    name: Optional[str]\n    basename: Optional[str]\n\n    version: Optional[str]\n    origversion: Optional[str]\n    rawversion: Optional[str]\n\n    arch: Optional[str]\n    summary: Optional[str]\n    maintainers: List[str]\n    categories: List[str]\n    homepages: List[str]\n    licenses: List[str]\n    downloads: List[str]\n\n    flags: int\n\n    extrafields: Dict[str, str]\n\n    def __init__(self) -> None:\n        self.subrepo = None\n\n        self.name = None\n        self.basename = None\n\n        self.version = None\n        self.origversion = None\n        self.rawversion = None\n\n        self.arch = None\n        self.summary = None\n        self.maintainers = []\n        self.categories = []\n        self.homepages = []\n        self.licenses = []\n        self.downloads = []\n\n        self.flags = 0\n\n        self.extrafields = {}\n\n",
        "target_code_len": 1212,
        "diff_format": "@@ -34,8 +33,68 @@\n \n-def _iter_unique(iterable, existing=None):\n-    seen = set(existing) if existing else set()\n-    for value in iterable:\n-        if value not in seen:\n-            seen.add(value)\n-            yield value\n+class PackageTemplate:\n+    __slots__ = [\n+        'subrepo',\n+\n+        'name',\n+        'basename',\n+\n+        'version',\n+        'origversion',\n+        'rawversion',\n+\n+        'arch',\n+        'summary',\n+        'maintainers',\n+        'categories',\n+        'homepages',\n+        'licenses',\n+        'downloads',\n+\n+        'flags',\n+\n+        'extrafields',\n+    ]\n+\n+    subrepo: Optional[str]\n+\n+    name: Optional[str]\n+    basename: Optional[str]\n+\n+    version: Optional[str]\n+    origversion: Optional[str]\n+    rawversion: Optional[str]\n+\n+    arch: Optional[str]\n+    summary: Optional[str]\n+    maintainers: List[str]\n+    categories: List[str]\n+    homepages: List[str]\n+    licenses: List[str]\n+    downloads: List[str]\n+\n+    flags: int\n+\n+    extrafields: Dict[str, str]\n+\n+    def __init__(self) -> None:\n+        self.subrepo = None\n+\n+        self.name = None\n+        self.basename = None\n+\n+        self.version = None\n+        self.origversion = None\n+        self.rawversion = None\n+\n+        self.arch = None\n+        self.summary = None\n+        self.maintainers = []\n+        self.categories = []\n+        self.homepages = []\n+        self.licenses = []\n+        self.downloads = []\n+\n+        self.flags = 0\n+\n+        self.extrafields = {}\n \n",
        "source_code_with_indent": "\ndef _iter_unique(iterable, existing=None):\n    <IND>seen = set(existing) if existing else set()\n    for value in iterable:\n        <IND>if value not in seen:\n            <IND>seen.add(value)\n            yield value\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nclass PackageTemplate:\n    <IND>__slots__ = [\n        'subrepo',\n\n        'name',\n        'basename',\n\n        'version',\n        'origversion',\n        'rawversion',\n\n        'arch',\n        'summary',\n        'maintainers',\n        'categories',\n        'homepages',\n        'licenses',\n        'downloads',\n\n        'flags',\n\n        'extrafields',\n    ]\n\n    subrepo: Optional[str]\n\n    name: Optional[str]\n    basename: Optional[str]\n\n    version: Optional[str]\n    origversion: Optional[str]\n    rawversion: Optional[str]\n\n    arch: Optional[str]\n    summary: Optional[str]\n    maintainers: List[str]\n    categories: List[str]\n    homepages: List[str]\n    licenses: List[str]\n    downloads: List[str]\n\n    flags: int\n\n    extrafields: Dict[str, str]\n\n    def __init__(self) -> None:\n        <IND>self.subrepo = None\n\n        self.name = None\n        self.basename = None\n\n        self.version = None\n        self.origversion = None\n        self.rawversion = None\n\n        self.arch = None\n        self.summary = None\n        self.maintainers = []\n        self.categories = []\n        self.homepages = []\n        self.licenses = []\n        self.downloads = []\n\n        self.flags = 0\n\n        self.extrafields = {}\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _omnivorous_setter(fieldname, want_type, *normalizers):  # noqa: N805\n        def inner(method):\n            @wraps(method)\n            def wrapper(self, *args):\n                values = self._normalize_args(args, fieldname, want_type, normalizers)\n                if values:\n                    return method(self, *values)\n            return wrapper\n        return inner\n\n    def _simple_setter(fieldname, want_type, *normalizers):  # noqa: N805\n        def inner(method):\n            @wraps(method)\n            def wrapper(self, arg, *other_args):\n                if arg is None:\n                    pass\n                elif isinstance(arg, str) and want_type is int or isinstance(arg, int) and want_type is str:\n                    arg = want_type(arg)\n                elif not isinstance(arg, want_type):\n                    raise RuntimeError('unexpected type {} for {} (expected {})'.format(arg.__class__.__name__, fieldname, want_type.__name__))\n                value = self._apply_normalizers(arg, fieldname, normalizers)\n                if value:\n                    return method(self, value, *other_args)\n            return wrapper\n        return inner\n\n",
        "source_code_len": 1176,
        "target_code": "\n\ndef _omnivorous_setter(fieldname: str, want_type: Type[Any], *normalizers: NormalizerFunction) -> Callable[[Callable[..., Any]], Any]:\n    def inner(method: Callable[..., Any]) -> Callable[..., Any]:\n        @wraps(method)\n        def wrapper(self: PackageMakerBase, *args: Any) -> Any:\n            values = self._normalize_args(args, fieldname, want_type, normalizers)\n            if values:\n                return method(self, *values)\n        return wrapper\n    return inner\n\n\ndef _simple_setter(fieldname: str, want_type: Type[Any], *normalizers: NormalizerFunction) -> Callable[[Callable[..., Any]], Any]:\n    def inner(method: Callable[..., Any]) -> Callable[..., Any]:\n        @wraps(method)\n        def wrapper(self: PackageMakerBase, arg: Any, *other_args: Any) -> Any:\n            if arg is None:\n                pass\n            elif isinstance(arg, str) and want_type is int or isinstance(arg, int) and want_type is str:\n                arg = want_type(arg)\n            elif not isinstance(arg, want_type):\n                raise RuntimeError('unexpected type {} for {} (expected {})'.format(arg.__class__.__name__, fieldname, want_type.__name__))\n            value = self._apply_normalizers(arg, fieldname, normalizers)\n            if value:\n                return method(self, value, *other_args)\n        return wrapper\n    return inner\n\n\ndef _extend_unique(existing: List[str], iterable: Iterable[str]) -> None:\n    seen = set(existing) if existing else set()\n\n    for value in iterable:\n        if value not in seen:\n            seen.add(value)\n            existing.append(value)\n\n",
        "target_code_len": 1598,
        "diff_format": "@@ -92,27 +151,38 @@\n \n-    def _omnivorous_setter(fieldname, want_type, *normalizers):  # noqa: N805\n-        def inner(method):\n-            @wraps(method)\n-            def wrapper(self, *args):\n-                values = self._normalize_args(args, fieldname, want_type, normalizers)\n-                if values:\n-                    return method(self, *values)\n-            return wrapper\n-        return inner\n-\n-    def _simple_setter(fieldname, want_type, *normalizers):  # noqa: N805\n-        def inner(method):\n-            @wraps(method)\n-            def wrapper(self, arg, *other_args):\n-                if arg is None:\n-                    pass\n-                elif isinstance(arg, str) and want_type is int or isinstance(arg, int) and want_type is str:\n-                    arg = want_type(arg)\n-                elif not isinstance(arg, want_type):\n-                    raise RuntimeError('unexpected type {} for {} (expected {})'.format(arg.__class__.__name__, fieldname, want_type.__name__))\n-                value = self._apply_normalizers(arg, fieldname, normalizers)\n-                if value:\n-                    return method(self, value, *other_args)\n-            return wrapper\n-        return inner\n+\n+def _omnivorous_setter(fieldname: str, want_type: Type[Any], *normalizers: NormalizerFunction) -> Callable[[Callable[..., Any]], Any]:\n+    def inner(method: Callable[..., Any]) -> Callable[..., Any]:\n+        @wraps(method)\n+        def wrapper(self: PackageMakerBase, *args: Any) -> Any:\n+            values = self._normalize_args(args, fieldname, want_type, normalizers)\n+            if values:\n+                return method(self, *values)\n+        return wrapper\n+    return inner\n+\n+\n+def _simple_setter(fieldname: str, want_type: Type[Any], *normalizers: NormalizerFunction) -> Callable[[Callable[..., Any]], Any]:\n+    def inner(method: Callable[..., Any]) -> Callable[..., Any]:\n+        @wraps(method)\n+        def wrapper(self: PackageMakerBase, arg: Any, *other_args: Any) -> Any:\n+            if arg is None:\n+                pass\n+            elif isinstance(arg, str) and want_type is int or isinstance(arg, int) and want_type is str:\n+                arg = want_type(arg)\n+            elif not isinstance(arg, want_type):\n+                raise RuntimeError('unexpected type {} for {} (expected {})'.format(arg.__class__.__name__, fieldname, want_type.__name__))\n+            value = self._apply_normalizers(arg, fieldname, normalizers)\n+            if value:\n+                return method(self, value, *other_args)\n+        return wrapper\n+    return inner\n+\n+\n+def _extend_unique(existing: List[str], iterable: Iterable[str]) -> None:\n+    seen = set(existing) if existing else set()\n+\n+    for value in iterable:\n+        if value not in seen:\n+            seen.add(value)\n+            existing.append(value)\n \n",
        "source_code_with_indent": "\n    <DED>def _omnivorous_setter(fieldname, want_type, *normalizers):  # noqa: N805\n        <IND>def inner(method):\n            <IND>@wraps(method)\n            def wrapper(self, *args):\n                <IND>values = self._normalize_args(args, fieldname, want_type, normalizers)\n                if values:\n                    <IND>return method(self, *values)\n            <DED><DED>return wrapper\n        <DED>return inner\n\n    <DED>def _simple_setter(fieldname, want_type, *normalizers):  # noqa: N805\n        <IND>def inner(method):\n            <IND>@wraps(method)\n            def wrapper(self, arg, *other_args):\n                <IND>if arg is None:\n                    <IND>pass\n                <DED>elif isinstance(arg, str) and want_type is int or isinstance(arg, int) and want_type is str:\n                    <IND>arg = want_type(arg)\n                <DED>elif not isinstance(arg, want_type):\n                    <IND>raise RuntimeError('unexpected type {} for {} (expected {})'.format(arg.__class__.__name__, fieldname, want_type.__name__))\n                <DED>value = self._apply_normalizers(arg, fieldname, normalizers)\n                if value:\n                    <IND>return method(self, value, *other_args)\n            <DED><DED>return wrapper\n        <DED>return inner\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n\n<DED><DED>def _omnivorous_setter(fieldname: str, want_type: Type[Any], *normalizers: NormalizerFunction) -> Callable[[Callable[..., Any]], Any]:\n    <IND>def inner(method: Callable[..., Any]) -> Callable[..., Any]:\n        <IND>@wraps(method)\n        def wrapper(self: PackageMakerBase, *args: Any) -> Any:\n            <IND>values = self._normalize_args(args, fieldname, want_type, normalizers)\n            if values:\n                <IND>return method(self, *values)\n        <DED><DED>return wrapper\n    <DED>return inner\n\n\n<DED>def _simple_setter(fieldname: str, want_type: Type[Any], *normalizers: NormalizerFunction) -> Callable[[Callable[..., Any]], Any]:\n    <IND>def inner(method: Callable[..., Any]) -> Callable[..., Any]:\n        <IND>@wraps(method)\n        def wrapper(self: PackageMakerBase, arg: Any, *other_args: Any) -> Any:\n            <IND>if arg is None:\n                <IND>pass\n            <DED>elif isinstance(arg, str) and want_type is int or isinstance(arg, int) and want_type is str:\n                <IND>arg = want_type(arg)\n            <DED>elif not isinstance(arg, want_type):\n                <IND>raise RuntimeError('unexpected type {} for {} (expected {})'.format(arg.__class__.__name__, fieldname, want_type.__name__))\n            <DED>value = self._apply_normalizers(arg, fieldname, normalizers)\n            if value:\n                <IND>return method(self, value, *other_args)\n        <DED><DED>return wrapper\n    <DED>return inner\n\n\n<DED>def _extend_unique(existing: List[str], iterable: Iterable[str]) -> None:\n    <IND>seen = set(existing) if existing else set()\n\n    for value in iterable:\n        <IND>if value not in seen:\n            <IND>seen.add(value)\n            existing.append(value)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "class PackageMaker(PackageMakerBase):\n    _package: Package\n    _ident: Optional[str]\n",
        "source_code_len": 86,
        "target_code": "class PackageMaker(PackageMakerBase):\n    _package: PackageTemplate\n    _ident: Optional[str]\n",
        "target_code_len": 94,
        "diff_format": "@@ -120,3 +190,3 @@\n class PackageMaker(PackageMakerBase):\n-    _package: Package\n+    _package: PackageTemplate\n     _ident: Optional[str]\n",
        "source_code_with_indent": "<DED><DED>class PackageMaker(PackageMakerBase):\n    <IND>_package: Package\n    _ident: Optional[str]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED><DED><DED>class PackageMaker(PackageMakerBase):\n    <IND>_package: PackageTemplate\n    _ident: Optional[str]\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        super(PackageMaker, self).__init__(logger)\n        self._package = Package()\n        self._ident = ident\n",
        "source_code_len": 113,
        "target_code": "        super(PackageMaker, self).__init__(logger)\n        self._package = PackageTemplate()\n        self._ident = ident\n",
        "target_code_len": 121,
        "diff_format": "@@ -127,3 +197,3 @@\n         super(PackageMaker, self).__init__(logger)\n-        self._package = Package()\n+        self._package = PackageTemplate()\n         self._ident = ident\n",
        "source_code_with_indent": "        <IND>super(PackageMaker, self).__init__(logger)\n        self._package = Package()\n        self._ident = ident\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>super(PackageMaker, self).__init__(logger)\n        self._package = PackageTemplate()\n        self._ident = ident\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    @PackageMakerBase._simple_setter('origin', str, nzs.strip, nzs.forbid_newlines)\n    def set_origin(self, origin: str) -> None:\n",
        "source_code_len": 132,
        "target_code": "\n    @_simple_setter('origin', str, nzs.strip, nzs.forbid_newlines)\n    def set_origin(self, origin: str) -> None:\n",
        "target_code_len": 115,
        "diff_format": "@@ -135,3 +205,3 @@\n \n-    @PackageMakerBase._simple_setter('origin', str, nzs.strip, nzs.forbid_newlines)\n+    @_simple_setter('origin', str, nzs.strip, nzs.forbid_newlines)\n     def set_origin(self, origin: str) -> None:\n",
        "source_code_with_indent": "\n    <DED>@PackageMakerBase._simple_setter('origin', str, nzs.strip, nzs.forbid_newlines)\n    def set_origin(self, origin: str) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>@_simple_setter('origin', str, nzs.strip, nzs.forbid_newlines)\n    def set_origin(self, origin: str) -> None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    @PackageMakerBase._simple_setter('name', str, nzs.strip, nzs.forbid_newlines)\n    def set_name(self, name: str) -> None:\n",
        "source_code_len": 126,
        "target_code": "\n    @_simple_setter('name', str, nzs.strip, nzs.forbid_newlines)\n    def set_name(self, name: str) -> None:\n",
        "target_code_len": 109,
        "diff_format": "@@ -140,3 +210,3 @@\n \n-    @PackageMakerBase._simple_setter('name', str, nzs.strip, nzs.forbid_newlines)\n+    @_simple_setter('name', str, nzs.strip, nzs.forbid_newlines)\n     def set_name(self, name: str) -> None:\n",
        "source_code_with_indent": "\n    <DED>@PackageMakerBase._simple_setter('name', str, nzs.strip, nzs.forbid_newlines)\n    def set_name(self, name: str) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>@_simple_setter('name', str, nzs.strip, nzs.forbid_newlines)\n    def set_name(self, name: str) -> None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    @PackageMakerBase._simple_setter('basename', str, nzs.strip, nzs.forbid_newlines)\n    def set_basename(self, basename: str) -> None:\n",
        "source_code_len": 138,
        "target_code": "\n    @_simple_setter('basename', str, nzs.strip, nzs.forbid_newlines)\n    def set_basename(self, basename: str) -> None:\n",
        "target_code_len": 121,
        "diff_format": "@@ -144,3 +214,3 @@\n \n-    @PackageMakerBase._simple_setter('basename', str, nzs.strip, nzs.forbid_newlines)\n+    @_simple_setter('basename', str, nzs.strip, nzs.forbid_newlines)\n     def set_basename(self, basename: str) -> None:\n",
        "source_code_with_indent": "\n    <DED>@PackageMakerBase._simple_setter('basename', str, nzs.strip, nzs.forbid_newlines)\n    def set_basename(self, basename: str) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>@_simple_setter('basename', str, nzs.strip, nzs.forbid_newlines)\n    def set_basename(self, basename: str) -> None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def prefix_name(self, prefix: str) -> None:\n        self._package.name = prefix + self._package.name\n\n    @PackageMakerBase._simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n    def set_version(self, version: str, version_normalizer: Optional[Callable[[str], str]] = None) -> None:\n",
        "source_code_len": 299,
        "target_code": "    def prefix_name(self, prefix: str) -> None:\n        assert(self._package.name)\n        self._package.name = prefix + self._package.name\n\n    @_simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n    def set_version(self, version: str, version_normalizer: Optional[Callable[[str], str]] = None) -> None:\n",
        "target_code_len": 317,
        "diff_format": "@@ -149,5 +219,6 @@\n     def prefix_name(self, prefix: str) -> None:\n+        assert(self._package.name)\n         self._package.name = prefix + self._package.name\n \n-    @PackageMakerBase._simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n+    @_simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n     def set_version(self, version: str, version_normalizer: Optional[Callable[[str], str]] = None) -> None:\n",
        "source_code_with_indent": "    <DED>def prefix_name(self, prefix: str) -> None:\n        <IND>self._package.name = prefix + self._package.name\n\n    <DED>@PackageMakerBase._simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n    def set_version(self, version: str, version_normalizer: Optional[Callable[[str], str]] = None) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def prefix_name(self, prefix: str) -> None:\n        <IND>assert(self._package.name)\n        self._package.name = prefix + self._package.name\n\n    <DED>@_simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n    def set_version(self, version: str, version_normalizer: Optional[Callable[[str], str]] = None) -> None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    @PackageMakerBase._simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n    def set_rawversion(self, rawversion: str) -> None:\n",
        "source_code_len": 141,
        "target_code": "\n    @_simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n    def set_rawversion(self, rawversion: str) -> None:\n",
        "target_code_len": 124,
        "diff_format": "@@ -157,3 +228,3 @@\n \n-    @PackageMakerBase._simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n+    @_simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n     def set_rawversion(self, rawversion: str) -> None:\n",
        "source_code_with_indent": "\n    <DED>@PackageMakerBase._simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n    def set_rawversion(self, rawversion: str) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>@_simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n    def set_rawversion(self, rawversion: str) -> None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    @PackageMakerBase._simple_setter('arch', str, nzs.strip, nzs.forbid_newlines)\n    def set_arch(self, arch: str) -> None:\n",
        "source_code_len": 126,
        "target_code": "\n    @_simple_setter('arch', str, nzs.strip, nzs.forbid_newlines)\n    def set_arch(self, arch: str) -> None:\n",
        "target_code_len": 109,
        "diff_format": "@@ -167,3 +238,3 @@\n \n-    @PackageMakerBase._simple_setter('arch', str, nzs.strip, nzs.forbid_newlines)\n+    @_simple_setter('arch', str, nzs.strip, nzs.forbid_newlines)\n     def set_arch(self, arch: str) -> None:\n",
        "source_code_with_indent": "\n    <DED>@PackageMakerBase._simple_setter('arch', str, nzs.strip, nzs.forbid_newlines)\n    def set_arch(self, arch: str) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>@_simple_setter('arch', str, nzs.strip, nzs.forbid_newlines)\n    def set_arch(self, arch: str) -> None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    @PackageMakerBase._simple_setter('subrepo', str, nzs.strip, nzs.forbid_newlines)\n    def set_subrepo(self, subrepo: str) -> None:\n",
        "source_code_len": 135,
        "target_code": "\n    @_simple_setter('subrepo', str, nzs.strip, nzs.forbid_newlines)\n    def set_subrepo(self, subrepo: str) -> None:\n",
        "target_code_len": 118,
        "diff_format": "@@ -171,3 +242,3 @@\n \n-    @PackageMakerBase._simple_setter('subrepo', str, nzs.strip, nzs.forbid_newlines)\n+    @_simple_setter('subrepo', str, nzs.strip, nzs.forbid_newlines)\n     def set_subrepo(self, subrepo: str) -> None:\n",
        "source_code_with_indent": "\n    <DED>@PackageMakerBase._simple_setter('subrepo', str, nzs.strip, nzs.forbid_newlines)\n    def set_subrepo(self, subrepo: str) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>@_simple_setter('subrepo', str, nzs.strip, nzs.forbid_newlines)\n    def set_subrepo(self, subrepo: str) -> None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    @PackageMakerBase._simple_setter('summary', str, nzs.strip)\n    def set_summary(self, summary: str) -> None:\n        self._package.comment = summary\n\n    @PackageMakerBase._omnivorous_setter('maintainer', str, nzs.strip, nzs.forbid_newlines, nzs.tolower)\n    def add_maintainers(self, *args: Any) -> None:\n        self._package.maintainers.extend(_iter_unique(args, self._package.maintainers))\n\n    @PackageMakerBase._omnivorous_setter('category', str, nzs.strip, nzs.forbid_newlines)\n    def add_categories(self, *args: Any) -> None:\n        # XXX: convert into array\n        if not self._package.category:\n            self._package.category = args[0]\n\n    @PackageMakerBase._omnivorous_setter('homepage', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n    def add_homepages(self, *args: Any) -> None:\n        # XXX: convert into array\n        if not self._package.homepage:\n            self._package.homepage = args[0]\n\n    @PackageMakerBase._omnivorous_setter('license', str, nzs.strip, nzs.forbid_newlines)\n    def add_licenses(self, *args: Any) -> None:\n        self._package.licenses.extend(args)\n\n    @PackageMakerBase._omnivorous_setter('download', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n    def add_downloads(self, *args: Any) -> None:\n        self._package.downloads.extend(_iter_unique(args, self._package.downloads))\n\n    def set_flags(self, mask: int, is_set: bool = True) -> None:\n        self._package.set_flag(mask, is_set)\n\n",
        "source_code_len": 1494,
        "target_code": "\n    @_simple_setter('summary', str, nzs.strip)\n    def set_summary(self, summary: str) -> None:\n        self._package.summary = summary\n\n    @_omnivorous_setter('maintainer', str, nzs.strip, nzs.forbid_newlines, nzs.tolower)\n    def add_maintainers(self, *args: Any) -> None:\n        _extend_unique(self._package.maintainers, args)\n\n    @_omnivorous_setter('category', str, nzs.strip, nzs.forbid_newlines)\n    def add_categories(self, *args: Any) -> None:\n        _extend_unique(self._package.categories, args)\n\n    @_omnivorous_setter('homepage', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n    def add_homepages(self, *args: Any) -> None:\n        _extend_unique(self._package.homepages, args)\n\n    @_omnivorous_setter('license', str, nzs.strip, nzs.forbid_newlines)\n    def add_licenses(self, *args: Any) -> None:\n        _extend_unique(self._package.licenses, args)\n\n    @_omnivorous_setter('download', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n    def add_downloads(self, *args: Any) -> None:\n        _extend_unique(self._package.downloads, args)\n\n    def set_flags(self, mask: int, is_set: bool = True) -> None:\n        if is_set:\n            self._package.flags |= mask\n        else:\n            self._package.flags &= ~mask\n\n",
        "target_code_len": 1281,
        "diff_format": "@@ -175,32 +246,31 @@\n \n-    @PackageMakerBase._simple_setter('summary', str, nzs.strip)\n+    @_simple_setter('summary', str, nzs.strip)\n     def set_summary(self, summary: str) -> None:\n-        self._package.comment = summary\n-\n-    @PackageMakerBase._omnivorous_setter('maintainer', str, nzs.strip, nzs.forbid_newlines, nzs.tolower)\n+        self._package.summary = summary\n+\n+    @_omnivorous_setter('maintainer', str, nzs.strip, nzs.forbid_newlines, nzs.tolower)\n     def add_maintainers(self, *args: Any) -> None:\n-        self._package.maintainers.extend(_iter_unique(args, self._package.maintainers))\n-\n-    @PackageMakerBase._omnivorous_setter('category', str, nzs.strip, nzs.forbid_newlines)\n+        _extend_unique(self._package.maintainers, args)\n+\n+    @_omnivorous_setter('category', str, nzs.strip, nzs.forbid_newlines)\n     def add_categories(self, *args: Any) -> None:\n-        # XXX: convert into array\n-        if not self._package.category:\n-            self._package.category = args[0]\n-\n-    @PackageMakerBase._omnivorous_setter('homepage', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n+        _extend_unique(self._package.categories, args)\n+\n+    @_omnivorous_setter('homepage', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n     def add_homepages(self, *args: Any) -> None:\n-        # XXX: convert into array\n-        if not self._package.homepage:\n-            self._package.homepage = args[0]\n-\n-    @PackageMakerBase._omnivorous_setter('license', str, nzs.strip, nzs.forbid_newlines)\n+        _extend_unique(self._package.homepages, args)\n+\n+    @_omnivorous_setter('license', str, nzs.strip, nzs.forbid_newlines)\n     def add_licenses(self, *args: Any) -> None:\n-        self._package.licenses.extend(args)\n-\n-    @PackageMakerBase._omnivorous_setter('download', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n+        _extend_unique(self._package.licenses, args)\n+\n+    @_omnivorous_setter('download', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n     def add_downloads(self, *args: Any) -> None:\n-        self._package.downloads.extend(_iter_unique(args, self._package.downloads))\n+        _extend_unique(self._package.downloads, args)\n \n     def set_flags(self, mask: int, is_set: bool = True) -> None:\n-        self._package.set_flag(mask, is_set)\n+        if is_set:\n+            self._package.flags |= mask\n+        else:\n+            self._package.flags &= ~mask\n \n",
        "source_code_with_indent": "\n    <DED>@PackageMakerBase._simple_setter('summary', str, nzs.strip)\n    def set_summary(self, summary: str) -> None:\n        <IND>self._package.comment = summary\n\n    <DED>@PackageMakerBase._omnivorous_setter('maintainer', str, nzs.strip, nzs.forbid_newlines, nzs.tolower)\n    def add_maintainers(self, *args: Any) -> None:\n        <IND>self._package.maintainers.extend(_iter_unique(args, self._package.maintainers))\n\n    <DED>@PackageMakerBase._omnivorous_setter('category', str, nzs.strip, nzs.forbid_newlines)\n    def add_categories(self, *args: Any) -> None:\n        # XXX: convert into array\n        <IND>if not self._package.category:\n            <IND>self._package.category = args[0]\n\n    <DED><DED>@PackageMakerBase._omnivorous_setter('homepage', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n    def add_homepages(self, *args: Any) -> None:\n        # XXX: convert into array\n        <IND>if not self._package.homepage:\n            <IND>self._package.homepage = args[0]\n\n    <DED><DED>@PackageMakerBase._omnivorous_setter('license', str, nzs.strip, nzs.forbid_newlines)\n    def add_licenses(self, *args: Any) -> None:\n        <IND>self._package.licenses.extend(args)\n\n    <DED>@PackageMakerBase._omnivorous_setter('download', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n    def add_downloads(self, *args: Any) -> None:\n        <IND>self._package.downloads.extend(_iter_unique(args, self._package.downloads))\n\n    <DED>def set_flags(self, mask: int, is_set: bool = True) -> None:\n        <IND>self._package.set_flag(mask, is_set)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>@_simple_setter('summary', str, nzs.strip)\n    def set_summary(self, summary: str) -> None:\n        <IND>self._package.summary = summary\n\n    <DED>@_omnivorous_setter('maintainer', str, nzs.strip, nzs.forbid_newlines, nzs.tolower)\n    def add_maintainers(self, *args: Any) -> None:\n        <IND>_extend_unique(self._package.maintainers, args)\n\n    <DED>@_omnivorous_setter('category', str, nzs.strip, nzs.forbid_newlines)\n    def add_categories(self, *args: Any) -> None:\n        <IND>_extend_unique(self._package.categories, args)\n\n    <DED>@_omnivorous_setter('homepage', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n    def add_homepages(self, *args: Any) -> None:\n        <IND>_extend_unique(self._package.homepages, args)\n\n    <DED>@_omnivorous_setter('license', str, nzs.strip, nzs.forbid_newlines)\n    def add_licenses(self, *args: Any) -> None:\n        <IND>_extend_unique(self._package.licenses, args)\n\n    <DED>@_omnivorous_setter('download', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n    def add_downloads(self, *args: Any) -> None:\n        <IND>_extend_unique(self._package.downloads, args)\n\n    <DED>def set_flags(self, mask: int, is_set: bool = True) -> None:\n        <IND>if is_set:\n            <IND>self._package.flags |= mask\n        <DED>else:\n            <IND>self._package.flags &= ~mask\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def unwrap(self) -> Package:\n        return self._package\n\n",
        "source_code_len": 64,
        "target_code": "\n    def spawn(self, repo: str, family: str, subrepo: Optional[str] = None, shadow: bool = False, default_maintainer: Optional[str] = None) -> Package:\n        if self._package.name is None:\n            raise RuntimeError('Attempt to spawn Package with unset name')\n        if self._package.version is None:\n            raise RuntimeError('Attempt to spawn Package with unset version')\n\n        maintainers: List[str] = self._package.maintainers if self._package.maintainers else [default_maintainer] if default_maintainer else []\n\n        return Package(\n            repo=repo,\n            family=family,\n            subrepo=self._package.subrepo or subrepo,\n\n            name=self._package.name,\n            basename=self._package.basename,\n\n            version=self._package.version,\n            origversion=self._package.version,\n            rawversion=self._package.rawversion if self._package.rawversion is not None else self._package.version,\n\n            arch=self._package.arch,\n\n            maintainers=maintainers,\n            category=self._package.categories[0] if self._package.categories else None,  # XXX: convert to array\n            comment=self._package.summary,\n            homepage=self._package.homepages[0] if self._package.homepages else None,  # XXX: convert to array\n            licenses=self._package.licenses,\n            downloads=self._package.downloads,\n\n            flags=self._package.flags,\n            shadow=shadow,\n\n            extrafields=self._package.extrafields,\n        )\n\n",
        "target_code_len": 1515,
        "diff_format": "@@ -209,4 +279,36 @@\n \n-    def unwrap(self) -> Package:\n-        return self._package\n+    def spawn(self, repo: str, family: str, subrepo: Optional[str] = None, shadow: bool = False, default_maintainer: Optional[str] = None) -> Package:\n+        if self._package.name is None:\n+            raise RuntimeError('Attempt to spawn Package with unset name')\n+        if self._package.version is None:\n+            raise RuntimeError('Attempt to spawn Package with unset version')\n+\n+        maintainers: List[str] = self._package.maintainers if self._package.maintainers else [default_maintainer] if default_maintainer else []\n+\n+        return Package(\n+            repo=repo,\n+            family=family,\n+            subrepo=self._package.subrepo or subrepo,\n+\n+            name=self._package.name,\n+            basename=self._package.basename,\n+\n+            version=self._package.version,\n+            origversion=self._package.version,\n+            rawversion=self._package.rawversion if self._package.rawversion is not None else self._package.version,\n+\n+            arch=self._package.arch,\n+\n+            maintainers=maintainers,\n+            category=self._package.categories[0] if self._package.categories else None,  # XXX: convert to array\n+            comment=self._package.summary,\n+            homepage=self._package.homepages[0] if self._package.homepages else None,  # XXX: convert to array\n+            licenses=self._package.licenses,\n+            downloads=self._package.downloads,\n+\n+            flags=self._package.flags,\n+            shadow=shadow,\n+\n+            extrafields=self._package.extrafields,\n+        )\n \n",
        "source_code_with_indent": "\n    <DED>def unwrap(self) -> Package:\n        <IND>return self._package\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def spawn(self, repo: str, family: str, subrepo: Optional[str] = None, shadow: bool = False, default_maintainer: Optional[str] = None) -> Package:\n        <IND>if self._package.name is None:\n            <IND>raise RuntimeError('Attempt to spawn Package with unset name')\n        <DED>if self._package.version is None:\n            <IND>raise RuntimeError('Attempt to spawn Package with unset version')\n\n        <DED>maintainers: List[str] = self._package.maintainers if self._package.maintainers else [default_maintainer] if default_maintainer else []\n\n        return Package(\n            repo=repo,\n            family=family,\n            subrepo=self._package.subrepo or subrepo,\n\n            name=self._package.name,\n            basename=self._package.basename,\n\n            version=self._package.version,\n            origversion=self._package.version,\n            rawversion=self._package.rawversion if self._package.rawversion is not None else self._package.version,\n\n            arch=self._package.arch,\n\n            maintainers=maintainers,\n            category=self._package.categories[0] if self._package.categories else None,  # XXX: convert to array\n            comment=self._package.summary,\n            homepage=self._package.homepages[0] if self._package.homepages else None,  # XXX: convert to array\n            licenses=self._package.licenses,\n            downloads=self._package.downloads,\n\n            flags=self._package.flags,\n            shadow=shadow,\n\n            extrafields=self._package.extrafields,\n        )\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "repology/repology-updater",
    "commit": "9f67d556944fe256c990593f673713e299feaf8a",
    "filename": "repology/packagemaker/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/repology-repology-updater/repology/packagemaker/__init__.py",
    "file_hunks_size": 17,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "repology/packagemaker/__init__.py:172:37 Incompatible parameter type [6]: Expected `PackageMakerBase` for 1st positional only parameter to call `PackageMakerBase._simple_setter` but got `str`.",
    "message": " Expected `PackageMakerBase` for 1st positional only parameter to call `PackageMakerBase._simple_setter` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 172,
    "warning_line": "    @PackageMakerBase._simple_setter('subrepo', str, nzs.strip, nzs.forbid_newlines)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from functools import wraps\nfrom typing import Any, Callable, Iterable, Optional\n\nfrom repology.logger import Logger\nfrom repology.package import Package\nfrom repology.packagemaker import normalizers as nzs\n\n",
        "source_code_len": 208,
        "target_code": "from functools import wraps\nfrom typing import Any, Callable, Dict, Iterable, List, Optional, Type\n\nfrom repology.logger import Logger\nfrom repology.package import Package, PackageStatus\nfrom repology.packagemaker import normalizers as nzs\nfrom repology.packagemaker.normalizers import NormalizerFunction\n\n",
        "target_code_len": 306,
        "diff_format": "@@ -24,7 +22,8 @@\n from functools import wraps\n-from typing import Any, Callable, Iterable, Optional\n+from typing import Any, Callable, Dict, Iterable, List, Optional, Type\n \n from repology.logger import Logger\n-from repology.package import Package\n+from repology.package import Package, PackageStatus\n from repology.packagemaker import normalizers as nzs\n+from repology.packagemaker.normalizers import NormalizerFunction\n \n",
        "source_code_with_indent": "from functools import wraps\nfrom typing import Any, Callable, Iterable, Optional\n\nfrom repology.logger import Logger\nfrom repology.package import Package\nfrom repology.packagemaker import normalizers as nzs\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from functools import wraps\nfrom typing import Any, Callable, Dict, Iterable, List, Optional, Type\n\nfrom repology.logger import Logger\nfrom repology.package import Package, PackageStatus\nfrom repology.packagemaker import normalizers as nzs\nfrom repology.packagemaker.normalizers import NormalizerFunction\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _iter_unique(iterable, existing=None):\n    seen = set(existing) if existing else set()\n    for value in iterable:\n        if value not in seen:\n            seen.add(value)\n            yield value\n\n",
        "source_code_len": 202,
        "target_code": "\nclass PackageTemplate:\n    __slots__ = [\n        'subrepo',\n\n        'name',\n        'basename',\n\n        'version',\n        'origversion',\n        'rawversion',\n\n        'arch',\n        'summary',\n        'maintainers',\n        'categories',\n        'homepages',\n        'licenses',\n        'downloads',\n\n        'flags',\n\n        'extrafields',\n    ]\n\n    subrepo: Optional[str]\n\n    name: Optional[str]\n    basename: Optional[str]\n\n    version: Optional[str]\n    origversion: Optional[str]\n    rawversion: Optional[str]\n\n    arch: Optional[str]\n    summary: Optional[str]\n    maintainers: List[str]\n    categories: List[str]\n    homepages: List[str]\n    licenses: List[str]\n    downloads: List[str]\n\n    flags: int\n\n    extrafields: Dict[str, str]\n\n    def __init__(self) -> None:\n        self.subrepo = None\n\n        self.name = None\n        self.basename = None\n\n        self.version = None\n        self.origversion = None\n        self.rawversion = None\n\n        self.arch = None\n        self.summary = None\n        self.maintainers = []\n        self.categories = []\n        self.homepages = []\n        self.licenses = []\n        self.downloads = []\n\n        self.flags = 0\n\n        self.extrafields = {}\n\n",
        "target_code_len": 1212,
        "diff_format": "@@ -34,8 +33,68 @@\n \n-def _iter_unique(iterable, existing=None):\n-    seen = set(existing) if existing else set()\n-    for value in iterable:\n-        if value not in seen:\n-            seen.add(value)\n-            yield value\n+class PackageTemplate:\n+    __slots__ = [\n+        'subrepo',\n+\n+        'name',\n+        'basename',\n+\n+        'version',\n+        'origversion',\n+        'rawversion',\n+\n+        'arch',\n+        'summary',\n+        'maintainers',\n+        'categories',\n+        'homepages',\n+        'licenses',\n+        'downloads',\n+\n+        'flags',\n+\n+        'extrafields',\n+    ]\n+\n+    subrepo: Optional[str]\n+\n+    name: Optional[str]\n+    basename: Optional[str]\n+\n+    version: Optional[str]\n+    origversion: Optional[str]\n+    rawversion: Optional[str]\n+\n+    arch: Optional[str]\n+    summary: Optional[str]\n+    maintainers: List[str]\n+    categories: List[str]\n+    homepages: List[str]\n+    licenses: List[str]\n+    downloads: List[str]\n+\n+    flags: int\n+\n+    extrafields: Dict[str, str]\n+\n+    def __init__(self) -> None:\n+        self.subrepo = None\n+\n+        self.name = None\n+        self.basename = None\n+\n+        self.version = None\n+        self.origversion = None\n+        self.rawversion = None\n+\n+        self.arch = None\n+        self.summary = None\n+        self.maintainers = []\n+        self.categories = []\n+        self.homepages = []\n+        self.licenses = []\n+        self.downloads = []\n+\n+        self.flags = 0\n+\n+        self.extrafields = {}\n \n",
        "source_code_with_indent": "\ndef _iter_unique(iterable, existing=None):\n    <IND>seen = set(existing) if existing else set()\n    for value in iterable:\n        <IND>if value not in seen:\n            <IND>seen.add(value)\n            yield value\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nclass PackageTemplate:\n    <IND>__slots__ = [\n        'subrepo',\n\n        'name',\n        'basename',\n\n        'version',\n        'origversion',\n        'rawversion',\n\n        'arch',\n        'summary',\n        'maintainers',\n        'categories',\n        'homepages',\n        'licenses',\n        'downloads',\n\n        'flags',\n\n        'extrafields',\n    ]\n\n    subrepo: Optional[str]\n\n    name: Optional[str]\n    basename: Optional[str]\n\n    version: Optional[str]\n    origversion: Optional[str]\n    rawversion: Optional[str]\n\n    arch: Optional[str]\n    summary: Optional[str]\n    maintainers: List[str]\n    categories: List[str]\n    homepages: List[str]\n    licenses: List[str]\n    downloads: List[str]\n\n    flags: int\n\n    extrafields: Dict[str, str]\n\n    def __init__(self) -> None:\n        <IND>self.subrepo = None\n\n        self.name = None\n        self.basename = None\n\n        self.version = None\n        self.origversion = None\n        self.rawversion = None\n\n        self.arch = None\n        self.summary = None\n        self.maintainers = []\n        self.categories = []\n        self.homepages = []\n        self.licenses = []\n        self.downloads = []\n\n        self.flags = 0\n\n        self.extrafields = {}\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _omnivorous_setter(fieldname, want_type, *normalizers):  # noqa: N805\n        def inner(method):\n            @wraps(method)\n            def wrapper(self, *args):\n                values = self._normalize_args(args, fieldname, want_type, normalizers)\n                if values:\n                    return method(self, *values)\n            return wrapper\n        return inner\n\n    def _simple_setter(fieldname, want_type, *normalizers):  # noqa: N805\n        def inner(method):\n            @wraps(method)\n            def wrapper(self, arg, *other_args):\n                if arg is None:\n                    pass\n                elif isinstance(arg, str) and want_type is int or isinstance(arg, int) and want_type is str:\n                    arg = want_type(arg)\n                elif not isinstance(arg, want_type):\n                    raise RuntimeError('unexpected type {} for {} (expected {})'.format(arg.__class__.__name__, fieldname, want_type.__name__))\n                value = self._apply_normalizers(arg, fieldname, normalizers)\n                if value:\n                    return method(self, value, *other_args)\n            return wrapper\n        return inner\n\n",
        "source_code_len": 1176,
        "target_code": "\n\ndef _omnivorous_setter(fieldname: str, want_type: Type[Any], *normalizers: NormalizerFunction) -> Callable[[Callable[..., Any]], Any]:\n    def inner(method: Callable[..., Any]) -> Callable[..., Any]:\n        @wraps(method)\n        def wrapper(self: PackageMakerBase, *args: Any) -> Any:\n            values = self._normalize_args(args, fieldname, want_type, normalizers)\n            if values:\n                return method(self, *values)\n        return wrapper\n    return inner\n\n\ndef _simple_setter(fieldname: str, want_type: Type[Any], *normalizers: NormalizerFunction) -> Callable[[Callable[..., Any]], Any]:\n    def inner(method: Callable[..., Any]) -> Callable[..., Any]:\n        @wraps(method)\n        def wrapper(self: PackageMakerBase, arg: Any, *other_args: Any) -> Any:\n            if arg is None:\n                pass\n            elif isinstance(arg, str) and want_type is int or isinstance(arg, int) and want_type is str:\n                arg = want_type(arg)\n            elif not isinstance(arg, want_type):\n                raise RuntimeError('unexpected type {} for {} (expected {})'.format(arg.__class__.__name__, fieldname, want_type.__name__))\n            value = self._apply_normalizers(arg, fieldname, normalizers)\n            if value:\n                return method(self, value, *other_args)\n        return wrapper\n    return inner\n\n\ndef _extend_unique(existing: List[str], iterable: Iterable[str]) -> None:\n    seen = set(existing) if existing else set()\n\n    for value in iterable:\n        if value not in seen:\n            seen.add(value)\n            existing.append(value)\n\n",
        "target_code_len": 1598,
        "diff_format": "@@ -92,27 +151,38 @@\n \n-    def _omnivorous_setter(fieldname, want_type, *normalizers):  # noqa: N805\n-        def inner(method):\n-            @wraps(method)\n-            def wrapper(self, *args):\n-                values = self._normalize_args(args, fieldname, want_type, normalizers)\n-                if values:\n-                    return method(self, *values)\n-            return wrapper\n-        return inner\n-\n-    def _simple_setter(fieldname, want_type, *normalizers):  # noqa: N805\n-        def inner(method):\n-            @wraps(method)\n-            def wrapper(self, arg, *other_args):\n-                if arg is None:\n-                    pass\n-                elif isinstance(arg, str) and want_type is int or isinstance(arg, int) and want_type is str:\n-                    arg = want_type(arg)\n-                elif not isinstance(arg, want_type):\n-                    raise RuntimeError('unexpected type {} for {} (expected {})'.format(arg.__class__.__name__, fieldname, want_type.__name__))\n-                value = self._apply_normalizers(arg, fieldname, normalizers)\n-                if value:\n-                    return method(self, value, *other_args)\n-            return wrapper\n-        return inner\n+\n+def _omnivorous_setter(fieldname: str, want_type: Type[Any], *normalizers: NormalizerFunction) -> Callable[[Callable[..., Any]], Any]:\n+    def inner(method: Callable[..., Any]) -> Callable[..., Any]:\n+        @wraps(method)\n+        def wrapper(self: PackageMakerBase, *args: Any) -> Any:\n+            values = self._normalize_args(args, fieldname, want_type, normalizers)\n+            if values:\n+                return method(self, *values)\n+        return wrapper\n+    return inner\n+\n+\n+def _simple_setter(fieldname: str, want_type: Type[Any], *normalizers: NormalizerFunction) -> Callable[[Callable[..., Any]], Any]:\n+    def inner(method: Callable[..., Any]) -> Callable[..., Any]:\n+        @wraps(method)\n+        def wrapper(self: PackageMakerBase, arg: Any, *other_args: Any) -> Any:\n+            if arg is None:\n+                pass\n+            elif isinstance(arg, str) and want_type is int or isinstance(arg, int) and want_type is str:\n+                arg = want_type(arg)\n+            elif not isinstance(arg, want_type):\n+                raise RuntimeError('unexpected type {} for {} (expected {})'.format(arg.__class__.__name__, fieldname, want_type.__name__))\n+            value = self._apply_normalizers(arg, fieldname, normalizers)\n+            if value:\n+                return method(self, value, *other_args)\n+        return wrapper\n+    return inner\n+\n+\n+def _extend_unique(existing: List[str], iterable: Iterable[str]) -> None:\n+    seen = set(existing) if existing else set()\n+\n+    for value in iterable:\n+        if value not in seen:\n+            seen.add(value)\n+            existing.append(value)\n \n",
        "source_code_with_indent": "\n    <DED>def _omnivorous_setter(fieldname, want_type, *normalizers):  # noqa: N805\n        <IND>def inner(method):\n            <IND>@wraps(method)\n            def wrapper(self, *args):\n                <IND>values = self._normalize_args(args, fieldname, want_type, normalizers)\n                if values:\n                    <IND>return method(self, *values)\n            <DED><DED>return wrapper\n        <DED>return inner\n\n    <DED>def _simple_setter(fieldname, want_type, *normalizers):  # noqa: N805\n        <IND>def inner(method):\n            <IND>@wraps(method)\n            def wrapper(self, arg, *other_args):\n                <IND>if arg is None:\n                    <IND>pass\n                <DED>elif isinstance(arg, str) and want_type is int or isinstance(arg, int) and want_type is str:\n                    <IND>arg = want_type(arg)\n                <DED>elif not isinstance(arg, want_type):\n                    <IND>raise RuntimeError('unexpected type {} for {} (expected {})'.format(arg.__class__.__name__, fieldname, want_type.__name__))\n                <DED>value = self._apply_normalizers(arg, fieldname, normalizers)\n                if value:\n                    <IND>return method(self, value, *other_args)\n            <DED><DED>return wrapper\n        <DED>return inner\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n\n<DED><DED>def _omnivorous_setter(fieldname: str, want_type: Type[Any], *normalizers: NormalizerFunction) -> Callable[[Callable[..., Any]], Any]:\n    <IND>def inner(method: Callable[..., Any]) -> Callable[..., Any]:\n        <IND>@wraps(method)\n        def wrapper(self: PackageMakerBase, *args: Any) -> Any:\n            <IND>values = self._normalize_args(args, fieldname, want_type, normalizers)\n            if values:\n                <IND>return method(self, *values)\n        <DED><DED>return wrapper\n    <DED>return inner\n\n\n<DED>def _simple_setter(fieldname: str, want_type: Type[Any], *normalizers: NormalizerFunction) -> Callable[[Callable[..., Any]], Any]:\n    <IND>def inner(method: Callable[..., Any]) -> Callable[..., Any]:\n        <IND>@wraps(method)\n        def wrapper(self: PackageMakerBase, arg: Any, *other_args: Any) -> Any:\n            <IND>if arg is None:\n                <IND>pass\n            <DED>elif isinstance(arg, str) and want_type is int or isinstance(arg, int) and want_type is str:\n                <IND>arg = want_type(arg)\n            <DED>elif not isinstance(arg, want_type):\n                <IND>raise RuntimeError('unexpected type {} for {} (expected {})'.format(arg.__class__.__name__, fieldname, want_type.__name__))\n            <DED>value = self._apply_normalizers(arg, fieldname, normalizers)\n            if value:\n                <IND>return method(self, value, *other_args)\n        <DED><DED>return wrapper\n    <DED>return inner\n\n\n<DED>def _extend_unique(existing: List[str], iterable: Iterable[str]) -> None:\n    <IND>seen = set(existing) if existing else set()\n\n    for value in iterable:\n        <IND>if value not in seen:\n            <IND>seen.add(value)\n            existing.append(value)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "class PackageMaker(PackageMakerBase):\n    _package: Package\n    _ident: Optional[str]\n",
        "source_code_len": 86,
        "target_code": "class PackageMaker(PackageMakerBase):\n    _package: PackageTemplate\n    _ident: Optional[str]\n",
        "target_code_len": 94,
        "diff_format": "@@ -120,3 +190,3 @@\n class PackageMaker(PackageMakerBase):\n-    _package: Package\n+    _package: PackageTemplate\n     _ident: Optional[str]\n",
        "source_code_with_indent": "<DED><DED>class PackageMaker(PackageMakerBase):\n    <IND>_package: Package\n    _ident: Optional[str]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED><DED><DED>class PackageMaker(PackageMakerBase):\n    <IND>_package: PackageTemplate\n    _ident: Optional[str]\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        super(PackageMaker, self).__init__(logger)\n        self._package = Package()\n        self._ident = ident\n",
        "source_code_len": 113,
        "target_code": "        super(PackageMaker, self).__init__(logger)\n        self._package = PackageTemplate()\n        self._ident = ident\n",
        "target_code_len": 121,
        "diff_format": "@@ -127,3 +197,3 @@\n         super(PackageMaker, self).__init__(logger)\n-        self._package = Package()\n+        self._package = PackageTemplate()\n         self._ident = ident\n",
        "source_code_with_indent": "        <IND>super(PackageMaker, self).__init__(logger)\n        self._package = Package()\n        self._ident = ident\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>super(PackageMaker, self).__init__(logger)\n        self._package = PackageTemplate()\n        self._ident = ident\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    @PackageMakerBase._simple_setter('origin', str, nzs.strip, nzs.forbid_newlines)\n    def set_origin(self, origin: str) -> None:\n",
        "source_code_len": 132,
        "target_code": "\n    @_simple_setter('origin', str, nzs.strip, nzs.forbid_newlines)\n    def set_origin(self, origin: str) -> None:\n",
        "target_code_len": 115,
        "diff_format": "@@ -135,3 +205,3 @@\n \n-    @PackageMakerBase._simple_setter('origin', str, nzs.strip, nzs.forbid_newlines)\n+    @_simple_setter('origin', str, nzs.strip, nzs.forbid_newlines)\n     def set_origin(self, origin: str) -> None:\n",
        "source_code_with_indent": "\n    <DED>@PackageMakerBase._simple_setter('origin', str, nzs.strip, nzs.forbid_newlines)\n    def set_origin(self, origin: str) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>@_simple_setter('origin', str, nzs.strip, nzs.forbid_newlines)\n    def set_origin(self, origin: str) -> None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    @PackageMakerBase._simple_setter('name', str, nzs.strip, nzs.forbid_newlines)\n    def set_name(self, name: str) -> None:\n",
        "source_code_len": 126,
        "target_code": "\n    @_simple_setter('name', str, nzs.strip, nzs.forbid_newlines)\n    def set_name(self, name: str) -> None:\n",
        "target_code_len": 109,
        "diff_format": "@@ -140,3 +210,3 @@\n \n-    @PackageMakerBase._simple_setter('name', str, nzs.strip, nzs.forbid_newlines)\n+    @_simple_setter('name', str, nzs.strip, nzs.forbid_newlines)\n     def set_name(self, name: str) -> None:\n",
        "source_code_with_indent": "\n    <DED>@PackageMakerBase._simple_setter('name', str, nzs.strip, nzs.forbid_newlines)\n    def set_name(self, name: str) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>@_simple_setter('name', str, nzs.strip, nzs.forbid_newlines)\n    def set_name(self, name: str) -> None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    @PackageMakerBase._simple_setter('basename', str, nzs.strip, nzs.forbid_newlines)\n    def set_basename(self, basename: str) -> None:\n",
        "source_code_len": 138,
        "target_code": "\n    @_simple_setter('basename', str, nzs.strip, nzs.forbid_newlines)\n    def set_basename(self, basename: str) -> None:\n",
        "target_code_len": 121,
        "diff_format": "@@ -144,3 +214,3 @@\n \n-    @PackageMakerBase._simple_setter('basename', str, nzs.strip, nzs.forbid_newlines)\n+    @_simple_setter('basename', str, nzs.strip, nzs.forbid_newlines)\n     def set_basename(self, basename: str) -> None:\n",
        "source_code_with_indent": "\n    <DED>@PackageMakerBase._simple_setter('basename', str, nzs.strip, nzs.forbid_newlines)\n    def set_basename(self, basename: str) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>@_simple_setter('basename', str, nzs.strip, nzs.forbid_newlines)\n    def set_basename(self, basename: str) -> None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def prefix_name(self, prefix: str) -> None:\n        self._package.name = prefix + self._package.name\n\n    @PackageMakerBase._simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n    def set_version(self, version: str, version_normalizer: Optional[Callable[[str], str]] = None) -> None:\n",
        "source_code_len": 299,
        "target_code": "    def prefix_name(self, prefix: str) -> None:\n        assert(self._package.name)\n        self._package.name = prefix + self._package.name\n\n    @_simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n    def set_version(self, version: str, version_normalizer: Optional[Callable[[str], str]] = None) -> None:\n",
        "target_code_len": 317,
        "diff_format": "@@ -149,5 +219,6 @@\n     def prefix_name(self, prefix: str) -> None:\n+        assert(self._package.name)\n         self._package.name = prefix + self._package.name\n \n-    @PackageMakerBase._simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n+    @_simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n     def set_version(self, version: str, version_normalizer: Optional[Callable[[str], str]] = None) -> None:\n",
        "source_code_with_indent": "    <DED>def prefix_name(self, prefix: str) -> None:\n        <IND>self._package.name = prefix + self._package.name\n\n    <DED>@PackageMakerBase._simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n    def set_version(self, version: str, version_normalizer: Optional[Callable[[str], str]] = None) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def prefix_name(self, prefix: str) -> None:\n        <IND>assert(self._package.name)\n        self._package.name = prefix + self._package.name\n\n    <DED>@_simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n    def set_version(self, version: str, version_normalizer: Optional[Callable[[str], str]] = None) -> None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    @PackageMakerBase._simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n    def set_rawversion(self, rawversion: str) -> None:\n",
        "source_code_len": 141,
        "target_code": "\n    @_simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n    def set_rawversion(self, rawversion: str) -> None:\n",
        "target_code_len": 124,
        "diff_format": "@@ -157,3 +228,3 @@\n \n-    @PackageMakerBase._simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n+    @_simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n     def set_rawversion(self, rawversion: str) -> None:\n",
        "source_code_with_indent": "\n    <DED>@PackageMakerBase._simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n    def set_rawversion(self, rawversion: str) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>@_simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n    def set_rawversion(self, rawversion: str) -> None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    @PackageMakerBase._simple_setter('arch', str, nzs.strip, nzs.forbid_newlines)\n    def set_arch(self, arch: str) -> None:\n",
        "source_code_len": 126,
        "target_code": "\n    @_simple_setter('arch', str, nzs.strip, nzs.forbid_newlines)\n    def set_arch(self, arch: str) -> None:\n",
        "target_code_len": 109,
        "diff_format": "@@ -167,3 +238,3 @@\n \n-    @PackageMakerBase._simple_setter('arch', str, nzs.strip, nzs.forbid_newlines)\n+    @_simple_setter('arch', str, nzs.strip, nzs.forbid_newlines)\n     def set_arch(self, arch: str) -> None:\n",
        "source_code_with_indent": "\n    <DED>@PackageMakerBase._simple_setter('arch', str, nzs.strip, nzs.forbid_newlines)\n    def set_arch(self, arch: str) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>@_simple_setter('arch', str, nzs.strip, nzs.forbid_newlines)\n    def set_arch(self, arch: str) -> None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    @PackageMakerBase._simple_setter('subrepo', str, nzs.strip, nzs.forbid_newlines)\n    def set_subrepo(self, subrepo: str) -> None:\n",
        "source_code_len": 135,
        "target_code": "\n    @_simple_setter('subrepo', str, nzs.strip, nzs.forbid_newlines)\n    def set_subrepo(self, subrepo: str) -> None:\n",
        "target_code_len": 118,
        "diff_format": "@@ -171,3 +242,3 @@\n \n-    @PackageMakerBase._simple_setter('subrepo', str, nzs.strip, nzs.forbid_newlines)\n+    @_simple_setter('subrepo', str, nzs.strip, nzs.forbid_newlines)\n     def set_subrepo(self, subrepo: str) -> None:\n",
        "source_code_with_indent": "\n    <DED>@PackageMakerBase._simple_setter('subrepo', str, nzs.strip, nzs.forbid_newlines)\n    def set_subrepo(self, subrepo: str) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>@_simple_setter('subrepo', str, nzs.strip, nzs.forbid_newlines)\n    def set_subrepo(self, subrepo: str) -> None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    @PackageMakerBase._simple_setter('summary', str, nzs.strip)\n    def set_summary(self, summary: str) -> None:\n        self._package.comment = summary\n\n    @PackageMakerBase._omnivorous_setter('maintainer', str, nzs.strip, nzs.forbid_newlines, nzs.tolower)\n    def add_maintainers(self, *args: Any) -> None:\n        self._package.maintainers.extend(_iter_unique(args, self._package.maintainers))\n\n    @PackageMakerBase._omnivorous_setter('category', str, nzs.strip, nzs.forbid_newlines)\n    def add_categories(self, *args: Any) -> None:\n        # XXX: convert into array\n        if not self._package.category:\n            self._package.category = args[0]\n\n    @PackageMakerBase._omnivorous_setter('homepage', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n    def add_homepages(self, *args: Any) -> None:\n        # XXX: convert into array\n        if not self._package.homepage:\n            self._package.homepage = args[0]\n\n    @PackageMakerBase._omnivorous_setter('license', str, nzs.strip, nzs.forbid_newlines)\n    def add_licenses(self, *args: Any) -> None:\n        self._package.licenses.extend(args)\n\n    @PackageMakerBase._omnivorous_setter('download', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n    def add_downloads(self, *args: Any) -> None:\n        self._package.downloads.extend(_iter_unique(args, self._package.downloads))\n\n    def set_flags(self, mask: int, is_set: bool = True) -> None:\n        self._package.set_flag(mask, is_set)\n\n",
        "source_code_len": 1494,
        "target_code": "\n    @_simple_setter('summary', str, nzs.strip)\n    def set_summary(self, summary: str) -> None:\n        self._package.summary = summary\n\n    @_omnivorous_setter('maintainer', str, nzs.strip, nzs.forbid_newlines, nzs.tolower)\n    def add_maintainers(self, *args: Any) -> None:\n        _extend_unique(self._package.maintainers, args)\n\n    @_omnivorous_setter('category', str, nzs.strip, nzs.forbid_newlines)\n    def add_categories(self, *args: Any) -> None:\n        _extend_unique(self._package.categories, args)\n\n    @_omnivorous_setter('homepage', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n    def add_homepages(self, *args: Any) -> None:\n        _extend_unique(self._package.homepages, args)\n\n    @_omnivorous_setter('license', str, nzs.strip, nzs.forbid_newlines)\n    def add_licenses(self, *args: Any) -> None:\n        _extend_unique(self._package.licenses, args)\n\n    @_omnivorous_setter('download', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n    def add_downloads(self, *args: Any) -> None:\n        _extend_unique(self._package.downloads, args)\n\n    def set_flags(self, mask: int, is_set: bool = True) -> None:\n        if is_set:\n            self._package.flags |= mask\n        else:\n            self._package.flags &= ~mask\n\n",
        "target_code_len": 1281,
        "diff_format": "@@ -175,32 +246,31 @@\n \n-    @PackageMakerBase._simple_setter('summary', str, nzs.strip)\n+    @_simple_setter('summary', str, nzs.strip)\n     def set_summary(self, summary: str) -> None:\n-        self._package.comment = summary\n-\n-    @PackageMakerBase._omnivorous_setter('maintainer', str, nzs.strip, nzs.forbid_newlines, nzs.tolower)\n+        self._package.summary = summary\n+\n+    @_omnivorous_setter('maintainer', str, nzs.strip, nzs.forbid_newlines, nzs.tolower)\n     def add_maintainers(self, *args: Any) -> None:\n-        self._package.maintainers.extend(_iter_unique(args, self._package.maintainers))\n-\n-    @PackageMakerBase._omnivorous_setter('category', str, nzs.strip, nzs.forbid_newlines)\n+        _extend_unique(self._package.maintainers, args)\n+\n+    @_omnivorous_setter('category', str, nzs.strip, nzs.forbid_newlines)\n     def add_categories(self, *args: Any) -> None:\n-        # XXX: convert into array\n-        if not self._package.category:\n-            self._package.category = args[0]\n-\n-    @PackageMakerBase._omnivorous_setter('homepage', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n+        _extend_unique(self._package.categories, args)\n+\n+    @_omnivorous_setter('homepage', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n     def add_homepages(self, *args: Any) -> None:\n-        # XXX: convert into array\n-        if not self._package.homepage:\n-            self._package.homepage = args[0]\n-\n-    @PackageMakerBase._omnivorous_setter('license', str, nzs.strip, nzs.forbid_newlines)\n+        _extend_unique(self._package.homepages, args)\n+\n+    @_omnivorous_setter('license', str, nzs.strip, nzs.forbid_newlines)\n     def add_licenses(self, *args: Any) -> None:\n-        self._package.licenses.extend(args)\n-\n-    @PackageMakerBase._omnivorous_setter('download', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n+        _extend_unique(self._package.licenses, args)\n+\n+    @_omnivorous_setter('download', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n     def add_downloads(self, *args: Any) -> None:\n-        self._package.downloads.extend(_iter_unique(args, self._package.downloads))\n+        _extend_unique(self._package.downloads, args)\n \n     def set_flags(self, mask: int, is_set: bool = True) -> None:\n-        self._package.set_flag(mask, is_set)\n+        if is_set:\n+            self._package.flags |= mask\n+        else:\n+            self._package.flags &= ~mask\n \n",
        "source_code_with_indent": "\n    <DED>@PackageMakerBase._simple_setter('summary', str, nzs.strip)\n    def set_summary(self, summary: str) -> None:\n        <IND>self._package.comment = summary\n\n    <DED>@PackageMakerBase._omnivorous_setter('maintainer', str, nzs.strip, nzs.forbid_newlines, nzs.tolower)\n    def add_maintainers(self, *args: Any) -> None:\n        <IND>self._package.maintainers.extend(_iter_unique(args, self._package.maintainers))\n\n    <DED>@PackageMakerBase._omnivorous_setter('category', str, nzs.strip, nzs.forbid_newlines)\n    def add_categories(self, *args: Any) -> None:\n        # XXX: convert into array\n        <IND>if not self._package.category:\n            <IND>self._package.category = args[0]\n\n    <DED><DED>@PackageMakerBase._omnivorous_setter('homepage', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n    def add_homepages(self, *args: Any) -> None:\n        # XXX: convert into array\n        <IND>if not self._package.homepage:\n            <IND>self._package.homepage = args[0]\n\n    <DED><DED>@PackageMakerBase._omnivorous_setter('license', str, nzs.strip, nzs.forbid_newlines)\n    def add_licenses(self, *args: Any) -> None:\n        <IND>self._package.licenses.extend(args)\n\n    <DED>@PackageMakerBase._omnivorous_setter('download', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n    def add_downloads(self, *args: Any) -> None:\n        <IND>self._package.downloads.extend(_iter_unique(args, self._package.downloads))\n\n    <DED>def set_flags(self, mask: int, is_set: bool = True) -> None:\n        <IND>self._package.set_flag(mask, is_set)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>@_simple_setter('summary', str, nzs.strip)\n    def set_summary(self, summary: str) -> None:\n        <IND>self._package.summary = summary\n\n    <DED>@_omnivorous_setter('maintainer', str, nzs.strip, nzs.forbid_newlines, nzs.tolower)\n    def add_maintainers(self, *args: Any) -> None:\n        <IND>_extend_unique(self._package.maintainers, args)\n\n    <DED>@_omnivorous_setter('category', str, nzs.strip, nzs.forbid_newlines)\n    def add_categories(self, *args: Any) -> None:\n        <IND>_extend_unique(self._package.categories, args)\n\n    <DED>@_omnivorous_setter('homepage', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n    def add_homepages(self, *args: Any) -> None:\n        <IND>_extend_unique(self._package.homepages, args)\n\n    <DED>@_omnivorous_setter('license', str, nzs.strip, nzs.forbid_newlines)\n    def add_licenses(self, *args: Any) -> None:\n        <IND>_extend_unique(self._package.licenses, args)\n\n    <DED>@_omnivorous_setter('download', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n    def add_downloads(self, *args: Any) -> None:\n        <IND>_extend_unique(self._package.downloads, args)\n\n    <DED>def set_flags(self, mask: int, is_set: bool = True) -> None:\n        <IND>if is_set:\n            <IND>self._package.flags |= mask\n        <DED>else:\n            <IND>self._package.flags &= ~mask\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def unwrap(self) -> Package:\n        return self._package\n\n",
        "source_code_len": 64,
        "target_code": "\n    def spawn(self, repo: str, family: str, subrepo: Optional[str] = None, shadow: bool = False, default_maintainer: Optional[str] = None) -> Package:\n        if self._package.name is None:\n            raise RuntimeError('Attempt to spawn Package with unset name')\n        if self._package.version is None:\n            raise RuntimeError('Attempt to spawn Package with unset version')\n\n        maintainers: List[str] = self._package.maintainers if self._package.maintainers else [default_maintainer] if default_maintainer else []\n\n        return Package(\n            repo=repo,\n            family=family,\n            subrepo=self._package.subrepo or subrepo,\n\n            name=self._package.name,\n            basename=self._package.basename,\n\n            version=self._package.version,\n            origversion=self._package.version,\n            rawversion=self._package.rawversion if self._package.rawversion is not None else self._package.version,\n\n            arch=self._package.arch,\n\n            maintainers=maintainers,\n            category=self._package.categories[0] if self._package.categories else None,  # XXX: convert to array\n            comment=self._package.summary,\n            homepage=self._package.homepages[0] if self._package.homepages else None,  # XXX: convert to array\n            licenses=self._package.licenses,\n            downloads=self._package.downloads,\n\n            flags=self._package.flags,\n            shadow=shadow,\n\n            extrafields=self._package.extrafields,\n        )\n\n",
        "target_code_len": 1515,
        "diff_format": "@@ -209,4 +279,36 @@\n \n-    def unwrap(self) -> Package:\n-        return self._package\n+    def spawn(self, repo: str, family: str, subrepo: Optional[str] = None, shadow: bool = False, default_maintainer: Optional[str] = None) -> Package:\n+        if self._package.name is None:\n+            raise RuntimeError('Attempt to spawn Package with unset name')\n+        if self._package.version is None:\n+            raise RuntimeError('Attempt to spawn Package with unset version')\n+\n+        maintainers: List[str] = self._package.maintainers if self._package.maintainers else [default_maintainer] if default_maintainer else []\n+\n+        return Package(\n+            repo=repo,\n+            family=family,\n+            subrepo=self._package.subrepo or subrepo,\n+\n+            name=self._package.name,\n+            basename=self._package.basename,\n+\n+            version=self._package.version,\n+            origversion=self._package.version,\n+            rawversion=self._package.rawversion if self._package.rawversion is not None else self._package.version,\n+\n+            arch=self._package.arch,\n+\n+            maintainers=maintainers,\n+            category=self._package.categories[0] if self._package.categories else None,  # XXX: convert to array\n+            comment=self._package.summary,\n+            homepage=self._package.homepages[0] if self._package.homepages else None,  # XXX: convert to array\n+            licenses=self._package.licenses,\n+            downloads=self._package.downloads,\n+\n+            flags=self._package.flags,\n+            shadow=shadow,\n+\n+            extrafields=self._package.extrafields,\n+        )\n \n",
        "source_code_with_indent": "\n    <DED>def unwrap(self) -> Package:\n        <IND>return self._package\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def spawn(self, repo: str, family: str, subrepo: Optional[str] = None, shadow: bool = False, default_maintainer: Optional[str] = None) -> Package:\n        <IND>if self._package.name is None:\n            <IND>raise RuntimeError('Attempt to spawn Package with unset name')\n        <DED>if self._package.version is None:\n            <IND>raise RuntimeError('Attempt to spawn Package with unset version')\n\n        <DED>maintainers: List[str] = self._package.maintainers if self._package.maintainers else [default_maintainer] if default_maintainer else []\n\n        return Package(\n            repo=repo,\n            family=family,\n            subrepo=self._package.subrepo or subrepo,\n\n            name=self._package.name,\n            basename=self._package.basename,\n\n            version=self._package.version,\n            origversion=self._package.version,\n            rawversion=self._package.rawversion if self._package.rawversion is not None else self._package.version,\n\n            arch=self._package.arch,\n\n            maintainers=maintainers,\n            category=self._package.categories[0] if self._package.categories else None,  # XXX: convert to array\n            comment=self._package.summary,\n            homepage=self._package.homepages[0] if self._package.homepages else None,  # XXX: convert to array\n            licenses=self._package.licenses,\n            downloads=self._package.downloads,\n\n            flags=self._package.flags,\n            shadow=shadow,\n\n            extrafields=self._package.extrafields,\n        )\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "repology/repology-updater",
    "commit": "9f67d556944fe256c990593f673713e299feaf8a",
    "filename": "repology/packagemaker/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/repology-repology-updater/repology/packagemaker/__init__.py",
    "file_hunks_size": 17,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "repology/packagemaker/__init__.py:176:37 Incompatible parameter type [6]: Expected `PackageMakerBase` for 1st positional only parameter to call `PackageMakerBase._simple_setter` but got `str`.",
    "message": " Expected `PackageMakerBase` for 1st positional only parameter to call `PackageMakerBase._simple_setter` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 176,
    "warning_line": "    @PackageMakerBase._simple_setter('summary', str, nzs.strip)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from functools import wraps\nfrom typing import Any, Callable, Iterable, Optional\n\nfrom repology.logger import Logger\nfrom repology.package import Package\nfrom repology.packagemaker import normalizers as nzs\n\n",
        "source_code_len": 208,
        "target_code": "from functools import wraps\nfrom typing import Any, Callable, Dict, Iterable, List, Optional, Type\n\nfrom repology.logger import Logger\nfrom repology.package import Package, PackageStatus\nfrom repology.packagemaker import normalizers as nzs\nfrom repology.packagemaker.normalizers import NormalizerFunction\n\n",
        "target_code_len": 306,
        "diff_format": "@@ -24,7 +22,8 @@\n from functools import wraps\n-from typing import Any, Callable, Iterable, Optional\n+from typing import Any, Callable, Dict, Iterable, List, Optional, Type\n \n from repology.logger import Logger\n-from repology.package import Package\n+from repology.package import Package, PackageStatus\n from repology.packagemaker import normalizers as nzs\n+from repology.packagemaker.normalizers import NormalizerFunction\n \n",
        "source_code_with_indent": "from functools import wraps\nfrom typing import Any, Callable, Iterable, Optional\n\nfrom repology.logger import Logger\nfrom repology.package import Package\nfrom repology.packagemaker import normalizers as nzs\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from functools import wraps\nfrom typing import Any, Callable, Dict, Iterable, List, Optional, Type\n\nfrom repology.logger import Logger\nfrom repology.package import Package, PackageStatus\nfrom repology.packagemaker import normalizers as nzs\nfrom repology.packagemaker.normalizers import NormalizerFunction\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _iter_unique(iterable, existing=None):\n    seen = set(existing) if existing else set()\n    for value in iterable:\n        if value not in seen:\n            seen.add(value)\n            yield value\n\n",
        "source_code_len": 202,
        "target_code": "\nclass PackageTemplate:\n    __slots__ = [\n        'subrepo',\n\n        'name',\n        'basename',\n\n        'version',\n        'origversion',\n        'rawversion',\n\n        'arch',\n        'summary',\n        'maintainers',\n        'categories',\n        'homepages',\n        'licenses',\n        'downloads',\n\n        'flags',\n\n        'extrafields',\n    ]\n\n    subrepo: Optional[str]\n\n    name: Optional[str]\n    basename: Optional[str]\n\n    version: Optional[str]\n    origversion: Optional[str]\n    rawversion: Optional[str]\n\n    arch: Optional[str]\n    summary: Optional[str]\n    maintainers: List[str]\n    categories: List[str]\n    homepages: List[str]\n    licenses: List[str]\n    downloads: List[str]\n\n    flags: int\n\n    extrafields: Dict[str, str]\n\n    def __init__(self) -> None:\n        self.subrepo = None\n\n        self.name = None\n        self.basename = None\n\n        self.version = None\n        self.origversion = None\n        self.rawversion = None\n\n        self.arch = None\n        self.summary = None\n        self.maintainers = []\n        self.categories = []\n        self.homepages = []\n        self.licenses = []\n        self.downloads = []\n\n        self.flags = 0\n\n        self.extrafields = {}\n\n",
        "target_code_len": 1212,
        "diff_format": "@@ -34,8 +33,68 @@\n \n-def _iter_unique(iterable, existing=None):\n-    seen = set(existing) if existing else set()\n-    for value in iterable:\n-        if value not in seen:\n-            seen.add(value)\n-            yield value\n+class PackageTemplate:\n+    __slots__ = [\n+        'subrepo',\n+\n+        'name',\n+        'basename',\n+\n+        'version',\n+        'origversion',\n+        'rawversion',\n+\n+        'arch',\n+        'summary',\n+        'maintainers',\n+        'categories',\n+        'homepages',\n+        'licenses',\n+        'downloads',\n+\n+        'flags',\n+\n+        'extrafields',\n+    ]\n+\n+    subrepo: Optional[str]\n+\n+    name: Optional[str]\n+    basename: Optional[str]\n+\n+    version: Optional[str]\n+    origversion: Optional[str]\n+    rawversion: Optional[str]\n+\n+    arch: Optional[str]\n+    summary: Optional[str]\n+    maintainers: List[str]\n+    categories: List[str]\n+    homepages: List[str]\n+    licenses: List[str]\n+    downloads: List[str]\n+\n+    flags: int\n+\n+    extrafields: Dict[str, str]\n+\n+    def __init__(self) -> None:\n+        self.subrepo = None\n+\n+        self.name = None\n+        self.basename = None\n+\n+        self.version = None\n+        self.origversion = None\n+        self.rawversion = None\n+\n+        self.arch = None\n+        self.summary = None\n+        self.maintainers = []\n+        self.categories = []\n+        self.homepages = []\n+        self.licenses = []\n+        self.downloads = []\n+\n+        self.flags = 0\n+\n+        self.extrafields = {}\n \n",
        "source_code_with_indent": "\ndef _iter_unique(iterable, existing=None):\n    <IND>seen = set(existing) if existing else set()\n    for value in iterable:\n        <IND>if value not in seen:\n            <IND>seen.add(value)\n            yield value\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nclass PackageTemplate:\n    <IND>__slots__ = [\n        'subrepo',\n\n        'name',\n        'basename',\n\n        'version',\n        'origversion',\n        'rawversion',\n\n        'arch',\n        'summary',\n        'maintainers',\n        'categories',\n        'homepages',\n        'licenses',\n        'downloads',\n\n        'flags',\n\n        'extrafields',\n    ]\n\n    subrepo: Optional[str]\n\n    name: Optional[str]\n    basename: Optional[str]\n\n    version: Optional[str]\n    origversion: Optional[str]\n    rawversion: Optional[str]\n\n    arch: Optional[str]\n    summary: Optional[str]\n    maintainers: List[str]\n    categories: List[str]\n    homepages: List[str]\n    licenses: List[str]\n    downloads: List[str]\n\n    flags: int\n\n    extrafields: Dict[str, str]\n\n    def __init__(self) -> None:\n        <IND>self.subrepo = None\n\n        self.name = None\n        self.basename = None\n\n        self.version = None\n        self.origversion = None\n        self.rawversion = None\n\n        self.arch = None\n        self.summary = None\n        self.maintainers = []\n        self.categories = []\n        self.homepages = []\n        self.licenses = []\n        self.downloads = []\n\n        self.flags = 0\n\n        self.extrafields = {}\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _omnivorous_setter(fieldname, want_type, *normalizers):  # noqa: N805\n        def inner(method):\n            @wraps(method)\n            def wrapper(self, *args):\n                values = self._normalize_args(args, fieldname, want_type, normalizers)\n                if values:\n                    return method(self, *values)\n            return wrapper\n        return inner\n\n    def _simple_setter(fieldname, want_type, *normalizers):  # noqa: N805\n        def inner(method):\n            @wraps(method)\n            def wrapper(self, arg, *other_args):\n                if arg is None:\n                    pass\n                elif isinstance(arg, str) and want_type is int or isinstance(arg, int) and want_type is str:\n                    arg = want_type(arg)\n                elif not isinstance(arg, want_type):\n                    raise RuntimeError('unexpected type {} for {} (expected {})'.format(arg.__class__.__name__, fieldname, want_type.__name__))\n                value = self._apply_normalizers(arg, fieldname, normalizers)\n                if value:\n                    return method(self, value, *other_args)\n            return wrapper\n        return inner\n\n",
        "source_code_len": 1176,
        "target_code": "\n\ndef _omnivorous_setter(fieldname: str, want_type: Type[Any], *normalizers: NormalizerFunction) -> Callable[[Callable[..., Any]], Any]:\n    def inner(method: Callable[..., Any]) -> Callable[..., Any]:\n        @wraps(method)\n        def wrapper(self: PackageMakerBase, *args: Any) -> Any:\n            values = self._normalize_args(args, fieldname, want_type, normalizers)\n            if values:\n                return method(self, *values)\n        return wrapper\n    return inner\n\n\ndef _simple_setter(fieldname: str, want_type: Type[Any], *normalizers: NormalizerFunction) -> Callable[[Callable[..., Any]], Any]:\n    def inner(method: Callable[..., Any]) -> Callable[..., Any]:\n        @wraps(method)\n        def wrapper(self: PackageMakerBase, arg: Any, *other_args: Any) -> Any:\n            if arg is None:\n                pass\n            elif isinstance(arg, str) and want_type is int or isinstance(arg, int) and want_type is str:\n                arg = want_type(arg)\n            elif not isinstance(arg, want_type):\n                raise RuntimeError('unexpected type {} for {} (expected {})'.format(arg.__class__.__name__, fieldname, want_type.__name__))\n            value = self._apply_normalizers(arg, fieldname, normalizers)\n            if value:\n                return method(self, value, *other_args)\n        return wrapper\n    return inner\n\n\ndef _extend_unique(existing: List[str], iterable: Iterable[str]) -> None:\n    seen = set(existing) if existing else set()\n\n    for value in iterable:\n        if value not in seen:\n            seen.add(value)\n            existing.append(value)\n\n",
        "target_code_len": 1598,
        "diff_format": "@@ -92,27 +151,38 @@\n \n-    def _omnivorous_setter(fieldname, want_type, *normalizers):  # noqa: N805\n-        def inner(method):\n-            @wraps(method)\n-            def wrapper(self, *args):\n-                values = self._normalize_args(args, fieldname, want_type, normalizers)\n-                if values:\n-                    return method(self, *values)\n-            return wrapper\n-        return inner\n-\n-    def _simple_setter(fieldname, want_type, *normalizers):  # noqa: N805\n-        def inner(method):\n-            @wraps(method)\n-            def wrapper(self, arg, *other_args):\n-                if arg is None:\n-                    pass\n-                elif isinstance(arg, str) and want_type is int or isinstance(arg, int) and want_type is str:\n-                    arg = want_type(arg)\n-                elif not isinstance(arg, want_type):\n-                    raise RuntimeError('unexpected type {} for {} (expected {})'.format(arg.__class__.__name__, fieldname, want_type.__name__))\n-                value = self._apply_normalizers(arg, fieldname, normalizers)\n-                if value:\n-                    return method(self, value, *other_args)\n-            return wrapper\n-        return inner\n+\n+def _omnivorous_setter(fieldname: str, want_type: Type[Any], *normalizers: NormalizerFunction) -> Callable[[Callable[..., Any]], Any]:\n+    def inner(method: Callable[..., Any]) -> Callable[..., Any]:\n+        @wraps(method)\n+        def wrapper(self: PackageMakerBase, *args: Any) -> Any:\n+            values = self._normalize_args(args, fieldname, want_type, normalizers)\n+            if values:\n+                return method(self, *values)\n+        return wrapper\n+    return inner\n+\n+\n+def _simple_setter(fieldname: str, want_type: Type[Any], *normalizers: NormalizerFunction) -> Callable[[Callable[..., Any]], Any]:\n+    def inner(method: Callable[..., Any]) -> Callable[..., Any]:\n+        @wraps(method)\n+        def wrapper(self: PackageMakerBase, arg: Any, *other_args: Any) -> Any:\n+            if arg is None:\n+                pass\n+            elif isinstance(arg, str) and want_type is int or isinstance(arg, int) and want_type is str:\n+                arg = want_type(arg)\n+            elif not isinstance(arg, want_type):\n+                raise RuntimeError('unexpected type {} for {} (expected {})'.format(arg.__class__.__name__, fieldname, want_type.__name__))\n+            value = self._apply_normalizers(arg, fieldname, normalizers)\n+            if value:\n+                return method(self, value, *other_args)\n+        return wrapper\n+    return inner\n+\n+\n+def _extend_unique(existing: List[str], iterable: Iterable[str]) -> None:\n+    seen = set(existing) if existing else set()\n+\n+    for value in iterable:\n+        if value not in seen:\n+            seen.add(value)\n+            existing.append(value)\n \n",
        "source_code_with_indent": "\n    <DED>def _omnivorous_setter(fieldname, want_type, *normalizers):  # noqa: N805\n        <IND>def inner(method):\n            <IND>@wraps(method)\n            def wrapper(self, *args):\n                <IND>values = self._normalize_args(args, fieldname, want_type, normalizers)\n                if values:\n                    <IND>return method(self, *values)\n            <DED><DED>return wrapper\n        <DED>return inner\n\n    <DED>def _simple_setter(fieldname, want_type, *normalizers):  # noqa: N805\n        <IND>def inner(method):\n            <IND>@wraps(method)\n            def wrapper(self, arg, *other_args):\n                <IND>if arg is None:\n                    <IND>pass\n                <DED>elif isinstance(arg, str) and want_type is int or isinstance(arg, int) and want_type is str:\n                    <IND>arg = want_type(arg)\n                <DED>elif not isinstance(arg, want_type):\n                    <IND>raise RuntimeError('unexpected type {} for {} (expected {})'.format(arg.__class__.__name__, fieldname, want_type.__name__))\n                <DED>value = self._apply_normalizers(arg, fieldname, normalizers)\n                if value:\n                    <IND>return method(self, value, *other_args)\n            <DED><DED>return wrapper\n        <DED>return inner\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n\n<DED><DED>def _omnivorous_setter(fieldname: str, want_type: Type[Any], *normalizers: NormalizerFunction) -> Callable[[Callable[..., Any]], Any]:\n    <IND>def inner(method: Callable[..., Any]) -> Callable[..., Any]:\n        <IND>@wraps(method)\n        def wrapper(self: PackageMakerBase, *args: Any) -> Any:\n            <IND>values = self._normalize_args(args, fieldname, want_type, normalizers)\n            if values:\n                <IND>return method(self, *values)\n        <DED><DED>return wrapper\n    <DED>return inner\n\n\n<DED>def _simple_setter(fieldname: str, want_type: Type[Any], *normalizers: NormalizerFunction) -> Callable[[Callable[..., Any]], Any]:\n    <IND>def inner(method: Callable[..., Any]) -> Callable[..., Any]:\n        <IND>@wraps(method)\n        def wrapper(self: PackageMakerBase, arg: Any, *other_args: Any) -> Any:\n            <IND>if arg is None:\n                <IND>pass\n            <DED>elif isinstance(arg, str) and want_type is int or isinstance(arg, int) and want_type is str:\n                <IND>arg = want_type(arg)\n            <DED>elif not isinstance(arg, want_type):\n                <IND>raise RuntimeError('unexpected type {} for {} (expected {})'.format(arg.__class__.__name__, fieldname, want_type.__name__))\n            <DED>value = self._apply_normalizers(arg, fieldname, normalizers)\n            if value:\n                <IND>return method(self, value, *other_args)\n        <DED><DED>return wrapper\n    <DED>return inner\n\n\n<DED>def _extend_unique(existing: List[str], iterable: Iterable[str]) -> None:\n    <IND>seen = set(existing) if existing else set()\n\n    for value in iterable:\n        <IND>if value not in seen:\n            <IND>seen.add(value)\n            existing.append(value)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "class PackageMaker(PackageMakerBase):\n    _package: Package\n    _ident: Optional[str]\n",
        "source_code_len": 86,
        "target_code": "class PackageMaker(PackageMakerBase):\n    _package: PackageTemplate\n    _ident: Optional[str]\n",
        "target_code_len": 94,
        "diff_format": "@@ -120,3 +190,3 @@\n class PackageMaker(PackageMakerBase):\n-    _package: Package\n+    _package: PackageTemplate\n     _ident: Optional[str]\n",
        "source_code_with_indent": "<DED><DED>class PackageMaker(PackageMakerBase):\n    <IND>_package: Package\n    _ident: Optional[str]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED><DED><DED>class PackageMaker(PackageMakerBase):\n    <IND>_package: PackageTemplate\n    _ident: Optional[str]\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        super(PackageMaker, self).__init__(logger)\n        self._package = Package()\n        self._ident = ident\n",
        "source_code_len": 113,
        "target_code": "        super(PackageMaker, self).__init__(logger)\n        self._package = PackageTemplate()\n        self._ident = ident\n",
        "target_code_len": 121,
        "diff_format": "@@ -127,3 +197,3 @@\n         super(PackageMaker, self).__init__(logger)\n-        self._package = Package()\n+        self._package = PackageTemplate()\n         self._ident = ident\n",
        "source_code_with_indent": "        <IND>super(PackageMaker, self).__init__(logger)\n        self._package = Package()\n        self._ident = ident\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>super(PackageMaker, self).__init__(logger)\n        self._package = PackageTemplate()\n        self._ident = ident\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    @PackageMakerBase._simple_setter('origin', str, nzs.strip, nzs.forbid_newlines)\n    def set_origin(self, origin: str) -> None:\n",
        "source_code_len": 132,
        "target_code": "\n    @_simple_setter('origin', str, nzs.strip, nzs.forbid_newlines)\n    def set_origin(self, origin: str) -> None:\n",
        "target_code_len": 115,
        "diff_format": "@@ -135,3 +205,3 @@\n \n-    @PackageMakerBase._simple_setter('origin', str, nzs.strip, nzs.forbid_newlines)\n+    @_simple_setter('origin', str, nzs.strip, nzs.forbid_newlines)\n     def set_origin(self, origin: str) -> None:\n",
        "source_code_with_indent": "\n    <DED>@PackageMakerBase._simple_setter('origin', str, nzs.strip, nzs.forbid_newlines)\n    def set_origin(self, origin: str) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>@_simple_setter('origin', str, nzs.strip, nzs.forbid_newlines)\n    def set_origin(self, origin: str) -> None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    @PackageMakerBase._simple_setter('name', str, nzs.strip, nzs.forbid_newlines)\n    def set_name(self, name: str) -> None:\n",
        "source_code_len": 126,
        "target_code": "\n    @_simple_setter('name', str, nzs.strip, nzs.forbid_newlines)\n    def set_name(self, name: str) -> None:\n",
        "target_code_len": 109,
        "diff_format": "@@ -140,3 +210,3 @@\n \n-    @PackageMakerBase._simple_setter('name', str, nzs.strip, nzs.forbid_newlines)\n+    @_simple_setter('name', str, nzs.strip, nzs.forbid_newlines)\n     def set_name(self, name: str) -> None:\n",
        "source_code_with_indent": "\n    <DED>@PackageMakerBase._simple_setter('name', str, nzs.strip, nzs.forbid_newlines)\n    def set_name(self, name: str) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>@_simple_setter('name', str, nzs.strip, nzs.forbid_newlines)\n    def set_name(self, name: str) -> None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    @PackageMakerBase._simple_setter('basename', str, nzs.strip, nzs.forbid_newlines)\n    def set_basename(self, basename: str) -> None:\n",
        "source_code_len": 138,
        "target_code": "\n    @_simple_setter('basename', str, nzs.strip, nzs.forbid_newlines)\n    def set_basename(self, basename: str) -> None:\n",
        "target_code_len": 121,
        "diff_format": "@@ -144,3 +214,3 @@\n \n-    @PackageMakerBase._simple_setter('basename', str, nzs.strip, nzs.forbid_newlines)\n+    @_simple_setter('basename', str, nzs.strip, nzs.forbid_newlines)\n     def set_basename(self, basename: str) -> None:\n",
        "source_code_with_indent": "\n    <DED>@PackageMakerBase._simple_setter('basename', str, nzs.strip, nzs.forbid_newlines)\n    def set_basename(self, basename: str) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>@_simple_setter('basename', str, nzs.strip, nzs.forbid_newlines)\n    def set_basename(self, basename: str) -> None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def prefix_name(self, prefix: str) -> None:\n        self._package.name = prefix + self._package.name\n\n    @PackageMakerBase._simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n    def set_version(self, version: str, version_normalizer: Optional[Callable[[str], str]] = None) -> None:\n",
        "source_code_len": 299,
        "target_code": "    def prefix_name(self, prefix: str) -> None:\n        assert(self._package.name)\n        self._package.name = prefix + self._package.name\n\n    @_simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n    def set_version(self, version: str, version_normalizer: Optional[Callable[[str], str]] = None) -> None:\n",
        "target_code_len": 317,
        "diff_format": "@@ -149,5 +219,6 @@\n     def prefix_name(self, prefix: str) -> None:\n+        assert(self._package.name)\n         self._package.name = prefix + self._package.name\n \n-    @PackageMakerBase._simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n+    @_simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n     def set_version(self, version: str, version_normalizer: Optional[Callable[[str], str]] = None) -> None:\n",
        "source_code_with_indent": "    <DED>def prefix_name(self, prefix: str) -> None:\n        <IND>self._package.name = prefix + self._package.name\n\n    <DED>@PackageMakerBase._simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n    def set_version(self, version: str, version_normalizer: Optional[Callable[[str], str]] = None) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def prefix_name(self, prefix: str) -> None:\n        <IND>assert(self._package.name)\n        self._package.name = prefix + self._package.name\n\n    <DED>@_simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n    def set_version(self, version: str, version_normalizer: Optional[Callable[[str], str]] = None) -> None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    @PackageMakerBase._simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n    def set_rawversion(self, rawversion: str) -> None:\n",
        "source_code_len": 141,
        "target_code": "\n    @_simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n    def set_rawversion(self, rawversion: str) -> None:\n",
        "target_code_len": 124,
        "diff_format": "@@ -157,3 +228,3 @@\n \n-    @PackageMakerBase._simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n+    @_simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n     def set_rawversion(self, rawversion: str) -> None:\n",
        "source_code_with_indent": "\n    <DED>@PackageMakerBase._simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n    def set_rawversion(self, rawversion: str) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>@_simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n    def set_rawversion(self, rawversion: str) -> None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    @PackageMakerBase._simple_setter('arch', str, nzs.strip, nzs.forbid_newlines)\n    def set_arch(self, arch: str) -> None:\n",
        "source_code_len": 126,
        "target_code": "\n    @_simple_setter('arch', str, nzs.strip, nzs.forbid_newlines)\n    def set_arch(self, arch: str) -> None:\n",
        "target_code_len": 109,
        "diff_format": "@@ -167,3 +238,3 @@\n \n-    @PackageMakerBase._simple_setter('arch', str, nzs.strip, nzs.forbid_newlines)\n+    @_simple_setter('arch', str, nzs.strip, nzs.forbid_newlines)\n     def set_arch(self, arch: str) -> None:\n",
        "source_code_with_indent": "\n    <DED>@PackageMakerBase._simple_setter('arch', str, nzs.strip, nzs.forbid_newlines)\n    def set_arch(self, arch: str) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>@_simple_setter('arch', str, nzs.strip, nzs.forbid_newlines)\n    def set_arch(self, arch: str) -> None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    @PackageMakerBase._simple_setter('subrepo', str, nzs.strip, nzs.forbid_newlines)\n    def set_subrepo(self, subrepo: str) -> None:\n",
        "source_code_len": 135,
        "target_code": "\n    @_simple_setter('subrepo', str, nzs.strip, nzs.forbid_newlines)\n    def set_subrepo(self, subrepo: str) -> None:\n",
        "target_code_len": 118,
        "diff_format": "@@ -171,3 +242,3 @@\n \n-    @PackageMakerBase._simple_setter('subrepo', str, nzs.strip, nzs.forbid_newlines)\n+    @_simple_setter('subrepo', str, nzs.strip, nzs.forbid_newlines)\n     def set_subrepo(self, subrepo: str) -> None:\n",
        "source_code_with_indent": "\n    <DED>@PackageMakerBase._simple_setter('subrepo', str, nzs.strip, nzs.forbid_newlines)\n    def set_subrepo(self, subrepo: str) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>@_simple_setter('subrepo', str, nzs.strip, nzs.forbid_newlines)\n    def set_subrepo(self, subrepo: str) -> None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    @PackageMakerBase._simple_setter('summary', str, nzs.strip)\n    def set_summary(self, summary: str) -> None:\n        self._package.comment = summary\n\n    @PackageMakerBase._omnivorous_setter('maintainer', str, nzs.strip, nzs.forbid_newlines, nzs.tolower)\n    def add_maintainers(self, *args: Any) -> None:\n        self._package.maintainers.extend(_iter_unique(args, self._package.maintainers))\n\n    @PackageMakerBase._omnivorous_setter('category', str, nzs.strip, nzs.forbid_newlines)\n    def add_categories(self, *args: Any) -> None:\n        # XXX: convert into array\n        if not self._package.category:\n            self._package.category = args[0]\n\n    @PackageMakerBase._omnivorous_setter('homepage', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n    def add_homepages(self, *args: Any) -> None:\n        # XXX: convert into array\n        if not self._package.homepage:\n            self._package.homepage = args[0]\n\n    @PackageMakerBase._omnivorous_setter('license', str, nzs.strip, nzs.forbid_newlines)\n    def add_licenses(self, *args: Any) -> None:\n        self._package.licenses.extend(args)\n\n    @PackageMakerBase._omnivorous_setter('download', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n    def add_downloads(self, *args: Any) -> None:\n        self._package.downloads.extend(_iter_unique(args, self._package.downloads))\n\n    def set_flags(self, mask: int, is_set: bool = True) -> None:\n        self._package.set_flag(mask, is_set)\n\n",
        "source_code_len": 1494,
        "target_code": "\n    @_simple_setter('summary', str, nzs.strip)\n    def set_summary(self, summary: str) -> None:\n        self._package.summary = summary\n\n    @_omnivorous_setter('maintainer', str, nzs.strip, nzs.forbid_newlines, nzs.tolower)\n    def add_maintainers(self, *args: Any) -> None:\n        _extend_unique(self._package.maintainers, args)\n\n    @_omnivorous_setter('category', str, nzs.strip, nzs.forbid_newlines)\n    def add_categories(self, *args: Any) -> None:\n        _extend_unique(self._package.categories, args)\n\n    @_omnivorous_setter('homepage', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n    def add_homepages(self, *args: Any) -> None:\n        _extend_unique(self._package.homepages, args)\n\n    @_omnivorous_setter('license', str, nzs.strip, nzs.forbid_newlines)\n    def add_licenses(self, *args: Any) -> None:\n        _extend_unique(self._package.licenses, args)\n\n    @_omnivorous_setter('download', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n    def add_downloads(self, *args: Any) -> None:\n        _extend_unique(self._package.downloads, args)\n\n    def set_flags(self, mask: int, is_set: bool = True) -> None:\n        if is_set:\n            self._package.flags |= mask\n        else:\n            self._package.flags &= ~mask\n\n",
        "target_code_len": 1281,
        "diff_format": "@@ -175,32 +246,31 @@\n \n-    @PackageMakerBase._simple_setter('summary', str, nzs.strip)\n+    @_simple_setter('summary', str, nzs.strip)\n     def set_summary(self, summary: str) -> None:\n-        self._package.comment = summary\n-\n-    @PackageMakerBase._omnivorous_setter('maintainer', str, nzs.strip, nzs.forbid_newlines, nzs.tolower)\n+        self._package.summary = summary\n+\n+    @_omnivorous_setter('maintainer', str, nzs.strip, nzs.forbid_newlines, nzs.tolower)\n     def add_maintainers(self, *args: Any) -> None:\n-        self._package.maintainers.extend(_iter_unique(args, self._package.maintainers))\n-\n-    @PackageMakerBase._omnivorous_setter('category', str, nzs.strip, nzs.forbid_newlines)\n+        _extend_unique(self._package.maintainers, args)\n+\n+    @_omnivorous_setter('category', str, nzs.strip, nzs.forbid_newlines)\n     def add_categories(self, *args: Any) -> None:\n-        # XXX: convert into array\n-        if not self._package.category:\n-            self._package.category = args[0]\n-\n-    @PackageMakerBase._omnivorous_setter('homepage', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n+        _extend_unique(self._package.categories, args)\n+\n+    @_omnivorous_setter('homepage', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n     def add_homepages(self, *args: Any) -> None:\n-        # XXX: convert into array\n-        if not self._package.homepage:\n-            self._package.homepage = args[0]\n-\n-    @PackageMakerBase._omnivorous_setter('license', str, nzs.strip, nzs.forbid_newlines)\n+        _extend_unique(self._package.homepages, args)\n+\n+    @_omnivorous_setter('license', str, nzs.strip, nzs.forbid_newlines)\n     def add_licenses(self, *args: Any) -> None:\n-        self._package.licenses.extend(args)\n-\n-    @PackageMakerBase._omnivorous_setter('download', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n+        _extend_unique(self._package.licenses, args)\n+\n+    @_omnivorous_setter('download', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n     def add_downloads(self, *args: Any) -> None:\n-        self._package.downloads.extend(_iter_unique(args, self._package.downloads))\n+        _extend_unique(self._package.downloads, args)\n \n     def set_flags(self, mask: int, is_set: bool = True) -> None:\n-        self._package.set_flag(mask, is_set)\n+        if is_set:\n+            self._package.flags |= mask\n+        else:\n+            self._package.flags &= ~mask\n \n",
        "source_code_with_indent": "\n    <DED>@PackageMakerBase._simple_setter('summary', str, nzs.strip)\n    def set_summary(self, summary: str) -> None:\n        <IND>self._package.comment = summary\n\n    <DED>@PackageMakerBase._omnivorous_setter('maintainer', str, nzs.strip, nzs.forbid_newlines, nzs.tolower)\n    def add_maintainers(self, *args: Any) -> None:\n        <IND>self._package.maintainers.extend(_iter_unique(args, self._package.maintainers))\n\n    <DED>@PackageMakerBase._omnivorous_setter('category', str, nzs.strip, nzs.forbid_newlines)\n    def add_categories(self, *args: Any) -> None:\n        # XXX: convert into array\n        <IND>if not self._package.category:\n            <IND>self._package.category = args[0]\n\n    <DED><DED>@PackageMakerBase._omnivorous_setter('homepage', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n    def add_homepages(self, *args: Any) -> None:\n        # XXX: convert into array\n        <IND>if not self._package.homepage:\n            <IND>self._package.homepage = args[0]\n\n    <DED><DED>@PackageMakerBase._omnivorous_setter('license', str, nzs.strip, nzs.forbid_newlines)\n    def add_licenses(self, *args: Any) -> None:\n        <IND>self._package.licenses.extend(args)\n\n    <DED>@PackageMakerBase._omnivorous_setter('download', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n    def add_downloads(self, *args: Any) -> None:\n        <IND>self._package.downloads.extend(_iter_unique(args, self._package.downloads))\n\n    <DED>def set_flags(self, mask: int, is_set: bool = True) -> None:\n        <IND>self._package.set_flag(mask, is_set)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>@_simple_setter('summary', str, nzs.strip)\n    def set_summary(self, summary: str) -> None:\n        <IND>self._package.summary = summary\n\n    <DED>@_omnivorous_setter('maintainer', str, nzs.strip, nzs.forbid_newlines, nzs.tolower)\n    def add_maintainers(self, *args: Any) -> None:\n        <IND>_extend_unique(self._package.maintainers, args)\n\n    <DED>@_omnivorous_setter('category', str, nzs.strip, nzs.forbid_newlines)\n    def add_categories(self, *args: Any) -> None:\n        <IND>_extend_unique(self._package.categories, args)\n\n    <DED>@_omnivorous_setter('homepage', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n    def add_homepages(self, *args: Any) -> None:\n        <IND>_extend_unique(self._package.homepages, args)\n\n    <DED>@_omnivorous_setter('license', str, nzs.strip, nzs.forbid_newlines)\n    def add_licenses(self, *args: Any) -> None:\n        <IND>_extend_unique(self._package.licenses, args)\n\n    <DED>@_omnivorous_setter('download', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n    def add_downloads(self, *args: Any) -> None:\n        <IND>_extend_unique(self._package.downloads, args)\n\n    <DED>def set_flags(self, mask: int, is_set: bool = True) -> None:\n        <IND>if is_set:\n            <IND>self._package.flags |= mask\n        <DED>else:\n            <IND>self._package.flags &= ~mask\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def unwrap(self) -> Package:\n        return self._package\n\n",
        "source_code_len": 64,
        "target_code": "\n    def spawn(self, repo: str, family: str, subrepo: Optional[str] = None, shadow: bool = False, default_maintainer: Optional[str] = None) -> Package:\n        if self._package.name is None:\n            raise RuntimeError('Attempt to spawn Package with unset name')\n        if self._package.version is None:\n            raise RuntimeError('Attempt to spawn Package with unset version')\n\n        maintainers: List[str] = self._package.maintainers if self._package.maintainers else [default_maintainer] if default_maintainer else []\n\n        return Package(\n            repo=repo,\n            family=family,\n            subrepo=self._package.subrepo or subrepo,\n\n            name=self._package.name,\n            basename=self._package.basename,\n\n            version=self._package.version,\n            origversion=self._package.version,\n            rawversion=self._package.rawversion if self._package.rawversion is not None else self._package.version,\n\n            arch=self._package.arch,\n\n            maintainers=maintainers,\n            category=self._package.categories[0] if self._package.categories else None,  # XXX: convert to array\n            comment=self._package.summary,\n            homepage=self._package.homepages[0] if self._package.homepages else None,  # XXX: convert to array\n            licenses=self._package.licenses,\n            downloads=self._package.downloads,\n\n            flags=self._package.flags,\n            shadow=shadow,\n\n            extrafields=self._package.extrafields,\n        )\n\n",
        "target_code_len": 1515,
        "diff_format": "@@ -209,4 +279,36 @@\n \n-    def unwrap(self) -> Package:\n-        return self._package\n+    def spawn(self, repo: str, family: str, subrepo: Optional[str] = None, shadow: bool = False, default_maintainer: Optional[str] = None) -> Package:\n+        if self._package.name is None:\n+            raise RuntimeError('Attempt to spawn Package with unset name')\n+        if self._package.version is None:\n+            raise RuntimeError('Attempt to spawn Package with unset version')\n+\n+        maintainers: List[str] = self._package.maintainers if self._package.maintainers else [default_maintainer] if default_maintainer else []\n+\n+        return Package(\n+            repo=repo,\n+            family=family,\n+            subrepo=self._package.subrepo or subrepo,\n+\n+            name=self._package.name,\n+            basename=self._package.basename,\n+\n+            version=self._package.version,\n+            origversion=self._package.version,\n+            rawversion=self._package.rawversion if self._package.rawversion is not None else self._package.version,\n+\n+            arch=self._package.arch,\n+\n+            maintainers=maintainers,\n+            category=self._package.categories[0] if self._package.categories else None,  # XXX: convert to array\n+            comment=self._package.summary,\n+            homepage=self._package.homepages[0] if self._package.homepages else None,  # XXX: convert to array\n+            licenses=self._package.licenses,\n+            downloads=self._package.downloads,\n+\n+            flags=self._package.flags,\n+            shadow=shadow,\n+\n+            extrafields=self._package.extrafields,\n+        )\n \n",
        "source_code_with_indent": "\n    <DED>def unwrap(self) -> Package:\n        <IND>return self._package\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def spawn(self, repo: str, family: str, subrepo: Optional[str] = None, shadow: bool = False, default_maintainer: Optional[str] = None) -> Package:\n        <IND>if self._package.name is None:\n            <IND>raise RuntimeError('Attempt to spawn Package with unset name')\n        <DED>if self._package.version is None:\n            <IND>raise RuntimeError('Attempt to spawn Package with unset version')\n\n        <DED>maintainers: List[str] = self._package.maintainers if self._package.maintainers else [default_maintainer] if default_maintainer else []\n\n        return Package(\n            repo=repo,\n            family=family,\n            subrepo=self._package.subrepo or subrepo,\n\n            name=self._package.name,\n            basename=self._package.basename,\n\n            version=self._package.version,\n            origversion=self._package.version,\n            rawversion=self._package.rawversion if self._package.rawversion is not None else self._package.version,\n\n            arch=self._package.arch,\n\n            maintainers=maintainers,\n            category=self._package.categories[0] if self._package.categories else None,  # XXX: convert to array\n            comment=self._package.summary,\n            homepage=self._package.homepages[0] if self._package.homepages else None,  # XXX: convert to array\n            licenses=self._package.licenses,\n            downloads=self._package.downloads,\n\n            flags=self._package.flags,\n            shadow=shadow,\n\n            extrafields=self._package.extrafields,\n        )\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "repology/repology-updater",
    "commit": "9f67d556944fe256c990593f673713e299feaf8a",
    "filename": "repology/packagemaker/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/repology-repology-updater/repology/packagemaker/__init__.py",
    "file_hunks_size": 17,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "repology/packagemaker/__init__.py:180:41 Incompatible parameter type [6]: Expected `PackageMakerBase` for 1st positional only parameter to call `PackageMakerBase._omnivorous_setter` but got `str`.",
    "message": " Expected `PackageMakerBase` for 1st positional only parameter to call `PackageMakerBase._omnivorous_setter` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 180,
    "warning_line": "    @PackageMakerBase._omnivorous_setter('maintainer', str, nzs.strip, nzs.forbid_newlines, nzs.tolower)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from functools import wraps\nfrom typing import Any, Callable, Iterable, Optional\n\nfrom repology.logger import Logger\nfrom repology.package import Package\nfrom repology.packagemaker import normalizers as nzs\n\n",
        "source_code_len": 208,
        "target_code": "from functools import wraps\nfrom typing import Any, Callable, Dict, Iterable, List, Optional, Type\n\nfrom repology.logger import Logger\nfrom repology.package import Package, PackageStatus\nfrom repology.packagemaker import normalizers as nzs\nfrom repology.packagemaker.normalizers import NormalizerFunction\n\n",
        "target_code_len": 306,
        "diff_format": "@@ -24,7 +22,8 @@\n from functools import wraps\n-from typing import Any, Callable, Iterable, Optional\n+from typing import Any, Callable, Dict, Iterable, List, Optional, Type\n \n from repology.logger import Logger\n-from repology.package import Package\n+from repology.package import Package, PackageStatus\n from repology.packagemaker import normalizers as nzs\n+from repology.packagemaker.normalizers import NormalizerFunction\n \n",
        "source_code_with_indent": "from functools import wraps\nfrom typing import Any, Callable, Iterable, Optional\n\nfrom repology.logger import Logger\nfrom repology.package import Package\nfrom repology.packagemaker import normalizers as nzs\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from functools import wraps\nfrom typing import Any, Callable, Dict, Iterable, List, Optional, Type\n\nfrom repology.logger import Logger\nfrom repology.package import Package, PackageStatus\nfrom repology.packagemaker import normalizers as nzs\nfrom repology.packagemaker.normalizers import NormalizerFunction\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _iter_unique(iterable, existing=None):\n    seen = set(existing) if existing else set()\n    for value in iterable:\n        if value not in seen:\n            seen.add(value)\n            yield value\n\n",
        "source_code_len": 202,
        "target_code": "\nclass PackageTemplate:\n    __slots__ = [\n        'subrepo',\n\n        'name',\n        'basename',\n\n        'version',\n        'origversion',\n        'rawversion',\n\n        'arch',\n        'summary',\n        'maintainers',\n        'categories',\n        'homepages',\n        'licenses',\n        'downloads',\n\n        'flags',\n\n        'extrafields',\n    ]\n\n    subrepo: Optional[str]\n\n    name: Optional[str]\n    basename: Optional[str]\n\n    version: Optional[str]\n    origversion: Optional[str]\n    rawversion: Optional[str]\n\n    arch: Optional[str]\n    summary: Optional[str]\n    maintainers: List[str]\n    categories: List[str]\n    homepages: List[str]\n    licenses: List[str]\n    downloads: List[str]\n\n    flags: int\n\n    extrafields: Dict[str, str]\n\n    def __init__(self) -> None:\n        self.subrepo = None\n\n        self.name = None\n        self.basename = None\n\n        self.version = None\n        self.origversion = None\n        self.rawversion = None\n\n        self.arch = None\n        self.summary = None\n        self.maintainers = []\n        self.categories = []\n        self.homepages = []\n        self.licenses = []\n        self.downloads = []\n\n        self.flags = 0\n\n        self.extrafields = {}\n\n",
        "target_code_len": 1212,
        "diff_format": "@@ -34,8 +33,68 @@\n \n-def _iter_unique(iterable, existing=None):\n-    seen = set(existing) if existing else set()\n-    for value in iterable:\n-        if value not in seen:\n-            seen.add(value)\n-            yield value\n+class PackageTemplate:\n+    __slots__ = [\n+        'subrepo',\n+\n+        'name',\n+        'basename',\n+\n+        'version',\n+        'origversion',\n+        'rawversion',\n+\n+        'arch',\n+        'summary',\n+        'maintainers',\n+        'categories',\n+        'homepages',\n+        'licenses',\n+        'downloads',\n+\n+        'flags',\n+\n+        'extrafields',\n+    ]\n+\n+    subrepo: Optional[str]\n+\n+    name: Optional[str]\n+    basename: Optional[str]\n+\n+    version: Optional[str]\n+    origversion: Optional[str]\n+    rawversion: Optional[str]\n+\n+    arch: Optional[str]\n+    summary: Optional[str]\n+    maintainers: List[str]\n+    categories: List[str]\n+    homepages: List[str]\n+    licenses: List[str]\n+    downloads: List[str]\n+\n+    flags: int\n+\n+    extrafields: Dict[str, str]\n+\n+    def __init__(self) -> None:\n+        self.subrepo = None\n+\n+        self.name = None\n+        self.basename = None\n+\n+        self.version = None\n+        self.origversion = None\n+        self.rawversion = None\n+\n+        self.arch = None\n+        self.summary = None\n+        self.maintainers = []\n+        self.categories = []\n+        self.homepages = []\n+        self.licenses = []\n+        self.downloads = []\n+\n+        self.flags = 0\n+\n+        self.extrafields = {}\n \n",
        "source_code_with_indent": "\ndef _iter_unique(iterable, existing=None):\n    <IND>seen = set(existing) if existing else set()\n    for value in iterable:\n        <IND>if value not in seen:\n            <IND>seen.add(value)\n            yield value\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nclass PackageTemplate:\n    <IND>__slots__ = [\n        'subrepo',\n\n        'name',\n        'basename',\n\n        'version',\n        'origversion',\n        'rawversion',\n\n        'arch',\n        'summary',\n        'maintainers',\n        'categories',\n        'homepages',\n        'licenses',\n        'downloads',\n\n        'flags',\n\n        'extrafields',\n    ]\n\n    subrepo: Optional[str]\n\n    name: Optional[str]\n    basename: Optional[str]\n\n    version: Optional[str]\n    origversion: Optional[str]\n    rawversion: Optional[str]\n\n    arch: Optional[str]\n    summary: Optional[str]\n    maintainers: List[str]\n    categories: List[str]\n    homepages: List[str]\n    licenses: List[str]\n    downloads: List[str]\n\n    flags: int\n\n    extrafields: Dict[str, str]\n\n    def __init__(self) -> None:\n        <IND>self.subrepo = None\n\n        self.name = None\n        self.basename = None\n\n        self.version = None\n        self.origversion = None\n        self.rawversion = None\n\n        self.arch = None\n        self.summary = None\n        self.maintainers = []\n        self.categories = []\n        self.homepages = []\n        self.licenses = []\n        self.downloads = []\n\n        self.flags = 0\n\n        self.extrafields = {}\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _omnivorous_setter(fieldname, want_type, *normalizers):  # noqa: N805\n        def inner(method):\n            @wraps(method)\n            def wrapper(self, *args):\n                values = self._normalize_args(args, fieldname, want_type, normalizers)\n                if values:\n                    return method(self, *values)\n            return wrapper\n        return inner\n\n    def _simple_setter(fieldname, want_type, *normalizers):  # noqa: N805\n        def inner(method):\n            @wraps(method)\n            def wrapper(self, arg, *other_args):\n                if arg is None:\n                    pass\n                elif isinstance(arg, str) and want_type is int or isinstance(arg, int) and want_type is str:\n                    arg = want_type(arg)\n                elif not isinstance(arg, want_type):\n                    raise RuntimeError('unexpected type {} for {} (expected {})'.format(arg.__class__.__name__, fieldname, want_type.__name__))\n                value = self._apply_normalizers(arg, fieldname, normalizers)\n                if value:\n                    return method(self, value, *other_args)\n            return wrapper\n        return inner\n\n",
        "source_code_len": 1176,
        "target_code": "\n\ndef _omnivorous_setter(fieldname: str, want_type: Type[Any], *normalizers: NormalizerFunction) -> Callable[[Callable[..., Any]], Any]:\n    def inner(method: Callable[..., Any]) -> Callable[..., Any]:\n        @wraps(method)\n        def wrapper(self: PackageMakerBase, *args: Any) -> Any:\n            values = self._normalize_args(args, fieldname, want_type, normalizers)\n            if values:\n                return method(self, *values)\n        return wrapper\n    return inner\n\n\ndef _simple_setter(fieldname: str, want_type: Type[Any], *normalizers: NormalizerFunction) -> Callable[[Callable[..., Any]], Any]:\n    def inner(method: Callable[..., Any]) -> Callable[..., Any]:\n        @wraps(method)\n        def wrapper(self: PackageMakerBase, arg: Any, *other_args: Any) -> Any:\n            if arg is None:\n                pass\n            elif isinstance(arg, str) and want_type is int or isinstance(arg, int) and want_type is str:\n                arg = want_type(arg)\n            elif not isinstance(arg, want_type):\n                raise RuntimeError('unexpected type {} for {} (expected {})'.format(arg.__class__.__name__, fieldname, want_type.__name__))\n            value = self._apply_normalizers(arg, fieldname, normalizers)\n            if value:\n                return method(self, value, *other_args)\n        return wrapper\n    return inner\n\n\ndef _extend_unique(existing: List[str], iterable: Iterable[str]) -> None:\n    seen = set(existing) if existing else set()\n\n    for value in iterable:\n        if value not in seen:\n            seen.add(value)\n            existing.append(value)\n\n",
        "target_code_len": 1598,
        "diff_format": "@@ -92,27 +151,38 @@\n \n-    def _omnivorous_setter(fieldname, want_type, *normalizers):  # noqa: N805\n-        def inner(method):\n-            @wraps(method)\n-            def wrapper(self, *args):\n-                values = self._normalize_args(args, fieldname, want_type, normalizers)\n-                if values:\n-                    return method(self, *values)\n-            return wrapper\n-        return inner\n-\n-    def _simple_setter(fieldname, want_type, *normalizers):  # noqa: N805\n-        def inner(method):\n-            @wraps(method)\n-            def wrapper(self, arg, *other_args):\n-                if arg is None:\n-                    pass\n-                elif isinstance(arg, str) and want_type is int or isinstance(arg, int) and want_type is str:\n-                    arg = want_type(arg)\n-                elif not isinstance(arg, want_type):\n-                    raise RuntimeError('unexpected type {} for {} (expected {})'.format(arg.__class__.__name__, fieldname, want_type.__name__))\n-                value = self._apply_normalizers(arg, fieldname, normalizers)\n-                if value:\n-                    return method(self, value, *other_args)\n-            return wrapper\n-        return inner\n+\n+def _omnivorous_setter(fieldname: str, want_type: Type[Any], *normalizers: NormalizerFunction) -> Callable[[Callable[..., Any]], Any]:\n+    def inner(method: Callable[..., Any]) -> Callable[..., Any]:\n+        @wraps(method)\n+        def wrapper(self: PackageMakerBase, *args: Any) -> Any:\n+            values = self._normalize_args(args, fieldname, want_type, normalizers)\n+            if values:\n+                return method(self, *values)\n+        return wrapper\n+    return inner\n+\n+\n+def _simple_setter(fieldname: str, want_type: Type[Any], *normalizers: NormalizerFunction) -> Callable[[Callable[..., Any]], Any]:\n+    def inner(method: Callable[..., Any]) -> Callable[..., Any]:\n+        @wraps(method)\n+        def wrapper(self: PackageMakerBase, arg: Any, *other_args: Any) -> Any:\n+            if arg is None:\n+                pass\n+            elif isinstance(arg, str) and want_type is int or isinstance(arg, int) and want_type is str:\n+                arg = want_type(arg)\n+            elif not isinstance(arg, want_type):\n+                raise RuntimeError('unexpected type {} for {} (expected {})'.format(arg.__class__.__name__, fieldname, want_type.__name__))\n+            value = self._apply_normalizers(arg, fieldname, normalizers)\n+            if value:\n+                return method(self, value, *other_args)\n+        return wrapper\n+    return inner\n+\n+\n+def _extend_unique(existing: List[str], iterable: Iterable[str]) -> None:\n+    seen = set(existing) if existing else set()\n+\n+    for value in iterable:\n+        if value not in seen:\n+            seen.add(value)\n+            existing.append(value)\n \n",
        "source_code_with_indent": "\n    <DED>def _omnivorous_setter(fieldname, want_type, *normalizers):  # noqa: N805\n        <IND>def inner(method):\n            <IND>@wraps(method)\n            def wrapper(self, *args):\n                <IND>values = self._normalize_args(args, fieldname, want_type, normalizers)\n                if values:\n                    <IND>return method(self, *values)\n            <DED><DED>return wrapper\n        <DED>return inner\n\n    <DED>def _simple_setter(fieldname, want_type, *normalizers):  # noqa: N805\n        <IND>def inner(method):\n            <IND>@wraps(method)\n            def wrapper(self, arg, *other_args):\n                <IND>if arg is None:\n                    <IND>pass\n                <DED>elif isinstance(arg, str) and want_type is int or isinstance(arg, int) and want_type is str:\n                    <IND>arg = want_type(arg)\n                <DED>elif not isinstance(arg, want_type):\n                    <IND>raise RuntimeError('unexpected type {} for {} (expected {})'.format(arg.__class__.__name__, fieldname, want_type.__name__))\n                <DED>value = self._apply_normalizers(arg, fieldname, normalizers)\n                if value:\n                    <IND>return method(self, value, *other_args)\n            <DED><DED>return wrapper\n        <DED>return inner\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n\n<DED><DED>def _omnivorous_setter(fieldname: str, want_type: Type[Any], *normalizers: NormalizerFunction) -> Callable[[Callable[..., Any]], Any]:\n    <IND>def inner(method: Callable[..., Any]) -> Callable[..., Any]:\n        <IND>@wraps(method)\n        def wrapper(self: PackageMakerBase, *args: Any) -> Any:\n            <IND>values = self._normalize_args(args, fieldname, want_type, normalizers)\n            if values:\n                <IND>return method(self, *values)\n        <DED><DED>return wrapper\n    <DED>return inner\n\n\n<DED>def _simple_setter(fieldname: str, want_type: Type[Any], *normalizers: NormalizerFunction) -> Callable[[Callable[..., Any]], Any]:\n    <IND>def inner(method: Callable[..., Any]) -> Callable[..., Any]:\n        <IND>@wraps(method)\n        def wrapper(self: PackageMakerBase, arg: Any, *other_args: Any) -> Any:\n            <IND>if arg is None:\n                <IND>pass\n            <DED>elif isinstance(arg, str) and want_type is int or isinstance(arg, int) and want_type is str:\n                <IND>arg = want_type(arg)\n            <DED>elif not isinstance(arg, want_type):\n                <IND>raise RuntimeError('unexpected type {} for {} (expected {})'.format(arg.__class__.__name__, fieldname, want_type.__name__))\n            <DED>value = self._apply_normalizers(arg, fieldname, normalizers)\n            if value:\n                <IND>return method(self, value, *other_args)\n        <DED><DED>return wrapper\n    <DED>return inner\n\n\n<DED>def _extend_unique(existing: List[str], iterable: Iterable[str]) -> None:\n    <IND>seen = set(existing) if existing else set()\n\n    for value in iterable:\n        <IND>if value not in seen:\n            <IND>seen.add(value)\n            existing.append(value)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "class PackageMaker(PackageMakerBase):\n    _package: Package\n    _ident: Optional[str]\n",
        "source_code_len": 86,
        "target_code": "class PackageMaker(PackageMakerBase):\n    _package: PackageTemplate\n    _ident: Optional[str]\n",
        "target_code_len": 94,
        "diff_format": "@@ -120,3 +190,3 @@\n class PackageMaker(PackageMakerBase):\n-    _package: Package\n+    _package: PackageTemplate\n     _ident: Optional[str]\n",
        "source_code_with_indent": "<DED><DED>class PackageMaker(PackageMakerBase):\n    <IND>_package: Package\n    _ident: Optional[str]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED><DED><DED>class PackageMaker(PackageMakerBase):\n    <IND>_package: PackageTemplate\n    _ident: Optional[str]\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        super(PackageMaker, self).__init__(logger)\n        self._package = Package()\n        self._ident = ident\n",
        "source_code_len": 113,
        "target_code": "        super(PackageMaker, self).__init__(logger)\n        self._package = PackageTemplate()\n        self._ident = ident\n",
        "target_code_len": 121,
        "diff_format": "@@ -127,3 +197,3 @@\n         super(PackageMaker, self).__init__(logger)\n-        self._package = Package()\n+        self._package = PackageTemplate()\n         self._ident = ident\n",
        "source_code_with_indent": "        <IND>super(PackageMaker, self).__init__(logger)\n        self._package = Package()\n        self._ident = ident\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>super(PackageMaker, self).__init__(logger)\n        self._package = PackageTemplate()\n        self._ident = ident\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    @PackageMakerBase._simple_setter('origin', str, nzs.strip, nzs.forbid_newlines)\n    def set_origin(self, origin: str) -> None:\n",
        "source_code_len": 132,
        "target_code": "\n    @_simple_setter('origin', str, nzs.strip, nzs.forbid_newlines)\n    def set_origin(self, origin: str) -> None:\n",
        "target_code_len": 115,
        "diff_format": "@@ -135,3 +205,3 @@\n \n-    @PackageMakerBase._simple_setter('origin', str, nzs.strip, nzs.forbid_newlines)\n+    @_simple_setter('origin', str, nzs.strip, nzs.forbid_newlines)\n     def set_origin(self, origin: str) -> None:\n",
        "source_code_with_indent": "\n    <DED>@PackageMakerBase._simple_setter('origin', str, nzs.strip, nzs.forbid_newlines)\n    def set_origin(self, origin: str) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>@_simple_setter('origin', str, nzs.strip, nzs.forbid_newlines)\n    def set_origin(self, origin: str) -> None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    @PackageMakerBase._simple_setter('name', str, nzs.strip, nzs.forbid_newlines)\n    def set_name(self, name: str) -> None:\n",
        "source_code_len": 126,
        "target_code": "\n    @_simple_setter('name', str, nzs.strip, nzs.forbid_newlines)\n    def set_name(self, name: str) -> None:\n",
        "target_code_len": 109,
        "diff_format": "@@ -140,3 +210,3 @@\n \n-    @PackageMakerBase._simple_setter('name', str, nzs.strip, nzs.forbid_newlines)\n+    @_simple_setter('name', str, nzs.strip, nzs.forbid_newlines)\n     def set_name(self, name: str) -> None:\n",
        "source_code_with_indent": "\n    <DED>@PackageMakerBase._simple_setter('name', str, nzs.strip, nzs.forbid_newlines)\n    def set_name(self, name: str) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>@_simple_setter('name', str, nzs.strip, nzs.forbid_newlines)\n    def set_name(self, name: str) -> None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    @PackageMakerBase._simple_setter('basename', str, nzs.strip, nzs.forbid_newlines)\n    def set_basename(self, basename: str) -> None:\n",
        "source_code_len": 138,
        "target_code": "\n    @_simple_setter('basename', str, nzs.strip, nzs.forbid_newlines)\n    def set_basename(self, basename: str) -> None:\n",
        "target_code_len": 121,
        "diff_format": "@@ -144,3 +214,3 @@\n \n-    @PackageMakerBase._simple_setter('basename', str, nzs.strip, nzs.forbid_newlines)\n+    @_simple_setter('basename', str, nzs.strip, nzs.forbid_newlines)\n     def set_basename(self, basename: str) -> None:\n",
        "source_code_with_indent": "\n    <DED>@PackageMakerBase._simple_setter('basename', str, nzs.strip, nzs.forbid_newlines)\n    def set_basename(self, basename: str) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>@_simple_setter('basename', str, nzs.strip, nzs.forbid_newlines)\n    def set_basename(self, basename: str) -> None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def prefix_name(self, prefix: str) -> None:\n        self._package.name = prefix + self._package.name\n\n    @PackageMakerBase._simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n    def set_version(self, version: str, version_normalizer: Optional[Callable[[str], str]] = None) -> None:\n",
        "source_code_len": 299,
        "target_code": "    def prefix_name(self, prefix: str) -> None:\n        assert(self._package.name)\n        self._package.name = prefix + self._package.name\n\n    @_simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n    def set_version(self, version: str, version_normalizer: Optional[Callable[[str], str]] = None) -> None:\n",
        "target_code_len": 317,
        "diff_format": "@@ -149,5 +219,6 @@\n     def prefix_name(self, prefix: str) -> None:\n+        assert(self._package.name)\n         self._package.name = prefix + self._package.name\n \n-    @PackageMakerBase._simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n+    @_simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n     def set_version(self, version: str, version_normalizer: Optional[Callable[[str], str]] = None) -> None:\n",
        "source_code_with_indent": "    <DED>def prefix_name(self, prefix: str) -> None:\n        <IND>self._package.name = prefix + self._package.name\n\n    <DED>@PackageMakerBase._simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n    def set_version(self, version: str, version_normalizer: Optional[Callable[[str], str]] = None) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def prefix_name(self, prefix: str) -> None:\n        <IND>assert(self._package.name)\n        self._package.name = prefix + self._package.name\n\n    <DED>@_simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n    def set_version(self, version: str, version_normalizer: Optional[Callable[[str], str]] = None) -> None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    @PackageMakerBase._simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n    def set_rawversion(self, rawversion: str) -> None:\n",
        "source_code_len": 141,
        "target_code": "\n    @_simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n    def set_rawversion(self, rawversion: str) -> None:\n",
        "target_code_len": 124,
        "diff_format": "@@ -157,3 +228,3 @@\n \n-    @PackageMakerBase._simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n+    @_simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n     def set_rawversion(self, rawversion: str) -> None:\n",
        "source_code_with_indent": "\n    <DED>@PackageMakerBase._simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n    def set_rawversion(self, rawversion: str) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>@_simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n    def set_rawversion(self, rawversion: str) -> None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    @PackageMakerBase._simple_setter('arch', str, nzs.strip, nzs.forbid_newlines)\n    def set_arch(self, arch: str) -> None:\n",
        "source_code_len": 126,
        "target_code": "\n    @_simple_setter('arch', str, nzs.strip, nzs.forbid_newlines)\n    def set_arch(self, arch: str) -> None:\n",
        "target_code_len": 109,
        "diff_format": "@@ -167,3 +238,3 @@\n \n-    @PackageMakerBase._simple_setter('arch', str, nzs.strip, nzs.forbid_newlines)\n+    @_simple_setter('arch', str, nzs.strip, nzs.forbid_newlines)\n     def set_arch(self, arch: str) -> None:\n",
        "source_code_with_indent": "\n    <DED>@PackageMakerBase._simple_setter('arch', str, nzs.strip, nzs.forbid_newlines)\n    def set_arch(self, arch: str) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>@_simple_setter('arch', str, nzs.strip, nzs.forbid_newlines)\n    def set_arch(self, arch: str) -> None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    @PackageMakerBase._simple_setter('subrepo', str, nzs.strip, nzs.forbid_newlines)\n    def set_subrepo(self, subrepo: str) -> None:\n",
        "source_code_len": 135,
        "target_code": "\n    @_simple_setter('subrepo', str, nzs.strip, nzs.forbid_newlines)\n    def set_subrepo(self, subrepo: str) -> None:\n",
        "target_code_len": 118,
        "diff_format": "@@ -171,3 +242,3 @@\n \n-    @PackageMakerBase._simple_setter('subrepo', str, nzs.strip, nzs.forbid_newlines)\n+    @_simple_setter('subrepo', str, nzs.strip, nzs.forbid_newlines)\n     def set_subrepo(self, subrepo: str) -> None:\n",
        "source_code_with_indent": "\n    <DED>@PackageMakerBase._simple_setter('subrepo', str, nzs.strip, nzs.forbid_newlines)\n    def set_subrepo(self, subrepo: str) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>@_simple_setter('subrepo', str, nzs.strip, nzs.forbid_newlines)\n    def set_subrepo(self, subrepo: str) -> None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    @PackageMakerBase._simple_setter('summary', str, nzs.strip)\n    def set_summary(self, summary: str) -> None:\n        self._package.comment = summary\n\n    @PackageMakerBase._omnivorous_setter('maintainer', str, nzs.strip, nzs.forbid_newlines, nzs.tolower)\n    def add_maintainers(self, *args: Any) -> None:\n        self._package.maintainers.extend(_iter_unique(args, self._package.maintainers))\n\n    @PackageMakerBase._omnivorous_setter('category', str, nzs.strip, nzs.forbid_newlines)\n    def add_categories(self, *args: Any) -> None:\n        # XXX: convert into array\n        if not self._package.category:\n            self._package.category = args[0]\n\n    @PackageMakerBase._omnivorous_setter('homepage', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n    def add_homepages(self, *args: Any) -> None:\n        # XXX: convert into array\n        if not self._package.homepage:\n            self._package.homepage = args[0]\n\n    @PackageMakerBase._omnivorous_setter('license', str, nzs.strip, nzs.forbid_newlines)\n    def add_licenses(self, *args: Any) -> None:\n        self._package.licenses.extend(args)\n\n    @PackageMakerBase._omnivorous_setter('download', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n    def add_downloads(self, *args: Any) -> None:\n        self._package.downloads.extend(_iter_unique(args, self._package.downloads))\n\n    def set_flags(self, mask: int, is_set: bool = True) -> None:\n        self._package.set_flag(mask, is_set)\n\n",
        "source_code_len": 1494,
        "target_code": "\n    @_simple_setter('summary', str, nzs.strip)\n    def set_summary(self, summary: str) -> None:\n        self._package.summary = summary\n\n    @_omnivorous_setter('maintainer', str, nzs.strip, nzs.forbid_newlines, nzs.tolower)\n    def add_maintainers(self, *args: Any) -> None:\n        _extend_unique(self._package.maintainers, args)\n\n    @_omnivorous_setter('category', str, nzs.strip, nzs.forbid_newlines)\n    def add_categories(self, *args: Any) -> None:\n        _extend_unique(self._package.categories, args)\n\n    @_omnivorous_setter('homepage', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n    def add_homepages(self, *args: Any) -> None:\n        _extend_unique(self._package.homepages, args)\n\n    @_omnivorous_setter('license', str, nzs.strip, nzs.forbid_newlines)\n    def add_licenses(self, *args: Any) -> None:\n        _extend_unique(self._package.licenses, args)\n\n    @_omnivorous_setter('download', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n    def add_downloads(self, *args: Any) -> None:\n        _extend_unique(self._package.downloads, args)\n\n    def set_flags(self, mask: int, is_set: bool = True) -> None:\n        if is_set:\n            self._package.flags |= mask\n        else:\n            self._package.flags &= ~mask\n\n",
        "target_code_len": 1281,
        "diff_format": "@@ -175,32 +246,31 @@\n \n-    @PackageMakerBase._simple_setter('summary', str, nzs.strip)\n+    @_simple_setter('summary', str, nzs.strip)\n     def set_summary(self, summary: str) -> None:\n-        self._package.comment = summary\n-\n-    @PackageMakerBase._omnivorous_setter('maintainer', str, nzs.strip, nzs.forbid_newlines, nzs.tolower)\n+        self._package.summary = summary\n+\n+    @_omnivorous_setter('maintainer', str, nzs.strip, nzs.forbid_newlines, nzs.tolower)\n     def add_maintainers(self, *args: Any) -> None:\n-        self._package.maintainers.extend(_iter_unique(args, self._package.maintainers))\n-\n-    @PackageMakerBase._omnivorous_setter('category', str, nzs.strip, nzs.forbid_newlines)\n+        _extend_unique(self._package.maintainers, args)\n+\n+    @_omnivorous_setter('category', str, nzs.strip, nzs.forbid_newlines)\n     def add_categories(self, *args: Any) -> None:\n-        # XXX: convert into array\n-        if not self._package.category:\n-            self._package.category = args[0]\n-\n-    @PackageMakerBase._omnivorous_setter('homepage', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n+        _extend_unique(self._package.categories, args)\n+\n+    @_omnivorous_setter('homepage', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n     def add_homepages(self, *args: Any) -> None:\n-        # XXX: convert into array\n-        if not self._package.homepage:\n-            self._package.homepage = args[0]\n-\n-    @PackageMakerBase._omnivorous_setter('license', str, nzs.strip, nzs.forbid_newlines)\n+        _extend_unique(self._package.homepages, args)\n+\n+    @_omnivorous_setter('license', str, nzs.strip, nzs.forbid_newlines)\n     def add_licenses(self, *args: Any) -> None:\n-        self._package.licenses.extend(args)\n-\n-    @PackageMakerBase._omnivorous_setter('download', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n+        _extend_unique(self._package.licenses, args)\n+\n+    @_omnivorous_setter('download', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n     def add_downloads(self, *args: Any) -> None:\n-        self._package.downloads.extend(_iter_unique(args, self._package.downloads))\n+        _extend_unique(self._package.downloads, args)\n \n     def set_flags(self, mask: int, is_set: bool = True) -> None:\n-        self._package.set_flag(mask, is_set)\n+        if is_set:\n+            self._package.flags |= mask\n+        else:\n+            self._package.flags &= ~mask\n \n",
        "source_code_with_indent": "\n    <DED>@PackageMakerBase._simple_setter('summary', str, nzs.strip)\n    def set_summary(self, summary: str) -> None:\n        <IND>self._package.comment = summary\n\n    <DED>@PackageMakerBase._omnivorous_setter('maintainer', str, nzs.strip, nzs.forbid_newlines, nzs.tolower)\n    def add_maintainers(self, *args: Any) -> None:\n        <IND>self._package.maintainers.extend(_iter_unique(args, self._package.maintainers))\n\n    <DED>@PackageMakerBase._omnivorous_setter('category', str, nzs.strip, nzs.forbid_newlines)\n    def add_categories(self, *args: Any) -> None:\n        # XXX: convert into array\n        <IND>if not self._package.category:\n            <IND>self._package.category = args[0]\n\n    <DED><DED>@PackageMakerBase._omnivorous_setter('homepage', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n    def add_homepages(self, *args: Any) -> None:\n        # XXX: convert into array\n        <IND>if not self._package.homepage:\n            <IND>self._package.homepage = args[0]\n\n    <DED><DED>@PackageMakerBase._omnivorous_setter('license', str, nzs.strip, nzs.forbid_newlines)\n    def add_licenses(self, *args: Any) -> None:\n        <IND>self._package.licenses.extend(args)\n\n    <DED>@PackageMakerBase._omnivorous_setter('download', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n    def add_downloads(self, *args: Any) -> None:\n        <IND>self._package.downloads.extend(_iter_unique(args, self._package.downloads))\n\n    <DED>def set_flags(self, mask: int, is_set: bool = True) -> None:\n        <IND>self._package.set_flag(mask, is_set)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>@_simple_setter('summary', str, nzs.strip)\n    def set_summary(self, summary: str) -> None:\n        <IND>self._package.summary = summary\n\n    <DED>@_omnivorous_setter('maintainer', str, nzs.strip, nzs.forbid_newlines, nzs.tolower)\n    def add_maintainers(self, *args: Any) -> None:\n        <IND>_extend_unique(self._package.maintainers, args)\n\n    <DED>@_omnivorous_setter('category', str, nzs.strip, nzs.forbid_newlines)\n    def add_categories(self, *args: Any) -> None:\n        <IND>_extend_unique(self._package.categories, args)\n\n    <DED>@_omnivorous_setter('homepage', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n    def add_homepages(self, *args: Any) -> None:\n        <IND>_extend_unique(self._package.homepages, args)\n\n    <DED>@_omnivorous_setter('license', str, nzs.strip, nzs.forbid_newlines)\n    def add_licenses(self, *args: Any) -> None:\n        <IND>_extend_unique(self._package.licenses, args)\n\n    <DED>@_omnivorous_setter('download', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n    def add_downloads(self, *args: Any) -> None:\n        <IND>_extend_unique(self._package.downloads, args)\n\n    <DED>def set_flags(self, mask: int, is_set: bool = True) -> None:\n        <IND>if is_set:\n            <IND>self._package.flags |= mask\n        <DED>else:\n            <IND>self._package.flags &= ~mask\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def unwrap(self) -> Package:\n        return self._package\n\n",
        "source_code_len": 64,
        "target_code": "\n    def spawn(self, repo: str, family: str, subrepo: Optional[str] = None, shadow: bool = False, default_maintainer: Optional[str] = None) -> Package:\n        if self._package.name is None:\n            raise RuntimeError('Attempt to spawn Package with unset name')\n        if self._package.version is None:\n            raise RuntimeError('Attempt to spawn Package with unset version')\n\n        maintainers: List[str] = self._package.maintainers if self._package.maintainers else [default_maintainer] if default_maintainer else []\n\n        return Package(\n            repo=repo,\n            family=family,\n            subrepo=self._package.subrepo or subrepo,\n\n            name=self._package.name,\n            basename=self._package.basename,\n\n            version=self._package.version,\n            origversion=self._package.version,\n            rawversion=self._package.rawversion if self._package.rawversion is not None else self._package.version,\n\n            arch=self._package.arch,\n\n            maintainers=maintainers,\n            category=self._package.categories[0] if self._package.categories else None,  # XXX: convert to array\n            comment=self._package.summary,\n            homepage=self._package.homepages[0] if self._package.homepages else None,  # XXX: convert to array\n            licenses=self._package.licenses,\n            downloads=self._package.downloads,\n\n            flags=self._package.flags,\n            shadow=shadow,\n\n            extrafields=self._package.extrafields,\n        )\n\n",
        "target_code_len": 1515,
        "diff_format": "@@ -209,4 +279,36 @@\n \n-    def unwrap(self) -> Package:\n-        return self._package\n+    def spawn(self, repo: str, family: str, subrepo: Optional[str] = None, shadow: bool = False, default_maintainer: Optional[str] = None) -> Package:\n+        if self._package.name is None:\n+            raise RuntimeError('Attempt to spawn Package with unset name')\n+        if self._package.version is None:\n+            raise RuntimeError('Attempt to spawn Package with unset version')\n+\n+        maintainers: List[str] = self._package.maintainers if self._package.maintainers else [default_maintainer] if default_maintainer else []\n+\n+        return Package(\n+            repo=repo,\n+            family=family,\n+            subrepo=self._package.subrepo or subrepo,\n+\n+            name=self._package.name,\n+            basename=self._package.basename,\n+\n+            version=self._package.version,\n+            origversion=self._package.version,\n+            rawversion=self._package.rawversion if self._package.rawversion is not None else self._package.version,\n+\n+            arch=self._package.arch,\n+\n+            maintainers=maintainers,\n+            category=self._package.categories[0] if self._package.categories else None,  # XXX: convert to array\n+            comment=self._package.summary,\n+            homepage=self._package.homepages[0] if self._package.homepages else None,  # XXX: convert to array\n+            licenses=self._package.licenses,\n+            downloads=self._package.downloads,\n+\n+            flags=self._package.flags,\n+            shadow=shadow,\n+\n+            extrafields=self._package.extrafields,\n+        )\n \n",
        "source_code_with_indent": "\n    <DED>def unwrap(self) -> Package:\n        <IND>return self._package\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def spawn(self, repo: str, family: str, subrepo: Optional[str] = None, shadow: bool = False, default_maintainer: Optional[str] = None) -> Package:\n        <IND>if self._package.name is None:\n            <IND>raise RuntimeError('Attempt to spawn Package with unset name')\n        <DED>if self._package.version is None:\n            <IND>raise RuntimeError('Attempt to spawn Package with unset version')\n\n        <DED>maintainers: List[str] = self._package.maintainers if self._package.maintainers else [default_maintainer] if default_maintainer else []\n\n        return Package(\n            repo=repo,\n            family=family,\n            subrepo=self._package.subrepo or subrepo,\n\n            name=self._package.name,\n            basename=self._package.basename,\n\n            version=self._package.version,\n            origversion=self._package.version,\n            rawversion=self._package.rawversion if self._package.rawversion is not None else self._package.version,\n\n            arch=self._package.arch,\n\n            maintainers=maintainers,\n            category=self._package.categories[0] if self._package.categories else None,  # XXX: convert to array\n            comment=self._package.summary,\n            homepage=self._package.homepages[0] if self._package.homepages else None,  # XXX: convert to array\n            licenses=self._package.licenses,\n            downloads=self._package.downloads,\n\n            flags=self._package.flags,\n            shadow=shadow,\n\n            extrafields=self._package.extrafields,\n        )\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "repology/repology-updater",
    "commit": "9f67d556944fe256c990593f673713e299feaf8a",
    "filename": "repology/packagemaker/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/repology-repology-updater/repology/packagemaker/__init__.py",
    "file_hunks_size": 17,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "repology/packagemaker/__init__.py:184:41 Incompatible parameter type [6]: Expected `PackageMakerBase` for 1st positional only parameter to call `PackageMakerBase._omnivorous_setter` but got `str`.",
    "message": " Expected `PackageMakerBase` for 1st positional only parameter to call `PackageMakerBase._omnivorous_setter` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 184,
    "warning_line": "    @PackageMakerBase._omnivorous_setter('category', str, nzs.strip, nzs.forbid_newlines)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from functools import wraps\nfrom typing import Any, Callable, Iterable, Optional\n\nfrom repology.logger import Logger\nfrom repology.package import Package\nfrom repology.packagemaker import normalizers as nzs\n\n",
        "source_code_len": 208,
        "target_code": "from functools import wraps\nfrom typing import Any, Callable, Dict, Iterable, List, Optional, Type\n\nfrom repology.logger import Logger\nfrom repology.package import Package, PackageStatus\nfrom repology.packagemaker import normalizers as nzs\nfrom repology.packagemaker.normalizers import NormalizerFunction\n\n",
        "target_code_len": 306,
        "diff_format": "@@ -24,7 +22,8 @@\n from functools import wraps\n-from typing import Any, Callable, Iterable, Optional\n+from typing import Any, Callable, Dict, Iterable, List, Optional, Type\n \n from repology.logger import Logger\n-from repology.package import Package\n+from repology.package import Package, PackageStatus\n from repology.packagemaker import normalizers as nzs\n+from repology.packagemaker.normalizers import NormalizerFunction\n \n",
        "source_code_with_indent": "from functools import wraps\nfrom typing import Any, Callable, Iterable, Optional\n\nfrom repology.logger import Logger\nfrom repology.package import Package\nfrom repology.packagemaker import normalizers as nzs\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from functools import wraps\nfrom typing import Any, Callable, Dict, Iterable, List, Optional, Type\n\nfrom repology.logger import Logger\nfrom repology.package import Package, PackageStatus\nfrom repology.packagemaker import normalizers as nzs\nfrom repology.packagemaker.normalizers import NormalizerFunction\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _iter_unique(iterable, existing=None):\n    seen = set(existing) if existing else set()\n    for value in iterable:\n        if value not in seen:\n            seen.add(value)\n            yield value\n\n",
        "source_code_len": 202,
        "target_code": "\nclass PackageTemplate:\n    __slots__ = [\n        'subrepo',\n\n        'name',\n        'basename',\n\n        'version',\n        'origversion',\n        'rawversion',\n\n        'arch',\n        'summary',\n        'maintainers',\n        'categories',\n        'homepages',\n        'licenses',\n        'downloads',\n\n        'flags',\n\n        'extrafields',\n    ]\n\n    subrepo: Optional[str]\n\n    name: Optional[str]\n    basename: Optional[str]\n\n    version: Optional[str]\n    origversion: Optional[str]\n    rawversion: Optional[str]\n\n    arch: Optional[str]\n    summary: Optional[str]\n    maintainers: List[str]\n    categories: List[str]\n    homepages: List[str]\n    licenses: List[str]\n    downloads: List[str]\n\n    flags: int\n\n    extrafields: Dict[str, str]\n\n    def __init__(self) -> None:\n        self.subrepo = None\n\n        self.name = None\n        self.basename = None\n\n        self.version = None\n        self.origversion = None\n        self.rawversion = None\n\n        self.arch = None\n        self.summary = None\n        self.maintainers = []\n        self.categories = []\n        self.homepages = []\n        self.licenses = []\n        self.downloads = []\n\n        self.flags = 0\n\n        self.extrafields = {}\n\n",
        "target_code_len": 1212,
        "diff_format": "@@ -34,8 +33,68 @@\n \n-def _iter_unique(iterable, existing=None):\n-    seen = set(existing) if existing else set()\n-    for value in iterable:\n-        if value not in seen:\n-            seen.add(value)\n-            yield value\n+class PackageTemplate:\n+    __slots__ = [\n+        'subrepo',\n+\n+        'name',\n+        'basename',\n+\n+        'version',\n+        'origversion',\n+        'rawversion',\n+\n+        'arch',\n+        'summary',\n+        'maintainers',\n+        'categories',\n+        'homepages',\n+        'licenses',\n+        'downloads',\n+\n+        'flags',\n+\n+        'extrafields',\n+    ]\n+\n+    subrepo: Optional[str]\n+\n+    name: Optional[str]\n+    basename: Optional[str]\n+\n+    version: Optional[str]\n+    origversion: Optional[str]\n+    rawversion: Optional[str]\n+\n+    arch: Optional[str]\n+    summary: Optional[str]\n+    maintainers: List[str]\n+    categories: List[str]\n+    homepages: List[str]\n+    licenses: List[str]\n+    downloads: List[str]\n+\n+    flags: int\n+\n+    extrafields: Dict[str, str]\n+\n+    def __init__(self) -> None:\n+        self.subrepo = None\n+\n+        self.name = None\n+        self.basename = None\n+\n+        self.version = None\n+        self.origversion = None\n+        self.rawversion = None\n+\n+        self.arch = None\n+        self.summary = None\n+        self.maintainers = []\n+        self.categories = []\n+        self.homepages = []\n+        self.licenses = []\n+        self.downloads = []\n+\n+        self.flags = 0\n+\n+        self.extrafields = {}\n \n",
        "source_code_with_indent": "\ndef _iter_unique(iterable, existing=None):\n    <IND>seen = set(existing) if existing else set()\n    for value in iterable:\n        <IND>if value not in seen:\n            <IND>seen.add(value)\n            yield value\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nclass PackageTemplate:\n    <IND>__slots__ = [\n        'subrepo',\n\n        'name',\n        'basename',\n\n        'version',\n        'origversion',\n        'rawversion',\n\n        'arch',\n        'summary',\n        'maintainers',\n        'categories',\n        'homepages',\n        'licenses',\n        'downloads',\n\n        'flags',\n\n        'extrafields',\n    ]\n\n    subrepo: Optional[str]\n\n    name: Optional[str]\n    basename: Optional[str]\n\n    version: Optional[str]\n    origversion: Optional[str]\n    rawversion: Optional[str]\n\n    arch: Optional[str]\n    summary: Optional[str]\n    maintainers: List[str]\n    categories: List[str]\n    homepages: List[str]\n    licenses: List[str]\n    downloads: List[str]\n\n    flags: int\n\n    extrafields: Dict[str, str]\n\n    def __init__(self) -> None:\n        <IND>self.subrepo = None\n\n        self.name = None\n        self.basename = None\n\n        self.version = None\n        self.origversion = None\n        self.rawversion = None\n\n        self.arch = None\n        self.summary = None\n        self.maintainers = []\n        self.categories = []\n        self.homepages = []\n        self.licenses = []\n        self.downloads = []\n\n        self.flags = 0\n\n        self.extrafields = {}\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _omnivorous_setter(fieldname, want_type, *normalizers):  # noqa: N805\n        def inner(method):\n            @wraps(method)\n            def wrapper(self, *args):\n                values = self._normalize_args(args, fieldname, want_type, normalizers)\n                if values:\n                    return method(self, *values)\n            return wrapper\n        return inner\n\n    def _simple_setter(fieldname, want_type, *normalizers):  # noqa: N805\n        def inner(method):\n            @wraps(method)\n            def wrapper(self, arg, *other_args):\n                if arg is None:\n                    pass\n                elif isinstance(arg, str) and want_type is int or isinstance(arg, int) and want_type is str:\n                    arg = want_type(arg)\n                elif not isinstance(arg, want_type):\n                    raise RuntimeError('unexpected type {} for {} (expected {})'.format(arg.__class__.__name__, fieldname, want_type.__name__))\n                value = self._apply_normalizers(arg, fieldname, normalizers)\n                if value:\n                    return method(self, value, *other_args)\n            return wrapper\n        return inner\n\n",
        "source_code_len": 1176,
        "target_code": "\n\ndef _omnivorous_setter(fieldname: str, want_type: Type[Any], *normalizers: NormalizerFunction) -> Callable[[Callable[..., Any]], Any]:\n    def inner(method: Callable[..., Any]) -> Callable[..., Any]:\n        @wraps(method)\n        def wrapper(self: PackageMakerBase, *args: Any) -> Any:\n            values = self._normalize_args(args, fieldname, want_type, normalizers)\n            if values:\n                return method(self, *values)\n        return wrapper\n    return inner\n\n\ndef _simple_setter(fieldname: str, want_type: Type[Any], *normalizers: NormalizerFunction) -> Callable[[Callable[..., Any]], Any]:\n    def inner(method: Callable[..., Any]) -> Callable[..., Any]:\n        @wraps(method)\n        def wrapper(self: PackageMakerBase, arg: Any, *other_args: Any) -> Any:\n            if arg is None:\n                pass\n            elif isinstance(arg, str) and want_type is int or isinstance(arg, int) and want_type is str:\n                arg = want_type(arg)\n            elif not isinstance(arg, want_type):\n                raise RuntimeError('unexpected type {} for {} (expected {})'.format(arg.__class__.__name__, fieldname, want_type.__name__))\n            value = self._apply_normalizers(arg, fieldname, normalizers)\n            if value:\n                return method(self, value, *other_args)\n        return wrapper\n    return inner\n\n\ndef _extend_unique(existing: List[str], iterable: Iterable[str]) -> None:\n    seen = set(existing) if existing else set()\n\n    for value in iterable:\n        if value not in seen:\n            seen.add(value)\n            existing.append(value)\n\n",
        "target_code_len": 1598,
        "diff_format": "@@ -92,27 +151,38 @@\n \n-    def _omnivorous_setter(fieldname, want_type, *normalizers):  # noqa: N805\n-        def inner(method):\n-            @wraps(method)\n-            def wrapper(self, *args):\n-                values = self._normalize_args(args, fieldname, want_type, normalizers)\n-                if values:\n-                    return method(self, *values)\n-            return wrapper\n-        return inner\n-\n-    def _simple_setter(fieldname, want_type, *normalizers):  # noqa: N805\n-        def inner(method):\n-            @wraps(method)\n-            def wrapper(self, arg, *other_args):\n-                if arg is None:\n-                    pass\n-                elif isinstance(arg, str) and want_type is int or isinstance(arg, int) and want_type is str:\n-                    arg = want_type(arg)\n-                elif not isinstance(arg, want_type):\n-                    raise RuntimeError('unexpected type {} for {} (expected {})'.format(arg.__class__.__name__, fieldname, want_type.__name__))\n-                value = self._apply_normalizers(arg, fieldname, normalizers)\n-                if value:\n-                    return method(self, value, *other_args)\n-            return wrapper\n-        return inner\n+\n+def _omnivorous_setter(fieldname: str, want_type: Type[Any], *normalizers: NormalizerFunction) -> Callable[[Callable[..., Any]], Any]:\n+    def inner(method: Callable[..., Any]) -> Callable[..., Any]:\n+        @wraps(method)\n+        def wrapper(self: PackageMakerBase, *args: Any) -> Any:\n+            values = self._normalize_args(args, fieldname, want_type, normalizers)\n+            if values:\n+                return method(self, *values)\n+        return wrapper\n+    return inner\n+\n+\n+def _simple_setter(fieldname: str, want_type: Type[Any], *normalizers: NormalizerFunction) -> Callable[[Callable[..., Any]], Any]:\n+    def inner(method: Callable[..., Any]) -> Callable[..., Any]:\n+        @wraps(method)\n+        def wrapper(self: PackageMakerBase, arg: Any, *other_args: Any) -> Any:\n+            if arg is None:\n+                pass\n+            elif isinstance(arg, str) and want_type is int or isinstance(arg, int) and want_type is str:\n+                arg = want_type(arg)\n+            elif not isinstance(arg, want_type):\n+                raise RuntimeError('unexpected type {} for {} (expected {})'.format(arg.__class__.__name__, fieldname, want_type.__name__))\n+            value = self._apply_normalizers(arg, fieldname, normalizers)\n+            if value:\n+                return method(self, value, *other_args)\n+        return wrapper\n+    return inner\n+\n+\n+def _extend_unique(existing: List[str], iterable: Iterable[str]) -> None:\n+    seen = set(existing) if existing else set()\n+\n+    for value in iterable:\n+        if value not in seen:\n+            seen.add(value)\n+            existing.append(value)\n \n",
        "source_code_with_indent": "\n    <DED>def _omnivorous_setter(fieldname, want_type, *normalizers):  # noqa: N805\n        <IND>def inner(method):\n            <IND>@wraps(method)\n            def wrapper(self, *args):\n                <IND>values = self._normalize_args(args, fieldname, want_type, normalizers)\n                if values:\n                    <IND>return method(self, *values)\n            <DED><DED>return wrapper\n        <DED>return inner\n\n    <DED>def _simple_setter(fieldname, want_type, *normalizers):  # noqa: N805\n        <IND>def inner(method):\n            <IND>@wraps(method)\n            def wrapper(self, arg, *other_args):\n                <IND>if arg is None:\n                    <IND>pass\n                <DED>elif isinstance(arg, str) and want_type is int or isinstance(arg, int) and want_type is str:\n                    <IND>arg = want_type(arg)\n                <DED>elif not isinstance(arg, want_type):\n                    <IND>raise RuntimeError('unexpected type {} for {} (expected {})'.format(arg.__class__.__name__, fieldname, want_type.__name__))\n                <DED>value = self._apply_normalizers(arg, fieldname, normalizers)\n                if value:\n                    <IND>return method(self, value, *other_args)\n            <DED><DED>return wrapper\n        <DED>return inner\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n\n<DED><DED>def _omnivorous_setter(fieldname: str, want_type: Type[Any], *normalizers: NormalizerFunction) -> Callable[[Callable[..., Any]], Any]:\n    <IND>def inner(method: Callable[..., Any]) -> Callable[..., Any]:\n        <IND>@wraps(method)\n        def wrapper(self: PackageMakerBase, *args: Any) -> Any:\n            <IND>values = self._normalize_args(args, fieldname, want_type, normalizers)\n            if values:\n                <IND>return method(self, *values)\n        <DED><DED>return wrapper\n    <DED>return inner\n\n\n<DED>def _simple_setter(fieldname: str, want_type: Type[Any], *normalizers: NormalizerFunction) -> Callable[[Callable[..., Any]], Any]:\n    <IND>def inner(method: Callable[..., Any]) -> Callable[..., Any]:\n        <IND>@wraps(method)\n        def wrapper(self: PackageMakerBase, arg: Any, *other_args: Any) -> Any:\n            <IND>if arg is None:\n                <IND>pass\n            <DED>elif isinstance(arg, str) and want_type is int or isinstance(arg, int) and want_type is str:\n                <IND>arg = want_type(arg)\n            <DED>elif not isinstance(arg, want_type):\n                <IND>raise RuntimeError('unexpected type {} for {} (expected {})'.format(arg.__class__.__name__, fieldname, want_type.__name__))\n            <DED>value = self._apply_normalizers(arg, fieldname, normalizers)\n            if value:\n                <IND>return method(self, value, *other_args)\n        <DED><DED>return wrapper\n    <DED>return inner\n\n\n<DED>def _extend_unique(existing: List[str], iterable: Iterable[str]) -> None:\n    <IND>seen = set(existing) if existing else set()\n\n    for value in iterable:\n        <IND>if value not in seen:\n            <IND>seen.add(value)\n            existing.append(value)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "class PackageMaker(PackageMakerBase):\n    _package: Package\n    _ident: Optional[str]\n",
        "source_code_len": 86,
        "target_code": "class PackageMaker(PackageMakerBase):\n    _package: PackageTemplate\n    _ident: Optional[str]\n",
        "target_code_len": 94,
        "diff_format": "@@ -120,3 +190,3 @@\n class PackageMaker(PackageMakerBase):\n-    _package: Package\n+    _package: PackageTemplate\n     _ident: Optional[str]\n",
        "source_code_with_indent": "<DED><DED>class PackageMaker(PackageMakerBase):\n    <IND>_package: Package\n    _ident: Optional[str]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED><DED><DED>class PackageMaker(PackageMakerBase):\n    <IND>_package: PackageTemplate\n    _ident: Optional[str]\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        super(PackageMaker, self).__init__(logger)\n        self._package = Package()\n        self._ident = ident\n",
        "source_code_len": 113,
        "target_code": "        super(PackageMaker, self).__init__(logger)\n        self._package = PackageTemplate()\n        self._ident = ident\n",
        "target_code_len": 121,
        "diff_format": "@@ -127,3 +197,3 @@\n         super(PackageMaker, self).__init__(logger)\n-        self._package = Package()\n+        self._package = PackageTemplate()\n         self._ident = ident\n",
        "source_code_with_indent": "        <IND>super(PackageMaker, self).__init__(logger)\n        self._package = Package()\n        self._ident = ident\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>super(PackageMaker, self).__init__(logger)\n        self._package = PackageTemplate()\n        self._ident = ident\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    @PackageMakerBase._simple_setter('origin', str, nzs.strip, nzs.forbid_newlines)\n    def set_origin(self, origin: str) -> None:\n",
        "source_code_len": 132,
        "target_code": "\n    @_simple_setter('origin', str, nzs.strip, nzs.forbid_newlines)\n    def set_origin(self, origin: str) -> None:\n",
        "target_code_len": 115,
        "diff_format": "@@ -135,3 +205,3 @@\n \n-    @PackageMakerBase._simple_setter('origin', str, nzs.strip, nzs.forbid_newlines)\n+    @_simple_setter('origin', str, nzs.strip, nzs.forbid_newlines)\n     def set_origin(self, origin: str) -> None:\n",
        "source_code_with_indent": "\n    <DED>@PackageMakerBase._simple_setter('origin', str, nzs.strip, nzs.forbid_newlines)\n    def set_origin(self, origin: str) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>@_simple_setter('origin', str, nzs.strip, nzs.forbid_newlines)\n    def set_origin(self, origin: str) -> None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    @PackageMakerBase._simple_setter('name', str, nzs.strip, nzs.forbid_newlines)\n    def set_name(self, name: str) -> None:\n",
        "source_code_len": 126,
        "target_code": "\n    @_simple_setter('name', str, nzs.strip, nzs.forbid_newlines)\n    def set_name(self, name: str) -> None:\n",
        "target_code_len": 109,
        "diff_format": "@@ -140,3 +210,3 @@\n \n-    @PackageMakerBase._simple_setter('name', str, nzs.strip, nzs.forbid_newlines)\n+    @_simple_setter('name', str, nzs.strip, nzs.forbid_newlines)\n     def set_name(self, name: str) -> None:\n",
        "source_code_with_indent": "\n    <DED>@PackageMakerBase._simple_setter('name', str, nzs.strip, nzs.forbid_newlines)\n    def set_name(self, name: str) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>@_simple_setter('name', str, nzs.strip, nzs.forbid_newlines)\n    def set_name(self, name: str) -> None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    @PackageMakerBase._simple_setter('basename', str, nzs.strip, nzs.forbid_newlines)\n    def set_basename(self, basename: str) -> None:\n",
        "source_code_len": 138,
        "target_code": "\n    @_simple_setter('basename', str, nzs.strip, nzs.forbid_newlines)\n    def set_basename(self, basename: str) -> None:\n",
        "target_code_len": 121,
        "diff_format": "@@ -144,3 +214,3 @@\n \n-    @PackageMakerBase._simple_setter('basename', str, nzs.strip, nzs.forbid_newlines)\n+    @_simple_setter('basename', str, nzs.strip, nzs.forbid_newlines)\n     def set_basename(self, basename: str) -> None:\n",
        "source_code_with_indent": "\n    <DED>@PackageMakerBase._simple_setter('basename', str, nzs.strip, nzs.forbid_newlines)\n    def set_basename(self, basename: str) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>@_simple_setter('basename', str, nzs.strip, nzs.forbid_newlines)\n    def set_basename(self, basename: str) -> None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def prefix_name(self, prefix: str) -> None:\n        self._package.name = prefix + self._package.name\n\n    @PackageMakerBase._simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n    def set_version(self, version: str, version_normalizer: Optional[Callable[[str], str]] = None) -> None:\n",
        "source_code_len": 299,
        "target_code": "    def prefix_name(self, prefix: str) -> None:\n        assert(self._package.name)\n        self._package.name = prefix + self._package.name\n\n    @_simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n    def set_version(self, version: str, version_normalizer: Optional[Callable[[str], str]] = None) -> None:\n",
        "target_code_len": 317,
        "diff_format": "@@ -149,5 +219,6 @@\n     def prefix_name(self, prefix: str) -> None:\n+        assert(self._package.name)\n         self._package.name = prefix + self._package.name\n \n-    @PackageMakerBase._simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n+    @_simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n     def set_version(self, version: str, version_normalizer: Optional[Callable[[str], str]] = None) -> None:\n",
        "source_code_with_indent": "    <DED>def prefix_name(self, prefix: str) -> None:\n        <IND>self._package.name = prefix + self._package.name\n\n    <DED>@PackageMakerBase._simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n    def set_version(self, version: str, version_normalizer: Optional[Callable[[str], str]] = None) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def prefix_name(self, prefix: str) -> None:\n        <IND>assert(self._package.name)\n        self._package.name = prefix + self._package.name\n\n    <DED>@_simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n    def set_version(self, version: str, version_normalizer: Optional[Callable[[str], str]] = None) -> None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    @PackageMakerBase._simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n    def set_rawversion(self, rawversion: str) -> None:\n",
        "source_code_len": 141,
        "target_code": "\n    @_simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n    def set_rawversion(self, rawversion: str) -> None:\n",
        "target_code_len": 124,
        "diff_format": "@@ -157,3 +228,3 @@\n \n-    @PackageMakerBase._simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n+    @_simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n     def set_rawversion(self, rawversion: str) -> None:\n",
        "source_code_with_indent": "\n    <DED>@PackageMakerBase._simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n    def set_rawversion(self, rawversion: str) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>@_simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n    def set_rawversion(self, rawversion: str) -> None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    @PackageMakerBase._simple_setter('arch', str, nzs.strip, nzs.forbid_newlines)\n    def set_arch(self, arch: str) -> None:\n",
        "source_code_len": 126,
        "target_code": "\n    @_simple_setter('arch', str, nzs.strip, nzs.forbid_newlines)\n    def set_arch(self, arch: str) -> None:\n",
        "target_code_len": 109,
        "diff_format": "@@ -167,3 +238,3 @@\n \n-    @PackageMakerBase._simple_setter('arch', str, nzs.strip, nzs.forbid_newlines)\n+    @_simple_setter('arch', str, nzs.strip, nzs.forbid_newlines)\n     def set_arch(self, arch: str) -> None:\n",
        "source_code_with_indent": "\n    <DED>@PackageMakerBase._simple_setter('arch', str, nzs.strip, nzs.forbid_newlines)\n    def set_arch(self, arch: str) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>@_simple_setter('arch', str, nzs.strip, nzs.forbid_newlines)\n    def set_arch(self, arch: str) -> None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    @PackageMakerBase._simple_setter('subrepo', str, nzs.strip, nzs.forbid_newlines)\n    def set_subrepo(self, subrepo: str) -> None:\n",
        "source_code_len": 135,
        "target_code": "\n    @_simple_setter('subrepo', str, nzs.strip, nzs.forbid_newlines)\n    def set_subrepo(self, subrepo: str) -> None:\n",
        "target_code_len": 118,
        "diff_format": "@@ -171,3 +242,3 @@\n \n-    @PackageMakerBase._simple_setter('subrepo', str, nzs.strip, nzs.forbid_newlines)\n+    @_simple_setter('subrepo', str, nzs.strip, nzs.forbid_newlines)\n     def set_subrepo(self, subrepo: str) -> None:\n",
        "source_code_with_indent": "\n    <DED>@PackageMakerBase._simple_setter('subrepo', str, nzs.strip, nzs.forbid_newlines)\n    def set_subrepo(self, subrepo: str) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>@_simple_setter('subrepo', str, nzs.strip, nzs.forbid_newlines)\n    def set_subrepo(self, subrepo: str) -> None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    @PackageMakerBase._simple_setter('summary', str, nzs.strip)\n    def set_summary(self, summary: str) -> None:\n        self._package.comment = summary\n\n    @PackageMakerBase._omnivorous_setter('maintainer', str, nzs.strip, nzs.forbid_newlines, nzs.tolower)\n    def add_maintainers(self, *args: Any) -> None:\n        self._package.maintainers.extend(_iter_unique(args, self._package.maintainers))\n\n    @PackageMakerBase._omnivorous_setter('category', str, nzs.strip, nzs.forbid_newlines)\n    def add_categories(self, *args: Any) -> None:\n        # XXX: convert into array\n        if not self._package.category:\n            self._package.category = args[0]\n\n    @PackageMakerBase._omnivorous_setter('homepage', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n    def add_homepages(self, *args: Any) -> None:\n        # XXX: convert into array\n        if not self._package.homepage:\n            self._package.homepage = args[0]\n\n    @PackageMakerBase._omnivorous_setter('license', str, nzs.strip, nzs.forbid_newlines)\n    def add_licenses(self, *args: Any) -> None:\n        self._package.licenses.extend(args)\n\n    @PackageMakerBase._omnivorous_setter('download', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n    def add_downloads(self, *args: Any) -> None:\n        self._package.downloads.extend(_iter_unique(args, self._package.downloads))\n\n    def set_flags(self, mask: int, is_set: bool = True) -> None:\n        self._package.set_flag(mask, is_set)\n\n",
        "source_code_len": 1494,
        "target_code": "\n    @_simple_setter('summary', str, nzs.strip)\n    def set_summary(self, summary: str) -> None:\n        self._package.summary = summary\n\n    @_omnivorous_setter('maintainer', str, nzs.strip, nzs.forbid_newlines, nzs.tolower)\n    def add_maintainers(self, *args: Any) -> None:\n        _extend_unique(self._package.maintainers, args)\n\n    @_omnivorous_setter('category', str, nzs.strip, nzs.forbid_newlines)\n    def add_categories(self, *args: Any) -> None:\n        _extend_unique(self._package.categories, args)\n\n    @_omnivorous_setter('homepage', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n    def add_homepages(self, *args: Any) -> None:\n        _extend_unique(self._package.homepages, args)\n\n    @_omnivorous_setter('license', str, nzs.strip, nzs.forbid_newlines)\n    def add_licenses(self, *args: Any) -> None:\n        _extend_unique(self._package.licenses, args)\n\n    @_omnivorous_setter('download', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n    def add_downloads(self, *args: Any) -> None:\n        _extend_unique(self._package.downloads, args)\n\n    def set_flags(self, mask: int, is_set: bool = True) -> None:\n        if is_set:\n            self._package.flags |= mask\n        else:\n            self._package.flags &= ~mask\n\n",
        "target_code_len": 1281,
        "diff_format": "@@ -175,32 +246,31 @@\n \n-    @PackageMakerBase._simple_setter('summary', str, nzs.strip)\n+    @_simple_setter('summary', str, nzs.strip)\n     def set_summary(self, summary: str) -> None:\n-        self._package.comment = summary\n-\n-    @PackageMakerBase._omnivorous_setter('maintainer', str, nzs.strip, nzs.forbid_newlines, nzs.tolower)\n+        self._package.summary = summary\n+\n+    @_omnivorous_setter('maintainer', str, nzs.strip, nzs.forbid_newlines, nzs.tolower)\n     def add_maintainers(self, *args: Any) -> None:\n-        self._package.maintainers.extend(_iter_unique(args, self._package.maintainers))\n-\n-    @PackageMakerBase._omnivorous_setter('category', str, nzs.strip, nzs.forbid_newlines)\n+        _extend_unique(self._package.maintainers, args)\n+\n+    @_omnivorous_setter('category', str, nzs.strip, nzs.forbid_newlines)\n     def add_categories(self, *args: Any) -> None:\n-        # XXX: convert into array\n-        if not self._package.category:\n-            self._package.category = args[0]\n-\n-    @PackageMakerBase._omnivorous_setter('homepage', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n+        _extend_unique(self._package.categories, args)\n+\n+    @_omnivorous_setter('homepage', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n     def add_homepages(self, *args: Any) -> None:\n-        # XXX: convert into array\n-        if not self._package.homepage:\n-            self._package.homepage = args[0]\n-\n-    @PackageMakerBase._omnivorous_setter('license', str, nzs.strip, nzs.forbid_newlines)\n+        _extend_unique(self._package.homepages, args)\n+\n+    @_omnivorous_setter('license', str, nzs.strip, nzs.forbid_newlines)\n     def add_licenses(self, *args: Any) -> None:\n-        self._package.licenses.extend(args)\n-\n-    @PackageMakerBase._omnivorous_setter('download', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n+        _extend_unique(self._package.licenses, args)\n+\n+    @_omnivorous_setter('download', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n     def add_downloads(self, *args: Any) -> None:\n-        self._package.downloads.extend(_iter_unique(args, self._package.downloads))\n+        _extend_unique(self._package.downloads, args)\n \n     def set_flags(self, mask: int, is_set: bool = True) -> None:\n-        self._package.set_flag(mask, is_set)\n+        if is_set:\n+            self._package.flags |= mask\n+        else:\n+            self._package.flags &= ~mask\n \n",
        "source_code_with_indent": "\n    <DED>@PackageMakerBase._simple_setter('summary', str, nzs.strip)\n    def set_summary(self, summary: str) -> None:\n        <IND>self._package.comment = summary\n\n    <DED>@PackageMakerBase._omnivorous_setter('maintainer', str, nzs.strip, nzs.forbid_newlines, nzs.tolower)\n    def add_maintainers(self, *args: Any) -> None:\n        <IND>self._package.maintainers.extend(_iter_unique(args, self._package.maintainers))\n\n    <DED>@PackageMakerBase._omnivorous_setter('category', str, nzs.strip, nzs.forbid_newlines)\n    def add_categories(self, *args: Any) -> None:\n        # XXX: convert into array\n        <IND>if not self._package.category:\n            <IND>self._package.category = args[0]\n\n    <DED><DED>@PackageMakerBase._omnivorous_setter('homepage', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n    def add_homepages(self, *args: Any) -> None:\n        # XXX: convert into array\n        <IND>if not self._package.homepage:\n            <IND>self._package.homepage = args[0]\n\n    <DED><DED>@PackageMakerBase._omnivorous_setter('license', str, nzs.strip, nzs.forbid_newlines)\n    def add_licenses(self, *args: Any) -> None:\n        <IND>self._package.licenses.extend(args)\n\n    <DED>@PackageMakerBase._omnivorous_setter('download', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n    def add_downloads(self, *args: Any) -> None:\n        <IND>self._package.downloads.extend(_iter_unique(args, self._package.downloads))\n\n    <DED>def set_flags(self, mask: int, is_set: bool = True) -> None:\n        <IND>self._package.set_flag(mask, is_set)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>@_simple_setter('summary', str, nzs.strip)\n    def set_summary(self, summary: str) -> None:\n        <IND>self._package.summary = summary\n\n    <DED>@_omnivorous_setter('maintainer', str, nzs.strip, nzs.forbid_newlines, nzs.tolower)\n    def add_maintainers(self, *args: Any) -> None:\n        <IND>_extend_unique(self._package.maintainers, args)\n\n    <DED>@_omnivorous_setter('category', str, nzs.strip, nzs.forbid_newlines)\n    def add_categories(self, *args: Any) -> None:\n        <IND>_extend_unique(self._package.categories, args)\n\n    <DED>@_omnivorous_setter('homepage', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n    def add_homepages(self, *args: Any) -> None:\n        <IND>_extend_unique(self._package.homepages, args)\n\n    <DED>@_omnivorous_setter('license', str, nzs.strip, nzs.forbid_newlines)\n    def add_licenses(self, *args: Any) -> None:\n        <IND>_extend_unique(self._package.licenses, args)\n\n    <DED>@_omnivorous_setter('download', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n    def add_downloads(self, *args: Any) -> None:\n        <IND>_extend_unique(self._package.downloads, args)\n\n    <DED>def set_flags(self, mask: int, is_set: bool = True) -> None:\n        <IND>if is_set:\n            <IND>self._package.flags |= mask\n        <DED>else:\n            <IND>self._package.flags &= ~mask\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def unwrap(self) -> Package:\n        return self._package\n\n",
        "source_code_len": 64,
        "target_code": "\n    def spawn(self, repo: str, family: str, subrepo: Optional[str] = None, shadow: bool = False, default_maintainer: Optional[str] = None) -> Package:\n        if self._package.name is None:\n            raise RuntimeError('Attempt to spawn Package with unset name')\n        if self._package.version is None:\n            raise RuntimeError('Attempt to spawn Package with unset version')\n\n        maintainers: List[str] = self._package.maintainers if self._package.maintainers else [default_maintainer] if default_maintainer else []\n\n        return Package(\n            repo=repo,\n            family=family,\n            subrepo=self._package.subrepo or subrepo,\n\n            name=self._package.name,\n            basename=self._package.basename,\n\n            version=self._package.version,\n            origversion=self._package.version,\n            rawversion=self._package.rawversion if self._package.rawversion is not None else self._package.version,\n\n            arch=self._package.arch,\n\n            maintainers=maintainers,\n            category=self._package.categories[0] if self._package.categories else None,  # XXX: convert to array\n            comment=self._package.summary,\n            homepage=self._package.homepages[0] if self._package.homepages else None,  # XXX: convert to array\n            licenses=self._package.licenses,\n            downloads=self._package.downloads,\n\n            flags=self._package.flags,\n            shadow=shadow,\n\n            extrafields=self._package.extrafields,\n        )\n\n",
        "target_code_len": 1515,
        "diff_format": "@@ -209,4 +279,36 @@\n \n-    def unwrap(self) -> Package:\n-        return self._package\n+    def spawn(self, repo: str, family: str, subrepo: Optional[str] = None, shadow: bool = False, default_maintainer: Optional[str] = None) -> Package:\n+        if self._package.name is None:\n+            raise RuntimeError('Attempt to spawn Package with unset name')\n+        if self._package.version is None:\n+            raise RuntimeError('Attempt to spawn Package with unset version')\n+\n+        maintainers: List[str] = self._package.maintainers if self._package.maintainers else [default_maintainer] if default_maintainer else []\n+\n+        return Package(\n+            repo=repo,\n+            family=family,\n+            subrepo=self._package.subrepo or subrepo,\n+\n+            name=self._package.name,\n+            basename=self._package.basename,\n+\n+            version=self._package.version,\n+            origversion=self._package.version,\n+            rawversion=self._package.rawversion if self._package.rawversion is not None else self._package.version,\n+\n+            arch=self._package.arch,\n+\n+            maintainers=maintainers,\n+            category=self._package.categories[0] if self._package.categories else None,  # XXX: convert to array\n+            comment=self._package.summary,\n+            homepage=self._package.homepages[0] if self._package.homepages else None,  # XXX: convert to array\n+            licenses=self._package.licenses,\n+            downloads=self._package.downloads,\n+\n+            flags=self._package.flags,\n+            shadow=shadow,\n+\n+            extrafields=self._package.extrafields,\n+        )\n \n",
        "source_code_with_indent": "\n    <DED>def unwrap(self) -> Package:\n        <IND>return self._package\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def spawn(self, repo: str, family: str, subrepo: Optional[str] = None, shadow: bool = False, default_maintainer: Optional[str] = None) -> Package:\n        <IND>if self._package.name is None:\n            <IND>raise RuntimeError('Attempt to spawn Package with unset name')\n        <DED>if self._package.version is None:\n            <IND>raise RuntimeError('Attempt to spawn Package with unset version')\n\n        <DED>maintainers: List[str] = self._package.maintainers if self._package.maintainers else [default_maintainer] if default_maintainer else []\n\n        return Package(\n            repo=repo,\n            family=family,\n            subrepo=self._package.subrepo or subrepo,\n\n            name=self._package.name,\n            basename=self._package.basename,\n\n            version=self._package.version,\n            origversion=self._package.version,\n            rawversion=self._package.rawversion if self._package.rawversion is not None else self._package.version,\n\n            arch=self._package.arch,\n\n            maintainers=maintainers,\n            category=self._package.categories[0] if self._package.categories else None,  # XXX: convert to array\n            comment=self._package.summary,\n            homepage=self._package.homepages[0] if self._package.homepages else None,  # XXX: convert to array\n            licenses=self._package.licenses,\n            downloads=self._package.downloads,\n\n            flags=self._package.flags,\n            shadow=shadow,\n\n            extrafields=self._package.extrafields,\n        )\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "repology/repology-updater",
    "commit": "9f67d556944fe256c990593f673713e299feaf8a",
    "filename": "repology/packagemaker/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/repology-repology-updater/repology/packagemaker/__init__.py",
    "file_hunks_size": 17,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "repology/packagemaker/__init__.py:190:41 Incompatible parameter type [6]: Expected `PackageMakerBase` for 1st positional only parameter to call `PackageMakerBase._omnivorous_setter` but got `str`.",
    "message": " Expected `PackageMakerBase` for 1st positional only parameter to call `PackageMakerBase._omnivorous_setter` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 190,
    "warning_line": "    @PackageMakerBase._omnivorous_setter('homepage', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from functools import wraps\nfrom typing import Any, Callable, Iterable, Optional\n\nfrom repology.logger import Logger\nfrom repology.package import Package\nfrom repology.packagemaker import normalizers as nzs\n\n",
        "source_code_len": 208,
        "target_code": "from functools import wraps\nfrom typing import Any, Callable, Dict, Iterable, List, Optional, Type\n\nfrom repology.logger import Logger\nfrom repology.package import Package, PackageStatus\nfrom repology.packagemaker import normalizers as nzs\nfrom repology.packagemaker.normalizers import NormalizerFunction\n\n",
        "target_code_len": 306,
        "diff_format": "@@ -24,7 +22,8 @@\n from functools import wraps\n-from typing import Any, Callable, Iterable, Optional\n+from typing import Any, Callable, Dict, Iterable, List, Optional, Type\n \n from repology.logger import Logger\n-from repology.package import Package\n+from repology.package import Package, PackageStatus\n from repology.packagemaker import normalizers as nzs\n+from repology.packagemaker.normalizers import NormalizerFunction\n \n",
        "source_code_with_indent": "from functools import wraps\nfrom typing import Any, Callable, Iterable, Optional\n\nfrom repology.logger import Logger\nfrom repology.package import Package\nfrom repology.packagemaker import normalizers as nzs\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from functools import wraps\nfrom typing import Any, Callable, Dict, Iterable, List, Optional, Type\n\nfrom repology.logger import Logger\nfrom repology.package import Package, PackageStatus\nfrom repology.packagemaker import normalizers as nzs\nfrom repology.packagemaker.normalizers import NormalizerFunction\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _iter_unique(iterable, existing=None):\n    seen = set(existing) if existing else set()\n    for value in iterable:\n        if value not in seen:\n            seen.add(value)\n            yield value\n\n",
        "source_code_len": 202,
        "target_code": "\nclass PackageTemplate:\n    __slots__ = [\n        'subrepo',\n\n        'name',\n        'basename',\n\n        'version',\n        'origversion',\n        'rawversion',\n\n        'arch',\n        'summary',\n        'maintainers',\n        'categories',\n        'homepages',\n        'licenses',\n        'downloads',\n\n        'flags',\n\n        'extrafields',\n    ]\n\n    subrepo: Optional[str]\n\n    name: Optional[str]\n    basename: Optional[str]\n\n    version: Optional[str]\n    origversion: Optional[str]\n    rawversion: Optional[str]\n\n    arch: Optional[str]\n    summary: Optional[str]\n    maintainers: List[str]\n    categories: List[str]\n    homepages: List[str]\n    licenses: List[str]\n    downloads: List[str]\n\n    flags: int\n\n    extrafields: Dict[str, str]\n\n    def __init__(self) -> None:\n        self.subrepo = None\n\n        self.name = None\n        self.basename = None\n\n        self.version = None\n        self.origversion = None\n        self.rawversion = None\n\n        self.arch = None\n        self.summary = None\n        self.maintainers = []\n        self.categories = []\n        self.homepages = []\n        self.licenses = []\n        self.downloads = []\n\n        self.flags = 0\n\n        self.extrafields = {}\n\n",
        "target_code_len": 1212,
        "diff_format": "@@ -34,8 +33,68 @@\n \n-def _iter_unique(iterable, existing=None):\n-    seen = set(existing) if existing else set()\n-    for value in iterable:\n-        if value not in seen:\n-            seen.add(value)\n-            yield value\n+class PackageTemplate:\n+    __slots__ = [\n+        'subrepo',\n+\n+        'name',\n+        'basename',\n+\n+        'version',\n+        'origversion',\n+        'rawversion',\n+\n+        'arch',\n+        'summary',\n+        'maintainers',\n+        'categories',\n+        'homepages',\n+        'licenses',\n+        'downloads',\n+\n+        'flags',\n+\n+        'extrafields',\n+    ]\n+\n+    subrepo: Optional[str]\n+\n+    name: Optional[str]\n+    basename: Optional[str]\n+\n+    version: Optional[str]\n+    origversion: Optional[str]\n+    rawversion: Optional[str]\n+\n+    arch: Optional[str]\n+    summary: Optional[str]\n+    maintainers: List[str]\n+    categories: List[str]\n+    homepages: List[str]\n+    licenses: List[str]\n+    downloads: List[str]\n+\n+    flags: int\n+\n+    extrafields: Dict[str, str]\n+\n+    def __init__(self) -> None:\n+        self.subrepo = None\n+\n+        self.name = None\n+        self.basename = None\n+\n+        self.version = None\n+        self.origversion = None\n+        self.rawversion = None\n+\n+        self.arch = None\n+        self.summary = None\n+        self.maintainers = []\n+        self.categories = []\n+        self.homepages = []\n+        self.licenses = []\n+        self.downloads = []\n+\n+        self.flags = 0\n+\n+        self.extrafields = {}\n \n",
        "source_code_with_indent": "\ndef _iter_unique(iterable, existing=None):\n    <IND>seen = set(existing) if existing else set()\n    for value in iterable:\n        <IND>if value not in seen:\n            <IND>seen.add(value)\n            yield value\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nclass PackageTemplate:\n    <IND>__slots__ = [\n        'subrepo',\n\n        'name',\n        'basename',\n\n        'version',\n        'origversion',\n        'rawversion',\n\n        'arch',\n        'summary',\n        'maintainers',\n        'categories',\n        'homepages',\n        'licenses',\n        'downloads',\n\n        'flags',\n\n        'extrafields',\n    ]\n\n    subrepo: Optional[str]\n\n    name: Optional[str]\n    basename: Optional[str]\n\n    version: Optional[str]\n    origversion: Optional[str]\n    rawversion: Optional[str]\n\n    arch: Optional[str]\n    summary: Optional[str]\n    maintainers: List[str]\n    categories: List[str]\n    homepages: List[str]\n    licenses: List[str]\n    downloads: List[str]\n\n    flags: int\n\n    extrafields: Dict[str, str]\n\n    def __init__(self) -> None:\n        <IND>self.subrepo = None\n\n        self.name = None\n        self.basename = None\n\n        self.version = None\n        self.origversion = None\n        self.rawversion = None\n\n        self.arch = None\n        self.summary = None\n        self.maintainers = []\n        self.categories = []\n        self.homepages = []\n        self.licenses = []\n        self.downloads = []\n\n        self.flags = 0\n\n        self.extrafields = {}\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _omnivorous_setter(fieldname, want_type, *normalizers):  # noqa: N805\n        def inner(method):\n            @wraps(method)\n            def wrapper(self, *args):\n                values = self._normalize_args(args, fieldname, want_type, normalizers)\n                if values:\n                    return method(self, *values)\n            return wrapper\n        return inner\n\n    def _simple_setter(fieldname, want_type, *normalizers):  # noqa: N805\n        def inner(method):\n            @wraps(method)\n            def wrapper(self, arg, *other_args):\n                if arg is None:\n                    pass\n                elif isinstance(arg, str) and want_type is int or isinstance(arg, int) and want_type is str:\n                    arg = want_type(arg)\n                elif not isinstance(arg, want_type):\n                    raise RuntimeError('unexpected type {} for {} (expected {})'.format(arg.__class__.__name__, fieldname, want_type.__name__))\n                value = self._apply_normalizers(arg, fieldname, normalizers)\n                if value:\n                    return method(self, value, *other_args)\n            return wrapper\n        return inner\n\n",
        "source_code_len": 1176,
        "target_code": "\n\ndef _omnivorous_setter(fieldname: str, want_type: Type[Any], *normalizers: NormalizerFunction) -> Callable[[Callable[..., Any]], Any]:\n    def inner(method: Callable[..., Any]) -> Callable[..., Any]:\n        @wraps(method)\n        def wrapper(self: PackageMakerBase, *args: Any) -> Any:\n            values = self._normalize_args(args, fieldname, want_type, normalizers)\n            if values:\n                return method(self, *values)\n        return wrapper\n    return inner\n\n\ndef _simple_setter(fieldname: str, want_type: Type[Any], *normalizers: NormalizerFunction) -> Callable[[Callable[..., Any]], Any]:\n    def inner(method: Callable[..., Any]) -> Callable[..., Any]:\n        @wraps(method)\n        def wrapper(self: PackageMakerBase, arg: Any, *other_args: Any) -> Any:\n            if arg is None:\n                pass\n            elif isinstance(arg, str) and want_type is int or isinstance(arg, int) and want_type is str:\n                arg = want_type(arg)\n            elif not isinstance(arg, want_type):\n                raise RuntimeError('unexpected type {} for {} (expected {})'.format(arg.__class__.__name__, fieldname, want_type.__name__))\n            value = self._apply_normalizers(arg, fieldname, normalizers)\n            if value:\n                return method(self, value, *other_args)\n        return wrapper\n    return inner\n\n\ndef _extend_unique(existing: List[str], iterable: Iterable[str]) -> None:\n    seen = set(existing) if existing else set()\n\n    for value in iterable:\n        if value not in seen:\n            seen.add(value)\n            existing.append(value)\n\n",
        "target_code_len": 1598,
        "diff_format": "@@ -92,27 +151,38 @@\n \n-    def _omnivorous_setter(fieldname, want_type, *normalizers):  # noqa: N805\n-        def inner(method):\n-            @wraps(method)\n-            def wrapper(self, *args):\n-                values = self._normalize_args(args, fieldname, want_type, normalizers)\n-                if values:\n-                    return method(self, *values)\n-            return wrapper\n-        return inner\n-\n-    def _simple_setter(fieldname, want_type, *normalizers):  # noqa: N805\n-        def inner(method):\n-            @wraps(method)\n-            def wrapper(self, arg, *other_args):\n-                if arg is None:\n-                    pass\n-                elif isinstance(arg, str) and want_type is int or isinstance(arg, int) and want_type is str:\n-                    arg = want_type(arg)\n-                elif not isinstance(arg, want_type):\n-                    raise RuntimeError('unexpected type {} for {} (expected {})'.format(arg.__class__.__name__, fieldname, want_type.__name__))\n-                value = self._apply_normalizers(arg, fieldname, normalizers)\n-                if value:\n-                    return method(self, value, *other_args)\n-            return wrapper\n-        return inner\n+\n+def _omnivorous_setter(fieldname: str, want_type: Type[Any], *normalizers: NormalizerFunction) -> Callable[[Callable[..., Any]], Any]:\n+    def inner(method: Callable[..., Any]) -> Callable[..., Any]:\n+        @wraps(method)\n+        def wrapper(self: PackageMakerBase, *args: Any) -> Any:\n+            values = self._normalize_args(args, fieldname, want_type, normalizers)\n+            if values:\n+                return method(self, *values)\n+        return wrapper\n+    return inner\n+\n+\n+def _simple_setter(fieldname: str, want_type: Type[Any], *normalizers: NormalizerFunction) -> Callable[[Callable[..., Any]], Any]:\n+    def inner(method: Callable[..., Any]) -> Callable[..., Any]:\n+        @wraps(method)\n+        def wrapper(self: PackageMakerBase, arg: Any, *other_args: Any) -> Any:\n+            if arg is None:\n+                pass\n+            elif isinstance(arg, str) and want_type is int or isinstance(arg, int) and want_type is str:\n+                arg = want_type(arg)\n+            elif not isinstance(arg, want_type):\n+                raise RuntimeError('unexpected type {} for {} (expected {})'.format(arg.__class__.__name__, fieldname, want_type.__name__))\n+            value = self._apply_normalizers(arg, fieldname, normalizers)\n+            if value:\n+                return method(self, value, *other_args)\n+        return wrapper\n+    return inner\n+\n+\n+def _extend_unique(existing: List[str], iterable: Iterable[str]) -> None:\n+    seen = set(existing) if existing else set()\n+\n+    for value in iterable:\n+        if value not in seen:\n+            seen.add(value)\n+            existing.append(value)\n \n",
        "source_code_with_indent": "\n    <DED>def _omnivorous_setter(fieldname, want_type, *normalizers):  # noqa: N805\n        <IND>def inner(method):\n            <IND>@wraps(method)\n            def wrapper(self, *args):\n                <IND>values = self._normalize_args(args, fieldname, want_type, normalizers)\n                if values:\n                    <IND>return method(self, *values)\n            <DED><DED>return wrapper\n        <DED>return inner\n\n    <DED>def _simple_setter(fieldname, want_type, *normalizers):  # noqa: N805\n        <IND>def inner(method):\n            <IND>@wraps(method)\n            def wrapper(self, arg, *other_args):\n                <IND>if arg is None:\n                    <IND>pass\n                <DED>elif isinstance(arg, str) and want_type is int or isinstance(arg, int) and want_type is str:\n                    <IND>arg = want_type(arg)\n                <DED>elif not isinstance(arg, want_type):\n                    <IND>raise RuntimeError('unexpected type {} for {} (expected {})'.format(arg.__class__.__name__, fieldname, want_type.__name__))\n                <DED>value = self._apply_normalizers(arg, fieldname, normalizers)\n                if value:\n                    <IND>return method(self, value, *other_args)\n            <DED><DED>return wrapper\n        <DED>return inner\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n\n<DED><DED>def _omnivorous_setter(fieldname: str, want_type: Type[Any], *normalizers: NormalizerFunction) -> Callable[[Callable[..., Any]], Any]:\n    <IND>def inner(method: Callable[..., Any]) -> Callable[..., Any]:\n        <IND>@wraps(method)\n        def wrapper(self: PackageMakerBase, *args: Any) -> Any:\n            <IND>values = self._normalize_args(args, fieldname, want_type, normalizers)\n            if values:\n                <IND>return method(self, *values)\n        <DED><DED>return wrapper\n    <DED>return inner\n\n\n<DED>def _simple_setter(fieldname: str, want_type: Type[Any], *normalizers: NormalizerFunction) -> Callable[[Callable[..., Any]], Any]:\n    <IND>def inner(method: Callable[..., Any]) -> Callable[..., Any]:\n        <IND>@wraps(method)\n        def wrapper(self: PackageMakerBase, arg: Any, *other_args: Any) -> Any:\n            <IND>if arg is None:\n                <IND>pass\n            <DED>elif isinstance(arg, str) and want_type is int or isinstance(arg, int) and want_type is str:\n                <IND>arg = want_type(arg)\n            <DED>elif not isinstance(arg, want_type):\n                <IND>raise RuntimeError('unexpected type {} for {} (expected {})'.format(arg.__class__.__name__, fieldname, want_type.__name__))\n            <DED>value = self._apply_normalizers(arg, fieldname, normalizers)\n            if value:\n                <IND>return method(self, value, *other_args)\n        <DED><DED>return wrapper\n    <DED>return inner\n\n\n<DED>def _extend_unique(existing: List[str], iterable: Iterable[str]) -> None:\n    <IND>seen = set(existing) if existing else set()\n\n    for value in iterable:\n        <IND>if value not in seen:\n            <IND>seen.add(value)\n            existing.append(value)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "class PackageMaker(PackageMakerBase):\n    _package: Package\n    _ident: Optional[str]\n",
        "source_code_len": 86,
        "target_code": "class PackageMaker(PackageMakerBase):\n    _package: PackageTemplate\n    _ident: Optional[str]\n",
        "target_code_len": 94,
        "diff_format": "@@ -120,3 +190,3 @@\n class PackageMaker(PackageMakerBase):\n-    _package: Package\n+    _package: PackageTemplate\n     _ident: Optional[str]\n",
        "source_code_with_indent": "<DED><DED>class PackageMaker(PackageMakerBase):\n    <IND>_package: Package\n    _ident: Optional[str]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED><DED><DED>class PackageMaker(PackageMakerBase):\n    <IND>_package: PackageTemplate\n    _ident: Optional[str]\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        super(PackageMaker, self).__init__(logger)\n        self._package = Package()\n        self._ident = ident\n",
        "source_code_len": 113,
        "target_code": "        super(PackageMaker, self).__init__(logger)\n        self._package = PackageTemplate()\n        self._ident = ident\n",
        "target_code_len": 121,
        "diff_format": "@@ -127,3 +197,3 @@\n         super(PackageMaker, self).__init__(logger)\n-        self._package = Package()\n+        self._package = PackageTemplate()\n         self._ident = ident\n",
        "source_code_with_indent": "        <IND>super(PackageMaker, self).__init__(logger)\n        self._package = Package()\n        self._ident = ident\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>super(PackageMaker, self).__init__(logger)\n        self._package = PackageTemplate()\n        self._ident = ident\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    @PackageMakerBase._simple_setter('origin', str, nzs.strip, nzs.forbid_newlines)\n    def set_origin(self, origin: str) -> None:\n",
        "source_code_len": 132,
        "target_code": "\n    @_simple_setter('origin', str, nzs.strip, nzs.forbid_newlines)\n    def set_origin(self, origin: str) -> None:\n",
        "target_code_len": 115,
        "diff_format": "@@ -135,3 +205,3 @@\n \n-    @PackageMakerBase._simple_setter('origin', str, nzs.strip, nzs.forbid_newlines)\n+    @_simple_setter('origin', str, nzs.strip, nzs.forbid_newlines)\n     def set_origin(self, origin: str) -> None:\n",
        "source_code_with_indent": "\n    <DED>@PackageMakerBase._simple_setter('origin', str, nzs.strip, nzs.forbid_newlines)\n    def set_origin(self, origin: str) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>@_simple_setter('origin', str, nzs.strip, nzs.forbid_newlines)\n    def set_origin(self, origin: str) -> None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    @PackageMakerBase._simple_setter('name', str, nzs.strip, nzs.forbid_newlines)\n    def set_name(self, name: str) -> None:\n",
        "source_code_len": 126,
        "target_code": "\n    @_simple_setter('name', str, nzs.strip, nzs.forbid_newlines)\n    def set_name(self, name: str) -> None:\n",
        "target_code_len": 109,
        "diff_format": "@@ -140,3 +210,3 @@\n \n-    @PackageMakerBase._simple_setter('name', str, nzs.strip, nzs.forbid_newlines)\n+    @_simple_setter('name', str, nzs.strip, nzs.forbid_newlines)\n     def set_name(self, name: str) -> None:\n",
        "source_code_with_indent": "\n    <DED>@PackageMakerBase._simple_setter('name', str, nzs.strip, nzs.forbid_newlines)\n    def set_name(self, name: str) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>@_simple_setter('name', str, nzs.strip, nzs.forbid_newlines)\n    def set_name(self, name: str) -> None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    @PackageMakerBase._simple_setter('basename', str, nzs.strip, nzs.forbid_newlines)\n    def set_basename(self, basename: str) -> None:\n",
        "source_code_len": 138,
        "target_code": "\n    @_simple_setter('basename', str, nzs.strip, nzs.forbid_newlines)\n    def set_basename(self, basename: str) -> None:\n",
        "target_code_len": 121,
        "diff_format": "@@ -144,3 +214,3 @@\n \n-    @PackageMakerBase._simple_setter('basename', str, nzs.strip, nzs.forbid_newlines)\n+    @_simple_setter('basename', str, nzs.strip, nzs.forbid_newlines)\n     def set_basename(self, basename: str) -> None:\n",
        "source_code_with_indent": "\n    <DED>@PackageMakerBase._simple_setter('basename', str, nzs.strip, nzs.forbid_newlines)\n    def set_basename(self, basename: str) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>@_simple_setter('basename', str, nzs.strip, nzs.forbid_newlines)\n    def set_basename(self, basename: str) -> None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def prefix_name(self, prefix: str) -> None:\n        self._package.name = prefix + self._package.name\n\n    @PackageMakerBase._simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n    def set_version(self, version: str, version_normalizer: Optional[Callable[[str], str]] = None) -> None:\n",
        "source_code_len": 299,
        "target_code": "    def prefix_name(self, prefix: str) -> None:\n        assert(self._package.name)\n        self._package.name = prefix + self._package.name\n\n    @_simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n    def set_version(self, version: str, version_normalizer: Optional[Callable[[str], str]] = None) -> None:\n",
        "target_code_len": 317,
        "diff_format": "@@ -149,5 +219,6 @@\n     def prefix_name(self, prefix: str) -> None:\n+        assert(self._package.name)\n         self._package.name = prefix + self._package.name\n \n-    @PackageMakerBase._simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n+    @_simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n     def set_version(self, version: str, version_normalizer: Optional[Callable[[str], str]] = None) -> None:\n",
        "source_code_with_indent": "    <DED>def prefix_name(self, prefix: str) -> None:\n        <IND>self._package.name = prefix + self._package.name\n\n    <DED>@PackageMakerBase._simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n    def set_version(self, version: str, version_normalizer: Optional[Callable[[str], str]] = None) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def prefix_name(self, prefix: str) -> None:\n        <IND>assert(self._package.name)\n        self._package.name = prefix + self._package.name\n\n    <DED>@_simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n    def set_version(self, version: str, version_normalizer: Optional[Callable[[str], str]] = None) -> None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    @PackageMakerBase._simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n    def set_rawversion(self, rawversion: str) -> None:\n",
        "source_code_len": 141,
        "target_code": "\n    @_simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n    def set_rawversion(self, rawversion: str) -> None:\n",
        "target_code_len": 124,
        "diff_format": "@@ -157,3 +228,3 @@\n \n-    @PackageMakerBase._simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n+    @_simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n     def set_rawversion(self, rawversion: str) -> None:\n",
        "source_code_with_indent": "\n    <DED>@PackageMakerBase._simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n    def set_rawversion(self, rawversion: str) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>@_simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n    def set_rawversion(self, rawversion: str) -> None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    @PackageMakerBase._simple_setter('arch', str, nzs.strip, nzs.forbid_newlines)\n    def set_arch(self, arch: str) -> None:\n",
        "source_code_len": 126,
        "target_code": "\n    @_simple_setter('arch', str, nzs.strip, nzs.forbid_newlines)\n    def set_arch(self, arch: str) -> None:\n",
        "target_code_len": 109,
        "diff_format": "@@ -167,3 +238,3 @@\n \n-    @PackageMakerBase._simple_setter('arch', str, nzs.strip, nzs.forbid_newlines)\n+    @_simple_setter('arch', str, nzs.strip, nzs.forbid_newlines)\n     def set_arch(self, arch: str) -> None:\n",
        "source_code_with_indent": "\n    <DED>@PackageMakerBase._simple_setter('arch', str, nzs.strip, nzs.forbid_newlines)\n    def set_arch(self, arch: str) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>@_simple_setter('arch', str, nzs.strip, nzs.forbid_newlines)\n    def set_arch(self, arch: str) -> None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    @PackageMakerBase._simple_setter('subrepo', str, nzs.strip, nzs.forbid_newlines)\n    def set_subrepo(self, subrepo: str) -> None:\n",
        "source_code_len": 135,
        "target_code": "\n    @_simple_setter('subrepo', str, nzs.strip, nzs.forbid_newlines)\n    def set_subrepo(self, subrepo: str) -> None:\n",
        "target_code_len": 118,
        "diff_format": "@@ -171,3 +242,3 @@\n \n-    @PackageMakerBase._simple_setter('subrepo', str, nzs.strip, nzs.forbid_newlines)\n+    @_simple_setter('subrepo', str, nzs.strip, nzs.forbid_newlines)\n     def set_subrepo(self, subrepo: str) -> None:\n",
        "source_code_with_indent": "\n    <DED>@PackageMakerBase._simple_setter('subrepo', str, nzs.strip, nzs.forbid_newlines)\n    def set_subrepo(self, subrepo: str) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>@_simple_setter('subrepo', str, nzs.strip, nzs.forbid_newlines)\n    def set_subrepo(self, subrepo: str) -> None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    @PackageMakerBase._simple_setter('summary', str, nzs.strip)\n    def set_summary(self, summary: str) -> None:\n        self._package.comment = summary\n\n    @PackageMakerBase._omnivorous_setter('maintainer', str, nzs.strip, nzs.forbid_newlines, nzs.tolower)\n    def add_maintainers(self, *args: Any) -> None:\n        self._package.maintainers.extend(_iter_unique(args, self._package.maintainers))\n\n    @PackageMakerBase._omnivorous_setter('category', str, nzs.strip, nzs.forbid_newlines)\n    def add_categories(self, *args: Any) -> None:\n        # XXX: convert into array\n        if not self._package.category:\n            self._package.category = args[0]\n\n    @PackageMakerBase._omnivorous_setter('homepage', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n    def add_homepages(self, *args: Any) -> None:\n        # XXX: convert into array\n        if not self._package.homepage:\n            self._package.homepage = args[0]\n\n    @PackageMakerBase._omnivorous_setter('license', str, nzs.strip, nzs.forbid_newlines)\n    def add_licenses(self, *args: Any) -> None:\n        self._package.licenses.extend(args)\n\n    @PackageMakerBase._omnivorous_setter('download', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n    def add_downloads(self, *args: Any) -> None:\n        self._package.downloads.extend(_iter_unique(args, self._package.downloads))\n\n    def set_flags(self, mask: int, is_set: bool = True) -> None:\n        self._package.set_flag(mask, is_set)\n\n",
        "source_code_len": 1494,
        "target_code": "\n    @_simple_setter('summary', str, nzs.strip)\n    def set_summary(self, summary: str) -> None:\n        self._package.summary = summary\n\n    @_omnivorous_setter('maintainer', str, nzs.strip, nzs.forbid_newlines, nzs.tolower)\n    def add_maintainers(self, *args: Any) -> None:\n        _extend_unique(self._package.maintainers, args)\n\n    @_omnivorous_setter('category', str, nzs.strip, nzs.forbid_newlines)\n    def add_categories(self, *args: Any) -> None:\n        _extend_unique(self._package.categories, args)\n\n    @_omnivorous_setter('homepage', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n    def add_homepages(self, *args: Any) -> None:\n        _extend_unique(self._package.homepages, args)\n\n    @_omnivorous_setter('license', str, nzs.strip, nzs.forbid_newlines)\n    def add_licenses(self, *args: Any) -> None:\n        _extend_unique(self._package.licenses, args)\n\n    @_omnivorous_setter('download', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n    def add_downloads(self, *args: Any) -> None:\n        _extend_unique(self._package.downloads, args)\n\n    def set_flags(self, mask: int, is_set: bool = True) -> None:\n        if is_set:\n            self._package.flags |= mask\n        else:\n            self._package.flags &= ~mask\n\n",
        "target_code_len": 1281,
        "diff_format": "@@ -175,32 +246,31 @@\n \n-    @PackageMakerBase._simple_setter('summary', str, nzs.strip)\n+    @_simple_setter('summary', str, nzs.strip)\n     def set_summary(self, summary: str) -> None:\n-        self._package.comment = summary\n-\n-    @PackageMakerBase._omnivorous_setter('maintainer', str, nzs.strip, nzs.forbid_newlines, nzs.tolower)\n+        self._package.summary = summary\n+\n+    @_omnivorous_setter('maintainer', str, nzs.strip, nzs.forbid_newlines, nzs.tolower)\n     def add_maintainers(self, *args: Any) -> None:\n-        self._package.maintainers.extend(_iter_unique(args, self._package.maintainers))\n-\n-    @PackageMakerBase._omnivorous_setter('category', str, nzs.strip, nzs.forbid_newlines)\n+        _extend_unique(self._package.maintainers, args)\n+\n+    @_omnivorous_setter('category', str, nzs.strip, nzs.forbid_newlines)\n     def add_categories(self, *args: Any) -> None:\n-        # XXX: convert into array\n-        if not self._package.category:\n-            self._package.category = args[0]\n-\n-    @PackageMakerBase._omnivorous_setter('homepage', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n+        _extend_unique(self._package.categories, args)\n+\n+    @_omnivorous_setter('homepage', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n     def add_homepages(self, *args: Any) -> None:\n-        # XXX: convert into array\n-        if not self._package.homepage:\n-            self._package.homepage = args[0]\n-\n-    @PackageMakerBase._omnivorous_setter('license', str, nzs.strip, nzs.forbid_newlines)\n+        _extend_unique(self._package.homepages, args)\n+\n+    @_omnivorous_setter('license', str, nzs.strip, nzs.forbid_newlines)\n     def add_licenses(self, *args: Any) -> None:\n-        self._package.licenses.extend(args)\n-\n-    @PackageMakerBase._omnivorous_setter('download', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n+        _extend_unique(self._package.licenses, args)\n+\n+    @_omnivorous_setter('download', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n     def add_downloads(self, *args: Any) -> None:\n-        self._package.downloads.extend(_iter_unique(args, self._package.downloads))\n+        _extend_unique(self._package.downloads, args)\n \n     def set_flags(self, mask: int, is_set: bool = True) -> None:\n-        self._package.set_flag(mask, is_set)\n+        if is_set:\n+            self._package.flags |= mask\n+        else:\n+            self._package.flags &= ~mask\n \n",
        "source_code_with_indent": "\n    <DED>@PackageMakerBase._simple_setter('summary', str, nzs.strip)\n    def set_summary(self, summary: str) -> None:\n        <IND>self._package.comment = summary\n\n    <DED>@PackageMakerBase._omnivorous_setter('maintainer', str, nzs.strip, nzs.forbid_newlines, nzs.tolower)\n    def add_maintainers(self, *args: Any) -> None:\n        <IND>self._package.maintainers.extend(_iter_unique(args, self._package.maintainers))\n\n    <DED>@PackageMakerBase._omnivorous_setter('category', str, nzs.strip, nzs.forbid_newlines)\n    def add_categories(self, *args: Any) -> None:\n        # XXX: convert into array\n        <IND>if not self._package.category:\n            <IND>self._package.category = args[0]\n\n    <DED><DED>@PackageMakerBase._omnivorous_setter('homepage', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n    def add_homepages(self, *args: Any) -> None:\n        # XXX: convert into array\n        <IND>if not self._package.homepage:\n            <IND>self._package.homepage = args[0]\n\n    <DED><DED>@PackageMakerBase._omnivorous_setter('license', str, nzs.strip, nzs.forbid_newlines)\n    def add_licenses(self, *args: Any) -> None:\n        <IND>self._package.licenses.extend(args)\n\n    <DED>@PackageMakerBase._omnivorous_setter('download', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n    def add_downloads(self, *args: Any) -> None:\n        <IND>self._package.downloads.extend(_iter_unique(args, self._package.downloads))\n\n    <DED>def set_flags(self, mask: int, is_set: bool = True) -> None:\n        <IND>self._package.set_flag(mask, is_set)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>@_simple_setter('summary', str, nzs.strip)\n    def set_summary(self, summary: str) -> None:\n        <IND>self._package.summary = summary\n\n    <DED>@_omnivorous_setter('maintainer', str, nzs.strip, nzs.forbid_newlines, nzs.tolower)\n    def add_maintainers(self, *args: Any) -> None:\n        <IND>_extend_unique(self._package.maintainers, args)\n\n    <DED>@_omnivorous_setter('category', str, nzs.strip, nzs.forbid_newlines)\n    def add_categories(self, *args: Any) -> None:\n        <IND>_extend_unique(self._package.categories, args)\n\n    <DED>@_omnivorous_setter('homepage', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n    def add_homepages(self, *args: Any) -> None:\n        <IND>_extend_unique(self._package.homepages, args)\n\n    <DED>@_omnivorous_setter('license', str, nzs.strip, nzs.forbid_newlines)\n    def add_licenses(self, *args: Any) -> None:\n        <IND>_extend_unique(self._package.licenses, args)\n\n    <DED>@_omnivorous_setter('download', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n    def add_downloads(self, *args: Any) -> None:\n        <IND>_extend_unique(self._package.downloads, args)\n\n    <DED>def set_flags(self, mask: int, is_set: bool = True) -> None:\n        <IND>if is_set:\n            <IND>self._package.flags |= mask\n        <DED>else:\n            <IND>self._package.flags &= ~mask\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def unwrap(self) -> Package:\n        return self._package\n\n",
        "source_code_len": 64,
        "target_code": "\n    def spawn(self, repo: str, family: str, subrepo: Optional[str] = None, shadow: bool = False, default_maintainer: Optional[str] = None) -> Package:\n        if self._package.name is None:\n            raise RuntimeError('Attempt to spawn Package with unset name')\n        if self._package.version is None:\n            raise RuntimeError('Attempt to spawn Package with unset version')\n\n        maintainers: List[str] = self._package.maintainers if self._package.maintainers else [default_maintainer] if default_maintainer else []\n\n        return Package(\n            repo=repo,\n            family=family,\n            subrepo=self._package.subrepo or subrepo,\n\n            name=self._package.name,\n            basename=self._package.basename,\n\n            version=self._package.version,\n            origversion=self._package.version,\n            rawversion=self._package.rawversion if self._package.rawversion is not None else self._package.version,\n\n            arch=self._package.arch,\n\n            maintainers=maintainers,\n            category=self._package.categories[0] if self._package.categories else None,  # XXX: convert to array\n            comment=self._package.summary,\n            homepage=self._package.homepages[0] if self._package.homepages else None,  # XXX: convert to array\n            licenses=self._package.licenses,\n            downloads=self._package.downloads,\n\n            flags=self._package.flags,\n            shadow=shadow,\n\n            extrafields=self._package.extrafields,\n        )\n\n",
        "target_code_len": 1515,
        "diff_format": "@@ -209,4 +279,36 @@\n \n-    def unwrap(self) -> Package:\n-        return self._package\n+    def spawn(self, repo: str, family: str, subrepo: Optional[str] = None, shadow: bool = False, default_maintainer: Optional[str] = None) -> Package:\n+        if self._package.name is None:\n+            raise RuntimeError('Attempt to spawn Package with unset name')\n+        if self._package.version is None:\n+            raise RuntimeError('Attempt to spawn Package with unset version')\n+\n+        maintainers: List[str] = self._package.maintainers if self._package.maintainers else [default_maintainer] if default_maintainer else []\n+\n+        return Package(\n+            repo=repo,\n+            family=family,\n+            subrepo=self._package.subrepo or subrepo,\n+\n+            name=self._package.name,\n+            basename=self._package.basename,\n+\n+            version=self._package.version,\n+            origversion=self._package.version,\n+            rawversion=self._package.rawversion if self._package.rawversion is not None else self._package.version,\n+\n+            arch=self._package.arch,\n+\n+            maintainers=maintainers,\n+            category=self._package.categories[0] if self._package.categories else None,  # XXX: convert to array\n+            comment=self._package.summary,\n+            homepage=self._package.homepages[0] if self._package.homepages else None,  # XXX: convert to array\n+            licenses=self._package.licenses,\n+            downloads=self._package.downloads,\n+\n+            flags=self._package.flags,\n+            shadow=shadow,\n+\n+            extrafields=self._package.extrafields,\n+        )\n \n",
        "source_code_with_indent": "\n    <DED>def unwrap(self) -> Package:\n        <IND>return self._package\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def spawn(self, repo: str, family: str, subrepo: Optional[str] = None, shadow: bool = False, default_maintainer: Optional[str] = None) -> Package:\n        <IND>if self._package.name is None:\n            <IND>raise RuntimeError('Attempt to spawn Package with unset name')\n        <DED>if self._package.version is None:\n            <IND>raise RuntimeError('Attempt to spawn Package with unset version')\n\n        <DED>maintainers: List[str] = self._package.maintainers if self._package.maintainers else [default_maintainer] if default_maintainer else []\n\n        return Package(\n            repo=repo,\n            family=family,\n            subrepo=self._package.subrepo or subrepo,\n\n            name=self._package.name,\n            basename=self._package.basename,\n\n            version=self._package.version,\n            origversion=self._package.version,\n            rawversion=self._package.rawversion if self._package.rawversion is not None else self._package.version,\n\n            arch=self._package.arch,\n\n            maintainers=maintainers,\n            category=self._package.categories[0] if self._package.categories else None,  # XXX: convert to array\n            comment=self._package.summary,\n            homepage=self._package.homepages[0] if self._package.homepages else None,  # XXX: convert to array\n            licenses=self._package.licenses,\n            downloads=self._package.downloads,\n\n            flags=self._package.flags,\n            shadow=shadow,\n\n            extrafields=self._package.extrafields,\n        )\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "repology/repology-updater",
    "commit": "9f67d556944fe256c990593f673713e299feaf8a",
    "filename": "repology/packagemaker/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/repology-repology-updater/repology/packagemaker/__init__.py",
    "file_hunks_size": 17,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "repology/packagemaker/__init__.py:196:41 Incompatible parameter type [6]: Expected `PackageMakerBase` for 1st positional only parameter to call `PackageMakerBase._omnivorous_setter` but got `str`.",
    "message": " Expected `PackageMakerBase` for 1st positional only parameter to call `PackageMakerBase._omnivorous_setter` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 196,
    "warning_line": "    @PackageMakerBase._omnivorous_setter('license', str, nzs.strip, nzs.forbid_newlines)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from functools import wraps\nfrom typing import Any, Callable, Iterable, Optional\n\nfrom repology.logger import Logger\nfrom repology.package import Package\nfrom repology.packagemaker import normalizers as nzs\n\n",
        "source_code_len": 208,
        "target_code": "from functools import wraps\nfrom typing import Any, Callable, Dict, Iterable, List, Optional, Type\n\nfrom repology.logger import Logger\nfrom repology.package import Package, PackageStatus\nfrom repology.packagemaker import normalizers as nzs\nfrom repology.packagemaker.normalizers import NormalizerFunction\n\n",
        "target_code_len": 306,
        "diff_format": "@@ -24,7 +22,8 @@\n from functools import wraps\n-from typing import Any, Callable, Iterable, Optional\n+from typing import Any, Callable, Dict, Iterable, List, Optional, Type\n \n from repology.logger import Logger\n-from repology.package import Package\n+from repology.package import Package, PackageStatus\n from repology.packagemaker import normalizers as nzs\n+from repology.packagemaker.normalizers import NormalizerFunction\n \n",
        "source_code_with_indent": "from functools import wraps\nfrom typing import Any, Callable, Iterable, Optional\n\nfrom repology.logger import Logger\nfrom repology.package import Package\nfrom repology.packagemaker import normalizers as nzs\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from functools import wraps\nfrom typing import Any, Callable, Dict, Iterable, List, Optional, Type\n\nfrom repology.logger import Logger\nfrom repology.package import Package, PackageStatus\nfrom repology.packagemaker import normalizers as nzs\nfrom repology.packagemaker.normalizers import NormalizerFunction\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _iter_unique(iterable, existing=None):\n    seen = set(existing) if existing else set()\n    for value in iterable:\n        if value not in seen:\n            seen.add(value)\n            yield value\n\n",
        "source_code_len": 202,
        "target_code": "\nclass PackageTemplate:\n    __slots__ = [\n        'subrepo',\n\n        'name',\n        'basename',\n\n        'version',\n        'origversion',\n        'rawversion',\n\n        'arch',\n        'summary',\n        'maintainers',\n        'categories',\n        'homepages',\n        'licenses',\n        'downloads',\n\n        'flags',\n\n        'extrafields',\n    ]\n\n    subrepo: Optional[str]\n\n    name: Optional[str]\n    basename: Optional[str]\n\n    version: Optional[str]\n    origversion: Optional[str]\n    rawversion: Optional[str]\n\n    arch: Optional[str]\n    summary: Optional[str]\n    maintainers: List[str]\n    categories: List[str]\n    homepages: List[str]\n    licenses: List[str]\n    downloads: List[str]\n\n    flags: int\n\n    extrafields: Dict[str, str]\n\n    def __init__(self) -> None:\n        self.subrepo = None\n\n        self.name = None\n        self.basename = None\n\n        self.version = None\n        self.origversion = None\n        self.rawversion = None\n\n        self.arch = None\n        self.summary = None\n        self.maintainers = []\n        self.categories = []\n        self.homepages = []\n        self.licenses = []\n        self.downloads = []\n\n        self.flags = 0\n\n        self.extrafields = {}\n\n",
        "target_code_len": 1212,
        "diff_format": "@@ -34,8 +33,68 @@\n \n-def _iter_unique(iterable, existing=None):\n-    seen = set(existing) if existing else set()\n-    for value in iterable:\n-        if value not in seen:\n-            seen.add(value)\n-            yield value\n+class PackageTemplate:\n+    __slots__ = [\n+        'subrepo',\n+\n+        'name',\n+        'basename',\n+\n+        'version',\n+        'origversion',\n+        'rawversion',\n+\n+        'arch',\n+        'summary',\n+        'maintainers',\n+        'categories',\n+        'homepages',\n+        'licenses',\n+        'downloads',\n+\n+        'flags',\n+\n+        'extrafields',\n+    ]\n+\n+    subrepo: Optional[str]\n+\n+    name: Optional[str]\n+    basename: Optional[str]\n+\n+    version: Optional[str]\n+    origversion: Optional[str]\n+    rawversion: Optional[str]\n+\n+    arch: Optional[str]\n+    summary: Optional[str]\n+    maintainers: List[str]\n+    categories: List[str]\n+    homepages: List[str]\n+    licenses: List[str]\n+    downloads: List[str]\n+\n+    flags: int\n+\n+    extrafields: Dict[str, str]\n+\n+    def __init__(self) -> None:\n+        self.subrepo = None\n+\n+        self.name = None\n+        self.basename = None\n+\n+        self.version = None\n+        self.origversion = None\n+        self.rawversion = None\n+\n+        self.arch = None\n+        self.summary = None\n+        self.maintainers = []\n+        self.categories = []\n+        self.homepages = []\n+        self.licenses = []\n+        self.downloads = []\n+\n+        self.flags = 0\n+\n+        self.extrafields = {}\n \n",
        "source_code_with_indent": "\ndef _iter_unique(iterable, existing=None):\n    <IND>seen = set(existing) if existing else set()\n    for value in iterable:\n        <IND>if value not in seen:\n            <IND>seen.add(value)\n            yield value\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nclass PackageTemplate:\n    <IND>__slots__ = [\n        'subrepo',\n\n        'name',\n        'basename',\n\n        'version',\n        'origversion',\n        'rawversion',\n\n        'arch',\n        'summary',\n        'maintainers',\n        'categories',\n        'homepages',\n        'licenses',\n        'downloads',\n\n        'flags',\n\n        'extrafields',\n    ]\n\n    subrepo: Optional[str]\n\n    name: Optional[str]\n    basename: Optional[str]\n\n    version: Optional[str]\n    origversion: Optional[str]\n    rawversion: Optional[str]\n\n    arch: Optional[str]\n    summary: Optional[str]\n    maintainers: List[str]\n    categories: List[str]\n    homepages: List[str]\n    licenses: List[str]\n    downloads: List[str]\n\n    flags: int\n\n    extrafields: Dict[str, str]\n\n    def __init__(self) -> None:\n        <IND>self.subrepo = None\n\n        self.name = None\n        self.basename = None\n\n        self.version = None\n        self.origversion = None\n        self.rawversion = None\n\n        self.arch = None\n        self.summary = None\n        self.maintainers = []\n        self.categories = []\n        self.homepages = []\n        self.licenses = []\n        self.downloads = []\n\n        self.flags = 0\n\n        self.extrafields = {}\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _omnivorous_setter(fieldname, want_type, *normalizers):  # noqa: N805\n        def inner(method):\n            @wraps(method)\n            def wrapper(self, *args):\n                values = self._normalize_args(args, fieldname, want_type, normalizers)\n                if values:\n                    return method(self, *values)\n            return wrapper\n        return inner\n\n    def _simple_setter(fieldname, want_type, *normalizers):  # noqa: N805\n        def inner(method):\n            @wraps(method)\n            def wrapper(self, arg, *other_args):\n                if arg is None:\n                    pass\n                elif isinstance(arg, str) and want_type is int or isinstance(arg, int) and want_type is str:\n                    arg = want_type(arg)\n                elif not isinstance(arg, want_type):\n                    raise RuntimeError('unexpected type {} for {} (expected {})'.format(arg.__class__.__name__, fieldname, want_type.__name__))\n                value = self._apply_normalizers(arg, fieldname, normalizers)\n                if value:\n                    return method(self, value, *other_args)\n            return wrapper\n        return inner\n\n",
        "source_code_len": 1176,
        "target_code": "\n\ndef _omnivorous_setter(fieldname: str, want_type: Type[Any], *normalizers: NormalizerFunction) -> Callable[[Callable[..., Any]], Any]:\n    def inner(method: Callable[..., Any]) -> Callable[..., Any]:\n        @wraps(method)\n        def wrapper(self: PackageMakerBase, *args: Any) -> Any:\n            values = self._normalize_args(args, fieldname, want_type, normalizers)\n            if values:\n                return method(self, *values)\n        return wrapper\n    return inner\n\n\ndef _simple_setter(fieldname: str, want_type: Type[Any], *normalizers: NormalizerFunction) -> Callable[[Callable[..., Any]], Any]:\n    def inner(method: Callable[..., Any]) -> Callable[..., Any]:\n        @wraps(method)\n        def wrapper(self: PackageMakerBase, arg: Any, *other_args: Any) -> Any:\n            if arg is None:\n                pass\n            elif isinstance(arg, str) and want_type is int or isinstance(arg, int) and want_type is str:\n                arg = want_type(arg)\n            elif not isinstance(arg, want_type):\n                raise RuntimeError('unexpected type {} for {} (expected {})'.format(arg.__class__.__name__, fieldname, want_type.__name__))\n            value = self._apply_normalizers(arg, fieldname, normalizers)\n            if value:\n                return method(self, value, *other_args)\n        return wrapper\n    return inner\n\n\ndef _extend_unique(existing: List[str], iterable: Iterable[str]) -> None:\n    seen = set(existing) if existing else set()\n\n    for value in iterable:\n        if value not in seen:\n            seen.add(value)\n            existing.append(value)\n\n",
        "target_code_len": 1598,
        "diff_format": "@@ -92,27 +151,38 @@\n \n-    def _omnivorous_setter(fieldname, want_type, *normalizers):  # noqa: N805\n-        def inner(method):\n-            @wraps(method)\n-            def wrapper(self, *args):\n-                values = self._normalize_args(args, fieldname, want_type, normalizers)\n-                if values:\n-                    return method(self, *values)\n-            return wrapper\n-        return inner\n-\n-    def _simple_setter(fieldname, want_type, *normalizers):  # noqa: N805\n-        def inner(method):\n-            @wraps(method)\n-            def wrapper(self, arg, *other_args):\n-                if arg is None:\n-                    pass\n-                elif isinstance(arg, str) and want_type is int or isinstance(arg, int) and want_type is str:\n-                    arg = want_type(arg)\n-                elif not isinstance(arg, want_type):\n-                    raise RuntimeError('unexpected type {} for {} (expected {})'.format(arg.__class__.__name__, fieldname, want_type.__name__))\n-                value = self._apply_normalizers(arg, fieldname, normalizers)\n-                if value:\n-                    return method(self, value, *other_args)\n-            return wrapper\n-        return inner\n+\n+def _omnivorous_setter(fieldname: str, want_type: Type[Any], *normalizers: NormalizerFunction) -> Callable[[Callable[..., Any]], Any]:\n+    def inner(method: Callable[..., Any]) -> Callable[..., Any]:\n+        @wraps(method)\n+        def wrapper(self: PackageMakerBase, *args: Any) -> Any:\n+            values = self._normalize_args(args, fieldname, want_type, normalizers)\n+            if values:\n+                return method(self, *values)\n+        return wrapper\n+    return inner\n+\n+\n+def _simple_setter(fieldname: str, want_type: Type[Any], *normalizers: NormalizerFunction) -> Callable[[Callable[..., Any]], Any]:\n+    def inner(method: Callable[..., Any]) -> Callable[..., Any]:\n+        @wraps(method)\n+        def wrapper(self: PackageMakerBase, arg: Any, *other_args: Any) -> Any:\n+            if arg is None:\n+                pass\n+            elif isinstance(arg, str) and want_type is int or isinstance(arg, int) and want_type is str:\n+                arg = want_type(arg)\n+            elif not isinstance(arg, want_type):\n+                raise RuntimeError('unexpected type {} for {} (expected {})'.format(arg.__class__.__name__, fieldname, want_type.__name__))\n+            value = self._apply_normalizers(arg, fieldname, normalizers)\n+            if value:\n+                return method(self, value, *other_args)\n+        return wrapper\n+    return inner\n+\n+\n+def _extend_unique(existing: List[str], iterable: Iterable[str]) -> None:\n+    seen = set(existing) if existing else set()\n+\n+    for value in iterable:\n+        if value not in seen:\n+            seen.add(value)\n+            existing.append(value)\n \n",
        "source_code_with_indent": "\n    <DED>def _omnivorous_setter(fieldname, want_type, *normalizers):  # noqa: N805\n        <IND>def inner(method):\n            <IND>@wraps(method)\n            def wrapper(self, *args):\n                <IND>values = self._normalize_args(args, fieldname, want_type, normalizers)\n                if values:\n                    <IND>return method(self, *values)\n            <DED><DED>return wrapper\n        <DED>return inner\n\n    <DED>def _simple_setter(fieldname, want_type, *normalizers):  # noqa: N805\n        <IND>def inner(method):\n            <IND>@wraps(method)\n            def wrapper(self, arg, *other_args):\n                <IND>if arg is None:\n                    <IND>pass\n                <DED>elif isinstance(arg, str) and want_type is int or isinstance(arg, int) and want_type is str:\n                    <IND>arg = want_type(arg)\n                <DED>elif not isinstance(arg, want_type):\n                    <IND>raise RuntimeError('unexpected type {} for {} (expected {})'.format(arg.__class__.__name__, fieldname, want_type.__name__))\n                <DED>value = self._apply_normalizers(arg, fieldname, normalizers)\n                if value:\n                    <IND>return method(self, value, *other_args)\n            <DED><DED>return wrapper\n        <DED>return inner\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n\n<DED><DED>def _omnivorous_setter(fieldname: str, want_type: Type[Any], *normalizers: NormalizerFunction) -> Callable[[Callable[..., Any]], Any]:\n    <IND>def inner(method: Callable[..., Any]) -> Callable[..., Any]:\n        <IND>@wraps(method)\n        def wrapper(self: PackageMakerBase, *args: Any) -> Any:\n            <IND>values = self._normalize_args(args, fieldname, want_type, normalizers)\n            if values:\n                <IND>return method(self, *values)\n        <DED><DED>return wrapper\n    <DED>return inner\n\n\n<DED>def _simple_setter(fieldname: str, want_type: Type[Any], *normalizers: NormalizerFunction) -> Callable[[Callable[..., Any]], Any]:\n    <IND>def inner(method: Callable[..., Any]) -> Callable[..., Any]:\n        <IND>@wraps(method)\n        def wrapper(self: PackageMakerBase, arg: Any, *other_args: Any) -> Any:\n            <IND>if arg is None:\n                <IND>pass\n            <DED>elif isinstance(arg, str) and want_type is int or isinstance(arg, int) and want_type is str:\n                <IND>arg = want_type(arg)\n            <DED>elif not isinstance(arg, want_type):\n                <IND>raise RuntimeError('unexpected type {} for {} (expected {})'.format(arg.__class__.__name__, fieldname, want_type.__name__))\n            <DED>value = self._apply_normalizers(arg, fieldname, normalizers)\n            if value:\n                <IND>return method(self, value, *other_args)\n        <DED><DED>return wrapper\n    <DED>return inner\n\n\n<DED>def _extend_unique(existing: List[str], iterable: Iterable[str]) -> None:\n    <IND>seen = set(existing) if existing else set()\n\n    for value in iterable:\n        <IND>if value not in seen:\n            <IND>seen.add(value)\n            existing.append(value)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "class PackageMaker(PackageMakerBase):\n    _package: Package\n    _ident: Optional[str]\n",
        "source_code_len": 86,
        "target_code": "class PackageMaker(PackageMakerBase):\n    _package: PackageTemplate\n    _ident: Optional[str]\n",
        "target_code_len": 94,
        "diff_format": "@@ -120,3 +190,3 @@\n class PackageMaker(PackageMakerBase):\n-    _package: Package\n+    _package: PackageTemplate\n     _ident: Optional[str]\n",
        "source_code_with_indent": "<DED><DED>class PackageMaker(PackageMakerBase):\n    <IND>_package: Package\n    _ident: Optional[str]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED><DED><DED>class PackageMaker(PackageMakerBase):\n    <IND>_package: PackageTemplate\n    _ident: Optional[str]\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        super(PackageMaker, self).__init__(logger)\n        self._package = Package()\n        self._ident = ident\n",
        "source_code_len": 113,
        "target_code": "        super(PackageMaker, self).__init__(logger)\n        self._package = PackageTemplate()\n        self._ident = ident\n",
        "target_code_len": 121,
        "diff_format": "@@ -127,3 +197,3 @@\n         super(PackageMaker, self).__init__(logger)\n-        self._package = Package()\n+        self._package = PackageTemplate()\n         self._ident = ident\n",
        "source_code_with_indent": "        <IND>super(PackageMaker, self).__init__(logger)\n        self._package = Package()\n        self._ident = ident\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>super(PackageMaker, self).__init__(logger)\n        self._package = PackageTemplate()\n        self._ident = ident\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    @PackageMakerBase._simple_setter('origin', str, nzs.strip, nzs.forbid_newlines)\n    def set_origin(self, origin: str) -> None:\n",
        "source_code_len": 132,
        "target_code": "\n    @_simple_setter('origin', str, nzs.strip, nzs.forbid_newlines)\n    def set_origin(self, origin: str) -> None:\n",
        "target_code_len": 115,
        "diff_format": "@@ -135,3 +205,3 @@\n \n-    @PackageMakerBase._simple_setter('origin', str, nzs.strip, nzs.forbid_newlines)\n+    @_simple_setter('origin', str, nzs.strip, nzs.forbid_newlines)\n     def set_origin(self, origin: str) -> None:\n",
        "source_code_with_indent": "\n    <DED>@PackageMakerBase._simple_setter('origin', str, nzs.strip, nzs.forbid_newlines)\n    def set_origin(self, origin: str) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>@_simple_setter('origin', str, nzs.strip, nzs.forbid_newlines)\n    def set_origin(self, origin: str) -> None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    @PackageMakerBase._simple_setter('name', str, nzs.strip, nzs.forbid_newlines)\n    def set_name(self, name: str) -> None:\n",
        "source_code_len": 126,
        "target_code": "\n    @_simple_setter('name', str, nzs.strip, nzs.forbid_newlines)\n    def set_name(self, name: str) -> None:\n",
        "target_code_len": 109,
        "diff_format": "@@ -140,3 +210,3 @@\n \n-    @PackageMakerBase._simple_setter('name', str, nzs.strip, nzs.forbid_newlines)\n+    @_simple_setter('name', str, nzs.strip, nzs.forbid_newlines)\n     def set_name(self, name: str) -> None:\n",
        "source_code_with_indent": "\n    <DED>@PackageMakerBase._simple_setter('name', str, nzs.strip, nzs.forbid_newlines)\n    def set_name(self, name: str) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>@_simple_setter('name', str, nzs.strip, nzs.forbid_newlines)\n    def set_name(self, name: str) -> None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    @PackageMakerBase._simple_setter('basename', str, nzs.strip, nzs.forbid_newlines)\n    def set_basename(self, basename: str) -> None:\n",
        "source_code_len": 138,
        "target_code": "\n    @_simple_setter('basename', str, nzs.strip, nzs.forbid_newlines)\n    def set_basename(self, basename: str) -> None:\n",
        "target_code_len": 121,
        "diff_format": "@@ -144,3 +214,3 @@\n \n-    @PackageMakerBase._simple_setter('basename', str, nzs.strip, nzs.forbid_newlines)\n+    @_simple_setter('basename', str, nzs.strip, nzs.forbid_newlines)\n     def set_basename(self, basename: str) -> None:\n",
        "source_code_with_indent": "\n    <DED>@PackageMakerBase._simple_setter('basename', str, nzs.strip, nzs.forbid_newlines)\n    def set_basename(self, basename: str) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>@_simple_setter('basename', str, nzs.strip, nzs.forbid_newlines)\n    def set_basename(self, basename: str) -> None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def prefix_name(self, prefix: str) -> None:\n        self._package.name = prefix + self._package.name\n\n    @PackageMakerBase._simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n    def set_version(self, version: str, version_normalizer: Optional[Callable[[str], str]] = None) -> None:\n",
        "source_code_len": 299,
        "target_code": "    def prefix_name(self, prefix: str) -> None:\n        assert(self._package.name)\n        self._package.name = prefix + self._package.name\n\n    @_simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n    def set_version(self, version: str, version_normalizer: Optional[Callable[[str], str]] = None) -> None:\n",
        "target_code_len": 317,
        "diff_format": "@@ -149,5 +219,6 @@\n     def prefix_name(self, prefix: str) -> None:\n+        assert(self._package.name)\n         self._package.name = prefix + self._package.name\n \n-    @PackageMakerBase._simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n+    @_simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n     def set_version(self, version: str, version_normalizer: Optional[Callable[[str], str]] = None) -> None:\n",
        "source_code_with_indent": "    <DED>def prefix_name(self, prefix: str) -> None:\n        <IND>self._package.name = prefix + self._package.name\n\n    <DED>@PackageMakerBase._simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n    def set_version(self, version: str, version_normalizer: Optional[Callable[[str], str]] = None) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def prefix_name(self, prefix: str) -> None:\n        <IND>assert(self._package.name)\n        self._package.name = prefix + self._package.name\n\n    <DED>@_simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n    def set_version(self, version: str, version_normalizer: Optional[Callable[[str], str]] = None) -> None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    @PackageMakerBase._simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n    def set_rawversion(self, rawversion: str) -> None:\n",
        "source_code_len": 141,
        "target_code": "\n    @_simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n    def set_rawversion(self, rawversion: str) -> None:\n",
        "target_code_len": 124,
        "diff_format": "@@ -157,3 +228,3 @@\n \n-    @PackageMakerBase._simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n+    @_simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n     def set_rawversion(self, rawversion: str) -> None:\n",
        "source_code_with_indent": "\n    <DED>@PackageMakerBase._simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n    def set_rawversion(self, rawversion: str) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>@_simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n    def set_rawversion(self, rawversion: str) -> None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    @PackageMakerBase._simple_setter('arch', str, nzs.strip, nzs.forbid_newlines)\n    def set_arch(self, arch: str) -> None:\n",
        "source_code_len": 126,
        "target_code": "\n    @_simple_setter('arch', str, nzs.strip, nzs.forbid_newlines)\n    def set_arch(self, arch: str) -> None:\n",
        "target_code_len": 109,
        "diff_format": "@@ -167,3 +238,3 @@\n \n-    @PackageMakerBase._simple_setter('arch', str, nzs.strip, nzs.forbid_newlines)\n+    @_simple_setter('arch', str, nzs.strip, nzs.forbid_newlines)\n     def set_arch(self, arch: str) -> None:\n",
        "source_code_with_indent": "\n    <DED>@PackageMakerBase._simple_setter('arch', str, nzs.strip, nzs.forbid_newlines)\n    def set_arch(self, arch: str) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>@_simple_setter('arch', str, nzs.strip, nzs.forbid_newlines)\n    def set_arch(self, arch: str) -> None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    @PackageMakerBase._simple_setter('subrepo', str, nzs.strip, nzs.forbid_newlines)\n    def set_subrepo(self, subrepo: str) -> None:\n",
        "source_code_len": 135,
        "target_code": "\n    @_simple_setter('subrepo', str, nzs.strip, nzs.forbid_newlines)\n    def set_subrepo(self, subrepo: str) -> None:\n",
        "target_code_len": 118,
        "diff_format": "@@ -171,3 +242,3 @@\n \n-    @PackageMakerBase._simple_setter('subrepo', str, nzs.strip, nzs.forbid_newlines)\n+    @_simple_setter('subrepo', str, nzs.strip, nzs.forbid_newlines)\n     def set_subrepo(self, subrepo: str) -> None:\n",
        "source_code_with_indent": "\n    <DED>@PackageMakerBase._simple_setter('subrepo', str, nzs.strip, nzs.forbid_newlines)\n    def set_subrepo(self, subrepo: str) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>@_simple_setter('subrepo', str, nzs.strip, nzs.forbid_newlines)\n    def set_subrepo(self, subrepo: str) -> None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    @PackageMakerBase._simple_setter('summary', str, nzs.strip)\n    def set_summary(self, summary: str) -> None:\n        self._package.comment = summary\n\n    @PackageMakerBase._omnivorous_setter('maintainer', str, nzs.strip, nzs.forbid_newlines, nzs.tolower)\n    def add_maintainers(self, *args: Any) -> None:\n        self._package.maintainers.extend(_iter_unique(args, self._package.maintainers))\n\n    @PackageMakerBase._omnivorous_setter('category', str, nzs.strip, nzs.forbid_newlines)\n    def add_categories(self, *args: Any) -> None:\n        # XXX: convert into array\n        if not self._package.category:\n            self._package.category = args[0]\n\n    @PackageMakerBase._omnivorous_setter('homepage', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n    def add_homepages(self, *args: Any) -> None:\n        # XXX: convert into array\n        if not self._package.homepage:\n            self._package.homepage = args[0]\n\n    @PackageMakerBase._omnivorous_setter('license', str, nzs.strip, nzs.forbid_newlines)\n    def add_licenses(self, *args: Any) -> None:\n        self._package.licenses.extend(args)\n\n    @PackageMakerBase._omnivorous_setter('download', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n    def add_downloads(self, *args: Any) -> None:\n        self._package.downloads.extend(_iter_unique(args, self._package.downloads))\n\n    def set_flags(self, mask: int, is_set: bool = True) -> None:\n        self._package.set_flag(mask, is_set)\n\n",
        "source_code_len": 1494,
        "target_code": "\n    @_simple_setter('summary', str, nzs.strip)\n    def set_summary(self, summary: str) -> None:\n        self._package.summary = summary\n\n    @_omnivorous_setter('maintainer', str, nzs.strip, nzs.forbid_newlines, nzs.tolower)\n    def add_maintainers(self, *args: Any) -> None:\n        _extend_unique(self._package.maintainers, args)\n\n    @_omnivorous_setter('category', str, nzs.strip, nzs.forbid_newlines)\n    def add_categories(self, *args: Any) -> None:\n        _extend_unique(self._package.categories, args)\n\n    @_omnivorous_setter('homepage', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n    def add_homepages(self, *args: Any) -> None:\n        _extend_unique(self._package.homepages, args)\n\n    @_omnivorous_setter('license', str, nzs.strip, nzs.forbid_newlines)\n    def add_licenses(self, *args: Any) -> None:\n        _extend_unique(self._package.licenses, args)\n\n    @_omnivorous_setter('download', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n    def add_downloads(self, *args: Any) -> None:\n        _extend_unique(self._package.downloads, args)\n\n    def set_flags(self, mask: int, is_set: bool = True) -> None:\n        if is_set:\n            self._package.flags |= mask\n        else:\n            self._package.flags &= ~mask\n\n",
        "target_code_len": 1281,
        "diff_format": "@@ -175,32 +246,31 @@\n \n-    @PackageMakerBase._simple_setter('summary', str, nzs.strip)\n+    @_simple_setter('summary', str, nzs.strip)\n     def set_summary(self, summary: str) -> None:\n-        self._package.comment = summary\n-\n-    @PackageMakerBase._omnivorous_setter('maintainer', str, nzs.strip, nzs.forbid_newlines, nzs.tolower)\n+        self._package.summary = summary\n+\n+    @_omnivorous_setter('maintainer', str, nzs.strip, nzs.forbid_newlines, nzs.tolower)\n     def add_maintainers(self, *args: Any) -> None:\n-        self._package.maintainers.extend(_iter_unique(args, self._package.maintainers))\n-\n-    @PackageMakerBase._omnivorous_setter('category', str, nzs.strip, nzs.forbid_newlines)\n+        _extend_unique(self._package.maintainers, args)\n+\n+    @_omnivorous_setter('category', str, nzs.strip, nzs.forbid_newlines)\n     def add_categories(self, *args: Any) -> None:\n-        # XXX: convert into array\n-        if not self._package.category:\n-            self._package.category = args[0]\n-\n-    @PackageMakerBase._omnivorous_setter('homepage', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n+        _extend_unique(self._package.categories, args)\n+\n+    @_omnivorous_setter('homepage', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n     def add_homepages(self, *args: Any) -> None:\n-        # XXX: convert into array\n-        if not self._package.homepage:\n-            self._package.homepage = args[0]\n-\n-    @PackageMakerBase._omnivorous_setter('license', str, nzs.strip, nzs.forbid_newlines)\n+        _extend_unique(self._package.homepages, args)\n+\n+    @_omnivorous_setter('license', str, nzs.strip, nzs.forbid_newlines)\n     def add_licenses(self, *args: Any) -> None:\n-        self._package.licenses.extend(args)\n-\n-    @PackageMakerBase._omnivorous_setter('download', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n+        _extend_unique(self._package.licenses, args)\n+\n+    @_omnivorous_setter('download', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n     def add_downloads(self, *args: Any) -> None:\n-        self._package.downloads.extend(_iter_unique(args, self._package.downloads))\n+        _extend_unique(self._package.downloads, args)\n \n     def set_flags(self, mask: int, is_set: bool = True) -> None:\n-        self._package.set_flag(mask, is_set)\n+        if is_set:\n+            self._package.flags |= mask\n+        else:\n+            self._package.flags &= ~mask\n \n",
        "source_code_with_indent": "\n    <DED>@PackageMakerBase._simple_setter('summary', str, nzs.strip)\n    def set_summary(self, summary: str) -> None:\n        <IND>self._package.comment = summary\n\n    <DED>@PackageMakerBase._omnivorous_setter('maintainer', str, nzs.strip, nzs.forbid_newlines, nzs.tolower)\n    def add_maintainers(self, *args: Any) -> None:\n        <IND>self._package.maintainers.extend(_iter_unique(args, self._package.maintainers))\n\n    <DED>@PackageMakerBase._omnivorous_setter('category', str, nzs.strip, nzs.forbid_newlines)\n    def add_categories(self, *args: Any) -> None:\n        # XXX: convert into array\n        <IND>if not self._package.category:\n            <IND>self._package.category = args[0]\n\n    <DED><DED>@PackageMakerBase._omnivorous_setter('homepage', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n    def add_homepages(self, *args: Any) -> None:\n        # XXX: convert into array\n        <IND>if not self._package.homepage:\n            <IND>self._package.homepage = args[0]\n\n    <DED><DED>@PackageMakerBase._omnivorous_setter('license', str, nzs.strip, nzs.forbid_newlines)\n    def add_licenses(self, *args: Any) -> None:\n        <IND>self._package.licenses.extend(args)\n\n    <DED>@PackageMakerBase._omnivorous_setter('download', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n    def add_downloads(self, *args: Any) -> None:\n        <IND>self._package.downloads.extend(_iter_unique(args, self._package.downloads))\n\n    <DED>def set_flags(self, mask: int, is_set: bool = True) -> None:\n        <IND>self._package.set_flag(mask, is_set)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>@_simple_setter('summary', str, nzs.strip)\n    def set_summary(self, summary: str) -> None:\n        <IND>self._package.summary = summary\n\n    <DED>@_omnivorous_setter('maintainer', str, nzs.strip, nzs.forbid_newlines, nzs.tolower)\n    def add_maintainers(self, *args: Any) -> None:\n        <IND>_extend_unique(self._package.maintainers, args)\n\n    <DED>@_omnivorous_setter('category', str, nzs.strip, nzs.forbid_newlines)\n    def add_categories(self, *args: Any) -> None:\n        <IND>_extend_unique(self._package.categories, args)\n\n    <DED>@_omnivorous_setter('homepage', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n    def add_homepages(self, *args: Any) -> None:\n        <IND>_extend_unique(self._package.homepages, args)\n\n    <DED>@_omnivorous_setter('license', str, nzs.strip, nzs.forbid_newlines)\n    def add_licenses(self, *args: Any) -> None:\n        <IND>_extend_unique(self._package.licenses, args)\n\n    <DED>@_omnivorous_setter('download', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n    def add_downloads(self, *args: Any) -> None:\n        <IND>_extend_unique(self._package.downloads, args)\n\n    <DED>def set_flags(self, mask: int, is_set: bool = True) -> None:\n        <IND>if is_set:\n            <IND>self._package.flags |= mask\n        <DED>else:\n            <IND>self._package.flags &= ~mask\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def unwrap(self) -> Package:\n        return self._package\n\n",
        "source_code_len": 64,
        "target_code": "\n    def spawn(self, repo: str, family: str, subrepo: Optional[str] = None, shadow: bool = False, default_maintainer: Optional[str] = None) -> Package:\n        if self._package.name is None:\n            raise RuntimeError('Attempt to spawn Package with unset name')\n        if self._package.version is None:\n            raise RuntimeError('Attempt to spawn Package with unset version')\n\n        maintainers: List[str] = self._package.maintainers if self._package.maintainers else [default_maintainer] if default_maintainer else []\n\n        return Package(\n            repo=repo,\n            family=family,\n            subrepo=self._package.subrepo or subrepo,\n\n            name=self._package.name,\n            basename=self._package.basename,\n\n            version=self._package.version,\n            origversion=self._package.version,\n            rawversion=self._package.rawversion if self._package.rawversion is not None else self._package.version,\n\n            arch=self._package.arch,\n\n            maintainers=maintainers,\n            category=self._package.categories[0] if self._package.categories else None,  # XXX: convert to array\n            comment=self._package.summary,\n            homepage=self._package.homepages[0] if self._package.homepages else None,  # XXX: convert to array\n            licenses=self._package.licenses,\n            downloads=self._package.downloads,\n\n            flags=self._package.flags,\n            shadow=shadow,\n\n            extrafields=self._package.extrafields,\n        )\n\n",
        "target_code_len": 1515,
        "diff_format": "@@ -209,4 +279,36 @@\n \n-    def unwrap(self) -> Package:\n-        return self._package\n+    def spawn(self, repo: str, family: str, subrepo: Optional[str] = None, shadow: bool = False, default_maintainer: Optional[str] = None) -> Package:\n+        if self._package.name is None:\n+            raise RuntimeError('Attempt to spawn Package with unset name')\n+        if self._package.version is None:\n+            raise RuntimeError('Attempt to spawn Package with unset version')\n+\n+        maintainers: List[str] = self._package.maintainers if self._package.maintainers else [default_maintainer] if default_maintainer else []\n+\n+        return Package(\n+            repo=repo,\n+            family=family,\n+            subrepo=self._package.subrepo or subrepo,\n+\n+            name=self._package.name,\n+            basename=self._package.basename,\n+\n+            version=self._package.version,\n+            origversion=self._package.version,\n+            rawversion=self._package.rawversion if self._package.rawversion is not None else self._package.version,\n+\n+            arch=self._package.arch,\n+\n+            maintainers=maintainers,\n+            category=self._package.categories[0] if self._package.categories else None,  # XXX: convert to array\n+            comment=self._package.summary,\n+            homepage=self._package.homepages[0] if self._package.homepages else None,  # XXX: convert to array\n+            licenses=self._package.licenses,\n+            downloads=self._package.downloads,\n+\n+            flags=self._package.flags,\n+            shadow=shadow,\n+\n+            extrafields=self._package.extrafields,\n+        )\n \n",
        "source_code_with_indent": "\n    <DED>def unwrap(self) -> Package:\n        <IND>return self._package\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def spawn(self, repo: str, family: str, subrepo: Optional[str] = None, shadow: bool = False, default_maintainer: Optional[str] = None) -> Package:\n        <IND>if self._package.name is None:\n            <IND>raise RuntimeError('Attempt to spawn Package with unset name')\n        <DED>if self._package.version is None:\n            <IND>raise RuntimeError('Attempt to spawn Package with unset version')\n\n        <DED>maintainers: List[str] = self._package.maintainers if self._package.maintainers else [default_maintainer] if default_maintainer else []\n\n        return Package(\n            repo=repo,\n            family=family,\n            subrepo=self._package.subrepo or subrepo,\n\n            name=self._package.name,\n            basename=self._package.basename,\n\n            version=self._package.version,\n            origversion=self._package.version,\n            rawversion=self._package.rawversion if self._package.rawversion is not None else self._package.version,\n\n            arch=self._package.arch,\n\n            maintainers=maintainers,\n            category=self._package.categories[0] if self._package.categories else None,  # XXX: convert to array\n            comment=self._package.summary,\n            homepage=self._package.homepages[0] if self._package.homepages else None,  # XXX: convert to array\n            licenses=self._package.licenses,\n            downloads=self._package.downloads,\n\n            flags=self._package.flags,\n            shadow=shadow,\n\n            extrafields=self._package.extrafields,\n        )\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "repology/repology-updater",
    "commit": "9f67d556944fe256c990593f673713e299feaf8a",
    "filename": "repology/packagemaker/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/repology-repology-updater/repology/packagemaker/__init__.py",
    "file_hunks_size": 17,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "repology/packagemaker/__init__.py:200:41 Incompatible parameter type [6]: Expected `PackageMakerBase` for 1st positional only parameter to call `PackageMakerBase._omnivorous_setter` but got `str`.",
    "message": " Expected `PackageMakerBase` for 1st positional only parameter to call `PackageMakerBase._omnivorous_setter` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 200,
    "warning_line": "    @PackageMakerBase._omnivorous_setter('download', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from functools import wraps\nfrom typing import Any, Callable, Iterable, Optional\n\nfrom repology.logger import Logger\nfrom repology.package import Package\nfrom repology.packagemaker import normalizers as nzs\n\n",
        "source_code_len": 208,
        "target_code": "from functools import wraps\nfrom typing import Any, Callable, Dict, Iterable, List, Optional, Type\n\nfrom repology.logger import Logger\nfrom repology.package import Package, PackageStatus\nfrom repology.packagemaker import normalizers as nzs\nfrom repology.packagemaker.normalizers import NormalizerFunction\n\n",
        "target_code_len": 306,
        "diff_format": "@@ -24,7 +22,8 @@\n from functools import wraps\n-from typing import Any, Callable, Iterable, Optional\n+from typing import Any, Callable, Dict, Iterable, List, Optional, Type\n \n from repology.logger import Logger\n-from repology.package import Package\n+from repology.package import Package, PackageStatus\n from repology.packagemaker import normalizers as nzs\n+from repology.packagemaker.normalizers import NormalizerFunction\n \n",
        "source_code_with_indent": "from functools import wraps\nfrom typing import Any, Callable, Iterable, Optional\n\nfrom repology.logger import Logger\nfrom repology.package import Package\nfrom repology.packagemaker import normalizers as nzs\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from functools import wraps\nfrom typing import Any, Callable, Dict, Iterable, List, Optional, Type\n\nfrom repology.logger import Logger\nfrom repology.package import Package, PackageStatus\nfrom repology.packagemaker import normalizers as nzs\nfrom repology.packagemaker.normalizers import NormalizerFunction\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _iter_unique(iterable, existing=None):\n    seen = set(existing) if existing else set()\n    for value in iterable:\n        if value not in seen:\n            seen.add(value)\n            yield value\n\n",
        "source_code_len": 202,
        "target_code": "\nclass PackageTemplate:\n    __slots__ = [\n        'subrepo',\n\n        'name',\n        'basename',\n\n        'version',\n        'origversion',\n        'rawversion',\n\n        'arch',\n        'summary',\n        'maintainers',\n        'categories',\n        'homepages',\n        'licenses',\n        'downloads',\n\n        'flags',\n\n        'extrafields',\n    ]\n\n    subrepo: Optional[str]\n\n    name: Optional[str]\n    basename: Optional[str]\n\n    version: Optional[str]\n    origversion: Optional[str]\n    rawversion: Optional[str]\n\n    arch: Optional[str]\n    summary: Optional[str]\n    maintainers: List[str]\n    categories: List[str]\n    homepages: List[str]\n    licenses: List[str]\n    downloads: List[str]\n\n    flags: int\n\n    extrafields: Dict[str, str]\n\n    def __init__(self) -> None:\n        self.subrepo = None\n\n        self.name = None\n        self.basename = None\n\n        self.version = None\n        self.origversion = None\n        self.rawversion = None\n\n        self.arch = None\n        self.summary = None\n        self.maintainers = []\n        self.categories = []\n        self.homepages = []\n        self.licenses = []\n        self.downloads = []\n\n        self.flags = 0\n\n        self.extrafields = {}\n\n",
        "target_code_len": 1212,
        "diff_format": "@@ -34,8 +33,68 @@\n \n-def _iter_unique(iterable, existing=None):\n-    seen = set(existing) if existing else set()\n-    for value in iterable:\n-        if value not in seen:\n-            seen.add(value)\n-            yield value\n+class PackageTemplate:\n+    __slots__ = [\n+        'subrepo',\n+\n+        'name',\n+        'basename',\n+\n+        'version',\n+        'origversion',\n+        'rawversion',\n+\n+        'arch',\n+        'summary',\n+        'maintainers',\n+        'categories',\n+        'homepages',\n+        'licenses',\n+        'downloads',\n+\n+        'flags',\n+\n+        'extrafields',\n+    ]\n+\n+    subrepo: Optional[str]\n+\n+    name: Optional[str]\n+    basename: Optional[str]\n+\n+    version: Optional[str]\n+    origversion: Optional[str]\n+    rawversion: Optional[str]\n+\n+    arch: Optional[str]\n+    summary: Optional[str]\n+    maintainers: List[str]\n+    categories: List[str]\n+    homepages: List[str]\n+    licenses: List[str]\n+    downloads: List[str]\n+\n+    flags: int\n+\n+    extrafields: Dict[str, str]\n+\n+    def __init__(self) -> None:\n+        self.subrepo = None\n+\n+        self.name = None\n+        self.basename = None\n+\n+        self.version = None\n+        self.origversion = None\n+        self.rawversion = None\n+\n+        self.arch = None\n+        self.summary = None\n+        self.maintainers = []\n+        self.categories = []\n+        self.homepages = []\n+        self.licenses = []\n+        self.downloads = []\n+\n+        self.flags = 0\n+\n+        self.extrafields = {}\n \n",
        "source_code_with_indent": "\ndef _iter_unique(iterable, existing=None):\n    <IND>seen = set(existing) if existing else set()\n    for value in iterable:\n        <IND>if value not in seen:\n            <IND>seen.add(value)\n            yield value\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nclass PackageTemplate:\n    <IND>__slots__ = [\n        'subrepo',\n\n        'name',\n        'basename',\n\n        'version',\n        'origversion',\n        'rawversion',\n\n        'arch',\n        'summary',\n        'maintainers',\n        'categories',\n        'homepages',\n        'licenses',\n        'downloads',\n\n        'flags',\n\n        'extrafields',\n    ]\n\n    subrepo: Optional[str]\n\n    name: Optional[str]\n    basename: Optional[str]\n\n    version: Optional[str]\n    origversion: Optional[str]\n    rawversion: Optional[str]\n\n    arch: Optional[str]\n    summary: Optional[str]\n    maintainers: List[str]\n    categories: List[str]\n    homepages: List[str]\n    licenses: List[str]\n    downloads: List[str]\n\n    flags: int\n\n    extrafields: Dict[str, str]\n\n    def __init__(self) -> None:\n        <IND>self.subrepo = None\n\n        self.name = None\n        self.basename = None\n\n        self.version = None\n        self.origversion = None\n        self.rawversion = None\n\n        self.arch = None\n        self.summary = None\n        self.maintainers = []\n        self.categories = []\n        self.homepages = []\n        self.licenses = []\n        self.downloads = []\n\n        self.flags = 0\n\n        self.extrafields = {}\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _omnivorous_setter(fieldname, want_type, *normalizers):  # noqa: N805\n        def inner(method):\n            @wraps(method)\n            def wrapper(self, *args):\n                values = self._normalize_args(args, fieldname, want_type, normalizers)\n                if values:\n                    return method(self, *values)\n            return wrapper\n        return inner\n\n    def _simple_setter(fieldname, want_type, *normalizers):  # noqa: N805\n        def inner(method):\n            @wraps(method)\n            def wrapper(self, arg, *other_args):\n                if arg is None:\n                    pass\n                elif isinstance(arg, str) and want_type is int or isinstance(arg, int) and want_type is str:\n                    arg = want_type(arg)\n                elif not isinstance(arg, want_type):\n                    raise RuntimeError('unexpected type {} for {} (expected {})'.format(arg.__class__.__name__, fieldname, want_type.__name__))\n                value = self._apply_normalizers(arg, fieldname, normalizers)\n                if value:\n                    return method(self, value, *other_args)\n            return wrapper\n        return inner\n\n",
        "source_code_len": 1176,
        "target_code": "\n\ndef _omnivorous_setter(fieldname: str, want_type: Type[Any], *normalizers: NormalizerFunction) -> Callable[[Callable[..., Any]], Any]:\n    def inner(method: Callable[..., Any]) -> Callable[..., Any]:\n        @wraps(method)\n        def wrapper(self: PackageMakerBase, *args: Any) -> Any:\n            values = self._normalize_args(args, fieldname, want_type, normalizers)\n            if values:\n                return method(self, *values)\n        return wrapper\n    return inner\n\n\ndef _simple_setter(fieldname: str, want_type: Type[Any], *normalizers: NormalizerFunction) -> Callable[[Callable[..., Any]], Any]:\n    def inner(method: Callable[..., Any]) -> Callable[..., Any]:\n        @wraps(method)\n        def wrapper(self: PackageMakerBase, arg: Any, *other_args: Any) -> Any:\n            if arg is None:\n                pass\n            elif isinstance(arg, str) and want_type is int or isinstance(arg, int) and want_type is str:\n                arg = want_type(arg)\n            elif not isinstance(arg, want_type):\n                raise RuntimeError('unexpected type {} for {} (expected {})'.format(arg.__class__.__name__, fieldname, want_type.__name__))\n            value = self._apply_normalizers(arg, fieldname, normalizers)\n            if value:\n                return method(self, value, *other_args)\n        return wrapper\n    return inner\n\n\ndef _extend_unique(existing: List[str], iterable: Iterable[str]) -> None:\n    seen = set(existing) if existing else set()\n\n    for value in iterable:\n        if value not in seen:\n            seen.add(value)\n            existing.append(value)\n\n",
        "target_code_len": 1598,
        "diff_format": "@@ -92,27 +151,38 @@\n \n-    def _omnivorous_setter(fieldname, want_type, *normalizers):  # noqa: N805\n-        def inner(method):\n-            @wraps(method)\n-            def wrapper(self, *args):\n-                values = self._normalize_args(args, fieldname, want_type, normalizers)\n-                if values:\n-                    return method(self, *values)\n-            return wrapper\n-        return inner\n-\n-    def _simple_setter(fieldname, want_type, *normalizers):  # noqa: N805\n-        def inner(method):\n-            @wraps(method)\n-            def wrapper(self, arg, *other_args):\n-                if arg is None:\n-                    pass\n-                elif isinstance(arg, str) and want_type is int or isinstance(arg, int) and want_type is str:\n-                    arg = want_type(arg)\n-                elif not isinstance(arg, want_type):\n-                    raise RuntimeError('unexpected type {} for {} (expected {})'.format(arg.__class__.__name__, fieldname, want_type.__name__))\n-                value = self._apply_normalizers(arg, fieldname, normalizers)\n-                if value:\n-                    return method(self, value, *other_args)\n-            return wrapper\n-        return inner\n+\n+def _omnivorous_setter(fieldname: str, want_type: Type[Any], *normalizers: NormalizerFunction) -> Callable[[Callable[..., Any]], Any]:\n+    def inner(method: Callable[..., Any]) -> Callable[..., Any]:\n+        @wraps(method)\n+        def wrapper(self: PackageMakerBase, *args: Any) -> Any:\n+            values = self._normalize_args(args, fieldname, want_type, normalizers)\n+            if values:\n+                return method(self, *values)\n+        return wrapper\n+    return inner\n+\n+\n+def _simple_setter(fieldname: str, want_type: Type[Any], *normalizers: NormalizerFunction) -> Callable[[Callable[..., Any]], Any]:\n+    def inner(method: Callable[..., Any]) -> Callable[..., Any]:\n+        @wraps(method)\n+        def wrapper(self: PackageMakerBase, arg: Any, *other_args: Any) -> Any:\n+            if arg is None:\n+                pass\n+            elif isinstance(arg, str) and want_type is int or isinstance(arg, int) and want_type is str:\n+                arg = want_type(arg)\n+            elif not isinstance(arg, want_type):\n+                raise RuntimeError('unexpected type {} for {} (expected {})'.format(arg.__class__.__name__, fieldname, want_type.__name__))\n+            value = self._apply_normalizers(arg, fieldname, normalizers)\n+            if value:\n+                return method(self, value, *other_args)\n+        return wrapper\n+    return inner\n+\n+\n+def _extend_unique(existing: List[str], iterable: Iterable[str]) -> None:\n+    seen = set(existing) if existing else set()\n+\n+    for value in iterable:\n+        if value not in seen:\n+            seen.add(value)\n+            existing.append(value)\n \n",
        "source_code_with_indent": "\n    <DED>def _omnivorous_setter(fieldname, want_type, *normalizers):  # noqa: N805\n        <IND>def inner(method):\n            <IND>@wraps(method)\n            def wrapper(self, *args):\n                <IND>values = self._normalize_args(args, fieldname, want_type, normalizers)\n                if values:\n                    <IND>return method(self, *values)\n            <DED><DED>return wrapper\n        <DED>return inner\n\n    <DED>def _simple_setter(fieldname, want_type, *normalizers):  # noqa: N805\n        <IND>def inner(method):\n            <IND>@wraps(method)\n            def wrapper(self, arg, *other_args):\n                <IND>if arg is None:\n                    <IND>pass\n                <DED>elif isinstance(arg, str) and want_type is int or isinstance(arg, int) and want_type is str:\n                    <IND>arg = want_type(arg)\n                <DED>elif not isinstance(arg, want_type):\n                    <IND>raise RuntimeError('unexpected type {} for {} (expected {})'.format(arg.__class__.__name__, fieldname, want_type.__name__))\n                <DED>value = self._apply_normalizers(arg, fieldname, normalizers)\n                if value:\n                    <IND>return method(self, value, *other_args)\n            <DED><DED>return wrapper\n        <DED>return inner\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n\n<DED><DED>def _omnivorous_setter(fieldname: str, want_type: Type[Any], *normalizers: NormalizerFunction) -> Callable[[Callable[..., Any]], Any]:\n    <IND>def inner(method: Callable[..., Any]) -> Callable[..., Any]:\n        <IND>@wraps(method)\n        def wrapper(self: PackageMakerBase, *args: Any) -> Any:\n            <IND>values = self._normalize_args(args, fieldname, want_type, normalizers)\n            if values:\n                <IND>return method(self, *values)\n        <DED><DED>return wrapper\n    <DED>return inner\n\n\n<DED>def _simple_setter(fieldname: str, want_type: Type[Any], *normalizers: NormalizerFunction) -> Callable[[Callable[..., Any]], Any]:\n    <IND>def inner(method: Callable[..., Any]) -> Callable[..., Any]:\n        <IND>@wraps(method)\n        def wrapper(self: PackageMakerBase, arg: Any, *other_args: Any) -> Any:\n            <IND>if arg is None:\n                <IND>pass\n            <DED>elif isinstance(arg, str) and want_type is int or isinstance(arg, int) and want_type is str:\n                <IND>arg = want_type(arg)\n            <DED>elif not isinstance(arg, want_type):\n                <IND>raise RuntimeError('unexpected type {} for {} (expected {})'.format(arg.__class__.__name__, fieldname, want_type.__name__))\n            <DED>value = self._apply_normalizers(arg, fieldname, normalizers)\n            if value:\n                <IND>return method(self, value, *other_args)\n        <DED><DED>return wrapper\n    <DED>return inner\n\n\n<DED>def _extend_unique(existing: List[str], iterable: Iterable[str]) -> None:\n    <IND>seen = set(existing) if existing else set()\n\n    for value in iterable:\n        <IND>if value not in seen:\n            <IND>seen.add(value)\n            existing.append(value)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "class PackageMaker(PackageMakerBase):\n    _package: Package\n    _ident: Optional[str]\n",
        "source_code_len": 86,
        "target_code": "class PackageMaker(PackageMakerBase):\n    _package: PackageTemplate\n    _ident: Optional[str]\n",
        "target_code_len": 94,
        "diff_format": "@@ -120,3 +190,3 @@\n class PackageMaker(PackageMakerBase):\n-    _package: Package\n+    _package: PackageTemplate\n     _ident: Optional[str]\n",
        "source_code_with_indent": "<DED><DED>class PackageMaker(PackageMakerBase):\n    <IND>_package: Package\n    _ident: Optional[str]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED><DED><DED>class PackageMaker(PackageMakerBase):\n    <IND>_package: PackageTemplate\n    _ident: Optional[str]\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        super(PackageMaker, self).__init__(logger)\n        self._package = Package()\n        self._ident = ident\n",
        "source_code_len": 113,
        "target_code": "        super(PackageMaker, self).__init__(logger)\n        self._package = PackageTemplate()\n        self._ident = ident\n",
        "target_code_len": 121,
        "diff_format": "@@ -127,3 +197,3 @@\n         super(PackageMaker, self).__init__(logger)\n-        self._package = Package()\n+        self._package = PackageTemplate()\n         self._ident = ident\n",
        "source_code_with_indent": "        <IND>super(PackageMaker, self).__init__(logger)\n        self._package = Package()\n        self._ident = ident\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>super(PackageMaker, self).__init__(logger)\n        self._package = PackageTemplate()\n        self._ident = ident\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    @PackageMakerBase._simple_setter('origin', str, nzs.strip, nzs.forbid_newlines)\n    def set_origin(self, origin: str) -> None:\n",
        "source_code_len": 132,
        "target_code": "\n    @_simple_setter('origin', str, nzs.strip, nzs.forbid_newlines)\n    def set_origin(self, origin: str) -> None:\n",
        "target_code_len": 115,
        "diff_format": "@@ -135,3 +205,3 @@\n \n-    @PackageMakerBase._simple_setter('origin', str, nzs.strip, nzs.forbid_newlines)\n+    @_simple_setter('origin', str, nzs.strip, nzs.forbid_newlines)\n     def set_origin(self, origin: str) -> None:\n",
        "source_code_with_indent": "\n    <DED>@PackageMakerBase._simple_setter('origin', str, nzs.strip, nzs.forbid_newlines)\n    def set_origin(self, origin: str) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>@_simple_setter('origin', str, nzs.strip, nzs.forbid_newlines)\n    def set_origin(self, origin: str) -> None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    @PackageMakerBase._simple_setter('name', str, nzs.strip, nzs.forbid_newlines)\n    def set_name(self, name: str) -> None:\n",
        "source_code_len": 126,
        "target_code": "\n    @_simple_setter('name', str, nzs.strip, nzs.forbid_newlines)\n    def set_name(self, name: str) -> None:\n",
        "target_code_len": 109,
        "diff_format": "@@ -140,3 +210,3 @@\n \n-    @PackageMakerBase._simple_setter('name', str, nzs.strip, nzs.forbid_newlines)\n+    @_simple_setter('name', str, nzs.strip, nzs.forbid_newlines)\n     def set_name(self, name: str) -> None:\n",
        "source_code_with_indent": "\n    <DED>@PackageMakerBase._simple_setter('name', str, nzs.strip, nzs.forbid_newlines)\n    def set_name(self, name: str) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>@_simple_setter('name', str, nzs.strip, nzs.forbid_newlines)\n    def set_name(self, name: str) -> None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    @PackageMakerBase._simple_setter('basename', str, nzs.strip, nzs.forbid_newlines)\n    def set_basename(self, basename: str) -> None:\n",
        "source_code_len": 138,
        "target_code": "\n    @_simple_setter('basename', str, nzs.strip, nzs.forbid_newlines)\n    def set_basename(self, basename: str) -> None:\n",
        "target_code_len": 121,
        "diff_format": "@@ -144,3 +214,3 @@\n \n-    @PackageMakerBase._simple_setter('basename', str, nzs.strip, nzs.forbid_newlines)\n+    @_simple_setter('basename', str, nzs.strip, nzs.forbid_newlines)\n     def set_basename(self, basename: str) -> None:\n",
        "source_code_with_indent": "\n    <DED>@PackageMakerBase._simple_setter('basename', str, nzs.strip, nzs.forbid_newlines)\n    def set_basename(self, basename: str) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>@_simple_setter('basename', str, nzs.strip, nzs.forbid_newlines)\n    def set_basename(self, basename: str) -> None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def prefix_name(self, prefix: str) -> None:\n        self._package.name = prefix + self._package.name\n\n    @PackageMakerBase._simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n    def set_version(self, version: str, version_normalizer: Optional[Callable[[str], str]] = None) -> None:\n",
        "source_code_len": 299,
        "target_code": "    def prefix_name(self, prefix: str) -> None:\n        assert(self._package.name)\n        self._package.name = prefix + self._package.name\n\n    @_simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n    def set_version(self, version: str, version_normalizer: Optional[Callable[[str], str]] = None) -> None:\n",
        "target_code_len": 317,
        "diff_format": "@@ -149,5 +219,6 @@\n     def prefix_name(self, prefix: str) -> None:\n+        assert(self._package.name)\n         self._package.name = prefix + self._package.name\n \n-    @PackageMakerBase._simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n+    @_simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n     def set_version(self, version: str, version_normalizer: Optional[Callable[[str], str]] = None) -> None:\n",
        "source_code_with_indent": "    <DED>def prefix_name(self, prefix: str) -> None:\n        <IND>self._package.name = prefix + self._package.name\n\n    <DED>@PackageMakerBase._simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n    def set_version(self, version: str, version_normalizer: Optional[Callable[[str], str]] = None) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def prefix_name(self, prefix: str) -> None:\n        <IND>assert(self._package.name)\n        self._package.name = prefix + self._package.name\n\n    <DED>@_simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n    def set_version(self, version: str, version_normalizer: Optional[Callable[[str], str]] = None) -> None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    @PackageMakerBase._simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n    def set_rawversion(self, rawversion: str) -> None:\n",
        "source_code_len": 141,
        "target_code": "\n    @_simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n    def set_rawversion(self, rawversion: str) -> None:\n",
        "target_code_len": 124,
        "diff_format": "@@ -157,3 +228,3 @@\n \n-    @PackageMakerBase._simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n+    @_simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n     def set_rawversion(self, rawversion: str) -> None:\n",
        "source_code_with_indent": "\n    <DED>@PackageMakerBase._simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n    def set_rawversion(self, rawversion: str) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>@_simple_setter('version', str, nzs.strip, nzs.forbid_newlines)\n    def set_rawversion(self, rawversion: str) -> None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    @PackageMakerBase._simple_setter('arch', str, nzs.strip, nzs.forbid_newlines)\n    def set_arch(self, arch: str) -> None:\n",
        "source_code_len": 126,
        "target_code": "\n    @_simple_setter('arch', str, nzs.strip, nzs.forbid_newlines)\n    def set_arch(self, arch: str) -> None:\n",
        "target_code_len": 109,
        "diff_format": "@@ -167,3 +238,3 @@\n \n-    @PackageMakerBase._simple_setter('arch', str, nzs.strip, nzs.forbid_newlines)\n+    @_simple_setter('arch', str, nzs.strip, nzs.forbid_newlines)\n     def set_arch(self, arch: str) -> None:\n",
        "source_code_with_indent": "\n    <DED>@PackageMakerBase._simple_setter('arch', str, nzs.strip, nzs.forbid_newlines)\n    def set_arch(self, arch: str) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>@_simple_setter('arch', str, nzs.strip, nzs.forbid_newlines)\n    def set_arch(self, arch: str) -> None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    @PackageMakerBase._simple_setter('subrepo', str, nzs.strip, nzs.forbid_newlines)\n    def set_subrepo(self, subrepo: str) -> None:\n",
        "source_code_len": 135,
        "target_code": "\n    @_simple_setter('subrepo', str, nzs.strip, nzs.forbid_newlines)\n    def set_subrepo(self, subrepo: str) -> None:\n",
        "target_code_len": 118,
        "diff_format": "@@ -171,3 +242,3 @@\n \n-    @PackageMakerBase._simple_setter('subrepo', str, nzs.strip, nzs.forbid_newlines)\n+    @_simple_setter('subrepo', str, nzs.strip, nzs.forbid_newlines)\n     def set_subrepo(self, subrepo: str) -> None:\n",
        "source_code_with_indent": "\n    <DED>@PackageMakerBase._simple_setter('subrepo', str, nzs.strip, nzs.forbid_newlines)\n    def set_subrepo(self, subrepo: str) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>@_simple_setter('subrepo', str, nzs.strip, nzs.forbid_newlines)\n    def set_subrepo(self, subrepo: str) -> None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    @PackageMakerBase._simple_setter('summary', str, nzs.strip)\n    def set_summary(self, summary: str) -> None:\n        self._package.comment = summary\n\n    @PackageMakerBase._omnivorous_setter('maintainer', str, nzs.strip, nzs.forbid_newlines, nzs.tolower)\n    def add_maintainers(self, *args: Any) -> None:\n        self._package.maintainers.extend(_iter_unique(args, self._package.maintainers))\n\n    @PackageMakerBase._omnivorous_setter('category', str, nzs.strip, nzs.forbid_newlines)\n    def add_categories(self, *args: Any) -> None:\n        # XXX: convert into array\n        if not self._package.category:\n            self._package.category = args[0]\n\n    @PackageMakerBase._omnivorous_setter('homepage', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n    def add_homepages(self, *args: Any) -> None:\n        # XXX: convert into array\n        if not self._package.homepage:\n            self._package.homepage = args[0]\n\n    @PackageMakerBase._omnivorous_setter('license', str, nzs.strip, nzs.forbid_newlines)\n    def add_licenses(self, *args: Any) -> None:\n        self._package.licenses.extend(args)\n\n    @PackageMakerBase._omnivorous_setter('download', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n    def add_downloads(self, *args: Any) -> None:\n        self._package.downloads.extend(_iter_unique(args, self._package.downloads))\n\n    def set_flags(self, mask: int, is_set: bool = True) -> None:\n        self._package.set_flag(mask, is_set)\n\n",
        "source_code_len": 1494,
        "target_code": "\n    @_simple_setter('summary', str, nzs.strip)\n    def set_summary(self, summary: str) -> None:\n        self._package.summary = summary\n\n    @_omnivorous_setter('maintainer', str, nzs.strip, nzs.forbid_newlines, nzs.tolower)\n    def add_maintainers(self, *args: Any) -> None:\n        _extend_unique(self._package.maintainers, args)\n\n    @_omnivorous_setter('category', str, nzs.strip, nzs.forbid_newlines)\n    def add_categories(self, *args: Any) -> None:\n        _extend_unique(self._package.categories, args)\n\n    @_omnivorous_setter('homepage', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n    def add_homepages(self, *args: Any) -> None:\n        _extend_unique(self._package.homepages, args)\n\n    @_omnivorous_setter('license', str, nzs.strip, nzs.forbid_newlines)\n    def add_licenses(self, *args: Any) -> None:\n        _extend_unique(self._package.licenses, args)\n\n    @_omnivorous_setter('download', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n    def add_downloads(self, *args: Any) -> None:\n        _extend_unique(self._package.downloads, args)\n\n    def set_flags(self, mask: int, is_set: bool = True) -> None:\n        if is_set:\n            self._package.flags |= mask\n        else:\n            self._package.flags &= ~mask\n\n",
        "target_code_len": 1281,
        "diff_format": "@@ -175,32 +246,31 @@\n \n-    @PackageMakerBase._simple_setter('summary', str, nzs.strip)\n+    @_simple_setter('summary', str, nzs.strip)\n     def set_summary(self, summary: str) -> None:\n-        self._package.comment = summary\n-\n-    @PackageMakerBase._omnivorous_setter('maintainer', str, nzs.strip, nzs.forbid_newlines, nzs.tolower)\n+        self._package.summary = summary\n+\n+    @_omnivorous_setter('maintainer', str, nzs.strip, nzs.forbid_newlines, nzs.tolower)\n     def add_maintainers(self, *args: Any) -> None:\n-        self._package.maintainers.extend(_iter_unique(args, self._package.maintainers))\n-\n-    @PackageMakerBase._omnivorous_setter('category', str, nzs.strip, nzs.forbid_newlines)\n+        _extend_unique(self._package.maintainers, args)\n+\n+    @_omnivorous_setter('category', str, nzs.strip, nzs.forbid_newlines)\n     def add_categories(self, *args: Any) -> None:\n-        # XXX: convert into array\n-        if not self._package.category:\n-            self._package.category = args[0]\n-\n-    @PackageMakerBase._omnivorous_setter('homepage', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n+        _extend_unique(self._package.categories, args)\n+\n+    @_omnivorous_setter('homepage', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n     def add_homepages(self, *args: Any) -> None:\n-        # XXX: convert into array\n-        if not self._package.homepage:\n-            self._package.homepage = args[0]\n-\n-    @PackageMakerBase._omnivorous_setter('license', str, nzs.strip, nzs.forbid_newlines)\n+        _extend_unique(self._package.homepages, args)\n+\n+    @_omnivorous_setter('license', str, nzs.strip, nzs.forbid_newlines)\n     def add_licenses(self, *args: Any) -> None:\n-        self._package.licenses.extend(args)\n-\n-    @PackageMakerBase._omnivorous_setter('download', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n+        _extend_unique(self._package.licenses, args)\n+\n+    @_omnivorous_setter('download', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n     def add_downloads(self, *args: Any) -> None:\n-        self._package.downloads.extend(_iter_unique(args, self._package.downloads))\n+        _extend_unique(self._package.downloads, args)\n \n     def set_flags(self, mask: int, is_set: bool = True) -> None:\n-        self._package.set_flag(mask, is_set)\n+        if is_set:\n+            self._package.flags |= mask\n+        else:\n+            self._package.flags &= ~mask\n \n",
        "source_code_with_indent": "\n    <DED>@PackageMakerBase._simple_setter('summary', str, nzs.strip)\n    def set_summary(self, summary: str) -> None:\n        <IND>self._package.comment = summary\n\n    <DED>@PackageMakerBase._omnivorous_setter('maintainer', str, nzs.strip, nzs.forbid_newlines, nzs.tolower)\n    def add_maintainers(self, *args: Any) -> None:\n        <IND>self._package.maintainers.extend(_iter_unique(args, self._package.maintainers))\n\n    <DED>@PackageMakerBase._omnivorous_setter('category', str, nzs.strip, nzs.forbid_newlines)\n    def add_categories(self, *args: Any) -> None:\n        # XXX: convert into array\n        <IND>if not self._package.category:\n            <IND>self._package.category = args[0]\n\n    <DED><DED>@PackageMakerBase._omnivorous_setter('homepage', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n    def add_homepages(self, *args: Any) -> None:\n        # XXX: convert into array\n        <IND>if not self._package.homepage:\n            <IND>self._package.homepage = args[0]\n\n    <DED><DED>@PackageMakerBase._omnivorous_setter('license', str, nzs.strip, nzs.forbid_newlines)\n    def add_licenses(self, *args: Any) -> None:\n        <IND>self._package.licenses.extend(args)\n\n    <DED>@PackageMakerBase._omnivorous_setter('download', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n    def add_downloads(self, *args: Any) -> None:\n        <IND>self._package.downloads.extend(_iter_unique(args, self._package.downloads))\n\n    <DED>def set_flags(self, mask: int, is_set: bool = True) -> None:\n        <IND>self._package.set_flag(mask, is_set)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>@_simple_setter('summary', str, nzs.strip)\n    def set_summary(self, summary: str) -> None:\n        <IND>self._package.summary = summary\n\n    <DED>@_omnivorous_setter('maintainer', str, nzs.strip, nzs.forbid_newlines, nzs.tolower)\n    def add_maintainers(self, *args: Any) -> None:\n        <IND>_extend_unique(self._package.maintainers, args)\n\n    <DED>@_omnivorous_setter('category', str, nzs.strip, nzs.forbid_newlines)\n    def add_categories(self, *args: Any) -> None:\n        <IND>_extend_unique(self._package.categories, args)\n\n    <DED>@_omnivorous_setter('homepage', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n    def add_homepages(self, *args: Any) -> None:\n        <IND>_extend_unique(self._package.homepages, args)\n\n    <DED>@_omnivorous_setter('license', str, nzs.strip, nzs.forbid_newlines)\n    def add_licenses(self, *args: Any) -> None:\n        <IND>_extend_unique(self._package.licenses, args)\n\n    <DED>@_omnivorous_setter('download', str, nzs.strip, nzs.url, nzs.warn_whitespace, nzs.forbid_newlines)\n    def add_downloads(self, *args: Any) -> None:\n        <IND>_extend_unique(self._package.downloads, args)\n\n    <DED>def set_flags(self, mask: int, is_set: bool = True) -> None:\n        <IND>if is_set:\n            <IND>self._package.flags |= mask\n        <DED>else:\n            <IND>self._package.flags &= ~mask\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def unwrap(self) -> Package:\n        return self._package\n\n",
        "source_code_len": 64,
        "target_code": "\n    def spawn(self, repo: str, family: str, subrepo: Optional[str] = None, shadow: bool = False, default_maintainer: Optional[str] = None) -> Package:\n        if self._package.name is None:\n            raise RuntimeError('Attempt to spawn Package with unset name')\n        if self._package.version is None:\n            raise RuntimeError('Attempt to spawn Package with unset version')\n\n        maintainers: List[str] = self._package.maintainers if self._package.maintainers else [default_maintainer] if default_maintainer else []\n\n        return Package(\n            repo=repo,\n            family=family,\n            subrepo=self._package.subrepo or subrepo,\n\n            name=self._package.name,\n            basename=self._package.basename,\n\n            version=self._package.version,\n            origversion=self._package.version,\n            rawversion=self._package.rawversion if self._package.rawversion is not None else self._package.version,\n\n            arch=self._package.arch,\n\n            maintainers=maintainers,\n            category=self._package.categories[0] if self._package.categories else None,  # XXX: convert to array\n            comment=self._package.summary,\n            homepage=self._package.homepages[0] if self._package.homepages else None,  # XXX: convert to array\n            licenses=self._package.licenses,\n            downloads=self._package.downloads,\n\n            flags=self._package.flags,\n            shadow=shadow,\n\n            extrafields=self._package.extrafields,\n        )\n\n",
        "target_code_len": 1515,
        "diff_format": "@@ -209,4 +279,36 @@\n \n-    def unwrap(self) -> Package:\n-        return self._package\n+    def spawn(self, repo: str, family: str, subrepo: Optional[str] = None, shadow: bool = False, default_maintainer: Optional[str] = None) -> Package:\n+        if self._package.name is None:\n+            raise RuntimeError('Attempt to spawn Package with unset name')\n+        if self._package.version is None:\n+            raise RuntimeError('Attempt to spawn Package with unset version')\n+\n+        maintainers: List[str] = self._package.maintainers if self._package.maintainers else [default_maintainer] if default_maintainer else []\n+\n+        return Package(\n+            repo=repo,\n+            family=family,\n+            subrepo=self._package.subrepo or subrepo,\n+\n+            name=self._package.name,\n+            basename=self._package.basename,\n+\n+            version=self._package.version,\n+            origversion=self._package.version,\n+            rawversion=self._package.rawversion if self._package.rawversion is not None else self._package.version,\n+\n+            arch=self._package.arch,\n+\n+            maintainers=maintainers,\n+            category=self._package.categories[0] if self._package.categories else None,  # XXX: convert to array\n+            comment=self._package.summary,\n+            homepage=self._package.homepages[0] if self._package.homepages else None,  # XXX: convert to array\n+            licenses=self._package.licenses,\n+            downloads=self._package.downloads,\n+\n+            flags=self._package.flags,\n+            shadow=shadow,\n+\n+            extrafields=self._package.extrafields,\n+        )\n \n",
        "source_code_with_indent": "\n    <DED>def unwrap(self) -> Package:\n        <IND>return self._package\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def spawn(self, repo: str, family: str, subrepo: Optional[str] = None, shadow: bool = False, default_maintainer: Optional[str] = None) -> Package:\n        <IND>if self._package.name is None:\n            <IND>raise RuntimeError('Attempt to spawn Package with unset name')\n        <DED>if self._package.version is None:\n            <IND>raise RuntimeError('Attempt to spawn Package with unset version')\n\n        <DED>maintainers: List[str] = self._package.maintainers if self._package.maintainers else [default_maintainer] if default_maintainer else []\n\n        return Package(\n            repo=repo,\n            family=family,\n            subrepo=self._package.subrepo or subrepo,\n\n            name=self._package.name,\n            basename=self._package.basename,\n\n            version=self._package.version,\n            origversion=self._package.version,\n            rawversion=self._package.rawversion if self._package.rawversion is not None else self._package.version,\n\n            arch=self._package.arch,\n\n            maintainers=maintainers,\n            category=self._package.categories[0] if self._package.categories else None,  # XXX: convert to array\n            comment=self._package.summary,\n            homepage=self._package.homepages[0] if self._package.homepages else None,  # XXX: convert to array\n            licenses=self._package.licenses,\n            downloads=self._package.downloads,\n\n            flags=self._package.flags,\n            shadow=shadow,\n\n            extrafields=self._package.extrafields,\n        )\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]