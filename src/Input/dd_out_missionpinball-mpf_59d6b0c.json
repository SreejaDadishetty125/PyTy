[
  {
    "project": "missionpinball/mpf",
    "commit": "59d6b0cc314b1ce49dff452d7c1492d1354a832c",
    "filename": "mpf/core/logging.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/missionpinball-mpf/mpf/core/logging.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mpf/core/logging.py:24:8 Incompatible attribute type [8]: Attribute `log` declared in class `LogMixin` has type `Logger` but is used as type `None`.",
    "message": " Attribute `log` declared in class `LogMixin` has type `Logger` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 24,
    "warning_line": "        self.log = None     # type: Logger",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import logging\n\n",
        "source_code_len": 16,
        "target_code": "import logging\nfrom logging import Logger\n\n",
        "target_code_len": 43,
        "diff_format": "@@ -2,2 +2,3 @@\n import logging\n+from logging import Logger\n \n",
        "source_code_with_indent": "import logging\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import logging\nfrom logging import Logger\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "if MYPY:   # pragma: no cover\n    from logging import Logger  # pylint: disable-msg=cyclic-import,unused-import\n    from typing import NoReturn  # pylint: disable-msg=cyclic-import,unused-import\n\n",
        "source_code_len": 196,
        "target_code": "if MYPY:   # pragma: no cover\n    from typing import NoReturn, Optional  # pylint: disable-msg=cyclic-import,unused-import\n\n",
        "target_code_len": 124,
        "diff_format": "@@ -8,4 +9,3 @@\n if MYPY:   # pragma: no cover\n-    from logging import Logger  # pylint: disable-msg=cyclic-import,unused-import\n-    from typing import NoReturn  # pylint: disable-msg=cyclic-import,unused-import\n+    from typing import NoReturn, Optional  # pylint: disable-msg=cyclic-import,unused-import\n \n",
        "source_code_with_indent": "if MYPY:   # pragma: no cover\n    <IND>from logging import Logger  # pylint: disable-msg=cyclic-import,unused-import\n    from typing import NoReturn  # pylint: disable-msg=cyclic-import,unused-import\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "if MYPY:   # pragma: no cover\n    <IND>from typing import NoReturn, Optional  # pylint: disable-msg=cyclic-import,unused-import\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"\"\"Initialise Log Mixin.\"\"\"\n        self.log = None     # type: Logger\n        self._info_to_console = False\n",
        "source_code_len": 117,
        "target_code": "        \"\"\"Initialise Log Mixin.\"\"\"\n        self.log = None     # type: Optional[Logger]\n        self._info_to_console = False\n",
        "target_code_len": 127,
        "diff_format": "@@ -23,3 +23,3 @@\n         \"\"\"Initialise Log Mixin.\"\"\"\n-        self.log = None     # type: Logger\n+        self.log = None     # type: Optional[Logger]\n         self._info_to_console = False\n",
        "source_code_with_indent": "        <IND>\"\"\"Initialise Log Mixin.\"\"\"\n        self.log = None     # type: Logger\n        self._info_to_console = False\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>\"\"\"Initialise Log Mixin.\"\"\"\n        self.log = None     # type: Optional[Logger]\n        self._info_to_console = False\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "missionpinball/mpf",
    "commit": "59d6b0cc314b1ce49dff452d7c1492d1354a832c",
    "filename": "mpf/core/segment_mappings.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/missionpinball-mpf/mpf/core/segment_mappings.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mpf/core/segment_mappings.py:616:19 Incompatible parameter type [6]: Expected `None` for 1st positional only parameter to call `dict.__setitem__` but got `int`.",
    "message": " Expected `None` for 1st positional only parameter to call `dict.__setitem__` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 616,
    "warning_line": "    ASCII_SEGMENTS[i] = AsciiSegment(dp=0, ascii_value=i, char=chr(i))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\"\"\"\n\n",
        "source_code_len": 5,
        "target_code": "\"\"\"\nfrom typing import Dict, Union\n\n",
        "target_code_len": 36,
        "diff_format": "@@ -7,2 +7,3 @@\n \"\"\"\n+from typing import Dict, Union\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n\n",
        "target_code_with_indent": "\nfrom typing import Dict, Union\n\n"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    None: AsciiSegment(dp=0, ascii_value=ord(\" \"), char=\" \")\n}\nfor i in range(128):\n",
        "source_code_len": 84,
        "target_code": "    None: AsciiSegment(dp=0, ascii_value=ord(\" \"), char=\" \")\n}   # type: Dict[Union[None, int], AsciiSegment]\nfor i in range(128):\n",
        "target_code_len": 131,
        "diff_format": "@@ -613,3 +614,3 @@\n     None: AsciiSegment(dp=0, ascii_value=ord(\" \"), char=\" \")\n-}\n+}   # type: Dict[Union[None, int], AsciiSegment]\n for i in range(128):\n",
        "source_code_with_indent": "    None: AsciiSegment(dp=0, ascii_value=ord(\" \"), char=\" \")\n}\nfor i in range(128):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    None: AsciiSegment(dp=0, ascii_value=ord(\" \"), char=\" \")\n}   # type: Dict[Union[None, int], AsciiSegment]\nfor i in range(128):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]