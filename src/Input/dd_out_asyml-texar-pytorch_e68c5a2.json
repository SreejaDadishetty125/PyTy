[
  {
    "project": "asyml/texar-pytorch",
    "commit": "e68c5a27d8d18d741c3adf7cfec5951b4284aec0",
    "filename": "examples/transformer/transformer_main.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/asyml-texar-pytorch/examples/transformer/transformer_main.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "examples/transformer/transformer_main.py:163:20 Incompatible parameter type [6]: Expected `List[typing.Union[List[str], str]]` for 1st positional only parameter to call `tx.run.metric.generation.BLEU.add` but got `List[str]`.",
    "message": " Expected `List[typing.Union[List[str], str]]` for 1st positional only parameter to call `tx.run.metric.generation.BLEU.add` but got `List[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 163,
    "warning_line": "        super().add(predicted, labels)"
  },
  {
    "project": "asyml/texar-pytorch",
    "commit": "e68c5a27d8d18d741c3adf7cfec5951b4284aec0",
    "filename": "examples/transformer/transformer_main.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/asyml-texar-pytorch/examples/transformer/transformer_main.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "examples/transformer/transformer_main.py:163:31 Incompatible parameter type [6]: Expected `List[typing.Union[List[str], str]]` for 2nd positional only parameter to call `tx.run.metric.generation.BLEU.add` but got `List[str]`.",
    "message": " Expected `List[typing.Union[List[str], str]]` for 2nd positional only parameter to call `tx.run.metric.generation.BLEU.add` but got `List[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 163,
    "warning_line": "        super().add(predicted, labels)"
  },
  {
    "project": "asyml/texar-pytorch",
    "commit": "e68c5a27d8d18d741c3adf7cfec5951b4284aec0",
    "filename": "texar/torch/run/executor.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/asyml-texar-pytorch/texar/torch/run/executor.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "texar/torch/run/executor.py:1494:39 Incompatible parameter type [6]: Expected `typing.Sized` for 1st positional only parameter to call `len` but got `Optional[str]`.",
    "message": " Expected `typing.Sized` for 1st positional only parameter to call `len` but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1494,
    "warning_line": "                        n_lines = (len(self._status_line_str) - 1) // n_cols + 1",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "                        n_cols = self._tty_ncols(dest.fileno())\n                        n_lines = (len(self._status_line_str) - 1) // n_cols + 1\n                        if n_lines > 1:\n",
        "source_code_len": 185,
        "target_code": "                        n_cols = self._tty_ncols(dest.fileno())\n                        status_len = len(self._status_line_str)  # type: ignore\n                        n_lines = (status_len - 1) // n_cols + 1\n                        if n_lines > 1:\n",
        "target_code_len": 249,
        "diff_format": "@@ -1493,3 +1493,4 @@\n                         n_cols = self._tty_ncols(dest.fileno())\n-                        n_lines = (len(self._status_line_str) - 1) // n_cols + 1\n+                        status_len = len(self._status_line_str)  # type: ignore\n+                        n_lines = (status_len - 1) // n_cols + 1\n                         if n_lines > 1:\n",
        "source_code_with_indent": "                        <IND>n_cols = self._tty_ncols(dest.fileno())\n                        n_lines = (len(self._status_line_str) - 1) // n_cols + 1\n                        if n_lines > 1:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                        <IND>n_cols = self._tty_ncols(dest.fileno())\n                        status_len = len(self._status_line_str)  # type: ignore\n                        n_lines = (status_len - 1) // n_cols + 1\n                        if n_lines > 1:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]