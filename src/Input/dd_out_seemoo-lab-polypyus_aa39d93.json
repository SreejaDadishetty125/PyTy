[
  {
    "project": "seemoo-lab/polypyus",
    "commit": "aa39d938711cd8d61b54c4d1e3544852051764d8",
    "filename": "polypyus/actions.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/seemoo-lab-polypyus/polypyus/actions.py",
    "file_hunks_size": 9,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "polypyus/actions.py:25:41 Incompatible parameter type [6]: Expected `bytes` for 1st positional only parameter to call `StartMatcher.from_start_blob` but got `int`.",
    "message": " Expected `bytes` for 1st positional only parameter to call `StartMatcher.from_start_blob` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 25,
    "warning_line": "    return [StartMatcher.from_start_blob(blob, fncs) for blob, fncs in start_groups]"
  },
  {
    "project": "seemoo-lab/polypyus",
    "commit": "aa39d938711cd8d61b54c4d1e3544852051764d8",
    "filename": "polypyus/actions.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/seemoo-lab-polypyus/polypyus/actions.py",
    "file_hunks_size": 9,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "polypyus/actions.py:25:47 Incompatible parameter type [6]: Expected `Iterable[Function]` for 2nd positional only parameter to call `StartMatcher.from_start_blob` but got `int`.",
    "message": " Expected `Iterable[Function]` for 2nd positional only parameter to call `StartMatcher.from_start_blob` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 25,
    "warning_line": "    return [StartMatcher.from_start_blob(blob, fncs) for blob, fncs in start_groups]"
  },
  {
    "project": "seemoo-lab/polypyus",
    "commit": "aa39d938711cd8d61b54c4d1e3544852051764d8",
    "filename": "polypyus/actions.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/seemoo-lab-polypyus/polypyus/actions.py",
    "file_hunks_size": 9,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "polypyus/actions.py:86:19 Incompatible parameter type [6]: Expected `typing.List[Function]` for 2nd positional only parameter to call `Matcher.from_functions` but got `Function`.",
    "message": " Expected `typing.List[Function]` for 2nd positional only parameter to call `Matcher.from_functions` but got `Function`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 86,
    "warning_line": "            name, *fnc_group, min_fnc_size=min_fnc_size, max_fuzz=max_rel_fuzziness"
  },
  {
    "project": "seemoo-lab/polypyus",
    "commit": "aa39d938711cd8d61b54c4d1e3544852051764d8",
    "filename": "polypyus/annotation_parser.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/seemoo-lab-polypyus/polypyus/annotation_parser.py",
    "file_hunks_size": 16,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "polypyus/annotation_parser.py:160:31 Incompatible parameter type [6]: Expected `Iterable[Tuple[str, int, int, str]]` for 1st positional only parameter to call `filter_elf_functions` but got `Iterable[Tuple[str, int, int]]`.",
    "message": " Expected `Iterable[Tuple[str, int, int, str]]` for 1st positional only parameter to call `filter_elf_functions` but got `Iterable[Tuple[str, int, int]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 160,
    "warning_line": "    sym = filter_elf_functions(sym)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef get_elf_symbols(elf_path: Path) -> Iterable[Tuple[str, int, int]]:\n    \"\"\"get_elf_symbols extract name, addr and type of symbol.\n",
        "source_code_len": 134,
        "target_code": "\ndef get_elf_symbols(elf_path: Path) -> Iterable[Tuple[Name, Addr, Size, str]]:\n    \"\"\"get_elf_symbols extract name, addr and type of symbol.\n",
        "target_code_len": 142,
        "diff_format": "@@ -73,3 +73,3 @@\n \n-def get_elf_symbols(elf_path: Path) -> Iterable[Tuple[str, int, int]]:\n+def get_elf_symbols(elf_path: Path) -> Iterable[Tuple[Name, Addr, Size, str]]:\n     \"\"\"get_elf_symbols extract name, addr and type of symbol.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>def get_elf_symbols(elf_path: Path) -> Iterable[Tuple[str, int, int]]:\n    <IND>",
        "target_code_with_indent": "\n<DED>def get_elf_symbols(elf_path: Path) -> Iterable[Tuple[Name, Addr, Size, str]]:\n    <IND>"
      }
    ]
  },
  {
    "project": "seemoo-lab/polypyus",
    "commit": "aa39d938711cd8d61b54c4d1e3544852051764d8",
    "filename": "polypyus/annotation_parser.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/seemoo-lab-polypyus/polypyus/annotation_parser.py",
    "file_hunks_size": 16,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "polypyus/annotation_parser.py:178:45 Incompatible parameter type [6]: Expected `str` for 2nd positional only parameter to call `getattr` but got `typing.Optional[str]`.",
    "message": " Expected `str` for 2nd positional only parameter to call `getattr` but got `typing.Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 178,
    "warning_line": "                mode = getattr(FunctionMode, mode)"
  },
  {
    "project": "seemoo-lab/polypyus",
    "commit": "aa39d938711cd8d61b54c4d1e3544852051764d8",
    "filename": "polypyus/annotation_parser.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/seemoo-lab-polypyus/polypyus/annotation_parser.py",
    "file_hunks_size": 16,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "polypyus/annotation_parser.py:317:19 Incompatible parameter type [6]: Expected `int` for 1st positional only parameter to call `RamPatch.__init__` but got `typing.Tuple[typing.Any, ...]`.",
    "message": " Expected `int` for 1st positional only parameter to call `RamPatch.__init__` but got `typing.Tuple[typing.Any, ...]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 317,
    "warning_line": "        return cls(target_address, value)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "    yield from parse_symdef_flag(meta)\n\n\nclass HCD_TYPES(IntEnum):\n    HCI_CMD = 1\n    ACL_DATA = 2\n    SCO_DATA = 3\n    HCI_EVENT = 4\n    BCM_DBG = 7  # vendor specific: broadcom\n\n\nclass EOF(Exception):\n    pass\n\n\ndef _read_raise_eof(stream, size):\n    assert size > 0\n    data = stream.read(size)\n    if len(data) < size:\n        raise EOF\n    return data\n\n\n_hci_cmd_header_struct = struct.Struct(\"<HB\")\n_hci_cmd_header_size = _hci_cmd_header_struct.size\n_hci_cmd_write_ram_opcode = 0xFC4C\n\n\nclass HCI_CMD:\n    def __init__(self, header: bytes):\n        self.opcode, self.plen = _hci_cmd_header_struct.unpack(header)\n        self.raw_payload = b\"\"\n        self.payload = None\n\n    def handle_payload(self):\n        if self.opcode == _hci_cmd_write_ram_opcode:\n            self.payload = parse_tlv_list(self.raw_payload, self.plen)\n\n    def __str__(self):\n        if self.payload is None:\n            return f\"{HCI_CMD_STR[self.opcode]}\\t{self.plen}\\t{self.raw_payload.hex()}\"\n        else:\n            return f\"{HCI_CMD_STR[self.opcode]}\\t{self.plen}\\t{self.payload}\"\n\n\n_rompatch_struct = struct.Struct(\"<BII4s2x4s\")\n_rompatch_size = _rompatch_struct.size\n\n\n@dataclass\nclass RomPatch:\n    slot: int\n    target_address: int\n    value: bytes\n    unknown: bytes\n\n    def __str__(self):\n        return f\"Rom Patch[{self.slot}] @0x{self.target_address:X} '{self.value.hex()}'\"\n\n    @classmethod\n    def from_bytes(cls, data: bytes):\n        return cls(*_rompatch_struct.unpack(data))\n\n\n_rampatch_struct = struct.Struct(\"<I\")\n_rampatch_size = _rampatch_struct.size\n\n\n@dataclass\nclass RamPatch:\n    target_address: int\n    value: bytes\n\n    @classmethod\n    def from_bytes(cls, data: bytes):\n        target_address = _rampatch_struct.unpack(data[:_rampatch_size])\n        value = data[_rampatch_size:]\n        return cls(target_address, value)\n\n    def __str__(self):\n        return f\"Ram Patch @0x{self.target_address:X} '{self.value.hex()}'\"\n\n\ndef parse_tlv_list(data: bytes, plen: int) -> List[\"TLV\"]:\n    tlv_list = []\n    data_len = plen - 4\n    assert len(data) == plen\n    addr = struct.unpack(\"<I\", data[:4])[0]\n    print(f\"0x{addr:X}\")\n    offset = 4\n    while data_len >= _tlv_header_size:\n        tlv = TLV(data[offset : offset + _tlv_header_size])\n        print(tlv.plen, data_len, _tlv_header_size)\n        offset += _tlv_header_size\n        data_len -= _tlv_header_size\n        if data_len < tlv.plen:\n            break\n            raise Exception(\"Firmware is corrupted\")\n        tlv.raw_payload = data[offset : offset + tlv.plen]\n        if tlv.tlv_type == TLV_TYPES.PatchRom32b:\n            tlv.payload = RomPatch.from_bytes(tlv.raw_payload)\n        elif tlv.tlv_type == TLV_TYPES.PatchRam:\n            tlv.payload = RamPatch.from_bytes(tlv.raw_payload)\n        data_len -= tlv.plen\n        offset += tlv.plen\n        tlv_list.append(tlv)\n    if tlv_list:\n        return tlv_list\n    else:\n        return None\n\n\n_tlv_header_struct = struct.Struct(\"<BH\")\n_tlv_header_size = _tlv_header_struct.size\n\n\nclass TLV:\n    def __init__(self, header: bytes):\n        self.tlv_type, self.plen = _tlv_header_struct.unpack(header)\n        try:\n            self.tlv_type = TLV_TYPES(self.tlv_type)\n        except ValueError:\n            pass\n        self.raw_payload = b\"\"\n        self.payload = None\n\n    def __str__(self):\n        if self.payload is None:\n            return f\"TLV {self.tlv_type}\\t{self.plen}\\t{self.raw_payload.hex()}\"\n        else:\n            return f\"TLV {self.tlv_type}\\t{self.plen}\\t{self.payload}\"\n\n\nclass TLV_TYPES(IntEnum):\n    Reboot = 0x02\n    PatchRom32b = 0x08\n    PatchRam = 0x0A\n    SetDefaultBTDAddr = 0x40\n    SetLocalDevName = 0x41\n    EndTLVList = 0xFE\n\n\nHCI_CMD_STR = {\n    0x0401: \"COMND Inquiry\",\n    0x0402: \"COMND Inquiry_Cancel\",\n    0x0403: \"COMND Periodic_Inquiry_Mode\",\n    0x0404: \"COMND Exit_Periodic_Inquiry_Mode\",\n    0x0405: \"COMND Create_Connection\",\n    0x0406: \"COMND Disconnect\",\n    0x0408: \"COMND Create_Connection_Cancel\",\n    0x0409: \"COMND Accept_Connection_Request\",\n    0x040A: \"COMND Reject_Connection_Request\",\n    0x040B: \"COMND Link_Key_Request_Reply\",\n    0x040C: \"COMND Link_Key_Request_Negative_Reply\",\n    0x040D: \"COMND PIN_Code_Request_Reply\",\n    0x040E: \"COMND PIN_Code_Request_Negative_Reply\",\n    0x040F: \"COMND Change_Connection_Packet_Type\",\n    0x0411: \"COMND Authentication_Requested\",\n    0x0413: \"COMND Set_Connection_Encryption \",\n    0x0415: \"COMND Change_Connection_Link_Key\",\n    0x0417: \"COMND Master_Link_Key\",\n    0x0419: \"COMND Remote_Name_Request\",\n    0x041A: \"COMND Remote_Name_Request_Cancel\",\n    0x041B: \"COMND Read_Remote_Supported_Features\",\n    0x041C: \"COMND Read_Remote_Extended_Features\",\n    0x041D: \"COMND Read_Remote_Version_Information\",\n    0x041F: \"COMND Read_Clock_Offset\",\n    0x0420: \"COMND Read_LMP_Handle\",\n    0x0428: \"COMND Setup_Synchronous_Connection\",\n    0x0429: \"COMND Accept_Synchronous_Connection_Request\",\n    0x042A: \"COMND Reject_Synchronous_Connection_Request\",\n    0x042B: \"COMND IO_Capability_Request_Reply\",\n    0x042C: \"COMND User_Confirmation_Request_Reply\",\n    0x042D: \"COMND User_Confirmation_Request_Negative_Reply\",\n    0x042E: \"COMND User_Passkey_Request_Reply\",\n    0x042F: \"COMND User_Passkey_Request_Negative_Reply\",\n    0x0430: \"COMND Remote_OOB_Data_Request_Reply\",\n    0x0433: \"COMND Remote_OOB_Data_Request_Negative_Reply\",\n    0x0434: \"COMND IO_Capability_Request_Negative_Reply\",\n    0x0435: \"COMND Create_Physical_Link\",\n    0x0436: \"COMND Accept_Physical_Link\",\n    0x0437: \"COMND Disconnect_Physical_Link\",\n    0x0438: \"COMND Create_Logical_Link\",\n    0x0439: \"COMND Accept_Logical_Link\",\n    0x043A: \"COMND Disconnect_Logical_Link\",\n    0x043B: \"COMND Logical_Link_Cancel\",\n    0x043C: \"COMND Flow_Spec_Modify\",\n    0x043D: \"COMND Enhanced_Setup_Synchronous_Connection\",\n    0x043E: \"COMND Enhanced_Accept_Synchronous_Connection_Request\",\n    0x043F: \"COMND Truncated_Page\",\n    0x0440: \"COMND Truncated_Page_Cancel\",\n    0x0441: \"COMND Set_Connectionless_Slave_Broadcast\",\n    0x0442: \"COMND Set_Connectionless_Slave_Broadcast_Broadcast_Receive\",\n    0x0443: \"COMND Start_Synchronization_Train\",\n    0x0444: \"COMND Receive_Synchronization_Train\",\n    0x0445: \"COMND Remote_OOB_Extended_Data_Request_Reply\",\n    0x0801: \"COMND Hold_Mode\",\n    0x0803: \"COMND Sniff_Mode\",\n    0x0804: \"COMND Exit_Sniff_Mode\",\n    0x0805: \"COMND Park_State\",\n    0x0806: \"COMND Exit_Park_State\",\n    0x0807: \"COMND QoS_Setup\",\n    0x0809: \"COMND Role_Discovery\",\n    0x080B: \"COMND Switch_Role\",\n    0x080C: \"COMND Read_Link_Policy_Settings\",\n    0x080D: \"COMND Write_Link_Policy_Settings\",\n    0x080E: \"COMND Read_Default_Link_Policy_Settings\",\n    0x080F: \"COMND Write_Default_Link_Policy_Settings\",\n    0x0810: \"COMND Flow_Specification\",\n    0x0811: \"COMND Sniff_Subrating\",\n    0x0C01: \"COMND Set_Event_Mask\",\n    0x0C03: \"COMND Reset\",\n    0x0C05: \"COMND Set_Event_Filter\",\n    0x0C08: \"COMND Flush\",\n    0x0C09: \"COMND Read_PIN_Type\",\n    0x0C0A: \"COMND Write_PIN_Type\",\n    0x0C0B: \"COMND Create_New_Unit_Key\",\n    0x0C0D: \"COMND Read_Stored_Link_Key\",\n    0x0C11: \"COMND Write_Stored_Link_Key\",\n    0x0C12: \"COMND Delete_Stored_Link_Key\",\n    0x0C13: \"COMND Write_Local_Name\",\n    0x0C14: \"COMND Read_Local_Name\",\n    0x0C15: \"COMND Read_Connection_Accept_Timeout\",\n    0x0C16: \"COMND Write_Connection_Accept_Timeout\",\n    0x0C17: \"COMND Read_Page_Timeout\",\n    0x0C18: \"COMND Write_Page_Timeout\",\n    0x0C19: \"COMND Read_Scan_Enable\",\n    0x0C1A: \"COMND Write_Scan_Enable\",\n    0x0C1B: \"COMND Read_Page_Scan_Activity\",\n    0x0C1C: \"COMND Write_Page_Scan_Activity\",\n    0x0C1D: \"COMND Read_Inquiry_Scan_Activity\",\n    0x0C1E: \"COMND Write_Inquiry_Scan_Activity\",\n    0x0C1F: \"COMND Read_Authentication_Enable\",\n    0x0C20: \"COMND Write_Authentication_Enable\",\n    0x0C23: \"COMND Read_Class_of_Device\",\n    0x0C24: \"COMND Write_Class_of_Device\",\n    0x0C25: \"COMND Read_Voice_Setting\",\n    0x0C26: \"COMND Write_Voice_Setting\",\n    0x0C27: \"COMND Read_Automatic_Flush_Timeout\",\n    0x0C28: \"COMND Write_Automatic_Flush_Timeout\",\n    0x0C29: \"COMND Read_Num_Broadcast_Retransmissions\",\n    0x0C30: \"COMND Write_Num_Broadcast_Retransmissions\",\n    0x0C2B: \"COMND Read_Hold_Mode_Activity\",\n    0x0C2C: \"COMND Write_Hold_Mode_Activity\",\n    0x0C2D: \"COMND Read_Transmit_Power_Level\",\n    0x0C2E: \"COMND Read_Synchronous_Flow_Control_Enable\",\n    0x0C2F: \"COMND Write_Synchronous_Flow_Control_Enable\",\n    0x0C31: \"COMND Set_Controller_To_Host_Flow_Control\",\n    0x0C33: \"COMND Host_Buffer_Size\",\n    0x0C35: \"COMND Host_Number_Of_Completed_Packets\",\n    0x0C36: \"COMND Read_Link_Supervision_Timeout\",\n    0x0C37: \"COMND Write_Link_Supervision_Timeout\",\n    0x0C38: \"COMND Read_Number_Of_Supported_IAC\",\n    0x0C39: \"COMND Read_Current_IAC_LAP\",\n    0x0C3A: \"COMND Write_Current_IAC_LAP\",\n    0x0C3F: \"COMND Set_AFH_Host_Channel_Classification\",\n    0x0C42: \"COMND Read_Inquiry_Scan_Type\",\n    0x0C43: \"COMND Write_Inquiry_Scan_Type\",\n    0x0C44: \"COMND Read_Inquiry_Mode\",\n    0x0C45: \"COMND Write_Inquiry_Mode\",\n    0x0C46: \"COMND Read_Page_Scan_Type\",\n    0x0C47: \"COMND Write_Page_Scan_Type\",\n    0x0C48: \"COMND Read_AFH_Channel_Assessment_Mode\",\n    0x0C49: \"COMND Write_AFH_Channel_Assessment_Mode\",\n    0x0C51: \"COMND Read_Extended_Inquiry_Response\",\n    0x0C52: \"COMND Write_Extended_Inquiry_Response\",\n    0x0C53: \"COMND Refresh_Encryption_Key\",\n    0x0C55: \"COMND Read_Simple_Pairing_Mode\",\n    0x0C56: \"COMND Write_Simple_Pairing_Mode\",\n    0x0C57: \"COMND Read_Local_OOB_Data\",\n    0x0C58: \"COMND Read_Inquiry_Response_Transmit_Power_Level\",\n    0x0C59: \"COMND Write_Inquiry_Response_Transmit_Power_Level\",\n    0x0C60: \"COMND Send_Key_Press_Notification\",\n    0x0C5A: \"COMND Read_Default_Erroneous_Data_Reporting\",\n    0x0C5B: \"COMND Write_Default_Erroneous_Data_Reporting\",\n    0x0C5F: \"COMND Enhanced_Flush\",\n    0x0C61: \"COMND Read_Logical_Link_Accept_Timeout\",\n    0x0C62: \"COMND Write_Logical_Link_Accept_Timeout\",\n    0x0C63: \"COMND Set_Event_Mask_Page_2\",\n    0x0C64: \"COMND Read_Location_Data\",\n    0x0C65: \"COMND Write_Location_Data\",\n    0x0C66: \"COMND Read_Flow_Control_Mode\",\n    0x0C67: \"COMND Write_Flow_Control_Mode\",\n    0x0C68: \"COMND Read_Enhance_Transmit_Power_Level\",\n    0x0C69: \"COMND Read_Best_Effort_Flush_Timeout\",\n    0x0C6A: \"COMND Write_Best_Effort_Flush_Timeout\",\n    0x0C6B: \"COMND Short_Range_Mode\",\n    0x0C6C: \"COMND Read_LE_Host_Support\",\n    0x0C6D: \"COMND Write_LE_Host_Support\",\n    0x0C6E: \"COMND Set_MWS_Channel_Parameters\",\n    0x0C6F: \"COMND Set_External_Frame_Configuration\",\n    0x0C70: \"COMND Set_MWS_Signaling\",\n    0x0C71: \"COMND Set_MWS_Transport_Layer\",\n    0x0C72: \"COMND Set_MWS_Scan_Frequency_Table\",\n    0x0C73: \"COMND Set_MWS_PATTERN_Configuration\",\n    0x0C74: \"COMND Set_Reserved_LT_ADDR\",\n    0x0C75: \"COMND Delete_Reserved_LT_ADDR\",\n    0x0C76: \"COMND Set_Connectionless_Slave_Broadcast_Data\",\n    0x0C77: \"COMND Read_Synchronization_Train_Parameters\",\n    0x0C78: \"COMND Write_Synchronization_Train_Parameters\",\n    0x0C79: \"COMND Read_Secure_Connections_Host_Support\",\n    0x0C7A: \"COMND Write_Secure_Connections_Host_Support\",\n    0x0C7B: \"COMND Read_Authenticated_Payload_Timeout\",\n    0x0C7C: \"COMND Write_Authenticated_Payload_Timeout\",\n    0x0C7D: \"COMND Read_Local_OOB_Extended_Data\",\n    0x0C7E: \"COMND Read_Extended_Page_Timeout\",\n    0x0C7F: \"COMND Write_Extended_Page_Timeout\",\n    0x0C80: \"COMND Read_Extended_Inquiry_Length\",\n    0x0C81: \"COMND Write_Extended_Inquiry_Length\",\n    0x1001: \"COMND Read_Local_Version_Information\",\n    0x1002: \"COMND Read_Local_Supported_Commands\",\n    0x1003: \"COMND Read_Local_Supported_Features\",\n    0x1004: \"COMND Read_Local_Extended_Features\",\n    0x1005: \"COMND Read_Buffer_Size\",\n    0x1009: \"COMND Read_BD_ADDR\",\n    0x100A: \"COMND Read_Data_Block_Size\",\n    0x100B: \"COMND Read_Local_Supported_Codecs\",\n    0x1401: \"COMND Read_Failed_Contact_Counter\",\n    0x1402: \"COMND Reset_Failed_Contact_Counter\",\n    0x1403: \"COMND Read_Link_Quality\",\n    0x1405: \"COMND Read_RSSI\",\n    0x1406: \"COMND Read_AFH_Channel_Map\",\n    0x1407: \"COMND Read_Clock\",\n    0x1408: \"COMND Encryption_Key_Size\",\n    0x1409: \"COMND Read_Local_AMP_Info\",\n    0x140A: \"COMND Read_Local_AMP_ASSOC\",\n    0x140B: \"COMND Write_Remote_AMP_ASSOC\",\n    0x140C: \"COMND Get_MWS_Transport_Layer_Configuration\",\n    0x140D: \"COMND Set_Triggered_Clock_Capture\",\n    0x1801: \"COMND Read_Loopback_Mode\",\n    0x1802: \"COMND Write_Loopback_Mode\",\n    0x1803: \"COMND Enable_Device_Under_Test_Mode\",\n    0x1804: \"COMND Write_Simple_Pairing_Debug_Mode\",\n    0x1807: \"COMND Enable_AMP_Receiver_Reports\",\n    0x1808: \"COMND AMP_Test_End\",\n    0x1809: \"COMND AMP_Test\",\n    0x180A: \"COMND Write_Secure_Connection_Test_Mode\",\n    0x2001: \"COMND LE_Set_Event_Mask\",\n    0x2002: \"COMND LE_Read_Buffer_Size\",\n    0x2003: \"COMND LE_Read_Local_Supported_Features\",\n    0x2005: \"COMND LE_Set_Random_Address\",\n    0x2006: \"COMND LE_Set_Advertising_Parameters\",\n    0x2007: \"COMND LE_Read_Advertising_Channel_Tx_Power\",\n    0x2008: \"COMND LE_Set_Advertising_Data\",\n    0x2009: \"COMND LE_Set_Scan_Responce_Data\",\n    0x200A: \"COMND LE_Set_Advertise_Enable\",\n    0x200B: \"COMND LE_Set_Set_Scan_Parameters\",\n    0x200C: \"COMND LE_Set_Scan_Enable\",\n    0x200D: \"COMND LE_Create_Connection\",\n    0x200E: \"COMND LE_Create_Connection_Cancel \",\n    0x200F: \"COMND LE_Read_White_List_Size\",\n    0x2010: \"COMND LE_Clear_White_List\",\n    0x2011: \"COMND LE_Add_Device_To_White_List\",\n    0x2012: \"COMND LE_RemoveDevice_From_White_List\",\n    0x2013: \"COMND LE_Connection_Update\",\n    0x2014: \"COMND LE_Set_Host_Channel_Classification\",\n    0x2015: \"COMND LE_Read_Channel_Map\",\n    0x2016: \"COMND LE_Read_Remote_Used_Features\",\n    0x2017: \"COMND LE_Encrypt\",\n    0x2018: \"COMND LE_Rand\",\n    0x2019: \"COMND LE_Start_Encryption\",\n    0x201A: \"COMND LE_Long_Term_Key_Request_Reply\",\n    0x201B: \"COMND LE_Long_Term_Key_Request_Negative_Reply\",\n    0x201C: \"COMND LE_Read_Supported_States\",\n    0x201D: \"COMND LE_Receiver_Test\",\n    0x201E: \"COMND LE_Transmitter_Test\",\n    0x201F: \"COMND LE_Test_End\",\n    0x2020: \"COMND LE_Remote_Connection_Parameter_Request_Reply\",\n    0x2021: \"COMND LE_Remote_Connection_Parameter_Request_Negative_Reply\",\n    # Function names extracted from CYW20735 / Packet Logger 9 / bluez source / BCM20703A2 Symbols\n    0xFC00: \"COMND VSC_CustomerExtension\",\n    0xFC01: \"COMND VSC_WriteBdAddr\",\n    0xFC02: \"COMND VSC_DumpSRAM\",\n    0xFC03: \"COMND VSC_ChannelClassConfig\",\n    0xFC04: \"COMND VSC_READ_PAGE_SCAN_REPETITION_MODE\",\n    0xFC05: \"COMND VSC_WRITE_PAGE_SCAN_REPETITION_MODE\",\n    0xFC06: \"COMND VSC_READ_PAGE_RESPONSE_TIMEOUT\",\n    0xFC07: \"COMND VSC_WRITE_PAGE_RESPONSE_TIMEOUT\",\n    0xFC08: \"COMND VSC_BTLinkQualityMode\",  # VSC_READ_NEW_CONNECTION_TIMEOUT\n    0xFC09: \"COMND VSC_WRITE_NEW_CONNECTION_TIMEOUT\",\n    0xFC0A: \"COMND VSC_Super_Peek_Poke\",\n    0xFC0B: \"COMND VSC_WriteLocalSupportedFeatures\",\n    0xFC0C: \"COMND VSC_Super_Duper_Peek_Poke\",\n    0xFC0D: \"COMND VSC_RSSI_HISTORY\",\n    0xFC0E: \"COMND VSC_SetLEDGlobalCtrl\",\n    0xFC0F: \"COMND VSC_FORCE_HOLD_MODE\",\n    0xFC10: \"COMND VSC_Commit_BDAddr\",\n    0xFC12: \"COMND VSC_WriteHoppingChannels\",\n    0xFC13: \"COMND VSC_SleepForeverMode\",\n    0xFC14: \"COMND VSC_SetCarrierFrequencyArm\",\n    0xFC16: \"COMND VSC_SetEncryptionKeySize\",\n    0xFC17: \"COMND VSC_Invalidate_Flash_and_Reboot\",\n    0xFC18: \"COMND VSC_Update_UART_Baud_Rate\",\n    0xFC19: \"COMND VSC_GpioConfigAndWrite\",\n    0xFC1A: \"COMND VSC_GpioRead\",\n    0xFC1B: \"COMND VSC_SetTestModeType\",\n    0xFC1C: \"COMND VSC_WriteScoPcmInterfaceParam\",\n    0xFC1D: \"COMND VSC_ReadScoPcmIntParam\",\n    0xFC1E: \"COMND VSC_WritePcmDataFormatParam\",\n    0xFC1F: \"COMND VSC_ReadPcmDataFormatParam\",\n    0xFC20: \"COMND VSC_WriteComfortNoiseParam\",\n    0xFC22: \"COMND VSC_WriteScoTimeSlot\",\n    0xFC23: \"COMND VSC_ReadScoTimeSlot\",\n    0xFC24: \"COMND VSC_WritePcmLoopbackModed\",\n    0xFC25: \"COMND VSC_ReadPcmLoopbackModed\",\n    0xFC26: \"COMND VSC_SetTransmitPower\",\n    0xFC27: \"COMND VSC_SetSleepMode\",\n    0xFC28: \"COMND VSC_ReadSleepMode\",\n    0xFC29: \"COMND VSC_SleepmodeCommand\",\n    0xFC2A: \"COMND VSC_HandleDelayPeripheralSCOStartup\",\n    0xFC2B: \"COMND VSC_WriteReceiveOnly\",\n    0xFC2D: \"COMND VSC_RfConfigSettings\",\n    0xFC2E: \"COMND VSC_HandleDownload_Minidriver\",\n    0xFC2F: \"COMND VSC_CrystalPpm\",\n    0xFC32: \"COMND VSC_SetAFHBehavior\",\n    0xFC33: \"COMND VSC_ReadBtwSecurityKey\",\n    0xFC34: \"COMND VSC_EnableRadio\",\n    0xFC35: \"COMND VSC_Cosim_Set_Mode\",\n    0xFC36: \"COMND VSC_GetHIDDeviceList\",\n    0xFC37: \"COMND VSC_AddHIDDevice\",\n    0xFC39: \"COMND VSC_RemoveHIDDevice\",\n    0xFC3A: \"COMND VSC_EnableTca\",\n    0xFC3B: \"COMND VSC_EnableUSBHIDEmulation\",\n    0xFC3C: \"COMND VSC_WriteRfProgrammingTable\",\n    0xFC40: \"COMND VSC_ReadCollaborationMode\",\n    0xFC41: \"COMND VSC_WriteCollaborationMode\",\n    0xFC43: \"COMND VSC_WriteRFAttenuationTable\",\n    0xFC44: \"COMND VSC_ReadUARTClockSetting\",\n    0xFC45: \"COMND VSC_WriteUARTClockSetting\",\n    0xFC46: \"COMND VSC_SetSleepClockAccuratyAndSettlingTime\",\n    0xFC47: \"COMND VSC_ConfigureSleepMode\",\n    0xFC48: \"COMND VSC_ReadRawRssi\",\n    0xFC49: \"COMND VSC_ChannelClassConfig\",\n    0xFC4C: \"COMND VSC_Write_RAM\",\n    0xFC4D: \"COMND VSC_Read_RAM\",\n    0xFC4E: \"COMND VSC_Launch_RAM\",\n    0xFC4F: \"COMND VSC_InstallPatches\",\n    0xFC51: \"COMND VSC_RadioTxTest\",\n    0xFC52: \"COMND VSC_RadioRxTest\",\n    0xFC54: \"COMND VSC_DUT_LoopbackTest\",\n    0xFC56: \"COMND VSC_EnhancedRadioRxTest\",\n    0xFC57: \"COMND VSC_WriteHighPriorityConnection\",\n    0xFC58: \"COMND VSC_SendLmpPdu\",\n    0xFC59: \"COMND VSC_PortInformationEnable\",\n    0xFC5A: \"COMND VSC_ReadBtPortPidVid\",\n    0xFC5B: \"COMND VSC_Read2MBitFlashCrc\",\n    0xFC5C: \"COMND VSC_FactoryCommitProductionTestFlag\",\n    0xFC5D: \"COMND VSC_ReadProductionTestFlag\",\n    0xFC5E: \"COMND VSC_WritePcmMuteParam\",\n    0xFC5F: \"COMND VSC_ReadPcmMuteParam\",\n    0xFC61: \"COMND VSC_WritePcmPins\",\n    0xFC62: \"COMND VSC_ReadPcmPins\",\n    0xFC6D: \"COMND VSC_WriteI2sPcmInterface\",\n    0xFC6E: \"COMND VSC_ReadControllerFeatures\",\n    0xFC6F: \"COMND VSC_WriteComfortNoiseParam\",\n    0xFC71: \"COMND VSC_WriteRamCompressed\",  # maybe .hcd only\n    0xFC78: \"COMND VSC_CALCULATE_CRC\",\n    0xFC79: \"COMND VSC_ReadVerboseConfigVersionInfo\",\n    0xFC7A: \"COMND VSC_TRANSPORT_SUSPEND\",\n    0xFC7B: \"COMND VSC_TRANSPORT_RESUME\",\n    0xFC7C: \"COMND VSC_BasebandFlowControlOverride\",\n    0xFC7D: \"COMND VSC_WriteClass15PowerTable\",\n    0xFC7E: \"COMND VSC_EnableWbs\",\n    0xFC7F: \"COMND VSC_WriteVadMode\",\n    0xFC80: \"COMND VSC_ReadVadMode\",\n    0xFC81: \"COMND VSC_WriteEcsiConfig\",\n    0xFC82: \"COMND VSC_FM_TX_COMMAND\",\n    0xFC83: \"COMND VSC_WriteDynamicScoRoutingChange\",\n    0xFC84: \"COMND VSC_READ_HID_BIT_ERROR_RATE\",\n    0xFC85: \"COMND VSC_EnableHciRemoteTest\",\n    0xFC8A: \"COMND VSC_CALIBRATE_BANDGAP\",\n    0xFC8B: \"COMND VSC_UipcOverHci\",  # Write Coexistence Tri State Enabled\n    0xFC8C: \"COMND VSC_READ_ADC_CHANNEL\",\n    0xFC90: \"COMND VSC_CoexBandwidthStatistics\",\n    0xFC91: \"COMND VSC_ReadPmuConfigFlags\",\n    0xFC92: \"COMND VSC_WritePmuConfigFlags\",\n    0xFC93: \"COMND VSC_ARUBA_CTRL_MAIN_STATUS_MON\",\n    0xFC94: \"COMND VSC_CONTROL_AFH_ACL_SETUP\",\n    0xFC95: \"COMND VSC_ARUBA_READ_WRITE_INIT_PARAM\",\n    0xFC96: \"COMND VSC_INTERNAL_CAPACITOR_TUNING\",\n    0xFC97: \"COMND VSC_BFC_DISCONNECT\",\n    0xFC98: \"COMND VSC_BFC_SEND_DATA\",\n    0xFC9A: \"COMND VSC_COEX_WRITE_WIMAX_CONFIGURATION\",\n    0xFC9B: \"COMND VSC_BFC_POLLING_ENABLE\",\n    0xFC9C: \"COMND VSC_BFC_RECONNECTABLE_DEVICE\",\n    0xFC9D: \"COMND VSC_CONDITIONAL_SCAN_CONFIGURATION\",\n    0xFC9E: \"COMND VSC_PacketErrorInjection\",\n    0xFCA0: \"COMND VSC_WriteRfReprogrammingTableMasking\",\n    0xFCA1: \"COMND VSC_BLPM_ENABLE\",\n    0xFCA2: \"COMND VSC_ReadAudioRouteInfo\",\n    0xFCA3: \"COMND VSC_EncapsulatedHciCommand\",\n    0xFCA4: \"COMND VSC_SendEpcLmpMessage\",\n    0xFCA5: \"COMND VSC_TransportStatistics\",\n    0xFCA6: \"COMND VSC_BistPostGetResults\",\n    0xFCAD: \"COMND VSC_CurrentSensorCtrlerConfig\",\n    0xFCAE: \"COMND VSC_Pcm2Setup\",\n    0xFCAF: \"COMND VSC_ReadBootCrystalStatus\",\n    0xFCB2: \"COMND VSC_SniffSubratingMaximumLocalLatency\",\n    0xFCB4: \"COMND VSC_SET_PLC_ON_OFF\",\n    0xFCB5: \"COMND VSC_BFC_Suspend\",\n    0xFCB6: \"COMND VSC_BFC_Resume\",\n    0xFCB7: \"COMND VSC_3D_TV2TV_SYNC_AND_REPORTING\",\n    0xFCB8: \"COMND VSC_WRITE_OTP\",\n    0xFCB9: \"COMND VSC_READ_OTP\",\n    0xFCBA: \"COMND VSC_le_read_random_address\",\n    0xFCBB: \"COMND VSC_le_hw_setup\",\n    0xFCBC: \"COMND VSC_LE_DVT_TXRXTEST\",\n    0xFCBD: \"COMND VSC_LE_DVT_TESTDATAPKT\",\n    0xFCBE: \"COMND VSC_LE_DVT_LOG_SETUP\",\n    0xFCBF: \"COMND VSC_LE_DVT_ERRORINJECT_SCHEME\",\n    0xFCC0: \"COMND VSC_LE_DVT_TIMING_SCHEME\",\n    0xFCC1: \"COMND VSC_LeScanRssiThresholdSetup\",\n    0xFCC2: \"COMND VSC_BFCSetParameters\",\n    0xFCC3: \"COMND VSC_BFCReadParameters\",\n    0xFCC4: \"COMND VSC_TurnOffDynamicPowerControl\",\n    0xFCC5: \"COMND VSC_IncreaseDecreasePowerLevel\",\n    0xFCC6: \"COMND VSC_ReadRawRssiValue\",\n    0xFCC7: \"COMND VSC_SetProximityTable\",\n    0xFCC8: \"COMND VSC_SetProximityTrigger\",\n    0xFCCD: \"COMND VSC_SET_SUB_SNIFF_INTERVAL\",\n    0xFCCE: \"COMND VSC_ENABLE_REPEATER_FUNCTIONALITY\",\n    0xFCCF: \"COMND VSC_UPDATE_CONFIG_ITEM\",\n    0xFCD0: \"COMND VSC_BFCCreateConnection\",\n    0xFCD1: \"COMND VSC_WBS_BEC_PARAMS\",\n    0xFCD2: \"COMND VSC_ReadGoldenRange\",\n    0xFCD3: \"COMND VSC_INITIATE_MULTICAST_BEACON_LOCK\",\n    0xFCD4: \"COMND VSC_TERMINATE_MULTICAST\",\n    0xFCD7: \"COMND VSC_ENABLE_H4IBSS\",\n    0xFCD8: \"COMND VSC_BLUEBRIDGE_SPI_NEGOTIATION_REQUEST\",\n    0xFCD9: \"COMND VSC_BLUEBRIDGE_SPI_SLEEPTHRESHOLD_REQUEST\",\n    0xFCDA: \"COMND VSC_ACCESSORY_PROTOCOL_COMMAND_GROUP\",\n    0xFCDB: \"COMND VSC_HandleWriteOtp_AuxData\",\n    0xFCDC: \"COMND VSC_InitMcastIndPoll\",\n    0xFCDD: \"COMND VSC_EnterMcastIndPoll\",\n    0xFCDE: \"COMND VSC_DisconnectMcastIndPoll\",\n    0xFCE0: \"COMND VSC_ExtendedInquiryHandshake\",\n    0xFCE1: \"COMND VSC_UARTBRIDGE_ROUTE_HCI_CMD_TO_UART_BRIDGE\",\n    0xFCE2: \"COMND VSC_Olympic\",\n    0xFCE4: \"COMND VSC_CONFIG_HID_LHL_GPIO\",\n    0xFCE5: \"COMND VSC_READ_HID_LHL_GPIO\",\n    0xFCE6: \"COMND VSC_LeTxTest\",\n    0xFCE7: \"COMND VSC_UARTBRIDGE_SET_UART_BRIDGE_PARAMETER\",\n    0xFCE8: \"COMND VSC_BIST_BER\",\n    0xFCE9: \"COMND VSC_HandleLeMetaVsc1\",\n    0xFCEA: \"COMND VSC_BFC_SET_PRIORITY\",\n    0xFCEB: \"COMND VSC_BFC_READ_PRIORITY\",\n    0xFCEC: \"COMND VSC_ANT_COMMAND\",\n    0xFCED: \"COMND VSC_LinkQualityStats\",\n    0xFCEE: \"COMND VSC_READ_NATIVE_CLOCK\",\n    0xFCEF: \"COMND VSC_BfcSetWakeupFlags\",\n    0xFCF2: \"COMND VSC_START_DVT_TINYDRIVER\",\n    0xFCF4: \"COMND VSC_SET_3DTV_DUAL_MODE_VIEW\",\n    0xFCF5: \"COMND VSC_BFCReadRemoeBPCSFeatures\",\n    0xFCF7: \"COMND VSC_IgnoreUSBReset\",\n    0xFCF8: \"COMND VSC_SNIFF_RECONNECT_TRAIN\",\n    0xFCF9: \"COMND VSC_AudioIPCommand\",\n    0xFCFA: \"COMND VSC_BFCWriteScanEnable\",\n    0xFCFE: \"COMND VSC_ReadLocalFirmwareInfo\",\n    0xFCFF: \"COMND VSC_RSSIMeasurements\",\n    0xFD01: \"COMND VSC_BFCReadScanEnable\",\n    0xFD02: \"COMND VSC_EnableWbsModified\",\n    0xFD03: \"COMND VSC_SetVsEventMask\",\n    0xFD04: \"COMND VSC_BFCIsConnectionTBFCSuspended\",\n    0xFD05: \"COMND VSC_SetUSBAutoResume\",\n    0xFD06: \"COMND VSC_SetDirectionFindingParameters\",\n    0xFD08: \"COMND VSC_ChangeLNAGainCoexECI\",\n    0xFD0C: \"COMND VSC_LTELinkQualityMode\",  # LTECoexLinkQualityMetric\n    0xFD0D: \"COMND VSC_LTETriggerWCI2Message\",\n    0xFD0E: \"COMND VSC_LTEEnableWCI2Messages\",\n    0xFD0F: \"COMND VSC_LTEEnableWCI2LoopbackTesting\",\n    0xFD10: \"COMND VSC_ScoDiagStat\",\n    0xFD11: \"COMND VSC_SetStreamingConnectionlessBroadcast\",\n    0xFD12: \"COMND VSC_ReceiveStreamingConnectonlessBroadcast\",\n    0xFD13: \"COMND VSC_WriteConnectionlessBroadcastStreamingData\",\n    0xFD14: \"COMND VSC_FlushStreamingConnectionlessBroadcastData\",\n    0xFD15: \"COMND VSC_FactoryCalSetTxPower\",\n    0xFD16: \"COMND VSC_FactoryCalTrimTxPower\",\n    0xFD17: \"COMND VSC_FactoryCalReadTempSettings\",\n    0xFD18: \"COMND VSC_FactoryCalUpdateTableSettings\",\n    0xFD1A: \"COMND VSC_WriteA2DPConnection\",\n    0xFD1B: \"COMND VSC_Factory_Cal_Read_Table_Settings\",\n    0xFD1C: \"COMND VSC_DBFW\",\n    0xFD1D: \"COMND VSC_FactoryCalibrationRxRSSITest\",\n    0xFD1E: \"COMND VSC_FactoryCalibrationRxRSSITest\",\n    0xFD1F: \"COMND VSC_LTECoexTimingAdvance\",\n    0xFD23: \"COMND VSC_HandleLeMetaVsc2\",\n    0xFD28: \"COMND VSC_WriteLocalSupportedExtendedFeatures\",\n    0xFD29: \"COMND VSC_PiconetClockAdjustment\",\n    0xFD2A: \"COMND VSC_ReadRetransmissionStatus\",\n    0xFD2F: \"COMND VSC_SetTransmitPowerRange\",\n    0xFD33: \"COMND VSC_PageInquiryTxSuppression\",\n    0xFD35: \"COMND VSC_RandomizeNativeClock\",\n    0xFD36: \"COMND VSC_StoreFactoryCalibrationData\",\n    0xFD3B: \"COMND VSC_ReadSupportedVSCs\",\n    0xFD3C: \"COMND VSC_LEWriteLocalSupportedFeatures\",\n    0xFD3E: \"COMND VSC_LEReadRemoteSupportedBRCMFeatures\",\n    0xFD40: \"COMND VSC_BcsTimeline\",\n    0xFD41: \"COMND VSC_BcsTimelineBroadcastReceive\",\n    0xFD42: \"COMND VSC_ReadDynamicMemoryPoolStatistics\",\n    0xFD43: \"COMND VSC_HandleIop3dtvTesterConfig\",\n    0xFD45: \"COMND VSC_HandleAdcCapture\",\n    0xFD47: \"COMND VSC_LEExtendedDuplicateFilter\",\n    0xFD48: \"COMND VSC_LECreateExtendedAdvertisingInstance\",\n    0xFD49: \"COMND VSC_LERemoveExtendedAdvertisingInstance\",\n    0xFD4A: \"COMND VSC_LESetExtendedAdvertisingParameters\",\n    0xFD4B: \"COMND VSC_LESetExtendedAdvertisingData\",\n    0xFD4C: \"COMND VSC_LESetExtendedScanResponseData\",\n    0xFD4D: \"COMND VSC_LESetExtendedAdvertisingEnable\",\n    0xFD4E: \"COMND VSC_LEUpdateExtendedAdvertisingInstance\",\n    0xFD53: \"COMND VSC_LEGetAndroidVendorCapabilities\",\n    0xFD54: \"COMND VSC_LEMultiAdvtCommand\",\n    0xFD55: \"COMND VSC_LeRPAOffload\",\n    0xFD56: \"COMND VSC_LEBatchScanCommand\",\n    0xFD57: \"COMND VSC_LEBrcmPCF\",\n    0xFD59: \"COMND VSC_GetControllerActivityEnergyInfo\",\n    0xFD5A: \"COMND VSC_ExtendedSetScanParameters\",\n    0xFD5B: \"COMND VSC_Getdebuginfo\",\n    0xFD5C: \"COMND VSC_WriteLocalHostState\",\n    0xFD6E: \"COMND VSC_HandleConfigure_Sleep_Lines\",\n    0xFD71: \"COMND VSC_SetSpecialSniffTransitionEnable\",\n    0xFD73: \"COMND VSC_EnableBTSync\",\n    0xFD79: \"COMND VSC_hciulp_handleBTBLEHighPowerControl\",\n    0xFD7C: \"COMND VSC_HandleCustomerEnableHALinkCommands\",\n    0xFD7D: \"COMND VSC_DWPTestCommands\",\n    0xFD7F: \"COMND VSC_Olympic_LTE_Settings\",\n    0xFD82: \"COMND VSC_WriteLERemotePublicAddress\",\n    0xFD86: \"COMND VSC_1SecondTimerCommands\",\n    0xFD88: \"COMND VSC_ForceWLANChannel\",\n    0xFD8B: \"COMND VSC_SVTConfigSetup\",\n    0xFD8F: \"COMND VSC_HandleCustomerReadHADeltaCommands\",\n    0xFD9A: \"COMND VSC_SetupRSSCommands\",\n    0xFD9C: \"COMND VSC_SetupRSSLocalCommands\",\n    0xFDA1: \"COMND VSC_AudioBufferCommands\",\n    0xFDA4: \"COMND VSC_HealthStatusReport\",\n    0xFDA8: \"COMND VSC_ChangeConnectionPriority\",\n    0xFDAA: \"COMND VSC_SamSetupCommand\",\n    0xFDAB: \"COMND VSC_bthci_cmd_ble_enhancedTransmitterTest_hopping\",\n    0xFDAF: \"COMND VSC_Handle_coex_debug_counters\",\n    0xFDBB: \"COMND VSC_Read_Inquiry_Transmit_Power\",\n    0xFDBE: \"COMND VSC_Enable_PADGC_Override\",\n    0xFDCB: \"COMND VSC_WriteTxPowerAFHMode\",\n    0xFDCD: \"COMND VSC_setMinimumNumberOfUsedChannels\",\n    0xFDCE: \"COMND VSC_HandleBrEdrLinkQualityStats\",\n    0xFF5E: \"COMND VSC_SectorErase\",\n    0xFFCE: \"COMND VSC_Chip_Erase\",\n    0xFFED: \"COMND VSC_EnterDownloadMode\",\n}\n\n# def hci_cmd_parser(bytestream: bytes):\n#     opcode = _read_raise_eof(bytestream, 2)\n#     length = _uint8.unpack(_read_raise_eof(bytestream, 1))[0]\n#     payload = bytestream.read(length)\n#     return \"cmd\"\n#\n#\n# def hci_event_parser(bytestream: bytes):\n#     eventcode = _read_raise_eof(bytestream, 1)\n#     length = _uint8.unpack(_read_raise_eof(bytestream, 1))[0]\n#     payload = bytestream.read(length)\n#     return \"event\"\n#\n#\n# def acl_data_parser(bytestream: bytes):\n#     handle_pb_bc = _read_raise_eof(bytestream, 2)\n#     length = _uint16.unpack(_read_raise_eof(bytestream, 2))[0]\n#     data = bytestream.read(length)\n#     return \"acl\"\n#\n#\n# def sco_data_parser(bytestream: bytes):\n#     handle_status_rfu = _read_raise_eof(bytestream, 2)\n#     length = _uint8.unpack(_read_raise_eof(bytestream, 1))[0]\n#     data = bytestream.read(length)\n#     return \"sco\"\n#\n#\n# _PARSE_MAP = {\n#     HCD_TYPES.HCI_CMD: hci_cmd_parser,\n#     HCD_TYPES.ACL_DATA: acl_data_parser,\n#     HCD_TYPES.SCO_DATA: sco_data_parser,\n#     HCD_TYPES.HCI_EVENT: hci_event_parser,\n#     HCD_TYPES.BCM_DBG: lambda x: \"dbg\",\n# }\n# _uint8 = struct.Struct(\"B\")\n# _uint16 = struct.Struct(\"H\")\n#\n#\n# def hcd_parser(hcd_path: str):\n#     with open(hcd_path, \"rb\") as bytestream:\n#         while True:\n#             type_ = _uint8.unpack(_read_raise_eof(bytestream, 1))[0]\n#             try:\n#                 package = _PARSE_MAP[type_](bytestream)\n#                 if package == \"dbg\":\n#                     print(\"hello broadcom!\")\n#                     break\n#                 if package is not None:\n#                     yield package\n#             except EOF:\n#                 print(\"I am not doing this right!\")\n#                 raise EOF()\ndef hcd_parser(hcd_path: str):\n    with open(hcd_path, \"rb\") as bytestream:\n        while True:\n            cmd = HCI_CMD(_read_raise_eof(bytestream, _hci_cmd_header_size))\n            cmd.raw_payload = _read_raise_eof(bytestream, cmd.plen)\n            cmd.handle_payload()\n            print(cmd)\n\n\n_iphone_bin_header_struct = struct.Struct(\n    # \"<II4x4x\" \"4xIIH2x\" \"I4x4xI\" \"III4x\" \"4xIII\" \"I\"\n    \"4I\"\n    \"3I2H\"\n    \"4I\"\n    \"4I\"\n    \"4I\"\n    \"4I\"\n)\n_ihone_bin_header_size = _iphone_bin_header_struct.size\n\n\nclass IphoneBinHeader:\n    def __init__(self, data: bytes):\n        fields = _iphone_bin_header_struct.unpack(data)\n        for i, val in enumerate(fields):\n            print(f\"{i}:\\t0x{val:X}\")\n        print(data)\n        print(data.hex())\n        print(fields)\n        # self.maybe_crc_1, _, self.maybe_rom_end, = fields[:3]\n        # self.patchram_code, self.binary_offset, _, self.maybe_ram_size = fields[3:7]\n        # self.move_patches, self.end_of_last_patch_source, _, = fields[7:10]\n        # self.maybe_something, self.brcm_cfg, self.brcm_cfgS, _ = fields[10:14]\n        #\n\n    def __str__(self):\n        return \"\"\n        # return \"\\n\".join(\n        #     (\n        #         f\"Rom end: 0x{self.maybe_rom_end:X}\",\n        #         f\"Patchram Code: 0x{self.patchram_code:X}\",\n        #         f\"Binary Offset: 0x{self.binary_offset:X}\",\n        #         f\"Maybe Ram size: 0x{self.maybe_ram_size:X}\",\n        #     )\n        # )\n",
        "source_code_len": 30412,
        "target_code": "    yield from parse_symdef_flag(meta)\n",
        "target_code_len": 39,
        "diff_format": "@@ -240,746 +229,1 @@\n     yield from parse_symdef_flag(meta)\n-\n-\n-class HCD_TYPES(IntEnum):\n-    HCI_CMD = 1\n-    ACL_DATA = 2\n-    SCO_DATA = 3\n-    HCI_EVENT = 4\n-    BCM_DBG = 7  # vendor specific: broadcom\n-\n-\n-class EOF(Exception):\n-    pass\n-\n-\n-def _read_raise_eof(stream, size):\n-    assert size > 0\n-    data = stream.read(size)\n-    if len(data) < size:\n-        raise EOF\n-    return data\n-\n-\n-_hci_cmd_header_struct = struct.Struct(\"<HB\")\n-_hci_cmd_header_size = _hci_cmd_header_struct.size\n-_hci_cmd_write_ram_opcode = 0xFC4C\n-\n-\n-class HCI_CMD:\n-    def __init__(self, header: bytes):\n-        self.opcode, self.plen = _hci_cmd_header_struct.unpack(header)\n-        self.raw_payload = b\"\"\n-        self.payload = None\n-\n-    def handle_payload(self):\n-        if self.opcode == _hci_cmd_write_ram_opcode:\n-            self.payload = parse_tlv_list(self.raw_payload, self.plen)\n-\n-    def __str__(self):\n-        if self.payload is None:\n-            return f\"{HCI_CMD_STR[self.opcode]}\\t{self.plen}\\t{self.raw_payload.hex()}\"\n-        else:\n-            return f\"{HCI_CMD_STR[self.opcode]}\\t{self.plen}\\t{self.payload}\"\n-\n-\n-_rompatch_struct = struct.Struct(\"<BII4s2x4s\")\n-_rompatch_size = _rompatch_struct.size\n-\n-\n-@dataclass\n-class RomPatch:\n-    slot: int\n-    target_address: int\n-    value: bytes\n-    unknown: bytes\n-\n-    def __str__(self):\n-        return f\"Rom Patch[{self.slot}] @0x{self.target_address:X} '{self.value.hex()}'\"\n-\n-    @classmethod\n-    def from_bytes(cls, data: bytes):\n-        return cls(*_rompatch_struct.unpack(data))\n-\n-\n-_rampatch_struct = struct.Struct(\"<I\")\n-_rampatch_size = _rampatch_struct.size\n-\n-\n-@dataclass\n-class RamPatch:\n-    target_address: int\n-    value: bytes\n-\n-    @classmethod\n-    def from_bytes(cls, data: bytes):\n-        target_address = _rampatch_struct.unpack(data[:_rampatch_size])\n-        value = data[_rampatch_size:]\n-        return cls(target_address, value)\n-\n-    def __str__(self):\n-        return f\"Ram Patch @0x{self.target_address:X} '{self.value.hex()}'\"\n-\n-\n-def parse_tlv_list(data: bytes, plen: int) -> List[\"TLV\"]:\n-    tlv_list = []\n-    data_len = plen - 4\n-    assert len(data) == plen\n-    addr = struct.unpack(\"<I\", data[:4])[0]\n-    print(f\"0x{addr:X}\")\n-    offset = 4\n-    while data_len >= _tlv_header_size:\n-        tlv = TLV(data[offset : offset + _tlv_header_size])\n-        print(tlv.plen, data_len, _tlv_header_size)\n-        offset += _tlv_header_size\n-        data_len -= _tlv_header_size\n-        if data_len < tlv.plen:\n-            break\n-            raise Exception(\"Firmware is corrupted\")\n-        tlv.raw_payload = data[offset : offset + tlv.plen]\n-        if tlv.tlv_type == TLV_TYPES.PatchRom32b:\n-            tlv.payload = RomPatch.from_bytes(tlv.raw_payload)\n-        elif tlv.tlv_type == TLV_TYPES.PatchRam:\n-            tlv.payload = RamPatch.from_bytes(tlv.raw_payload)\n-        data_len -= tlv.plen\n-        offset += tlv.plen\n-        tlv_list.append(tlv)\n-    if tlv_list:\n-        return tlv_list\n-    else:\n-        return None\n-\n-\n-_tlv_header_struct = struct.Struct(\"<BH\")\n-_tlv_header_size = _tlv_header_struct.size\n-\n-\n-class TLV:\n-    def __init__(self, header: bytes):\n-        self.tlv_type, self.plen = _tlv_header_struct.unpack(header)\n-        try:\n-            self.tlv_type = TLV_TYPES(self.tlv_type)\n-        except ValueError:\n-            pass\n-        self.raw_payload = b\"\"\n-        self.payload = None\n-\n-    def __str__(self):\n-        if self.payload is None:\n-            return f\"TLV {self.tlv_type}\\t{self.plen}\\t{self.raw_payload.hex()}\"\n-        else:\n-            return f\"TLV {self.tlv_type}\\t{self.plen}\\t{self.payload}\"\n-\n-\n-class TLV_TYPES(IntEnum):\n-    Reboot = 0x02\n-    PatchRom32b = 0x08\n-    PatchRam = 0x0A\n-    SetDefaultBTDAddr = 0x40\n-    SetLocalDevName = 0x41\n-    EndTLVList = 0xFE\n-\n-\n-HCI_CMD_STR = {\n-    0x0401: \"COMND Inquiry\",\n-    0x0402: \"COMND Inquiry_Cancel\",\n-    0x0403: \"COMND Periodic_Inquiry_Mode\",\n-    0x0404: \"COMND Exit_Periodic_Inquiry_Mode\",\n-    0x0405: \"COMND Create_Connection\",\n-    0x0406: \"COMND Disconnect\",\n-    0x0408: \"COMND Create_Connection_Cancel\",\n-    0x0409: \"COMND Accept_Connection_Request\",\n-    0x040A: \"COMND Reject_Connection_Request\",\n-    0x040B: \"COMND Link_Key_Request_Reply\",\n-    0x040C: \"COMND Link_Key_Request_Negative_Reply\",\n-    0x040D: \"COMND PIN_Code_Request_Reply\",\n-    0x040E: \"COMND PIN_Code_Request_Negative_Reply\",\n-    0x040F: \"COMND Change_Connection_Packet_Type\",\n-    0x0411: \"COMND Authentication_Requested\",\n-    0x0413: \"COMND Set_Connection_Encryption \",\n-    0x0415: \"COMND Change_Connection_Link_Key\",\n-    0x0417: \"COMND Master_Link_Key\",\n-    0x0419: \"COMND Remote_Name_Request\",\n-    0x041A: \"COMND Remote_Name_Request_Cancel\",\n-    0x041B: \"COMND Read_Remote_Supported_Features\",\n-    0x041C: \"COMND Read_Remote_Extended_Features\",\n-    0x041D: \"COMND Read_Remote_Version_Information\",\n-    0x041F: \"COMND Read_Clock_Offset\",\n-    0x0420: \"COMND Read_LMP_Handle\",\n-    0x0428: \"COMND Setup_Synchronous_Connection\",\n-    0x0429: \"COMND Accept_Synchronous_Connection_Request\",\n-    0x042A: \"COMND Reject_Synchronous_Connection_Request\",\n-    0x042B: \"COMND IO_Capability_Request_Reply\",\n-    0x042C: \"COMND User_Confirmation_Request_Reply\",\n-    0x042D: \"COMND User_Confirmation_Request_Negative_Reply\",\n-    0x042E: \"COMND User_Passkey_Request_Reply\",\n-    0x042F: \"COMND User_Passkey_Request_Negative_Reply\",\n-    0x0430: \"COMND Remote_OOB_Data_Request_Reply\",\n-    0x0433: \"COMND Remote_OOB_Data_Request_Negative_Reply\",\n-    0x0434: \"COMND IO_Capability_Request_Negative_Reply\",\n-    0x0435: \"COMND Create_Physical_Link\",\n-    0x0436: \"COMND Accept_Physical_Link\",\n-    0x0437: \"COMND Disconnect_Physical_Link\",\n-    0x0438: \"COMND Create_Logical_Link\",\n-    0x0439: \"COMND Accept_Logical_Link\",\n-    0x043A: \"COMND Disconnect_Logical_Link\",\n-    0x043B: \"COMND Logical_Link_Cancel\",\n-    0x043C: \"COMND Flow_Spec_Modify\",\n-    0x043D: \"COMND Enhanced_Setup_Synchronous_Connection\",\n-    0x043E: \"COMND Enhanced_Accept_Synchronous_Connection_Request\",\n-    0x043F: \"COMND Truncated_Page\",\n-    0x0440: \"COMND Truncated_Page_Cancel\",\n-    0x0441: \"COMND Set_Connectionless_Slave_Broadcast\",\n-    0x0442: \"COMND Set_Connectionless_Slave_Broadcast_Broadcast_Receive\",\n-    0x0443: \"COMND Start_Synchronization_Train\",\n-    0x0444: \"COMND Receive_Synchronization_Train\",\n-    0x0445: \"COMND Remote_OOB_Extended_Data_Request_Reply\",\n-    0x0801: \"COMND Hold_Mode\",\n-    0x0803: \"COMND Sniff_Mode\",\n-    0x0804: \"COMND Exit_Sniff_Mode\",\n-    0x0805: \"COMND Park_State\",\n-    0x0806: \"COMND Exit_Park_State\",\n-    0x0807: \"COMND QoS_Setup\",\n-    0x0809: \"COMND Role_Discovery\",\n-    0x080B: \"COMND Switch_Role\",\n-    0x080C: \"COMND Read_Link_Policy_Settings\",\n-    0x080D: \"COMND Write_Link_Policy_Settings\",\n-    0x080E: \"COMND Read_Default_Link_Policy_Settings\",\n-    0x080F: \"COMND Write_Default_Link_Policy_Settings\",\n-    0x0810: \"COMND Flow_Specification\",\n-    0x0811: \"COMND Sniff_Subrating\",\n-    0x0C01: \"COMND Set_Event_Mask\",\n-    0x0C03: \"COMND Reset\",\n-    0x0C05: \"COMND Set_Event_Filter\",\n-    0x0C08: \"COMND Flush\",\n-    0x0C09: \"COMND Read_PIN_Type\",\n-    0x0C0A: \"COMND Write_PIN_Type\",\n-    0x0C0B: \"COMND Create_New_Unit_Key\",\n-    0x0C0D: \"COMND Read_Stored_Link_Key\",\n-    0x0C11: \"COMND Write_Stored_Link_Key\",\n-    0x0C12: \"COMND Delete_Stored_Link_Key\",\n-    0x0C13: \"COMND Write_Local_Name\",\n-    0x0C14: \"COMND Read_Local_Name\",\n-    0x0C15: \"COMND Read_Connection_Accept_Timeout\",\n-    0x0C16: \"COMND Write_Connection_Accept_Timeout\",\n-    0x0C17: \"COMND Read_Page_Timeout\",\n-    0x0C18: \"COMND Write_Page_Timeout\",\n-    0x0C19: \"COMND Read_Scan_Enable\",\n-    0x0C1A: \"COMND Write_Scan_Enable\",\n-    0x0C1B: \"COMND Read_Page_Scan_Activity\",\n-    0x0C1C: \"COMND Write_Page_Scan_Activity\",\n-    0x0C1D: \"COMND Read_Inquiry_Scan_Activity\",\n-    0x0C1E: \"COMND Write_Inquiry_Scan_Activity\",\n-    0x0C1F: \"COMND Read_Authentication_Enable\",\n-    0x0C20: \"COMND Write_Authentication_Enable\",\n-    0x0C23: \"COMND Read_Class_of_Device\",\n-    0x0C24: \"COMND Write_Class_of_Device\",\n-    0x0C25: \"COMND Read_Voice_Setting\",\n-    0x0C26: \"COMND Write_Voice_Setting\",\n-    0x0C27: \"COMND Read_Automatic_Flush_Timeout\",\n-    0x0C28: \"COMND Write_Automatic_Flush_Timeout\",\n-    0x0C29: \"COMND Read_Num_Broadcast_Retransmissions\",\n-    0x0C30: \"COMND Write_Num_Broadcast_Retransmissions\",\n-    0x0C2B: \"COMND Read_Hold_Mode_Activity\",\n-    0x0C2C: \"COMND Write_Hold_Mode_Activity\",\n-    0x0C2D: \"COMND Read_Transmit_Power_Level\",\n-    0x0C2E: \"COMND Read_Synchronous_Flow_Control_Enable\",\n-    0x0C2F: \"COMND Write_Synchronous_Flow_Control_Enable\",\n-    0x0C31: \"COMND Set_Controller_To_Host_Flow_Control\",\n-    0x0C33: \"COMND Host_Buffer_Size\",\n-    0x0C35: \"COMND Host_Number_Of_Completed_Packets\",\n-    0x0C36: \"COMND Read_Link_Supervision_Timeout\",\n-    0x0C37: \"COMND Write_Link_Supervision_Timeout\",\n-    0x0C38: \"COMND Read_Number_Of_Supported_IAC\",\n-    0x0C39: \"COMND Read_Current_IAC_LAP\",\n-    0x0C3A: \"COMND Write_Current_IAC_LAP\",\n-    0x0C3F: \"COMND Set_AFH_Host_Channel_Classification\",\n-    0x0C42: \"COMND Read_Inquiry_Scan_Type\",\n-    0x0C43: \"COMND Write_Inquiry_Scan_Type\",\n-    0x0C44: \"COMND Read_Inquiry_Mode\",\n-    0x0C45: \"COMND Write_Inquiry_Mode\",\n-    0x0C46: \"COMND Read_Page_Scan_Type\",\n-    0x0C47: \"COMND Write_Page_Scan_Type\",\n-    0x0C48: \"COMND Read_AFH_Channel_Assessment_Mode\",\n-    0x0C49: \"COMND Write_AFH_Channel_Assessment_Mode\",\n-    0x0C51: \"COMND Read_Extended_Inquiry_Response\",\n-    0x0C52: \"COMND Write_Extended_Inquiry_Response\",\n-    0x0C53: \"COMND Refresh_Encryption_Key\",\n-    0x0C55: \"COMND Read_Simple_Pairing_Mode\",\n-    0x0C56: \"COMND Write_Simple_Pairing_Mode\",\n-    0x0C57: \"COMND Read_Local_OOB_Data\",\n-    0x0C58: \"COMND Read_Inquiry_Response_Transmit_Power_Level\",\n-    0x0C59: \"COMND Write_Inquiry_Response_Transmit_Power_Level\",\n-    0x0C60: \"COMND Send_Key_Press_Notification\",\n-    0x0C5A: \"COMND Read_Default_Erroneous_Data_Reporting\",\n-    0x0C5B: \"COMND Write_Default_Erroneous_Data_Reporting\",\n-    0x0C5F: \"COMND Enhanced_Flush\",\n-    0x0C61: \"COMND Read_Logical_Link_Accept_Timeout\",\n-    0x0C62: \"COMND Write_Logical_Link_Accept_Timeout\",\n-    0x0C63: \"COMND Set_Event_Mask_Page_2\",\n-    0x0C64: \"COMND Read_Location_Data\",\n-    0x0C65: \"COMND Write_Location_Data\",\n-    0x0C66: \"COMND Read_Flow_Control_Mode\",\n-    0x0C67: \"COMND Write_Flow_Control_Mode\",\n-    0x0C68: \"COMND Read_Enhance_Transmit_Power_Level\",\n-    0x0C69: \"COMND Read_Best_Effort_Flush_Timeout\",\n-    0x0C6A: \"COMND Write_Best_Effort_Flush_Timeout\",\n-    0x0C6B: \"COMND Short_Range_Mode\",\n-    0x0C6C: \"COMND Read_LE_Host_Support\",\n-    0x0C6D: \"COMND Write_LE_Host_Support\",\n-    0x0C6E: \"COMND Set_MWS_Channel_Parameters\",\n-    0x0C6F: \"COMND Set_External_Frame_Configuration\",\n-    0x0C70: \"COMND Set_MWS_Signaling\",\n-    0x0C71: \"COMND Set_MWS_Transport_Layer\",\n-    0x0C72: \"COMND Set_MWS_Scan_Frequency_Table\",\n-    0x0C73: \"COMND Set_MWS_PATTERN_Configuration\",\n-    0x0C74: \"COMND Set_Reserved_LT_ADDR\",\n-    0x0C75: \"COMND Delete_Reserved_LT_ADDR\",\n-    0x0C76: \"COMND Set_Connectionless_Slave_Broadcast_Data\",\n-    0x0C77: \"COMND Read_Synchronization_Train_Parameters\",\n-    0x0C78: \"COMND Write_Synchronization_Train_Parameters\",\n-    0x0C79: \"COMND Read_Secure_Connections_Host_Support\",\n-    0x0C7A: \"COMND Write_Secure_Connections_Host_Support\",\n-    0x0C7B: \"COMND Read_Authenticated_Payload_Timeout\",\n-    0x0C7C: \"COMND Write_Authenticated_Payload_Timeout\",\n-    0x0C7D: \"COMND Read_Local_OOB_Extended_Data\",\n-    0x0C7E: \"COMND Read_Extended_Page_Timeout\",\n-    0x0C7F: \"COMND Write_Extended_Page_Timeout\",\n-    0x0C80: \"COMND Read_Extended_Inquiry_Length\",\n-    0x0C81: \"COMND Write_Extended_Inquiry_Length\",\n-    0x1001: \"COMND Read_Local_Version_Information\",\n-    0x1002: \"COMND Read_Local_Supported_Commands\",\n-    0x1003: \"COMND Read_Local_Supported_Features\",\n-    0x1004: \"COMND Read_Local_Extended_Features\",\n-    0x1005: \"COMND Read_Buffer_Size\",\n-    0x1009: \"COMND Read_BD_ADDR\",\n-    0x100A: \"COMND Read_Data_Block_Size\",\n-    0x100B: \"COMND Read_Local_Supported_Codecs\",\n-    0x1401: \"COMND Read_Failed_Contact_Counter\",\n-    0x1402: \"COMND Reset_Failed_Contact_Counter\",\n-    0x1403: \"COMND Read_Link_Quality\",\n-    0x1405: \"COMND Read_RSSI\",\n-    0x1406: \"COMND Read_AFH_Channel_Map\",\n-    0x1407: \"COMND Read_Clock\",\n-    0x1408: \"COMND Encryption_Key_Size\",\n-    0x1409: \"COMND Read_Local_AMP_Info\",\n-    0x140A: \"COMND Read_Local_AMP_ASSOC\",\n-    0x140B: \"COMND Write_Remote_AMP_ASSOC\",\n-    0x140C: \"COMND Get_MWS_Transport_Layer_Configuration\",\n-    0x140D: \"COMND Set_Triggered_Clock_Capture\",\n-    0x1801: \"COMND Read_Loopback_Mode\",\n-    0x1802: \"COMND Write_Loopback_Mode\",\n-    0x1803: \"COMND Enable_Device_Under_Test_Mode\",\n-    0x1804: \"COMND Write_Simple_Pairing_Debug_Mode\",\n-    0x1807: \"COMND Enable_AMP_Receiver_Reports\",\n-    0x1808: \"COMND AMP_Test_End\",\n-    0x1809: \"COMND AMP_Test\",\n-    0x180A: \"COMND Write_Secure_Connection_Test_Mode\",\n-    0x2001: \"COMND LE_Set_Event_Mask\",\n-    0x2002: \"COMND LE_Read_Buffer_Size\",\n-    0x2003: \"COMND LE_Read_Local_Supported_Features\",\n-    0x2005: \"COMND LE_Set_Random_Address\",\n-    0x2006: \"COMND LE_Set_Advertising_Parameters\",\n-    0x2007: \"COMND LE_Read_Advertising_Channel_Tx_Power\",\n-    0x2008: \"COMND LE_Set_Advertising_Data\",\n-    0x2009: \"COMND LE_Set_Scan_Responce_Data\",\n-    0x200A: \"COMND LE_Set_Advertise_Enable\",\n-    0x200B: \"COMND LE_Set_Set_Scan_Parameters\",\n-    0x200C: \"COMND LE_Set_Scan_Enable\",\n-    0x200D: \"COMND LE_Create_Connection\",\n-    0x200E: \"COMND LE_Create_Connection_Cancel \",\n-    0x200F: \"COMND LE_Read_White_List_Size\",\n-    0x2010: \"COMND LE_Clear_White_List\",\n-    0x2011: \"COMND LE_Add_Device_To_White_List\",\n-    0x2012: \"COMND LE_RemoveDevice_From_White_List\",\n-    0x2013: \"COMND LE_Connection_Update\",\n-    0x2014: \"COMND LE_Set_Host_Channel_Classification\",\n-    0x2015: \"COMND LE_Read_Channel_Map\",\n-    0x2016: \"COMND LE_Read_Remote_Used_Features\",\n-    0x2017: \"COMND LE_Encrypt\",\n-    0x2018: \"COMND LE_Rand\",\n-    0x2019: \"COMND LE_Start_Encryption\",\n-    0x201A: \"COMND LE_Long_Term_Key_Request_Reply\",\n-    0x201B: \"COMND LE_Long_Term_Key_Request_Negative_Reply\",\n-    0x201C: \"COMND LE_Read_Supported_States\",\n-    0x201D: \"COMND LE_Receiver_Test\",\n-    0x201E: \"COMND LE_Transmitter_Test\",\n-    0x201F: \"COMND LE_Test_End\",\n-    0x2020: \"COMND LE_Remote_Connection_Parameter_Request_Reply\",\n-    0x2021: \"COMND LE_Remote_Connection_Parameter_Request_Negative_Reply\",\n-    # Function names extracted from CYW20735 / Packet Logger 9 / bluez source / BCM20703A2 Symbols\n-    0xFC00: \"COMND VSC_CustomerExtension\",\n-    0xFC01: \"COMND VSC_WriteBdAddr\",\n-    0xFC02: \"COMND VSC_DumpSRAM\",\n-    0xFC03: \"COMND VSC_ChannelClassConfig\",\n-    0xFC04: \"COMND VSC_READ_PAGE_SCAN_REPETITION_MODE\",\n-    0xFC05: \"COMND VSC_WRITE_PAGE_SCAN_REPETITION_MODE\",\n-    0xFC06: \"COMND VSC_READ_PAGE_RESPONSE_TIMEOUT\",\n-    0xFC07: \"COMND VSC_WRITE_PAGE_RESPONSE_TIMEOUT\",\n-    0xFC08: \"COMND VSC_BTLinkQualityMode\",  # VSC_READ_NEW_CONNECTION_TIMEOUT\n-    0xFC09: \"COMND VSC_WRITE_NEW_CONNECTION_TIMEOUT\",\n-    0xFC0A: \"COMND VSC_Super_Peek_Poke\",\n-    0xFC0B: \"COMND VSC_WriteLocalSupportedFeatures\",\n-    0xFC0C: \"COMND VSC_Super_Duper_Peek_Poke\",\n-    0xFC0D: \"COMND VSC_RSSI_HISTORY\",\n-    0xFC0E: \"COMND VSC_SetLEDGlobalCtrl\",\n-    0xFC0F: \"COMND VSC_FORCE_HOLD_MODE\",\n-    0xFC10: \"COMND VSC_Commit_BDAddr\",\n-    0xFC12: \"COMND VSC_WriteHoppingChannels\",\n-    0xFC13: \"COMND VSC_SleepForeverMode\",\n-    0xFC14: \"COMND VSC_SetCarrierFrequencyArm\",\n-    0xFC16: \"COMND VSC_SetEncryptionKeySize\",\n-    0xFC17: \"COMND VSC_Invalidate_Flash_and_Reboot\",\n-    0xFC18: \"COMND VSC_Update_UART_Baud_Rate\",\n-    0xFC19: \"COMND VSC_GpioConfigAndWrite\",\n-    0xFC1A: \"COMND VSC_GpioRead\",\n-    0xFC1B: \"COMND VSC_SetTestModeType\",\n-    0xFC1C: \"COMND VSC_WriteScoPcmInterfaceParam\",\n-    0xFC1D: \"COMND VSC_ReadScoPcmIntParam\",\n-    0xFC1E: \"COMND VSC_WritePcmDataFormatParam\",\n-    0xFC1F: \"COMND VSC_ReadPcmDataFormatParam\",\n-    0xFC20: \"COMND VSC_WriteComfortNoiseParam\",\n-    0xFC22: \"COMND VSC_WriteScoTimeSlot\",\n-    0xFC23: \"COMND VSC_ReadScoTimeSlot\",\n-    0xFC24: \"COMND VSC_WritePcmLoopbackModed\",\n-    0xFC25: \"COMND VSC_ReadPcmLoopbackModed\",\n-    0xFC26: \"COMND VSC_SetTransmitPower\",\n-    0xFC27: \"COMND VSC_SetSleepMode\",\n-    0xFC28: \"COMND VSC_ReadSleepMode\",\n-    0xFC29: \"COMND VSC_SleepmodeCommand\",\n-    0xFC2A: \"COMND VSC_HandleDelayPeripheralSCOStartup\",\n-    0xFC2B: \"COMND VSC_WriteReceiveOnly\",\n-    0xFC2D: \"COMND VSC_RfConfigSettings\",\n-    0xFC2E: \"COMND VSC_HandleDownload_Minidriver\",\n-    0xFC2F: \"COMND VSC_CrystalPpm\",\n-    0xFC32: \"COMND VSC_SetAFHBehavior\",\n-    0xFC33: \"COMND VSC_ReadBtwSecurityKey\",\n-    0xFC34: \"COMND VSC_EnableRadio\",\n-    0xFC35: \"COMND VSC_Cosim_Set_Mode\",\n-    0xFC36: \"COMND VSC_GetHIDDeviceList\",\n-    0xFC37: \"COMND VSC_AddHIDDevice\",\n-    0xFC39: \"COMND VSC_RemoveHIDDevice\",\n-    0xFC3A: \"COMND VSC_EnableTca\",\n-    0xFC3B: \"COMND VSC_EnableUSBHIDEmulation\",\n-    0xFC3C: \"COMND VSC_WriteRfProgrammingTable\",\n-    0xFC40: \"COMND VSC_ReadCollaborationMode\",\n-    0xFC41: \"COMND VSC_WriteCollaborationMode\",\n-    0xFC43: \"COMND VSC_WriteRFAttenuationTable\",\n-    0xFC44: \"COMND VSC_ReadUARTClockSetting\",\n-    0xFC45: \"COMND VSC_WriteUARTClockSetting\",\n-    0xFC46: \"COMND VSC_SetSleepClockAccuratyAndSettlingTime\",\n-    0xFC47: \"COMND VSC_ConfigureSleepMode\",\n-    0xFC48: \"COMND VSC_ReadRawRssi\",\n-    0xFC49: \"COMND VSC_ChannelClassConfig\",\n-    0xFC4C: \"COMND VSC_Write_RAM\",\n-    0xFC4D: \"COMND VSC_Read_RAM\",\n-    0xFC4E: \"COMND VSC_Launch_RAM\",\n-    0xFC4F: \"COMND VSC_InstallPatches\",\n-    0xFC51: \"COMND VSC_RadioTxTest\",\n-    0xFC52: \"COMND VSC_RadioRxTest\",\n-    0xFC54: \"COMND VSC_DUT_LoopbackTest\",\n-    0xFC56: \"COMND VSC_EnhancedRadioRxTest\",\n-    0xFC57: \"COMND VSC_WriteHighPriorityConnection\",\n-    0xFC58: \"COMND VSC_SendLmpPdu\",\n-    0xFC59: \"COMND VSC_PortInformationEnable\",\n-    0xFC5A: \"COMND VSC_ReadBtPortPidVid\",\n-    0xFC5B: \"COMND VSC_Read2MBitFlashCrc\",\n-    0xFC5C: \"COMND VSC_FactoryCommitProductionTestFlag\",\n-    0xFC5D: \"COMND VSC_ReadProductionTestFlag\",\n-    0xFC5E: \"COMND VSC_WritePcmMuteParam\",\n-    0xFC5F: \"COMND VSC_ReadPcmMuteParam\",\n-    0xFC61: \"COMND VSC_WritePcmPins\",\n-    0xFC62: \"COMND VSC_ReadPcmPins\",\n-    0xFC6D: \"COMND VSC_WriteI2sPcmInterface\",\n-    0xFC6E: \"COMND VSC_ReadControllerFeatures\",\n-    0xFC6F: \"COMND VSC_WriteComfortNoiseParam\",\n-    0xFC71: \"COMND VSC_WriteRamCompressed\",  # maybe .hcd only\n-    0xFC78: \"COMND VSC_CALCULATE_CRC\",\n-    0xFC79: \"COMND VSC_ReadVerboseConfigVersionInfo\",\n-    0xFC7A: \"COMND VSC_TRANSPORT_SUSPEND\",\n-    0xFC7B: \"COMND VSC_TRANSPORT_RESUME\",\n-    0xFC7C: \"COMND VSC_BasebandFlowControlOverride\",\n-    0xFC7D: \"COMND VSC_WriteClass15PowerTable\",\n-    0xFC7E: \"COMND VSC_EnableWbs\",\n-    0xFC7F: \"COMND VSC_WriteVadMode\",\n-    0xFC80: \"COMND VSC_ReadVadMode\",\n-    0xFC81: \"COMND VSC_WriteEcsiConfig\",\n-    0xFC82: \"COMND VSC_FM_TX_COMMAND\",\n-    0xFC83: \"COMND VSC_WriteDynamicScoRoutingChange\",\n-    0xFC84: \"COMND VSC_READ_HID_BIT_ERROR_RATE\",\n-    0xFC85: \"COMND VSC_EnableHciRemoteTest\",\n-    0xFC8A: \"COMND VSC_CALIBRATE_BANDGAP\",\n-    0xFC8B: \"COMND VSC_UipcOverHci\",  # Write Coexistence Tri State Enabled\n-    0xFC8C: \"COMND VSC_READ_ADC_CHANNEL\",\n-    0xFC90: \"COMND VSC_CoexBandwidthStatistics\",\n-    0xFC91: \"COMND VSC_ReadPmuConfigFlags\",\n-    0xFC92: \"COMND VSC_WritePmuConfigFlags\",\n-    0xFC93: \"COMND VSC_ARUBA_CTRL_MAIN_STATUS_MON\",\n-    0xFC94: \"COMND VSC_CONTROL_AFH_ACL_SETUP\",\n-    0xFC95: \"COMND VSC_ARUBA_READ_WRITE_INIT_PARAM\",\n-    0xFC96: \"COMND VSC_INTERNAL_CAPACITOR_TUNING\",\n-    0xFC97: \"COMND VSC_BFC_DISCONNECT\",\n-    0xFC98: \"COMND VSC_BFC_SEND_DATA\",\n-    0xFC9A: \"COMND VSC_COEX_WRITE_WIMAX_CONFIGURATION\",\n-    0xFC9B: \"COMND VSC_BFC_POLLING_ENABLE\",\n-    0xFC9C: \"COMND VSC_BFC_RECONNECTABLE_DEVICE\",\n-    0xFC9D: \"COMND VSC_CONDITIONAL_SCAN_CONFIGURATION\",\n-    0xFC9E: \"COMND VSC_PacketErrorInjection\",\n-    0xFCA0: \"COMND VSC_WriteRfReprogrammingTableMasking\",\n-    0xFCA1: \"COMND VSC_BLPM_ENABLE\",\n-    0xFCA2: \"COMND VSC_ReadAudioRouteInfo\",\n-    0xFCA3: \"COMND VSC_EncapsulatedHciCommand\",\n-    0xFCA4: \"COMND VSC_SendEpcLmpMessage\",\n-    0xFCA5: \"COMND VSC_TransportStatistics\",\n-    0xFCA6: \"COMND VSC_BistPostGetResults\",\n-    0xFCAD: \"COMND VSC_CurrentSensorCtrlerConfig\",\n-    0xFCAE: \"COMND VSC_Pcm2Setup\",\n-    0xFCAF: \"COMND VSC_ReadBootCrystalStatus\",\n-    0xFCB2: \"COMND VSC_SniffSubratingMaximumLocalLatency\",\n-    0xFCB4: \"COMND VSC_SET_PLC_ON_OFF\",\n-    0xFCB5: \"COMND VSC_BFC_Suspend\",\n-    0xFCB6: \"COMND VSC_BFC_Resume\",\n-    0xFCB7: \"COMND VSC_3D_TV2TV_SYNC_AND_REPORTING\",\n-    0xFCB8: \"COMND VSC_WRITE_OTP\",\n-    0xFCB9: \"COMND VSC_READ_OTP\",\n-    0xFCBA: \"COMND VSC_le_read_random_address\",\n-    0xFCBB: \"COMND VSC_le_hw_setup\",\n-    0xFCBC: \"COMND VSC_LE_DVT_TXRXTEST\",\n-    0xFCBD: \"COMND VSC_LE_DVT_TESTDATAPKT\",\n-    0xFCBE: \"COMND VSC_LE_DVT_LOG_SETUP\",\n-    0xFCBF: \"COMND VSC_LE_DVT_ERRORINJECT_SCHEME\",\n-    0xFCC0: \"COMND VSC_LE_DVT_TIMING_SCHEME\",\n-    0xFCC1: \"COMND VSC_LeScanRssiThresholdSetup\",\n-    0xFCC2: \"COMND VSC_BFCSetParameters\",\n-    0xFCC3: \"COMND VSC_BFCReadParameters\",\n-    0xFCC4: \"COMND VSC_TurnOffDynamicPowerControl\",\n-    0xFCC5: \"COMND VSC_IncreaseDecreasePowerLevel\",\n-    0xFCC6: \"COMND VSC_ReadRawRssiValue\",\n-    0xFCC7: \"COMND VSC_SetProximityTable\",\n-    0xFCC8: \"COMND VSC_SetProximityTrigger\",\n-    0xFCCD: \"COMND VSC_SET_SUB_SNIFF_INTERVAL\",\n-    0xFCCE: \"COMND VSC_ENABLE_REPEATER_FUNCTIONALITY\",\n-    0xFCCF: \"COMND VSC_UPDATE_CONFIG_ITEM\",\n-    0xFCD0: \"COMND VSC_BFCCreateConnection\",\n-    0xFCD1: \"COMND VSC_WBS_BEC_PARAMS\",\n-    0xFCD2: \"COMND VSC_ReadGoldenRange\",\n-    0xFCD3: \"COMND VSC_INITIATE_MULTICAST_BEACON_LOCK\",\n-    0xFCD4: \"COMND VSC_TERMINATE_MULTICAST\",\n-    0xFCD7: \"COMND VSC_ENABLE_H4IBSS\",\n-    0xFCD8: \"COMND VSC_BLUEBRIDGE_SPI_NEGOTIATION_REQUEST\",\n-    0xFCD9: \"COMND VSC_BLUEBRIDGE_SPI_SLEEPTHRESHOLD_REQUEST\",\n-    0xFCDA: \"COMND VSC_ACCESSORY_PROTOCOL_COMMAND_GROUP\",\n-    0xFCDB: \"COMND VSC_HandleWriteOtp_AuxData\",\n-    0xFCDC: \"COMND VSC_InitMcastIndPoll\",\n-    0xFCDD: \"COMND VSC_EnterMcastIndPoll\",\n-    0xFCDE: \"COMND VSC_DisconnectMcastIndPoll\",\n-    0xFCE0: \"COMND VSC_ExtendedInquiryHandshake\",\n-    0xFCE1: \"COMND VSC_UARTBRIDGE_ROUTE_HCI_CMD_TO_UART_BRIDGE\",\n-    0xFCE2: \"COMND VSC_Olympic\",\n-    0xFCE4: \"COMND VSC_CONFIG_HID_LHL_GPIO\",\n-    0xFCE5: \"COMND VSC_READ_HID_LHL_GPIO\",\n-    0xFCE6: \"COMND VSC_LeTxTest\",\n-    0xFCE7: \"COMND VSC_UARTBRIDGE_SET_UART_BRIDGE_PARAMETER\",\n-    0xFCE8: \"COMND VSC_BIST_BER\",\n-    0xFCE9: \"COMND VSC_HandleLeMetaVsc1\",\n-    0xFCEA: \"COMND VSC_BFC_SET_PRIORITY\",\n-    0xFCEB: \"COMND VSC_BFC_READ_PRIORITY\",\n-    0xFCEC: \"COMND VSC_ANT_COMMAND\",\n-    0xFCED: \"COMND VSC_LinkQualityStats\",\n-    0xFCEE: \"COMND VSC_READ_NATIVE_CLOCK\",\n-    0xFCEF: \"COMND VSC_BfcSetWakeupFlags\",\n-    0xFCF2: \"COMND VSC_START_DVT_TINYDRIVER\",\n-    0xFCF4: \"COMND VSC_SET_3DTV_DUAL_MODE_VIEW\",\n-    0xFCF5: \"COMND VSC_BFCReadRemoeBPCSFeatures\",\n-    0xFCF7: \"COMND VSC_IgnoreUSBReset\",\n-    0xFCF8: \"COMND VSC_SNIFF_RECONNECT_TRAIN\",\n-    0xFCF9: \"COMND VSC_AudioIPCommand\",\n-    0xFCFA: \"COMND VSC_BFCWriteScanEnable\",\n-    0xFCFE: \"COMND VSC_ReadLocalFirmwareInfo\",\n-    0xFCFF: \"COMND VSC_RSSIMeasurements\",\n-    0xFD01: \"COMND VSC_BFCReadScanEnable\",\n-    0xFD02: \"COMND VSC_EnableWbsModified\",\n-    0xFD03: \"COMND VSC_SetVsEventMask\",\n-    0xFD04: \"COMND VSC_BFCIsConnectionTBFCSuspended\",\n-    0xFD05: \"COMND VSC_SetUSBAutoResume\",\n-    0xFD06: \"COMND VSC_SetDirectionFindingParameters\",\n-    0xFD08: \"COMND VSC_ChangeLNAGainCoexECI\",\n-    0xFD0C: \"COMND VSC_LTELinkQualityMode\",  # LTECoexLinkQualityMetric\n-    0xFD0D: \"COMND VSC_LTETriggerWCI2Message\",\n-    0xFD0E: \"COMND VSC_LTEEnableWCI2Messages\",\n-    0xFD0F: \"COMND VSC_LTEEnableWCI2LoopbackTesting\",\n-    0xFD10: \"COMND VSC_ScoDiagStat\",\n-    0xFD11: \"COMND VSC_SetStreamingConnectionlessBroadcast\",\n-    0xFD12: \"COMND VSC_ReceiveStreamingConnectonlessBroadcast\",\n-    0xFD13: \"COMND VSC_WriteConnectionlessBroadcastStreamingData\",\n-    0xFD14: \"COMND VSC_FlushStreamingConnectionlessBroadcastData\",\n-    0xFD15: \"COMND VSC_FactoryCalSetTxPower\",\n-    0xFD16: \"COMND VSC_FactoryCalTrimTxPower\",\n-    0xFD17: \"COMND VSC_FactoryCalReadTempSettings\",\n-    0xFD18: \"COMND VSC_FactoryCalUpdateTableSettings\",\n-    0xFD1A: \"COMND VSC_WriteA2DPConnection\",\n-    0xFD1B: \"COMND VSC_Factory_Cal_Read_Table_Settings\",\n-    0xFD1C: \"COMND VSC_DBFW\",\n-    0xFD1D: \"COMND VSC_FactoryCalibrationRxRSSITest\",\n-    0xFD1E: \"COMND VSC_FactoryCalibrationRxRSSITest\",\n-    0xFD1F: \"COMND VSC_LTECoexTimingAdvance\",\n-    0xFD23: \"COMND VSC_HandleLeMetaVsc2\",\n-    0xFD28: \"COMND VSC_WriteLocalSupportedExtendedFeatures\",\n-    0xFD29: \"COMND VSC_PiconetClockAdjustment\",\n-    0xFD2A: \"COMND VSC_ReadRetransmissionStatus\",\n-    0xFD2F: \"COMND VSC_SetTransmitPowerRange\",\n-    0xFD33: \"COMND VSC_PageInquiryTxSuppression\",\n-    0xFD35: \"COMND VSC_RandomizeNativeClock\",\n-    0xFD36: \"COMND VSC_StoreFactoryCalibrationData\",\n-    0xFD3B: \"COMND VSC_ReadSupportedVSCs\",\n-    0xFD3C: \"COMND VSC_LEWriteLocalSupportedFeatures\",\n-    0xFD3E: \"COMND VSC_LEReadRemoteSupportedBRCMFeatures\",\n-    0xFD40: \"COMND VSC_BcsTimeline\",\n-    0xFD41: \"COMND VSC_BcsTimelineBroadcastReceive\",\n-    0xFD42: \"COMND VSC_ReadDynamicMemoryPoolStatistics\",\n-    0xFD43: \"COMND VSC_HandleIop3dtvTesterConfig\",\n-    0xFD45: \"COMND VSC_HandleAdcCapture\",\n-    0xFD47: \"COMND VSC_LEExtendedDuplicateFilter\",\n-    0xFD48: \"COMND VSC_LECreateExtendedAdvertisingInstance\",\n-    0xFD49: \"COMND VSC_LERemoveExtendedAdvertisingInstance\",\n-    0xFD4A: \"COMND VSC_LESetExtendedAdvertisingParameters\",\n-    0xFD4B: \"COMND VSC_LESetExtendedAdvertisingData\",\n-    0xFD4C: \"COMND VSC_LESetExtendedScanResponseData\",\n-    0xFD4D: \"COMND VSC_LESetExtendedAdvertisingEnable\",\n-    0xFD4E: \"COMND VSC_LEUpdateExtendedAdvertisingInstance\",\n-    0xFD53: \"COMND VSC_LEGetAndroidVendorCapabilities\",\n-    0xFD54: \"COMND VSC_LEMultiAdvtCommand\",\n-    0xFD55: \"COMND VSC_LeRPAOffload\",\n-    0xFD56: \"COMND VSC_LEBatchScanCommand\",\n-    0xFD57: \"COMND VSC_LEBrcmPCF\",\n-    0xFD59: \"COMND VSC_GetControllerActivityEnergyInfo\",\n-    0xFD5A: \"COMND VSC_ExtendedSetScanParameters\",\n-    0xFD5B: \"COMND VSC_Getdebuginfo\",\n-    0xFD5C: \"COMND VSC_WriteLocalHostState\",\n-    0xFD6E: \"COMND VSC_HandleConfigure_Sleep_Lines\",\n-    0xFD71: \"COMND VSC_SetSpecialSniffTransitionEnable\",\n-    0xFD73: \"COMND VSC_EnableBTSync\",\n-    0xFD79: \"COMND VSC_hciulp_handleBTBLEHighPowerControl\",\n-    0xFD7C: \"COMND VSC_HandleCustomerEnableHALinkCommands\",\n-    0xFD7D: \"COMND VSC_DWPTestCommands\",\n-    0xFD7F: \"COMND VSC_Olympic_LTE_Settings\",\n-    0xFD82: \"COMND VSC_WriteLERemotePublicAddress\",\n-    0xFD86: \"COMND VSC_1SecondTimerCommands\",\n-    0xFD88: \"COMND VSC_ForceWLANChannel\",\n-    0xFD8B: \"COMND VSC_SVTConfigSetup\",\n-    0xFD8F: \"COMND VSC_HandleCustomerReadHADeltaCommands\",\n-    0xFD9A: \"COMND VSC_SetupRSSCommands\",\n-    0xFD9C: \"COMND VSC_SetupRSSLocalCommands\",\n-    0xFDA1: \"COMND VSC_AudioBufferCommands\",\n-    0xFDA4: \"COMND VSC_HealthStatusReport\",\n-    0xFDA8: \"COMND VSC_ChangeConnectionPriority\",\n-    0xFDAA: \"COMND VSC_SamSetupCommand\",\n-    0xFDAB: \"COMND VSC_bthci_cmd_ble_enhancedTransmitterTest_hopping\",\n-    0xFDAF: \"COMND VSC_Handle_coex_debug_counters\",\n-    0xFDBB: \"COMND VSC_Read_Inquiry_Transmit_Power\",\n-    0xFDBE: \"COMND VSC_Enable_PADGC_Override\",\n-    0xFDCB: \"COMND VSC_WriteTxPowerAFHMode\",\n-    0xFDCD: \"COMND VSC_setMinimumNumberOfUsedChannels\",\n-    0xFDCE: \"COMND VSC_HandleBrEdrLinkQualityStats\",\n-    0xFF5E: \"COMND VSC_SectorErase\",\n-    0xFFCE: \"COMND VSC_Chip_Erase\",\n-    0xFFED: \"COMND VSC_EnterDownloadMode\",\n-}\n-\n-# def hci_cmd_parser(bytestream: bytes):\n-#     opcode = _read_raise_eof(bytestream, 2)\n-#     length = _uint8.unpack(_read_raise_eof(bytestream, 1))[0]\n-#     payload = bytestream.read(length)\n-#     return \"cmd\"\n-#\n-#\n-# def hci_event_parser(bytestream: bytes):\n-#     eventcode = _read_raise_eof(bytestream, 1)\n-#     length = _uint8.unpack(_read_raise_eof(bytestream, 1))[0]\n-#     payload = bytestream.read(length)\n-#     return \"event\"\n-#\n-#\n-# def acl_data_parser(bytestream: bytes):\n-#     handle_pb_bc = _read_raise_eof(bytestream, 2)\n-#     length = _uint16.unpack(_read_raise_eof(bytestream, 2))[0]\n-#     data = bytestream.read(length)\n-#     return \"acl\"\n-#\n-#\n-# def sco_data_parser(bytestream: bytes):\n-#     handle_status_rfu = _read_raise_eof(bytestream, 2)\n-#     length = _uint8.unpack(_read_raise_eof(bytestream, 1))[0]\n-#     data = bytestream.read(length)\n-#     return \"sco\"\n-#\n-#\n-# _PARSE_MAP = {\n-#     HCD_TYPES.HCI_CMD: hci_cmd_parser,\n-#     HCD_TYPES.ACL_DATA: acl_data_parser,\n-#     HCD_TYPES.SCO_DATA: sco_data_parser,\n-#     HCD_TYPES.HCI_EVENT: hci_event_parser,\n-#     HCD_TYPES.BCM_DBG: lambda x: \"dbg\",\n-# }\n-# _uint8 = struct.Struct(\"B\")\n-# _uint16 = struct.Struct(\"H\")\n-#\n-#\n-# def hcd_parser(hcd_path: str):\n-#     with open(hcd_path, \"rb\") as bytestream:\n-#         while True:\n-#             type_ = _uint8.unpack(_read_raise_eof(bytestream, 1))[0]\n-#             try:\n-#                 package = _PARSE_MAP[type_](bytestream)\n-#                 if package == \"dbg\":\n-#                     print(\"hello broadcom!\")\n-#                     break\n-#                 if package is not None:\n-#                     yield package\n-#             except EOF:\n-#                 print(\"I am not doing this right!\")\n-#                 raise EOF()\n-def hcd_parser(hcd_path: str):\n-    with open(hcd_path, \"rb\") as bytestream:\n-        while True:\n-            cmd = HCI_CMD(_read_raise_eof(bytestream, _hci_cmd_header_size))\n-            cmd.raw_payload = _read_raise_eof(bytestream, cmd.plen)\n-            cmd.handle_payload()\n-            print(cmd)\n-\n-\n-_iphone_bin_header_struct = struct.Struct(\n-    # \"<II4x4x\" \"4xIIH2x\" \"I4x4xI\" \"III4x\" \"4xIII\" \"I\"\n-    \"4I\"\n-    \"3I2H\"\n-    \"4I\"\n-    \"4I\"\n-    \"4I\"\n-    \"4I\"\n-)\n-_ihone_bin_header_size = _iphone_bin_header_struct.size\n-\n-\n-class IphoneBinHeader:\n-    def __init__(self, data: bytes):\n-        fields = _iphone_bin_header_struct.unpack(data)\n-        for i, val in enumerate(fields):\n-            print(f\"{i}:\\t0x{val:X}\")\n-        print(data)\n-        print(data.hex())\n-        print(fields)\n-        # self.maybe_crc_1, _, self.maybe_rom_end, = fields[:3]\n-        # self.patchram_code, self.binary_offset, _, self.maybe_ram_size = fields[3:7]\n-        # self.move_patches, self.end_of_last_patch_source, _, = fields[7:10]\n-        # self.maybe_something, self.brcm_cfg, self.brcm_cfgS, _ = fields[10:14]\n-        #\n-\n-    def __str__(self):\n-        return \"\"\n-        # return \"\\n\".join(\n-        #     (\n-        #         f\"Rom end: 0x{self.maybe_rom_end:X}\",\n-        #         f\"Patchram Code: 0x{self.patchram_code:X}\",\n-        #         f\"Binary Offset: 0x{self.binary_offset:X}\",\n-        #         f\"Maybe Ram size: 0x{self.maybe_ram_size:X}\",\n-        #     )\n-        # )\n",
        "source_code_with_indent": "    yield from parse_symdef_flag(meta)\n\n\n<DED>class HCD_TYPES(IntEnum):\n    <IND>HCI_CMD = 1\n    ACL_DATA = 2\n    SCO_DATA = 3\n    HCI_EVENT = 4\n    BCM_DBG = 7  # vendor specific: broadcom\n\n\n<DED>class EOF(Exception):\n    <IND>pass\n\n\n<DED>def _read_raise_eof(stream, size):\n    <IND>assert size > 0\n    data = stream.read(size)\n    if len(data) < size:\n        <IND>raise EOF\n    <DED>return data\n\n\n<DED>_hci_cmd_header_struct = struct.Struct(\"<HB\")\n_hci_cmd_header_size = _hci_cmd_header_struct.size\n_hci_cmd_write_ram_opcode = 0xFC4C\n\n\nclass HCI_CMD:\n    <IND>def __init__(self, header: bytes):\n        <IND>self.opcode, self.plen = _hci_cmd_header_struct.unpack(header)\n        self.raw_payload = b\"\"\n        self.payload = None\n\n    <DED>def handle_payload(self):\n        <IND>if self.opcode == _hci_cmd_write_ram_opcode:\n            <IND>self.payload = parse_tlv_list(self.raw_payload, self.plen)\n\n    <DED><DED>def __str__(self):\n        <IND>if self.payload is None:\n            <IND>return f\"{HCI_CMD_STR[self.opcode]}\\t{self.plen}\\t{self.raw_payload.hex()}\"\n        <DED>else:\n            <IND>return f\"{HCI_CMD_STR[self.opcode]}\\t{self.plen}\\t{self.payload}\"\n\n\n<DED><DED><DED>_rompatch_struct = struct.Struct(\"<BII4s2x4s\")\n_rompatch_size = _rompatch_struct.size\n\n\n@dataclass\nclass RomPatch:\n    <IND>slot: int\n    target_address: int\n    value: bytes\n    unknown: bytes\n\n    def __str__(self):\n        <IND>return f\"Rom Patch[{self.slot}] @0x{self.target_address:X} '{self.value.hex()}'\"\n\n    <DED>@classmethod\n    def from_bytes(cls, data: bytes):\n        <IND>return cls(*_rompatch_struct.unpack(data))\n\n\n<DED><DED>_rampatch_struct = struct.Struct(\"<I\")\n_rampatch_size = _rampatch_struct.size\n\n\n@dataclass\nclass RamPatch:\n    <IND>target_address: int\n    value: bytes\n\n    @classmethod\n    def from_bytes(cls, data: bytes):\n        <IND>target_address = _rampatch_struct.unpack(data[:_rampatch_size])\n        value = data[_rampatch_size:]\n        return cls(target_address, value)\n\n    <DED>def __str__(self):\n        <IND>return f\"Ram Patch @0x{self.target_address:X} '{self.value.hex()}'\"\n\n\n<DED><DED>def parse_tlv_list(data: bytes, plen: int) -> List[\"TLV\"]:\n    <IND>tlv_list = []\n    data_len = plen - 4\n    assert len(data) == plen\n    addr = struct.unpack(\"<I\", data[:4])[0]\n    print(f\"0x{addr:X}\")\n    offset = 4\n    while data_len >= _tlv_header_size:\n        <IND>tlv = TLV(data[offset : offset + _tlv_header_size])\n        print(tlv.plen, data_len, _tlv_header_size)\n        offset += _tlv_header_size\n        data_len -= _tlv_header_size\n        if data_len < tlv.plen:\n            <IND>break\n            raise Exception(\"Firmware is corrupted\")\n        <DED>tlv.raw_payload = data[offset : offset + tlv.plen]\n        if tlv.tlv_type == TLV_TYPES.PatchRom32b:\n            <IND>tlv.payload = RomPatch.from_bytes(tlv.raw_payload)\n        <DED>elif tlv.tlv_type == TLV_TYPES.PatchRam:\n            <IND>tlv.payload = RamPatch.from_bytes(tlv.raw_payload)\n        <DED>data_len -= tlv.plen\n        offset += tlv.plen\n        tlv_list.append(tlv)\n    <DED>if tlv_list:\n        <IND>return tlv_list\n    <DED>else:\n        <IND>return None\n\n\n<DED><DED>_tlv_header_struct = struct.Struct(\"<BH\")\n_tlv_header_size = _tlv_header_struct.size\n\n\nclass TLV:\n    <IND>def __init__(self, header: bytes):\n        <IND>self.tlv_type, self.plen = _tlv_header_struct.unpack(header)\n        try:\n            <IND>self.tlv_type = TLV_TYPES(self.tlv_type)\n        <DED>except ValueError:\n            <IND>pass\n        <DED>self.raw_payload = b\"\"\n        self.payload = None\n\n    <DED>def __str__(self):\n        <IND>if self.payload is None:\n            <IND>return f\"TLV {self.tlv_type}\\t{self.plen}\\t{self.raw_payload.hex()}\"\n        <DED>else:\n            <IND>return f\"TLV {self.tlv_type}\\t{self.plen}\\t{self.payload}\"\n\n\n<DED><DED><DED>class TLV_TYPES(IntEnum):\n    <IND>Reboot = 0x02\n    PatchRom32b = 0x08\n    PatchRam = 0x0A\n    SetDefaultBTDAddr = 0x40\n    SetLocalDevName = 0x41\n    EndTLVList = 0xFE\n\n\n<DED>HCI_CMD_STR = {\n    0x0401: \"COMND Inquiry\",\n    0x0402: \"COMND Inquiry_Cancel\",\n    0x0403: \"COMND Periodic_Inquiry_Mode\",\n    0x0404: \"COMND Exit_Periodic_Inquiry_Mode\",\n    0x0405: \"COMND Create_Connection\",\n    0x0406: \"COMND Disconnect\",\n    0x0408: \"COMND Create_Connection_Cancel\",\n    0x0409: \"COMND Accept_Connection_Request\",\n    0x040A: \"COMND Reject_Connection_Request\",\n    0x040B: \"COMND Link_Key_Request_Reply\",\n    0x040C: \"COMND Link_Key_Request_Negative_Reply\",\n    0x040D: \"COMND PIN_Code_Request_Reply\",\n    0x040E: \"COMND PIN_Code_Request_Negative_Reply\",\n    0x040F: \"COMND Change_Connection_Packet_Type\",\n    0x0411: \"COMND Authentication_Requested\",\n    0x0413: \"COMND Set_Connection_Encryption \",\n    0x0415: \"COMND Change_Connection_Link_Key\",\n    0x0417: \"COMND Master_Link_Key\",\n    0x0419: \"COMND Remote_Name_Request\",\n    0x041A: \"COMND Remote_Name_Request_Cancel\",\n    0x041B: \"COMND Read_Remote_Supported_Features\",\n    0x041C: \"COMND Read_Remote_Extended_Features\",\n    0x041D: \"COMND Read_Remote_Version_Information\",\n    0x041F: \"COMND Read_Clock_Offset\",\n    0x0420: \"COMND Read_LMP_Handle\",\n    0x0428: \"COMND Setup_Synchronous_Connection\",\n    0x0429: \"COMND Accept_Synchronous_Connection_Request\",\n    0x042A: \"COMND Reject_Synchronous_Connection_Request\",\n    0x042B: \"COMND IO_Capability_Request_Reply\",\n    0x042C: \"COMND User_Confirmation_Request_Reply\",\n    0x042D: \"COMND User_Confirmation_Request_Negative_Reply\",\n    0x042E: \"COMND User_Passkey_Request_Reply\",\n    0x042F: \"COMND User_Passkey_Request_Negative_Reply\",\n    0x0430: \"COMND Remote_OOB_Data_Request_Reply\",\n    0x0433: \"COMND Remote_OOB_Data_Request_Negative_Reply\",\n    0x0434: \"COMND IO_Capability_Request_Negative_Reply\",\n    0x0435: \"COMND Create_Physical_Link\",\n    0x0436: \"COMND Accept_Physical_Link\",\n    0x0437: \"COMND Disconnect_Physical_Link\",\n    0x0438: \"COMND Create_Logical_Link\",\n    0x0439: \"COMND Accept_Logical_Link\",\n    0x043A: \"COMND Disconnect_Logical_Link\",\n    0x043B: \"COMND Logical_Link_Cancel\",\n    0x043C: \"COMND Flow_Spec_Modify\",\n    0x043D: \"COMND Enhanced_Setup_Synchronous_Connection\",\n    0x043E: \"COMND Enhanced_Accept_Synchronous_Connection_Request\",\n    0x043F: \"COMND Truncated_Page\",\n    0x0440: \"COMND Truncated_Page_Cancel\",\n    0x0441: \"COMND Set_Connectionless_Slave_Broadcast\",\n    0x0442: \"COMND Set_Connectionless_Slave_Broadcast_Broadcast_Receive\",\n    0x0443: \"COMND Start_Synchronization_Train\",\n    0x0444: \"COMND Receive_Synchronization_Train\",\n    0x0445: \"COMND Remote_OOB_Extended_Data_Request_Reply\",\n    0x0801: \"COMND Hold_Mode\",\n    0x0803: \"COMND Sniff_Mode\",\n    0x0804: \"COMND Exit_Sniff_Mode\",\n    0x0805: \"COMND Park_State\",\n    0x0806: \"COMND Exit_Park_State\",\n    0x0807: \"COMND QoS_Setup\",\n    0x0809: \"COMND Role_Discovery\",\n    0x080B: \"COMND Switch_Role\",\n    0x080C: \"COMND Read_Link_Policy_Settings\",\n    0x080D: \"COMND Write_Link_Policy_Settings\",\n    0x080E: \"COMND Read_Default_Link_Policy_Settings\",\n    0x080F: \"COMND Write_Default_Link_Policy_Settings\",\n    0x0810: \"COMND Flow_Specification\",\n    0x0811: \"COMND Sniff_Subrating\",\n    0x0C01: \"COMND Set_Event_Mask\",\n    0x0C03: \"COMND Reset\",\n    0x0C05: \"COMND Set_Event_Filter\",\n    0x0C08: \"COMND Flush\",\n    0x0C09: \"COMND Read_PIN_Type\",\n    0x0C0A: \"COMND Write_PIN_Type\",\n    0x0C0B: \"COMND Create_New_Unit_Key\",\n    0x0C0D: \"COMND Read_Stored_Link_Key\",\n    0x0C11: \"COMND Write_Stored_Link_Key\",\n    0x0C12: \"COMND Delete_Stored_Link_Key\",\n    0x0C13: \"COMND Write_Local_Name\",\n    0x0C14: \"COMND Read_Local_Name\",\n    0x0C15: \"COMND Read_Connection_Accept_Timeout\",\n    0x0C16: \"COMND Write_Connection_Accept_Timeout\",\n    0x0C17: \"COMND Read_Page_Timeout\",\n    0x0C18: \"COMND Write_Page_Timeout\",\n    0x0C19: \"COMND Read_Scan_Enable\",\n    0x0C1A: \"COMND Write_Scan_Enable\",\n    0x0C1B: \"COMND Read_Page_Scan_Activity\",\n    0x0C1C: \"COMND Write_Page_Scan_Activity\",\n    0x0C1D: \"COMND Read_Inquiry_Scan_Activity\",\n    0x0C1E: \"COMND Write_Inquiry_Scan_Activity\",\n    0x0C1F: \"COMND Read_Authentication_Enable\",\n    0x0C20: \"COMND Write_Authentication_Enable\",\n    0x0C23: \"COMND Read_Class_of_Device\",\n    0x0C24: \"COMND Write_Class_of_Device\",\n    0x0C25: \"COMND Read_Voice_Setting\",\n    0x0C26: \"COMND Write_Voice_Setting\",\n    0x0C27: \"COMND Read_Automatic_Flush_Timeout\",\n    0x0C28: \"COMND Write_Automatic_Flush_Timeout\",\n    0x0C29: \"COMND Read_Num_Broadcast_Retransmissions\",\n    0x0C30: \"COMND Write_Num_Broadcast_Retransmissions\",\n    0x0C2B: \"COMND Read_Hold_Mode_Activity\",\n    0x0C2C: \"COMND Write_Hold_Mode_Activity\",\n    0x0C2D: \"COMND Read_Transmit_Power_Level\",\n    0x0C2E: \"COMND Read_Synchronous_Flow_Control_Enable\",\n    0x0C2F: \"COMND Write_Synchronous_Flow_Control_Enable\",\n    0x0C31: \"COMND Set_Controller_To_Host_Flow_Control\",\n    0x0C33: \"COMND Host_Buffer_Size\",\n    0x0C35: \"COMND Host_Number_Of_Completed_Packets\",\n    0x0C36: \"COMND Read_Link_Supervision_Timeout\",\n    0x0C37: \"COMND Write_Link_Supervision_Timeout\",\n    0x0C38: \"COMND Read_Number_Of_Supported_IAC\",\n    0x0C39: \"COMND Read_Current_IAC_LAP\",\n    0x0C3A: \"COMND Write_Current_IAC_LAP\",\n    0x0C3F: \"COMND Set_AFH_Host_Channel_Classification\",\n    0x0C42: \"COMND Read_Inquiry_Scan_Type\",\n    0x0C43: \"COMND Write_Inquiry_Scan_Type\",\n    0x0C44: \"COMND Read_Inquiry_Mode\",\n    0x0C45: \"COMND Write_Inquiry_Mode\",\n    0x0C46: \"COMND Read_Page_Scan_Type\",\n    0x0C47: \"COMND Write_Page_Scan_Type\",\n    0x0C48: \"COMND Read_AFH_Channel_Assessment_Mode\",\n    0x0C49: \"COMND Write_AFH_Channel_Assessment_Mode\",\n    0x0C51: \"COMND Read_Extended_Inquiry_Response\",\n    0x0C52: \"COMND Write_Extended_Inquiry_Response\",\n    0x0C53: \"COMND Refresh_Encryption_Key\",\n    0x0C55: \"COMND Read_Simple_Pairing_Mode\",\n    0x0C56: \"COMND Write_Simple_Pairing_Mode\",\n    0x0C57: \"COMND Read_Local_OOB_Data\",\n    0x0C58: \"COMND Read_Inquiry_Response_Transmit_Power_Level\",\n    0x0C59: \"COMND Write_Inquiry_Response_Transmit_Power_Level\",\n    0x0C60: \"COMND Send_Key_Press_Notification\",\n    0x0C5A: \"COMND Read_Default_Erroneous_Data_Reporting\",\n    0x0C5B: \"COMND Write_Default_Erroneous_Data_Reporting\",\n    0x0C5F: \"COMND Enhanced_Flush\",\n    0x0C61: \"COMND Read_Logical_Link_Accept_Timeout\",\n    0x0C62: \"COMND Write_Logical_Link_Accept_Timeout\",\n    0x0C63: \"COMND Set_Event_Mask_Page_2\",\n    0x0C64: \"COMND Read_Location_Data\",\n    0x0C65: \"COMND Write_Location_Data\",\n    0x0C66: \"COMND Read_Flow_Control_Mode\",\n    0x0C67: \"COMND Write_Flow_Control_Mode\",\n    0x0C68: \"COMND Read_Enhance_Transmit_Power_Level\",\n    0x0C69: \"COMND Read_Best_Effort_Flush_Timeout\",\n    0x0C6A: \"COMND Write_Best_Effort_Flush_Timeout\",\n    0x0C6B: \"COMND Short_Range_Mode\",\n    0x0C6C: \"COMND Read_LE_Host_Support\",\n    0x0C6D: \"COMND Write_LE_Host_Support\",\n    0x0C6E: \"COMND Set_MWS_Channel_Parameters\",\n    0x0C6F: \"COMND Set_External_Frame_Configuration\",\n    0x0C70: \"COMND Set_MWS_Signaling\",\n    0x0C71: \"COMND Set_MWS_Transport_Layer\",\n    0x0C72: \"COMND Set_MWS_Scan_Frequency_Table\",\n    0x0C73: \"COMND Set_MWS_PATTERN_Configuration\",\n    0x0C74: \"COMND Set_Reserved_LT_ADDR\",\n    0x0C75: \"COMND Delete_Reserved_LT_ADDR\",\n    0x0C76: \"COMND Set_Connectionless_Slave_Broadcast_Data\",\n    0x0C77: \"COMND Read_Synchronization_Train_Parameters\",\n    0x0C78: \"COMND Write_Synchronization_Train_Parameters\",\n    0x0C79: \"COMND Read_Secure_Connections_Host_Support\",\n    0x0C7A: \"COMND Write_Secure_Connections_Host_Support\",\n    0x0C7B: \"COMND Read_Authenticated_Payload_Timeout\",\n    0x0C7C: \"COMND Write_Authenticated_Payload_Timeout\",\n    0x0C7D: \"COMND Read_Local_OOB_Extended_Data\",\n    0x0C7E: \"COMND Read_Extended_Page_Timeout\",\n    0x0C7F: \"COMND Write_Extended_Page_Timeout\",\n    0x0C80: \"COMND Read_Extended_Inquiry_Length\",\n    0x0C81: \"COMND Write_Extended_Inquiry_Length\",\n    0x1001: \"COMND Read_Local_Version_Information\",\n    0x1002: \"COMND Read_Local_Supported_Commands\",\n    0x1003: \"COMND Read_Local_Supported_Features\",\n    0x1004: \"COMND Read_Local_Extended_Features\",\n    0x1005: \"COMND Read_Buffer_Size\",\n    0x1009: \"COMND Read_BD_ADDR\",\n    0x100A: \"COMND Read_Data_Block_Size\",\n    0x100B: \"COMND Read_Local_Supported_Codecs\",\n    0x1401: \"COMND Read_Failed_Contact_Counter\",\n    0x1402: \"COMND Reset_Failed_Contact_Counter\",\n    0x1403: \"COMND Read_Link_Quality\",\n    0x1405: \"COMND Read_RSSI\",\n    0x1406: \"COMND Read_AFH_Channel_Map\",\n    0x1407: \"COMND Read_Clock\",\n    0x1408: \"COMND Encryption_Key_Size\",\n    0x1409: \"COMND Read_Local_AMP_Info\",\n    0x140A: \"COMND Read_Local_AMP_ASSOC\",\n    0x140B: \"COMND Write_Remote_AMP_ASSOC\",\n    0x140C: \"COMND Get_MWS_Transport_Layer_Configuration\",\n    0x140D: \"COMND Set_Triggered_Clock_Capture\",\n    0x1801: \"COMND Read_Loopback_Mode\",\n    0x1802: \"COMND Write_Loopback_Mode\",\n    0x1803: \"COMND Enable_Device_Under_Test_Mode\",\n    0x1804: \"COMND Write_Simple_Pairing_Debug_Mode\",\n    0x1807: \"COMND Enable_AMP_Receiver_Reports\",\n    0x1808: \"COMND AMP_Test_End\",\n    0x1809: \"COMND AMP_Test\",\n    0x180A: \"COMND Write_Secure_Connection_Test_Mode\",\n    0x2001: \"COMND LE_Set_Event_Mask\",\n    0x2002: \"COMND LE_Read_Buffer_Size\",\n    0x2003: \"COMND LE_Read_Local_Supported_Features\",\n    0x2005: \"COMND LE_Set_Random_Address\",\n    0x2006: \"COMND LE_Set_Advertising_Parameters\",\n    0x2007: \"COMND LE_Read_Advertising_Channel_Tx_Power\",\n    0x2008: \"COMND LE_Set_Advertising_Data\",\n    0x2009: \"COMND LE_Set_Scan_Responce_Data\",\n    0x200A: \"COMND LE_Set_Advertise_Enable\",\n    0x200B: \"COMND LE_Set_Set_Scan_Parameters\",\n    0x200C: \"COMND LE_Set_Scan_Enable\",\n    0x200D: \"COMND LE_Create_Connection\",\n    0x200E: \"COMND LE_Create_Connection_Cancel \",\n    0x200F: \"COMND LE_Read_White_List_Size\",\n    0x2010: \"COMND LE_Clear_White_List\",\n    0x2011: \"COMND LE_Add_Device_To_White_List\",\n    0x2012: \"COMND LE_RemoveDevice_From_White_List\",\n    0x2013: \"COMND LE_Connection_Update\",\n    0x2014: \"COMND LE_Set_Host_Channel_Classification\",\n    0x2015: \"COMND LE_Read_Channel_Map\",\n    0x2016: \"COMND LE_Read_Remote_Used_Features\",\n    0x2017: \"COMND LE_Encrypt\",\n    0x2018: \"COMND LE_Rand\",\n    0x2019: \"COMND LE_Start_Encryption\",\n    0x201A: \"COMND LE_Long_Term_Key_Request_Reply\",\n    0x201B: \"COMND LE_Long_Term_Key_Request_Negative_Reply\",\n    0x201C: \"COMND LE_Read_Supported_States\",\n    0x201D: \"COMND LE_Receiver_Test\",\n    0x201E: \"COMND LE_Transmitter_Test\",\n    0x201F: \"COMND LE_Test_End\",\n    0x2020: \"COMND LE_Remote_Connection_Parameter_Request_Reply\",\n    0x2021: \"COMND LE_Remote_Connection_Parameter_Request_Negative_Reply\",\n    # Function names extracted from CYW20735 / Packet Logger 9 / bluez source / BCM20703A2 Symbols\n    0xFC00: \"COMND VSC_CustomerExtension\",\n    0xFC01: \"COMND VSC_WriteBdAddr\",\n    0xFC02: \"COMND VSC_DumpSRAM\",\n    0xFC03: \"COMND VSC_ChannelClassConfig\",\n    0xFC04: \"COMND VSC_READ_PAGE_SCAN_REPETITION_MODE\",\n    0xFC05: \"COMND VSC_WRITE_PAGE_SCAN_REPETITION_MODE\",\n    0xFC06: \"COMND VSC_READ_PAGE_RESPONSE_TIMEOUT\",\n    0xFC07: \"COMND VSC_WRITE_PAGE_RESPONSE_TIMEOUT\",\n    0xFC08: \"COMND VSC_BTLinkQualityMode\",  # VSC_READ_NEW_CONNECTION_TIMEOUT\n    0xFC09: \"COMND VSC_WRITE_NEW_CONNECTION_TIMEOUT\",\n    0xFC0A: \"COMND VSC_Super_Peek_Poke\",\n    0xFC0B: \"COMND VSC_WriteLocalSupportedFeatures\",\n    0xFC0C: \"COMND VSC_Super_Duper_Peek_Poke\",\n    0xFC0D: \"COMND VSC_RSSI_HISTORY\",\n    0xFC0E: \"COMND VSC_SetLEDGlobalCtrl\",\n    0xFC0F: \"COMND VSC_FORCE_HOLD_MODE\",\n    0xFC10: \"COMND VSC_Commit_BDAddr\",\n    0xFC12: \"COMND VSC_WriteHoppingChannels\",\n    0xFC13: \"COMND VSC_SleepForeverMode\",\n    0xFC14: \"COMND VSC_SetCarrierFrequencyArm\",\n    0xFC16: \"COMND VSC_SetEncryptionKeySize\",\n    0xFC17: \"COMND VSC_Invalidate_Flash_and_Reboot\",\n    0xFC18: \"COMND VSC_Update_UART_Baud_Rate\",\n    0xFC19: \"COMND VSC_GpioConfigAndWrite\",\n    0xFC1A: \"COMND VSC_GpioRead\",\n    0xFC1B: \"COMND VSC_SetTestModeType\",\n    0xFC1C: \"COMND VSC_WriteScoPcmInterfaceParam\",\n    0xFC1D: \"COMND VSC_ReadScoPcmIntParam\",\n    0xFC1E: \"COMND VSC_WritePcmDataFormatParam\",\n    0xFC1F: \"COMND VSC_ReadPcmDataFormatParam\",\n    0xFC20: \"COMND VSC_WriteComfortNoiseParam\",\n    0xFC22: \"COMND VSC_WriteScoTimeSlot\",\n    0xFC23: \"COMND VSC_ReadScoTimeSlot\",\n    0xFC24: \"COMND VSC_WritePcmLoopbackModed\",\n    0xFC25: \"COMND VSC_ReadPcmLoopbackModed\",\n    0xFC26: \"COMND VSC_SetTransmitPower\",\n    0xFC27: \"COMND VSC_SetSleepMode\",\n    0xFC28: \"COMND VSC_ReadSleepMode\",\n    0xFC29: \"COMND VSC_SleepmodeCommand\",\n    0xFC2A: \"COMND VSC_HandleDelayPeripheralSCOStartup\",\n    0xFC2B: \"COMND VSC_WriteReceiveOnly\",\n    0xFC2D: \"COMND VSC_RfConfigSettings\",\n    0xFC2E: \"COMND VSC_HandleDownload_Minidriver\",\n    0xFC2F: \"COMND VSC_CrystalPpm\",\n    0xFC32: \"COMND VSC_SetAFHBehavior\",\n    0xFC33: \"COMND VSC_ReadBtwSecurityKey\",\n    0xFC34: \"COMND VSC_EnableRadio\",\n    0xFC35: \"COMND VSC_Cosim_Set_Mode\",\n    0xFC36: \"COMND VSC_GetHIDDeviceList\",\n    0xFC37: \"COMND VSC_AddHIDDevice\",\n    0xFC39: \"COMND VSC_RemoveHIDDevice\",\n    0xFC3A: \"COMND VSC_EnableTca\",\n    0xFC3B: \"COMND VSC_EnableUSBHIDEmulation\",\n    0xFC3C: \"COMND VSC_WriteRfProgrammingTable\",\n    0xFC40: \"COMND VSC_ReadCollaborationMode\",\n    0xFC41: \"COMND VSC_WriteCollaborationMode\",\n    0xFC43: \"COMND VSC_WriteRFAttenuationTable\",\n    0xFC44: \"COMND VSC_ReadUARTClockSetting\",\n    0xFC45: \"COMND VSC_WriteUARTClockSetting\",\n    0xFC46: \"COMND VSC_SetSleepClockAccuratyAndSettlingTime\",\n    0xFC47: \"COMND VSC_ConfigureSleepMode\",\n    0xFC48: \"COMND VSC_ReadRawRssi\",\n    0xFC49: \"COMND VSC_ChannelClassConfig\",\n    0xFC4C: \"COMND VSC_Write_RAM\",\n    0xFC4D: \"COMND VSC_Read_RAM\",\n    0xFC4E: \"COMND VSC_Launch_RAM\",\n    0xFC4F: \"COMND VSC_InstallPatches\",\n    0xFC51: \"COMND VSC_RadioTxTest\",\n    0xFC52: \"COMND VSC_RadioRxTest\",\n    0xFC54: \"COMND VSC_DUT_LoopbackTest\",\n    0xFC56: \"COMND VSC_EnhancedRadioRxTest\",\n    0xFC57: \"COMND VSC_WriteHighPriorityConnection\",\n    0xFC58: \"COMND VSC_SendLmpPdu\",\n    0xFC59: \"COMND VSC_PortInformationEnable\",\n    0xFC5A: \"COMND VSC_ReadBtPortPidVid\",\n    0xFC5B: \"COMND VSC_Read2MBitFlashCrc\",\n    0xFC5C: \"COMND VSC_FactoryCommitProductionTestFlag\",\n    0xFC5D: \"COMND VSC_ReadProductionTestFlag\",\n    0xFC5E: \"COMND VSC_WritePcmMuteParam\",\n    0xFC5F: \"COMND VSC_ReadPcmMuteParam\",\n    0xFC61: \"COMND VSC_WritePcmPins\",\n    0xFC62: \"COMND VSC_ReadPcmPins\",\n    0xFC6D: \"COMND VSC_WriteI2sPcmInterface\",\n    0xFC6E: \"COMND VSC_ReadControllerFeatures\",\n    0xFC6F: \"COMND VSC_WriteComfortNoiseParam\",\n    0xFC71: \"COMND VSC_WriteRamCompressed\",  # maybe .hcd only\n    0xFC78: \"COMND VSC_CALCULATE_CRC\",\n    0xFC79: \"COMND VSC_ReadVerboseConfigVersionInfo\",\n    0xFC7A: \"COMND VSC_TRANSPORT_SUSPEND\",\n    0xFC7B: \"COMND VSC_TRANSPORT_RESUME\",\n    0xFC7C: \"COMND VSC_BasebandFlowControlOverride\",\n    0xFC7D: \"COMND VSC_WriteClass15PowerTable\",\n    0xFC7E: \"COMND VSC_EnableWbs\",\n    0xFC7F: \"COMND VSC_WriteVadMode\",\n    0xFC80: \"COMND VSC_ReadVadMode\",\n    0xFC81: \"COMND VSC_WriteEcsiConfig\",\n    0xFC82: \"COMND VSC_FM_TX_COMMAND\",\n    0xFC83: \"COMND VSC_WriteDynamicScoRoutingChange\",\n    0xFC84: \"COMND VSC_READ_HID_BIT_ERROR_RATE\",\n    0xFC85: \"COMND VSC_EnableHciRemoteTest\",\n    0xFC8A: \"COMND VSC_CALIBRATE_BANDGAP\",\n    0xFC8B: \"COMND VSC_UipcOverHci\",  # Write Coexistence Tri State Enabled\n    0xFC8C: \"COMND VSC_READ_ADC_CHANNEL\",\n    0xFC90: \"COMND VSC_CoexBandwidthStatistics\",\n    0xFC91: \"COMND VSC_ReadPmuConfigFlags\",\n    0xFC92: \"COMND VSC_WritePmuConfigFlags\",\n    0xFC93: \"COMND VSC_ARUBA_CTRL_MAIN_STATUS_MON\",\n    0xFC94: \"COMND VSC_CONTROL_AFH_ACL_SETUP\",\n    0xFC95: \"COMND VSC_ARUBA_READ_WRITE_INIT_PARAM\",\n    0xFC96: \"COMND VSC_INTERNAL_CAPACITOR_TUNING\",\n    0xFC97: \"COMND VSC_BFC_DISCONNECT\",\n    0xFC98: \"COMND VSC_BFC_SEND_DATA\",\n    0xFC9A: \"COMND VSC_COEX_WRITE_WIMAX_CONFIGURATION\",\n    0xFC9B: \"COMND VSC_BFC_POLLING_ENABLE\",\n    0xFC9C: \"COMND VSC_BFC_RECONNECTABLE_DEVICE\",\n    0xFC9D: \"COMND VSC_CONDITIONAL_SCAN_CONFIGURATION\",\n    0xFC9E: \"COMND VSC_PacketErrorInjection\",\n    0xFCA0: \"COMND VSC_WriteRfReprogrammingTableMasking\",\n    0xFCA1: \"COMND VSC_BLPM_ENABLE\",\n    0xFCA2: \"COMND VSC_ReadAudioRouteInfo\",\n    0xFCA3: \"COMND VSC_EncapsulatedHciCommand\",\n    0xFCA4: \"COMND VSC_SendEpcLmpMessage\",\n    0xFCA5: \"COMND VSC_TransportStatistics\",\n    0xFCA6: \"COMND VSC_BistPostGetResults\",\n    0xFCAD: \"COMND VSC_CurrentSensorCtrlerConfig\",\n    0xFCAE: \"COMND VSC_Pcm2Setup\",\n    0xFCAF: \"COMND VSC_ReadBootCrystalStatus\",\n    0xFCB2: \"COMND VSC_SniffSubratingMaximumLocalLatency\",\n    0xFCB4: \"COMND VSC_SET_PLC_ON_OFF\",\n    0xFCB5: \"COMND VSC_BFC_Suspend\",\n    0xFCB6: \"COMND VSC_BFC_Resume\",\n    0xFCB7: \"COMND VSC_3D_TV2TV_SYNC_AND_REPORTING\",\n    0xFCB8: \"COMND VSC_WRITE_OTP\",\n    0xFCB9: \"COMND VSC_READ_OTP\",\n    0xFCBA: \"COMND VSC_le_read_random_address\",\n    0xFCBB: \"COMND VSC_le_hw_setup\",\n    0xFCBC: \"COMND VSC_LE_DVT_TXRXTEST\",\n    0xFCBD: \"COMND VSC_LE_DVT_TESTDATAPKT\",\n    0xFCBE: \"COMND VSC_LE_DVT_LOG_SETUP\",\n    0xFCBF: \"COMND VSC_LE_DVT_ERRORINJECT_SCHEME\",\n    0xFCC0: \"COMND VSC_LE_DVT_TIMING_SCHEME\",\n    0xFCC1: \"COMND VSC_LeScanRssiThresholdSetup\",\n    0xFCC2: \"COMND VSC_BFCSetParameters\",\n    0xFCC3: \"COMND VSC_BFCReadParameters\",\n    0xFCC4: \"COMND VSC_TurnOffDynamicPowerControl\",\n    0xFCC5: \"COMND VSC_IncreaseDecreasePowerLevel\",\n    0xFCC6: \"COMND VSC_ReadRawRssiValue\",\n    0xFCC7: \"COMND VSC_SetProximityTable\",\n    0xFCC8: \"COMND VSC_SetProximityTrigger\",\n    0xFCCD: \"COMND VSC_SET_SUB_SNIFF_INTERVAL\",\n    0xFCCE: \"COMND VSC_ENABLE_REPEATER_FUNCTIONALITY\",\n    0xFCCF: \"COMND VSC_UPDATE_CONFIG_ITEM\",\n    0xFCD0: \"COMND VSC_BFCCreateConnection\",\n    0xFCD1: \"COMND VSC_WBS_BEC_PARAMS\",\n    0xFCD2: \"COMND VSC_ReadGoldenRange\",\n    0xFCD3: \"COMND VSC_INITIATE_MULTICAST_BEACON_LOCK\",\n    0xFCD4: \"COMND VSC_TERMINATE_MULTICAST\",\n    0xFCD7: \"COMND VSC_ENABLE_H4IBSS\",\n    0xFCD8: \"COMND VSC_BLUEBRIDGE_SPI_NEGOTIATION_REQUEST\",\n    0xFCD9: \"COMND VSC_BLUEBRIDGE_SPI_SLEEPTHRESHOLD_REQUEST\",\n    0xFCDA: \"COMND VSC_ACCESSORY_PROTOCOL_COMMAND_GROUP\",\n    0xFCDB: \"COMND VSC_HandleWriteOtp_AuxData\",\n    0xFCDC: \"COMND VSC_InitMcastIndPoll\",\n    0xFCDD: \"COMND VSC_EnterMcastIndPoll\",\n    0xFCDE: \"COMND VSC_DisconnectMcastIndPoll\",\n    0xFCE0: \"COMND VSC_ExtendedInquiryHandshake\",\n    0xFCE1: \"COMND VSC_UARTBRIDGE_ROUTE_HCI_CMD_TO_UART_BRIDGE\",\n    0xFCE2: \"COMND VSC_Olympic\",\n    0xFCE4: \"COMND VSC_CONFIG_HID_LHL_GPIO\",\n    0xFCE5: \"COMND VSC_READ_HID_LHL_GPIO\",\n    0xFCE6: \"COMND VSC_LeTxTest\",\n    0xFCE7: \"COMND VSC_UARTBRIDGE_SET_UART_BRIDGE_PARAMETER\",\n    0xFCE8: \"COMND VSC_BIST_BER\",\n    0xFCE9: \"COMND VSC_HandleLeMetaVsc1\",\n    0xFCEA: \"COMND VSC_BFC_SET_PRIORITY\",\n    0xFCEB: \"COMND VSC_BFC_READ_PRIORITY\",\n    0xFCEC: \"COMND VSC_ANT_COMMAND\",\n    0xFCED: \"COMND VSC_LinkQualityStats\",\n    0xFCEE: \"COMND VSC_READ_NATIVE_CLOCK\",\n    0xFCEF: \"COMND VSC_BfcSetWakeupFlags\",\n    0xFCF2: \"COMND VSC_START_DVT_TINYDRIVER\",\n    0xFCF4: \"COMND VSC_SET_3DTV_DUAL_MODE_VIEW\",\n    0xFCF5: \"COMND VSC_BFCReadRemoeBPCSFeatures\",\n    0xFCF7: \"COMND VSC_IgnoreUSBReset\",\n    0xFCF8: \"COMND VSC_SNIFF_RECONNECT_TRAIN\",\n    0xFCF9: \"COMND VSC_AudioIPCommand\",\n    0xFCFA: \"COMND VSC_BFCWriteScanEnable\",\n    0xFCFE: \"COMND VSC_ReadLocalFirmwareInfo\",\n    0xFCFF: \"COMND VSC_RSSIMeasurements\",\n    0xFD01: \"COMND VSC_BFCReadScanEnable\",\n    0xFD02: \"COMND VSC_EnableWbsModified\",\n    0xFD03: \"COMND VSC_SetVsEventMask\",\n    0xFD04: \"COMND VSC_BFCIsConnectionTBFCSuspended\",\n    0xFD05: \"COMND VSC_SetUSBAutoResume\",\n    0xFD06: \"COMND VSC_SetDirectionFindingParameters\",\n    0xFD08: \"COMND VSC_ChangeLNAGainCoexECI\",\n    0xFD0C: \"COMND VSC_LTELinkQualityMode\",  # LTECoexLinkQualityMetric\n    0xFD0D: \"COMND VSC_LTETriggerWCI2Message\",\n    0xFD0E: \"COMND VSC_LTEEnableWCI2Messages\",\n    0xFD0F: \"COMND VSC_LTEEnableWCI2LoopbackTesting\",\n    0xFD10: \"COMND VSC_ScoDiagStat\",\n    0xFD11: \"COMND VSC_SetStreamingConnectionlessBroadcast\",\n    0xFD12: \"COMND VSC_ReceiveStreamingConnectonlessBroadcast\",\n    0xFD13: \"COMND VSC_WriteConnectionlessBroadcastStreamingData\",\n    0xFD14: \"COMND VSC_FlushStreamingConnectionlessBroadcastData\",\n    0xFD15: \"COMND VSC_FactoryCalSetTxPower\",\n    0xFD16: \"COMND VSC_FactoryCalTrimTxPower\",\n    0xFD17: \"COMND VSC_FactoryCalReadTempSettings\",\n    0xFD18: \"COMND VSC_FactoryCalUpdateTableSettings\",\n    0xFD1A: \"COMND VSC_WriteA2DPConnection\",\n    0xFD1B: \"COMND VSC_Factory_Cal_Read_Table_Settings\",\n    0xFD1C: \"COMND VSC_DBFW\",\n    0xFD1D: \"COMND VSC_FactoryCalibrationRxRSSITest\",\n    0xFD1E: \"COMND VSC_FactoryCalibrationRxRSSITest\",\n    0xFD1F: \"COMND VSC_LTECoexTimingAdvance\",\n    0xFD23: \"COMND VSC_HandleLeMetaVsc2\",\n    0xFD28: \"COMND VSC_WriteLocalSupportedExtendedFeatures\",\n    0xFD29: \"COMND VSC_PiconetClockAdjustment\",\n    0xFD2A: \"COMND VSC_ReadRetransmissionStatus\",\n    0xFD2F: \"COMND VSC_SetTransmitPowerRange\",\n    0xFD33: \"COMND VSC_PageInquiryTxSuppression\",\n    0xFD35: \"COMND VSC_RandomizeNativeClock\",\n    0xFD36: \"COMND VSC_StoreFactoryCalibrationData\",\n    0xFD3B: \"COMND VSC_ReadSupportedVSCs\",\n    0xFD3C: \"COMND VSC_LEWriteLocalSupportedFeatures\",\n    0xFD3E: \"COMND VSC_LEReadRemoteSupportedBRCMFeatures\",\n    0xFD40: \"COMND VSC_BcsTimeline\",\n    0xFD41: \"COMND VSC_BcsTimelineBroadcastReceive\",\n    0xFD42: \"COMND VSC_ReadDynamicMemoryPoolStatistics\",\n    0xFD43: \"COMND VSC_HandleIop3dtvTesterConfig\",\n    0xFD45: \"COMND VSC_HandleAdcCapture\",\n    0xFD47: \"COMND VSC_LEExtendedDuplicateFilter\",\n    0xFD48: \"COMND VSC_LECreateExtendedAdvertisingInstance\",\n    0xFD49: \"COMND VSC_LERemoveExtendedAdvertisingInstance\",\n    0xFD4A: \"COMND VSC_LESetExtendedAdvertisingParameters\",\n    0xFD4B: \"COMND VSC_LESetExtendedAdvertisingData\",\n    0xFD4C: \"COMND VSC_LESetExtendedScanResponseData\",\n    0xFD4D: \"COMND VSC_LESetExtendedAdvertisingEnable\",\n    0xFD4E: \"COMND VSC_LEUpdateExtendedAdvertisingInstance\",\n    0xFD53: \"COMND VSC_LEGetAndroidVendorCapabilities\",\n    0xFD54: \"COMND VSC_LEMultiAdvtCommand\",\n    0xFD55: \"COMND VSC_LeRPAOffload\",\n    0xFD56: \"COMND VSC_LEBatchScanCommand\",\n    0xFD57: \"COMND VSC_LEBrcmPCF\",\n    0xFD59: \"COMND VSC_GetControllerActivityEnergyInfo\",\n    0xFD5A: \"COMND VSC_ExtendedSetScanParameters\",\n    0xFD5B: \"COMND VSC_Getdebuginfo\",\n    0xFD5C: \"COMND VSC_WriteLocalHostState\",\n    0xFD6E: \"COMND VSC_HandleConfigure_Sleep_Lines\",\n    0xFD71: \"COMND VSC_SetSpecialSniffTransitionEnable\",\n    0xFD73: \"COMND VSC_EnableBTSync\",\n    0xFD79: \"COMND VSC_hciulp_handleBTBLEHighPowerControl\",\n    0xFD7C: \"COMND VSC_HandleCustomerEnableHALinkCommands\",\n    0xFD7D: \"COMND VSC_DWPTestCommands\",\n    0xFD7F: \"COMND VSC_Olympic_LTE_Settings\",\n    0xFD82: \"COMND VSC_WriteLERemotePublicAddress\",\n    0xFD86: \"COMND VSC_1SecondTimerCommands\",\n    0xFD88: \"COMND VSC_ForceWLANChannel\",\n    0xFD8B: \"COMND VSC_SVTConfigSetup\",\n    0xFD8F: \"COMND VSC_HandleCustomerReadHADeltaCommands\",\n    0xFD9A: \"COMND VSC_SetupRSSCommands\",\n    0xFD9C: \"COMND VSC_SetupRSSLocalCommands\",\n    0xFDA1: \"COMND VSC_AudioBufferCommands\",\n    0xFDA4: \"COMND VSC_HealthStatusReport\",\n    0xFDA8: \"COMND VSC_ChangeConnectionPriority\",\n    0xFDAA: \"COMND VSC_SamSetupCommand\",\n    0xFDAB: \"COMND VSC_bthci_cmd_ble_enhancedTransmitterTest_hopping\",\n    0xFDAF: \"COMND VSC_Handle_coex_debug_counters\",\n    0xFDBB: \"COMND VSC_Read_Inquiry_Transmit_Power\",\n    0xFDBE: \"COMND VSC_Enable_PADGC_Override\",\n    0xFDCB: \"COMND VSC_WriteTxPowerAFHMode\",\n    0xFDCD: \"COMND VSC_setMinimumNumberOfUsedChannels\",\n    0xFDCE: \"COMND VSC_HandleBrEdrLinkQualityStats\",\n    0xFF5E: \"COMND VSC_SectorErase\",\n    0xFFCE: \"COMND VSC_Chip_Erase\",\n    0xFFED: \"COMND VSC_EnterDownloadMode\",\n}\n\n# def hci_cmd_parser(bytestream: bytes):\n#     opcode = _read_raise_eof(bytestream, 2)\n#     length = _uint8.unpack(_read_raise_eof(bytestream, 1))[0]\n#     payload = bytestream.read(length)\n#     return \"cmd\"\n#\n#\n# def hci_event_parser(bytestream: bytes):\n#     eventcode = _read_raise_eof(bytestream, 1)\n#     length = _uint8.unpack(_read_raise_eof(bytestream, 1))[0]\n#     payload = bytestream.read(length)\n#     return \"event\"\n#\n#\n# def acl_data_parser(bytestream: bytes):\n#     handle_pb_bc = _read_raise_eof(bytestream, 2)\n#     length = _uint16.unpack(_read_raise_eof(bytestream, 2))[0]\n#     data = bytestream.read(length)\n#     return \"acl\"\n#\n#\n# def sco_data_parser(bytestream: bytes):\n#     handle_status_rfu = _read_raise_eof(bytestream, 2)\n#     length = _uint8.unpack(_read_raise_eof(bytestream, 1))[0]\n#     data = bytestream.read(length)\n#     return \"sco\"\n#\n#\n# _PARSE_MAP = {\n#     HCD_TYPES.HCI_CMD: hci_cmd_parser,\n#     HCD_TYPES.ACL_DATA: acl_data_parser,\n#     HCD_TYPES.SCO_DATA: sco_data_parser,\n#     HCD_TYPES.HCI_EVENT: hci_event_parser,\n#     HCD_TYPES.BCM_DBG: lambda x: \"dbg\",\n# }\n# _uint8 = struct.Struct(\"B\")\n# _uint16 = struct.Struct(\"H\")\n#\n#\n# def hcd_parser(hcd_path: str):\n#     with open(hcd_path, \"rb\") as bytestream:\n#         while True:\n#             type_ = _uint8.unpack(_read_raise_eof(bytestream, 1))[0]\n#             try:\n#                 package = _PARSE_MAP[type_](bytestream)\n#                 if package == \"dbg\":\n#                     print(\"hello broadcom!\")\n#                     break\n#                 if package is not None:\n#                     yield package\n#             except EOF:\n#                 print(\"I am not doing this right!\")\n#                 raise EOF()\ndef hcd_parser(hcd_path: str):\n    <IND>with open(hcd_path, \"rb\") as bytestream:\n        <IND>while True:\n            <IND>cmd = HCI_CMD(_read_raise_eof(bytestream, _hci_cmd_header_size))\n            cmd.raw_payload = _read_raise_eof(bytestream, cmd.plen)\n            cmd.handle_payload()\n            print(cmd)\n\n\n<DED><DED><DED>_iphone_bin_header_struct = struct.Struct(\n    # \"<II4x4x\" \"4xIIH2x\" \"I4x4xI\" \"III4x\" \"4xIII\" \"I\"\n    \"4I\"\n    \"3I2H\"\n    \"4I\"\n    \"4I\"\n    \"4I\"\n    \"4I\"\n)\n_ihone_bin_header_size = _iphone_bin_header_struct.size\n\n\nclass IphoneBinHeader:\n    <IND>def __init__(self, data: bytes):\n        <IND>fields = _iphone_bin_header_struct.unpack(data)\n        for i, val in enumerate(fields):\n            <IND>print(f\"{i}:\\t0x{val:X}\")\n        <DED>print(data)\n        print(data.hex())\n        print(fields)\n        # self.maybe_crc_1, _, self.maybe_rom_end, = fields[:3]\n        # self.patchram_code, self.binary_offset, _, self.maybe_ram_size = fields[3:7]\n        # self.move_patches, self.end_of_last_patch_source, _, = fields[7:10]\n        # self.maybe_something, self.brcm_cfg, self.brcm_cfgS, _ = fields[10:14]\n        #\n\n    <DED>def __str__(self):\n        <IND>return \"\"\n        # return \"\\n\".join(\n        #     (\n        #         f\"Rom end: 0x{self.maybe_rom_end:X}\",\n        #         f\"Patchram Code: 0x{self.patchram_code:X}\",\n        #         f\"Binary Offset: 0x{self.binary_offset:X}\",\n        #         f\"Maybe Ram size: 0x{self.maybe_ram_size:X}\",\n        #     )\n        # )\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    yield from parse_symdef_flag(meta)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "seemoo-lab/polypyus",
    "commit": "aa39d938711cd8d61b54c4d1e3544852051764d8",
    "filename": "polypyus/annotation_parser.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/seemoo-lab-polypyus/polypyus/annotation_parser.py",
    "file_hunks_size": 16,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "polypyus/annotation_parser.py:349:8 Incompatible return type [7]: Expected `List[TLV]` but got `None`.",
    "message": " Expected `List[TLV]` but got `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 349,
    "warning_line": "        return None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "    yield from parse_symdef_flag(meta)\n\n\nclass HCD_TYPES(IntEnum):\n    HCI_CMD = 1\n    ACL_DATA = 2\n    SCO_DATA = 3\n    HCI_EVENT = 4\n    BCM_DBG = 7  # vendor specific: broadcom\n\n\nclass EOF(Exception):\n    pass\n\n\ndef _read_raise_eof(stream, size):\n    assert size > 0\n    data = stream.read(size)\n    if len(data) < size:\n        raise EOF\n    return data\n\n\n_hci_cmd_header_struct = struct.Struct(\"<HB\")\n_hci_cmd_header_size = _hci_cmd_header_struct.size\n_hci_cmd_write_ram_opcode = 0xFC4C\n\n\nclass HCI_CMD:\n    def __init__(self, header: bytes):\n        self.opcode, self.plen = _hci_cmd_header_struct.unpack(header)\n        self.raw_payload = b\"\"\n        self.payload = None\n\n    def handle_payload(self):\n        if self.opcode == _hci_cmd_write_ram_opcode:\n            self.payload = parse_tlv_list(self.raw_payload, self.plen)\n\n    def __str__(self):\n        if self.payload is None:\n            return f\"{HCI_CMD_STR[self.opcode]}\\t{self.plen}\\t{self.raw_payload.hex()}\"\n        else:\n            return f\"{HCI_CMD_STR[self.opcode]}\\t{self.plen}\\t{self.payload}\"\n\n\n_rompatch_struct = struct.Struct(\"<BII4s2x4s\")\n_rompatch_size = _rompatch_struct.size\n\n\n@dataclass\nclass RomPatch:\n    slot: int\n    target_address: int\n    value: bytes\n    unknown: bytes\n\n    def __str__(self):\n        return f\"Rom Patch[{self.slot}] @0x{self.target_address:X} '{self.value.hex()}'\"\n\n    @classmethod\n    def from_bytes(cls, data: bytes):\n        return cls(*_rompatch_struct.unpack(data))\n\n\n_rampatch_struct = struct.Struct(\"<I\")\n_rampatch_size = _rampatch_struct.size\n\n\n@dataclass\nclass RamPatch:\n    target_address: int\n    value: bytes\n\n    @classmethod\n    def from_bytes(cls, data: bytes):\n        target_address = _rampatch_struct.unpack(data[:_rampatch_size])\n        value = data[_rampatch_size:]\n        return cls(target_address, value)\n\n    def __str__(self):\n        return f\"Ram Patch @0x{self.target_address:X} '{self.value.hex()}'\"\n\n\ndef parse_tlv_list(data: bytes, plen: int) -> List[\"TLV\"]:\n    tlv_list = []\n    data_len = plen - 4\n    assert len(data) == plen\n    addr = struct.unpack(\"<I\", data[:4])[0]\n    print(f\"0x{addr:X}\")\n    offset = 4\n    while data_len >= _tlv_header_size:\n        tlv = TLV(data[offset : offset + _tlv_header_size])\n        print(tlv.plen, data_len, _tlv_header_size)\n        offset += _tlv_header_size\n        data_len -= _tlv_header_size\n        if data_len < tlv.plen:\n            break\n            raise Exception(\"Firmware is corrupted\")\n        tlv.raw_payload = data[offset : offset + tlv.plen]\n        if tlv.tlv_type == TLV_TYPES.PatchRom32b:\n            tlv.payload = RomPatch.from_bytes(tlv.raw_payload)\n        elif tlv.tlv_type == TLV_TYPES.PatchRam:\n            tlv.payload = RamPatch.from_bytes(tlv.raw_payload)\n        data_len -= tlv.plen\n        offset += tlv.plen\n        tlv_list.append(tlv)\n    if tlv_list:\n        return tlv_list\n    else:\n        return None\n\n\n_tlv_header_struct = struct.Struct(\"<BH\")\n_tlv_header_size = _tlv_header_struct.size\n\n\nclass TLV:\n    def __init__(self, header: bytes):\n        self.tlv_type, self.plen = _tlv_header_struct.unpack(header)\n        try:\n            self.tlv_type = TLV_TYPES(self.tlv_type)\n        except ValueError:\n            pass\n        self.raw_payload = b\"\"\n        self.payload = None\n\n    def __str__(self):\n        if self.payload is None:\n            return f\"TLV {self.tlv_type}\\t{self.plen}\\t{self.raw_payload.hex()}\"\n        else:\n            return f\"TLV {self.tlv_type}\\t{self.plen}\\t{self.payload}\"\n\n\nclass TLV_TYPES(IntEnum):\n    Reboot = 0x02\n    PatchRom32b = 0x08\n    PatchRam = 0x0A\n    SetDefaultBTDAddr = 0x40\n    SetLocalDevName = 0x41\n    EndTLVList = 0xFE\n\n\nHCI_CMD_STR = {\n    0x0401: \"COMND Inquiry\",\n    0x0402: \"COMND Inquiry_Cancel\",\n    0x0403: \"COMND Periodic_Inquiry_Mode\",\n    0x0404: \"COMND Exit_Periodic_Inquiry_Mode\",\n    0x0405: \"COMND Create_Connection\",\n    0x0406: \"COMND Disconnect\",\n    0x0408: \"COMND Create_Connection_Cancel\",\n    0x0409: \"COMND Accept_Connection_Request\",\n    0x040A: \"COMND Reject_Connection_Request\",\n    0x040B: \"COMND Link_Key_Request_Reply\",\n    0x040C: \"COMND Link_Key_Request_Negative_Reply\",\n    0x040D: \"COMND PIN_Code_Request_Reply\",\n    0x040E: \"COMND PIN_Code_Request_Negative_Reply\",\n    0x040F: \"COMND Change_Connection_Packet_Type\",\n    0x0411: \"COMND Authentication_Requested\",\n    0x0413: \"COMND Set_Connection_Encryption \",\n    0x0415: \"COMND Change_Connection_Link_Key\",\n    0x0417: \"COMND Master_Link_Key\",\n    0x0419: \"COMND Remote_Name_Request\",\n    0x041A: \"COMND Remote_Name_Request_Cancel\",\n    0x041B: \"COMND Read_Remote_Supported_Features\",\n    0x041C: \"COMND Read_Remote_Extended_Features\",\n    0x041D: \"COMND Read_Remote_Version_Information\",\n    0x041F: \"COMND Read_Clock_Offset\",\n    0x0420: \"COMND Read_LMP_Handle\",\n    0x0428: \"COMND Setup_Synchronous_Connection\",\n    0x0429: \"COMND Accept_Synchronous_Connection_Request\",\n    0x042A: \"COMND Reject_Synchronous_Connection_Request\",\n    0x042B: \"COMND IO_Capability_Request_Reply\",\n    0x042C: \"COMND User_Confirmation_Request_Reply\",\n    0x042D: \"COMND User_Confirmation_Request_Negative_Reply\",\n    0x042E: \"COMND User_Passkey_Request_Reply\",\n    0x042F: \"COMND User_Passkey_Request_Negative_Reply\",\n    0x0430: \"COMND Remote_OOB_Data_Request_Reply\",\n    0x0433: \"COMND Remote_OOB_Data_Request_Negative_Reply\",\n    0x0434: \"COMND IO_Capability_Request_Negative_Reply\",\n    0x0435: \"COMND Create_Physical_Link\",\n    0x0436: \"COMND Accept_Physical_Link\",\n    0x0437: \"COMND Disconnect_Physical_Link\",\n    0x0438: \"COMND Create_Logical_Link\",\n    0x0439: \"COMND Accept_Logical_Link\",\n    0x043A: \"COMND Disconnect_Logical_Link\",\n    0x043B: \"COMND Logical_Link_Cancel\",\n    0x043C: \"COMND Flow_Spec_Modify\",\n    0x043D: \"COMND Enhanced_Setup_Synchronous_Connection\",\n    0x043E: \"COMND Enhanced_Accept_Synchronous_Connection_Request\",\n    0x043F: \"COMND Truncated_Page\",\n    0x0440: \"COMND Truncated_Page_Cancel\",\n    0x0441: \"COMND Set_Connectionless_Slave_Broadcast\",\n    0x0442: \"COMND Set_Connectionless_Slave_Broadcast_Broadcast_Receive\",\n    0x0443: \"COMND Start_Synchronization_Train\",\n    0x0444: \"COMND Receive_Synchronization_Train\",\n    0x0445: \"COMND Remote_OOB_Extended_Data_Request_Reply\",\n    0x0801: \"COMND Hold_Mode\",\n    0x0803: \"COMND Sniff_Mode\",\n    0x0804: \"COMND Exit_Sniff_Mode\",\n    0x0805: \"COMND Park_State\",\n    0x0806: \"COMND Exit_Park_State\",\n    0x0807: \"COMND QoS_Setup\",\n    0x0809: \"COMND Role_Discovery\",\n    0x080B: \"COMND Switch_Role\",\n    0x080C: \"COMND Read_Link_Policy_Settings\",\n    0x080D: \"COMND Write_Link_Policy_Settings\",\n    0x080E: \"COMND Read_Default_Link_Policy_Settings\",\n    0x080F: \"COMND Write_Default_Link_Policy_Settings\",\n    0x0810: \"COMND Flow_Specification\",\n    0x0811: \"COMND Sniff_Subrating\",\n    0x0C01: \"COMND Set_Event_Mask\",\n    0x0C03: \"COMND Reset\",\n    0x0C05: \"COMND Set_Event_Filter\",\n    0x0C08: \"COMND Flush\",\n    0x0C09: \"COMND Read_PIN_Type\",\n    0x0C0A: \"COMND Write_PIN_Type\",\n    0x0C0B: \"COMND Create_New_Unit_Key\",\n    0x0C0D: \"COMND Read_Stored_Link_Key\",\n    0x0C11: \"COMND Write_Stored_Link_Key\",\n    0x0C12: \"COMND Delete_Stored_Link_Key\",\n    0x0C13: \"COMND Write_Local_Name\",\n    0x0C14: \"COMND Read_Local_Name\",\n    0x0C15: \"COMND Read_Connection_Accept_Timeout\",\n    0x0C16: \"COMND Write_Connection_Accept_Timeout\",\n    0x0C17: \"COMND Read_Page_Timeout\",\n    0x0C18: \"COMND Write_Page_Timeout\",\n    0x0C19: \"COMND Read_Scan_Enable\",\n    0x0C1A: \"COMND Write_Scan_Enable\",\n    0x0C1B: \"COMND Read_Page_Scan_Activity\",\n    0x0C1C: \"COMND Write_Page_Scan_Activity\",\n    0x0C1D: \"COMND Read_Inquiry_Scan_Activity\",\n    0x0C1E: \"COMND Write_Inquiry_Scan_Activity\",\n    0x0C1F: \"COMND Read_Authentication_Enable\",\n    0x0C20: \"COMND Write_Authentication_Enable\",\n    0x0C23: \"COMND Read_Class_of_Device\",\n    0x0C24: \"COMND Write_Class_of_Device\",\n    0x0C25: \"COMND Read_Voice_Setting\",\n    0x0C26: \"COMND Write_Voice_Setting\",\n    0x0C27: \"COMND Read_Automatic_Flush_Timeout\",\n    0x0C28: \"COMND Write_Automatic_Flush_Timeout\",\n    0x0C29: \"COMND Read_Num_Broadcast_Retransmissions\",\n    0x0C30: \"COMND Write_Num_Broadcast_Retransmissions\",\n    0x0C2B: \"COMND Read_Hold_Mode_Activity\",\n    0x0C2C: \"COMND Write_Hold_Mode_Activity\",\n    0x0C2D: \"COMND Read_Transmit_Power_Level\",\n    0x0C2E: \"COMND Read_Synchronous_Flow_Control_Enable\",\n    0x0C2F: \"COMND Write_Synchronous_Flow_Control_Enable\",\n    0x0C31: \"COMND Set_Controller_To_Host_Flow_Control\",\n    0x0C33: \"COMND Host_Buffer_Size\",\n    0x0C35: \"COMND Host_Number_Of_Completed_Packets\",\n    0x0C36: \"COMND Read_Link_Supervision_Timeout\",\n    0x0C37: \"COMND Write_Link_Supervision_Timeout\",\n    0x0C38: \"COMND Read_Number_Of_Supported_IAC\",\n    0x0C39: \"COMND Read_Current_IAC_LAP\",\n    0x0C3A: \"COMND Write_Current_IAC_LAP\",\n    0x0C3F: \"COMND Set_AFH_Host_Channel_Classification\",\n    0x0C42: \"COMND Read_Inquiry_Scan_Type\",\n    0x0C43: \"COMND Write_Inquiry_Scan_Type\",\n    0x0C44: \"COMND Read_Inquiry_Mode\",\n    0x0C45: \"COMND Write_Inquiry_Mode\",\n    0x0C46: \"COMND Read_Page_Scan_Type\",\n    0x0C47: \"COMND Write_Page_Scan_Type\",\n    0x0C48: \"COMND Read_AFH_Channel_Assessment_Mode\",\n    0x0C49: \"COMND Write_AFH_Channel_Assessment_Mode\",\n    0x0C51: \"COMND Read_Extended_Inquiry_Response\",\n    0x0C52: \"COMND Write_Extended_Inquiry_Response\",\n    0x0C53: \"COMND Refresh_Encryption_Key\",\n    0x0C55: \"COMND Read_Simple_Pairing_Mode\",\n    0x0C56: \"COMND Write_Simple_Pairing_Mode\",\n    0x0C57: \"COMND Read_Local_OOB_Data\",\n    0x0C58: \"COMND Read_Inquiry_Response_Transmit_Power_Level\",\n    0x0C59: \"COMND Write_Inquiry_Response_Transmit_Power_Level\",\n    0x0C60: \"COMND Send_Key_Press_Notification\",\n    0x0C5A: \"COMND Read_Default_Erroneous_Data_Reporting\",\n    0x0C5B: \"COMND Write_Default_Erroneous_Data_Reporting\",\n    0x0C5F: \"COMND Enhanced_Flush\",\n    0x0C61: \"COMND Read_Logical_Link_Accept_Timeout\",\n    0x0C62: \"COMND Write_Logical_Link_Accept_Timeout\",\n    0x0C63: \"COMND Set_Event_Mask_Page_2\",\n    0x0C64: \"COMND Read_Location_Data\",\n    0x0C65: \"COMND Write_Location_Data\",\n    0x0C66: \"COMND Read_Flow_Control_Mode\",\n    0x0C67: \"COMND Write_Flow_Control_Mode\",\n    0x0C68: \"COMND Read_Enhance_Transmit_Power_Level\",\n    0x0C69: \"COMND Read_Best_Effort_Flush_Timeout\",\n    0x0C6A: \"COMND Write_Best_Effort_Flush_Timeout\",\n    0x0C6B: \"COMND Short_Range_Mode\",\n    0x0C6C: \"COMND Read_LE_Host_Support\",\n    0x0C6D: \"COMND Write_LE_Host_Support\",\n    0x0C6E: \"COMND Set_MWS_Channel_Parameters\",\n    0x0C6F: \"COMND Set_External_Frame_Configuration\",\n    0x0C70: \"COMND Set_MWS_Signaling\",\n    0x0C71: \"COMND Set_MWS_Transport_Layer\",\n    0x0C72: \"COMND Set_MWS_Scan_Frequency_Table\",\n    0x0C73: \"COMND Set_MWS_PATTERN_Configuration\",\n    0x0C74: \"COMND Set_Reserved_LT_ADDR\",\n    0x0C75: \"COMND Delete_Reserved_LT_ADDR\",\n    0x0C76: \"COMND Set_Connectionless_Slave_Broadcast_Data\",\n    0x0C77: \"COMND Read_Synchronization_Train_Parameters\",\n    0x0C78: \"COMND Write_Synchronization_Train_Parameters\",\n    0x0C79: \"COMND Read_Secure_Connections_Host_Support\",\n    0x0C7A: \"COMND Write_Secure_Connections_Host_Support\",\n    0x0C7B: \"COMND Read_Authenticated_Payload_Timeout\",\n    0x0C7C: \"COMND Write_Authenticated_Payload_Timeout\",\n    0x0C7D: \"COMND Read_Local_OOB_Extended_Data\",\n    0x0C7E: \"COMND Read_Extended_Page_Timeout\",\n    0x0C7F: \"COMND Write_Extended_Page_Timeout\",\n    0x0C80: \"COMND Read_Extended_Inquiry_Length\",\n    0x0C81: \"COMND Write_Extended_Inquiry_Length\",\n    0x1001: \"COMND Read_Local_Version_Information\",\n    0x1002: \"COMND Read_Local_Supported_Commands\",\n    0x1003: \"COMND Read_Local_Supported_Features\",\n    0x1004: \"COMND Read_Local_Extended_Features\",\n    0x1005: \"COMND Read_Buffer_Size\",\n    0x1009: \"COMND Read_BD_ADDR\",\n    0x100A: \"COMND Read_Data_Block_Size\",\n    0x100B: \"COMND Read_Local_Supported_Codecs\",\n    0x1401: \"COMND Read_Failed_Contact_Counter\",\n    0x1402: \"COMND Reset_Failed_Contact_Counter\",\n    0x1403: \"COMND Read_Link_Quality\",\n    0x1405: \"COMND Read_RSSI\",\n    0x1406: \"COMND Read_AFH_Channel_Map\",\n    0x1407: \"COMND Read_Clock\",\n    0x1408: \"COMND Encryption_Key_Size\",\n    0x1409: \"COMND Read_Local_AMP_Info\",\n    0x140A: \"COMND Read_Local_AMP_ASSOC\",\n    0x140B: \"COMND Write_Remote_AMP_ASSOC\",\n    0x140C: \"COMND Get_MWS_Transport_Layer_Configuration\",\n    0x140D: \"COMND Set_Triggered_Clock_Capture\",\n    0x1801: \"COMND Read_Loopback_Mode\",\n    0x1802: \"COMND Write_Loopback_Mode\",\n    0x1803: \"COMND Enable_Device_Under_Test_Mode\",\n    0x1804: \"COMND Write_Simple_Pairing_Debug_Mode\",\n    0x1807: \"COMND Enable_AMP_Receiver_Reports\",\n    0x1808: \"COMND AMP_Test_End\",\n    0x1809: \"COMND AMP_Test\",\n    0x180A: \"COMND Write_Secure_Connection_Test_Mode\",\n    0x2001: \"COMND LE_Set_Event_Mask\",\n    0x2002: \"COMND LE_Read_Buffer_Size\",\n    0x2003: \"COMND LE_Read_Local_Supported_Features\",\n    0x2005: \"COMND LE_Set_Random_Address\",\n    0x2006: \"COMND LE_Set_Advertising_Parameters\",\n    0x2007: \"COMND LE_Read_Advertising_Channel_Tx_Power\",\n    0x2008: \"COMND LE_Set_Advertising_Data\",\n    0x2009: \"COMND LE_Set_Scan_Responce_Data\",\n    0x200A: \"COMND LE_Set_Advertise_Enable\",\n    0x200B: \"COMND LE_Set_Set_Scan_Parameters\",\n    0x200C: \"COMND LE_Set_Scan_Enable\",\n    0x200D: \"COMND LE_Create_Connection\",\n    0x200E: \"COMND LE_Create_Connection_Cancel \",\n    0x200F: \"COMND LE_Read_White_List_Size\",\n    0x2010: \"COMND LE_Clear_White_List\",\n    0x2011: \"COMND LE_Add_Device_To_White_List\",\n    0x2012: \"COMND LE_RemoveDevice_From_White_List\",\n    0x2013: \"COMND LE_Connection_Update\",\n    0x2014: \"COMND LE_Set_Host_Channel_Classification\",\n    0x2015: \"COMND LE_Read_Channel_Map\",\n    0x2016: \"COMND LE_Read_Remote_Used_Features\",\n    0x2017: \"COMND LE_Encrypt\",\n    0x2018: \"COMND LE_Rand\",\n    0x2019: \"COMND LE_Start_Encryption\",\n    0x201A: \"COMND LE_Long_Term_Key_Request_Reply\",\n    0x201B: \"COMND LE_Long_Term_Key_Request_Negative_Reply\",\n    0x201C: \"COMND LE_Read_Supported_States\",\n    0x201D: \"COMND LE_Receiver_Test\",\n    0x201E: \"COMND LE_Transmitter_Test\",\n    0x201F: \"COMND LE_Test_End\",\n    0x2020: \"COMND LE_Remote_Connection_Parameter_Request_Reply\",\n    0x2021: \"COMND LE_Remote_Connection_Parameter_Request_Negative_Reply\",\n    # Function names extracted from CYW20735 / Packet Logger 9 / bluez source / BCM20703A2 Symbols\n    0xFC00: \"COMND VSC_CustomerExtension\",\n    0xFC01: \"COMND VSC_WriteBdAddr\",\n    0xFC02: \"COMND VSC_DumpSRAM\",\n    0xFC03: \"COMND VSC_ChannelClassConfig\",\n    0xFC04: \"COMND VSC_READ_PAGE_SCAN_REPETITION_MODE\",\n    0xFC05: \"COMND VSC_WRITE_PAGE_SCAN_REPETITION_MODE\",\n    0xFC06: \"COMND VSC_READ_PAGE_RESPONSE_TIMEOUT\",\n    0xFC07: \"COMND VSC_WRITE_PAGE_RESPONSE_TIMEOUT\",\n    0xFC08: \"COMND VSC_BTLinkQualityMode\",  # VSC_READ_NEW_CONNECTION_TIMEOUT\n    0xFC09: \"COMND VSC_WRITE_NEW_CONNECTION_TIMEOUT\",\n    0xFC0A: \"COMND VSC_Super_Peek_Poke\",\n    0xFC0B: \"COMND VSC_WriteLocalSupportedFeatures\",\n    0xFC0C: \"COMND VSC_Super_Duper_Peek_Poke\",\n    0xFC0D: \"COMND VSC_RSSI_HISTORY\",\n    0xFC0E: \"COMND VSC_SetLEDGlobalCtrl\",\n    0xFC0F: \"COMND VSC_FORCE_HOLD_MODE\",\n    0xFC10: \"COMND VSC_Commit_BDAddr\",\n    0xFC12: \"COMND VSC_WriteHoppingChannels\",\n    0xFC13: \"COMND VSC_SleepForeverMode\",\n    0xFC14: \"COMND VSC_SetCarrierFrequencyArm\",\n    0xFC16: \"COMND VSC_SetEncryptionKeySize\",\n    0xFC17: \"COMND VSC_Invalidate_Flash_and_Reboot\",\n    0xFC18: \"COMND VSC_Update_UART_Baud_Rate\",\n    0xFC19: \"COMND VSC_GpioConfigAndWrite\",\n    0xFC1A: \"COMND VSC_GpioRead\",\n    0xFC1B: \"COMND VSC_SetTestModeType\",\n    0xFC1C: \"COMND VSC_WriteScoPcmInterfaceParam\",\n    0xFC1D: \"COMND VSC_ReadScoPcmIntParam\",\n    0xFC1E: \"COMND VSC_WritePcmDataFormatParam\",\n    0xFC1F: \"COMND VSC_ReadPcmDataFormatParam\",\n    0xFC20: \"COMND VSC_WriteComfortNoiseParam\",\n    0xFC22: \"COMND VSC_WriteScoTimeSlot\",\n    0xFC23: \"COMND VSC_ReadScoTimeSlot\",\n    0xFC24: \"COMND VSC_WritePcmLoopbackModed\",\n    0xFC25: \"COMND VSC_ReadPcmLoopbackModed\",\n    0xFC26: \"COMND VSC_SetTransmitPower\",\n    0xFC27: \"COMND VSC_SetSleepMode\",\n    0xFC28: \"COMND VSC_ReadSleepMode\",\n    0xFC29: \"COMND VSC_SleepmodeCommand\",\n    0xFC2A: \"COMND VSC_HandleDelayPeripheralSCOStartup\",\n    0xFC2B: \"COMND VSC_WriteReceiveOnly\",\n    0xFC2D: \"COMND VSC_RfConfigSettings\",\n    0xFC2E: \"COMND VSC_HandleDownload_Minidriver\",\n    0xFC2F: \"COMND VSC_CrystalPpm\",\n    0xFC32: \"COMND VSC_SetAFHBehavior\",\n    0xFC33: \"COMND VSC_ReadBtwSecurityKey\",\n    0xFC34: \"COMND VSC_EnableRadio\",\n    0xFC35: \"COMND VSC_Cosim_Set_Mode\",\n    0xFC36: \"COMND VSC_GetHIDDeviceList\",\n    0xFC37: \"COMND VSC_AddHIDDevice\",\n    0xFC39: \"COMND VSC_RemoveHIDDevice\",\n    0xFC3A: \"COMND VSC_EnableTca\",\n    0xFC3B: \"COMND VSC_EnableUSBHIDEmulation\",\n    0xFC3C: \"COMND VSC_WriteRfProgrammingTable\",\n    0xFC40: \"COMND VSC_ReadCollaborationMode\",\n    0xFC41: \"COMND VSC_WriteCollaborationMode\",\n    0xFC43: \"COMND VSC_WriteRFAttenuationTable\",\n    0xFC44: \"COMND VSC_ReadUARTClockSetting\",\n    0xFC45: \"COMND VSC_WriteUARTClockSetting\",\n    0xFC46: \"COMND VSC_SetSleepClockAccuratyAndSettlingTime\",\n    0xFC47: \"COMND VSC_ConfigureSleepMode\",\n    0xFC48: \"COMND VSC_ReadRawRssi\",\n    0xFC49: \"COMND VSC_ChannelClassConfig\",\n    0xFC4C: \"COMND VSC_Write_RAM\",\n    0xFC4D: \"COMND VSC_Read_RAM\",\n    0xFC4E: \"COMND VSC_Launch_RAM\",\n    0xFC4F: \"COMND VSC_InstallPatches\",\n    0xFC51: \"COMND VSC_RadioTxTest\",\n    0xFC52: \"COMND VSC_RadioRxTest\",\n    0xFC54: \"COMND VSC_DUT_LoopbackTest\",\n    0xFC56: \"COMND VSC_EnhancedRadioRxTest\",\n    0xFC57: \"COMND VSC_WriteHighPriorityConnection\",\n    0xFC58: \"COMND VSC_SendLmpPdu\",\n    0xFC59: \"COMND VSC_PortInformationEnable\",\n    0xFC5A: \"COMND VSC_ReadBtPortPidVid\",\n    0xFC5B: \"COMND VSC_Read2MBitFlashCrc\",\n    0xFC5C: \"COMND VSC_FactoryCommitProductionTestFlag\",\n    0xFC5D: \"COMND VSC_ReadProductionTestFlag\",\n    0xFC5E: \"COMND VSC_WritePcmMuteParam\",\n    0xFC5F: \"COMND VSC_ReadPcmMuteParam\",\n    0xFC61: \"COMND VSC_WritePcmPins\",\n    0xFC62: \"COMND VSC_ReadPcmPins\",\n    0xFC6D: \"COMND VSC_WriteI2sPcmInterface\",\n    0xFC6E: \"COMND VSC_ReadControllerFeatures\",\n    0xFC6F: \"COMND VSC_WriteComfortNoiseParam\",\n    0xFC71: \"COMND VSC_WriteRamCompressed\",  # maybe .hcd only\n    0xFC78: \"COMND VSC_CALCULATE_CRC\",\n    0xFC79: \"COMND VSC_ReadVerboseConfigVersionInfo\",\n    0xFC7A: \"COMND VSC_TRANSPORT_SUSPEND\",\n    0xFC7B: \"COMND VSC_TRANSPORT_RESUME\",\n    0xFC7C: \"COMND VSC_BasebandFlowControlOverride\",\n    0xFC7D: \"COMND VSC_WriteClass15PowerTable\",\n    0xFC7E: \"COMND VSC_EnableWbs\",\n    0xFC7F: \"COMND VSC_WriteVadMode\",\n    0xFC80: \"COMND VSC_ReadVadMode\",\n    0xFC81: \"COMND VSC_WriteEcsiConfig\",\n    0xFC82: \"COMND VSC_FM_TX_COMMAND\",\n    0xFC83: \"COMND VSC_WriteDynamicScoRoutingChange\",\n    0xFC84: \"COMND VSC_READ_HID_BIT_ERROR_RATE\",\n    0xFC85: \"COMND VSC_EnableHciRemoteTest\",\n    0xFC8A: \"COMND VSC_CALIBRATE_BANDGAP\",\n    0xFC8B: \"COMND VSC_UipcOverHci\",  # Write Coexistence Tri State Enabled\n    0xFC8C: \"COMND VSC_READ_ADC_CHANNEL\",\n    0xFC90: \"COMND VSC_CoexBandwidthStatistics\",\n    0xFC91: \"COMND VSC_ReadPmuConfigFlags\",\n    0xFC92: \"COMND VSC_WritePmuConfigFlags\",\n    0xFC93: \"COMND VSC_ARUBA_CTRL_MAIN_STATUS_MON\",\n    0xFC94: \"COMND VSC_CONTROL_AFH_ACL_SETUP\",\n    0xFC95: \"COMND VSC_ARUBA_READ_WRITE_INIT_PARAM\",\n    0xFC96: \"COMND VSC_INTERNAL_CAPACITOR_TUNING\",\n    0xFC97: \"COMND VSC_BFC_DISCONNECT\",\n    0xFC98: \"COMND VSC_BFC_SEND_DATA\",\n    0xFC9A: \"COMND VSC_COEX_WRITE_WIMAX_CONFIGURATION\",\n    0xFC9B: \"COMND VSC_BFC_POLLING_ENABLE\",\n    0xFC9C: \"COMND VSC_BFC_RECONNECTABLE_DEVICE\",\n    0xFC9D: \"COMND VSC_CONDITIONAL_SCAN_CONFIGURATION\",\n    0xFC9E: \"COMND VSC_PacketErrorInjection\",\n    0xFCA0: \"COMND VSC_WriteRfReprogrammingTableMasking\",\n    0xFCA1: \"COMND VSC_BLPM_ENABLE\",\n    0xFCA2: \"COMND VSC_ReadAudioRouteInfo\",\n    0xFCA3: \"COMND VSC_EncapsulatedHciCommand\",\n    0xFCA4: \"COMND VSC_SendEpcLmpMessage\",\n    0xFCA5: \"COMND VSC_TransportStatistics\",\n    0xFCA6: \"COMND VSC_BistPostGetResults\",\n    0xFCAD: \"COMND VSC_CurrentSensorCtrlerConfig\",\n    0xFCAE: \"COMND VSC_Pcm2Setup\",\n    0xFCAF: \"COMND VSC_ReadBootCrystalStatus\",\n    0xFCB2: \"COMND VSC_SniffSubratingMaximumLocalLatency\",\n    0xFCB4: \"COMND VSC_SET_PLC_ON_OFF\",\n    0xFCB5: \"COMND VSC_BFC_Suspend\",\n    0xFCB6: \"COMND VSC_BFC_Resume\",\n    0xFCB7: \"COMND VSC_3D_TV2TV_SYNC_AND_REPORTING\",\n    0xFCB8: \"COMND VSC_WRITE_OTP\",\n    0xFCB9: \"COMND VSC_READ_OTP\",\n    0xFCBA: \"COMND VSC_le_read_random_address\",\n    0xFCBB: \"COMND VSC_le_hw_setup\",\n    0xFCBC: \"COMND VSC_LE_DVT_TXRXTEST\",\n    0xFCBD: \"COMND VSC_LE_DVT_TESTDATAPKT\",\n    0xFCBE: \"COMND VSC_LE_DVT_LOG_SETUP\",\n    0xFCBF: \"COMND VSC_LE_DVT_ERRORINJECT_SCHEME\",\n    0xFCC0: \"COMND VSC_LE_DVT_TIMING_SCHEME\",\n    0xFCC1: \"COMND VSC_LeScanRssiThresholdSetup\",\n    0xFCC2: \"COMND VSC_BFCSetParameters\",\n    0xFCC3: \"COMND VSC_BFCReadParameters\",\n    0xFCC4: \"COMND VSC_TurnOffDynamicPowerControl\",\n    0xFCC5: \"COMND VSC_IncreaseDecreasePowerLevel\",\n    0xFCC6: \"COMND VSC_ReadRawRssiValue\",\n    0xFCC7: \"COMND VSC_SetProximityTable\",\n    0xFCC8: \"COMND VSC_SetProximityTrigger\",\n    0xFCCD: \"COMND VSC_SET_SUB_SNIFF_INTERVAL\",\n    0xFCCE: \"COMND VSC_ENABLE_REPEATER_FUNCTIONALITY\",\n    0xFCCF: \"COMND VSC_UPDATE_CONFIG_ITEM\",\n    0xFCD0: \"COMND VSC_BFCCreateConnection\",\n    0xFCD1: \"COMND VSC_WBS_BEC_PARAMS\",\n    0xFCD2: \"COMND VSC_ReadGoldenRange\",\n    0xFCD3: \"COMND VSC_INITIATE_MULTICAST_BEACON_LOCK\",\n    0xFCD4: \"COMND VSC_TERMINATE_MULTICAST\",\n    0xFCD7: \"COMND VSC_ENABLE_H4IBSS\",\n    0xFCD8: \"COMND VSC_BLUEBRIDGE_SPI_NEGOTIATION_REQUEST\",\n    0xFCD9: \"COMND VSC_BLUEBRIDGE_SPI_SLEEPTHRESHOLD_REQUEST\",\n    0xFCDA: \"COMND VSC_ACCESSORY_PROTOCOL_COMMAND_GROUP\",\n    0xFCDB: \"COMND VSC_HandleWriteOtp_AuxData\",\n    0xFCDC: \"COMND VSC_InitMcastIndPoll\",\n    0xFCDD: \"COMND VSC_EnterMcastIndPoll\",\n    0xFCDE: \"COMND VSC_DisconnectMcastIndPoll\",\n    0xFCE0: \"COMND VSC_ExtendedInquiryHandshake\",\n    0xFCE1: \"COMND VSC_UARTBRIDGE_ROUTE_HCI_CMD_TO_UART_BRIDGE\",\n    0xFCE2: \"COMND VSC_Olympic\",\n    0xFCE4: \"COMND VSC_CONFIG_HID_LHL_GPIO\",\n    0xFCE5: \"COMND VSC_READ_HID_LHL_GPIO\",\n    0xFCE6: \"COMND VSC_LeTxTest\",\n    0xFCE7: \"COMND VSC_UARTBRIDGE_SET_UART_BRIDGE_PARAMETER\",\n    0xFCE8: \"COMND VSC_BIST_BER\",\n    0xFCE9: \"COMND VSC_HandleLeMetaVsc1\",\n    0xFCEA: \"COMND VSC_BFC_SET_PRIORITY\",\n    0xFCEB: \"COMND VSC_BFC_READ_PRIORITY\",\n    0xFCEC: \"COMND VSC_ANT_COMMAND\",\n    0xFCED: \"COMND VSC_LinkQualityStats\",\n    0xFCEE: \"COMND VSC_READ_NATIVE_CLOCK\",\n    0xFCEF: \"COMND VSC_BfcSetWakeupFlags\",\n    0xFCF2: \"COMND VSC_START_DVT_TINYDRIVER\",\n    0xFCF4: \"COMND VSC_SET_3DTV_DUAL_MODE_VIEW\",\n    0xFCF5: \"COMND VSC_BFCReadRemoeBPCSFeatures\",\n    0xFCF7: \"COMND VSC_IgnoreUSBReset\",\n    0xFCF8: \"COMND VSC_SNIFF_RECONNECT_TRAIN\",\n    0xFCF9: \"COMND VSC_AudioIPCommand\",\n    0xFCFA: \"COMND VSC_BFCWriteScanEnable\",\n    0xFCFE: \"COMND VSC_ReadLocalFirmwareInfo\",\n    0xFCFF: \"COMND VSC_RSSIMeasurements\",\n    0xFD01: \"COMND VSC_BFCReadScanEnable\",\n    0xFD02: \"COMND VSC_EnableWbsModified\",\n    0xFD03: \"COMND VSC_SetVsEventMask\",\n    0xFD04: \"COMND VSC_BFCIsConnectionTBFCSuspended\",\n    0xFD05: \"COMND VSC_SetUSBAutoResume\",\n    0xFD06: \"COMND VSC_SetDirectionFindingParameters\",\n    0xFD08: \"COMND VSC_ChangeLNAGainCoexECI\",\n    0xFD0C: \"COMND VSC_LTELinkQualityMode\",  # LTECoexLinkQualityMetric\n    0xFD0D: \"COMND VSC_LTETriggerWCI2Message\",\n    0xFD0E: \"COMND VSC_LTEEnableWCI2Messages\",\n    0xFD0F: \"COMND VSC_LTEEnableWCI2LoopbackTesting\",\n    0xFD10: \"COMND VSC_ScoDiagStat\",\n    0xFD11: \"COMND VSC_SetStreamingConnectionlessBroadcast\",\n    0xFD12: \"COMND VSC_ReceiveStreamingConnectonlessBroadcast\",\n    0xFD13: \"COMND VSC_WriteConnectionlessBroadcastStreamingData\",\n    0xFD14: \"COMND VSC_FlushStreamingConnectionlessBroadcastData\",\n    0xFD15: \"COMND VSC_FactoryCalSetTxPower\",\n    0xFD16: \"COMND VSC_FactoryCalTrimTxPower\",\n    0xFD17: \"COMND VSC_FactoryCalReadTempSettings\",\n    0xFD18: \"COMND VSC_FactoryCalUpdateTableSettings\",\n    0xFD1A: \"COMND VSC_WriteA2DPConnection\",\n    0xFD1B: \"COMND VSC_Factory_Cal_Read_Table_Settings\",\n    0xFD1C: \"COMND VSC_DBFW\",\n    0xFD1D: \"COMND VSC_FactoryCalibrationRxRSSITest\",\n    0xFD1E: \"COMND VSC_FactoryCalibrationRxRSSITest\",\n    0xFD1F: \"COMND VSC_LTECoexTimingAdvance\",\n    0xFD23: \"COMND VSC_HandleLeMetaVsc2\",\n    0xFD28: \"COMND VSC_WriteLocalSupportedExtendedFeatures\",\n    0xFD29: \"COMND VSC_PiconetClockAdjustment\",\n    0xFD2A: \"COMND VSC_ReadRetransmissionStatus\",\n    0xFD2F: \"COMND VSC_SetTransmitPowerRange\",\n    0xFD33: \"COMND VSC_PageInquiryTxSuppression\",\n    0xFD35: \"COMND VSC_RandomizeNativeClock\",\n    0xFD36: \"COMND VSC_StoreFactoryCalibrationData\",\n    0xFD3B: \"COMND VSC_ReadSupportedVSCs\",\n    0xFD3C: \"COMND VSC_LEWriteLocalSupportedFeatures\",\n    0xFD3E: \"COMND VSC_LEReadRemoteSupportedBRCMFeatures\",\n    0xFD40: \"COMND VSC_BcsTimeline\",\n    0xFD41: \"COMND VSC_BcsTimelineBroadcastReceive\",\n    0xFD42: \"COMND VSC_ReadDynamicMemoryPoolStatistics\",\n    0xFD43: \"COMND VSC_HandleIop3dtvTesterConfig\",\n    0xFD45: \"COMND VSC_HandleAdcCapture\",\n    0xFD47: \"COMND VSC_LEExtendedDuplicateFilter\",\n    0xFD48: \"COMND VSC_LECreateExtendedAdvertisingInstance\",\n    0xFD49: \"COMND VSC_LERemoveExtendedAdvertisingInstance\",\n    0xFD4A: \"COMND VSC_LESetExtendedAdvertisingParameters\",\n    0xFD4B: \"COMND VSC_LESetExtendedAdvertisingData\",\n    0xFD4C: \"COMND VSC_LESetExtendedScanResponseData\",\n    0xFD4D: \"COMND VSC_LESetExtendedAdvertisingEnable\",\n    0xFD4E: \"COMND VSC_LEUpdateExtendedAdvertisingInstance\",\n    0xFD53: \"COMND VSC_LEGetAndroidVendorCapabilities\",\n    0xFD54: \"COMND VSC_LEMultiAdvtCommand\",\n    0xFD55: \"COMND VSC_LeRPAOffload\",\n    0xFD56: \"COMND VSC_LEBatchScanCommand\",\n    0xFD57: \"COMND VSC_LEBrcmPCF\",\n    0xFD59: \"COMND VSC_GetControllerActivityEnergyInfo\",\n    0xFD5A: \"COMND VSC_ExtendedSetScanParameters\",\n    0xFD5B: \"COMND VSC_Getdebuginfo\",\n    0xFD5C: \"COMND VSC_WriteLocalHostState\",\n    0xFD6E: \"COMND VSC_HandleConfigure_Sleep_Lines\",\n    0xFD71: \"COMND VSC_SetSpecialSniffTransitionEnable\",\n    0xFD73: \"COMND VSC_EnableBTSync\",\n    0xFD79: \"COMND VSC_hciulp_handleBTBLEHighPowerControl\",\n    0xFD7C: \"COMND VSC_HandleCustomerEnableHALinkCommands\",\n    0xFD7D: \"COMND VSC_DWPTestCommands\",\n    0xFD7F: \"COMND VSC_Olympic_LTE_Settings\",\n    0xFD82: \"COMND VSC_WriteLERemotePublicAddress\",\n    0xFD86: \"COMND VSC_1SecondTimerCommands\",\n    0xFD88: \"COMND VSC_ForceWLANChannel\",\n    0xFD8B: \"COMND VSC_SVTConfigSetup\",\n    0xFD8F: \"COMND VSC_HandleCustomerReadHADeltaCommands\",\n    0xFD9A: \"COMND VSC_SetupRSSCommands\",\n    0xFD9C: \"COMND VSC_SetupRSSLocalCommands\",\n    0xFDA1: \"COMND VSC_AudioBufferCommands\",\n    0xFDA4: \"COMND VSC_HealthStatusReport\",\n    0xFDA8: \"COMND VSC_ChangeConnectionPriority\",\n    0xFDAA: \"COMND VSC_SamSetupCommand\",\n    0xFDAB: \"COMND VSC_bthci_cmd_ble_enhancedTransmitterTest_hopping\",\n    0xFDAF: \"COMND VSC_Handle_coex_debug_counters\",\n    0xFDBB: \"COMND VSC_Read_Inquiry_Transmit_Power\",\n    0xFDBE: \"COMND VSC_Enable_PADGC_Override\",\n    0xFDCB: \"COMND VSC_WriteTxPowerAFHMode\",\n    0xFDCD: \"COMND VSC_setMinimumNumberOfUsedChannels\",\n    0xFDCE: \"COMND VSC_HandleBrEdrLinkQualityStats\",\n    0xFF5E: \"COMND VSC_SectorErase\",\n    0xFFCE: \"COMND VSC_Chip_Erase\",\n    0xFFED: \"COMND VSC_EnterDownloadMode\",\n}\n\n# def hci_cmd_parser(bytestream: bytes):\n#     opcode = _read_raise_eof(bytestream, 2)\n#     length = _uint8.unpack(_read_raise_eof(bytestream, 1))[0]\n#     payload = bytestream.read(length)\n#     return \"cmd\"\n#\n#\n# def hci_event_parser(bytestream: bytes):\n#     eventcode = _read_raise_eof(bytestream, 1)\n#     length = _uint8.unpack(_read_raise_eof(bytestream, 1))[0]\n#     payload = bytestream.read(length)\n#     return \"event\"\n#\n#\n# def acl_data_parser(bytestream: bytes):\n#     handle_pb_bc = _read_raise_eof(bytestream, 2)\n#     length = _uint16.unpack(_read_raise_eof(bytestream, 2))[0]\n#     data = bytestream.read(length)\n#     return \"acl\"\n#\n#\n# def sco_data_parser(bytestream: bytes):\n#     handle_status_rfu = _read_raise_eof(bytestream, 2)\n#     length = _uint8.unpack(_read_raise_eof(bytestream, 1))[0]\n#     data = bytestream.read(length)\n#     return \"sco\"\n#\n#\n# _PARSE_MAP = {\n#     HCD_TYPES.HCI_CMD: hci_cmd_parser,\n#     HCD_TYPES.ACL_DATA: acl_data_parser,\n#     HCD_TYPES.SCO_DATA: sco_data_parser,\n#     HCD_TYPES.HCI_EVENT: hci_event_parser,\n#     HCD_TYPES.BCM_DBG: lambda x: \"dbg\",\n# }\n# _uint8 = struct.Struct(\"B\")\n# _uint16 = struct.Struct(\"H\")\n#\n#\n# def hcd_parser(hcd_path: str):\n#     with open(hcd_path, \"rb\") as bytestream:\n#         while True:\n#             type_ = _uint8.unpack(_read_raise_eof(bytestream, 1))[0]\n#             try:\n#                 package = _PARSE_MAP[type_](bytestream)\n#                 if package == \"dbg\":\n#                     print(\"hello broadcom!\")\n#                     break\n#                 if package is not None:\n#                     yield package\n#             except EOF:\n#                 print(\"I am not doing this right!\")\n#                 raise EOF()\ndef hcd_parser(hcd_path: str):\n    with open(hcd_path, \"rb\") as bytestream:\n        while True:\n            cmd = HCI_CMD(_read_raise_eof(bytestream, _hci_cmd_header_size))\n            cmd.raw_payload = _read_raise_eof(bytestream, cmd.plen)\n            cmd.handle_payload()\n            print(cmd)\n\n\n_iphone_bin_header_struct = struct.Struct(\n    # \"<II4x4x\" \"4xIIH2x\" \"I4x4xI\" \"III4x\" \"4xIII\" \"I\"\n    \"4I\"\n    \"3I2H\"\n    \"4I\"\n    \"4I\"\n    \"4I\"\n    \"4I\"\n)\n_ihone_bin_header_size = _iphone_bin_header_struct.size\n\n\nclass IphoneBinHeader:\n    def __init__(self, data: bytes):\n        fields = _iphone_bin_header_struct.unpack(data)\n        for i, val in enumerate(fields):\n            print(f\"{i}:\\t0x{val:X}\")\n        print(data)\n        print(data.hex())\n        print(fields)\n        # self.maybe_crc_1, _, self.maybe_rom_end, = fields[:3]\n        # self.patchram_code, self.binary_offset, _, self.maybe_ram_size = fields[3:7]\n        # self.move_patches, self.end_of_last_patch_source, _, = fields[7:10]\n        # self.maybe_something, self.brcm_cfg, self.brcm_cfgS, _ = fields[10:14]\n        #\n\n    def __str__(self):\n        return \"\"\n        # return \"\\n\".join(\n        #     (\n        #         f\"Rom end: 0x{self.maybe_rom_end:X}\",\n        #         f\"Patchram Code: 0x{self.patchram_code:X}\",\n        #         f\"Binary Offset: 0x{self.binary_offset:X}\",\n        #         f\"Maybe Ram size: 0x{self.maybe_ram_size:X}\",\n        #     )\n        # )\n",
        "source_code_len": 30412,
        "target_code": "    yield from parse_symdef_flag(meta)\n",
        "target_code_len": 39,
        "diff_format": "@@ -240,746 +229,1 @@\n     yield from parse_symdef_flag(meta)\n-\n-\n-class HCD_TYPES(IntEnum):\n-    HCI_CMD = 1\n-    ACL_DATA = 2\n-    SCO_DATA = 3\n-    HCI_EVENT = 4\n-    BCM_DBG = 7  # vendor specific: broadcom\n-\n-\n-class EOF(Exception):\n-    pass\n-\n-\n-def _read_raise_eof(stream, size):\n-    assert size > 0\n-    data = stream.read(size)\n-    if len(data) < size:\n-        raise EOF\n-    return data\n-\n-\n-_hci_cmd_header_struct = struct.Struct(\"<HB\")\n-_hci_cmd_header_size = _hci_cmd_header_struct.size\n-_hci_cmd_write_ram_opcode = 0xFC4C\n-\n-\n-class HCI_CMD:\n-    def __init__(self, header: bytes):\n-        self.opcode, self.plen = _hci_cmd_header_struct.unpack(header)\n-        self.raw_payload = b\"\"\n-        self.payload = None\n-\n-    def handle_payload(self):\n-        if self.opcode == _hci_cmd_write_ram_opcode:\n-            self.payload = parse_tlv_list(self.raw_payload, self.plen)\n-\n-    def __str__(self):\n-        if self.payload is None:\n-            return f\"{HCI_CMD_STR[self.opcode]}\\t{self.plen}\\t{self.raw_payload.hex()}\"\n-        else:\n-            return f\"{HCI_CMD_STR[self.opcode]}\\t{self.plen}\\t{self.payload}\"\n-\n-\n-_rompatch_struct = struct.Struct(\"<BII4s2x4s\")\n-_rompatch_size = _rompatch_struct.size\n-\n-\n-@dataclass\n-class RomPatch:\n-    slot: int\n-    target_address: int\n-    value: bytes\n-    unknown: bytes\n-\n-    def __str__(self):\n-        return f\"Rom Patch[{self.slot}] @0x{self.target_address:X} '{self.value.hex()}'\"\n-\n-    @classmethod\n-    def from_bytes(cls, data: bytes):\n-        return cls(*_rompatch_struct.unpack(data))\n-\n-\n-_rampatch_struct = struct.Struct(\"<I\")\n-_rampatch_size = _rampatch_struct.size\n-\n-\n-@dataclass\n-class RamPatch:\n-    target_address: int\n-    value: bytes\n-\n-    @classmethod\n-    def from_bytes(cls, data: bytes):\n-        target_address = _rampatch_struct.unpack(data[:_rampatch_size])\n-        value = data[_rampatch_size:]\n-        return cls(target_address, value)\n-\n-    def __str__(self):\n-        return f\"Ram Patch @0x{self.target_address:X} '{self.value.hex()}'\"\n-\n-\n-def parse_tlv_list(data: bytes, plen: int) -> List[\"TLV\"]:\n-    tlv_list = []\n-    data_len = plen - 4\n-    assert len(data) == plen\n-    addr = struct.unpack(\"<I\", data[:4])[0]\n-    print(f\"0x{addr:X}\")\n-    offset = 4\n-    while data_len >= _tlv_header_size:\n-        tlv = TLV(data[offset : offset + _tlv_header_size])\n-        print(tlv.plen, data_len, _tlv_header_size)\n-        offset += _tlv_header_size\n-        data_len -= _tlv_header_size\n-        if data_len < tlv.plen:\n-            break\n-            raise Exception(\"Firmware is corrupted\")\n-        tlv.raw_payload = data[offset : offset + tlv.plen]\n-        if tlv.tlv_type == TLV_TYPES.PatchRom32b:\n-            tlv.payload = RomPatch.from_bytes(tlv.raw_payload)\n-        elif tlv.tlv_type == TLV_TYPES.PatchRam:\n-            tlv.payload = RamPatch.from_bytes(tlv.raw_payload)\n-        data_len -= tlv.plen\n-        offset += tlv.plen\n-        tlv_list.append(tlv)\n-    if tlv_list:\n-        return tlv_list\n-    else:\n-        return None\n-\n-\n-_tlv_header_struct = struct.Struct(\"<BH\")\n-_tlv_header_size = _tlv_header_struct.size\n-\n-\n-class TLV:\n-    def __init__(self, header: bytes):\n-        self.tlv_type, self.plen = _tlv_header_struct.unpack(header)\n-        try:\n-            self.tlv_type = TLV_TYPES(self.tlv_type)\n-        except ValueError:\n-            pass\n-        self.raw_payload = b\"\"\n-        self.payload = None\n-\n-    def __str__(self):\n-        if self.payload is None:\n-            return f\"TLV {self.tlv_type}\\t{self.plen}\\t{self.raw_payload.hex()}\"\n-        else:\n-            return f\"TLV {self.tlv_type}\\t{self.plen}\\t{self.payload}\"\n-\n-\n-class TLV_TYPES(IntEnum):\n-    Reboot = 0x02\n-    PatchRom32b = 0x08\n-    PatchRam = 0x0A\n-    SetDefaultBTDAddr = 0x40\n-    SetLocalDevName = 0x41\n-    EndTLVList = 0xFE\n-\n-\n-HCI_CMD_STR = {\n-    0x0401: \"COMND Inquiry\",\n-    0x0402: \"COMND Inquiry_Cancel\",\n-    0x0403: \"COMND Periodic_Inquiry_Mode\",\n-    0x0404: \"COMND Exit_Periodic_Inquiry_Mode\",\n-    0x0405: \"COMND Create_Connection\",\n-    0x0406: \"COMND Disconnect\",\n-    0x0408: \"COMND Create_Connection_Cancel\",\n-    0x0409: \"COMND Accept_Connection_Request\",\n-    0x040A: \"COMND Reject_Connection_Request\",\n-    0x040B: \"COMND Link_Key_Request_Reply\",\n-    0x040C: \"COMND Link_Key_Request_Negative_Reply\",\n-    0x040D: \"COMND PIN_Code_Request_Reply\",\n-    0x040E: \"COMND PIN_Code_Request_Negative_Reply\",\n-    0x040F: \"COMND Change_Connection_Packet_Type\",\n-    0x0411: \"COMND Authentication_Requested\",\n-    0x0413: \"COMND Set_Connection_Encryption \",\n-    0x0415: \"COMND Change_Connection_Link_Key\",\n-    0x0417: \"COMND Master_Link_Key\",\n-    0x0419: \"COMND Remote_Name_Request\",\n-    0x041A: \"COMND Remote_Name_Request_Cancel\",\n-    0x041B: \"COMND Read_Remote_Supported_Features\",\n-    0x041C: \"COMND Read_Remote_Extended_Features\",\n-    0x041D: \"COMND Read_Remote_Version_Information\",\n-    0x041F: \"COMND Read_Clock_Offset\",\n-    0x0420: \"COMND Read_LMP_Handle\",\n-    0x0428: \"COMND Setup_Synchronous_Connection\",\n-    0x0429: \"COMND Accept_Synchronous_Connection_Request\",\n-    0x042A: \"COMND Reject_Synchronous_Connection_Request\",\n-    0x042B: \"COMND IO_Capability_Request_Reply\",\n-    0x042C: \"COMND User_Confirmation_Request_Reply\",\n-    0x042D: \"COMND User_Confirmation_Request_Negative_Reply\",\n-    0x042E: \"COMND User_Passkey_Request_Reply\",\n-    0x042F: \"COMND User_Passkey_Request_Negative_Reply\",\n-    0x0430: \"COMND Remote_OOB_Data_Request_Reply\",\n-    0x0433: \"COMND Remote_OOB_Data_Request_Negative_Reply\",\n-    0x0434: \"COMND IO_Capability_Request_Negative_Reply\",\n-    0x0435: \"COMND Create_Physical_Link\",\n-    0x0436: \"COMND Accept_Physical_Link\",\n-    0x0437: \"COMND Disconnect_Physical_Link\",\n-    0x0438: \"COMND Create_Logical_Link\",\n-    0x0439: \"COMND Accept_Logical_Link\",\n-    0x043A: \"COMND Disconnect_Logical_Link\",\n-    0x043B: \"COMND Logical_Link_Cancel\",\n-    0x043C: \"COMND Flow_Spec_Modify\",\n-    0x043D: \"COMND Enhanced_Setup_Synchronous_Connection\",\n-    0x043E: \"COMND Enhanced_Accept_Synchronous_Connection_Request\",\n-    0x043F: \"COMND Truncated_Page\",\n-    0x0440: \"COMND Truncated_Page_Cancel\",\n-    0x0441: \"COMND Set_Connectionless_Slave_Broadcast\",\n-    0x0442: \"COMND Set_Connectionless_Slave_Broadcast_Broadcast_Receive\",\n-    0x0443: \"COMND Start_Synchronization_Train\",\n-    0x0444: \"COMND Receive_Synchronization_Train\",\n-    0x0445: \"COMND Remote_OOB_Extended_Data_Request_Reply\",\n-    0x0801: \"COMND Hold_Mode\",\n-    0x0803: \"COMND Sniff_Mode\",\n-    0x0804: \"COMND Exit_Sniff_Mode\",\n-    0x0805: \"COMND Park_State\",\n-    0x0806: \"COMND Exit_Park_State\",\n-    0x0807: \"COMND QoS_Setup\",\n-    0x0809: \"COMND Role_Discovery\",\n-    0x080B: \"COMND Switch_Role\",\n-    0x080C: \"COMND Read_Link_Policy_Settings\",\n-    0x080D: \"COMND Write_Link_Policy_Settings\",\n-    0x080E: \"COMND Read_Default_Link_Policy_Settings\",\n-    0x080F: \"COMND Write_Default_Link_Policy_Settings\",\n-    0x0810: \"COMND Flow_Specification\",\n-    0x0811: \"COMND Sniff_Subrating\",\n-    0x0C01: \"COMND Set_Event_Mask\",\n-    0x0C03: \"COMND Reset\",\n-    0x0C05: \"COMND Set_Event_Filter\",\n-    0x0C08: \"COMND Flush\",\n-    0x0C09: \"COMND Read_PIN_Type\",\n-    0x0C0A: \"COMND Write_PIN_Type\",\n-    0x0C0B: \"COMND Create_New_Unit_Key\",\n-    0x0C0D: \"COMND Read_Stored_Link_Key\",\n-    0x0C11: \"COMND Write_Stored_Link_Key\",\n-    0x0C12: \"COMND Delete_Stored_Link_Key\",\n-    0x0C13: \"COMND Write_Local_Name\",\n-    0x0C14: \"COMND Read_Local_Name\",\n-    0x0C15: \"COMND Read_Connection_Accept_Timeout\",\n-    0x0C16: \"COMND Write_Connection_Accept_Timeout\",\n-    0x0C17: \"COMND Read_Page_Timeout\",\n-    0x0C18: \"COMND Write_Page_Timeout\",\n-    0x0C19: \"COMND Read_Scan_Enable\",\n-    0x0C1A: \"COMND Write_Scan_Enable\",\n-    0x0C1B: \"COMND Read_Page_Scan_Activity\",\n-    0x0C1C: \"COMND Write_Page_Scan_Activity\",\n-    0x0C1D: \"COMND Read_Inquiry_Scan_Activity\",\n-    0x0C1E: \"COMND Write_Inquiry_Scan_Activity\",\n-    0x0C1F: \"COMND Read_Authentication_Enable\",\n-    0x0C20: \"COMND Write_Authentication_Enable\",\n-    0x0C23: \"COMND Read_Class_of_Device\",\n-    0x0C24: \"COMND Write_Class_of_Device\",\n-    0x0C25: \"COMND Read_Voice_Setting\",\n-    0x0C26: \"COMND Write_Voice_Setting\",\n-    0x0C27: \"COMND Read_Automatic_Flush_Timeout\",\n-    0x0C28: \"COMND Write_Automatic_Flush_Timeout\",\n-    0x0C29: \"COMND Read_Num_Broadcast_Retransmissions\",\n-    0x0C30: \"COMND Write_Num_Broadcast_Retransmissions\",\n-    0x0C2B: \"COMND Read_Hold_Mode_Activity\",\n-    0x0C2C: \"COMND Write_Hold_Mode_Activity\",\n-    0x0C2D: \"COMND Read_Transmit_Power_Level\",\n-    0x0C2E: \"COMND Read_Synchronous_Flow_Control_Enable\",\n-    0x0C2F: \"COMND Write_Synchronous_Flow_Control_Enable\",\n-    0x0C31: \"COMND Set_Controller_To_Host_Flow_Control\",\n-    0x0C33: \"COMND Host_Buffer_Size\",\n-    0x0C35: \"COMND Host_Number_Of_Completed_Packets\",\n-    0x0C36: \"COMND Read_Link_Supervision_Timeout\",\n-    0x0C37: \"COMND Write_Link_Supervision_Timeout\",\n-    0x0C38: \"COMND Read_Number_Of_Supported_IAC\",\n-    0x0C39: \"COMND Read_Current_IAC_LAP\",\n-    0x0C3A: \"COMND Write_Current_IAC_LAP\",\n-    0x0C3F: \"COMND Set_AFH_Host_Channel_Classification\",\n-    0x0C42: \"COMND Read_Inquiry_Scan_Type\",\n-    0x0C43: \"COMND Write_Inquiry_Scan_Type\",\n-    0x0C44: \"COMND Read_Inquiry_Mode\",\n-    0x0C45: \"COMND Write_Inquiry_Mode\",\n-    0x0C46: \"COMND Read_Page_Scan_Type\",\n-    0x0C47: \"COMND Write_Page_Scan_Type\",\n-    0x0C48: \"COMND Read_AFH_Channel_Assessment_Mode\",\n-    0x0C49: \"COMND Write_AFH_Channel_Assessment_Mode\",\n-    0x0C51: \"COMND Read_Extended_Inquiry_Response\",\n-    0x0C52: \"COMND Write_Extended_Inquiry_Response\",\n-    0x0C53: \"COMND Refresh_Encryption_Key\",\n-    0x0C55: \"COMND Read_Simple_Pairing_Mode\",\n-    0x0C56: \"COMND Write_Simple_Pairing_Mode\",\n-    0x0C57: \"COMND Read_Local_OOB_Data\",\n-    0x0C58: \"COMND Read_Inquiry_Response_Transmit_Power_Level\",\n-    0x0C59: \"COMND Write_Inquiry_Response_Transmit_Power_Level\",\n-    0x0C60: \"COMND Send_Key_Press_Notification\",\n-    0x0C5A: \"COMND Read_Default_Erroneous_Data_Reporting\",\n-    0x0C5B: \"COMND Write_Default_Erroneous_Data_Reporting\",\n-    0x0C5F: \"COMND Enhanced_Flush\",\n-    0x0C61: \"COMND Read_Logical_Link_Accept_Timeout\",\n-    0x0C62: \"COMND Write_Logical_Link_Accept_Timeout\",\n-    0x0C63: \"COMND Set_Event_Mask_Page_2\",\n-    0x0C64: \"COMND Read_Location_Data\",\n-    0x0C65: \"COMND Write_Location_Data\",\n-    0x0C66: \"COMND Read_Flow_Control_Mode\",\n-    0x0C67: \"COMND Write_Flow_Control_Mode\",\n-    0x0C68: \"COMND Read_Enhance_Transmit_Power_Level\",\n-    0x0C69: \"COMND Read_Best_Effort_Flush_Timeout\",\n-    0x0C6A: \"COMND Write_Best_Effort_Flush_Timeout\",\n-    0x0C6B: \"COMND Short_Range_Mode\",\n-    0x0C6C: \"COMND Read_LE_Host_Support\",\n-    0x0C6D: \"COMND Write_LE_Host_Support\",\n-    0x0C6E: \"COMND Set_MWS_Channel_Parameters\",\n-    0x0C6F: \"COMND Set_External_Frame_Configuration\",\n-    0x0C70: \"COMND Set_MWS_Signaling\",\n-    0x0C71: \"COMND Set_MWS_Transport_Layer\",\n-    0x0C72: \"COMND Set_MWS_Scan_Frequency_Table\",\n-    0x0C73: \"COMND Set_MWS_PATTERN_Configuration\",\n-    0x0C74: \"COMND Set_Reserved_LT_ADDR\",\n-    0x0C75: \"COMND Delete_Reserved_LT_ADDR\",\n-    0x0C76: \"COMND Set_Connectionless_Slave_Broadcast_Data\",\n-    0x0C77: \"COMND Read_Synchronization_Train_Parameters\",\n-    0x0C78: \"COMND Write_Synchronization_Train_Parameters\",\n-    0x0C79: \"COMND Read_Secure_Connections_Host_Support\",\n-    0x0C7A: \"COMND Write_Secure_Connections_Host_Support\",\n-    0x0C7B: \"COMND Read_Authenticated_Payload_Timeout\",\n-    0x0C7C: \"COMND Write_Authenticated_Payload_Timeout\",\n-    0x0C7D: \"COMND Read_Local_OOB_Extended_Data\",\n-    0x0C7E: \"COMND Read_Extended_Page_Timeout\",\n-    0x0C7F: \"COMND Write_Extended_Page_Timeout\",\n-    0x0C80: \"COMND Read_Extended_Inquiry_Length\",\n-    0x0C81: \"COMND Write_Extended_Inquiry_Length\",\n-    0x1001: \"COMND Read_Local_Version_Information\",\n-    0x1002: \"COMND Read_Local_Supported_Commands\",\n-    0x1003: \"COMND Read_Local_Supported_Features\",\n-    0x1004: \"COMND Read_Local_Extended_Features\",\n-    0x1005: \"COMND Read_Buffer_Size\",\n-    0x1009: \"COMND Read_BD_ADDR\",\n-    0x100A: \"COMND Read_Data_Block_Size\",\n-    0x100B: \"COMND Read_Local_Supported_Codecs\",\n-    0x1401: \"COMND Read_Failed_Contact_Counter\",\n-    0x1402: \"COMND Reset_Failed_Contact_Counter\",\n-    0x1403: \"COMND Read_Link_Quality\",\n-    0x1405: \"COMND Read_RSSI\",\n-    0x1406: \"COMND Read_AFH_Channel_Map\",\n-    0x1407: \"COMND Read_Clock\",\n-    0x1408: \"COMND Encryption_Key_Size\",\n-    0x1409: \"COMND Read_Local_AMP_Info\",\n-    0x140A: \"COMND Read_Local_AMP_ASSOC\",\n-    0x140B: \"COMND Write_Remote_AMP_ASSOC\",\n-    0x140C: \"COMND Get_MWS_Transport_Layer_Configuration\",\n-    0x140D: \"COMND Set_Triggered_Clock_Capture\",\n-    0x1801: \"COMND Read_Loopback_Mode\",\n-    0x1802: \"COMND Write_Loopback_Mode\",\n-    0x1803: \"COMND Enable_Device_Under_Test_Mode\",\n-    0x1804: \"COMND Write_Simple_Pairing_Debug_Mode\",\n-    0x1807: \"COMND Enable_AMP_Receiver_Reports\",\n-    0x1808: \"COMND AMP_Test_End\",\n-    0x1809: \"COMND AMP_Test\",\n-    0x180A: \"COMND Write_Secure_Connection_Test_Mode\",\n-    0x2001: \"COMND LE_Set_Event_Mask\",\n-    0x2002: \"COMND LE_Read_Buffer_Size\",\n-    0x2003: \"COMND LE_Read_Local_Supported_Features\",\n-    0x2005: \"COMND LE_Set_Random_Address\",\n-    0x2006: \"COMND LE_Set_Advertising_Parameters\",\n-    0x2007: \"COMND LE_Read_Advertising_Channel_Tx_Power\",\n-    0x2008: \"COMND LE_Set_Advertising_Data\",\n-    0x2009: \"COMND LE_Set_Scan_Responce_Data\",\n-    0x200A: \"COMND LE_Set_Advertise_Enable\",\n-    0x200B: \"COMND LE_Set_Set_Scan_Parameters\",\n-    0x200C: \"COMND LE_Set_Scan_Enable\",\n-    0x200D: \"COMND LE_Create_Connection\",\n-    0x200E: \"COMND LE_Create_Connection_Cancel \",\n-    0x200F: \"COMND LE_Read_White_List_Size\",\n-    0x2010: \"COMND LE_Clear_White_List\",\n-    0x2011: \"COMND LE_Add_Device_To_White_List\",\n-    0x2012: \"COMND LE_RemoveDevice_From_White_List\",\n-    0x2013: \"COMND LE_Connection_Update\",\n-    0x2014: \"COMND LE_Set_Host_Channel_Classification\",\n-    0x2015: \"COMND LE_Read_Channel_Map\",\n-    0x2016: \"COMND LE_Read_Remote_Used_Features\",\n-    0x2017: \"COMND LE_Encrypt\",\n-    0x2018: \"COMND LE_Rand\",\n-    0x2019: \"COMND LE_Start_Encryption\",\n-    0x201A: \"COMND LE_Long_Term_Key_Request_Reply\",\n-    0x201B: \"COMND LE_Long_Term_Key_Request_Negative_Reply\",\n-    0x201C: \"COMND LE_Read_Supported_States\",\n-    0x201D: \"COMND LE_Receiver_Test\",\n-    0x201E: \"COMND LE_Transmitter_Test\",\n-    0x201F: \"COMND LE_Test_End\",\n-    0x2020: \"COMND LE_Remote_Connection_Parameter_Request_Reply\",\n-    0x2021: \"COMND LE_Remote_Connection_Parameter_Request_Negative_Reply\",\n-    # Function names extracted from CYW20735 / Packet Logger 9 / bluez source / BCM20703A2 Symbols\n-    0xFC00: \"COMND VSC_CustomerExtension\",\n-    0xFC01: \"COMND VSC_WriteBdAddr\",\n-    0xFC02: \"COMND VSC_DumpSRAM\",\n-    0xFC03: \"COMND VSC_ChannelClassConfig\",\n-    0xFC04: \"COMND VSC_READ_PAGE_SCAN_REPETITION_MODE\",\n-    0xFC05: \"COMND VSC_WRITE_PAGE_SCAN_REPETITION_MODE\",\n-    0xFC06: \"COMND VSC_READ_PAGE_RESPONSE_TIMEOUT\",\n-    0xFC07: \"COMND VSC_WRITE_PAGE_RESPONSE_TIMEOUT\",\n-    0xFC08: \"COMND VSC_BTLinkQualityMode\",  # VSC_READ_NEW_CONNECTION_TIMEOUT\n-    0xFC09: \"COMND VSC_WRITE_NEW_CONNECTION_TIMEOUT\",\n-    0xFC0A: \"COMND VSC_Super_Peek_Poke\",\n-    0xFC0B: \"COMND VSC_WriteLocalSupportedFeatures\",\n-    0xFC0C: \"COMND VSC_Super_Duper_Peek_Poke\",\n-    0xFC0D: \"COMND VSC_RSSI_HISTORY\",\n-    0xFC0E: \"COMND VSC_SetLEDGlobalCtrl\",\n-    0xFC0F: \"COMND VSC_FORCE_HOLD_MODE\",\n-    0xFC10: \"COMND VSC_Commit_BDAddr\",\n-    0xFC12: \"COMND VSC_WriteHoppingChannels\",\n-    0xFC13: \"COMND VSC_SleepForeverMode\",\n-    0xFC14: \"COMND VSC_SetCarrierFrequencyArm\",\n-    0xFC16: \"COMND VSC_SetEncryptionKeySize\",\n-    0xFC17: \"COMND VSC_Invalidate_Flash_and_Reboot\",\n-    0xFC18: \"COMND VSC_Update_UART_Baud_Rate\",\n-    0xFC19: \"COMND VSC_GpioConfigAndWrite\",\n-    0xFC1A: \"COMND VSC_GpioRead\",\n-    0xFC1B: \"COMND VSC_SetTestModeType\",\n-    0xFC1C: \"COMND VSC_WriteScoPcmInterfaceParam\",\n-    0xFC1D: \"COMND VSC_ReadScoPcmIntParam\",\n-    0xFC1E: \"COMND VSC_WritePcmDataFormatParam\",\n-    0xFC1F: \"COMND VSC_ReadPcmDataFormatParam\",\n-    0xFC20: \"COMND VSC_WriteComfortNoiseParam\",\n-    0xFC22: \"COMND VSC_WriteScoTimeSlot\",\n-    0xFC23: \"COMND VSC_ReadScoTimeSlot\",\n-    0xFC24: \"COMND VSC_WritePcmLoopbackModed\",\n-    0xFC25: \"COMND VSC_ReadPcmLoopbackModed\",\n-    0xFC26: \"COMND VSC_SetTransmitPower\",\n-    0xFC27: \"COMND VSC_SetSleepMode\",\n-    0xFC28: \"COMND VSC_ReadSleepMode\",\n-    0xFC29: \"COMND VSC_SleepmodeCommand\",\n-    0xFC2A: \"COMND VSC_HandleDelayPeripheralSCOStartup\",\n-    0xFC2B: \"COMND VSC_WriteReceiveOnly\",\n-    0xFC2D: \"COMND VSC_RfConfigSettings\",\n-    0xFC2E: \"COMND VSC_HandleDownload_Minidriver\",\n-    0xFC2F: \"COMND VSC_CrystalPpm\",\n-    0xFC32: \"COMND VSC_SetAFHBehavior\",\n-    0xFC33: \"COMND VSC_ReadBtwSecurityKey\",\n-    0xFC34: \"COMND VSC_EnableRadio\",\n-    0xFC35: \"COMND VSC_Cosim_Set_Mode\",\n-    0xFC36: \"COMND VSC_GetHIDDeviceList\",\n-    0xFC37: \"COMND VSC_AddHIDDevice\",\n-    0xFC39: \"COMND VSC_RemoveHIDDevice\",\n-    0xFC3A: \"COMND VSC_EnableTca\",\n-    0xFC3B: \"COMND VSC_EnableUSBHIDEmulation\",\n-    0xFC3C: \"COMND VSC_WriteRfProgrammingTable\",\n-    0xFC40: \"COMND VSC_ReadCollaborationMode\",\n-    0xFC41: \"COMND VSC_WriteCollaborationMode\",\n-    0xFC43: \"COMND VSC_WriteRFAttenuationTable\",\n-    0xFC44: \"COMND VSC_ReadUARTClockSetting\",\n-    0xFC45: \"COMND VSC_WriteUARTClockSetting\",\n-    0xFC46: \"COMND VSC_SetSleepClockAccuratyAndSettlingTime\",\n-    0xFC47: \"COMND VSC_ConfigureSleepMode\",\n-    0xFC48: \"COMND VSC_ReadRawRssi\",\n-    0xFC49: \"COMND VSC_ChannelClassConfig\",\n-    0xFC4C: \"COMND VSC_Write_RAM\",\n-    0xFC4D: \"COMND VSC_Read_RAM\",\n-    0xFC4E: \"COMND VSC_Launch_RAM\",\n-    0xFC4F: \"COMND VSC_InstallPatches\",\n-    0xFC51: \"COMND VSC_RadioTxTest\",\n-    0xFC52: \"COMND VSC_RadioRxTest\",\n-    0xFC54: \"COMND VSC_DUT_LoopbackTest\",\n-    0xFC56: \"COMND VSC_EnhancedRadioRxTest\",\n-    0xFC57: \"COMND VSC_WriteHighPriorityConnection\",\n-    0xFC58: \"COMND VSC_SendLmpPdu\",\n-    0xFC59: \"COMND VSC_PortInformationEnable\",\n-    0xFC5A: \"COMND VSC_ReadBtPortPidVid\",\n-    0xFC5B: \"COMND VSC_Read2MBitFlashCrc\",\n-    0xFC5C: \"COMND VSC_FactoryCommitProductionTestFlag\",\n-    0xFC5D: \"COMND VSC_ReadProductionTestFlag\",\n-    0xFC5E: \"COMND VSC_WritePcmMuteParam\",\n-    0xFC5F: \"COMND VSC_ReadPcmMuteParam\",\n-    0xFC61: \"COMND VSC_WritePcmPins\",\n-    0xFC62: \"COMND VSC_ReadPcmPins\",\n-    0xFC6D: \"COMND VSC_WriteI2sPcmInterface\",\n-    0xFC6E: \"COMND VSC_ReadControllerFeatures\",\n-    0xFC6F: \"COMND VSC_WriteComfortNoiseParam\",\n-    0xFC71: \"COMND VSC_WriteRamCompressed\",  # maybe .hcd only\n-    0xFC78: \"COMND VSC_CALCULATE_CRC\",\n-    0xFC79: \"COMND VSC_ReadVerboseConfigVersionInfo\",\n-    0xFC7A: \"COMND VSC_TRANSPORT_SUSPEND\",\n-    0xFC7B: \"COMND VSC_TRANSPORT_RESUME\",\n-    0xFC7C: \"COMND VSC_BasebandFlowControlOverride\",\n-    0xFC7D: \"COMND VSC_WriteClass15PowerTable\",\n-    0xFC7E: \"COMND VSC_EnableWbs\",\n-    0xFC7F: \"COMND VSC_WriteVadMode\",\n-    0xFC80: \"COMND VSC_ReadVadMode\",\n-    0xFC81: \"COMND VSC_WriteEcsiConfig\",\n-    0xFC82: \"COMND VSC_FM_TX_COMMAND\",\n-    0xFC83: \"COMND VSC_WriteDynamicScoRoutingChange\",\n-    0xFC84: \"COMND VSC_READ_HID_BIT_ERROR_RATE\",\n-    0xFC85: \"COMND VSC_EnableHciRemoteTest\",\n-    0xFC8A: \"COMND VSC_CALIBRATE_BANDGAP\",\n-    0xFC8B: \"COMND VSC_UipcOverHci\",  # Write Coexistence Tri State Enabled\n-    0xFC8C: \"COMND VSC_READ_ADC_CHANNEL\",\n-    0xFC90: \"COMND VSC_CoexBandwidthStatistics\",\n-    0xFC91: \"COMND VSC_ReadPmuConfigFlags\",\n-    0xFC92: \"COMND VSC_WritePmuConfigFlags\",\n-    0xFC93: \"COMND VSC_ARUBA_CTRL_MAIN_STATUS_MON\",\n-    0xFC94: \"COMND VSC_CONTROL_AFH_ACL_SETUP\",\n-    0xFC95: \"COMND VSC_ARUBA_READ_WRITE_INIT_PARAM\",\n-    0xFC96: \"COMND VSC_INTERNAL_CAPACITOR_TUNING\",\n-    0xFC97: \"COMND VSC_BFC_DISCONNECT\",\n-    0xFC98: \"COMND VSC_BFC_SEND_DATA\",\n-    0xFC9A: \"COMND VSC_COEX_WRITE_WIMAX_CONFIGURATION\",\n-    0xFC9B: \"COMND VSC_BFC_POLLING_ENABLE\",\n-    0xFC9C: \"COMND VSC_BFC_RECONNECTABLE_DEVICE\",\n-    0xFC9D: \"COMND VSC_CONDITIONAL_SCAN_CONFIGURATION\",\n-    0xFC9E: \"COMND VSC_PacketErrorInjection\",\n-    0xFCA0: \"COMND VSC_WriteRfReprogrammingTableMasking\",\n-    0xFCA1: \"COMND VSC_BLPM_ENABLE\",\n-    0xFCA2: \"COMND VSC_ReadAudioRouteInfo\",\n-    0xFCA3: \"COMND VSC_EncapsulatedHciCommand\",\n-    0xFCA4: \"COMND VSC_SendEpcLmpMessage\",\n-    0xFCA5: \"COMND VSC_TransportStatistics\",\n-    0xFCA6: \"COMND VSC_BistPostGetResults\",\n-    0xFCAD: \"COMND VSC_CurrentSensorCtrlerConfig\",\n-    0xFCAE: \"COMND VSC_Pcm2Setup\",\n-    0xFCAF: \"COMND VSC_ReadBootCrystalStatus\",\n-    0xFCB2: \"COMND VSC_SniffSubratingMaximumLocalLatency\",\n-    0xFCB4: \"COMND VSC_SET_PLC_ON_OFF\",\n-    0xFCB5: \"COMND VSC_BFC_Suspend\",\n-    0xFCB6: \"COMND VSC_BFC_Resume\",\n-    0xFCB7: \"COMND VSC_3D_TV2TV_SYNC_AND_REPORTING\",\n-    0xFCB8: \"COMND VSC_WRITE_OTP\",\n-    0xFCB9: \"COMND VSC_READ_OTP\",\n-    0xFCBA: \"COMND VSC_le_read_random_address\",\n-    0xFCBB: \"COMND VSC_le_hw_setup\",\n-    0xFCBC: \"COMND VSC_LE_DVT_TXRXTEST\",\n-    0xFCBD: \"COMND VSC_LE_DVT_TESTDATAPKT\",\n-    0xFCBE: \"COMND VSC_LE_DVT_LOG_SETUP\",\n-    0xFCBF: \"COMND VSC_LE_DVT_ERRORINJECT_SCHEME\",\n-    0xFCC0: \"COMND VSC_LE_DVT_TIMING_SCHEME\",\n-    0xFCC1: \"COMND VSC_LeScanRssiThresholdSetup\",\n-    0xFCC2: \"COMND VSC_BFCSetParameters\",\n-    0xFCC3: \"COMND VSC_BFCReadParameters\",\n-    0xFCC4: \"COMND VSC_TurnOffDynamicPowerControl\",\n-    0xFCC5: \"COMND VSC_IncreaseDecreasePowerLevel\",\n-    0xFCC6: \"COMND VSC_ReadRawRssiValue\",\n-    0xFCC7: \"COMND VSC_SetProximityTable\",\n-    0xFCC8: \"COMND VSC_SetProximityTrigger\",\n-    0xFCCD: \"COMND VSC_SET_SUB_SNIFF_INTERVAL\",\n-    0xFCCE: \"COMND VSC_ENABLE_REPEATER_FUNCTIONALITY\",\n-    0xFCCF: \"COMND VSC_UPDATE_CONFIG_ITEM\",\n-    0xFCD0: \"COMND VSC_BFCCreateConnection\",\n-    0xFCD1: \"COMND VSC_WBS_BEC_PARAMS\",\n-    0xFCD2: \"COMND VSC_ReadGoldenRange\",\n-    0xFCD3: \"COMND VSC_INITIATE_MULTICAST_BEACON_LOCK\",\n-    0xFCD4: \"COMND VSC_TERMINATE_MULTICAST\",\n-    0xFCD7: \"COMND VSC_ENABLE_H4IBSS\",\n-    0xFCD8: \"COMND VSC_BLUEBRIDGE_SPI_NEGOTIATION_REQUEST\",\n-    0xFCD9: \"COMND VSC_BLUEBRIDGE_SPI_SLEEPTHRESHOLD_REQUEST\",\n-    0xFCDA: \"COMND VSC_ACCESSORY_PROTOCOL_COMMAND_GROUP\",\n-    0xFCDB: \"COMND VSC_HandleWriteOtp_AuxData\",\n-    0xFCDC: \"COMND VSC_InitMcastIndPoll\",\n-    0xFCDD: \"COMND VSC_EnterMcastIndPoll\",\n-    0xFCDE: \"COMND VSC_DisconnectMcastIndPoll\",\n-    0xFCE0: \"COMND VSC_ExtendedInquiryHandshake\",\n-    0xFCE1: \"COMND VSC_UARTBRIDGE_ROUTE_HCI_CMD_TO_UART_BRIDGE\",\n-    0xFCE2: \"COMND VSC_Olympic\",\n-    0xFCE4: \"COMND VSC_CONFIG_HID_LHL_GPIO\",\n-    0xFCE5: \"COMND VSC_READ_HID_LHL_GPIO\",\n-    0xFCE6: \"COMND VSC_LeTxTest\",\n-    0xFCE7: \"COMND VSC_UARTBRIDGE_SET_UART_BRIDGE_PARAMETER\",\n-    0xFCE8: \"COMND VSC_BIST_BER\",\n-    0xFCE9: \"COMND VSC_HandleLeMetaVsc1\",\n-    0xFCEA: \"COMND VSC_BFC_SET_PRIORITY\",\n-    0xFCEB: \"COMND VSC_BFC_READ_PRIORITY\",\n-    0xFCEC: \"COMND VSC_ANT_COMMAND\",\n-    0xFCED: \"COMND VSC_LinkQualityStats\",\n-    0xFCEE: \"COMND VSC_READ_NATIVE_CLOCK\",\n-    0xFCEF: \"COMND VSC_BfcSetWakeupFlags\",\n-    0xFCF2: \"COMND VSC_START_DVT_TINYDRIVER\",\n-    0xFCF4: \"COMND VSC_SET_3DTV_DUAL_MODE_VIEW\",\n-    0xFCF5: \"COMND VSC_BFCReadRemoeBPCSFeatures\",\n-    0xFCF7: \"COMND VSC_IgnoreUSBReset\",\n-    0xFCF8: \"COMND VSC_SNIFF_RECONNECT_TRAIN\",\n-    0xFCF9: \"COMND VSC_AudioIPCommand\",\n-    0xFCFA: \"COMND VSC_BFCWriteScanEnable\",\n-    0xFCFE: \"COMND VSC_ReadLocalFirmwareInfo\",\n-    0xFCFF: \"COMND VSC_RSSIMeasurements\",\n-    0xFD01: \"COMND VSC_BFCReadScanEnable\",\n-    0xFD02: \"COMND VSC_EnableWbsModified\",\n-    0xFD03: \"COMND VSC_SetVsEventMask\",\n-    0xFD04: \"COMND VSC_BFCIsConnectionTBFCSuspended\",\n-    0xFD05: \"COMND VSC_SetUSBAutoResume\",\n-    0xFD06: \"COMND VSC_SetDirectionFindingParameters\",\n-    0xFD08: \"COMND VSC_ChangeLNAGainCoexECI\",\n-    0xFD0C: \"COMND VSC_LTELinkQualityMode\",  # LTECoexLinkQualityMetric\n-    0xFD0D: \"COMND VSC_LTETriggerWCI2Message\",\n-    0xFD0E: \"COMND VSC_LTEEnableWCI2Messages\",\n-    0xFD0F: \"COMND VSC_LTEEnableWCI2LoopbackTesting\",\n-    0xFD10: \"COMND VSC_ScoDiagStat\",\n-    0xFD11: \"COMND VSC_SetStreamingConnectionlessBroadcast\",\n-    0xFD12: \"COMND VSC_ReceiveStreamingConnectonlessBroadcast\",\n-    0xFD13: \"COMND VSC_WriteConnectionlessBroadcastStreamingData\",\n-    0xFD14: \"COMND VSC_FlushStreamingConnectionlessBroadcastData\",\n-    0xFD15: \"COMND VSC_FactoryCalSetTxPower\",\n-    0xFD16: \"COMND VSC_FactoryCalTrimTxPower\",\n-    0xFD17: \"COMND VSC_FactoryCalReadTempSettings\",\n-    0xFD18: \"COMND VSC_FactoryCalUpdateTableSettings\",\n-    0xFD1A: \"COMND VSC_WriteA2DPConnection\",\n-    0xFD1B: \"COMND VSC_Factory_Cal_Read_Table_Settings\",\n-    0xFD1C: \"COMND VSC_DBFW\",\n-    0xFD1D: \"COMND VSC_FactoryCalibrationRxRSSITest\",\n-    0xFD1E: \"COMND VSC_FactoryCalibrationRxRSSITest\",\n-    0xFD1F: \"COMND VSC_LTECoexTimingAdvance\",\n-    0xFD23: \"COMND VSC_HandleLeMetaVsc2\",\n-    0xFD28: \"COMND VSC_WriteLocalSupportedExtendedFeatures\",\n-    0xFD29: \"COMND VSC_PiconetClockAdjustment\",\n-    0xFD2A: \"COMND VSC_ReadRetransmissionStatus\",\n-    0xFD2F: \"COMND VSC_SetTransmitPowerRange\",\n-    0xFD33: \"COMND VSC_PageInquiryTxSuppression\",\n-    0xFD35: \"COMND VSC_RandomizeNativeClock\",\n-    0xFD36: \"COMND VSC_StoreFactoryCalibrationData\",\n-    0xFD3B: \"COMND VSC_ReadSupportedVSCs\",\n-    0xFD3C: \"COMND VSC_LEWriteLocalSupportedFeatures\",\n-    0xFD3E: \"COMND VSC_LEReadRemoteSupportedBRCMFeatures\",\n-    0xFD40: \"COMND VSC_BcsTimeline\",\n-    0xFD41: \"COMND VSC_BcsTimelineBroadcastReceive\",\n-    0xFD42: \"COMND VSC_ReadDynamicMemoryPoolStatistics\",\n-    0xFD43: \"COMND VSC_HandleIop3dtvTesterConfig\",\n-    0xFD45: \"COMND VSC_HandleAdcCapture\",\n-    0xFD47: \"COMND VSC_LEExtendedDuplicateFilter\",\n-    0xFD48: \"COMND VSC_LECreateExtendedAdvertisingInstance\",\n-    0xFD49: \"COMND VSC_LERemoveExtendedAdvertisingInstance\",\n-    0xFD4A: \"COMND VSC_LESetExtendedAdvertisingParameters\",\n-    0xFD4B: \"COMND VSC_LESetExtendedAdvertisingData\",\n-    0xFD4C: \"COMND VSC_LESetExtendedScanResponseData\",\n-    0xFD4D: \"COMND VSC_LESetExtendedAdvertisingEnable\",\n-    0xFD4E: \"COMND VSC_LEUpdateExtendedAdvertisingInstance\",\n-    0xFD53: \"COMND VSC_LEGetAndroidVendorCapabilities\",\n-    0xFD54: \"COMND VSC_LEMultiAdvtCommand\",\n-    0xFD55: \"COMND VSC_LeRPAOffload\",\n-    0xFD56: \"COMND VSC_LEBatchScanCommand\",\n-    0xFD57: \"COMND VSC_LEBrcmPCF\",\n-    0xFD59: \"COMND VSC_GetControllerActivityEnergyInfo\",\n-    0xFD5A: \"COMND VSC_ExtendedSetScanParameters\",\n-    0xFD5B: \"COMND VSC_Getdebuginfo\",\n-    0xFD5C: \"COMND VSC_WriteLocalHostState\",\n-    0xFD6E: \"COMND VSC_HandleConfigure_Sleep_Lines\",\n-    0xFD71: \"COMND VSC_SetSpecialSniffTransitionEnable\",\n-    0xFD73: \"COMND VSC_EnableBTSync\",\n-    0xFD79: \"COMND VSC_hciulp_handleBTBLEHighPowerControl\",\n-    0xFD7C: \"COMND VSC_HandleCustomerEnableHALinkCommands\",\n-    0xFD7D: \"COMND VSC_DWPTestCommands\",\n-    0xFD7F: \"COMND VSC_Olympic_LTE_Settings\",\n-    0xFD82: \"COMND VSC_WriteLERemotePublicAddress\",\n-    0xFD86: \"COMND VSC_1SecondTimerCommands\",\n-    0xFD88: \"COMND VSC_ForceWLANChannel\",\n-    0xFD8B: \"COMND VSC_SVTConfigSetup\",\n-    0xFD8F: \"COMND VSC_HandleCustomerReadHADeltaCommands\",\n-    0xFD9A: \"COMND VSC_SetupRSSCommands\",\n-    0xFD9C: \"COMND VSC_SetupRSSLocalCommands\",\n-    0xFDA1: \"COMND VSC_AudioBufferCommands\",\n-    0xFDA4: \"COMND VSC_HealthStatusReport\",\n-    0xFDA8: \"COMND VSC_ChangeConnectionPriority\",\n-    0xFDAA: \"COMND VSC_SamSetupCommand\",\n-    0xFDAB: \"COMND VSC_bthci_cmd_ble_enhancedTransmitterTest_hopping\",\n-    0xFDAF: \"COMND VSC_Handle_coex_debug_counters\",\n-    0xFDBB: \"COMND VSC_Read_Inquiry_Transmit_Power\",\n-    0xFDBE: \"COMND VSC_Enable_PADGC_Override\",\n-    0xFDCB: \"COMND VSC_WriteTxPowerAFHMode\",\n-    0xFDCD: \"COMND VSC_setMinimumNumberOfUsedChannels\",\n-    0xFDCE: \"COMND VSC_HandleBrEdrLinkQualityStats\",\n-    0xFF5E: \"COMND VSC_SectorErase\",\n-    0xFFCE: \"COMND VSC_Chip_Erase\",\n-    0xFFED: \"COMND VSC_EnterDownloadMode\",\n-}\n-\n-# def hci_cmd_parser(bytestream: bytes):\n-#     opcode = _read_raise_eof(bytestream, 2)\n-#     length = _uint8.unpack(_read_raise_eof(bytestream, 1))[0]\n-#     payload = bytestream.read(length)\n-#     return \"cmd\"\n-#\n-#\n-# def hci_event_parser(bytestream: bytes):\n-#     eventcode = _read_raise_eof(bytestream, 1)\n-#     length = _uint8.unpack(_read_raise_eof(bytestream, 1))[0]\n-#     payload = bytestream.read(length)\n-#     return \"event\"\n-#\n-#\n-# def acl_data_parser(bytestream: bytes):\n-#     handle_pb_bc = _read_raise_eof(bytestream, 2)\n-#     length = _uint16.unpack(_read_raise_eof(bytestream, 2))[0]\n-#     data = bytestream.read(length)\n-#     return \"acl\"\n-#\n-#\n-# def sco_data_parser(bytestream: bytes):\n-#     handle_status_rfu = _read_raise_eof(bytestream, 2)\n-#     length = _uint8.unpack(_read_raise_eof(bytestream, 1))[0]\n-#     data = bytestream.read(length)\n-#     return \"sco\"\n-#\n-#\n-# _PARSE_MAP = {\n-#     HCD_TYPES.HCI_CMD: hci_cmd_parser,\n-#     HCD_TYPES.ACL_DATA: acl_data_parser,\n-#     HCD_TYPES.SCO_DATA: sco_data_parser,\n-#     HCD_TYPES.HCI_EVENT: hci_event_parser,\n-#     HCD_TYPES.BCM_DBG: lambda x: \"dbg\",\n-# }\n-# _uint8 = struct.Struct(\"B\")\n-# _uint16 = struct.Struct(\"H\")\n-#\n-#\n-# def hcd_parser(hcd_path: str):\n-#     with open(hcd_path, \"rb\") as bytestream:\n-#         while True:\n-#             type_ = _uint8.unpack(_read_raise_eof(bytestream, 1))[0]\n-#             try:\n-#                 package = _PARSE_MAP[type_](bytestream)\n-#                 if package == \"dbg\":\n-#                     print(\"hello broadcom!\")\n-#                     break\n-#                 if package is not None:\n-#                     yield package\n-#             except EOF:\n-#                 print(\"I am not doing this right!\")\n-#                 raise EOF()\n-def hcd_parser(hcd_path: str):\n-    with open(hcd_path, \"rb\") as bytestream:\n-        while True:\n-            cmd = HCI_CMD(_read_raise_eof(bytestream, _hci_cmd_header_size))\n-            cmd.raw_payload = _read_raise_eof(bytestream, cmd.plen)\n-            cmd.handle_payload()\n-            print(cmd)\n-\n-\n-_iphone_bin_header_struct = struct.Struct(\n-    # \"<II4x4x\" \"4xIIH2x\" \"I4x4xI\" \"III4x\" \"4xIII\" \"I\"\n-    \"4I\"\n-    \"3I2H\"\n-    \"4I\"\n-    \"4I\"\n-    \"4I\"\n-    \"4I\"\n-)\n-_ihone_bin_header_size = _iphone_bin_header_struct.size\n-\n-\n-class IphoneBinHeader:\n-    def __init__(self, data: bytes):\n-        fields = _iphone_bin_header_struct.unpack(data)\n-        for i, val in enumerate(fields):\n-            print(f\"{i}:\\t0x{val:X}\")\n-        print(data)\n-        print(data.hex())\n-        print(fields)\n-        # self.maybe_crc_1, _, self.maybe_rom_end, = fields[:3]\n-        # self.patchram_code, self.binary_offset, _, self.maybe_ram_size = fields[3:7]\n-        # self.move_patches, self.end_of_last_patch_source, _, = fields[7:10]\n-        # self.maybe_something, self.brcm_cfg, self.brcm_cfgS, _ = fields[10:14]\n-        #\n-\n-    def __str__(self):\n-        return \"\"\n-        # return \"\\n\".join(\n-        #     (\n-        #         f\"Rom end: 0x{self.maybe_rom_end:X}\",\n-        #         f\"Patchram Code: 0x{self.patchram_code:X}\",\n-        #         f\"Binary Offset: 0x{self.binary_offset:X}\",\n-        #         f\"Maybe Ram size: 0x{self.maybe_ram_size:X}\",\n-        #     )\n-        # )\n",
        "source_code_with_indent": "    yield from parse_symdef_flag(meta)\n\n\n<DED>class HCD_TYPES(IntEnum):\n    <IND>HCI_CMD = 1\n    ACL_DATA = 2\n    SCO_DATA = 3\n    HCI_EVENT = 4\n    BCM_DBG = 7  # vendor specific: broadcom\n\n\n<DED>class EOF(Exception):\n    <IND>pass\n\n\n<DED>def _read_raise_eof(stream, size):\n    <IND>assert size > 0\n    data = stream.read(size)\n    if len(data) < size:\n        <IND>raise EOF\n    <DED>return data\n\n\n<DED>_hci_cmd_header_struct = struct.Struct(\"<HB\")\n_hci_cmd_header_size = _hci_cmd_header_struct.size\n_hci_cmd_write_ram_opcode = 0xFC4C\n\n\nclass HCI_CMD:\n    <IND>def __init__(self, header: bytes):\n        <IND>self.opcode, self.plen = _hci_cmd_header_struct.unpack(header)\n        self.raw_payload = b\"\"\n        self.payload = None\n\n    <DED>def handle_payload(self):\n        <IND>if self.opcode == _hci_cmd_write_ram_opcode:\n            <IND>self.payload = parse_tlv_list(self.raw_payload, self.plen)\n\n    <DED><DED>def __str__(self):\n        <IND>if self.payload is None:\n            <IND>return f\"{HCI_CMD_STR[self.opcode]}\\t{self.plen}\\t{self.raw_payload.hex()}\"\n        <DED>else:\n            <IND>return f\"{HCI_CMD_STR[self.opcode]}\\t{self.plen}\\t{self.payload}\"\n\n\n<DED><DED><DED>_rompatch_struct = struct.Struct(\"<BII4s2x4s\")\n_rompatch_size = _rompatch_struct.size\n\n\n@dataclass\nclass RomPatch:\n    <IND>slot: int\n    target_address: int\n    value: bytes\n    unknown: bytes\n\n    def __str__(self):\n        <IND>return f\"Rom Patch[{self.slot}] @0x{self.target_address:X} '{self.value.hex()}'\"\n\n    <DED>@classmethod\n    def from_bytes(cls, data: bytes):\n        <IND>return cls(*_rompatch_struct.unpack(data))\n\n\n<DED><DED>_rampatch_struct = struct.Struct(\"<I\")\n_rampatch_size = _rampatch_struct.size\n\n\n@dataclass\nclass RamPatch:\n    <IND>target_address: int\n    value: bytes\n\n    @classmethod\n    def from_bytes(cls, data: bytes):\n        <IND>target_address = _rampatch_struct.unpack(data[:_rampatch_size])\n        value = data[_rampatch_size:]\n        return cls(target_address, value)\n\n    <DED>def __str__(self):\n        <IND>return f\"Ram Patch @0x{self.target_address:X} '{self.value.hex()}'\"\n\n\n<DED><DED>def parse_tlv_list(data: bytes, plen: int) -> List[\"TLV\"]:\n    <IND>tlv_list = []\n    data_len = plen - 4\n    assert len(data) == plen\n    addr = struct.unpack(\"<I\", data[:4])[0]\n    print(f\"0x{addr:X}\")\n    offset = 4\n    while data_len >= _tlv_header_size:\n        <IND>tlv = TLV(data[offset : offset + _tlv_header_size])\n        print(tlv.plen, data_len, _tlv_header_size)\n        offset += _tlv_header_size\n        data_len -= _tlv_header_size\n        if data_len < tlv.plen:\n            <IND>break\n            raise Exception(\"Firmware is corrupted\")\n        <DED>tlv.raw_payload = data[offset : offset + tlv.plen]\n        if tlv.tlv_type == TLV_TYPES.PatchRom32b:\n            <IND>tlv.payload = RomPatch.from_bytes(tlv.raw_payload)\n        <DED>elif tlv.tlv_type == TLV_TYPES.PatchRam:\n            <IND>tlv.payload = RamPatch.from_bytes(tlv.raw_payload)\n        <DED>data_len -= tlv.plen\n        offset += tlv.plen\n        tlv_list.append(tlv)\n    <DED>if tlv_list:\n        <IND>return tlv_list\n    <DED>else:\n        <IND>return None\n\n\n<DED><DED>_tlv_header_struct = struct.Struct(\"<BH\")\n_tlv_header_size = _tlv_header_struct.size\n\n\nclass TLV:\n    <IND>def __init__(self, header: bytes):\n        <IND>self.tlv_type, self.plen = _tlv_header_struct.unpack(header)\n        try:\n            <IND>self.tlv_type = TLV_TYPES(self.tlv_type)\n        <DED>except ValueError:\n            <IND>pass\n        <DED>self.raw_payload = b\"\"\n        self.payload = None\n\n    <DED>def __str__(self):\n        <IND>if self.payload is None:\n            <IND>return f\"TLV {self.tlv_type}\\t{self.plen}\\t{self.raw_payload.hex()}\"\n        <DED>else:\n            <IND>return f\"TLV {self.tlv_type}\\t{self.plen}\\t{self.payload}\"\n\n\n<DED><DED><DED>class TLV_TYPES(IntEnum):\n    <IND>Reboot = 0x02\n    PatchRom32b = 0x08\n    PatchRam = 0x0A\n    SetDefaultBTDAddr = 0x40\n    SetLocalDevName = 0x41\n    EndTLVList = 0xFE\n\n\n<DED>HCI_CMD_STR = {\n    0x0401: \"COMND Inquiry\",\n    0x0402: \"COMND Inquiry_Cancel\",\n    0x0403: \"COMND Periodic_Inquiry_Mode\",\n    0x0404: \"COMND Exit_Periodic_Inquiry_Mode\",\n    0x0405: \"COMND Create_Connection\",\n    0x0406: \"COMND Disconnect\",\n    0x0408: \"COMND Create_Connection_Cancel\",\n    0x0409: \"COMND Accept_Connection_Request\",\n    0x040A: \"COMND Reject_Connection_Request\",\n    0x040B: \"COMND Link_Key_Request_Reply\",\n    0x040C: \"COMND Link_Key_Request_Negative_Reply\",\n    0x040D: \"COMND PIN_Code_Request_Reply\",\n    0x040E: \"COMND PIN_Code_Request_Negative_Reply\",\n    0x040F: \"COMND Change_Connection_Packet_Type\",\n    0x0411: \"COMND Authentication_Requested\",\n    0x0413: \"COMND Set_Connection_Encryption \",\n    0x0415: \"COMND Change_Connection_Link_Key\",\n    0x0417: \"COMND Master_Link_Key\",\n    0x0419: \"COMND Remote_Name_Request\",\n    0x041A: \"COMND Remote_Name_Request_Cancel\",\n    0x041B: \"COMND Read_Remote_Supported_Features\",\n    0x041C: \"COMND Read_Remote_Extended_Features\",\n    0x041D: \"COMND Read_Remote_Version_Information\",\n    0x041F: \"COMND Read_Clock_Offset\",\n    0x0420: \"COMND Read_LMP_Handle\",\n    0x0428: \"COMND Setup_Synchronous_Connection\",\n    0x0429: \"COMND Accept_Synchronous_Connection_Request\",\n    0x042A: \"COMND Reject_Synchronous_Connection_Request\",\n    0x042B: \"COMND IO_Capability_Request_Reply\",\n    0x042C: \"COMND User_Confirmation_Request_Reply\",\n    0x042D: \"COMND User_Confirmation_Request_Negative_Reply\",\n    0x042E: \"COMND User_Passkey_Request_Reply\",\n    0x042F: \"COMND User_Passkey_Request_Negative_Reply\",\n    0x0430: \"COMND Remote_OOB_Data_Request_Reply\",\n    0x0433: \"COMND Remote_OOB_Data_Request_Negative_Reply\",\n    0x0434: \"COMND IO_Capability_Request_Negative_Reply\",\n    0x0435: \"COMND Create_Physical_Link\",\n    0x0436: \"COMND Accept_Physical_Link\",\n    0x0437: \"COMND Disconnect_Physical_Link\",\n    0x0438: \"COMND Create_Logical_Link\",\n    0x0439: \"COMND Accept_Logical_Link\",\n    0x043A: \"COMND Disconnect_Logical_Link\",\n    0x043B: \"COMND Logical_Link_Cancel\",\n    0x043C: \"COMND Flow_Spec_Modify\",\n    0x043D: \"COMND Enhanced_Setup_Synchronous_Connection\",\n    0x043E: \"COMND Enhanced_Accept_Synchronous_Connection_Request\",\n    0x043F: \"COMND Truncated_Page\",\n    0x0440: \"COMND Truncated_Page_Cancel\",\n    0x0441: \"COMND Set_Connectionless_Slave_Broadcast\",\n    0x0442: \"COMND Set_Connectionless_Slave_Broadcast_Broadcast_Receive\",\n    0x0443: \"COMND Start_Synchronization_Train\",\n    0x0444: \"COMND Receive_Synchronization_Train\",\n    0x0445: \"COMND Remote_OOB_Extended_Data_Request_Reply\",\n    0x0801: \"COMND Hold_Mode\",\n    0x0803: \"COMND Sniff_Mode\",\n    0x0804: \"COMND Exit_Sniff_Mode\",\n    0x0805: \"COMND Park_State\",\n    0x0806: \"COMND Exit_Park_State\",\n    0x0807: \"COMND QoS_Setup\",\n    0x0809: \"COMND Role_Discovery\",\n    0x080B: \"COMND Switch_Role\",\n    0x080C: \"COMND Read_Link_Policy_Settings\",\n    0x080D: \"COMND Write_Link_Policy_Settings\",\n    0x080E: \"COMND Read_Default_Link_Policy_Settings\",\n    0x080F: \"COMND Write_Default_Link_Policy_Settings\",\n    0x0810: \"COMND Flow_Specification\",\n    0x0811: \"COMND Sniff_Subrating\",\n    0x0C01: \"COMND Set_Event_Mask\",\n    0x0C03: \"COMND Reset\",\n    0x0C05: \"COMND Set_Event_Filter\",\n    0x0C08: \"COMND Flush\",\n    0x0C09: \"COMND Read_PIN_Type\",\n    0x0C0A: \"COMND Write_PIN_Type\",\n    0x0C0B: \"COMND Create_New_Unit_Key\",\n    0x0C0D: \"COMND Read_Stored_Link_Key\",\n    0x0C11: \"COMND Write_Stored_Link_Key\",\n    0x0C12: \"COMND Delete_Stored_Link_Key\",\n    0x0C13: \"COMND Write_Local_Name\",\n    0x0C14: \"COMND Read_Local_Name\",\n    0x0C15: \"COMND Read_Connection_Accept_Timeout\",\n    0x0C16: \"COMND Write_Connection_Accept_Timeout\",\n    0x0C17: \"COMND Read_Page_Timeout\",\n    0x0C18: \"COMND Write_Page_Timeout\",\n    0x0C19: \"COMND Read_Scan_Enable\",\n    0x0C1A: \"COMND Write_Scan_Enable\",\n    0x0C1B: \"COMND Read_Page_Scan_Activity\",\n    0x0C1C: \"COMND Write_Page_Scan_Activity\",\n    0x0C1D: \"COMND Read_Inquiry_Scan_Activity\",\n    0x0C1E: \"COMND Write_Inquiry_Scan_Activity\",\n    0x0C1F: \"COMND Read_Authentication_Enable\",\n    0x0C20: \"COMND Write_Authentication_Enable\",\n    0x0C23: \"COMND Read_Class_of_Device\",\n    0x0C24: \"COMND Write_Class_of_Device\",\n    0x0C25: \"COMND Read_Voice_Setting\",\n    0x0C26: \"COMND Write_Voice_Setting\",\n    0x0C27: \"COMND Read_Automatic_Flush_Timeout\",\n    0x0C28: \"COMND Write_Automatic_Flush_Timeout\",\n    0x0C29: \"COMND Read_Num_Broadcast_Retransmissions\",\n    0x0C30: \"COMND Write_Num_Broadcast_Retransmissions\",\n    0x0C2B: \"COMND Read_Hold_Mode_Activity\",\n    0x0C2C: \"COMND Write_Hold_Mode_Activity\",\n    0x0C2D: \"COMND Read_Transmit_Power_Level\",\n    0x0C2E: \"COMND Read_Synchronous_Flow_Control_Enable\",\n    0x0C2F: \"COMND Write_Synchronous_Flow_Control_Enable\",\n    0x0C31: \"COMND Set_Controller_To_Host_Flow_Control\",\n    0x0C33: \"COMND Host_Buffer_Size\",\n    0x0C35: \"COMND Host_Number_Of_Completed_Packets\",\n    0x0C36: \"COMND Read_Link_Supervision_Timeout\",\n    0x0C37: \"COMND Write_Link_Supervision_Timeout\",\n    0x0C38: \"COMND Read_Number_Of_Supported_IAC\",\n    0x0C39: \"COMND Read_Current_IAC_LAP\",\n    0x0C3A: \"COMND Write_Current_IAC_LAP\",\n    0x0C3F: \"COMND Set_AFH_Host_Channel_Classification\",\n    0x0C42: \"COMND Read_Inquiry_Scan_Type\",\n    0x0C43: \"COMND Write_Inquiry_Scan_Type\",\n    0x0C44: \"COMND Read_Inquiry_Mode\",\n    0x0C45: \"COMND Write_Inquiry_Mode\",\n    0x0C46: \"COMND Read_Page_Scan_Type\",\n    0x0C47: \"COMND Write_Page_Scan_Type\",\n    0x0C48: \"COMND Read_AFH_Channel_Assessment_Mode\",\n    0x0C49: \"COMND Write_AFH_Channel_Assessment_Mode\",\n    0x0C51: \"COMND Read_Extended_Inquiry_Response\",\n    0x0C52: \"COMND Write_Extended_Inquiry_Response\",\n    0x0C53: \"COMND Refresh_Encryption_Key\",\n    0x0C55: \"COMND Read_Simple_Pairing_Mode\",\n    0x0C56: \"COMND Write_Simple_Pairing_Mode\",\n    0x0C57: \"COMND Read_Local_OOB_Data\",\n    0x0C58: \"COMND Read_Inquiry_Response_Transmit_Power_Level\",\n    0x0C59: \"COMND Write_Inquiry_Response_Transmit_Power_Level\",\n    0x0C60: \"COMND Send_Key_Press_Notification\",\n    0x0C5A: \"COMND Read_Default_Erroneous_Data_Reporting\",\n    0x0C5B: \"COMND Write_Default_Erroneous_Data_Reporting\",\n    0x0C5F: \"COMND Enhanced_Flush\",\n    0x0C61: \"COMND Read_Logical_Link_Accept_Timeout\",\n    0x0C62: \"COMND Write_Logical_Link_Accept_Timeout\",\n    0x0C63: \"COMND Set_Event_Mask_Page_2\",\n    0x0C64: \"COMND Read_Location_Data\",\n    0x0C65: \"COMND Write_Location_Data\",\n    0x0C66: \"COMND Read_Flow_Control_Mode\",\n    0x0C67: \"COMND Write_Flow_Control_Mode\",\n    0x0C68: \"COMND Read_Enhance_Transmit_Power_Level\",\n    0x0C69: \"COMND Read_Best_Effort_Flush_Timeout\",\n    0x0C6A: \"COMND Write_Best_Effort_Flush_Timeout\",\n    0x0C6B: \"COMND Short_Range_Mode\",\n    0x0C6C: \"COMND Read_LE_Host_Support\",\n    0x0C6D: \"COMND Write_LE_Host_Support\",\n    0x0C6E: \"COMND Set_MWS_Channel_Parameters\",\n    0x0C6F: \"COMND Set_External_Frame_Configuration\",\n    0x0C70: \"COMND Set_MWS_Signaling\",\n    0x0C71: \"COMND Set_MWS_Transport_Layer\",\n    0x0C72: \"COMND Set_MWS_Scan_Frequency_Table\",\n    0x0C73: \"COMND Set_MWS_PATTERN_Configuration\",\n    0x0C74: \"COMND Set_Reserved_LT_ADDR\",\n    0x0C75: \"COMND Delete_Reserved_LT_ADDR\",\n    0x0C76: \"COMND Set_Connectionless_Slave_Broadcast_Data\",\n    0x0C77: \"COMND Read_Synchronization_Train_Parameters\",\n    0x0C78: \"COMND Write_Synchronization_Train_Parameters\",\n    0x0C79: \"COMND Read_Secure_Connections_Host_Support\",\n    0x0C7A: \"COMND Write_Secure_Connections_Host_Support\",\n    0x0C7B: \"COMND Read_Authenticated_Payload_Timeout\",\n    0x0C7C: \"COMND Write_Authenticated_Payload_Timeout\",\n    0x0C7D: \"COMND Read_Local_OOB_Extended_Data\",\n    0x0C7E: \"COMND Read_Extended_Page_Timeout\",\n    0x0C7F: \"COMND Write_Extended_Page_Timeout\",\n    0x0C80: \"COMND Read_Extended_Inquiry_Length\",\n    0x0C81: \"COMND Write_Extended_Inquiry_Length\",\n    0x1001: \"COMND Read_Local_Version_Information\",\n    0x1002: \"COMND Read_Local_Supported_Commands\",\n    0x1003: \"COMND Read_Local_Supported_Features\",\n    0x1004: \"COMND Read_Local_Extended_Features\",\n    0x1005: \"COMND Read_Buffer_Size\",\n    0x1009: \"COMND Read_BD_ADDR\",\n    0x100A: \"COMND Read_Data_Block_Size\",\n    0x100B: \"COMND Read_Local_Supported_Codecs\",\n    0x1401: \"COMND Read_Failed_Contact_Counter\",\n    0x1402: \"COMND Reset_Failed_Contact_Counter\",\n    0x1403: \"COMND Read_Link_Quality\",\n    0x1405: \"COMND Read_RSSI\",\n    0x1406: \"COMND Read_AFH_Channel_Map\",\n    0x1407: \"COMND Read_Clock\",\n    0x1408: \"COMND Encryption_Key_Size\",\n    0x1409: \"COMND Read_Local_AMP_Info\",\n    0x140A: \"COMND Read_Local_AMP_ASSOC\",\n    0x140B: \"COMND Write_Remote_AMP_ASSOC\",\n    0x140C: \"COMND Get_MWS_Transport_Layer_Configuration\",\n    0x140D: \"COMND Set_Triggered_Clock_Capture\",\n    0x1801: \"COMND Read_Loopback_Mode\",\n    0x1802: \"COMND Write_Loopback_Mode\",\n    0x1803: \"COMND Enable_Device_Under_Test_Mode\",\n    0x1804: \"COMND Write_Simple_Pairing_Debug_Mode\",\n    0x1807: \"COMND Enable_AMP_Receiver_Reports\",\n    0x1808: \"COMND AMP_Test_End\",\n    0x1809: \"COMND AMP_Test\",\n    0x180A: \"COMND Write_Secure_Connection_Test_Mode\",\n    0x2001: \"COMND LE_Set_Event_Mask\",\n    0x2002: \"COMND LE_Read_Buffer_Size\",\n    0x2003: \"COMND LE_Read_Local_Supported_Features\",\n    0x2005: \"COMND LE_Set_Random_Address\",\n    0x2006: \"COMND LE_Set_Advertising_Parameters\",\n    0x2007: \"COMND LE_Read_Advertising_Channel_Tx_Power\",\n    0x2008: \"COMND LE_Set_Advertising_Data\",\n    0x2009: \"COMND LE_Set_Scan_Responce_Data\",\n    0x200A: \"COMND LE_Set_Advertise_Enable\",\n    0x200B: \"COMND LE_Set_Set_Scan_Parameters\",\n    0x200C: \"COMND LE_Set_Scan_Enable\",\n    0x200D: \"COMND LE_Create_Connection\",\n    0x200E: \"COMND LE_Create_Connection_Cancel \",\n    0x200F: \"COMND LE_Read_White_List_Size\",\n    0x2010: \"COMND LE_Clear_White_List\",\n    0x2011: \"COMND LE_Add_Device_To_White_List\",\n    0x2012: \"COMND LE_RemoveDevice_From_White_List\",\n    0x2013: \"COMND LE_Connection_Update\",\n    0x2014: \"COMND LE_Set_Host_Channel_Classification\",\n    0x2015: \"COMND LE_Read_Channel_Map\",\n    0x2016: \"COMND LE_Read_Remote_Used_Features\",\n    0x2017: \"COMND LE_Encrypt\",\n    0x2018: \"COMND LE_Rand\",\n    0x2019: \"COMND LE_Start_Encryption\",\n    0x201A: \"COMND LE_Long_Term_Key_Request_Reply\",\n    0x201B: \"COMND LE_Long_Term_Key_Request_Negative_Reply\",\n    0x201C: \"COMND LE_Read_Supported_States\",\n    0x201D: \"COMND LE_Receiver_Test\",\n    0x201E: \"COMND LE_Transmitter_Test\",\n    0x201F: \"COMND LE_Test_End\",\n    0x2020: \"COMND LE_Remote_Connection_Parameter_Request_Reply\",\n    0x2021: \"COMND LE_Remote_Connection_Parameter_Request_Negative_Reply\",\n    # Function names extracted from CYW20735 / Packet Logger 9 / bluez source / BCM20703A2 Symbols\n    0xFC00: \"COMND VSC_CustomerExtension\",\n    0xFC01: \"COMND VSC_WriteBdAddr\",\n    0xFC02: \"COMND VSC_DumpSRAM\",\n    0xFC03: \"COMND VSC_ChannelClassConfig\",\n    0xFC04: \"COMND VSC_READ_PAGE_SCAN_REPETITION_MODE\",\n    0xFC05: \"COMND VSC_WRITE_PAGE_SCAN_REPETITION_MODE\",\n    0xFC06: \"COMND VSC_READ_PAGE_RESPONSE_TIMEOUT\",\n    0xFC07: \"COMND VSC_WRITE_PAGE_RESPONSE_TIMEOUT\",\n    0xFC08: \"COMND VSC_BTLinkQualityMode\",  # VSC_READ_NEW_CONNECTION_TIMEOUT\n    0xFC09: \"COMND VSC_WRITE_NEW_CONNECTION_TIMEOUT\",\n    0xFC0A: \"COMND VSC_Super_Peek_Poke\",\n    0xFC0B: \"COMND VSC_WriteLocalSupportedFeatures\",\n    0xFC0C: \"COMND VSC_Super_Duper_Peek_Poke\",\n    0xFC0D: \"COMND VSC_RSSI_HISTORY\",\n    0xFC0E: \"COMND VSC_SetLEDGlobalCtrl\",\n    0xFC0F: \"COMND VSC_FORCE_HOLD_MODE\",\n    0xFC10: \"COMND VSC_Commit_BDAddr\",\n    0xFC12: \"COMND VSC_WriteHoppingChannels\",\n    0xFC13: \"COMND VSC_SleepForeverMode\",\n    0xFC14: \"COMND VSC_SetCarrierFrequencyArm\",\n    0xFC16: \"COMND VSC_SetEncryptionKeySize\",\n    0xFC17: \"COMND VSC_Invalidate_Flash_and_Reboot\",\n    0xFC18: \"COMND VSC_Update_UART_Baud_Rate\",\n    0xFC19: \"COMND VSC_GpioConfigAndWrite\",\n    0xFC1A: \"COMND VSC_GpioRead\",\n    0xFC1B: \"COMND VSC_SetTestModeType\",\n    0xFC1C: \"COMND VSC_WriteScoPcmInterfaceParam\",\n    0xFC1D: \"COMND VSC_ReadScoPcmIntParam\",\n    0xFC1E: \"COMND VSC_WritePcmDataFormatParam\",\n    0xFC1F: \"COMND VSC_ReadPcmDataFormatParam\",\n    0xFC20: \"COMND VSC_WriteComfortNoiseParam\",\n    0xFC22: \"COMND VSC_WriteScoTimeSlot\",\n    0xFC23: \"COMND VSC_ReadScoTimeSlot\",\n    0xFC24: \"COMND VSC_WritePcmLoopbackModed\",\n    0xFC25: \"COMND VSC_ReadPcmLoopbackModed\",\n    0xFC26: \"COMND VSC_SetTransmitPower\",\n    0xFC27: \"COMND VSC_SetSleepMode\",\n    0xFC28: \"COMND VSC_ReadSleepMode\",\n    0xFC29: \"COMND VSC_SleepmodeCommand\",\n    0xFC2A: \"COMND VSC_HandleDelayPeripheralSCOStartup\",\n    0xFC2B: \"COMND VSC_WriteReceiveOnly\",\n    0xFC2D: \"COMND VSC_RfConfigSettings\",\n    0xFC2E: \"COMND VSC_HandleDownload_Minidriver\",\n    0xFC2F: \"COMND VSC_CrystalPpm\",\n    0xFC32: \"COMND VSC_SetAFHBehavior\",\n    0xFC33: \"COMND VSC_ReadBtwSecurityKey\",\n    0xFC34: \"COMND VSC_EnableRadio\",\n    0xFC35: \"COMND VSC_Cosim_Set_Mode\",\n    0xFC36: \"COMND VSC_GetHIDDeviceList\",\n    0xFC37: \"COMND VSC_AddHIDDevice\",\n    0xFC39: \"COMND VSC_RemoveHIDDevice\",\n    0xFC3A: \"COMND VSC_EnableTca\",\n    0xFC3B: \"COMND VSC_EnableUSBHIDEmulation\",\n    0xFC3C: \"COMND VSC_WriteRfProgrammingTable\",\n    0xFC40: \"COMND VSC_ReadCollaborationMode\",\n    0xFC41: \"COMND VSC_WriteCollaborationMode\",\n    0xFC43: \"COMND VSC_WriteRFAttenuationTable\",\n    0xFC44: \"COMND VSC_ReadUARTClockSetting\",\n    0xFC45: \"COMND VSC_WriteUARTClockSetting\",\n    0xFC46: \"COMND VSC_SetSleepClockAccuratyAndSettlingTime\",\n    0xFC47: \"COMND VSC_ConfigureSleepMode\",\n    0xFC48: \"COMND VSC_ReadRawRssi\",\n    0xFC49: \"COMND VSC_ChannelClassConfig\",\n    0xFC4C: \"COMND VSC_Write_RAM\",\n    0xFC4D: \"COMND VSC_Read_RAM\",\n    0xFC4E: \"COMND VSC_Launch_RAM\",\n    0xFC4F: \"COMND VSC_InstallPatches\",\n    0xFC51: \"COMND VSC_RadioTxTest\",\n    0xFC52: \"COMND VSC_RadioRxTest\",\n    0xFC54: \"COMND VSC_DUT_LoopbackTest\",\n    0xFC56: \"COMND VSC_EnhancedRadioRxTest\",\n    0xFC57: \"COMND VSC_WriteHighPriorityConnection\",\n    0xFC58: \"COMND VSC_SendLmpPdu\",\n    0xFC59: \"COMND VSC_PortInformationEnable\",\n    0xFC5A: \"COMND VSC_ReadBtPortPidVid\",\n    0xFC5B: \"COMND VSC_Read2MBitFlashCrc\",\n    0xFC5C: \"COMND VSC_FactoryCommitProductionTestFlag\",\n    0xFC5D: \"COMND VSC_ReadProductionTestFlag\",\n    0xFC5E: \"COMND VSC_WritePcmMuteParam\",\n    0xFC5F: \"COMND VSC_ReadPcmMuteParam\",\n    0xFC61: \"COMND VSC_WritePcmPins\",\n    0xFC62: \"COMND VSC_ReadPcmPins\",\n    0xFC6D: \"COMND VSC_WriteI2sPcmInterface\",\n    0xFC6E: \"COMND VSC_ReadControllerFeatures\",\n    0xFC6F: \"COMND VSC_WriteComfortNoiseParam\",\n    0xFC71: \"COMND VSC_WriteRamCompressed\",  # maybe .hcd only\n    0xFC78: \"COMND VSC_CALCULATE_CRC\",\n    0xFC79: \"COMND VSC_ReadVerboseConfigVersionInfo\",\n    0xFC7A: \"COMND VSC_TRANSPORT_SUSPEND\",\n    0xFC7B: \"COMND VSC_TRANSPORT_RESUME\",\n    0xFC7C: \"COMND VSC_BasebandFlowControlOverride\",\n    0xFC7D: \"COMND VSC_WriteClass15PowerTable\",\n    0xFC7E: \"COMND VSC_EnableWbs\",\n    0xFC7F: \"COMND VSC_WriteVadMode\",\n    0xFC80: \"COMND VSC_ReadVadMode\",\n    0xFC81: \"COMND VSC_WriteEcsiConfig\",\n    0xFC82: \"COMND VSC_FM_TX_COMMAND\",\n    0xFC83: \"COMND VSC_WriteDynamicScoRoutingChange\",\n    0xFC84: \"COMND VSC_READ_HID_BIT_ERROR_RATE\",\n    0xFC85: \"COMND VSC_EnableHciRemoteTest\",\n    0xFC8A: \"COMND VSC_CALIBRATE_BANDGAP\",\n    0xFC8B: \"COMND VSC_UipcOverHci\",  # Write Coexistence Tri State Enabled\n    0xFC8C: \"COMND VSC_READ_ADC_CHANNEL\",\n    0xFC90: \"COMND VSC_CoexBandwidthStatistics\",\n    0xFC91: \"COMND VSC_ReadPmuConfigFlags\",\n    0xFC92: \"COMND VSC_WritePmuConfigFlags\",\n    0xFC93: \"COMND VSC_ARUBA_CTRL_MAIN_STATUS_MON\",\n    0xFC94: \"COMND VSC_CONTROL_AFH_ACL_SETUP\",\n    0xFC95: \"COMND VSC_ARUBA_READ_WRITE_INIT_PARAM\",\n    0xFC96: \"COMND VSC_INTERNAL_CAPACITOR_TUNING\",\n    0xFC97: \"COMND VSC_BFC_DISCONNECT\",\n    0xFC98: \"COMND VSC_BFC_SEND_DATA\",\n    0xFC9A: \"COMND VSC_COEX_WRITE_WIMAX_CONFIGURATION\",\n    0xFC9B: \"COMND VSC_BFC_POLLING_ENABLE\",\n    0xFC9C: \"COMND VSC_BFC_RECONNECTABLE_DEVICE\",\n    0xFC9D: \"COMND VSC_CONDITIONAL_SCAN_CONFIGURATION\",\n    0xFC9E: \"COMND VSC_PacketErrorInjection\",\n    0xFCA0: \"COMND VSC_WriteRfReprogrammingTableMasking\",\n    0xFCA1: \"COMND VSC_BLPM_ENABLE\",\n    0xFCA2: \"COMND VSC_ReadAudioRouteInfo\",\n    0xFCA3: \"COMND VSC_EncapsulatedHciCommand\",\n    0xFCA4: \"COMND VSC_SendEpcLmpMessage\",\n    0xFCA5: \"COMND VSC_TransportStatistics\",\n    0xFCA6: \"COMND VSC_BistPostGetResults\",\n    0xFCAD: \"COMND VSC_CurrentSensorCtrlerConfig\",\n    0xFCAE: \"COMND VSC_Pcm2Setup\",\n    0xFCAF: \"COMND VSC_ReadBootCrystalStatus\",\n    0xFCB2: \"COMND VSC_SniffSubratingMaximumLocalLatency\",\n    0xFCB4: \"COMND VSC_SET_PLC_ON_OFF\",\n    0xFCB5: \"COMND VSC_BFC_Suspend\",\n    0xFCB6: \"COMND VSC_BFC_Resume\",\n    0xFCB7: \"COMND VSC_3D_TV2TV_SYNC_AND_REPORTING\",\n    0xFCB8: \"COMND VSC_WRITE_OTP\",\n    0xFCB9: \"COMND VSC_READ_OTP\",\n    0xFCBA: \"COMND VSC_le_read_random_address\",\n    0xFCBB: \"COMND VSC_le_hw_setup\",\n    0xFCBC: \"COMND VSC_LE_DVT_TXRXTEST\",\n    0xFCBD: \"COMND VSC_LE_DVT_TESTDATAPKT\",\n    0xFCBE: \"COMND VSC_LE_DVT_LOG_SETUP\",\n    0xFCBF: \"COMND VSC_LE_DVT_ERRORINJECT_SCHEME\",\n    0xFCC0: \"COMND VSC_LE_DVT_TIMING_SCHEME\",\n    0xFCC1: \"COMND VSC_LeScanRssiThresholdSetup\",\n    0xFCC2: \"COMND VSC_BFCSetParameters\",\n    0xFCC3: \"COMND VSC_BFCReadParameters\",\n    0xFCC4: \"COMND VSC_TurnOffDynamicPowerControl\",\n    0xFCC5: \"COMND VSC_IncreaseDecreasePowerLevel\",\n    0xFCC6: \"COMND VSC_ReadRawRssiValue\",\n    0xFCC7: \"COMND VSC_SetProximityTable\",\n    0xFCC8: \"COMND VSC_SetProximityTrigger\",\n    0xFCCD: \"COMND VSC_SET_SUB_SNIFF_INTERVAL\",\n    0xFCCE: \"COMND VSC_ENABLE_REPEATER_FUNCTIONALITY\",\n    0xFCCF: \"COMND VSC_UPDATE_CONFIG_ITEM\",\n    0xFCD0: \"COMND VSC_BFCCreateConnection\",\n    0xFCD1: \"COMND VSC_WBS_BEC_PARAMS\",\n    0xFCD2: \"COMND VSC_ReadGoldenRange\",\n    0xFCD3: \"COMND VSC_INITIATE_MULTICAST_BEACON_LOCK\",\n    0xFCD4: \"COMND VSC_TERMINATE_MULTICAST\",\n    0xFCD7: \"COMND VSC_ENABLE_H4IBSS\",\n    0xFCD8: \"COMND VSC_BLUEBRIDGE_SPI_NEGOTIATION_REQUEST\",\n    0xFCD9: \"COMND VSC_BLUEBRIDGE_SPI_SLEEPTHRESHOLD_REQUEST\",\n    0xFCDA: \"COMND VSC_ACCESSORY_PROTOCOL_COMMAND_GROUP\",\n    0xFCDB: \"COMND VSC_HandleWriteOtp_AuxData\",\n    0xFCDC: \"COMND VSC_InitMcastIndPoll\",\n    0xFCDD: \"COMND VSC_EnterMcastIndPoll\",\n    0xFCDE: \"COMND VSC_DisconnectMcastIndPoll\",\n    0xFCE0: \"COMND VSC_ExtendedInquiryHandshake\",\n    0xFCE1: \"COMND VSC_UARTBRIDGE_ROUTE_HCI_CMD_TO_UART_BRIDGE\",\n    0xFCE2: \"COMND VSC_Olympic\",\n    0xFCE4: \"COMND VSC_CONFIG_HID_LHL_GPIO\",\n    0xFCE5: \"COMND VSC_READ_HID_LHL_GPIO\",\n    0xFCE6: \"COMND VSC_LeTxTest\",\n    0xFCE7: \"COMND VSC_UARTBRIDGE_SET_UART_BRIDGE_PARAMETER\",\n    0xFCE8: \"COMND VSC_BIST_BER\",\n    0xFCE9: \"COMND VSC_HandleLeMetaVsc1\",\n    0xFCEA: \"COMND VSC_BFC_SET_PRIORITY\",\n    0xFCEB: \"COMND VSC_BFC_READ_PRIORITY\",\n    0xFCEC: \"COMND VSC_ANT_COMMAND\",\n    0xFCED: \"COMND VSC_LinkQualityStats\",\n    0xFCEE: \"COMND VSC_READ_NATIVE_CLOCK\",\n    0xFCEF: \"COMND VSC_BfcSetWakeupFlags\",\n    0xFCF2: \"COMND VSC_START_DVT_TINYDRIVER\",\n    0xFCF4: \"COMND VSC_SET_3DTV_DUAL_MODE_VIEW\",\n    0xFCF5: \"COMND VSC_BFCReadRemoeBPCSFeatures\",\n    0xFCF7: \"COMND VSC_IgnoreUSBReset\",\n    0xFCF8: \"COMND VSC_SNIFF_RECONNECT_TRAIN\",\n    0xFCF9: \"COMND VSC_AudioIPCommand\",\n    0xFCFA: \"COMND VSC_BFCWriteScanEnable\",\n    0xFCFE: \"COMND VSC_ReadLocalFirmwareInfo\",\n    0xFCFF: \"COMND VSC_RSSIMeasurements\",\n    0xFD01: \"COMND VSC_BFCReadScanEnable\",\n    0xFD02: \"COMND VSC_EnableWbsModified\",\n    0xFD03: \"COMND VSC_SetVsEventMask\",\n    0xFD04: \"COMND VSC_BFCIsConnectionTBFCSuspended\",\n    0xFD05: \"COMND VSC_SetUSBAutoResume\",\n    0xFD06: \"COMND VSC_SetDirectionFindingParameters\",\n    0xFD08: \"COMND VSC_ChangeLNAGainCoexECI\",\n    0xFD0C: \"COMND VSC_LTELinkQualityMode\",  # LTECoexLinkQualityMetric\n    0xFD0D: \"COMND VSC_LTETriggerWCI2Message\",\n    0xFD0E: \"COMND VSC_LTEEnableWCI2Messages\",\n    0xFD0F: \"COMND VSC_LTEEnableWCI2LoopbackTesting\",\n    0xFD10: \"COMND VSC_ScoDiagStat\",\n    0xFD11: \"COMND VSC_SetStreamingConnectionlessBroadcast\",\n    0xFD12: \"COMND VSC_ReceiveStreamingConnectonlessBroadcast\",\n    0xFD13: \"COMND VSC_WriteConnectionlessBroadcastStreamingData\",\n    0xFD14: \"COMND VSC_FlushStreamingConnectionlessBroadcastData\",\n    0xFD15: \"COMND VSC_FactoryCalSetTxPower\",\n    0xFD16: \"COMND VSC_FactoryCalTrimTxPower\",\n    0xFD17: \"COMND VSC_FactoryCalReadTempSettings\",\n    0xFD18: \"COMND VSC_FactoryCalUpdateTableSettings\",\n    0xFD1A: \"COMND VSC_WriteA2DPConnection\",\n    0xFD1B: \"COMND VSC_Factory_Cal_Read_Table_Settings\",\n    0xFD1C: \"COMND VSC_DBFW\",\n    0xFD1D: \"COMND VSC_FactoryCalibrationRxRSSITest\",\n    0xFD1E: \"COMND VSC_FactoryCalibrationRxRSSITest\",\n    0xFD1F: \"COMND VSC_LTECoexTimingAdvance\",\n    0xFD23: \"COMND VSC_HandleLeMetaVsc2\",\n    0xFD28: \"COMND VSC_WriteLocalSupportedExtendedFeatures\",\n    0xFD29: \"COMND VSC_PiconetClockAdjustment\",\n    0xFD2A: \"COMND VSC_ReadRetransmissionStatus\",\n    0xFD2F: \"COMND VSC_SetTransmitPowerRange\",\n    0xFD33: \"COMND VSC_PageInquiryTxSuppression\",\n    0xFD35: \"COMND VSC_RandomizeNativeClock\",\n    0xFD36: \"COMND VSC_StoreFactoryCalibrationData\",\n    0xFD3B: \"COMND VSC_ReadSupportedVSCs\",\n    0xFD3C: \"COMND VSC_LEWriteLocalSupportedFeatures\",\n    0xFD3E: \"COMND VSC_LEReadRemoteSupportedBRCMFeatures\",\n    0xFD40: \"COMND VSC_BcsTimeline\",\n    0xFD41: \"COMND VSC_BcsTimelineBroadcastReceive\",\n    0xFD42: \"COMND VSC_ReadDynamicMemoryPoolStatistics\",\n    0xFD43: \"COMND VSC_HandleIop3dtvTesterConfig\",\n    0xFD45: \"COMND VSC_HandleAdcCapture\",\n    0xFD47: \"COMND VSC_LEExtendedDuplicateFilter\",\n    0xFD48: \"COMND VSC_LECreateExtendedAdvertisingInstance\",\n    0xFD49: \"COMND VSC_LERemoveExtendedAdvertisingInstance\",\n    0xFD4A: \"COMND VSC_LESetExtendedAdvertisingParameters\",\n    0xFD4B: \"COMND VSC_LESetExtendedAdvertisingData\",\n    0xFD4C: \"COMND VSC_LESetExtendedScanResponseData\",\n    0xFD4D: \"COMND VSC_LESetExtendedAdvertisingEnable\",\n    0xFD4E: \"COMND VSC_LEUpdateExtendedAdvertisingInstance\",\n    0xFD53: \"COMND VSC_LEGetAndroidVendorCapabilities\",\n    0xFD54: \"COMND VSC_LEMultiAdvtCommand\",\n    0xFD55: \"COMND VSC_LeRPAOffload\",\n    0xFD56: \"COMND VSC_LEBatchScanCommand\",\n    0xFD57: \"COMND VSC_LEBrcmPCF\",\n    0xFD59: \"COMND VSC_GetControllerActivityEnergyInfo\",\n    0xFD5A: \"COMND VSC_ExtendedSetScanParameters\",\n    0xFD5B: \"COMND VSC_Getdebuginfo\",\n    0xFD5C: \"COMND VSC_WriteLocalHostState\",\n    0xFD6E: \"COMND VSC_HandleConfigure_Sleep_Lines\",\n    0xFD71: \"COMND VSC_SetSpecialSniffTransitionEnable\",\n    0xFD73: \"COMND VSC_EnableBTSync\",\n    0xFD79: \"COMND VSC_hciulp_handleBTBLEHighPowerControl\",\n    0xFD7C: \"COMND VSC_HandleCustomerEnableHALinkCommands\",\n    0xFD7D: \"COMND VSC_DWPTestCommands\",\n    0xFD7F: \"COMND VSC_Olympic_LTE_Settings\",\n    0xFD82: \"COMND VSC_WriteLERemotePublicAddress\",\n    0xFD86: \"COMND VSC_1SecondTimerCommands\",\n    0xFD88: \"COMND VSC_ForceWLANChannel\",\n    0xFD8B: \"COMND VSC_SVTConfigSetup\",\n    0xFD8F: \"COMND VSC_HandleCustomerReadHADeltaCommands\",\n    0xFD9A: \"COMND VSC_SetupRSSCommands\",\n    0xFD9C: \"COMND VSC_SetupRSSLocalCommands\",\n    0xFDA1: \"COMND VSC_AudioBufferCommands\",\n    0xFDA4: \"COMND VSC_HealthStatusReport\",\n    0xFDA8: \"COMND VSC_ChangeConnectionPriority\",\n    0xFDAA: \"COMND VSC_SamSetupCommand\",\n    0xFDAB: \"COMND VSC_bthci_cmd_ble_enhancedTransmitterTest_hopping\",\n    0xFDAF: \"COMND VSC_Handle_coex_debug_counters\",\n    0xFDBB: \"COMND VSC_Read_Inquiry_Transmit_Power\",\n    0xFDBE: \"COMND VSC_Enable_PADGC_Override\",\n    0xFDCB: \"COMND VSC_WriteTxPowerAFHMode\",\n    0xFDCD: \"COMND VSC_setMinimumNumberOfUsedChannels\",\n    0xFDCE: \"COMND VSC_HandleBrEdrLinkQualityStats\",\n    0xFF5E: \"COMND VSC_SectorErase\",\n    0xFFCE: \"COMND VSC_Chip_Erase\",\n    0xFFED: \"COMND VSC_EnterDownloadMode\",\n}\n\n# def hci_cmd_parser(bytestream: bytes):\n#     opcode = _read_raise_eof(bytestream, 2)\n#     length = _uint8.unpack(_read_raise_eof(bytestream, 1))[0]\n#     payload = bytestream.read(length)\n#     return \"cmd\"\n#\n#\n# def hci_event_parser(bytestream: bytes):\n#     eventcode = _read_raise_eof(bytestream, 1)\n#     length = _uint8.unpack(_read_raise_eof(bytestream, 1))[0]\n#     payload = bytestream.read(length)\n#     return \"event\"\n#\n#\n# def acl_data_parser(bytestream: bytes):\n#     handle_pb_bc = _read_raise_eof(bytestream, 2)\n#     length = _uint16.unpack(_read_raise_eof(bytestream, 2))[0]\n#     data = bytestream.read(length)\n#     return \"acl\"\n#\n#\n# def sco_data_parser(bytestream: bytes):\n#     handle_status_rfu = _read_raise_eof(bytestream, 2)\n#     length = _uint8.unpack(_read_raise_eof(bytestream, 1))[0]\n#     data = bytestream.read(length)\n#     return \"sco\"\n#\n#\n# _PARSE_MAP = {\n#     HCD_TYPES.HCI_CMD: hci_cmd_parser,\n#     HCD_TYPES.ACL_DATA: acl_data_parser,\n#     HCD_TYPES.SCO_DATA: sco_data_parser,\n#     HCD_TYPES.HCI_EVENT: hci_event_parser,\n#     HCD_TYPES.BCM_DBG: lambda x: \"dbg\",\n# }\n# _uint8 = struct.Struct(\"B\")\n# _uint16 = struct.Struct(\"H\")\n#\n#\n# def hcd_parser(hcd_path: str):\n#     with open(hcd_path, \"rb\") as bytestream:\n#         while True:\n#             type_ = _uint8.unpack(_read_raise_eof(bytestream, 1))[0]\n#             try:\n#                 package = _PARSE_MAP[type_](bytestream)\n#                 if package == \"dbg\":\n#                     print(\"hello broadcom!\")\n#                     break\n#                 if package is not None:\n#                     yield package\n#             except EOF:\n#                 print(\"I am not doing this right!\")\n#                 raise EOF()\ndef hcd_parser(hcd_path: str):\n    <IND>with open(hcd_path, \"rb\") as bytestream:\n        <IND>while True:\n            <IND>cmd = HCI_CMD(_read_raise_eof(bytestream, _hci_cmd_header_size))\n            cmd.raw_payload = _read_raise_eof(bytestream, cmd.plen)\n            cmd.handle_payload()\n            print(cmd)\n\n\n<DED><DED><DED>_iphone_bin_header_struct = struct.Struct(\n    # \"<II4x4x\" \"4xIIH2x\" \"I4x4xI\" \"III4x\" \"4xIII\" \"I\"\n    \"4I\"\n    \"3I2H\"\n    \"4I\"\n    \"4I\"\n    \"4I\"\n    \"4I\"\n)\n_ihone_bin_header_size = _iphone_bin_header_struct.size\n\n\nclass IphoneBinHeader:\n    <IND>def __init__(self, data: bytes):\n        <IND>fields = _iphone_bin_header_struct.unpack(data)\n        for i, val in enumerate(fields):\n            <IND>print(f\"{i}:\\t0x{val:X}\")\n        <DED>print(data)\n        print(data.hex())\n        print(fields)\n        # self.maybe_crc_1, _, self.maybe_rom_end, = fields[:3]\n        # self.patchram_code, self.binary_offset, _, self.maybe_ram_size = fields[3:7]\n        # self.move_patches, self.end_of_last_patch_source, _, = fields[7:10]\n        # self.maybe_something, self.brcm_cfg, self.brcm_cfgS, _ = fields[10:14]\n        #\n\n    <DED>def __str__(self):\n        <IND>return \"\"\n        # return \"\\n\".join(\n        #     (\n        #         f\"Rom end: 0x{self.maybe_rom_end:X}\",\n        #         f\"Patchram Code: 0x{self.patchram_code:X}\",\n        #         f\"Binary Offset: 0x{self.binary_offset:X}\",\n        #         f\"Maybe Ram size: 0x{self.maybe_ram_size:X}\",\n        #     )\n        # )\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    yield from parse_symdef_flag(meta)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "seemoo-lab/polypyus",
    "commit": "aa39d938711cd8d61b54c4d1e3544852051764d8",
    "filename": "polypyus/cli.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/seemoo-lab-polypyus/polypyus/cli.py",
    "file_hunks_size": 12,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "polypyus/cli.py:66:8 Incompatible return type [7]: Expected `Graph` but got `None`.",
    "message": " Expected `Graph` but got `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 66,
    "warning_line": "        return",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from pathlib import Path\nfrom typing import Callable, List\n\n",
        "source_code_len": 60,
        "target_code": "from pathlib import Path\nfrom typing import Callable, List, Optional\n\n",
        "target_code_len": 70,
        "diff_format": "@@ -9,3 +9,3 @@\n from pathlib import Path\n-from typing import Callable, List\n+from typing import Callable, List, Optional\n \n",
        "source_code_with_indent": "from pathlib import Path\nfrom typing import Callable, List\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from pathlib import Path\nfrom typing import Callable, List, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def prepare_graph(\n    history: List[Path], annotation: List[Path], targets: List[Path], min_size: int\n) -> Graph:\n\n    logger.debug(\"Importing history\")\n    for hist, annotation in zip(history, annotation):\n        bin_ = get_or_create_binary(hist)\n        info = get_or_create_annotation(bin_, annotation)\n        logger.debug(f\"Imported history {bin_.serialize()}\")\n",
        "source_code_len": 369,
        "target_code": "def prepare_graph(\n    histories: List[Path], annotations: List[Path], min_size: int, max_rel_fuzz: float\n) -> Optional[Graph]:\n\n    logger.debug(\"Importing history\")\n    for history, annotation in zip(histories, annotations):\n        bin_ = get_or_create_binary(history)\n        get_or_create_annotation(bin_, annotation)\n        logger.debug(f\"Imported history {bin_.serialize()}\")\n",
        "target_code_len": 384,
        "diff_format": "@@ -54,9 +54,9 @@\n def prepare_graph(\n-    history: List[Path], annotation: List[Path], targets: List[Path], min_size: int\n-) -> Graph:\n+    histories: List[Path], annotations: List[Path], min_size: int, max_rel_fuzz: float\n+) -> Optional[Graph]:\n \n     logger.debug(\"Importing history\")\n-    for hist, annotation in zip(history, annotation):\n-        bin_ = get_or_create_binary(hist)\n-        info = get_or_create_annotation(bin_, annotation)\n+    for history, annotation in zip(histories, annotations):\n+        bin_ = get_or_create_binary(history)\n+        get_or_create_annotation(bin_, annotation)\n         logger.debug(f\"Imported history {bin_.serialize()}\")\n",
        "source_code_with_indent": "<DED>def prepare_graph(\n    history: List[Path], annotation: List[Path], targets: List[Path], min_size: int\n) -> Graph:\n\n    <IND>logger.debug(\"Importing history\")\n    for hist, annotation in zip(history, annotation):\n        <IND>bin_ = get_or_create_binary(hist)\n        info = get_or_create_annotation(bin_, annotation)\n        logger.debug(f\"Imported history {bin_.serialize()}\")\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED>def prepare_graph(\n    histories: List[Path], annotations: List[Path], min_size: int, max_rel_fuzz: float\n) -> Optional[Graph]:\n\n    <IND>logger.debug(\"Importing history\")\n    for history, annotation in zip(histories, annotations):\n        <IND>bin_ = get_or_create_binary(history)\n        get_or_create_annotation(bin_, annotation)\n        logger.debug(f\"Imported history {bin_.serialize()}\")\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        typer.echo(\"No history entries in database\")\n        return\n\n    if history:\n        logger.debug(\"Clearing matchers\")\n",
        "source_code_len": 127,
        "target_code": "        typer.echo(\"No history entries in database\")\n        return None\n\n    if histories:\n        logger.debug(\"Clearing matchers\")\n",
        "target_code_len": 134,
        "diff_format": "@@ -65,5 +65,5 @@\n         typer.echo(\"No history entries in database\")\n-        return\n+        return None\n \n-    if history:\n+    if histories:\n         logger.debug(\"Clearing matchers\")\n",
        "source_code_with_indent": "        <IND>typer.echo(\"No history entries in database\")\n        return\n\n    <DED>if history:\n        <IND>logger.debug(\"Clearing matchers\")\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>typer.echo(\"No history entries in database\")\n        return None\n\n    <DED>if histories:\n        <IND>logger.debug(\"Clearing matchers\")\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    min_size: int,\n):\n    graph = prepare_graph(history, annotation, targets, min_size)\n    Match.reset()\n    for target_path in targets:\n",
        "source_code_len": 138,
        "target_code": "    min_size: int,\n    max_rel_fuzz: float,\n):\n    graph = prepare_graph(history, annotation, min_size, max_rel_fuzz)\n    Match.reset()\n    if graph is None:\n        typer.echo(\"Got empty graph\")\n        return\n    for target_path in targets:\n",
        "target_code_len": 243,
        "diff_format": "@@ -99,5 +99,9 @@\n     min_size: int,\n+    max_rel_fuzz: float,\n ):\n-    graph = prepare_graph(history, annotation, targets, min_size)\n+    graph = prepare_graph(history, annotation, min_size, max_rel_fuzz)\n     Match.reset()\n+    if graph is None:\n+        typer.echo(\"Got empty graph\")\n+        return\n     for target_path in targets:\n",
        "source_code_with_indent": "    min_size: int,\n):\n    <IND>graph = prepare_graph(history, annotation, targets, min_size)\n    Match.reset()\n    for target_path in targets:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    min_size: int,\n    max_rel_fuzz: float,\n):\n    <IND>graph = prepare_graph(history, annotation, min_size, max_rel_fuzz)\n    Match.reset()\n    if graph is None:\n        <IND>typer.echo(\"Got empty graph\")\n        return\n    <DED>for target_path in targets:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "seemoo-lab/polypyus",
    "commit": "aa39d938711cd8d61b54c4d1e3544852051764d8",
    "filename": "polypyus/cli.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/seemoo-lab-polypyus/polypyus/cli.py",
    "file_hunks_size": 12,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "polypyus/cli.py:88:71 Incompatible parameter type [6]: Expected `typing.Sized` for 1st positional only parameter to call `len` but got `typing.Iterable[Match]`.",
    "message": " Expected `typing.Sized` for 1st positional only parameter to call `len` but got `typing.Iterable[Match]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 88,
    "warning_line": "    table = tabulate(formatted, headers=\"keys\", showindex=range(1, len(matches) + 1))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    typer.echo(f\"Target: {target.filepath}\")\n    matches = match_matchers_against(target, graph=graph, parallelize=parallelize)\n    data = serialize(matches, export=True)\n",
        "source_code_len": 171,
        "target_code": "    typer.echo(f\"Target: {target.filepath}\")\n    matches = list(match_matchers_against(target, graph=graph, parallelize=parallelize))\n    data = serialize(matches, export=True)\n",
        "target_code_len": 177,
        "diff_format": "@@ -84,3 +84,3 @@\n     typer.echo(f\"Target: {target.filepath}\")\n-    matches = match_matchers_against(target, graph=graph, parallelize=parallelize)\n+    matches = list(match_matchers_against(target, graph=graph, parallelize=parallelize))\n     data = serialize(matches, export=True)\n",
        "source_code_with_indent": "    typer.echo(f\"Target: {target.filepath}\")\n    matches = match_matchers_against(target, graph=graph, parallelize=parallelize)\n    data = serialize(matches, export=True)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    typer.echo(f\"Target: {target.filepath}\")\n    matches = list(match_matchers_against(target, graph=graph, parallelize=parallelize))\n    data = serialize(matches, export=True)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "seemoo-lab/polypyus",
    "commit": "aa39d938711cd8d61b54c4d1e3544852051764d8",
    "filename": "polypyus/graph.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/seemoo-lab-polypyus/polypyus/graph.py",
    "file_hunks_size": 26,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "polypyus/graph.py:158:16 Incompatible return type [7]: Expected `bool` but got implicit return value of `None`.",
    "message": " Expected `bool` but got implicit return value of `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 158,
    "warning_line": "                return True",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def insert(self, path: MatchFragment, data: object) -> bool:\n        self.finalized = False\n        match_size = len(path)\n        next_node = 0\n        while len(path) > 0:\n",
        "source_code_len": 179,
        "target_code": "\n    def insert(self, path: MatchFragment, data_obj: object) -> bool:\n        self.finalized = False\n        match_size: int = len(path)\n        next_node: int = 0\n        while len(path) > 0:\n",
        "target_code_len": 193,
        "diff_format": "@@ -117,6 +118,6 @@\n \n-    def insert(self, path: MatchFragment, data: object) -> bool:\n+    def insert(self, path: MatchFragment, data_obj: object) -> bool:\n         self.finalized = False\n-        match_size = len(path)\n-        next_node = 0\n+        match_size: int = len(path)\n+        next_node: int = 0\n         while len(path) > 0:\n",
        "source_code_with_indent": "\n    <DED>def insert(self, path: MatchFragment, data: object) -> bool:\n        <IND>self.finalized = False\n        match_size = len(path)\n        next_node = 0\n        while len(path) > 0:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def insert(self, path: MatchFragment, data_obj: object) -> bool:\n        <IND>self.finalized = False\n        match_size: int = len(path)\n        next_node: int = 0\n        while len(path) > 0:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                ):  # Path is already in tree - add data\n                    logger.debug(f\"{data} is duplicate to {self.data[edge.to]}\")\n                    self.data[edge.to].append(data)\n                    return False\n",
        "source_code_len": 223,
        "target_code": "                ):  # Path is already in tree - add data\n                    logger.debug(f\"{data_obj} is duplicate to {self.data[edge.to]}\")\n                    self.data[edge.to].append(data_obj)\n                    return False\n",
        "target_code_len": 231,
        "diff_format": "@@ -138,4 +139,4 @@\n                 ):  # Path is already in tree - add data\n-                    logger.debug(f\"{data} is duplicate to {self.data[edge.to]}\")\n-                    self.data[edge.to].append(data)\n+                    logger.debug(f\"{data_obj} is duplicate to {self.data[edge.to]}\")\n+                    self.data[edge.to].append(data_obj)\n                     return False\n",
        "source_code_with_indent": "                ):  # Path is already in tree - add data\n                    <IND>logger.debug(f\"{data} is duplicate to {self.data[edge.to]}\")\n                    self.data[edge.to].append(data)\n                    return False\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                ):  # Path is already in tree - add data\n                    <IND>logger.debug(f\"{data_obj} is duplicate to {self.data[edge.to]}\")\n                    self.data[edge.to].append(data_obj)\n                    return False\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                        self._add_edge(self.nodes - 1, self.nodes, path, match_size)\n                        self._new_node(data)\n                    else:\n                        logger.debug(f\"{data} was added after a new branch\")\n                        self.data[self.nodes - 1].append(data)  # add data to split edge\n                    return True\n            else:\n                logger.debug(f\"{data} was added as a new leaf\")\n                self._add_edge(next_node, self.nodes, path, match_size)\n                self._new_node(data)\n                return True\n\n",
        "source_code_len": 574,
        "target_code": "                        self._add_edge(self.nodes - 1, self.nodes, path, match_size)\n                        self._new_node(data_obj)\n                    else:\n                        logger.debug(f\"{data_obj} was added after a new branch\")\n                        self.data[self.nodes - 1].append(\n                            data_obj\n                        )  # add data to split edge\n                    return True\n            else:\n                logger.debug(f\"{data_obj} was added as a new leaf\")\n                self._add_edge(next_node, self.nodes, path, match_size)\n                self._new_node(data_obj)\n                return True\n        return False\n\n",
        "target_code_len": 669,
        "diff_format": "@@ -148,12 +149,15 @@\n                         self._add_edge(self.nodes - 1, self.nodes, path, match_size)\n-                        self._new_node(data)\n+                        self._new_node(data_obj)\n                     else:\n-                        logger.debug(f\"{data} was added after a new branch\")\n-                        self.data[self.nodes - 1].append(data)  # add data to split edge\n+                        logger.debug(f\"{data_obj} was added after a new branch\")\n+                        self.data[self.nodes - 1].append(\n+                            data_obj\n+                        )  # add data to split edge\n                     return True\n             else:\n-                logger.debug(f\"{data} was added as a new leaf\")\n+                logger.debug(f\"{data_obj} was added as a new leaf\")\n                 self._add_edge(next_node, self.nodes, path, match_size)\n-                self._new_node(data)\n+                self._new_node(data_obj)\n                 return True\n+        return False\n \n",
        "source_code_with_indent": "                        <IND>self._add_edge(self.nodes - 1, self.nodes, path, match_size)\n                        self._new_node(data)\n                    <DED>else:\n                        <IND>logger.debug(f\"{data} was added after a new branch\")\n                        self.data[self.nodes - 1].append(data)  # add data to split edge\n                    <DED>return True\n            <DED><DED>else:\n                <IND>logger.debug(f\"{data} was added as a new leaf\")\n                self._add_edge(next_node, self.nodes, path, match_size)\n                self._new_node(data)\n                return True\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                        <IND>self._add_edge(self.nodes - 1, self.nodes, path, match_size)\n                        self._new_node(data_obj)\n                    <DED>else:\n                        <IND>logger.debug(f\"{data_obj} was added after a new branch\")\n                        self.data[self.nodes - 1].append(\n                            data_obj\n                        )  # add data to split edge\n                    <DED>return True\n            <DED><DED>else:\n                <IND>logger.debug(f\"{data_obj} was added as a new leaf\")\n                self._add_edge(next_node, self.nodes, path, match_size)\n                self._new_node(data_obj)\n                return True\n        <DED><DED>return False\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "seemoo-lab/polypyus",
    "commit": "aa39d938711cd8d61b54c4d1e3544852051764d8",
    "filename": "polypyus/graph.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/seemoo-lab-polypyus/polypyus/graph.py",
    "file_hunks_size": 26,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "polypyus/graph.py:239:12 Incompatible variable type [9]: Unable to unpack `None`, expected a tuple.",
    "message": " Unable to unpack `None`, expected a tuple.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 239,
    "warning_line": "            intermediate: Tuple[object, int, int] = None"
  },
  {
    "project": "seemoo-lab/polypyus",
    "commit": "aa39d938711cd8d61b54c4d1e3544852051764d8",
    "filename": "polypyus/graph.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/seemoo-lab-polypyus/polypyus/graph.py",
    "file_hunks_size": 26,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "polypyus/graph.py:289:24 Incompatible parameter type [6]: Expected `Union[bytes, str]` for 1st positional only parameter to call `Graph.match` but got `int`.",
    "message": " Expected `Union[bytes, str]` for 1st positional only parameter to call `Graph.match` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 289,
    "warning_line": "            graph.match(binary[slice_], offset=slice_.start, align=align)"
  },
  {
    "project": "seemoo-lab/polypyus",
    "commit": "aa39d938711cd8d61b54c4d1e3544852051764d8",
    "filename": "polypyus/graph.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/seemoo-lab-polypyus/polypyus/graph.py",
    "file_hunks_size": 26,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "polypyus/graph.py:298:4 Incompatible variable type [9]: binary is declared to have type `bytes` but is used as type `memoryview`.",
    "message": " binary is declared to have type `bytes` but is used as type `memoryview`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 298,
    "warning_line": "    binary = memoryview(binary)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "@logger.catch\ndef worker(graph: Graph, binary: bytes, job_queue: Queue, done_queue: Queue):\n    binary = memoryview(binary)\n    while True:\n",
        "source_code_len": 140,
        "target_code": "@logger.catch\ndef worker(\n    graph: Graph, binary: memoryview, job_queue: Queue, done_queue: Queue\n) -> None:\n    while True:\n",
        "target_code_len": 127,
        "diff_format": "@@ -296,4 +296,5 @@\n @logger.catch\n-def worker(graph: Graph, binary: bytes, job_queue: Queue, done_queue: Queue):\n-    binary = memoryview(binary)\n+def worker(\n+    graph: Graph, binary: memoryview, job_queue: Queue, done_queue: Queue\n+) -> None:\n     while True:\n",
        "source_code_with_indent": "<DED>@logger.catch\ndef worker(graph: Graph, binary: bytes, job_queue: Queue, done_queue: Queue):\n    <IND>binary = memoryview(binary)\n    while True:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED>@logger.catch\ndef worker(\n    graph: Graph, binary: memoryview, job_queue: Queue, done_queue: Queue\n) -> None:\n    <IND>while True:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "seemoo-lab/polypyus",
    "commit": "aa39d938711cd8d61b54c4d1e3544852051764d8",
    "filename": "polypyus/graph.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/seemoo-lab-polypyus/polypyus/graph.py",
    "file_hunks_size": 26,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "polypyus/graph.py:303:23 Incompatible parameter type [6]: Expected `Union[bytes, str]` for 2nd positional only parameter to call `yield_matches_to_queue` but got `int`.",
    "message": " Expected `Union[bytes, str]` for 2nd positional only parameter to call `yield_matches_to_queue` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 303,
    "warning_line": "                graph, binary[slice_], done_queue, slice_.start, align"
  },
  {
    "project": "seemoo-lab/polypyus",
    "commit": "aa39d938711cd8d61b54c4d1e3544852051764d8",
    "filename": "polypyus/graph.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/seemoo-lab-polypyus/polypyus/graph.py",
    "file_hunks_size": 26,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "polypyus/graph.py:314:4 Incompatible variable type [9]: workers is declared to have type `int` but is used as type `None`.",
    "message": " workers is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 314,
    "warning_line": "    workers: int = None,"
  },
  {
    "project": "seemoo-lab/polypyus",
    "commit": "aa39d938711cd8d61b54c4d1e3544852051764d8",
    "filename": "polypyus/graph.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/seemoo-lab-polypyus/polypyus/graph.py",
    "file_hunks_size": 26,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "polypyus/graph.py:315:4 Incompatible variable type [9]: overlap is declared to have type `int` but is used as type `None`.",
    "message": " overlap is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 315,
    "warning_line": "    overlap: int = None,"
  },
  {
    "project": "seemoo-lab/polypyus",
    "commit": "aa39d938711cd8d61b54c4d1e3544852051764d8",
    "filename": "polypyus/importer.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/seemoo-lab-polypyus/polypyus/importer.py",
    "file_hunks_size": 6,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "polypyus/importer.py:52:17 Call error [29]: `Annotation` is not a function.",
    "message": " `Annotation` is not a function.",
    "rule_id": "Call error [29]",
    "warning_line_no": 52,
    "warning_line": "    annotation = ann_cls(binary=binary, path=str(path))"
  },
  {
    "project": "seemoo-lab/polypyus",
    "commit": "aa39d938711cd8d61b54c4d1e3544852051764d8",
    "filename": "polypyus/importer.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/seemoo-lab-polypyus/polypyus/importer.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "polypyus/importer.py:89:4 Incompatible return type [7]: Expected `Annotation` but got `None`.",
    "message": " Expected `Annotation` but got `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 89,
    "warning_line": "    return None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\nimport os\nfrom pathlib import Path\nfrom typing import Callable, Dict, Tuple\n\nfrom loguru import logger\n",
        "source_code_len": 104,
        "target_code": "\nfrom pathlib import Path\nfrom typing import Callable, Dict, Tuple, Optional, Iterable, Type\n\nfrom pony import orm  # type: ignore\nfrom loguru import logger\n",
        "target_code_len": 157,
        "diff_format": "@@ -5,6 +5,6 @@\n \n-import os\n from pathlib import Path\n-from typing import Callable, Dict, Tuple\n+from typing import Callable, Dict, Tuple, Optional, Iterable, Type\n \n+from pony import orm  # type: ignore\n from loguru import logger\n",
        "source_code_with_indent": "\nimport os\nfrom pathlib import Path\nfrom typing import Callable, Dict, Tuple\n\nfrom loguru import logger\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom pathlib import Path\nfrom typing import Callable, Dict, Tuple, Optional, Iterable, Type\n\nfrom pony import orm  # type: ignore\nfrom loguru import logger\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "@orm.db_session\ndef get_or_create_annotation(binary: Binary, path: Path) -> Annotation:\n    \"\"\"get_or_create_annotation guesses file type and delegates the import to the corresponding importer.\n\n",
        "source_code_len": 195,
        "target_code": "@orm.db_session\ndef get_or_create_annotation(binary: Binary, path: Path) -> Optional[Annotation]:\n    \"\"\"Guesses file type and delegates the import to the corresponding importer.\n\n",
        "target_code_len": 180,
        "diff_format": "@@ -69,4 +70,4 @@\n @orm.db_session\n-def get_or_create_annotation(binary: Binary, path: Path) -> Annotation:\n-    \"\"\"get_or_create_annotation guesses file type and delegates the import to the corresponding importer.\n+def get_or_create_annotation(binary: Binary, path: Path) -> Optional[Annotation]:\n+    \"\"\"Guesses file type and delegates the import to the corresponding importer.\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "<DED>@orm.db_session\ndef get_or_create_annotation(binary: Binary, path: Path) -> Annotation:\n    <IND>",
        "target_code_with_indent": "<DED>@orm.db_session\ndef get_or_create_annotation(binary: Binary, path: Path) -> Optional[Annotation]:\n    <IND>"
      }
    ]
  },
  {
    "project": "seemoo-lab/polypyus",
    "commit": "aa39d938711cd8d61b54c4d1e3544852051764d8",
    "filename": "polypyus/models.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/seemoo-lab-polypyus/polypyus/models.py",
    "file_hunks_size": 24,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "polypyus/models.py:293:8 Incompatible return type [7]: Expected `Dict[bytes, int]` but got `List[Tuple[typing.Any, List[typing.Any]]]`.",
    "message": " Expected `Dict[bytes, int]` but got `List[Tuple[typing.Any, List[typing.Any]]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 293,
    "warning_line": "        return starts"
  },
  {
    "project": "seemoo-lab/polypyus",
    "commit": "aa39d938711cd8d61b54c4d1e3544852051764d8",
    "filename": "polypyus/models.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/seemoo-lab-polypyus/polypyus/models.py",
    "file_hunks_size": 24,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "polypyus/models.py:344:8 Incompatible return type [7]: Expected `bool` but got `Tuple[typing.Any, typing.Any]`.",
    "message": " Expected `bool` but got `Tuple[typing.Any, typing.Any]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 344,
    "warning_line": "        return cost / len(fuzziness), cost <= (len(fuzziness) - min_fnc_size) * max_fuzz",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        cls, fuzziness: bytes, max_fuzz: float = 0.4, min_fnc_size=24\n    ) -> bool:\n        cost = fuzz_cost(fuzziness)\n",
        "source_code_len": 121,
        "target_code": "        cls, fuzziness: bytes, max_fuzz: float = 0.4, min_fnc_size=24\n    ) -> Tuple[float, bool]:\n        cost = fuzz_cost(fuzziness)\n",
        "target_code_len": 135,
        "diff_format": "@@ -341,3 +358,3 @@\n         cls, fuzziness: bytes, max_fuzz: float = 0.4, min_fnc_size=24\n-    ) -> bool:\n+    ) -> Tuple[float, bool]:\n         cost = fuzz_cost(fuzziness)\n",
        "source_code_with_indent": "        cls, fuzziness: bytes, max_fuzz: float = 0.4, min_fnc_size=24\n    ) -> bool:\n        <IND>cost = fuzz_cost(fuzziness)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        cls, fuzziness: bytes, max_fuzz: float = 0.4, min_fnc_size=24\n    ) -> Tuple[float, bool]:\n        <IND>cost = fuzz_cost(fuzziness)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "seemoo-lab/polypyus",
    "commit": "aa39d938711cd8d61b54c4d1e3544852051764d8",
    "filename": "polypyus/models.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/seemoo-lab-polypyus/polypyus/models.py",
    "file_hunks_size": 24,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "polypyus/models.py:361:8 Incompatible variable type [9]: Unable to unpack `List[List[Function]]`, expected a tuple.",
    "message": " Unable to unpack `List[List[Function]]`, expected a tuple.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 361,
    "warning_line": "        fncs = list(fncs)  # comes as tuples"
  },
  {
    "project": "seemoo-lab/polypyus",
    "commit": "aa39d938711cd8d61b54c4d1e3544852051764d8",
    "filename": "polypyus/models.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/seemoo-lab-polypyus/polypyus/models.py",
    "file_hunks_size": 24,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "polypyus/models.py:379:31 Incompatible parameter type [6]: Expected `List[bytes]` for 1st positional only parameter to call `drop_least_similar` but got `typing.Tuple[List[Function], ...]`.",
    "message": " Expected `List[bytes]` for 1st positional only parameter to call `drop_least_similar` but got `typing.Tuple[List[Function], ...]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 379,
    "warning_line": "            drop_least_similar(fncs)"
  },
  {
    "project": "seemoo-lab/polypyus",
    "commit": "aa39d938711cd8d61b54c4d1e3544852051764d8",
    "filename": "polypyus/models.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/seemoo-lab-polypyus/polypyus/models.py",
    "file_hunks_size": 24,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "polypyus/models.py:422:4 Inconsistent override [14]: `polypyus.models.StartMatcher.from_functions` overrides method defined in `Matcher` inconsistently. Could not find parameter `max_fuzz` in overriding signature.",
    "message": " `polypyus.models.StartMatcher.from_functions` overrides method defined in `Matcher` inconsistently. Could not find parameter `max_fuzz` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 422,
    "warning_line": "    def from_functions(cls, name, *fncs: List[Function]) -> Iterable[\"Matcher\"]:"
  },
  {
    "project": "seemoo-lab/polypyus",
    "commit": "aa39d938711cd8d61b54c4d1e3544852051764d8",
    "filename": "polypyus/models.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/seemoo-lab-polypyus/polypyus/models.py",
    "file_hunks_size": 24,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "polypyus/models.py:422:4 Inconsistent override [14]: `polypyus.models.StartMatcher.from_functions` overrides method defined in `Matcher` inconsistently. Could not find parameter `min_fnc_size` in overriding signature.",
    "message": " `polypyus.models.StartMatcher.from_functions` overrides method defined in `Matcher` inconsistently. Could not find parameter `min_fnc_size` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 422,
    "warning_line": "    def from_functions(cls, name, *fncs: List[Function]) -> Iterable[\"Matcher\"]:"
  },
  {
    "project": "seemoo-lab/polypyus",
    "commit": "aa39d938711cd8d61b54c4d1e3544852051764d8",
    "filename": "polypyus/widgets/binary_list.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/seemoo-lab-polypyus/polypyus/widgets/binary_list.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "polypyus/widgets/binary_list.py:137:16 Incompatible return type [7]: Expected `typing.Dict[typing.Any, typing.Any]` but got implicit return value of `None`.",
    "message": " Expected `typing.Dict[typing.Any, typing.Any]` but got implicit return value of `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 137,
    "warning_line": "                return entry.to_dict()",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                return entry.to_dict()\n",
        "source_code_len": 39,
        "target_code": "                return entry.to_dict()\n        return {}\n",
        "target_code_len": 57,
        "diff_format": "@@ -137,1 +135,2 @@\n                 return entry.to_dict()\n+        return {}\n",
        "source_code_with_indent": "                <IND>return entry.to_dict()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                <IND>return entry.to_dict()\n        <DED><DED>return {}\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]