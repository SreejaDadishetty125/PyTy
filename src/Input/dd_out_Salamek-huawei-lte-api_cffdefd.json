[
  {
    "project": "Salamek/huawei-lte-api",
    "commit": "cffdefd2090802b3c07b843d225f93ece794c5dd",
    "filename": "huawei_lte_api/AuthorizedConnection.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Salamek-huawei-lte-api/huawei_lte_api/AuthorizedConnection.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "huawei_lte_api/AuthorizedConnection.py:28:33 Incompatible variable type [9]: username is declared to have type `str` but is used as type `None`.",
    "message": " username is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 28,
    "warning_line": "    def __init__(self, url: str, username: str=None, password: str=None, login_on_demand: bool=False):"
  },
  {
    "project": "Salamek/huawei-lte-api",
    "commit": "cffdefd2090802b3c07b843d225f93ece794c5dd",
    "filename": "huawei_lte_api/AuthorizedConnection.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Salamek-huawei-lte-api/huawei_lte_api/AuthorizedConnection.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "huawei_lte_api/AuthorizedConnection.py:28:53 Incompatible variable type [9]: password is declared to have type `str` but is used as type `None`.",
    "message": " password is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 28,
    "warning_line": "    def __init__(self, url: str, username: str=None, password: str=None, login_on_demand: bool=False):"
  },
  {
    "project": "Salamek/huawei-lte-api",
    "commit": "cffdefd2090802b3c07b843d225f93ece794c5dd",
    "filename": "huawei_lte_api/AuthorizedConnection.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Salamek-huawei-lte-api/huawei_lte_api/AuthorizedConnection.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "huawei_lte_api/AuthorizedConnection.py:32:8 Incompatible variable type [9]: username is declared to have type `str` but is used as type `typing.Optional[str]`.",
    "message": " username is declared to have type `str` but is used as type `typing.Optional[str]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 32,
    "warning_line": "        username = username if username else parsed_url.username"
  },
  {
    "project": "Salamek/huawei-lte-api",
    "commit": "cffdefd2090802b3c07b843d225f93ece794c5dd",
    "filename": "huawei_lte_api/AuthorizedConnection.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Salamek-huawei-lte-api/huawei_lte_api/AuthorizedConnection.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "huawei_lte_api/AuthorizedConnection.py:33:8 Incompatible variable type [9]: password is declared to have type `str` but is used as type `typing.Optional[str]`.",
    "message": " password is declared to have type `str` but is used as type `typing.Optional[str]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 33,
    "warning_line": "        password = password if password else parsed_url.password"
  },
  {
    "project": "Salamek/huawei-lte-api",
    "commit": "cffdefd2090802b3c07b843d225f93ece794c5dd",
    "filename": "huawei_lte_api/Connection.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Salamek-huawei-lte-api/huawei_lte_api/Connection.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "huawei_lte_api/Connection.py:44:40 Incompatible variable type [9]: dicttoxml_xargs is declared to have type `typing.Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "message": " dicttoxml_xargs is declared to have type `typing.Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 44,
    "warning_line": "    def _create_request_xml(data: dict, dicttoxml_xargs: dict=None) -> str:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import re\nimport urllib.parse\n",
        "source_code_len": 30,
        "target_code": "import re\nfrom typing import Dict, List, Optional, Type\nimport urllib.parse\n",
        "target_code_len": 76,
        "diff_format": "@@ -2,2 +2,3 @@\n import re\n+from typing import Dict, List, Optional, Type\n import urllib.parse\n",
        "source_code_with_indent": "import re\nimport urllib.parse\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import re\nfrom typing import Dict, List, Optional, Type\nimport urllib.parse\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @staticmethod\n    def _create_request_xml(data: dict, dicttoxml_xargs: dict=None) -> str:\n        if not dicttoxml_xargs:\n",
        "source_code_len": 126,
        "target_code": "    @staticmethod\n    def _create_request_xml(data: dict, dicttoxml_xargs: Optional[dict]=None) -> str:\n        if not dicttoxml_xargs:\n",
        "target_code_len": 136,
        "diff_format": "@@ -43,3 +44,3 @@\n     @staticmethod\n-    def _create_request_xml(data: dict, dicttoxml_xargs: dict=None) -> str:\n+    def _create_request_xml(data: dict, dicttoxml_xargs: Optional[dict]=None) -> str:\n         if not dicttoxml_xargs:\n",
        "source_code_with_indent": "    <DED>@staticmethod\n    def _create_request_xml(data: dict, dicttoxml_xargs: dict=None) -> str:\n        <IND>if not dicttoxml_xargs:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@staticmethod\n    def _create_request_xml(data: dict, dicttoxml_xargs: Optional[dict]=None) -> str:\n        <IND>if not dicttoxml_xargs:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "             endpoint: str,\n             data: dict=None,\n             refresh_csrf: bool=False,\n             prefix: str='api',\n             dicttoxml_xargs: dict=None\n             ) -> dict:\n",
        "source_code_len": 193,
        "target_code": "             endpoint: str,\n             data: Optional[dict]=None,\n             refresh_csrf: bool=False,\n             prefix: str='api',\n             dicttoxml_xargs: Optional[dict]=None\n             ) -> dict:\n",
        "target_code_len": 213,
        "diff_format": "@@ -103,6 +104,6 @@\n              endpoint: str,\n-             data: dict=None,\n+             data: Optional[dict]=None,\n              refresh_csrf: bool=False,\n              prefix: str='api',\n-             dicttoxml_xargs: dict=None\n+             dicttoxml_xargs: Optional[dict]=None\n              ) -> dict:\n",
        "source_code_with_indent": "             endpoint: str,\n             data: dict=None,\n             refresh_csrf: bool=False,\n             prefix: str='api',\n             dicttoxml_xargs: dict=None\n             ) -> dict:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "             endpoint: str,\n             data: Optional[dict]=None,\n             refresh_csrf: bool=False,\n             prefix: str='api',\n             dicttoxml_xargs: Optional[dict]=None\n             ) -> dict:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @_try_or_reload_and_retry\n    def get(self, endpoint: str, params: dict=None, prefix: str='api') -> dict:\n        headers = {}\n",
        "source_code_len": 131,
        "target_code": "    @_try_or_reload_and_retry\n    def get(self, endpoint: str, params: Optional[dict]=None, prefix: str='api') -> dict:\n        headers = {}\n",
        "target_code_len": 141,
        "diff_format": "@@ -146,3 +147,3 @@\n     @_try_or_reload_and_retry\n-    def get(self, endpoint: str, params: dict=None, prefix: str='api') -> dict:\n+    def get(self, endpoint: str, params: Optional[dict]=None, prefix: str='api') -> dict:\n         headers = {}\n",
        "source_code_with_indent": "    <DED>@_try_or_reload_and_retry\n    def get(self, endpoint: str, params: dict=None, prefix: str='api') -> dict:\n        <IND>headers = {}\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@_try_or_reload_and_retry\n    def get(self, endpoint: str, params: Optional[dict]=None, prefix: str='api') -> dict:\n        <IND>headers = {}\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Salamek/huawei-lte-api",
    "commit": "cffdefd2090802b3c07b843d225f93ece794c5dd",
    "filename": "huawei_lte_api/Connection.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Salamek-huawei-lte-api/huawei_lte_api/Connection.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "huawei_lte_api/Connection.py:73:52 Incompatible parameter type [6]: Expected `ResponseCodeEnum` for 1st positional only parameter to call `typing.Mapping.get` but got `int`.",
    "message": " Expected `ResponseCodeEnum` for 1st positional only parameter to call `typing.Mapping.get` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 73,
    "warning_line": "                message = error_code_to_message.get(error_code, 'Unknown')",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import re\nimport urllib.parse\n",
        "source_code_len": 30,
        "target_code": "import re\nfrom typing import Dict, List, Optional, Type\nimport urllib.parse\n",
        "target_code_len": 76,
        "diff_format": "@@ -2,2 +2,3 @@\n import re\n+from typing import Dict, List, Optional, Type\n import urllib.parse\n",
        "source_code_with_indent": "import re\nimport urllib.parse\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import re\nfrom typing import Dict, List, Optional, Type\nimport urllib.parse\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @staticmethod\n    def _create_request_xml(data: dict, dicttoxml_xargs: dict=None) -> str:\n        if not dicttoxml_xargs:\n",
        "source_code_len": 126,
        "target_code": "    @staticmethod\n    def _create_request_xml(data: dict, dicttoxml_xargs: Optional[dict]=None) -> str:\n        if not dicttoxml_xargs:\n",
        "target_code_len": 136,
        "diff_format": "@@ -43,3 +44,3 @@\n     @staticmethod\n-    def _create_request_xml(data: dict, dicttoxml_xargs: dict=None) -> str:\n+    def _create_request_xml(data: dict, dicttoxml_xargs: Optional[dict]=None) -> str:\n         if not dicttoxml_xargs:\n",
        "source_code_with_indent": "    <DED>@staticmethod\n    def _create_request_xml(data: dict, dicttoxml_xargs: dict=None) -> str:\n        <IND>if not dicttoxml_xargs:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@staticmethod\n    def _create_request_xml(data: dict, dicttoxml_xargs: Optional[dict]=None) -> str:\n        <IND>if not dicttoxml_xargs:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            ResponseCodeEnum.ERROR_SYSTEM_CSRF: 'Session error'\n        }\n\n",
        "source_code_len": 75,
        "target_code": "            ResponseCodeEnum.ERROR_SYSTEM_CSRF: 'Session error'\n        }  # type: Dict[int, str]\n\n",
        "target_code_len": 99,
        "diff_format": "@@ -60,3 +61,3 @@\n             ResponseCodeEnum.ERROR_SYSTEM_CSRF: 'Session error'\n-        }\n+        }  # type: Dict[int, str]\n \n",
        "source_code_with_indent": "            ResponseCodeEnum.ERROR_SYSTEM_CSRF: 'Session error'\n        }\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            ResponseCodeEnum.ERROR_SYSTEM_CSRF: 'Session error'\n        }  # type: Dict[int, str]\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "             endpoint: str,\n             data: dict=None,\n             refresh_csrf: bool=False,\n             prefix: str='api',\n             dicttoxml_xargs: dict=None\n             ) -> dict:\n",
        "source_code_len": 193,
        "target_code": "             endpoint: str,\n             data: Optional[dict]=None,\n             refresh_csrf: bool=False,\n             prefix: str='api',\n             dicttoxml_xargs: Optional[dict]=None\n             ) -> dict:\n",
        "target_code_len": 213,
        "diff_format": "@@ -103,6 +104,6 @@\n              endpoint: str,\n-             data: dict=None,\n+             data: Optional[dict]=None,\n              refresh_csrf: bool=False,\n              prefix: str='api',\n-             dicttoxml_xargs: dict=None\n+             dicttoxml_xargs: Optional[dict]=None\n              ) -> dict:\n",
        "source_code_with_indent": "             endpoint: str,\n             data: dict=None,\n             refresh_csrf: bool=False,\n             prefix: str='api',\n             dicttoxml_xargs: dict=None\n             ) -> dict:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "             endpoint: str,\n             data: Optional[dict]=None,\n             refresh_csrf: bool=False,\n             prefix: str='api',\n             dicttoxml_xargs: Optional[dict]=None\n             ) -> dict:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @_try_or_reload_and_retry\n    def get(self, endpoint: str, params: dict=None, prefix: str='api') -> dict:\n        headers = {}\n",
        "source_code_len": 131,
        "target_code": "    @_try_or_reload_and_retry\n    def get(self, endpoint: str, params: Optional[dict]=None, prefix: str='api') -> dict:\n        headers = {}\n",
        "target_code_len": 141,
        "diff_format": "@@ -146,3 +147,3 @@\n     @_try_or_reload_and_retry\n-    def get(self, endpoint: str, params: dict=None, prefix: str='api') -> dict:\n+    def get(self, endpoint: str, params: Optional[dict]=None, prefix: str='api') -> dict:\n         headers = {}\n",
        "source_code_with_indent": "    <DED>@_try_or_reload_and_retry\n    def get(self, endpoint: str, params: dict=None, prefix: str='api') -> dict:\n        <IND>headers = {}\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@_try_or_reload_and_retry\n    def get(self, endpoint: str, params: Optional[dict]=None, prefix: str='api') -> dict:\n        <IND>headers = {}\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Salamek/huawei-lte-api",
    "commit": "cffdefd2090802b3c07b843d225f93ece794c5dd",
    "filename": "huawei_lte_api/Connection.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Salamek-huawei-lte-api/huawei_lte_api/Connection.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "huawei_lte_api/Connection.py:76:46 Incompatible parameter type [6]: Expected `ResponseCodeEnum` for 1st positional only parameter to call `typing.Mapping.get` but got `int`.",
    "message": " Expected `ResponseCodeEnum` for 1st positional only parameter to call `typing.Mapping.get` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 76,
    "warning_line": "            raise error_code_to_exception.get(error_code, ResponseErrorException)(",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import re\nimport urllib.parse\n",
        "source_code_len": 30,
        "target_code": "import re\nfrom typing import Dict, List, Optional, Type\nimport urllib.parse\n",
        "target_code_len": 76,
        "diff_format": "@@ -2,2 +2,3 @@\n import re\n+from typing import Dict, List, Optional, Type\n import urllib.parse\n",
        "source_code_with_indent": "import re\nimport urllib.parse\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import re\nfrom typing import Dict, List, Optional, Type\nimport urllib.parse\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @staticmethod\n    def _create_request_xml(data: dict, dicttoxml_xargs: dict=None) -> str:\n        if not dicttoxml_xargs:\n",
        "source_code_len": 126,
        "target_code": "    @staticmethod\n    def _create_request_xml(data: dict, dicttoxml_xargs: Optional[dict]=None) -> str:\n        if not dicttoxml_xargs:\n",
        "target_code_len": 136,
        "diff_format": "@@ -43,3 +44,3 @@\n     @staticmethod\n-    def _create_request_xml(data: dict, dicttoxml_xargs: dict=None) -> str:\n+    def _create_request_xml(data: dict, dicttoxml_xargs: Optional[dict]=None) -> str:\n         if not dicttoxml_xargs:\n",
        "source_code_with_indent": "    <DED>@staticmethod\n    def _create_request_xml(data: dict, dicttoxml_xargs: dict=None) -> str:\n        <IND>if not dicttoxml_xargs:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@staticmethod\n    def _create_request_xml(data: dict, dicttoxml_xargs: Optional[dict]=None) -> str:\n        <IND>if not dicttoxml_xargs:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            ResponseCodeEnum.ERROR_SYSTEM_CSRF: ResponseErrorLoginCsrfException\n        }\n        if 'error' in data:\n",
        "source_code_len": 118,
        "target_code": "            ResponseCodeEnum.ERROR_SYSTEM_CSRF: ResponseErrorLoginCsrfException\n        }  # type: Dict[int, Type[ResponseErrorException]]\n        if 'error' in data:\n",
        "target_code_len": 167,
        "diff_format": "@@ -68,3 +69,3 @@\n             ResponseCodeEnum.ERROR_SYSTEM_CSRF: ResponseErrorLoginCsrfException\n-        }\n+        }  # type: Dict[int, Type[ResponseErrorException]]\n         if 'error' in data:\n",
        "source_code_with_indent": "            ResponseCodeEnum.ERROR_SYSTEM_CSRF: ResponseErrorLoginCsrfException\n        }\n        if 'error' in data:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            ResponseCodeEnum.ERROR_SYSTEM_CSRF: ResponseErrorLoginCsrfException\n        }  # type: Dict[int, Type[ResponseErrorException]]\n        if 'error' in data:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "             endpoint: str,\n             data: dict=None,\n             refresh_csrf: bool=False,\n             prefix: str='api',\n             dicttoxml_xargs: dict=None\n             ) -> dict:\n",
        "source_code_len": 193,
        "target_code": "             endpoint: str,\n             data: Optional[dict]=None,\n             refresh_csrf: bool=False,\n             prefix: str='api',\n             dicttoxml_xargs: Optional[dict]=None\n             ) -> dict:\n",
        "target_code_len": 213,
        "diff_format": "@@ -103,6 +104,6 @@\n              endpoint: str,\n-             data: dict=None,\n+             data: Optional[dict]=None,\n              refresh_csrf: bool=False,\n              prefix: str='api',\n-             dicttoxml_xargs: dict=None\n+             dicttoxml_xargs: Optional[dict]=None\n              ) -> dict:\n",
        "source_code_with_indent": "             endpoint: str,\n             data: dict=None,\n             refresh_csrf: bool=False,\n             prefix: str='api',\n             dicttoxml_xargs: dict=None\n             ) -> dict:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "             endpoint: str,\n             data: Optional[dict]=None,\n             refresh_csrf: bool=False,\n             prefix: str='api',\n             dicttoxml_xargs: Optional[dict]=None\n             ) -> dict:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @_try_or_reload_and_retry\n    def get(self, endpoint: str, params: dict=None, prefix: str='api') -> dict:\n        headers = {}\n",
        "source_code_len": 131,
        "target_code": "    @_try_or_reload_and_retry\n    def get(self, endpoint: str, params: Optional[dict]=None, prefix: str='api') -> dict:\n        headers = {}\n",
        "target_code_len": 141,
        "diff_format": "@@ -146,3 +147,3 @@\n     @_try_or_reload_and_retry\n-    def get(self, endpoint: str, params: dict=None, prefix: str='api') -> dict:\n+    def get(self, endpoint: str, params: Optional[dict]=None, prefix: str='api') -> dict:\n         headers = {}\n",
        "source_code_with_indent": "    <DED>@_try_or_reload_and_retry\n    def get(self, endpoint: str, params: dict=None, prefix: str='api') -> dict:\n        <IND>headers = {}\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@_try_or_reload_and_retry\n    def get(self, endpoint: str, params: Optional[dict]=None, prefix: str='api') -> dict:\n        <IND>headers = {}\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Salamek/huawei-lte-api",
    "commit": "cffdefd2090802b3c07b843d225f93ece794c5dd",
    "filename": "huawei_lte_api/Connection.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Salamek-huawei-lte-api/huawei_lte_api/Connection.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "huawei_lte_api/Connection.py:104:13 Incompatible variable type [9]: data is declared to have type `typing.Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "message": " data is declared to have type `typing.Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 104,
    "warning_line": "             data: dict=None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import re\nimport urllib.parse\n",
        "source_code_len": 30,
        "target_code": "import re\nfrom typing import Dict, List, Optional, Type\nimport urllib.parse\n",
        "target_code_len": 76,
        "diff_format": "@@ -2,2 +2,3 @@\n import re\n+from typing import Dict, List, Optional, Type\n import urllib.parse\n",
        "source_code_with_indent": "import re\nimport urllib.parse\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import re\nfrom typing import Dict, List, Optional, Type\nimport urllib.parse\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @staticmethod\n    def _create_request_xml(data: dict, dicttoxml_xargs: dict=None) -> str:\n        if not dicttoxml_xargs:\n",
        "source_code_len": 126,
        "target_code": "    @staticmethod\n    def _create_request_xml(data: dict, dicttoxml_xargs: Optional[dict]=None) -> str:\n        if not dicttoxml_xargs:\n",
        "target_code_len": 136,
        "diff_format": "@@ -43,3 +44,3 @@\n     @staticmethod\n-    def _create_request_xml(data: dict, dicttoxml_xargs: dict=None) -> str:\n+    def _create_request_xml(data: dict, dicttoxml_xargs: Optional[dict]=None) -> str:\n         if not dicttoxml_xargs:\n",
        "source_code_with_indent": "    <DED>@staticmethod\n    def _create_request_xml(data: dict, dicttoxml_xargs: dict=None) -> str:\n        <IND>if not dicttoxml_xargs:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@staticmethod\n    def _create_request_xml(data: dict, dicttoxml_xargs: Optional[dict]=None) -> str:\n        <IND>if not dicttoxml_xargs:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "             endpoint: str,\n             data: dict=None,\n             refresh_csrf: bool=False,\n             prefix: str='api',\n             dicttoxml_xargs: dict=None\n             ) -> dict:\n",
        "source_code_len": 193,
        "target_code": "             endpoint: str,\n             data: Optional[dict]=None,\n             refresh_csrf: bool=False,\n             prefix: str='api',\n             dicttoxml_xargs: Optional[dict]=None\n             ) -> dict:\n",
        "target_code_len": 213,
        "diff_format": "@@ -103,6 +104,6 @@\n              endpoint: str,\n-             data: dict=None,\n+             data: Optional[dict]=None,\n              refresh_csrf: bool=False,\n              prefix: str='api',\n-             dicttoxml_xargs: dict=None\n+             dicttoxml_xargs: Optional[dict]=None\n              ) -> dict:\n",
        "source_code_with_indent": "             endpoint: str,\n             data: dict=None,\n             refresh_csrf: bool=False,\n             prefix: str='api',\n             dicttoxml_xargs: dict=None\n             ) -> dict:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "             endpoint: str,\n             data: Optional[dict]=None,\n             refresh_csrf: bool=False,\n             prefix: str='api',\n             dicttoxml_xargs: Optional[dict]=None\n             ) -> dict:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @_try_or_reload_and_retry\n    def get(self, endpoint: str, params: dict=None, prefix: str='api') -> dict:\n        headers = {}\n",
        "source_code_len": 131,
        "target_code": "    @_try_or_reload_and_retry\n    def get(self, endpoint: str, params: Optional[dict]=None, prefix: str='api') -> dict:\n        headers = {}\n",
        "target_code_len": 141,
        "diff_format": "@@ -146,3 +147,3 @@\n     @_try_or_reload_and_retry\n-    def get(self, endpoint: str, params: dict=None, prefix: str='api') -> dict:\n+    def get(self, endpoint: str, params: Optional[dict]=None, prefix: str='api') -> dict:\n         headers = {}\n",
        "source_code_with_indent": "    <DED>@_try_or_reload_and_retry\n    def get(self, endpoint: str, params: dict=None, prefix: str='api') -> dict:\n        <IND>headers = {}\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@_try_or_reload_and_retry\n    def get(self, endpoint: str, params: Optional[dict]=None, prefix: str='api') -> dict:\n        <IND>headers = {}\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Salamek/huawei-lte-api",
    "commit": "cffdefd2090802b3c07b843d225f93ece794c5dd",
    "filename": "huawei_lte_api/Connection.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Salamek-huawei-lte-api/huawei_lte_api/Connection.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "huawei_lte_api/Connection.py:107:13 Incompatible variable type [9]: dicttoxml_xargs is declared to have type `typing.Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "message": " dicttoxml_xargs is declared to have type `typing.Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 107,
    "warning_line": "             dicttoxml_xargs: dict=None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import re\nimport urllib.parse\n",
        "source_code_len": 30,
        "target_code": "import re\nfrom typing import Dict, List, Optional, Type\nimport urllib.parse\n",
        "target_code_len": 76,
        "diff_format": "@@ -2,2 +2,3 @@\n import re\n+from typing import Dict, List, Optional, Type\n import urllib.parse\n",
        "source_code_with_indent": "import re\nimport urllib.parse\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import re\nfrom typing import Dict, List, Optional, Type\nimport urllib.parse\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @staticmethod\n    def _create_request_xml(data: dict, dicttoxml_xargs: dict=None) -> str:\n        if not dicttoxml_xargs:\n",
        "source_code_len": 126,
        "target_code": "    @staticmethod\n    def _create_request_xml(data: dict, dicttoxml_xargs: Optional[dict]=None) -> str:\n        if not dicttoxml_xargs:\n",
        "target_code_len": 136,
        "diff_format": "@@ -43,3 +44,3 @@\n     @staticmethod\n-    def _create_request_xml(data: dict, dicttoxml_xargs: dict=None) -> str:\n+    def _create_request_xml(data: dict, dicttoxml_xargs: Optional[dict]=None) -> str:\n         if not dicttoxml_xargs:\n",
        "source_code_with_indent": "    <DED>@staticmethod\n    def _create_request_xml(data: dict, dicttoxml_xargs: dict=None) -> str:\n        <IND>if not dicttoxml_xargs:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@staticmethod\n    def _create_request_xml(data: dict, dicttoxml_xargs: Optional[dict]=None) -> str:\n        <IND>if not dicttoxml_xargs:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "             endpoint: str,\n             data: dict=None,\n             refresh_csrf: bool=False,\n             prefix: str='api',\n             dicttoxml_xargs: dict=None\n             ) -> dict:\n",
        "source_code_len": 193,
        "target_code": "             endpoint: str,\n             data: Optional[dict]=None,\n             refresh_csrf: bool=False,\n             prefix: str='api',\n             dicttoxml_xargs: Optional[dict]=None\n             ) -> dict:\n",
        "target_code_len": 213,
        "diff_format": "@@ -103,6 +104,6 @@\n              endpoint: str,\n-             data: dict=None,\n+             data: Optional[dict]=None,\n              refresh_csrf: bool=False,\n              prefix: str='api',\n-             dicttoxml_xargs: dict=None\n+             dicttoxml_xargs: Optional[dict]=None\n              ) -> dict:\n",
        "source_code_with_indent": "             endpoint: str,\n             data: dict=None,\n             refresh_csrf: bool=False,\n             prefix: str='api',\n             dicttoxml_xargs: dict=None\n             ) -> dict:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "             endpoint: str,\n             data: Optional[dict]=None,\n             refresh_csrf: bool=False,\n             prefix: str='api',\n             dicttoxml_xargs: Optional[dict]=None\n             ) -> dict:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @_try_or_reload_and_retry\n    def get(self, endpoint: str, params: dict=None, prefix: str='api') -> dict:\n        headers = {}\n",
        "source_code_len": 131,
        "target_code": "    @_try_or_reload_and_retry\n    def get(self, endpoint: str, params: Optional[dict]=None, prefix: str='api') -> dict:\n        headers = {}\n",
        "target_code_len": 141,
        "diff_format": "@@ -146,3 +147,3 @@\n     @_try_or_reload_and_retry\n-    def get(self, endpoint: str, params: dict=None, prefix: str='api') -> dict:\n+    def get(self, endpoint: str, params: Optional[dict]=None, prefix: str='api') -> dict:\n         headers = {}\n",
        "source_code_with_indent": "    <DED>@_try_or_reload_and_retry\n    def get(self, endpoint: str, params: dict=None, prefix: str='api') -> dict:\n        <IND>headers = {}\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@_try_or_reload_and_retry\n    def get(self, endpoint: str, params: Optional[dict]=None, prefix: str='api') -> dict:\n        <IND>headers = {}\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Salamek/huawei-lte-api",
    "commit": "cffdefd2090802b3c07b843d225f93ece794c5dd",
    "filename": "huawei_lte_api/Connection.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Salamek-huawei-lte-api/huawei_lte_api/Connection.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "huawei_lte_api/Connection.py:130:70 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `Connection._process_response_xml` but got `bytes`.",
    "message": " Expected `str` for 1st positional only parameter to call `Connection._process_response_xml` but got `bytes`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 130,
    "warning_line": "        data = self._check_response_status(self._process_response_xml(response.content))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @staticmethod\n    def _process_response_xml(xml: str) -> dict:\n        return xmltodict.parse(xml, dict_constructor=dict) if xml else {}\n",
        "source_code_len": 141,
        "target_code": "    @staticmethod\n    def _process_response_xml(xml: bytes) -> dict:\n        return xmltodict.parse(xml, dict_constructor=dict) if xml else {}\n",
        "target_code_len": 143,
        "diff_format": "@@ -49,3 +50,3 @@\n     @staticmethod\n-    def _process_response_xml(xml: str) -> dict:\n+    def _process_response_xml(xml: bytes) -> dict:\n         return xmltodict.parse(xml, dict_constructor=dict) if xml else {}\n",
        "source_code_with_indent": "    <DED>@staticmethod\n    def _process_response_xml(xml: str) -> dict:\n        <IND>return xmltodict.parse(xml, dict_constructor=dict) if xml else {}\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@staticmethod\n    def _process_response_xml(xml: bytes) -> dict:\n        <IND>return xmltodict.parse(xml, dict_constructor=dict) if xml else {}\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Salamek/huawei-lte-api",
    "commit": "cffdefd2090802b3c07b843d225f93ece794c5dd",
    "filename": "huawei_lte_api/Connection.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Salamek-huawei-lte-api/huawei_lte_api/Connection.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "huawei_lte_api/Connection.py:147:33 Incompatible variable type [9]: params is declared to have type `typing.Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "message": " params is declared to have type `typing.Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 147,
    "warning_line": "    def get(self, endpoint: str, params: dict=None, prefix: str='api') -> dict:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import re\nimport urllib.parse\n",
        "source_code_len": 30,
        "target_code": "import re\nfrom typing import Dict, List, Optional, Type\nimport urllib.parse\n",
        "target_code_len": 76,
        "diff_format": "@@ -2,2 +2,3 @@\n import re\n+from typing import Dict, List, Optional, Type\n import urllib.parse\n",
        "source_code_with_indent": "import re\nimport urllib.parse\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import re\nfrom typing import Dict, List, Optional, Type\nimport urllib.parse\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @staticmethod\n    def _create_request_xml(data: dict, dicttoxml_xargs: dict=None) -> str:\n        if not dicttoxml_xargs:\n",
        "source_code_len": 126,
        "target_code": "    @staticmethod\n    def _create_request_xml(data: dict, dicttoxml_xargs: Optional[dict]=None) -> str:\n        if not dicttoxml_xargs:\n",
        "target_code_len": 136,
        "diff_format": "@@ -43,3 +44,3 @@\n     @staticmethod\n-    def _create_request_xml(data: dict, dicttoxml_xargs: dict=None) -> str:\n+    def _create_request_xml(data: dict, dicttoxml_xargs: Optional[dict]=None) -> str:\n         if not dicttoxml_xargs:\n",
        "source_code_with_indent": "    <DED>@staticmethod\n    def _create_request_xml(data: dict, dicttoxml_xargs: dict=None) -> str:\n        <IND>if not dicttoxml_xargs:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@staticmethod\n    def _create_request_xml(data: dict, dicttoxml_xargs: Optional[dict]=None) -> str:\n        <IND>if not dicttoxml_xargs:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "             endpoint: str,\n             data: dict=None,\n             refresh_csrf: bool=False,\n             prefix: str='api',\n             dicttoxml_xargs: dict=None\n             ) -> dict:\n",
        "source_code_len": 193,
        "target_code": "             endpoint: str,\n             data: Optional[dict]=None,\n             refresh_csrf: bool=False,\n             prefix: str='api',\n             dicttoxml_xargs: Optional[dict]=None\n             ) -> dict:\n",
        "target_code_len": 213,
        "diff_format": "@@ -103,6 +104,6 @@\n              endpoint: str,\n-             data: dict=None,\n+             data: Optional[dict]=None,\n              refresh_csrf: bool=False,\n              prefix: str='api',\n-             dicttoxml_xargs: dict=None\n+             dicttoxml_xargs: Optional[dict]=None\n              ) -> dict:\n",
        "source_code_with_indent": "             endpoint: str,\n             data: dict=None,\n             refresh_csrf: bool=False,\n             prefix: str='api',\n             dicttoxml_xargs: dict=None\n             ) -> dict:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "             endpoint: str,\n             data: Optional[dict]=None,\n             refresh_csrf: bool=False,\n             prefix: str='api',\n             dicttoxml_xargs: Optional[dict]=None\n             ) -> dict:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @_try_or_reload_and_retry\n    def get(self, endpoint: str, params: dict=None, prefix: str='api') -> dict:\n        headers = {}\n",
        "source_code_len": 131,
        "target_code": "    @_try_or_reload_and_retry\n    def get(self, endpoint: str, params: Optional[dict]=None, prefix: str='api') -> dict:\n        headers = {}\n",
        "target_code_len": 141,
        "diff_format": "@@ -146,3 +147,3 @@\n     @_try_or_reload_and_retry\n-    def get(self, endpoint: str, params: dict=None, prefix: str='api') -> dict:\n+    def get(self, endpoint: str, params: Optional[dict]=None, prefix: str='api') -> dict:\n         headers = {}\n",
        "source_code_with_indent": "    <DED>@_try_or_reload_and_retry\n    def get(self, endpoint: str, params: dict=None, prefix: str='api') -> dict:\n        <IND>headers = {}\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@_try_or_reload_and_retry\n    def get(self, endpoint: str, params: Optional[dict]=None, prefix: str='api') -> dict:\n        <IND>headers = {}\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Salamek/huawei-lte-api",
    "commit": "cffdefd2090802b3c07b843d225f93ece794c5dd",
    "filename": "huawei_lte_api/Connection.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Salamek-huawei-lte-api/huawei_lte_api/Connection.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "huawei_lte_api/Connection.py:159:70 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `Connection._process_response_xml` but got `bytes`.",
    "message": " Expected `str` for 1st positional only parameter to call `Connection._process_response_xml` but got `bytes`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 159,
    "warning_line": "        return self._check_response_status(self._process_response_xml(response.content))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @staticmethod\n    def _process_response_xml(xml: str) -> dict:\n        return xmltodict.parse(xml, dict_constructor=dict) if xml else {}\n",
        "source_code_len": 141,
        "target_code": "    @staticmethod\n    def _process_response_xml(xml: bytes) -> dict:\n        return xmltodict.parse(xml, dict_constructor=dict) if xml else {}\n",
        "target_code_len": 143,
        "diff_format": "@@ -49,3 +50,3 @@\n     @staticmethod\n-    def _process_response_xml(xml: str) -> dict:\n+    def _process_response_xml(xml: bytes) -> dict:\n         return xmltodict.parse(xml, dict_constructor=dict) if xml else {}\n",
        "source_code_with_indent": "    <DED>@staticmethod\n    def _process_response_xml(xml: str) -> dict:\n        <IND>return xmltodict.parse(xml, dict_constructor=dict) if xml else {}\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@staticmethod\n    def _process_response_xml(xml: bytes) -> dict:\n        <IND>return xmltodict.parse(xml, dict_constructor=dict) if xml else {}\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Salamek/huawei-lte-api",
    "commit": "cffdefd2090802b3c07b843d225f93ece794c5dd",
    "filename": "huawei_lte_api/api/Sms.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Salamek-huawei-lte-api/huawei_lte_api/api/Sms.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "huawei_lte_api/api/Sms.py:71:17 Incompatible variable type [9]: from_date is declared to have type `datetime.datetime` but is used as type `None`.",
    "message": " from_date is declared to have type `datetime.datetime` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 71,
    "warning_line": "                 from_date: datetime.datetime=None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from collections import OrderedDict\nfrom huawei_lte_api.ApiGroup import ApiGroup\n",
        "source_code_len": 81,
        "target_code": "from collections import OrderedDict\nfrom typing import Optional\nfrom huawei_lte_api.ApiGroup import ApiGroup\n",
        "target_code_len": 109,
        "diff_format": "@@ -2,2 +2,3 @@\n from collections import OrderedDict\n+from typing import Optional\n from huawei_lte_api.ApiGroup import ApiGroup\n",
        "source_code_with_indent": "from collections import OrderedDict\nfrom huawei_lte_api.ApiGroup import ApiGroup\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from collections import OrderedDict\nfrom typing import Optional\nfrom huawei_lte_api.ApiGroup import ApiGroup\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                 text_mode: TextModeEnum=TextModeEnum.SEVEN_BIT,\n                 from_date: datetime.datetime=None,\n                 ):\n",
        "source_code_len": 137,
        "target_code": "                 text_mode: TextModeEnum=TextModeEnum.SEVEN_BIT,\n                 from_date: Optional[datetime.datetime]=None,\n                 ):\n",
        "target_code_len": 147,
        "diff_format": "@@ -70,3 +71,3 @@\n                  text_mode: TextModeEnum=TextModeEnum.SEVEN_BIT,\n-                 from_date: datetime.datetime=None,\n+                 from_date: Optional[datetime.datetime]=None,\n                  ):\n",
        "source_code_with_indent": "                 text_mode: TextModeEnum=TextModeEnum.SEVEN_BIT,\n                 from_date: datetime.datetime=None,\n                 ):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                 text_mode: TextModeEnum=TextModeEnum.SEVEN_BIT,\n                 from_date: Optional[datetime.datetime]=None,\n                 ):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Salamek/huawei-lte-api",
    "commit": "cffdefd2090802b3c07b843d225f93ece794c5dd",
    "filename": "huawei_lte_api/api/Sms.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Salamek-huawei-lte-api/huawei_lte_api/api/Sms.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "huawei_lte_api/api/Sms.py:97:17 Incompatible variable type [9]: from_date is declared to have type `datetime.datetime` but is used as type `None`.",
    "message": " from_date is declared to have type `datetime.datetime` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 97,
    "warning_line": "                 from_date: datetime.datetime=None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from collections import OrderedDict\nfrom huawei_lte_api.ApiGroup import ApiGroup\n",
        "source_code_len": 81,
        "target_code": "from collections import OrderedDict\nfrom typing import Optional\nfrom huawei_lte_api.ApiGroup import ApiGroup\n",
        "target_code_len": 109,
        "diff_format": "@@ -2,2 +2,3 @@\n from collections import OrderedDict\n+from typing import Optional\n from huawei_lte_api.ApiGroup import ApiGroup\n",
        "source_code_with_indent": "from collections import OrderedDict\nfrom huawei_lte_api.ApiGroup import ApiGroup\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from collections import OrderedDict\nfrom typing import Optional\nfrom huawei_lte_api.ApiGroup import ApiGroup\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                 text_mode: TextModeEnum=TextModeEnum.SEVEN_BIT,\n                 from_date: datetime.datetime=None,\n                 ):\n",
        "source_code_len": 137,
        "target_code": "                 text_mode: TextModeEnum=TextModeEnum.SEVEN_BIT,\n                 from_date: Optional[datetime.datetime]=None,\n                 ):\n",
        "target_code_len": 147,
        "diff_format": "@@ -96,3 +97,3 @@\n                  text_mode: TextModeEnum=TextModeEnum.SEVEN_BIT,\n-                 from_date: datetime.datetime=None,\n+                 from_date: Optional[datetime.datetime]=None,\n                  ):\n",
        "source_code_with_indent": "                 text_mode: TextModeEnum=TextModeEnum.SEVEN_BIT,\n                 from_date: datetime.datetime=None,\n                 ):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                 text_mode: TextModeEnum=TextModeEnum.SEVEN_BIT,\n                 from_date: Optional[datetime.datetime]=None,\n                 ):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Salamek/huawei-lte-api",
    "commit": "cffdefd2090802b3c07b843d225f93ece794c5dd",
    "filename": "huawei_lte_api/api/User.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Salamek-huawei-lte-api/huawei_lte_api/api/User.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "huawei_lte_api/api/User.py:21:35 Incompatible variable type [9]: username is declared to have type `str` but is used as type `None`.",
    "message": " username is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 21,
    "warning_line": "    def __init__(self, connection, username: str=None, password: str=None):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import hashlib\nfrom huawei_lte_api.enums.user import PasswordTypeEnum, LoginStateEnum, LoginErrorEnum\n",
        "source_code_len": 102,
        "target_code": "import hashlib\nfrom typing import Optional\nfrom huawei_lte_api.enums.user import PasswordTypeEnum, LoginStateEnum, LoginErrorEnum\n",
        "target_code_len": 130,
        "diff_format": "@@ -2,2 +2,3 @@\n import hashlib\n+from typing import Optional\n from huawei_lte_api.enums.user import PasswordTypeEnum, LoginStateEnum, LoginErrorEnum\n",
        "source_code_with_indent": "import hashlib\nfrom huawei_lte_api.enums.user import PasswordTypeEnum, LoginStateEnum, LoginErrorEnum\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import hashlib\nfrom typing import Optional\nfrom huawei_lte_api.enums.user import PasswordTypeEnum, LoginStateEnum, LoginErrorEnum\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __init__(self, connection, username: str=None, password: str=None):\n        super(User, self).__init__(connection)\n",
        "source_code_len": 124,
        "target_code": "\n    def __init__(self, connection, username: Optional[str]=None, password: Optional[str]=None):\n        super(User, self).__init__(connection)\n",
        "target_code_len": 144,
        "diff_format": "@@ -20,3 +21,3 @@\n \n-    def __init__(self, connection, username: str=None, password: str=None):\n+    def __init__(self, connection, username: Optional[str]=None, password: Optional[str]=None):\n         super(User, self).__init__(connection)\n",
        "source_code_with_indent": "\n    def __init__(self, connection, username: str=None, password: str=None):\n        <IND>super(User, self).__init__(connection)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    def __init__(self, connection, username: Optional[str]=None, password: Optional[str]=None):\n        <IND>super(User, self).__init__(connection)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Salamek/huawei-lte-api",
    "commit": "cffdefd2090802b3c07b843d225f93ece794c5dd",
    "filename": "huawei_lte_api/api/User.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Salamek-huawei-lte-api/huawei_lte_api/api/User.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "huawei_lte_api/api/User.py:21:55 Incompatible variable type [9]: password is declared to have type `str` but is used as type `None`.",
    "message": " password is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 21,
    "warning_line": "    def __init__(self, connection, username: str=None, password: str=None):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import hashlib\nfrom huawei_lte_api.enums.user import PasswordTypeEnum, LoginStateEnum, LoginErrorEnum\n",
        "source_code_len": 102,
        "target_code": "import hashlib\nfrom typing import Optional\nfrom huawei_lte_api.enums.user import PasswordTypeEnum, LoginStateEnum, LoginErrorEnum\n",
        "target_code_len": 130,
        "diff_format": "@@ -2,2 +2,3 @@\n import hashlib\n+from typing import Optional\n from huawei_lte_api.enums.user import PasswordTypeEnum, LoginStateEnum, LoginErrorEnum\n",
        "source_code_with_indent": "import hashlib\nfrom huawei_lte_api.enums.user import PasswordTypeEnum, LoginStateEnum, LoginErrorEnum\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import hashlib\nfrom typing import Optional\nfrom huawei_lte_api.enums.user import PasswordTypeEnum, LoginStateEnum, LoginErrorEnum\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __init__(self, connection, username: str=None, password: str=None):\n        super(User, self).__init__(connection)\n",
        "source_code_len": 124,
        "target_code": "\n    def __init__(self, connection, username: Optional[str]=None, password: Optional[str]=None):\n        super(User, self).__init__(connection)\n",
        "target_code_len": 144,
        "diff_format": "@@ -20,3 +21,3 @@\n \n-    def __init__(self, connection, username: str=None, password: str=None):\n+    def __init__(self, connection, username: Optional[str]=None, password: Optional[str]=None):\n         super(User, self).__init__(connection)\n",
        "source_code_with_indent": "\n    def __init__(self, connection, username: str=None, password: str=None):\n        <IND>super(User, self).__init__(connection)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    def __init__(self, connection, username: Optional[str]=None, password: Optional[str]=None):\n        <IND>super(User, self).__init__(connection)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]