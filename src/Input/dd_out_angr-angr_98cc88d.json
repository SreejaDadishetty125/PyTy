[
  {
    "project": "angr/angr",
    "commit": "98cc88d3cb9a577fd001977d8515d43075aa619f",
    "filename": "angr/calling_conventions.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/angr-angr/angr/calling_conventions.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "angr/calling_conventions.py:352:4 Incompatible attribute type [8]: Attribute `ARG_REGS` declared in class `SimCC` has type `List[str]` but is used as type `None`.",
    "message": " Attribute `ARG_REGS` declared in class `SimCC` has type `List[str]` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 352,
    "warning_line": "    ARG_REGS: List[str] = None                                  # A list of all the registers used for integral args, in order (names or offsets)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    ARG_REGS: List[str] = None                                  # A list of all the registers used for integral args, in order (names or offsets)\n    FP_ARG_REGS: List[str] = None                               # A list of all the registers used for floating point args, in order\n    STACKARG_SP_BUFF = 0                                        # The amount of stack space reserved between the saved return address\n",
        "source_code_len": 414,
        "target_code": "\n    ARG_REGS: List[str] = []                                    # A list of all the registers used for integral args, in order (names or offsets)\n    FP_ARG_REGS: List[str] = []                                 # A list of all the registers used for floating point args, in order\n    STACKARG_SP_BUFF = 0                                        # The amount of stack space reserved between the saved return address\n",
        "target_code_len": 414,
        "diff_format": "@@ -351,4 +351,4 @@\n \n-    ARG_REGS: List[str] = None                                  # A list of all the registers used for integral args, in order (names or offsets)\n-    FP_ARG_REGS: List[str] = None                               # A list of all the registers used for floating point args, in order\n+    ARG_REGS: List[str] = []                                    # A list of all the registers used for integral args, in order (names or offsets)\n+    FP_ARG_REGS: List[str] = []                                 # A list of all the registers used for floating point args, in order\n     STACKARG_SP_BUFF = 0                                        # The amount of stack space reserved between the saved return address\n",
        "source_code_with_indent": "\n    <DED>ARG_REGS: List[str] = None                                  # A list of all the registers used for integral args, in order (names or offsets)\n    FP_ARG_REGS: List[str] = None                               # A list of all the registers used for floating point args, in order\n    STACKARG_SP_BUFF = 0                                        # The amount of stack space reserved between the saved return address\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>ARG_REGS: List[str] = []                                    # A list of all the registers used for integral args, in order (names or offsets)\n    FP_ARG_REGS: List[str] = []                                 # A list of all the registers used for floating point args, in order\n    STACKARG_SP_BUFF = 0                                        # The amount of stack space reserved between the saved return address\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "angr/angr",
    "commit": "98cc88d3cb9a577fd001977d8515d43075aa619f",
    "filename": "angr/calling_conventions.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/angr-angr/angr/calling_conventions.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "angr/calling_conventions.py:353:4 Incompatible attribute type [8]: Attribute `FP_ARG_REGS` declared in class `SimCC` has type `List[str]` but is used as type `None`.",
    "message": " Attribute `FP_ARG_REGS` declared in class `SimCC` has type `List[str]` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 353,
    "warning_line": "    FP_ARG_REGS: List[str] = None                               # A list of all the registers used for floating point args, in order",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    ARG_REGS: List[str] = None                                  # A list of all the registers used for integral args, in order (names or offsets)\n    FP_ARG_REGS: List[str] = None                               # A list of all the registers used for floating point args, in order\n    STACKARG_SP_BUFF = 0                                        # The amount of stack space reserved between the saved return address\n",
        "source_code_len": 414,
        "target_code": "\n    ARG_REGS: List[str] = []                                    # A list of all the registers used for integral args, in order (names or offsets)\n    FP_ARG_REGS: List[str] = []                                 # A list of all the registers used for floating point args, in order\n    STACKARG_SP_BUFF = 0                                        # The amount of stack space reserved between the saved return address\n",
        "target_code_len": 414,
        "diff_format": "@@ -351,4 +351,4 @@\n \n-    ARG_REGS: List[str] = None                                  # A list of all the registers used for integral args, in order (names or offsets)\n-    FP_ARG_REGS: List[str] = None                               # A list of all the registers used for floating point args, in order\n+    ARG_REGS: List[str] = []                                    # A list of all the registers used for integral args, in order (names or offsets)\n+    FP_ARG_REGS: List[str] = []                                 # A list of all the registers used for floating point args, in order\n     STACKARG_SP_BUFF = 0                                        # The amount of stack space reserved between the saved return address\n",
        "source_code_with_indent": "\n    <DED>ARG_REGS: List[str] = None                                  # A list of all the registers used for integral args, in order (names or offsets)\n    FP_ARG_REGS: List[str] = None                               # A list of all the registers used for floating point args, in order\n    STACKARG_SP_BUFF = 0                                        # The amount of stack space reserved between the saved return address\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>ARG_REGS: List[str] = []                                    # A list of all the registers used for integral args, in order (names or offsets)\n    FP_ARG_REGS: List[str] = []                                 # A list of all the registers used for floating point args, in order\n    STACKARG_SP_BUFF = 0                                        # The amount of stack space reserved between the saved return address\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "angr/angr",
    "commit": "98cc88d3cb9a577fd001977d8515d43075aa619f",
    "filename": "angr/calling_conventions.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/angr-angr/angr/calling_conventions.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "angr/calling_conventions.py:357:4 Incompatible attribute type [8]: Attribute `CALLER_SAVED_REGS` declared in class `SimCC` has type `List[str]` but is used as type `None`.",
    "message": " Attribute `CALLER_SAVED_REGS` declared in class `SimCC` has type `List[str]` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 357,
    "warning_line": "    CALLER_SAVED_REGS: List[str] = None                         # Caller-saved registers",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    STACKARG_SP_DIFF = 0                                        # The amount of stack space reserved for the return address\n    CALLER_SAVED_REGS: List[str] = None                         # Caller-saved registers\n    RETURN_ADDR: SimFunctionArgument = None                     # The location where the return address is stored, as a SimFunctionArgument\n",
        "source_code_len": 353,
        "target_code": "    STACKARG_SP_DIFF = 0                                        # The amount of stack space reserved for the return address\n    CALLER_SAVED_REGS: List[str] = []                           # Caller-saved registers\n    RETURN_ADDR: SimFunctionArgument = None                     # The location where the return address is stored, as a SimFunctionArgument\n",
        "target_code_len": 353,
        "diff_format": "@@ -356,3 +356,3 @@\n     STACKARG_SP_DIFF = 0                                        # The amount of stack space reserved for the return address\n-    CALLER_SAVED_REGS: List[str] = None                         # Caller-saved registers\n+    CALLER_SAVED_REGS: List[str] = []                           # Caller-saved registers\n     RETURN_ADDR: SimFunctionArgument = None                     # The location where the return address is stored, as a SimFunctionArgument\n",
        "source_code_with_indent": "    STACKARG_SP_DIFF = 0                                        # The amount of stack space reserved for the return address\n    CALLER_SAVED_REGS: List[str] = None                         # Caller-saved registers\n    RETURN_ADDR: SimFunctionArgument = None                     # The location where the return address is stored, as a SimFunctionArgument\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    STACKARG_SP_DIFF = 0                                        # The amount of stack space reserved for the return address\n    CALLER_SAVED_REGS: List[str] = []                           # Caller-saved registers\n    RETURN_ADDR: SimFunctionArgument = None                     # The location where the return address is stored, as a SimFunctionArgument\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]