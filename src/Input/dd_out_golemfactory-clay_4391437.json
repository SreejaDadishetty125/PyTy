[
  {
    "project": "golemfactory/clay",
    "commit": "4391437eceab1e0eed283a00b3912821813c0aaa",
    "filename": "apps/core/task/coretask.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/golemfactory-clay/apps/core/task/coretask.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "apps/core/task/coretask.py:189:50 Incompatible parameter type [6]: Expected `typing.Union[typing.Iterable[typing_extensions.SupportsIndex], typing.SupportsBytes]` for 1st positional only parameter to call `int.from_bytes` but got `str`.",
    "message": " Expected `typing.Union[typing.Iterable[typing_extensions.SupportsIndex], typing.SupportsBytes]` for 1st positional only parameter to call `int.from_bytes` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 189,
    "warning_line": "        return str(uuid.uuid1(node=int.from_bytes(public_key[:6], 'big')))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @staticmethod\n    def create_task_id(public_key: str) -> str:\n        \"\"\"\n        seeds top 48 bits from given public key as generated uuid1 node\n\n        :param str public_key: `keys_auth.public_key`\n        :returns: string uuid1 based on timestamp and given key\n",
        "source_code_len": 269,
        "target_code": "    @staticmethod\n    def create_task_id(public_key: bytes) -> str:\n        \"\"\"\n        seeds top 48 bits from given public key as node in generated uuid1\n\n        :param bytes public_key: `KeysAuth.public_key`\n        :returns: string uuid1 based on timestamp and given key\n",
        "target_code_len": 275,
        "diff_format": "@@ -181,7 +181,7 @@\n     @staticmethod\n-    def create_task_id(public_key: str) -> str:\n-        \"\"\"\n-        seeds top 48 bits from given public key as generated uuid1 node\n-\n-        :param str public_key: `keys_auth.public_key`\n+    def create_task_id(public_key: bytes) -> str:\n+        \"\"\"\n+        seeds top 48 bits from given public key as node in generated uuid1\n+\n+        :param bytes public_key: `KeysAuth.public_key`\n         :returns: string uuid1 based on timestamp and given key\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "    <DED>@staticmethod\n    def create_task_id(public_key: str) -> str:\n        <IND>",
        "target_code_with_indent": "    <DED>@staticmethod\n    def create_task_id(public_key: bytes) -> str:\n        <IND>"
      }
    ]
  }
]