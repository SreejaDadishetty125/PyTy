[
  {
    "project": "feast-dev/feast",
    "commit": "25b796f90ef0240e34728dffcffeeedc50bb8665",
    "filename": "sdk/python/feast/client.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/feast-dev-feast/sdk/python/feast/client.py",
    "file_hunks_size": 24,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "sdk/python/feast/client.py:668:35 Incompatible variable type [9]: name is declared to have type `str` but is used as type `None`.",
    "message": " name is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 668,
    "warning_line": "        self, project: str = None, name: str = None, labels: Dict[str, str] = dict()"
  },
  {
    "project": "feast-dev/feast",
    "commit": "25b796f90ef0240e34728dffcffeeedc50bb8665",
    "filename": "sdk/python/feast/client.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/feast-dev-feast/sdk/python/feast/client.py",
    "file_hunks_size": 24,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "sdk/python/feast/client.py:708:25 Incompatible variable type [9]: project is declared to have type `str` but is used as type `None`.",
    "message": " project is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 708,
    "warning_line": "        self, name: str, project: str = None"
  },
  {
    "project": "feast-dev/feast",
    "commit": "25b796f90ef0240e34728dffcffeeedc50bb8665",
    "filename": "sdk/python/feast/client.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/feast-dev-feast/sdk/python/feast/client.py",
    "file_hunks_size": 24,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "sdk/python/feast/client.py:739:8 Incompatible variable type [9]: project is declared to have type `str` but is used as type `None`.",
    "message": " project is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 739,
    "warning_line": "        project: str = None,"
  },
  {
    "project": "feast-dev/feast",
    "commit": "25b796f90ef0240e34728dffcffeeedc50bb8665",
    "filename": "sdk/python/feast/client.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/feast-dev-feast/sdk/python/feast/client.py",
    "file_hunks_size": 24,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "sdk/python/feast/client.py:788:8 Incompatible variable type [9]: project is declared to have type `str` but is used as type `None`.",
    "message": " project is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 788,
    "warning_line": "        project: str = None,"
  },
  {
    "project": "feast-dev/feast",
    "commit": "25b796f90ef0240e34728dffcffeeedc50bb8665",
    "filename": "sdk/python/feast/contrib/job_controller/client.py",
    "min_patch_found": false,
    "full_warning_msg": "sdk/python/feast/contrib/job_controller/client.py:66:8 Incompatible variable type [9]: job_id is declared to have type `str` but is used as type `None`.",
    "exception": "[Errno 2] No such file or directory: '/home/chowyi/TypeAnnotation_Study/GitHub/feast-dev-feast/sdk/python/feast/contrib/job_controller/client.py'",
    "dd_fail": true
  },
  {
    "project": "feast-dev/feast",
    "commit": "25b796f90ef0240e34728dffcffeeedc50bb8665",
    "filename": "sdk/python/feast/contrib/job_controller/client.py",
    "min_patch_found": false,
    "full_warning_msg": "sdk/python/feast/contrib/job_controller/client.py:68:8 Incompatible variable type [9]: store_name is declared to have type `str` but is used as type `None`.",
    "exception": "[Errno 2] No such file or directory: '/home/chowyi/TypeAnnotation_Study/GitHub/feast-dev-feast/sdk/python/feast/contrib/job_controller/client.py'",
    "dd_fail": true
  },
  {
    "project": "feast-dev/feast",
    "commit": "25b796f90ef0240e34728dffcffeeedc50bb8665",
    "filename": "sdk/python/feast/feature.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/feast-dev-feast/sdk/python/feast/feature.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "sdk/python/feast/feature.py:74:34 Incompatible variable type [9]: feature_set is declared to have type `str` but is used as type `None`.",
    "message": " feature_set is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 74,
    "warning_line": "    def __init__(self, name: str, feature_set: str = None):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        )\n        feature.update_presence_constraints(feature_proto)\n        feature.update_shape_type(feature_proto)\n        feature.update_domain_info(feature_proto)\n        return feature\n\n\nclass FeatureRef:\n    \"\"\" Feature Reference represents a reference to a specific feature.  \"\"\"\n\n    def __init__(self, name: str, feature_set: str = None):\n        self.proto = FeatureRefProto(name=name, feature_set=feature_set)\n\n    @classmethod\n    def from_proto(cls, proto: FeatureRefProto):\n        \"\"\"\n        Construct a feature reference from the given FeatureReference proto\n\n        Arg:\n            proto: Protobuf FeatureReference to construct from\n\n        Returns:\n            FeatureRef that refers to the given feature\n        \"\"\"\n        return cls(name=proto.name, feature_set=proto.feature_set)\n\n    @classmethod\n    def from_str(cls, feature_ref_str: str, ignore_project: bool = False):\n        \"\"\"\n        Parse the given string feature reference into FeatureRef model\n        String feature reference should be in the format feature_set:feature.\n        Where \"feature_set\" and \"name\" are the feature_set name and feature name\n        respectively.\n\n        Args:\n            feature_ref_str: String representation of the feature reference\n            ignore_project: Ignore projects in given string feature reference\n                            instead throwing an error\n\n        Returns:\n            FeatureRef that refers to the given feature\n        \"\"\"\n        proto = FeatureRefProto()\n        if \"/\" in feature_ref_str:\n            if ignore_project:\n                _, feature_ref_str = feature_ref_str.split(\"/\")\n            else:\n                raise ValueError(f\"Unsupported feature reference: {feature_ref_str}\")\n\n        # parse feature set name if specified\n        if \":\" in feature_ref_str:\n            proto.feature_set, feature_ref_str = feature_ref_str.split(\":\")\n\n        proto.name = feature_ref_str\n        return cls.from_proto(proto)\n\n    def to_proto(self) -> FeatureRefProto:\n        \"\"\"\n        Convert and return this feature set reference to protobuf.\n\n        Returns:\n            Protobuf respresentation of this feature set reference.\n        \"\"\"\n        return self.proto\n\n    def __repr__(self):\n        # return string representation of the reference\n        # [project/][feature_set:]name\n        # in protov3 unset string and int fields default to \"\" and 0\n        ref_str = \"\"\n        if len(self.proto.project) > 0:\n            ref_str += self.proto.project + \"/\"\n        if len(self.proto.feature_set) > 0:\n            ref_str += self.proto.feature_set + \":\"\n        ref_str += self.proto.name\n        return ref_str\n\n    def __str__(self):\n        # human readable string of the reference\n        return f\"FeatureRef<{self.__repr__()}>\"\n\n    def __eq__(self, other):\n        # compare with other feature set\n        return hash(self) == hash(other)\n\n    def __hash__(self):\n        # hash this reference\n        return hash(repr(self))\n",
        "source_code_len": 2993,
        "target_code": "        )\n\n        return feature\n",
        "target_code_len": 34,
        "diff_format": "@@ -64,88 +92,3 @@\n         )\n-        feature.update_presence_constraints(feature_proto)\n-        feature.update_shape_type(feature_proto)\n-        feature.update_domain_info(feature_proto)\n+\n         return feature\n-\n-\n-class FeatureRef:\n-    \"\"\" Feature Reference represents a reference to a specific feature.  \"\"\"\n-\n-    def __init__(self, name: str, feature_set: str = None):\n-        self.proto = FeatureRefProto(name=name, feature_set=feature_set)\n-\n-    @classmethod\n-    def from_proto(cls, proto: FeatureRefProto):\n-        \"\"\"\n-        Construct a feature reference from the given FeatureReference proto\n-\n-        Arg:\n-            proto: Protobuf FeatureReference to construct from\n-\n-        Returns:\n-            FeatureRef that refers to the given feature\n-        \"\"\"\n-        return cls(name=proto.name, feature_set=proto.feature_set)\n-\n-    @classmethod\n-    def from_str(cls, feature_ref_str: str, ignore_project: bool = False):\n-        \"\"\"\n-        Parse the given string feature reference into FeatureRef model\n-        String feature reference should be in the format feature_set:feature.\n-        Where \"feature_set\" and \"name\" are the feature_set name and feature name\n-        respectively.\n-\n-        Args:\n-            feature_ref_str: String representation of the feature reference\n-            ignore_project: Ignore projects in given string feature reference\n-                            instead throwing an error\n-\n-        Returns:\n-            FeatureRef that refers to the given feature\n-        \"\"\"\n-        proto = FeatureRefProto()\n-        if \"/\" in feature_ref_str:\n-            if ignore_project:\n-                _, feature_ref_str = feature_ref_str.split(\"/\")\n-            else:\n-                raise ValueError(f\"Unsupported feature reference: {feature_ref_str}\")\n-\n-        # parse feature set name if specified\n-        if \":\" in feature_ref_str:\n-            proto.feature_set, feature_ref_str = feature_ref_str.split(\":\")\n-\n-        proto.name = feature_ref_str\n-        return cls.from_proto(proto)\n-\n-    def to_proto(self) -> FeatureRefProto:\n-        \"\"\"\n-        Convert and return this feature set reference to protobuf.\n-\n-        Returns:\n-            Protobuf respresentation of this feature set reference.\n-        \"\"\"\n-        return self.proto\n-\n-    def __repr__(self):\n-        # return string representation of the reference\n-        # [project/][feature_set:]name\n-        # in protov3 unset string and int fields default to \"\" and 0\n-        ref_str = \"\"\n-        if len(self.proto.project) > 0:\n-            ref_str += self.proto.project + \"/\"\n-        if len(self.proto.feature_set) > 0:\n-            ref_str += self.proto.feature_set + \":\"\n-        ref_str += self.proto.name\n-        return ref_str\n-\n-    def __str__(self):\n-        # human readable string of the reference\n-        return f\"FeatureRef<{self.__repr__()}>\"\n-\n-    def __eq__(self, other):\n-        # compare with other feature set\n-        return hash(self) == hash(other)\n-\n-    def __hash__(self):\n-        # hash this reference\n-        return hash(repr(self))\n",
        "source_code_with_indent": "        )\n        feature.update_presence_constraints(feature_proto)\n        feature.update_shape_type(feature_proto)\n        feature.update_domain_info(feature_proto)\n        return feature\n\n\n<DED><DED>class FeatureRef:\n    <IND>\"\"\" Feature Reference represents a reference to a specific feature.  \"\"\"\n\n    def __init__(self, name: str, feature_set: str = None):\n        <IND>self.proto = FeatureRefProto(name=name, feature_set=feature_set)\n\n    <DED>@classmethod\n    def from_proto(cls, proto: FeatureRefProto):\n        <IND>\"\"\"\n        Construct a feature reference from the given FeatureReference proto\n\n        Arg:\n            proto: Protobuf FeatureReference to construct from\n\n        Returns:\n            FeatureRef that refers to the given feature\n        \"\"\"\n        return cls(name=proto.name, feature_set=proto.feature_set)\n\n    <DED>@classmethod\n    def from_str(cls, feature_ref_str: str, ignore_project: bool = False):\n        <IND>\"\"\"\n        Parse the given string feature reference into FeatureRef model\n        String feature reference should be in the format feature_set:feature.\n        Where \"feature_set\" and \"name\" are the feature_set name and feature name\n        respectively.\n\n        Args:\n            feature_ref_str: String representation of the feature reference\n            ignore_project: Ignore projects in given string feature reference\n                            instead throwing an error\n\n        Returns:\n            FeatureRef that refers to the given feature\n        \"\"\"\n        proto = FeatureRefProto()\n        if \"/\" in feature_ref_str:\n            <IND>if ignore_project:\n                <IND>_, feature_ref_str = feature_ref_str.split(\"/\")\n            <DED>else:\n                <IND>raise ValueError(f\"Unsupported feature reference: {feature_ref_str}\")\n\n        # parse feature set name if specified\n        <DED><DED>if \":\" in feature_ref_str:\n            <IND>proto.feature_set, feature_ref_str = feature_ref_str.split(\":\")\n\n        <DED>proto.name = feature_ref_str\n        return cls.from_proto(proto)\n\n    <DED>def to_proto(self) -> FeatureRefProto:\n        <IND>\"\"\"\n        Convert and return this feature set reference to protobuf.\n\n        Returns:\n            Protobuf respresentation of this feature set reference.\n        \"\"\"\n        return self.proto\n\n    <DED>def __repr__(self):\n        # return string representation of the reference\n        # [project/][feature_set:]name\n        # in protov3 unset string and int fields default to \"\" and 0\n        <IND>ref_str = \"\"\n        if len(self.proto.project) > 0:\n            <IND>ref_str += self.proto.project + \"/\"\n        <DED>if len(self.proto.feature_set) > 0:\n            <IND>ref_str += self.proto.feature_set + \":\"\n        <DED>ref_str += self.proto.name\n        return ref_str\n\n    <DED>def __str__(self):\n        # human readable string of the reference\n        <IND>return f\"FeatureRef<{self.__repr__()}>\"\n\n    <DED>def __eq__(self, other):\n        # compare with other feature set\n        <IND>return hash(self) == hash(other)\n\n    <DED>def __hash__(self):\n        # hash this reference\n        <IND>return hash(repr(self))\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        )\n\n        return feature\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "feast-dev/feast",
    "commit": "25b796f90ef0240e34728dffcffeeedc50bb8665",
    "filename": "sdk/python/feast/feature_set.py",
    "min_patch_found": false,
    "full_warning_msg": "sdk/python/feast/feature_set.py:55:8 Incompatible variable type [9]: project is declared to have type `str` but is used as type `None`.",
    "exception": "[Errno 2] No such file or directory: '/home/chowyi/TypeAnnotation_Study/GitHub/feast-dev-feast/sdk/python/feast/feature_set.py'",
    "dd_fail": true
  },
  {
    "project": "feast-dev/feast",
    "commit": "25b796f90ef0240e34728dffcffeeedc50bb8665",
    "filename": "sdk/python/feast/feature_set.py",
    "min_patch_found": false,
    "full_warning_msg": "sdk/python/feast/feature_set.py:906:23 Incompatible variable type [9]: project is declared to have type `str` but is used as type `None`.",
    "exception": "[Errno 2] No such file or directory: '/home/chowyi/TypeAnnotation_Study/GitHub/feast-dev-feast/sdk/python/feast/feature_set.py'",
    "dd_fail": true
  },
  {
    "project": "feast-dev/feast",
    "commit": "25b796f90ef0240e34728dffcffeeedc50bb8665",
    "filename": "sdk/python/feast/feature_set.py",
    "min_patch_found": false,
    "full_warning_msg": "sdk/python/feast/feature_set.py:906:44 Incompatible variable type [9]: name is declared to have type `str` but is used as type `None`.",
    "exception": "[Errno 2] No such file or directory: '/home/chowyi/TypeAnnotation_Study/GitHub/feast-dev-feast/sdk/python/feast/feature_set.py'",
    "dd_fail": true
  }
]