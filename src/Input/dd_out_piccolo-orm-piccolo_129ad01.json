[
  {
    "project": "piccolo-orm/piccolo",
    "commit": "129ad014fad3ad91a4e42f3d9e1140e970c1dddf",
    "filename": "piccolo/conf/apps.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/piccolo-orm-piccolo/piccolo/conf/apps.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "piccolo/conf/apps.py:276:12 Incompatible variable type [9]: module is declared to have type `t.Optional[PiccoloConfModule]` but is used as type `ModuleType`.",
    "message": " module is declared to have type `t.Optional[PiccoloConfModule]` but is used as type `ModuleType`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 276,
    "warning_line": "            module = import_module(module_name)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        module: t.Optional[PiccoloConfModule] = None\n\n        try:\n            module = import_module(module_name)\n        except ModuleNotFoundError:\n",
        "source_code_len": 152,
        "target_code": "\n        try:\n            module = t.cast(PiccoloConfModule, import_module(module_name))\n        except ModuleNotFoundError:\n",
        "target_code_len": 125,
        "diff_format": "@@ -272,6 +279,4 @@\n \n-        module: t.Optional[PiccoloConfModule] = None\n-\n         try:\n-            module = import_module(module_name)\n+            module = t.cast(PiccoloConfModule, import_module(module_name))\n         except ModuleNotFoundError:\n",
        "source_code_with_indent": "\n        <DED>module: t.Optional[PiccoloConfModule] = None\n\n        try:\n            <IND>module = import_module(module_name)\n        <DED>except ModuleNotFoundError:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        <DED>try:\n            <IND>module = t.cast(PiccoloConfModule, import_module(module_name))\n        <DED>except ModuleNotFoundError:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                print(traceback.format_exc())\n\n        return module\n\n",
        "source_code_len": 70,
        "target_code": "                print(traceback.format_exc())\n            return None\n        else:\n            return module\n\n",
        "target_code_len": 111,
        "diff_format": "@@ -286,4 +291,5 @@\n                 print(traceback.format_exc())\n-\n-        return module\n+            return None\n+        else:\n+            return module\n \n",
        "source_code_with_indent": "                print(traceback.format_exc())\n\n        <DED><DED>return module\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                print(traceback.format_exc())\n            <DED>return None\n        <DED>else:\n            <IND>return module\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "piccolo-orm/piccolo",
    "commit": "129ad014fad3ad91a4e42f3d9e1140e970c1dddf",
    "filename": "piccolo/query/methods/select.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/piccolo-orm-piccolo/piccolo/query/methods/select.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "piccolo/query/methods/select.py:81:22 Incompatible parameter type [6]: Expected `t.Union[piccolo.columns.base.Column, str]` for 1st positional only parameter to call `Select.columns` but got `piccolo.columns.base.Selectable`.",
    "message": " Expected `t.Union[piccolo.columns.base.Column, str]` for 1st positional only parameter to call `Select.columns` but got `piccolo.columns.base.Selectable`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 81,
    "warning_line": "        self.columns(*columns_list)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def columns(self, *columns: t.Union[Column, str]) -> Select:\n        _columns = self.table._process_column_args(*columns)\n",
        "source_code_len": 127,
        "target_code": "\n    def columns(self, *columns: t.Union[Selectable, str]) -> Select:\n        _columns = self.table._process_column_args(*columns)\n",
        "target_code_len": 131,
        "diff_format": "@@ -82,3 +82,3 @@\n \n-    def columns(self, *columns: t.Union[Column, str]) -> Select:\n+    def columns(self, *columns: t.Union[Selectable, str]) -> Select:\n         _columns = self.table._process_column_args(*columns)\n",
        "source_code_with_indent": "\n    <DED>def columns(self, *columns: t.Union[Column, str]) -> Select:\n        <IND>_columns = self.table._process_column_args(*columns)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def columns(self, *columns: t.Union[Selectable, str]) -> Select:\n        <IND>_columns = self.table._process_column_args(*columns)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "piccolo-orm/piccolo",
    "commit": "129ad014fad3ad91a4e42f3d9e1140e970c1dddf",
    "filename": "piccolo/query/methods/select.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/piccolo-orm-piccolo/piccolo/query/methods/select.py",
    "file_hunks_size": 5,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "piccolo/query/methods/select.py:85:39 Incompatible parameter type [6]: Expected `piccolo.columns.base.Column` for 1st positional only parameter to call `ColumnsDelegate.columns` but got `piccolo.columns.base.Selectable`.",
    "message": " Expected `piccolo.columns.base.Column` for 1st positional only parameter to call `ColumnsDelegate.columns` but got `piccolo.columns.base.Selectable`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 85,
    "warning_line": "        self.columns_delegate.columns(*_columns)"
  },
  {
    "project": "piccolo-orm/piccolo",
    "commit": "129ad014fad3ad91a4e42f3d9e1140e970c1dddf",
    "filename": "piccolo/query/methods/select.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/piccolo-orm-piccolo/piccolo/query/methods/select.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "piccolo/query/methods/select.py:93:8 Incompatible variable type [9]: Unable to unpack `t.Sequence[piccolo.columns.base.Selectable]`, expected a tuple.",
    "message": " Unable to unpack `t.Sequence[piccolo.columns.base.Selectable]`, expected a tuple.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 93,
    "warning_line": "        columns = self.table._process_column_args(*columns)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def group_by(self, *columns: Column) -> Select:\n        columns = self.table._process_column_args(*columns)\n        self.group_by_delegate.group_by(*columns)\n        return self\n",
        "source_code_len": 182,
        "target_code": "    def group_by(self, *columns: Column) -> Select:\n        _columns: t.List[Column] = [\n            i\n            for i in self.table._process_column_args(*columns)\n            if isinstance(i, Column)\n        ]\n        self.group_by_delegate.group_by(*_columns)\n        return self\n",
        "target_code_len": 284,
        "diff_format": "@@ -92,4 +92,8 @@\n     def group_by(self, *columns: Column) -> Select:\n-        columns = self.table._process_column_args(*columns)\n-        self.group_by_delegate.group_by(*columns)\n+        _columns: t.List[Column] = [\n+            i\n+            for i in self.table._process_column_args(*columns)\n+            if isinstance(i, Column)\n+        ]\n+        self.group_by_delegate.group_by(*_columns)\n         return self\n",
        "source_code_with_indent": "    <DED>def group_by(self, *columns: Column) -> Select:\n        <IND>columns = self.table._process_column_args(*columns)\n        self.group_by_delegate.group_by(*columns)\n        return self\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def group_by(self, *columns: Column) -> Select:\n        <IND>_columns: t.List[Column] = [\n            i\n            for i in self.table._process_column_args(*columns)\n            if isinstance(i, Column)\n        ]\n        self.group_by_delegate.group_by(*_columns)\n        return self\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "piccolo-orm/piccolo",
    "commit": "129ad014fad3ad91a4e42f3d9e1140e970c1dddf",
    "filename": "piccolo/query/methods/select.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/piccolo-orm-piccolo/piccolo/query/methods/select.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "piccolo/query/methods/select.py:119:8 Incompatible variable type [9]: Unable to unpack `t.Sequence[piccolo.columns.base.Selectable]`, expected a tuple.",
    "message": " Unable to unpack `t.Sequence[piccolo.columns.base.Selectable]`, expected a tuple.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 119,
    "warning_line": "        columns = self.table._process_column_args(*columns)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def order_by(self, *columns: Column, ascending=True) -> Select:\n        columns = self.table._process_column_args(*columns)\n        self.order_by_delegate.order_by(*columns, ascending=ascending)\n        return self\n",
        "source_code_len": 219,
        "target_code": "    def order_by(self, *columns: Column, ascending=True) -> Select:\n        _columns: t.List[Column] = [\n            i\n            for i in self.table._process_column_args(*columns)\n            if isinstance(i, Column)\n        ]\n        self.order_by_delegate.order_by(*_columns, ascending=ascending)\n        return self\n",
        "target_code_len": 321,
        "diff_format": "@@ -118,4 +122,8 @@\n     def order_by(self, *columns: Column, ascending=True) -> Select:\n-        columns = self.table._process_column_args(*columns)\n-        self.order_by_delegate.order_by(*columns, ascending=ascending)\n+        _columns: t.List[Column] = [\n+            i\n+            for i in self.table._process_column_args(*columns)\n+            if isinstance(i, Column)\n+        ]\n+        self.order_by_delegate.order_by(*_columns, ascending=ascending)\n         return self\n",
        "source_code_with_indent": "    <DED><DED>def order_by(self, *columns: Column, ascending=True) -> Select:\n        <IND>columns = self.table._process_column_args(*columns)\n        self.order_by_delegate.order_by(*columns, ascending=ascending)\n        return self\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED><DED>def order_by(self, *columns: Column, ascending=True) -> Select:\n        <IND>_columns: t.List[Column] = [\n            i\n            for i in self.table._process_column_args(*columns)\n            if isinstance(i, Column)\n        ]\n        self.order_by_delegate.order_by(*_columns, ascending=ascending)\n        return self\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "piccolo-orm/piccolo",
    "commit": "129ad014fad3ad91a4e42f3d9e1140e970c1dddf",
    "filename": "piccolo/table.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/piccolo-orm-piccolo/piccolo/table.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "piccolo/table.py:451:8 Incompatible variable type [9]: Unable to unpack `t.Sequence[piccolo.columns.base.Selectable]`, expected a tuple.",
    "message": " Unable to unpack `t.Sequence[piccolo.columns.base.Selectable]`, expected a tuple.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 451,
    "warning_line": "        columns = cls._process_column_args(*columns)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"\"\"\n        columns = cls._process_column_args(*columns)\n        return Select(\n            table=cls, columns_list=columns, exclude_secrets=exclude_secrets\n        )\n",
        "source_code_len": 175,
        "target_code": "        \"\"\"\n        _columns = cls._process_column_args(*columns)\n        return Select(\n            table=cls, columns_list=_columns, exclude_secrets=exclude_secrets\n        )\n",
        "target_code_len": 177,
        "diff_format": "@@ -450,5 +452,5 @@\n         \"\"\"\n-        columns = cls._process_column_args(*columns)\n+        _columns = cls._process_column_args(*columns)\n         return Select(\n-            table=cls, columns_list=columns, exclude_secrets=exclude_secrets\n+            table=cls, columns_list=_columns, exclude_secrets=exclude_secrets\n         )\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n        columns = cls._process_column_args(*columns)\n        return Select(\n            table=cls, columns_list=columns, exclude_secrets=exclude_secrets\n        )\n",
        "target_code_with_indent": "\n        _columns = cls._process_column_args(*columns)\n        return Select(\n            table=cls, columns_list=_columns, exclude_secrets=exclude_secrets\n        )\n"
      }
    ]
  },
  {
    "project": "piccolo-orm/piccolo",
    "commit": "129ad014fad3ad91a4e42f3d9e1140e970c1dddf",
    "filename": "piccolo/table.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/piccolo-orm-piccolo/piccolo/table.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "piccolo/table.py:453:23 Incompatible parameter type [6]: Expected `t.Sequence[piccolo.columns.base.Selectable]` for 2nd parameter `columns_list` to call `piccolo.query.methods.select.Select.__init__` but got `typing.Tuple[t.Union[piccolo.columns.base.Selectable, str], ...]`.",
    "message": " Expected `t.Sequence[piccolo.columns.base.Selectable]` for 2nd parameter `columns_list` to call `piccolo.query.methods.select.Select.__init__` but got `typing.Tuple[t.Union[piccolo.columns.base.Selectable, str], ...]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 453,
    "warning_line": "            table=cls, columns_list=columns, exclude_secrets=exclude_secrets",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"\"\"\n        columns = cls._process_column_args(*columns)\n        return Select(\n            table=cls, columns_list=columns, exclude_secrets=exclude_secrets\n        )\n",
        "source_code_len": 175,
        "target_code": "        \"\"\"\n        _columns = cls._process_column_args(*columns)\n        return Select(\n            table=cls, columns_list=_columns, exclude_secrets=exclude_secrets\n        )\n",
        "target_code_len": 177,
        "diff_format": "@@ -450,5 +452,5 @@\n         \"\"\"\n-        columns = cls._process_column_args(*columns)\n+        _columns = cls._process_column_args(*columns)\n         return Select(\n-            table=cls, columns_list=columns, exclude_secrets=exclude_secrets\n+            table=cls, columns_list=_columns, exclude_secrets=exclude_secrets\n         )\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n        columns = cls._process_column_args(*columns)\n        return Select(\n            table=cls, columns_list=columns, exclude_secrets=exclude_secrets\n        )\n",
        "target_code_with_indent": "\n        _columns = cls._process_column_args(*columns)\n        return Select(\n            table=cls, columns_list=_columns, exclude_secrets=exclude_secrets\n        )\n"
      }
    ]
  },
  {
    "project": "piccolo-orm/piccolo",
    "commit": "129ad014fad3ad91a4e42f3d9e1140e970c1dddf",
    "filename": "piccolo/table.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/piccolo-orm-piccolo/piccolo/table.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "piccolo/table.py:572:38 Incompatible parameter type [6]: Expected `t.List[t.Union[piccolo.columns.base.Column, str]]` for 2nd parameter `columns` to call `CreateIndex.__init__` but got `t.Sequence[typing.Any]`.",
    "message": " Expected `t.List[t.Union[piccolo.columns.base.Column, str]]` for 2nd parameter `columns` to call `CreateIndex.__init__` but got `t.Sequence[typing.Any]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 572,
    "warning_line": "        return CreateIndex(table=cls, columns=columns, method=method)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        cls,\n        columns: t.Sequence[Column, str],\n        method: IndexMethod = IndexMethod.btree,\n",
        "source_code_len": 104,
        "target_code": "        cls,\n        columns: t.List[t.Union[Column, str]],\n        method: IndexMethod = IndexMethod.btree,\n",
        "target_code_len": 109,
        "diff_format": "@@ -562,3 +564,3 @@\n         cls,\n-        columns: t.Sequence[Column, str],\n+        columns: t.List[t.Union[Column, str]],\n         method: IndexMethod = IndexMethod.btree,\n",
        "source_code_with_indent": "        cls,\n        columns: t.Sequence[Column, str],\n        method: IndexMethod = IndexMethod.btree,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        cls,\n        columns: t.List[t.Union[Column, str]],\n        method: IndexMethod = IndexMethod.btree,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "piccolo-orm/piccolo",
    "commit": "129ad014fad3ad91a4e42f3d9e1140e970c1dddf",
    "filename": "piccolo/table.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/piccolo-orm-piccolo/piccolo/table.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "piccolo/table.py:584:36 Incompatible parameter type [6]: Expected `t.List[t.Union[piccolo.columns.base.Column, str]]` for 2nd parameter `columns` to call `piccolo.query.methods.drop_index.DropIndex.__init__` but got `t.Sequence[typing.Any]`.",
    "message": " Expected `t.List[t.Union[piccolo.columns.base.Column, str]]` for 2nd parameter `columns` to call `piccolo.query.methods.drop_index.DropIndex.__init__` but got `t.Sequence[typing.Any]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 584,
    "warning_line": "        return DropIndex(table=cls, columns=columns, if_exists=if_exists)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def drop_index(\n        cls, columns: t.Sequence[Column, str], if_exists: bool = True\n    ) -> DropIndex:\n",
        "source_code_len": 110,
        "target_code": "    def drop_index(\n        cls, columns: t.List[t.Union[Column, str]], if_exists: bool = True\n    ) -> DropIndex:\n",
        "target_code_len": 115,
        "diff_format": "@@ -575,3 +577,3 @@\n     def drop_index(\n-        cls, columns: t.Sequence[Column, str], if_exists: bool = True\n+        cls, columns: t.List[t.Union[Column, str]], if_exists: bool = True\n     ) -> DropIndex:\n",
        "source_code_with_indent": "    def drop_index(\n        cls, columns: t.Sequence[Column, str], if_exists: bool = True\n    ) -> DropIndex:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def drop_index(\n        cls, columns: t.List[t.Union[Column, str]], if_exists: bool = True\n    ) -> DropIndex:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]