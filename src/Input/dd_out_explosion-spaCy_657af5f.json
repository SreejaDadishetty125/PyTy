[
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/cli/debug_data.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/cli/debug_data.py",
    "file_hunks_size": 6,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/cli/debug_data.py:219:57 Incompatible parameter type [6]: Expected `List[Tuple[str, int]]` for 1st positional only parameter to call `_format_labels` but got `Set[typing.Any]`.",
    "message": " Expected `List[Tuple[str, int]]` for 1st positional only parameter to call `_format_labels` but got `Set[typing.Any]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 219,
    "warning_line": "        msg.text(f\"Labels in train data: {_format_labels(labels)}\", show=verbose)"
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/cli/debug_data.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/cli/debug_data.py",
    "file_hunks_size": 6,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/cli/debug_data.py:225:44 Incompatible parameter type [6]: Expected `List[Tuple[str, int]]` for 1st positional only parameter to call `_format_labels` but got `Set[str]`.",
    "message": " Expected `List[Tuple[str, int]]` for 1st positional only parameter to call `_format_labels` but got `Set[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 225,
    "warning_line": "                f\"training: {_format_labels(missing_labels)}.\""
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/cli/debug_data.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/cli/debug_data.py",
    "file_hunks_size": 6,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/cli/debug_data.py:286:43 Incompatible parameter type [6]: Expected `List[Tuple[str, int]]` for 1st positional only parameter to call `_format_labels` but got `Set[str]`.",
    "message": " Expected `List[Tuple[str, int]]` for 1st positional only parameter to call `_format_labels` but got `Set[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 286,
    "warning_line": "        msg.text(f\"Labels: {_format_labels(labels)}\", show=verbose)"
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/cli/debug_data.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/cli/debug_data.py",
    "file_hunks_size": 6,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/cli/debug_data.py:292:44 Incompatible parameter type [6]: Expected `List[Tuple[str, int]]` for 1st positional only parameter to call `_format_labels` but got `Set[str]`.",
    "message": " Expected `List[Tuple[str, int]]` for 1st positional only parameter to call `_format_labels` but got `Set[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 292,
    "warning_line": "                f\"training: {_format_labels(missing_labels)}.\""
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/cli/debug_data.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/cli/debug_data.py",
    "file_hunks_size": 6,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/cli/debug_data.py:335:43 Incompatible parameter type [6]: Expected `List[Tuple[str, int]]` for 1st positional only parameter to call `_format_labels` but got `Set[str]`.",
    "message": " Expected `List[Tuple[str, int]]` for 1st positional only parameter to call `_format_labels` but got `Set[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 335,
    "warning_line": "        msg.text(f\"Labels: {_format_labels(labels)}\", show=verbose)"
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/cli/debug_data.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/cli/debug_data.py",
    "file_hunks_size": 6,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/cli/debug_data.py:341:44 Incompatible parameter type [6]: Expected `List[Tuple[str, int]]` for 1st positional only parameter to call `_format_labels` but got `Set[str]`.",
    "message": " Expected `List[Tuple[str, int]]` for 1st positional only parameter to call `_format_labels` but got `Set[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 341,
    "warning_line": "                f\"training: {_format_labels(missing_labels)}.\""
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/cli/debug_data.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/cli/debug_data.py",
    "file_hunks_size": 6,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/cli/debug_data.py:389:44 Incompatible parameter type [6]: Expected `List[Tuple[str, int]]` for 1st positional only parameter to call `_format_labels` but got `Set[str]`.",
    "message": " Expected `List[Tuple[str, int]]` for 1st positional only parameter to call `_format_labels` but got `Set[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 389,
    "warning_line": "                f\"training: {_format_labels(missing_labels)}.\""
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/cli/debug_data.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/cli/debug_data.py",
    "file_hunks_size": 6,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/cli/debug_data.py:406:44 Incompatible parameter type [6]: Expected `List[Tuple[str, int]]` for 1st positional only parameter to call `_format_labels` but got `Set[str]`.",
    "message": " Expected `List[Tuple[str, int]]` for 1st positional only parameter to call `_format_labels` but got `Set[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 406,
    "warning_line": "                f\"training: {_format_labels(missing_labels)}.\""
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/cli/debug_model.py",
    "min_patch_found": false,
    "full_warning_msg": "spacy/cli/debug_model.py:47:4 Incompatible variable type [9]: layers is declared to have type `str` but is used as type `typing.Union[typing.List[int], typing.List[str]]`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/cli/evaluate.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/cli/evaluate.py",
    "file_hunks_size": 1,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/cli/evaluate.py:104:41 Unsupported operand [58]: `+` is not supported for operand types `str` and `Union[str, Dict[typing.Any, typing.Any], float]`.",
    "message": " `+` is not supported for operand types `str` and `Union[str, Dict[typing.Any, typing.Any], float]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 104,
    "warning_line": "                metric = metric + \" (\" + scores.get(\"cats_score_desc\", \"unk\") + \")\""
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/cli/evaluate.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/cli/evaluate.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/cli/evaluate.py:146:7 Unsupported operand [58]: `in` is not supported for right operand type `Union[Dict[str, typing.Any], Scorer]`.",
    "message": " `in` is not supported for right operand type `Union[Dict[str, typing.Any], Scorer]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 146,
    "warning_line": "    if \"morph_per_feat\" in scores:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def handle_scores_per_type(\n    scores: Union[Scorer, Dict[str, Any]],\n    data: Dict[str, Any] = {},\n",
        "source_code_len": 102,
        "target_code": "def handle_scores_per_type(\n    scores: Dict[str, Any],\n    data: Dict[str, Any] = {},\n",
        "target_code_len": 87,
        "diff_format": "@@ -138,3 +138,3 @@\n def handle_scores_per_type(\n-    scores: Union[Scorer, Dict[str, Any]],\n+    scores: Dict[str, Any],\n     data: Dict[str, Any] = {},\n",
        "source_code_with_indent": "<DED>def handle_scores_per_type(\n    scores: Union[Scorer, Dict[str, Any]],\n    data: Dict[str, Any] = {},\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED>def handle_scores_per_type(\n    scores: Dict[str, Any],\n    data: Dict[str, Any] = {},\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/cli/evaluate.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/cli/evaluate.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/cli/evaluate.py:150:7 Unsupported operand [58]: `in` is not supported for right operand type `Union[Dict[str, typing.Any], Scorer]`.",
    "message": " `in` is not supported for right operand type `Union[Dict[str, typing.Any], Scorer]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 150,
    "warning_line": "    if \"dep_las_per_type\" in scores:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def handle_scores_per_type(\n    scores: Union[Scorer, Dict[str, Any]],\n    data: Dict[str, Any] = {},\n",
        "source_code_len": 102,
        "target_code": "def handle_scores_per_type(\n    scores: Dict[str, Any],\n    data: Dict[str, Any] = {},\n",
        "target_code_len": 87,
        "diff_format": "@@ -138,3 +138,3 @@\n def handle_scores_per_type(\n-    scores: Union[Scorer, Dict[str, Any]],\n+    scores: Dict[str, Any],\n     data: Dict[str, Any] = {},\n",
        "source_code_with_indent": "<DED>def handle_scores_per_type(\n    scores: Union[Scorer, Dict[str, Any]],\n    data: Dict[str, Any] = {},\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED>def handle_scores_per_type(\n    scores: Dict[str, Any],\n    data: Dict[str, Any] = {},\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/cli/evaluate.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/cli/evaluate.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/cli/evaluate.py:154:7 Unsupported operand [58]: `in` is not supported for right operand type `Union[Dict[str, typing.Any], Scorer]`.",
    "message": " `in` is not supported for right operand type `Union[Dict[str, typing.Any], Scorer]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 154,
    "warning_line": "    if \"ents_per_type\" in scores:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def handle_scores_per_type(\n    scores: Union[Scorer, Dict[str, Any]],\n    data: Dict[str, Any] = {},\n",
        "source_code_len": 102,
        "target_code": "def handle_scores_per_type(\n    scores: Dict[str, Any],\n    data: Dict[str, Any] = {},\n",
        "target_code_len": 87,
        "diff_format": "@@ -138,3 +138,3 @@\n def handle_scores_per_type(\n-    scores: Union[Scorer, Dict[str, Any]],\n+    scores: Dict[str, Any],\n     data: Dict[str, Any] = {},\n",
        "source_code_with_indent": "<DED>def handle_scores_per_type(\n    scores: Union[Scorer, Dict[str, Any]],\n    data: Dict[str, Any] = {},\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED>def handle_scores_per_type(\n    scores: Dict[str, Any],\n    data: Dict[str, Any] = {},\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/cli/evaluate.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/cli/evaluate.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/cli/evaluate.py:158:7 Unsupported operand [58]: `in` is not supported for right operand type `Union[Dict[str, typing.Any], Scorer]`.",
    "message": " `in` is not supported for right operand type `Union[Dict[str, typing.Any], Scorer]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 158,
    "warning_line": "    if f\"spans_{spans_key}_per_type\" in scores:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def handle_scores_per_type(\n    scores: Union[Scorer, Dict[str, Any]],\n    data: Dict[str, Any] = {},\n",
        "source_code_len": 102,
        "target_code": "def handle_scores_per_type(\n    scores: Dict[str, Any],\n    data: Dict[str, Any] = {},\n",
        "target_code_len": 87,
        "diff_format": "@@ -138,3 +138,3 @@\n def handle_scores_per_type(\n-    scores: Union[Scorer, Dict[str, Any]],\n+    scores: Dict[str, Any],\n     data: Dict[str, Any] = {},\n",
        "source_code_with_indent": "<DED>def handle_scores_per_type(\n    scores: Union[Scorer, Dict[str, Any]],\n    data: Dict[str, Any] = {},\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED>def handle_scores_per_type(\n    scores: Dict[str, Any],\n    data: Dict[str, Any] = {},\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/cli/evaluate.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/cli/evaluate.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/cli/evaluate.py:164:7 Unsupported operand [58]: `in` is not supported for right operand type `Union[Dict[str, typing.Any], Scorer]`.",
    "message": " `in` is not supported for right operand type `Union[Dict[str, typing.Any], Scorer]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 164,
    "warning_line": "    if \"cats_f_per_type\" in scores:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def handle_scores_per_type(\n    scores: Union[Scorer, Dict[str, Any]],\n    data: Dict[str, Any] = {},\n",
        "source_code_len": 102,
        "target_code": "def handle_scores_per_type(\n    scores: Dict[str, Any],\n    data: Dict[str, Any] = {},\n",
        "target_code_len": 87,
        "diff_format": "@@ -138,3 +138,3 @@\n def handle_scores_per_type(\n-    scores: Union[Scorer, Dict[str, Any]],\n+    scores: Dict[str, Any],\n     data: Dict[str, Any] = {},\n",
        "source_code_with_indent": "<DED>def handle_scores_per_type(\n    scores: Union[Scorer, Dict[str, Any]],\n    data: Dict[str, Any] = {},\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED>def handle_scores_per_type(\n    scores: Dict[str, Any],\n    data: Dict[str, Any] = {},\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/cli/evaluate.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/cli/evaluate.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/cli/evaluate.py:168:7 Unsupported operand [58]: `in` is not supported for right operand type `Union[Dict[str, typing.Any], Scorer]`.",
    "message": " `in` is not supported for right operand type `Union[Dict[str, typing.Any], Scorer]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 168,
    "warning_line": "    if \"cats_auc_per_type\" in scores:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def handle_scores_per_type(\n    scores: Union[Scorer, Dict[str, Any]],\n    data: Dict[str, Any] = {},\n",
        "source_code_len": 102,
        "target_code": "def handle_scores_per_type(\n    scores: Dict[str, Any],\n    data: Dict[str, Any] = {},\n",
        "target_code_len": 87,
        "diff_format": "@@ -138,3 +138,3 @@\n def handle_scores_per_type(\n-    scores: Union[Scorer, Dict[str, Any]],\n+    scores: Dict[str, Any],\n     data: Dict[str, Any] = {},\n",
        "source_code_with_indent": "<DED>def handle_scores_per_type(\n    scores: Union[Scorer, Dict[str, Any]],\n    data: Dict[str, Any] = {},\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED>def handle_scores_per_type(\n    scores: Dict[str, Any],\n    data: Dict[str, Any] = {},\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/cli/evaluate.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/cli/evaluate.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/cli/evaluate.py:172:4 Incompatible return type [7]: Expected `Dict[str, typing.Any]` but got `Union[Dict[str, typing.Any], Scorer]`.",
    "message": " Expected `Dict[str, typing.Any]` but got `Union[Dict[str, typing.Any], Scorer]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 172,
    "warning_line": "    return scores",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def handle_scores_per_type(\n    scores: Union[Scorer, Dict[str, Any]],\n    data: Dict[str, Any] = {},\n",
        "source_code_len": 102,
        "target_code": "def handle_scores_per_type(\n    scores: Dict[str, Any],\n    data: Dict[str, Any] = {},\n",
        "target_code_len": 87,
        "diff_format": "@@ -138,3 +138,3 @@\n def handle_scores_per_type(\n-    scores: Union[Scorer, Dict[str, Any]],\n+    scores: Dict[str, Any],\n     data: Dict[str, Any] = {},\n",
        "source_code_with_indent": "<DED>def handle_scores_per_type(\n    scores: Union[Scorer, Dict[str, Any]],\n    data: Dict[str, Any] = {},\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED>def handle_scores_per_type(\n    scores: Dict[str, Any],\n    data: Dict[str, Any] = {},\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/cli/info.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/cli/info.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/cli/info.py:28:4 Incompatible variable type [9]: exclude is declared to have type `Optional[str]` but is used as type `Union[List[int], List[str]]`.",
    "message": " exclude is declared to have type `Optional[str]` but is used as type `Union[List[int], List[str]]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 28,
    "warning_line": "    exclude = string_to_list(exclude)"
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/cli/info.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/cli/info.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/cli/info.py:28:29 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `string_to_list` but got `Optional[str]`.",
    "message": " Expected `str` for 1st positional only parameter to call `string_to_list` but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 28,
    "warning_line": "    exclude = string_to_list(exclude)"
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/cli/info.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/cli/info.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/cli/info.py:29:50 Incompatible parameter type [6]: Expected `Optional[List[str]]` for 4th parameter `exclude` to call `info` but got `Optional[str]`.",
    "message": " Expected `Optional[List[str]]` for 4th parameter `exclude` to call `info` but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 29,
    "warning_line": "    info(model, markdown=markdown, silent=silent, exclude=exclude)"
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/cli/init_config.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/cli/init_config.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/cli/init_config.py:49:4 Incompatible variable type [9]: pipeline is declared to have type `Optional[str]` but is used as type `typing.Union[List[int], List[str]]`.",
    "message": " pipeline is declared to have type `Optional[str]` but is used as type `typing.Union[List[int], List[str]]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 49,
    "warning_line": "    pipeline = string_to_list(pipeline)"
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/cli/init_config.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/cli/init_config.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/cli/init_config.py:49:30 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `string_to_list` but got `Optional[str]`.",
    "message": " Expected `str` for 1st positional only parameter to call `string_to_list` but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 49,
    "warning_line": "    pipeline = string_to_list(pipeline)"
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/cli/init_config.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/cli/init_config.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/cli/init_config.py:58:8 Incompatible parameter type [6]: Expected `str` for 1st parameter `lang` to call `init_config` but got `Optional[str]`.",
    "message": " Expected `str` for 1st parameter `lang` to call `init_config` but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 58,
    "warning_line": "        lang=lang,"
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/cli/init_config.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/cli/init_config.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/cli/init_config.py:59:8 Incompatible parameter type [6]: Expected `List[str]` for 2nd parameter `pipeline` to call `init_config` but got `Optional[str]`.",
    "message": " Expected `List[str]` for 2nd parameter `pipeline` to call `init_config` but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 59,
    "warning_line": "        pipeline=pipeline,"
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/cli/init_pipeline.py",
    "min_patch_found": false,
    "full_warning_msg": "spacy/cli/init_pipeline.py:36:23 Incompatible parameter type [6]: Expected `Language` for 1st positional only parameter to call `update_lexemes` but got `spacy.tokens.doc.Doc`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/cli/init_pipeline.py",
    "min_patch_found": false,
    "full_warning_msg": "spacy/cli/init_pipeline.py:37:20 Incompatible parameter type [6]: Expected `Language` for 1st positional only parameter to call `convert_vectors` but got `spacy.tokens.doc.Doc`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/cli/package.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/cli/package.py",
    "file_hunks_size": 5,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/cli/package.py:45:51 Incompatible parameter type [6]: Expected `List[str]` for 1st positional only parameter to call `get_build_formats` but got `Union[List[int], List[str]]`.",
    "message": " Expected `List[str]` for 1st positional only parameter to call `get_build_formats` but got `Union[List[int], List[str]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 45,
    "warning_line": "    create_sdist, create_wheel = get_build_formats(string_to_list(build))"
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/cli/package.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/cli/package.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "spacy/cli/package.py:230:61 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `util.get_minor_version_range` but got `Optional[str]`.",
    "message": " Expected `str` for 1st positional only parameter to call `util.get_minor_version_range` but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 230,
    "warning_line": "                version_range = util.get_minor_version_range(version)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "                version = util.get_package_version(pkg)\n                version_range = util.get_minor_version_range(version)\n                dependencies.append(f\"{pkg}{version_range}\")\n",
        "source_code_len": 187,
        "target_code": "                version = util.get_package_version(pkg)\n                version_range = util.get_minor_version_range(version)  # type: ignore[arg-type]\n                dependencies.append(f\"{pkg}{version_range}\")\n",
        "target_code_len": 213,
        "diff_format": "@@ -229,3 +229,3 @@\n                 version = util.get_package_version(pkg)\n-                version_range = util.get_minor_version_range(version)\n+                version_range = util.get_minor_version_range(version)  # type: ignore[arg-type]\n                 dependencies.append(f\"{pkg}{version_range}\")\n",
        "source_code_with_indent": "                <DED>version = util.get_package_version(pkg)\n                version_range = util.get_minor_version_range(version)\n                dependencies.append(f\"{pkg}{version_range}\")\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                <DED>version = util.get_package_version(pkg)\n                version_range = util.get_minor_version_range(version)  # type: ignore[arg-type]\n                dependencies.append(f\"{pkg}{version_range}\")\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/cli/package.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/cli/package.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/cli/package.py:277:36 Incompatible parameter type [6]: Expected `str` for 2nd positional only parameter to call `dict.setdefault` but got `List[Variable[_T]]`.",
    "message": " Expected `str` for 2nd positional only parameter to call `dict.setdefault` but got `List[Variable[_T]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 277,
    "warning_line": "    meta.setdefault(\"requirements\", [])",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": ") -> Dict[str, Any]:\n    meta = {\n        \"lang\": \"en\",\n",
        "source_code_len": 56,
        "target_code": ") -> Dict[str, Any]:\n    meta: Dict[str, Any] = {\n        \"lang\": \"en\",\n",
        "target_code_len": 72,
        "diff_format": "@@ -254,3 +254,3 @@\n ) -> Dict[str, Any]:\n-    meta = {\n+    meta: Dict[str, Any] = {\n         \"lang\": \"en\",\n",
        "source_code_with_indent": ") -> Dict[str, Any]:\n    <IND>meta = {\n        \"lang\": \"en\",\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": ") -> Dict[str, Any]:\n    <IND>meta: Dict[str, Any] = {\n        \"lang\": \"en\",\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/cli/profile.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/cli/profile.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/cli/profile.py:47:8 Incompatible variable type [9]: inputs is declared to have type `Optional[Path]` but is used as type `Iterator[str]`.",
    "message": " inputs is declared to have type `Optional[Path]` but is used as type `Iterator[str]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 47,
    "warning_line": "        inputs = _read_inputs(inputs, msg)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def profile(model: str, inputs: Optional[Path] = None, n_texts: int = 10000) -> None:\n\n    if inputs is not None:\n        inputs = _read_inputs(inputs, msg)\n    if inputs is None:\n",
        "source_code_len": 180,
        "target_code": "def profile(model: str, inputs: Optional[Path] = None, n_texts: int = 10000) -> None:\n    if inputs is not None:\n        texts = _read_inputs(inputs, msg)\n        texts = list(itertools.islice(texts, n_texts))\n    if inputs is None:\n",
        "target_code_len": 233,
        "diff_format": "@@ -44,5 +44,5 @@\n def profile(model: str, inputs: Optional[Path] = None, n_texts: int = 10000) -> None:\n-\n     if inputs is not None:\n-        inputs = _read_inputs(inputs, msg)\n+        texts = _read_inputs(inputs, msg)\n+        texts = list(itertools.islice(texts, n_texts))\n     if inputs is None:\n",
        "source_code_with_indent": "<DED>def profile(model: str, inputs: Optional[Path] = None, n_texts: int = 10000) -> None:\n\n    <IND>if inputs is not None:\n        <IND>inputs = _read_inputs(inputs, msg)\n    <DED>if inputs is None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED>def profile(model: str, inputs: Optional[Path] = None, n_texts: int = 10000) -> None:\n    <IND>if inputs is not None:\n        <IND>texts = _read_inputs(inputs, msg)\n        texts = list(itertools.islice(texts, n_texts))\n    <DED>if inputs is None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/cli/project/assets.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/cli/project/assets.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/cli/project/assets.py:136:12 Incompatible return type [7]: Expected `None` but got `Path`.",
    "message": " Expected `None` but got `Path`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 136,
    "warning_line": "            return dest_path",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "            msg.good(f\"Skipping download with matching checksum: {dest}\")\n            return dest_path\n    # We might as well support the user here and create parent directories in\n",
        "source_code_len": 181,
        "target_code": "            msg.good(f\"Skipping download with matching checksum: {dest}\")\n    # We might as well support the user here and create parent directories in\n",
        "target_code_len": 152,
        "diff_format": "@@ -135,3 +135,2 @@\n             msg.good(f\"Skipping download with matching checksum: {dest}\")\n-            return dest_path\n     # We might as well support the user here and create parent directories in\n",
        "source_code_with_indent": "            <IND>msg.good(f\"Skipping download with matching checksum: {dest}\")\n            return dest_path\n    # We might as well support the user here and create parent directories in\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <IND>msg.good(f\"Skipping download with matching checksum: {dest}\")\n    # We might as well support the user here and create parent directories in\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/cli/project/clone.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/cli/project/clone.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/cli/project/clone.py:87:20 Incompatible parameter type [6]: Expected `str` for 1st parameter `error` to call `get_git_version` but got `typing.Tuple[str, str]`.",
    "message": " Expected `str` for 1st parameter `error` to call `get_git_version` but got `typing.Tuple[str, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 87,
    "warning_line": "    get_git_version(error=git_err)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    git_err = (\n        f\"Cloning spaCy project templates requires Git and the 'git' command. \",\n        f\"To clone a project without Git, copy the files from the '{name}' \"\n        f\"directory in the {repo} to {dest} manually.\",\n    )\n",
        "source_code_len": 236,
        "target_code": "    git_err = (\n        f\"Cloning spaCy project templates requires Git and the 'git' command. \"\n        f\"To clone a project without Git, copy the files from the '{name}' \"\n        f\"directory in the {repo} to {dest} manually.\"\n    )\n",
        "target_code_len": 234,
        "diff_format": "@@ -82,5 +82,5 @@\n     git_err = (\n-        f\"Cloning spaCy project templates requires Git and the 'git' command. \",\n+        f\"Cloning spaCy project templates requires Git and the 'git' command. \"\n         f\"To clone a project without Git, copy the files from the '{name}' \"\n-        f\"directory in the {repo} to {dest} manually.\",\n+        f\"directory in the {repo} to {dest} manually.\"\n     )\n",
        "source_code_with_indent": "    git_err = (\n        f\"Cloning spaCy project templates requires Git and the 'git' command. \",\n        f\"To clone a project without Git, copy the files from the '{name}' \"\n        f\"directory in the {repo} to {dest} manually.\",\n    )\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    git_err = (\n        f\"Cloning spaCy project templates requires Git and the 'git' command. \"\n        f\"To clone a project without Git, copy the files from the '{name}' \"\n        f\"directory in the {repo} to {dest} manually.\"\n    )\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/cli/project/run.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/cli/project/run.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/cli/project/run.py:73:24 Incompatible parameter type [6]: Expected `Sequence[str]` for 1st positional only parameter to call `validate_subcommand` but got `typing.KeysView[typing.Any]`.",
    "message": " Expected `Sequence[str]` for 1st positional only parameter to call `validate_subcommand` but got `typing.KeysView[typing.Any]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 73,
    "warning_line": "    validate_subcommand(commands.keys(), workflows.keys(), subcommand)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    workflows = config.get(\"workflows\", {})\n    validate_subcommand(commands.keys(), workflows.keys(), subcommand)\n    if subcommand in workflows:\n",
        "source_code_len": 147,
        "target_code": "    workflows = config.get(\"workflows\", {})\n    validate_subcommand(list(commands.keys()), list(workflows.keys()), subcommand)\n    if subcommand in workflows:\n",
        "target_code_len": 159,
        "diff_format": "@@ -72,3 +72,3 @@\n     workflows = config.get(\"workflows\", {})\n-    validate_subcommand(commands.keys(), workflows.keys(), subcommand)\n+    validate_subcommand(list(commands.keys()), list(workflows.keys()), subcommand)\n     if subcommand in workflows:\n",
        "source_code_with_indent": "    workflows = config.get(\"workflows\", {})\n    validate_subcommand(commands.keys(), workflows.keys(), subcommand)\n    if subcommand in workflows:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    workflows = config.get(\"workflows\", {})\n    validate_subcommand(list(commands.keys()), list(workflows.keys()), subcommand)\n    if subcommand in workflows:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/cli/project/run.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/cli/project/run.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/cli/project/run.py:119:28 Incompatible parameter type [6]: Expected `Sequence[str]` for 1st positional only parameter to call `validate_subcommand` but got `typing.KeysView[typing.Any]`.",
    "message": " Expected `Sequence[str]` for 1st positional only parameter to call `validate_subcommand` but got `typing.KeysView[typing.Any]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 119,
    "warning_line": "        validate_subcommand(commands.keys(), workflows.keys(), subcommand)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    if subcommand:\n        validate_subcommand(commands.keys(), workflows.keys(), subcommand)\n        print(f\"Usage: {COMMAND} project run {subcommand} {project_loc}\")\n",
        "source_code_len": 168,
        "target_code": "    if subcommand:\n        validate_subcommand(list(commands.keys()), list(workflows.keys()), subcommand)\n        print(f\"Usage: {COMMAND} project run {subcommand} {project_loc}\")\n",
        "target_code_len": 180,
        "diff_format": "@@ -118,3 +118,3 @@\n     if subcommand:\n-        validate_subcommand(commands.keys(), workflows.keys(), subcommand)\n+        validate_subcommand(list(commands.keys()), list(workflows.keys()), subcommand)\n         print(f\"Usage: {COMMAND} project run {subcommand} {project_loc}\")\n",
        "source_code_with_indent": "    if subcommand:\n        <IND>validate_subcommand(commands.keys(), workflows.keys(), subcommand)\n        print(f\"Usage: {COMMAND} project run {subcommand} {project_loc}\")\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    if subcommand:\n        <IND>validate_subcommand(list(commands.keys()), list(workflows.keys()), subcommand)\n        print(f\"Usage: {COMMAND} project run {subcommand} {project_loc}\")\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/displacy/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/displacy/__init__.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "spacy/displacy/__init__.py:57:38 Incompatible parameter type [6]: Expected `typing.List[Dict[str, typing.Any]]` for 1st positional only parameter to call `DependencyRenderer.render` but got `Union[typing.List[Dict[str, typing.Any]], typing.List[spacy.tokens.doc.Doc]]`.",
    "message": " Expected `typing.List[Dict[str, typing.Any]]` for 1st positional only parameter to call `DependencyRenderer.render` but got `Union[typing.List[Dict[str, typing.Any]], typing.List[spacy.tokens.doc.Doc]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 57,
    "warning_line": "    _html[\"parsed\"] = renderer.render(parsed, page=page, minify=minify).strip()",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "    renderer = renderer_func(options=options)\n    parsed = [converter(doc, options) for doc in docs] if not manual else docs\n    _html[\"parsed\"] = renderer.render(parsed, page=page, minify=minify).strip()\n    html = _html[\"parsed\"]\n",
        "source_code_len": 232,
        "target_code": "    renderer = renderer_func(options=options)\n    parsed = [converter(doc, options) for doc in docs] if not manual else docs  # type: ignore\n    _html[\"parsed\"] = renderer.render(parsed, page=page, minify=minify).strip()  # type: ignore\n    html = _html[\"parsed\"]\n",
        "target_code_len": 264,
        "diff_format": "@@ -55,4 +56,4 @@\n     renderer = renderer_func(options=options)\n-    parsed = [converter(doc, options) for doc in docs] if not manual else docs\n-    _html[\"parsed\"] = renderer.render(parsed, page=page, minify=minify).strip()\n+    parsed = [converter(doc, options) for doc in docs] if not manual else docs  # type: ignore\n+    _html[\"parsed\"] = renderer.render(parsed, page=page, minify=minify).strip()  # type: ignore\n     html = _html[\"parsed\"]\n",
        "source_code_with_indent": "    renderer = renderer_func(options=options)\n    parsed = [converter(doc, options) for doc in docs] if not manual else docs\n    _html[\"parsed\"] = renderer.render(parsed, page=page, minify=minify).strip()\n    html = _html[\"parsed\"]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    renderer = renderer_func(options=options)\n    parsed = [converter(doc, options) for doc in docs] if not manual else docs  # type: ignore\n    _html[\"parsed\"] = renderer.render(parsed, page=page, minify=minify).strip()  # type: ignore\n    html = _html[\"parsed\"]\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/displacy/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/displacy/__init__.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "spacy/displacy/__init__.py:136:38 Incompatible parameter type [6]: Expected `Dict[Union[int, str], typing.Any]` for 2nd parameter `attrs` to call `spacy.tokens._retokenize.Retokenizer.merge` but got `Dict[str, str]`.",
    "message": " Expected `Dict[Union[int, str], typing.Any]` for 2nd parameter `attrs` to call `spacy.tokens._retokenize.Retokenizer.merge` but got `Dict[str, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 136,
    "warning_line": "                retokenizer.merge(np, attrs=attrs)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "                }\n                retokenizer.merge(np, attrs=attrs)\n    if options.get(\"collapse_punct\", True):\n",
        "source_code_len": 113,
        "target_code": "                }\n                retokenizer.merge(np, attrs=attrs)  # type: ignore[arg-type]\n    if options.get(\"collapse_punct\", True):\n",
        "target_code_len": 139,
        "diff_format": "@@ -135,3 +136,3 @@\n                 }\n-                retokenizer.merge(np, attrs=attrs)\n+                retokenizer.merge(np, attrs=attrs)  # type: ignore[arg-type]\n     if options.get(\"collapse_punct\", True):\n",
        "source_code_with_indent": "                }\n                retokenizer.merge(np, attrs=attrs)\n    <DED><DED><DED>if options.get(\"collapse_punct\", True):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                }\n                retokenizer.merge(np, attrs=attrs)  # type: ignore[arg-type]\n    <DED><DED><DED>if options.get(\"collapse_punct\", True):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/displacy/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/displacy/__init__.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "spacy/displacy/__init__.py:151:40 Incompatible parameter type [6]: Expected `Dict[Union[int, str], typing.Any]` for 2nd parameter `attrs` to call `spacy.tokens._retokenize.Retokenizer.merge` but got `Dict[str, typing.Any]`.",
    "message": " Expected `Dict[Union[int, str], typing.Any]` for 2nd parameter `attrs` to call `spacy.tokens._retokenize.Retokenizer.merge` but got `Dict[str, typing.Any]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 151,
    "warning_line": "                retokenizer.merge(span, attrs=attrs)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "                attrs = {\"tag\": tag, \"lemma\": lemma, \"ent_type\": ent_type}\n                retokenizer.merge(span, attrs=attrs)\n    fine_grained = options.get(\"fine_grained\")\n",
        "source_code_len": 175,
        "target_code": "                attrs = {\"tag\": tag, \"lemma\": lemma, \"ent_type\": ent_type}\n                retokenizer.merge(span, attrs=attrs)  # type: ignore[arg-type]\n    fine_grained = options.get(\"fine_grained\")\n",
        "target_code_len": 201,
        "diff_format": "@@ -150,3 +151,3 @@\n                 attrs = {\"tag\": tag, \"lemma\": lemma, \"ent_type\": ent_type}\n-                retokenizer.merge(span, attrs=attrs)\n+                retokenizer.merge(span, attrs=attrs)  # type: ignore[arg-type]\n     fine_grained = options.get(\"fine_grained\")\n",
        "source_code_with_indent": "                <IND>attrs = {\"tag\": tag, \"lemma\": lemma, \"ent_type\": ent_type}\n                retokenizer.merge(span, attrs=attrs)\n    <DED><DED><DED>fine_grained = options.get(\"fine_grained\")\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                <IND>attrs = {\"tag\": tag, \"lemma\": lemma, \"ent_type\": ent_type}\n                retokenizer.merge(span, attrs=attrs)  # type: ignore[arg-type]\n    <DED><DED><DED>fine_grained = options.get(\"fine_grained\")\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/lang/af/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/lang/af/__init__.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/lang/af/__init__.py:11:4 Inconsistent override [15]: `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[AfrikaansDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "message": " `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[AfrikaansDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 11,
    "warning_line": "    Defaults = AfrikaansDefaults",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from .stop_words import STOP_WORDS\nfrom ...language import Language\n\n\nclass AfrikaansDefaults(Language.Defaults):\n    stop_words = STOP_WORDS\n",
        "source_code_len": 142,
        "target_code": "from .stop_words import STOP_WORDS\nfrom ...language import Language, BaseDefaults\n\n\nclass AfrikaansDefaults(BaseDefaults):\n    stop_words = STOP_WORDS\n",
        "target_code_len": 151,
        "diff_format": "@@ -1,6 +1,6 @@\n from .stop_words import STOP_WORDS\n-from ...language import Language\n+from ...language import Language, BaseDefaults\n \n \n-class AfrikaansDefaults(Language.Defaults):\n+class AfrikaansDefaults(BaseDefaults):\n     stop_words = STOP_WORDS\n",
        "source_code_with_indent": "from .stop_words import STOP_WORDS\nfrom ...language import Language\n\n\nclass AfrikaansDefaults(Language.Defaults):\n    <IND>stop_words = STOP_WORDS\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from .stop_words import STOP_WORDS\nfrom ...language import Language, BaseDefaults\n\n\nclass AfrikaansDefaults(BaseDefaults):\n    <IND>stop_words = STOP_WORDS\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/lang/am/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/lang/am/__init__.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/lang/am/__init__.py:24:4 Inconsistent override [15]: `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[AmharicDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "message": " `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[AmharicDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 24,
    "warning_line": "    Defaults = AmharicDefaults",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from ..tokenizer_exceptions import BASE_EXCEPTIONS\nfrom ...language import Language\nfrom ...attrs import LANG\n",
        "source_code_len": 110,
        "target_code": "from ..tokenizer_exceptions import BASE_EXCEPTIONS\nfrom ...language import Language, BaseDefaults\nfrom ...attrs import LANG\n",
        "target_code_len": 124,
        "diff_format": "@@ -6,3 +6,3 @@\n from ..tokenizer_exceptions import BASE_EXCEPTIONS\n-from ...language import Language\n+from ...language import Language, BaseDefaults\n from ...attrs import LANG\n",
        "source_code_with_indent": "from ..tokenizer_exceptions import BASE_EXCEPTIONS\nfrom ...language import Language\nfrom ...attrs import LANG\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from ..tokenizer_exceptions import BASE_EXCEPTIONS\nfrom ...language import Language, BaseDefaults\nfrom ...attrs import LANG\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nclass AmharicDefaults(Language.Defaults):\n    lex_attr_getters = dict(Language.Defaults.lex_attr_getters)\n",
        "source_code_len": 107,
        "target_code": "\nclass AmharicDefaults(BaseDefaults):\n    lex_attr_getters = dict(Language.Defaults.lex_attr_getters)\n",
        "target_code_len": 102,
        "diff_format": "@@ -11,3 +11,3 @@\n \n-class AmharicDefaults(Language.Defaults):\n+class AmharicDefaults(BaseDefaults):\n     lex_attr_getters = dict(Language.Defaults.lex_attr_getters)\n",
        "source_code_with_indent": "\nclass AmharicDefaults(Language.Defaults):\n    <IND>lex_attr_getters = dict(Language.Defaults.lex_attr_getters)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nclass AmharicDefaults(BaseDefaults):\n    <IND>lex_attr_getters = dict(Language.Defaults.lex_attr_getters)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/lang/ar/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/lang/ar/__init__.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/lang/ar/__init__.py:17:4 Inconsistent override [15]: `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[ArabicDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "message": " `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[ArabicDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 17,
    "warning_line": "    Defaults = ArabicDefaults",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from .tokenizer_exceptions import TOKENIZER_EXCEPTIONS\nfrom ...language import Language\n\n\nclass ArabicDefaults(Language.Defaults):\n    tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "source_code_len": 179,
        "target_code": "from .tokenizer_exceptions import TOKENIZER_EXCEPTIONS\nfrom ...language import Language, BaseDefaults\n\n\nclass ArabicDefaults(BaseDefaults):\n    tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "target_code_len": 188,
        "diff_format": "@@ -4,6 +4,6 @@\n from .tokenizer_exceptions import TOKENIZER_EXCEPTIONS\n-from ...language import Language\n+from ...language import Language, BaseDefaults\n \n \n-class ArabicDefaults(Language.Defaults):\n+class ArabicDefaults(BaseDefaults):\n     tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "source_code_with_indent": "from .tokenizer_exceptions import TOKENIZER_EXCEPTIONS\nfrom ...language import Language\n\n\nclass ArabicDefaults(Language.Defaults):\n    <IND>tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from .tokenizer_exceptions import TOKENIZER_EXCEPTIONS\nfrom ...language import Language, BaseDefaults\n\n\nclass ArabicDefaults(BaseDefaults):\n    <IND>tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/lang/az/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/lang/az/__init__.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/lang/az/__init__.py:13:4 Inconsistent override [15]: `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[AzerbaijaniDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "message": " `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[AzerbaijaniDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 13,
    "warning_line": "    Defaults = AzerbaijaniDefaults",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from .lex_attrs import LEX_ATTRS\nfrom ...language import Language\n\n\nclass AzerbaijaniDefaults(Language.Defaults):\n    lex_attr_getters = LEX_ATTRS\n",
        "source_code_len": 147,
        "target_code": "from .lex_attrs import LEX_ATTRS\nfrom ...language import Language, BaseDefaults\n\n\nclass AzerbaijaniDefaults(BaseDefaults):\n    lex_attr_getters = LEX_ATTRS\n",
        "target_code_len": 156,
        "diff_format": "@@ -2,6 +2,6 @@\n from .lex_attrs import LEX_ATTRS\n-from ...language import Language\n+from ...language import Language, BaseDefaults\n \n \n-class AzerbaijaniDefaults(Language.Defaults):\n+class AzerbaijaniDefaults(BaseDefaults):\n     lex_attr_getters = LEX_ATTRS\n",
        "source_code_with_indent": "from .lex_attrs import LEX_ATTRS\nfrom ...language import Language\n\n\nclass AzerbaijaniDefaults(Language.Defaults):\n    <IND>lex_attr_getters = LEX_ATTRS\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from .lex_attrs import LEX_ATTRS\nfrom ...language import Language, BaseDefaults\n\n\nclass AzerbaijaniDefaults(BaseDefaults):\n    <IND>lex_attr_getters = LEX_ATTRS\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/lang/bg/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/lang/bg/__init__.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/lang/bg/__init__.py:23:4 Inconsistent override [15]: `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[BulgarianDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "message": " `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[BulgarianDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 23,
    "warning_line": "    Defaults = BulgarianDefaults",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom ...language import Language\nfrom ...attrs import LANG\n",
        "source_code_len": 60,
        "target_code": "\nfrom ...language import Language, BaseDefaults\nfrom ...attrs import LANG\n",
        "target_code_len": 74,
        "diff_format": "@@ -5,3 +5,3 @@\n \n-from ...language import Language\n+from ...language import Language, BaseDefaults\n from ...attrs import LANG\n",
        "source_code_with_indent": "\nfrom ...language import Language\nfrom ...attrs import LANG\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom ...language import Language, BaseDefaults\nfrom ...attrs import LANG\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nclass BulgarianDefaults(Language.Defaults):\n    lex_attr_getters = dict(Language.Defaults.lex_attr_getters)\n",
        "source_code_len": 109,
        "target_code": "\nclass BulgarianDefaults(BaseDefaults):\n    lex_attr_getters = dict(Language.Defaults.lex_attr_getters)\n",
        "target_code_len": 104,
        "diff_format": "@@ -10,3 +10,3 @@\n \n-class BulgarianDefaults(Language.Defaults):\n+class BulgarianDefaults(BaseDefaults):\n     lex_attr_getters = dict(Language.Defaults.lex_attr_getters)\n",
        "source_code_with_indent": "\nclass BulgarianDefaults(Language.Defaults):\n    <IND>lex_attr_getters = dict(Language.Defaults.lex_attr_getters)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nclass BulgarianDefaults(BaseDefaults):\n    <IND>lex_attr_getters = dict(Language.Defaults.lex_attr_getters)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/lang/bn/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/lang/bn/__init__.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/lang/bn/__init__.py:20:4 Inconsistent override [15]: `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[BengaliDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "message": " `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[BengaliDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 20,
    "warning_line": "    Defaults = BengaliDefaults",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from .stop_words import STOP_WORDS\nfrom ...language import Language\nfrom ...pipeline import Lemmatizer\n",
        "source_code_len": 103,
        "target_code": "from .stop_words import STOP_WORDS\nfrom ...language import Language, BaseDefaults\nfrom ...pipeline import Lemmatizer\n",
        "target_code_len": 117,
        "diff_format": "@@ -5,3 +5,3 @@\n from .stop_words import STOP_WORDS\n-from ...language import Language\n+from ...language import Language, BaseDefaults\n from ...pipeline import Lemmatizer\n",
        "source_code_with_indent": "from .stop_words import STOP_WORDS\nfrom ...language import Language\nfrom ...pipeline import Lemmatizer\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from .stop_words import STOP_WORDS\nfrom ...language import Language, BaseDefaults\nfrom ...pipeline import Lemmatizer\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nclass BengaliDefaults(Language.Defaults):\n    tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "source_code_len": 91,
        "target_code": "\nclass BengaliDefaults(BaseDefaults):\n    tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "target_code_len": 86,
        "diff_format": "@@ -9,3 +9,3 @@\n \n-class BengaliDefaults(Language.Defaults):\n+class BengaliDefaults(BaseDefaults):\n     tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "source_code_with_indent": "\nclass BengaliDefaults(Language.Defaults):\n    <IND>tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nclass BengaliDefaults(BaseDefaults):\n    <IND>tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/lang/ca/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/lang/ca/__init__.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/lang/ca/__init__.py:25:4 Inconsistent override [15]: `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[CatalanDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "message": " `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[CatalanDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 25,
    "warning_line": "    Defaults = CatalanDefaults",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from .syntax_iterators import SYNTAX_ITERATORS\nfrom ...language import Language\nfrom .lemmatizer import CatalanLemmatizer\n",
        "source_code_len": 122,
        "target_code": "from .syntax_iterators import SYNTAX_ITERATORS\nfrom ...language import Language, BaseDefaults\nfrom .lemmatizer import CatalanLemmatizer\n",
        "target_code_len": 136,
        "diff_format": "@@ -9,3 +9,3 @@\n from .syntax_iterators import SYNTAX_ITERATORS\n-from ...language import Language\n+from ...language import Language, BaseDefaults\n from .lemmatizer import CatalanLemmatizer\n",
        "source_code_with_indent": "from .syntax_iterators import SYNTAX_ITERATORS\nfrom ...language import Language\nfrom .lemmatizer import CatalanLemmatizer\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from .syntax_iterators import SYNTAX_ITERATORS\nfrom ...language import Language, BaseDefaults\nfrom .lemmatizer import CatalanLemmatizer\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nclass CatalanDefaults(Language.Defaults):\n    tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "source_code_len": 91,
        "target_code": "\nclass CatalanDefaults(BaseDefaults):\n    tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "target_code_len": 86,
        "diff_format": "@@ -13,3 +13,3 @@\n \n-class CatalanDefaults(Language.Defaults):\n+class CatalanDefaults(BaseDefaults):\n     tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "source_code_with_indent": "\nclass CatalanDefaults(Language.Defaults):\n    <IND>tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nclass CatalanDefaults(BaseDefaults):\n    <IND>tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/lang/cs/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/lang/cs/__init__.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/lang/cs/__init__.py:13:4 Inconsistent override [15]: `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[CzechDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "message": " `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[CzechDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 13,
    "warning_line": "    Defaults = CzechDefaults",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from .lex_attrs import LEX_ATTRS\nfrom ...language import Language\n\n\nclass CzechDefaults(Language.Defaults):\n    lex_attr_getters = LEX_ATTRS\n",
        "source_code_len": 141,
        "target_code": "from .lex_attrs import LEX_ATTRS\nfrom ...language import Language, BaseDefaults\n\n\nclass CzechDefaults(BaseDefaults):\n    lex_attr_getters = LEX_ATTRS\n",
        "target_code_len": 150,
        "diff_format": "@@ -2,6 +2,6 @@\n from .lex_attrs import LEX_ATTRS\n-from ...language import Language\n+from ...language import Language, BaseDefaults\n \n \n-class CzechDefaults(Language.Defaults):\n+class CzechDefaults(BaseDefaults):\n     lex_attr_getters = LEX_ATTRS\n",
        "source_code_with_indent": "from .lex_attrs import LEX_ATTRS\nfrom ...language import Language\n\n\nclass CzechDefaults(Language.Defaults):\n    <IND>lex_attr_getters = LEX_ATTRS\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from .lex_attrs import LEX_ATTRS\nfrom ...language import Language, BaseDefaults\n\n\nclass CzechDefaults(BaseDefaults):\n    <IND>lex_attr_getters = LEX_ATTRS\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/lang/da/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/lang/da/__init__.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/lang/da/__init__.py:20:4 Inconsistent override [15]: `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[DanishDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "message": " `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[DanishDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 20,
    "warning_line": "    Defaults = DanishDefaults",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from .syntax_iterators import SYNTAX_ITERATORS\nfrom ...language import Language\n\n\nclass DanishDefaults(Language.Defaults):\n    tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "source_code_len": 171,
        "target_code": "from .syntax_iterators import SYNTAX_ITERATORS\nfrom ...language import Language, BaseDefaults\n\n\nclass DanishDefaults(BaseDefaults):\n    tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "target_code_len": 180,
        "diff_format": "@@ -5,6 +5,6 @@\n from .syntax_iterators import SYNTAX_ITERATORS\n-from ...language import Language\n+from ...language import Language, BaseDefaults\n \n \n-class DanishDefaults(Language.Defaults):\n+class DanishDefaults(BaseDefaults):\n     tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "source_code_with_indent": "from .syntax_iterators import SYNTAX_ITERATORS\nfrom ...language import Language\n\n\nclass DanishDefaults(Language.Defaults):\n    <IND>tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from .syntax_iterators import SYNTAX_ITERATORS\nfrom ...language import Language, BaseDefaults\n\n\nclass DanishDefaults(BaseDefaults):\n    <IND>tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/lang/de/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/lang/de/__init__.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/lang/de/__init__.py:19:4 Inconsistent override [15]: `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[GermanDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "message": " `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[GermanDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 19,
    "warning_line": "    Defaults = GermanDefaults",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from .syntax_iterators import SYNTAX_ITERATORS\nfrom ...language import Language\n\n\nclass GermanDefaults(Language.Defaults):\n    tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "source_code_len": 171,
        "target_code": "from .syntax_iterators import SYNTAX_ITERATORS\nfrom ...language import Language, BaseDefaults\n\n\nclass GermanDefaults(BaseDefaults):\n    tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "target_code_len": 180,
        "diff_format": "@@ -4,6 +4,6 @@\n from .syntax_iterators import SYNTAX_ITERATORS\n-from ...language import Language\n+from ...language import Language, BaseDefaults\n \n \n-class GermanDefaults(Language.Defaults):\n+class GermanDefaults(BaseDefaults):\n     tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "source_code_with_indent": "from .syntax_iterators import SYNTAX_ITERATORS\nfrom ...language import Language\n\n\nclass GermanDefaults(Language.Defaults):\n    <IND>tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from .syntax_iterators import SYNTAX_ITERATORS\nfrom ...language import Language, BaseDefaults\n\n\nclass GermanDefaults(BaseDefaults):\n    <IND>tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/lang/de/syntax_iterators.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/lang/de/syntax_iterators.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/lang/de/syntax_iterators.py:40:12 Incompatible return type [7]: Expected `Iterator[spacy.tokens.span.Span]` but got `typing.Generator[typing.Tuple[int, int, typing.Any], None, None]`.",
    "message": " Expected `Iterator[spacy.tokens.span.Span]` but got `typing.Generator[typing.Tuple[int, int, typing.Any], None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 40,
    "warning_line": "            yield word.left_edge.i, rbracket, np_label",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import Union, Iterator\n\n",
        "source_code_len": 36,
        "target_code": "from typing import Union, Iterator, Tuple\n\n",
        "target_code_len": 43,
        "diff_format": "@@ -1,2 +1,2 @@\n-from typing import Union, Iterator\n+from typing import Union, Iterator, Tuple\n \n",
        "source_code_with_indent": "from typing import Union, Iterator\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Union, Iterator, Tuple\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef noun_chunks(doclike: Union[Doc, Span]) -> Iterator[Span]:\n    \"\"\"Detect base noun phrases from a dependency parse. Works on Doc and Span.\"\"\"\n",
        "source_code_len": 146,
        "target_code": "\ndef noun_chunks(doclike: Union[Doc, Span]) -> Iterator[Tuple[int, int, int]]:\n    \"\"\"Detect base noun phrases from a dependency parse. Works on Doc and Span.\"\"\"\n",
        "target_code_len": 162,
        "diff_format": "@@ -7,3 +7,3 @@\n \n-def noun_chunks(doclike: Union[Doc, Span]) -> Iterator[Span]:\n+def noun_chunks(doclike: Union[Doc, Span]) -> Iterator[Tuple[int, int, int]]:\n     \"\"\"Detect base noun phrases from a dependency parse. Works on Doc and Span.\"\"\"\n",
        "source_code_with_indent": "\ndef noun_chunks(doclike: Union[Doc, Span]) -> Iterator[Span]:\n    <IND>\"\"\"Detect base noun phrases from a dependency parse. Works on Doc and Span.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\ndef noun_chunks(doclike: Union[Doc, Span]) -> Iterator[Tuple[int, int, int]]:\n    <IND>\"\"\"Detect base noun phrases from a dependency parse. Works on Doc and Span.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/lang/el/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/lang/el/__init__.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/lang/el/__init__.py:25:4 Inconsistent override [15]: `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[GreekDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "message": " `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[GreekDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 25,
    "warning_line": "    Defaults = GreekDefaults",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from .lemmatizer import GreekLemmatizer\nfrom ...language import Language\n\n\nclass GreekDefaults(Language.Defaults):\n    tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "source_code_len": 163,
        "target_code": "from .lemmatizer import GreekLemmatizer\nfrom ...language import Language, BaseDefaults\n\n\nclass GreekDefaults(BaseDefaults):\n    tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "target_code_len": 172,
        "diff_format": "@@ -9,6 +9,6 @@\n from .lemmatizer import GreekLemmatizer\n-from ...language import Language\n+from ...language import Language, BaseDefaults\n \n \n-class GreekDefaults(Language.Defaults):\n+class GreekDefaults(BaseDefaults):\n     tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "source_code_with_indent": "from .lemmatizer import GreekLemmatizer\nfrom ...language import Language\n\n\nclass GreekDefaults(Language.Defaults):\n    <IND>tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from .lemmatizer import GreekLemmatizer\nfrom ...language import Language, BaseDefaults\n\n\nclass GreekDefaults(BaseDefaults):\n    <IND>tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/lang/el/syntax_iterators.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/lang/el/syntax_iterators.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/lang/el/syntax_iterators.py:36:24 Incompatible return type [7]: Expected `Iterator[spacy.tokens.span.Span]` but got `typing.Generator[typing.Tuple[int, int, typing.Any], None, None]`.",
    "message": " Expected `Iterator[spacy.tokens.span.Span]` but got `typing.Generator[typing.Tuple[int, int, typing.Any], None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 36,
    "warning_line": "                        yield word.left_edge.i, potential_nmod.i + 1, np_label",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import Union, Iterator\n\n",
        "source_code_len": 36,
        "target_code": "from typing import Union, Iterator, Tuple\n\n",
        "target_code_len": 43,
        "diff_format": "@@ -1,2 +1,2 @@\n-from typing import Union, Iterator\n+from typing import Union, Iterator, Tuple\n \n",
        "source_code_with_indent": "from typing import Union, Iterator\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Union, Iterator, Tuple\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef noun_chunks(doclike: Union[Doc, Span]) -> Iterator[Span]:\n    \"\"\"Detect base noun phrases from a dependency parse. Works on Doc and Span.\"\"\"\n",
        "source_code_len": 146,
        "target_code": "\ndef noun_chunks(doclike: Union[Doc, Span]) -> Iterator[Tuple[int, int, int]]:\n    \"\"\"Detect base noun phrases from a dependency parse. Works on Doc and Span.\"\"\"\n",
        "target_code_len": 162,
        "diff_format": "@@ -7,3 +7,3 @@\n \n-def noun_chunks(doclike: Union[Doc, Span]) -> Iterator[Span]:\n+def noun_chunks(doclike: Union[Doc, Span]) -> Iterator[Tuple[int, int, int]]:\n     \"\"\"Detect base noun phrases from a dependency parse. Works on Doc and Span.\"\"\"\n",
        "source_code_with_indent": "\ndef noun_chunks(doclike: Union[Doc, Span]) -> Iterator[Span]:\n    <IND>\"\"\"Detect base noun phrases from a dependency parse. Works on Doc and Span.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\ndef noun_chunks(doclike: Union[Doc, Span]) -> Iterator[Tuple[int, int, int]]:\n    <IND>\"\"\"Detect base noun phrases from a dependency parse. Works on Doc and Span.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/lang/el/syntax_iterators.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/lang/el/syntax_iterators.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/lang/el/syntax_iterators.py:41:16 Incompatible return type [7]: Expected `Iterator[spacy.tokens.span.Span]` but got `typing.Generator[typing.Tuple[int, int, typing.Any], None, None]`.",
    "message": " Expected `Iterator[spacy.tokens.span.Span]` but got `typing.Generator[typing.Tuple[int, int, typing.Any], None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 41,
    "warning_line": "                yield word.left_edge.i, word.i + 1, np_label",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import Union, Iterator\n\n",
        "source_code_len": 36,
        "target_code": "from typing import Union, Iterator, Tuple\n\n",
        "target_code_len": 43,
        "diff_format": "@@ -1,2 +1,2 @@\n-from typing import Union, Iterator\n+from typing import Union, Iterator, Tuple\n \n",
        "source_code_with_indent": "from typing import Union, Iterator\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Union, Iterator, Tuple\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef noun_chunks(doclike: Union[Doc, Span]) -> Iterator[Span]:\n    \"\"\"Detect base noun phrases from a dependency parse. Works on Doc and Span.\"\"\"\n",
        "source_code_len": 146,
        "target_code": "\ndef noun_chunks(doclike: Union[Doc, Span]) -> Iterator[Tuple[int, int, int]]:\n    \"\"\"Detect base noun phrases from a dependency parse. Works on Doc and Span.\"\"\"\n",
        "target_code_len": 162,
        "diff_format": "@@ -7,3 +7,3 @@\n \n-def noun_chunks(doclike: Union[Doc, Span]) -> Iterator[Span]:\n+def noun_chunks(doclike: Union[Doc, Span]) -> Iterator[Tuple[int, int, int]]:\n     \"\"\"Detect base noun phrases from a dependency parse. Works on Doc and Span.\"\"\"\n",
        "source_code_with_indent": "\ndef noun_chunks(doclike: Union[Doc, Span]) -> Iterator[Span]:\n    <IND>\"\"\"Detect base noun phrases from a dependency parse. Works on Doc and Span.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\ndef noun_chunks(doclike: Union[Doc, Span]) -> Iterator[Tuple[int, int, int]]:\n    <IND>\"\"\"Detect base noun phrases from a dependency parse. Works on Doc and Span.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/lang/el/syntax_iterators.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/lang/el/syntax_iterators.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/lang/el/syntax_iterators.py:50:16 Incompatible return type [7]: Expected `Iterator[spacy.tokens.span.Span]` but got `typing.Generator[typing.Tuple[int, int, typing.Any], None, None]`.",
    "message": " Expected `Iterator[spacy.tokens.span.Span]` but got `typing.Generator[typing.Tuple[int, int, typing.Any], None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 50,
    "warning_line": "                yield word.left_edge.i, word.i + 1, np_label",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import Union, Iterator\n\n",
        "source_code_len": 36,
        "target_code": "from typing import Union, Iterator, Tuple\n\n",
        "target_code_len": 43,
        "diff_format": "@@ -1,2 +1,2 @@\n-from typing import Union, Iterator\n+from typing import Union, Iterator, Tuple\n \n",
        "source_code_with_indent": "from typing import Union, Iterator\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Union, Iterator, Tuple\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef noun_chunks(doclike: Union[Doc, Span]) -> Iterator[Span]:\n    \"\"\"Detect base noun phrases from a dependency parse. Works on Doc and Span.\"\"\"\n",
        "source_code_len": 146,
        "target_code": "\ndef noun_chunks(doclike: Union[Doc, Span]) -> Iterator[Tuple[int, int, int]]:\n    \"\"\"Detect base noun phrases from a dependency parse. Works on Doc and Span.\"\"\"\n",
        "target_code_len": 162,
        "diff_format": "@@ -7,3 +7,3 @@\n \n-def noun_chunks(doclike: Union[Doc, Span]) -> Iterator[Span]:\n+def noun_chunks(doclike: Union[Doc, Span]) -> Iterator[Tuple[int, int, int]]:\n     \"\"\"Detect base noun phrases from a dependency parse. Works on Doc and Span.\"\"\"\n",
        "source_code_with_indent": "\ndef noun_chunks(doclike: Union[Doc, Span]) -> Iterator[Span]:\n    <IND>\"\"\"Detect base noun phrases from a dependency parse. Works on Doc and Span.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\ndef noun_chunks(doclike: Union[Doc, Span]) -> Iterator[Tuple[int, int, int]]:\n    <IND>\"\"\"Detect base noun phrases from a dependency parse. Works on Doc and Span.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/lang/en/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/lang/en/__init__.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/lang/en/__init__.py:23:4 Inconsistent override [15]: `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[EnglishDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "message": " `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[EnglishDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 23,
    "warning_line": "    Defaults = EnglishDefaults",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from .lemmatizer import EnglishLemmatizer\nfrom ...language import Language\n\n\nclass EnglishDefaults(Language.Defaults):\n    tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "source_code_len": 167,
        "target_code": "from .lemmatizer import EnglishLemmatizer\nfrom ...language import Language, BaseDefaults\n\n\nclass EnglishDefaults(BaseDefaults):\n    tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "target_code_len": 176,
        "diff_format": "@@ -9,6 +9,6 @@\n from .lemmatizer import EnglishLemmatizer\n-from ...language import Language\n+from ...language import Language, BaseDefaults\n \n \n-class EnglishDefaults(Language.Defaults):\n+class EnglishDefaults(BaseDefaults):\n     tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "source_code_with_indent": "from .lemmatizer import EnglishLemmatizer\nfrom ...language import Language\n\n\nclass EnglishDefaults(Language.Defaults):\n    <IND>tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from .lemmatizer import EnglishLemmatizer\nfrom ...language import Language, BaseDefaults\n\n\nclass EnglishDefaults(BaseDefaults):\n    <IND>tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/lang/en/syntax_iterators.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/lang/en/syntax_iterators.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/lang/en/syntax_iterators.py:39:12 Incompatible return type [7]: Expected `Iterator[spacy.tokens.span.Span]` but got `typing.Generator[typing.Tuple[int, int, typing.Any], None, None]`.",
    "message": " Expected `Iterator[spacy.tokens.span.Span]` but got `typing.Generator[typing.Tuple[int, int, typing.Any], None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 39,
    "warning_line": "            yield word.left_edge.i, word.i + 1, np_label",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import Union, Iterator\n\n",
        "source_code_len": 36,
        "target_code": "from typing import Union, Iterator, Tuple\n\n",
        "target_code_len": 43,
        "diff_format": "@@ -1,2 +1,2 @@\n-from typing import Union, Iterator\n+from typing import Union, Iterator, Tuple\n \n",
        "source_code_with_indent": "from typing import Union, Iterator\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Union, Iterator, Tuple\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef noun_chunks(doclike: Union[Doc, Span]) -> Iterator[Span]:\n    \"\"\"\n",
        "source_code_len": 71,
        "target_code": "\ndef noun_chunks(doclike: Union[Doc, Span]) -> Iterator[Tuple[int, int, int]]:\n    \"\"\"\n",
        "target_code_len": 87,
        "diff_format": "@@ -7,3 +7,3 @@\n \n-def noun_chunks(doclike: Union[Doc, Span]) -> Iterator[Span]:\n+def noun_chunks(doclike: Union[Doc, Span]) -> Iterator[Tuple[int, int, int]]:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\ndef noun_chunks(doclike: Union[Doc, Span]) -> Iterator[Span]:\n    <IND>",
        "target_code_with_indent": "\ndef noun_chunks(doclike: Union[Doc, Span]) -> Iterator[Tuple[int, int, int]]:\n    <IND>"
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/lang/en/syntax_iterators.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/lang/en/syntax_iterators.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/lang/en/syntax_iterators.py:47:16 Incompatible return type [7]: Expected `Iterator[spacy.tokens.span.Span]` but got `typing.Generator[typing.Tuple[int, int, typing.Any], None, None]`.",
    "message": " Expected `Iterator[spacy.tokens.span.Span]` but got `typing.Generator[typing.Tuple[int, int, typing.Any], None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 47,
    "warning_line": "                yield word.left_edge.i, word.i + 1, np_label",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import Union, Iterator\n\n",
        "source_code_len": 36,
        "target_code": "from typing import Union, Iterator, Tuple\n\n",
        "target_code_len": 43,
        "diff_format": "@@ -1,2 +1,2 @@\n-from typing import Union, Iterator\n+from typing import Union, Iterator, Tuple\n \n",
        "source_code_with_indent": "from typing import Union, Iterator\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Union, Iterator, Tuple\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef noun_chunks(doclike: Union[Doc, Span]) -> Iterator[Span]:\n    \"\"\"\n",
        "source_code_len": 71,
        "target_code": "\ndef noun_chunks(doclike: Union[Doc, Span]) -> Iterator[Tuple[int, int, int]]:\n    \"\"\"\n",
        "target_code_len": 87,
        "diff_format": "@@ -7,3 +7,3 @@\n \n-def noun_chunks(doclike: Union[Doc, Span]) -> Iterator[Span]:\n+def noun_chunks(doclike: Union[Doc, Span]) -> Iterator[Tuple[int, int, int]]:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\ndef noun_chunks(doclike: Union[Doc, Span]) -> Iterator[Span]:\n    <IND>",
        "target_code_with_indent": "\ndef noun_chunks(doclike: Union[Doc, Span]) -> Iterator[Tuple[int, int, int]]:\n    <IND>"
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/lang/es/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/lang/es/__init__.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/lang/es/__init__.py:23:4 Inconsistent override [15]: `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[SpanishDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "message": " `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[SpanishDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 23,
    "warning_line": "    Defaults = SpanishDefaults",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from .punctuation import TOKENIZER_INFIXES, TOKENIZER_SUFFIXES\nfrom ...language import Language\n\n\nclass SpanishDefaults(Language.Defaults):\n    tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "source_code_len": 188,
        "target_code": "from .punctuation import TOKENIZER_INFIXES, TOKENIZER_SUFFIXES\nfrom ...language import Language, BaseDefaults\n\n\nclass SpanishDefaults(BaseDefaults):\n    tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "target_code_len": 197,
        "diff_format": "@@ -8,6 +8,6 @@\n from .punctuation import TOKENIZER_INFIXES, TOKENIZER_SUFFIXES\n-from ...language import Language\n+from ...language import Language, BaseDefaults\n \n \n-class SpanishDefaults(Language.Defaults):\n+class SpanishDefaults(BaseDefaults):\n     tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "source_code_with_indent": "from .punctuation import TOKENIZER_INFIXES, TOKENIZER_SUFFIXES\nfrom ...language import Language\n\n\nclass SpanishDefaults(Language.Defaults):\n    <IND>tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from .punctuation import TOKENIZER_INFIXES, TOKENIZER_SUFFIXES\nfrom ...language import Language, BaseDefaults\n\n\nclass SpanishDefaults(BaseDefaults):\n    <IND>tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/lang/es/lemmatizer.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/lang/es/lemmatizer.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/lang/es/lemmatizer.py:55:46 Incompatible parameter type [6]: Expected `List[str]` for 2nd positional only parameter to call `SpanishLemmatizer.select_rule` but got `typing.Set[str]`.",
    "message": " Expected `List[str]` for 2nd positional only parameter to call `SpanishLemmatizer.select_rule` but got `typing.Set[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 55,
    "warning_line": "            rule = self.select_rule(rule_pos, features)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                rule_pos = pos\n            rule = self.select_rule(rule_pos, features)\n            index = self.lookups.get_table(\"lemma_index\").get(rule_pos, [])\n",
        "source_code_len": 163,
        "target_code": "                rule_pos = pos\n            rule = self.select_rule(rule_pos, list(features))\n            index = self.lookups.get_table(\"lemma_index\").get(rule_pos, [])\n",
        "target_code_len": 169,
        "diff_format": "@@ -54,3 +54,3 @@\n                 rule_pos = pos\n-            rule = self.select_rule(rule_pos, features)\n+            rule = self.select_rule(rule_pos, list(features))\n             index = self.lookups.get_table(\"lemma_index\").get(rule_pos, [])\n",
        "source_code_with_indent": "                <IND>rule_pos = pos\n            <DED>rule = self.select_rule(rule_pos, features)\n            index = self.lookups.get_table(\"lemma_index\").get(rule_pos, [])\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                <IND>rule_pos = pos\n            <DED>rule = self.select_rule(rule_pos, list(features))\n            index = self.lookups.get_table(\"lemma_index\").get(rule_pos, [])\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/lang/es/lemmatizer.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/lang/es/lemmatizer.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/lang/es/lemmatizer.py:193:16 Incompatible return type [7]: Expected `List[str]` but got implicit return value of `None`.",
    "message": " Expected `List[str]` but got implicit return value of `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 193,
    "warning_line": "                return possible_lemmas",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                return possible_lemmas\n\n",
        "source_code_len": 40,
        "target_code": "                return possible_lemmas\n        else:\n            return []\n\n",
        "target_code_len": 76,
        "diff_format": "@@ -193,2 +193,4 @@\n                 return possible_lemmas\n+        else:\n+            return []\n \n",
        "source_code_with_indent": "                <IND>return possible_lemmas\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                <IND>return possible_lemmas\n        <DED><DED>else:\n            <IND>return []\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/lang/es/lemmatizer.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/lang/es/lemmatizer.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/lang/es/lemmatizer.py:321:16 Incompatible return type [7]: Expected `List[str]` but got implicit return value of `None`.",
    "message": " Expected `List[str]` but got implicit return value of `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 321,
    "warning_line": "                return possible_lemmas",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def lemmatize_pron(\n        self, word: str, features: List[str], rule: str, index: List[str]\n    ) -> List[str]:\n",
        "source_code_len": 118,
        "target_code": "    def lemmatize_pron(\n        self, word: str, features: List[str], rule: Optional[str], index: List[str]\n    ) -> List[str]:\n",
        "target_code_len": 128,
        "diff_format": "@@ -270,3 +272,3 @@\n     def lemmatize_pron(\n-        self, word: str, features: List[str], rule: str, index: List[str]\n+        self, word: str, features: List[str], rule: Optional[str], index: List[str]\n     ) -> List[str]:\n",
        "source_code_with_indent": "    <DED>def lemmatize_pron(\n        self, word: str, features: List[str], rule: str, index: List[str]\n    ) -> List[str]:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def lemmatize_pron(\n        self, word: str, features: List[str], rule: Optional[str], index: List[str]\n    ) -> List[str]:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                return possible_lemmas\n\n    def lemmatize_verb(\n        self, word: str, features: List[str], rule: str, index: List[str]\n    ) -> List[str]:\n",
        "source_code_len": 158,
        "target_code": "                return possible_lemmas\n        else:\n            return []\n\n    def lemmatize_verb(\n        self, word: str, features: List[str], rule: Optional[str], index: List[str]\n    ) -> List[str]:\n",
        "target_code_len": 204,
        "diff_format": "@@ -321,5 +323,7 @@\n                 return possible_lemmas\n+        else:\n+            return []\n \n     def lemmatize_verb(\n-        self, word: str, features: List[str], rule: str, index: List[str]\n+        self, word: str, features: List[str], rule: Optional[str], index: List[str]\n     ) -> List[str]:\n",
        "source_code_with_indent": "                <IND>return possible_lemmas\n\n    <DED><DED><DED>def lemmatize_verb(\n        self, word: str, features: List[str], rule: str, index: List[str]\n    ) -> List[str]:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                <IND>return possible_lemmas\n        <DED><DED>else:\n            <IND>return []\n\n    <DED><DED>def lemmatize_verb(\n        self, word: str, features: List[str], rule: Optional[str], index: List[str]\n    ) -> List[str]:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        # Apply lemmatization rules\n        for old, new in self.lookups.get_table(\"lemma_rules\").get(rule, []):\n",
        "source_code_len": 113,
        "target_code": "        # Apply lemmatization rules\n        rule = str(rule or \"\")\n        for old, new in self.lookups.get_table(\"lemma_rules\").get(rule, []):\n",
        "target_code_len": 144,
        "diff_format": "@@ -344,2 +348,3 @@\n         # Apply lemmatization rules\n+        rule = str(rule or \"\")\n         for old, new in self.lookups.get_table(\"lemma_rules\").get(rule, []):\n",
        "source_code_with_indent": "        # Apply lemmatization rules\n        for old, new in self.lookups.get_table(\"lemma_rules\").get(rule, []):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        # Apply lemmatization rules\n        rule = str(rule or \"\")\n        for old, new in self.lookups.get_table(\"lemma_rules\").get(rule, []):\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def lemmatize_verb_pron(\n        self, word: str, features: List[str], rule: str, index: List[str]\n    ) -> List[str]:\n",
        "source_code_len": 123,
        "target_code": "    def lemmatize_verb_pron(\n        self, word: str, features: List[str], rule: Optional[str], index: List[str]\n    ) -> List[str]:\n",
        "target_code_len": 133,
        "diff_format": "@@ -391,3 +396,3 @@\n     def lemmatize_verb_pron(\n-        self, word: str, features: List[str], rule: str, index: List[str]\n+        self, word: str, features: List[str], rule: Optional[str], index: List[str]\n     ) -> List[str]:\n",
        "source_code_with_indent": "    <DED><DED>def lemmatize_verb_pron(\n        self, word: str, features: List[str], rule: str, index: List[str]\n    ) -> List[str]:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED><DED>def lemmatize_verb_pron(\n        self, word: str, features: List[str], rule: Optional[str], index: List[str]\n    ) -> List[str]:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/lang/es/lemmatizer.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/lang/es/lemmatizer.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/lang/es/lemmatizer.py:411:12 Incompatible variable type [9]: rule is declared to have type `str` but is used as type `Optional[str]`.",
    "message": " rule is declared to have type `str` but is used as type `Optional[str]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 411,
    "warning_line": "            rule = self.select_rule(\"verb\", features)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def lemmatize_pron(\n        self, word: str, features: List[str], rule: str, index: List[str]\n    ) -> List[str]:\n",
        "source_code_len": 118,
        "target_code": "    def lemmatize_pron(\n        self, word: str, features: List[str], rule: Optional[str], index: List[str]\n    ) -> List[str]:\n",
        "target_code_len": 128,
        "diff_format": "@@ -270,3 +272,3 @@\n     def lemmatize_pron(\n-        self, word: str, features: List[str], rule: str, index: List[str]\n+        self, word: str, features: List[str], rule: Optional[str], index: List[str]\n     ) -> List[str]:\n",
        "source_code_with_indent": "    <DED>def lemmatize_pron(\n        self, word: str, features: List[str], rule: str, index: List[str]\n    ) -> List[str]:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def lemmatize_pron(\n        self, word: str, features: List[str], rule: Optional[str], index: List[str]\n    ) -> List[str]:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                return possible_lemmas\n\n    def lemmatize_verb(\n        self, word: str, features: List[str], rule: str, index: List[str]\n    ) -> List[str]:\n",
        "source_code_len": 158,
        "target_code": "                return possible_lemmas\n        else:\n            return []\n\n    def lemmatize_verb(\n        self, word: str, features: List[str], rule: Optional[str], index: List[str]\n    ) -> List[str]:\n",
        "target_code_len": 204,
        "diff_format": "@@ -321,5 +323,7 @@\n                 return possible_lemmas\n+        else:\n+            return []\n \n     def lemmatize_verb(\n-        self, word: str, features: List[str], rule: str, index: List[str]\n+        self, word: str, features: List[str], rule: Optional[str], index: List[str]\n     ) -> List[str]:\n",
        "source_code_with_indent": "                <IND>return possible_lemmas\n\n    <DED><DED><DED>def lemmatize_verb(\n        self, word: str, features: List[str], rule: str, index: List[str]\n    ) -> List[str]:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                <IND>return possible_lemmas\n        <DED><DED>else:\n            <IND>return []\n\n    <DED><DED>def lemmatize_verb(\n        self, word: str, features: List[str], rule: Optional[str], index: List[str]\n    ) -> List[str]:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        # Apply lemmatization rules\n        for old, new in self.lookups.get_table(\"lemma_rules\").get(rule, []):\n",
        "source_code_len": 113,
        "target_code": "        # Apply lemmatization rules\n        rule = str(rule or \"\")\n        for old, new in self.lookups.get_table(\"lemma_rules\").get(rule, []):\n",
        "target_code_len": 144,
        "diff_format": "@@ -344,2 +348,3 @@\n         # Apply lemmatization rules\n+        rule = str(rule or \"\")\n         for old, new in self.lookups.get_table(\"lemma_rules\").get(rule, []):\n",
        "source_code_with_indent": "        # Apply lemmatization rules\n        for old, new in self.lookups.get_table(\"lemma_rules\").get(rule, []):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        # Apply lemmatization rules\n        rule = str(rule or \"\")\n        for old, new in self.lookups.get_table(\"lemma_rules\").get(rule, []):\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def lemmatize_verb_pron(\n        self, word: str, features: List[str], rule: str, index: List[str]\n    ) -> List[str]:\n",
        "source_code_len": 123,
        "target_code": "    def lemmatize_verb_pron(\n        self, word: str, features: List[str], rule: Optional[str], index: List[str]\n    ) -> List[str]:\n",
        "target_code_len": 133,
        "diff_format": "@@ -391,3 +396,3 @@\n     def lemmatize_verb_pron(\n-        self, word: str, features: List[str], rule: str, index: List[str]\n+        self, word: str, features: List[str], rule: Optional[str], index: List[str]\n     ) -> List[str]:\n",
        "source_code_with_indent": "    <DED><DED>def lemmatize_verb_pron(\n        self, word: str, features: List[str], rule: str, index: List[str]\n    ) -> List[str]:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED><DED>def lemmatize_verb_pron(\n        self, word: str, features: List[str], rule: Optional[str], index: List[str]\n    ) -> List[str]:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/lang/es/lemmatizer.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/lang/es/lemmatizer.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "spacy/lang/es/lemmatizer.py:413:22 Unsupported operand [58]: `-` is not supported for operand types `List[str]` and `typing.Set[str]`.",
    "message": " `-` is not supported for operand types `List[str]` and `typing.Set[str]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 413,
    "warning_line": "                verb, features - {\"PronType=Prs\"}, rule, index",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "            verb_lemma = self.lemmatize_verb(\n                verb, features - {\"PronType=Prs\"}, rule, index\n            )[0]\n",
        "source_code_len": 126,
        "target_code": "            verb_lemma = self.lemmatize_verb(\n                verb, features - {\"PronType=Prs\"}, rule, index  # type: ignore[operator]\n            )[0]\n",
        "target_code_len": 152,
        "diff_format": "@@ -412,3 +417,3 @@\n             verb_lemma = self.lemmatize_verb(\n-                verb, features - {\"PronType=Prs\"}, rule, index\n+                verb, features - {\"PronType=Prs\"}, rule, index  # type: ignore[operator]\n             )[0]\n",
        "source_code_with_indent": "            verb_lemma = self.lemmatize_verb(\n                verb, features - {\"PronType=Prs\"}, rule, index\n            )[0]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            verb_lemma = self.lemmatize_verb(\n                verb, features - {\"PronType=Prs\"}, rule, index  # type: ignore[operator]\n            )[0]\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/lang/es/lemmatizer.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/lang/es/lemmatizer.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/lang/es/lemmatizer.py:421:16 Incompatible variable type [9]: rule is declared to have type `str` but is used as type `Optional[str]`.",
    "message": " rule is declared to have type `str` but is used as type `Optional[str]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 421,
    "warning_line": "                rule = self.select_rule(\"pron\", features)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def lemmatize_pron(\n        self, word: str, features: List[str], rule: str, index: List[str]\n    ) -> List[str]:\n",
        "source_code_len": 118,
        "target_code": "    def lemmatize_pron(\n        self, word: str, features: List[str], rule: Optional[str], index: List[str]\n    ) -> List[str]:\n",
        "target_code_len": 128,
        "diff_format": "@@ -270,3 +272,3 @@\n     def lemmatize_pron(\n-        self, word: str, features: List[str], rule: str, index: List[str]\n+        self, word: str, features: List[str], rule: Optional[str], index: List[str]\n     ) -> List[str]:\n",
        "source_code_with_indent": "    <DED>def lemmatize_pron(\n        self, word: str, features: List[str], rule: str, index: List[str]\n    ) -> List[str]:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def lemmatize_pron(\n        self, word: str, features: List[str], rule: Optional[str], index: List[str]\n    ) -> List[str]:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                return possible_lemmas\n\n    def lemmatize_verb(\n        self, word: str, features: List[str], rule: str, index: List[str]\n    ) -> List[str]:\n",
        "source_code_len": 158,
        "target_code": "                return possible_lemmas\n        else:\n            return []\n\n    def lemmatize_verb(\n        self, word: str, features: List[str], rule: Optional[str], index: List[str]\n    ) -> List[str]:\n",
        "target_code_len": 204,
        "diff_format": "@@ -321,5 +323,7 @@\n                 return possible_lemmas\n+        else:\n+            return []\n \n     def lemmatize_verb(\n-        self, word: str, features: List[str], rule: str, index: List[str]\n+        self, word: str, features: List[str], rule: Optional[str], index: List[str]\n     ) -> List[str]:\n",
        "source_code_with_indent": "                <IND>return possible_lemmas\n\n    <DED><DED><DED>def lemmatize_verb(\n        self, word: str, features: List[str], rule: str, index: List[str]\n    ) -> List[str]:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                <IND>return possible_lemmas\n        <DED><DED>else:\n            <IND>return []\n\n    <DED><DED>def lemmatize_verb(\n        self, word: str, features: List[str], rule: Optional[str], index: List[str]\n    ) -> List[str]:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        # Apply lemmatization rules\n        for old, new in self.lookups.get_table(\"lemma_rules\").get(rule, []):\n",
        "source_code_len": 113,
        "target_code": "        # Apply lemmatization rules\n        rule = str(rule or \"\")\n        for old, new in self.lookups.get_table(\"lemma_rules\").get(rule, []):\n",
        "target_code_len": 144,
        "diff_format": "@@ -344,2 +348,3 @@\n         # Apply lemmatization rules\n+        rule = str(rule or \"\")\n         for old, new in self.lookups.get_table(\"lemma_rules\").get(rule, []):\n",
        "source_code_with_indent": "        # Apply lemmatization rules\n        for old, new in self.lookups.get_table(\"lemma_rules\").get(rule, []):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        # Apply lemmatization rules\n        rule = str(rule or \"\")\n        for old, new in self.lookups.get_table(\"lemma_rules\").get(rule, []):\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def lemmatize_verb_pron(\n        self, word: str, features: List[str], rule: str, index: List[str]\n    ) -> List[str]:\n",
        "source_code_len": 123,
        "target_code": "    def lemmatize_verb_pron(\n        self, word: str, features: List[str], rule: Optional[str], index: List[str]\n    ) -> List[str]:\n",
        "target_code_len": 133,
        "diff_format": "@@ -391,3 +396,3 @@\n     def lemmatize_verb_pron(\n-        self, word: str, features: List[str], rule: str, index: List[str]\n+        self, word: str, features: List[str], rule: Optional[str], index: List[str]\n     ) -> List[str]:\n",
        "source_code_with_indent": "    <DED><DED>def lemmatize_verb_pron(\n        self, word: str, features: List[str], rule: str, index: List[str]\n    ) -> List[str]:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED><DED>def lemmatize_verb_pron(\n        self, word: str, features: List[str], rule: Optional[str], index: List[str]\n    ) -> List[str]:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/lang/et/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/lang/et/__init__.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/lang/et/__init__.py:11:4 Inconsistent override [15]: `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[EstonianDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "message": " `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[EstonianDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 11,
    "warning_line": "    Defaults = EstonianDefaults",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from .stop_words import STOP_WORDS\nfrom ...language import Language\n\n\nclass EstonianDefaults(Language.Defaults):\n    stop_words = STOP_WORDS\n",
        "source_code_len": 141,
        "target_code": "from .stop_words import STOP_WORDS\nfrom ...language import Language, BaseDefaults\n\n\nclass EstonianDefaults(BaseDefaults):\n    stop_words = STOP_WORDS\n",
        "target_code_len": 150,
        "diff_format": "@@ -1,6 +1,6 @@\n from .stop_words import STOP_WORDS\n-from ...language import Language\n+from ...language import Language, BaseDefaults\n \n \n-class EstonianDefaults(Language.Defaults):\n+class EstonianDefaults(BaseDefaults):\n     stop_words = STOP_WORDS\n",
        "source_code_with_indent": "from .stop_words import STOP_WORDS\nfrom ...language import Language\n\n\nclass EstonianDefaults(Language.Defaults):\n    <IND>stop_words = STOP_WORDS\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from .stop_words import STOP_WORDS\nfrom ...language import Language, BaseDefaults\n\n\nclass EstonianDefaults(BaseDefaults):\n    <IND>stop_words = STOP_WORDS\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/lang/eu/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/lang/eu/__init__.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/lang/eu/__init__.py:15:4 Inconsistent override [15]: `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[BasqueDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "message": " `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[BasqueDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 15,
    "warning_line": "    Defaults = BasqueDefaults",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from .punctuation import TOKENIZER_SUFFIXES\nfrom ...language import Language\n\n\nclass BasqueDefaults(Language.Defaults):\n    suffixes = TOKENIZER_SUFFIXES\n",
        "source_code_len": 154,
        "target_code": "from .punctuation import TOKENIZER_SUFFIXES\nfrom ...language import Language, BaseDefaults\n\n\nclass BasqueDefaults(BaseDefaults):\n    suffixes = TOKENIZER_SUFFIXES\n",
        "target_code_len": 163,
        "diff_format": "@@ -3,6 +3,6 @@\n from .punctuation import TOKENIZER_SUFFIXES\n-from ...language import Language\n+from ...language import Language, BaseDefaults\n \n \n-class BasqueDefaults(Language.Defaults):\n+class BasqueDefaults(BaseDefaults):\n     suffixes = TOKENIZER_SUFFIXES\n",
        "source_code_with_indent": "from .punctuation import TOKENIZER_SUFFIXES\nfrom ...language import Language\n\n\nclass BasqueDefaults(Language.Defaults):\n    <IND>suffixes = TOKENIZER_SUFFIXES\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from .punctuation import TOKENIZER_SUFFIXES\nfrom ...language import Language, BaseDefaults\n\n\nclass BasqueDefaults(BaseDefaults):\n    <IND>suffixes = TOKENIZER_SUFFIXES\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/lang/fa/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/lang/fa/__init__.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/lang/fa/__init__.py:23:4 Inconsistent override [15]: `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[PersianDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "message": " `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[PersianDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 23,
    "warning_line": "    Defaults = PersianDefaults",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from .syntax_iterators import SYNTAX_ITERATORS\nfrom ...language import Language\nfrom ...pipeline import Lemmatizer\n",
        "source_code_len": 115,
        "target_code": "from .syntax_iterators import SYNTAX_ITERATORS\nfrom ...language import Language, BaseDefaults\nfrom ...pipeline import Lemmatizer\n",
        "target_code_len": 129,
        "diff_format": "@@ -7,3 +7,3 @@\n from .syntax_iterators import SYNTAX_ITERATORS\n-from ...language import Language\n+from ...language import Language, BaseDefaults\n from ...pipeline import Lemmatizer\n",
        "source_code_with_indent": "from .syntax_iterators import SYNTAX_ITERATORS\nfrom ...language import Language\nfrom ...pipeline import Lemmatizer\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from .syntax_iterators import SYNTAX_ITERATORS\nfrom ...language import Language, BaseDefaults\nfrom ...pipeline import Lemmatizer\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nclass PersianDefaults(Language.Defaults):\n    tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "source_code_len": 91,
        "target_code": "\nclass PersianDefaults(BaseDefaults):\n    tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "target_code_len": 86,
        "diff_format": "@@ -11,3 +11,3 @@\n \n-class PersianDefaults(Language.Defaults):\n+class PersianDefaults(BaseDefaults):\n     tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "source_code_with_indent": "\nclass PersianDefaults(Language.Defaults):\n    <IND>tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nclass PersianDefaults(BaseDefaults):\n    <IND>tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/lang/fi/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/lang/fi/__init__.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/lang/fi/__init__.py:18:4 Inconsistent override [15]: `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[FinnishDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "message": " `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[FinnishDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 18,
    "warning_line": "    Defaults = FinnishDefaults",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from .punctuation import TOKENIZER_INFIXES, TOKENIZER_SUFFIXES\nfrom ...language import Language\n\n\nclass FinnishDefaults(Language.Defaults):\n    infixes = TOKENIZER_INFIXES\n",
        "source_code_len": 172,
        "target_code": "from .punctuation import TOKENIZER_INFIXES, TOKENIZER_SUFFIXES\nfrom ...language import Language, BaseDefaults\n\n\nclass FinnishDefaults(BaseDefaults):\n    infixes = TOKENIZER_INFIXES\n",
        "target_code_len": 181,
        "diff_format": "@@ -4,6 +4,6 @@\n from .punctuation import TOKENIZER_INFIXES, TOKENIZER_SUFFIXES\n-from ...language import Language\n+from ...language import Language, BaseDefaults\n \n \n-class FinnishDefaults(Language.Defaults):\n+class FinnishDefaults(BaseDefaults):\n     infixes = TOKENIZER_INFIXES\n",
        "source_code_with_indent": "from .punctuation import TOKENIZER_INFIXES, TOKENIZER_SUFFIXES\nfrom ...language import Language\n\n\nclass FinnishDefaults(Language.Defaults):\n    <IND>infixes = TOKENIZER_INFIXES\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from .punctuation import TOKENIZER_INFIXES, TOKENIZER_SUFFIXES\nfrom ...language import Language, BaseDefaults\n\n\nclass FinnishDefaults(BaseDefaults):\n    <IND>infixes = TOKENIZER_INFIXES\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/lang/fr/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/lang/fr/__init__.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/lang/fr/__init__.py:28:4 Inconsistent override [15]: `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[FrenchDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "message": " `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[FrenchDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 28,
    "warning_line": "    Defaults = FrenchDefaults",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from .lemmatizer import FrenchLemmatizer\nfrom ...language import Language\n\n\nclass FrenchDefaults(Language.Defaults):\n    tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "source_code_len": 165,
        "target_code": "from .lemmatizer import FrenchLemmatizer\nfrom ...language import Language, BaseDefaults\n\n\nclass FrenchDefaults(BaseDefaults):\n    tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "target_code_len": 174,
        "diff_format": "@@ -11,6 +11,6 @@\n from .lemmatizer import FrenchLemmatizer\n-from ...language import Language\n+from ...language import Language, BaseDefaults\n \n \n-class FrenchDefaults(Language.Defaults):\n+class FrenchDefaults(BaseDefaults):\n     tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "source_code_with_indent": "from .lemmatizer import FrenchLemmatizer\nfrom ...language import Language\n\n\nclass FrenchDefaults(Language.Defaults):\n    <IND>tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from .lemmatizer import FrenchLemmatizer\nfrom ...language import Language, BaseDefaults\n\n\nclass FrenchDefaults(BaseDefaults):\n    <IND>tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/lang/fr/syntax_iterators.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/lang/fr/syntax_iterators.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/lang/fr/syntax_iterators.py:28:12 Incompatible return type [7]: Expected `Iterator[spacy.tokens.span.Span]` but got `typing.Generator[typing.Tuple[int, int, typing.Any], None, None]`.",
    "message": " Expected `Iterator[spacy.tokens.span.Span]` but got `typing.Generator[typing.Tuple[int, int, typing.Any], None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 28,
    "warning_line": "            yield word.left_edge.i, word.right_edge.i + 1, np_label",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import Union, Iterator\n\n",
        "source_code_len": 36,
        "target_code": "from typing import Union, Iterator, Tuple\n\n",
        "target_code_len": 43,
        "diff_format": "@@ -1,2 +1,2 @@\n-from typing import Union, Iterator\n+from typing import Union, Iterator, Tuple\n \n",
        "source_code_with_indent": "from typing import Union, Iterator\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Union, Iterator, Tuple\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef noun_chunks(doclike: Union[Doc, Span]) -> Iterator[Span]:\n    \"\"\"Detect base noun phrases from a dependency parse. Works on Doc and Span.\"\"\"\n",
        "source_code_len": 146,
        "target_code": "\ndef noun_chunks(doclike: Union[Doc, Span]) -> Iterator[Tuple[int, int, int]]:\n    \"\"\"Detect base noun phrases from a dependency parse. Works on Doc and Span.\"\"\"\n",
        "target_code_len": 162,
        "diff_format": "@@ -7,3 +7,3 @@\n \n-def noun_chunks(doclike: Union[Doc, Span]) -> Iterator[Span]:\n+def noun_chunks(doclike: Union[Doc, Span]) -> Iterator[Tuple[int, int, int]]:\n     \"\"\"Detect base noun phrases from a dependency parse. Works on Doc and Span.\"\"\"\n",
        "source_code_with_indent": "\ndef noun_chunks(doclike: Union[Doc, Span]) -> Iterator[Span]:\n    <IND>\"\"\"Detect base noun phrases from a dependency parse. Works on Doc and Span.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\ndef noun_chunks(doclike: Union[Doc, Span]) -> Iterator[Tuple[int, int, int]]:\n    <IND>\"\"\"Detect base noun phrases from a dependency parse. Works on Doc and Span.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/lang/fr/syntax_iterators.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/lang/fr/syntax_iterators.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/lang/fr/syntax_iterators.py:36:16 Incompatible return type [7]: Expected `Iterator[spacy.tokens.span.Span]` but got `typing.Generator[typing.Tuple[int, int, typing.Any], None, None]`.",
    "message": " Expected `Iterator[spacy.tokens.span.Span]` but got `typing.Generator[typing.Tuple[int, int, typing.Any], None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 36,
    "warning_line": "                yield word.left_edge.i, word.right_edge.i + 1, np_label",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import Union, Iterator\n\n",
        "source_code_len": 36,
        "target_code": "from typing import Union, Iterator, Tuple\n\n",
        "target_code_len": 43,
        "diff_format": "@@ -1,2 +1,2 @@\n-from typing import Union, Iterator\n+from typing import Union, Iterator, Tuple\n \n",
        "source_code_with_indent": "from typing import Union, Iterator\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Union, Iterator, Tuple\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef noun_chunks(doclike: Union[Doc, Span]) -> Iterator[Span]:\n    \"\"\"Detect base noun phrases from a dependency parse. Works on Doc and Span.\"\"\"\n",
        "source_code_len": 146,
        "target_code": "\ndef noun_chunks(doclike: Union[Doc, Span]) -> Iterator[Tuple[int, int, int]]:\n    \"\"\"Detect base noun phrases from a dependency parse. Works on Doc and Span.\"\"\"\n",
        "target_code_len": 162,
        "diff_format": "@@ -7,3 +7,3 @@\n \n-def noun_chunks(doclike: Union[Doc, Span]) -> Iterator[Span]:\n+def noun_chunks(doclike: Union[Doc, Span]) -> Iterator[Tuple[int, int, int]]:\n     \"\"\"Detect base noun phrases from a dependency parse. Works on Doc and Span.\"\"\"\n",
        "source_code_with_indent": "\ndef noun_chunks(doclike: Union[Doc, Span]) -> Iterator[Span]:\n    <IND>\"\"\"Detect base noun phrases from a dependency parse. Works on Doc and Span.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\ndef noun_chunks(doclike: Union[Doc, Span]) -> Iterator[Tuple[int, int, int]]:\n    <IND>\"\"\"Detect base noun phrases from a dependency parse. Works on Doc and Span.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/lang/ga/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/lang/ga/__init__.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/lang/ga/__init__.py:13:4 Inconsistent override [15]: `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[IrishDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "message": " `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[IrishDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 13,
    "warning_line": "    Defaults = IrishDefaults",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from .stop_words import STOP_WORDS\nfrom ...language import Language\n\n\nclass IrishDefaults(Language.Defaults):\n    tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "source_code_len": 158,
        "target_code": "from .stop_words import STOP_WORDS\nfrom ...language import Language, BaseDefaults\n\n\nclass IrishDefaults(BaseDefaults):\n    tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "target_code_len": 167,
        "diff_format": "@@ -2,6 +2,6 @@\n from .stop_words import STOP_WORDS\n-from ...language import Language\n+from ...language import Language, BaseDefaults\n \n \n-class IrishDefaults(Language.Defaults):\n+class IrishDefaults(BaseDefaults):\n     tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "source_code_with_indent": "from .stop_words import STOP_WORDS\nfrom ...language import Language\n\n\nclass IrishDefaults(Language.Defaults):\n    <IND>tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from .stop_words import STOP_WORDS\nfrom ...language import Language, BaseDefaults\n\n\nclass IrishDefaults(BaseDefaults):\n    <IND>tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/lang/grc/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/lang/grc/__init__.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/lang/grc/__init__.py:15:4 Inconsistent override [15]: `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[AncientGreekDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "message": " `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[AncientGreekDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 15,
    "warning_line": "    Defaults = AncientGreekDefaults",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from .lex_attrs import LEX_ATTRS\nfrom ...language import Language\n\n\nclass AncientGreekDefaults(Language.Defaults):\n    tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "source_code_len": 163,
        "target_code": "from .lex_attrs import LEX_ATTRS\nfrom ...language import Language, BaseDefaults\n\n\nclass AncientGreekDefaults(BaseDefaults):\n    tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "target_code_len": 172,
        "diff_format": "@@ -3,6 +3,6 @@\n from .lex_attrs import LEX_ATTRS\n-from ...language import Language\n+from ...language import Language, BaseDefaults\n \n \n-class AncientGreekDefaults(Language.Defaults):\n+class AncientGreekDefaults(BaseDefaults):\n     tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "source_code_with_indent": "from .lex_attrs import LEX_ATTRS\nfrom ...language import Language\n\n\nclass AncientGreekDefaults(Language.Defaults):\n    <IND>tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from .lex_attrs import LEX_ATTRS\nfrom ...language import Language, BaseDefaults\n\n\nclass AncientGreekDefaults(BaseDefaults):\n    <IND>tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/lang/gu/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/lang/gu/__init__.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/lang/gu/__init__.py:11:4 Inconsistent override [15]: `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[GujaratiDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "message": " `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[GujaratiDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 11,
    "warning_line": "    Defaults = GujaratiDefaults",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from .stop_words import STOP_WORDS\nfrom ...language import Language\n\n\nclass GujaratiDefaults(Language.Defaults):\n    stop_words = STOP_WORDS\n",
        "source_code_len": 141,
        "target_code": "from .stop_words import STOP_WORDS\nfrom ...language import Language, BaseDefaults\n\n\nclass GujaratiDefaults(BaseDefaults):\n    stop_words = STOP_WORDS\n",
        "target_code_len": 150,
        "diff_format": "@@ -1,6 +1,6 @@\n from .stop_words import STOP_WORDS\n-from ...language import Language\n+from ...language import Language, BaseDefaults\n \n \n-class GujaratiDefaults(Language.Defaults):\n+class GujaratiDefaults(BaseDefaults):\n     stop_words = STOP_WORDS\n",
        "source_code_with_indent": "from .stop_words import STOP_WORDS\nfrom ...language import Language\n\n\nclass GujaratiDefaults(Language.Defaults):\n    <IND>stop_words = STOP_WORDS\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from .stop_words import STOP_WORDS\nfrom ...language import Language, BaseDefaults\n\n\nclass GujaratiDefaults(BaseDefaults):\n    <IND>stop_words = STOP_WORDS\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/lang/he/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/lang/he/__init__.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/lang/he/__init__.py:14:4 Inconsistent override [15]: `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[HebrewDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "message": " `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[HebrewDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 14,
    "warning_line": "    Defaults = HebrewDefaults",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from .lex_attrs import LEX_ATTRS\nfrom ...language import Language\n\n\nclass HebrewDefaults(Language.Defaults):\n    stop_words = STOP_WORDS\n",
        "source_code_len": 137,
        "target_code": "from .lex_attrs import LEX_ATTRS\nfrom ...language import Language, BaseDefaults\n\n\nclass HebrewDefaults(BaseDefaults):\n    stop_words = STOP_WORDS\n",
        "target_code_len": 146,
        "diff_format": "@@ -2,6 +2,6 @@\n from .lex_attrs import LEX_ATTRS\n-from ...language import Language\n+from ...language import Language, BaseDefaults\n \n \n-class HebrewDefaults(Language.Defaults):\n+class HebrewDefaults(BaseDefaults):\n     stop_words = STOP_WORDS\n",
        "source_code_with_indent": "from .lex_attrs import LEX_ATTRS\nfrom ...language import Language\n\n\nclass HebrewDefaults(Language.Defaults):\n    <IND>stop_words = STOP_WORDS\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from .lex_attrs import LEX_ATTRS\nfrom ...language import Language, BaseDefaults\n\n\nclass HebrewDefaults(BaseDefaults):\n    <IND>stop_words = STOP_WORDS\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/lang/hi/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/lang/hi/__init__.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/lang/hi/__init__.py:13:4 Inconsistent override [15]: `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[HindiDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "message": " `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[HindiDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 13,
    "warning_line": "    Defaults = HindiDefaults",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from .lex_attrs import LEX_ATTRS\nfrom ...language import Language\n\n\nclass HindiDefaults(Language.Defaults):\n    stop_words = STOP_WORDS\n",
        "source_code_len": 136,
        "target_code": "from .lex_attrs import LEX_ATTRS\nfrom ...language import Language, BaseDefaults\n\n\nclass HindiDefaults(BaseDefaults):\n    stop_words = STOP_WORDS\n",
        "target_code_len": 145,
        "diff_format": "@@ -2,6 +2,6 @@\n from .lex_attrs import LEX_ATTRS\n-from ...language import Language\n+from ...language import Language, BaseDefaults\n \n \n-class HindiDefaults(Language.Defaults):\n+class HindiDefaults(BaseDefaults):\n     stop_words = STOP_WORDS\n",
        "source_code_with_indent": "from .lex_attrs import LEX_ATTRS\nfrom ...language import Language\n\n\nclass HindiDefaults(Language.Defaults):\n    <IND>stop_words = STOP_WORDS\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from .lex_attrs import LEX_ATTRS\nfrom ...language import Language, BaseDefaults\n\n\nclass HindiDefaults(BaseDefaults):\n    <IND>stop_words = STOP_WORDS\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/lang/hr/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/lang/hr/__init__.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/lang/hr/__init__.py:11:4 Inconsistent override [15]: `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[CroatianDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "message": " `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[CroatianDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 11,
    "warning_line": "    Defaults = CroatianDefaults",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from .stop_words import STOP_WORDS\nfrom ...language import Language\n\n\nclass CroatianDefaults(Language.Defaults):\n    stop_words = STOP_WORDS\n",
        "source_code_len": 141,
        "target_code": "from .stop_words import STOP_WORDS\nfrom ...language import Language, BaseDefaults\n\n\nclass CroatianDefaults(BaseDefaults):\n    stop_words = STOP_WORDS\n",
        "target_code_len": 150,
        "diff_format": "@@ -1,6 +1,6 @@\n from .stop_words import STOP_WORDS\n-from ...language import Language\n+from ...language import Language, BaseDefaults\n \n \n-class CroatianDefaults(Language.Defaults):\n+class CroatianDefaults(BaseDefaults):\n     stop_words = STOP_WORDS\n",
        "source_code_with_indent": "from .stop_words import STOP_WORDS\nfrom ...language import Language\n\n\nclass CroatianDefaults(Language.Defaults):\n    <IND>stop_words = STOP_WORDS\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from .stop_words import STOP_WORDS\nfrom ...language import Language, BaseDefaults\n\n\nclass CroatianDefaults(BaseDefaults):\n    <IND>stop_words = STOP_WORDS\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/lang/hu/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/lang/hu/__init__.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/lang/hu/__init__.py:18:4 Inconsistent override [15]: `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[HungarianDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "message": " `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[HungarianDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 18,
    "warning_line": "    Defaults = HungarianDefaults",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from .stop_words import STOP_WORDS\nfrom ...language import Language\n\n\nclass HungarianDefaults(Language.Defaults):\n    tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "source_code_len": 162,
        "target_code": "from .stop_words import STOP_WORDS\nfrom ...language import Language, BaseDefaults\n\n\nclass HungarianDefaults(BaseDefaults):\n    tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "target_code_len": 171,
        "diff_format": "@@ -3,6 +3,6 @@\n from .stop_words import STOP_WORDS\n-from ...language import Language\n+from ...language import Language, BaseDefaults\n \n \n-class HungarianDefaults(Language.Defaults):\n+class HungarianDefaults(BaseDefaults):\n     tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "source_code_with_indent": "from .stop_words import STOP_WORDS\nfrom ...language import Language\n\n\nclass HungarianDefaults(Language.Defaults):\n    <IND>tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from .stop_words import STOP_WORDS\nfrom ...language import Language, BaseDefaults\n\n\nclass HungarianDefaults(BaseDefaults):\n    <IND>tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/lang/hy/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/lang/hy/__init__.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/lang/hy/__init__.py:13:4 Inconsistent override [15]: `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[ArmenianDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "message": " `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[ArmenianDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 13,
    "warning_line": "    Defaults = ArmenianDefaults",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from .lex_attrs import LEX_ATTRS\nfrom ...language import Language\n\n\nclass ArmenianDefaults(Language.Defaults):\n    lex_attr_getters = LEX_ATTRS\n",
        "source_code_len": 144,
        "target_code": "from .lex_attrs import LEX_ATTRS\nfrom ...language import Language, BaseDefaults\n\n\nclass ArmenianDefaults(BaseDefaults):\n    lex_attr_getters = LEX_ATTRS\n",
        "target_code_len": 153,
        "diff_format": "@@ -2,6 +2,6 @@\n from .lex_attrs import LEX_ATTRS\n-from ...language import Language\n+from ...language import Language, BaseDefaults\n \n \n-class ArmenianDefaults(Language.Defaults):\n+class ArmenianDefaults(BaseDefaults):\n     lex_attr_getters = LEX_ATTRS\n",
        "source_code_with_indent": "from .lex_attrs import LEX_ATTRS\nfrom ...language import Language\n\n\nclass ArmenianDefaults(Language.Defaults):\n    <IND>lex_attr_getters = LEX_ATTRS\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from .lex_attrs import LEX_ATTRS\nfrom ...language import Language, BaseDefaults\n\n\nclass ArmenianDefaults(BaseDefaults):\n    <IND>lex_attr_getters = LEX_ATTRS\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/lang/id/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/lang/id/__init__.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/lang/id/__init__.py:21:4 Inconsistent override [15]: `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[IndonesianDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "message": " `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[IndonesianDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 21,
    "warning_line": "    Defaults = IndonesianDefaults",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from .syntax_iterators import SYNTAX_ITERATORS\nfrom ...language import Language\n\n\nclass IndonesianDefaults(Language.Defaults):\n    tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "source_code_len": 175,
        "target_code": "from .syntax_iterators import SYNTAX_ITERATORS\nfrom ...language import Language, BaseDefaults\n\n\nclass IndonesianDefaults(BaseDefaults):\n    tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "target_code_len": 184,
        "diff_format": "@@ -5,6 +5,6 @@\n from .syntax_iterators import SYNTAX_ITERATORS\n-from ...language import Language\n+from ...language import Language, BaseDefaults\n \n \n-class IndonesianDefaults(Language.Defaults):\n+class IndonesianDefaults(BaseDefaults):\n     tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "source_code_with_indent": "from .syntax_iterators import SYNTAX_ITERATORS\nfrom ...language import Language\n\n\nclass IndonesianDefaults(Language.Defaults):\n    <IND>tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from .syntax_iterators import SYNTAX_ITERATORS\nfrom ...language import Language, BaseDefaults\n\n\nclass IndonesianDefaults(BaseDefaults):\n    <IND>tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/lang/id/syntax_iterators.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/lang/id/syntax_iterators.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/lang/id/syntax_iterators.py:30:12 Incompatible return type [7]: Expected `Iterator[spacy.tokens.span.Span]` but got `typing.Generator[typing.Tuple[int, int, typing.Any], None, None]`.",
    "message": " Expected `Iterator[spacy.tokens.span.Span]` but got `typing.Generator[typing.Tuple[int, int, typing.Any], None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 30,
    "warning_line": "            yield word.left_edge.i, word.right_edge.i + 1, np_label",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import Union, Iterator\n\n",
        "source_code_len": 36,
        "target_code": "from typing import Union, Iterator, Tuple\n\n",
        "target_code_len": 43,
        "diff_format": "@@ -1,2 +1,2 @@\n-from typing import Union, Iterator\n+from typing import Union, Iterator, Tuple\n \n",
        "source_code_with_indent": "from typing import Union, Iterator\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Union, Iterator, Tuple\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef noun_chunks(doclike: Union[Doc, Span]) -> Iterator[Span]:\n    \"\"\"\n",
        "source_code_len": 71,
        "target_code": "\ndef noun_chunks(doclike: Union[Doc, Span]) -> Iterator[Tuple[int, int, int]]:\n    \"\"\"\n",
        "target_code_len": 87,
        "diff_format": "@@ -7,3 +7,3 @@\n \n-def noun_chunks(doclike: Union[Doc, Span]) -> Iterator[Span]:\n+def noun_chunks(doclike: Union[Doc, Span]) -> Iterator[Tuple[int, int, int]]:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\ndef noun_chunks(doclike: Union[Doc, Span]) -> Iterator[Span]:\n    <IND>",
        "target_code_with_indent": "\ndef noun_chunks(doclike: Union[Doc, Span]) -> Iterator[Tuple[int, int, int]]:\n    <IND>"
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/lang/id/syntax_iterators.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/lang/id/syntax_iterators.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/lang/id/syntax_iterators.py:38:16 Incompatible return type [7]: Expected `Iterator[spacy.tokens.span.Span]` but got `typing.Generator[typing.Tuple[int, int, typing.Any], None, None]`.",
    "message": " Expected `Iterator[spacy.tokens.span.Span]` but got `typing.Generator[typing.Tuple[int, int, typing.Any], None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 38,
    "warning_line": "                yield word.left_edge.i, word.right_edge.i + 1, np_label",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import Union, Iterator\n\n",
        "source_code_len": 36,
        "target_code": "from typing import Union, Iterator, Tuple\n\n",
        "target_code_len": 43,
        "diff_format": "@@ -1,2 +1,2 @@\n-from typing import Union, Iterator\n+from typing import Union, Iterator, Tuple\n \n",
        "source_code_with_indent": "from typing import Union, Iterator\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Union, Iterator, Tuple\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef noun_chunks(doclike: Union[Doc, Span]) -> Iterator[Span]:\n    \"\"\"\n",
        "source_code_len": 71,
        "target_code": "\ndef noun_chunks(doclike: Union[Doc, Span]) -> Iterator[Tuple[int, int, int]]:\n    \"\"\"\n",
        "target_code_len": 87,
        "diff_format": "@@ -7,3 +7,3 @@\n \n-def noun_chunks(doclike: Union[Doc, Span]) -> Iterator[Span]:\n+def noun_chunks(doclike: Union[Doc, Span]) -> Iterator[Tuple[int, int, int]]:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\ndef noun_chunks(doclike: Union[Doc, Span]) -> Iterator[Span]:\n    <IND>",
        "target_code_with_indent": "\ndef noun_chunks(doclike: Union[Doc, Span]) -> Iterator[Tuple[int, int, int]]:\n    <IND>"
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/lang/is/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/lang/is/__init__.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/lang/is/__init__.py:11:4 Inconsistent override [15]: `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[IcelandicDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "message": " `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[IcelandicDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 11,
    "warning_line": "    Defaults = IcelandicDefaults",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from .stop_words import STOP_WORDS\nfrom ...language import Language\n\n\nclass IcelandicDefaults(Language.Defaults):\n    stop_words = STOP_WORDS\n",
        "source_code_len": 142,
        "target_code": "from .stop_words import STOP_WORDS\nfrom ...language import Language, BaseDefaults\n\n\nclass IcelandicDefaults(BaseDefaults):\n    stop_words = STOP_WORDS\n",
        "target_code_len": 151,
        "diff_format": "@@ -1,6 +1,6 @@\n from .stop_words import STOP_WORDS\n-from ...language import Language\n+from ...language import Language, BaseDefaults\n \n \n-class IcelandicDefaults(Language.Defaults):\n+class IcelandicDefaults(BaseDefaults):\n     stop_words = STOP_WORDS\n",
        "source_code_with_indent": "from .stop_words import STOP_WORDS\nfrom ...language import Language\n\n\nclass IcelandicDefaults(Language.Defaults):\n    <IND>stop_words = STOP_WORDS\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from .stop_words import STOP_WORDS\nfrom ...language import Language, BaseDefaults\n\n\nclass IcelandicDefaults(BaseDefaults):\n    <IND>stop_words = STOP_WORDS\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/lang/it/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/lang/it/__init__.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/lang/it/__init__.py:20:4 Inconsistent override [15]: `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[ItalianDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "message": " `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[ItalianDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 20,
    "warning_line": "    Defaults = ItalianDefaults",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from .punctuation import TOKENIZER_PREFIXES, TOKENIZER_INFIXES\nfrom ...language import Language\nfrom .lemmatizer import ItalianLemmatizer\n",
        "source_code_len": 138,
        "target_code": "from .punctuation import TOKENIZER_PREFIXES, TOKENIZER_INFIXES\nfrom ...language import Language, BaseDefaults\nfrom .lemmatizer import ItalianLemmatizer\n",
        "target_code_len": 152,
        "diff_format": "@@ -6,3 +6,3 @@\n from .punctuation import TOKENIZER_PREFIXES, TOKENIZER_INFIXES\n-from ...language import Language\n+from ...language import Language, BaseDefaults\n from .lemmatizer import ItalianLemmatizer\n",
        "source_code_with_indent": "from .punctuation import TOKENIZER_PREFIXES, TOKENIZER_INFIXES\nfrom ...language import Language\nfrom .lemmatizer import ItalianLemmatizer\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from .punctuation import TOKENIZER_PREFIXES, TOKENIZER_INFIXES\nfrom ...language import Language, BaseDefaults\nfrom .lemmatizer import ItalianLemmatizer\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nclass ItalianDefaults(Language.Defaults):\n    tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "source_code_len": 91,
        "target_code": "\nclass ItalianDefaults(BaseDefaults):\n    tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "target_code_len": 86,
        "diff_format": "@@ -10,3 +10,3 @@\n \n-class ItalianDefaults(Language.Defaults):\n+class ItalianDefaults(BaseDefaults):\n     tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "source_code_with_indent": "\nclass ItalianDefaults(Language.Defaults):\n    <IND>tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nclass ItalianDefaults(BaseDefaults):\n    <IND>tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/lang/ja/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/lang/ja/__init__.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/lang/ja/__init__.py:148:4 Inconsistent override [14]: `spacy.lang.ja.JapaneseTokenizer.from_bytes` overrides method defined in `DummyTokenizer` inconsistently. Could not find parameter `_bytes_data` in overriding signature.",
    "message": " `spacy.lang.ja.JapaneseTokenizer.from_bytes` overrides method defined in `DummyTokenizer` inconsistently. Could not find parameter `_bytes_data` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 148,
    "warning_line": "    def from_bytes(self, data: bytes, **kwargs) -> \"JapaneseTokenizer\":"
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/lang/ja/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/lang/ja/__init__.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/lang/ja/__init__.py:157:8 Incompatible return type [7]: Expected `None` but got `Path`.",
    "message": " Expected `None` but got `Path`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 157,
    "warning_line": "        return util.to_disk(path, serializers, [])"
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/lang/ja/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/lang/ja/__init__.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/lang/ja/__init__.py:176:4 Inconsistent override [15]: `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[JapaneseDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "message": " `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[JapaneseDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 176,
    "warning_line": "    Defaults = JapaneseDefaults",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from ...errors import Errors\nfrom ...language import Language\nfrom ...scorer import Scorer\n",
        "source_code_len": 91,
        "target_code": "from ...errors import Errors\nfrom ...language import Language, BaseDefaults\nfrom ...scorer import Scorer\n",
        "target_code_len": 105,
        "diff_format": "@@ -12,3 +12,3 @@\n from ...errors import Errors\n-from ...language import Language\n+from ...language import Language, BaseDefaults\n from ...scorer import Scorer\n",
        "source_code_with_indent": "from ...errors import Errors\nfrom ...language import Language\nfrom ...scorer import Scorer\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from ...errors import Errors\nfrom ...language import Language, BaseDefaults\nfrom ...scorer import Scorer\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nclass JapaneseDefaults(Language.Defaults):\n    config = load_config_from_str(DEFAULT_CONFIG)\n",
        "source_code_len": 94,
        "target_code": "\nclass JapaneseDefaults(BaseDefaults):\n    config = load_config_from_str(DEFAULT_CONFIG)\n",
        "target_code_len": 89,
        "diff_format": "@@ -166,3 +166,3 @@\n \n-class JapaneseDefaults(Language.Defaults):\n+class JapaneseDefaults(BaseDefaults):\n     config = load_config_from_str(DEFAULT_CONFIG)\n",
        "source_code_with_indent": "\n<DED><DED>class JapaneseDefaults(Language.Defaults):\n    <IND>config = load_config_from_str(DEFAULT_CONFIG)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED><DED>class JapaneseDefaults(BaseDefaults):\n    <IND>config = load_config_from_str(DEFAULT_CONFIG)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/lang/ja/syntax_iterators.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/lang/ja/syntax_iterators.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/lang/ja/syntax_iterators.py:39:12 Incompatible return type [7]: Expected `Iterator[spacy.tokens.span.Span]` but got `typing.Generator[typing.Tuple[int, int, typing.Any], None, None]`.",
    "message": " Expected `Iterator[spacy.tokens.span.Span]` but got `typing.Generator[typing.Tuple[int, int, typing.Any], None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 39,
    "warning_line": "            yield unseen[0], word.i + 1, np_label",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import Union, Iterator\n\n",
        "source_code_len": 36,
        "target_code": "from typing import Union, Iterator, Tuple, Set\n\n",
        "target_code_len": 48,
        "diff_format": "@@ -1,2 +1,2 @@\n-from typing import Union, Iterator\n+from typing import Union, Iterator, Tuple, Set\n \n",
        "source_code_with_indent": "from typing import Union, Iterator\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Union, Iterator, Tuple, Set\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef noun_chunks(doclike: Union[Doc, Span]) -> Iterator[Span]:\n    \"\"\"Detect base noun phrases from a dependency parse. Works on Doc and Span.\"\"\"\n",
        "source_code_len": 146,
        "target_code": "\ndef noun_chunks(doclike: Union[Doc, Span]) -> Iterator[Tuple[int, int, int]]:\n    \"\"\"Detect base noun phrases from a dependency parse. Works on Doc and Span.\"\"\"\n",
        "target_code_len": 162,
        "diff_format": "@@ -12,3 +12,3 @@\n \n-def noun_chunks(doclike: Union[Doc, Span]) -> Iterator[Span]:\n+def noun_chunks(doclike: Union[Doc, Span]) -> Iterator[Tuple[int, int, int]]:\n     \"\"\"Detect base noun phrases from a dependency parse. Works on Doc and Span.\"\"\"\n",
        "source_code_with_indent": "\ndef noun_chunks(doclike: Union[Doc, Span]) -> Iterator[Span]:\n    <IND>\"\"\"Detect base noun phrases from a dependency parse. Works on Doc and Span.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\ndef noun_chunks(doclike: Union[Doc, Span]) -> Iterator[Tuple[int, int, int]]:\n    <IND>\"\"\"Detect base noun phrases from a dependency parse. Works on Doc and Span.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/lang/kn/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/lang/kn/__init__.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/lang/kn/__init__.py:11:4 Inconsistent override [15]: `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[KannadaDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "message": " `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[KannadaDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 11,
    "warning_line": "    Defaults = KannadaDefaults",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from .stop_words import STOP_WORDS\nfrom ...language import Language\n\n\nclass KannadaDefaults(Language.Defaults):\n    stop_words = STOP_WORDS\n",
        "source_code_len": 140,
        "target_code": "from .stop_words import STOP_WORDS\nfrom ...language import Language, BaseDefaults\n\n\nclass KannadaDefaults(BaseDefaults):\n    stop_words = STOP_WORDS\n",
        "target_code_len": 149,
        "diff_format": "@@ -1,6 +1,6 @@\n from .stop_words import STOP_WORDS\n-from ...language import Language\n+from ...language import Language, BaseDefaults\n \n \n-class KannadaDefaults(Language.Defaults):\n+class KannadaDefaults(BaseDefaults):\n     stop_words = STOP_WORDS\n",
        "source_code_with_indent": "from .stop_words import STOP_WORDS\nfrom ...language import Language\n\n\nclass KannadaDefaults(Language.Defaults):\n    <IND>stop_words = STOP_WORDS\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from .stop_words import STOP_WORDS\nfrom ...language import Language, BaseDefaults\n\n\nclass KannadaDefaults(BaseDefaults):\n    <IND>stop_words = STOP_WORDS\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/lang/ko/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/lang/ko/__init__.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/lang/ko/__init__.py:42:23 Incompatible parameter type [6]: Expected `typing.Union[int, slice]` for 1st positional only parameter to call `str.__getitem__` but got `str`.",
    "message": " Expected `typing.Union[int, slice]` for 1st positional only parameter to call `str.__getitem__` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 42,
    "warning_line": "        surfaces = [dt[\"surface\"] for dt in dtokens]",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import Optional, Any, Dict\n\n",
        "source_code_len": 40,
        "target_code": "from typing import Iterator, Any, Dict\n\n",
        "target_code_len": 40,
        "diff_format": "@@ -1,2 +1,2 @@\n-from typing import Optional, Any, Dict\n+from typing import Iterator, Any, Dict\n \n",
        "source_code_with_indent": "from typing import Optional, Any, Dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Iterator, Any, Dict\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from .lex_attrs import LEX_ATTRS\nfrom ...language import Language\nfrom ...tokens import Doc\n",
        "source_code_len": 92,
        "target_code": "from .lex_attrs import LEX_ATTRS\nfrom ...language import Language, BaseDefaults\nfrom ...tokens import Doc\n",
        "target_code_len": 106,
        "diff_format": "@@ -5,3 +5,3 @@\n from .lex_attrs import LEX_ATTRS\n-from ...language import Language\n+from ...language import Language, BaseDefaults\n from ...tokens import Doc\n",
        "source_code_with_indent": "from .lex_attrs import LEX_ATTRS\nfrom ...language import Language\nfrom ...tokens import Doc\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from .lex_attrs import LEX_ATTRS\nfrom ...language import Language, BaseDefaults\nfrom ...tokens import Doc\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "class KoreanTokenizer(DummyTokenizer):\n    def __init__(self, nlp: Optional[Language] = None):\n        self.vocab = nlp.vocab\n        MeCab = try_mecab_import()\n        self.mecab_tokenizer = MeCab(\"-F%f[0],%f[7]\")\n",
        "source_code_len": 215,
        "target_code": "class KoreanTokenizer(DummyTokenizer):\n    def __init__(self, nlp: Language):\n        self.vocab = nlp.vocab\n        MeCab = try_mecab_import()  # type: ignore[func-returns-value]\n        self.mecab_tokenizer = MeCab(\"-F%f[0],%f[7]\")\n",
        "target_code_len": 234,
        "diff_format": "@@ -31,5 +31,5 @@\n class KoreanTokenizer(DummyTokenizer):\n-    def __init__(self, nlp: Optional[Language] = None):\n+    def __init__(self, nlp: Language):\n         self.vocab = nlp.vocab\n-        MeCab = try_mecab_import()\n+        MeCab = try_mecab_import()  # type: ignore[func-returns-value]\n         self.mecab_tokenizer = MeCab(\"-F%f[0],%f[7]\")\n",
        "source_code_with_indent": "<DED>class KoreanTokenizer(DummyTokenizer):\n    <IND>def __init__(self, nlp: Optional[Language] = None):\n        <IND>self.vocab = nlp.vocab\n        MeCab = try_mecab_import()\n        self.mecab_tokenizer = MeCab(\"-F%f[0],%f[7]\")\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED>class KoreanTokenizer(DummyTokenizer):\n    <IND>def __init__(self, nlp: Language):\n        <IND>self.vocab = nlp.vocab\n        MeCab = try_mecab_import()  # type: ignore[func-returns-value]\n        self.mecab_tokenizer = MeCab(\"-F%f[0],%f[7]\")\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def detailed_tokens(self, text: str) -> Dict[str, Any]:\n        # \ud488\uc0ac \ud0dc\uadf8(POS)[0], \uc758\ubbf8 \ubd80\ub958(semantic class)[1],\t\uc885\uc131 \uc720\ubb34(jongseong)[2], \uc77d\uae30(reading)[3],\n",
        "source_code_len": 149,
        "target_code": "\n    def detailed_tokens(self, text: str) -> Iterator[Dict[str, Any]]:\n        # \ud488\uc0ac \ud0dc\uadf8(POS)[0], \uc758\ubbf8 \ubd80\ub958(semantic class)[1],\t\uc885\uc131 \uc720\ubb34(jongseong)[2], \uc77d\uae30(reading)[3],\n",
        "target_code_len": 159,
        "diff_format": "@@ -51,3 +51,3 @@\n \n-    def detailed_tokens(self, text: str) -> Dict[str, Any]:\n+    def detailed_tokens(self, text: str) -> Iterator[Dict[str, Any]]:\n         # \ud488\uc0ac \ud0dc\uadf8(POS)[0], \uc758\ubbf8 \ubd80\ub958(semantic class)[1],\t\uc885\uc131 \uc720\ubb34(jongseong)[2], \uc77d\uae30(reading)[3],\n",
        "source_code_with_indent": "\n    <DED>def detailed_tokens(self, text: str) -> Dict[str, Any]:\n        # \ud488\uc0ac \ud0dc\uadf8(POS)[0], \uc758\ubbf8 \ubd80\ub958(semantic class)[1],\t\uc885\uc131 \uc720\ubb34(jongseong)[2], \uc77d\uae30(reading)[3],\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def detailed_tokens(self, text: str) -> Iterator[Dict[str, Any]]:\n        # \ud488\uc0ac \ud0dc\uadf8(POS)[0], \uc758\ubbf8 \ubd80\ub958(semantic class)[1],\t\uc885\uc131 \uc720\ubb34(jongseong)[2], \uc77d\uae30(reading)[3],\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nclass KoreanDefaults(Language.Defaults):\n    config = load_config_from_str(DEFAULT_CONFIG)\n",
        "source_code_len": 92,
        "target_code": "\nclass KoreanDefaults(BaseDefaults):\n    config = load_config_from_str(DEFAULT_CONFIG)\n",
        "target_code_len": 87,
        "diff_format": "@@ -70,3 +70,3 @@\n \n-class KoreanDefaults(Language.Defaults):\n+class KoreanDefaults(BaseDefaults):\n     config = load_config_from_str(DEFAULT_CONFIG)\n",
        "source_code_with_indent": "\n<DED><DED>class KoreanDefaults(Language.Defaults):\n    <IND>config = load_config_from_str(DEFAULT_CONFIG)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED><DED>class KoreanDefaults(BaseDefaults):\n    <IND>config = load_config_from_str(DEFAULT_CONFIG)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/lang/ko/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/lang/ko/__init__.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/lang/ko/__init__.py:49:41 Incompatible parameter type [6]: Expected `typing.Union[int, slice]` for 1st positional only parameter to call `str.__getitem__` but got `str`.",
    "message": " Expected `typing.Union[int, slice]` for 1st positional only parameter to call `str.__getitem__` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 49,
    "warning_line": "        doc.user_data[\"full_tags\"] = [dt[\"tag\"] for dt in dtokens]",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import Optional, Any, Dict\n\n",
        "source_code_len": 40,
        "target_code": "from typing import Iterator, Any, Dict\n\n",
        "target_code_len": 40,
        "diff_format": "@@ -1,2 +1,2 @@\n-from typing import Optional, Any, Dict\n+from typing import Iterator, Any, Dict\n \n",
        "source_code_with_indent": "from typing import Optional, Any, Dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Iterator, Any, Dict\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from .lex_attrs import LEX_ATTRS\nfrom ...language import Language\nfrom ...tokens import Doc\n",
        "source_code_len": 92,
        "target_code": "from .lex_attrs import LEX_ATTRS\nfrom ...language import Language, BaseDefaults\nfrom ...tokens import Doc\n",
        "target_code_len": 106,
        "diff_format": "@@ -5,3 +5,3 @@\n from .lex_attrs import LEX_ATTRS\n-from ...language import Language\n+from ...language import Language, BaseDefaults\n from ...tokens import Doc\n",
        "source_code_with_indent": "from .lex_attrs import LEX_ATTRS\nfrom ...language import Language\nfrom ...tokens import Doc\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from .lex_attrs import LEX_ATTRS\nfrom ...language import Language, BaseDefaults\nfrom ...tokens import Doc\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "class KoreanTokenizer(DummyTokenizer):\n    def __init__(self, nlp: Optional[Language] = None):\n        self.vocab = nlp.vocab\n        MeCab = try_mecab_import()\n        self.mecab_tokenizer = MeCab(\"-F%f[0],%f[7]\")\n",
        "source_code_len": 215,
        "target_code": "class KoreanTokenizer(DummyTokenizer):\n    def __init__(self, nlp: Language):\n        self.vocab = nlp.vocab\n        MeCab = try_mecab_import()  # type: ignore[func-returns-value]\n        self.mecab_tokenizer = MeCab(\"-F%f[0],%f[7]\")\n",
        "target_code_len": 234,
        "diff_format": "@@ -31,5 +31,5 @@\n class KoreanTokenizer(DummyTokenizer):\n-    def __init__(self, nlp: Optional[Language] = None):\n+    def __init__(self, nlp: Language):\n         self.vocab = nlp.vocab\n-        MeCab = try_mecab_import()\n+        MeCab = try_mecab_import()  # type: ignore[func-returns-value]\n         self.mecab_tokenizer = MeCab(\"-F%f[0],%f[7]\")\n",
        "source_code_with_indent": "<DED>class KoreanTokenizer(DummyTokenizer):\n    <IND>def __init__(self, nlp: Optional[Language] = None):\n        <IND>self.vocab = nlp.vocab\n        MeCab = try_mecab_import()\n        self.mecab_tokenizer = MeCab(\"-F%f[0],%f[7]\")\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED>class KoreanTokenizer(DummyTokenizer):\n    <IND>def __init__(self, nlp: Language):\n        <IND>self.vocab = nlp.vocab\n        MeCab = try_mecab_import()  # type: ignore[func-returns-value]\n        self.mecab_tokenizer = MeCab(\"-F%f[0],%f[7]\")\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def detailed_tokens(self, text: str) -> Dict[str, Any]:\n        # \ud488\uc0ac \ud0dc\uadf8(POS)[0], \uc758\ubbf8 \ubd80\ub958(semantic class)[1],\t\uc885\uc131 \uc720\ubb34(jongseong)[2], \uc77d\uae30(reading)[3],\n",
        "source_code_len": 149,
        "target_code": "\n    def detailed_tokens(self, text: str) -> Iterator[Dict[str, Any]]:\n        # \ud488\uc0ac \ud0dc\uadf8(POS)[0], \uc758\ubbf8 \ubd80\ub958(semantic class)[1],\t\uc885\uc131 \uc720\ubb34(jongseong)[2], \uc77d\uae30(reading)[3],\n",
        "target_code_len": 159,
        "diff_format": "@@ -51,3 +51,3 @@\n \n-    def detailed_tokens(self, text: str) -> Dict[str, Any]:\n+    def detailed_tokens(self, text: str) -> Iterator[Dict[str, Any]]:\n         # \ud488\uc0ac \ud0dc\uadf8(POS)[0], \uc758\ubbf8 \ubd80\ub958(semantic class)[1],\t\uc885\uc131 \uc720\ubb34(jongseong)[2], \uc77d\uae30(reading)[3],\n",
        "source_code_with_indent": "\n    <DED>def detailed_tokens(self, text: str) -> Dict[str, Any]:\n        # \ud488\uc0ac \ud0dc\uadf8(POS)[0], \uc758\ubbf8 \ubd80\ub958(semantic class)[1],\t\uc885\uc131 \uc720\ubb34(jongseong)[2], \uc77d\uae30(reading)[3],\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def detailed_tokens(self, text: str) -> Iterator[Dict[str, Any]]:\n        # \ud488\uc0ac \ud0dc\uadf8(POS)[0], \uc758\ubbf8 \ubd80\ub958(semantic class)[1],\t\uc885\uc131 \uc720\ubb34(jongseong)[2], \uc77d\uae30(reading)[3],\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nclass KoreanDefaults(Language.Defaults):\n    config = load_config_from_str(DEFAULT_CONFIG)\n",
        "source_code_len": 92,
        "target_code": "\nclass KoreanDefaults(BaseDefaults):\n    config = load_config_from_str(DEFAULT_CONFIG)\n",
        "target_code_len": 87,
        "diff_format": "@@ -70,3 +70,3 @@\n \n-class KoreanDefaults(Language.Defaults):\n+class KoreanDefaults(BaseDefaults):\n     config = load_config_from_str(DEFAULT_CONFIG)\n",
        "source_code_with_indent": "\n<DED><DED>class KoreanDefaults(Language.Defaults):\n    <IND>config = load_config_from_str(DEFAULT_CONFIG)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED><DED>class KoreanDefaults(BaseDefaults):\n    <IND>config = load_config_from_str(DEFAULT_CONFIG)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/lang/ko/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/lang/ko/__init__.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/lang/ko/__init__.py:80:4 Inconsistent override [15]: `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[KoreanDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "message": " `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[KoreanDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 80,
    "warning_line": "    Defaults = KoreanDefaults",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from .lex_attrs import LEX_ATTRS\nfrom ...language import Language\nfrom ...tokens import Doc\n",
        "source_code_len": 92,
        "target_code": "from .lex_attrs import LEX_ATTRS\nfrom ...language import Language, BaseDefaults\nfrom ...tokens import Doc\n",
        "target_code_len": 106,
        "diff_format": "@@ -5,3 +5,3 @@\n from .lex_attrs import LEX_ATTRS\n-from ...language import Language\n+from ...language import Language, BaseDefaults\n from ...tokens import Doc\n",
        "source_code_with_indent": "from .lex_attrs import LEX_ATTRS\nfrom ...language import Language\nfrom ...tokens import Doc\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from .lex_attrs import LEX_ATTRS\nfrom ...language import Language, BaseDefaults\nfrom ...tokens import Doc\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nclass KoreanDefaults(Language.Defaults):\n    config = load_config_from_str(DEFAULT_CONFIG)\n",
        "source_code_len": 92,
        "target_code": "\nclass KoreanDefaults(BaseDefaults):\n    config = load_config_from_str(DEFAULT_CONFIG)\n",
        "target_code_len": 87,
        "diff_format": "@@ -70,3 +70,3 @@\n \n-class KoreanDefaults(Language.Defaults):\n+class KoreanDefaults(BaseDefaults):\n     config = load_config_from_str(DEFAULT_CONFIG)\n",
        "source_code_with_indent": "\n<DED><DED>class KoreanDefaults(Language.Defaults):\n    <IND>config = load_config_from_str(DEFAULT_CONFIG)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED><DED>class KoreanDefaults(BaseDefaults):\n    <IND>config = load_config_from_str(DEFAULT_CONFIG)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/lang/ky/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/lang/ky/__init__.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/lang/ky/__init__.py:17:4 Inconsistent override [15]: `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[KyrgyzDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "message": " `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[KyrgyzDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 17,
    "warning_line": "    Defaults = KyrgyzDefaults",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from .tokenizer_exceptions import TOKENIZER_EXCEPTIONS\nfrom ...language import Language\n\n\nclass KyrgyzDefaults(Language.Defaults):\n    tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "source_code_len": 179,
        "target_code": "from .tokenizer_exceptions import TOKENIZER_EXCEPTIONS\nfrom ...language import Language, BaseDefaults\n\n\nclass KyrgyzDefaults(BaseDefaults):\n    tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "target_code_len": 188,
        "diff_format": "@@ -4,6 +4,6 @@\n from .tokenizer_exceptions import TOKENIZER_EXCEPTIONS\n-from ...language import Language\n+from ...language import Language, BaseDefaults\n \n \n-class KyrgyzDefaults(Language.Defaults):\n+class KyrgyzDefaults(BaseDefaults):\n     tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "source_code_with_indent": "from .tokenizer_exceptions import TOKENIZER_EXCEPTIONS\nfrom ...language import Language\n\n\nclass KyrgyzDefaults(Language.Defaults):\n    <IND>tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from .tokenizer_exceptions import TOKENIZER_EXCEPTIONS\nfrom ...language import Language, BaseDefaults\n\n\nclass KyrgyzDefaults(BaseDefaults):\n    <IND>tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/lang/lb/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/lang/lb/__init__.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/lang/lb/__init__.py:17:4 Inconsistent override [15]: `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[LuxembourgishDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "message": " `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[LuxembourgishDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 17,
    "warning_line": "    Defaults = LuxembourgishDefaults",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from .stop_words import STOP_WORDS\nfrom ...language import Language\n\n\nclass LuxembourgishDefaults(Language.Defaults):\n    tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "source_code_len": 166,
        "target_code": "from .stop_words import STOP_WORDS\nfrom ...language import Language, BaseDefaults\n\n\nclass LuxembourgishDefaults(BaseDefaults):\n    tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "target_code_len": 175,
        "diff_format": "@@ -4,6 +4,6 @@\n from .stop_words import STOP_WORDS\n-from ...language import Language\n+from ...language import Language, BaseDefaults\n \n \n-class LuxembourgishDefaults(Language.Defaults):\n+class LuxembourgishDefaults(BaseDefaults):\n     tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "source_code_with_indent": "from .stop_words import STOP_WORDS\nfrom ...language import Language\n\n\nclass LuxembourgishDefaults(Language.Defaults):\n    <IND>tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from .stop_words import STOP_WORDS\nfrom ...language import Language, BaseDefaults\n\n\nclass LuxembourgishDefaults(BaseDefaults):\n    <IND>tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/lang/lij/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/lang/lij/__init__.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/lang/lij/__init__.py:15:4 Inconsistent override [15]: `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[LigurianDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "message": " `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[LigurianDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 15,
    "warning_line": "    Defaults = LigurianDefaults",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from .punctuation import TOKENIZER_INFIXES\nfrom ...language import Language\n\n\nclass LigurianDefaults(Language.Defaults):\n    tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "source_code_len": 169,
        "target_code": "from .punctuation import TOKENIZER_INFIXES\nfrom ...language import Language, BaseDefaults\n\n\nclass LigurianDefaults(BaseDefaults):\n    tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "target_code_len": 178,
        "diff_format": "@@ -3,6 +3,6 @@\n from .punctuation import TOKENIZER_INFIXES\n-from ...language import Language\n+from ...language import Language, BaseDefaults\n \n \n-class LigurianDefaults(Language.Defaults):\n+class LigurianDefaults(BaseDefaults):\n     tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "source_code_with_indent": "from .punctuation import TOKENIZER_INFIXES\nfrom ...language import Language\n\n\nclass LigurianDefaults(Language.Defaults):\n    <IND>tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from .punctuation import TOKENIZER_INFIXES\nfrom ...language import Language, BaseDefaults\n\n\nclass LigurianDefaults(BaseDefaults):\n    <IND>tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/lang/lt/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/lang/lt/__init__.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/lang/lt/__init__.py:18:4 Inconsistent override [15]: `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[LithuanianDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "message": " `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[LithuanianDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 18,
    "warning_line": "    Defaults = LithuanianDefaults",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from .lex_attrs import LEX_ATTRS\nfrom ...language import Language\n\n\nclass LithuanianDefaults(Language.Defaults):\n    infixes = TOKENIZER_INFIXES\n",
        "source_code_len": 145,
        "target_code": "from .lex_attrs import LEX_ATTRS\nfrom ...language import Language, BaseDefaults\n\n\nclass LithuanianDefaults(BaseDefaults):\n    infixes = TOKENIZER_INFIXES\n",
        "target_code_len": 154,
        "diff_format": "@@ -4,6 +4,6 @@\n from .lex_attrs import LEX_ATTRS\n-from ...language import Language\n+from ...language import Language, BaseDefaults\n \n \n-class LithuanianDefaults(Language.Defaults):\n+class LithuanianDefaults(BaseDefaults):\n     infixes = TOKENIZER_INFIXES\n",
        "source_code_with_indent": "from .lex_attrs import LEX_ATTRS\nfrom ...language import Language\n\n\nclass LithuanianDefaults(Language.Defaults):\n    <IND>infixes = TOKENIZER_INFIXES\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from .lex_attrs import LEX_ATTRS\nfrom ...language import Language, BaseDefaults\n\n\nclass LithuanianDefaults(BaseDefaults):\n    <IND>infixes = TOKENIZER_INFIXES\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/lang/lv/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/lang/lv/__init__.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/lang/lv/__init__.py:11:4 Inconsistent override [15]: `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[LatvianDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "message": " `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[LatvianDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 11,
    "warning_line": "    Defaults = LatvianDefaults",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from .stop_words import STOP_WORDS\nfrom ...language import Language\n\n\nclass LatvianDefaults(Language.Defaults):\n    stop_words = STOP_WORDS\n",
        "source_code_len": 140,
        "target_code": "from .stop_words import STOP_WORDS\nfrom ...language import Language, BaseDefaults\n\n\nclass LatvianDefaults(BaseDefaults):\n    stop_words = STOP_WORDS\n",
        "target_code_len": 149,
        "diff_format": "@@ -1,6 +1,6 @@\n from .stop_words import STOP_WORDS\n-from ...language import Language\n+from ...language import Language, BaseDefaults\n \n \n-class LatvianDefaults(Language.Defaults):\n+class LatvianDefaults(BaseDefaults):\n     stop_words = STOP_WORDS\n",
        "source_code_with_indent": "from .stop_words import STOP_WORDS\nfrom ...language import Language\n\n\nclass LatvianDefaults(Language.Defaults):\n    <IND>stop_words = STOP_WORDS\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from .stop_words import STOP_WORDS\nfrom ...language import Language, BaseDefaults\n\n\nclass LatvianDefaults(BaseDefaults):\n    <IND>stop_words = STOP_WORDS\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/lang/mk/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/lang/mk/__init__.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/lang/mk/__init__.py:35:4 Inconsistent override [15]: `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[MacedonianDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "message": " `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[MacedonianDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 35,
    "warning_line": "    Defaults = MacedonianDefaults",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom ...language import Language\nfrom ...attrs import LANG\n",
        "source_code_len": 60,
        "target_code": "\nfrom ...language import Language, BaseDefaults\nfrom ...attrs import LANG\n",
        "target_code_len": 74,
        "diff_format": "@@ -8,3 +8,3 @@\n \n-from ...language import Language\n+from ...language import Language, BaseDefaults\n from ...attrs import LANG\n",
        "source_code_with_indent": "\nfrom ...language import Language\nfrom ...attrs import LANG\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom ...language import Language, BaseDefaults\nfrom ...attrs import LANG\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nclass MacedonianDefaults(Language.Defaults):\n    lex_attr_getters = dict(Language.Defaults.lex_attr_getters)\n",
        "source_code_len": 110,
        "target_code": "\nclass MacedonianDefaults(BaseDefaults):\n    lex_attr_getters = dict(Language.Defaults.lex_attr_getters)\n",
        "target_code_len": 105,
        "diff_format": "@@ -14,3 +14,3 @@\n \n-class MacedonianDefaults(Language.Defaults):\n+class MacedonianDefaults(BaseDefaults):\n     lex_attr_getters = dict(Language.Defaults.lex_attr_getters)\n",
        "source_code_with_indent": "\nclass MacedonianDefaults(Language.Defaults):\n    <IND>lex_attr_getters = dict(Language.Defaults.lex_attr_getters)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nclass MacedonianDefaults(BaseDefaults):\n    <IND>lex_attr_getters = dict(Language.Defaults.lex_attr_getters)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/lang/ml/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/lang/ml/__init__.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/lang/ml/__init__.py:13:4 Inconsistent override [15]: `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[MalayalamDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "message": " `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[MalayalamDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 13,
    "warning_line": "    Defaults = MalayalamDefaults",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from .lex_attrs import LEX_ATTRS\nfrom ...language import Language\n\n\nclass MalayalamDefaults(Language.Defaults):\n    lex_attr_getters = LEX_ATTRS\n",
        "source_code_len": 145,
        "target_code": "from .lex_attrs import LEX_ATTRS\nfrom ...language import Language, BaseDefaults\n\n\nclass MalayalamDefaults(BaseDefaults):\n    lex_attr_getters = LEX_ATTRS\n",
        "target_code_len": 154,
        "diff_format": "@@ -2,6 +2,6 @@\n from .lex_attrs import LEX_ATTRS\n-from ...language import Language\n+from ...language import Language, BaseDefaults\n \n \n-class MalayalamDefaults(Language.Defaults):\n+class MalayalamDefaults(BaseDefaults):\n     lex_attr_getters = LEX_ATTRS\n",
        "source_code_with_indent": "from .lex_attrs import LEX_ATTRS\nfrom ...language import Language\n\n\nclass MalayalamDefaults(Language.Defaults):\n    <IND>lex_attr_getters = LEX_ATTRS\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from .lex_attrs import LEX_ATTRS\nfrom ...language import Language, BaseDefaults\n\n\nclass MalayalamDefaults(BaseDefaults):\n    <IND>lex_attr_getters = LEX_ATTRS\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/lang/mr/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/lang/mr/__init__.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/lang/mr/__init__.py:11:4 Inconsistent override [15]: `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[MarathiDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "message": " `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[MarathiDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 11,
    "warning_line": "    Defaults = MarathiDefaults",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from .stop_words import STOP_WORDS\nfrom ...language import Language\n\n\nclass MarathiDefaults(Language.Defaults):\n    stop_words = STOP_WORDS\n",
        "source_code_len": 140,
        "target_code": "from .stop_words import STOP_WORDS\nfrom ...language import Language, BaseDefaults\n\n\nclass MarathiDefaults(BaseDefaults):\n    stop_words = STOP_WORDS\n",
        "target_code_len": 149,
        "diff_format": "@@ -1,6 +1,6 @@\n from .stop_words import STOP_WORDS\n-from ...language import Language\n+from ...language import Language, BaseDefaults\n \n \n-class MarathiDefaults(Language.Defaults):\n+class MarathiDefaults(BaseDefaults):\n     stop_words = STOP_WORDS\n",
        "source_code_with_indent": "from .stop_words import STOP_WORDS\nfrom ...language import Language\n\n\nclass MarathiDefaults(Language.Defaults):\n    <IND>stop_words = STOP_WORDS\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from .stop_words import STOP_WORDS\nfrom ...language import Language, BaseDefaults\n\n\nclass MarathiDefaults(BaseDefaults):\n    <IND>stop_words = STOP_WORDS\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/lang/nb/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/lang/nb/__init__.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/lang/nb/__init__.py:23:4 Inconsistent override [15]: `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[NorwegianDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "message": " `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[NorwegianDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 23,
    "warning_line": "    Defaults = NorwegianDefaults",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from .syntax_iterators import SYNTAX_ITERATORS\nfrom ...language import Language\nfrom ...pipeline import Lemmatizer\n",
        "source_code_len": 115,
        "target_code": "from .syntax_iterators import SYNTAX_ITERATORS\nfrom ...language import Language, BaseDefaults\nfrom ...pipeline import Lemmatizer\n",
        "target_code_len": 129,
        "diff_format": "@@ -7,3 +7,3 @@\n from .syntax_iterators import SYNTAX_ITERATORS\n-from ...language import Language\n+from ...language import Language, BaseDefaults\n from ...pipeline import Lemmatizer\n",
        "source_code_with_indent": "from .syntax_iterators import SYNTAX_ITERATORS\nfrom ...language import Language\nfrom ...pipeline import Lemmatizer\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from .syntax_iterators import SYNTAX_ITERATORS\nfrom ...language import Language, BaseDefaults\nfrom ...pipeline import Lemmatizer\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nclass NorwegianDefaults(Language.Defaults):\n    tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "source_code_len": 93,
        "target_code": "\nclass NorwegianDefaults(BaseDefaults):\n    tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "target_code_len": 88,
        "diff_format": "@@ -11,3 +11,3 @@\n \n-class NorwegianDefaults(Language.Defaults):\n+class NorwegianDefaults(BaseDefaults):\n     tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "source_code_with_indent": "\nclass NorwegianDefaults(Language.Defaults):\n    <IND>tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nclass NorwegianDefaults(BaseDefaults):\n    <IND>tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/lang/nb/syntax_iterators.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/lang/nb/syntax_iterators.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/lang/nb/syntax_iterators.py:28:12 Incompatible return type [7]: Expected `Iterator[spacy.tokens.span.Span]` but got `typing.Generator[typing.Tuple[int, int, typing.Any], None, None]`.",
    "message": " Expected `Iterator[spacy.tokens.span.Span]` but got `typing.Generator[typing.Tuple[int, int, typing.Any], None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 28,
    "warning_line": "            yield word.left_edge.i, word.right_edge.i + 1, np_label",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import Union, Iterator\n\n",
        "source_code_len": 36,
        "target_code": "from typing import Union, Iterator, Tuple\n\n",
        "target_code_len": 43,
        "diff_format": "@@ -1,2 +1,2 @@\n-from typing import Union, Iterator\n+from typing import Union, Iterator, Tuple\n \n",
        "source_code_with_indent": "from typing import Union, Iterator\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Union, Iterator, Tuple\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef noun_chunks(doclike: Union[Doc, Span]) -> Iterator[Span]:\n    \"\"\"Detect base noun phrases from a dependency parse. Works on Doc and Span.\"\"\"\n",
        "source_code_len": 146,
        "target_code": "\ndef noun_chunks(doclike: Union[Doc, Span]) -> Iterator[Tuple[int, int, int]]:\n    \"\"\"Detect base noun phrases from a dependency parse. Works on Doc and Span.\"\"\"\n",
        "target_code_len": 162,
        "diff_format": "@@ -7,3 +7,3 @@\n \n-def noun_chunks(doclike: Union[Doc, Span]) -> Iterator[Span]:\n+def noun_chunks(doclike: Union[Doc, Span]) -> Iterator[Tuple[int, int, int]]:\n     \"\"\"Detect base noun phrases from a dependency parse. Works on Doc and Span.\"\"\"\n",
        "source_code_with_indent": "\ndef noun_chunks(doclike: Union[Doc, Span]) -> Iterator[Span]:\n    <IND>\"\"\"Detect base noun phrases from a dependency parse. Works on Doc and Span.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\ndef noun_chunks(doclike: Union[Doc, Span]) -> Iterator[Tuple[int, int, int]]:\n    <IND>\"\"\"Detect base noun phrases from a dependency parse. Works on Doc and Span.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/lang/nb/syntax_iterators.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/lang/nb/syntax_iterators.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/lang/nb/syntax_iterators.py:36:16 Incompatible return type [7]: Expected `Iterator[spacy.tokens.span.Span]` but got `typing.Generator[typing.Tuple[int, int, typing.Any], None, None]`.",
    "message": " Expected `Iterator[spacy.tokens.span.Span]` but got `typing.Generator[typing.Tuple[int, int, typing.Any], None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 36,
    "warning_line": "                yield word.left_edge.i, word.right_edge.i + 1, np_label",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import Union, Iterator\n\n",
        "source_code_len": 36,
        "target_code": "from typing import Union, Iterator, Tuple\n\n",
        "target_code_len": 43,
        "diff_format": "@@ -1,2 +1,2 @@\n-from typing import Union, Iterator\n+from typing import Union, Iterator, Tuple\n \n",
        "source_code_with_indent": "from typing import Union, Iterator\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Union, Iterator, Tuple\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef noun_chunks(doclike: Union[Doc, Span]) -> Iterator[Span]:\n    \"\"\"Detect base noun phrases from a dependency parse. Works on Doc and Span.\"\"\"\n",
        "source_code_len": 146,
        "target_code": "\ndef noun_chunks(doclike: Union[Doc, Span]) -> Iterator[Tuple[int, int, int]]:\n    \"\"\"Detect base noun phrases from a dependency parse. Works on Doc and Span.\"\"\"\n",
        "target_code_len": 162,
        "diff_format": "@@ -7,3 +7,3 @@\n \n-def noun_chunks(doclike: Union[Doc, Span]) -> Iterator[Span]:\n+def noun_chunks(doclike: Union[Doc, Span]) -> Iterator[Tuple[int, int, int]]:\n     \"\"\"Detect base noun phrases from a dependency parse. Works on Doc and Span.\"\"\"\n",
        "source_code_with_indent": "\ndef noun_chunks(doclike: Union[Doc, Span]) -> Iterator[Span]:\n    <IND>\"\"\"Detect base noun phrases from a dependency parse. Works on Doc and Span.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\ndef noun_chunks(doclike: Union[Doc, Span]) -> Iterator[Tuple[int, int, int]]:\n    <IND>\"\"\"Detect base noun phrases from a dependency parse. Works on Doc and Span.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/lang/ne/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/lang/ne/__init__.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/lang/ne/__init__.py:13:4 Inconsistent override [15]: `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[NepaliDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "message": " `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[NepaliDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 13,
    "warning_line": "    Defaults = NepaliDefaults",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from .lex_attrs import LEX_ATTRS\nfrom ...language import Language\n\n\nclass NepaliDefaults(Language.Defaults):\n    stop_words = STOP_WORDS\n",
        "source_code_len": 137,
        "target_code": "from .lex_attrs import LEX_ATTRS\nfrom ...language import Language, BaseDefaults\n\n\nclass NepaliDefaults(BaseDefaults):\n    stop_words = STOP_WORDS\n",
        "target_code_len": 146,
        "diff_format": "@@ -2,6 +2,6 @@\n from .lex_attrs import LEX_ATTRS\n-from ...language import Language\n+from ...language import Language, BaseDefaults\n \n \n-class NepaliDefaults(Language.Defaults):\n+class NepaliDefaults(BaseDefaults):\n     stop_words = STOP_WORDS\n",
        "source_code_with_indent": "from .lex_attrs import LEX_ATTRS\nfrom ...language import Language\n\n\nclass NepaliDefaults(Language.Defaults):\n    <IND>stop_words = STOP_WORDS\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from .lex_attrs import LEX_ATTRS\nfrom ...language import Language, BaseDefaults\n\n\nclass NepaliDefaults(BaseDefaults):\n    <IND>stop_words = STOP_WORDS\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/lang/nl/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/lang/nl/__init__.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/lang/nl/__init__.py:27:4 Inconsistent override [15]: `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[DutchDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "message": " `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[DutchDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 27,
    "warning_line": "    Defaults = DutchDefaults",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from .tokenizer_exceptions import TOKENIZER_EXCEPTIONS\nfrom ...language import Language\n\n\nclass DutchDefaults(Language.Defaults):\n    tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "source_code_len": 178,
        "target_code": "from .tokenizer_exceptions import TOKENIZER_EXCEPTIONS\nfrom ...language import Language, BaseDefaults\n\n\nclass DutchDefaults(BaseDefaults):\n    tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "target_code_len": 187,
        "diff_format": "@@ -11,6 +11,6 @@\n from .tokenizer_exceptions import TOKENIZER_EXCEPTIONS\n-from ...language import Language\n+from ...language import Language, BaseDefaults\n \n \n-class DutchDefaults(Language.Defaults):\n+class DutchDefaults(BaseDefaults):\n     tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "source_code_with_indent": "from .tokenizer_exceptions import TOKENIZER_EXCEPTIONS\nfrom ...language import Language\n\n\nclass DutchDefaults(Language.Defaults):\n    <IND>tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from .tokenizer_exceptions import TOKENIZER_EXCEPTIONS\nfrom ...language import Language, BaseDefaults\n\n\nclass DutchDefaults(BaseDefaults):\n    <IND>tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/lang/nl/syntax_iterators.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/lang/nl/syntax_iterators.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/lang/nl/syntax_iterators.py:62:12 Incompatible return type [7]: Expected `Iterator[spacy.tokens.span.Span]` but got `typing.Generator[typing.Tuple[int, int, typing.Any], None, None]`.",
    "message": " Expected `Iterator[spacy.tokens.span.Span]` but got `typing.Generator[typing.Tuple[int, int, typing.Any], None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 62,
    "warning_line": "            yield start_span, end_span, span_label",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import Union, Iterator\n\n",
        "source_code_len": 36,
        "target_code": "from typing import Union, Iterator, Tuple\n\n",
        "target_code_len": 43,
        "diff_format": "@@ -1,2 +1,2 @@\n-from typing import Union, Iterator\n+from typing import Union, Iterator, Tuple\n \n",
        "source_code_with_indent": "from typing import Union, Iterator\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Union, Iterator, Tuple\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef noun_chunks(doclike: Union[Doc, Span]) -> Iterator[Span]:\n    \"\"\"\n",
        "source_code_len": 71,
        "target_code": "\ndef noun_chunks(doclike: Union[Doc, Span]) -> Iterator[Tuple[int, int, int]]:\n    \"\"\"\n",
        "target_code_len": 87,
        "diff_format": "@@ -7,3 +7,3 @@\n \n-def noun_chunks(doclike: Union[Doc, Span]) -> Iterator[Span]:\n+def noun_chunks(doclike: Union[Doc, Span]) -> Iterator[Tuple[int, int, int]]:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\ndef noun_chunks(doclike: Union[Doc, Span]) -> Iterator[Span]:\n    <IND>",
        "target_code_with_indent": "\ndef noun_chunks(doclike: Union[Doc, Span]) -> Iterator[Tuple[int, int, int]]:\n    <IND>"
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/lang/nl/syntax_iterators.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/lang/nl/syntax_iterators.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/lang/nl/syntax_iterators.py:69:16 Incompatible return type [7]: Expected `Iterator[spacy.tokens.span.Span]` but got `typing.Generator[typing.Tuple[int, int, typing.Any], None, None]`.",
    "message": " Expected `Iterator[spacy.tokens.span.Span]` but got `typing.Generator[typing.Tuple[int, int, typing.Any], None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 69,
    "warning_line": "                yield start_span, end_span, span_label",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import Union, Iterator\n\n",
        "source_code_len": 36,
        "target_code": "from typing import Union, Iterator, Tuple\n\n",
        "target_code_len": 43,
        "diff_format": "@@ -1,2 +1,2 @@\n-from typing import Union, Iterator\n+from typing import Union, Iterator, Tuple\n \n",
        "source_code_with_indent": "from typing import Union, Iterator\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Union, Iterator, Tuple\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef noun_chunks(doclike: Union[Doc, Span]) -> Iterator[Span]:\n    \"\"\"\n",
        "source_code_len": 71,
        "target_code": "\ndef noun_chunks(doclike: Union[Doc, Span]) -> Iterator[Tuple[int, int, int]]:\n    \"\"\"\n",
        "target_code_len": 87,
        "diff_format": "@@ -7,3 +7,3 @@\n \n-def noun_chunks(doclike: Union[Doc, Span]) -> Iterator[Span]:\n+def noun_chunks(doclike: Union[Doc, Span]) -> Iterator[Tuple[int, int, int]]:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\ndef noun_chunks(doclike: Union[Doc, Span]) -> Iterator[Span]:\n    <IND>",
        "target_code_with_indent": "\ndef noun_chunks(doclike: Union[Doc, Span]) -> Iterator[Tuple[int, int, int]]:\n    <IND>"
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/lang/pl/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/lang/pl/__init__.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/lang/pl/__init__.py:30:4 Inconsistent override [15]: `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[PolishDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "message": " `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[PolishDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 30,
    "warning_line": "    Defaults = PolishDefaults",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from ..tokenizer_exceptions import BASE_EXCEPTIONS\nfrom ...language import Language\n\n",
        "source_code_len": 85,
        "target_code": "from ..tokenizer_exceptions import BASE_EXCEPTIONS\nfrom ...language import Language, BaseDefaults\n\n",
        "target_code_len": 99,
        "diff_format": "@@ -10,3 +10,3 @@\n from ..tokenizer_exceptions import BASE_EXCEPTIONS\n-from ...language import Language\n+from ...language import Language, BaseDefaults\n \n",
        "source_code_with_indent": "from ..tokenizer_exceptions import BASE_EXCEPTIONS\nfrom ...language import Language\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from ..tokenizer_exceptions import BASE_EXCEPTIONS\nfrom ...language import Language, BaseDefaults\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nclass PolishDefaults(Language.Defaults):\n    tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "source_code_len": 90,
        "target_code": "\nclass PolishDefaults(BaseDefaults):\n    tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "target_code_len": 85,
        "diff_format": "@@ -18,3 +18,3 @@\n \n-class PolishDefaults(Language.Defaults):\n+class PolishDefaults(BaseDefaults):\n     tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "source_code_with_indent": "\nclass PolishDefaults(Language.Defaults):\n    <IND>tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nclass PolishDefaults(BaseDefaults):\n    <IND>tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/lang/pt/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/lang/pt/__init__.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/lang/pt/__init__.py:18:4 Inconsistent override [15]: `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[PortugueseDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "message": " `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[PortugueseDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 18,
    "warning_line": "    Defaults = PortugueseDefaults",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from .punctuation import TOKENIZER_INFIXES, TOKENIZER_PREFIXES\nfrom ...language import Language\n\n\nclass PortugueseDefaults(Language.Defaults):\n    tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "source_code_len": 191,
        "target_code": "from .punctuation import TOKENIZER_INFIXES, TOKENIZER_PREFIXES\nfrom ...language import Language, BaseDefaults\n\n\nclass PortugueseDefaults(BaseDefaults):\n    tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "target_code_len": 200,
        "diff_format": "@@ -4,6 +4,6 @@\n from .punctuation import TOKENIZER_INFIXES, TOKENIZER_PREFIXES\n-from ...language import Language\n+from ...language import Language, BaseDefaults\n \n \n-class PortugueseDefaults(Language.Defaults):\n+class PortugueseDefaults(BaseDefaults):\n     tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "source_code_with_indent": "from .punctuation import TOKENIZER_INFIXES, TOKENIZER_PREFIXES\nfrom ...language import Language\n\n\nclass PortugueseDefaults(Language.Defaults):\n    <IND>tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from .punctuation import TOKENIZER_INFIXES, TOKENIZER_PREFIXES\nfrom ...language import Language, BaseDefaults\n\n\nclass PortugueseDefaults(BaseDefaults):\n    <IND>tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/lang/ro/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/lang/ro/__init__.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/lang/ro/__init__.py:24:4 Inconsistent override [15]: `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[RomanianDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "message": " `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[RomanianDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 24,
    "warning_line": "    Defaults = RomanianDefaults",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from .lex_attrs import LEX_ATTRS\nfrom ...language import Language\n\n",
        "source_code_len": 67,
        "target_code": "from .lex_attrs import LEX_ATTRS\nfrom ...language import Language, BaseDefaults\n\n",
        "target_code_len": 81,
        "diff_format": "@@ -5,3 +5,3 @@\n from .lex_attrs import LEX_ATTRS\n-from ...language import Language\n+from ...language import Language, BaseDefaults\n \n",
        "source_code_with_indent": "from .lex_attrs import LEX_ATTRS\nfrom ...language import Language\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from .lex_attrs import LEX_ATTRS\nfrom ...language import Language, BaseDefaults\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nclass RomanianDefaults(Language.Defaults):\n    tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "source_code_len": 92,
        "target_code": "\nclass RomanianDefaults(BaseDefaults):\n    tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "target_code_len": 87,
        "diff_format": "@@ -12,3 +12,3 @@\n \n-class RomanianDefaults(Language.Defaults):\n+class RomanianDefaults(BaseDefaults):\n     tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "source_code_with_indent": "\nclass RomanianDefaults(Language.Defaults):\n    <IND>tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nclass RomanianDefaults(BaseDefaults):\n    <IND>tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/lang/ru/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/lang/ru/__init__.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/lang/ru/__init__.py:19:4 Inconsistent override [15]: `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[RussianDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "message": " `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[RussianDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 19,
    "warning_line": "    Defaults = RussianDefaults",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from .lemmatizer import RussianLemmatizer\nfrom ...language import Language\n\n\nclass RussianDefaults(Language.Defaults):\n    tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "source_code_len": 167,
        "target_code": "from .lemmatizer import RussianLemmatizer\nfrom ...language import Language, BaseDefaults\n\n\nclass RussianDefaults(BaseDefaults):\n    tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "target_code_len": 176,
        "diff_format": "@@ -7,6 +7,6 @@\n from .lemmatizer import RussianLemmatizer\n-from ...language import Language\n+from ...language import Language, BaseDefaults\n \n \n-class RussianDefaults(Language.Defaults):\n+class RussianDefaults(BaseDefaults):\n     tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "source_code_with_indent": "from .lemmatizer import RussianLemmatizer\nfrom ...language import Language\n\n\nclass RussianDefaults(Language.Defaults):\n    <IND>tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from .lemmatizer import RussianLemmatizer\nfrom ...language import Language, BaseDefaults\n\n\nclass RussianDefaults(BaseDefaults):\n    <IND>tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/lang/sa/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/lang/sa/__init__.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/lang/sa/__init__.py:13:4 Inconsistent override [15]: `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[SanskritDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "message": " `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[SanskritDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 13,
    "warning_line": "    Defaults = SanskritDefaults",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from .lex_attrs import LEX_ATTRS\nfrom ...language import Language\n\n\nclass SanskritDefaults(Language.Defaults):\n    lex_attr_getters = LEX_ATTRS\n",
        "source_code_len": 144,
        "target_code": "from .lex_attrs import LEX_ATTRS\nfrom ...language import Language, BaseDefaults\n\n\nclass SanskritDefaults(BaseDefaults):\n    lex_attr_getters = LEX_ATTRS\n",
        "target_code_len": 153,
        "diff_format": "@@ -2,6 +2,6 @@\n from .lex_attrs import LEX_ATTRS\n-from ...language import Language\n+from ...language import Language, BaseDefaults\n \n \n-class SanskritDefaults(Language.Defaults):\n+class SanskritDefaults(BaseDefaults):\n     lex_attr_getters = LEX_ATTRS\n",
        "source_code_with_indent": "from .lex_attrs import LEX_ATTRS\nfrom ...language import Language\n\n\nclass SanskritDefaults(Language.Defaults):\n    <IND>lex_attr_getters = LEX_ATTRS\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from .lex_attrs import LEX_ATTRS\nfrom ...language import Language, BaseDefaults\n\n\nclass SanskritDefaults(BaseDefaults):\n    <IND>lex_attr_getters = LEX_ATTRS\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/lang/si/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/lang/si/__init__.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/lang/si/__init__.py:13:4 Inconsistent override [15]: `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[SinhalaDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "message": " `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[SinhalaDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 13,
    "warning_line": "    Defaults = SinhalaDefaults",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from .lex_attrs import LEX_ATTRS\nfrom ...language import Language\n\n\nclass SinhalaDefaults(Language.Defaults):\n    lex_attr_getters = LEX_ATTRS\n",
        "source_code_len": 143,
        "target_code": "from .lex_attrs import LEX_ATTRS\nfrom ...language import Language, BaseDefaults\n\n\nclass SinhalaDefaults(BaseDefaults):\n    lex_attr_getters = LEX_ATTRS\n",
        "target_code_len": 152,
        "diff_format": "@@ -2,6 +2,6 @@\n from .lex_attrs import LEX_ATTRS\n-from ...language import Language\n+from ...language import Language, BaseDefaults\n \n \n-class SinhalaDefaults(Language.Defaults):\n+class SinhalaDefaults(BaseDefaults):\n     lex_attr_getters = LEX_ATTRS\n",
        "source_code_with_indent": "from .lex_attrs import LEX_ATTRS\nfrom ...language import Language\n\n\nclass SinhalaDefaults(Language.Defaults):\n    <IND>lex_attr_getters = LEX_ATTRS\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from .lex_attrs import LEX_ATTRS\nfrom ...language import Language, BaseDefaults\n\n\nclass SinhalaDefaults(BaseDefaults):\n    <IND>lex_attr_getters = LEX_ATTRS\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/lang/sk/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/lang/sk/__init__.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/lang/sk/__init__.py:13:4 Inconsistent override [15]: `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[SlovakDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "message": " `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[SlovakDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 13,
    "warning_line": "    Defaults = SlovakDefaults",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from .lex_attrs import LEX_ATTRS\nfrom ...language import Language\n\n\nclass SlovakDefaults(Language.Defaults):\n    lex_attr_getters = LEX_ATTRS\n",
        "source_code_len": 142,
        "target_code": "from .lex_attrs import LEX_ATTRS\nfrom ...language import Language, BaseDefaults\n\n\nclass SlovakDefaults(BaseDefaults):\n    lex_attr_getters = LEX_ATTRS\n",
        "target_code_len": 151,
        "diff_format": "@@ -2,6 +2,6 @@\n from .lex_attrs import LEX_ATTRS\n-from ...language import Language\n+from ...language import Language, BaseDefaults\n \n \n-class SlovakDefaults(Language.Defaults):\n+class SlovakDefaults(BaseDefaults):\n     lex_attr_getters = LEX_ATTRS\n",
        "source_code_with_indent": "from .lex_attrs import LEX_ATTRS\nfrom ...language import Language\n\n\nclass SlovakDefaults(Language.Defaults):\n    <IND>lex_attr_getters = LEX_ATTRS\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from .lex_attrs import LEX_ATTRS\nfrom ...language import Language, BaseDefaults\n\n\nclass SlovakDefaults(BaseDefaults):\n    <IND>lex_attr_getters = LEX_ATTRS\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/lang/sl/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/lang/sl/__init__.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/lang/sl/__init__.py:11:4 Inconsistent override [15]: `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[SlovenianDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "message": " `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[SlovenianDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 11,
    "warning_line": "    Defaults = SlovenianDefaults",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from .stop_words import STOP_WORDS\nfrom ...language import Language\n\n\nclass SlovenianDefaults(Language.Defaults):\n    stop_words = STOP_WORDS\n",
        "source_code_len": 142,
        "target_code": "from .stop_words import STOP_WORDS\nfrom ...language import Language, BaseDefaults\n\n\nclass SlovenianDefaults(BaseDefaults):\n    stop_words = STOP_WORDS\n",
        "target_code_len": 151,
        "diff_format": "@@ -1,6 +1,6 @@\n from .stop_words import STOP_WORDS\n-from ...language import Language\n+from ...language import Language, BaseDefaults\n \n \n-class SlovenianDefaults(Language.Defaults):\n+class SlovenianDefaults(BaseDefaults):\n     stop_words = STOP_WORDS\n",
        "source_code_with_indent": "from .stop_words import STOP_WORDS\nfrom ...language import Language\n\n\nclass SlovenianDefaults(Language.Defaults):\n    <IND>stop_words = STOP_WORDS\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from .stop_words import STOP_WORDS\nfrom ...language import Language, BaseDefaults\n\n\nclass SlovenianDefaults(BaseDefaults):\n    <IND>stop_words = STOP_WORDS\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/lang/sq/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/lang/sq/__init__.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/lang/sq/__init__.py:11:4 Inconsistent override [15]: `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[AlbanianDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "message": " `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[AlbanianDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 11,
    "warning_line": "    Defaults = AlbanianDefaults",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from .stop_words import STOP_WORDS\nfrom ...language import Language\n\n\nclass AlbanianDefaults(Language.Defaults):\n    stop_words = STOP_WORDS\n",
        "source_code_len": 141,
        "target_code": "from .stop_words import STOP_WORDS\nfrom ...language import Language, BaseDefaults\n\n\nclass AlbanianDefaults(BaseDefaults):\n    stop_words = STOP_WORDS\n",
        "target_code_len": 150,
        "diff_format": "@@ -1,6 +1,6 @@\n from .stop_words import STOP_WORDS\n-from ...language import Language\n+from ...language import Language, BaseDefaults\n \n \n-class AlbanianDefaults(Language.Defaults):\n+class AlbanianDefaults(BaseDefaults):\n     stop_words = STOP_WORDS\n",
        "source_code_with_indent": "from .stop_words import STOP_WORDS\nfrom ...language import Language\n\n\nclass AlbanianDefaults(Language.Defaults):\n    <IND>stop_words = STOP_WORDS\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from .stop_words import STOP_WORDS\nfrom ...language import Language, BaseDefaults\n\n\nclass AlbanianDefaults(BaseDefaults):\n    <IND>stop_words = STOP_WORDS\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/lang/sr/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/lang/sr/__init__.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/lang/sr/__init__.py:15:4 Inconsistent override [15]: `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[SerbianDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "message": " `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[SerbianDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 15,
    "warning_line": "    Defaults = SerbianDefaults",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from .lex_attrs import LEX_ATTRS\nfrom ...language import Language\n\n\nclass SerbianDefaults(Language.Defaults):\n    tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "source_code_len": 158,
        "target_code": "from .lex_attrs import LEX_ATTRS\nfrom ...language import Language, BaseDefaults\n\n\nclass SerbianDefaults(BaseDefaults):\n    tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "target_code_len": 167,
        "diff_format": "@@ -3,6 +3,6 @@\n from .lex_attrs import LEX_ATTRS\n-from ...language import Language\n+from ...language import Language, BaseDefaults\n \n \n-class SerbianDefaults(Language.Defaults):\n+class SerbianDefaults(BaseDefaults):\n     tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "source_code_with_indent": "from .lex_attrs import LEX_ATTRS\nfrom ...language import Language\n\n\nclass SerbianDefaults(Language.Defaults):\n    <IND>tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from .lex_attrs import LEX_ATTRS\nfrom ...language import Language, BaseDefaults\n\n\nclass SerbianDefaults(BaseDefaults):\n    <IND>tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/lang/sv/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/lang/sv/__init__.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/lang/sv/__init__.py:26:4 Inconsistent override [15]: `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[SwedishDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "message": " `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[SwedishDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 26,
    "warning_line": "    Defaults = SwedishDefaults",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from .syntax_iterators import SYNTAX_ITERATORS\nfrom ...language import Language\nfrom ...pipeline import Lemmatizer\n",
        "source_code_len": 115,
        "target_code": "from .syntax_iterators import SYNTAX_ITERATORS\nfrom ...language import Language, BaseDefaults\nfrom ...pipeline import Lemmatizer\n",
        "target_code_len": 129,
        "diff_format": "@@ -6,3 +6,3 @@\n from .syntax_iterators import SYNTAX_ITERATORS\n-from ...language import Language\n+from ...language import Language, BaseDefaults\n from ...pipeline import Lemmatizer\n",
        "source_code_with_indent": "from .syntax_iterators import SYNTAX_ITERATORS\nfrom ...language import Language\nfrom ...pipeline import Lemmatizer\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from .syntax_iterators import SYNTAX_ITERATORS\nfrom ...language import Language, BaseDefaults\nfrom ...pipeline import Lemmatizer\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nclass SwedishDefaults(Language.Defaults):\n    tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "source_code_len": 91,
        "target_code": "\nclass SwedishDefaults(BaseDefaults):\n    tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "target_code_len": 86,
        "diff_format": "@@ -14,3 +14,3 @@\n \n-class SwedishDefaults(Language.Defaults):\n+class SwedishDefaults(BaseDefaults):\n     tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "source_code_with_indent": "\nclass SwedishDefaults(Language.Defaults):\n    <IND>tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nclass SwedishDefaults(BaseDefaults):\n    <IND>tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/lang/sv/syntax_iterators.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/lang/sv/syntax_iterators.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/lang/sv/syntax_iterators.py:28:12 Incompatible return type [7]: Expected `Iterator[spacy.tokens.span.Span]` but got `typing.Generator[typing.Tuple[int, int, typing.Any], None, None]`.",
    "message": " Expected `Iterator[spacy.tokens.span.Span]` but got `typing.Generator[typing.Tuple[int, int, typing.Any], None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 28,
    "warning_line": "            yield word.left_edge.i, word.right_edge.i + 1, np_label",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import Union, Iterator\n\n",
        "source_code_len": 36,
        "target_code": "from typing import Union, Iterator, Tuple\n\n",
        "target_code_len": 43,
        "diff_format": "@@ -1,2 +1,2 @@\n-from typing import Union, Iterator\n+from typing import Union, Iterator, Tuple\n \n",
        "source_code_with_indent": "from typing import Union, Iterator\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Union, Iterator, Tuple\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef noun_chunks(doclike: Union[Doc, Span]) -> Iterator[Span]:\n    \"\"\"Detect base noun phrases from a dependency parse. Works on Doc and Span.\"\"\"\n",
        "source_code_len": 146,
        "target_code": "\ndef noun_chunks(doclike: Union[Doc, Span]) -> Iterator[Tuple[int, int, int]]:\n    \"\"\"Detect base noun phrases from a dependency parse. Works on Doc and Span.\"\"\"\n",
        "target_code_len": 162,
        "diff_format": "@@ -7,3 +7,3 @@\n \n-def noun_chunks(doclike: Union[Doc, Span]) -> Iterator[Span]:\n+def noun_chunks(doclike: Union[Doc, Span]) -> Iterator[Tuple[int, int, int]]:\n     \"\"\"Detect base noun phrases from a dependency parse. Works on Doc and Span.\"\"\"\n",
        "source_code_with_indent": "\ndef noun_chunks(doclike: Union[Doc, Span]) -> Iterator[Span]:\n    <IND>\"\"\"Detect base noun phrases from a dependency parse. Works on Doc and Span.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\ndef noun_chunks(doclike: Union[Doc, Span]) -> Iterator[Tuple[int, int, int]]:\n    <IND>\"\"\"Detect base noun phrases from a dependency parse. Works on Doc and Span.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/lang/sv/syntax_iterators.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/lang/sv/syntax_iterators.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/lang/sv/syntax_iterators.py:36:16 Incompatible return type [7]: Expected `Iterator[spacy.tokens.span.Span]` but got `typing.Generator[typing.Tuple[int, int, typing.Any], None, None]`.",
    "message": " Expected `Iterator[spacy.tokens.span.Span]` but got `typing.Generator[typing.Tuple[int, int, typing.Any], None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 36,
    "warning_line": "                yield word.left_edge.i, word.right_edge.i + 1, np_label",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import Union, Iterator\n\n",
        "source_code_len": 36,
        "target_code": "from typing import Union, Iterator, Tuple\n\n",
        "target_code_len": 43,
        "diff_format": "@@ -1,2 +1,2 @@\n-from typing import Union, Iterator\n+from typing import Union, Iterator, Tuple\n \n",
        "source_code_with_indent": "from typing import Union, Iterator\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Union, Iterator, Tuple\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef noun_chunks(doclike: Union[Doc, Span]) -> Iterator[Span]:\n    \"\"\"Detect base noun phrases from a dependency parse. Works on Doc and Span.\"\"\"\n",
        "source_code_len": 146,
        "target_code": "\ndef noun_chunks(doclike: Union[Doc, Span]) -> Iterator[Tuple[int, int, int]]:\n    \"\"\"Detect base noun phrases from a dependency parse. Works on Doc and Span.\"\"\"\n",
        "target_code_len": 162,
        "diff_format": "@@ -7,3 +7,3 @@\n \n-def noun_chunks(doclike: Union[Doc, Span]) -> Iterator[Span]:\n+def noun_chunks(doclike: Union[Doc, Span]) -> Iterator[Tuple[int, int, int]]:\n     \"\"\"Detect base noun phrases from a dependency parse. Works on Doc and Span.\"\"\"\n",
        "source_code_with_indent": "\ndef noun_chunks(doclike: Union[Doc, Span]) -> Iterator[Span]:\n    <IND>\"\"\"Detect base noun phrases from a dependency parse. Works on Doc and Span.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\ndef noun_chunks(doclike: Union[Doc, Span]) -> Iterator[Tuple[int, int, int]]:\n    <IND>\"\"\"Detect base noun phrases from a dependency parse. Works on Doc and Span.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/lang/ta/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/lang/ta/__init__.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/lang/ta/__init__.py:13:4 Inconsistent override [15]: `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[TamilDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "message": " `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[TamilDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 13,
    "warning_line": "    Defaults = TamilDefaults",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from .lex_attrs import LEX_ATTRS\nfrom ...language import Language\n\n\nclass TamilDefaults(Language.Defaults):\n    lex_attr_getters = LEX_ATTRS\n",
        "source_code_len": 141,
        "target_code": "from .lex_attrs import LEX_ATTRS\nfrom ...language import Language, BaseDefaults\n\n\nclass TamilDefaults(BaseDefaults):\n    lex_attr_getters = LEX_ATTRS\n",
        "target_code_len": 150,
        "diff_format": "@@ -2,6 +2,6 @@\n from .lex_attrs import LEX_ATTRS\n-from ...language import Language\n+from ...language import Language, BaseDefaults\n \n \n-class TamilDefaults(Language.Defaults):\n+class TamilDefaults(BaseDefaults):\n     lex_attr_getters = LEX_ATTRS\n",
        "source_code_with_indent": "from .lex_attrs import LEX_ATTRS\nfrom ...language import Language\n\n\nclass TamilDefaults(Language.Defaults):\n    <IND>lex_attr_getters = LEX_ATTRS\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from .lex_attrs import LEX_ATTRS\nfrom ...language import Language, BaseDefaults\n\n\nclass TamilDefaults(BaseDefaults):\n    <IND>lex_attr_getters = LEX_ATTRS\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/lang/te/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/lang/te/__init__.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/lang/te/__init__.py:13:4 Inconsistent override [15]: `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[TeluguDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "message": " `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[TeluguDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 13,
    "warning_line": "    Defaults = TeluguDefaults",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from .lex_attrs import LEX_ATTRS\nfrom ...language import Language\n\n\nclass TeluguDefaults(Language.Defaults):\n    lex_attr_getters = LEX_ATTRS\n",
        "source_code_len": 142,
        "target_code": "from .lex_attrs import LEX_ATTRS\nfrom ...language import Language, BaseDefaults\n\n\nclass TeluguDefaults(BaseDefaults):\n    lex_attr_getters = LEX_ATTRS\n",
        "target_code_len": 151,
        "diff_format": "@@ -2,6 +2,6 @@\n from .lex_attrs import LEX_ATTRS\n-from ...language import Language\n+from ...language import Language, BaseDefaults\n \n \n-class TeluguDefaults(Language.Defaults):\n+class TeluguDefaults(BaseDefaults):\n     lex_attr_getters = LEX_ATTRS\n",
        "source_code_with_indent": "from .lex_attrs import LEX_ATTRS\nfrom ...language import Language\n\n\nclass TeluguDefaults(Language.Defaults):\n    <IND>lex_attr_getters = LEX_ATTRS\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from .lex_attrs import LEX_ATTRS\nfrom ...language import Language, BaseDefaults\n\n\nclass TeluguDefaults(BaseDefaults):\n    <IND>lex_attr_getters = LEX_ATTRS\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/lang/th/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/lang/th/__init__.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/lang/th/__init__.py:50:4 Inconsistent override [15]: `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[ThaiDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "message": " `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[ThaiDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 50,
    "warning_line": "    Defaults = ThaiDefaults",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from .lex_attrs import LEX_ATTRS\nfrom ...language import Language\nfrom ...tokens import Doc\n",
        "source_code_len": 92,
        "target_code": "from .lex_attrs import LEX_ATTRS\nfrom ...language import Language, BaseDefaults\nfrom ...tokens import Doc\n",
        "target_code_len": 106,
        "diff_format": "@@ -2,3 +2,3 @@\n from .lex_attrs import LEX_ATTRS\n-from ...language import Language\n+from ...language import Language, BaseDefaults\n from ...tokens import Doc\n",
        "source_code_with_indent": "from .lex_attrs import LEX_ATTRS\nfrom ...language import Language\nfrom ...tokens import Doc\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from .lex_attrs import LEX_ATTRS\nfrom ...language import Language, BaseDefaults\nfrom ...tokens import Doc\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nclass ThaiDefaults(Language.Defaults):\n    config = load_config_from_str(DEFAULT_CONFIG)\n",
        "source_code_len": 90,
        "target_code": "\nclass ThaiDefaults(BaseDefaults):\n    config = load_config_from_str(DEFAULT_CONFIG)\n",
        "target_code_len": 85,
        "diff_format": "@@ -41,3 +41,3 @@\n \n-class ThaiDefaults(Language.Defaults):\n+class ThaiDefaults(BaseDefaults):\n     config = load_config_from_str(DEFAULT_CONFIG)\n",
        "source_code_with_indent": "\n<DED><DED>class ThaiDefaults(Language.Defaults):\n    <IND>config = load_config_from_str(DEFAULT_CONFIG)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED><DED>class ThaiDefaults(BaseDefaults):\n    <IND>config = load_config_from_str(DEFAULT_CONFIG)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/lang/ti/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/lang/ti/__init__.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/lang/ti/__init__.py:24:4 Inconsistent override [15]: `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[TigrinyaDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "message": " `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[TigrinyaDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 24,
    "warning_line": "    Defaults = TigrinyaDefaults",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from ..tokenizer_exceptions import BASE_EXCEPTIONS\nfrom ...language import Language\nfrom ...attrs import LANG\n",
        "source_code_len": 110,
        "target_code": "from ..tokenizer_exceptions import BASE_EXCEPTIONS\nfrom ...language import Language, BaseDefaults\nfrom ...attrs import LANG\n",
        "target_code_len": 124,
        "diff_format": "@@ -6,3 +6,3 @@\n from ..tokenizer_exceptions import BASE_EXCEPTIONS\n-from ...language import Language\n+from ...language import Language, BaseDefaults\n from ...attrs import LANG\n",
        "source_code_with_indent": "from ..tokenizer_exceptions import BASE_EXCEPTIONS\nfrom ...language import Language\nfrom ...attrs import LANG\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from ..tokenizer_exceptions import BASE_EXCEPTIONS\nfrom ...language import Language, BaseDefaults\nfrom ...attrs import LANG\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nclass TigrinyaDefaults(Language.Defaults):\n    lex_attr_getters = dict(Language.Defaults.lex_attr_getters)\n",
        "source_code_len": 108,
        "target_code": "\nclass TigrinyaDefaults(BaseDefaults):\n    lex_attr_getters = dict(Language.Defaults.lex_attr_getters)\n",
        "target_code_len": 103,
        "diff_format": "@@ -11,3 +11,3 @@\n \n-class TigrinyaDefaults(Language.Defaults):\n+class TigrinyaDefaults(BaseDefaults):\n     lex_attr_getters = dict(Language.Defaults.lex_attr_getters)\n",
        "source_code_with_indent": "\nclass TigrinyaDefaults(Language.Defaults):\n    <IND>lex_attr_getters = dict(Language.Defaults.lex_attr_getters)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nclass TigrinyaDefaults(BaseDefaults):\n    <IND>lex_attr_getters = dict(Language.Defaults.lex_attr_getters)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/lang/tl/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/lang/tl/__init__.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/lang/tl/__init__.py:15:4 Inconsistent override [15]: `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[TagalogDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "message": " `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[TagalogDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 15,
    "warning_line": "    Defaults = TagalogDefaults",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from .lex_attrs import LEX_ATTRS\nfrom ...language import Language\n\n\nclass TagalogDefaults(Language.Defaults):\n    tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "source_code_len": 158,
        "target_code": "from .lex_attrs import LEX_ATTRS\nfrom ...language import Language, BaseDefaults\n\n\nclass TagalogDefaults(BaseDefaults):\n    tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "target_code_len": 167,
        "diff_format": "@@ -3,6 +3,6 @@\n from .lex_attrs import LEX_ATTRS\n-from ...language import Language\n+from ...language import Language, BaseDefaults\n \n \n-class TagalogDefaults(Language.Defaults):\n+class TagalogDefaults(BaseDefaults):\n     tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "source_code_with_indent": "from .lex_attrs import LEX_ATTRS\nfrom ...language import Language\n\n\nclass TagalogDefaults(Language.Defaults):\n    <IND>tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from .lex_attrs import LEX_ATTRS\nfrom ...language import Language, BaseDefaults\n\n\nclass TagalogDefaults(BaseDefaults):\n    <IND>tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/lang/tn/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/lang/tn/__init__.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/lang/tn/__init__.py:15:4 Inconsistent override [15]: `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[SetswanaDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "message": " `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[SetswanaDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 15,
    "warning_line": "    Defaults = SetswanaDefaults",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from .punctuation import TOKENIZER_INFIXES\nfrom ...language import Language\n\n\nclass SetswanaDefaults(Language.Defaults):\n    infixes = TOKENIZER_INFIXES\n",
        "source_code_len": 153,
        "target_code": "from .punctuation import TOKENIZER_INFIXES\nfrom ...language import Language, BaseDefaults\n\n\nclass SetswanaDefaults(BaseDefaults):\n    infixes = TOKENIZER_INFIXES\n",
        "target_code_len": 162,
        "diff_format": "@@ -3,6 +3,6 @@\n from .punctuation import TOKENIZER_INFIXES\n-from ...language import Language\n+from ...language import Language, BaseDefaults\n \n \n-class SetswanaDefaults(Language.Defaults):\n+class SetswanaDefaults(BaseDefaults):\n     infixes = TOKENIZER_INFIXES\n",
        "source_code_with_indent": "from .punctuation import TOKENIZER_INFIXES\nfrom ...language import Language\n\n\nclass SetswanaDefaults(Language.Defaults):\n    <IND>infixes = TOKENIZER_INFIXES\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from .punctuation import TOKENIZER_INFIXES\nfrom ...language import Language, BaseDefaults\n\n\nclass SetswanaDefaults(BaseDefaults):\n    <IND>infixes = TOKENIZER_INFIXES\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/lang/tr/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/lang/tr/__init__.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/lang/tr/__init__.py:18:4 Inconsistent override [15]: `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[TurkishDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "message": " `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[TurkishDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 18,
    "warning_line": "    Defaults = TurkishDefaults",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from .lex_attrs import LEX_ATTRS\nfrom ...language import Language\n\n\nclass TurkishDefaults(Language.Defaults):\n    tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "source_code_len": 158,
        "target_code": "from .lex_attrs import LEX_ATTRS\nfrom ...language import Language, BaseDefaults\n\n\nclass TurkishDefaults(BaseDefaults):\n    tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "target_code_len": 167,
        "diff_format": "@@ -4,6 +4,6 @@\n from .lex_attrs import LEX_ATTRS\n-from ...language import Language\n+from ...language import Language, BaseDefaults\n \n \n-class TurkishDefaults(Language.Defaults):\n+class TurkishDefaults(BaseDefaults):\n     tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "source_code_with_indent": "from .lex_attrs import LEX_ATTRS\nfrom ...language import Language\n\n\nclass TurkishDefaults(Language.Defaults):\n    <IND>tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from .lex_attrs import LEX_ATTRS\nfrom ...language import Language, BaseDefaults\n\n\nclass TurkishDefaults(BaseDefaults):\n    <IND>tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/lang/tt/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/lang/tt/__init__.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/lang/tt/__init__.py:17:4 Inconsistent override [15]: `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[TatarDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "message": " `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[TatarDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 17,
    "warning_line": "    Defaults = TatarDefaults",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from .tokenizer_exceptions import TOKENIZER_EXCEPTIONS\nfrom ...language import Language\n\n\nclass TatarDefaults(Language.Defaults):\n    tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "source_code_len": 178,
        "target_code": "from .tokenizer_exceptions import TOKENIZER_EXCEPTIONS\nfrom ...language import Language, BaseDefaults\n\n\nclass TatarDefaults(BaseDefaults):\n    tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "target_code_len": 187,
        "diff_format": "@@ -4,6 +4,6 @@\n from .tokenizer_exceptions import TOKENIZER_EXCEPTIONS\n-from ...language import Language\n+from ...language import Language, BaseDefaults\n \n \n-class TatarDefaults(Language.Defaults):\n+class TatarDefaults(BaseDefaults):\n     tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "source_code_with_indent": "from .tokenizer_exceptions import TOKENIZER_EXCEPTIONS\nfrom ...language import Language\n\n\nclass TatarDefaults(Language.Defaults):\n    <IND>tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from .tokenizer_exceptions import TOKENIZER_EXCEPTIONS\nfrom ...language import Language, BaseDefaults\n\n\nclass TatarDefaults(BaseDefaults):\n    <IND>tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/lang/uk/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/lang/uk/__init__.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/lang/uk/__init__.py:20:4 Inconsistent override [15]: `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[UkrainianDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "message": " `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[UkrainianDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 20,
    "warning_line": "    Defaults = UkrainianDefaults",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from .lemmatizer import UkrainianLemmatizer\nfrom ...language import Language\n\n\nclass UkrainianDefaults(Language.Defaults):\n    tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "source_code_len": 171,
        "target_code": "from .lemmatizer import UkrainianLemmatizer\nfrom ...language import Language, BaseDefaults\n\n\nclass UkrainianDefaults(BaseDefaults):\n    tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "target_code_len": 180,
        "diff_format": "@@ -8,6 +8,6 @@\n from .lemmatizer import UkrainianLemmatizer\n-from ...language import Language\n+from ...language import Language, BaseDefaults\n \n \n-class UkrainianDefaults(Language.Defaults):\n+class UkrainianDefaults(BaseDefaults):\n     tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "source_code_with_indent": "from .lemmatizer import UkrainianLemmatizer\nfrom ...language import Language\n\n\nclass UkrainianDefaults(Language.Defaults):\n    <IND>tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from .lemmatizer import UkrainianLemmatizer\nfrom ...language import Language, BaseDefaults\n\n\nclass UkrainianDefaults(BaseDefaults):\n    <IND>tokenizer_exceptions = TOKENIZER_EXCEPTIONS\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/lang/ur/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/lang/ur/__init__.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/lang/ur/__init__.py:16:4 Inconsistent override [15]: `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[UrduDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "message": " `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[UrduDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 16,
    "warning_line": "    Defaults = UrduDefaults",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from .punctuation import TOKENIZER_SUFFIXES\nfrom ...language import Language\n\n\nclass UrduDefaults(Language.Defaults):\n    suffixes = TOKENIZER_SUFFIXES\n",
        "source_code_len": 152,
        "target_code": "from .punctuation import TOKENIZER_SUFFIXES\nfrom ...language import Language, BaseDefaults\n\n\nclass UrduDefaults(BaseDefaults):\n    suffixes = TOKENIZER_SUFFIXES\n",
        "target_code_len": 161,
        "diff_format": "@@ -3,6 +3,6 @@\n from .punctuation import TOKENIZER_SUFFIXES\n-from ...language import Language\n+from ...language import Language, BaseDefaults\n \n \n-class UrduDefaults(Language.Defaults):\n+class UrduDefaults(BaseDefaults):\n     suffixes = TOKENIZER_SUFFIXES\n",
        "source_code_with_indent": "from .punctuation import TOKENIZER_SUFFIXES\nfrom ...language import Language\n\n\nclass UrduDefaults(Language.Defaults):\n    <IND>suffixes = TOKENIZER_SUFFIXES\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from .punctuation import TOKENIZER_SUFFIXES\nfrom ...language import Language, BaseDefaults\n\n\nclass UrduDefaults(BaseDefaults):\n    <IND>suffixes = TOKENIZER_SUFFIXES\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/lang/vi/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/lang/vi/__init__.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/lang/vi/__init__.py:136:4 Inconsistent override [14]: `spacy.lang.vi.VietnameseTokenizer.from_bytes` overrides method defined in `DummyTokenizer` inconsistently. Could not find parameter `_bytes_data` in overriding signature.",
    "message": " `spacy.lang.vi.VietnameseTokenizer.from_bytes` overrides method defined in `DummyTokenizer` inconsistently. Could not find parameter `_bytes_data` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 136,
    "warning_line": "    def from_bytes(self, data: bytes, **kwargs) -> \"VietnameseTokenizer\":"
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/lang/vi/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/lang/vi/__init__.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/lang/vi/__init__.py:144:8 Incompatible return type [7]: Expected `None` but got `Path`.",
    "message": " Expected `None` but got `Path`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 144,
    "warning_line": "        return util.to_disk(path, serializers, [])"
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/lang/vi/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/lang/vi/__init__.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/lang/vi/__init__.py:161:4 Inconsistent override [15]: `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[VietnameseDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "message": " `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[VietnameseDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 161,
    "warning_line": "    Defaults = VietnameseDefaults",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from .lex_attrs import LEX_ATTRS\nfrom ...language import Language\nfrom ...tokens import Doc\n",
        "source_code_len": 92,
        "target_code": "from .lex_attrs import LEX_ATTRS\nfrom ...language import Language, BaseDefaults\nfrom ...tokens import Doc\n",
        "target_code_len": 106,
        "diff_format": "@@ -8,3 +8,3 @@\n from .lex_attrs import LEX_ATTRS\n-from ...language import Language\n+from ...language import Language, BaseDefaults\n from ...tokens import Doc\n",
        "source_code_with_indent": "from .lex_attrs import LEX_ATTRS\nfrom ...language import Language\nfrom ...tokens import Doc\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from .lex_attrs import LEX_ATTRS\nfrom ...language import Language, BaseDefaults\nfrom ...tokens import Doc\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nclass VietnameseDefaults(Language.Defaults):\n    config = load_config_from_str(DEFAULT_CONFIG)\n",
        "source_code_len": 96,
        "target_code": "\nclass VietnameseDefaults(BaseDefaults):\n    config = load_config_from_str(DEFAULT_CONFIG)\n",
        "target_code_len": 91,
        "diff_format": "@@ -152,3 +152,3 @@\n \n-class VietnameseDefaults(Language.Defaults):\n+class VietnameseDefaults(BaseDefaults):\n     config = load_config_from_str(DEFAULT_CONFIG)\n",
        "source_code_with_indent": "\n<DED><DED>class VietnameseDefaults(Language.Defaults):\n    <IND>config = load_config_from_str(DEFAULT_CONFIG)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED><DED>class VietnameseDefaults(BaseDefaults):\n    <IND>config = load_config_from_str(DEFAULT_CONFIG)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/lang/yo/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/lang/yo/__init__.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/lang/yo/__init__.py:13:4 Inconsistent override [15]: `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[YorubaDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "message": " `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[YorubaDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 13,
    "warning_line": "    Defaults = YorubaDefaults",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from .lex_attrs import LEX_ATTRS\nfrom ...language import Language\n\n\nclass YorubaDefaults(Language.Defaults):\n    lex_attr_getters = LEX_ATTRS\n",
        "source_code_len": 142,
        "target_code": "from .lex_attrs import LEX_ATTRS\nfrom ...language import Language, BaseDefaults\n\n\nclass YorubaDefaults(BaseDefaults):\n    lex_attr_getters = LEX_ATTRS\n",
        "target_code_len": 151,
        "diff_format": "@@ -2,6 +2,6 @@\n from .lex_attrs import LEX_ATTRS\n-from ...language import Language\n+from ...language import Language, BaseDefaults\n \n \n-class YorubaDefaults(Language.Defaults):\n+class YorubaDefaults(BaseDefaults):\n     lex_attr_getters = LEX_ATTRS\n",
        "source_code_with_indent": "from .lex_attrs import LEX_ATTRS\nfrom ...language import Language\n\n\nclass YorubaDefaults(Language.Defaults):\n    <IND>lex_attr_getters = LEX_ATTRS\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from .lex_attrs import LEX_ATTRS\nfrom ...language import Language, BaseDefaults\n\n\nclass YorubaDefaults(BaseDefaults):\n    <IND>lex_attr_getters = LEX_ATTRS\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/lang/zh/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/lang/zh/__init__.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/lang/zh/__init__.py:88:16 Incompatible parameter type [6]: Expected `str` for 1st parameter `pkuseg_model` to call `try_pkuseg_import` but got `Optional[str]`.",
    "message": " Expected `str` for 1st parameter `pkuseg_model` to call `try_pkuseg_import` but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 88,
    "warning_line": "                pkuseg_model=pkuseg_model, pkuseg_user_dict=pkuseg_user_dict",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef try_pkuseg_import(pkuseg_model: str, pkuseg_user_dict: str) -> None:\n    try:\n",
        "source_code_len": 83,
        "target_code": "\ndef try_pkuseg_import(pkuseg_model: Optional[str], pkuseg_user_dict: Optional[str]):\n    try:\n",
        "target_code_len": 95,
        "diff_format": "@@ -312,3 +312,3 @@\n \n-def try_pkuseg_import(pkuseg_model: str, pkuseg_user_dict: str) -> None:\n+def try_pkuseg_import(pkuseg_model: Optional[str], pkuseg_user_dict: Optional[str]):\n     try:\n",
        "source_code_with_indent": "\n<DED><DED>def try_pkuseg_import(pkuseg_model: str, pkuseg_user_dict: str) -> None:\n    <IND>try:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED><DED>def try_pkuseg_import(pkuseg_model: Optional[str], pkuseg_user_dict: Optional[str]):\n    <IND>try:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    try:\n        return spacy_pkuseg.pkuseg(pkuseg_model, pkuseg_user_dict)\n    except FileNotFoundError:\n        msg = \"Unable to load pkuseg model from: \" + pkuseg_model\n        raise FileNotFoundError(msg) from None\n",
        "source_code_len": 219,
        "target_code": "    try:\n        return spacy_pkuseg.pkuseg(pkuseg_model, user_dict=pkuseg_user_dict)\n    except FileNotFoundError:\n        msg = \"Unable to load pkuseg model from: \" + str(pkuseg_model or \"\")\n        raise FileNotFoundError(msg) from None\n",
        "target_code_len": 240,
        "diff_format": "@@ -320,5 +320,5 @@\n     try:\n-        return spacy_pkuseg.pkuseg(pkuseg_model, pkuseg_user_dict)\n+        return spacy_pkuseg.pkuseg(pkuseg_model, user_dict=pkuseg_user_dict)\n     except FileNotFoundError:\n-        msg = \"Unable to load pkuseg model from: \" + pkuseg_model\n+        msg = \"Unable to load pkuseg model from: \" + str(pkuseg_model or \"\")\n         raise FileNotFoundError(msg) from None\n",
        "source_code_with_indent": "    <DED>try:\n        <IND>return spacy_pkuseg.pkuseg(pkuseg_model, pkuseg_user_dict)\n    <DED>except FileNotFoundError:\n        <IND>msg = \"Unable to load pkuseg model from: \" + pkuseg_model\n        raise FileNotFoundError(msg) from None\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>try:\n        <IND>return spacy_pkuseg.pkuseg(pkuseg_model, user_dict=pkuseg_user_dict)\n    <DED>except FileNotFoundError:\n        <IND>msg = \"Unable to load pkuseg model from: \" + str(pkuseg_model or \"\")\n        raise FileNotFoundError(msg) from None\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/lang/zh/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/lang/zh/__init__.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/lang/zh/__init__.py:88:43 Incompatible parameter type [6]: Expected `str` for 2nd parameter `pkuseg_user_dict` to call `try_pkuseg_import` but got `Optional[str]`.",
    "message": " Expected `str` for 2nd parameter `pkuseg_user_dict` to call `try_pkuseg_import` but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 88,
    "warning_line": "                pkuseg_model=pkuseg_model, pkuseg_user_dict=pkuseg_user_dict",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef try_pkuseg_import(pkuseg_model: str, pkuseg_user_dict: str) -> None:\n    try:\n",
        "source_code_len": 83,
        "target_code": "\ndef try_pkuseg_import(pkuseg_model: Optional[str], pkuseg_user_dict: Optional[str]):\n    try:\n",
        "target_code_len": 95,
        "diff_format": "@@ -312,3 +312,3 @@\n \n-def try_pkuseg_import(pkuseg_model: str, pkuseg_user_dict: str) -> None:\n+def try_pkuseg_import(pkuseg_model: Optional[str], pkuseg_user_dict: Optional[str]):\n     try:\n",
        "source_code_with_indent": "\n<DED><DED>def try_pkuseg_import(pkuseg_model: str, pkuseg_user_dict: str) -> None:\n    <IND>try:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED><DED>def try_pkuseg_import(pkuseg_model: Optional[str], pkuseg_user_dict: Optional[str]):\n    <IND>try:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    try:\n        return spacy_pkuseg.pkuseg(pkuseg_model, pkuseg_user_dict)\n    except FileNotFoundError:\n        msg = \"Unable to load pkuseg model from: \" + pkuseg_model\n        raise FileNotFoundError(msg) from None\n",
        "source_code_len": 219,
        "target_code": "    try:\n        return spacy_pkuseg.pkuseg(pkuseg_model, user_dict=pkuseg_user_dict)\n    except FileNotFoundError:\n        msg = \"Unable to load pkuseg model from: \" + str(pkuseg_model or \"\")\n        raise FileNotFoundError(msg) from None\n",
        "target_code_len": 240,
        "diff_format": "@@ -320,5 +320,5 @@\n     try:\n-        return spacy_pkuseg.pkuseg(pkuseg_model, pkuseg_user_dict)\n+        return spacy_pkuseg.pkuseg(pkuseg_model, user_dict=pkuseg_user_dict)\n     except FileNotFoundError:\n-        msg = \"Unable to load pkuseg model from: \" + pkuseg_model\n+        msg = \"Unable to load pkuseg model from: \" + str(pkuseg_model or \"\")\n         raise FileNotFoundError(msg) from None\n",
        "source_code_with_indent": "    <DED>try:\n        <IND>return spacy_pkuseg.pkuseg(pkuseg_model, pkuseg_user_dict)\n    <DED>except FileNotFoundError:\n        <IND>msg = \"Unable to load pkuseg model from: \" + pkuseg_model\n        raise FileNotFoundError(msg) from None\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>try:\n        <IND>return spacy_pkuseg.pkuseg(pkuseg_model, user_dict=pkuseg_user_dict)\n    <DED>except FileNotFoundError:\n        <IND>msg = \"Unable to load pkuseg model from: \" + str(pkuseg_model or \"\")\n        raise FileNotFoundError(msg) from None\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/lang/zh/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/lang/zh/__init__.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/lang/zh/__init__.py:294:4 Inconsistent override [15]: `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[ChineseDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "message": " `Defaults` overrides attribute defined in `Language` inconsistently. Type `typing.Type[ChineseDefaults]` is not a subtype of the overridden attribute `typing.Type[spacy.language.BaseDefaults]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 294,
    "warning_line": "    Defaults = ChineseDefaults",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from ...errors import Warnings, Errors\nfrom ...language import Language\nfrom ...scorer import Scorer\n",
        "source_code_len": 101,
        "target_code": "from ...errors import Warnings, Errors\nfrom ...language import Language, BaseDefaults\nfrom ...scorer import Scorer\n",
        "target_code_len": 115,
        "diff_format": "@@ -8,3 +8,3 @@\n from ...errors import Warnings, Errors\n-from ...language import Language\n+from ...language import Language, BaseDefaults\n from ...scorer import Scorer\n",
        "source_code_with_indent": "from ...errors import Warnings, Errors\nfrom ...language import Language\nfrom ...scorer import Scorer\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from ...errors import Warnings, Errors\nfrom ...language import Language, BaseDefaults\nfrom ...scorer import Scorer\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nclass ChineseDefaults(Language.Defaults):\n    config = load_config_from_str(DEFAULT_CONFIG)\n",
        "source_code_len": 93,
        "target_code": "\nclass ChineseDefaults(BaseDefaults):\n    config = load_config_from_str(DEFAULT_CONFIG)\n",
        "target_code_len": 88,
        "diff_format": "@@ -284,3 +284,3 @@\n \n-class ChineseDefaults(Language.Defaults):\n+class ChineseDefaults(BaseDefaults):\n     config = load_config_from_str(DEFAULT_CONFIG)\n",
        "source_code_with_indent": "\n<DED><DED>class ChineseDefaults(Language.Defaults):\n    <IND>config = load_config_from_str(DEFAULT_CONFIG)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED><DED>class ChineseDefaults(BaseDefaults):\n    <IND>config = load_config_from_str(DEFAULT_CONFIG)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/language.py",
    "min_patch_found": false,
    "full_warning_msg": "spacy/language.py:114:4 Incompatible attribute type [8]: Attribute `lang` declared in class `Language` has type `str` but is used as type `None`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/language.py",
    "min_patch_found": false,
    "full_warning_msg": "spacy/language.py:166:33 Incompatible parameter type [6]: Expected `Language` for 1st positional only parameter to call `create_vocab` but got `str`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/language.py",
    "min_patch_found": false,
    "full_warning_msg": "spacy/language.py:172:12 Incompatible attribute type [8]: Attribute `lang` declared in class `Language` has type `str` but is used as type `Language`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/language.py",
    "min_patch_found": false,
    "full_warning_msg": "spacy/language.py:543:49 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `Language.get_factory_name` but got `Optional[str]`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/language.py",
    "min_patch_found": false,
    "full_warning_msg": "spacy/language.py:1178:12 Incompatible return type [7]: Expected `Dict[str, float]` but got `None`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/language.py",
    "min_patch_found": false,
    "full_warning_msg": "spacy/language.py:1205:8 Incompatible return type [7]: Expected `Dict[str, float]` but got `Optional[Dict[str, float]]`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/language.py",
    "min_patch_found": false,
    "full_warning_msg": "spacy/language.py:1492:16 Incompatible return type [7]: Expected `Iterator[spacy.tokens.doc.Doc]` but got `typing.Generator[Tuple[typing.Any, typing.Any], None, None]`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/language.py",
    "min_patch_found": false,
    "full_warning_msg": "spacy/language.py:1573:20 Incompatible return type [7]: Expected `None` but got `typing.Generator[spacy.tokens.doc.Doc, None, None]`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/language.py",
    "min_patch_found": false,
    "full_warning_msg": "spacy/language.py:1865:19 Incompatible parameter type [6]: Expected `typing.Sized` for 1st positional only parameter to call `len` but got `Iterable[str]`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/language.py",
    "min_patch_found": false,
    "full_warning_msg": "spacy/language.py:1927:63 Incompatible parameter type [6]: Expected `Union[List[str], Tuple[str]]` for 2nd parameter `exclude` to call `Vocab.to_disk` but got `Iterable[str]`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/language.py",
    "min_patch_found": false,
    "full_warning_msg": "spacy/language.py:1958:43 Incompatible parameter type [6]: Expected `Union[List[str], Tuple[str]]` for 2nd parameter `exclude` to call `Vocab.from_disk` but got `Iterable[str]`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/language.py",
    "min_patch_found": false,
    "full_warning_msg": "spacy/language.py:1996:59 Incompatible parameter type [6]: Expected `Union[List[str], Tuple[str]]` for 1st parameter `exclude` to call `Vocab.to_bytes` but got `Iterable[str]`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/language.py",
    "min_patch_found": false,
    "full_warning_msg": "spacy/language.py:2032:68 Incompatible parameter type [6]: Expected `Union[List[str], Tuple[str]]` for 2nd parameter `exclude` to call `Vocab.from_bytes` but got `Iterable[str]`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/language.py",
    "min_patch_found": false,
    "full_warning_msg": "spacy/language.py:2125:28 Incompatible parameter type [6]: Expected `spacy.tokens.doc.Doc` for 1st positional only parameter to anonymous call but got `Union[typing.Generator[spacy.tokens.doc.Doc, None, None], spacy.tokens.doc.Doc]`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/lookups.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/lookups.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/lookups.py:40:33 Incompatible parameter type [6]: Expected `typing.Dict[typing.Any, typing.Any]` for 2nd positional only parameter to call `Lookups.add_table` but got `Union[List[typing.Any], typing.Dict[typing.Any, typing.Any]]`.",
    "message": " Expected `typing.Dict[typing.Any, typing.Any]` for 2nd positional only parameter to call `Lookups.add_table` but got `Union[List[typing.Any], typing.Dict[typing.Any, typing.Any]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 40,
    "warning_line": "        lookups.add_table(table, language_data)"
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/lookups.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/lookups.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/lookups.py:87:28 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `get_string_id` but got `Union[int, str]`.",
    "message": " Expected `str` for 1st positional only parameter to call `get_string_id` but got `Union[int, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 87,
    "warning_line": "        key = get_string_id(key)"
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/lookups.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/lookups.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/lookups.py:106:28 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `get_string_id` but got `Union[int, str]`.",
    "message": " Expected `str` for 1st positional only parameter to call `get_string_id` but got `Union[int, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 106,
    "warning_line": "        key = get_string_id(key)"
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/lookups.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/lookups.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/lookups.py:116:28 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `get_string_id` but got `Union[int, str]`.",
    "message": " Expected `str` for 1st positional only parameter to call `get_string_id` but got `Union[int, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 116,
    "warning_line": "        key = get_string_id(key)"
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/lookups.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/lookups.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "spacy/lookups.py:119:4 Inconsistent override [14]: `spacy.lookups.Table.__contains__` overrides method defined in `typing.Mapping` inconsistently. Could not find parameter `o` in overriding signature.",
    "message": " `spacy.lookups.Table.__contains__` overrides method defined in `typing.Mapping` inconsistently. Could not find parameter `o` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 119,
    "warning_line": "    def __contains__(self, key: Union[str, int]) -> bool:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n    def __contains__(self, key: Union[str, int]) -> bool:\n        \"\"\"Check whether a key is in the table. String keys will be hashed.\n",
        "source_code_len": 135,
        "target_code": "\n    def __contains__(self, key: Union[str, int]) -> bool:  # type: ignore[override]\n        \"\"\"Check whether a key is in the table. String keys will be hashed.\n",
        "target_code_len": 161,
        "diff_format": "@@ -118,3 +118,3 @@\n \n-    def __contains__(self, key: Union[str, int]) -> bool:\n+    def __contains__(self, key: Union[str, int]) -> bool:  # type: ignore[override]\n         \"\"\"Check whether a key is in the table. String keys will be hashed.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def __contains__(self, key: Union[str, int]) -> bool:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def __contains__(self, key: Union[str, int]) -> bool:  # type: ignore[override]\n        <IND>"
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/lookups.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/lookups.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/lookups.py:125:28 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `get_string_id` but got `Union[int, str]`.",
    "message": " Expected `str` for 1st positional only parameter to call `get_string_id` but got `Union[int, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 125,
    "warning_line": "        key = get_string_id(key)"
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/pipe_analysis.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/pipe_analysis.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/pipe_analysis.py:110:4 Incompatible return type [7]: Expected `Dict[str, Union[Dict[str, List[str]], List[str]]]` but got `Dict[str, Dict[typing.Any, typing.Any]]`.",
    "message": " Expected `Dict[str, Union[Dict[str, List[str]], List[str]]]` but got `Dict[str, Dict[typing.Any, typing.Any]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 110,
    "warning_line": "    return result",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    nlp: \"Language\", *, keys: List[str] = DEFAULT_KEYS\n) -> Dict[str, Union[List[str], Dict[str, List[str]]]]:\n    \"\"\"Print a formatted summary for the current nlp object's pipeline. Shows\n",
        "source_code_len": 189,
        "target_code": "    nlp: \"Language\", *, keys: List[str] = DEFAULT_KEYS\n) -> Dict[str, Dict[str, Union[List[str], Dict]]]:\n    \"\"\"Print a formatted summary for the current nlp object's pipeline. Shows\n",
        "target_code_len": 184,
        "diff_format": "@@ -81,3 +81,3 @@\n     nlp: \"Language\", *, keys: List[str] = DEFAULT_KEYS\n-) -> Dict[str, Union[List[str], Dict[str, List[str]]]]:\n+) -> Dict[str, Dict[str, Union[List[str], Dict]]]:\n     \"\"\"Print a formatted summary for the current nlp object's pipeline. Shows\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "    nlp: \"Language\", *, keys: List[str] = DEFAULT_KEYS\n) -> Dict[str, Union[List[str], Dict[str, List[str]]]]:\n    <IND>",
        "target_code_with_indent": "    nlp: \"Language\", *, keys: List[str] = DEFAULT_KEYS\n) -> Dict[str, Dict[str, Union[List[str], Dict]]]:\n    <IND>"
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/pipeline/attributeruler.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/pipeline/attributeruler.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "spacy/pipeline/attributeruler.py:105:12 Incompatible return type [7]: Expected `spacy.tokens.doc.Doc` but got implicit return value of `None`.",
    "message": " Expected `spacy.tokens.doc.Doc` but got implicit return value of `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 105,
    "warning_line": "            error_handler(self.name, self, [doc], e)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        except Exception as e:\n            error_handler(self.name, self, [doc], e)\n\n    def match(self, doc: Doc):\n        matches = self.matcher(doc, allow_missing=True)\n        # Sort by the attribute ID, so that later rules have precedence\n        matches = [\n            (int(self.vocab.strings[m_id]), m_id, s, e) for m_id, s, e in matches\n        ]\n",
        "source_code_len": 356,
        "target_code": "        except Exception as e:\n            return error_handler(self.name, self, [doc], e)\n\n    def match(self, doc: Doc):\n        matches = self.matcher(doc, allow_missing=True, as_spans=False)\n        # Sort by the attribute ID, so that later rules have precedence\n        matches = [\n            (int(self.vocab.strings[m_id]), m_id, s, e) for m_id, s, e in matches  # type: ignore\n        ]\n",
        "target_code_len": 395,
        "diff_format": "@@ -104,9 +104,9 @@\n         except Exception as e:\n-            error_handler(self.name, self, [doc], e)\n+            return error_handler(self.name, self, [doc], e)\n \n     def match(self, doc: Doc):\n-        matches = self.matcher(doc, allow_missing=True)\n+        matches = self.matcher(doc, allow_missing=True, as_spans=False)\n         # Sort by the attribute ID, so that later rules have precedence\n         matches = [\n-            (int(self.vocab.strings[m_id]), m_id, s, e) for m_id, s, e in matches\n+            (int(self.vocab.strings[m_id]), m_id, s, e) for m_id, s, e in matches  # type: ignore\n         ]\n",
        "source_code_with_indent": "        <DED>except Exception as e:\n            <IND>error_handler(self.name, self, [doc], e)\n\n    <DED><DED>def match(self, doc: Doc):\n        <IND>matches = self.matcher(doc, allow_missing=True)\n        # Sort by the attribute ID, so that later rules have precedence\n        matches = [\n            (int(self.vocab.strings[m_id]), m_id, s, e) for m_id, s, e in matches\n        ]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>except Exception as e:\n            <IND>return error_handler(self.name, self, [doc], e)\n\n    <DED><DED>def match(self, doc: Doc):\n        <IND>matches = self.matcher(doc, allow_missing=True, as_spans=False)\n        # Sort by the attribute ID, so that later rules have precedence\n        matches = [\n            (int(self.vocab.strings[m_id]), m_id, s, e) for m_id, s, e in matches  # type: ignore\n        ]\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/pipeline/attributeruler.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/pipeline/attributeruler.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "spacy/pipeline/attributeruler.py:157:21 Incompatible parameter type [6]: Expected `Iterable[List[Dict[Union[int, str], typing.Any]]]` for 1st positional only parameter to call `AttributeRuler.add` but got `Iterable[List[Dict[str, str]]]`.",
    "message": " Expected `Iterable[List[Dict[Union[int, str], typing.Any]]]` for 1st positional only parameter to call `AttributeRuler.add` but got `Iterable[List[Dict[str, str]]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 157,
    "warning_line": "            self.add([pattern], attrs)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "                attrs[\"MORPH\"] = self.vocab.strings[morph]\n            self.add([pattern], attrs)\n\n",
        "source_code_len": 99,
        "target_code": "                attrs[\"MORPH\"] = self.vocab.strings[morph]\n            self.add([pattern], attrs)  # type: ignore[list-item]\n\n",
        "target_code_len": 126,
        "diff_format": "@@ -156,3 +156,3 @@\n                 attrs[\"MORPH\"] = self.vocab.strings[morph]\n-            self.add([pattern], attrs)\n+            self.add([pattern], attrs)  # type: ignore[list-item]\n \n",
        "source_code_with_indent": "                attrs[\"MORPH\"] = self.vocab.strings[morph]\n            <DED>self.add([pattern], attrs)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                attrs[\"MORPH\"] = self.vocab.strings[morph]\n            <DED>self.add([pattern], attrs)  # type: ignore[list-item]\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/pipeline/attributeruler.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/pipeline/attributeruler.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "spacy/pipeline/attributeruler.py:181:25 Incompatible parameter type [6]: Expected `Iterable[List[Dict[Union[int, str], typing.Any]]]` for 1st positional only parameter to call `AttributeRuler.add` but got `Iterable[List[Dict[str, str]]]`.",
    "message": " Expected `Iterable[List[Dict[Union[int, str], typing.Any]]]` for 1st positional only parameter to call `AttributeRuler.add` but got `Iterable[List[Dict[str, str]]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 181,
    "warning_line": "                self.add([pattern], attrs)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "                    attrs[\"MORPH\"] = self.vocab.strings[morph]\n                self.add([pattern], attrs)\n\n",
        "source_code_len": 107,
        "target_code": "                    attrs[\"MORPH\"] = self.vocab.strings[morph]\n                self.add([pattern], attrs)  # type: ignore[list-item]\n\n",
        "target_code_len": 134,
        "diff_format": "@@ -180,3 +180,3 @@\n                     attrs[\"MORPH\"] = self.vocab.strings[morph]\n-                self.add([pattern], attrs)\n+                self.add([pattern], attrs)  # type: ignore[list-item]\n \n",
        "source_code_with_indent": "                    attrs[\"MORPH\"] = self.vocab.strings[morph]\n                <DED>self.add([pattern], attrs)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                    attrs[\"MORPH\"] = self.vocab.strings[morph]\n                <DED>self.add([pattern], attrs)  # type: ignore[list-item]\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/pipeline/attributeruler.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/pipeline/attributeruler.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "spacy/pipeline/attributeruler.py:201:54 Incompatible parameter type [6]: Expected `List[List[Dict[str, typing.Any]]]` for 2nd positional only parameter to call `spacy.matcher.matcher.Matcher.add` but got `Iterable[List[Dict[Union[int, str], typing.Any]]]`.",
    "message": " Expected `List[List[Dict[str, typing.Any]]]` for 2nd positional only parameter to call `spacy.matcher.matcher.Matcher.add` but got `Iterable[List[Dict[Union[int, str], typing.Any]]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 201,
    "warning_line": "        self.matcher.add(self.vocab.strings.add(key), patterns)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        key = str(len(self.attrs))\n        self.matcher.add(self.vocab.strings.add(key), patterns)\n        self._attrs_unnormed.append(attrs)\n",
        "source_code_len": 142,
        "target_code": "        key = str(len(self.attrs))\n        self.matcher.add(self.vocab.strings.add(key), patterns)  # type: ignore[arg-type]\n        self._attrs_unnormed.append(attrs)\n",
        "target_code_len": 168,
        "diff_format": "@@ -200,3 +200,3 @@\n         key = str(len(self.attrs))\n-        self.matcher.add(self.vocab.strings.add(key), patterns)\n+        self.matcher.add(self.vocab.strings.add(key), patterns)  # type: ignore[arg-type]\n         self._attrs_unnormed.append(attrs)\n",
        "source_code_with_indent": "        key = str(len(self.attrs))\n        self.matcher.add(self.vocab.strings.add(key), patterns)\n        self._attrs_unnormed.append(attrs)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        key = str(len(self.attrs))\n        self.matcher.add(self.vocab.strings.add(key), patterns)  # type: ignore[arg-type]\n        self._attrs_unnormed.append(attrs)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/pipeline/attributeruler.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/pipeline/attributeruler.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "spacy/pipeline/attributeruler.py:217:23 Incompatible parameter type [6]: Expected `Dict[typing.Any, typing.Any]` for 1st positional only parameter to call `AttributeRuler.add` but got `Union[Dict[typing.Any, typing.Any], List[Dict[Union[int, str], typing.Any]], int]`.",
    "message": " Expected `Dict[typing.Any, typing.Any]` for 1st positional only parameter to call `AttributeRuler.add` but got `Union[Dict[typing.Any, typing.Any], List[Dict[Union[int, str], typing.Any]], int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 217,
    "warning_line": "            self.add(**p)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        for p in patterns:\n            self.add(**p)\n\n",
        "source_code_len": 54,
        "target_code": "        for p in patterns:\n            self.add(**p)  # type: ignore[arg-type]\n\n",
        "target_code_len": 80,
        "diff_format": "@@ -216,3 +216,3 @@\n         for p in patterns:\n-            self.add(**p)\n+            self.add(**p)  # type: ignore[arg-type]\n \n",
        "source_code_with_indent": "        for p in patterns:\n            <IND>self.add(**p)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        for p in patterns:\n            <IND>self.add(**p)  # type: ignore[arg-type]\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/pipeline/attributeruler.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/pipeline/attributeruler.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "spacy/pipeline/attributeruler.py:217:23 Incompatible parameter type [6]: Expected `Iterable[List[Dict[Union[int, str], typing.Any]]]` for 1st positional only parameter to call `AttributeRuler.add` but got `Union[Dict[typing.Any, typing.Any], List[Dict[Union[int, str], typing.Any]], int]`.",
    "message": " Expected `Iterable[List[Dict[Union[int, str], typing.Any]]]` for 1st positional only parameter to call `AttributeRuler.add` but got `Union[Dict[typing.Any, typing.Any], List[Dict[Union[int, str], typing.Any]], int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 217,
    "warning_line": "            self.add(**p)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        for p in patterns:\n            self.add(**p)\n\n",
        "source_code_len": 54,
        "target_code": "        for p in patterns:\n            self.add(**p)  # type: ignore[arg-type]\n\n",
        "target_code_len": 80,
        "diff_format": "@@ -216,3 +216,3 @@\n         for p in patterns:\n-            self.add(**p)\n+            self.add(**p)  # type: ignore[arg-type]\n \n",
        "source_code_with_indent": "        for p in patterns:\n            <IND>self.add(**p)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        for p in patterns:\n            <IND>self.add(**p)  # type: ignore[arg-type]\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/pipeline/attributeruler.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/pipeline/attributeruler.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "spacy/pipeline/attributeruler.py:217:23 Incompatible parameter type [6]: Expected `int` for 1st positional only parameter to call `AttributeRuler.add` but got `Union[Dict[typing.Any, typing.Any], List[Dict[Union[int, str], typing.Any]], int]`.",
    "message": " Expected `int` for 1st positional only parameter to call `AttributeRuler.add` but got `Union[Dict[typing.Any, typing.Any], List[Dict[Union[int, str], typing.Any]], int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 217,
    "warning_line": "            self.add(**p)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        for p in patterns:\n            self.add(**p)\n\n",
        "source_code_len": 54,
        "target_code": "        for p in patterns:\n            self.add(**p)  # type: ignore[arg-type]\n\n",
        "target_code_len": 80,
        "diff_format": "@@ -216,3 +216,3 @@\n         for p in patterns:\n-            self.add(**p)\n+            self.add(**p)  # type: ignore[arg-type]\n \n",
        "source_code_with_indent": "        for p in patterns:\n            <IND>self.add(**p)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        for p in patterns:\n            <IND>self.add(**p)  # type: ignore[arg-type]\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/pipeline/attributeruler.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/pipeline/attributeruler.py",
    "file_hunks_size": 8,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/pipeline/attributeruler.py:279:57 Incompatible parameter type [6]: Expected `Union[List[str], Tuple[str]]` for 1st parameter `exclude` to call `Vocab.to_bytes` but got `Iterable[str]`.",
    "message": " Expected `Union[List[str], Tuple[str]]` for 1st parameter `exclude` to call `Vocab.to_bytes` but got `Iterable[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 279,
    "warning_line": "        serialize[\"vocab\"] = lambda: self.vocab.to_bytes(exclude=exclude)"
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/pipeline/attributeruler.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/pipeline/attributeruler.py",
    "file_hunks_size": 8,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/pipeline/attributeruler.py:299:56 Incompatible parameter type [6]: Expected `Union[List[str], Tuple[str]]` for 2nd parameter `exclude` to call `Vocab.from_bytes` but got `Iterable[str]`.",
    "message": " Expected `Union[List[str], Tuple[str]]` for 2nd parameter `exclude` to call `Vocab.from_bytes` but got `Iterable[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 299,
    "warning_line": "            \"vocab\": lambda b: self.vocab.from_bytes(b, exclude=exclude),"
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/pipeline/attributeruler.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/pipeline/attributeruler.py",
    "file_hunks_size": 8,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/pipeline/attributeruler.py:316:53 Incompatible parameter type [6]: Expected `Union[List[str], Tuple[str]]` for 2nd parameter `exclude` to call `Vocab.to_disk` but got `Iterable[str]`.",
    "message": " Expected `Union[List[str], Tuple[str]]` for 2nd parameter `exclude` to call `Vocab.to_disk` but got `Iterable[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 316,
    "warning_line": "            \"vocab\": lambda p: self.vocab.to_disk(p, exclude=exclude),"
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/pipeline/attributeruler.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/pipeline/attributeruler.py",
    "file_hunks_size": 8,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/pipeline/attributeruler.py:337:55 Incompatible parameter type [6]: Expected `Union[List[str], Tuple[str]]` for 2nd parameter `exclude` to call `Vocab.from_disk` but got `Iterable[str]`.",
    "message": " Expected `Union[List[str], Tuple[str]]` for 2nd parameter `exclude` to call `Vocab.from_disk` but got `Iterable[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 337,
    "warning_line": "            \"vocab\": lambda p: self.vocab.from_disk(p, exclude=exclude),"
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/pipeline/entity_linker.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/pipeline/entity_linker.py",
    "file_hunks_size": 9,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/pipeline/entity_linker.py:54:4 Incompatible parameter type [6]: Expected `Dict[str, float]` for 5th parameter `default_score_weights` to call `Language.factory` but got `Dict[str, Optional[float]]`.",
    "message": " Expected `Dict[str, float]` for 5th parameter `default_score_weights` to call `Language.factory` but got `Dict[str, Optional[float]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 54,
    "warning_line": "    default_score_weights={"
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/pipeline/entity_linker.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/pipeline/entity_linker.py",
    "file_hunks_size": 9,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/pipeline/entity_linker.py:456:61 Incompatible parameter type [6]: Expected `Union[List[str], typing.Tuple[str]]` for 2nd parameter `exclude` to call `Vocab.to_disk` but got `Iterable[str]`.",
    "message": " Expected `Union[List[str], typing.Tuple[str]]` for 2nd parameter `exclude` to call `Vocab.to_disk` but got `Iterable[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 456,
    "warning_line": "        serialize[\"vocab\"] = lambda p: self.vocab.to_disk(p, exclude=exclude)"
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/pipeline/entity_linker.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/pipeline/entity_linker.py",
    "file_hunks_size": 9,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/pipeline/entity_linker.py:483:65 Incompatible parameter type [6]: Expected `Union[List[str], typing.Tuple[str]]` for 2nd parameter `exclude` to call `Vocab.from_disk` but got `Iterable[str]`.",
    "message": " Expected `Union[List[str], typing.Tuple[str]]` for 2nd parameter `exclude` to call `Vocab.from_disk` but got `Iterable[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 483,
    "warning_line": "        deserialize[\"vocab\"] = lambda p: self.vocab.from_disk(p, exclude=exclude)"
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/pipeline/entityruler.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/pipeline/entityruler.py",
    "file_hunks_size": 12,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/pipeline/entityruler.py:31:4 Incompatible parameter type [6]: Expected `Dict[str, float]` for 4th parameter `default_score_weights` to call `Language.factory` but got `Dict[str, Optional[float]]`.",
    "message": " Expected `Dict[str, float]` for 4th parameter `default_score_weights` to call `Language.factory` but got `Dict[str, Optional[float]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 31,
    "warning_line": "    default_score_weights={"
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/pipeline/entityruler.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/pipeline/entityruler.py",
    "file_hunks_size": 12,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/pipeline/entityruler.py:140:12 Incompatible return type [7]: Expected `spacy.tokens.doc.Doc` but got implicit return value of `None`.",
    "message": " Expected `spacy.tokens.doc.Doc` but got implicit return value of `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 140,
    "warning_line": "            error_handler(self.name, self, [doc], e)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        except Exception as e:\n            error_handler(self.name, self, [doc], e)\n\n",
        "source_code_len": 85,
        "target_code": "        except Exception as e:\n            return error_handler(self.name, self, [doc], e)\n\n",
        "target_code_len": 92,
        "diff_format": "@@ -139,3 +140,3 @@\n         except Exception as e:\n-            error_handler(self.name, self, [doc], e)\n+            return error_handler(self.name, self, [doc], e)\n \n",
        "source_code_with_indent": "        <DED>except Exception as e:\n            <IND>error_handler(self.name, self, [doc], e)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>except Exception as e:\n            <IND>return error_handler(self.name, self, [doc], e)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/pipeline/entityruler.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/pipeline/entityruler.py",
    "file_hunks_size": 12,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "spacy/pipeline/entityruler.py:217:30 Incompatible parameter type [6]: Expected `List[Dict[str, Union[List[Dict[str, typing.Any]], str]]]` for 1st positional only parameter to call `EntityRuler.add_patterns` but got `Sequence[Dict[str, Union[List[Dict[str, typing.Any]], str]]]`.",
    "message": " Expected `List[Dict[str, Union[List[Dict[str, typing.Any]], str]]]` for 1st positional only parameter to call `EntityRuler.add_patterns` but got `Sequence[Dict[str, Union[List[Dict[str, typing.Any]], str]]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 217,
    "warning_line": "            self.add_patterns(patterns)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        if patterns:\n            self.add_patterns(patterns)\n\n    @property\n    def ent_ids(self) -> Tuple[str, ...]:\n        \"\"\"All entity ids present in the match patterns `id` properties\n",
        "source_code_len": 190,
        "target_code": "        if patterns:\n            self.add_patterns(patterns)  # type: ignore[arg-type]\n\n    @property\n    def ent_ids(self) -> Tuple[Optional[str], ...]:\n        \"\"\"All entity ids present in the match patterns `id` properties\n",
        "target_code_len": 226,
        "diff_format": "@@ -216,6 +220,6 @@\n         if patterns:\n-            self.add_patterns(patterns)\n+            self.add_patterns(patterns)  # type: ignore[arg-type]\n \n     @property\n-    def ent_ids(self) -> Tuple[str, ...]:\n+    def ent_ids(self) -> Tuple[Optional[str], ...]:\n         \"\"\"All entity ids present in the match patterns `id` properties\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "        if patterns:\n            <IND>self.add_patterns(patterns)\n\n    <DED><DED>@property\n    def ent_ids(self) -> Tuple[str, ...]:\n        <IND>",
        "target_code_with_indent": "        if patterns:\n            <IND>self.add_patterns(patterns)  # type: ignore[arg-type]\n\n    <DED><DED>@property\n    def ent_ids(self) -> Tuple[Optional[str], ...]:\n        <IND>"
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/pipeline/entityruler.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/pipeline/entityruler.py",
    "file_hunks_size": 12,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/pipeline/entityruler.py:348:8 Incompatible return type [7]: Expected `Tuple[str, str]` but got `Tuple[str, Optional[str]]`.",
    "message": " Expected `Tuple[str, str]` but got `Tuple[str, Optional[str]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 348,
    "warning_line": "        return ent_label, ent_id",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _split_label(self, label: str) -> Tuple[str, str]:\n        \"\"\"Split Entity label into ent_label and ent_id if it contains self.ent_id_sep\n",
        "source_code_len": 147,
        "target_code": "\n    def _split_label(self, label: str) -> Tuple[str, Optional[str]]:\n        \"\"\"Split Entity label into ent_label and ent_id if it contains self.ent_id_sep\n",
        "target_code_len": 157,
        "diff_format": "@@ -336,3 +340,3 @@\n \n-    def _split_label(self, label: str) -> Tuple[str, str]:\n+    def _split_label(self, label: str) -> Tuple[str, Optional[str]]:\n         \"\"\"Split Entity label into ent_label and ent_id if it contains self.ent_id_sep\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED><DED>def _split_label(self, label: str) -> Tuple[str, str]:\n        <IND>",
        "target_code_with_indent": "\n    <DED><DED>def _split_label(self, label: str) -> Tuple[str, Optional[str]]:\n        <IND>"
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/pipeline/functions.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/pipeline/functions.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "spacy/pipeline/functions.py:28:34 Incompatible parameter type [6]: Expected `Dict[typing.Union[int, str], typing.Any]` for 2nd parameter `attrs` to call `spacy.tokens._retokenize.Retokenizer.merge` but got `Dict[str, int]`.",
    "message": " Expected `Dict[typing.Union[int, str], typing.Any]` for 2nd parameter `attrs` to call `spacy.tokens._retokenize.Retokenizer.merge` but got `Dict[str, int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 28,
    "warning_line": "            retokenizer.merge(np, attrs=attrs)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "            attrs = {\"tag\": np.root.tag, \"dep\": np.root.dep}\n            retokenizer.merge(np, attrs=attrs)\n    return doc\n",
        "source_code_len": 123,
        "target_code": "            attrs = {\"tag\": np.root.tag, \"dep\": np.root.dep}\n            retokenizer.merge(np, attrs=attrs)  # type: ignore[arg-type]\n    return doc\n",
        "target_code_len": 149,
        "diff_format": "@@ -27,3 +27,3 @@\n             attrs = {\"tag\": np.root.tag, \"dep\": np.root.dep}\n-            retokenizer.merge(np, attrs=attrs)\n+            retokenizer.merge(np, attrs=attrs)  # type: ignore[arg-type]\n     return doc\n",
        "source_code_with_indent": "            <IND>attrs = {\"tag\": np.root.tag, \"dep\": np.root.dep}\n            retokenizer.merge(np, attrs=attrs)\n    <DED><DED>return doc\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <IND>attrs = {\"tag\": np.root.tag, \"dep\": np.root.dep}\n            retokenizer.merge(np, attrs=attrs)  # type: ignore[arg-type]\n    <DED><DED>return doc\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/pipeline/functions.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/pipeline/functions.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "spacy/pipeline/functions.py:48:35 Incompatible parameter type [6]: Expected `Dict[typing.Union[int, str], typing.Any]` for 2nd parameter `attrs` to call `spacy.tokens._retokenize.Retokenizer.merge` but got `Dict[str, int]`.",
    "message": " Expected `Dict[typing.Union[int, str], typing.Any]` for 2nd parameter `attrs` to call `spacy.tokens._retokenize.Retokenizer.merge` but got `Dict[str, int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 48,
    "warning_line": "            retokenizer.merge(ent, attrs=attrs)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "            attrs = {\"tag\": ent.root.tag, \"dep\": ent.root.dep, \"ent_type\": ent.label}\n            retokenizer.merge(ent, attrs=attrs)\n    return doc\n",
        "source_code_len": 149,
        "target_code": "            attrs = {\"tag\": ent.root.tag, \"dep\": ent.root.dep, \"ent_type\": ent.label}\n            retokenizer.merge(ent, attrs=attrs)  # type: ignore[arg-type]\n    return doc\n",
        "target_code_len": 175,
        "diff_format": "@@ -47,3 +47,3 @@\n             attrs = {\"tag\": ent.root.tag, \"dep\": ent.root.dep, \"ent_type\": ent.label}\n-            retokenizer.merge(ent, attrs=attrs)\n+            retokenizer.merge(ent, attrs=attrs)  # type: ignore[arg-type]\n     return doc\n",
        "source_code_with_indent": "            <IND>attrs = {\"tag\": ent.root.tag, \"dep\": ent.root.dep, \"ent_type\": ent.label}\n            retokenizer.merge(ent, attrs=attrs)\n    <DED><DED>return doc\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <IND>attrs = {\"tag\": ent.root.tag, \"dep\": ent.root.dep, \"ent_type\": ent.label}\n            retokenizer.merge(ent, attrs=attrs)  # type: ignore[arg-type]\n    <DED><DED>return doc\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/pipeline/functions.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/pipeline/functions.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "spacy/pipeline/functions.py:66:43 Unsupported operand [58]: `+` is not supported for operand types `typing.Union[int, spacy.tokens.token.Token]` and `int`.",
    "message": " `+` is not supported for operand types `typing.Union[int, spacy.tokens.token.Token]` and `int`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 66,
    "warning_line": "    spans = util.filter_spans([doc[start : end + 1] for _, start, end in matches])",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "    matches = merger(doc)\n    spans = util.filter_spans([doc[start : end + 1] for _, start, end in matches])\n    with doc.retokenize() as retokenizer:\n",
        "source_code_len": 151,
        "target_code": "    matches = merger(doc)\n    spans = util.filter_spans([doc[start : end + 1] for _, start, end in matches])  # type: ignore[misc, operator]\n    with doc.retokenize() as retokenizer:\n",
        "target_code_len": 183,
        "diff_format": "@@ -65,3 +65,3 @@\n     matches = merger(doc)\n-    spans = util.filter_spans([doc[start : end + 1] for _, start, end in matches])\n+    spans = util.filter_spans([doc[start : end + 1] for _, start, end in matches])  # type: ignore[misc, operator]\n     with doc.retokenize() as retokenizer:\n",
        "source_code_with_indent": "    matches = merger(doc)\n    spans = util.filter_spans([doc[start : end + 1] for _, start, end in matches])\n    with doc.retokenize() as retokenizer:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    matches = merger(doc)\n    spans = util.filter_spans([doc[start : end + 1] for _, start, end in matches])  # type: ignore[misc, operator]\n    with doc.retokenize() as retokenizer:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/pipeline/lemmatizer.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/pipeline/lemmatizer.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/pipeline/lemmatizer.py:114:12 Incompatible return type [7]: Expected `spacy.tokens.doc.Doc` but got implicit return value of `None`.",
    "message": " Expected `spacy.tokens.doc.Doc` but got implicit return value of `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 114,
    "warning_line": "            error_handler(self.name, self, [doc], e)"
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/pipeline/lemmatizer.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/pipeline/lemmatizer.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/pipeline/lemmatizer.py:135:35 Incompatible parameter type [6]: Expected `str` for 1st parameter `lang` to call `load_lookups` but got `Language`.",
    "message": " Expected `str` for 1st parameter `lang` to call `load_lookups` but got `Language`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 135,
    "warning_line": "            lookups = load_lookups(lang=self.vocab.lang, tables=required_tables)"
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/pipeline/lemmatizer.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/pipeline/lemmatizer.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/pipeline/lemmatizer.py:137:16 Incompatible parameter type [6]: Expected `str` for 1st parameter `lang` to call `load_lookups` but got `Language`.",
    "message": " Expected `str` for 1st parameter `lang` to call `load_lookups` but got `Language`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 137,
    "warning_line": "                lang=self.vocab.lang, tables=optional_tables, strict=False"
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/pipeline/lemmatizer.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/pipeline/lemmatizer.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/pipeline/lemmatizer.py:272:61 Incompatible parameter type [6]: Expected `Union[List[str], Tuple[str]]` for 2nd parameter `exclude` to call `Vocab.to_disk` but got `Iterable[str]`.",
    "message": " Expected `Union[List[str], Tuple[str]]` for 2nd parameter `exclude` to call `Vocab.to_disk` but got `Iterable[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 272,
    "warning_line": "        serialize[\"vocab\"] = lambda p: self.vocab.to_disk(p, exclude=exclude)"
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/pipeline/lemmatizer.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/pipeline/lemmatizer.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/pipeline/lemmatizer.py:288:65 Incompatible parameter type [6]: Expected `Union[List[str], Tuple[str]]` for 2nd parameter `exclude` to call `Vocab.from_disk` but got `Iterable[str]`.",
    "message": " Expected `Union[List[str], Tuple[str]]` for 2nd parameter `exclude` to call `Vocab.from_disk` but got `Iterable[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 288,
    "warning_line": "        deserialize[\"vocab\"] = lambda p: self.vocab.from_disk(p, exclude=exclude)"
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/pipeline/lemmatizer.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/pipeline/lemmatizer.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/pipeline/lemmatizer.py:303:57 Incompatible parameter type [6]: Expected `Union[List[str], Tuple[str]]` for 1st parameter `exclude` to call `Vocab.to_bytes` but got `Iterable[str]`.",
    "message": " Expected `Union[List[str], Tuple[str]]` for 1st parameter `exclude` to call `Vocab.to_bytes` but got `Iterable[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 303,
    "warning_line": "        serialize[\"vocab\"] = lambda: self.vocab.to_bytes(exclude=exclude)"
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/pipeline/lemmatizer.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/pipeline/lemmatizer.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/pipeline/lemmatizer.py:319:66 Incompatible parameter type [6]: Expected `Union[List[str], Tuple[str]]` for 2nd parameter `exclude` to call `Vocab.from_bytes` but got `Iterable[str]`.",
    "message": " Expected `Union[List[str], Tuple[str]]` for 2nd parameter `exclude` to call `Vocab.from_bytes` but got `Iterable[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 319,
    "warning_line": "        deserialize[\"vocab\"] = lambda b: self.vocab.from_bytes(b, exclude=exclude)"
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/pipeline/spancat.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/pipeline/spancat.py",
    "file_hunks_size": 23,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "spacy/pipeline/spancat.py:207:8 Incompatible return type [7]: Expected `Tuple[str]` but got `typing.Tuple[typing.Any, ...]`.",
    "message": " Expected `Tuple[str]` but got `typing.Tuple[typing.Any, ...]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 207,
    "warning_line": "        return tuple(self.cfg[\"labels\"])",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        \"\"\"\n        return tuple(self.cfg[\"labels\"])\n\n",
        "source_code_len": 54,
        "target_code": "        \"\"\"\n        return tuple(self.cfg[\"labels\"])  # type: ignore\n\n",
        "target_code_len": 70,
        "diff_format": "@@ -206,3 +212,3 @@\n         \"\"\"\n-        return tuple(self.cfg[\"labels\"])\n+        return tuple(self.cfg[\"labels\"])  # type: ignore\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n        return tuple(self.cfg[\"labels\"])\n\n",
        "target_code_with_indent": "\n        return tuple(self.cfg[\"labels\"])  # type: ignore\n\n"
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/pipeline/spancat.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/pipeline/spancat.py",
    "file_hunks_size": 23,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "spacy/pipeline/spancat.py:243:78 Incompatible parameter type [6]: Expected `List[str]` for 4th positional only parameter to call `SpanCategorizer._make_span_group` but got `Tuple[str]`.",
    "message": " Expected `List[str]` for 4th positional only parameter to call `SpanCategorizer._make_span_group` but got `Tuple[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 243,
    "warning_line": "                doc, indices_i, scores[offset : offset + indices.lengths[i]], labels",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "            doc.spans[self.key] = self._make_span_group(\n                doc, indices_i, scores[offset : offset + indices.lengths[i]], labels\n            )\n",
        "source_code_len": 156,
        "target_code": "            doc.spans[self.key] = self._make_span_group(\n                doc, indices_i, scores[offset : offset + indices.lengths[i]], labels  # type: ignore[arg-type]\n            )\n",
        "target_code_len": 182,
        "diff_format": "@@ -242,3 +248,3 @@\n             doc.spans[self.key] = self._make_span_group(\n-                doc, indices_i, scores[offset : offset + indices.lengths[i]], labels\n+                doc, indices_i, scores[offset : offset + indices.lengths[i]], labels  # type: ignore[arg-type]\n             )\n",
        "source_code_with_indent": "            doc.spans[self.key] = self._make_span_group(\n                doc, indices_i, scores[offset : offset + indices.lengths[i]], labels\n            )\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            doc.spans[self.key] = self._make_span_group(\n                doc, indices_i, scores[offset : offset + indices.lengths[i]], labels  # type: ignore[arg-type]\n            )\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/pipeline/spancat.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/pipeline/spancat.py",
    "file_hunks_size": 23,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/pipeline/spancat.py:342:8 Incompatible variable type [9]: nlp is declared to have type `Language` but is used as type `None`.",
    "message": " nlp is declared to have type `Language` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 342,
    "warning_line": "        nlp: Language = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        *,\n        nlp: Language = None,\n        labels: Optional[List[str]] = None,\n",
        "source_code_len": 85,
        "target_code": "        *,\n        nlp: Optional[Language] = None,\n        labels: Optional[List[str]] = None,\n",
        "target_code_len": 95,
        "diff_format": "@@ -341,3 +347,3 @@\n         *,\n-        nlp: Language = None,\n+        nlp: Optional[Language] = None,\n         labels: Optional[List[str]] = None,\n",
        "source_code_with_indent": "        *,\n        nlp: Language = None,\n        labels: Optional[List[str]] = None,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        *,\n        nlp: Optional[Language] = None,\n        labels: Optional[List[str]] = None,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/pipeline/spancat.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/pipeline/spancat.py",
    "file_hunks_size": 23,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/pipeline/spancat.py:429:55 Incompatible parameter type [6]: Expected `int` for 4th parameter `label` to call `spacy.tokens.span.Span.__init__` but got `str`.",
    "message": " Expected `int` for 4th parameter `label` to call `spacy.tokens.span.Span.__init__` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 429,
    "warning_line": "                    spans.append(Span(doc, start, end, label=labels[j]))"
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/pipeline/textcat.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/pipeline/textcat.py",
    "file_hunks_size": 10,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/pipeline/textcat.py:74:4 Incompatible parameter type [6]: Expected `Dict[str, float]` for 4th parameter `default_score_weights` to call `Language.factory` but got `Dict[str, Optional[float]]`.",
    "message": " Expected `Dict[str, float]` for 4th parameter `default_score_weights` to call `Language.factory` but got `Dict[str, Optional[float]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 74,
    "warning_line": "    default_score_weights={"
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/pipeline/textcat.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/pipeline/textcat.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "spacy/pipeline/textcat.py:134:8 Incompatible return type [7]: Expected `Tuple[str]` but got `typing.Tuple[typing.Any, ...]`.",
    "message": " Expected `Tuple[str]` but got `typing.Tuple[typing.Any, ...]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 134,
    "warning_line": "        return tuple(self.cfg[\"labels\"])",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        \"\"\"\n        return tuple(self.cfg[\"labels\"])\n\n",
        "source_code_len": 54,
        "target_code": "        \"\"\"\n        return tuple(self.cfg[\"labels\"])  # type: ignore[arg-type, return-value]\n\n",
        "target_code_len": 94,
        "diff_format": "@@ -133,3 +133,3 @@\n         \"\"\"\n-        return tuple(self.cfg[\"labels\"])\n+        return tuple(self.cfg[\"labels\"])  # type: ignore[arg-type, return-value]\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n        return tuple(self.cfg[\"labels\"])\n\n",
        "target_code_with_indent": "\n        return tuple(self.cfg[\"labels\"])  # type: ignore[arg-type, return-value]\n\n"
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/pipeline/textcat.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/pipeline/textcat.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "spacy/pipeline/textcat.py:142:8 Incompatible return type [7]: Expected `List[str]` but got `Tuple[str]`.",
    "message": " Expected `List[str]` but got `Tuple[str]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 142,
    "warning_line": "        return self.labels",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        \"\"\"\n        return self.labels\n\n",
        "source_code_len": 40,
        "target_code": "        \"\"\"\n        return self.labels  # type: ignore[return-value]\n\n",
        "target_code_len": 70,
        "diff_format": "@@ -141,3 +141,3 @@\n         \"\"\"\n-        return self.labels\n+        return self.labels  # type: ignore[return-value]\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n        return self.labels\n\n",
        "target_code_with_indent": "\n        return self.labels  # type: ignore[return-value]\n\n"
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/pipeline/textcat.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/pipeline/textcat.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/pipeline/textcat.py:156:35 Incompatible parameter type [6]: Expected `typing.Sized` for 1st positional only parameter to call `len` but got `Iterable[spacy.tokens.doc.Doc]`.",
    "message": " Expected `typing.Sized` for 1st positional only parameter to call `len` but got `Iterable[spacy.tokens.doc.Doc]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 156,
    "warning_line": "            scores = xp.zeros((len(docs), len(self.labels)))",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            xp = get_array_module(tensors)\n            scores = xp.zeros((len(docs), len(self.labels)))\n            return scores\n",
        "source_code_len": 130,
        "target_code": "            xp = get_array_module(tensors)\n            scores = xp.zeros((len(list(docs)), len(self.labels)))\n            return scores\n",
        "target_code_len": 136,
        "diff_format": "@@ -155,3 +155,3 @@\n             xp = get_array_module(tensors)\n-            scores = xp.zeros((len(docs), len(self.labels)))\n+            scores = xp.zeros((len(list(docs)), len(self.labels)))\n             return scores\n",
        "source_code_with_indent": "            xp = get_array_module(tensors)\n            scores = xp.zeros((len(docs), len(self.labels)))\n            return scores\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            xp = get_array_module(tensors)\n            scores = xp.zeros((len(list(docs)), len(self.labels)))\n            return scores\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/pipeline/textcat.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/pipeline/textcat.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/pipeline/textcat.py:236:12 Incompatible return type [7]: Expected `Dict[str, float]` but got `Optional[Dict[str, float]]`.",
    "message": " Expected `Dict[str, float]` but got `Optional[Dict[str, float]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 236,
    "warning_line": "            return losses",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"\"\"\n        if losses is not None:\n            losses.setdefault(self.name, 0.0)\n        if self._rehearsal_model is None:\n",
        "source_code_len": 131,
        "target_code": "        \"\"\"\n        if losses is None:\n            losses = {}\n        losses.setdefault(self.name, 0.0)\n        if self._rehearsal_model is None:\n",
        "target_code_len": 147,
        "diff_format": "@@ -232,4 +232,5 @@\n         \"\"\"\n-        if losses is not None:\n-            losses.setdefault(self.name, 0.0)\n+        if losses is None:\n+            losses = {}\n+        losses.setdefault(self.name, 0.0)\n         if self._rehearsal_model is None:\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n        if losses is not None:\n            <IND>losses.setdefault(self.name, 0.0)\n        <DED>if self._rehearsal_model is None:\n",
        "target_code_with_indent": "\n        if losses is None:\n            <IND>losses = {}\n        <DED>losses.setdefault(self.name, 0.0)\n        if self._rehearsal_model is None:\n"
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/pipeline/textcat.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/pipeline/textcat.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/pipeline/textcat.py:242:12 Incompatible return type [7]: Expected `Dict[str, float]` but got `Optional[Dict[str, float]]`.",
    "message": " Expected `Dict[str, float]` but got `Optional[Dict[str, float]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 242,
    "warning_line": "            return losses",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"\"\"\n        if losses is not None:\n            losses.setdefault(self.name, 0.0)\n        if self._rehearsal_model is None:\n",
        "source_code_len": 131,
        "target_code": "        \"\"\"\n        if losses is None:\n            losses = {}\n        losses.setdefault(self.name, 0.0)\n        if self._rehearsal_model is None:\n",
        "target_code_len": 147,
        "diff_format": "@@ -232,4 +232,5 @@\n         \"\"\"\n-        if losses is not None:\n-            losses.setdefault(self.name, 0.0)\n+        if losses is None:\n+            losses = {}\n+        losses.setdefault(self.name, 0.0)\n         if self._rehearsal_model is None:\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n        if losses is not None:\n            <IND>losses.setdefault(self.name, 0.0)\n        <DED>if self._rehearsal_model is None:\n",
        "target_code_with_indent": "\n        if losses is None:\n            <IND>losses = {}\n        <DED>losses.setdefault(self.name, 0.0)\n        if self._rehearsal_model is None:\n"
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/pipeline/textcat.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/pipeline/textcat.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/pipeline/textcat.py:252:8 Incompatible return type [7]: Expected `Dict[str, float]` but got `Optional[Dict[str, float]]`.",
    "message": " Expected `Dict[str, float]` but got `Optional[Dict[str, float]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 252,
    "warning_line": "        return losses",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"\"\"\n        if losses is not None:\n            losses.setdefault(self.name, 0.0)\n        if self._rehearsal_model is None:\n",
        "source_code_len": 131,
        "target_code": "        \"\"\"\n        if losses is None:\n            losses = {}\n        losses.setdefault(self.name, 0.0)\n        if self._rehearsal_model is None:\n",
        "target_code_len": 147,
        "diff_format": "@@ -232,4 +232,5 @@\n         \"\"\"\n-        if losses is not None:\n-            losses.setdefault(self.name, 0.0)\n+        if losses is None:\n+            losses = {}\n+        losses.setdefault(self.name, 0.0)\n         if self._rehearsal_model is None:\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n        if losses is not None:\n            <IND>losses.setdefault(self.name, 0.0)\n        <DED>if self._rehearsal_model is None:\n",
        "target_code_with_indent": "\n        if losses is None:\n            <IND>losses = {}\n        <DED>losses.setdefault(self.name, 0.0)\n        if self._rehearsal_model is None:\n"
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/pipeline/textcat_multilabel.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/pipeline/textcat_multilabel.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/pipeline/textcat_multilabel.py:74:4 Incompatible parameter type [6]: Expected `Dict[str, float]` for 4th parameter `default_score_weights` to call `Language.factory` but got `Dict[str, Optional[float]]`.",
    "message": " Expected `Dict[str, float]` for 4th parameter `default_score_weights` to call `Language.factory` but got `Dict[str, Optional[float]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 74,
    "warning_line": "    default_score_weights={"
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/pipeline/textcat_multilabel.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/pipeline/textcat_multilabel.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "spacy/pipeline/textcat_multilabel.py:134:4 Inconsistent override [14]: `spacy.pipeline.textcat_multilabel.MultiLabel_TextCategorizer.initialize` overrides method defined in `TextCategorizer` inconsistently. Could not find parameter `positive_label` in overriding signature.",
    "message": " `spacy.pipeline.textcat_multilabel.MultiLabel_TextCategorizer.initialize` overrides method defined in `TextCategorizer` inconsistently. Could not find parameter `positive_label` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 134,
    "warning_line": "    def initialize(",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n    def initialize(\n        self,\n",
        "source_code_len": 35,
        "target_code": "\n    def initialize(  # type: ignore[override]\n        self,\n",
        "target_code_len": 61,
        "diff_format": "@@ -133,3 +133,3 @@\n \n-    def initialize(\n+    def initialize(  # type: ignore[override]\n         self,\n",
        "source_code_with_indent": "\n    <DED>def initialize(\n        self,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def initialize(  # type: ignore[override]\n        self,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/pipeline/tok2vec.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/pipeline/tok2vec.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/pipeline/tok2vec.py:122:48 Incompatible parameter type [6]: Expected `List[spacy.tokens.doc.Doc]` for 1st positional only parameter to call `Tok2VecListener.get_batch_id` but got `Iterable[spacy.tokens.doc.Doc]`.",
    "message": " Expected `List[spacy.tokens.doc.Doc]` for 1st positional only parameter to call `Tok2VecListener.get_batch_id` but got `Iterable[spacy.tokens.doc.Doc]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 122,
    "warning_line": "        batch_id = Tok2VecListener.get_batch_id(docs)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @classmethod\n    def get_batch_id(cls, inputs: List[Doc]) -> int:\n        \"\"\"Calculate a content-sensitive hash of the batch of documents, to check\n",
        "source_code_len": 152,
        "target_code": "    @classmethod\n    def get_batch_id(cls, inputs: Iterable[Doc]) -> int:\n        \"\"\"Calculate a content-sensitive hash of the batch of documents, to check\n",
        "target_code_len": 156,
        "diff_format": "@@ -252,3 +252,3 @@\n     @classmethod\n-    def get_batch_id(cls, inputs: List[Doc]) -> int:\n+    def get_batch_id(cls, inputs: Iterable[Doc]) -> int:\n         \"\"\"Calculate a content-sensitive hash of the batch of documents, to check\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "    <DED>@classmethod\n    def get_batch_id(cls, inputs: List[Doc]) -> int:\n        <IND>",
        "target_code_with_indent": "    <DED>@classmethod\n    def get_batch_id(cls, inputs: Iterable[Doc]) -> int:\n        <IND>"
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/schemas.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/schemas.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "spacy/schemas.py:388:4 Incompatible attribute type [8]: Attribute `pretraining` declared in class `ConfigSchema` has type `Union[ConfigSchemaPretrain, ConfigSchemaPretrainEmpty]` but is used as type `Dict[Variable[_KT], Variable[_VT]]`.",
    "message": " Attribute `pretraining` declared in class `ConfigSchema` has type `Union[ConfigSchemaPretrain, ConfigSchemaPretrainEmpty]` but is used as type `Dict[Variable[_KT], Variable[_VT]]`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 388,
    "warning_line": "    pretraining: Union[ConfigSchemaPretrain, ConfigSchemaPretrainEmpty] = {}",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "    nlp: ConfigSchemaNlp\n    pretraining: Union[ConfigSchemaPretrain, ConfigSchemaPretrainEmpty] = {}\n    components: Dict[str, Dict[str, Any]]\n",
        "source_code_len": 144,
        "target_code": "    nlp: ConfigSchemaNlp\n    pretraining: Union[ConfigSchemaPretrain, ConfigSchemaPretrainEmpty] = {}  # type: ignore[assignment]\n    components: Dict[str, Dict[str, Any]]\n",
        "target_code_len": 172,
        "diff_format": "@@ -387,3 +387,3 @@\n     nlp: ConfigSchemaNlp\n-    pretraining: Union[ConfigSchemaPretrain, ConfigSchemaPretrainEmpty] = {}\n+    pretraining: Union[ConfigSchemaPretrain, ConfigSchemaPretrainEmpty] = {}  # type: ignore[assignment]\n     components: Dict[str, Dict[str, Any]]\n",
        "source_code_with_indent": "    nlp: ConfigSchemaNlp\n    pretraining: Union[ConfigSchemaPretrain, ConfigSchemaPretrainEmpty] = {}\n    components: Dict[str, Dict[str, Any]]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    nlp: ConfigSchemaNlp\n    pretraining: Union[ConfigSchemaPretrain, ConfigSchemaPretrainEmpty] = {}  # type: ignore[assignment]\n    components: Dict[str, Dict[str, Any]]\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/scorer.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/scorer.py",
    "file_hunks_size": 21,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/scorer.py:117:12 Incompatible variable type [9]: nlp is declared to have type `Optional[Language]` but is used as type `spacy.tokens.doc.Doc`.",
    "message": " nlp is declared to have type `Optional[Language]` but is used as type `spacy.tokens.doc.Doc`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 117,
    "warning_line": "            nlp = get_lang_class(default_lang)()"
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/scorer.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/scorer.py",
    "file_hunks_size": 21,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/scorer.py:393:40 Incompatible parameter type [6]: Expected `None` for 2nd positional only parameter to call `dict.__setitem__` but got `float`.",
    "message": " Expected `None` for 2nd positional only parameter to call `dict.__setitem__` but got `float`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 393,
    "warning_line": "            final_scores[f\"{attr}_p\"] = score.precision",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        # Assemble final result\n        final_scores = {\n            f\"{attr}_p\": None,\n",
        "source_code_len": 88,
        "target_code": "        # Assemble final result\n        final_scores: Dict[str, Any] = {\n            f\"{attr}_p\": None,\n",
        "target_code_len": 104,
        "diff_format": "@@ -384,3 +392,3 @@\n         # Assemble final result\n-        final_scores = {\n+        final_scores: Dict[str, Any] = {\n             f\"{attr}_p\": None,\n",
        "source_code_with_indent": "        # Assemble final result\n        <DED>final_scores = {\n            f\"{attr}_p\": None,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        # Assemble final result\n        <DED>final_scores: Dict[str, Any] = {\n            f\"{attr}_p\": None,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/scorer.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/scorer.py",
    "file_hunks_size": 21,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/scorer.py:394:40 Incompatible parameter type [6]: Expected `None` for 2nd positional only parameter to call `dict.__setitem__` but got `float`.",
    "message": " Expected `None` for 2nd positional only parameter to call `dict.__setitem__` but got `float`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 394,
    "warning_line": "            final_scores[f\"{attr}_r\"] = score.recall",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        # Assemble final result\n        final_scores = {\n            f\"{attr}_p\": None,\n",
        "source_code_len": 88,
        "target_code": "        # Assemble final result\n        final_scores: Dict[str, Any] = {\n            f\"{attr}_p\": None,\n",
        "target_code_len": 104,
        "diff_format": "@@ -384,3 +392,3 @@\n         # Assemble final result\n-        final_scores = {\n+        final_scores: Dict[str, Any] = {\n             f\"{attr}_p\": None,\n",
        "source_code_with_indent": "        # Assemble final result\n        <DED>final_scores = {\n            f\"{attr}_p\": None,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        # Assemble final result\n        <DED>final_scores: Dict[str, Any] = {\n            f\"{attr}_p\": None,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/scorer.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/scorer.py",
    "file_hunks_size": 21,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/scorer.py:395:40 Incompatible parameter type [6]: Expected `None` for 2nd positional only parameter to call `dict.__setitem__` but got `float`.",
    "message": " Expected `None` for 2nd positional only parameter to call `dict.__setitem__` but got `float`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 395,
    "warning_line": "            final_scores[f\"{attr}_f\"] = score.fscore",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        # Assemble final result\n        final_scores = {\n            f\"{attr}_p\": None,\n",
        "source_code_len": 88,
        "target_code": "        # Assemble final result\n        final_scores: Dict[str, Any] = {\n            f\"{attr}_p\": None,\n",
        "target_code_len": 104,
        "diff_format": "@@ -384,3 +392,3 @@\n         # Assemble final result\n-        final_scores = {\n+        final_scores: Dict[str, Any] = {\n             f\"{attr}_p\": None,\n",
        "source_code_with_indent": "        # Assemble final result\n        <DED>final_scores = {\n            f\"{attr}_p\": None,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        # Assemble final result\n        <DED>final_scores: Dict[str, Any] = {\n            f\"{attr}_p\": None,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/scorer.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/scorer.py",
    "file_hunks_size": 21,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/scorer.py:397:51 Incompatible parameter type [6]: Expected `None` for 2nd positional only parameter to call `dict.__setitem__` but got `Dict[typing.Any, typing.Any]`.",
    "message": " Expected `None` for 2nd positional only parameter to call `dict.__setitem__` but got `Dict[typing.Any, typing.Any]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 397,
    "warning_line": "                final_scores[f\"{attr}_per_type\"] = {",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        # Assemble final result\n        final_scores = {\n            f\"{attr}_p\": None,\n",
        "source_code_len": 88,
        "target_code": "        # Assemble final result\n        final_scores: Dict[str, Any] = {\n            f\"{attr}_p\": None,\n",
        "target_code_len": 104,
        "diff_format": "@@ -384,3 +392,3 @@\n         # Assemble final result\n-        final_scores = {\n+        final_scores: Dict[str, Any] = {\n             f\"{attr}_p\": None,\n",
        "source_code_with_indent": "        # Assemble final result\n        <DED>final_scores = {\n            f\"{attr}_p\": None,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        # Assemble final result\n        <DED>final_scores: Dict[str, Any] = {\n            f\"{attr}_p\": None,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/scorer.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/scorer.py",
    "file_hunks_size": 21,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/scorer.py:529:44 Incompatible parameter type [6]: Expected `typing.Union[None, Dict[str, unknown], float]` for 2nd positional only parameter to call `dict.__setitem__` but got `str`.",
    "message": " Expected `typing.Union[None, Dict[str, unknown], float]` for 2nd positional only parameter to call `dict.__setitem__` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 529,
    "warning_line": "            results[f\"{attr}_score_desc\"] = f\"F ({positive_label})\"",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        )\n        results = {\n            f\"{attr}_score\": None,\n",
        "source_code_len": 65,
        "target_code": "        )\n        results: Dict[str, Any] = {\n            f\"{attr}_score\": None,\n",
        "target_code_len": 81,
        "diff_format": "@@ -510,3 +518,3 @@\n         )\n-        results = {\n+        results: Dict[str, Any] = {\n             f\"{attr}_score\": None,\n",
        "source_code_with_indent": "        )\n        results = {\n            f\"{attr}_score\": None,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        )\n        results: Dict[str, Any] = {\n            f\"{attr}_score\": None,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/scorer.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/scorer.py",
    "file_hunks_size": 21,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/scorer.py:532:44 Incompatible parameter type [6]: Expected `typing.Union[None, Dict[str, unknown], float]` for 2nd positional only parameter to call `dict.__setitem__` but got `str`.",
    "message": " Expected `typing.Union[None, Dict[str, unknown], float]` for 2nd positional only parameter to call `dict.__setitem__` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 532,
    "warning_line": "            results[f\"{attr}_score_desc\"] = \"macro F\"",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        )\n        results = {\n            f\"{attr}_score\": None,\n",
        "source_code_len": 65,
        "target_code": "        )\n        results: Dict[str, Any] = {\n            f\"{attr}_score\": None,\n",
        "target_code_len": 81,
        "diff_format": "@@ -510,3 +518,3 @@\n         )\n-        results = {\n+        results: Dict[str, Any] = {\n             f\"{attr}_score\": None,\n",
        "source_code_with_indent": "        )\n        results = {\n            f\"{attr}_score\": None,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        )\n        results: Dict[str, Any] = {\n            f\"{attr}_score\": None,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/scorer.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/scorer.py",
    "file_hunks_size": 21,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/scorer.py:535:44 Incompatible parameter type [6]: Expected `typing.Union[None, Dict[str, unknown], float]` for 2nd positional only parameter to call `dict.__setitem__` but got `str`.",
    "message": " Expected `typing.Union[None, Dict[str, unknown], float]` for 2nd positional only parameter to call `dict.__setitem__` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 535,
    "warning_line": "            results[f\"{attr}_score_desc\"] = \"macro AUC\"",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        )\n        results = {\n            f\"{attr}_score\": None,\n",
        "source_code_len": 65,
        "target_code": "        )\n        results: Dict[str, Any] = {\n            f\"{attr}_score\": None,\n",
        "target_code_len": 81,
        "diff_format": "@@ -510,3 +518,3 @@\n         )\n-        results = {\n+        results: Dict[str, Any] = {\n             f\"{attr}_score\": None,\n",
        "source_code_with_indent": "        )\n        results = {\n            f\"{attr}_score\": None,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        )\n        results: Dict[str, Any] = {\n            f\"{attr}_score\": None,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/tokens/_dict_proxies.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/tokens/_dict_proxies.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "spacy/tokens/_dict_proxies.py:25:32 Incompatible parameter type [6]: Expected `typing.Optional[typing.Mapping[Variable[collections._KT], Variable[collections._VT]]]` for 2nd positional only parameter to call `UserDict.__init__` but got `Iterable[Tuple[str, SpanGroup]]`.",
    "message": " Expected `typing.Optional[typing.Mapping[Variable[collections._KT], Variable[collections._VT]]]` for 2nd positional only parameter to call `UserDict.__init__` but got `Iterable[Tuple[str, SpanGroup]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 25,
    "warning_line": "        UserDict.__init__(self, items)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        self.doc_ref = weakref.ref(doc)\n        UserDict.__init__(self, items)\n\n",
        "source_code_len": 80,
        "target_code": "        self.doc_ref = weakref.ref(doc)\n        UserDict.__init__(self, items)  # type: ignore[arg-type]\n\n",
        "target_code_len": 106,
        "diff_format": "@@ -24,3 +25,3 @@\n         self.doc_ref = weakref.ref(doc)\n-        UserDict.__init__(self, items)\n+        UserDict.__init__(self, items)  # type: ignore[arg-type]\n \n",
        "source_code_with_indent": "        <IND>self.doc_ref = weakref.ref(doc)\n        UserDict.__init__(self, items)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>self.doc_ref = weakref.ref(doc)\n        UserDict.__init__(self, items)  # type: ignore[arg-type]\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/tokens/_dict_proxies.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/tokens/_dict_proxies.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/tokens/_dict_proxies.py:36:19 Incompatible variable type [9]: doc is declared to have type `Doc` but is used as type `None`.",
    "message": " doc is declared to have type `Doc` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 36,
    "warning_line": "    def copy(self, doc: \"Doc\" = None) -> \"SpanGroups\":",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import Iterable, Tuple, Union, TYPE_CHECKING\nimport weakref\n",
        "source_code_len": 72,
        "target_code": "from typing import Iterable, Tuple, Union, Optional, TYPE_CHECKING\nimport weakref\n",
        "target_code_len": 82,
        "diff_format": "@@ -1,2 +1,2 @@\n-from typing import Iterable, Tuple, Union, TYPE_CHECKING\n+from typing import Iterable, Tuple, Union, Optional, TYPE_CHECKING\n import weakref\n",
        "source_code_with_indent": "from typing import Iterable, Tuple, Union, TYPE_CHECKING\nimport weakref\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Iterable, Tuple, Union, Optional, TYPE_CHECKING\nimport weakref\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from .span_group import SpanGroup\n\n",
        "source_code_len": 35,
        "target_code": "from .span_group import SpanGroup\nfrom ..errors import Errors\n\n",
        "target_code_len": 63,
        "diff_format": "@@ -6,2 +6,3 @@\n from .span_group import SpanGroup\n+from ..errors import Errors\n \n",
        "source_code_with_indent": "from .span_group import SpanGroup\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from .span_group import SpanGroup\nfrom ..errors import Errors\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        self.doc_ref = weakref.ref(doc)\n        UserDict.__init__(self, items)\n\n",
        "source_code_len": 80,
        "target_code": "        self.doc_ref = weakref.ref(doc)\n        UserDict.__init__(self, items)  # type: ignore[arg-type]\n\n",
        "target_code_len": 106,
        "diff_format": "@@ -24,3 +25,3 @@\n         self.doc_ref = weakref.ref(doc)\n-        UserDict.__init__(self, items)\n+        UserDict.__init__(self, items)  # type: ignore[arg-type]\n \n",
        "source_code_with_indent": "        <IND>self.doc_ref = weakref.ref(doc)\n        UserDict.__init__(self, items)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>self.doc_ref = weakref.ref(doc)\n        UserDict.__init__(self, items)  # type: ignore[arg-type]\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def _make_span_group(self, name: str, spans: Iterable[\"Span\"]) -> SpanGroup:\n        return SpanGroup(self.doc_ref(), name=name, spans=spans)\n\n    def copy(self, doc: \"Doc\" = None) -> \"SpanGroups\":\n        if doc is None:\n            doc = self.doc_ref()\n        return SpanGroups(doc).from_bytes(self.to_bytes())\n",
        "source_code_len": 318,
        "target_code": "    def _make_span_group(self, name: str, spans: Iterable[\"Span\"]) -> SpanGroup:\n        doc = self._ensure_doc()\n        return SpanGroup(doc, name=name, spans=spans)\n\n    def copy(self, doc: Optional[\"Doc\"] = None) -> \"SpanGroups\":\n        if doc is None:\n            doc = self._ensure_doc()\n        return SpanGroups(doc).from_bytes(self.to_bytes())\n",
        "target_code_len": 354,
        "diff_format": "@@ -33,7 +34,8 @@\n     def _make_span_group(self, name: str, spans: Iterable[\"Span\"]) -> SpanGroup:\n-        return SpanGroup(self.doc_ref(), name=name, spans=spans)\n+        doc = self._ensure_doc()\n+        return SpanGroup(doc, name=name, spans=spans)\n \n-    def copy(self, doc: \"Doc\" = None) -> \"SpanGroups\":\n+    def copy(self, doc: Optional[\"Doc\"] = None) -> \"SpanGroups\":\n         if doc is None:\n-            doc = self.doc_ref()\n+            doc = self._ensure_doc()\n         return SpanGroups(doc).from_bytes(self.to_bytes())\n",
        "source_code_with_indent": "    <DED>def _make_span_group(self, name: str, spans: Iterable[\"Span\"]) -> SpanGroup:\n        <IND>return SpanGroup(self.doc_ref(), name=name, spans=spans)\n\n    <DED>def copy(self, doc: \"Doc\" = None) -> \"SpanGroups\":\n        <IND>if doc is None:\n            <IND>doc = self.doc_ref()\n        <DED>return SpanGroups(doc).from_bytes(self.to_bytes())\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def _make_span_group(self, name: str, spans: Iterable[\"Span\"]) -> SpanGroup:\n        <IND>doc = self._ensure_doc()\n        return SpanGroup(doc, name=name, spans=spans)\n\n    <DED>def copy(self, doc: Optional[\"Doc\"] = None) -> \"SpanGroups\":\n        <IND>if doc is None:\n            <IND>doc = self._ensure_doc()\n        <DED>return SpanGroups(doc).from_bytes(self.to_bytes())\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        return self\n",
        "source_code_len": 20,
        "target_code": "        return self\n\n    def _ensure_doc(self) -> \"Doc\":\n        doc = self.doc_ref()\n        if doc is None:\n            raise ValueError(Errors.E866)\n        return doc\n",
        "target_code_len": 171,
        "diff_format": "@@ -54,1 +56,7 @@\n         return self\n+\n+    def _ensure_doc(self) -> \"Doc\":\n+        doc = self.doc_ref()\n+        if doc is None:\n+            raise ValueError(Errors.E866)\n+        return doc\n",
        "source_code_with_indent": "        <DED>return self\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>return self\n\n    <DED>def _ensure_doc(self) -> \"Doc\":\n        <IND>doc = self.doc_ref()\n        if doc is None:\n            <IND>raise ValueError(Errors.E866)\n        <DED>return doc\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/training/augment.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/training/augment.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/training/augment.py:25:4 Incompatible attribute type [8]: Attribute `paired` declared in class `OrthVariants` has type `List[OrthVariantsPaired]` but is used as type `Dict[Variable[_KT], Variable[_VT]]`.",
    "message": " Attribute `paired` declared in class `OrthVariants` has type `List[OrthVariantsPaired]` but is used as type `Dict[Variable[_KT], Variable[_VT]]`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 25,
    "warning_line": "    paired: List[OrthVariantsPaired] = {}",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "class OrthVariants(BaseModel):\n    paired: List[OrthVariantsPaired] = {}\n    single: List[OrthVariantsSingle] = {}\n\n",
        "source_code_len": 116,
        "target_code": "class OrthVariants(BaseModel):\n    paired: List[OrthVariantsPaired] = []\n    single: List[OrthVariantsSingle] = []\n\n",
        "target_code_len": 116,
        "diff_format": "@@ -24,4 +24,4 @@\n class OrthVariants(BaseModel):\n-    paired: List[OrthVariantsPaired] = {}\n-    single: List[OrthVariantsSingle] = {}\n+    paired: List[OrthVariantsPaired] = []\n+    single: List[OrthVariantsSingle] = []\n \n",
        "source_code_with_indent": "<DED>class OrthVariants(BaseModel):\n    <IND>paired: List[OrthVariantsPaired] = {}\n    single: List[OrthVariantsSingle] = {}\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED>class OrthVariants(BaseModel):\n    <IND>paired: List[OrthVariantsPaired] = []\n    single: List[OrthVariantsSingle] = []\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/training/augment.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/training/augment.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/training/augment.py:26:4 Incompatible attribute type [8]: Attribute `single` declared in class `OrthVariants` has type `List[OrthVariantsSingle]` but is used as type `Dict[Variable[_KT], Variable[_VT]]`.",
    "message": " Attribute `single` declared in class `OrthVariants` has type `List[OrthVariantsSingle]` but is used as type `Dict[Variable[_KT], Variable[_VT]]`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 26,
    "warning_line": "    single: List[OrthVariantsSingle] = {}",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "class OrthVariants(BaseModel):\n    paired: List[OrthVariantsPaired] = {}\n    single: List[OrthVariantsSingle] = {}\n\n",
        "source_code_len": 116,
        "target_code": "class OrthVariants(BaseModel):\n    paired: List[OrthVariantsPaired] = []\n    single: List[OrthVariantsSingle] = []\n\n",
        "target_code_len": 116,
        "diff_format": "@@ -24,4 +24,4 @@\n class OrthVariants(BaseModel):\n-    paired: List[OrthVariantsPaired] = {}\n-    single: List[OrthVariantsSingle] = {}\n+    paired: List[OrthVariantsPaired] = []\n+    single: List[OrthVariantsSingle] = []\n \n",
        "source_code_with_indent": "<DED>class OrthVariants(BaseModel):\n    <IND>paired: List[OrthVariantsPaired] = {}\n    single: List[OrthVariantsSingle] = {}\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED>class OrthVariants(BaseModel):\n    <IND>paired: List[OrthVariantsPaired] = []\n    single: List[OrthVariantsSingle] = []\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/training/batchers.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/training/batchers.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/training/batchers.py:119:27 Incompatible parameter type [6]: Expected `typing.Iterator[Variable[_T]]` for 1st positional only parameter to call `next` but got `Iterable[int]`.",
    "message": " Expected `typing.Iterator[Variable[_T]]` for 1st positional only parameter to call `next` but got `Iterable[int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 119,
    "warning_line": "        target_size = next(size_)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import Union, Iterable, Sequence, TypeVar, List, Callable\nfrom typing import Optional, Any\n",
        "source_code_len": 103,
        "target_code": "from typing import Union, Iterable, Sequence, TypeVar, List, Callable, Iterator\nfrom typing import Optional, Any\n",
        "target_code_len": 113,
        "diff_format": "@@ -1,2 +1,2 @@\n-from typing import Union, Iterable, Sequence, TypeVar, List, Callable\n+from typing import Union, Iterable, Sequence, TypeVar, List, Callable, Iterator\n from typing import Optional, Any\n",
        "source_code_with_indent": "from typing import Union, Iterable, Sequence, TypeVar, List, Callable\nfrom typing import Optional, Any\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Union, Iterable, Sequence, TypeVar, List, Callable, Iterator\nfrom typing import Optional, Any\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    if isinstance(size, int):\n        size_ = itertools.repeat(size)\n    else:\n        size_ = size\n    for outer_batch in minibatch(seqs, size=buffer):\n",
        "source_code_len": 153,
        "target_code": "    if isinstance(size, int):\n        size_ = itertools.repeat(size)  # type: Iterator[int]\n    else:\n        size_ = iter(size)\n    for outer_batch in minibatch(seqs, size=buffer):\n",
        "target_code_len": 182,
        "diff_format": "@@ -113,5 +113,5 @@\n     if isinstance(size, int):\n-        size_ = itertools.repeat(size)\n+        size_ = itertools.repeat(size)  # type: Iterator[int]\n     else:\n-        size_ = size\n+        size_ = iter(size)\n     for outer_batch in minibatch(seqs, size=buffer):\n",
        "source_code_with_indent": "    if isinstance(size, int):\n        <IND>size_ = itertools.repeat(size)\n    <DED>else:\n        <IND>size_ = size\n    <DED>for outer_batch in minibatch(seqs, size=buffer):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    if isinstance(size, int):\n        <IND>size_ = itertools.repeat(size)  # type: Iterator[int]\n    <DED>else:\n        <IND>size_ = iter(size)\n    <DED>for outer_batch in minibatch(seqs, size=buffer):\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    if isinstance(size, int):\n        size_ = itertools.repeat(size)\n    elif isinstance(size, List):\n        size_ = iter(size)\n    else:\n        size_ = size\n    target_size = next(size_)\n",
        "source_code_len": 190,
        "target_code": "    if isinstance(size, int):\n        size_ = itertools.repeat(size)  # type: Iterator[int]\n    else:\n        size_ = iter(size)\n    target_size = next(size_)\n",
        "target_code_len": 159,
        "diff_format": "@@ -149,7 +149,5 @@\n     if isinstance(size, int):\n-        size_ = itertools.repeat(size)\n-    elif isinstance(size, List):\n+        size_ = itertools.repeat(size)  # type: Iterator[int]\n+    else:\n         size_ = iter(size)\n-    else:\n-        size_ = size\n     target_size = next(size_)\n",
        "source_code_with_indent": "    if isinstance(size, int):\n        <IND>size_ = itertools.repeat(size)\n    <DED>elif isinstance(size, List):\n        <IND>size_ = iter(size)\n    <DED>else:\n        <IND>size_ = size\n    <DED>target_size = next(size_)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    if isinstance(size, int):\n        <IND>size_ = itertools.repeat(size)  # type: Iterator[int]\n    <DED>else:\n        <IND>size_ = iter(size)\n    <DED>target_size = next(size_)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/training/batchers.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/training/batchers.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/training/batchers.py:155:23 Incompatible parameter type [6]: Expected `typing.Iterator[Variable[_T]]` for 1st positional only parameter to call `next` but got `Iterable[typing.Any]`.",
    "message": " Expected `typing.Iterator[Variable[_T]]` for 1st positional only parameter to call `next` but got `Iterable[typing.Any]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 155,
    "warning_line": "    target_size = next(size_)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import Union, Iterable, Sequence, TypeVar, List, Callable\nfrom typing import Optional, Any\n",
        "source_code_len": 103,
        "target_code": "from typing import Union, Iterable, Sequence, TypeVar, List, Callable, Iterator\nfrom typing import Optional, Any\n",
        "target_code_len": 113,
        "diff_format": "@@ -1,2 +1,2 @@\n-from typing import Union, Iterable, Sequence, TypeVar, List, Callable\n+from typing import Union, Iterable, Sequence, TypeVar, List, Callable, Iterator\n from typing import Optional, Any\n",
        "source_code_with_indent": "from typing import Union, Iterable, Sequence, TypeVar, List, Callable\nfrom typing import Optional, Any\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Union, Iterable, Sequence, TypeVar, List, Callable, Iterator\nfrom typing import Optional, Any\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    if isinstance(size, int):\n        size_ = itertools.repeat(size)\n    else:\n        size_ = size\n    for outer_batch in minibatch(seqs, size=buffer):\n",
        "source_code_len": 153,
        "target_code": "    if isinstance(size, int):\n        size_ = itertools.repeat(size)  # type: Iterator[int]\n    else:\n        size_ = iter(size)\n    for outer_batch in minibatch(seqs, size=buffer):\n",
        "target_code_len": 182,
        "diff_format": "@@ -113,5 +113,5 @@\n     if isinstance(size, int):\n-        size_ = itertools.repeat(size)\n+        size_ = itertools.repeat(size)  # type: Iterator[int]\n     else:\n-        size_ = size\n+        size_ = iter(size)\n     for outer_batch in minibatch(seqs, size=buffer):\n",
        "source_code_with_indent": "    if isinstance(size, int):\n        <IND>size_ = itertools.repeat(size)\n    <DED>else:\n        <IND>size_ = size\n    <DED>for outer_batch in minibatch(seqs, size=buffer):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    if isinstance(size, int):\n        <IND>size_ = itertools.repeat(size)  # type: Iterator[int]\n    <DED>else:\n        <IND>size_ = iter(size)\n    <DED>for outer_batch in minibatch(seqs, size=buffer):\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    if isinstance(size, int):\n        size_ = itertools.repeat(size)\n    elif isinstance(size, List):\n        size_ = iter(size)\n    else:\n        size_ = size\n    target_size = next(size_)\n",
        "source_code_len": 190,
        "target_code": "    if isinstance(size, int):\n        size_ = itertools.repeat(size)  # type: Iterator[int]\n    else:\n        size_ = iter(size)\n    target_size = next(size_)\n",
        "target_code_len": 159,
        "diff_format": "@@ -149,7 +149,5 @@\n     if isinstance(size, int):\n-        size_ = itertools.repeat(size)\n-    elif isinstance(size, List):\n+        size_ = itertools.repeat(size)  # type: Iterator[int]\n+    else:\n         size_ = iter(size)\n-    else:\n-        size_ = size\n     target_size = next(size_)\n",
        "source_code_with_indent": "    if isinstance(size, int):\n        <IND>size_ = itertools.repeat(size)\n    <DED>elif isinstance(size, List):\n        <IND>size_ = iter(size)\n    <DED>else:\n        <IND>size_ = size\n    <DED>target_size = next(size_)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    if isinstance(size, int):\n        <IND>size_ = itertools.repeat(size)  # type: Iterator[int]\n    <DED>else:\n        <IND>size_ = iter(size)\n    <DED>target_size = next(size_)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/training/batchers.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/training/batchers.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/training/batchers.py:180:31 Incompatible parameter type [6]: Expected `typing.Iterator[Variable[_T]]` for 1st positional only parameter to call `next` but got `Iterable[typing.Any]`.",
    "message": " Expected `typing.Iterator[Variable[_T]]` for 1st positional only parameter to call `next` but got `Iterable[typing.Any]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 180,
    "warning_line": "            target_size = next(size_)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import Union, Iterable, Sequence, TypeVar, List, Callable\nfrom typing import Optional, Any\n",
        "source_code_len": 103,
        "target_code": "from typing import Union, Iterable, Sequence, TypeVar, List, Callable, Iterator\nfrom typing import Optional, Any\n",
        "target_code_len": 113,
        "diff_format": "@@ -1,2 +1,2 @@\n-from typing import Union, Iterable, Sequence, TypeVar, List, Callable\n+from typing import Union, Iterable, Sequence, TypeVar, List, Callable, Iterator\n from typing import Optional, Any\n",
        "source_code_with_indent": "from typing import Union, Iterable, Sequence, TypeVar, List, Callable\nfrom typing import Optional, Any\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Union, Iterable, Sequence, TypeVar, List, Callable, Iterator\nfrom typing import Optional, Any\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    if isinstance(size, int):\n        size_ = itertools.repeat(size)\n    else:\n        size_ = size\n    for outer_batch in minibatch(seqs, size=buffer):\n",
        "source_code_len": 153,
        "target_code": "    if isinstance(size, int):\n        size_ = itertools.repeat(size)  # type: Iterator[int]\n    else:\n        size_ = iter(size)\n    for outer_batch in minibatch(seqs, size=buffer):\n",
        "target_code_len": 182,
        "diff_format": "@@ -113,5 +113,5 @@\n     if isinstance(size, int):\n-        size_ = itertools.repeat(size)\n+        size_ = itertools.repeat(size)  # type: Iterator[int]\n     else:\n-        size_ = size\n+        size_ = iter(size)\n     for outer_batch in minibatch(seqs, size=buffer):\n",
        "source_code_with_indent": "    if isinstance(size, int):\n        <IND>size_ = itertools.repeat(size)\n    <DED>else:\n        <IND>size_ = size\n    <DED>for outer_batch in minibatch(seqs, size=buffer):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    if isinstance(size, int):\n        <IND>size_ = itertools.repeat(size)  # type: Iterator[int]\n    <DED>else:\n        <IND>size_ = iter(size)\n    <DED>for outer_batch in minibatch(seqs, size=buffer):\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    if isinstance(size, int):\n        size_ = itertools.repeat(size)\n    elif isinstance(size, List):\n        size_ = iter(size)\n    else:\n        size_ = size\n    target_size = next(size_)\n",
        "source_code_len": 190,
        "target_code": "    if isinstance(size, int):\n        size_ = itertools.repeat(size)  # type: Iterator[int]\n    else:\n        size_ = iter(size)\n    target_size = next(size_)\n",
        "target_code_len": 159,
        "diff_format": "@@ -149,7 +149,5 @@\n     if isinstance(size, int):\n-        size_ = itertools.repeat(size)\n-    elif isinstance(size, List):\n+        size_ = itertools.repeat(size)  # type: Iterator[int]\n+    else:\n         size_ = iter(size)\n-    else:\n-        size_ = size\n     target_size = next(size_)\n",
        "source_code_with_indent": "    if isinstance(size, int):\n        <IND>size_ = itertools.repeat(size)\n    <DED>elif isinstance(size, List):\n        <IND>size_ = iter(size)\n    <DED>else:\n        <IND>size_ = size\n    <DED>target_size = next(size_)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    if isinstance(size, int):\n        <IND>size_ = itertools.repeat(size)  # type: Iterator[int]\n    <DED>else:\n        <IND>size_ = iter(size)\n    <DED>target_size = next(size_)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/training/batchers.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/training/batchers.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/training/batchers.py:198:35 Incompatible parameter type [6]: Expected `typing.Iterator[Variable[_T]]` for 1st positional only parameter to call `next` but got `Iterable[typing.Any]`.",
    "message": " Expected `typing.Iterator[Variable[_T]]` for 1st positional only parameter to call `next` but got `Iterable[typing.Any]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 198,
    "warning_line": "                target_size = next(size_)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import Union, Iterable, Sequence, TypeVar, List, Callable\nfrom typing import Optional, Any\n",
        "source_code_len": 103,
        "target_code": "from typing import Union, Iterable, Sequence, TypeVar, List, Callable, Iterator\nfrom typing import Optional, Any\n",
        "target_code_len": 113,
        "diff_format": "@@ -1,2 +1,2 @@\n-from typing import Union, Iterable, Sequence, TypeVar, List, Callable\n+from typing import Union, Iterable, Sequence, TypeVar, List, Callable, Iterator\n from typing import Optional, Any\n",
        "source_code_with_indent": "from typing import Union, Iterable, Sequence, TypeVar, List, Callable\nfrom typing import Optional, Any\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Union, Iterable, Sequence, TypeVar, List, Callable, Iterator\nfrom typing import Optional, Any\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    if isinstance(size, int):\n        size_ = itertools.repeat(size)\n    else:\n        size_ = size\n    for outer_batch in minibatch(seqs, size=buffer):\n",
        "source_code_len": 153,
        "target_code": "    if isinstance(size, int):\n        size_ = itertools.repeat(size)  # type: Iterator[int]\n    else:\n        size_ = iter(size)\n    for outer_batch in minibatch(seqs, size=buffer):\n",
        "target_code_len": 182,
        "diff_format": "@@ -113,5 +113,5 @@\n     if isinstance(size, int):\n-        size_ = itertools.repeat(size)\n+        size_ = itertools.repeat(size)  # type: Iterator[int]\n     else:\n-        size_ = size\n+        size_ = iter(size)\n     for outer_batch in minibatch(seqs, size=buffer):\n",
        "source_code_with_indent": "    if isinstance(size, int):\n        <IND>size_ = itertools.repeat(size)\n    <DED>else:\n        <IND>size_ = size\n    <DED>for outer_batch in minibatch(seqs, size=buffer):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    if isinstance(size, int):\n        <IND>size_ = itertools.repeat(size)  # type: Iterator[int]\n    <DED>else:\n        <IND>size_ = iter(size)\n    <DED>for outer_batch in minibatch(seqs, size=buffer):\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    if isinstance(size, int):\n        size_ = itertools.repeat(size)\n    elif isinstance(size, List):\n        size_ = iter(size)\n    else:\n        size_ = size\n    target_size = next(size_)\n",
        "source_code_len": 190,
        "target_code": "    if isinstance(size, int):\n        size_ = itertools.repeat(size)  # type: Iterator[int]\n    else:\n        size_ = iter(size)\n    target_size = next(size_)\n",
        "target_code_len": 159,
        "diff_format": "@@ -149,7 +149,5 @@\n     if isinstance(size, int):\n-        size_ = itertools.repeat(size)\n-    elif isinstance(size, List):\n+        size_ = itertools.repeat(size)  # type: Iterator[int]\n+    else:\n         size_ = iter(size)\n-    else:\n-        size_ = size\n     target_size = next(size_)\n",
        "source_code_with_indent": "    if isinstance(size, int):\n        <IND>size_ = itertools.repeat(size)\n    <DED>elif isinstance(size, List):\n        <IND>size_ = iter(size)\n    <DED>else:\n        <IND>size_ = size\n    <DED>target_size = next(size_)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    if isinstance(size, int):\n        <IND>size_ = itertools.repeat(size)  # type: Iterator[int]\n    <DED>else:\n        <IND>size_ = iter(size)\n    <DED>target_size = next(size_)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/training/corpus.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/training/corpus.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/training/corpus.py:46:4 Incompatible return type [7]: Expected `typing.Callable[[Language], Iterable[spacy.tokens.doc.Doc]]` but got `JsonlCorpus`.",
    "message": " Expected `typing.Callable[[Language], Iterable[spacy.tokens.doc.Doc]]` but got `JsonlCorpus`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 46,
    "warning_line": "    return JsonlCorpus(path, min_length=min_length, max_length=max_length, limit=limit)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def create_jsonl_reader(\n    path: Optional[Path], min_length: int = 0, max_length: int = 0, limit: int = 0\n) -> Callable[[\"Language\"], Iterable[Doc]]:\n    return JsonlCorpus(path, min_length=min_length, max_length=max_length, limit=limit)\n",
        "source_code_len": 240,
        "target_code": "def create_jsonl_reader(\n    path: Union[str, Path], min_length: int = 0, max_length: int = 0, limit: int = 0\n) -> Callable[[\"Language\"], Iterable[Example]]:\n    return JsonlCorpus(path, min_length=min_length, max_length=max_length, limit=limit)\n",
        "target_code_len": 246,
        "diff_format": "@@ -43,4 +43,4 @@\n def create_jsonl_reader(\n-    path: Optional[Path], min_length: int = 0, max_length: int = 0, limit: int = 0\n-) -> Callable[[\"Language\"], Iterable[Doc]]:\n+    path: Union[str, Path], min_length: int = 0, max_length: int = 0, limit: int = 0\n+) -> Callable[[\"Language\"], Iterable[Example]]:\n     return JsonlCorpus(path, min_length=min_length, max_length=max_length, limit=limit)\n",
        "source_code_with_indent": "def create_jsonl_reader(\n    path: Optional[Path], min_length: int = 0, max_length: int = 0, limit: int = 0\n) -> Callable[[\"Language\"], Iterable[Doc]]:\n    <IND>return JsonlCorpus(path, min_length=min_length, max_length=max_length, limit=limit)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "def create_jsonl_reader(\n    path: Union[str, Path], min_length: int = 0, max_length: int = 0, limit: int = 0\n) -> Callable[[\"Language\"], Iterable[Example]]:\n    <IND>return JsonlCorpus(path, min_length=min_length, max_length=max_length, limit=limit)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/training/corpus.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/training/corpus.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/training/corpus.py:46:23 Incompatible parameter type [6]: Expected `Union[Path, str]` for 1st positional only parameter to call `JsonlCorpus.__init__` but got `Optional[Path]`.",
    "message": " Expected `Union[Path, str]` for 1st positional only parameter to call `JsonlCorpus.__init__` but got `Optional[Path]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 46,
    "warning_line": "    return JsonlCorpus(path, min_length=min_length, max_length=max_length, limit=limit)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def create_jsonl_reader(\n    path: Optional[Path], min_length: int = 0, max_length: int = 0, limit: int = 0\n) -> Callable[[\"Language\"], Iterable[Doc]]:\n    return JsonlCorpus(path, min_length=min_length, max_length=max_length, limit=limit)\n",
        "source_code_len": 240,
        "target_code": "def create_jsonl_reader(\n    path: Union[str, Path], min_length: int = 0, max_length: int = 0, limit: int = 0\n) -> Callable[[\"Language\"], Iterable[Example]]:\n    return JsonlCorpus(path, min_length=min_length, max_length=max_length, limit=limit)\n",
        "target_code_len": 246,
        "diff_format": "@@ -43,4 +43,4 @@\n def create_jsonl_reader(\n-    path: Optional[Path], min_length: int = 0, max_length: int = 0, limit: int = 0\n-) -> Callable[[\"Language\"], Iterable[Doc]]:\n+    path: Union[str, Path], min_length: int = 0, max_length: int = 0, limit: int = 0\n+) -> Callable[[\"Language\"], Iterable[Example]]:\n     return JsonlCorpus(path, min_length=min_length, max_length=max_length, limit=limit)\n",
        "source_code_with_indent": "def create_jsonl_reader(\n    path: Optional[Path], min_length: int = 0, max_length: int = 0, limit: int = 0\n) -> Callable[[\"Language\"], Iterable[Doc]]:\n    <IND>return JsonlCorpus(path, min_length=min_length, max_length=max_length, limit=limit)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "def create_jsonl_reader(\n    path: Union[str, Path], min_length: int = 0, max_length: int = 0, limit: int = 0\n) -> Callable[[\"Language\"], Iterable[Example]]:\n    <IND>return JsonlCorpus(path, min_length=min_length, max_length=max_length, limit=limit)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/training/initialize.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/training/initialize.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/training/initialize.py:139:4 Incompatible return type [7]: Expected `Language` but got implicit return value of `None`.",
    "message": " Expected `Language` but got implicit return value of `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 139,
    "warning_line": "    logger.info(\"Finished initializing nlp object\")",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    vectors: Optional[str] = None,\n) -> \"Language\":\n    if lookups:\n",
        "source_code_len": 68,
        "target_code": "    vectors: Optional[str] = None,\n) -> None:\n    if lookups:\n",
        "target_code_len": 62,
        "diff_format": "@@ -108,3 +108,3 @@\n     vectors: Optional[str] = None,\n-) -> \"Language\":\n+) -> None:\n     if lookups:\n",
        "source_code_with_indent": "    vectors: Optional[str] = None,\n) -> \"Language\":\n    <IND>if lookups:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    vectors: Optional[str] = None,\n) -> None:\n    <IND>if lookups:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/training/initialize.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/training/initialize.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "spacy/training/initialize.py:254:8 Incompatible return type [7]: Expected `IO[typing.Any]` but got `tarfile.TarFile`.",
    "message": " Expected `IO[typing.Any]` but got `tarfile.TarFile`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 254,
    "warning_line": "        return tarfile.open(str(loc), \"r:gz\")",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "    if tarfile.is_tarfile(str(loc)):\n        return tarfile.open(str(loc), \"r:gz\")\n    elif loc.parts[-1].endswith(\"gz\"):\n        return (line.decode(\"utf8\") for line in gzip.open(str(loc), \"r\"))\n    elif loc.parts[-1].endswith(\"zip\"):\n",
        "source_code_len": 236,
        "target_code": "    if tarfile.is_tarfile(str(loc)):\n        return tarfile.open(str(loc), \"r:gz\")  # type: ignore[return-value]\n    elif loc.parts[-1].endswith(\"gz\"):\n        return (line.decode(\"utf8\") for line in gzip.open(str(loc), \"r\"))  # type: ignore[return-value]\n    elif loc.parts[-1].endswith(\"zip\"):\n",
        "target_code_len": 296,
        "diff_format": "@@ -253,5 +253,5 @@\n     if tarfile.is_tarfile(str(loc)):\n-        return tarfile.open(str(loc), \"r:gz\")\n+        return tarfile.open(str(loc), \"r:gz\")  # type: ignore[return-value]\n     elif loc.parts[-1].endswith(\"gz\"):\n-        return (line.decode(\"utf8\") for line in gzip.open(str(loc), \"r\"))\n+        return (line.decode(\"utf8\") for line in gzip.open(str(loc), \"r\"))  # type: ignore[return-value]\n     elif loc.parts[-1].endswith(\"zip\"):\n",
        "source_code_with_indent": "    if tarfile.is_tarfile(str(loc)):\n        <IND>return tarfile.open(str(loc), \"r:gz\")\n    <DED>elif loc.parts[-1].endswith(\"gz\"):\n        <IND>return (line.decode(\"utf8\") for line in gzip.open(str(loc), \"r\"))\n    <DED>elif loc.parts[-1].endswith(\"zip\"):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    if tarfile.is_tarfile(str(loc)):\n        <IND>return tarfile.open(str(loc), \"r:gz\")  # type: ignore[return-value]\n    <DED>elif loc.parts[-1].endswith(\"gz\"):\n        <IND>return (line.decode(\"utf8\") for line in gzip.open(str(loc), \"r\"))  # type: ignore[return-value]\n    <DED>elif loc.parts[-1].endswith(\"zip\"):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/training/initialize.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/training/initialize.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "spacy/training/initialize.py:256:8 Incompatible return type [7]: Expected `IO[typing.Any]` but got `typing.Generator[str, None, None]`.",
    "message": " Expected `IO[typing.Any]` but got `typing.Generator[str, None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 256,
    "warning_line": "        return (line.decode(\"utf8\") for line in gzip.open(str(loc), \"r\"))",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "    if tarfile.is_tarfile(str(loc)):\n        return tarfile.open(str(loc), \"r:gz\")\n    elif loc.parts[-1].endswith(\"gz\"):\n        return (line.decode(\"utf8\") for line in gzip.open(str(loc), \"r\"))\n    elif loc.parts[-1].endswith(\"zip\"):\n",
        "source_code_len": 236,
        "target_code": "    if tarfile.is_tarfile(str(loc)):\n        return tarfile.open(str(loc), \"r:gz\")  # type: ignore[return-value]\n    elif loc.parts[-1].endswith(\"gz\"):\n        return (line.decode(\"utf8\") for line in gzip.open(str(loc), \"r\"))  # type: ignore[return-value]\n    elif loc.parts[-1].endswith(\"zip\"):\n",
        "target_code_len": 296,
        "diff_format": "@@ -253,5 +253,5 @@\n     if tarfile.is_tarfile(str(loc)):\n-        return tarfile.open(str(loc), \"r:gz\")\n+        return tarfile.open(str(loc), \"r:gz\")  # type: ignore[return-value]\n     elif loc.parts[-1].endswith(\"gz\"):\n-        return (line.decode(\"utf8\") for line in gzip.open(str(loc), \"r\"))\n+        return (line.decode(\"utf8\") for line in gzip.open(str(loc), \"r\"))  # type: ignore[return-value]\n     elif loc.parts[-1].endswith(\"zip\"):\n",
        "source_code_with_indent": "    if tarfile.is_tarfile(str(loc)):\n        <IND>return tarfile.open(str(loc), \"r:gz\")\n    <DED>elif loc.parts[-1].endswith(\"gz\"):\n        <IND>return (line.decode(\"utf8\") for line in gzip.open(str(loc), \"r\"))\n    <DED>elif loc.parts[-1].endswith(\"zip\"):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    if tarfile.is_tarfile(str(loc)):\n        <IND>return tarfile.open(str(loc), \"r:gz\")  # type: ignore[return-value]\n    <DED>elif loc.parts[-1].endswith(\"gz\"):\n        <IND>return (line.decode(\"utf8\") for line in gzip.open(str(loc), \"r\"))  # type: ignore[return-value]\n    <DED>elif loc.parts[-1].endswith(\"zip\"):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/training/initialize.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/training/initialize.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "spacy/training/initialize.py:261:8 Incompatible return type [7]: Expected `IO[typing.Any]` but got `typing.Generator[str, None, None]`.",
    "message": " Expected `IO[typing.Any]` but got `typing.Generator[str, None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 261,
    "warning_line": "        return (line.decode(\"utf8\") for line in file_)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        file_ = zip_file.open(names[0])\n        return (line.decode(\"utf8\") for line in file_)\n    else:\n",
        "source_code_len": 105,
        "target_code": "        file_ = zip_file.open(names[0])\n        return (line.decode(\"utf8\") for line in file_)  # type: ignore[return-value]\n    else:\n",
        "target_code_len": 135,
        "diff_format": "@@ -260,3 +260,3 @@\n         file_ = zip_file.open(names[0])\n-        return (line.decode(\"utf8\") for line in file_)\n+        return (line.decode(\"utf8\") for line in file_)  # type: ignore[return-value]\n     else:\n",
        "source_code_with_indent": "        file_ = zip_file.open(names[0])\n        return (line.decode(\"utf8\") for line in file_)\n    <DED>else:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        file_ = zip_file.open(names[0])\n        return (line.decode(\"utf8\") for line in file_)  # type: ignore[return-value]\n    <DED>else:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/training/iob_utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/training/iob_utils.py",
    "file_hunks_size": 5,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/training/iob_utils.py:164:49 Incompatible parameter type [6]: Expected `int` for 4th parameter `label` to call `spacy.tokens.span.Span.__init__` but got `str`.",
    "message": " Expected `int` for 4th parameter `label` to call `spacy.tokens.span.Span.__init__` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 164,
    "warning_line": "        span = Span(doc, start_idx, end_idx + 1, label=label)"
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/training/loop.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/training/loop.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/training/loop.py:93:21 Incompatible parameter type [6]: Expected `Union[Path, str]` for 1st positional only parameter to call `clean_output_dir` but got `Optional[Path]`.",
    "message": " Expected `Union[Path, str]` for 1st positional only parameter to call `clean_output_dir` but got `Optional[Path]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 93,
    "warning_line": "    clean_output_dir(output_path)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef clean_output_dir(path: Union[str, Path]) -> None:\n    \"\"\"Remove an existing output directory. Typically used to ensure that that\n",
        "source_code_len": 134,
        "target_code": "\ndef clean_output_dir(path: Optional[Path]) -> None:\n    \"\"\"Remove an existing output directory. Typically used to ensure that that\n",
        "target_code_len": 132,
        "diff_format": "@@ -355,3 +355,3 @@\n \n-def clean_output_dir(path: Union[str, Path]) -> None:\n+def clean_output_dir(path: Optional[Path]) -> None:\n     \"\"\"Remove an existing output directory. Typically used to ensure that that\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>def clean_output_dir(path: Union[str, Path]) -> None:\n    <IND>",
        "target_code_with_indent": "\n<DED>def clean_output_dir(path: Optional[Path]) -> None:\n    <IND>"
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/training/loop.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/training/loop.py",
    "file_hunks_size": 8,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/training/loop.py:294:16 Unsupported operand [58]: `*` is not supported for operand types `Union[Dict[typing.Any, typing.Any], float]` and `typing.Any`.",
    "message": " `*` is not supported for operand types `Union[Dict[typing.Any, typing.Any], float]` and `typing.Any`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 294,
    "warning_line": "                scores.get(s, 0.0) * weights.get(s, 0.0) for s in weights"
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/training/loop.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/training/loop.py",
    "file_hunks_size": 8,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/training/loop.py:300:8 Incompatible return type [7]: Expected `Tuple[float, Dict[str, float]]` but got `Tuple[typing.Any, Dict[str, Union[Dict[typing.Any, typing.Any], float]]]`.",
    "message": " Expected `Tuple[float, Dict[str, float]]` but got `Tuple[typing.Any, Dict[str, Union[Dict[typing.Any, typing.Any], float]]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 300,
    "warning_line": "        return weighted_score, scores"
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/training/loop.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/training/loop.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/training/loop.py:363:23 Unsupported operand [58]: `/` is not supported for operand types `Union[Path, str]` and `str`.",
    "message": " `/` is not supported for operand types `Union[Path, str]` and `str`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 363,
    "warning_line": "        for subdir in [path / DIR_MODEL_BEST, path / DIR_MODEL_LAST]:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef clean_output_dir(path: Union[str, Path]) -> None:\n    \"\"\"Remove an existing output directory. Typically used to ensure that that\n",
        "source_code_len": 134,
        "target_code": "\ndef clean_output_dir(path: Optional[Path]) -> None:\n    \"\"\"Remove an existing output directory. Typically used to ensure that that\n",
        "target_code_len": 132,
        "diff_format": "@@ -355,3 +355,3 @@\n \n-def clean_output_dir(path: Union[str, Path]) -> None:\n+def clean_output_dir(path: Optional[Path]) -> None:\n     \"\"\"Remove an existing output directory. Typically used to ensure that that\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>def clean_output_dir(path: Union[str, Path]) -> None:\n    <IND>",
        "target_code_with_indent": "\n<DED>def clean_output_dir(path: Optional[Path]) -> None:\n    <IND>"
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/training/loop.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/training/loop.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/training/loop.py:363:46 Unsupported operand [58]: `/` is not supported for operand types `Union[Path, str]` and `str`.",
    "message": " `/` is not supported for operand types `Union[Path, str]` and `str`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 363,
    "warning_line": "        for subdir in [path / DIR_MODEL_BEST, path / DIR_MODEL_LAST]:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef clean_output_dir(path: Union[str, Path]) -> None:\n    \"\"\"Remove an existing output directory. Typically used to ensure that that\n",
        "source_code_len": 134,
        "target_code": "\ndef clean_output_dir(path: Optional[Path]) -> None:\n    \"\"\"Remove an existing output directory. Typically used to ensure that that\n",
        "target_code_len": 132,
        "diff_format": "@@ -355,3 +355,3 @@\n \n-def clean_output_dir(path: Union[str, Path]) -> None:\n+def clean_output_dir(path: Optional[Path]) -> None:\n     \"\"\"Remove an existing output directory. Typically used to ensure that that\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>def clean_output_dir(path: Union[str, Path]) -> None:\n    <IND>",
        "target_code_with_indent": "\n<DED>def clean_output_dir(path: Optional[Path]) -> None:\n    <IND>"
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/training/pretrain.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/training/pretrain.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/training/pretrain.py:44:57 Incompatible parameter type [6]: Expected `int` for 3rd positional only parameter to call `_resume_model` but got `Optional[int]`.",
    "message": " Expected `int` for 3rd positional only parameter to call `_resume_model` but got `Optional[int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 44,
    "warning_line": "        epoch_resume = _resume_model(model, resume_path, epoch_resume, silent=silent)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def _resume_model(\n    model: Model, resume_path: Path, epoch_resume: int, silent: bool = True\n) -> int:\n",
        "source_code_len": 105,
        "target_code": "def _resume_model(\n    model: Model, resume_path: Path, epoch_resume: Optional[int], silent: bool = True\n) -> int:\n",
        "target_code_len": 115,
        "diff_format": "@@ -95,3 +95,3 @@\n def _resume_model(\n-    model: Model, resume_path: Path, epoch_resume: int, silent: bool = True\n+    model: Model, resume_path: Path, epoch_resume: Optional[int], silent: bool = True\n ) -> int:\n",
        "source_code_with_indent": "<DED>def _resume_model(\n    model: Model, resume_path: Path, epoch_resume: int, silent: bool = True\n) -> int:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED>def _resume_model(\n    model: Model, resume_path: Path, epoch_resume: Optional[int], silent: bool = True\n) -> int:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/util.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/util.py",
    "file_hunks_size": 33,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/util.py:345:12 Incompatible return type [7]: Expected `Language` but got `spacy.tokens.doc.Doc`.",
    "message": " Expected `Language` but got `spacy.tokens.doc.Doc`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 345,
    "warning_line": "            return get_lang_class(name.replace(\"blank:\", \"\"))()",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef get_lang_class(lang: str) -> \"Language\":\n    \"\"\"Import and load a Language class.\n",
        "source_code_len": 87,
        "target_code": "\ndef get_lang_class(lang: str) -> Type[\"Language\"]:\n    \"\"\"Import and load a Language class.\n",
        "target_code_len": 93,
        "diff_format": "@@ -257,3 +259,3 @@\n \n-def get_lang_class(lang: str) -> \"Language\":\n+def get_lang_class(lang: str) -> Type[\"Language\"]:\n     \"\"\"Import and load a Language class.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>def get_lang_class(lang: str) -> \"Language\":\n    <IND>",
        "target_code_with_indent": "\n<DED>def get_lang_class(lang: str) -> Type[\"Language\"]:\n    <IND>"
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/util.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/util.py",
    "file_hunks_size": 33,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/util.py:412:18 Unsupported operand [58]: `/` is not supported for operand types `Union[Path, str]` and `str`.",
    "message": " `/` is not supported for operand types `Union[Path, str]` and `str`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 412,
    "warning_line": "    config_path = model_path / \"config.cfg\"",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def load_model_from_path(\n    model_path: Union[str, Path],\n    *,\n",
        "source_code_len": 67,
        "target_code": "def load_model_from_path(\n    model_path: Path,\n    *,\n",
        "target_code_len": 55,
        "diff_format": "@@ -383,3 +385,3 @@\n def load_model_from_path(\n-    model_path: Union[str, Path],\n+    model_path: Path,\n     *,\n",
        "source_code_with_indent": "<DED>def load_model_from_path(\n    model_path: Union[str, Path],\n    *,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED>def load_model_from_path(\n    model_path: Path,\n    *,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/util.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/util.py",
    "file_hunks_size": 33,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/util.py:509:4 Incompatible return type [7]: Expected `Tuple[typing.Any]` but got `typing.Tuple[typing.Any, ...]`.",
    "message": " Expected `Tuple[typing.Any]` but got `typing.Tuple[typing.Any, ...]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 509,
    "warning_line": "    return tuple(output)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef resolve_dot_names(config: Config, dot_names: List[Optional[str]]) -> Tuple[Any]:\n    \"\"\"Resolve one or more \"dot notation\" names, e.g. corpora.train.\n",
        "source_code_len": 155,
        "target_code": "\ndef resolve_dot_names(\n    config: Config, dot_names: List[Optional[str]]\n) -> Tuple[Any, ...]:\n    \"\"\"Resolve one or more \"dot notation\" names, e.g. corpora.train.\n",
        "target_code_len": 166,
        "diff_format": "@@ -476,3 +478,5 @@\n \n-def resolve_dot_names(config: Config, dot_names: List[Optional[str]]) -> Tuple[Any]:\n+def resolve_dot_names(\n+    config: Config, dot_names: List[Optional[str]]\n+) -> Tuple[Any, ...]:\n     \"\"\"Resolve one or more \"dot notation\" names, e.g. corpora.train.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>def resolve_dot_names(config: Config, dot_names: List[Optional[str]]) -> Tuple[Any]:\n    <IND>",
        "target_code_with_indent": "\n<DED>def resolve_dot_names(\n    config: Config, dot_names: List[Optional[str]]\n) -> Tuple[Any, ...]:\n    <IND>"
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/util.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/util.py",
    "file_hunks_size": 33,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "spacy/util.py:745:46 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `get_minor_version` but got `Optional[str]`.",
    "message": " Expected `str` for 1st positional only parameter to call `get_minor_version` but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 745,
    "warning_line": "            lower_version = get_minor_version(lower_version)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "            lower_version = get_model_lower_version(meta[\"spacy_version\"])\n            lower_version = get_minor_version(lower_version)\n            if lower_version is not None:\n",
        "source_code_len": 178,
        "target_code": "            lower_version = get_model_lower_version(meta[\"spacy_version\"])\n            lower_version = get_minor_version(lower_version)  # type: ignore[arg-type]\n            if lower_version is not None:\n",
        "target_code_len": 204,
        "diff_format": "@@ -744,3 +748,3 @@\n             lower_version = get_model_lower_version(meta[\"spacy_version\"])\n-            lower_version = get_minor_version(lower_version)\n+            lower_version = get_minor_version(lower_version)  # type: ignore[arg-type]\n             if lower_version is not None:\n",
        "source_code_with_indent": "            <IND>lower_version = get_model_lower_version(meta[\"spacy_version\"])\n            lower_version = get_minor_version(lower_version)\n            if lower_version is not None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <IND>lower_version = get_model_lower_version(meta[\"spacy_version\"])\n            lower_version = get_minor_version(lower_version)  # type: ignore[arg-type]\n            if lower_version is not None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/util.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/util.py",
    "file_hunks_size": 33,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/util.py:912:8 Incompatible return type [7]: Expected `None` but got `Generator[Path, None, None]`.",
    "message": " Expected `None` but got `Generator[Path, None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 912,
    "warning_line": "        yield current",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "@contextmanager\ndef working_dir(path: Union[str, Path]) -> None:\n    \"\"\"Change current working directory and returns to previous on exit.\n",
        "source_code_len": 138,
        "target_code": "@contextmanager\ndef working_dir(path: Union[str, Path]) -> Iterator[Path]:\n    \"\"\"Change current working directory and returns to previous on exit.\n",
        "target_code_len": 148,
        "diff_format": "@@ -899,3 +903,3 @@\n @contextmanager\n-def working_dir(path: Union[str, Path]) -> None:\n+def working_dir(path: Union[str, Path]) -> Iterator[Path]:\n     \"\"\"Change current working directory and returns to previous on exit.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "<DED>@contextmanager\ndef working_dir(path: Union[str, Path]) -> None:\n    <IND>",
        "target_code_with_indent": "<DED>@contextmanager\ndef working_dir(path: Union[str, Path]) -> Iterator[Path]:\n    <IND>"
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/util.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/util.py",
    "file_hunks_size": 33,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "spacy/util.py:948:16 Unbound name [10]: Name `get_ipython` is used but not defined in the current scope.",
    "message": " Name `get_ipython` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 948,
    "warning_line": "        shell = get_ipython().__class__.__name__",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "    try:\n        shell = get_ipython().__class__.__name__\n        if shell == \"ZMQInteractiveShell\":\n",
        "source_code_len": 101,
        "target_code": "    try:\n        shell = get_ipython().__class__.__name__  # type: ignore[name-defined]\n        if shell == \"ZMQInteractiveShell\":\n",
        "target_code_len": 131,
        "diff_format": "@@ -947,3 +951,3 @@\n     try:\n-        shell = get_ipython().__class__.__name__\n+        shell = get_ipython().__class__.__name__  # type: ignore[name-defined]\n         if shell == \"ZMQInteractiveShell\":\n",
        "source_code_with_indent": "    try:\n        <IND>shell = get_ipython().__class__.__name__\n        if shell == \"ZMQInteractiveShell\":\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    try:\n        <IND>shell = get_ipython().__class__.__name__  # type: ignore[name-defined]\n        if shell == \"ZMQInteractiveShell\":\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/util.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/util.py",
    "file_hunks_size": 33,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "spacy/util.py:1030:33 Unsupported operand [58]: `+` is not supported for operand types `str` and `Union[Pattern[typing.Any], str]`.",
    "message": " `+` is not supported for operand types `str` and `Union[Pattern[typing.Any], str]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 1030,
    "warning_line": "    expression = \"|\".join([\"^\" + piece for piece in entries if piece.strip()])",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "    \"\"\"\n    expression = \"|\".join([\"^\" + piece for piece in entries if piece.strip()])\n    return re.compile(expression)\n",
        "source_code_len": 121,
        "target_code": "    \"\"\"\n    expression = \"|\".join([\"^\" + piece for piece in entries if piece.strip()])  # type: ignore[operator, union-attr]\n    return re.compile(expression)\n",
        "target_code_len": 159,
        "diff_format": "@@ -1029,3 +1033,3 @@\n     \"\"\"\n-    expression = \"|\".join([\"^\" + piece for piece in entries if piece.strip()])\n+    expression = \"|\".join([\"^\" + piece for piece in entries if piece.strip()])  # type: ignore[operator, union-attr]\n     return re.compile(expression)\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    expression = \"|\".join([\"^\" + piece for piece in entries if piece.strip()])\n    return re.compile(expression)\n",
        "target_code_with_indent": "\n    expression = \"|\".join([\"^\" + piece for piece in entries if piece.strip()])  # type: ignore[operator, union-attr]\n    return re.compile(expression)\n"
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/util.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/util.py",
    "file_hunks_size": 33,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "spacy/util.py:1041:27 Unsupported operand [58]: `+` is not supported for operand types `Union[Pattern[typing.Any], str]` and `str`.",
    "message": " `+` is not supported for operand types `Union[Pattern[typing.Any], str]` and `str`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 1041,
    "warning_line": "    expression = \"|\".join([piece + \"$\" for piece in entries if piece.strip()])",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "    \"\"\"\n    expression = \"|\".join([piece + \"$\" for piece in entries if piece.strip()])\n    return re.compile(expression)\n",
        "source_code_len": 121,
        "target_code": "    \"\"\"\n    expression = \"|\".join([piece + \"$\" for piece in entries if piece.strip()])  # type: ignore[operator, union-attr]\n    return re.compile(expression)\n",
        "target_code_len": 159,
        "diff_format": "@@ -1040,3 +1044,3 @@\n     \"\"\"\n-    expression = \"|\".join([piece + \"$\" for piece in entries if piece.strip()])\n+    expression = \"|\".join([piece + \"$\" for piece in entries if piece.strip()])  # type: ignore[operator, union-attr]\n     return re.compile(expression)\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    expression = \"|\".join([piece + \"$\" for piece in entries if piece.strip()])\n    return re.compile(expression)\n",
        "target_code_with_indent": "\n    expression = \"|\".join([piece + \"$\" for piece in entries if piece.strip()])  # type: ignore[operator, union-attr]\n    return re.compile(expression)\n"
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/util.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/util.py",
    "file_hunks_size": 33,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "spacy/util.py:1052:26 Incompatible parameter type [6]: Expected `Iterable[str]` for 1st positional only parameter to call `str.join` but got `List[Union[Pattern[typing.Any], str]]`.",
    "message": " Expected `Iterable[str]` for 1st positional only parameter to call `str.join` but got `List[Union[Pattern[typing.Any], str]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1052,
    "warning_line": "    expression = \"|\".join([piece for piece in entries if piece.strip()])",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "    \"\"\"\n    expression = \"|\".join([piece for piece in entries if piece.strip()])\n    return re.compile(expression)\n",
        "source_code_len": 115,
        "target_code": "    \"\"\"\n    expression = \"|\".join([piece for piece in entries if piece.strip()])  # type: ignore[misc, union-attr]\n    return re.compile(expression)\n",
        "target_code_len": 149,
        "diff_format": "@@ -1051,3 +1055,3 @@\n     \"\"\"\n-    expression = \"|\".join([piece for piece in entries if piece.strip()])\n+    expression = \"|\".join([piece for piece in entries if piece.strip()])  # type: ignore[misc, union-attr]\n     return re.compile(expression)\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    expression = \"|\".join([piece for piece in entries if piece.strip()])\n    return re.compile(expression)\n",
        "target_code_with_indent": "\n    expression = \"|\".join([piece for piece in entries if piece.strip()])  # type: ignore[misc, union-attr]\n    return re.compile(expression)\n"
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/util.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/util.py",
    "file_hunks_size": 33,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "spacy/util.py:1074:26 Incompatible parameter type [6]: Expected `Union[int, slice]` for 1st positional only parameter to call `str.__getitem__` but got `str`.",
    "message": " Expected `Union[int, slice]` for 1st positional only parameter to call `str.__getitem__` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1074,
    "warning_line": "            return lookup[string]",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        if string in lookup:\n            return lookup[string]\n    return default_func(string)\n",
        "source_code_len": 95,
        "target_code": "        if string in lookup:\n            return lookup[string]  # type: ignore[index]\n    return default_func(string)\n",
        "target_code_len": 118,
        "diff_format": "@@ -1073,3 +1077,3 @@\n         if string in lookup:\n-            return lookup[string]\n+            return lookup[string]  # type: ignore[index]\n     return default_func(string)\n",
        "source_code_with_indent": "        <IND>if string in lookup:\n            <IND>return lookup[string]\n    <DED><DED>return default_func(string)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>if string in lookup:\n            <IND>return lookup[string]  # type: ignore[index]\n    <DED><DED>return default_func(string)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/util.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/util.py",
    "file_hunks_size": 33,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "spacy/util.py:1175:4 Incompatible return type [7]: Expected `None` but got `Dict[str, typing.Any]`.",
    "message": " Expected `None` but got `Dict[str, typing.Any]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 1175,
    "warning_line": "    return from_dict(srsly.msgpack_loads(bytes_data), setters, exclude)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": ") -> None:\n    return from_dict(srsly.msgpack_loads(bytes_data), setters, exclude)\n\n",
        "source_code_len": 84,
        "target_code": ") -> None:\n    return from_dict(srsly.msgpack_loads(bytes_data), setters, exclude)  # type: ignore[return-value]\n\n",
        "target_code_len": 114,
        "diff_format": "@@ -1174,3 +1178,3 @@\n ) -> None:\n-    return from_dict(srsly.msgpack_loads(bytes_data), setters, exclude)\n+    return from_dict(srsly.msgpack_loads(bytes_data), setters, exclude)  # type: ignore[return-value]\n \n",
        "source_code_with_indent": ") -> None:\n    <IND>return from_dict(srsly.msgpack_loads(bytes_data), setters, exclude)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": ") -> None:\n    <IND>return from_dict(srsly.msgpack_loads(bytes_data), setters, exclude)  # type: ignore[return-value]\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/util.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/util.py",
    "file_hunks_size": 33,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "spacy/util.py:1237:45 Incompatible parameter type [6]: Expected `importlib.machinery.ModuleSpec` for 1st positional only parameter to call `importlib.util.module_from_spec` but got `Optional[importlib.machinery.ModuleSpec]`.",
    "message": " Expected `importlib.machinery.ModuleSpec` for 1st positional only parameter to call `importlib.util.module_from_spec` but got `Optional[importlib.machinery.ModuleSpec]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1237,
    "warning_line": "    module = importlib.util.module_from_spec(spec)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "    spec = importlib.util.spec_from_file_location(name, str(loc))\n    module = importlib.util.module_from_spec(spec)\n    spec.loader.exec_module(module)\n    return module\n",
        "source_code_len": 171,
        "target_code": "    spec = importlib.util.spec_from_file_location(name, str(loc))\n    module = importlib.util.module_from_spec(spec)  # type: ignore[arg-type]\n    spec.loader.exec_module(module)  # type: ignore[union-attr]\n    return module\n",
        "target_code_len": 225,
        "diff_format": "@@ -1236,4 +1240,4 @@\n     spec = importlib.util.spec_from_file_location(name, str(loc))\n-    module = importlib.util.module_from_spec(spec)\n-    spec.loader.exec_module(module)\n+    module = importlib.util.module_from_spec(spec)  # type: ignore[arg-type]\n+    spec.loader.exec_module(module)  # type: ignore[union-attr]\n     return module\n",
        "source_code_with_indent": "    spec = importlib.util.spec_from_file_location(name, str(loc))\n    module = importlib.util.module_from_spec(spec)\n    spec.loader.exec_module(module)\n    return module\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    spec = importlib.util.spec_from_file_location(name, str(loc))\n    module = importlib.util.module_from_spec(spec)  # type: ignore[arg-type]\n    spec.loader.exec_module(module)  # type: ignore[union-attr]\n    return module\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "explosion/spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/util.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/explosion-spaCy/spacy/util.py",
    "file_hunks_size": 33,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "spacy/util.py:1425:18 Incompatible parameter type [6]: Expected `typing.Mapping[str, float]` for 1st positional only parameter to call `dict.update` but got `Dict[str, Union[None, float, int]]`.",
    "message": " Expected `typing.Mapping[str, float]` for 1st positional only parameter to call `dict.update` but got `Dict[str, Union[None, float, int]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1425,
    "warning_line": "    result.update(overrides)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def combine_score_weights(\n    weights: List[Dict[str, float]],\n    overrides: Dict[str, Optional[Union[float, int]]] = SimpleFrozenDict(),\n) -> Dict[str, float]:\n    \"\"\"Combine and normalize score weights defined by components, e.g.\n",
        "source_code_len": 234,
        "target_code": "def combine_score_weights(\n    weights: List[Dict[str, Optional[float]]],\n    overrides: Dict[str, Optional[float]] = SimpleFrozenDict(),\n) -> Dict[str, Optional[float]]:\n    \"\"\"Combine and normalize score weights defined by components, e.g.\n",
        "target_code_len": 242,
        "diff_format": "@@ -1409,5 +1413,5 @@\n def combine_score_weights(\n-    weights: List[Dict[str, float]],\n-    overrides: Dict[str, Optional[Union[float, int]]] = SimpleFrozenDict(),\n-) -> Dict[str, float]:\n+    weights: List[Dict[str, Optional[float]]],\n+    overrides: Dict[str, Optional[float]] = SimpleFrozenDict(),\n+) -> Dict[str, Optional[float]]:\n     \"\"\"Combine and normalize score weights defined by components, e.g.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "<DED>def combine_score_weights(\n    weights: List[Dict[str, float]],\n    overrides: Dict[str, Optional[Union[float, int]]] = SimpleFrozenDict(),\n) -> Dict[str, float]:\n    <IND>",
        "target_code_with_indent": "<DED>def combine_score_weights(\n    weights: List[Dict[str, Optional[float]]],\n    overrides: Dict[str, Optional[float]] = SimpleFrozenDict(),\n) -> Dict[str, Optional[float]]:\n    <IND>"
      }
    ]
  }
]