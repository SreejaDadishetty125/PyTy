[
  {
    "project": "qutebrowser/qutebrowser",
    "commit": "f627f4e7ae32bae570447b0d8004787199a1d962",
    "filename": "qutebrowser/utils/qtutils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/qutebrowser-qutebrowser/qutebrowser/utils/qtutils.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "qutebrowser/utils/qtutils.py:364:4 Inconsistent override [14]: `qutebrowser.utils.qtutils.PyQIODevice.readline` overrides method defined in `io.IOBase` inconsistently. Parameter of type `int` is not a supertype of the overridden parameter `typing.Optional[int]`.",
    "message": " `qutebrowser.utils.qtutils.PyQIODevice.readline` overrides method defined in `io.IOBase` inconsistently. Parameter of type `int` is not a supertype of the overridden parameter `typing.Optional[int]`.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 364,
    "warning_line": "    def readline(self, size: int = -1) -> bytes:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def readline(self, size: int = -1) -> bytes:\n        self._check_open()\n",
        "source_code_len": 77,
        "target_code": "\n    def readline(self, size: typing.Optional[int] = -1) -> bytes:\n        self._check_open()\n",
        "target_code_len": 94,
        "diff_format": "@@ -363,3 +363,3 @@\n \n-    def readline(self, size: int = -1) -> bytes:\n+    def readline(self, size: typing.Optional[int] = -1) -> bytes:\n         self._check_open()\n",
        "source_code_with_indent": "\n    <DED>def readline(self, size: int = -1) -> bytes:\n        <IND>self._check_open()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def readline(self, size: typing.Optional[int] = -1) -> bytes:\n        <IND>self._check_open()\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        if size < 0:\n            qt_size = 0  # no maximum size\n",
        "source_code_len": 65,
        "target_code": "\n        if size is None or size < 0:\n            qt_size = 0  # no maximum size\n",
        "target_code_len": 81,
        "diff_format": "@@ -367,3 +367,3 @@\n \n-        if size < 0:\n+        if size is None or size < 0:\n             qt_size = 0  # no maximum size\n",
        "source_code_with_indent": "\n        if size < 0:\n            <IND>qt_size = 0  # no maximum size\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        if size is None or size < 0:\n            <IND>qt_size = 0  # no maximum size\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            buf = self.dev.readLine(qt_size)\n        elif size < 0:\n            buf = self.dev.readAll()\n",
        "source_code_len": 105,
        "target_code": "            buf = self.dev.readLine(qt_size)\n        elif size is None or size < 0:\n            buf = self.dev.readAll()\n",
        "target_code_len": 121,
        "diff_format": "@@ -377,3 +377,3 @@\n             buf = self.dev.readLine(qt_size)\n-        elif size < 0:\n+        elif size is None or size < 0:\n             buf = self.dev.readAll()\n",
        "source_code_with_indent": "            <IND>buf = self.dev.readLine(qt_size)\n        <DED>elif size < 0:\n            <IND>buf = self.dev.readAll()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <IND>buf = self.dev.readLine(qt_size)\n        <DED>elif size is None or size < 0:\n            <IND>buf = self.dev.readAll()\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "qutebrowser/qutebrowser",
    "commit": "f627f4e7ae32bae570447b0d8004787199a1d962",
    "filename": "qutebrowser/utils/qtutils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/qutebrowser-qutebrowser/qutebrowser/utils/qtutils.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "qutebrowser/utils/qtutils.py:404:4 Inconsistent override [14]: `qutebrowser.utils.qtutils.PyQIODevice.write` overrides method defined in `io.BufferedIOBase` inconsistently. Parameter of type `typing.Union[bytearray, bytes]` is not a supertype of the overridden parameter `typing.Union[array.array[typing.Any], bytearray, bytes, memoryview, mmap.mmap]`.",
    "message": " `qutebrowser.utils.qtutils.PyQIODevice.write` overrides method defined in `io.BufferedIOBase` inconsistently. Parameter of type `typing.Union[bytearray, bytes]` is not a supertype of the overridden parameter `typing.Union[array.array[typing.Any], bytearray, bytes, memoryview, mmap.mmap]`.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 404,
    "warning_line": "    def write(self, data: typing.Union[bytes, bytearray]) -> int:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n    def write(self, data: typing.Union[bytes, bytearray]) -> int:\n        self._check_open()\n",
        "source_code_len": 94,
        "target_code": "\n    def write(  # type: ignore[override]\n        self,\n        data: typing.Union[bytes, bytearray]\n    ) -> int:\n        self._check_open()\n",
        "target_code_len": 142,
        "diff_format": "@@ -403,3 +403,6 @@\n \n-    def write(self, data: typing.Union[bytes, bytearray]) -> int:\n+    def write(  # type: ignore[override]\n+        self,\n+        data: typing.Union[bytes, bytearray]\n+    ) -> int:\n         self._check_open()\n",
        "source_code_with_indent": "\n    <DED>def write(self, data: typing.Union[bytes, bytearray]) -> int:\n        <IND>self._check_open()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def write(  # type: ignore[override]\n        self,\n        data: typing.Union[bytes, bytearray]\n    ) -> int:\n        <IND>self._check_open()\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]