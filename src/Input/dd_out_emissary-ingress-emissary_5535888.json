[
  {
    "project": "emissary-ingress/emissary",
    "commit": "5535888a647ad5f0478140bb1bce49f974f30cf7",
    "filename": "ambassador/ambassador/envoy/v2/v2listener.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/emissary-ingress-emissary/ambassador/ambassador/envoy/v2/v2listener.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ambassador/ambassador/envoy/v2/v2listener.py:298:40 Incompatible parameter type [6]: Expected `_typeshed.SupportsKeysAndGetItem[Variable[_KT], Variable[_VT]]` for 1st positional only parameter to call `dict.__init__` but got `Optional[ambassador.ambassador.envoy.v2.v2ratelimit.V2RateLimit]`.",
    "message": " Expected `_typeshed.SupportsKeysAndGetItem[Variable[_KT], Variable[_VT]]` for 1st positional only parameter to call `dict.__init__` but got `Optional[ambassador.ambassador.envoy.v2.v2ratelimit.V2RateLimit]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 298,
    "warning_line": "    config['rate_limit_service'] = dict(v2config.ratelimit)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    config['rate_limit_service'] = dict(v2config.ratelimit)\n",
        "source_code_len": 61,
        "target_code": "\n    # If here, we must have a ratelimit service configured.\n    assert v2config.ratelimit\n    config['rate_limit_service'] = dict(v2config.ratelimit)\n",
        "target_code_len": 151,
        "diff_format": "@@ -297,2 +297,4 @@\n \n+    # If here, we must have a ratelimit service configured.\n+    assert v2config.ratelimit\n     config['rate_limit_service'] = dict(v2config.ratelimit)\n",
        "source_code_with_indent": "\n    <DED>config['rate_limit_service'] = dict(v2config.ratelimit)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    # If here, we must have a ratelimit service configured.\n    <DED>assert v2config.ratelimit\n    config['rate_limit_service'] = dict(v2config.ratelimit)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "emissary-ingress/emissary",
    "commit": "5535888a647ad5f0478140bb1bce49f974f30cf7",
    "filename": "ambassador/ambassador/ir/ir.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/emissary-ingress-emissary/ambassador/ambassador/ir/ir.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ambassador/ambassador/ir/ir.py:283:8 Incompatible variable type [9]: group is declared to have type `IRBaseMappingGroup` but is used as type `None`.",
    "message": " group is declared to have type `IRBaseMappingGroup` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 283,
    "warning_line": "        group: IRBaseMappingGroup = None",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "    def add_mapping(self, aconf: Config, mapping: IRBaseMapping) -> Optional[IRBaseMappingGroup]:\n        group: IRBaseMappingGroup = None\n\n        if mapping.is_active():\n",
        "source_code_len": 172,
        "target_code": "    def add_mapping(self, aconf: Config, mapping: IRBaseMapping) -> Optional[IRBaseMappingGroup]:\n        if mapping.is_active():\n",
        "target_code_len": 130,
        "diff_format": "@@ -282,4 +282,2 @@\n     def add_mapping(self, aconf: Config, mapping: IRBaseMapping) -> Optional[IRBaseMappingGroup]:\n-        group: IRBaseMappingGroup = None\n-\n         if mapping.is_active():\n",
        "source_code_with_indent": "    <DED>def add_mapping(self, aconf: Config, mapping: IRBaseMapping) -> Optional[IRBaseMappingGroup]:\n        <IND>group: IRBaseMappingGroup = None\n\n        if mapping.is_active():\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def add_mapping(self, aconf: Config, mapping: IRBaseMapping) -> Optional[IRBaseMappingGroup]:\n        <IND>if mapping.is_active():\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        return group\n\n",
        "source_code_len": 23,
        "target_code": "\n            return group\n        else:\n            return None\n\n",
        "target_code_len": 65,
        "diff_format": "@@ -298,3 +296,5 @@\n \n-        return group\n+            return group\n+        else:\n+            return None\n \n",
        "source_code_with_indent": "\n        <DED><DED>return group\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n            <DED>return group\n        <DED>else:\n            <IND>return None\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "emissary-ingress/emissary",
    "commit": "5535888a647ad5f0478140bb1bce49f974f30cf7",
    "filename": "ambassador/ambassador/ir/irhttpmappinggroup.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/emissary-ingress-emissary/ambassador/ambassador/ir/irhttpmappinggroup.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ambassador/ambassador/ir/irhttpmappinggroup.py:330:15 Unsupported operand [58]: `in` is not supported for right operand type `Optional[IRBaseMapping]`.",
    "message": " `in` is not supported for right operand type `Optional[IRBaseMapping]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 330,
    "warning_line": "            if 'case_sensitive' in self.host_redirect:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        if not self.get('host_redirect', None):\n            for mapping in self.mappings:\n",
        "source_code_len": 91,
        "target_code": "\n        redir = self.get('host_redirect', None)\n\n        if not redir:\n            for mapping in self.mappings:\n",
        "target_code_len": 114,
        "diff_format": "@@ -307,3 +307,5 @@\n \n-        if not self.get('host_redirect', None):\n+        redir = self.get('host_redirect', None)\n+\n+        if not redir:\n             for mapping in self.mappings:\n",
        "source_code_with_indent": "\n        <DED>if not self.get('host_redirect', None):\n            <IND>for mapping in self.mappings:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        <DED>redir = self.get('host_redirect', None)\n\n        if not redir:\n            <IND>for mapping in self.mappings:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            # Flatten the case_sensitive field for host_redirect if it exists\n            if 'case_sensitive' in self.host_redirect:\n                self['case_sensitive'] = self.host_redirect['case_sensitive']\n                \n",
        "source_code_len": 228,
        "target_code": "            # Flatten the case_sensitive field for host_redirect if it exists\n            if 'case_sensitive' in redir:\n                self['case_sensitive'] = redir['case_sensitive']\n                \n",
        "target_code_len": 202,
        "diff_format": "@@ -329,4 +331,4 @@\n             # Flatten the case_sensitive field for host_redirect if it exists\n-            if 'case_sensitive' in self.host_redirect:\n-                self['case_sensitive'] = self.host_redirect['case_sensitive']\n+            if 'case_sensitive' in redir:\n+                self['case_sensitive'] = redir['case_sensitive']\n                 \n",
        "source_code_with_indent": "            # Flatten the case_sensitive field for host_redirect if it exists\n            <IND>if 'case_sensitive' in self.host_redirect:\n                <IND>self['case_sensitive'] = self.host_redirect['case_sensitive']\n                \n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            # Flatten the case_sensitive field for host_redirect if it exists\n            <IND>if 'case_sensitive' in redir:\n                <IND>self['case_sensitive'] = redir['case_sensitive']\n                \n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]