[
  {
    "project": "aio-libs/create-aio-app",
    "commit": "88bf76809871bea733d5862f44a2a88237aedb49",
    "filename": "create_aio_app/template/{{cookiecutter.project_name}}/{{cookiecutter.project_name}}/utils/check-requirements.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/aio-libs-create-aio-app/create_aio_app/template/{{cookiecutter.project_name}}/{{cookiecutter.project_name}}/utils/check-requirements.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "create_aio_app/template/{{cookiecutter.project_name}}/{{cookiecutter.project_name}}/utils/check-requirements.py:28:16 Incompatible parameter type [6]: Expected `_typeshed.SupportsKeysAndGetItem[Variable[_KT], Variable[_VT]]` for 1st positional only parameter to call `dict.__init__` but got `typing.Generator[typing.List[str], None, None]`.",
    "message": " Expected `_typeshed.SupportsKeysAndGetItem[Variable[_KT], Variable[_VT]]` for 1st positional only parameter to call `dict.__init__` but got `typing.Generator[typing.List[str], None, None]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 28,
    "warning_line": "                package.split('==') for package in fresh_version if package)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import subprocess  # nosec\n",
        "source_code_len": 27,
        "target_code": "from typing import Dict\nimport subprocess  # nosec\n",
        "target_code_len": 51,
        "diff_format": "@@ -1,1 +1,2 @@\n+from typing import Dict\n import subprocess  # nosec\n",
        "source_code_with_indent": "import subprocess  # nosec\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Dict\nimport subprocess  # nosec\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n            packages = dict(\n                package.split('==') for package in fresh_version if package)\n\n",
        "source_code_len": 108,
        "target_code": "\n            packages: Dict[str, str] = dict(\n                package.split('==')  # type: ignore\n                for package in fresh_version if package\n            )\n\n",
        "target_code_len": 169,
        "diff_format": "@@ -26,4 +27,6 @@\n \n-            packages = dict(\n-                package.split('==') for package in fresh_version if package)\n+            packages: Dict[str, str] = dict(\n+                package.split('==')  # type: ignore\n+                for package in fresh_version if package\n+            )\n \n",
        "source_code_with_indent": "\n            packages = dict(\n                package.split('==') for package in fresh_version if package)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n            packages: Dict[str, str] = dict(\n                package.split('==')  # type: ignore\n                for package in fresh_version if package\n            )\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]