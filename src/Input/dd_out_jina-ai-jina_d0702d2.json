[
  {
    "project": "jina-ai/jina",
    "commit": "d0702d2d701cf1d1771622335f45d26a20ac3cbb",
    "filename": "jina/helper.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/helper.py",
    "file_hunks_size": 17,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/helper.py:187:12 Incompatible return type [7]: Expected `Union[bool, int, str]` but got `List[Union[bool, int, str]]`.",
    "message": " Expected `Union[bool, int, str]` but got `List[Union[bool, int, str]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 187,
    "warning_line": "            return [parse_arg(vv.strip()) for vv in tmp]",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from itertools import islice\nfrom types import SimpleNamespace\nfrom typing import Tuple, Optional, Iterator, Any, Union, List, Dict, Set, TextIO\n\n",
        "source_code_len": 146,
        "target_code": "from itertools import islice\nfrom types import SimpleNamespace, ModuleType\nfrom typing import Tuple, Optional, Iterator, Any, Union, List, Dict, Set, TextIO, Sequence, Iterable\n\n",
        "target_code_len": 178,
        "diff_format": "@@ -15,4 +15,4 @@\n from itertools import islice\n-from types import SimpleNamespace\n-from typing import Tuple, Optional, Iterator, Any, Union, List, Dict, Set, TextIO\n+from types import SimpleNamespace, ModuleType\n+from typing import Tuple, Optional, Iterator, Any, Union, List, Dict, Set, TextIO, Sequence, Iterable\n \n",
        "source_code_with_indent": "from itertools import islice\nfrom types import SimpleNamespace\nfrom typing import Tuple, Optional, Iterator, Any, Union, List, Dict, Set, TextIO\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from itertools import islice\nfrom types import SimpleNamespace, ModuleType\nfrom typing import Tuple, Optional, Iterator, Any, Union, List, Dict, Set, TextIO, Sequence, Iterable\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef parse_arg(v: str) -> Union[bool, int, str]:\n    if v.startswith('[') and v.endswith(']'):\n",
        "source_code_len": 95,
        "target_code": "\ndef parse_arg(v: str) -> Optional[Union[bool, int, str, list, float]]:\n    if v.startswith('[') and v.endswith(']'):\n",
        "target_code_len": 118,
        "diff_format": "@@ -181,3 +182,3 @@\n \n-def parse_arg(v: str) -> Union[bool, int, str]:\n+def parse_arg(v: str) -> Optional[Union[bool, int, str, list, float]]:\n     if v.startswith('[') and v.endswith(']'):\n",
        "source_code_with_indent": "\n<DED>def parse_arg(v: str) -> Union[bool, int, str]:\n    <IND>if v.startswith('[') and v.endswith(']'):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def parse_arg(v: str) -> Optional[Union[bool, int, str, list, float]]:\n    <IND>if v.startswith('[') and v.endswith(']'):\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @staticmethod\n    def add_modules(*paths) -> 'types.ModuleType':\n        for p in paths:\n",
        "source_code_len": 93,
        "target_code": "    @staticmethod\n    def add_modules(*paths) -> Optional[ModuleType]:\n        for p in paths:\n",
        "target_code_len": 95,
        "diff_format": "@@ -248,3 +252,3 @@\n     @staticmethod\n-    def add_modules(*paths) -> 'types.ModuleType':\n+    def add_modules(*paths) -> Optional[ModuleType]:\n         for p in paths:\n",
        "source_code_with_indent": "    <DED>@staticmethod\n    def add_modules(*paths) -> 'types.ModuleType':\n        <IND>for p in paths:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@staticmethod\n    def add_modules(*paths) -> Optional[ModuleType]:\n        <IND>for p in paths:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @staticmethod\n    def _path_import(absolute_path: str) -> 'types.ModuleType':\n        import importlib.util\n",
        "source_code_len": 112,
        "target_code": "    @staticmethod\n    def _path_import(absolute_path: str) -> Optional[ModuleType]:\n        import importlib.util\n",
        "target_code_len": 114,
        "diff_format": "@@ -256,3 +260,3 @@\n     @staticmethod\n-    def _path_import(absolute_path: str) -> 'types.ModuleType':\n+    def _path_import(absolute_path: str) -> Optional[ModuleType]:\n         import importlib.util\n",
        "source_code_with_indent": "    <DED>@staticmethod\n    def _path_import(absolute_path: str) -> 'types.ModuleType':\n        <IND>import importlib.util\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@staticmethod\n    def _path_import(absolute_path: str) -> Optional[ModuleType]:\n        <IND>import importlib.util\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef expand_env_var(v: str) -> str:\n    if isinstance(v, str):\n",
        "source_code_len": 63,
        "target_code": "\ndef expand_env_var(v: str) -> Optional[Union[bool, int, str, list, float]]:\n    if isinstance(v, str):\n",
        "target_code_len": 104,
        "diff_format": "@@ -379,3 +378,3 @@\n \n-def expand_env_var(v: str) -> str:\n+def expand_env_var(v: str) -> Optional[Union[bool, int, str, list, float]]:\n     if isinstance(v, str):\n",
        "source_code_with_indent": "\ndef expand_env_var(v: str) -> str:\n    <IND>if isinstance(v, str):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\ndef expand_env_var(v: str) -> Optional[Union[bool, int, str, list, float]]:\n    <IND>if isinstance(v, str):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jina-ai/jina",
    "commit": "d0702d2d701cf1d1771622335f45d26a20ac3cbb",
    "filename": "jina/helper.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/helper.py",
    "file_hunks_size": 17,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/helper.py:189:12 Incompatible return type [7]: Expected `Union[bool, int, str]` but got `List[Variable[_T]]`.",
    "message": " Expected `Union[bool, int, str]` but got `List[Variable[_T]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 189,
    "warning_line": "            return []",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from itertools import islice\nfrom types import SimpleNamespace\nfrom typing import Tuple, Optional, Iterator, Any, Union, List, Dict, Set, TextIO\n\n",
        "source_code_len": 146,
        "target_code": "from itertools import islice\nfrom types import SimpleNamespace, ModuleType\nfrom typing import Tuple, Optional, Iterator, Any, Union, List, Dict, Set, TextIO, Sequence, Iterable\n\n",
        "target_code_len": 178,
        "diff_format": "@@ -15,4 +15,4 @@\n from itertools import islice\n-from types import SimpleNamespace\n-from typing import Tuple, Optional, Iterator, Any, Union, List, Dict, Set, TextIO\n+from types import SimpleNamespace, ModuleType\n+from typing import Tuple, Optional, Iterator, Any, Union, List, Dict, Set, TextIO, Sequence, Iterable\n \n",
        "source_code_with_indent": "from itertools import islice\nfrom types import SimpleNamespace\nfrom typing import Tuple, Optional, Iterator, Any, Union, List, Dict, Set, TextIO\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from itertools import islice\nfrom types import SimpleNamespace, ModuleType\nfrom typing import Tuple, Optional, Iterator, Any, Union, List, Dict, Set, TextIO, Sequence, Iterable\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef parse_arg(v: str) -> Union[bool, int, str]:\n    if v.startswith('[') and v.endswith(']'):\n",
        "source_code_len": 95,
        "target_code": "\ndef parse_arg(v: str) -> Optional[Union[bool, int, str, list, float]]:\n    if v.startswith('[') and v.endswith(']'):\n",
        "target_code_len": 118,
        "diff_format": "@@ -181,3 +182,3 @@\n \n-def parse_arg(v: str) -> Union[bool, int, str]:\n+def parse_arg(v: str) -> Optional[Union[bool, int, str, list, float]]:\n     if v.startswith('[') and v.endswith(']'):\n",
        "source_code_with_indent": "\n<DED>def parse_arg(v: str) -> Union[bool, int, str]:\n    <IND>if v.startswith('[') and v.endswith(']'):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def parse_arg(v: str) -> Optional[Union[bool, int, str, list, float]]:\n    <IND>if v.startswith('[') and v.endswith(']'):\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @staticmethod\n    def add_modules(*paths) -> 'types.ModuleType':\n        for p in paths:\n",
        "source_code_len": 93,
        "target_code": "    @staticmethod\n    def add_modules(*paths) -> Optional[ModuleType]:\n        for p in paths:\n",
        "target_code_len": 95,
        "diff_format": "@@ -248,3 +252,3 @@\n     @staticmethod\n-    def add_modules(*paths) -> 'types.ModuleType':\n+    def add_modules(*paths) -> Optional[ModuleType]:\n         for p in paths:\n",
        "source_code_with_indent": "    <DED>@staticmethod\n    def add_modules(*paths) -> 'types.ModuleType':\n        <IND>for p in paths:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@staticmethod\n    def add_modules(*paths) -> Optional[ModuleType]:\n        <IND>for p in paths:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @staticmethod\n    def _path_import(absolute_path: str) -> 'types.ModuleType':\n        import importlib.util\n",
        "source_code_len": 112,
        "target_code": "    @staticmethod\n    def _path_import(absolute_path: str) -> Optional[ModuleType]:\n        import importlib.util\n",
        "target_code_len": 114,
        "diff_format": "@@ -256,3 +260,3 @@\n     @staticmethod\n-    def _path_import(absolute_path: str) -> 'types.ModuleType':\n+    def _path_import(absolute_path: str) -> Optional[ModuleType]:\n         import importlib.util\n",
        "source_code_with_indent": "    <DED>@staticmethod\n    def _path_import(absolute_path: str) -> 'types.ModuleType':\n        <IND>import importlib.util\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@staticmethod\n    def _path_import(absolute_path: str) -> Optional[ModuleType]:\n        <IND>import importlib.util\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef expand_env_var(v: str) -> str:\n    if isinstance(v, str):\n",
        "source_code_len": 63,
        "target_code": "\ndef expand_env_var(v: str) -> Optional[Union[bool, int, str, list, float]]:\n    if isinstance(v, str):\n",
        "target_code_len": 104,
        "diff_format": "@@ -379,3 +378,3 @@\n \n-def expand_env_var(v: str) -> str:\n+def expand_env_var(v: str) -> Optional[Union[bool, int, str, list, float]]:\n     if isinstance(v, str):\n",
        "source_code_with_indent": "\ndef expand_env_var(v: str) -> str:\n    <IND>if isinstance(v, str):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\ndef expand_env_var(v: str) -> Optional[Union[bool, int, str, list, float]]:\n    <IND>if isinstance(v, str):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jina-ai/jina",
    "commit": "d0702d2d701cf1d1771622335f45d26a20ac3cbb",
    "filename": "jina/helper.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/helper.py",
    "file_hunks_size": 17,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/helper.py:235:8 Incompatible return type [7]: Expected `List[typing.Any]` but got implicit return value of `None`.",
    "message": " Expected `List[typing.Any]` but got implicit return value of `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 235,
    "warning_line": "        return modules",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef load_contrib_module() -> List[Any]:\n    if 'JINA_CONTRIB_MODULE_IS_LOADING' not in os.environ:\n",
        "source_code_len": 100,
        "target_code": "\ndef load_contrib_module() -> Optional[List[Any]]:\n    if 'JINA_CONTRIB_MODULE_IS_LOADING' not in os.environ:\n",
        "target_code_len": 110,
        "diff_format": "@@ -218,3 +219,3 @@\n \n-def load_contrib_module() -> List[Any]:\n+def load_contrib_module() -> Optional[List[Any]]:\n     if 'JINA_CONTRIB_MODULE_IS_LOADING' not in os.environ:\n",
        "source_code_with_indent": "\n<DED>def load_contrib_module() -> List[Any]:\n    <IND>if 'JINA_CONTRIB_MODULE_IS_LOADING' not in os.environ:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def load_contrib_module() -> Optional[List[Any]]:\n    <IND>if 'JINA_CONTRIB_MODULE_IS_LOADING' not in os.environ:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jina-ai/jina",
    "commit": "d0702d2d701cf1d1771622335f45d26a20ac3cbb",
    "filename": "jina/helper.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/helper.py",
    "file_hunks_size": 17,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/helper.py:270:12 Incompatible return type [7]: Expected `types.ModuleType` but got implicit return value of `None`.",
    "message": " Expected `types.ModuleType` but got implicit return value of `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 270,
    "warning_line": "            pass",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from itertools import islice\nfrom types import SimpleNamespace\nfrom typing import Tuple, Optional, Iterator, Any, Union, List, Dict, Set, TextIO\n\n",
        "source_code_len": 146,
        "target_code": "from itertools import islice\nfrom types import SimpleNamespace, ModuleType\nfrom typing import Tuple, Optional, Iterator, Any, Union, List, Dict, Set, TextIO, Sequence, Iterable\n\n",
        "target_code_len": 178,
        "diff_format": "@@ -15,4 +15,4 @@\n from itertools import islice\n-from types import SimpleNamespace\n-from typing import Tuple, Optional, Iterator, Any, Union, List, Dict, Set, TextIO\n+from types import SimpleNamespace, ModuleType\n+from typing import Tuple, Optional, Iterator, Any, Union, List, Dict, Set, TextIO, Sequence, Iterable\n \n",
        "source_code_with_indent": "from itertools import islice\nfrom types import SimpleNamespace\nfrom typing import Tuple, Optional, Iterator, Any, Union, List, Dict, Set, TextIO\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from itertools import islice\nfrom types import SimpleNamespace, ModuleType\nfrom typing import Tuple, Optional, Iterator, Any, Union, List, Dict, Set, TextIO, Sequence, Iterable\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @staticmethod\n    def add_modules(*paths) -> 'types.ModuleType':\n        for p in paths:\n",
        "source_code_len": 93,
        "target_code": "    @staticmethod\n    def add_modules(*paths) -> Optional[ModuleType]:\n        for p in paths:\n",
        "target_code_len": 95,
        "diff_format": "@@ -248,3 +252,3 @@\n     @staticmethod\n-    def add_modules(*paths) -> 'types.ModuleType':\n+    def add_modules(*paths) -> Optional[ModuleType]:\n         for p in paths:\n",
        "source_code_with_indent": "    <DED>@staticmethod\n    def add_modules(*paths) -> 'types.ModuleType':\n        <IND>for p in paths:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@staticmethod\n    def add_modules(*paths) -> Optional[ModuleType]:\n        <IND>for p in paths:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @staticmethod\n    def _path_import(absolute_path: str) -> 'types.ModuleType':\n        import importlib.util\n",
        "source_code_len": 112,
        "target_code": "    @staticmethod\n    def _path_import(absolute_path: str) -> Optional[ModuleType]:\n        import importlib.util\n",
        "target_code_len": 114,
        "diff_format": "@@ -256,3 +260,3 @@\n     @staticmethod\n-    def _path_import(absolute_path: str) -> 'types.ModuleType':\n+    def _path_import(absolute_path: str) -> Optional[ModuleType]:\n         import importlib.util\n",
        "source_code_with_indent": "    <DED>@staticmethod\n    def _path_import(absolute_path: str) -> 'types.ModuleType':\n        <IND>import importlib.util\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@staticmethod\n    def _path_import(absolute_path: str) -> Optional[ModuleType]:\n        <IND>import importlib.util\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jina-ai/jina",
    "commit": "d0702d2d701cf1d1771622335f45d26a20ac3cbb",
    "filename": "jina/helper.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/helper.py",
    "file_hunks_size": 17,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/helper.py:382:8 Incompatible return type [7]: Expected `str` but got `Union[bool, int, str]`.",
    "message": " Expected `str` but got `Union[bool, int, str]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 382,
    "warning_line": "        return parse_arg(os.path.expandvars(v))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef expand_env_var(v: str) -> str:\n    if isinstance(v, str):\n",
        "source_code_len": 63,
        "target_code": "\ndef expand_env_var(v: str) -> Optional[Union[bool, int, str, list, float]]:\n    if isinstance(v, str):\n",
        "target_code_len": 104,
        "diff_format": "@@ -379,3 +378,3 @@\n \n-def expand_env_var(v: str) -> str:\n+def expand_env_var(v: str) -> Optional[Union[bool, int, str, list, float]]:\n     if isinstance(v, str):\n",
        "source_code_with_indent": "\ndef expand_env_var(v: str) -> str:\n    <IND>if isinstance(v, str):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\ndef expand_env_var(v: str) -> Optional[Union[bool, int, str, list, float]]:\n    <IND>if isinstance(v, str):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jina-ai/jina",
    "commit": "d0702d2d701cf1d1771622335f45d26a20ac3cbb",
    "filename": "jina/helper.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/helper.py",
    "file_hunks_size": 17,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/helper.py:626:67 Incompatible variable type [9]: taboo is declared to have type `Set[Optional[str]]` but is used as type `Tuple[None]`.",
    "message": " taboo is declared to have type `Set[Optional[str]]` but is used as type `Tuple[None]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 626,
    "warning_line": "def get_non_defaults_args(args: Namespace, parser: ArgumentParser, taboo: Set[Optional[str]] = (None,)) -> Dict:"
  },
  {
    "project": "jina-ai/jina",
    "commit": "d0702d2d701cf1d1771622335f45d26a20ac3cbb",
    "filename": "jina/helper.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/helper.py",
    "file_hunks_size": 17,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/helper.py:665:8 Incompatible return type [7]: Expected `Tuple[Dict[typing.Any, typing.Any], Dict[typing.Any, typing.Any]]` but got implicit return value of `None`.",
    "message": " Expected `Tuple[Dict[typing.Any, typing.Any], Dict[typing.Any, typing.Any]]` but got implicit return value of `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 665,
    "warning_line": "        default_logger.error(e)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef get_full_version() -> Tuple[Dict, Dict]:\n    from . import __version__, __proto_version__, __jina_env__\n",
        "source_code_len": 109,
        "target_code": "\ndef get_full_version() -> Optional[Tuple[Dict, Dict]]:\n    from . import __version__, __proto_version__, __jina_env__\n",
        "target_code_len": 119,
        "diff_format": "@@ -634,3 +636,3 @@\n \n-def get_full_version() -> Tuple[Dict, Dict]:\n+def get_full_version() -> Optional[Tuple[Dict, Dict]]:\n     from . import __version__, __proto_version__, __jina_env__\n",
        "source_code_with_indent": "\n<DED>def get_full_version() -> Tuple[Dict, Dict]:\n    <IND>from . import __version__, __proto_version__, __jina_env__\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def get_full_version() -> Optional[Tuple[Dict, Dict]]:\n    <IND>from . import __version__, __proto_version__, __jina_env__\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]