[
  {
    "project": "ray-project/ray",
    "commit": "a4dbb271bd4aa6b9a7ae7a7d8be3ca24df04d9f1",
    "filename": "python/ray/autoscaler/_private/resource_demand_scheduler.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ray-project-ray/python/ray/autoscaler/_private/resource_demand_scheduler.py",
    "file_hunks_size": 15,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/ray/autoscaler/_private/resource_demand_scheduler.py:152:32 Incompatible parameter type [6]: Expected `typing.Iterable[Dict[str, Number]]` for 1st positional only parameter to call `list.__iadd__` but got `Dict[str, Number]`.",
    "message": " Expected `typing.Iterable[Dict[str, Number]]` for 1st positional only parameter to call `list.__iadd__` but got `Dict[str, Number]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 152,
    "warning_line": "            resource_demands += resource_requests",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "        \"\"\"\n\n        # If the user is using request_resources() API, calculate the remaining\n        # delta resources required to meet their requested cluster size.\n        if ensure_min_cluster_size is not None:\n            used_resources = []\n            for ip, max_res in max_resources_by_ip.items():\n                res = copy.deepcopy(max_res)\n                _inplace_subtract(res, unused_resources_by_ip.get(ip, {}))\n                used_resources.append(res)\n            # Example: user requests 1000 CPUs, but the cluster is currently\n            # 500 CPUs in size with 250 used. Then, the delta is 750 CPUs that\n            # we need to fit to get the cluster to scale to 1000.\n            resource_requests, _ = get_bin_pack_residual(\n                used_resources, ensure_min_cluster_size)\n            resource_demands += resource_requests\n        else:\n            resource_requests = []\n\n        if self.is_legacy_yaml():\n",
        "source_code_len": 940,
        "target_code": "        \"\"\"\n        if self.is_legacy_yaml():\n",
        "target_code_len": 46,
        "diff_format": "@@ -137,20 +137,2 @@\n         \"\"\"\n-\n-        # If the user is using request_resources() API, calculate the remaining\n-        # delta resources required to meet their requested cluster size.\n-        if ensure_min_cluster_size is not None:\n-            used_resources = []\n-            for ip, max_res in max_resources_by_ip.items():\n-                res = copy.deepcopy(max_res)\n-                _inplace_subtract(res, unused_resources_by_ip.get(ip, {}))\n-                used_resources.append(res)\n-            # Example: user requests 1000 CPUs, but the cluster is currently\n-            # 500 CPUs in size with 250 used. Then, the delta is 750 CPUs that\n-            # we need to fit to get the cluster to scale to 1000.\n-            resource_requests, _ = get_bin_pack_residual(\n-                used_resources, ensure_min_cluster_size)\n-            resource_demands += resource_requests\n-        else:\n-            resource_requests = []\n-\n         if self.is_legacy_yaml():\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n\n        # If the user is using request_resources() API, calculate the remaining\n        # delta resources required to meet their requested cluster size.\n        if ensure_min_cluster_size is not None:\n            <IND>used_resources = []\n            for ip, max_res in max_resources_by_ip.items():\n                <IND>res = copy.deepcopy(max_res)\n                _inplace_subtract(res, unused_resources_by_ip.get(ip, {}))\n                used_resources.append(res)\n            # Example: user requests 1000 CPUs, but the cluster is currently\n            # 500 CPUs in size with 250 used. Then, the delta is 750 CPUs that\n            # we need to fit to get the cluster to scale to 1000.\n            <DED>resource_requests, _ = get_bin_pack_residual(\n                used_resources, ensure_min_cluster_size)\n            resource_demands += resource_requests\n        <DED>else:\n            <IND>resource_requests = []\n\n        <DED>if self.is_legacy_yaml():\n",
        "target_code_with_indent": "\n        if self.is_legacy_yaml():\n"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        # Step 2: add nodes to add to satisfy min_workers for each type\n        node_resources, node_type_counts, min_workers_nodes_to_add = \\\n            _add_min_workers_nodes(\n                node_resources, node_type_counts, self.node_types)\n\n",
        "source_code_len": 247,
        "target_code": "        # Step 2: add nodes to add to satisfy min_workers for each type\n        (node_resources,\n         node_type_counts,\n         adjusted_min_workers) = \\\n            _add_min_workers_nodes(\n                node_resources, node_type_counts, self.node_types,\n                self.max_workers, ensure_min_cluster_size)\n\n",
        "target_code_len": 322,
        "diff_format": "@@ -168,5 +150,8 @@\n         # Step 2: add nodes to add to satisfy min_workers for each type\n-        node_resources, node_type_counts, min_workers_nodes_to_add = \\\n+        (node_resources,\n+         node_type_counts,\n+         adjusted_min_workers) = \\\n             _add_min_workers_nodes(\n-                node_resources, node_type_counts, self.node_types)\n+                node_resources, node_type_counts, self.node_types,\n+                self.max_workers, ensure_min_cluster_size)\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "        # Step 2: add nodes to add to satisfy min_workers for each type\n        node_resources, node_type_counts, min_workers_nodes_to_add =            _add_min_workers_nodes(\n                node_resources, node_type_counts, self.node_types)\n\n",
        "target_code_with_indent": "        # Step 2: add nodes to add to satisfy min_workers for each type\n        (node_resources,\n         node_type_counts,\n         adjusted_min_workers) =            _add_min_workers_nodes(\n                node_resources, node_type_counts, self.node_types,\n                self.max_workers, ensure_min_cluster_size)\n\n"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "        max_to_add = self.max_workers + 1 - sum(node_type_counts.values())\n        if resource_requests:\n            nodes_to_add_based_on_requests = get_nodes_for(\n                self.node_types, node_type_counts, max_to_add,\n                resource_requests)\n        else:\n            nodes_to_add_based_on_requests = {}\n        nodes_to_add_based_on_demand = get_nodes_for(\n",
        "source_code_len": 379,
        "target_code": "        max_to_add = self.max_workers + 1 - sum(node_type_counts.values())\n        nodes_to_add_based_on_demand = get_nodes_for(\n",
        "target_code_len": 129,
        "diff_format": "@@ -196,8 +189,2 @@\n         max_to_add = self.max_workers + 1 - sum(node_type_counts.values())\n-        if resource_requests:\n-            nodes_to_add_based_on_requests = get_nodes_for(\n-                self.node_types, node_type_counts, max_to_add,\n-                resource_requests)\n-        else:\n-            nodes_to_add_based_on_requests = {}\n         nodes_to_add_based_on_demand = get_nodes_for(\n",
        "source_code_with_indent": "        max_to_add = self.max_workers + 1 - sum(node_type_counts.values())\n        if resource_requests:\n            <IND>nodes_to_add_based_on_requests = get_nodes_for(\n                self.node_types, node_type_counts, max_to_add,\n                resource_requests)\n        <DED>else:\n            <IND>nodes_to_add_based_on_requests = {}\n        <DED>nodes_to_add_based_on_demand = get_nodes_for(\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        max_to_add = self.max_workers + 1 - sum(node_type_counts.values())\n        nodes_to_add_based_on_demand = get_nodes_for(\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        total_nodes_to_add = {}\n        for node_type in self.node_types:\n            nodes_to_add = (min_workers_nodes_to_add.get(\n                node_type, 0) + placement_group_nodes_to_add.get(node_type, 0)\n",
        "source_code_len": 211,
        "target_code": "        total_nodes_to_add = {}\n\n        for node_type in self.node_types:\n            nodes_to_add = (adjusted_min_workers.get(\n                node_type, 0) + placement_group_nodes_to_add.get(node_type, 0)\n",
        "target_code_len": 208,
        "diff_format": "@@ -208,4 +195,5 @@\n         total_nodes_to_add = {}\n+\n         for node_type in self.node_types:\n-            nodes_to_add = (min_workers_nodes_to_add.get(\n+            nodes_to_add = (adjusted_min_workers.get(\n                 node_type, 0) + placement_group_nodes_to_add.get(node_type, 0)\n",
        "source_code_with_indent": "        total_nodes_to_add = {}\n        for node_type in self.node_types:\n            <IND>nodes_to_add = (min_workers_nodes_to_add.get(\n                node_type, 0) + placement_group_nodes_to_add.get(node_type, 0)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        total_nodes_to_add = {}\n\n        for node_type in self.node_types:\n            <IND>nodes_to_add = (adjusted_min_workers.get(\n                node_type, 0) + placement_group_nodes_to_add.get(node_type, 0)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            total_nodes_to_add, unused_resources_by_ip.keys(), nodes,\n            launching_nodes, nodes_to_add_based_on_requests)\n\n",
        "source_code_len": 132,
        "target_code": "            total_nodes_to_add, unused_resources_by_ip.keys(), nodes,\n            launching_nodes, adjusted_min_workers)\n\n",
        "target_code_len": 122,
        "diff_format": "@@ -218,3 +206,3 @@\n             total_nodes_to_add, unused_resources_by_ip.keys(), nodes,\n-            launching_nodes, nodes_to_add_based_on_requests)\n+            launching_nodes, adjusted_min_workers)\n \n",
        "source_code_with_indent": "            total_nodes_to_add, unused_resources_by_ip.keys(), nodes,\n            launching_nodes, nodes_to_add_based_on_requests)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            total_nodes_to_add, unused_resources_by_ip.keys(), nodes,\n            launching_nodes, adjusted_min_workers)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            pending_launches_nodes: Dict[NodeType, int],\n            nodes_to_add_based_on_requests: Dict[NodeType, int],\n    ) -> Dict[NodeType, int]:\n",
        "source_code_len": 152,
        "target_code": "            pending_launches_nodes: Dict[NodeType, int],\n            adjusted_min_workers: Dict[NodeType, int],\n    ) -> Dict[NodeType, int]:\n",
        "target_code_len": 142,
        "diff_format": "@@ -296,3 +284,3 @@\n             pending_launches_nodes: Dict[NodeType, int],\n-            nodes_to_add_based_on_requests: Dict[NodeType, int],\n+            adjusted_min_workers: Dict[NodeType, int],\n     ) -> Dict[NodeType, int]:\n",
        "source_code_with_indent": "            pending_launches_nodes: Dict[NodeType, int],\n            nodes_to_add_based_on_requests: Dict[NodeType, int],\n    ) -> Dict[NodeType, int]:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            pending_launches_nodes: Dict[NodeType, int],\n            adjusted_min_workers: Dict[NodeType, int],\n    ) -> Dict[NodeType, int]:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n                # Allow more nodes if this is to respect min_workers.\n                self.node_types[node_type].get(\"min_workers\", 0) -\n                total_pending_nodes - running_nodes[node_type],\n\n                # Allow more nodes from request_resources API.\n                nodes_to_add_based_on_requests.get(node_type,\n                                                   0) - total_pending_nodes)\n\n",
        "source_code_len": 406,
        "target_code": "\n                # Allow more nodes if this is to respect min_workers or\n                # request_resources().\n                adjusted_min_workers.get(node_type, 0))\n\n",
        "target_code_len": 169,
        "diff_format": "@@ -340,9 +329,5 @@\n \n-                # Allow more nodes if this is to respect min_workers.\n-                self.node_types[node_type].get(\"min_workers\", 0) -\n-                total_pending_nodes - running_nodes[node_type],\n-\n-                # Allow more nodes from request_resources API.\n-                nodes_to_add_based_on_requests.get(node_type,\n-                                                   0) - total_pending_nodes)\n+                # Allow more nodes if this is to respect min_workers or\n+                # request_resources().\n+                adjusted_min_workers.get(node_type, 0))\n \n",
        "source_code_with_indent": "\n                # Allow more nodes if this is to respect min_workers.\n                self.node_types[node_type].get(\"min_workers\", 0) -\n                total_pending_nodes - running_nodes[node_type],\n\n                # Allow more nodes from request_resources API.\n                nodes_to_add_based_on_requests.get(node_type,\n                                                   0) - total_pending_nodes)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n                # Allow more nodes if this is to respect min_workers or\n                # request_resources().\n                adjusted_min_workers.get(node_type, 0))\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        node_type_counts: Dict[NodeType, int],\n        node_types: Dict[NodeType, NodeTypeConfigDict],\n) -> (List[ResourceDict], Dict[NodeType, int], Dict[NodeType, int]):\n    \"\"\"Updates resource demands to respect the min_workers constraint.\n\n",
        "source_code_len": 244,
        "target_code": "        node_type_counts: Dict[NodeType, int],\n        node_types: Dict[NodeType, NodeTypeConfigDict], max_workers: int,\n        ensure_min_cluster_size: List[ResourceDict]\n) -> (List[ResourceDict], Dict[NodeType, int], Dict[NodeType, int]):\n    \"\"\"Updates resource demands to respect the min_workers and\n    request_resources() constraints.\n\n",
        "target_code_len": 343,
        "diff_format": "@@ -506,5 +491,7 @@\n         node_type_counts: Dict[NodeType, int],\n-        node_types: Dict[NodeType, NodeTypeConfigDict],\n+        node_types: Dict[NodeType, NodeTypeConfigDict], max_workers: int,\n+        ensure_min_cluster_size: List[ResourceDict]\n ) -> (List[ResourceDict], Dict[NodeType, int], Dict[NodeType, int]):\n-    \"\"\"Updates resource demands to respect the min_workers constraint.\n+    \"\"\"Updates resource demands to respect the min_workers and\n+    request_resources() constraints.\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "        node_type_counts: Dict[NodeType, int],\n        node_types: Dict[NodeType, NodeTypeConfigDict],\n) -> (List[ResourceDict], Dict[NodeType, int], Dict[NodeType, int]):\n    <IND>",
        "target_code_with_indent": "        node_type_counts: Dict[NodeType, int],\n        node_types: Dict[NodeType, NodeTypeConfigDict], max_workers: int,\n        ensure_min_cluster_size: List[ResourceDict]\n) -> (List[ResourceDict], Dict[NodeType, int], Dict[NodeType, int]):\n    <IND>"
      }
    ]
  },
  {
    "project": "ray-project/ray",
    "commit": "a4dbb271bd4aa6b9a7ae7a7d8be3ca24df04d9f1",
    "filename": "python/ray/autoscaler/_private/resource_demand_scheduler.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ray-project-ray/python/ray/autoscaler/_private/resource_demand_scheduler.py",
    "file_hunks_size": 15,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/ray/autoscaler/_private/resource_demand_scheduler.py:200:16 Incompatible parameter type [6]: Expected `List[Dict[str, Number]]` for 4th positional only parameter to call `get_nodes_for` but got `typing.Union[Dict[str, Number], List[typing.Any]]`.",
    "message": " Expected `List[Dict[str, Number]]` for 4th positional only parameter to call `get_nodes_for` but got `typing.Union[Dict[str, Number], List[typing.Any]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 200,
    "warning_line": "                resource_requests)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        # Step 2: add nodes to add to satisfy min_workers for each type\n        node_resources, node_type_counts, min_workers_nodes_to_add = \\\n            _add_min_workers_nodes(\n                node_resources, node_type_counts, self.node_types)\n\n",
        "source_code_len": 247,
        "target_code": "        # Step 2: add nodes to add to satisfy min_workers for each type\n        (node_resources,\n         node_type_counts,\n         adjusted_min_workers) = \\\n            _add_min_workers_nodes(\n                node_resources, node_type_counts, self.node_types,\n                self.max_workers, ensure_min_cluster_size)\n\n",
        "target_code_len": 322,
        "diff_format": "@@ -168,5 +150,8 @@\n         # Step 2: add nodes to add to satisfy min_workers for each type\n-        node_resources, node_type_counts, min_workers_nodes_to_add = \\\n+        (node_resources,\n+         node_type_counts,\n+         adjusted_min_workers) = \\\n             _add_min_workers_nodes(\n-                node_resources, node_type_counts, self.node_types)\n+                node_resources, node_type_counts, self.node_types,\n+                self.max_workers, ensure_min_cluster_size)\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "        # Step 2: add nodes to add to satisfy min_workers for each type\n        node_resources, node_type_counts, min_workers_nodes_to_add =            _add_min_workers_nodes(\n                node_resources, node_type_counts, self.node_types)\n\n",
        "target_code_with_indent": "        # Step 2: add nodes to add to satisfy min_workers for each type\n        (node_resources,\n         node_type_counts,\n         adjusted_min_workers) =            _add_min_workers_nodes(\n                node_resources, node_type_counts, self.node_types,\n                self.max_workers, ensure_min_cluster_size)\n\n"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "        max_to_add = self.max_workers + 1 - sum(node_type_counts.values())\n        if resource_requests:\n            nodes_to_add_based_on_requests = get_nodes_for(\n                self.node_types, node_type_counts, max_to_add,\n                resource_requests)\n        else:\n            nodes_to_add_based_on_requests = {}\n        nodes_to_add_based_on_demand = get_nodes_for(\n",
        "source_code_len": 379,
        "target_code": "        max_to_add = self.max_workers + 1 - sum(node_type_counts.values())\n        nodes_to_add_based_on_demand = get_nodes_for(\n",
        "target_code_len": 129,
        "diff_format": "@@ -196,8 +189,2 @@\n         max_to_add = self.max_workers + 1 - sum(node_type_counts.values())\n-        if resource_requests:\n-            nodes_to_add_based_on_requests = get_nodes_for(\n-                self.node_types, node_type_counts, max_to_add,\n-                resource_requests)\n-        else:\n-            nodes_to_add_based_on_requests = {}\n         nodes_to_add_based_on_demand = get_nodes_for(\n",
        "source_code_with_indent": "        max_to_add = self.max_workers + 1 - sum(node_type_counts.values())\n        if resource_requests:\n            <IND>nodes_to_add_based_on_requests = get_nodes_for(\n                self.node_types, node_type_counts, max_to_add,\n                resource_requests)\n        <DED>else:\n            <IND>nodes_to_add_based_on_requests = {}\n        <DED>nodes_to_add_based_on_demand = get_nodes_for(\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        max_to_add = self.max_workers + 1 - sum(node_type_counts.values())\n        nodes_to_add_based_on_demand = get_nodes_for(\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        total_nodes_to_add = {}\n        for node_type in self.node_types:\n            nodes_to_add = (min_workers_nodes_to_add.get(\n                node_type, 0) + placement_group_nodes_to_add.get(node_type, 0)\n",
        "source_code_len": 211,
        "target_code": "        total_nodes_to_add = {}\n\n        for node_type in self.node_types:\n            nodes_to_add = (adjusted_min_workers.get(\n                node_type, 0) + placement_group_nodes_to_add.get(node_type, 0)\n",
        "target_code_len": 208,
        "diff_format": "@@ -208,4 +195,5 @@\n         total_nodes_to_add = {}\n+\n         for node_type in self.node_types:\n-            nodes_to_add = (min_workers_nodes_to_add.get(\n+            nodes_to_add = (adjusted_min_workers.get(\n                 node_type, 0) + placement_group_nodes_to_add.get(node_type, 0)\n",
        "source_code_with_indent": "        total_nodes_to_add = {}\n        for node_type in self.node_types:\n            <IND>nodes_to_add = (min_workers_nodes_to_add.get(\n                node_type, 0) + placement_group_nodes_to_add.get(node_type, 0)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        total_nodes_to_add = {}\n\n        for node_type in self.node_types:\n            <IND>nodes_to_add = (adjusted_min_workers.get(\n                node_type, 0) + placement_group_nodes_to_add.get(node_type, 0)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            total_nodes_to_add, unused_resources_by_ip.keys(), nodes,\n            launching_nodes, nodes_to_add_based_on_requests)\n\n",
        "source_code_len": 132,
        "target_code": "            total_nodes_to_add, unused_resources_by_ip.keys(), nodes,\n            launching_nodes, adjusted_min_workers)\n\n",
        "target_code_len": 122,
        "diff_format": "@@ -218,3 +206,3 @@\n             total_nodes_to_add, unused_resources_by_ip.keys(), nodes,\n-            launching_nodes, nodes_to_add_based_on_requests)\n+            launching_nodes, adjusted_min_workers)\n \n",
        "source_code_with_indent": "            total_nodes_to_add, unused_resources_by_ip.keys(), nodes,\n            launching_nodes, nodes_to_add_based_on_requests)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            total_nodes_to_add, unused_resources_by_ip.keys(), nodes,\n            launching_nodes, adjusted_min_workers)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            pending_launches_nodes: Dict[NodeType, int],\n            nodes_to_add_based_on_requests: Dict[NodeType, int],\n    ) -> Dict[NodeType, int]:\n",
        "source_code_len": 152,
        "target_code": "            pending_launches_nodes: Dict[NodeType, int],\n            adjusted_min_workers: Dict[NodeType, int],\n    ) -> Dict[NodeType, int]:\n",
        "target_code_len": 142,
        "diff_format": "@@ -296,3 +284,3 @@\n             pending_launches_nodes: Dict[NodeType, int],\n-            nodes_to_add_based_on_requests: Dict[NodeType, int],\n+            adjusted_min_workers: Dict[NodeType, int],\n     ) -> Dict[NodeType, int]:\n",
        "source_code_with_indent": "            pending_launches_nodes: Dict[NodeType, int],\n            nodes_to_add_based_on_requests: Dict[NodeType, int],\n    ) -> Dict[NodeType, int]:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            pending_launches_nodes: Dict[NodeType, int],\n            adjusted_min_workers: Dict[NodeType, int],\n    ) -> Dict[NodeType, int]:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n                # Allow more nodes if this is to respect min_workers.\n                self.node_types[node_type].get(\"min_workers\", 0) -\n                total_pending_nodes - running_nodes[node_type],\n\n                # Allow more nodes from request_resources API.\n                nodes_to_add_based_on_requests.get(node_type,\n                                                   0) - total_pending_nodes)\n\n",
        "source_code_len": 406,
        "target_code": "\n                # Allow more nodes if this is to respect min_workers or\n                # request_resources().\n                adjusted_min_workers.get(node_type, 0))\n\n",
        "target_code_len": 169,
        "diff_format": "@@ -340,9 +329,5 @@\n \n-                # Allow more nodes if this is to respect min_workers.\n-                self.node_types[node_type].get(\"min_workers\", 0) -\n-                total_pending_nodes - running_nodes[node_type],\n-\n-                # Allow more nodes from request_resources API.\n-                nodes_to_add_based_on_requests.get(node_type,\n-                                                   0) - total_pending_nodes)\n+                # Allow more nodes if this is to respect min_workers or\n+                # request_resources().\n+                adjusted_min_workers.get(node_type, 0))\n \n",
        "source_code_with_indent": "\n                # Allow more nodes if this is to respect min_workers.\n                self.node_types[node_type].get(\"min_workers\", 0) -\n                total_pending_nodes - running_nodes[node_type],\n\n                # Allow more nodes from request_resources API.\n                nodes_to_add_based_on_requests.get(node_type,\n                                                   0) - total_pending_nodes)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n                # Allow more nodes if this is to respect min_workers or\n                # request_resources().\n                adjusted_min_workers.get(node_type, 0))\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        node_type_counts: Dict[NodeType, int],\n        node_types: Dict[NodeType, NodeTypeConfigDict],\n) -> (List[ResourceDict], Dict[NodeType, int], Dict[NodeType, int]):\n    \"\"\"Updates resource demands to respect the min_workers constraint.\n\n",
        "source_code_len": 244,
        "target_code": "        node_type_counts: Dict[NodeType, int],\n        node_types: Dict[NodeType, NodeTypeConfigDict], max_workers: int,\n        ensure_min_cluster_size: List[ResourceDict]\n) -> (List[ResourceDict], Dict[NodeType, int], Dict[NodeType, int]):\n    \"\"\"Updates resource demands to respect the min_workers and\n    request_resources() constraints.\n\n",
        "target_code_len": 343,
        "diff_format": "@@ -506,5 +491,7 @@\n         node_type_counts: Dict[NodeType, int],\n-        node_types: Dict[NodeType, NodeTypeConfigDict],\n+        node_types: Dict[NodeType, NodeTypeConfigDict], max_workers: int,\n+        ensure_min_cluster_size: List[ResourceDict]\n ) -> (List[ResourceDict], Dict[NodeType, int], Dict[NodeType, int]):\n-    \"\"\"Updates resource demands to respect the min_workers constraint.\n+    \"\"\"Updates resource demands to respect the min_workers and\n+    request_resources() constraints.\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "        node_type_counts: Dict[NodeType, int],\n        node_types: Dict[NodeType, NodeTypeConfigDict],\n) -> (List[ResourceDict], Dict[NodeType, int], Dict[NodeType, int]):\n    <IND>",
        "target_code_with_indent": "        node_type_counts: Dict[NodeType, int],\n        node_types: Dict[NodeType, NodeTypeConfigDict], max_workers: int,\n        ensure_min_cluster_size: List[ResourceDict]\n) -> (List[ResourceDict], Dict[NodeType, int], Dict[NodeType, int]):\n    <IND>"
      }
    ]
  },
  {
    "project": "ray-project/ray",
    "commit": "a4dbb271bd4aa6b9a7ae7a7d8be3ca24df04d9f1",
    "filename": "python/ray/autoscaler/_private/resource_demand_scheduler.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ray-project-ray/python/ray/autoscaler/_private/resource_demand_scheduler.py",
    "file_hunks_size": 15,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/ray/autoscaler/_private/resource_demand_scheduler.py:204:59 Incompatible parameter type [6]: Expected `List[Dict[str, Number]]` for 4th positional only parameter to call `get_nodes_for` but got `Dict[str, Number]`.",
    "message": " Expected `List[Dict[str, Number]]` for 4th positional only parameter to call `get_nodes_for` but got `Dict[str, Number]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 204,
    "warning_line": "            self.node_types, node_type_counts, max_to_add, unfulfilled)"
  },
  {
    "project": "ray-project/ray",
    "commit": "a4dbb271bd4aa6b9a7ae7a7d8be3ca24df04d9f1",
    "filename": "python/ray/autoscaler/_private/resource_demand_scheduler.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ray-project-ray/python/ray/autoscaler/_private/resource_demand_scheduler.py",
    "file_hunks_size": 15,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/ray/autoscaler/_private/resource_demand_scheduler.py:454:25 Incompatible variable type [9]: node_resources is declared to have type `List[Dict[str, Number]]` but is used as type `Dict[str, Number]`.",
    "message": " node_resources is declared to have type `List[Dict[str, Number]]` but is used as type `Dict[str, Number]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 454,
    "warning_line": "            unfulfilled, node_resources = get_bin_pack_residual("
  },
  {
    "project": "ray-project/ray",
    "commit": "a4dbb271bd4aa6b9a7ae7a7d8be3ca24df04d9f1",
    "filename": "python/ray/autoscaler/_private/resource_demand_scheduler.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ray-project-ray/python/ray/autoscaler/_private/resource_demand_scheduler.py",
    "file_hunks_size": 15,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/ray/autoscaler/_private/resource_demand_scheduler.py:462:16 Incompatible parameter type [6]: Expected `List[Dict[str, Number]]` for 4th positional only parameter to call `get_nodes_for` but got `Dict[str, Number]`.",
    "message": " Expected `List[Dict[str, Number]]` for 4th positional only parameter to call `get_nodes_for` but got `Dict[str, Number]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 462,
    "warning_line": "                unfulfilled,"
  },
  {
    "project": "ray-project/ray",
    "commit": "a4dbb271bd4aa6b9a7ae7a7d8be3ca24df04d9f1",
    "filename": "python/ray/autoscaler/_private/resource_demand_scheduler.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ray-project-ray/python/ray/autoscaler/_private/resource_demand_scheduler.py",
    "file_hunks_size": 15,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/ray/autoscaler/_private/resource_demand_scheduler.py:471:36 Incompatible parameter type [6]: Expected `List[Dict[str, Number]]` for 2nd positional only parameter to call `get_bin_pack_residual` but got `Dict[str, Number]`.",
    "message": " Expected `List[Dict[str, Number]]` for 2nd positional only parameter to call `get_bin_pack_residual` but got `Dict[str, Number]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 471,
    "warning_line": "                new_node_resources, unfulfilled, strict_spread=True)"
  },
  {
    "project": "ray-project/ray",
    "commit": "a4dbb271bd4aa6b9a7ae7a7d8be3ca24df04d9f1",
    "filename": "python/ray/autoscaler/_private/resource_demand_scheduler.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ray-project-ray/python/ray/autoscaler/_private/resource_demand_scheduler.py",
    "file_hunks_size": 15,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/ray/autoscaler/_private/resource_demand_scheduler.py:473:30 Incompatible parameter type [6]: Expected `typing.Iterable[Dict[str, Number]]` for 1st positional only parameter to call `list.__iadd__` but got `Dict[str, Number]`.",
    "message": " Expected `typing.Iterable[Dict[str, Number]]` for 1st positional only parameter to call `list.__iadd__` but got `Dict[str, Number]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 473,
    "warning_line": "            node_resources += including_reserved"
  },
  {
    "project": "ray-project/ray",
    "commit": "a4dbb271bd4aa6b9a7ae7a7d8be3ca24df04d9f1",
    "filename": "python/ray/autoscaler/_private/resource_demand_scheduler.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ray-project-ray/python/ray/autoscaler/_private/resource_demand_scheduler.py",
    "file_hunks_size": 15,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/ray/autoscaler/_private/resource_demand_scheduler.py:571:59 Incompatible parameter type [6]: Expected `Dict[str, Number]` for 2nd positional only parameter to call `_utilization_score` but got `List[Dict[str, Number]]`.",
    "message": " Expected `Dict[str, Number]` for 2nd positional only parameter to call `_utilization_score` but got `List[Dict[str, Number]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 571,
    "warning_line": "                score = _utilization_score(node_resources, [resources[0]])"
  },
  {
    "project": "ray-project/ray",
    "commit": "a4dbb271bd4aa6b9a7ae7a7d8be3ca24df04d9f1",
    "filename": "python/ray/autoscaler/_private/resource_demand_scheduler.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ray-project-ray/python/ray/autoscaler/_private/resource_demand_scheduler.py",
    "file_hunks_size": 15,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/ray/autoscaler/_private/resource_demand_scheduler.py:573:59 Incompatible parameter type [6]: Expected `Dict[str, Number]` for 2nd positional only parameter to call `_utilization_score` but got `List[Dict[str, Number]]`.",
    "message": " Expected `Dict[str, Number]` for 2nd positional only parameter to call `_utilization_score` but got `List[Dict[str, Number]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 573,
    "warning_line": "                score = _utilization_score(node_resources, resources)"
  },
  {
    "project": "ray-project/ray",
    "commit": "a4dbb271bd4aa6b9a7ae7a7d8be3ca24df04d9f1",
    "filename": "python/ray/autoscaler/_private/resource_demand_scheduler.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ray-project-ray/python/ray/autoscaler/_private/resource_demand_scheduler.py",
    "file_hunks_size": 15,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/ray/autoscaler/_private/resource_demand_scheduler.py:597:12 Incompatible variable type [9]: resources is declared to have type `List[Dict[str, Number]]` but is used as type `Dict[str, Number]`.",
    "message": " resources is declared to have type `List[Dict[str, Number]]` but is used as type `Dict[str, Number]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 597,
    "warning_line": "            resources = residual"
  },
  {
    "project": "ray-project/ray",
    "commit": "a4dbb271bd4aa6b9a7ae7a7d8be3ca24df04d9f1",
    "filename": "python/ray/autoscaler/_private/resource_demand_scheduler.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ray-project-ray/python/ray/autoscaler/_private/resource_demand_scheduler.py",
    "file_hunks_size": 15,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python/ray/autoscaler/_private/resource_demand_scheduler.py:668:4 Incompatible return type [7]: Expected `List[Dict[str, Number]]` but got `typing.Tuple[List[typing.Any], List[Dict[str, Number]]]`.",
    "message": " Expected `List[Dict[str, Number]]` but got `typing.Tuple[List[typing.Any], List[Dict[str, Number]]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 668,
    "warning_line": "    return unfulfilled, nodes + used"
  }
]