[
  {
    "project": "qutebrowser/qutebrowser",
    "commit": "8f6bb474da1571266a6ccc857a126914305a72d5",
    "filename": "qutebrowser/utils/qtutils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/qutebrowser-qutebrowser/qutebrowser/utils/qtutils.py",
    "file_hunks_size": 12,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "qutebrowser/utils/qtutils.py:233:37 Incompatible parameter type [6]: Expected `typing.IO[bytes]` for 1st positional only parameter to call `io.TextIOWrapper.__init__` but got `PyQIODevice`.",
    "message": " Expected `typing.IO[bytes]` for 1st positional only parameter to call `io.TextIOWrapper.__init__` but got `PyQIODevice`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 233,
    "warning_line": "            new_f = io.TextIOWrapper(PyQIODevice(f),",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        encoding: str = 'utf-8'\n) -> typing.Iterator[typing.Union['PyQIODevice', io.TextIOWrapper]]:\n    \"\"\"Context manager to easily use a QSaveFile.\"\"\"\n",
        "source_code_len": 154,
        "target_code": "        encoding: str = 'utf-8'\n) -> typing.Iterator[typing.IO]:\n    \"\"\"Context manager to easily use a QSaveFile.\"\"\"\n",
        "target_code_len": 118,
        "diff_format": "@@ -219,3 +219,3 @@\n         encoding: str = 'utf-8'\n-) -> typing.Iterator[typing.Union['PyQIODevice', io.TextIOWrapper]]:\n+) -> typing.Iterator[typing.IO]:\n     \"\"\"Context manager to easily use a QSaveFile.\"\"\"\n",
        "source_code_with_indent": "        encoding: str = 'utf-8'\n) -> typing.Iterator[typing.Union['PyQIODevice', io.TextIOWrapper]]:\n    <IND>\"\"\"Context manager to easily use a QSaveFile.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        encoding: str = 'utf-8'\n) -> typing.Iterator[typing.IO]:\n    <IND>\"\"\"Context manager to easily use a QSaveFile.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        if binary:\n            new_f = PyQIODevice(\n                f)  # type: typing.Union[PyQIODevice, io.TextIOWrapper]\n        else:\n            new_f = io.TextIOWrapper(PyQIODevice(f),\n                                     encoding=encoding)\n\n",
        "source_code_len": 249,
        "target_code": "\n        dev = typing.cast(typing.IO[bytes], PyQIODevice(f))\n\n        if binary:\n            new_f = dev  # type: typing.IO\n        else:\n            new_f = io.TextIOWrapper(dev, encoding=encoding)\n\n",
        "target_code_len": 200,
        "diff_format": "@@ -228,8 +228,8 @@\n \n+        dev = typing.cast(typing.IO[bytes], PyQIODevice(f))\n+\n         if binary:\n-            new_f = PyQIODevice(\n-                f)  # type: typing.Union[PyQIODevice, io.TextIOWrapper]\n+            new_f = dev  # type: typing.IO\n         else:\n-            new_f = io.TextIOWrapper(PyQIODevice(f),\n-                                     encoding=encoding)\n+            new_f = io.TextIOWrapper(dev, encoding=encoding)\n \n",
        "source_code_with_indent": "\n        <DED>if binary:\n            <IND>new_f = PyQIODevice(\n                f)  # type: typing.Union[PyQIODevice, io.TextIOWrapper]\n        <DED>else:\n            <IND>new_f = io.TextIOWrapper(PyQIODevice(f),\n                                     encoding=encoding)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        <DED>dev = typing.cast(typing.IO[bytes], PyQIODevice(f))\n\n        if binary:\n            <IND>new_f = dev  # type: typing.IO\n        <DED>else:\n            <IND>new_f = io.TextIOWrapper(dev, encoding=encoding)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "qutebrowser/qutebrowser",
    "commit": "8f6bb474da1571266a6ccc857a126914305a72d5",
    "filename": "qutebrowser/utils/qtutils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/qutebrowser-qutebrowser/qutebrowser/utils/qtutils.py",
    "file_hunks_size": 12,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "qutebrowser/utils/qtutils.py:350:4 Inconsistent override [15]: `qutebrowser.utils.qtutils.PyQIODevice.readline` overrides method defined in `io.IOBase` inconsistently. Returned type `unknown` is not a subtype of the overridden return `bytes`.",
    "message": " `qutebrowser.utils.qtutils.PyQIODevice.readline` overrides method defined in `io.IOBase` inconsistently. Returned type `unknown` is not a subtype of the overridden return `bytes`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 350,
    "warning_line": "    def readline(self, size: int = -1) -> QByteArray:"
  },
  {
    "project": "qutebrowser/qutebrowser",
    "commit": "8f6bb474da1571266a6ccc857a126914305a72d5",
    "filename": "qutebrowser/utils/qtutils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/qutebrowser-qutebrowser/qutebrowser/utils/qtutils.py",
    "file_hunks_size": 12,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "qutebrowser/utils/qtutils.py:384:4 Inconsistent override [14]: `qutebrowser.utils.qtutils.PyQIODevice.write` overrides method defined in `io.BufferedIOBase` inconsistently. Parameter of type `str` is not a supertype of the overridden parameter `typing.Union[array.array[typing.Any], bytearray, bytes, memoryview, mmap.mmap]`.",
    "message": " `qutebrowser.utils.qtutils.PyQIODevice.write` overrides method defined in `io.BufferedIOBase` inconsistently. Parameter of type `str` is not a supertype of the overridden parameter `typing.Union[array.array[typing.Any], bytearray, bytes, memoryview, mmap.mmap]`.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 384,
    "warning_line": "    def write(self, data: str) -> int:"
  },
  {
    "project": "qutebrowser/qutebrowser",
    "commit": "8f6bb474da1571266a6ccc857a126914305a72d5",
    "filename": "qutebrowser/utils/qtutils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/qutebrowser-qutebrowser/qutebrowser/utils/qtutils.py",
    "file_hunks_size": 12,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "qutebrowser/utils/qtutils.py:392:4 Inconsistent override [15]: `qutebrowser.utils.qtutils.PyQIODevice.read` overrides method defined in `io.BufferedIOBase` inconsistently. Returned type `unknown` is not a subtype of the overridden return `bytes`.",
    "message": " `qutebrowser.utils.qtutils.PyQIODevice.read` overrides method defined in `io.BufferedIOBase` inconsistently. Returned type `unknown` is not a subtype of the overridden return `bytes`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 392,
    "warning_line": "    def read(self, size: typing.Optional[int] = None) -> QByteArray:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def read(self, size: typing.Optional[int] = None) -> QByteArray:\n        self._check_open()\n",
        "source_code_len": 97,
        "target_code": "\n    def read(self, size: typing.Optional[int] = None) -> bytes:\n        self._check_open()\n",
        "target_code_len": 92,
        "diff_format": "@@ -391,3 +397,3 @@\n \n-    def read(self, size: typing.Optional[int] = None) -> QByteArray:\n+    def read(self, size: typing.Optional[int] = None) -> bytes:\n         self._check_open()\n",
        "source_code_with_indent": "\n    <DED>def read(self, size: typing.Optional[int] = None) -> QByteArray:\n        <IND>self._check_open()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def read(self, size: typing.Optional[int] = None) -> bytes:\n        <IND>self._check_open()\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]