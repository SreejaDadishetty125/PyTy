[
  {
    "project": "cdgriffith/Box",
    "commit": "1289508a853fb84ef645bc16b706729d6d649e31",
    "filename": "test/common.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/cdgriffith-Box/test/common.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "test/common.py:26:26 Incompatible parameter type [6]: Expected `typing.Mapping[typing.Union[typing.Tuple[int, int], int, str], typing.Union[typing.Tuple[typing.Dict[str, int], typing.Tuple[typing.Dict[str, int], int]], int, str]]` for 1st positional only parameter to call `dict.update` but got `typing.Dict[str, typing.Union[typing.Dict[str, typing.Union[typing.Dict[str, str], str]], typing.List[typing.Dict[str, int]], str]]`.",
    "message": " Expected `typing.Mapping[typing.Union[typing.Tuple[int, int], int, str], typing.Union[typing.Tuple[typing.Dict[str, int], typing.Tuple[typing.Dict[str, int], int]], int, str]]` for 1st positional only parameter to call `dict.update` but got `typing.Dict[str, typing.Union[typing.Dict[str, typing.Union[typing.Dict[str, str], str]], typing.List[typing.Dict[str, int]], str]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 26,
    "warning_line": "extended_test_dict.update(test_dict)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\ntest_dict = {'key1': 'value1',\n             'not$allowed': 'fine_value',\n             'BigCamel': 'hi',\n             'alist': [{'a': 1}],\n             \"Key 2\": {\"Key 3\": \"Value 3\",\n                       \"Key4\": {\"Key5\": \"Value5\"}}}\n\nextended_test_dict = {\n    3: 'howdy',\n    'not': 'true',\n    (3, 4): 'test',\n    '_box_config': True,\n    'CamelCase': '21',\n    '321CamelCase': 321,\n    False: 'tree',\n    'tuples_galore': ({'item': 3}, ({'item': 4}, 5))}\nextended_test_dict.update(test_dict)\n\n",
        "source_code_len": 497,
        "target_code": "\ntest_dict = {\n    \"key1\": \"value1\",\n    \"not$allowed\": \"fine_value\",\n    \"BigCamel\": \"hi\",\n    \"alist\": [{\"a\": 1}],\n    \"Key 2\": {\"Key 3\": \"Value 3\", \"Key4\": {\"Key5\": \"Value5\"}},\n}\n\nextended_test_dict = {\n    3: \"howdy\",\n    \"not\": \"true\",\n    (3, 4): \"test\",\n    \"_box_config\": True,\n    \"CamelCase\": \"21\",\n    \"321CamelCase\": 321,\n    False: \"tree\",\n    \"tuples_galore\": ({\"item\": 3}, ({\"item\": 4}, 5)),\n}\nextended_test_dict.update(test_dict)  # type: ignore\n\n",
        "target_code_len": 463,
        "diff_format": "@@ -9,19 +10,21 @@\n \n-test_dict = {'key1': 'value1',\n-             'not$allowed': 'fine_value',\n-             'BigCamel': 'hi',\n-             'alist': [{'a': 1}],\n-             \"Key 2\": {\"Key 3\": \"Value 3\",\n-                       \"Key4\": {\"Key5\": \"Value5\"}}}\n+test_dict = {\n+    \"key1\": \"value1\",\n+    \"not$allowed\": \"fine_value\",\n+    \"BigCamel\": \"hi\",\n+    \"alist\": [{\"a\": 1}],\n+    \"Key 2\": {\"Key 3\": \"Value 3\", \"Key4\": {\"Key5\": \"Value5\"}},\n+}\n \n extended_test_dict = {\n-    3: 'howdy',\n-    'not': 'true',\n-    (3, 4): 'test',\n-    '_box_config': True,\n-    'CamelCase': '21',\n-    '321CamelCase': 321,\n-    False: 'tree',\n-    'tuples_galore': ({'item': 3}, ({'item': 4}, 5))}\n-extended_test_dict.update(test_dict)\n+    3: \"howdy\",\n+    \"not\": \"true\",\n+    (3, 4): \"test\",\n+    \"_box_config\": True,\n+    \"CamelCase\": \"21\",\n+    \"321CamelCase\": 321,\n+    False: \"tree\",\n+    \"tuples_galore\": ({\"item\": 3}, ({\"item\": 4}, 5)),\n+}\n+extended_test_dict.update(test_dict)  # type: ignore\n \n",
        "source_code_with_indent": "\ntest_dict = {'key1': 'value1',\n             'not$allowed': 'fine_value',\n             'BigCamel': 'hi',\n             'alist': [{'a': 1}],\n             \"Key 2\": {\"Key 3\": \"Value 3\",\n                       \"Key4\": {\"Key5\": \"Value5\"}}}\n\nextended_test_dict = {\n    3: 'howdy',\n    'not': 'true',\n    (3, 4): 'test',\n    '_box_config': True,\n    'CamelCase': '21',\n    '321CamelCase': 321,\n    False: 'tree',\n    'tuples_galore': ({'item': 3}, ({'item': 4}, 5))}\nextended_test_dict.update(test_dict)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\ntest_dict = {\n    \"key1\": \"value1\",\n    \"not$allowed\": \"fine_value\",\n    \"BigCamel\": \"hi\",\n    \"alist\": [{\"a\": 1}],\n    \"Key 2\": {\"Key 3\": \"Value 3\", \"Key4\": {\"Key5\": \"Value5\"}},\n}\n\nextended_test_dict = {\n    3: \"howdy\",\n    \"not\": \"true\",\n    (3, 4): \"test\",\n    \"_box_config\": True,\n    \"CamelCase\": \"21\",\n    \"321CamelCase\": 321,\n    False: \"tree\",\n    \"tuples_galore\": ({\"item\": 3}, ({\"item\": 4}, 5)),\n}\nextended_test_dict.update(test_dict)  # type: ignore\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]