[
  {
    "project": "pallets/werkzeug",
    "commit": "ef545f0d0bf28cbad02066b4cb7471bea50a93ee",
    "filename": "src/werkzeug/_internal.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/_internal.py",
    "file_hunks_size": 16,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "src/werkzeug/_internal.py:433:21 Incompatible parameter type [6]: Expected `str` for 2nd positional only parameter to call `list.__setitem__` but got `bytes`.",
    "message": " Expected `str` for 2nd positional only parameter to call `list.__setitem__` but got `bytes`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 433,
    "warning_line": "        parts[idx] = part.encode(\"idna\")",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "    for idx, part in enumerate(parts):\n        parts[idx] = part.encode(\"idna\")\n    return b\".\".join(parts)\n\n\ndef _decode_idna(domain: str) -> str:\n    # If the input is a string try to encode it to ascii to\n",
        "source_code_len": 208,
        "target_code": "    for idx, part in enumerate(parts):\n        parts[idx] = part.encode(\"idna\")  # type: ignore\n    return b\".\".join(parts)  # type: ignore\n\n\ndef _decode_idna(domain: Union[str, bytes]) -> Union[str, bytes]:\n    # If the input is a string try to encode it to ascii to\n",
        "target_code_len": 268,
        "diff_format": "@@ -432,7 +429,7 @@\n     for idx, part in enumerate(parts):\n-        parts[idx] = part.encode(\"idna\")\n-    return b\".\".join(parts)\n-\n-\n-def _decode_idna(domain: str) -> str:\n+        parts[idx] = part.encode(\"idna\")  # type: ignore\n+    return b\".\".join(parts)  # type: ignore\n+\n+\n+def _decode_idna(domain: Union[str, bytes]) -> Union[str, bytes]:\n     # If the input is a string try to encode it to ascii to\n",
        "source_code_with_indent": "    for idx, part in enumerate(parts):\n        <IND>parts[idx] = part.encode(\"idna\")\n    <DED>return b\".\".join(parts)\n\n\n<DED>def _decode_idna(domain: str) -> str:\n    # If the input is a string try to encode it to ascii to\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    for idx, part in enumerate(parts):\n        <IND>parts[idx] = part.encode(\"idna\")  # type: ignore\n    <DED>return b\".\".join(parts)  # type: ignore\n\n\n<DED>def _decode_idna(domain: Union[str, bytes]) -> Union[str, bytes]:\n    # If the input is a string try to encode it to ascii to\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pallets/werkzeug",
    "commit": "ef545f0d0bf28cbad02066b4cb7471bea50a93ee",
    "filename": "src/werkzeug/_internal.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/_internal.py",
    "file_hunks_size": 16,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "src/werkzeug/_internal.py:434:21 Incompatible parameter type [6]: Expected `typing.Iterable[Union[memoryview, typing.ByteString]]` for 1st positional only parameter to call `bytes.join` but got `List[str]`.",
    "message": " Expected `typing.Iterable[Union[memoryview, typing.ByteString]]` for 1st positional only parameter to call `bytes.join` but got `List[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 434,
    "warning_line": "    return b\".\".join(parts)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "    for idx, part in enumerate(parts):\n        parts[idx] = part.encode(\"idna\")\n    return b\".\".join(parts)\n\n\ndef _decode_idna(domain: str) -> str:\n    # If the input is a string try to encode it to ascii to\n",
        "source_code_len": 208,
        "target_code": "    for idx, part in enumerate(parts):\n        parts[idx] = part.encode(\"idna\")  # type: ignore\n    return b\".\".join(parts)  # type: ignore\n\n\ndef _decode_idna(domain: Union[str, bytes]) -> Union[str, bytes]:\n    # If the input is a string try to encode it to ascii to\n",
        "target_code_len": 268,
        "diff_format": "@@ -432,7 +429,7 @@\n     for idx, part in enumerate(parts):\n-        parts[idx] = part.encode(\"idna\")\n-    return b\".\".join(parts)\n-\n-\n-def _decode_idna(domain: str) -> str:\n+        parts[idx] = part.encode(\"idna\")  # type: ignore\n+    return b\".\".join(parts)  # type: ignore\n+\n+\n+def _decode_idna(domain: Union[str, bytes]) -> Union[str, bytes]:\n     # If the input is a string try to encode it to ascii to\n",
        "source_code_with_indent": "    for idx, part in enumerate(parts):\n        <IND>parts[idx] = part.encode(\"idna\")\n    <DED>return b\".\".join(parts)\n\n\n<DED>def _decode_idna(domain: str) -> str:\n    # If the input is a string try to encode it to ascii to\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    for idx, part in enumerate(parts):\n        <IND>parts[idx] = part.encode(\"idna\")  # type: ignore\n    <DED>return b\".\".join(parts)  # type: ignore\n\n\n<DED>def _decode_idna(domain: Union[str, bytes]) -> Union[str, bytes]:\n    # If the input is a string try to encode it to ascii to\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pallets/werkzeug",
    "commit": "ef545f0d0bf28cbad02066b4cb7471bea50a93ee",
    "filename": "src/werkzeug/_internal.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/_internal.py",
    "file_hunks_size": 16,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "src/werkzeug/_internal.py:453:25 Incompatible parameter type [6]: Expected `bytes` for 2nd positional only parameter to call `list.__setitem__` but got `str`.",
    "message": " Expected `bytes` for 2nd positional only parameter to call `list.__setitem__` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 453,
    "warning_line": "            parts[idx] = part.decode(\"idna\")",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        try:\n            parts[idx] = part.decode(\"idna\")\n        except UnicodeError:\n            parts[idx] = part.decode(\"ascii\", \"ignore\")\n\n    return \".\".join(parts)\n\n",
        "source_code_len": 172,
        "target_code": "        try:\n            parts[idx] = part.decode(\"idna\")  # type: ignore\n        except UnicodeError:\n            parts[idx] = part.decode(\"ascii\", \"ignore\")  # type: ignore\n\n    return \".\".join(parts)  # type: ignore\n\n",
        "target_code_len": 220,
        "diff_format": "@@ -452,7 +449,7 @@\n         try:\n-            parts[idx] = part.decode(\"idna\")\n+            parts[idx] = part.decode(\"idna\")  # type: ignore\n         except UnicodeError:\n-            parts[idx] = part.decode(\"ascii\", \"ignore\")\n-\n-    return \".\".join(parts)\n+            parts[idx] = part.decode(\"ascii\", \"ignore\")  # type: ignore\n+\n+    return \".\".join(parts)  # type: ignore\n \n",
        "source_code_with_indent": "        <IND>try:\n            <IND>parts[idx] = part.decode(\"idna\")\n        <DED>except UnicodeError:\n            <IND>parts[idx] = part.decode(\"ascii\", \"ignore\")\n\n    <DED><DED>return \".\".join(parts)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>try:\n            <IND>parts[idx] = part.decode(\"idna\")  # type: ignore\n        <DED>except UnicodeError:\n            <IND>parts[idx] = part.decode(\"ascii\", \"ignore\")  # type: ignore\n\n    <DED><DED>return \".\".join(parts)  # type: ignore\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pallets/werkzeug",
    "commit": "ef545f0d0bf28cbad02066b4cb7471bea50a93ee",
    "filename": "src/werkzeug/_internal.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/_internal.py",
    "file_hunks_size": 16,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "src/werkzeug/_internal.py:455:25 Incompatible parameter type [6]: Expected `bytes` for 2nd positional only parameter to call `list.__setitem__` but got `str`.",
    "message": " Expected `bytes` for 2nd positional only parameter to call `list.__setitem__` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 455,
    "warning_line": "            parts[idx] = part.decode(\"ascii\", \"ignore\")",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        try:\n            parts[idx] = part.decode(\"idna\")\n        except UnicodeError:\n            parts[idx] = part.decode(\"ascii\", \"ignore\")\n\n    return \".\".join(parts)\n\n",
        "source_code_len": 172,
        "target_code": "        try:\n            parts[idx] = part.decode(\"idna\")  # type: ignore\n        except UnicodeError:\n            parts[idx] = part.decode(\"ascii\", \"ignore\")  # type: ignore\n\n    return \".\".join(parts)  # type: ignore\n\n",
        "target_code_len": 220,
        "diff_format": "@@ -452,7 +449,7 @@\n         try:\n-            parts[idx] = part.decode(\"idna\")\n+            parts[idx] = part.decode(\"idna\")  # type: ignore\n         except UnicodeError:\n-            parts[idx] = part.decode(\"ascii\", \"ignore\")\n-\n-    return \".\".join(parts)\n+            parts[idx] = part.decode(\"ascii\", \"ignore\")  # type: ignore\n+\n+    return \".\".join(parts)  # type: ignore\n \n",
        "source_code_with_indent": "        <IND>try:\n            <IND>parts[idx] = part.decode(\"idna\")\n        <DED>except UnicodeError:\n            <IND>parts[idx] = part.decode(\"ascii\", \"ignore\")\n\n    <DED><DED>return \".\".join(parts)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>try:\n            <IND>parts[idx] = part.decode(\"idna\")  # type: ignore\n        <DED>except UnicodeError:\n            <IND>parts[idx] = part.decode(\"ascii\", \"ignore\")  # type: ignore\n\n    <DED><DED>return \".\".join(parts)  # type: ignore\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pallets/werkzeug",
    "commit": "ef545f0d0bf28cbad02066b4cb7471bea50a93ee",
    "filename": "src/werkzeug/_internal.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/_internal.py",
    "file_hunks_size": 16,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "src/werkzeug/_internal.py:457:20 Incompatible parameter type [6]: Expected `typing.Iterable[str]` for 1st positional only parameter to call `str.join` but got `List[bytes]`.",
    "message": " Expected `typing.Iterable[str]` for 1st positional only parameter to call `str.join` but got `List[bytes]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 457,
    "warning_line": "    return \".\".join(parts)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        try:\n            parts[idx] = part.decode(\"idna\")\n        except UnicodeError:\n            parts[idx] = part.decode(\"ascii\", \"ignore\")\n\n    return \".\".join(parts)\n\n",
        "source_code_len": 172,
        "target_code": "        try:\n            parts[idx] = part.decode(\"idna\")  # type: ignore\n        except UnicodeError:\n            parts[idx] = part.decode(\"ascii\", \"ignore\")  # type: ignore\n\n    return \".\".join(parts)  # type: ignore\n\n",
        "target_code_len": 220,
        "diff_format": "@@ -452,7 +449,7 @@\n         try:\n-            parts[idx] = part.decode(\"idna\")\n+            parts[idx] = part.decode(\"idna\")  # type: ignore\n         except UnicodeError:\n-            parts[idx] = part.decode(\"ascii\", \"ignore\")\n-\n-    return \".\".join(parts)\n+            parts[idx] = part.decode(\"ascii\", \"ignore\")  # type: ignore\n+\n+    return \".\".join(parts)  # type: ignore\n \n",
        "source_code_with_indent": "        <IND>try:\n            <IND>parts[idx] = part.decode(\"idna\")\n        <DED>except UnicodeError:\n            <IND>parts[idx] = part.decode(\"ascii\", \"ignore\")\n\n    <DED><DED>return \".\".join(parts)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>try:\n            <IND>parts[idx] = part.decode(\"idna\")  # type: ignore\n        <DED>except UnicodeError:\n            <IND>parts[idx] = part.decode(\"ascii\", \"ignore\")  # type: ignore\n\n    <DED><DED>return \".\".join(parts)  # type: ignore\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pallets/werkzeug",
    "commit": "ef545f0d0bf28cbad02066b4cb7471bea50a93ee",
    "filename": "src/werkzeug/debug/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/debug/__init__.py",
    "file_hunks_size": 13,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/werkzeug/debug/__init__.py:207:4 Incompatible return type [7]: Expected `Tuple[str, str]` but got `Tuple[Optional[str], str]`.",
    "message": " Expected `Tuple[str, str]` but got `Tuple[Optional[str], str]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 207,
    "warning_line": "    return rv, cookie_name"
  },
  {
    "project": "pallets/werkzeug",
    "commit": "ef545f0d0bf28cbad02066b4cb7471bea50a93ee",
    "filename": "src/werkzeug/debug/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/debug/__init__.py",
    "file_hunks_size": 13,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/werkzeug/debug/__init__.py:380:22 Unsupported operand [58]: `not in` is not supported for right operand type `Union[int, str]`.",
    "message": " `not in` is not supported for right operand type `Union[int, str]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 380,
    "warning_line": "        if not val or \"|\" not in val:"
  },
  {
    "project": "pallets/werkzeug",
    "commit": "ef545f0d0bf28cbad02066b4cb7471bea50a93ee",
    "filename": "src/werkzeug/debug/console.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/debug/console.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "src/werkzeug/debug/console.py:66:12 Incompatible variable type [9]: sys.stdout is declared to have type `typing.TextIO` but is used as type `ThreadedStream`.",
    "message": " sys.stdout is declared to have type `typing.TextIO` but is used as type `ThreadedStream`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 66,
    "warning_line": "            sys.stdout = ThreadedStream()",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        if not isinstance(sys.stdout, ThreadedStream):\n            sys.stdout = ThreadedStream()\n        _local.stream = HTMLStringO()\n",
        "source_code_len": 135,
        "target_code": "        if not isinstance(sys.stdout, ThreadedStream):\n            sys.stdout = ThreadedStream()  # type: ignore\n        _local.stream = HTMLStringO()\n",
        "target_code_len": 151,
        "diff_format": "@@ -65,3 +70,3 @@\n         if not isinstance(sys.stdout, ThreadedStream):\n-            sys.stdout = ThreadedStream()\n+            sys.stdout = ThreadedStream()  # type: ignore\n         _local.stream = HTMLStringO()\n",
        "source_code_with_indent": "        <IND>if not isinstance(sys.stdout, ThreadedStream):\n            <IND>sys.stdout = ThreadedStream()\n        <DED>_local.stream = HTMLStringO()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>if not isinstance(sys.stdout, ThreadedStream):\n            <IND>sys.stdout = ThreadedStream()  # type: ignore\n        <DED>_local.stream = HTMLStringO()\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pallets/werkzeug",
    "commit": "ef545f0d0bf28cbad02066b4cb7471bea50a93ee",
    "filename": "src/werkzeug/debug/console.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/debug/console.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/werkzeug/debug/console.py:97:12 Incompatible return type [7]: Expected `typing.Callable[..., typing.Any]` but got `typing.List[str]`.",
    "message": " Expected `typing.Callable[..., typing.Any]` but got `typing.List[str]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 97,
    "warning_line": "            return dir(sys.__stdout__)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from types import CodeType\nfrom typing import Callable, Dict, Any\nfrom typing import Optional\n\n",
        "source_code_len": 95,
        "target_code": "from types import CodeType\nfrom typing import Any\nfrom typing import Callable\nfrom typing import Dict\nfrom typing import Hashable\nfrom typing import List\nfrom typing import Optional\nfrom typing import Union\n\n",
        "target_code_len": 208,
        "diff_format": "@@ -6,4 +4,9 @@\n from types import CodeType\n-from typing import Callable, Dict, Any\n+from typing import Any\n+from typing import Callable\n+from typing import Dict\n+from typing import Hashable\n+from typing import List\n from typing import Optional\n+from typing import Union\n \n",
        "source_code_with_indent": "from types import CodeType\nfrom typing import Callable, Dict, Any\nfrom typing import Optional\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from types import CodeType\nfrom typing import Any\nfrom typing import Callable\nfrom typing import Dict\nfrom typing import Hashable\nfrom typing import List\nfrom typing import Optional\nfrom typing import Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __getattribute__(self, name: str) -> Callable:\n        if name == \"__members__\":\n",
        "source_code_len": 90,
        "target_code": "\n    def __getattribute__(self, name: str) -> Union[Callable, List[str]]:\n        if name == \"__members__\":\n",
        "target_code_len": 108,
        "diff_format": "@@ -94,3 +99,3 @@\n \n-    def __getattribute__(self, name: str) -> Callable:\n+    def __getattribute__(self, name: str) -> Union[Callable, List[str]]:\n         if name == \"__members__\":\n",
        "source_code_with_indent": "\n    <DED>def __getattribute__(self, name: str) -> Callable:\n        <IND>if name == \"__members__\":\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def __getattribute__(self, name: str) -> Union[Callable, List[str]]:\n        <IND>if name == \"__members__\":\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pallets/werkzeug",
    "commit": "ef545f0d0bf28cbad02066b4cb7471bea50a93ee",
    "filename": "src/werkzeug/debug/console.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/debug/console.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "src/werkzeug/debug/console.py:159:4 Inconsistent override [14]: `src.werkzeug.debug.console._InteractiveConsole.runsource` overrides method defined in `code.InteractiveInterpreter` inconsistently. Could not find parameter `filename` in overriding signature.",
    "message": " `src.werkzeug.debug.console._InteractiveConsole.runsource` overrides method defined in `code.InteractiveInterpreter` inconsistently. Could not find parameter `filename` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 159,
    "warning_line": "    def runsource(self, source: str, **kwargs: Any) -> str:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n    def runsource(self, source: str, **kwargs: Any) -> str:\n        source = f\"{source.rstrip()}\\n\"\n",
        "source_code_len": 101,
        "target_code": "\n    def runsource(self, source: str, **kwargs: Any) -> str:  # type: ignore\n        source = f\"{source.rstrip()}\\n\"\n",
        "target_code_len": 117,
        "diff_format": "@@ -158,3 +163,3 @@\n \n-    def runsource(self, source: str, **kwargs: Any) -> str:\n+    def runsource(self, source: str, **kwargs: Any) -> str:  # type: ignore\n         source = f\"{source.rstrip()}\\n\"\n",
        "source_code_with_indent": "\n    <DED>def runsource(self, source: str, **kwargs: Any) -> str:\n        <IND>source = f\"{source.rstrip()}\\n\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def runsource(self, source: str, **kwargs: Any) -> str:  # type: ignore\n        <IND>source = f\"{source.rstrip()}\\n\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pallets/werkzeug",
    "commit": "ef545f0d0bf28cbad02066b4cb7471bea50a93ee",
    "filename": "src/werkzeug/debug/console.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/debug/console.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "src/werkzeug/debug/console.py:159:4 Inconsistent override [14]: `src.werkzeug.debug.console._InteractiveConsole.runsource` overrides method defined in `code.InteractiveInterpreter` inconsistently. Could not find parameter `symbol` in overriding signature.",
    "message": " `src.werkzeug.debug.console._InteractiveConsole.runsource` overrides method defined in `code.InteractiveInterpreter` inconsistently. Could not find parameter `symbol` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 159,
    "warning_line": "    def runsource(self, source: str, **kwargs: Any) -> str:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n    def runsource(self, source: str, **kwargs: Any) -> str:\n        source = f\"{source.rstrip()}\\n\"\n",
        "source_code_len": 101,
        "target_code": "\n    def runsource(self, source: str, **kwargs: Any) -> str:  # type: ignore\n        source = f\"{source.rstrip()}\\n\"\n",
        "target_code_len": 117,
        "diff_format": "@@ -158,3 +163,3 @@\n \n-    def runsource(self, source: str, **kwargs: Any) -> str:\n+    def runsource(self, source: str, **kwargs: Any) -> str:  # type: ignore\n         source = f\"{source.rstrip()}\\n\"\n",
        "source_code_with_indent": "\n    <DED>def runsource(self, source: str, **kwargs: Any) -> str:\n        <IND>source = f\"{source.rstrip()}\\n\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def runsource(self, source: str, **kwargs: Any) -> str:  # type: ignore\n        <IND>source = f\"{source.rstrip()}\\n\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pallets/werkzeug",
    "commit": "ef545f0d0bf28cbad02066b4cb7471bea50a93ee",
    "filename": "src/werkzeug/debug/console.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/debug/console.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "src/werkzeug/debug/console.py:159:4 Inconsistent override [15]: `src.werkzeug.debug.console._InteractiveConsole.runsource` overrides method defined in `code.InteractiveInterpreter` inconsistently. Returned type `str` is not a subtype of the overridden return `bool`.",
    "message": " `src.werkzeug.debug.console._InteractiveConsole.runsource` overrides method defined in `code.InteractiveInterpreter` inconsistently. Returned type `str` is not a subtype of the overridden return `bool`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 159,
    "warning_line": "    def runsource(self, source: str, **kwargs: Any) -> str:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n    def runsource(self, source: str, **kwargs: Any) -> str:\n        source = f\"{source.rstrip()}\\n\"\n",
        "source_code_len": 101,
        "target_code": "\n    def runsource(self, source: str, **kwargs: Any) -> str:  # type: ignore\n        source = f\"{source.rstrip()}\\n\"\n",
        "target_code_len": 117,
        "diff_format": "@@ -158,3 +163,3 @@\n \n-    def runsource(self, source: str, **kwargs: Any) -> str:\n+    def runsource(self, source: str, **kwargs: Any) -> str:  # type: ignore\n         source = f\"{source.rstrip()}\\n\"\n",
        "source_code_with_indent": "\n    <DED>def runsource(self, source: str, **kwargs: Any) -> str:\n        <IND>source = f\"{source.rstrip()}\\n\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def runsource(self, source: str, **kwargs: Any) -> str:  # type: ignore\n        <IND>source = f\"{source.rstrip()}\\n\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pallets/werkzeug",
    "commit": "ef545f0d0bf28cbad02066b4cb7471bea50a93ee",
    "filename": "src/werkzeug/debug/repr.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/debug/repr.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/werkzeug/debug/repr.py:53:29 Incompatible parameter type [6]: Expected `Union[Dict[Union[int, str], int], Dict[str, int], List[int]]` for 1st positional only parameter to call `DebugReprGenerator.dump_object` but got `Union[List[int], object]`.",
    "message": " Expected `Union[Dict[Union[int, str], int], Dict[str, int], List[int]]` for 1st positional only parameter to call `DebugReprGenerator.dump_object` but got `Union[List[int], object]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 53,
    "warning_line": "        rv = gen.dump_object(obj)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def dump_object(\n        self, obj: Union[Dict[Union[str, int], int], List[int], Dict[str, int]]\n    ) -> str:\n        repr = items = None\n        if isinstance(obj, dict):\n",
        "source_code_len": 178,
        "target_code": "\n    def dump_object(self, obj: object) -> str:\n        repr = None\n        items: Optional[List[Tuple[str, str]]] = None\n        if isinstance(obj, dict):\n",
        "target_code_len": 156,
        "diff_format": "@@ -247,6 +250,5 @@\n \n-    def dump_object(\n-        self, obj: Union[Dict[Union[str, int], int], List[int], Dict[str, int]]\n-    ) -> str:\n-        repr = items = None\n+    def dump_object(self, obj: object) -> str:\n+        repr = None\n+        items: Optional[List[Tuple[str, str]]] = None\n         if isinstance(obj, dict):\n",
        "source_code_with_indent": "\n    <DED><DED>def dump_object(\n        self, obj: Union[Dict[Union[str, int], int], List[int], Dict[str, int]]\n    ) -> str:\n        <IND>repr = items = None\n        if isinstance(obj, dict):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED><DED>def dump_object(self, obj: object) -> str:\n        <IND>repr = None\n        items: Optional[List[Tuple[str, str]]] = None\n        if isinstance(obj, dict):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pallets/werkzeug",
    "commit": "ef545f0d0bf28cbad02066b4cb7471bea50a93ee",
    "filename": "src/werkzeug/debug/repr.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/debug/repr.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/werkzeug/debug/repr.py:206:36 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `DebugReprGenerator.string_repr` but got `Union[bytes, str]`.",
    "message": " Expected `str` for 1st positional only parameter to call `DebugReprGenerator.string_repr` but got `Union[bytes, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 206,
    "warning_line": "            return self.string_repr(obj)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def string_repr(self, obj: str, limit: int = 70) -> str:\n        buf = ['<span class=\"string\">']\n",
        "source_code_len": 102,
        "target_code": "\n    def string_repr(self, obj: Union[str, bytes], limit: int = 70) -> str:\n        buf = ['<span class=\"string\">']\n",
        "target_code_len": 116,
        "diff_format": "@@ -141,3 +144,3 @@\n \n-    def string_repr(self, obj: str, limit: int = 70) -> str:\n+    def string_repr(self, obj: Union[str, bytes], limit: int = 70) -> str:\n         buf = ['<span class=\"string\">']\n",
        "source_code_with_indent": "\n    <DED>def string_repr(self, obj: str, limit: int = 70) -> str:\n        <IND>buf = ['<span class=\"string\">']\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def string_repr(self, obj: Union[str, bytes], limit: int = 70) -> str:\n        <IND>buf = ['<span class=\"string\">']\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pallets/werkzeug",
    "commit": "ef545f0d0bf28cbad02066b4cb7471bea50a93ee",
    "filename": "src/werkzeug/debug/tbtools.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/debug/tbtools.py",
    "file_hunks_size": 6,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/werkzeug/debug/tbtools.py:387:8 Incompatible return type [7]: Expected `str` but got `Union[None, bytes, str]`.",
    "message": " Expected `str` but got `Union[None, bytes, str]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 387,
    "warning_line": "        return _to_str(rv, \"utf-8\", \"replace\")"
  },
  {
    "project": "pallets/werkzeug",
    "commit": "ef545f0d0bf28cbad02066b4cb7471bea50a93ee",
    "filename": "src/werkzeug/exceptions.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/exceptions.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/werkzeug/exceptions.py:317:8 Incompatible attribute type [8]: Attribute `www_authenticate` declared in class `Unauthorized` has type `Union[None, List[WWWAuthenticate], WWWAuthenticate]` but is used as type `Union[None, List[WWWAuthenticate], tuple[WWWAuthenticate]]`.",
    "message": " Attribute `www_authenticate` declared in class `Unauthorized` has type `Union[None, List[WWWAuthenticate], WWWAuthenticate]` but is used as type `Union[None, List[WWWAuthenticate], tuple[WWWAuthenticate]]`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 317,
    "warning_line": "        self.www_authenticate = www_authenticate",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        www_authenticate: Optional[\n            Union[List[WWWAuthenticate], WWWAuthenticate]\n        ] = None,\n",
        "source_code_len": 112,
        "target_code": "        www_authenticate: Optional[\n            Union[List[\"WWWAuthenticate\"], Tuple[\"WWWAuthenticate\"], \"WWWAuthenticate\"]\n        ] = None,\n",
        "target_code_len": 142,
        "diff_format": "@@ -307,3 +300,3 @@\n         www_authenticate: Optional[\n-            Union[List[WWWAuthenticate], WWWAuthenticate]\n+            Union[List[\"WWWAuthenticate\"], Tuple[\"WWWAuthenticate\"], \"WWWAuthenticate\"]\n         ] = None,\n",
        "source_code_with_indent": "        www_authenticate: Optional[\n            Union[List[WWWAuthenticate], WWWAuthenticate]\n        ] = None,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        www_authenticate: Optional[\n            Union[List[\"WWWAuthenticate\"], Tuple[\"WWWAuthenticate\"], \"WWWAuthenticate\"]\n        ] = None,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pallets/werkzeug",
    "commit": "ef545f0d0bf28cbad02066b4cb7471bea50a93ee",
    "filename": "src/werkzeug/formparser.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/formparser.py",
    "file_hunks_size": 36,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/werkzeug/formparser.py:74:8 Incompatible return type [7]: Expected `Union[SpooledTemporaryFile[typing.Any], BytesIO]` but got `typing.IO[typing.Any]`.",
    "message": " Expected `Union[SpooledTemporaryFile[typing.Any], BytesIO]` but got `typing.IO[typing.Any]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 74,
    "warning_line": "        return TemporaryFile(\"wb+\")"
  },
  {
    "project": "pallets/werkzeug",
    "commit": "ef545f0d0bf28cbad02066b4cb7471bea50a93ee",
    "filename": "src/werkzeug/formparser.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/formparser.py",
    "file_hunks_size": 36,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/werkzeug/formparser.py:207:8 Incompatible attribute type [8]: Attribute `cls` declared in class `FormDataParser` has type `Optional[Type[ImmutableMultiDict[typing.Any, typing.Any]]]` but is used as type `Type[MultiDict[typing.Any, typing.Any]]`.",
    "message": " Attribute `cls` declared in class `FormDataParser` has type `Optional[Type[ImmutableMultiDict[typing.Any, typing.Any]]]` but is used as type `Type[MultiDict[typing.Any, typing.Any]]`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 207,
    "warning_line": "        self.cls = cls"
  },
  {
    "project": "pallets/werkzeug",
    "commit": "ef545f0d0bf28cbad02066b4cb7471bea50a93ee",
    "filename": "src/werkzeug/formparser.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/formparser.py",
    "file_hunks_size": 36,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/werkzeug/formparser.py:228:8 Incompatible return type [7]: Expected `Union[Tuple[BytesIO, MultiDict[typing.Any, typing.Any], MultiDict[typing.Any, typing.Any]], Tuple[LimitedStream, MultiDict[typing.Any, typing.Any], MultiDict[typing.Any, typing.Any]]]` but got `Union[Tuple[BytesIO, ImmutableMultiDict[typing.Any, typing.Any], ImmutableMultiDict[typing.Any, typing.Any]], Tuple[BytesIO, MultiDict[typing.Any, typing.Any], MultiDict[typing.Any, typing.Any]], Tuple[LimitedStream, ImmutableMultiDict[typing.Any, typing.Any], ImmutableMultiDict[typing.Any, typing.Any]], Tuple[LimitedStream, MultiDict[typing.Any, typing.Any], MultiDict[typing.Any, typing.Any]], Tuple[str, MultiDict[typing.Any, typing.Any], MultiDict[typing.Any, typing.Any]]]`.",
    "message": " Expected `Union[Tuple[BytesIO, MultiDict[typing.Any, typing.Any], MultiDict[typing.Any, typing.Any]], Tuple[LimitedStream, MultiDict[typing.Any, typing.Any], MultiDict[typing.Any, typing.Any]]]` but got `Union[Tuple[BytesIO, ImmutableMultiDict[typing.Any, typing.Any], ImmutableMultiDict[typing.Any, typing.Any]], Tuple[BytesIO, MultiDict[typing.Any, typing.Any], MultiDict[typing.Any, typing.Any]], Tuple[LimitedStream, ImmutableMultiDict[typing.Any, typing.Any], ImmutableMultiDict[typing.Any, typing.Any]], Tuple[LimitedStream, MultiDict[typing.Any, typing.Any], MultiDict[typing.Any, typing.Any]], Tuple[str, MultiDict[typing.Any, typing.Any], MultiDict[typing.Any, typing.Any]]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 228,
    "warning_line": "        return self.parse(get_input_stream(environ), mimetype, content_length, options)"
  },
  {
    "project": "pallets/werkzeug",
    "commit": "ef545f0d0bf28cbad02066b4cb7471bea50a93ee",
    "filename": "src/werkzeug/formparser.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/formparser.py",
    "file_hunks_size": 36,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/werkzeug/formparser.py:228:53 Incompatible parameter type [6]: Expected `str` for 2nd positional only parameter to call `FormDataParser.parse` but got `Union[Dict[typing.Any, typing.Any], Dict[str, Optional[str]], Dict[str, str], str]`.",
    "message": " Expected `str` for 2nd positional only parameter to call `FormDataParser.parse` but got `Union[Dict[typing.Any, typing.Any], Dict[str, Optional[str]], Dict[str, str], str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 228,
    "warning_line": "        return self.parse(get_input_stream(environ), mimetype, content_length, options)"
  },
  {
    "project": "pallets/werkzeug",
    "commit": "ef545f0d0bf28cbad02066b4cb7471bea50a93ee",
    "filename": "src/werkzeug/formparser.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/formparser.py",
    "file_hunks_size": 36,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/werkzeug/formparser.py:228:79 Incompatible parameter type [6]: Expected `Optional[Dict[str, str]]` for 4th positional only parameter to call `FormDataParser.parse` but got `Union[Dict[typing.Any, typing.Any], Dict[str, Optional[str]], Dict[str, str], str]`.",
    "message": " Expected `Optional[Dict[str, str]]` for 4th positional only parameter to call `FormDataParser.parse` but got `Union[Dict[typing.Any, typing.Any], Dict[str, Optional[str]], Dict[str, str], str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 228,
    "warning_line": "        return self.parse(get_input_stream(environ), mimetype, content_length, options)"
  },
  {
    "project": "pallets/werkzeug",
    "commit": "ef545f0d0bf28cbad02066b4cb7471bea50a93ee",
    "filename": "src/werkzeug/formparser.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/formparser.py",
    "file_hunks_size": 36,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "src/werkzeug/formparser.py:270:8 Incompatible return type [7]: Expected `Union[Tuple[BytesIO, ImmutableMultiDict[typing.Any, typing.Any], ImmutableMultiDict[typing.Any, typing.Any]], Tuple[BytesIO, MultiDict[typing.Any, typing.Any], MultiDict[typing.Any, typing.Any]], Tuple[LimitedStream, ImmutableMultiDict[typing.Any, typing.Any], ImmutableMultiDict[typing.Any, typing.Any]], Tuple[LimitedStream, MultiDict[typing.Any, typing.Any], MultiDict[typing.Any, typing.Any]], Tuple[str, MultiDict[typing.Any, typing.Any], MultiDict[typing.Any, typing.Any]]]` but got `Tuple[Union[BytesIO, LimitedStream, str], typing.Any, typing.Any]`.",
    "message": " Expected `Union[Tuple[BytesIO, ImmutableMultiDict[typing.Any, typing.Any], ImmutableMultiDict[typing.Any, typing.Any]], Tuple[BytesIO, MultiDict[typing.Any, typing.Any], MultiDict[typing.Any, typing.Any]], Tuple[LimitedStream, ImmutableMultiDict[typing.Any, typing.Any], ImmutableMultiDict[typing.Any, typing.Any]], Tuple[LimitedStream, MultiDict[typing.Any, typing.Any], MultiDict[typing.Any, typing.Any]], Tuple[str, MultiDict[typing.Any, typing.Any], MultiDict[typing.Any, typing.Any]]]` but got `Tuple[Union[BytesIO, LimitedStream, str], typing.Any, typing.Any]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 270,
    "warning_line": "        return stream, self.cls(), self.cls()",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n        return stream, self.cls(), self.cls()\n\n",
        "source_code_len": 48,
        "target_code": "\n        return stream, self.cls(), self.cls()  # type: ignore\n\n",
        "target_code_len": 64,
        "diff_format": "@@ -269,3 +256,3 @@\n \n-        return stream, self.cls(), self.cls()\n+        return stream, self.cls(), self.cls()  # type: ignore\n \n",
        "source_code_with_indent": "\n        <DED><DED><DED>return stream, self.cls(), self.cls()\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        <DED><DED><DED>return stream, self.cls(), self.cls()  # type: ignore\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pallets/werkzeug",
    "commit": "ef545f0d0bf28cbad02066b4cb7471bea50a93ee",
    "filename": "src/werkzeug/formparser.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/formparser.py",
    "file_hunks_size": 36,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "src/werkzeug/formparser.py:270:23 Call error [29]: `Optional[Type[ImmutableMultiDict[typing.Any, typing.Any]]]` is not a function.",
    "message": " `Optional[Type[ImmutableMultiDict[typing.Any, typing.Any]]]` is not a function.",
    "rule_id": "Call error [29]",
    "warning_line_no": 270,
    "warning_line": "        return stream, self.cls(), self.cls()",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n        return stream, self.cls(), self.cls()\n\n",
        "source_code_len": 48,
        "target_code": "\n        return stream, self.cls(), self.cls()  # type: ignore\n\n",
        "target_code_len": 64,
        "diff_format": "@@ -269,3 +256,3 @@\n \n-        return stream, self.cls(), self.cls()\n+        return stream, self.cls(), self.cls()  # type: ignore\n \n",
        "source_code_with_indent": "\n        <DED><DED><DED>return stream, self.cls(), self.cls()\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        <DED><DED><DED>return stream, self.cls(), self.cls()  # type: ignore\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pallets/werkzeug",
    "commit": "ef545f0d0bf28cbad02066b4cb7471bea50a93ee",
    "filename": "src/werkzeug/formparser.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/formparser.py",
    "file_hunks_size": 36,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "src/werkzeug/formparser.py:270:35 Call error [29]: `Optional[Type[ImmutableMultiDict[typing.Any, typing.Any]]]` is not a function.",
    "message": " `Optional[Type[ImmutableMultiDict[typing.Any, typing.Any]]]` is not a function.",
    "rule_id": "Call error [29]",
    "warning_line_no": 270,
    "warning_line": "        return stream, self.cls(), self.cls()",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n        return stream, self.cls(), self.cls()\n\n",
        "source_code_len": 48,
        "target_code": "\n        return stream, self.cls(), self.cls()  # type: ignore\n\n",
        "target_code_len": 64,
        "diff_format": "@@ -269,3 +256,3 @@\n \n-        return stream, self.cls(), self.cls()\n+        return stream, self.cls(), self.cls()  # type: ignore\n \n",
        "source_code_with_indent": "\n        <DED><DED><DED>return stream, self.cls(), self.cls()\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        <DED><DED><DED>return stream, self.cls(), self.cls()  # type: ignore\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pallets/werkzeug",
    "commit": "ef545f0d0bf28cbad02066b4cb7471bea50a93ee",
    "filename": "src/werkzeug/formparser.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/formparser.py",
    "file_hunks_size": 36,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "src/werkzeug/formparser.py:316:29 Call error [29]: `Optional[Type[ImmutableMultiDict[typing.Any, typing.Any]]]` is not a function.",
    "message": " `Optional[Type[ImmutableMultiDict[typing.Any, typing.Any]]]` is not a function.",
    "rule_id": "Call error [29]",
    "warning_line_no": 316,
    "warning_line": "        return stream, form, self.cls()",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        form = url_decode_stream(stream, self.charset, errors=self.errors, cls=self.cls)\n        return stream, form, self.cls()\n\n",
        "source_code_len": 130,
        "target_code": "        form = url_decode_stream(stream, self.charset, errors=self.errors, cls=self.cls)\n        return stream, form, self.cls()  # type: ignore\n\n",
        "target_code_len": 146,
        "diff_format": "@@ -315,3 +296,3 @@\n         form = url_decode_stream(stream, self.charset, errors=self.errors, cls=self.cls)\n-        return stream, form, self.cls()\n+        return stream, form, self.cls()  # type: ignore\n \n",
        "source_code_with_indent": "        <DED>form = url_decode_stream(stream, self.charset, errors=self.errors, cls=self.cls)\n        return stream, form, self.cls()\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>form = url_decode_stream(stream, self.charset, errors=self.errors, cls=self.cls)\n        return stream, form, self.cls()  # type: ignore\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pallets/werkzeug",
    "commit": "ef545f0d0bf28cbad02066b4cb7471bea50a93ee",
    "filename": "src/werkzeug/formparser.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/formparser.py",
    "file_hunks_size": 36,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/werkzeug/formparser.py:354:44 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `_line_parse` but got `Union[None, bytes, str]`.",
    "message": " Expected `str` for 1st positional only parameter to call `_line_parse` but got `Union[None, bytes, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 354,
    "warning_line": "        line, line_terminated = _line_parse(line)"
  },
  {
    "project": "pallets/werkzeug",
    "commit": "ef545f0d0bf28cbad02066b4cb7471bea50a93ee",
    "filename": "src/werkzeug/formparser.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/formparser.py",
    "file_hunks_size": 36,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/werkzeug/formparser.py:511:16 Incompatible parameter type [6]: Expected `Union[List[str], BytesIO, io.StringIO, src.werkzeug.wsgi.LimitedStream]` for 1st positional only parameter to call `make_line_iter` but got `Union[BytesIO, LimitedStream]`.",
    "message": " Expected `Union[List[str], BytesIO, io.StringIO, src.werkzeug.wsgi.LimitedStream]` for 1st positional only parameter to call `make_line_iter` but got `Union[BytesIO, LimitedStream]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 511,
    "warning_line": "                file,"
  },
  {
    "project": "pallets/werkzeug",
    "commit": "ef545f0d0bf28cbad02066b4cb7471bea50a93ee",
    "filename": "src/werkzeug/formparser.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/formparser.py",
    "file_hunks_size": 36,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "src/werkzeug/formparser.py:561:45 Incompatible parameter type [6]: Expected `bytes` for 1st positional only parameter to call `codecs.decode` but got `Union[bytes, str]`.",
    "message": " Expected `bytes` for 1st positional only parameter to call `codecs.decode` but got `Union[bytes, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 561,
    "warning_line": "                        line = codecs.decode(line, transfer_encoding)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "                    try:\n                        line = codecs.decode(line, transfer_encoding)\n                    except Exception:\n",
        "source_code_len": 133,
        "target_code": "                    try:\n                        line = codecs.decode(line, transfer_encoding)  # type: ignore\n                    except Exception:\n",
        "target_code_len": 149,
        "diff_format": "@@ -560,3 +542,3 @@\n                     try:\n-                        line = codecs.decode(line, transfer_encoding)\n+                        line = codecs.decode(line, transfer_encoding)  # type: ignore\n                     except Exception:\n",
        "source_code_with_indent": "                    <DED>try:\n                        <IND>line = codecs.decode(line, transfer_encoding)\n                    <DED>except Exception:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                    <DED>try:\n                        <IND>line = codecs.decode(line, transfer_encoding)  # type: ignore\n                    <DED>except Exception:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pallets/werkzeug",
    "commit": "ef545f0d0bf28cbad02066b4cb7471bea50a93ee",
    "filename": "src/werkzeug/formparser.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/formparser.py",
    "file_hunks_size": 36,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/werkzeug/formparser.py:568:20 Incompatible return type [7]: Expected `Iterator[Union[Tuple[str, None], Tuple[str, Tuple[Headers, str]], Tuple[str, Tuple[Headers, str, str]], Tuple[str, bytes]]]` but got `typing.Generator[Tuple[str, Union[bytes, str]], None, None]`.",
    "message": " Expected `Iterator[Union[Tuple[str, None], Tuple[str, Tuple[Headers, str]], Tuple[str, Tuple[Headers, str, str]], Tuple[str, bytes]]]` but got `typing.Generator[Tuple[str, Union[bytes, str]], None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 568,
    "warning_line": "                    yield _cont, buf"
  },
  {
    "project": "pallets/werkzeug",
    "commit": "ef545f0d0bf28cbad02066b4cb7471bea50a93ee",
    "filename": "src/werkzeug/formparser.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/formparser.py",
    "file_hunks_size": 36,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/werkzeug/formparser.py:586:16 Incompatible return type [7]: Expected `Iterator[Union[Tuple[str, None], Tuple[str, Tuple[Headers, str]], Tuple[str, Tuple[Headers, str, str]], Tuple[str, bytes]]]` but got `typing.Generator[Tuple[str, Union[bytes, str]], None, None]`.",
    "message": " Expected `Iterator[Union[Tuple[str, None], Tuple[str, Tuple[Headers, str]], Tuple[str, Tuple[Headers, str, str]], Tuple[str, bytes]]]` but got `typing.Generator[Tuple[str, Union[bytes, str]], None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 586,
    "warning_line": "                yield _cont, line[:cutoff]"
  },
  {
    "project": "pallets/werkzeug",
    "commit": "ef545f0d0bf28cbad02066b4cb7471bea50a93ee",
    "filename": "src/werkzeug/formparser.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/formparser.py",
    "file_hunks_size": 36,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/werkzeug/formparser.py:595:16 Incompatible return type [7]: Expected `Iterator[Union[Tuple[str, None], Tuple[str, Tuple[Headers, str]], Tuple[str, Tuple[Headers, str, str]], Tuple[str, bytes]]]` but got `typing.Generator[Tuple[str, Union[bytes, str]], None, None]`.",
    "message": " Expected `Iterator[Union[Tuple[str, None], Tuple[str, Tuple[Headers, str]], Tuple[str, Tuple[Headers, str, str]], Tuple[str, bytes]]]` but got `typing.Generator[Tuple[str, Union[bytes, str]], None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 595,
    "warning_line": "                yield _cont, buf"
  },
  {
    "project": "pallets/werkzeug",
    "commit": "ef545f0d0bf28cbad02066b4cb7471bea50a93ee",
    "filename": "src/werkzeug/formparser.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/formparser.py",
    "file_hunks_size": 36,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/werkzeug/formparser.py:632:37 Incompatible parameter type [6]: Expected `typing.Sized` for 1st positional only parameter to call `len` but got `Union[None, Tuple[Headers, str], Tuple[Headers, str, str], bytes]`.",
    "message": " Expected `typing.Sized` for 1st positional only parameter to call `len` but got `Union[None, Tuple[Headers, str], Tuple[Headers, str, str], bytes]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 632,
    "warning_line": "                    in_memory += len(ell)"
  },
  {
    "project": "pallets/werkzeug",
    "commit": "ef545f0d0bf28cbad02066b4cb7471bea50a93ee",
    "filename": "src/werkzeug/http.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/http.py",
    "file_hunks_size": 48,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/werkzeug/http.py:487:12 Incompatible return type [7]: Expected `Union[Tuple[str, Dict[typing.Any, typing.Any]], Tuple[str, Dict[str, Optional[str]]], Tuple[str, Dict[str, str]], Tuple[str, Dict[str, str], str, Dict[typing.Any, typing.Any]], Tuple[str, Dict[str, str], str, Dict[typing.Any, typing.Any], str, Dict[str, str], str, Dict[typing.Any, typing.Any]]]` but got `typing.Tuple[typing.Any, ...]`.",
    "message": " Expected `Union[Tuple[str, Dict[typing.Any, typing.Any]], Tuple[str, Dict[str, Optional[str]]], Tuple[str, Dict[str, str]], Tuple[str, Dict[str, str], str, Dict[typing.Any, typing.Any]], Tuple[str, Dict[str, str], str, Dict[typing.Any, typing.Any], str, Dict[str, str], str, Dict[typing.Any, typing.Any]]]` but got `typing.Tuple[typing.Any, ...]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 487,
    "warning_line": "            return tuple(result)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef parse_options_header(\n    value: Optional[str], multiple: bool = False\n) -> Union[\n    Tuple[str, Dict[str, str], str, Dict[Any, Any]],\n    Tuple[str, Dict[Any, Any]],\n    Tuple[str, Dict[str, str]],\n    Tuple[\n        str,\n        Dict[str, str],\n        str,\n        Dict[Any, Any],\n        str,\n        Dict[str, str],\n        str,\n        Dict[Any, Any],\n    ],\n    Tuple[str, Dict[str, Optional[str]]],\n]:\n    \"\"\"Parse a ``Content-Type`` like header into a tuple with the content\n",
        "source_code_len": 490,
        "target_code": "\ndef parse_options_header(value: Optional[str], multiple: bool = False) -> Any:\n    \"\"\"Parse a ``Content-Type`` like header into a tuple with the content\n",
        "target_code_len": 154,
        "diff_format": "@@ -403,20 +397,3 @@\n \n-def parse_options_header(\n-    value: Optional[str], multiple: bool = False\n-) -> Union[\n-    Tuple[str, Dict[str, str], str, Dict[Any, Any]],\n-    Tuple[str, Dict[Any, Any]],\n-    Tuple[str, Dict[str, str]],\n-    Tuple[\n-        str,\n-        Dict[str, str],\n-        str,\n-        Dict[Any, Any],\n-        str,\n-        Dict[str, str],\n-        str,\n-        Dict[Any, Any],\n-    ],\n-    Tuple[str, Dict[str, Optional[str]]],\n-]:\n+def parse_options_header(value: Optional[str], multiple: bool = False) -> Any:\n     \"\"\"Parse a ``Content-Type`` like header into a tuple with the content\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>def parse_options_header(\n    value: Optional[str], multiple: bool = False\n) -> Union[\n    Tuple[str, Dict[str, str], str, Dict[Any, Any]],\n    Tuple[str, Dict[Any, Any]],\n    Tuple[str, Dict[str, str]],\n    Tuple[\n        str,\n        Dict[str, str],\n        str,\n        Dict[Any, Any],\n        str,\n        Dict[str, str],\n        str,\n        Dict[Any, Any],\n    ],\n    Tuple[str, Dict[str, Optional[str]]],\n]:\n    <IND>",
        "target_code_with_indent": "\n<DED>def parse_options_header(value: Optional[str], multiple: bool = False) -> Any:\n    <IND>"
      }
    ]
  },
  {
    "project": "pallets/werkzeug",
    "commit": "ef545f0d0bf28cbad02066b4cb7471bea50a93ee",
    "filename": "src/werkzeug/http.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/http.py",
    "file_hunks_size": 48,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/werkzeug/http.py:490:4 Incompatible return type [7]: Expected `Union[Tuple[str, Dict[typing.Any, typing.Any]], Tuple[str, Dict[str, Optional[str]]], Tuple[str, Dict[str, str]], Tuple[str, Dict[str, str], str, Dict[typing.Any, typing.Any]], Tuple[str, Dict[str, str], str, Dict[typing.Any, typing.Any], str, Dict[str, str], str, Dict[typing.Any, typing.Any]]]` but got `Union[Tuple[str, Dict[Variable[_KT], Variable[_VT]]], typing.Tuple[typing.Any, ...]]`.",
    "message": " Expected `Union[Tuple[str, Dict[typing.Any, typing.Any]], Tuple[str, Dict[str, Optional[str]]], Tuple[str, Dict[str, str]], Tuple[str, Dict[str, str], str, Dict[typing.Any, typing.Any]], Tuple[str, Dict[str, str], str, Dict[typing.Any, typing.Any], str, Dict[str, str], str, Dict[typing.Any, typing.Any]]]` but got `Union[Tuple[str, Dict[Variable[_KT], Variable[_VT]]], typing.Tuple[typing.Any, ...]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 490,
    "warning_line": "    return tuple(result) if result else (\"\", {})",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef parse_options_header(\n    value: Optional[str], multiple: bool = False\n) -> Union[\n    Tuple[str, Dict[str, str], str, Dict[Any, Any]],\n    Tuple[str, Dict[Any, Any]],\n    Tuple[str, Dict[str, str]],\n    Tuple[\n        str,\n        Dict[str, str],\n        str,\n        Dict[Any, Any],\n        str,\n        Dict[str, str],\n        str,\n        Dict[Any, Any],\n    ],\n    Tuple[str, Dict[str, Optional[str]]],\n]:\n    \"\"\"Parse a ``Content-Type`` like header into a tuple with the content\n",
        "source_code_len": 490,
        "target_code": "\ndef parse_options_header(value: Optional[str], multiple: bool = False) -> Any:\n    \"\"\"Parse a ``Content-Type`` like header into a tuple with the content\n",
        "target_code_len": 154,
        "diff_format": "@@ -403,20 +397,3 @@\n \n-def parse_options_header(\n-    value: Optional[str], multiple: bool = False\n-) -> Union[\n-    Tuple[str, Dict[str, str], str, Dict[Any, Any]],\n-    Tuple[str, Dict[Any, Any]],\n-    Tuple[str, Dict[str, str]],\n-    Tuple[\n-        str,\n-        Dict[str, str],\n-        str,\n-        Dict[Any, Any],\n-        str,\n-        Dict[str, str],\n-        str,\n-        Dict[Any, Any],\n-    ],\n-    Tuple[str, Dict[str, Optional[str]]],\n-]:\n+def parse_options_header(value: Optional[str], multiple: bool = False) -> Any:\n     \"\"\"Parse a ``Content-Type`` like header into a tuple with the content\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>def parse_options_header(\n    value: Optional[str], multiple: bool = False\n) -> Union[\n    Tuple[str, Dict[str, str], str, Dict[Any, Any]],\n    Tuple[str, Dict[Any, Any]],\n    Tuple[str, Dict[str, str]],\n    Tuple[\n        str,\n        Dict[str, str],\n        str,\n        Dict[Any, Any],\n        str,\n        Dict[str, str],\n        str,\n        Dict[Any, Any],\n    ],\n    Tuple[str, Dict[str, Optional[str]]],\n]:\n    <IND>",
        "target_code_with_indent": "\n<DED>def parse_options_header(value: Optional[str], multiple: bool = False) -> Any:\n    <IND>"
      }
    ]
  },
  {
    "project": "pallets/werkzeug",
    "commit": "ef545f0d0bf28cbad02066b4cb7471bea50a93ee",
    "filename": "src/werkzeug/http.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/http.py",
    "file_hunks_size": 48,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/werkzeug/http.py:578:19 Incompatible parameter type [6]: Expected `Union[List[Tuple[str, str]], typing.Tuple[typing.Any, ...]]` for 1st positional only parameter to call `ContentSecurityPolicy.__init__` but got `None`.",
    "message": " Expected `Union[List[Tuple[str, str]], typing.Tuple[typing.Any, ...]]` for 1st positional only parameter to call `ContentSecurityPolicy.__init__` but got `None`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 578,
    "warning_line": "        return cls(None, on_update)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def parse_csp_header(\n    value: str, on_update: None = None, cls: None = None\n) -> ContentSecurityPolicy:\n    \"\"\"Parse a Content Security Policy header.\n",
        "source_code_len": 154,
        "target_code": "def parse_csp_header(\n    value: str, on_update: None = None, cls: Optional[Any] = None\n) -> object:\n    \"\"\"Parse a Content Security Policy header.\n",
        "target_code_len": 148,
        "diff_format": "@@ -559,4 +541,4 @@\n def parse_csp_header(\n-    value: str, on_update: None = None, cls: None = None\n-) -> ContentSecurityPolicy:\n+    value: str, on_update: None = None, cls: Optional[Any] = None\n+) -> object:\n     \"\"\"Parse a Content Security Policy header.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "<DED>def parse_csp_header(\n    value: str, on_update: None = None, cls: None = None\n) -> ContentSecurityPolicy:\n    <IND>",
        "target_code_with_indent": "<DED>def parse_csp_header(\n    value: str, on_update: None = None, cls: Optional[Any] = None\n) -> object:\n    <IND>"
      }
    ]
  },
  {
    "project": "pallets/werkzeug",
    "commit": "ef545f0d0bf28cbad02066b4cb7471bea50a93ee",
    "filename": "src/werkzeug/http.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/http.py",
    "file_hunks_size": 48,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/werkzeug/http.py:646:16 Incompatible parameter type [6]: Expected `Optional[Dict[str, str]]` for 2nd positional only parameter to call `Authorization.__init__` but got `Dict[str, Union[None, bytes, str]]`.",
    "message": " Expected `Optional[Dict[str, str]]` for 2nd positional only parameter to call `Authorization.__init__` but got `Dict[str, Union[None, bytes, str]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 646,
    "warning_line": "                {"
  },
  {
    "project": "pallets/werkzeug",
    "commit": "ef545f0d0bf28cbad02066b4cb7471bea50a93ee",
    "filename": "src/werkzeug/http.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/http.py",
    "file_hunks_size": 48,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/werkzeug/http.py:661:39 Incompatible parameter type [6]: Expected `Optional[Dict[str, str]]` for 2nd positional only parameter to call `Authorization.__init__` but got `Dict[str, Optional[str]]`.",
    "message": " Expected `Optional[Dict[str, str]]` for 2nd positional only parameter to call `Authorization.__init__` but got `Dict[str, Optional[str]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 661,
    "warning_line": "        return Authorization(\"digest\", auth_map)"
  },
  {
    "project": "pallets/werkzeug",
    "commit": "ef545f0d0bf28cbad02066b4cb7471bea50a93ee",
    "filename": "src/werkzeug/http.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/http.py",
    "file_hunks_size": 48,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/werkzeug/http.py:683:38 Incompatible parameter type [6]: Expected `Optional[Dict[str, str]]` for 2nd positional only parameter to call `WWWAuthenticate.__init__` but got `Dict[str, Optional[str]]`.",
    "message": " Expected `Optional[Dict[str, str]]` for 2nd positional only parameter to call `WWWAuthenticate.__init__` but got `Dict[str, Optional[str]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 683,
    "warning_line": "    return WWWAuthenticate(auth_type, parse_dict_header(auth_info), on_update)"
  },
  {
    "project": "pallets/werkzeug",
    "commit": "ef545f0d0bf28cbad02066b4cb7471bea50a93ee",
    "filename": "src/werkzeug/http.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/http.py",
    "file_hunks_size": 48,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/werkzeug/http.py:993:8 Incompatible return type [7]: Expected `str` but got `None`.",
    "message": " Expected `str` but got `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 993,
    "warning_line": "        return",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef dump_age(age: Optional[Union[timedelta, int]] = None) -> str:\n    \"\"\"Formats the duration as a base-10 integer.\n",
        "source_code_len": 117,
        "target_code": "\ndef dump_age(age: Optional[Union[timedelta, int]] = None) -> Optional[str]:\n    \"\"\"Formats the duration as a base-10 integer.\n",
        "target_code_len": 127,
        "diff_format": "@@ -984,3 +976,3 @@\n \n-def dump_age(age: Optional[Union[timedelta, int]] = None) -> str:\n+def dump_age(age: Optional[Union[timedelta, int]] = None) -> Optional[str]:\n     \"\"\"Formats the duration as a base-10 integer.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED><DED>def dump_age(age: Optional[Union[timedelta, int]] = None) -> str:\n    <IND>",
        "target_code_with_indent": "\n<DED><DED>def dump_age(age: Optional[Union[timedelta, int]] = None) -> Optional[str]:\n    <IND>"
      }
    ]
  },
  {
    "project": "pallets/werkzeug",
    "commit": "ef545f0d0bf28cbad02066b4cb7471bea50a93ee",
    "filename": "src/werkzeug/http.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/http.py",
    "file_hunks_size": 48,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "src/werkzeug/http.py:1025:29 Incompatible parameter type [6]: Expected `bytes` for 1st positional only parameter to call `generate_etag` but got `Union[bytes, str]`.",
    "message": " Expected `bytes` for 1st positional only parameter to call `generate_etag` but got `Union[bytes, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1025,
    "warning_line": "        etag = generate_etag(data)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "    if etag is None and data is not None:\n        etag = generate_etag(data)\n    elif data is not None:\n",
        "source_code_len": 104,
        "target_code": "    if etag is None and data is not None:\n        etag = generate_etag(data)  # type: ignore\n    elif data is not None:\n",
        "target_code_len": 120,
        "diff_format": "@@ -1024,3 +1016,3 @@\n     if etag is None and data is not None:\n-        etag = generate_etag(data)\n+        etag = generate_etag(data)  # type: ignore\n     elif data is not None:\n",
        "source_code_with_indent": "    if etag is None and data is not None:\n        <IND>etag = generate_etag(data)\n    <DED>elif data is not None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    if etag is None and data is not None:\n        <IND>etag = generate_etag(data)  # type: ignore\n    <DED>elif data is not None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pallets/werkzeug",
    "commit": "ef545f0d0bf28cbad02066b4cb7471bea50a93ee",
    "filename": "src/werkzeug/http.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/http.py",
    "file_hunks_size": 48,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/werkzeug/http.py:1056:61 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `ETags.contains` but got `Optional[str]`.",
    "message": " Expected `str` for 1st positional only parameter to call `ETags.contains` but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1056,
    "warning_line": "            unmodified = parse_etags(if_range.etag).contains(etag)"
  },
  {
    "project": "pallets/werkzeug",
    "commit": "ef545f0d0bf28cbad02066b4cb7471bea50a93ee",
    "filename": "src/werkzeug/http.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/http.py",
    "file_hunks_size": 48,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/werkzeug/http.py:1063:57 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `ETags.contains_weak` but got `Optional[str]`.",
    "message": " Expected `str` for 1st positional only parameter to call `ETags.contains_weak` but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1063,
    "warning_line": "                unmodified = if_none_match.contains_weak(etag)"
  },
  {
    "project": "pallets/werkzeug",
    "commit": "ef545f0d0bf28cbad02066b4cb7471bea50a93ee",
    "filename": "src/werkzeug/http.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/http.py",
    "file_hunks_size": 48,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/werkzeug/http.py:1070:52 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `ETags.is_strong` but got `Optional[str]`.",
    "message": " Expected `str` for 1st positional only parameter to call `ETags.is_strong` but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1070,
    "warning_line": "                unmodified = not if_match.is_strong(etag)"
  },
  {
    "project": "pallets/werkzeug",
    "commit": "ef545f0d0bf28cbad02066b4cb7471bea50a93ee",
    "filename": "src/werkzeug/http.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/http.py",
    "file_hunks_size": 48,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/werkzeug/http.py:1257:40 Incompatible parameter type [6]: Expected `Union[None, datetime, int]` for 1st positional only parameter to call `cookie_date` but got `float`.",
    "message": " Expected `Union[None, datetime, int]` for 1st positional only parameter to call `cookie_date` but got `float`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1257,
    "warning_line": "        expires = _to_bytes(cookie_date(time() + max_age))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef cookie_date(expires: Optional[Union[datetime, int]] = None) -> str:\n    \"\"\"Formats the time to ensure compatibility with Netscape's cookie\n",
        "source_code_len": 144,
        "target_code": "\ndef cookie_date(expires: Optional[Union[datetime, int, float]] = None) -> str:\n    \"\"\"Formats the time to ensure compatibility with Netscape's cookie\n",
        "target_code_len": 151,
        "diff_format": "@@ -933,3 +925,3 @@\n \n-def cookie_date(expires: Optional[Union[datetime, int]] = None) -> str:\n+def cookie_date(expires: Optional[Union[datetime, int, float]] = None) -> str:\n     \"\"\"Formats the time to ensure compatibility with Netscape's cookie\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>def cookie_date(expires: Optional[Union[datetime, int]] = None) -> str:\n    <IND>",
        "target_code_with_indent": "\n<DED>def cookie_date(expires: Optional[Union[datetime, int, float]] = None) -> str:\n    <IND>"
      }
    ]
  },
  {
    "project": "pallets/werkzeug",
    "commit": "ef545f0d0bf28cbad02066b4cb7471bea50a93ee",
    "filename": "src/werkzeug/http.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/http.py",
    "file_hunks_size": 48,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/werkzeug/http.py:1297:20 Incompatible parameter type [6]: Expected `typing.Iterable[Union[memoryview, typing.ByteString]]` for 1st positional only parameter to call `bytes.join` but got `List[str]`.",
    "message": " Expected `typing.Iterable[Union[memoryview, typing.ByteString]]` for 1st positional only parameter to call `bytes.join` but got `List[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1297,
    "warning_line": "    rv = b\"; \".join(buf)"
  },
  {
    "project": "pallets/werkzeug",
    "commit": "ef545f0d0bf28cbad02066b4cb7471bea50a93ee",
    "filename": "src/werkzeug/local.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/local.py",
    "file_hunks_size": 18,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/werkzeug/local.py:312:19 Call error [29]: `Union[typing.Callable[..., typing.Any], int, str]` is not a function.",
    "message": " `Union[typing.Callable[..., typing.Any], int, str]` is not a function.",
    "rule_id": "Call error [29]",
    "warning_line_no": 312,
    "warning_line": "            return self.__local()",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __getattr__(self, name: str) -> Union[Callable, str, int]:\n        if name == \"__members__\":\n",
        "source_code_len": 102,
        "target_code": "\n    def __getattr__(self, name: str) -> Any:\n        if name == \"__members__\":\n",
        "target_code_len": 80,
        "diff_format": "@@ -343,3 +341,3 @@\n \n-    def __getattr__(self, name: str) -> Union[Callable, str, int]:\n+    def __getattr__(self, name: str) -> Any:\n         if name == \"__members__\":\n",
        "source_code_with_indent": "\n    <DED><DED>def __getattr__(self, name: str) -> Union[Callable, str, int]:\n        <IND>if name == \"__members__\":\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED><DED>def __getattr__(self, name: str) -> Any:\n        <IND>if name == \"__members__\":\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pallets/werkzeug",
    "commit": "ef545f0d0bf28cbad02066b4cb7471bea50a93ee",
    "filename": "src/werkzeug/local.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/local.py",
    "file_hunks_size": 18,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/werkzeug/local.py:314:41 Incompatible parameter type [6]: Expected `str` for 2nd positional only parameter to call `getattr` but got `Union[typing.Callable[..., typing.Any], int, str]`.",
    "message": " Expected `str` for 2nd positional only parameter to call `getattr` but got `Union[typing.Callable[..., typing.Any], int, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 314,
    "warning_line": "            return getattr(self.__local, self.__name__)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __getattr__(self, name: str) -> Union[Callable, str, int]:\n        if name == \"__members__\":\n",
        "source_code_len": 102,
        "target_code": "\n    def __getattr__(self, name: str) -> Any:\n        if name == \"__members__\":\n",
        "target_code_len": 80,
        "diff_format": "@@ -343,3 +341,3 @@\n \n-    def __getattr__(self, name: str) -> Union[Callable, str, int]:\n+    def __getattr__(self, name: str) -> Any:\n         if name == \"__members__\":\n",
        "source_code_with_indent": "\n    <DED><DED>def __getattr__(self, name: str) -> Union[Callable, str, int]:\n        <IND>if name == \"__members__\":\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED><DED>def __getattr__(self, name: str) -> Any:\n        <IND>if name == \"__members__\":\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pallets/werkzeug",
    "commit": "ef545f0d0bf28cbad02066b4cb7471bea50a93ee",
    "filename": "src/werkzeug/local.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/local.py",
    "file_hunks_size": 18,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/werkzeug/local.py:346:12 Incompatible return type [7]: Expected `Union[typing.Callable[..., typing.Any], int, str]` but got `List[str]`.",
    "message": " Expected `Union[typing.Callable[..., typing.Any], int, str]` but got `List[str]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 346,
    "warning_line": "            return dir(self._get_current_object())",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __getattr__(self, name: str) -> Union[Callable, str, int]:\n        if name == \"__members__\":\n",
        "source_code_len": 102,
        "target_code": "\n    def __getattr__(self, name: str) -> Any:\n        if name == \"__members__\":\n",
        "target_code_len": 80,
        "diff_format": "@@ -343,3 +341,3 @@\n \n-    def __getattr__(self, name: str) -> Union[Callable, str, int]:\n+    def __getattr__(self, name: str) -> Any:\n         if name == \"__members__\":\n",
        "source_code_with_indent": "\n    <DED><DED>def __getattr__(self, name: str) -> Union[Callable, str, int]:\n        <IND>if name == \"__members__\":\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED><DED>def __getattr__(self, name: str) -> Any:\n        <IND>if name == \"__members__\":\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pallets/werkzeug",
    "commit": "ef545f0d0bf28cbad02066b4cb7471bea50a93ee",
    "filename": "src/werkzeug/middleware/lint.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/middleware/lint.py",
    "file_hunks_size": 20,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/werkzeug/middleware/lint.py:168:30 Incompatible parameter type [6]: Expected `Headers` for 1st positional only parameter to call `Headers.__eq__` but got `int`.",
    "message": " Expected `Headers` for 1st positional only parameter to call `Headers.__eq__` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 168,
    "warning_line": "            if status_code == 304:"
  },
  {
    "project": "pallets/werkzeug",
    "commit": "ef545f0d0bf28cbad02066b4cb7471bea50a93ee",
    "filename": "src/werkzeug/middleware/lint.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/middleware/lint.py",
    "file_hunks_size": 20,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "src/werkzeug/middleware/lint.py:179:24 Unsupported operand [58]: `<=` is not supported for operand types `int` and `Union[Headers, int]`.",
    "message": " `<=` is not supported for operand types `int` and `Union[Headers, int]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 179,
    "warning_line": "            elif 100 <= status_code < 200 or status_code == 204:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "                    warn(\"304 responses must not have a body.\", HTTPWarning)\n            elif 100 <= status_code < 200 or status_code == 204:\n                if content_length != 0:\n",
        "source_code_len": 182,
        "target_code": "                    warn(\"304 responses must not have a body.\", HTTPWarning)\n            elif 100 <= status_code < 200 or status_code == 204:  # type: ignore\n                if content_length != 0:\n",
        "target_code_len": 198,
        "diff_format": "@@ -178,3 +189,3 @@\n                     warn(\"304 responses must not have a body.\", HTTPWarning)\n-            elif 100 <= status_code < 200 or status_code == 204:\n+            elif 100 <= status_code < 200 or status_code == 204:  # type: ignore\n                 if content_length != 0:\n",
        "source_code_with_indent": "                    <IND>warn(\"304 responses must not have a body.\", HTTPWarning)\n            <DED><DED>elif 100 <= status_code < 200 or status_code == 204:\n                <IND>if content_length != 0:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                    <IND>warn(\"304 responses must not have a body.\", HTTPWarning)\n            <DED><DED>elif 100 <= status_code < 200 or status_code == 204:  # type: ignore\n                <IND>if content_length != 0:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pallets/werkzeug",
    "commit": "ef545f0d0bf28cbad02066b4cb7471bea50a93ee",
    "filename": "src/werkzeug/middleware/lint.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/middleware/lint.py",
    "file_hunks_size": 20,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "src/werkzeug/middleware/lint.py:179:24 Unsupported operand [58]: `>=` is not supported for operand types `Union[Headers, int]` and `int`.",
    "message": " `>=` is not supported for operand types `Union[Headers, int]` and `int`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 179,
    "warning_line": "            elif 100 <= status_code < 200 or status_code == 204:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "                    warn(\"304 responses must not have a body.\", HTTPWarning)\n            elif 100 <= status_code < 200 or status_code == 204:\n                if content_length != 0:\n",
        "source_code_len": 182,
        "target_code": "                    warn(\"304 responses must not have a body.\", HTTPWarning)\n            elif 100 <= status_code < 200 or status_code == 204:  # type: ignore\n                if content_length != 0:\n",
        "target_code_len": 198,
        "diff_format": "@@ -178,3 +189,3 @@\n                     warn(\"304 responses must not have a body.\", HTTPWarning)\n-            elif 100 <= status_code < 200 or status_code == 204:\n+            elif 100 <= status_code < 200 or status_code == 204:  # type: ignore\n                 if content_length != 0:\n",
        "source_code_with_indent": "                    <IND>warn(\"304 responses must not have a body.\", HTTPWarning)\n            <DED><DED>elif 100 <= status_code < 200 or status_code == 204:\n                <IND>if content_length != 0:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                    <IND>warn(\"304 responses must not have a body.\", HTTPWarning)\n            <DED><DED>elif 100 <= status_code < 200 or status_code == 204:  # type: ignore\n                <IND>if content_length != 0:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pallets/werkzeug",
    "commit": "ef545f0d0bf28cbad02066b4cb7471bea50a93ee",
    "filename": "src/werkzeug/middleware/lint.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/middleware/lint.py",
    "file_hunks_size": 20,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "src/werkzeug/middleware/lint.py:179:60 Incompatible parameter type [6]: Expected `Headers` for 1st positional only parameter to call `Headers.__eq__` but got `int`.",
    "message": " Expected `Headers` for 1st positional only parameter to call `Headers.__eq__` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 179,
    "warning_line": "            elif 100 <= status_code < 200 or status_code == 204:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "                    warn(\"304 responses must not have a body.\", HTTPWarning)\n            elif 100 <= status_code < 200 or status_code == 204:\n                if content_length != 0:\n",
        "source_code_len": 182,
        "target_code": "                    warn(\"304 responses must not have a body.\", HTTPWarning)\n            elif 100 <= status_code < 200 or status_code == 204:  # type: ignore\n                if content_length != 0:\n",
        "target_code_len": 198,
        "diff_format": "@@ -178,3 +189,3 @@\n                     warn(\"304 responses must not have a body.\", HTTPWarning)\n-            elif 100 <= status_code < 200 or status_code == 204:\n+            elif 100 <= status_code < 200 or status_code == 204:  # type: ignore\n                 if content_length != 0:\n",
        "source_code_with_indent": "                    <IND>warn(\"304 responses must not have a body.\", HTTPWarning)\n            <DED><DED>elif 100 <= status_code < 200 or status_code == 204:\n                <IND>if content_length != 0:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                    <IND>warn(\"304 responses must not have a body.\", HTTPWarning)\n            <DED><DED>elif 100 <= status_code < 200 or status_code == 204:  # type: ignore\n                <IND>if content_length != 0:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pallets/werkzeug",
    "commit": "ef545f0d0bf28cbad02066b4cb7471bea50a93ee",
    "filename": "src/werkzeug/middleware/lint.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/middleware/lint.py",
    "file_hunks_size": 20,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/werkzeug/middleware/lint.py:349:28 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `urlparse` but got `Union[bytes, int, str]`.",
    "message": " Expected `str` for 1st positional only parameter to call `urlparse` but got `Union[bytes, int, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 349,
    "warning_line": "            if not urlparse(location).netloc:"
  },
  {
    "project": "pallets/werkzeug",
    "commit": "ef545f0d0bf28cbad02066b4cb7471bea50a93ee",
    "filename": "src/werkzeug/middleware/shared_data.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/middleware/shared_data.py",
    "file_hunks_size": 9,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/werkzeug/middleware/shared_data.py:284:16 Incompatible return type [7]: Expected `FileWrapper` but got `List[Variable[_T]]`.",
    "message": " Expected `FileWrapper` but got `List[Variable[_T]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 284,
    "warning_line": "                return []"
  },
  {
    "project": "pallets/werkzeug",
    "commit": "ef545f0d0bf28cbad02066b4cb7471bea50a93ee",
    "filename": "src/werkzeug/middleware/shared_data.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/middleware/shared_data.py",
    "file_hunks_size": 9,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/werkzeug/middleware/shared_data.py:298:8 Incompatible return type [7]: Expected `FileWrapper` but got `src.werkzeug.wsgi.FileWrapper`.",
    "message": " Expected `FileWrapper` but got `src.werkzeug.wsgi.FileWrapper`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 298,
    "warning_line": "        return wrap_file(environ, f)"
  },
  {
    "project": "pallets/werkzeug",
    "commit": "ef545f0d0bf28cbad02066b4cb7471bea50a93ee",
    "filename": "src/werkzeug/routing.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/routing.py",
    "file_hunks_size": 55,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/werkzeug/routing.py:552:4 Incompatible return type [7]: Expected `Union[Call, FunctionDef]` but got `Union[_ast.expr, _ast.stmt]`.",
    "message": " Expected `Union[Call, FunctionDef]` but got `Union[_ast.expr, _ast.stmt]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 552,
    "warning_line": "    return tree",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _prefix_names(src: str) -> Union[FunctionDef, Call]:\n    \"\"\"ast parse and prefix names with `.` to avoid collision with user vars\"\"\"\n",
        "source_code_len": 138,
        "target_code": "\ndef _prefix_names(src: str) -> Any:\n    \"\"\"ast parse and prefix names with `.` to avoid collision with user vars\"\"\"\n",
        "target_code_len": 117,
        "diff_format": "@@ -543,3 +534,3 @@\n \n-def _prefix_names(src: str) -> Union[FunctionDef, Call]:\n+def _prefix_names(src: str) -> Any:\n     \"\"\"ast parse and prefix names with `.` to avoid collision with user vars\"\"\"\n",
        "source_code_with_indent": "\n<DED><DED><DED><DED>def _prefix_names(src: str) -> Union[FunctionDef, Call]:\n    <IND>\"\"\"ast parse and prefix names with `.` to avoid collision with user vars\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED><DED><DED><DED>def _prefix_names(src: str) -> Any:\n    <IND>\"\"\"ast parse and prefix names with `.` to avoid collision with user vars\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pallets/werkzeug",
    "commit": "ef545f0d0bf28cbad02066b4cb7471bea50a93ee",
    "filename": "src/werkzeug/routing.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/routing.py",
    "file_hunks_size": 55,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "src/werkzeug/routing.py:753:39 Incompatible parameter type [6]: Expected `None` for 2nd positional only parameter to call `Rule.__init__` but got `Union[None, Dict[str, str], Set[str], bool, str]`.",
    "message": " Expected `None` for 2nd positional only parameter to call `Rule.__init__` but got `Union[None, Dict[str, str], Set[str], bool, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 753,
    "warning_line": "        return type(self)(self.rule, **self.get_empty_kwargs())",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        \"\"\"\n        return type(self)(self.rule, **self.get_empty_kwargs())\n\n",
        "source_code_len": 77,
        "target_code": "        \"\"\"\n        return type(self)(self.rule, **self.get_empty_kwargs())  # type: ignore\n\n",
        "target_code_len": 93,
        "diff_format": "@@ -752,3 +749,3 @@\n         \"\"\"\n-        return type(self)(self.rule, **self.get_empty_kwargs())\n+        return type(self)(self.rule, **self.get_empty_kwargs())  # type: ignore\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n        return type(self)(self.rule, **self.get_empty_kwargs())\n\n",
        "target_code_with_indent": "\n        return type(self)(self.rule, **self.get_empty_kwargs())  # type: ignore\n\n"
      }
    ]
  },
  {
    "project": "pallets/werkzeug",
    "commit": "ef545f0d0bf28cbad02066b4cb7471bea50a93ee",
    "filename": "src/werkzeug/routing.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/routing.py",
    "file_hunks_size": 55,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "src/werkzeug/routing.py:753:39 Incompatible parameter type [6]: Expected `Optional[bool]` for 2nd positional only parameter to call `Rule.__init__` but got `Union[None, Dict[str, str], Set[str], bool, str]`.",
    "message": " Expected `Optional[bool]` for 2nd positional only parameter to call `Rule.__init__` but got `Union[None, Dict[str, str], Set[str], bool, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 753,
    "warning_line": "        return type(self)(self.rule, **self.get_empty_kwargs())",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        \"\"\"\n        return type(self)(self.rule, **self.get_empty_kwargs())\n\n",
        "source_code_len": 77,
        "target_code": "        \"\"\"\n        return type(self)(self.rule, **self.get_empty_kwargs())  # type: ignore\n\n",
        "target_code_len": 93,
        "diff_format": "@@ -752,3 +749,3 @@\n         \"\"\"\n-        return type(self)(self.rule, **self.get_empty_kwargs())\n+        return type(self)(self.rule, **self.get_empty_kwargs())  # type: ignore\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n        return type(self)(self.rule, **self.get_empty_kwargs())\n\n",
        "target_code_with_indent": "\n        return type(self)(self.rule, **self.get_empty_kwargs())  # type: ignore\n\n"
      }
    ]
  },
  {
    "project": "pallets/werkzeug",
    "commit": "ef545f0d0bf28cbad02066b4cb7471bea50a93ee",
    "filename": "src/werkzeug/routing.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/routing.py",
    "file_hunks_size": 55,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "src/werkzeug/routing.py:753:39 Incompatible parameter type [6]: Expected `Optional[str]` for 2nd positional only parameter to call `Rule.__init__` but got `Union[None, Dict[str, str], Set[str], bool, str]`.",
    "message": " Expected `Optional[str]` for 2nd positional only parameter to call `Rule.__init__` but got `Union[None, Dict[str, str], Set[str], bool, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 753,
    "warning_line": "        return type(self)(self.rule, **self.get_empty_kwargs())",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        \"\"\"\n        return type(self)(self.rule, **self.get_empty_kwargs())\n\n",
        "source_code_len": 77,
        "target_code": "        \"\"\"\n        return type(self)(self.rule, **self.get_empty_kwargs())  # type: ignore\n\n",
        "target_code_len": 93,
        "diff_format": "@@ -752,3 +749,3 @@\n         \"\"\"\n-        return type(self)(self.rule, **self.get_empty_kwargs())\n+        return type(self)(self.rule, **self.get_empty_kwargs())  # type: ignore\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n        return type(self)(self.rule, **self.get_empty_kwargs())\n\n",
        "target_code_with_indent": "\n        return type(self)(self.rule, **self.get_empty_kwargs())  # type: ignore\n\n"
      }
    ]
  },
  {
    "project": "pallets/werkzeug",
    "commit": "ef545f0d0bf28cbad02066b4cb7471bea50a93ee",
    "filename": "src/werkzeug/routing.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/routing.py",
    "file_hunks_size": 55,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "src/werkzeug/routing.py:753:39 Incompatible parameter type [6]: Expected `Union[None, List[str], Set[str], str]` for 2nd positional only parameter to call `Rule.__init__` but got `Union[None, Dict[str, str], Set[str], bool, str]`.",
    "message": " Expected `Union[None, List[str], Set[str], str]` for 2nd positional only parameter to call `Rule.__init__` but got `Union[None, Dict[str, str], Set[str], bool, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 753,
    "warning_line": "        return type(self)(self.rule, **self.get_empty_kwargs())",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        \"\"\"\n        return type(self)(self.rule, **self.get_empty_kwargs())\n\n",
        "source_code_len": 77,
        "target_code": "        \"\"\"\n        return type(self)(self.rule, **self.get_empty_kwargs())  # type: ignore\n\n",
        "target_code_len": 93,
        "diff_format": "@@ -752,3 +749,3 @@\n         \"\"\"\n-        return type(self)(self.rule, **self.get_empty_kwargs())\n+        return type(self)(self.rule, **self.get_empty_kwargs())  # type: ignore\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n        return type(self)(self.rule, **self.get_empty_kwargs())\n\n",
        "target_code_with_indent": "\n        return type(self)(self.rule, **self.get_empty_kwargs())  # type: ignore\n\n"
      }
    ]
  },
  {
    "project": "pallets/werkzeug",
    "commit": "ef545f0d0bf28cbad02066b4cb7471bea50a93ee",
    "filename": "src/werkzeug/routing.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/routing.py",
    "file_hunks_size": 55,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "src/werkzeug/routing.py:753:39 Incompatible parameter type [6]: Expected `bool` for 2nd positional only parameter to call `Rule.__init__` but got `Union[None, Dict[str, str], Set[str], bool, str]`.",
    "message": " Expected `bool` for 2nd positional only parameter to call `Rule.__init__` but got `Union[None, Dict[str, str], Set[str], bool, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 753,
    "warning_line": "        return type(self)(self.rule, **self.get_empty_kwargs())",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        \"\"\"\n        return type(self)(self.rule, **self.get_empty_kwargs())\n\n",
        "source_code_len": 77,
        "target_code": "        \"\"\"\n        return type(self)(self.rule, **self.get_empty_kwargs())  # type: ignore\n\n",
        "target_code_len": 93,
        "diff_format": "@@ -752,3 +749,3 @@\n         \"\"\"\n-        return type(self)(self.rule, **self.get_empty_kwargs())\n+        return type(self)(self.rule, **self.get_empty_kwargs())  # type: ignore\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n        return type(self)(self.rule, **self.get_empty_kwargs())\n\n",
        "target_code_with_indent": "\n        return type(self)(self.rule, **self.get_empty_kwargs())  # type: ignore\n\n"
      }
    ]
  },
  {
    "project": "pallets/werkzeug",
    "commit": "ef545f0d0bf28cbad02066b4cb7471bea50a93ee",
    "filename": "src/werkzeug/routing.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/routing.py",
    "file_hunks_size": 55,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/werkzeug/routing.py:1055:8 Incompatible attribute type [8]: Attribute `body` declared in class `_ast.Module` has type `List[_ast.stmt]` but is used as type `List[Union[Call, FunctionDef]]`.",
    "message": " Attribute `body` declared in class `_ast.Module` has type `List[_ast.stmt]` but is used as type `List[Union[Call, FunctionDef]]`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 1055,
    "warning_line": "        module.body = [func_ast]",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _prefix_names(src: str) -> Union[FunctionDef, Call]:\n    \"\"\"ast parse and prefix names with `.` to avoid collision with user vars\"\"\"\n",
        "source_code_len": 138,
        "target_code": "\ndef _prefix_names(src: str) -> Any:\n    \"\"\"ast parse and prefix names with `.` to avoid collision with user vars\"\"\"\n",
        "target_code_len": 117,
        "diff_format": "@@ -543,3 +534,3 @@\n \n-def _prefix_names(src: str) -> Union[FunctionDef, Call]:\n+def _prefix_names(src: str) -> Any:\n     \"\"\"ast parse and prefix names with `.` to avoid collision with user vars\"\"\"\n",
        "source_code_with_indent": "\n<DED><DED><DED><DED>def _prefix_names(src: str) -> Union[FunctionDef, Call]:\n    <IND>\"\"\"ast parse and prefix names with `.` to avoid collision with user vars\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED><DED><DED><DED>def _prefix_names(src: str) -> Any:\n    <IND>\"\"\"ast parse and prefix names with `.` to avoid collision with user vars\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pallets/werkzeug",
    "commit": "ef545f0d0bf28cbad02066b4cb7471bea50a93ee",
    "filename": "src/werkzeug/routing.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/routing.py",
    "file_hunks_size": 55,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "src/werkzeug/routing.py:1298:4 Inconsistent override [15]: `src.werkzeug.routing.NumberConverter.to_python` overrides method defined in `BaseConverter` inconsistently. Returned type `Union[float, int]` is not a subtype of the overridden return `str`.",
    "message": " `src.werkzeug.routing.NumberConverter.to_python` overrides method defined in `BaseConverter` inconsistently. Returned type `Union[float, int]` is not a subtype of the overridden return `str`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 1298,
    "warning_line": "    def to_python(self, value: str) -> Union[float, int]:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n    def to_python(self, value: str) -> Union[float, int]:\n        if self.fixed_digits and len(value) != self.fixed_digits:\n            raise ValidationError()\n        value = self.num_convert(value)\n        if (self.min is not None and value < self.min) or (\n",
        "source_code_len": 261,
        "target_code": "\n    def to_python(self, value: Any) -> Union[int, float]:  # type: ignore\n        if self.fixed_digits and len(value) != self.fixed_digits:\n            raise ValidationError()\n        value = self.num_convert(value)  # type: ignore\n        if (self.min is not None and value < self.min) or (\n",
        "target_code_len": 293,
        "diff_format": "@@ -1297,6 +1310,6 @@\n \n-    def to_python(self, value: str) -> Union[float, int]:\n+    def to_python(self, value: Any) -> Union[int, float]:  # type: ignore\n         if self.fixed_digits and len(value) != self.fixed_digits:\n             raise ValidationError()\n-        value = self.num_convert(value)\n+        value = self.num_convert(value)  # type: ignore\n         if (self.min is not None and value < self.min) or (\n",
        "source_code_with_indent": "\n    <DED>def to_python(self, value: str) -> Union[float, int]:\n        <IND>if self.fixed_digits and len(value) != self.fixed_digits:\n            <IND>raise ValidationError()\n        <DED>value = self.num_convert(value)\n        if (self.min is not None and value < self.min) or (\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def to_python(self, value: Any) -> Union[int, float]:  # type: ignore\n        <IND>if self.fixed_digits and len(value) != self.fixed_digits:\n            <IND>raise ValidationError()\n        <DED>value = self.num_convert(value)  # type: ignore\n        if (self.min is not None and value < self.min) or (\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pallets/werkzeug",
    "commit": "ef545f0d0bf28cbad02066b4cb7471bea50a93ee",
    "filename": "src/werkzeug/routing.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/routing.py",
    "file_hunks_size": 55,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "src/werkzeug/routing.py:1308:4 Inconsistent override [14]: `src.werkzeug.routing.NumberConverter.to_url` overrides method defined in `BaseConverter` inconsistently. Parameter of type `Union[float, int]` is not a supertype of the overridden parameter `Union[bytes, int, str]`.",
    "message": " `src.werkzeug.routing.NumberConverter.to_url` overrides method defined in `BaseConverter` inconsistently. Parameter of type `Union[float, int]` is not a supertype of the overridden parameter `Union[bytes, int, str]`.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 1308,
    "warning_line": "    def to_url(self, value: Union[float, int]) -> str:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n    def to_url(self, value: Union[float, int]) -> str:\n        value = self.num_convert(value)\n        if self.fixed_digits:\n",
        "source_code_len": 126,
        "target_code": "\n    def to_url(self, value: Any) -> str:\n        value = self.num_convert(value)  # type: ignore\n        if self.fixed_digits:\n",
        "target_code_len": 128,
        "diff_format": "@@ -1307,4 +1320,4 @@\n \n-    def to_url(self, value: Union[float, int]) -> str:\n-        value = self.num_convert(value)\n+    def to_url(self, value: Any) -> str:\n+        value = self.num_convert(value)  # type: ignore\n         if self.fixed_digits:\n",
        "source_code_with_indent": "\n    <DED>def to_url(self, value: Union[float, int]) -> str:\n        <IND>value = self.num_convert(value)\n        if self.fixed_digits:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def to_url(self, value: Any) -> str:\n        <IND>value = self.num_convert(value)  # type: ignore\n        if self.fixed_digits:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pallets/werkzeug",
    "commit": "ef545f0d0bf28cbad02066b4cb7471bea50a93ee",
    "filename": "src/werkzeug/routing.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/routing.py",
    "file_hunks_size": 55,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "src/werkzeug/routing.py:1388:4 Inconsistent override [15]: `src.werkzeug.routing.UUIDConverter.to_python` overrides method defined in `BaseConverter` inconsistently. Returned type `UUID` is not a subtype of the overridden return `str`.",
    "message": " `src.werkzeug.routing.UUIDConverter.to_python` overrides method defined in `BaseConverter` inconsistently. Returned type `UUID` is not a subtype of the overridden return `str`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 1388,
    "warning_line": "    def to_python(self, value: str) -> UUID:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n    def to_python(self, value: str) -> UUID:\n        return uuid.UUID(value)\n\n    def to_url(self, value: UUID) -> str:\n        return str(value)\n",
        "source_code_len": 147,
        "target_code": "\n    def to_python(self, value: str) -> \"UUID\":  # type: ignore\n        return uuid.UUID(value)\n\n    def to_url(self, value: \"UUID\") -> str:  # type: ignore\n        return str(value)\n",
        "target_code_len": 183,
        "diff_format": "@@ -1387,6 +1400,6 @@\n \n-    def to_python(self, value: str) -> UUID:\n+    def to_python(self, value: str) -> \"UUID\":  # type: ignore\n         return uuid.UUID(value)\n \n-    def to_url(self, value: UUID) -> str:\n+    def to_url(self, value: \"UUID\") -> str:  # type: ignore\n         return str(value)\n",
        "source_code_with_indent": "\n    def to_python(self, value: str) -> UUID:\n        <IND>return uuid.UUID(value)\n\n    <DED>def to_url(self, value: UUID) -> str:\n        <IND>return str(value)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    def to_python(self, value: str) -> \"UUID\":  # type: ignore\n        <IND>return uuid.UUID(value)\n\n    <DED>def to_url(self, value: \"UUID\") -> str:  # type: ignore\n        <IND>return str(value)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pallets/werkzeug",
    "commit": "ef545f0d0bf28cbad02066b4cb7471bea50a93ee",
    "filename": "src/werkzeug/routing.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/routing.py",
    "file_hunks_size": 55,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "src/werkzeug/routing.py:1391:4 Inconsistent override [14]: `src.werkzeug.routing.UUIDConverter.to_url` overrides method defined in `BaseConverter` inconsistently. Parameter of type `UUID` is not a supertype of the overridden parameter `Union[bytes, int, str]`.",
    "message": " `src.werkzeug.routing.UUIDConverter.to_url` overrides method defined in `BaseConverter` inconsistently. Parameter of type `UUID` is not a supertype of the overridden parameter `Union[bytes, int, str]`.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 1391,
    "warning_line": "    def to_url(self, value: UUID) -> str:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n    def to_python(self, value: str) -> UUID:\n        return uuid.UUID(value)\n\n    def to_url(self, value: UUID) -> str:\n        return str(value)\n",
        "source_code_len": 147,
        "target_code": "\n    def to_python(self, value: str) -> \"UUID\":  # type: ignore\n        return uuid.UUID(value)\n\n    def to_url(self, value: \"UUID\") -> str:  # type: ignore\n        return str(value)\n",
        "target_code_len": 183,
        "diff_format": "@@ -1387,6 +1400,6 @@\n \n-    def to_python(self, value: str) -> UUID:\n+    def to_python(self, value: str) -> \"UUID\":  # type: ignore\n         return uuid.UUID(value)\n \n-    def to_url(self, value: UUID) -> str:\n+    def to_url(self, value: \"UUID\") -> str:  # type: ignore\n         return str(value)\n",
        "source_code_with_indent": "\n    def to_python(self, value: str) -> UUID:\n        <IND>return uuid.UUID(value)\n\n    <DED>def to_url(self, value: UUID) -> str:\n        <IND>return str(value)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    def to_python(self, value: str) -> \"UUID\":  # type: ignore\n        <IND>return uuid.UUID(value)\n\n    <DED>def to_url(self, value: \"UUID\") -> str:  # type: ignore\n        <IND>return str(value)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pallets/werkzeug",
    "commit": "ef545f0d0bf28cbad02066b4cb7471bea50a93ee",
    "filename": "src/werkzeug/routing.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/routing.py",
    "file_hunks_size": 55,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "src/werkzeug/routing.py:1591:12 Incompatible variable type [9]: server_name is declared to have type `str` but is used as type `bytes`.",
    "message": " server_name is declared to have type `str` but is used as type `bytes`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 1591,
    "warning_line": "            server_name = _encode_idna(server_name)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        try:\n            server_name = _encode_idna(server_name)\n        except UnicodeError:\n",
        "source_code_len": 94,
        "target_code": "        try:\n            server_name = _encode_idna(server_name)  # type: ignore\n        except UnicodeError:\n",
        "target_code_len": 110,
        "diff_format": "@@ -1590,3 +1603,3 @@\n         try:\n-            server_name = _encode_idna(server_name)\n+            server_name = _encode_idna(server_name)  # type: ignore\n         except UnicodeError:\n",
        "source_code_with_indent": "        <DED>try:\n            <IND>server_name = _encode_idna(server_name)\n        <DED>except UnicodeError:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>try:\n            <IND>server_name = _encode_idna(server_name)  # type: ignore\n        <DED>except UnicodeError:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pallets/werkzeug",
    "commit": "ef545f0d0bf28cbad02066b4cb7471bea50a93ee",
    "filename": "src/werkzeug/routing.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/routing.py",
    "file_hunks_size": 55,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/werkzeug/routing.py:1596:12 Incompatible parameter type [6]: Expected `bytes` for 2nd positional only parameter to call `MapAdapter.__init__` but got `str`.",
    "message": " Expected `bytes` for 2nd positional only parameter to call `MapAdapter.__init__` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1596,
    "warning_line": "            server_name,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        map: Map,\n        server_name: bytes,\n        script_name: str,\n",
        "source_code_len": 72,
        "target_code": "        map: Map,\n        server_name: Union[str, bytes],\n        script_name: str,\n",
        "target_code_len": 84,
        "diff_format": "@@ -1735,3 +1748,3 @@\n         map: Map,\n-        server_name: bytes,\n+        server_name: Union[str, bytes],\n         script_name: str,\n",
        "source_code_with_indent": "        map: Map,\n        server_name: bytes,\n        script_name: str,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        map: Map,\n        server_name: Union[str, bytes],\n        script_name: str,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pallets/werkzeug",
    "commit": "ef545f0d0bf28cbad02066b4cb7471bea50a93ee",
    "filename": "src/werkzeug/routing.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/routing.py",
    "file_hunks_size": 55,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/werkzeug/routing.py:1746:8 Incompatible variable type [9]: script_name is declared to have type `str` but is used as type `Union[None, bytes, str]`.",
    "message": " script_name is declared to have type `str` but is used as type `Union[None, bytes, str]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 1746,
    "warning_line": "        script_name = _to_str(script_name)"
  },
  {
    "project": "pallets/werkzeug",
    "commit": "ef545f0d0bf28cbad02066b4cb7471bea50a93ee",
    "filename": "src/werkzeug/routing.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/routing.py",
    "file_hunks_size": 55,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/werkzeug/routing.py:1916:12 Incompatible variable type [9]: path_info is declared to have type `Optional[str]` but is used as type `Union[None, bytes, str]`.",
    "message": " path_info is declared to have type `Optional[str]` but is used as type `Union[None, bytes, str]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 1916,
    "warning_line": "            path_info = _to_str(path_info, self.map.charset)"
  },
  {
    "project": "pallets/werkzeug",
    "commit": "ef545f0d0bf28cbad02066b4cb7471bea50a93ee",
    "filename": "src/werkzeug/routing.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/routing.py",
    "file_hunks_size": 55,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "src/werkzeug/routing.py:1946:71 Incompatible parameter type [6]: Expected `Optional[Dict[str, str]]` for 5th positional only parameter to call `MapAdapter.make_alias_redirect_url` but got `Union[None, Dict[str, str], str]`.",
    "message": " Expected `Optional[Dict[str, str]]` for 5th positional only parameter to call `MapAdapter.make_alias_redirect_url` but got `Union[None, Dict[str, str], str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1946,
    "warning_line": "                        path, rule.endpoint, e.matched_values, method, query_args",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "                    self.make_alias_redirect_url(\n                        path, rule.endpoint, e.matched_values, method, query_args\n                    )\n",
        "source_code_len": 154,
        "target_code": "                    self.make_alias_redirect_url(\n                        path,\n                        rule.endpoint,\n                        e.matched_values,\n                        method,\n                        query_args,  # type: ignore\n                    )\n",
        "target_code_len": 267,
        "diff_format": "@@ -1945,3 +1958,7 @@\n                     self.make_alias_redirect_url(\n-                        path, rule.endpoint, e.matched_values, method, query_args\n+                        path,\n+                        rule.endpoint,\n+                        e.matched_values,\n+                        method,\n+                        query_args,  # type: ignore\n                     )\n",
        "source_code_with_indent": "                    self.make_alias_redirect_url(\n                        path, rule.endpoint, e.matched_values, method, query_args\n                    )\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                    self.make_alias_redirect_url(\n                        path,\n                        rule.endpoint,\n                        e.matched_values,\n                        method,\n                        query_args,  # type: ignore\n                    )\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pallets/werkzeug",
    "commit": "ef545f0d0bf28cbad02066b4cb7471bea50a93ee",
    "filename": "src/werkzeug/routing.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/routing.py",
    "file_hunks_size": 55,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "src/werkzeug/routing.py:1960:75 Incompatible parameter type [6]: Expected `Optional[str]` for 4th positional only parameter to call `MapAdapter.get_default_redirect` but got `Union[None, Dict[str, str], str]`.",
    "message": " Expected `Optional[str]` for 4th positional only parameter to call `MapAdapter.get_default_redirect` but got `Union[None, Dict[str, str], str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1960,
    "warning_line": "                redirect_url = self.get_default_redirect(rule, method, rv, query_args)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "            if self.map.redirect_defaults:\n                redirect_url = self.get_default_redirect(rule, method, rv, query_args)\n                if redirect_url is not None:\n",
        "source_code_len": 175,
        "target_code": "            if self.map.redirect_defaults:\n                redirect_url = self.get_default_redirect(\n                    rule, method, rv, query_args  # type: ignore\n                )\n                if redirect_url is not None:\n",
        "target_code_len": 229,
        "diff_format": "@@ -1959,3 +1976,5 @@\n             if self.map.redirect_defaults:\n-                redirect_url = self.get_default_redirect(rule, method, rv, query_args)\n+                redirect_url = self.get_default_redirect(\n+                    rule, method, rv, query_args  # type: ignore\n+                )\n                 if redirect_url is not None:\n",
        "source_code_with_indent": "            <DED>if self.map.redirect_defaults:\n                <IND>redirect_url = self.get_default_redirect(rule, method, rv, query_args)\n                if redirect_url is not None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <DED>if self.map.redirect_defaults:\n                <IND>redirect_url = self.get_default_redirect(\n                    rule, method, rv, query_args  # type: ignore\n                )\n                if redirect_url is not None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pallets/werkzeug",
    "commit": "ef545f0d0bf28cbad02066b4cb7471bea50a93ee",
    "filename": "src/werkzeug/routing.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/routing.py",
    "file_hunks_size": 55,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/werkzeug/routing.py:2045:12 Incompatible return type [7]: Expected `str` but got `Union[None, bytes, str]`.",
    "message": " Expected `str` but got `Union[None, bytes, str]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 2045,
    "warning_line": "            return _to_str(domain_part, \"ascii\")"
  },
  {
    "project": "pallets/werkzeug",
    "commit": "ef545f0d0bf28cbad02066b4cb7471bea50a93ee",
    "filename": "src/werkzeug/test.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/test.py",
    "file_hunks_size": 34,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/werkzeug/test.py:125:4 Incompatible return type [7]: Expected `Union[Tuple[BufferedRandom, int, str], Tuple[BytesIO, int, str]]` but got `Tuple[Union[BytesIO, int], int, str]`.",
    "message": " Expected `Union[Tuple[BufferedRandom, int, str], Tuple[BytesIO, int, str]]` but got `Tuple[Union[BytesIO, int], int, str]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 125,
    "warning_line": "    return _closure[0], length, boundary"
  },
  {
    "project": "pallets/werkzeug",
    "commit": "ef545f0d0bf28cbad02066b4cb7471bea50a93ee",
    "filename": "src/werkzeug/test.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/test.py",
    "file_hunks_size": 34,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "src/werkzeug/test.py:199:12 Incompatible parameter type [6]: Expected `http.client.HTTPResponse` for 1st positional only parameter to call `CookieJar.extract_cookies` but got `_TestCookieResponse`.",
    "message": " Expected `http.client.HTTPResponse` for 1st positional only parameter to call `CookieJar.extract_cookies` but got `_TestCookieResponse`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 199,
    "warning_line": "            _TestCookieResponse(headers), _UrllibRequest(get_current_url(environ))",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        self.extract_cookies(\n            _TestCookieResponse(headers), _UrllibRequest(get_current_url(environ))\n        )\n",
        "source_code_len": 123,
        "target_code": "        self.extract_cookies(\n            _TestCookieResponse(headers),  # type: ignore\n            _UrllibRequest(get_current_url(environ)),\n        )\n",
        "target_code_len": 152,
        "diff_format": "@@ -198,3 +213,4 @@\n         self.extract_cookies(\n-            _TestCookieResponse(headers), _UrllibRequest(get_current_url(environ))\n+            _TestCookieResponse(headers),  # type: ignore\n+            _UrllibRequest(get_current_url(environ)),\n         )\n",
        "source_code_with_indent": "        self.extract_cookies(\n            _TestCookieResponse(headers), _UrllibRequest(get_current_url(environ))\n        )\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self.extract_cookies(\n            _TestCookieResponse(headers),  # type: ignore\n            _UrllibRequest(get_current_url(environ)),\n        )\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pallets/werkzeug",
    "commit": "ef545f0d0bf28cbad02066b4cb7471bea50a93ee",
    "filename": "src/werkzeug/test.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/test.py",
    "file_hunks_size": 34,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/werkzeug/test.py:421:54 Incompatible parameter type [6]: Expected `Union[Tuple[BytesIO], Tuple[BytesIO, str], BytesIO]` for 2nd positional only parameter to call `EnvironBuilder._add_file_from_data` but got `Union[Tuple[BytesIO], Tuple[BytesIO, str], BytesIO, int, str]`.",
    "message": " Expected `Union[Tuple[BytesIO], Tuple[BytesIO, str], BytesIO]` for 2nd positional only parameter to call `EnvironBuilder._add_file_from_data` but got `Union[Tuple[BytesIO], Tuple[BytesIO, str], BytesIO, int, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 421,
    "warning_line": "                        self._add_file_from_data(key, value)"
  },
  {
    "project": "pallets/werkzeug",
    "commit": "ef545f0d0bf28cbad02066b4cb7471bea50a93ee",
    "filename": "src/werkzeug/test.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/test.py",
    "file_hunks_size": 34,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "src/werkzeug/test.py:901:8 Incompatible return type [7]: Expected `Union[Tuple[chain[typing.Any], str, Headers], Tuple[ClosingIterator, str, Headers]]` but got `Union[Tuple[List[typing.Any], str, Headers], Tuple[List[bytes], str, Headers], Tuple[List[str], str, Headers], Tuple[chain[typing.Any], str, Headers], Tuple[ClosingIterator, str, Headers]]`.",
    "message": " Expected `Union[Tuple[chain[typing.Any], str, Headers], Tuple[ClosingIterator, str, Headers]]` but got `Union[Tuple[List[typing.Any], str, Headers], Tuple[List[bytes], str, Headers], Tuple[List[str], str, Headers], Tuple[chain[typing.Any], str, Headers], Tuple[ClosingIterator, str, Headers]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 901,
    "warning_line": "        return rv",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "            self.cookie_jar.extract_wsgi(environ, rv[2])\n        return rv\n\n",
        "source_code_len": 76,
        "target_code": "            self.cookie_jar.extract_wsgi(environ, rv[2])\n        return rv  # type: ignore\n\n",
        "target_code_len": 92,
        "diff_format": "@@ -900,3 +900,3 @@\n             self.cookie_jar.extract_wsgi(environ, rv[2])\n-        return rv\n+        return rv  # type: ignore\n \n",
        "source_code_with_indent": "            <IND>self.cookie_jar.extract_wsgi(environ, rv[2])\n        <DED>return rv\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <IND>self.cookie_jar.extract_wsgi(environ, rv[2])\n        <DED>return rv  # type: ignore\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pallets/werkzeug",
    "commit": "ef545f0d0bf28cbad02066b4cb7471bea50a93ee",
    "filename": "src/werkzeug/wrappers/auth.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/wrappers/auth.py",
    "file_hunks_size": 5,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/werkzeug/wrappers/auth.py:22:8 Incompatible return type [7]: Expected `Authorization` but got `typing.Optional[src.werkzeug.datastructures.Authorization]`.",
    "message": " Expected `Authorization` but got `typing.Optional[src.werkzeug.datastructures.Authorization]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 22,
    "warning_line": "        return parse_authorization_header(header)"
  },
  {
    "project": "pallets/werkzeug",
    "commit": "ef545f0d0bf28cbad02066b4cb7471bea50a93ee",
    "filename": "src/werkzeug/wrappers/auth.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/wrappers/auth.py",
    "file_hunks_size": 5,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/werkzeug/wrappers/auth.py:39:8 Incompatible return type [7]: Expected `WWWAuthenticate` but got `src.werkzeug.datastructures.WWWAuthenticate`.",
    "message": " Expected `WWWAuthenticate` but got `src.werkzeug.datastructures.WWWAuthenticate`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 39,
    "warning_line": "        return parse_www_authenticate_header(header, on_update)"
  },
  {
    "project": "pallets/werkzeug",
    "commit": "ef545f0d0bf28cbad02066b4cb7471bea50a93ee",
    "filename": "src/werkzeug/wrappers/base_request.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/wrappers/base_request.py",
    "file_hunks_size": 18,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/werkzeug/wrappers/base_request.py:306:12 Incompatible parameter type [6]: Expected `Optional[werkzeug.formparser._StreamFactory]` for 1st positional only parameter to call `FormDataParser.__init__` but got `BoundMethod[typing.Callable(BaseRequest._get_file_stream)[[Named(self, BaseRequest), Named(total_content_length, int), Named(content_type, Optional[str]), Named(filename, Optional[str], default), Named(content_length, Optional[int], default)], Union[SpooledTemporaryFile[typing.Any], BytesIO]], BaseRequest]`.",
    "message": " Expected `Optional[werkzeug.formparser._StreamFactory]` for 1st positional only parameter to call `FormDataParser.__init__` but got `BoundMethod[typing.Callable(BaseRequest._get_file_stream)[[Named(self, BaseRequest), Named(total_content_length, int), Named(content_type, Optional[str]), Named(filename, Optional[str], default), Named(content_length, Optional[int], default)], Union[SpooledTemporaryFile[typing.Any], BytesIO]], BaseRequest]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 306,
    "warning_line": "            self._get_file_stream,"
  },
  {
    "project": "pallets/werkzeug",
    "commit": "ef545f0d0bf28cbad02066b4cb7471bea50a93ee",
    "filename": "src/werkzeug/wrappers/base_request.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/wrappers/base_request.py",
    "file_hunks_size": 18,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/werkzeug/wrappers/base_request.py:335:16 Incompatible parameter type [6]: Expected `typing.IO[bytes]` for 1st positional only parameter to call `FormDataParser.parse` but got `Union[BytesIO, LimitedStream]`.",
    "message": " Expected `typing.IO[bytes]` for 1st positional only parameter to call `FormDataParser.parse` but got `Union[BytesIO, LimitedStream]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 335,
    "warning_line": "                self._get_stream_for_parsing(), mimetype, content_length, options"
  },
  {
    "project": "pallets/werkzeug",
    "commit": "ef545f0d0bf28cbad02066b4cb7471bea50a93ee",
    "filename": "src/werkzeug/wrappers/base_request.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/wrappers/base_request.py",
    "file_hunks_size": 18,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/werkzeug/wrappers/base_request.py:335:48 Incompatible parameter type [6]: Expected `str` for 2nd positional only parameter to call `FormDataParser.parse` but got `Union[Dict[typing.Any, typing.Any], Dict[str, Optional[str]], Dict[str, str], str]`.",
    "message": " Expected `str` for 2nd positional only parameter to call `FormDataParser.parse` but got `Union[Dict[typing.Any, typing.Any], Dict[str, Optional[str]], Dict[str, str], str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 335,
    "warning_line": "                self._get_stream_for_parsing(), mimetype, content_length, options"
  },
  {
    "project": "pallets/werkzeug",
    "commit": "ef545f0d0bf28cbad02066b4cb7471bea50a93ee",
    "filename": "src/werkzeug/wrappers/base_request.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/wrappers/base_request.py",
    "file_hunks_size": 18,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/werkzeug/wrappers/base_request.py:335:74 Incompatible parameter type [6]: Expected `Optional[typing.Mapping[str, str]]` for 4th positional only parameter to call `FormDataParser.parse` but got `Union[Dict[typing.Any, typing.Any], Dict[str, Optional[str]], Dict[str, str], str]`.",
    "message": " Expected `Optional[typing.Mapping[str, str]]` for 4th positional only parameter to call `FormDataParser.parse` but got `Union[Dict[typing.Any, typing.Any], Dict[str, Optional[str]], Dict[str, str], str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 335,
    "warning_line": "                self._get_stream_for_parsing(), mimetype, content_length, options"
  },
  {
    "project": "pallets/werkzeug",
    "commit": "ef545f0d0bf28cbad02066b4cb7471bea50a93ee",
    "filename": "src/werkzeug/wrappers/base_response.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/wrappers/base_response.py",
    "file_hunks_size": 18,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/werkzeug/wrappers/base_response.py:47:4 Incompatible return type [7]: Expected `Tuple[chain[typing.Any], str, Headers]` but got `Union[Tuple[List[typing.Any], str, Headers], Tuple[List[bytes], str, Headers], Tuple[List[str], str, Headers], Tuple[chain[typing.Any], str, Headers], Tuple[ClosingIterator, str, Headers]]`.",
    "message": " Expected `Tuple[chain[typing.Any], str, Headers]` but got `Union[Tuple[List[typing.Any], str, Headers], Tuple[List[bytes], str, Headers], Tuple[List[str], str, Headers], Tuple[chain[typing.Any], str, Headers], Tuple[ClosingIterator, str, Headers]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 47,
    "warning_line": "    return _run_wsgi_app(*args)"
  },
  {
    "project": "pallets/werkzeug",
    "commit": "ef545f0d0bf28cbad02066b4cb7471bea50a93ee",
    "filename": "src/werkzeug/wrappers/base_response.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/wrappers/base_response.py",
    "file_hunks_size": 18,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/werkzeug/wrappers/base_response.py:352:16 Incompatible return type [7]: Expected `Tuple[str, int]` but got `Tuple[Union[None, bytes, str], int]`.",
    "message": " Expected `Tuple[str, int]` but got `Tuple[Union[None, bytes, str], int]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 352,
    "warning_line": "                return status, int(split_status[0])"
  },
  {
    "project": "pallets/werkzeug",
    "commit": "ef545f0d0bf28cbad02066b4cb7471bea50a93ee",
    "filename": "src/werkzeug/wrappers/base_response.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/wrappers/base_response.py",
    "file_hunks_size": 18,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/werkzeug/wrappers/base_response.py:667:34 Incompatible parameter type [6]: Expected `Union[List[Tuple[str, str]], Headers]` for 1st positional only parameter to call `remove_entity_headers` but got `Headers`.",
    "message": " Expected `Union[List[Tuple[str, str]], Headers]` for 1st positional only parameter to call `remove_entity_headers` but got `Headers`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 667,
    "warning_line": "            remove_entity_headers(headers)"
  },
  {
    "project": "pallets/werkzeug",
    "commit": "ef545f0d0bf28cbad02066b4cb7471bea50a93ee",
    "filename": "src/werkzeug/wrappers/etag.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/wrappers/etag.py",
    "file_hunks_size": 10,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/werkzeug/wrappers/etag.py:116:8 Incompatible return type [7]: Expected `ResponseCacheControl` but got `Union[RequestCacheControl, ResponseCacheControl]`.",
    "message": " Expected `ResponseCacheControl` but got `Union[RequestCacheControl, ResponseCacheControl]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 116,
    "warning_line": "        return parse_cache_control_header("
  },
  {
    "project": "pallets/werkzeug",
    "commit": "ef545f0d0bf28cbad02066b4cb7471bea50a93ee",
    "filename": "src/werkzeug/wrappers/etag.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/wrappers/etag.py",
    "file_hunks_size": 10,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/werkzeug/wrappers/etag.py:117:58 Incompatible parameter type [6]: Expected `Union[None, typing.Type[RequestCacheControl], typing.Type[ResponseCacheControl]]` for 3rd positional only parameter to call `parse_cache_control_header` but got `typing.Type[ResponseCacheControl]`.",
    "message": " Expected `Union[None, typing.Type[RequestCacheControl], typing.Type[ResponseCacheControl]]` for 3rd positional only parameter to call `parse_cache_control_header` but got `typing.Type[ResponseCacheControl]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 117,
    "warning_line": "            self.headers.get(\"cache-control\"), on_update, ResponseCacheControl"
  },
  {
    "project": "pallets/werkzeug",
    "commit": "ef545f0d0bf28cbad02066b4cb7471bea50a93ee",
    "filename": "src/werkzeug/wrappers/etag.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/wrappers/etag.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "src/werkzeug/wrappers/etag.py:239:12 Incompatible variable type [9]: accept_ranges is declared to have type `bool` but is used as type `str`.",
    "message": " accept_ranges is declared to have type `bool` but is used as type `str`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 239,
    "warning_line": "            accept_ranges = _clean_accept_ranges(accept_ranges)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "                self.headers[\"Date\"] = http_date()\n            accept_ranges = _clean_accept_ranges(accept_ranges)\n            is206 = self._process_range_request(environ, complete_length, accept_ranges)\n",
        "source_code_len": 204,
        "target_code": "                self.headers[\"Date\"] = http_date()\n            accept_ranges = _clean_accept_ranges(accept_ranges)  # type: ignore\n            is206 = self._process_range_request(environ, complete_length, accept_ranges)\n",
        "target_code_len": 220,
        "diff_format": "@@ -238,3 +238,3 @@\n                 self.headers[\"Date\"] = http_date()\n-            accept_ranges = _clean_accept_ranges(accept_ranges)\n+            accept_ranges = _clean_accept_ranges(accept_ranges)  # type: ignore\n             is206 = self._process_range_request(environ, complete_length, accept_ranges)\n",
        "source_code_with_indent": "                <IND>self.headers[\"Date\"] = http_date()\n            <DED>accept_ranges = _clean_accept_ranges(accept_ranges)\n            is206 = self._process_range_request(environ, complete_length, accept_ranges)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                <IND>self.headers[\"Date\"] = http_date()\n            <DED>accept_ranges = _clean_accept_ranges(accept_ranges)  # type: ignore\n            is206 = self._process_range_request(environ, complete_length, accept_ranges)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pallets/werkzeug",
    "commit": "ef545f0d0bf28cbad02066b4cb7471bea50a93ee",
    "filename": "src/werkzeug/wrappers/etag.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/wrappers/etag.py",
    "file_hunks_size": 10,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/werkzeug/wrappers/etag.py:240:74 Incompatible parameter type [6]: Expected `Optional[str]` for 3rd positional only parameter to call `ETagResponseMixin._process_range_request` but got `bool`.",
    "message": " Expected `Optional[str]` for 3rd positional only parameter to call `ETagResponseMixin._process_range_request` but got `bool`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 240,
    "warning_line": "            is206 = self._process_range_request(environ, complete_length, accept_ranges)"
  },
  {
    "project": "pallets/werkzeug",
    "commit": "ef545f0d0bf28cbad02066b4cb7471bea50a93ee",
    "filename": "src/werkzeug/wsgi.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/wsgi.py",
    "file_hunks_size": 40,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/werkzeug/wsgi.py:260:4 Incompatible return type [7]: Expected `Union[bytes, str]` but got `Union[None, bytes, str]`.",
    "message": " Expected `Union[bytes, str]` but got `Union[None, bytes, str]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 260,
    "warning_line": "    return _to_str(path, charset, errors, allow_none_charset=True)"
  },
  {
    "project": "pallets/werkzeug",
    "commit": "ef545f0d0bf28cbad02066b4cb7471bea50a93ee",
    "filename": "src/werkzeug/wsgi.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/wsgi.py",
    "file_hunks_size": 40,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/werkzeug/wsgi.py:279:4 Incompatible return type [7]: Expected `Union[bytes, str]` but got `Union[None, bytes, str]`.",
    "message": " Expected `Union[bytes, str]` but got `Union[None, bytes, str]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 279,
    "warning_line": "    return _to_str(path, charset, errors, allow_none_charset=True)"
  },
  {
    "project": "pallets/werkzeug",
    "commit": "ef545f0d0bf28cbad02066b4cb7471bea50a93ee",
    "filename": "src/werkzeug/wsgi.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/wsgi.py",
    "file_hunks_size": 40,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/werkzeug/wsgi.py:339:4 Incompatible return type [7]: Expected `Optional[str]` but got `Union[None, bytes, str]`.",
    "message": " Expected `Optional[str]` but got `Union[None, bytes, str]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 339,
    "warning_line": "    return _to_str(rv, charset, errors, allow_none_charset=True)"
  },
  {
    "project": "pallets/werkzeug",
    "commit": "ef545f0d0bf28cbad02066b4cb7471bea50a93ee",
    "filename": "src/werkzeug/wsgi.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/wsgi.py",
    "file_hunks_size": 40,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/werkzeug/wsgi.py:367:8 Incompatible return type [7]: Expected `Union[bytes, str]` but got implicit return value of `None`.",
    "message": " Expected `Union[bytes, str]` but got implicit return value of `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 367,
    "warning_line": "        return _to_str("
  },
  {
    "project": "pallets/werkzeug",
    "commit": "ef545f0d0bf28cbad02066b4cb7471bea50a93ee",
    "filename": "src/werkzeug/wsgi.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/wsgi.py",
    "file_hunks_size": 40,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/werkzeug/wsgi.py:367:8 Incompatible return type [7]: Expected `Union[bytes, str]` but got `Union[None, bytes, str]`.",
    "message": " Expected `Union[bytes, str]` but got `Union[None, bytes, str]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 367,
    "warning_line": "        return _to_str("
  },
  {
    "project": "pallets/werkzeug",
    "commit": "ef545f0d0bf28cbad02066b4cb7471bea50a93ee",
    "filename": "src/werkzeug/wsgi.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/wsgi.py",
    "file_hunks_size": 40,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/werkzeug/wsgi.py:500:12 Incompatible variable type [9]: callbacks is declared to have type `Optional[typing.Callable[..., typing.Any]]` but is used as type `List[Variable[_T]]`.",
    "message": " callbacks is declared to have type `Optional[typing.Callable[..., typing.Any]]` but is used as type `List[Variable[_T]]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 500,
    "warning_line": "            callbacks = list(callbacks)"
  },
  {
    "project": "pallets/werkzeug",
    "commit": "ef545f0d0bf28cbad02066b4cb7471bea50a93ee",
    "filename": "src/werkzeug/wsgi.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/wsgi.py",
    "file_hunks_size": 40,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/werkzeug/wsgi.py:500:29 Incompatible parameter type [6]: Expected `Iterable[Variable[_T]]` for 1st positional only parameter to call `list.__init__` but got `typing.Callable[..., typing.Any]`.",
    "message": " Expected `Iterable[Variable[_T]]` for 1st positional only parameter to call `list.__init__` but got `typing.Callable[..., typing.Any]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 500,
    "warning_line": "            callbacks = list(callbacks)"
  },
  {
    "project": "pallets/werkzeug",
    "commit": "ef545f0d0bf28cbad02066b4cb7471bea50a93ee",
    "filename": "src/werkzeug/wsgi.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/wsgi.py",
    "file_hunks_size": 40,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/werkzeug/wsgi.py:504:8 Incompatible attribute type [8]: Attribute `_callbacks` declared in class `ClosingIterator` has type `Optional[typing.Callable[..., typing.Any]]` but is used as type `Union[typing.Callable[..., typing.Any], List[typing.Callable[..., typing.Any]], List[typing.Any]]`.",
    "message": " Attribute `_callbacks` declared in class `ClosingIterator` has type `Optional[typing.Callable[..., typing.Any]]` but is used as type `Union[typing.Callable[..., typing.Any], List[typing.Callable[..., typing.Any]], List[typing.Any]]`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 504,
    "warning_line": "        self._callbacks = callbacks"
  },
  {
    "project": "pallets/werkzeug",
    "commit": "ef545f0d0bf28cbad02066b4cb7471bea50a93ee",
    "filename": "src/werkzeug/wsgi.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/wsgi.py",
    "file_hunks_size": 40,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "src/werkzeug/wsgi.py:651:8 Incompatible return type [7]: Expected `Union[Tuple[None, int], Tuple[bytes, int]]` but got `Tuple[Optional[bytes], typing.Any]`.",
    "message": " Expected `Union[Tuple[None, int], Tuple[bytes, int]]` but got `Tuple[Optional[bytes], typing.Any]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 651,
    "warning_line": "        return chunk, contextual_read_length",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n    def _first_iteration(self) -> Union[Tuple[None, int], Tuple[bytes, int]]:\n        chunk = None\n        if self.seekable:\n            self.iterable.seek(self.start_byte)\n            self.read_length = self.iterable.tell()\n            contextual_read_length = self.read_length\n",
        "source_code_len": 280,
        "target_code": "\n    def _first_iteration(self) -> Tuple[Optional[bytes], int]:\n        chunk = None\n        if self.seekable:\n            self.iterable.seek(self.start_byte)  # type: ignore\n            self.read_length = self.iterable.tell()  # type: ignore\n            contextual_read_length = self.read_length\n",
        "target_code_len": 297,
        "diff_format": "@@ -638,7 +649,7 @@\n \n-    def _first_iteration(self) -> Union[Tuple[None, int], Tuple[bytes, int]]:\n+    def _first_iteration(self) -> Tuple[Optional[bytes], int]:\n         chunk = None\n         if self.seekable:\n-            self.iterable.seek(self.start_byte)\n-            self.read_length = self.iterable.tell()\n+            self.iterable.seek(self.start_byte)  # type: ignore\n+            self.read_length = self.iterable.tell()  # type: ignore\n             contextual_read_length = self.read_length\n",
        "source_code_with_indent": "\n    <DED><DED>def _first_iteration(self) -> Union[Tuple[None, int], Tuple[bytes, int]]:\n        <IND>chunk = None\n        if self.seekable:\n            <IND>self.iterable.seek(self.start_byte)\n            self.read_length = self.iterable.tell()\n            contextual_read_length = self.read_length\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED><DED>def _first_iteration(self) -> Tuple[Optional[bytes], int]:\n        <IND>chunk = None\n        if self.seekable:\n            <IND>self.iterable.seek(self.start_byte)  # type: ignore\n            self.read_length = self.iterable.tell()  # type: ignore\n            contextual_read_length = self.read_length\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pallets/werkzeug",
    "commit": "ef545f0d0bf28cbad02066b4cb7471bea50a93ee",
    "filename": "src/werkzeug/wsgi.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/wsgi.py",
    "file_hunks_size": 40,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/werkzeug/wsgi.py:831:8 Incompatible variable type [9]: separator is declared to have type `str` but is used as type `Union[None, bytes, str]`.",
    "message": " separator is declared to have type `str` but is used as type `Union[None, bytes, str]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 831,
    "warning_line": "        separator = _to_str(separator)"
  },
  {
    "project": "pallets/werkzeug",
    "commit": "ef545f0d0bf28cbad02066b4cb7471bea50a93ee",
    "filename": "src/werkzeug/wsgi.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/wsgi.py",
    "file_hunks_size": 40,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "src/werkzeug/wsgi.py:835:8 Incompatible variable type [9]: separator is declared to have type `str` but is used as type `bytes`.",
    "message": " separator is declared to have type `str` but is used as type `bytes`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 835,
    "warning_line": "        separator = _to_bytes(separator)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        _split = re.compile(f\"({re.escape(separator)})\").split\n        _join = \"\".join\n    else:\n        separator = _to_bytes(separator)\n        _split = re.compile(b\"(\" + re.escape(separator) + b\")\").split\n        _join = b\"\".join\n\n    buffer = []\n    while 1:\n",
        "source_code_len": 263,
        "target_code": "        _split = re.compile(f\"({re.escape(separator)})\").split\n        _join: Callable = \"\".join\n    else:\n        separator = _to_bytes(separator)  # type: ignore\n        _split = re.compile(b\"(\" + re.escape(separator) + b\")\").split  # type: ignore\n        _join = b\"\".join\n\n    buffer: List[Any] = []\n    while 1:\n",
        "target_code_len": 316,
        "diff_format": "@@ -832,9 +843,9 @@\n         _split = re.compile(f\"({re.escape(separator)})\").split\n-        _join = \"\".join\n+        _join: Callable = \"\".join\n     else:\n-        separator = _to_bytes(separator)\n-        _split = re.compile(b\"(\" + re.escape(separator) + b\")\").split\n+        separator = _to_bytes(separator)  # type: ignore\n+        _split = re.compile(b\"(\" + re.escape(separator) + b\")\").split  # type: ignore\n         _join = b\"\".join\n \n-    buffer = []\n+    buffer: List[Any] = []\n     while 1:\n",
        "source_code_with_indent": "        _split = re.compile(f\"({re.escape(separator)})\").split\n        _join = \"\".join\n    <DED>else:\n        <IND>separator = _to_bytes(separator)\n        _split = re.compile(b\"(\" + re.escape(separator) + b\")\").split\n        _join = b\"\".join\n\n    <DED>buffer = []\n    while 1:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        _split = re.compile(f\"({re.escape(separator)})\").split\n        _join: Callable = \"\".join\n    <DED>else:\n        <IND>separator = _to_bytes(separator)  # type: ignore\n        _split = re.compile(b\"(\" + re.escape(separator) + b\")\").split  # type: ignore\n        _join = b\"\".join\n\n    <DED>buffer: List[Any] = []\n    while 1:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pallets/werkzeug",
    "commit": "ef545f0d0bf28cbad02066b4cb7471bea50a93ee",
    "filename": "src/werkzeug/wsgi.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/wsgi.py",
    "file_hunks_size": 40,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "src/werkzeug/wsgi.py:836:35 Unsupported operand [58]: `+` is not supported for operand types `bytes` and `str`.",
    "message": " `+` is not supported for operand types `bytes` and `str`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 836,
    "warning_line": "        _split = re.compile(b\"(\" + re.escape(separator) + b\")\").split",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        _split = re.compile(f\"({re.escape(separator)})\").split\n        _join = \"\".join\n    else:\n        separator = _to_bytes(separator)\n        _split = re.compile(b\"(\" + re.escape(separator) + b\")\").split\n        _join = b\"\".join\n\n    buffer = []\n    while 1:\n",
        "source_code_len": 263,
        "target_code": "        _split = re.compile(f\"({re.escape(separator)})\").split\n        _join: Callable = \"\".join\n    else:\n        separator = _to_bytes(separator)  # type: ignore\n        _split = re.compile(b\"(\" + re.escape(separator) + b\")\").split  # type: ignore\n        _join = b\"\".join\n\n    buffer: List[Any] = []\n    while 1:\n",
        "target_code_len": 316,
        "diff_format": "@@ -832,9 +843,9 @@\n         _split = re.compile(f\"({re.escape(separator)})\").split\n-        _join = \"\".join\n+        _join: Callable = \"\".join\n     else:\n-        separator = _to_bytes(separator)\n-        _split = re.compile(b\"(\" + re.escape(separator) + b\")\").split\n+        separator = _to_bytes(separator)  # type: ignore\n+        _split = re.compile(b\"(\" + re.escape(separator) + b\")\").split  # type: ignore\n         _join = b\"\".join\n \n-    buffer = []\n+    buffer: List[Any] = []\n     while 1:\n",
        "source_code_with_indent": "        _split = re.compile(f\"({re.escape(separator)})\").split\n        _join = \"\".join\n    <DED>else:\n        <IND>separator = _to_bytes(separator)\n        _split = re.compile(b\"(\" + re.escape(separator) + b\")\").split\n        _join = b\"\".join\n\n    <DED>buffer = []\n    while 1:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        _split = re.compile(f\"({re.escape(separator)})\").split\n        _join: Callable = \"\".join\n    <DED>else:\n        <IND>separator = _to_bytes(separator)  # type: ignore\n        _split = re.compile(b\"(\" + re.escape(separator) + b\")\").split  # type: ignore\n        _join = b\"\".join\n\n    <DED>buffer: List[Any] = []\n    while 1:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pallets/werkzeug",
    "commit": "ef545f0d0bf28cbad02066b4cb7471bea50a93ee",
    "filename": "src/werkzeug/wsgi.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/wsgi.py",
    "file_hunks_size": 40,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/werkzeug/wsgi.py:844:24 Incompatible parameter type [6]: Expected `bytes` for 1st positional only parameter to call `typing.Pattern.split` but got `Union[str, bytes, str]`.",
    "message": " Expected `bytes` for 1st positional only parameter to call `typing.Pattern.split` but got `Union[str, bytes, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 844,
    "warning_line": "        chunks = _split(new_data)"
  },
  {
    "project": "pallets/werkzeug",
    "commit": "ef545f0d0bf28cbad02066b4cb7471bea50a93ee",
    "filename": "src/werkzeug/wsgi.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/wsgi.py",
    "file_hunks_size": 40,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "src/werkzeug/wsgi.py:911:4 Inconsistent override [15]: `src.werkzeug.wsgi.LimitedStream.__iter__` overrides method defined in `io.IOBase` inconsistently. Returned type `LimitedStream` is not a subtype of the overridden return `Iterator[bytes]`.",
    "message": " `src.werkzeug.wsgi.LimitedStream.__iter__` overrides method defined in `io.IOBase` inconsistently. Returned type `LimitedStream` is not a subtype of the overridden return `Iterator[bytes]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 911,
    "warning_line": "    def __iter__(self) -> LimitedStream:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n    def __iter__(self) -> LimitedStream:\n        return self\n",
        "source_code_len": 62,
        "target_code": "\n    def __iter__(self) -> \"LimitedStream\":  # type: ignore\n        return self\n",
        "target_code_len": 80,
        "diff_format": "@@ -910,3 +919,3 @@\n \n-    def __iter__(self) -> LimitedStream:\n+    def __iter__(self) -> \"LimitedStream\":  # type: ignore\n         return self\n",
        "source_code_with_indent": "\n    <DED>def __iter__(self) -> LimitedStream:\n        <IND>return self\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def __iter__(self) -> \"LimitedStream\":  # type: ignore\n        <IND>return self\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pallets/werkzeug",
    "commit": "ef545f0d0bf28cbad02066b4cb7471bea50a93ee",
    "filename": "src/werkzeug/wsgi.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/wsgi.py",
    "file_hunks_size": 40,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "src/werkzeug/wsgi.py:972:4 Inconsistent override [15]: `src.werkzeug.wsgi.LimitedStream.readline` overrides method defined in `io.IOBase` inconsistently. Returned type `Union[bytes, str]` is not a subtype of the overridden return `bytes`.",
    "message": " `src.werkzeug.wsgi.LimitedStream.readline` overrides method defined in `io.IOBase` inconsistently. Returned type `Union[bytes, str]` is not a subtype of the overridden return `bytes`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 972,
    "warning_line": "    def readline(self, size: Optional[int] = None) -> Union[str, bytes]:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n    def readline(self, size: Optional[int] = None) -> Union[str, bytes]:\n        \"\"\"Reads one line from the stream.\"\"\"\n",
        "source_code_len": 120,
        "target_code": "\n    def readline(self, size: Optional[int] = None) -> BytesOrStr:  # type: ignore\n        \"\"\"Reads one line from the stream.\"\"\"\n",
        "target_code_len": 129,
        "diff_format": "@@ -971,3 +980,3 @@\n \n-    def readline(self, size: Optional[int] = None) -> Union[str, bytes]:\n+    def readline(self, size: Optional[int] = None) -> BytesOrStr:  # type: ignore\n         \"\"\"Reads one line from the stream.\"\"\"\n",
        "source_code_with_indent": "\n    <DED>def readline(self, size: Optional[int] = None) -> Union[str, bytes]:\n        <IND>\"\"\"Reads one line from the stream.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def readline(self, size: Optional[int] = None) -> BytesOrStr:  # type: ignore\n        <IND>\"\"\"Reads one line from the stream.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pallets/werkzeug",
    "commit": "ef545f0d0bf28cbad02066b4cb7471bea50a93ee",
    "filename": "src/werkzeug/wsgi.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/wsgi.py",
    "file_hunks_size": 40,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "src/werkzeug/wsgi.py:1018:4 Inconsistent override [15]: `src.werkzeug.wsgi.LimitedStream.__next__` overrides method defined in `io.IOBase` inconsistently. Returned type `str` is not a subtype of the overridden return `bytes`.",
    "message": " `src.werkzeug.wsgi.LimitedStream.__next__` overrides method defined in `io.IOBase` inconsistently. Returned type `str` is not a subtype of the overridden return `bytes`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 1018,
    "warning_line": "    def __next__(self) -> str:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n    def __next__(self) -> str:\n        line = self.readline()\n",
        "source_code_len": 63,
        "target_code": "\n    def __next__(self) -> str:  # type: ignore\n        line = self.readline()\n",
        "target_code_len": 79,
        "diff_format": "@@ -1017,3 +1026,3 @@\n \n-    def __next__(self) -> str:\n+    def __next__(self) -> str:  # type: ignore\n         line = self.readline()\n",
        "source_code_with_indent": "\n    <DED>def __next__(self) -> str:\n        <IND>line = self.readline()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def __next__(self) -> str:  # type: ignore\n        <IND>line = self.readline()\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pallets/werkzeug",
    "commit": "ef545f0d0bf28cbad02066b4cb7471bea50a93ee",
    "filename": "src/werkzeug/wsgi.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/wsgi.py",
    "file_hunks_size": 40,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "src/werkzeug/wsgi.py:1022:8 Incompatible return type [7]: Expected `str` but got `Union[bytes, str]`.",
    "message": " Expected `str` but got `Union[bytes, str]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 1022,
    "warning_line": "        return line",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n    def readline(self, size: Optional[int] = None) -> Union[str, bytes]:\n        \"\"\"Reads one line from the stream.\"\"\"\n",
        "source_code_len": 120,
        "target_code": "\n    def readline(self, size: Optional[int] = None) -> BytesOrStr:  # type: ignore\n        \"\"\"Reads one line from the stream.\"\"\"\n",
        "target_code_len": 129,
        "diff_format": "@@ -971,3 +980,3 @@\n \n-    def readline(self, size: Optional[int] = None) -> Union[str, bytes]:\n+    def readline(self, size: Optional[int] = None) -> BytesOrStr:  # type: ignore\n         \"\"\"Reads one line from the stream.\"\"\"\n",
        "source_code_with_indent": "\n    <DED>def readline(self, size: Optional[int] = None) -> Union[str, bytes]:\n        <IND>\"\"\"Reads one line from the stream.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def readline(self, size: Optional[int] = None) -> BytesOrStr:  # type: ignore\n        <IND>\"\"\"Reads one line from the stream.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]