[
  {
    "project": "Yelp/detect-secrets",
    "commit": "d2bb5d9d18c821c6c0bafdcc029988802ea602e1",
    "filename": "detect_secrets/filters/gibberish/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Yelp-detect-secrets/detect_secrets/filters/gibberish/__init__.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "detect_secrets/filters/gibberish/__init__.py:33:28 Unbound name [10]: Name `__path__` is used but not defined in the current scope.",
    "message": " Name `__path__` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 33,
    "warning_line": "        path = os.path.join(__path__[0], 'rfc.model')",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "    if not path:\n        path = os.path.join(__path__[0], 'rfc.model')\n\n",
        "source_code_len": 72,
        "target_code": "    if not path:\n        path = os.path.join(__path__[0], 'rfc.model')   # type: ignore  # mypy issue #1422\n\n",
        "target_code_len": 109,
        "diff_format": "@@ -32,3 +34,3 @@\n     if not path:\n-        path = os.path.join(__path__[0], 'rfc.model')\n+        path = os.path.join(__path__[0], 'rfc.model')   # type: ignore  # mypy issue #1422\n \n",
        "source_code_with_indent": "    if not path:\n        <IND>path = os.path.join(__path__[0], 'rfc.model')\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    if not path:\n        <IND>path = os.path.join(__path__[0], 'rfc.model')   # type: ignore  # mypy issue #1422\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Yelp/detect-secrets",
    "commit": "d2bb5d9d18c821c6c0bafdcc029988802ea602e1",
    "filename": "detect_secrets/filters/gibberish/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Yelp-detect-secrets/detect_secrets/filters/gibberish/__init__.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "detect_secrets/filters/gibberish/__init__.py:49:26 Incompatible parameter type [6]: Expected `float` for 2nd positional only parameter to call `dict.__setitem__` but got `str`.",
    "message": " Expected `float` for 2nd positional only parameter to call `dict.__setitem__` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 49,
    "warning_line": "        config['model'] = model_path",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import Any\nfrom typing import Optional\n\n",
        "source_code_len": 52,
        "target_code": "from typing import Any\nfrom typing import Dict\nfrom typing import Optional\nfrom typing import Union\n\n",
        "target_code_len": 101,
        "diff_format": "@@ -4,3 +4,5 @@\n from typing import Any\n+from typing import Dict\n from typing import Optional\n+from typing import Union\n \n",
        "source_code_with_indent": "from typing import Any\nfrom typing import Optional\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Any\nfrom typing import Dict\nfrom typing import Optional\nfrom typing import Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    config = {\n        'limit': limit,\n",
        "source_code_len": 40,
        "target_code": "\n    config: Dict[str, Union[float, str]] = {\n        'limit': limit,\n",
        "target_code_len": 70,
        "diff_format": "@@ -44,3 +46,3 @@\n \n-    config = {\n+    config: Dict[str, Union[float, str]] = {\n         'limit': limit,\n",
        "source_code_with_indent": "\n    <DED><DED>config = {\n        'limit': limit,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED><DED>config: Dict[str, Union[float, str]] = {\n        'limit': limit,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Yelp/detect-secrets",
    "commit": "d2bb5d9d18c821c6c0bafdcc029988802ea602e1",
    "filename": "detect_secrets/filters/gibberish/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Yelp-detect-secrets/detect_secrets/filters/gibberish/__init__.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "detect_secrets/filters/gibberish/__init__.py:50:30 Incompatible parameter type [6]: Expected `float` for 2nd positional only parameter to call `dict.__setitem__` but got `str`.",
    "message": " Expected `float` for 2nd positional only parameter to call `dict.__setitem__` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 50,
    "warning_line": "        config['file_hash'] = compute_file_hash(model_path)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import Any\nfrom typing import Optional\n\n",
        "source_code_len": 52,
        "target_code": "from typing import Any\nfrom typing import Dict\nfrom typing import Optional\nfrom typing import Union\n\n",
        "target_code_len": 101,
        "diff_format": "@@ -4,3 +4,5 @@\n from typing import Any\n+from typing import Dict\n from typing import Optional\n+from typing import Union\n \n",
        "source_code_with_indent": "from typing import Any\nfrom typing import Optional\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Any\nfrom typing import Dict\nfrom typing import Optional\nfrom typing import Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    config = {\n        'limit': limit,\n",
        "source_code_len": 40,
        "target_code": "\n    config: Dict[str, Union[float, str]] = {\n        'limit': limit,\n",
        "target_code_len": 70,
        "diff_format": "@@ -44,3 +46,3 @@\n \n-    config = {\n+    config: Dict[str, Union[float, str]] = {\n         'limit': limit,\n",
        "source_code_with_indent": "\n    <DED><DED>config = {\n        'limit': limit,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED><DED>config: Dict[str, Union[float, str]] = {\n        'limit': limit,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]