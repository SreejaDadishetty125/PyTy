[
  {
    "project": "activeloopai/Hub",
    "commit": "31055c93b4dc96cf7eea8ef9eb4d57f6ecb4e910",
    "filename": "hub/auto/unstructured/image_classification.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/activeloopai-Hub/hub/auto/unstructured/image_classification.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "hub/auto/unstructured/image_classification.py:73:8 Incompatible return type [7]: Expected `Tuple[str]` but got `typing.Tuple[typing.Any, ...]`.",
    "message": " Expected `Tuple[str]` but got `typing.Tuple[typing.Any, ...]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 73,
    "warning_line": "        return tuple(set_names)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    # TODO: make lazy/memoized property\n    def get_set_names(self) -> Tuple[str]:\n        # TODO: move outside class\n",
        "source_code_len": 118,
        "target_code": "    # TODO: make lazy/memoized property\n    def get_set_names(self) -> Tuple[str, ...]:\n        # TODO: move outside class\n",
        "target_code_len": 123,
        "diff_format": "@@ -66,3 +64,3 @@\n     # TODO: make lazy/memoized property\n-    def get_set_names(self) -> Tuple[str]:\n+    def get_set_names(self) -> Tuple[str, ...]:\n         # TODO: move outside class\n",
        "source_code_with_indent": "    # TODO: make lazy/memoized property\n    <DED>def get_set_names(self) -> Tuple[str]:\n        # TODO: move outside class\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    # TODO: make lazy/memoized property\n    <DED>def get_set_names(self) -> Tuple[str, ...]:\n        # TODO: move outside class\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "activeloopai/Hub",
    "commit": "31055c93b4dc96cf7eea8ef9eb4d57f6ecb4e910",
    "filename": "hub/auto/unstructured/image_classification.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/activeloopai-Hub/hub/auto/unstructured/image_classification.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "hub/auto/unstructured/image_classification.py:82:8 Incompatible return type [7]: Expected `Tuple[str]` but got `typing.Tuple[typing.Any, ...]`.",
    "message": " Expected `Tuple[str]` but got `typing.Tuple[typing.Any, ...]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 82,
    "warning_line": "        return tuple(class_names)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            set_names.add(_set_name_from_path(file_path))\n        set_names = sorted(set_names)  # TODO: lexicographical sorting\n        return tuple(set_names)\n\n    # TODO: make lazy/memoized property\n    def get_class_names(self) -> Tuple[str]:\n        # TODO: move outside class\n",
        "source_code_len": 282,
        "target_code": "            set_names.add(_set_name_from_path(file_path))\n        return tuple(sorted(set_names))  # TODO: lexicographical sorting\n\n    # TODO: make lazy/memoized property\n    def get_class_names(self) -> Tuple[str, ...]:\n        # TODO: move outside class\n",
        "target_code_len": 257,
        "diff_format": "@@ -71,7 +69,6 @@\n             set_names.add(_set_name_from_path(file_path))\n-        set_names = sorted(set_names)  # TODO: lexicographical sorting\n-        return tuple(set_names)\n+        return tuple(sorted(set_names))  # TODO: lexicographical sorting\n \n     # TODO: make lazy/memoized property\n-    def get_class_names(self) -> Tuple[str]:\n+    def get_class_names(self) -> Tuple[str, ...]:\n         # TODO: move outside class\n",
        "source_code_with_indent": "            <IND>set_names.add(_set_name_from_path(file_path))\n        <DED>set_names = sorted(set_names)  # TODO: lexicographical sorting\n        return tuple(set_names)\n\n    # TODO: make lazy/memoized property\n    <DED>def get_class_names(self) -> Tuple[str]:\n        # TODO: move outside class\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <IND>set_names.add(_set_name_from_path(file_path))\n        <DED>return tuple(sorted(set_names))  # TODO: lexicographical sorting\n\n    # TODO: make lazy/memoized property\n    <DED>def get_class_names(self) -> Tuple[str, ...]:\n        # TODO: move outside class\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "activeloopai/Hub",
    "commit": "31055c93b4dc96cf7eea8ef9eb4d57f6ecb4e910",
    "filename": "hub/auto/unstructured/image_classification.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/activeloopai-Hub/hub/auto/unstructured/image_classification.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "hub/auto/unstructured/image_classification.py:84:4 Inconsistent override [14]: `hub.auto.unstructured.image_classification.ImageClassification.structure` overrides method defined in `UnstructuredDataset` inconsistently. Parameter of type `hub.api.dataset.Dataset` is not a supertype of the overridden parameter `UnstructuredDataset`.",
    "message": " `hub.auto.unstructured.image_classification.ImageClassification.structure` overrides method defined in `UnstructuredDataset` inconsistently. Parameter of type `hub.api.dataset.Dataset` is not a supertype of the overridden parameter `UnstructuredDataset`.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 84,
    "warning_line": "    def structure(",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            set_names.add(_set_name_from_path(file_path))\n        set_names = sorted(set_names)  # TODO: lexicographical sorting\n        return tuple(set_names)\n\n    # TODO: make lazy/memoized property\n    def get_class_names(self) -> Tuple[str]:\n        # TODO: move outside class\n",
        "source_code_len": 282,
        "target_code": "            set_names.add(_set_name_from_path(file_path))\n        return tuple(sorted(set_names))  # TODO: lexicographical sorting\n\n    # TODO: make lazy/memoized property\n    def get_class_names(self) -> Tuple[str, ...]:\n        # TODO: move outside class\n",
        "target_code_len": 257,
        "diff_format": "@@ -71,7 +69,6 @@\n             set_names.add(_set_name_from_path(file_path))\n-        set_names = sorted(set_names)  # TODO: lexicographical sorting\n-        return tuple(set_names)\n+        return tuple(sorted(set_names))  # TODO: lexicographical sorting\n \n     # TODO: make lazy/memoized property\n-    def get_class_names(self) -> Tuple[str]:\n+    def get_class_names(self) -> Tuple[str, ...]:\n         # TODO: move outside class\n",
        "source_code_with_indent": "            <IND>set_names.add(_set_name_from_path(file_path))\n        <DED>set_names = sorted(set_names)  # TODO: lexicographical sorting\n        return tuple(set_names)\n\n    # TODO: make lazy/memoized property\n    <DED>def get_class_names(self) -> Tuple[str]:\n        # TODO: move outside class\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <IND>set_names.add(_set_name_from_path(file_path))\n        <DED>return tuple(sorted(set_names))  # TODO: lexicographical sorting\n\n    # TODO: make lazy/memoized property\n    <DED>def get_class_names(self) -> Tuple[str, ...]:\n        # TODO: move outside class\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "            class_names.add(_class_name_from_path(file_path))\n        class_names = sorted(class_names)  # TODO: lexicographical sorting\n        return tuple(class_names)\n\n    def structure(\n        self, ds: Dataset, use_progress_bar: bool = True, image_tensor_args: dict = {}\n",
        "source_code_len": 278,
        "target_code": "            class_names.add(_class_name_from_path(file_path))\n        return tuple(sorted(class_names))  # TODO: lexicographical sorting\n\n    def structure(  # type: ignore\n        self, ds: Dataset, use_progress_bar: bool = True, image_tensor_args: dict = {}\n",
        "target_code_len": 260,
        "diff_format": "@@ -80,6 +77,5 @@\n             class_names.add(_class_name_from_path(file_path))\n-        class_names = sorted(class_names)  # TODO: lexicographical sorting\n-        return tuple(class_names)\n+        return tuple(sorted(class_names))  # TODO: lexicographical sorting\n \n-    def structure(\n+    def structure(  # type: ignore\n         self, ds: Dataset, use_progress_bar: bool = True, image_tensor_args: dict = {}\n",
        "source_code_with_indent": "            <IND>class_names.add(_class_name_from_path(file_path))\n        <DED>class_names = sorted(class_names)  # TODO: lexicographical sorting\n        return tuple(class_names)\n\n    <DED>def structure(\n        self, ds: Dataset, use_progress_bar: bool = True, image_tensor_args: dict = {}\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <IND>class_names.add(_class_name_from_path(file_path))\n        <DED>return tuple(sorted(class_names))  # TODO: lexicographical sorting\n\n    <DED>def structure(  # type: ignore\n        self, ds: Dataset, use_progress_bar: bool = True, image_tensor_args: dict = {}\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "activeloopai/Hub",
    "commit": "31055c93b4dc96cf7eea8ef9eb4d57f6ecb4e910",
    "filename": "hub/auto/unstructured/image_classification.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/activeloopai-Hub/hub/auto/unstructured/image_classification.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "hub/auto/unstructured/image_classification.py:84:4 Inconsistent override [14]: `hub.auto.unstructured.image_classification.ImageClassification.structure` overrides method defined in `UnstructuredDataset` inconsistently. Could not find parameter `Keywords(unknown)` in overriding signature.",
    "message": " `hub.auto.unstructured.image_classification.ImageClassification.structure` overrides method defined in `UnstructuredDataset` inconsistently. Could not find parameter `Keywords(unknown)` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 84,
    "warning_line": "    def structure(",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            set_names.add(_set_name_from_path(file_path))\n        set_names = sorted(set_names)  # TODO: lexicographical sorting\n        return tuple(set_names)\n\n    # TODO: make lazy/memoized property\n    def get_class_names(self) -> Tuple[str]:\n        # TODO: move outside class\n",
        "source_code_len": 282,
        "target_code": "            set_names.add(_set_name_from_path(file_path))\n        return tuple(sorted(set_names))  # TODO: lexicographical sorting\n\n    # TODO: make lazy/memoized property\n    def get_class_names(self) -> Tuple[str, ...]:\n        # TODO: move outside class\n",
        "target_code_len": 257,
        "diff_format": "@@ -71,7 +69,6 @@\n             set_names.add(_set_name_from_path(file_path))\n-        set_names = sorted(set_names)  # TODO: lexicographical sorting\n-        return tuple(set_names)\n+        return tuple(sorted(set_names))  # TODO: lexicographical sorting\n \n     # TODO: make lazy/memoized property\n-    def get_class_names(self) -> Tuple[str]:\n+    def get_class_names(self) -> Tuple[str, ...]:\n         # TODO: move outside class\n",
        "source_code_with_indent": "            <IND>set_names.add(_set_name_from_path(file_path))\n        <DED>set_names = sorted(set_names)  # TODO: lexicographical sorting\n        return tuple(set_names)\n\n    # TODO: make lazy/memoized property\n    <DED>def get_class_names(self) -> Tuple[str]:\n        # TODO: move outside class\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <IND>set_names.add(_set_name_from_path(file_path))\n        <DED>return tuple(sorted(set_names))  # TODO: lexicographical sorting\n\n    # TODO: make lazy/memoized property\n    <DED>def get_class_names(self) -> Tuple[str, ...]:\n        # TODO: move outside class\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "            class_names.add(_class_name_from_path(file_path))\n        class_names = sorted(class_names)  # TODO: lexicographical sorting\n        return tuple(class_names)\n\n    def structure(\n        self, ds: Dataset, use_progress_bar: bool = True, image_tensor_args: dict = {}\n",
        "source_code_len": 278,
        "target_code": "            class_names.add(_class_name_from_path(file_path))\n        return tuple(sorted(class_names))  # TODO: lexicographical sorting\n\n    def structure(  # type: ignore\n        self, ds: Dataset, use_progress_bar: bool = True, image_tensor_args: dict = {}\n",
        "target_code_len": 260,
        "diff_format": "@@ -80,6 +77,5 @@\n             class_names.add(_class_name_from_path(file_path))\n-        class_names = sorted(class_names)  # TODO: lexicographical sorting\n-        return tuple(class_names)\n+        return tuple(sorted(class_names))  # TODO: lexicographical sorting\n \n-    def structure(\n+    def structure(  # type: ignore\n         self, ds: Dataset, use_progress_bar: bool = True, image_tensor_args: dict = {}\n",
        "source_code_with_indent": "            <IND>class_names.add(_class_name_from_path(file_path))\n        <DED>class_names = sorted(class_names)  # TODO: lexicographical sorting\n        return tuple(class_names)\n\n    <DED>def structure(\n        self, ds: Dataset, use_progress_bar: bool = True, image_tensor_args: dict = {}\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <IND>class_names.add(_class_name_from_path(file_path))\n        <DED>return tuple(sorted(class_names))  # TODO: lexicographical sorting\n\n    <DED>def structure(  # type: ignore\n        self, ds: Dataset, use_progress_bar: bool = True, image_tensor_args: dict = {}\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]