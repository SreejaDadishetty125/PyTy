[
  {
    "project": "ConsenSys/mythril",
    "commit": "88487c29f2d53b2056da37a4ce2148c31bb9def7",
    "filename": "mythril/laser/ethereum/plugins/implementations/dependency_pruner.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ConsenSys-mythril/mythril/laser/ethereum/plugins/implementations/dependency_pruner.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mythril/laser/ethereum/plugins/implementations/dependency_pruner.py:135:42 Invalid type [31]: Expression `[int]` is not a valid type.",
    "message": " Expression `[int]` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 135,
    "warning_line": "    def update_dependency_map(self, path: [int], target_location: object) -> None:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def update_dependency_map(self, path: [int], target_location: object) -> None:\n        \"\"\"Update the dependency map for the block offsets on the given path.\n",
        "source_code_len": 162,
        "target_code": "\n    def update_dependency_map(self, path: List[int], target_location: object) -> None:\n        \"\"\"Update the dependency map for the block offsets on the given path.\n",
        "target_code_len": 166,
        "diff_format": "@@ -134,3 +134,3 @@\n \n-    def update_dependency_map(self, path: [int], target_location: object) -> None:\n+    def update_dependency_map(self, path: List[int], target_location: object) -> None:\n         \"\"\"Update the dependency map for the block offsets on the given path.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def update_dependency_map(self, path: [int], target_location: object) -> None:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def update_dependency_map(self, path: List[int], target_location: object) -> None:\n        <IND>"
      }
    ]
  },
  {
    "project": "ConsenSys/mythril",
    "commit": "88487c29f2d53b2056da37a4ce2148c31bb9def7",
    "filename": "mythril/laser/ethereum/plugins/implementations/dependency_pruner.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ConsenSys-mythril/mythril/laser/ethereum/plugins/implementations/dependency_pruner.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mythril/laser/ethereum/plugins/implementations/dependency_pruner.py:150:33 Invalid type [31]: Expression `[int]` is not a valid type.",
    "message": " Expression `[int]` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 150,
    "warning_line": "    def protect_path(self, path: [int]) -> None:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def protect_path(self, path: [int]) -> None:\n        \"\"\"Prevent an execution path of being pruned.\n",
        "source_code_len": 104,
        "target_code": "\n    def protect_path(self, path: List[int]) -> None:\n        \"\"\"Prevent an execution path of being pruned.\n",
        "target_code_len": 108,
        "diff_format": "@@ -149,3 +149,3 @@\n \n-    def protect_path(self, path: [int]) -> None:\n+    def protect_path(self, path: List[int]) -> None:\n         \"\"\"Prevent an execution path of being pruned.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED><DED><DED>def protect_path(self, path: [int]) -> None:\n        <IND>",
        "target_code_with_indent": "\n    <DED><DED><DED>def protect_path(self, path: List[int]) -> None:\n        <IND>"
      }
    ]
  }
]