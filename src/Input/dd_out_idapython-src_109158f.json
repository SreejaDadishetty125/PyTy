[
  {
    "project": "idapython/src",
    "commit": "109158fabb32c1985b702b06d81cf5119d9b84d3",
    "filename": "examples/ex1_idaapi.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/idapython-src/examples/ex1_idaapi.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "examples/ex1_idaapi.py:11:5 Unbound name [10]: Name `get_screen_ea` is used but not defined in the current scope.",
    "message": " Name `get_screen_ea` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 11,
    "warning_line": "ea = get_screen_ea()",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n# Get current ea\nea = get_screen_ea()\n\n# Get segment class\nseg = getseg(ea)\n\n# Loop from segment start to end\nfunc = get_func(seg.startEA)\n\nwhile func != None and func.startEA < seg.endEA:\n\tfuncea = func.startEA\n\tprint \"Function %s at 0x%x\" % (GetFunctionName(funcea), funcea)\n\n\tref = get_first_cref_to(funcea)\n\n\twhile ref != BADADDR:\n\t\tprint \"  called from %s(0x%x)\" % (get_func_name(ref), ref)\n\t\tref = get_next_cref_to(funcea, ref)\n\n\tfunc = get_next_func(funcea)\n",
        "source_code_len": 466,
        "target_code": "\ndef main():\n    # Get current ea\n    ea = get_screen_ea()\n\n    # Get segment class\n    seg = getseg(ea)\n\n    # Loop from segment start to end\n    func = get_next_func(seg.startEA)\n    seg_end = seg.endEA\n    while func is not None and func.startEA < seg_end:\n        funcea = func.startEA\n        print \"Function %s at 0x%x\" % (GetFunctionName(funcea), funcea)\n\n        ref = get_first_cref_to(funcea)\n\n        while ref != BADADDR:\n            print \"  called from %s(0x%x)\" % (get_func_name(ref), ref)\n            ref = get_next_cref_to(funcea, ref)\n\n        func = get_next_func(funcea)\n\n\nmain()",
        "target_code_len": 599,
        "diff_format": "@@ -9,21 +9,25 @@\n \n-# Get current ea\n-ea = get_screen_ea()\n+def main():\n+    # Get current ea\n+    ea = get_screen_ea()\n \n-# Get segment class\n-seg = getseg(ea)\n+    # Get segment class\n+    seg = getseg(ea)\n \n-# Loop from segment start to end\n-func = get_func(seg.startEA)\n+    # Loop from segment start to end\n+    func = get_next_func(seg.startEA)\n+    seg_end = seg.endEA\n+    while func is not None and func.startEA < seg_end:\n+        funcea = func.startEA\n+        print \"Function %s at 0x%x\" % (GetFunctionName(funcea), funcea)\n \n-while func != None and func.startEA < seg.endEA:\n-\tfuncea = func.startEA\n-\tprint \"Function %s at 0x%x\" % (GetFunctionName(funcea), funcea)\n+        ref = get_first_cref_to(funcea)\n \n-\tref = get_first_cref_to(funcea)\n+        while ref != BADADDR:\n+            print \"  called from %s(0x%x)\" % (get_func_name(ref), ref)\n+            ref = get_next_cref_to(funcea, ref)\n \n-\twhile ref != BADADDR:\n-\t\tprint \"  called from %s(0x%x)\" % (get_func_name(ref), ref)\n-\t\tref = get_next_cref_to(funcea, ref)\n+        func = get_next_func(funcea)\n \n-\tfunc = get_next_func(funcea)\n+\n+main()",
        "source_code_with_indent": "\n# Get current ea\nea = get_screen_ea()\n\n# Get segment class\nseg = getseg(ea)\n\n# Loop from segment start to end\nfunc = get_func(seg.startEA)\n\nwhile func != None and func.startEA < seg.endEA:\n\t<IND>funcea = func.startEA\n print \"Function %s at 0x%x\" % (GetFunctionName(funcea), funcea)\n\n ref = get_first_cref_to(funcea)\n\n while ref != BADADDR:\n\t\t<IND>print \"  called from %s(0x%x)\" % (get_func_name(ref), ref)\n  ref = get_next_cref_to(funcea, ref)\n\n <DED>func = get_next_func(funcea)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\ndef main():\n    # Get current ea\n    <IND>ea = get_screen_ea()\n\n    # Get segment class\n    seg = getseg(ea)\n\n    # Loop from segment start to end\n    func = get_next_func(seg.startEA)\n    seg_end = seg.endEA\n    while func is not None and func.startEA < seg_end:\n        <IND>funcea = func.startEA\n        print \"Function %s at 0x%x\" % (GetFunctionName(funcea), funcea)\n\n        ref = get_first_cref_to(funcea)\n\n        while ref != BADADDR:\n            <IND>print \"  called from %s(0x%x)\" % (get_func_name(ref), ref)\n            ref = get_next_cref_to(funcea, ref)\n\n        <DED>func = get_next_func(funcea)\n\n\n<DED><DED>main()",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "idapython/src",
    "commit": "109158fabb32c1985b702b06d81cf5119d9b84d3",
    "filename": "examples/ex1_idaapi.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/idapython-src/examples/ex1_idaapi.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "examples/ex1_idaapi.py:14:6 Unbound name [10]: Name `getseg` is used but not defined in the current scope.",
    "message": " Name `getseg` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 14,
    "warning_line": "seg = getseg(ea)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n# Get current ea\nea = get_screen_ea()\n\n# Get segment class\nseg = getseg(ea)\n\n# Loop from segment start to end\nfunc = get_func(seg.startEA)\n\nwhile func != None and func.startEA < seg.endEA:\n\tfuncea = func.startEA\n\tprint \"Function %s at 0x%x\" % (GetFunctionName(funcea), funcea)\n\n\tref = get_first_cref_to(funcea)\n\n\twhile ref != BADADDR:\n\t\tprint \"  called from %s(0x%x)\" % (get_func_name(ref), ref)\n\t\tref = get_next_cref_to(funcea, ref)\n\n\tfunc = get_next_func(funcea)\n",
        "source_code_len": 466,
        "target_code": "\ndef main():\n    # Get current ea\n    ea = get_screen_ea()\n\n    # Get segment class\n    seg = getseg(ea)\n\n    # Loop from segment start to end\n    func = get_next_func(seg.startEA)\n    seg_end = seg.endEA\n    while func is not None and func.startEA < seg_end:\n        funcea = func.startEA\n        print \"Function %s at 0x%x\" % (GetFunctionName(funcea), funcea)\n\n        ref = get_first_cref_to(funcea)\n\n        while ref != BADADDR:\n            print \"  called from %s(0x%x)\" % (get_func_name(ref), ref)\n            ref = get_next_cref_to(funcea, ref)\n\n        func = get_next_func(funcea)\n\n\nmain()",
        "target_code_len": 599,
        "diff_format": "@@ -9,21 +9,25 @@\n \n-# Get current ea\n-ea = get_screen_ea()\n+def main():\n+    # Get current ea\n+    ea = get_screen_ea()\n \n-# Get segment class\n-seg = getseg(ea)\n+    # Get segment class\n+    seg = getseg(ea)\n \n-# Loop from segment start to end\n-func = get_func(seg.startEA)\n+    # Loop from segment start to end\n+    func = get_next_func(seg.startEA)\n+    seg_end = seg.endEA\n+    while func is not None and func.startEA < seg_end:\n+        funcea = func.startEA\n+        print \"Function %s at 0x%x\" % (GetFunctionName(funcea), funcea)\n \n-while func != None and func.startEA < seg.endEA:\n-\tfuncea = func.startEA\n-\tprint \"Function %s at 0x%x\" % (GetFunctionName(funcea), funcea)\n+        ref = get_first_cref_to(funcea)\n \n-\tref = get_first_cref_to(funcea)\n+        while ref != BADADDR:\n+            print \"  called from %s(0x%x)\" % (get_func_name(ref), ref)\n+            ref = get_next_cref_to(funcea, ref)\n \n-\twhile ref != BADADDR:\n-\t\tprint \"  called from %s(0x%x)\" % (get_func_name(ref), ref)\n-\t\tref = get_next_cref_to(funcea, ref)\n+        func = get_next_func(funcea)\n \n-\tfunc = get_next_func(funcea)\n+\n+main()",
        "source_code_with_indent": "\n# Get current ea\nea = get_screen_ea()\n\n# Get segment class\nseg = getseg(ea)\n\n# Loop from segment start to end\nfunc = get_func(seg.startEA)\n\nwhile func != None and func.startEA < seg.endEA:\n\t<IND>funcea = func.startEA\n print \"Function %s at 0x%x\" % (GetFunctionName(funcea), funcea)\n\n ref = get_first_cref_to(funcea)\n\n while ref != BADADDR:\n\t\t<IND>print \"  called from %s(0x%x)\" % (get_func_name(ref), ref)\n  ref = get_next_cref_to(funcea, ref)\n\n <DED>func = get_next_func(funcea)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\ndef main():\n    # Get current ea\n    <IND>ea = get_screen_ea()\n\n    # Get segment class\n    seg = getseg(ea)\n\n    # Loop from segment start to end\n    func = get_next_func(seg.startEA)\n    seg_end = seg.endEA\n    while func is not None and func.startEA < seg_end:\n        <IND>funcea = func.startEA\n        print \"Function %s at 0x%x\" % (GetFunctionName(funcea), funcea)\n\n        ref = get_first_cref_to(funcea)\n\n        while ref != BADADDR:\n            <IND>print \"  called from %s(0x%x)\" % (get_func_name(ref), ref)\n            ref = get_next_cref_to(funcea, ref)\n\n        <DED>func = get_next_func(funcea)\n\n\n<DED><DED>main()",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "idapython/src",
    "commit": "109158fabb32c1985b702b06d81cf5119d9b84d3",
    "filename": "examples/ex1_idaapi.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/idapython-src/examples/ex1_idaapi.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "examples/ex1_idaapi.py:17:7 Unbound name [10]: Name `get_func` is used but not defined in the current scope.",
    "message": " Name `get_func` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 17,
    "warning_line": "func = get_func(seg.startEA)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n# Get current ea\nea = get_screen_ea()\n\n# Get segment class\nseg = getseg(ea)\n\n# Loop from segment start to end\nfunc = get_func(seg.startEA)\n\nwhile func != None and func.startEA < seg.endEA:\n\tfuncea = func.startEA\n\tprint \"Function %s at 0x%x\" % (GetFunctionName(funcea), funcea)\n\n\tref = get_first_cref_to(funcea)\n\n\twhile ref != BADADDR:\n\t\tprint \"  called from %s(0x%x)\" % (get_func_name(ref), ref)\n\t\tref = get_next_cref_to(funcea, ref)\n\n\tfunc = get_next_func(funcea)\n",
        "source_code_len": 466,
        "target_code": "\ndef main():\n    # Get current ea\n    ea = get_screen_ea()\n\n    # Get segment class\n    seg = getseg(ea)\n\n    # Loop from segment start to end\n    func = get_next_func(seg.startEA)\n    seg_end = seg.endEA\n    while func is not None and func.startEA < seg_end:\n        funcea = func.startEA\n        print \"Function %s at 0x%x\" % (GetFunctionName(funcea), funcea)\n\n        ref = get_first_cref_to(funcea)\n\n        while ref != BADADDR:\n            print \"  called from %s(0x%x)\" % (get_func_name(ref), ref)\n            ref = get_next_cref_to(funcea, ref)\n\n        func = get_next_func(funcea)\n\n\nmain()",
        "target_code_len": 599,
        "diff_format": "@@ -9,21 +9,25 @@\n \n-# Get current ea\n-ea = get_screen_ea()\n+def main():\n+    # Get current ea\n+    ea = get_screen_ea()\n \n-# Get segment class\n-seg = getseg(ea)\n+    # Get segment class\n+    seg = getseg(ea)\n \n-# Loop from segment start to end\n-func = get_func(seg.startEA)\n+    # Loop from segment start to end\n+    func = get_next_func(seg.startEA)\n+    seg_end = seg.endEA\n+    while func is not None and func.startEA < seg_end:\n+        funcea = func.startEA\n+        print \"Function %s at 0x%x\" % (GetFunctionName(funcea), funcea)\n \n-while func != None and func.startEA < seg.endEA:\n-\tfuncea = func.startEA\n-\tprint \"Function %s at 0x%x\" % (GetFunctionName(funcea), funcea)\n+        ref = get_first_cref_to(funcea)\n \n-\tref = get_first_cref_to(funcea)\n+        while ref != BADADDR:\n+            print \"  called from %s(0x%x)\" % (get_func_name(ref), ref)\n+            ref = get_next_cref_to(funcea, ref)\n \n-\twhile ref != BADADDR:\n-\t\tprint \"  called from %s(0x%x)\" % (get_func_name(ref), ref)\n-\t\tref = get_next_cref_to(funcea, ref)\n+        func = get_next_func(funcea)\n \n-\tfunc = get_next_func(funcea)\n+\n+main()",
        "source_code_with_indent": "\n# Get current ea\nea = get_screen_ea()\n\n# Get segment class\nseg = getseg(ea)\n\n# Loop from segment start to end\nfunc = get_func(seg.startEA)\n\nwhile func != None and func.startEA < seg.endEA:\n\t<IND>funcea = func.startEA\n print \"Function %s at 0x%x\" % (GetFunctionName(funcea), funcea)\n\n ref = get_first_cref_to(funcea)\n\n while ref != BADADDR:\n\t\t<IND>print \"  called from %s(0x%x)\" % (get_func_name(ref), ref)\n  ref = get_next_cref_to(funcea, ref)\n\n <DED>func = get_next_func(funcea)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\ndef main():\n    # Get current ea\n    <IND>ea = get_screen_ea()\n\n    # Get segment class\n    seg = getseg(ea)\n\n    # Loop from segment start to end\n    func = get_next_func(seg.startEA)\n    seg_end = seg.endEA\n    while func is not None and func.startEA < seg_end:\n        <IND>funcea = func.startEA\n        print \"Function %s at 0x%x\" % (GetFunctionName(funcea), funcea)\n\n        ref = get_first_cref_to(funcea)\n\n        while ref != BADADDR:\n            <IND>print \"  called from %s(0x%x)\" % (get_func_name(ref), ref)\n            ref = get_next_cref_to(funcea, ref)\n\n        <DED>func = get_next_func(funcea)\n\n\n<DED><DED>main()",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "idapython/src",
    "commit": "109158fabb32c1985b702b06d81cf5119d9b84d3",
    "filename": "examples/ex1_idaapi.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/idapython-src/examples/ex1_idaapi.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "examples/ex1_idaapi.py:21:32 Unbound name [10]: Name `GetFunctionName` is used but not defined in the current scope.",
    "message": " Name `GetFunctionName` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 21,
    "warning_line": "\tprint \"Function %s at 0x%x\" % (GetFunctionName(funcea), funcea)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n# Get current ea\nea = get_screen_ea()\n\n# Get segment class\nseg = getseg(ea)\n\n# Loop from segment start to end\nfunc = get_func(seg.startEA)\n\nwhile func != None and func.startEA < seg.endEA:\n\tfuncea = func.startEA\n\tprint \"Function %s at 0x%x\" % (GetFunctionName(funcea), funcea)\n\n\tref = get_first_cref_to(funcea)\n\n\twhile ref != BADADDR:\n\t\tprint \"  called from %s(0x%x)\" % (get_func_name(ref), ref)\n\t\tref = get_next_cref_to(funcea, ref)\n\n\tfunc = get_next_func(funcea)\n",
        "source_code_len": 466,
        "target_code": "\ndef main():\n    # Get current ea\n    ea = get_screen_ea()\n\n    # Get segment class\n    seg = getseg(ea)\n\n    # Loop from segment start to end\n    func = get_next_func(seg.startEA)\n    seg_end = seg.endEA\n    while func is not None and func.startEA < seg_end:\n        funcea = func.startEA\n        print \"Function %s at 0x%x\" % (GetFunctionName(funcea), funcea)\n\n        ref = get_first_cref_to(funcea)\n\n        while ref != BADADDR:\n            print \"  called from %s(0x%x)\" % (get_func_name(ref), ref)\n            ref = get_next_cref_to(funcea, ref)\n\n        func = get_next_func(funcea)\n\n\nmain()",
        "target_code_len": 599,
        "diff_format": "@@ -9,21 +9,25 @@\n \n-# Get current ea\n-ea = get_screen_ea()\n+def main():\n+    # Get current ea\n+    ea = get_screen_ea()\n \n-# Get segment class\n-seg = getseg(ea)\n+    # Get segment class\n+    seg = getseg(ea)\n \n-# Loop from segment start to end\n-func = get_func(seg.startEA)\n+    # Loop from segment start to end\n+    func = get_next_func(seg.startEA)\n+    seg_end = seg.endEA\n+    while func is not None and func.startEA < seg_end:\n+        funcea = func.startEA\n+        print \"Function %s at 0x%x\" % (GetFunctionName(funcea), funcea)\n \n-while func != None and func.startEA < seg.endEA:\n-\tfuncea = func.startEA\n-\tprint \"Function %s at 0x%x\" % (GetFunctionName(funcea), funcea)\n+        ref = get_first_cref_to(funcea)\n \n-\tref = get_first_cref_to(funcea)\n+        while ref != BADADDR:\n+            print \"  called from %s(0x%x)\" % (get_func_name(ref), ref)\n+            ref = get_next_cref_to(funcea, ref)\n \n-\twhile ref != BADADDR:\n-\t\tprint \"  called from %s(0x%x)\" % (get_func_name(ref), ref)\n-\t\tref = get_next_cref_to(funcea, ref)\n+        func = get_next_func(funcea)\n \n-\tfunc = get_next_func(funcea)\n+\n+main()",
        "source_code_with_indent": "\n# Get current ea\nea = get_screen_ea()\n\n# Get segment class\nseg = getseg(ea)\n\n# Loop from segment start to end\nfunc = get_func(seg.startEA)\n\nwhile func != None and func.startEA < seg.endEA:\n\t<IND>funcea = func.startEA\n print \"Function %s at 0x%x\" % (GetFunctionName(funcea), funcea)\n\n ref = get_first_cref_to(funcea)\n\n while ref != BADADDR:\n\t\t<IND>print \"  called from %s(0x%x)\" % (get_func_name(ref), ref)\n  ref = get_next_cref_to(funcea, ref)\n\n <DED>func = get_next_func(funcea)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\ndef main():\n    # Get current ea\n    <IND>ea = get_screen_ea()\n\n    # Get segment class\n    seg = getseg(ea)\n\n    # Loop from segment start to end\n    func = get_next_func(seg.startEA)\n    seg_end = seg.endEA\n    while func is not None and func.startEA < seg_end:\n        <IND>funcea = func.startEA\n        print \"Function %s at 0x%x\" % (GetFunctionName(funcea), funcea)\n\n        ref = get_first_cref_to(funcea)\n\n        while ref != BADADDR:\n            <IND>print \"  called from %s(0x%x)\" % (get_func_name(ref), ref)\n            ref = get_next_cref_to(funcea, ref)\n\n        <DED>func = get_next_func(funcea)\n\n\n<DED><DED>main()",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "idapython/src",
    "commit": "109158fabb32c1985b702b06d81cf5119d9b84d3",
    "filename": "examples/ex1_idaapi.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/idapython-src/examples/ex1_idaapi.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "examples/ex1_idaapi.py:23:7 Unbound name [10]: Name `get_first_cref_to` is used but not defined in the current scope.",
    "message": " Name `get_first_cref_to` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 23,
    "warning_line": "\tref = get_first_cref_to(funcea)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n# Get current ea\nea = get_screen_ea()\n\n# Get segment class\nseg = getseg(ea)\n\n# Loop from segment start to end\nfunc = get_func(seg.startEA)\n\nwhile func != None and func.startEA < seg.endEA:\n\tfuncea = func.startEA\n\tprint \"Function %s at 0x%x\" % (GetFunctionName(funcea), funcea)\n\n\tref = get_first_cref_to(funcea)\n\n\twhile ref != BADADDR:\n\t\tprint \"  called from %s(0x%x)\" % (get_func_name(ref), ref)\n\t\tref = get_next_cref_to(funcea, ref)\n\n\tfunc = get_next_func(funcea)\n",
        "source_code_len": 466,
        "target_code": "\ndef main():\n    # Get current ea\n    ea = get_screen_ea()\n\n    # Get segment class\n    seg = getseg(ea)\n\n    # Loop from segment start to end\n    func = get_next_func(seg.startEA)\n    seg_end = seg.endEA\n    while func is not None and func.startEA < seg_end:\n        funcea = func.startEA\n        print \"Function %s at 0x%x\" % (GetFunctionName(funcea), funcea)\n\n        ref = get_first_cref_to(funcea)\n\n        while ref != BADADDR:\n            print \"  called from %s(0x%x)\" % (get_func_name(ref), ref)\n            ref = get_next_cref_to(funcea, ref)\n\n        func = get_next_func(funcea)\n\n\nmain()",
        "target_code_len": 599,
        "diff_format": "@@ -9,21 +9,25 @@\n \n-# Get current ea\n-ea = get_screen_ea()\n+def main():\n+    # Get current ea\n+    ea = get_screen_ea()\n \n-# Get segment class\n-seg = getseg(ea)\n+    # Get segment class\n+    seg = getseg(ea)\n \n-# Loop from segment start to end\n-func = get_func(seg.startEA)\n+    # Loop from segment start to end\n+    func = get_next_func(seg.startEA)\n+    seg_end = seg.endEA\n+    while func is not None and func.startEA < seg_end:\n+        funcea = func.startEA\n+        print \"Function %s at 0x%x\" % (GetFunctionName(funcea), funcea)\n \n-while func != None and func.startEA < seg.endEA:\n-\tfuncea = func.startEA\n-\tprint \"Function %s at 0x%x\" % (GetFunctionName(funcea), funcea)\n+        ref = get_first_cref_to(funcea)\n \n-\tref = get_first_cref_to(funcea)\n+        while ref != BADADDR:\n+            print \"  called from %s(0x%x)\" % (get_func_name(ref), ref)\n+            ref = get_next_cref_to(funcea, ref)\n \n-\twhile ref != BADADDR:\n-\t\tprint \"  called from %s(0x%x)\" % (get_func_name(ref), ref)\n-\t\tref = get_next_cref_to(funcea, ref)\n+        func = get_next_func(funcea)\n \n-\tfunc = get_next_func(funcea)\n+\n+main()",
        "source_code_with_indent": "\n# Get current ea\nea = get_screen_ea()\n\n# Get segment class\nseg = getseg(ea)\n\n# Loop from segment start to end\nfunc = get_func(seg.startEA)\n\nwhile func != None and func.startEA < seg.endEA:\n\t<IND>funcea = func.startEA\n print \"Function %s at 0x%x\" % (GetFunctionName(funcea), funcea)\n\n ref = get_first_cref_to(funcea)\n\n while ref != BADADDR:\n\t\t<IND>print \"  called from %s(0x%x)\" % (get_func_name(ref), ref)\n  ref = get_next_cref_to(funcea, ref)\n\n <DED>func = get_next_func(funcea)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\ndef main():\n    # Get current ea\n    <IND>ea = get_screen_ea()\n\n    # Get segment class\n    seg = getseg(ea)\n\n    # Loop from segment start to end\n    func = get_next_func(seg.startEA)\n    seg_end = seg.endEA\n    while func is not None and func.startEA < seg_end:\n        <IND>funcea = func.startEA\n        print \"Function %s at 0x%x\" % (GetFunctionName(funcea), funcea)\n\n        ref = get_first_cref_to(funcea)\n\n        while ref != BADADDR:\n            <IND>print \"  called from %s(0x%x)\" % (get_func_name(ref), ref)\n            ref = get_next_cref_to(funcea, ref)\n\n        <DED>func = get_next_func(funcea)\n\n\n<DED><DED>main()",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "idapython/src",
    "commit": "109158fabb32c1985b702b06d81cf5119d9b84d3",
    "filename": "examples/ex1_idaapi.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/idapython-src/examples/ex1_idaapi.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "examples/ex1_idaapi.py:25:14 Unbound name [10]: Name `BADADDR` is used but not defined in the current scope.",
    "message": " Name `BADADDR` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 25,
    "warning_line": "\twhile ref != BADADDR:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n# Get current ea\nea = get_screen_ea()\n\n# Get segment class\nseg = getseg(ea)\n\n# Loop from segment start to end\nfunc = get_func(seg.startEA)\n\nwhile func != None and func.startEA < seg.endEA:\n\tfuncea = func.startEA\n\tprint \"Function %s at 0x%x\" % (GetFunctionName(funcea), funcea)\n\n\tref = get_first_cref_to(funcea)\n\n\twhile ref != BADADDR:\n\t\tprint \"  called from %s(0x%x)\" % (get_func_name(ref), ref)\n\t\tref = get_next_cref_to(funcea, ref)\n\n\tfunc = get_next_func(funcea)\n",
        "source_code_len": 466,
        "target_code": "\ndef main():\n    # Get current ea\n    ea = get_screen_ea()\n\n    # Get segment class\n    seg = getseg(ea)\n\n    # Loop from segment start to end\n    func = get_next_func(seg.startEA)\n    seg_end = seg.endEA\n    while func is not None and func.startEA < seg_end:\n        funcea = func.startEA\n        print \"Function %s at 0x%x\" % (GetFunctionName(funcea), funcea)\n\n        ref = get_first_cref_to(funcea)\n\n        while ref != BADADDR:\n            print \"  called from %s(0x%x)\" % (get_func_name(ref), ref)\n            ref = get_next_cref_to(funcea, ref)\n\n        func = get_next_func(funcea)\n\n\nmain()",
        "target_code_len": 599,
        "diff_format": "@@ -9,21 +9,25 @@\n \n-# Get current ea\n-ea = get_screen_ea()\n+def main():\n+    # Get current ea\n+    ea = get_screen_ea()\n \n-# Get segment class\n-seg = getseg(ea)\n+    # Get segment class\n+    seg = getseg(ea)\n \n-# Loop from segment start to end\n-func = get_func(seg.startEA)\n+    # Loop from segment start to end\n+    func = get_next_func(seg.startEA)\n+    seg_end = seg.endEA\n+    while func is not None and func.startEA < seg_end:\n+        funcea = func.startEA\n+        print \"Function %s at 0x%x\" % (GetFunctionName(funcea), funcea)\n \n-while func != None and func.startEA < seg.endEA:\n-\tfuncea = func.startEA\n-\tprint \"Function %s at 0x%x\" % (GetFunctionName(funcea), funcea)\n+        ref = get_first_cref_to(funcea)\n \n-\tref = get_first_cref_to(funcea)\n+        while ref != BADADDR:\n+            print \"  called from %s(0x%x)\" % (get_func_name(ref), ref)\n+            ref = get_next_cref_to(funcea, ref)\n \n-\twhile ref != BADADDR:\n-\t\tprint \"  called from %s(0x%x)\" % (get_func_name(ref), ref)\n-\t\tref = get_next_cref_to(funcea, ref)\n+        func = get_next_func(funcea)\n \n-\tfunc = get_next_func(funcea)\n+\n+main()",
        "source_code_with_indent": "\n# Get current ea\nea = get_screen_ea()\n\n# Get segment class\nseg = getseg(ea)\n\n# Loop from segment start to end\nfunc = get_func(seg.startEA)\n\nwhile func != None and func.startEA < seg.endEA:\n\t<IND>funcea = func.startEA\n print \"Function %s at 0x%x\" % (GetFunctionName(funcea), funcea)\n\n ref = get_first_cref_to(funcea)\n\n while ref != BADADDR:\n\t\t<IND>print \"  called from %s(0x%x)\" % (get_func_name(ref), ref)\n  ref = get_next_cref_to(funcea, ref)\n\n <DED>func = get_next_func(funcea)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\ndef main():\n    # Get current ea\n    <IND>ea = get_screen_ea()\n\n    # Get segment class\n    seg = getseg(ea)\n\n    # Loop from segment start to end\n    func = get_next_func(seg.startEA)\n    seg_end = seg.endEA\n    while func is not None and func.startEA < seg_end:\n        <IND>funcea = func.startEA\n        print \"Function %s at 0x%x\" % (GetFunctionName(funcea), funcea)\n\n        ref = get_first_cref_to(funcea)\n\n        while ref != BADADDR:\n            <IND>print \"  called from %s(0x%x)\" % (get_func_name(ref), ref)\n            ref = get_next_cref_to(funcea, ref)\n\n        <DED>func = get_next_func(funcea)\n\n\n<DED><DED>main()",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "idapython/src",
    "commit": "109158fabb32c1985b702b06d81cf5119d9b84d3",
    "filename": "examples/ex1_idaapi.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/idapython-src/examples/ex1_idaapi.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "examples/ex1_idaapi.py:26:36 Unbound name [10]: Name `get_func_name` is used but not defined in the current scope.",
    "message": " Name `get_func_name` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 26,
    "warning_line": "\t\tprint \"  called from %s(0x%x)\" % (get_func_name(ref), ref)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n# Get current ea\nea = get_screen_ea()\n\n# Get segment class\nseg = getseg(ea)\n\n# Loop from segment start to end\nfunc = get_func(seg.startEA)\n\nwhile func != None and func.startEA < seg.endEA:\n\tfuncea = func.startEA\n\tprint \"Function %s at 0x%x\" % (GetFunctionName(funcea), funcea)\n\n\tref = get_first_cref_to(funcea)\n\n\twhile ref != BADADDR:\n\t\tprint \"  called from %s(0x%x)\" % (get_func_name(ref), ref)\n\t\tref = get_next_cref_to(funcea, ref)\n\n\tfunc = get_next_func(funcea)\n",
        "source_code_len": 466,
        "target_code": "\ndef main():\n    # Get current ea\n    ea = get_screen_ea()\n\n    # Get segment class\n    seg = getseg(ea)\n\n    # Loop from segment start to end\n    func = get_next_func(seg.startEA)\n    seg_end = seg.endEA\n    while func is not None and func.startEA < seg_end:\n        funcea = func.startEA\n        print \"Function %s at 0x%x\" % (GetFunctionName(funcea), funcea)\n\n        ref = get_first_cref_to(funcea)\n\n        while ref != BADADDR:\n            print \"  called from %s(0x%x)\" % (get_func_name(ref), ref)\n            ref = get_next_cref_to(funcea, ref)\n\n        func = get_next_func(funcea)\n\n\nmain()",
        "target_code_len": 599,
        "diff_format": "@@ -9,21 +9,25 @@\n \n-# Get current ea\n-ea = get_screen_ea()\n+def main():\n+    # Get current ea\n+    ea = get_screen_ea()\n \n-# Get segment class\n-seg = getseg(ea)\n+    # Get segment class\n+    seg = getseg(ea)\n \n-# Loop from segment start to end\n-func = get_func(seg.startEA)\n+    # Loop from segment start to end\n+    func = get_next_func(seg.startEA)\n+    seg_end = seg.endEA\n+    while func is not None and func.startEA < seg_end:\n+        funcea = func.startEA\n+        print \"Function %s at 0x%x\" % (GetFunctionName(funcea), funcea)\n \n-while func != None and func.startEA < seg.endEA:\n-\tfuncea = func.startEA\n-\tprint \"Function %s at 0x%x\" % (GetFunctionName(funcea), funcea)\n+        ref = get_first_cref_to(funcea)\n \n-\tref = get_first_cref_to(funcea)\n+        while ref != BADADDR:\n+            print \"  called from %s(0x%x)\" % (get_func_name(ref), ref)\n+            ref = get_next_cref_to(funcea, ref)\n \n-\twhile ref != BADADDR:\n-\t\tprint \"  called from %s(0x%x)\" % (get_func_name(ref), ref)\n-\t\tref = get_next_cref_to(funcea, ref)\n+        func = get_next_func(funcea)\n \n-\tfunc = get_next_func(funcea)\n+\n+main()",
        "source_code_with_indent": "\n# Get current ea\nea = get_screen_ea()\n\n# Get segment class\nseg = getseg(ea)\n\n# Loop from segment start to end\nfunc = get_func(seg.startEA)\n\nwhile func != None and func.startEA < seg.endEA:\n\t<IND>funcea = func.startEA\n print \"Function %s at 0x%x\" % (GetFunctionName(funcea), funcea)\n\n ref = get_first_cref_to(funcea)\n\n while ref != BADADDR:\n\t\t<IND>print \"  called from %s(0x%x)\" % (get_func_name(ref), ref)\n  ref = get_next_cref_to(funcea, ref)\n\n <DED>func = get_next_func(funcea)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\ndef main():\n    # Get current ea\n    <IND>ea = get_screen_ea()\n\n    # Get segment class\n    seg = getseg(ea)\n\n    # Loop from segment start to end\n    func = get_next_func(seg.startEA)\n    seg_end = seg.endEA\n    while func is not None and func.startEA < seg_end:\n        <IND>funcea = func.startEA\n        print \"Function %s at 0x%x\" % (GetFunctionName(funcea), funcea)\n\n        ref = get_first_cref_to(funcea)\n\n        while ref != BADADDR:\n            <IND>print \"  called from %s(0x%x)\" % (get_func_name(ref), ref)\n            ref = get_next_cref_to(funcea, ref)\n\n        <DED>func = get_next_func(funcea)\n\n\n<DED><DED>main()",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "idapython/src",
    "commit": "109158fabb32c1985b702b06d81cf5119d9b84d3",
    "filename": "examples/ex1_idaapi.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/idapython-src/examples/ex1_idaapi.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "examples/ex1_idaapi.py:27:8 Unbound name [10]: Name `get_next_cref_to` is used but not defined in the current scope.",
    "message": " Name `get_next_cref_to` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 27,
    "warning_line": "\t\tref = get_next_cref_to(funcea, ref)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n# Get current ea\nea = get_screen_ea()\n\n# Get segment class\nseg = getseg(ea)\n\n# Loop from segment start to end\nfunc = get_func(seg.startEA)\n\nwhile func != None and func.startEA < seg.endEA:\n\tfuncea = func.startEA\n\tprint \"Function %s at 0x%x\" % (GetFunctionName(funcea), funcea)\n\n\tref = get_first_cref_to(funcea)\n\n\twhile ref != BADADDR:\n\t\tprint \"  called from %s(0x%x)\" % (get_func_name(ref), ref)\n\t\tref = get_next_cref_to(funcea, ref)\n\n\tfunc = get_next_func(funcea)\n",
        "source_code_len": 466,
        "target_code": "\ndef main():\n    # Get current ea\n    ea = get_screen_ea()\n\n    # Get segment class\n    seg = getseg(ea)\n\n    # Loop from segment start to end\n    func = get_next_func(seg.startEA)\n    seg_end = seg.endEA\n    while func is not None and func.startEA < seg_end:\n        funcea = func.startEA\n        print \"Function %s at 0x%x\" % (GetFunctionName(funcea), funcea)\n\n        ref = get_first_cref_to(funcea)\n\n        while ref != BADADDR:\n            print \"  called from %s(0x%x)\" % (get_func_name(ref), ref)\n            ref = get_next_cref_to(funcea, ref)\n\n        func = get_next_func(funcea)\n\n\nmain()",
        "target_code_len": 599,
        "diff_format": "@@ -9,21 +9,25 @@\n \n-# Get current ea\n-ea = get_screen_ea()\n+def main():\n+    # Get current ea\n+    ea = get_screen_ea()\n \n-# Get segment class\n-seg = getseg(ea)\n+    # Get segment class\n+    seg = getseg(ea)\n \n-# Loop from segment start to end\n-func = get_func(seg.startEA)\n+    # Loop from segment start to end\n+    func = get_next_func(seg.startEA)\n+    seg_end = seg.endEA\n+    while func is not None and func.startEA < seg_end:\n+        funcea = func.startEA\n+        print \"Function %s at 0x%x\" % (GetFunctionName(funcea), funcea)\n \n-while func != None and func.startEA < seg.endEA:\n-\tfuncea = func.startEA\n-\tprint \"Function %s at 0x%x\" % (GetFunctionName(funcea), funcea)\n+        ref = get_first_cref_to(funcea)\n \n-\tref = get_first_cref_to(funcea)\n+        while ref != BADADDR:\n+            print \"  called from %s(0x%x)\" % (get_func_name(ref), ref)\n+            ref = get_next_cref_to(funcea, ref)\n \n-\twhile ref != BADADDR:\n-\t\tprint \"  called from %s(0x%x)\" % (get_func_name(ref), ref)\n-\t\tref = get_next_cref_to(funcea, ref)\n+        func = get_next_func(funcea)\n \n-\tfunc = get_next_func(funcea)\n+\n+main()",
        "source_code_with_indent": "\n# Get current ea\nea = get_screen_ea()\n\n# Get segment class\nseg = getseg(ea)\n\n# Loop from segment start to end\nfunc = get_func(seg.startEA)\n\nwhile func != None and func.startEA < seg.endEA:\n\t<IND>funcea = func.startEA\n print \"Function %s at 0x%x\" % (GetFunctionName(funcea), funcea)\n\n ref = get_first_cref_to(funcea)\n\n while ref != BADADDR:\n\t\t<IND>print \"  called from %s(0x%x)\" % (get_func_name(ref), ref)\n  ref = get_next_cref_to(funcea, ref)\n\n <DED>func = get_next_func(funcea)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\ndef main():\n    # Get current ea\n    <IND>ea = get_screen_ea()\n\n    # Get segment class\n    seg = getseg(ea)\n\n    # Loop from segment start to end\n    func = get_next_func(seg.startEA)\n    seg_end = seg.endEA\n    while func is not None and func.startEA < seg_end:\n        <IND>funcea = func.startEA\n        print \"Function %s at 0x%x\" % (GetFunctionName(funcea), funcea)\n\n        ref = get_first_cref_to(funcea)\n\n        while ref != BADADDR:\n            <IND>print \"  called from %s(0x%x)\" % (get_func_name(ref), ref)\n            ref = get_next_cref_to(funcea, ref)\n\n        <DED>func = get_next_func(funcea)\n\n\n<DED><DED>main()",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "idapython/src",
    "commit": "109158fabb32c1985b702b06d81cf5119d9b84d3",
    "filename": "examples/ex1_idaapi.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/idapython-src/examples/ex1_idaapi.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "examples/ex1_idaapi.py:29:8 Unbound name [10]: Name `get_next_func` is used but not defined in the current scope.",
    "message": " Name `get_next_func` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 29,
    "warning_line": "\tfunc = get_next_func(funcea)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n# Get current ea\nea = get_screen_ea()\n\n# Get segment class\nseg = getseg(ea)\n\n# Loop from segment start to end\nfunc = get_func(seg.startEA)\n\nwhile func != None and func.startEA < seg.endEA:\n\tfuncea = func.startEA\n\tprint \"Function %s at 0x%x\" % (GetFunctionName(funcea), funcea)\n\n\tref = get_first_cref_to(funcea)\n\n\twhile ref != BADADDR:\n\t\tprint \"  called from %s(0x%x)\" % (get_func_name(ref), ref)\n\t\tref = get_next_cref_to(funcea, ref)\n\n\tfunc = get_next_func(funcea)\n",
        "source_code_len": 466,
        "target_code": "\ndef main():\n    # Get current ea\n    ea = get_screen_ea()\n\n    # Get segment class\n    seg = getseg(ea)\n\n    # Loop from segment start to end\n    func = get_next_func(seg.startEA)\n    seg_end = seg.endEA\n    while func is not None and func.startEA < seg_end:\n        funcea = func.startEA\n        print \"Function %s at 0x%x\" % (GetFunctionName(funcea), funcea)\n\n        ref = get_first_cref_to(funcea)\n\n        while ref != BADADDR:\n            print \"  called from %s(0x%x)\" % (get_func_name(ref), ref)\n            ref = get_next_cref_to(funcea, ref)\n\n        func = get_next_func(funcea)\n\n\nmain()",
        "target_code_len": 599,
        "diff_format": "@@ -9,21 +9,25 @@\n \n-# Get current ea\n-ea = get_screen_ea()\n+def main():\n+    # Get current ea\n+    ea = get_screen_ea()\n \n-# Get segment class\n-seg = getseg(ea)\n+    # Get segment class\n+    seg = getseg(ea)\n \n-# Loop from segment start to end\n-func = get_func(seg.startEA)\n+    # Loop from segment start to end\n+    func = get_next_func(seg.startEA)\n+    seg_end = seg.endEA\n+    while func is not None and func.startEA < seg_end:\n+        funcea = func.startEA\n+        print \"Function %s at 0x%x\" % (GetFunctionName(funcea), funcea)\n \n-while func != None and func.startEA < seg.endEA:\n-\tfuncea = func.startEA\n-\tprint \"Function %s at 0x%x\" % (GetFunctionName(funcea), funcea)\n+        ref = get_first_cref_to(funcea)\n \n-\tref = get_first_cref_to(funcea)\n+        while ref != BADADDR:\n+            print \"  called from %s(0x%x)\" % (get_func_name(ref), ref)\n+            ref = get_next_cref_to(funcea, ref)\n \n-\twhile ref != BADADDR:\n-\t\tprint \"  called from %s(0x%x)\" % (get_func_name(ref), ref)\n-\t\tref = get_next_cref_to(funcea, ref)\n+        func = get_next_func(funcea)\n \n-\tfunc = get_next_func(funcea)\n+\n+main()",
        "source_code_with_indent": "\n# Get current ea\nea = get_screen_ea()\n\n# Get segment class\nseg = getseg(ea)\n\n# Loop from segment start to end\nfunc = get_func(seg.startEA)\n\nwhile func != None and func.startEA < seg.endEA:\n\t<IND>funcea = func.startEA\n print \"Function %s at 0x%x\" % (GetFunctionName(funcea), funcea)\n\n ref = get_first_cref_to(funcea)\n\n while ref != BADADDR:\n\t\t<IND>print \"  called from %s(0x%x)\" % (get_func_name(ref), ref)\n  ref = get_next_cref_to(funcea, ref)\n\n <DED>func = get_next_func(funcea)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\ndef main():\n    # Get current ea\n    <IND>ea = get_screen_ea()\n\n    # Get segment class\n    seg = getseg(ea)\n\n    # Loop from segment start to end\n    func = get_next_func(seg.startEA)\n    seg_end = seg.endEA\n    while func is not None and func.startEA < seg_end:\n        <IND>funcea = func.startEA\n        print \"Function %s at 0x%x\" % (GetFunctionName(funcea), funcea)\n\n        ref = get_first_cref_to(funcea)\n\n        while ref != BADADDR:\n            <IND>print \"  called from %s(0x%x)\" % (get_func_name(ref), ref)\n            ref = get_next_cref_to(funcea, ref)\n\n        <DED>func = get_next_func(funcea)\n\n\n<DED><DED>main()",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "idapython/src",
    "commit": "109158fabb32c1985b702b06d81cf5119d9b84d3",
    "filename": "examples/ex1_idautils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/idapython-src/examples/ex1_idautils.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "examples/ex1_idautils.py:11:5 Unbound name [10]: Name `ScreenEA` is used but not defined in the current scope.",
    "message": " Name `ScreenEA` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 11,
    "warning_line": "ea = ScreenEA()",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n# Get current ea\nea = ScreenEA()\n\n# Loop from start to end in the current segment\nfor funcea in Functions(SegStart(ea), SegEnd(ea)):\n\tprint \"Function %s at 0x%x\" % (GetFunctionName(funcea), funcea)\n\n\t# Find all code references to funcea\n\tfor ref in CodeRefsTo(funcea, 1):\n\t\tprint \"  called from %s(0x%x)\" % (GetFunctionName(ref), ref)\n\n",
        "source_code_len": 337,
        "target_code": "\ndef main():\n    # Get current ea\n    ea = ScreenEA()\n    if ea == idaapi.BADADDR:\n        print(\"Could not get get_screen_ea()\")\n        return\n\n    # Loop from start to end in the current segment\n    for funcea in Functions(SegStart(ea), SegEnd(ea)):\n        print(\"Function %s at 0x%x\" % (GetFunctionName(funcea), funcea))\n\n        # Find all code references to funcea\n        for ref in CodeRefsTo(funcea, 1):\n            print(\"  called from %s(0x%x)\" % (GetFunctionName(ref), ref))\n\n\nif __name__=='__main__':\n    main()",
        "target_code_len": 525,
        "diff_format": "@@ -9,12 +9,19 @@\n \n-# Get current ea\n-ea = ScreenEA()\n+def main():\n+    # Get current ea\n+    ea = ScreenEA()\n+    if ea == idaapi.BADADDR:\n+        print(\"Could not get get_screen_ea()\")\n+        return\n \n-# Loop from start to end in the current segment\n-for funcea in Functions(SegStart(ea), SegEnd(ea)):\n-\tprint \"Function %s at 0x%x\" % (GetFunctionName(funcea), funcea)\n+    # Loop from start to end in the current segment\n+    for funcea in Functions(SegStart(ea), SegEnd(ea)):\n+        print(\"Function %s at 0x%x\" % (GetFunctionName(funcea), funcea))\n \n-\t# Find all code references to funcea\n-\tfor ref in CodeRefsTo(funcea, 1):\n-\t\tprint \"  called from %s(0x%x)\" % (GetFunctionName(ref), ref)\n+        # Find all code references to funcea\n+        for ref in CodeRefsTo(funcea, 1):\n+            print(\"  called from %s(0x%x)\" % (GetFunctionName(ref), ref))\n \n+\n+if __name__=='__main__':\n+    main()",
        "source_code_with_indent": "\n# Get current ea\nea = ScreenEA()\n\n# Loop from start to end in the current segment\nfor funcea in Functions(SegStart(ea), SegEnd(ea)):\n\t<IND>print \"Function %s at 0x%x\" % (GetFunctionName(funcea), funcea)\n\n # Find all code references to funcea\n for ref in CodeRefsTo(funcea, 1):\n\t\t<IND>print \"  called from %s(0x%x)\" % (GetFunctionName(ref), ref)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\ndef main():\n    # Get current ea\n    <IND>ea = ScreenEA()\n    if ea == idaapi.BADADDR:\n        <IND>print(\"Could not get get_screen_ea()\")\n        return\n\n    # Loop from start to end in the current segment\n    <DED>for funcea in Functions(SegStart(ea), SegEnd(ea)):\n        <IND>print(\"Function %s at 0x%x\" % (GetFunctionName(funcea), funcea))\n\n        # Find all code references to funcea\n        for ref in CodeRefsTo(funcea, 1):\n            <IND>print(\"  called from %s(0x%x)\" % (GetFunctionName(ref), ref))\n\n\n<DED><DED><DED>if __name__=='__main__':\n    <IND>main()",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "idapython/src",
    "commit": "109158fabb32c1985b702b06d81cf5119d9b84d3",
    "filename": "examples/ex1_idautils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/idapython-src/examples/ex1_idautils.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "examples/ex1_idautils.py:14:14 Unbound name [10]: Name `Functions` is used but not defined in the current scope.",
    "message": " Name `Functions` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 14,
    "warning_line": "for funcea in Functions(SegStart(ea), SegEnd(ea)):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n# Get current ea\nea = ScreenEA()\n\n# Loop from start to end in the current segment\nfor funcea in Functions(SegStart(ea), SegEnd(ea)):\n\tprint \"Function %s at 0x%x\" % (GetFunctionName(funcea), funcea)\n\n\t# Find all code references to funcea\n\tfor ref in CodeRefsTo(funcea, 1):\n\t\tprint \"  called from %s(0x%x)\" % (GetFunctionName(ref), ref)\n\n",
        "source_code_len": 337,
        "target_code": "\ndef main():\n    # Get current ea\n    ea = ScreenEA()\n    if ea == idaapi.BADADDR:\n        print(\"Could not get get_screen_ea()\")\n        return\n\n    # Loop from start to end in the current segment\n    for funcea in Functions(SegStart(ea), SegEnd(ea)):\n        print(\"Function %s at 0x%x\" % (GetFunctionName(funcea), funcea))\n\n        # Find all code references to funcea\n        for ref in CodeRefsTo(funcea, 1):\n            print(\"  called from %s(0x%x)\" % (GetFunctionName(ref), ref))\n\n\nif __name__=='__main__':\n    main()",
        "target_code_len": 525,
        "diff_format": "@@ -9,12 +9,19 @@\n \n-# Get current ea\n-ea = ScreenEA()\n+def main():\n+    # Get current ea\n+    ea = ScreenEA()\n+    if ea == idaapi.BADADDR:\n+        print(\"Could not get get_screen_ea()\")\n+        return\n \n-# Loop from start to end in the current segment\n-for funcea in Functions(SegStart(ea), SegEnd(ea)):\n-\tprint \"Function %s at 0x%x\" % (GetFunctionName(funcea), funcea)\n+    # Loop from start to end in the current segment\n+    for funcea in Functions(SegStart(ea), SegEnd(ea)):\n+        print(\"Function %s at 0x%x\" % (GetFunctionName(funcea), funcea))\n \n-\t# Find all code references to funcea\n-\tfor ref in CodeRefsTo(funcea, 1):\n-\t\tprint \"  called from %s(0x%x)\" % (GetFunctionName(ref), ref)\n+        # Find all code references to funcea\n+        for ref in CodeRefsTo(funcea, 1):\n+            print(\"  called from %s(0x%x)\" % (GetFunctionName(ref), ref))\n \n+\n+if __name__=='__main__':\n+    main()",
        "source_code_with_indent": "\n# Get current ea\nea = ScreenEA()\n\n# Loop from start to end in the current segment\nfor funcea in Functions(SegStart(ea), SegEnd(ea)):\n\t<IND>print \"Function %s at 0x%x\" % (GetFunctionName(funcea), funcea)\n\n # Find all code references to funcea\n for ref in CodeRefsTo(funcea, 1):\n\t\t<IND>print \"  called from %s(0x%x)\" % (GetFunctionName(ref), ref)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\ndef main():\n    # Get current ea\n    <IND>ea = ScreenEA()\n    if ea == idaapi.BADADDR:\n        <IND>print(\"Could not get get_screen_ea()\")\n        return\n\n    # Loop from start to end in the current segment\n    <DED>for funcea in Functions(SegStart(ea), SegEnd(ea)):\n        <IND>print(\"Function %s at 0x%x\" % (GetFunctionName(funcea), funcea))\n\n        # Find all code references to funcea\n        for ref in CodeRefsTo(funcea, 1):\n            <IND>print(\"  called from %s(0x%x)\" % (GetFunctionName(ref), ref))\n\n\n<DED><DED><DED>if __name__=='__main__':\n    <IND>main()",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "idapython/src",
    "commit": "109158fabb32c1985b702b06d81cf5119d9b84d3",
    "filename": "examples/ex1_idautils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/idapython-src/examples/ex1_idautils.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "examples/ex1_idautils.py:14:24 Unbound name [10]: Name `SegStart` is used but not defined in the current scope.",
    "message": " Name `SegStart` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 14,
    "warning_line": "for funcea in Functions(SegStart(ea), SegEnd(ea)):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n# Get current ea\nea = ScreenEA()\n\n# Loop from start to end in the current segment\nfor funcea in Functions(SegStart(ea), SegEnd(ea)):\n\tprint \"Function %s at 0x%x\" % (GetFunctionName(funcea), funcea)\n\n\t# Find all code references to funcea\n\tfor ref in CodeRefsTo(funcea, 1):\n\t\tprint \"  called from %s(0x%x)\" % (GetFunctionName(ref), ref)\n\n",
        "source_code_len": 337,
        "target_code": "\ndef main():\n    # Get current ea\n    ea = ScreenEA()\n    if ea == idaapi.BADADDR:\n        print(\"Could not get get_screen_ea()\")\n        return\n\n    # Loop from start to end in the current segment\n    for funcea in Functions(SegStart(ea), SegEnd(ea)):\n        print(\"Function %s at 0x%x\" % (GetFunctionName(funcea), funcea))\n\n        # Find all code references to funcea\n        for ref in CodeRefsTo(funcea, 1):\n            print(\"  called from %s(0x%x)\" % (GetFunctionName(ref), ref))\n\n\nif __name__=='__main__':\n    main()",
        "target_code_len": 525,
        "diff_format": "@@ -9,12 +9,19 @@\n \n-# Get current ea\n-ea = ScreenEA()\n+def main():\n+    # Get current ea\n+    ea = ScreenEA()\n+    if ea == idaapi.BADADDR:\n+        print(\"Could not get get_screen_ea()\")\n+        return\n \n-# Loop from start to end in the current segment\n-for funcea in Functions(SegStart(ea), SegEnd(ea)):\n-\tprint \"Function %s at 0x%x\" % (GetFunctionName(funcea), funcea)\n+    # Loop from start to end in the current segment\n+    for funcea in Functions(SegStart(ea), SegEnd(ea)):\n+        print(\"Function %s at 0x%x\" % (GetFunctionName(funcea), funcea))\n \n-\t# Find all code references to funcea\n-\tfor ref in CodeRefsTo(funcea, 1):\n-\t\tprint \"  called from %s(0x%x)\" % (GetFunctionName(ref), ref)\n+        # Find all code references to funcea\n+        for ref in CodeRefsTo(funcea, 1):\n+            print(\"  called from %s(0x%x)\" % (GetFunctionName(ref), ref))\n \n+\n+if __name__=='__main__':\n+    main()",
        "source_code_with_indent": "\n# Get current ea\nea = ScreenEA()\n\n# Loop from start to end in the current segment\nfor funcea in Functions(SegStart(ea), SegEnd(ea)):\n\t<IND>print \"Function %s at 0x%x\" % (GetFunctionName(funcea), funcea)\n\n # Find all code references to funcea\n for ref in CodeRefsTo(funcea, 1):\n\t\t<IND>print \"  called from %s(0x%x)\" % (GetFunctionName(ref), ref)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\ndef main():\n    # Get current ea\n    <IND>ea = ScreenEA()\n    if ea == idaapi.BADADDR:\n        <IND>print(\"Could not get get_screen_ea()\")\n        return\n\n    # Loop from start to end in the current segment\n    <DED>for funcea in Functions(SegStart(ea), SegEnd(ea)):\n        <IND>print(\"Function %s at 0x%x\" % (GetFunctionName(funcea), funcea))\n\n        # Find all code references to funcea\n        for ref in CodeRefsTo(funcea, 1):\n            <IND>print(\"  called from %s(0x%x)\" % (GetFunctionName(ref), ref))\n\n\n<DED><DED><DED>if __name__=='__main__':\n    <IND>main()",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "idapython/src",
    "commit": "109158fabb32c1985b702b06d81cf5119d9b84d3",
    "filename": "examples/ex1_idautils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/idapython-src/examples/ex1_idautils.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "examples/ex1_idautils.py:14:38 Unbound name [10]: Name `SegEnd` is used but not defined in the current scope.",
    "message": " Name `SegEnd` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 14,
    "warning_line": "for funcea in Functions(SegStart(ea), SegEnd(ea)):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n# Get current ea\nea = ScreenEA()\n\n# Loop from start to end in the current segment\nfor funcea in Functions(SegStart(ea), SegEnd(ea)):\n\tprint \"Function %s at 0x%x\" % (GetFunctionName(funcea), funcea)\n\n\t# Find all code references to funcea\n\tfor ref in CodeRefsTo(funcea, 1):\n\t\tprint \"  called from %s(0x%x)\" % (GetFunctionName(ref), ref)\n\n",
        "source_code_len": 337,
        "target_code": "\ndef main():\n    # Get current ea\n    ea = ScreenEA()\n    if ea == idaapi.BADADDR:\n        print(\"Could not get get_screen_ea()\")\n        return\n\n    # Loop from start to end in the current segment\n    for funcea in Functions(SegStart(ea), SegEnd(ea)):\n        print(\"Function %s at 0x%x\" % (GetFunctionName(funcea), funcea))\n\n        # Find all code references to funcea\n        for ref in CodeRefsTo(funcea, 1):\n            print(\"  called from %s(0x%x)\" % (GetFunctionName(ref), ref))\n\n\nif __name__=='__main__':\n    main()",
        "target_code_len": 525,
        "diff_format": "@@ -9,12 +9,19 @@\n \n-# Get current ea\n-ea = ScreenEA()\n+def main():\n+    # Get current ea\n+    ea = ScreenEA()\n+    if ea == idaapi.BADADDR:\n+        print(\"Could not get get_screen_ea()\")\n+        return\n \n-# Loop from start to end in the current segment\n-for funcea in Functions(SegStart(ea), SegEnd(ea)):\n-\tprint \"Function %s at 0x%x\" % (GetFunctionName(funcea), funcea)\n+    # Loop from start to end in the current segment\n+    for funcea in Functions(SegStart(ea), SegEnd(ea)):\n+        print(\"Function %s at 0x%x\" % (GetFunctionName(funcea), funcea))\n \n-\t# Find all code references to funcea\n-\tfor ref in CodeRefsTo(funcea, 1):\n-\t\tprint \"  called from %s(0x%x)\" % (GetFunctionName(ref), ref)\n+        # Find all code references to funcea\n+        for ref in CodeRefsTo(funcea, 1):\n+            print(\"  called from %s(0x%x)\" % (GetFunctionName(ref), ref))\n \n+\n+if __name__=='__main__':\n+    main()",
        "source_code_with_indent": "\n# Get current ea\nea = ScreenEA()\n\n# Loop from start to end in the current segment\nfor funcea in Functions(SegStart(ea), SegEnd(ea)):\n\t<IND>print \"Function %s at 0x%x\" % (GetFunctionName(funcea), funcea)\n\n # Find all code references to funcea\n for ref in CodeRefsTo(funcea, 1):\n\t\t<IND>print \"  called from %s(0x%x)\" % (GetFunctionName(ref), ref)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\ndef main():\n    # Get current ea\n    <IND>ea = ScreenEA()\n    if ea == idaapi.BADADDR:\n        <IND>print(\"Could not get get_screen_ea()\")\n        return\n\n    # Loop from start to end in the current segment\n    <DED>for funcea in Functions(SegStart(ea), SegEnd(ea)):\n        <IND>print(\"Function %s at 0x%x\" % (GetFunctionName(funcea), funcea))\n\n        # Find all code references to funcea\n        for ref in CodeRefsTo(funcea, 1):\n            <IND>print(\"  called from %s(0x%x)\" % (GetFunctionName(ref), ref))\n\n\n<DED><DED><DED>if __name__=='__main__':\n    <IND>main()",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "idapython/src",
    "commit": "109158fabb32c1985b702b06d81cf5119d9b84d3",
    "filename": "examples/ex1_idautils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/idapython-src/examples/ex1_idautils.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "examples/ex1_idautils.py:15:32 Unbound name [10]: Name `GetFunctionName` is used but not defined in the current scope.",
    "message": " Name `GetFunctionName` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 15,
    "warning_line": "\tprint \"Function %s at 0x%x\" % (GetFunctionName(funcea), funcea)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n# Get current ea\nea = ScreenEA()\n\n# Loop from start to end in the current segment\nfor funcea in Functions(SegStart(ea), SegEnd(ea)):\n\tprint \"Function %s at 0x%x\" % (GetFunctionName(funcea), funcea)\n\n\t# Find all code references to funcea\n\tfor ref in CodeRefsTo(funcea, 1):\n\t\tprint \"  called from %s(0x%x)\" % (GetFunctionName(ref), ref)\n\n",
        "source_code_len": 337,
        "target_code": "\ndef main():\n    # Get current ea\n    ea = ScreenEA()\n    if ea == idaapi.BADADDR:\n        print(\"Could not get get_screen_ea()\")\n        return\n\n    # Loop from start to end in the current segment\n    for funcea in Functions(SegStart(ea), SegEnd(ea)):\n        print(\"Function %s at 0x%x\" % (GetFunctionName(funcea), funcea))\n\n        # Find all code references to funcea\n        for ref in CodeRefsTo(funcea, 1):\n            print(\"  called from %s(0x%x)\" % (GetFunctionName(ref), ref))\n\n\nif __name__=='__main__':\n    main()",
        "target_code_len": 525,
        "diff_format": "@@ -9,12 +9,19 @@\n \n-# Get current ea\n-ea = ScreenEA()\n+def main():\n+    # Get current ea\n+    ea = ScreenEA()\n+    if ea == idaapi.BADADDR:\n+        print(\"Could not get get_screen_ea()\")\n+        return\n \n-# Loop from start to end in the current segment\n-for funcea in Functions(SegStart(ea), SegEnd(ea)):\n-\tprint \"Function %s at 0x%x\" % (GetFunctionName(funcea), funcea)\n+    # Loop from start to end in the current segment\n+    for funcea in Functions(SegStart(ea), SegEnd(ea)):\n+        print(\"Function %s at 0x%x\" % (GetFunctionName(funcea), funcea))\n \n-\t# Find all code references to funcea\n-\tfor ref in CodeRefsTo(funcea, 1):\n-\t\tprint \"  called from %s(0x%x)\" % (GetFunctionName(ref), ref)\n+        # Find all code references to funcea\n+        for ref in CodeRefsTo(funcea, 1):\n+            print(\"  called from %s(0x%x)\" % (GetFunctionName(ref), ref))\n \n+\n+if __name__=='__main__':\n+    main()",
        "source_code_with_indent": "\n# Get current ea\nea = ScreenEA()\n\n# Loop from start to end in the current segment\nfor funcea in Functions(SegStart(ea), SegEnd(ea)):\n\t<IND>print \"Function %s at 0x%x\" % (GetFunctionName(funcea), funcea)\n\n # Find all code references to funcea\n for ref in CodeRefsTo(funcea, 1):\n\t\t<IND>print \"  called from %s(0x%x)\" % (GetFunctionName(ref), ref)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\ndef main():\n    # Get current ea\n    <IND>ea = ScreenEA()\n    if ea == idaapi.BADADDR:\n        <IND>print(\"Could not get get_screen_ea()\")\n        return\n\n    # Loop from start to end in the current segment\n    <DED>for funcea in Functions(SegStart(ea), SegEnd(ea)):\n        <IND>print(\"Function %s at 0x%x\" % (GetFunctionName(funcea), funcea))\n\n        # Find all code references to funcea\n        for ref in CodeRefsTo(funcea, 1):\n            <IND>print(\"  called from %s(0x%x)\" % (GetFunctionName(ref), ref))\n\n\n<DED><DED><DED>if __name__=='__main__':\n    <IND>main()",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "idapython/src",
    "commit": "109158fabb32c1985b702b06d81cf5119d9b84d3",
    "filename": "examples/ex1_idautils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/idapython-src/examples/ex1_idautils.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "examples/ex1_idautils.py:18:12 Unbound name [10]: Name `CodeRefsTo` is used but not defined in the current scope.",
    "message": " Name `CodeRefsTo` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 18,
    "warning_line": "\tfor ref in CodeRefsTo(funcea, 1):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n# Get current ea\nea = ScreenEA()\n\n# Loop from start to end in the current segment\nfor funcea in Functions(SegStart(ea), SegEnd(ea)):\n\tprint \"Function %s at 0x%x\" % (GetFunctionName(funcea), funcea)\n\n\t# Find all code references to funcea\n\tfor ref in CodeRefsTo(funcea, 1):\n\t\tprint \"  called from %s(0x%x)\" % (GetFunctionName(ref), ref)\n\n",
        "source_code_len": 337,
        "target_code": "\ndef main():\n    # Get current ea\n    ea = ScreenEA()\n    if ea == idaapi.BADADDR:\n        print(\"Could not get get_screen_ea()\")\n        return\n\n    # Loop from start to end in the current segment\n    for funcea in Functions(SegStart(ea), SegEnd(ea)):\n        print(\"Function %s at 0x%x\" % (GetFunctionName(funcea), funcea))\n\n        # Find all code references to funcea\n        for ref in CodeRefsTo(funcea, 1):\n            print(\"  called from %s(0x%x)\" % (GetFunctionName(ref), ref))\n\n\nif __name__=='__main__':\n    main()",
        "target_code_len": 525,
        "diff_format": "@@ -9,12 +9,19 @@\n \n-# Get current ea\n-ea = ScreenEA()\n+def main():\n+    # Get current ea\n+    ea = ScreenEA()\n+    if ea == idaapi.BADADDR:\n+        print(\"Could not get get_screen_ea()\")\n+        return\n \n-# Loop from start to end in the current segment\n-for funcea in Functions(SegStart(ea), SegEnd(ea)):\n-\tprint \"Function %s at 0x%x\" % (GetFunctionName(funcea), funcea)\n+    # Loop from start to end in the current segment\n+    for funcea in Functions(SegStart(ea), SegEnd(ea)):\n+        print(\"Function %s at 0x%x\" % (GetFunctionName(funcea), funcea))\n \n-\t# Find all code references to funcea\n-\tfor ref in CodeRefsTo(funcea, 1):\n-\t\tprint \"  called from %s(0x%x)\" % (GetFunctionName(ref), ref)\n+        # Find all code references to funcea\n+        for ref in CodeRefsTo(funcea, 1):\n+            print(\"  called from %s(0x%x)\" % (GetFunctionName(ref), ref))\n \n+\n+if __name__=='__main__':\n+    main()",
        "source_code_with_indent": "\n# Get current ea\nea = ScreenEA()\n\n# Loop from start to end in the current segment\nfor funcea in Functions(SegStart(ea), SegEnd(ea)):\n\t<IND>print \"Function %s at 0x%x\" % (GetFunctionName(funcea), funcea)\n\n # Find all code references to funcea\n for ref in CodeRefsTo(funcea, 1):\n\t\t<IND>print \"  called from %s(0x%x)\" % (GetFunctionName(ref), ref)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\ndef main():\n    # Get current ea\n    <IND>ea = ScreenEA()\n    if ea == idaapi.BADADDR:\n        <IND>print(\"Could not get get_screen_ea()\")\n        return\n\n    # Loop from start to end in the current segment\n    <DED>for funcea in Functions(SegStart(ea), SegEnd(ea)):\n        <IND>print(\"Function %s at 0x%x\" % (GetFunctionName(funcea), funcea))\n\n        # Find all code references to funcea\n        for ref in CodeRefsTo(funcea, 1):\n            <IND>print(\"  called from %s(0x%x)\" % (GetFunctionName(ref), ref))\n\n\n<DED><DED><DED>if __name__=='__main__':\n    <IND>main()",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]