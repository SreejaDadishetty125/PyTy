[
  {
    "project": "mozman/ezdxf",
    "commit": "2fce6bc887256833c9da9b93eda74d05692f3a8e",
    "filename": "src/ezdxf/tools/pattern.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mozman-ezdxf/src/ezdxf/tools/pattern.py",
    "file_hunks_size": 14,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "src/ezdxf/tools/pattern.py:57:8 Incompatible return type [7]: Expected `Tuple[float, Sequence[float], Sequence[float], Sequence[float]]` but got `List[typing.Union[Sequence[float], int]]`.",
    "message": " Expected `Tuple[float, Sequence[float], Sequence[float], Sequence[float]]` but got `List[typing.Union[Sequence[float], int]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 57,
    "warning_line": "        return [",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        # noinspection PyTypeChecker\n        return [\n            round(angle0, ndigits),\n",
        "source_code_len": 90,
        "target_code": "        # noinspection PyTypeChecker\n        return [  # type: ignore\n            round(angle0, ndigits),\n",
        "target_code_len": 106,
        "diff_format": "@@ -56,3 +65,3 @@\n         # noinspection PyTypeChecker\n-        return [\n+        return [  # type: ignore\n             round(angle0, ndigits),\n",
        "source_code_with_indent": "        # noinspection PyTypeChecker\n        <DED>return [\n            round(angle0, ndigits),\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        # noinspection PyTypeChecker\n        <DED>return [  # type: ignore\n            round(angle0, ndigits),\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]