[
  {
    "project": "thesadru/genshinstats",
    "commit": "4244cc8116ef29a37d56a47c73fbdac6a785c373",
    "filename": "examples/genshinstats_tui.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/thesadru-genshinstats/examples/genshinstats_tui.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "examples/genshinstats_tui.py:10:28 Incompatible parameter type [6]: Expected `int` for 1st positional only parameter to call `gs.genshinstats.get_user_info` but got `str`.",
    "message": " Expected `int` for 1st positional only parameter to call `gs.genshinstats.get_user_info` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 10,
    "warning_line": "    data = gs.get_user_info(uid)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ngs.set_cookie(ltuid=...,ltoken=...)\n\nuid = input('Please enter a uid: ')\naction = input('What would you like to view? [1. stats, 2. characters, 3. spiral abyss] ')\n\n",
        "source_code_len": 166,
        "target_code": "\ngs.set_cookie(ltuid=..., ltoken=...)\n\nuid = int(input('Please enter a uid: '))\naction = input(\n    'What would you like to view? [1. stats, 2. characters, 3. spiral abyss] ')\n\n",
        "target_code_len": 177,
        "diff_format": "@@ -2,6 +2,7 @@\n \n-gs.set_cookie(ltuid=...,ltoken=...)\n+gs.set_cookie(ltuid=..., ltoken=...)\n \n-uid = input('Please enter a uid: ')\n-action = input('What would you like to view? [1. stats, 2. characters, 3. spiral abyss] ')\n+uid = int(input('Please enter a uid: '))\n+action = input(\n+    'What would you like to view? [1. stats, 2. characters, 3. spiral abyss] ')\n \n",
        "source_code_with_indent": "\ngs.set_cookie(ltuid=...,ltoken=...)\n\nuid = input('Please enter a uid: ')\naction = input('What would you like to view? [1. stats, 2. characters, 3. spiral abyss] ')\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\ngs.set_cookie(ltuid=..., ltoken=...)\n\nuid = int(input('Please enter a uid: '))\naction = input(\n    'What would you like to view? [1. stats, 2. characters, 3. spiral abyss] ')\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "thesadru/genshinstats",
    "commit": "4244cc8116ef29a37d56a47c73fbdac6a785c373",
    "filename": "examples/genshinstats_tui.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/thesadru-genshinstats/examples/genshinstats_tui.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "examples/genshinstats_tui.py:21:33 Incompatible parameter type [6]: Expected `int` for 1st positional only parameter to call `gs.genshinstats.get_all_characters` but got `str`.",
    "message": " Expected `int` for 1st positional only parameter to call `gs.genshinstats.get_all_characters` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 21,
    "warning_line": "    data = gs.get_all_characters(uid)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ngs.set_cookie(ltuid=...,ltoken=...)\n\nuid = input('Please enter a uid: ')\naction = input('What would you like to view? [1. stats, 2. characters, 3. spiral abyss] ')\n\n",
        "source_code_len": 166,
        "target_code": "\ngs.set_cookie(ltuid=..., ltoken=...)\n\nuid = int(input('Please enter a uid: '))\naction = input(\n    'What would you like to view? [1. stats, 2. characters, 3. spiral abyss] ')\n\n",
        "target_code_len": 177,
        "diff_format": "@@ -2,6 +2,7 @@\n \n-gs.set_cookie(ltuid=...,ltoken=...)\n+gs.set_cookie(ltuid=..., ltoken=...)\n \n-uid = input('Please enter a uid: ')\n-action = input('What would you like to view? [1. stats, 2. characters, 3. spiral abyss] ')\n+uid = int(input('Please enter a uid: '))\n+action = input(\n+    'What would you like to view? [1. stats, 2. characters, 3. spiral abyss] ')\n \n",
        "source_code_with_indent": "\ngs.set_cookie(ltuid=...,ltoken=...)\n\nuid = input('Please enter a uid: ')\naction = input('What would you like to view? [1. stats, 2. characters, 3. spiral abyss] ')\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\ngs.set_cookie(ltuid=..., ltoken=...)\n\nuid = int(input('Please enter a uid: '))\naction = input(\n    'What would you like to view? [1. stats, 2. characters, 3. spiral abyss] ')\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "thesadru/genshinstats",
    "commit": "4244cc8116ef29a37d56a47c73fbdac6a785c373",
    "filename": "examples/genshinstats_tui.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/thesadru-genshinstats/examples/genshinstats_tui.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "examples/genshinstats_tui.py:30:31 Incompatible parameter type [6]: Expected `int` for 1st positional only parameter to call `gs.genshinstats.get_spiral_abyss` but got `str`.",
    "message": " Expected `int` for 1st positional only parameter to call `gs.genshinstats.get_spiral_abyss` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 30,
    "warning_line": "    data = gs.get_spiral_abyss(uid,previous=previous)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ngs.set_cookie(ltuid=...,ltoken=...)\n\nuid = input('Please enter a uid: ')\naction = input('What would you like to view? [1. stats, 2. characters, 3. spiral abyss] ')\n\n",
        "source_code_len": 166,
        "target_code": "\ngs.set_cookie(ltuid=..., ltoken=...)\n\nuid = int(input('Please enter a uid: '))\naction = input(\n    'What would you like to view? [1. stats, 2. characters, 3. spiral abyss] ')\n\n",
        "target_code_len": 177,
        "diff_format": "@@ -2,6 +2,7 @@\n \n-gs.set_cookie(ltuid=...,ltoken=...)\n+gs.set_cookie(ltuid=..., ltoken=...)\n \n-uid = input('Please enter a uid: ')\n-action = input('What would you like to view? [1. stats, 2. characters, 3. spiral abyss] ')\n+uid = int(input('Please enter a uid: '))\n+action = input(\n+    'What would you like to view? [1. stats, 2. characters, 3. spiral abyss] ')\n \n",
        "source_code_with_indent": "\ngs.set_cookie(ltuid=...,ltoken=...)\n\nuid = input('Please enter a uid: ')\naction = input('What would you like to view? [1. stats, 2. characters, 3. spiral abyss] ')\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\ngs.set_cookie(ltuid=..., ltoken=...)\n\nuid = int(input('Please enter a uid: '))\naction = input(\n    'What would you like to view? [1. stats, 2. characters, 3. spiral abyss] ')\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "thesadru/genshinstats",
    "commit": "4244cc8116ef29a37d56a47c73fbdac6a785c373",
    "filename": "genshinstats/gachalog.py",
    "min_patch_found": false,
    "full_warning_msg": "genshinstats/gachalog.py:41:18 Incompatible variable type [9]: logfile is declared to have type `str` but is used as type `None`.",
    "exception": "[Errno 2] No such file or directory: '/home/chowyi/TypeAnnotation_Study/GitHub/thesadru-genshinstats/genshinstats/gachalog.py'",
    "dd_fail": true
  },
  {
    "project": "thesadru/genshinstats",
    "commit": "4244cc8116ef29a37d56a47c73fbdac6a785c373",
    "filename": "genshinstats/gachalog.py",
    "min_patch_found": false,
    "full_warning_msg": "genshinstats/gachalog.py:54:16 Incompatible variable type [9]: logfile is declared to have type `str` but is used as type `None`.",
    "exception": "[Errno 2] No such file or directory: '/home/chowyi/TypeAnnotation_Study/GitHub/thesadru-genshinstats/genshinstats/gachalog.py'",
    "dd_fail": true
  },
  {
    "project": "thesadru/genshinstats",
    "commit": "4244cc8116ef29a37d56a47c73fbdac6a785c373",
    "filename": "genshinstats/gachalog.py",
    "min_patch_found": false,
    "full_warning_msg": "genshinstats/gachalog.py:74:22 Incompatible variable type [9]: logfile is declared to have type `str` but is used as type `None`.",
    "exception": "[Errno 2] No such file or directory: '/home/chowyi/TypeAnnotation_Study/GitHub/thesadru-genshinstats/genshinstats/gachalog.py'",
    "dd_fail": true
  },
  {
    "project": "thesadru/genshinstats",
    "commit": "4244cc8116ef29a37d56a47c73fbdac6a785c373",
    "filename": "genshinstats/gachalog.py",
    "min_patch_found": false,
    "full_warning_msg": "genshinstats/gachalog.py:83:16 Incompatible variable type [9]: authkey is declared to have type `str` but is used as type `None`.",
    "exception": "[Errno 2] No such file or directory: '/home/chowyi/TypeAnnotation_Study/GitHub/thesadru-genshinstats/genshinstats/gachalog.py'",
    "dd_fail": true
  },
  {
    "project": "thesadru/genshinstats",
    "commit": "4244cc8116ef29a37d56a47c73fbdac6a785c373",
    "filename": "genshinstats/gachalog.py",
    "min_patch_found": false,
    "full_warning_msg": "genshinstats/gachalog.py:83:35 Incompatible variable type [9]: url is declared to have type `str` but is used as type `None`.",
    "exception": "[Errno 2] No such file or directory: '/home/chowyi/TypeAnnotation_Study/GitHub/thesadru-genshinstats/genshinstats/gachalog.py'",
    "dd_fail": true
  },
  {
    "project": "thesadru/genshinstats",
    "commit": "4244cc8116ef29a37d56a47c73fbdac6a785c373",
    "filename": "genshinstats/gachalog.py",
    "min_patch_found": false,
    "full_warning_msg": "genshinstats/gachalog.py:83:50 Incompatible variable type [9]: logfile is declared to have type `str` but is used as type `None`.",
    "exception": "[Errno 2] No such file or directory: '/home/chowyi/TypeAnnotation_Study/GitHub/thesadru-genshinstats/genshinstats/gachalog.py'",
    "dd_fail": true
  },
  {
    "project": "thesadru/genshinstats",
    "commit": "4244cc8116ef29a37d56a47c73fbdac6a785c373",
    "filename": "genshinstats/gachalog.py",
    "min_patch_found": false,
    "full_warning_msg": "genshinstats/gachalog.py:94:8 Incompatible variable type [9]: authkey is declared to have type `str` but is used as type `Optional[str]`.",
    "exception": "[Errno 2] No such file or directory: '/home/chowyi/TypeAnnotation_Study/GitHub/thesadru-genshinstats/genshinstats/gachalog.py'",
    "dd_fail": true
  },
  {
    "project": "thesadru/genshinstats",
    "commit": "4244cc8116ef29a37d56a47c73fbdac6a785c373",
    "filename": "genshinstats/gachalog.py",
    "min_patch_found": false,
    "full_warning_msg": "genshinstats/gachalog.py:101:40 Incompatible variable type [9]: authkey is declared to have type `str` but is used as type `None`.",
    "exception": "[Errno 2] No such file or directory: '/home/chowyi/TypeAnnotation_Study/GitHub/thesadru-genshinstats/genshinstats/gachalog.py'",
    "dd_fail": true
  },
  {
    "project": "thesadru/genshinstats",
    "commit": "4244cc8116ef29a37d56a47c73fbdac6a785c373",
    "filename": "genshinstats/gachalog.py",
    "min_patch_found": false,
    "full_warning_msg": "genshinstats/gachalog.py:127:20 Incompatible variable type [9]: authkey is declared to have type `str` but is used as type `None`.",
    "exception": "[Errno 2] No such file or directory: '/home/chowyi/TypeAnnotation_Study/GitHub/thesadru-genshinstats/genshinstats/gachalog.py'",
    "dd_fail": true
  },
  {
    "project": "thesadru/genshinstats",
    "commit": "4244cc8116ef29a37d56a47c73fbdac6a785c373",
    "filename": "genshinstats/gachalog.py",
    "min_patch_found": false,
    "full_warning_msg": "genshinstats/gachalog.py:138:37 Incompatible variable type [9]: authkey is declared to have type `str` but is used as type `None`.",
    "exception": "[Errno 2] No such file or directory: '/home/chowyi/TypeAnnotation_Study/GitHub/thesadru-genshinstats/genshinstats/gachalog.py'",
    "dd_fail": true
  },
  {
    "project": "thesadru/genshinstats",
    "commit": "4244cc8116ef29a37d56a47c73fbdac6a785c373",
    "filename": "genshinstats/gachalog.py",
    "min_patch_found": false,
    "full_warning_msg": "genshinstats/gachalog.py:146:35 Incompatible variable type [9]: size is declared to have type `int` but is used as type `None`.",
    "exception": "[Errno 2] No such file or directory: '/home/chowyi/TypeAnnotation_Study/GitHub/thesadru-genshinstats/genshinstats/gachalog.py'",
    "dd_fail": true
  },
  {
    "project": "thesadru/genshinstats",
    "commit": "4244cc8116ef29a37d56a47c73fbdac6a785c373",
    "filename": "genshinstats/gachalog.py",
    "min_patch_found": false,
    "full_warning_msg": "genshinstats/gachalog.py:146:51 Incompatible variable type [9]: authkey is declared to have type `str` but is used as type `None`.",
    "exception": "[Errno 2] No such file or directory: '/home/chowyi/TypeAnnotation_Study/GitHub/thesadru-genshinstats/genshinstats/gachalog.py'",
    "dd_fail": true
  },
  {
    "project": "thesadru/genshinstats",
    "commit": "4244cc8116ef29a37d56a47c73fbdac6a785c373",
    "filename": "genshinstats/gachalog.py",
    "min_patch_found": false,
    "full_warning_msg": "genshinstats/gachalog.py:184:25 Incompatible variable type [9]: size is declared to have type `int` but is used as type `None`.",
    "exception": "[Errno 2] No such file or directory: '/home/chowyi/TypeAnnotation_Study/GitHub/thesadru-genshinstats/genshinstats/gachalog.py'",
    "dd_fail": true
  },
  {
    "project": "thesadru/genshinstats",
    "commit": "4244cc8116ef29a37d56a47c73fbdac6a785c373",
    "filename": "genshinstats/gachalog.py",
    "min_patch_found": false,
    "full_warning_msg": "genshinstats/gachalog.py:184:41 Incompatible variable type [9]: authkey is declared to have type `str` but is used as type `None`.",
    "exception": "[Errno 2] No such file or directory: '/home/chowyi/TypeAnnotation_Study/GitHub/thesadru-genshinstats/genshinstats/gachalog.py'",
    "dd_fail": true
  },
  {
    "project": "thesadru/genshinstats",
    "commit": "4244cc8116ef29a37d56a47c73fbdac6a785c373",
    "filename": "genshinstats/gachalog.py",
    "min_patch_found": false,
    "full_warning_msg": "genshinstats/gachalog.py:224:25 Incompatible variable type [9]: authkey is declared to have type `str` but is used as type `None`.",
    "exception": "[Errno 2] No such file or directory: '/home/chowyi/TypeAnnotation_Study/GitHub/thesadru-genshinstats/genshinstats/gachalog.py'",
    "dd_fail": true
  },
  {
    "project": "thesadru/genshinstats",
    "commit": "4244cc8116ef29a37d56a47c73fbdac6a785c373",
    "filename": "genshinstats/hoyolab.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/thesadru-genshinstats/genshinstats/hoyolab.py",
    "file_hunks_size": 10,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "genshinstats/hoyolab.py:77:38 Incompatible variable type [9]: region is declared to have type `str` but is used as type `None`.",
    "message": " region is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 77,
    "warning_line": "def _redeem_code(code: str, uid: int, region: str=None, game_biz: str='hk4e_global', sleep: bool=True) -> None:"
  },
  {
    "project": "thesadru/genshinstats",
    "commit": "4244cc8116ef29a37d56a47c73fbdac6a785c373",
    "filename": "genshinstats/hoyolab.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/thesadru-genshinstats/genshinstats/hoyolab.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "genshinstats/hoyolab.py:122:23 Incompatible variable type [9]: page_size is declared to have type `int` but is used as type `None`.",
    "message": " page_size is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 122,
    "warning_line": "def get_active_players(page_size: int=None, offset: int=0) -> list:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef get_uid_from_community(community_uid: int) -> Optional[int]:\n    \"\"\"Gets a uid with a community uid.\n    \n    This is so it's possible to search a user and then directly get the uid.\n",
        "source_code_len": 188,
        "target_code": "\ndef get_uid_from_hoyolab_uid(hoyolab_uid: int) -> Optional[int]:\n    \"\"\"Gets a uid with a community uid.\n\n    This is so it's possible to search a user and then directly get the uid.\n",
        "target_code_len": 184,
        "diff_format": "@@ -67,5 +69,5 @@\n \n-def get_uid_from_community(community_uid: int) -> Optional[int]:\n+def get_uid_from_hoyolab_uid(hoyolab_uid: int) -> Optional[int]:\n     \"\"\"Gets a uid with a community uid.\n-    \n+\n     This is so it's possible to search a user and then directly get the uid.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>def get_uid_from_community(community_uid: int) -> Optional[int]:\n    <IND>",
        "target_code_with_indent": "\n<DED>def get_uid_from_hoyolab_uid(hoyolab_uid: int) -> Optional[int]:\n    <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    \"\"\"\n    card = get_record_card(community_uid)\n    return int(card['game_role_id']) if card else None\n\ndef _redeem_code(code: str, uid: int, region: str=None, game_biz: str='hk4e_global', sleep: bool=True) -> None:\n    \"\"\"Redeems a single code. Use redeem_code instead.\"\"\"\n    region = region or recognize_server(uid)\n    try:\n        fetch_endpoint(\n            \"https://hk4e-api-os.mihoyo.com/common/apicdkey/api/webExchangeCdkey\",\n            params=dict(uid=uid,region=region,cdkey=code,game_biz=game_biz,lang='en')\n        )\n    except RedeemCooldown as e:\n        if not sleep:\n            raise\n        logger.debug(f'Sleeping {e.cooldown}s for code redemption.')\n        time.sleep(e.cooldown + 0.5) # for safety\n        _redeem_code(code,uid,region,game_biz,sleep=False)\n\ndef redeem_code(code: str, uid: int=None, sleep: bool=True) -> int:\n    \"\"\"Redeems a gift code for the currently signed in user.\n    \n    Api endpoint for https://genshin.mihoyo.com/en/gift.\n    \n    The code will be redeemed for every avalible account, \n",
        "source_code_len": 1039,
        "target_code": "    \"\"\"\n    card = get_record_card(hoyolab_uid)\n    return int(card['game_role_id']) if card else None\n\ndef redeem_code(code: str, uid: int = None) -> None:\n    \"\"\"Redeems a gift code for the currently signed in user.\n\n    Api endpoint for https://genshin.mihoyo.com/en/gift.\n    !!! This function requires account_id and cookie_token cookies !!!\n\n    The code will be redeemed for every avalible account, \n",
        "target_code_len": 407,
        "diff_format": "@@ -73,25 +75,11 @@\n     \"\"\"\n-    card = get_record_card(community_uid)\n+    card = get_record_card(hoyolab_uid)\n     return int(card['game_role_id']) if card else None\n \n-def _redeem_code(code: str, uid: int, region: str=None, game_biz: str='hk4e_global', sleep: bool=True) -> None:\n-    \"\"\"Redeems a single code. Use redeem_code instead.\"\"\"\n-    region = region or recognize_server(uid)\n-    try:\n-        fetch_endpoint(\n-            \"https://hk4e-api-os.mihoyo.com/common/apicdkey/api/webExchangeCdkey\",\n-            params=dict(uid=uid,region=region,cdkey=code,game_biz=game_biz,lang='en')\n-        )\n-    except RedeemCooldown as e:\n-        if not sleep:\n-            raise\n-        logger.debug(f'Sleeping {e.cooldown}s for code redemption.')\n-        time.sleep(e.cooldown + 0.5) # for safety\n-        _redeem_code(code,uid,region,game_biz,sleep=False)\n+def redeem_code(code: str, uid: int = None) -> None:\n+    \"\"\"Redeems a gift code for the currently signed in user.\n \n-def redeem_code(code: str, uid: int=None, sleep: bool=True) -> int:\n-    \"\"\"Redeems a gift code for the currently signed in user.\n-    \n     Api endpoint for https://genshin.mihoyo.com/en/gift.\n-    \n+    !!! This function requires account_id and cookie_token cookies !!!\n+\n     The code will be redeemed for every avalible account, \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    card = get_record_card(community_uid)\n    return int(card['game_role_id']) if card else None\n\n<DED>def _redeem_code(code: str, uid: int, region: str=None, game_biz: str='hk4e_global', sleep: bool=True) -> None:\n    <IND>\"\"\"Redeems a single code. Use redeem_code instead.\"\"\"\n    region = region or recognize_server(uid)\n    try:\n        <IND>fetch_endpoint(\n            \"https://hk4e-api-os.mihoyo.com/common/apicdkey/api/webExchangeCdkey\",\n            params=dict(uid=uid,region=region,cdkey=code,game_biz=game_biz,lang='en')\n        )\n    <DED>except RedeemCooldown as e:\n        <IND>if not sleep:\n            <IND>raise\n        <DED>logger.debug(f'Sleeping {e.cooldown}s for code redemption.')\n        time.sleep(e.cooldown + 0.5) # for safety\n        _redeem_code(code,uid,region,game_biz,sleep=False)\n\n<DED><DED>def redeem_code(code: str, uid: int=None, sleep: bool=True) -> int:\n    <IND>",
        "target_code_with_indent": "\n    card = get_record_card(hoyolab_uid)\n    return int(card['game_role_id']) if card else None\n\n<DED>def redeem_code(code: str, uid: int = None) -> None:\n    <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    Returns the amount of users it managed to claim codes for.\n    \n    Claiming code for every account will take 5s per account because of cooldowns.\n    This can be disable completely by setting sleep to False.\n    \n    Currently codes can only be claimed for global accounts, not chinese.\n    \"\"\"\n    if uid is not None:\n        _redeem_code(code,uid,sleep=sleep)\n        return 1\n    \n    success = 0\n    for account in get_game_accounts():\n        logger.info(f\"Redeeming code for {account['nickname']} ({account['game_uid']}).\")\n        try: \n            _redeem_code(code,account['game_uid'],account['region'],account['game_biz'],sleep=sleep)\n        except CodeRedeemException as e: \n            logger.info(f\"Redeem for {account['nickname']} ({account['game_uid']}) failed ({e}).\")\n        else: \n            success += 1\n    \n    return success\n\ndef get_active_players(page_size: int=None, offset: int=0) -> list:\n    \"\"\"Gets a list of recommended active players\n    \n    When page size is None, gets all avalible active players.\n    \"\"\"\n    return fetch_endpoint(\n        \"community/user/wapi/recommendActive\",\n        params=dict(page_size=page_size or 0xffff,offset=offset,gids=2)\n    )['list']\n",
        "source_code_len": 1208,
        "target_code": "    Returns the amount of users it managed to claim codes for.\n\n    You can claim codes only every 5s so you must sleep between claims. \n    The function sleeps for you when claiming for every account \n    but you must sleep yourself when passing in a uid or when an error is encountered.\n\n    Currently codes can only be claimed for overseas accounts, not chinese.\n    \"\"\"\n    if uid is not None:\n        fetch_endpoint(\n            \"https://hk4e-api-os.mihoyo.com/common/apicdkey/api/webExchangeCdkey\",\n            params=dict(uid=uid, region=recognize_server(uid),\n                        cdkey=code, game_biz='hk4e_global', lang='en')\n        )\n    else:\n        for account in get_game_accounts():\n            if account['level'] < 10:\n                continue # Cannot claim codes for account with adventure rank lower than 10.\n            redeem_code(code, account['game_uid'])\n            time.sleep(5) # there's a ratelimit of 1 request every 5 seconds\n",
        "target_code_len": 962,
        "diff_format": "@@ -99,32 +87,20 @@\n     Returns the amount of users it managed to claim codes for.\n-    \n-    Claiming code for every account will take 5s per account because of cooldowns.\n-    This can be disable completely by setting sleep to False.\n-    \n-    Currently codes can only be claimed for global accounts, not chinese.\n+\n+    You can claim codes only every 5s so you must sleep between claims. \n+    The function sleeps for you when claiming for every account \n+    but you must sleep yourself when passing in a uid or when an error is encountered.\n+\n+    Currently codes can only be claimed for overseas accounts, not chinese.\n     \"\"\"\n     if uid is not None:\n-        _redeem_code(code,uid,sleep=sleep)\n-        return 1\n-    \n-    success = 0\n-    for account in get_game_accounts():\n-        logger.info(f\"Redeeming code for {account['nickname']} ({account['game_uid']}).\")\n-        try: \n-            _redeem_code(code,account['game_uid'],account['region'],account['game_biz'],sleep=sleep)\n-        except CodeRedeemException as e: \n-            logger.info(f\"Redeem for {account['nickname']} ({account['game_uid']}) failed ({e}).\")\n-        else: \n-            success += 1\n-    \n-    return success\n-\n-def get_active_players(page_size: int=None, offset: int=0) -> list:\n-    \"\"\"Gets a list of recommended active players\n-    \n-    When page size is None, gets all avalible active players.\n-    \"\"\"\n-    return fetch_endpoint(\n-        \"community/user/wapi/recommendActive\",\n-        params=dict(page_size=page_size or 0xffff,offset=offset,gids=2)\n-    )['list']\n+        fetch_endpoint(\n+            \"https://hk4e-api-os.mihoyo.com/common/apicdkey/api/webExchangeCdkey\",\n+            params=dict(uid=uid, region=recognize_server(uid),\n+                        cdkey=code, game_biz='hk4e_global', lang='en')\n+        )\n+    else:\n+        for account in get_game_accounts():\n+            if account['level'] < 10:\n+                continue # Cannot claim codes for account with adventure rank lower than 10.\n+            redeem_code(code, account['game_uid'])\n+            time.sleep(5) # there's a ratelimit of 1 request every 5 seconds\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    if uid is not None:\n        <IND>_redeem_code(code,uid,sleep=sleep)\n        return 1\n    \n    <DED>success = 0\n    for account in get_game_accounts():\n        <IND>logger.info(f\"Redeeming code for {account['nickname']} ({account['game_uid']}).\")\n        try: \n            <IND>_redeem_code(code,account['game_uid'],account['region'],account['game_biz'],sleep=sleep)\n        <DED>except CodeRedeemException as e: \n            <IND>logger.info(f\"Redeem for {account['nickname']} ({account['game_uid']}) failed ({e}).\")\n        <DED>else: \n            <IND>success += 1\n    \n    <DED><DED>return success\n\n<DED>def get_active_players(page_size: int=None, offset: int=0) -> list:\n    <IND>\"\"\"Gets a list of recommended active players\n    \n    When page size is None, gets all avalible active players.\n    \"\"\"\n    return fetch_endpoint(\n        \"community/user/wapi/recommendActive\",\n        params=dict(page_size=page_size or 0xffff,offset=offset,gids=2)\n    )['list']\n",
        "target_code_with_indent": "\n    if uid is not None:\n        <IND>fetch_endpoint(\n            \"https://hk4e-api-os.mihoyo.com/common/apicdkey/api/webExchangeCdkey\",\n            params=dict(uid=uid, region=recognize_server(uid),\n                        cdkey=code, game_biz='hk4e_global', lang='en')\n        )\n    <DED>else:\n        <IND>for account in get_game_accounts():\n            <IND>if account['level'] < 10:\n                <IND>continue # Cannot claim codes for account with adventure rank lower than 10.\n            <DED>redeem_code(code, account['game_uid'])\n            time.sleep(5) # there's a ratelimit of 1 request every 5 seconds\n"
      }
    ]
  },
  {
    "project": "thesadru/genshinstats",
    "commit": "4244cc8116ef29a37d56a47c73fbdac6a785c373",
    "filename": "genshinstats/pretty.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/thesadru-genshinstats/genshinstats/pretty.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "genshinstats/pretty.py:191:35 Incompatible variable type [9]: gacha_name is declared to have type `str` but is used as type `None`.",
    "message": " gacha_name is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 191,
    "warning_line": "def prettify_gacha_log(data: list, gacha_name: str = None):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef prettify_spiral_abyss(data: dict):\n    \"\"\"Returns a prettified version of get_spiral_abyss.\"\"\"\n    fchars = lambda d: [{\n        \"value\": a[\"value\"],\n        \"name\":_recognize_character_icon(a[\"avatar_icon\"]),\n        \"rarity\":a[\"rarity\"],\n        \"icon\":a[\"avatar_icon\"],\n        \"id\":a[\"avatar_id\"],\n    } for a in d]\n    todate = lambda x: datetime.fromtimestamp(int(x)).strftime(\"%Y-%m-%d\")\n    totime = lambda x: datetime.fromtimestamp(int(x)).isoformat(' ')\n    return {\n        \"season\": data[\"schedule_id\"],\n        \"season_start_time\": todate(data[\"start_time\"]),\n        \"season_end_time\":   todate(data[\"end_time\"]),\n        \"stats\": {\n            \"total_battles\": data[\"total_battle_times\"],\n            \"total_wins\": data[\"total_win_times\"],\n            \"max_floor\": data[\"max_floor\"],\n            \"total_stars\": data[\"total_star\"],\n        },\n        \"character_ranks\": {\n            \"most_chambers_won\": fchars(data[\"reveal_rank\"]),\n            \"most_chambers_lost\": fchars(data[\"defeat_rank\"]),\n            \"strongest_hit\": fchars(data[\"damage_rank\"]),\n            \"most_damage_taken\": fchars(data[\"take_damage_rank\"]),\n            \"most_bursts_used\": fchars(data[\"normal_skill_rank\"]),\n            \"most_skills_used\": fchars(data[\"energy_skill_rank\"]),\n        },\n        \"floors\": [{\n            \"floor\": f[\"index\"],\n            \"stars\": f[\"star\"],\n            \"max_stars\": f[\"max_star\"],\n            \"start\": totime(f[\"levels\"][0][\"battles\"][0][\"timestamp\"]),\n            \"icon\": f[\"icon\"],\n            \"chambers\":[{\n                \"chamber\": l[\"index\"],\n                \"stars\": l[\"star\"],\n                \"max_stars\": l[\"max_star\"],\n                \"has_halves\":len(l[\"battles\"]) == 2,\n                \"battles\":[{\n                    \"half\": b[\"index\"],\n                    \"timestamp\": totime(b[\"timestamp\"]),\n                    \"characters\":[{\n                        \"name\": _recognize_character_icon(c[\"icon\"]),\n                        \"rarity\": c[\"rarity\"],\n                        \"level\": c[\"level\"],\n                        \"icon\": c[\"icon\"],\n                        \"id\": c[\"id\"],\n\n                    } for c in b[\"avatars\"]]\n                } for b in l[\"battles\"]]\n            } for l in f[\"levels\"]]\n        } for f in data[\"floors\"]]\n    }\n\ndef prettify_character(data: dict):\n    \"\"\"Returns a prettified version of a single item from get_characters.\"\"\"\n    weapon = data[\"weapon\"]\n    return {\n        \"name\": data[\"name\"],\n        \"alt_name\":{\n            \"Traveler\":\"Aether\" if \"Boy\" in data[\"icon\"] else \"Lumine\",\n            \"Venti\":\"Barbatos\",\n            \"Zhongli\":\"Morax\",\n            \"Albedo\":\"Kreideprinz\",\n            \"Tartaglia\":\"Childe\",\n        }.get(data[\"name\"],None),\n        \"rarity\": data[\"rarity\"],\n        \"element\": data[\"element\"] if data[\"name\"]!=\"Traveler\" else {\n            71:\"Anemo\",\n            91:\"Geo\"\n        }[data[\"constellations\"][0][\"id\"]], # traveler elements\n        \"level\": data[\"level\"],\n        \"ascension\": ceil(data[\"level\"]//10)-1,\n        \"friendship\": data[\"fetter\"],\n        \"constellation\": sum(c[\"is_actived\"] for c in data[\"constellations\"]),\n        \"icon\": data[\"image\"],\n        \"id\": data[\"id\"],\n        \"weapon\": {\n            \"name\": weapon[\"name\"],\n            \"rarity\": weapon[\"rarity\"],\n            \"type\": weapon[\"type_name\"],\n            \"level\": weapon[\"level\"],\n            \"ascension\": weapon[\"promote_level\"],\n            \"refinement\": weapon[\"affix_level\"],\n            \"description\": weapon[\"desc\"],\n            \"icon\": weapon[\"icon\"],\n            \"id\": weapon[\"id\"],\n        },\n",
        "source_code_len": 3591,
        "target_code": "\ndef prettify_characters(data):\n    return [{\n        \"name\": i[\"name\"],\n        \"alt_name\":{\n            \"Traveler\": \"Aether\" if \"Boy\" in i[\"icon\"] else \"Lumine\",\n            \"Venti\": \"Barbatos\",\n            \"Zhongli\": \"Morax\",\n            \"Albedo\": \"Kreideprinz\",\n            \"Tartaglia\": \"Childe\",\n        }.get(i[\"name\"],None),\n        \"rarity\": i[\"rarity\"],\n        \"element\": i[\"element\"] if i[\"name\"]!=\"Traveler\" else {\n            71:\"Anemo\",\n            91:\"Geo\"\n        }[i[\"constellations\"][0][\"id\"]], # traveler elements\n        \"level\": i[\"level\"],\n        \"ascension\": ceil(i[\"level\"]//10)-1,\n        \"friendship\": i[\"fetter\"],\n        \"constellation\": sum(c[\"is_actived\"] for c in i[\"constellations\"]),\n        \"icon\": i[\"image\"],\n        \"id\": i[\"id\"],\n        \"weapon\": {\n            \"name\": i[\"weapon\"][\"name\"],\n            \"rarity\": i[\"weapon\"][\"rarity\"],\n            \"type\": i[\"weapon\"][\"type_name\"],\n            \"level\": i[\"weapon\"][\"level\"],\n            \"ascension\": i[\"weapon\"][\"promote_level\"],\n            \"refinement\": i[\"weapon\"][\"affix_level\"],\n            \"description\": i[\"weapon\"][\"desc\"],\n            \"icon\": i[\"weapon\"][\"icon\"],\n            \"id\": i[\"weapon\"][\"id\"],\n        },\n",
        "target_code_len": 1210,
        "diff_format": "@@ -60,91 +61,33 @@\n \n-def prettify_spiral_abyss(data: dict):\n-    \"\"\"Returns a prettified version of get_spiral_abyss.\"\"\"\n-    fchars = lambda d: [{\n-        \"value\": a[\"value\"],\n-        \"name\":_recognize_character_icon(a[\"avatar_icon\"]),\n-        \"rarity\":a[\"rarity\"],\n-        \"icon\":a[\"avatar_icon\"],\n-        \"id\":a[\"avatar_id\"],\n-    } for a in d]\n-    todate = lambda x: datetime.fromtimestamp(int(x)).strftime(\"%Y-%m-%d\")\n-    totime = lambda x: datetime.fromtimestamp(int(x)).isoformat(' ')\n-    return {\n-        \"season\": data[\"schedule_id\"],\n-        \"season_start_time\": todate(data[\"start_time\"]),\n-        \"season_end_time\":   todate(data[\"end_time\"]),\n-        \"stats\": {\n-            \"total_battles\": data[\"total_battle_times\"],\n-            \"total_wins\": data[\"total_win_times\"],\n-            \"max_floor\": data[\"max_floor\"],\n-            \"total_stars\": data[\"total_star\"],\n-        },\n-        \"character_ranks\": {\n-            \"most_chambers_won\": fchars(data[\"reveal_rank\"]),\n-            \"most_chambers_lost\": fchars(data[\"defeat_rank\"]),\n-            \"strongest_hit\": fchars(data[\"damage_rank\"]),\n-            \"most_damage_taken\": fchars(data[\"take_damage_rank\"]),\n-            \"most_bursts_used\": fchars(data[\"normal_skill_rank\"]),\n-            \"most_skills_used\": fchars(data[\"energy_skill_rank\"]),\n-        },\n-        \"floors\": [{\n-            \"floor\": f[\"index\"],\n-            \"stars\": f[\"star\"],\n-            \"max_stars\": f[\"max_star\"],\n-            \"start\": totime(f[\"levels\"][0][\"battles\"][0][\"timestamp\"]),\n-            \"icon\": f[\"icon\"],\n-            \"chambers\":[{\n-                \"chamber\": l[\"index\"],\n-                \"stars\": l[\"star\"],\n-                \"max_stars\": l[\"max_star\"],\n-                \"has_halves\":len(l[\"battles\"]) == 2,\n-                \"battles\":[{\n-                    \"half\": b[\"index\"],\n-                    \"timestamp\": totime(b[\"timestamp\"]),\n-                    \"characters\":[{\n-                        \"name\": _recognize_character_icon(c[\"icon\"]),\n-                        \"rarity\": c[\"rarity\"],\n-                        \"level\": c[\"level\"],\n-                        \"icon\": c[\"icon\"],\n-                        \"id\": c[\"id\"],\n-\n-                    } for c in b[\"avatars\"]]\n-                } for b in l[\"battles\"]]\n-            } for l in f[\"levels\"]]\n-        } for f in data[\"floors\"]]\n-    }\n-\n-def prettify_character(data: dict):\n-    \"\"\"Returns a prettified version of a single item from get_characters.\"\"\"\n-    weapon = data[\"weapon\"]\n-    return {\n-        \"name\": data[\"name\"],\n+def prettify_characters(data):\n+    return [{\n+        \"name\": i[\"name\"],\n         \"alt_name\":{\n-            \"Traveler\":\"Aether\" if \"Boy\" in data[\"icon\"] else \"Lumine\",\n-            \"Venti\":\"Barbatos\",\n-            \"Zhongli\":\"Morax\",\n-            \"Albedo\":\"Kreideprinz\",\n-            \"Tartaglia\":\"Childe\",\n-        }.get(data[\"name\"],None),\n-        \"rarity\": data[\"rarity\"],\n-        \"element\": data[\"element\"] if data[\"name\"]!=\"Traveler\" else {\n+            \"Traveler\": \"Aether\" if \"Boy\" in i[\"icon\"] else \"Lumine\",\n+            \"Venti\": \"Barbatos\",\n+            \"Zhongli\": \"Morax\",\n+            \"Albedo\": \"Kreideprinz\",\n+            \"Tartaglia\": \"Childe\",\n+        }.get(i[\"name\"],None),\n+        \"rarity\": i[\"rarity\"],\n+        \"element\": i[\"element\"] if i[\"name\"]!=\"Traveler\" else {\n             71:\"Anemo\",\n             91:\"Geo\"\n-        }[data[\"constellations\"][0][\"id\"]], # traveler elements\n-        \"level\": data[\"level\"],\n-        \"ascension\": ceil(data[\"level\"]//10)-1,\n-        \"friendship\": data[\"fetter\"],\n-        \"constellation\": sum(c[\"is_actived\"] for c in data[\"constellations\"]),\n-        \"icon\": data[\"image\"],\n-        \"id\": data[\"id\"],\n+        }[i[\"constellations\"][0][\"id\"]], # traveler elements\n+        \"level\": i[\"level\"],\n+        \"ascension\": ceil(i[\"level\"]//10)-1,\n+        \"friendship\": i[\"fetter\"],\n+        \"constellation\": sum(c[\"is_actived\"] for c in i[\"constellations\"]),\n+        \"icon\": i[\"image\"],\n+        \"id\": i[\"id\"],\n         \"weapon\": {\n-            \"name\": weapon[\"name\"],\n-            \"rarity\": weapon[\"rarity\"],\n-            \"type\": weapon[\"type_name\"],\n-            \"level\": weapon[\"level\"],\n-            \"ascension\": weapon[\"promote_level\"],\n-            \"refinement\": weapon[\"affix_level\"],\n-            \"description\": weapon[\"desc\"],\n-            \"icon\": weapon[\"icon\"],\n-            \"id\": weapon[\"id\"],\n+            \"name\": i[\"weapon\"][\"name\"],\n+            \"rarity\": i[\"weapon\"][\"rarity\"],\n+            \"type\": i[\"weapon\"][\"type_name\"],\n+            \"level\": i[\"weapon\"][\"level\"],\n+            \"ascension\": i[\"weapon\"][\"promote_level\"],\n+            \"refinement\": i[\"weapon\"][\"affix_level\"],\n+            \"description\": i[\"weapon\"][\"desc\"],\n+            \"icon\": i[\"weapon\"][\"icon\"],\n+            \"id\": i[\"weapon\"][\"id\"],\n         },\n",
        "source_code_with_indent": "\n<DED>def prettify_spiral_abyss(data: dict):\n    <IND>\"\"\"Returns a prettified version of get_spiral_abyss.\"\"\"\n    fchars = lambda d: [{\n        \"value\": a[\"value\"],\n        \"name\":_recognize_character_icon(a[\"avatar_icon\"]),\n        \"rarity\":a[\"rarity\"],\n        \"icon\":a[\"avatar_icon\"],\n        \"id\":a[\"avatar_id\"],\n    } for a in d]\n    todate = lambda x: datetime.fromtimestamp(int(x)).strftime(\"%Y-%m-%d\")\n    totime = lambda x: datetime.fromtimestamp(int(x)).isoformat(' ')\n    return {\n        \"season\": data[\"schedule_id\"],\n        \"season_start_time\": todate(data[\"start_time\"]),\n        \"season_end_time\":   todate(data[\"end_time\"]),\n        \"stats\": {\n            \"total_battles\": data[\"total_battle_times\"],\n            \"total_wins\": data[\"total_win_times\"],\n            \"max_floor\": data[\"max_floor\"],\n            \"total_stars\": data[\"total_star\"],\n        },\n        \"character_ranks\": {\n            \"most_chambers_won\": fchars(data[\"reveal_rank\"]),\n            \"most_chambers_lost\": fchars(data[\"defeat_rank\"]),\n            \"strongest_hit\": fchars(data[\"damage_rank\"]),\n            \"most_damage_taken\": fchars(data[\"take_damage_rank\"]),\n            \"most_bursts_used\": fchars(data[\"normal_skill_rank\"]),\n            \"most_skills_used\": fchars(data[\"energy_skill_rank\"]),\n        },\n        \"floors\": [{\n            \"floor\": f[\"index\"],\n            \"stars\": f[\"star\"],\n            \"max_stars\": f[\"max_star\"],\n            \"start\": totime(f[\"levels\"][0][\"battles\"][0][\"timestamp\"]),\n            \"icon\": f[\"icon\"],\n            \"chambers\":[{\n                \"chamber\": l[\"index\"],\n                \"stars\": l[\"star\"],\n                \"max_stars\": l[\"max_star\"],\n                \"has_halves\":len(l[\"battles\"]) == 2,\n                \"battles\":[{\n                    \"half\": b[\"index\"],\n                    \"timestamp\": totime(b[\"timestamp\"]),\n                    \"characters\":[{\n                        \"name\": _recognize_character_icon(c[\"icon\"]),\n                        \"rarity\": c[\"rarity\"],\n                        \"level\": c[\"level\"],\n                        \"icon\": c[\"icon\"],\n                        \"id\": c[\"id\"],\n\n                    } for c in b[\"avatars\"]]\n                } for b in l[\"battles\"]]\n            } for l in f[\"levels\"]]\n        } for f in data[\"floors\"]]\n    }\n\n<DED>def prettify_character(data: dict):\n    <IND>\"\"\"Returns a prettified version of a single item from get_characters.\"\"\"\n    weapon = data[\"weapon\"]\n    return {\n        \"name\": data[\"name\"],\n        \"alt_name\":{\n            \"Traveler\":\"Aether\" if \"Boy\" in data[\"icon\"] else \"Lumine\",\n            \"Venti\":\"Barbatos\",\n            \"Zhongli\":\"Morax\",\n            \"Albedo\":\"Kreideprinz\",\n            \"Tartaglia\":\"Childe\",\n        }.get(data[\"name\"],None),\n        \"rarity\": data[\"rarity\"],\n        \"element\": data[\"element\"] if data[\"name\"]!=\"Traveler\" else {\n            71:\"Anemo\",\n            91:\"Geo\"\n        }[data[\"constellations\"][0][\"id\"]], # traveler elements\n        \"level\": data[\"level\"],\n        \"ascension\": ceil(data[\"level\"]//10)-1,\n        \"friendship\": data[\"fetter\"],\n        \"constellation\": sum(c[\"is_actived\"] for c in data[\"constellations\"]),\n        \"icon\": data[\"image\"],\n        \"id\": data[\"id\"],\n        \"weapon\": {\n            \"name\": weapon[\"name\"],\n            \"rarity\": weapon[\"rarity\"],\n            \"type\": weapon[\"type_name\"],\n            \"level\": weapon[\"level\"],\n            \"ascension\": weapon[\"promote_level\"],\n            \"refinement\": weapon[\"affix_level\"],\n            \"description\": weapon[\"desc\"],\n            \"icon\": weapon[\"icon\"],\n            \"id\": weapon[\"id\"],\n        },\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def prettify_characters(data):\n    <IND>return [{\n        \"name\": i[\"name\"],\n        \"alt_name\":{\n            \"Traveler\": \"Aether\" if \"Boy\" in i[\"icon\"] else \"Lumine\",\n            \"Venti\": \"Barbatos\",\n            \"Zhongli\": \"Morax\",\n            \"Albedo\": \"Kreideprinz\",\n            \"Tartaglia\": \"Childe\",\n        }.get(i[\"name\"],None),\n        \"rarity\": i[\"rarity\"],\n        \"element\": i[\"element\"] if i[\"name\"]!=\"Traveler\" else {\n            71:\"Anemo\",\n            91:\"Geo\"\n        }[i[\"constellations\"][0][\"id\"]], # traveler elements\n        \"level\": i[\"level\"],\n        \"ascension\": ceil(i[\"level\"]//10)-1,\n        \"friendship\": i[\"fetter\"],\n        \"constellation\": sum(c[\"is_actived\"] for c in i[\"constellations\"]),\n        \"icon\": i[\"image\"],\n        \"id\": i[\"id\"],\n        \"weapon\": {\n            \"name\": i[\"weapon\"][\"name\"],\n            \"rarity\": i[\"weapon\"][\"rarity\"],\n            \"type\": i[\"weapon\"][\"type_name\"],\n            \"level\": i[\"weapon\"][\"level\"],\n            \"ascension\": i[\"weapon\"][\"promote_level\"],\n            \"refinement\": i[\"weapon\"][\"affix_level\"],\n            \"description\": i[\"weapon\"][\"desc\"],\n            \"icon\": i[\"weapon\"][\"icon\"],\n            \"id\": i[\"weapon\"][\"id\"],\n        },\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            \"id\": c[\"id\"],\n        } for c in data[\"constellations\"]]\n    }\n\ndef prettify_characters(data: list):\n    \"\"\"Returns a prettified version of get_characters.\"\"\"\n    return [prettify_character(i) for i in data]\n\ndef prettify_gacha_log(data: list, gacha_name: str = None):\n    return [{\n",
        "source_code_len": 296,
        "target_code": "            \"id\": c[\"id\"],\n        } for c in i[\"constellations\"]]\n    } for i in data]\n\ndef prettify_spiral_abyss(data):\n    fchars = lambda d: [{\n        \"value\": a[\"value\"],\n        \"name\":_recognize_character_icon(a[\"avatar_icon\"]),\n        \"rarity\":a[\"rarity\"],\n        \"icon\":a[\"avatar_icon\"],\n        \"id\":a[\"avatar_id\"],\n    } for a in d]\n    todate = lambda x: datetime.fromtimestamp(int(x)).strftime(\"%Y-%m-%d\")\n    totime = lambda x: datetime.fromtimestamp(int(x)).isoformat(' ')\n    return {\n        \"season\": data[\"schedule_id\"],\n        \"season_start_time\": todate(data[\"start_time\"]),\n        \"season_end_time\": todate(data[\"end_time\"]),\n        \"stats\": {\n            \"total_battles\": data[\"total_battle_times\"],\n            \"total_wins\": data[\"total_win_times\"],\n            \"max_floor\": data[\"max_floor\"],\n            \"total_stars\": data[\"total_star\"],\n        },\n        \"character_ranks\": {\n            \"most_uses\": fchars(data[\"reveal_rank\"]),\n            \"most_kills\": fchars(data[\"defeat_rank\"]),\n            \"strongest_hit\": fchars(data[\"damage_rank\"]),\n            \"most_damage_taken\": fchars(data[\"take_damage_rank\"]),\n            \"most_bursts_used\": fchars(data[\"normal_skill_rank\"]),\n            \"most_skills_used\": fchars(data[\"energy_skill_rank\"]),\n        },\n        \"floors\": [{\n            \"floor\": f[\"index\"],\n            \"stars\": f[\"star\"],\n            \"max_stars\": f[\"max_star\"],\n            \"start\": totime(f[\"levels\"][0][\"battles\"][0][\"timestamp\"]),\n            \"icon\": f[\"icon\"],\n            \"chambers\":[{\n                \"chamber\": l[\"index\"],\n                \"stars\": l[\"star\"],\n                \"max_stars\": l[\"max_star\"],\n                \"has_halves\":len(l[\"battles\"]) == 2,\n                \"battles\":[{\n                    \"half\": b[\"index\"],\n                    \"timestamp\": totime(b[\"timestamp\"]),\n                    \"characters\":[{\n                        \"name\": _recognize_character_icon(c[\"icon\"]),\n                        \"rarity\": c[\"rarity\"],\n                        \"level\": c[\"level\"],\n                        \"icon\": c[\"icon\"],\n                        \"id\": c[\"id\"],\n\n                    } for c in b[\"avatars\"]]\n                } for b in l[\"battles\"]]\n            } for l in f[\"levels\"]]\n        } for f in data[\"floors\"]]\n    }\n\ndef prettify_wish_history(data, banner_name = None):\n    return [{\n",
        "target_code_len": 2355,
        "diff_format": "@@ -183,10 +126,61 @@\n             \"id\": c[\"id\"],\n-        } for c in data[\"constellations\"]]\n+        } for c in i[\"constellations\"]]\n+    } for i in data]\n+\n+def prettify_spiral_abyss(data):\n+    fchars = lambda d: [{\n+        \"value\": a[\"value\"],\n+        \"name\":_recognize_character_icon(a[\"avatar_icon\"]),\n+        \"rarity\":a[\"rarity\"],\n+        \"icon\":a[\"avatar_icon\"],\n+        \"id\":a[\"avatar_id\"],\n+    } for a in d]\n+    todate = lambda x: datetime.fromtimestamp(int(x)).strftime(\"%Y-%m-%d\")\n+    totime = lambda x: datetime.fromtimestamp(int(x)).isoformat(' ')\n+    return {\n+        \"season\": data[\"schedule_id\"],\n+        \"season_start_time\": todate(data[\"start_time\"]),\n+        \"season_end_time\": todate(data[\"end_time\"]),\n+        \"stats\": {\n+            \"total_battles\": data[\"total_battle_times\"],\n+            \"total_wins\": data[\"total_win_times\"],\n+            \"max_floor\": data[\"max_floor\"],\n+            \"total_stars\": data[\"total_star\"],\n+        },\n+        \"character_ranks\": {\n+            \"most_uses\": fchars(data[\"reveal_rank\"]),\n+            \"most_kills\": fchars(data[\"defeat_rank\"]),\n+            \"strongest_hit\": fchars(data[\"damage_rank\"]),\n+            \"most_damage_taken\": fchars(data[\"take_damage_rank\"]),\n+            \"most_bursts_used\": fchars(data[\"normal_skill_rank\"]),\n+            \"most_skills_used\": fchars(data[\"energy_skill_rank\"]),\n+        },\n+        \"floors\": [{\n+            \"floor\": f[\"index\"],\n+            \"stars\": f[\"star\"],\n+            \"max_stars\": f[\"max_star\"],\n+            \"start\": totime(f[\"levels\"][0][\"battles\"][0][\"timestamp\"]),\n+            \"icon\": f[\"icon\"],\n+            \"chambers\":[{\n+                \"chamber\": l[\"index\"],\n+                \"stars\": l[\"star\"],\n+                \"max_stars\": l[\"max_star\"],\n+                \"has_halves\":len(l[\"battles\"]) == 2,\n+                \"battles\":[{\n+                    \"half\": b[\"index\"],\n+                    \"timestamp\": totime(b[\"timestamp\"]),\n+                    \"characters\":[{\n+                        \"name\": _recognize_character_icon(c[\"icon\"]),\n+                        \"rarity\": c[\"rarity\"],\n+                        \"level\": c[\"level\"],\n+                        \"icon\": c[\"icon\"],\n+                        \"id\": c[\"id\"],\n+\n+                    } for c in b[\"avatars\"]]\n+                } for b in l[\"battles\"]]\n+            } for l in f[\"levels\"]]\n+        } for f in data[\"floors\"]]\n     }\n \n-def prettify_characters(data: list):\n-    \"\"\"Returns a prettified version of get_characters.\"\"\"\n-    return [prettify_character(i) for i in data]\n-\n-def prettify_gacha_log(data: list, gacha_name: str = None):\n+def prettify_wish_history(data, banner_name = None):\n     return [{\n",
        "source_code_with_indent": "            \"id\": c[\"id\"],\n        } for c in data[\"constellations\"]]\n    }\n\n<DED>def prettify_characters(data: list):\n    <IND>\"\"\"Returns a prettified version of get_characters.\"\"\"\n    return [prettify_character(i) for i in data]\n\n<DED>def prettify_gacha_log(data: list, gacha_name: str = None):\n    <IND>return [{\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            \"id\": c[\"id\"],\n        } for c in i[\"constellations\"]]\n    } for i in data]\n\n<DED>def prettify_spiral_abyss(data):\n    <IND>fchars = lambda d: [{\n        \"value\": a[\"value\"],\n        \"name\":_recognize_character_icon(a[\"avatar_icon\"]),\n        \"rarity\":a[\"rarity\"],\n        \"icon\":a[\"avatar_icon\"],\n        \"id\":a[\"avatar_id\"],\n    } for a in d]\n    todate = lambda x: datetime.fromtimestamp(int(x)).strftime(\"%Y-%m-%d\")\n    totime = lambda x: datetime.fromtimestamp(int(x)).isoformat(' ')\n    return {\n        \"season\": data[\"schedule_id\"],\n        \"season_start_time\": todate(data[\"start_time\"]),\n        \"season_end_time\": todate(data[\"end_time\"]),\n        \"stats\": {\n            \"total_battles\": data[\"total_battle_times\"],\n            \"total_wins\": data[\"total_win_times\"],\n            \"max_floor\": data[\"max_floor\"],\n            \"total_stars\": data[\"total_star\"],\n        },\n        \"character_ranks\": {\n            \"most_uses\": fchars(data[\"reveal_rank\"]),\n            \"most_kills\": fchars(data[\"defeat_rank\"]),\n            \"strongest_hit\": fchars(data[\"damage_rank\"]),\n            \"most_damage_taken\": fchars(data[\"take_damage_rank\"]),\n            \"most_bursts_used\": fchars(data[\"normal_skill_rank\"]),\n            \"most_skills_used\": fchars(data[\"energy_skill_rank\"]),\n        },\n        \"floors\": [{\n            \"floor\": f[\"index\"],\n            \"stars\": f[\"star\"],\n            \"max_stars\": f[\"max_star\"],\n            \"start\": totime(f[\"levels\"][0][\"battles\"][0][\"timestamp\"]),\n            \"icon\": f[\"icon\"],\n            \"chambers\":[{\n                \"chamber\": l[\"index\"],\n                \"stars\": l[\"star\"],\n                \"max_stars\": l[\"max_star\"],\n                \"has_halves\":len(l[\"battles\"]) == 2,\n                \"battles\":[{\n                    \"half\": b[\"index\"],\n                    \"timestamp\": totime(b[\"timestamp\"]),\n                    \"characters\":[{\n                        \"name\": _recognize_character_icon(c[\"icon\"]),\n                        \"rarity\": c[\"rarity\"],\n                        \"level\": c[\"level\"],\n                        \"icon\": c[\"icon\"],\n                        \"id\": c[\"id\"],\n\n                    } for c in b[\"avatars\"]]\n                } for b in l[\"battles\"]]\n            } for l in f[\"levels\"]]\n        } for f in data[\"floors\"]]\n    }\n\n<DED>def prettify_wish_history(data, banner_name = None):\n    <IND>return [{\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]