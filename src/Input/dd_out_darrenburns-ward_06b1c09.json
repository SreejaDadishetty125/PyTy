[
  {
    "project": "darrenburns/ward",
    "commit": "06b1c09b07d5f3ec7b882ba26d1b2bc6cd816db4",
    "filename": "ward/_fixtures.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/darrenburns-ward/ward/_fixtures.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ward/_fixtures.py:41:8 Incompatible return type [7]: Expected `Dict[str, typing.Any]` but got `Dict[Union[Path, Scope, str], Dict[str, Fixture]]`.",
    "message": " Expected `Dict[str, typing.Any]` but got `Dict[Union[Path, Scope, str], Dict[str, Fixture]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 41,
    "warning_line": "        return self._scope_cache[scope]",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from pathlib import Path\nfrom typing import Any, Collection, Dict, Iterable, Mapping, Tuple, Union\n\n",
        "source_code_len": 100,
        "target_code": "from pathlib import Path\nfrom typing import (\n    Any,\n    Collection,\n    Dict,\n    Iterable,\n    List,\n    Mapping,\n    Optional,\n    Tuple,\n    Union,\n)\n\n",
        "target_code_len": 157,
        "diff_format": "@@ -3,3 +3,13 @@\n from pathlib import Path\n-from typing import Any, Collection, Dict, Iterable, Mapping, Tuple, Union\n+from typing import (\n+    Any,\n+    Collection,\n+    Dict,\n+    Iterable,\n+    List,\n+    Mapping,\n+    Optional,\n+    Tuple,\n+    Union,\n+)\n \n",
        "source_code_with_indent": "from pathlib import Path\nfrom typing import Any, Collection, Dict, Iterable, Mapping, Tuple, Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from pathlib import Path\nfrom typing import (\n    Any,\n    Collection,\n    Dict,\n    Iterable,\n    List,\n    Mapping,\n    Optional,\n    Tuple,\n    Union,\n)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _get_subcache(self, scope: Scope) -> Dict[str, Any]:\n        return self._scope_cache[scope]\n",
        "source_code_len": 102,
        "target_code": "\n    def _get_subcache(self, scope: Scope) -> Dict[ScopeKey, Dict[FixtureKey, Fixture]]:\n        return self._scope_cache[scope]\n",
        "target_code_len": 129,
        "diff_format": "@@ -39,3 +49,3 @@\n \n-    def _get_subcache(self, scope: Scope) -> Dict[str, Any]:\n+    def _get_subcache(self, scope: Scope) -> Dict[ScopeKey, Dict[FixtureKey, Fixture]]:\n         return self._scope_cache[scope]\n",
        "source_code_with_indent": "\n    def _get_subcache(self, scope: Scope) -> Dict[str, Any]:\n        <IND>return self._scope_cache[scope]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    def _get_subcache(self, scope: Scope) -> Dict[ScopeKey, Dict[FixtureKey, Fixture]]:\n        <IND>return self._scope_cache[scope]\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            subcache[scope_key] = {}\n        return subcache.get(scope_key)\n\n",
        "source_code_len": 77,
        "target_code": "            subcache[scope_key] = {}\n        return subcache[scope_key]\n\n",
        "target_code_len": 73,
        "diff_format": "@@ -48,3 +58,3 @@\n             subcache[scope_key] = {}\n-        return subcache.get(scope_key)\n+        return subcache[scope_key]\n \n",
        "source_code_with_indent": "            <IND>subcache[scope_key] = {}\n        <DED>return subcache.get(scope_key)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <IND>subcache[scope_key] = {}\n        <DED>return subcache[scope_key]\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self, fixture_key: FixtureKey, scope: Scope, scope_key: ScopeKey\n    ) -> Fixture:\n        fixtures = self.get_fixtures_at_scope(scope, scope_key)\n",
        "source_code_len": 155,
        "target_code": "        self, fixture_key: FixtureKey, scope: Scope, scope_key: ScopeKey\n    ) -> Optional[Fixture]:\n        fixtures = self.get_fixtures_at_scope(scope, scope_key)\n",
        "target_code_len": 165,
        "diff_format": "@@ -74,3 +84,3 @@\n         self, fixture_key: FixtureKey, scope: Scope, scope_key: ScopeKey\n-    ) -> Fixture:\n+    ) -> Optional[Fixture]:\n         fixtures = self.get_fixtures_at_scope(scope, scope_key)\n",
        "source_code_with_indent": "        self, fixture_key: FixtureKey, scope: Scope, scope_key: ScopeKey\n    ) -> Fixture:\n        <IND>fixtures = self.get_fixtures_at_scope(scope, scope_key)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self, fixture_key: FixtureKey, scope: Scope, scope_key: ScopeKey\n    ) -> Optional[Fixture]:\n        <IND>fixtures = self.get_fixtures_at_scope(scope, scope_key)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "darrenburns/ward",
    "commit": "06b1c09b07d5f3ec7b882ba26d1b2bc6cd816db4",
    "filename": "ward/_fixtures.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/darrenburns-ward/ward/_fixtures.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ward/_fixtures.py:48:21 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `dict.__setitem__` but got `Union[Path, Scope, str]`.",
    "message": " Expected `str` for 1st positional only parameter to call `dict.__setitem__` but got `Union[Path, Scope, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 48,
    "warning_line": "            subcache[scope_key] = {}",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from pathlib import Path\nfrom typing import Any, Collection, Dict, Iterable, Mapping, Tuple, Union\n\n",
        "source_code_len": 100,
        "target_code": "from pathlib import Path\nfrom typing import (\n    Any,\n    Collection,\n    Dict,\n    Iterable,\n    List,\n    Mapping,\n    Optional,\n    Tuple,\n    Union,\n)\n\n",
        "target_code_len": 157,
        "diff_format": "@@ -3,3 +3,13 @@\n from pathlib import Path\n-from typing import Any, Collection, Dict, Iterable, Mapping, Tuple, Union\n+from typing import (\n+    Any,\n+    Collection,\n+    Dict,\n+    Iterable,\n+    List,\n+    Mapping,\n+    Optional,\n+    Tuple,\n+    Union,\n+)\n \n",
        "source_code_with_indent": "from pathlib import Path\nfrom typing import Any, Collection, Dict, Iterable, Mapping, Tuple, Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from pathlib import Path\nfrom typing import (\n    Any,\n    Collection,\n    Dict,\n    Iterable,\n    List,\n    Mapping,\n    Optional,\n    Tuple,\n    Union,\n)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _get_subcache(self, scope: Scope) -> Dict[str, Any]:\n        return self._scope_cache[scope]\n",
        "source_code_len": 102,
        "target_code": "\n    def _get_subcache(self, scope: Scope) -> Dict[ScopeKey, Dict[FixtureKey, Fixture]]:\n        return self._scope_cache[scope]\n",
        "target_code_len": 129,
        "diff_format": "@@ -39,3 +49,3 @@\n \n-    def _get_subcache(self, scope: Scope) -> Dict[str, Any]:\n+    def _get_subcache(self, scope: Scope) -> Dict[ScopeKey, Dict[FixtureKey, Fixture]]:\n         return self._scope_cache[scope]\n",
        "source_code_with_indent": "\n    def _get_subcache(self, scope: Scope) -> Dict[str, Any]:\n        <IND>return self._scope_cache[scope]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    def _get_subcache(self, scope: Scope) -> Dict[ScopeKey, Dict[FixtureKey, Fixture]]:\n        <IND>return self._scope_cache[scope]\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            subcache[scope_key] = {}\n        return subcache.get(scope_key)\n\n",
        "source_code_len": 77,
        "target_code": "            subcache[scope_key] = {}\n        return subcache[scope_key]\n\n",
        "target_code_len": 73,
        "diff_format": "@@ -48,3 +58,3 @@\n             subcache[scope_key] = {}\n-        return subcache.get(scope_key)\n+        return subcache[scope_key]\n \n",
        "source_code_with_indent": "            <IND>subcache[scope_key] = {}\n        <DED>return subcache.get(scope_key)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <IND>subcache[scope_key] = {}\n        <DED>return subcache[scope_key]\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self, fixture_key: FixtureKey, scope: Scope, scope_key: ScopeKey\n    ) -> Fixture:\n        fixtures = self.get_fixtures_at_scope(scope, scope_key)\n",
        "source_code_len": 155,
        "target_code": "        self, fixture_key: FixtureKey, scope: Scope, scope_key: ScopeKey\n    ) -> Optional[Fixture]:\n        fixtures = self.get_fixtures_at_scope(scope, scope_key)\n",
        "target_code_len": 165,
        "diff_format": "@@ -74,3 +84,3 @@\n         self, fixture_key: FixtureKey, scope: Scope, scope_key: ScopeKey\n-    ) -> Fixture:\n+    ) -> Optional[Fixture]:\n         fixtures = self.get_fixtures_at_scope(scope, scope_key)\n",
        "source_code_with_indent": "        self, fixture_key: FixtureKey, scope: Scope, scope_key: ScopeKey\n    ) -> Fixture:\n        <IND>fixtures = self.get_fixtures_at_scope(scope, scope_key)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self, fixture_key: FixtureKey, scope: Scope, scope_key: ScopeKey\n    ) -> Optional[Fixture]:\n        <IND>fixtures = self.get_fixtures_at_scope(scope, scope_key)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "darrenburns/ward",
    "commit": "06b1c09b07d5f3ec7b882ba26d1b2bc6cd816db4",
    "filename": "ward/_fixtures.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/darrenburns-ward/ward/_fixtures.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ward/_fixtures.py:49:28 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `Mapping.get` but got `Union[Path, Scope, str]`.",
    "message": " Expected `str` for 1st positional only parameter to call `Mapping.get` but got `Union[Path, Scope, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 49,
    "warning_line": "        return subcache.get(scope_key)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from pathlib import Path\nfrom typing import Any, Collection, Dict, Iterable, Mapping, Tuple, Union\n\n",
        "source_code_len": 100,
        "target_code": "from pathlib import Path\nfrom typing import (\n    Any,\n    Collection,\n    Dict,\n    Iterable,\n    List,\n    Mapping,\n    Optional,\n    Tuple,\n    Union,\n)\n\n",
        "target_code_len": 157,
        "diff_format": "@@ -3,3 +3,13 @@\n from pathlib import Path\n-from typing import Any, Collection, Dict, Iterable, Mapping, Tuple, Union\n+from typing import (\n+    Any,\n+    Collection,\n+    Dict,\n+    Iterable,\n+    List,\n+    Mapping,\n+    Optional,\n+    Tuple,\n+    Union,\n+)\n \n",
        "source_code_with_indent": "from pathlib import Path\nfrom typing import Any, Collection, Dict, Iterable, Mapping, Tuple, Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from pathlib import Path\nfrom typing import (\n    Any,\n    Collection,\n    Dict,\n    Iterable,\n    List,\n    Mapping,\n    Optional,\n    Tuple,\n    Union,\n)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _get_subcache(self, scope: Scope) -> Dict[str, Any]:\n        return self._scope_cache[scope]\n",
        "source_code_len": 102,
        "target_code": "\n    def _get_subcache(self, scope: Scope) -> Dict[ScopeKey, Dict[FixtureKey, Fixture]]:\n        return self._scope_cache[scope]\n",
        "target_code_len": 129,
        "diff_format": "@@ -39,3 +49,3 @@\n \n-    def _get_subcache(self, scope: Scope) -> Dict[str, Any]:\n+    def _get_subcache(self, scope: Scope) -> Dict[ScopeKey, Dict[FixtureKey, Fixture]]:\n         return self._scope_cache[scope]\n",
        "source_code_with_indent": "\n    def _get_subcache(self, scope: Scope) -> Dict[str, Any]:\n        <IND>return self._scope_cache[scope]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    def _get_subcache(self, scope: Scope) -> Dict[ScopeKey, Dict[FixtureKey, Fixture]]:\n        <IND>return self._scope_cache[scope]\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            subcache[scope_key] = {}\n        return subcache.get(scope_key)\n\n",
        "source_code_len": 77,
        "target_code": "            subcache[scope_key] = {}\n        return subcache[scope_key]\n\n",
        "target_code_len": 73,
        "diff_format": "@@ -48,3 +58,3 @@\n             subcache[scope_key] = {}\n-        return subcache.get(scope_key)\n+        return subcache[scope_key]\n \n",
        "source_code_with_indent": "            <IND>subcache[scope_key] = {}\n        <DED>return subcache.get(scope_key)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <IND>subcache[scope_key] = {}\n        <DED>return subcache[scope_key]\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self, fixture_key: FixtureKey, scope: Scope, scope_key: ScopeKey\n    ) -> Fixture:\n        fixtures = self.get_fixtures_at_scope(scope, scope_key)\n",
        "source_code_len": 155,
        "target_code": "        self, fixture_key: FixtureKey, scope: Scope, scope_key: ScopeKey\n    ) -> Optional[Fixture]:\n        fixtures = self.get_fixtures_at_scope(scope, scope_key)\n",
        "target_code_len": 165,
        "diff_format": "@@ -74,3 +84,3 @@\n         self, fixture_key: FixtureKey, scope: Scope, scope_key: ScopeKey\n-    ) -> Fixture:\n+    ) -> Optional[Fixture]:\n         fixtures = self.get_fixtures_at_scope(scope, scope_key)\n",
        "source_code_with_indent": "        self, fixture_key: FixtureKey, scope: Scope, scope_key: ScopeKey\n    ) -> Fixture:\n        <IND>fixtures = self.get_fixtures_at_scope(scope, scope_key)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self, fixture_key: FixtureKey, scope: Scope, scope_key: ScopeKey\n    ) -> Optional[Fixture]:\n        <IND>fixtures = self.get_fixtures_at_scope(scope, scope_key)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "darrenburns/ward",
    "commit": "06b1c09b07d5f3ec7b882ba26d1b2bc6cd816db4",
    "filename": "ward/_fixtures.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/darrenburns-ward/ward/_fixtures.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ward/_fixtures.py:77:8 Incompatible return type [7]: Expected `Fixture` but got `typing.Optional[Fixture]`.",
    "message": " Expected `Fixture` but got `typing.Optional[Fixture]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 77,
    "warning_line": "        return fixtures.get(fixture_key)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from pathlib import Path\nfrom typing import Any, Collection, Dict, Iterable, Mapping, Tuple, Union\n\n",
        "source_code_len": 100,
        "target_code": "from pathlib import Path\nfrom typing import (\n    Any,\n    Collection,\n    Dict,\n    Iterable,\n    List,\n    Mapping,\n    Optional,\n    Tuple,\n    Union,\n)\n\n",
        "target_code_len": 157,
        "diff_format": "@@ -3,3 +3,13 @@\n from pathlib import Path\n-from typing import Any, Collection, Dict, Iterable, Mapping, Tuple, Union\n+from typing import (\n+    Any,\n+    Collection,\n+    Dict,\n+    Iterable,\n+    List,\n+    Mapping,\n+    Optional,\n+    Tuple,\n+    Union,\n+)\n \n",
        "source_code_with_indent": "from pathlib import Path\nfrom typing import Any, Collection, Dict, Iterable, Mapping, Tuple, Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from pathlib import Path\nfrom typing import (\n    Any,\n    Collection,\n    Dict,\n    Iterable,\n    List,\n    Mapping,\n    Optional,\n    Tuple,\n    Union,\n)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _get_subcache(self, scope: Scope) -> Dict[str, Any]:\n        return self._scope_cache[scope]\n",
        "source_code_len": 102,
        "target_code": "\n    def _get_subcache(self, scope: Scope) -> Dict[ScopeKey, Dict[FixtureKey, Fixture]]:\n        return self._scope_cache[scope]\n",
        "target_code_len": 129,
        "diff_format": "@@ -39,3 +49,3 @@\n \n-    def _get_subcache(self, scope: Scope) -> Dict[str, Any]:\n+    def _get_subcache(self, scope: Scope) -> Dict[ScopeKey, Dict[FixtureKey, Fixture]]:\n         return self._scope_cache[scope]\n",
        "source_code_with_indent": "\n    def _get_subcache(self, scope: Scope) -> Dict[str, Any]:\n        <IND>return self._scope_cache[scope]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    def _get_subcache(self, scope: Scope) -> Dict[ScopeKey, Dict[FixtureKey, Fixture]]:\n        <IND>return self._scope_cache[scope]\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            subcache[scope_key] = {}\n        return subcache.get(scope_key)\n\n",
        "source_code_len": 77,
        "target_code": "            subcache[scope_key] = {}\n        return subcache[scope_key]\n\n",
        "target_code_len": 73,
        "diff_format": "@@ -48,3 +58,3 @@\n             subcache[scope_key] = {}\n-        return subcache.get(scope_key)\n+        return subcache[scope_key]\n \n",
        "source_code_with_indent": "            <IND>subcache[scope_key] = {}\n        <DED>return subcache.get(scope_key)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <IND>subcache[scope_key] = {}\n        <DED>return subcache[scope_key]\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self, fixture_key: FixtureKey, scope: Scope, scope_key: ScopeKey\n    ) -> Fixture:\n        fixtures = self.get_fixtures_at_scope(scope, scope_key)\n",
        "source_code_len": 155,
        "target_code": "        self, fixture_key: FixtureKey, scope: Scope, scope_key: ScopeKey\n    ) -> Optional[Fixture]:\n        fixtures = self.get_fixtures_at_scope(scope, scope_key)\n",
        "target_code_len": 165,
        "diff_format": "@@ -74,3 +84,3 @@\n         self, fixture_key: FixtureKey, scope: Scope, scope_key: ScopeKey\n-    ) -> Fixture:\n+    ) -> Optional[Fixture]:\n         fixtures = self.get_fixtures_at_scope(scope, scope_key)\n",
        "source_code_with_indent": "        self, fixture_key: FixtureKey, scope: Scope, scope_key: ScopeKey\n    ) -> Fixture:\n        <IND>fixtures = self.get_fixtures_at_scope(scope, scope_key)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self, fixture_key: FixtureKey, scope: Scope, scope_key: ScopeKey\n    ) -> Optional[Fixture]:\n        <IND>fixtures = self.get_fixtures_at_scope(scope, scope_key)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]