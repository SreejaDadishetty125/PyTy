[
  {
    "project": "brentyi/jaxlie",
    "commit": "d7577ee779bfdb3c2061b455dbc7e4708fb20ebb",
    "filename": "jaxlie/_utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/brentyi-jaxlie/jaxlie/_utils.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jaxlie/_utils.py:45:8 Incompatible attribute type [8]: Attribute `__hash__` declared in class `object` has type `BoundMethod[typing.Callable(object.__hash__)[[Named(self, object)], int], MatrixLieGroup]` but is used as type `typing.Callable(object.__hash__)[[Named(self, object)], int]`.",
    "message": " Attribute `__hash__` declared in class `object` has type `BoundMethod[typing.Callable(object.__hash__)[[Named(self, object)], int], MatrixLieGroup]` but is used as type `typing.Callable(object.__hash__)[[Named(self, object)], int]`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 45,
    "warning_line": "        cls.__hash__ = object.__hash__",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        # Hash based on object ID, rather than contents (arrays are not hashable)\n        cls.__hash__ = object.__hash__\n\n",
        "source_code_len": 122,
        "target_code": "        # Hash based on object ID, rather than contents (arrays are not hashable)\n        setattr(cls, \"__hash__\", object.__hash__)\n\n",
        "target_code_len": 133,
        "diff_format": "@@ -44,3 +44,3 @@\n         # Hash based on object ID, rather than contents (arrays are not hashable)\n-        cls.__hash__ = object.__hash__\n+        setattr(cls, \"__hash__\", object.__hash__)\n \n",
        "source_code_with_indent": "        # Hash based on object ID, rather than contents (arrays are not hashable)\n        cls.__hash__ = object.__hash__\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        # Hash based on object ID, rather than contents (arrays are not hashable)\n        setattr(cls, \"__hash__\", object.__hash__)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "brentyi/jaxlie",
    "commit": "d7577ee779bfdb3c2061b455dbc7e4708fb20ebb",
    "filename": "jaxlie/_utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/brentyi-jaxlie/jaxlie/_utils.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "jaxlie/_utils.py:67:19 Call error [29]: `MatrixLieGroup` is not a function.",
    "message": " `MatrixLieGroup` is not a function.",
    "rule_id": "Call error [29]",
    "warning_line_no": 67,
    "warning_line": "            return cls(**dict(zip(treedef, children)))",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "            # Treedef is names of fields\n            return cls(**dict(zip(treedef, children)))\n\n",
        "source_code_len": 97,
        "target_code": "            # Treedef is names of fields\n            return cls(**dict(zip(treedef, children)))  # type: ignore\n\n",
        "target_code_len": 113,
        "diff_format": "@@ -66,3 +66,3 @@\n             # Treedef is names of fields\n-            return cls(**dict(zip(treedef, children)))\n+            return cls(**dict(zip(treedef, children)))  # type: ignore\n \n",
        "source_code_with_indent": "            # Treedef is names of fields\n            return cls(**dict(zip(treedef, children)))\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            # Treedef is names of fields\n            return cls(**dict(zip(treedef, children)))  # type: ignore\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]