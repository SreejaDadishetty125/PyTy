[
  {
    "project": "DataDog/dd-trace-py",
    "commit": "dba326054b6ecc7e6e6a0e0dfe7bf7d2caff3342",
    "filename": "ddtrace/provider.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DataDog-dd-trace-py/ddtrace/provider.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ddtrace/provider.py:64:4 Inconsistent override [14]: `ddtrace.provider.DefaultContextProvider.activate` overrides method defined in `BaseContextProvider` inconsistently. Could not find parameter `context` in overriding signature.",
    "message": " `ddtrace.provider.DefaultContextProvider.activate` overrides method defined in `BaseContextProvider` inconsistently. Could not find parameter `context` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 64,
    "warning_line": "    def activate(self, ctx):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import abc\n\n",
        "source_code_len": 12,
        "target_code": "import abc\nfrom typing import Optional\nfrom typing import Union\n\n",
        "target_code_len": 65,
        "diff_format": "@@ -1,2 +1,4 @@\n import abc\n+from typing import Optional\n+from typing import Union\n \n",
        "source_code_with_indent": "import abc\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import abc\nfrom typing import Optional\nfrom typing import Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from .internal.compat import contextvars\n\n\n_DD_CONTEXTVAR = contextvars.ContextVar(\"datadog_contextvar\", default=None)\n\n",
        "source_code_len": 120,
        "target_code": "from .internal.compat import contextvars\nfrom .span import Span\n\n\n_DD_CONTEXTVAR = contextvars.ContextVar(\n    \"datadog_contextvar\", default=None\n)  # type: contextvars.ContextVar[Optional[Union[Context, Span]]]\n\n",
        "target_code_len": 213,
        "diff_format": "@@ -6,5 +8,8 @@\n from .internal.compat import contextvars\n+from .span import Span\n \n \n-_DD_CONTEXTVAR = contextvars.ContextVar(\"datadog_contextvar\", default=None)\n+_DD_CONTEXTVAR = contextvars.ContextVar(\n+    \"datadog_contextvar\", default=None\n+)  # type: contextvars.ContextVar[Optional[Union[Context, Span]]]\n \n",
        "source_code_with_indent": "from .internal.compat import contextvars\n\n\n_DD_CONTEXTVAR = contextvars.ContextVar(\"datadog_contextvar\", default=None)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from .internal.compat import contextvars\nfrom .span import Span\n\n\n_DD_CONTEXTVAR = contextvars.ContextVar(\n    \"datadog_contextvar\", default=None\n)  # type: contextvars.ContextVar[Optional[Union[Context, Span]]]\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @abc.abstractmethod\n    def activate(self, context):\n        # type: (Context) -> None\n        pass\n",
        "source_code_len": 104,
        "target_code": "    @abc.abstractmethod\n    def activate(self, ctx):\n        # type: (Optional[Union[Context, Span]]) -> None\n        pass\n",
        "target_code_len": 123,
        "diff_format": "@@ -26,4 +31,4 @@\n     @abc.abstractmethod\n-    def activate(self, context):\n-        # type: (Context) -> None\n+    def activate(self, ctx):\n+        # type: (Optional[Union[Context, Span]]) -> None\n         pass\n",
        "source_code_with_indent": "    <DED>@abc.abstractmethod\n    def activate(self, context):\n        # type: (Context) -> None\n        <IND>pass\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@abc.abstractmethod\n    def activate(self, ctx):\n        # type: (Optional[Union[Context, Span]]) -> None\n        <IND>pass\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def active(self):\n        # type: () -> Context\n        pass\n",
        "source_code_len": 65,
        "target_code": "    def active(self):\n        # type: () -> Optional[Union[Context, Span]]\n        pass\n",
        "target_code_len": 88,
        "diff_format": "@@ -32,3 +37,3 @@\n     def active(self):\n-        # type: () -> Context\n+        # type: () -> Optional[Union[Context, Span]]\n         pass\n",
        "source_code_with_indent": "    def active(self):\n        # type: () -> Context\n        <IND>pass\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def active(self):\n        # type: () -> Optional[Union[Context, Span]]\n        <IND>pass\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def activate(self, ctx):\n        # type: (Context) -> None\n        \"\"\"Makes the given ``context`` active, so that the provider calls\n        the thread-local storage implementation.\n        \"\"\"\n        _DD_CONTEXTVAR.set(ctx)  # type: ignore[arg-type]\n\n    def active(self):\n        # type: () -> Context\n        \"\"\"Returns the current active ``Context`` for this tracer. Returned\n        ``Context`` must be thread-safe or thread-local for this specific\n        implementation.\n        \"\"\"\n        ctx = _DD_CONTEXTVAR.get()\n        if not ctx:\n            ctx = Context()\n            self.activate(ctx)\n\n        return ctx\n",
        "source_code_len": 629,
        "target_code": "    def activate(self, ctx):\n        # type: (Optional[Union[Span, Context]]) -> None\n        \"\"\"Makes the given context active in the current execution.\"\"\"\n        _DD_CONTEXTVAR.set(ctx)\n\n    def _update_active(self, span):\n        # type: (Span) -> Optional[Span]\n        if span.finished:\n            new_active = span  # type: Optional[Span]\n            while new_active and new_active.finished:\n                new_active = new_active._parent\n            self.activate(new_active)\n            return new_active\n        return span\n\n    def active(self):\n        # type: () -> Optional[Union[Context, Span]]\n        \"\"\"Returns the active span or context for the current execution.\"\"\"\n        item = _DD_CONTEXTVAR.get()\n        if isinstance(item, Span):\n            return self._update_active(item)\n        return item\n",
        "target_code_len": 825,
        "diff_format": "@@ -64,19 +66,22 @@\n     def activate(self, ctx):\n-        # type: (Context) -> None\n-        \"\"\"Makes the given ``context`` active, so that the provider calls\n-        the thread-local storage implementation.\n-        \"\"\"\n-        _DD_CONTEXTVAR.set(ctx)  # type: ignore[arg-type]\n+        # type: (Optional[Union[Span, Context]]) -> None\n+        \"\"\"Makes the given context active in the current execution.\"\"\"\n+        _DD_CONTEXTVAR.set(ctx)\n+\n+    def _update_active(self, span):\n+        # type: (Span) -> Optional[Span]\n+        if span.finished:\n+            new_active = span  # type: Optional[Span]\n+            while new_active and new_active.finished:\n+                new_active = new_active._parent\n+            self.activate(new_active)\n+            return new_active\n+        return span\n \n     def active(self):\n-        # type: () -> Context\n-        \"\"\"Returns the current active ``Context`` for this tracer. Returned\n-        ``Context`` must be thread-safe or thread-local for this specific\n-        implementation.\n-        \"\"\"\n-        ctx = _DD_CONTEXTVAR.get()\n-        if not ctx:\n-            ctx = Context()\n-            self.activate(ctx)\n-\n-        return ctx\n+        # type: () -> Optional[Union[Context, Span]]\n+        \"\"\"Returns the active span or context for the current execution.\"\"\"\n+        item = _DD_CONTEXTVAR.get()\n+        if isinstance(item, Span):\n+            return self._update_active(item)\n+        return item\n",
        "source_code_with_indent": "    <DED>def activate(self, ctx):\n        # type: (Context) -> None\n        <IND>\"\"\"Makes the given ``context`` active, so that the provider calls\n        the thread-local storage implementation.\n        \"\"\"\n        _DD_CONTEXTVAR.set(ctx)  # type: ignore[arg-type]\n\n    <DED>def active(self):\n        # type: () -> Context\n        <IND>\"\"\"Returns the current active ``Context`` for this tracer. Returned\n        ``Context`` must be thread-safe or thread-local for this specific\n        implementation.\n        \"\"\"\n        ctx = _DD_CONTEXTVAR.get()\n        if not ctx:\n            <IND>ctx = Context()\n            self.activate(ctx)\n\n        <DED>return ctx\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def activate(self, ctx):\n        # type: (Optional[Union[Span, Context]]) -> None\n        <IND>\"\"\"Makes the given context active in the current execution.\"\"\"\n        _DD_CONTEXTVAR.set(ctx)\n\n    <DED>def _update_active(self, span):\n        # type: (Span) -> Optional[Span]\n        <IND>if span.finished:\n            <IND>new_active = span  # type: Optional[Span]\n            while new_active and new_active.finished:\n                <IND>new_active = new_active._parent\n            <DED>self.activate(new_active)\n            return new_active\n        <DED>return span\n\n    <DED>def active(self):\n        # type: () -> Optional[Union[Context, Span]]\n        <IND>\"\"\"Returns the active span or context for the current execution.\"\"\"\n        item = _DD_CONTEXTVAR.get()\n        if isinstance(item, Span):\n            <IND>return self._update_active(item)\n        <DED>return item\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]