[
  {
    "project": "automl/SMAC3",
    "commit": "ba29de1b2599373a369342d3a093a953133ee3d8",
    "filename": "examples/rf.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/automl-SMAC3/examples/rf.py",
    "file_hunks_size": 1,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "examples/rf.py:96:12 Incompatible parameter type [6]: Expected `typing.Type[Scenario]` for 1st parameter `scenario` to call `SMAC.__init__` but got `Scenario`.",
    "message": " Expected `typing.Type[Scenario]` for 1st parameter `scenario` to call `SMAC.__init__` but got `Scenario`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 96,
    "warning_line": "smac = SMAC(scenario=scenario, rng=np.random.RandomState(42),"
  },
  {
    "project": "automl/SMAC3",
    "commit": "ba29de1b2599373a369342d3a093a953133ee3d8",
    "filename": "examples/svm.py",
    "min_patch_found": false,
    "full_warning_msg": "examples/svm.py:105:12 Incompatible parameter type [6]: Expected `typing.Type[Scenario]` for 1st parameter `scenario` to call `SMAC.__init__` but got `Scenario`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "automl/SMAC3",
    "commit": "ba29de1b2599373a369342d3a093a953133ee3d8",
    "filename": "scripts/plot_traj_perf.py",
    "min_patch_found": false,
    "full_warning_msg": "scripts/plot_traj_perf.py:47:16 Incompatible parameter type [6]: Expected `typing.Type[Scenario]` for 1st parameter `scenario` to call `SMAC.__init__` but got `Scenario`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "automl/SMAC3",
    "commit": "ba29de1b2599373a369342d3a093a953133ee3d8",
    "filename": "smac/epm/rf_with_instances.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/automl-SMAC3/smac/epm/rf_with_instances.py",
    "file_hunks_size": 14,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "smac/epm/rf_with_instances.py:49:17 Incompatible variable type [9]: eps_purity is declared to have type `int` but is used as type `float`.",
    "message": " eps_purity is declared to have type `int` but is used as type `float`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 49,
    "warning_line": "                 eps_purity: int=1e-8,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                 min_samples_leaf: int=3,\n                 max_depth: int=20,\n                 eps_purity: int=1e-8,\n                 max_num_nodes: int=2**20,\n                 unlog_y:bool=False,\n                 seed: int=42,\n                 **kwargs):\n        \"\"\"Constructor\n\n        Parameters\n",
        "source_code_len": 299,
        "target_code": "                 min_samples_leaf: int=3,\n                 max_depth: int=2**20,\n                 eps_purity: float=1e-8,\n                 max_num_nodes: int=2**20,\n                 seed: int=42,\n                 **kwargs):\n        \"\"\"\n        Parameters\n",
        "target_code_len": 255,
        "diff_format": "@@ -47,10 +48,8 @@\n                  min_samples_leaf: int=3,\n-                 max_depth: int=20,\n-                 eps_purity: int=1e-8,\n+                 max_depth: int=2**20,\n+                 eps_purity: float=1e-8,\n                  max_num_nodes: int=2**20,\n-                 unlog_y:bool=False,\n                  seed: int=42,\n                  **kwargs):\n-        \"\"\"Constructor\n-\n+        \"\"\"\n         Parameters\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "                 min_samples_leaf: int=3,\n                 max_depth: int=20,\n                 eps_purity: int=1e-8,\n                 max_num_nodes: int=2**20,\n                 unlog_y:bool=False,\n                 seed: int=42,\n                 **kwargs):\n        <IND>",
        "target_code_with_indent": "                 min_samples_leaf: int=3,\n                 max_depth: int=2**20,\n                 eps_purity: float=1e-8,\n                 max_num_nodes: int=2**20,\n                 seed: int=42,\n                 **kwargs):\n        <IND>"
      }
    ]
  },
  {
    "project": "automl/SMAC3",
    "commit": "ba29de1b2599373a369342d3a093a953133ee3d8",
    "filename": "smac/facade/func_facade.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/automl-SMAC3/smac/facade/func_facade.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "smac/facade/func_facade.py:92:16 Incompatible parameter type [6]: Expected `typing.Type[Scenario]` for 1st parameter `scenario` to call `SMAC.__init__` but got `Scenario`.",
    "message": " Expected `typing.Type[Scenario]` for 1st parameter `scenario` to call `SMAC.__init__` but got `Scenario`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 92,
    "warning_line": "    smac = SMAC(scenario=scenario, tae_runner=ta, rng=rng, **kwargs)"
  },
  {
    "project": "automl/SMAC3",
    "commit": "ba29de1b2599373a369342d3a093a953133ee3d8",
    "filename": "smac/facade/roar_facade.py",
    "min_patch_found": false,
    "full_warning_msg": "smac/facade/roar_facade.py:109:12 Incompatible parameter type [6]: Expected `typing.Type[Scenario]` for 1st parameter `scenario` to call `SMAC.__init__` but got `Scenario`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "automl/SMAC3",
    "commit": "ba29de1b2599373a369342d3a093a953133ee3d8",
    "filename": "smac/facade/smac_facade.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/automl-SMAC3/smac/facade/smac_facade.py",
    "file_hunks_size": 16,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "smac/facade/smac_facade.py:172:31 Incompatible parameter type [6]: Expected `Scenario` for 1st positional only parameter to call `Stats.__init__` but got `typing.Type[Scenario]`.",
    "message": " Expected `Scenario` for 1st positional only parameter to call `Stats.__init__` but got `typing.Type[Scenario]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 172,
    "warning_line": "            self.stats = Stats(scenario)"
  },
  {
    "project": "automl/SMAC3",
    "commit": "ba29de1b2599373a369342d3a093a953133ee3d8",
    "filename": "smac/facade/smac_facade.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/automl-SMAC3/smac/facade/smac_facade.py",
    "file_hunks_size": 16,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "smac/facade/smac_facade.py:313:54 Incompatible parameter type [6]: Expected `Scenario` for 2nd parameter `scenario` to call `MultiConfigInitialDesign.__init__` but got `typing.Type[Scenario]`.",
    "message": " Expected `Scenario` for 2nd parameter `scenario` to call `MultiConfigInitialDesign.__init__` but got `typing.Type[Scenario]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 313,
    "warning_line": "                                                      scenario=scenario,"
  },
  {
    "project": "automl/SMAC3",
    "commit": "ba29de1b2599373a369342d3a093a953133ee3d8",
    "filename": "smac/facade/smac_facade.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/automl-SMAC3/smac/facade/smac_facade.py",
    "file_hunks_size": 16,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "smac/facade/smac_facade.py:324:54 Incompatible parameter type [6]: Expected `Scenario` for 2nd parameter `scenario` to call `DefaultConfiguration.__init__` but got `typing.Type[Scenario]`.",
    "message": " Expected `Scenario` for 2nd parameter `scenario` to call `DefaultConfiguration.__init__` but got `typing.Type[Scenario]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 324,
    "warning_line": "                                                      scenario=scenario,"
  },
  {
    "project": "automl/SMAC3",
    "commit": "ba29de1b2599373a369342d3a093a953133ee3d8",
    "filename": "smac/facade/smac_facade.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/automl-SMAC3/smac/facade/smac_facade.py",
    "file_hunks_size": 16,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "smac/facade/smac_facade.py:330:53 Incompatible parameter type [6]: Expected `Scenario` for 2nd parameter `scenario` to call `RandomConfiguration.__init__` but got `typing.Type[Scenario]`.",
    "message": " Expected `Scenario` for 2nd parameter `scenario` to call `RandomConfiguration.__init__` but got `typing.Type[Scenario]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 330,
    "warning_line": "                                                     scenario=scenario,"
  },
  {
    "project": "automl/SMAC3",
    "commit": "ba29de1b2599373a369342d3a093a953133ee3d8",
    "filename": "smac/facade/smac_facade.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/automl-SMAC3/smac/facade/smac_facade.py",
    "file_hunks_size": 16,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "smac/facade/smac_facade.py:341:12 Incompatible attribute type [8]: Attribute `scenario` declared in class `InitialDesign` has type `Scenario` but is used as type `typing.Type[Scenario]`.",
    "message": " Attribute `scenario` declared in class `InitialDesign` has type `Scenario` but is used as type `typing.Type[Scenario]`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 341,
    "warning_line": "            initial_design.scenario = scenario"
  },
  {
    "project": "automl/SMAC3",
    "commit": "ba29de1b2599373a369342d3a093a953133ee3d8",
    "filename": "smac/facade/smac_facade.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/automl-SMAC3/smac/facade/smac_facade.py",
    "file_hunks_size": 16,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "smac/facade/smac_facade.py:368:20 Incompatible parameter type [6]: Expected `Scenario` for 1st parameter `scenario` to call `AbstractRunHistory2EPM.__init__` but got `typing.Type[Scenario]`.",
    "message": " Expected `Scenario` for 1st parameter `scenario` to call `AbstractRunHistory2EPM.__init__` but got `typing.Type[Scenario]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 368,
    "warning_line": "                    scenario=scenario, num_params=num_params,"
  },
  {
    "project": "automl/SMAC3",
    "commit": "ba29de1b2599373a369342d3a093a953133ee3d8",
    "filename": "smac/facade/smac_facade.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/automl-SMAC3/smac/facade/smac_facade.py",
    "file_hunks_size": 16,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "smac/facade/smac_facade.py:375:53 Incompatible parameter type [6]: Expected `Scenario` for 1st parameter `scenario` to call `AbstractRunHistory2EPM.__init__` but got `typing.Type[Scenario]`.",
    "message": " Expected `Scenario` for 1st parameter `scenario` to call `AbstractRunHistory2EPM.__init__` but got `typing.Type[Scenario]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 375,
    "warning_line": "                runhistory2epm = RunHistory2EPM4Cost(scenario=scenario, num_params=num_params,"
  },
  {
    "project": "automl/SMAC3",
    "commit": "ba29de1b2599373a369342d3a093a953133ee3d8",
    "filename": "smac/facade/smac_facade.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/automl-SMAC3/smac/facade/smac_facade.py",
    "file_hunks_size": 16,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "smac/facade/smac_facade.py:387:12 Incompatible attribute type [8]: Attribute `scenario` declared in class `AbstractRunHistory2EPM` has type `Scenario` but is used as type `typing.Type[Scenario]`.",
    "message": " Attribute `scenario` declared in class `AbstractRunHistory2EPM` has type `Scenario` but is used as type `typing.Type[Scenario]`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 387,
    "warning_line": "            runhistory2epm.scenario = scenario"
  },
  {
    "project": "automl/SMAC3",
    "commit": "ba29de1b2599373a369342d3a093a953133ee3d8",
    "filename": "smac/runhistory/runhistory.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/automl-SMAC3/smac/runhistory/runhistory.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "smac/runhistory/runhistory.py:113:75 Invalid type [31]: Expression `typing.Dict[slice($local_smac?runhistory?runhistory$RunKey, $local_smac?runhistory?runhistory$RunValue, None)]` is not a valid type.",
    "message": " Expression `typing.Dict[slice($local_smac?runhistory?runhistory$RunKey, $local_smac?runhistory?runhistory$RunValue, None)]` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 113,
    "warning_line": "        self.data = collections.OrderedDict()  # type: typing.Dict[RunKey: RunValue]",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        # order as it was added.\n        self.data = collections.OrderedDict()  # type: typing.Dict[RunKey: RunValue]\n\n",
        "source_code_len": 119,
        "target_code": "        # order as it was added.\n        self.data = collections.OrderedDict()  # type: typing.Dict[RunKey, RunValue]\n\n",
        "target_code_len": 119,
        "diff_format": "@@ -112,3 +112,3 @@\n         # order as it was added.\n-        self.data = collections.OrderedDict()  # type: typing.Dict[RunKey: RunValue]\n+        self.data = collections.OrderedDict()  # type: typing.Dict[RunKey, RunValue]\n \n",
        "source_code_with_indent": "        # order as it was added.\n        self.data = collections.OrderedDict()  # type: typing.Dict[RunKey: RunValue]\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        # order as it was added.\n        self.data = collections.OrderedDict()  # type: typing.Dict[RunKey, RunValue]\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "automl/SMAC3",
    "commit": "ba29de1b2599373a369342d3a093a953133ee3d8",
    "filename": "smac/runhistory/runhistory.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/automl-SMAC3/smac/runhistory/runhistory.py",
    "file_hunks_size": 6,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "smac/runhistory/runhistory.py:117:67 Invalid type [31]: Expression `typing.Dict[slice(int, $local_smac?runhistory?runhistory$InstSeedKey, None)]` is not a valid type.",
    "message": " Expression `typing.Dict[slice(int, $local_smac?runhistory?runhistory$InstSeedKey, None)]` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 117,
    "warning_line": "        self._configid_to_inst_seed = {}  # type: typing.Dict[int: InstSeedKey]"
  },
  {
    "project": "automl/SMAC3",
    "commit": "ba29de1b2599373a369342d3a093a953133ee3d8",
    "filename": "smac/runhistory/runhistory.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/automl-SMAC3/smac/runhistory/runhistory.py",
    "file_hunks_size": 6,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "smac/runhistory/runhistory.py:119:65 Invalid type [31]: Expression `typing.Dict[slice(smac.configspace.Configuration, int, None)]` is not a valid type.",
    "message": " Expression `typing.Dict[slice(smac.configspace.Configuration, int, None)]` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 119,
    "warning_line": "        self.config_ids = {}  # type: typing.Dict[Configuration: int]"
  },
  {
    "project": "automl/SMAC3",
    "commit": "ba29de1b2599373a369342d3a093a953133ee3d8",
    "filename": "smac/runhistory/runhistory.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/automl-SMAC3/smac/runhistory/runhistory.py",
    "file_hunks_size": 6,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "smac/runhistory/runhistory.py:120:55 Invalid type [31]: Expression `typing.Dict[slice(int, smac.configspace.Configuration, None)]` is not a valid type.",
    "message": " Expression `typing.Dict[slice(int, smac.configspace.Configuration, None)]` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 120,
    "warning_line": "        self.ids_config = {}  # type: typing.Dict[int: Configuration]"
  },
  {
    "project": "automl/SMAC3",
    "commit": "ba29de1b2599373a369342d3a093a953133ee3d8",
    "filename": "smac/runhistory/runhistory.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/automl-SMAC3/smac/runhistory/runhistory.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "smac/runhistory/runhistory.py:124:60 Invalid type [31]: Expression `typing.Dict[slice(int, float, None)]` is not a valid type.",
    "message": " Expression `typing.Dict[slice(int, float, None)]` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 124,
    "warning_line": "        self.cost_per_config = {}  # type: typing.Dict[int: float]",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        # Stores cost for each configuration ID\n        self.cost_per_config = {}  # type: typing.Dict[int: float]\n        # runs_per_config maps the configuration ID to the number of runs for that configuration\n        # and is necessary for computing the moving average\n        self.runs_per_config = {}  # type: typing.Dict[int: int]\n\n",
        "source_code_len": 338,
        "target_code": "        # Stores cost for each configuration ID\n        self.cost_per_config = {}  # type: typing.Dict[int, float]\n        # runs_per_config maps the configuration ID to the number of runs for that configuration\n        # and is necessary for computing the moving average\n        self.runs_per_config = {}  # type: typing.Dict[int, int]\n\n",
        "target_code_len": 338,
        "diff_format": "@@ -123,6 +123,6 @@\n         # Stores cost for each configuration ID\n-        self.cost_per_config = {}  # type: typing.Dict[int: float]\n+        self.cost_per_config = {}  # type: typing.Dict[int, float]\n         # runs_per_config maps the configuration ID to the number of runs for that configuration\n         # and is necessary for computing the moving average\n-        self.runs_per_config = {}  # type: typing.Dict[int: int]\n+        self.runs_per_config = {}  # type: typing.Dict[int, int]\n \n",
        "source_code_with_indent": "        # Stores cost for each configuration ID\n        self.cost_per_config = {}  # type: typing.Dict[int: float]\n        # runs_per_config maps the configuration ID to the number of runs for that configuration\n        # and is necessary for computing the moving average\n        self.runs_per_config = {}  # type: typing.Dict[int: int]\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        # Stores cost for each configuration ID\n        self.cost_per_config = {}  # type: typing.Dict[int, float]\n        # runs_per_config maps the configuration ID to the number of runs for that configuration\n        # and is necessary for computing the moving average\n        self.runs_per_config = {}  # type: typing.Dict[int, int]\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "automl/SMAC3",
    "commit": "ba29de1b2599373a369342d3a093a953133ee3d8",
    "filename": "smac/runhistory/runhistory.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/automl-SMAC3/smac/runhistory/runhistory.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "smac/runhistory/runhistory.py:127:60 Invalid type [31]: Expression `typing.Dict[slice(int, int, None)]` is not a valid type.",
    "message": " Expression `typing.Dict[slice(int, int, None)]` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 127,
    "warning_line": "        self.runs_per_config = {}  # type: typing.Dict[int: int]",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        # Stores cost for each configuration ID\n        self.cost_per_config = {}  # type: typing.Dict[int: float]\n        # runs_per_config maps the configuration ID to the number of runs for that configuration\n        # and is necessary for computing the moving average\n        self.runs_per_config = {}  # type: typing.Dict[int: int]\n\n",
        "source_code_len": 338,
        "target_code": "        # Stores cost for each configuration ID\n        self.cost_per_config = {}  # type: typing.Dict[int, float]\n        # runs_per_config maps the configuration ID to the number of runs for that configuration\n        # and is necessary for computing the moving average\n        self.runs_per_config = {}  # type: typing.Dict[int, int]\n\n",
        "target_code_len": 338,
        "diff_format": "@@ -123,6 +123,6 @@\n         # Stores cost for each configuration ID\n-        self.cost_per_config = {}  # type: typing.Dict[int: float]\n+        self.cost_per_config = {}  # type: typing.Dict[int, float]\n         # runs_per_config maps the configuration ID to the number of runs for that configuration\n         # and is necessary for computing the moving average\n-        self.runs_per_config = {}  # type: typing.Dict[int: int]\n+        self.runs_per_config = {}  # type: typing.Dict[int, int]\n \n",
        "source_code_with_indent": "        # Stores cost for each configuration ID\n        self.cost_per_config = {}  # type: typing.Dict[int: float]\n        # runs_per_config maps the configuration ID to the number of runs for that configuration\n        # and is necessary for computing the moving average\n        self.runs_per_config = {}  # type: typing.Dict[int: int]\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        # Stores cost for each configuration ID\n        self.cost_per_config = {}  # type: typing.Dict[int, float]\n        # runs_per_config maps the configuration ID to the number of runs for that configuration\n        # and is necessary for computing the moving average\n        self.runs_per_config = {}  # type: typing.Dict[int, int]\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "automl/SMAC3",
    "commit": "ba29de1b2599373a369342d3a093a953133ee3d8",
    "filename": "smac/runhistory/runhistory.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/automl-SMAC3/smac/runhistory/runhistory.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "smac/runhistory/runhistory.py:131:56 Invalid type [31]: Expression `typing.Dict[slice($local_smac?runhistory?runhistory$RunKey, smac.runhistory.runhistory.DataOrigin, None)]` is not a valid type.",
    "message": " Expression `typing.Dict[slice($local_smac?runhistory?runhistory$RunKey, smac.runhistory.runhistory.DataOrigin, None)]` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 131,
    "warning_line": "        self.external = {}  # type: typing.Dict[RunKey: DataOrigin]",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        # a JSON file. Can be chosen to not be written to disk\n        self.external = {}  # type: typing.Dict[RunKey: DataOrigin]\n\n",
        "source_code_len": 132,
        "target_code": "        # a JSON file. Can be chosen to not be written to disk\n        self.external = {}  # type: typing.Dict[RunKey, DataOrigin]\n\n",
        "target_code_len": 132,
        "diff_format": "@@ -130,3 +130,3 @@\n         # a JSON file. Can be chosen to not be written to disk\n-        self.external = {}  # type: typing.Dict[RunKey: DataOrigin]\n+        self.external = {}  # type: typing.Dict[RunKey, DataOrigin]\n \n",
        "source_code_with_indent": "        # a JSON file. Can be chosen to not be written to disk\n        self.external = {}  # type: typing.Dict[RunKey: DataOrigin]\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        # a JSON file. Can be chosen to not be written to disk\n        self.external = {}  # type: typing.Dict[RunKey, DataOrigin]\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]