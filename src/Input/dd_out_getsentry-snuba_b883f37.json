[
  {
    "project": "getsentry/snuba",
    "commit": "b883f37aba61953d80fba840e217172d4364e2ff",
    "filename": "tests/datasets/test_querylog_processor.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/getsentry-snuba/tests/datasets/test_querylog_processor.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/datasets/test_querylog_processor.py:33:18 Incompatible parameter type [6]: Expected `typing.Optional[snuba.query.data_source.simple.Entity]` for 1st positional only parameter to call `Query.__init__` but got `snuba.datasets.schemas.RelationalSource`.",
    "message": " Expected `typing.Optional[snuba.query.data_source.simple.Entity]` for 1st positional only parameter to call `Query.__init__` but got `snuba.datasets.schemas.RelationalSource`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 33,
    "warning_line": "    query = Query(get_storage(StorageKey.ERRORS).get_schema().get_data_source())",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from snuba.consumers.types import KafkaMessageMetadata\nfrom snuba.datasets.storages import StorageKey\nfrom snuba.datasets.storages.factory import get_storage, get_writable_storage\nfrom snuba.processor import InsertBatch\nfrom snuba.query.logical import Query\n",
        "source_code_len": 258,
        "target_code": "from snuba.consumers.types import KafkaMessageMetadata\nfrom snuba.datasets.entities import EntityKey\nfrom snuba.datasets.entities.factory import get_entity\nfrom snuba.datasets.storages import StorageKey\nfrom snuba.datasets.storages.factory import get_writable_storage\nfrom snuba.processor import InsertBatch\nfrom snuba.query.data_source.simple import Entity\nfrom snuba.query.logical import Query\n",
        "target_code_len": 396,
        "diff_format": "@@ -5,5 +5,8 @@\n from snuba.consumers.types import KafkaMessageMetadata\n+from snuba.datasets.entities import EntityKey\n+from snuba.datasets.entities.factory import get_entity\n from snuba.datasets.storages import StorageKey\n-from snuba.datasets.storages.factory import get_storage, get_writable_storage\n+from snuba.datasets.storages.factory import get_writable_storage\n from snuba.processor import InsertBatch\n+from snuba.query.data_source.simple import Entity\n from snuba.query.logical import Query\n",
        "source_code_with_indent": "from snuba.consumers.types import KafkaMessageMetadata\nfrom snuba.datasets.storages import StorageKey\nfrom snuba.datasets.storages.factory import get_storage, get_writable_storage\nfrom snuba.processor import InsertBatch\nfrom snuba.query.logical import Query\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from snuba.consumers.types import KafkaMessageMetadata\nfrom snuba.datasets.entities import EntityKey\nfrom snuba.datasets.entities.factory import get_entity\nfrom snuba.datasets.storages import StorageKey\nfrom snuba.datasets.storages.factory import get_writable_storage\nfrom snuba.processor import InsertBatch\nfrom snuba.query.data_source.simple import Entity\nfrom snuba.query.logical import Query\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    query = Query(get_storage(StorageKey.ERRORS).get_schema().get_data_source())\n\n",
        "source_code_len": 83,
        "target_code": "\n    query = Query(\n        Entity(EntityKey.EVENTS, get_entity(EntityKey.EVENTS).get_data_model())\n    )\n\n",
        "target_code_len": 107,
        "diff_format": "@@ -32,3 +35,5 @@\n \n-    query = Query(get_storage(StorageKey.ERRORS).get_schema().get_data_source())\n+    query = Query(\n+        Entity(EntityKey.EVENTS, get_entity(EntityKey.EVENTS).get_data_model())\n+    )\n \n",
        "source_code_with_indent": "\n    query = Query(get_storage(StorageKey.ERRORS).get_schema().get_data_source())\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    query = Query(\n        Entity(EntityKey.EVENTS, get_entity(EntityKey.EVENTS).get_data_model())\n    )\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    query = Query(get_storage(StorageKey.ERRORS).get_schema().get_data_source())\n\n",
        "source_code_len": 83,
        "target_code": "\n    query = Query(\n        Entity(EntityKey.EVENTS, get_entity(EntityKey.EVENTS).get_data_model())\n    )\n\n",
        "target_code_len": 107,
        "diff_format": "@@ -127,3 +132,5 @@\n \n-    query = Query(get_storage(StorageKey.ERRORS).get_schema().get_data_source())\n+    query = Query(\n+        Entity(EntityKey.EVENTS, get_entity(EntityKey.EVENTS).get_data_model())\n+    )\n \n",
        "source_code_with_indent": "\n    query = Query(get_storage(StorageKey.ERRORS).get_schema().get_data_source())\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    query = Query(\n        Entity(EntityKey.EVENTS, get_entity(EntityKey.EVENTS).get_data_model())\n    )\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "getsentry/snuba",
    "commit": "b883f37aba61953d80fba840e217172d4364e2ff",
    "filename": "tests/datasets/test_querylog_processor.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/getsentry-snuba/tests/datasets/test_querylog_processor.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/datasets/test_querylog_processor.py:128:18 Incompatible parameter type [6]: Expected `typing.Optional[snuba.query.data_source.simple.Entity]` for 1st positional only parameter to call `Query.__init__` but got `snuba.datasets.schemas.RelationalSource`.",
    "message": " Expected `typing.Optional[snuba.query.data_source.simple.Entity]` for 1st positional only parameter to call `Query.__init__` but got `snuba.datasets.schemas.RelationalSource`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 128,
    "warning_line": "    query = Query(get_storage(StorageKey.ERRORS).get_schema().get_data_source())",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from snuba.consumers.types import KafkaMessageMetadata\nfrom snuba.datasets.storages import StorageKey\nfrom snuba.datasets.storages.factory import get_storage, get_writable_storage\nfrom snuba.processor import InsertBatch\nfrom snuba.query.logical import Query\n",
        "source_code_len": 258,
        "target_code": "from snuba.consumers.types import KafkaMessageMetadata\nfrom snuba.datasets.entities import EntityKey\nfrom snuba.datasets.entities.factory import get_entity\nfrom snuba.datasets.storages import StorageKey\nfrom snuba.datasets.storages.factory import get_writable_storage\nfrom snuba.processor import InsertBatch\nfrom snuba.query.data_source.simple import Entity\nfrom snuba.query.logical import Query\n",
        "target_code_len": 396,
        "diff_format": "@@ -5,5 +5,8 @@\n from snuba.consumers.types import KafkaMessageMetadata\n+from snuba.datasets.entities import EntityKey\n+from snuba.datasets.entities.factory import get_entity\n from snuba.datasets.storages import StorageKey\n-from snuba.datasets.storages.factory import get_storage, get_writable_storage\n+from snuba.datasets.storages.factory import get_writable_storage\n from snuba.processor import InsertBatch\n+from snuba.query.data_source.simple import Entity\n from snuba.query.logical import Query\n",
        "source_code_with_indent": "from snuba.consumers.types import KafkaMessageMetadata\nfrom snuba.datasets.storages import StorageKey\nfrom snuba.datasets.storages.factory import get_storage, get_writable_storage\nfrom snuba.processor import InsertBatch\nfrom snuba.query.logical import Query\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from snuba.consumers.types import KafkaMessageMetadata\nfrom snuba.datasets.entities import EntityKey\nfrom snuba.datasets.entities.factory import get_entity\nfrom snuba.datasets.storages import StorageKey\nfrom snuba.datasets.storages.factory import get_writable_storage\nfrom snuba.processor import InsertBatch\nfrom snuba.query.data_source.simple import Entity\nfrom snuba.query.logical import Query\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    query = Query(get_storage(StorageKey.ERRORS).get_schema().get_data_source())\n\n",
        "source_code_len": 83,
        "target_code": "\n    query = Query(\n        Entity(EntityKey.EVENTS, get_entity(EntityKey.EVENTS).get_data_model())\n    )\n\n",
        "target_code_len": 107,
        "diff_format": "@@ -32,3 +35,5 @@\n \n-    query = Query(get_storage(StorageKey.ERRORS).get_schema().get_data_source())\n+    query = Query(\n+        Entity(EntityKey.EVENTS, get_entity(EntityKey.EVENTS).get_data_model())\n+    )\n \n",
        "source_code_with_indent": "\n    query = Query(get_storage(StorageKey.ERRORS).get_schema().get_data_source())\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    query = Query(\n        Entity(EntityKey.EVENTS, get_entity(EntityKey.EVENTS).get_data_model())\n    )\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    query = Query(get_storage(StorageKey.ERRORS).get_schema().get_data_source())\n\n",
        "source_code_len": 83,
        "target_code": "\n    query = Query(\n        Entity(EntityKey.EVENTS, get_entity(EntityKey.EVENTS).get_data_model())\n    )\n\n",
        "target_code_len": 107,
        "diff_format": "@@ -127,3 +132,5 @@\n \n-    query = Query(get_storage(StorageKey.ERRORS).get_schema().get_data_source())\n+    query = Query(\n+        Entity(EntityKey.EVENTS, get_entity(EntityKey.EVENTS).get_data_model())\n+    )\n \n",
        "source_code_with_indent": "\n    query = Query(get_storage(StorageKey.ERRORS).get_schema().get_data_source())\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    query = Query(\n        Entity(EntityKey.EVENTS, get_entity(EntityKey.EVENTS).get_data_model())\n    )\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "getsentry/snuba",
    "commit": "b883f37aba61953d80fba840e217172d4364e2ff",
    "filename": "tests/datasets/test_spans_processor.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/getsentry-snuba/tests/datasets/test_spans_processor.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/datasets/test_spans_processor.py:124:54 Incompatible parameter type [6]: Expected `float` for 1st positional only parameter to call `datetime.utcfromtimestamp` but got `datetime`.",
    "message": " Expected `float` for 1st positional only parameter to call `datetime.utcfromtimestamp` but got `datetime`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 124,
    "warning_line": "            span_start_ts = datetime.utcfromtimestamp(s.start_timestamp)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    op: str\n    start_timestamp: datetime\n    timestamp: datetime\n\n",
        "source_code_len": 67,
        "target_code": "    op: str\n    start_timestamp: float\n    timestamp: float\n\n",
        "target_code_len": 61,
        "diff_format": "@@ -15,4 +15,4 @@\n     op: str\n-    start_timestamp: datetime\n-    timestamp: datetime\n+    start_timestamp: float\n+    timestamp: float\n \n",
        "source_code_with_indent": "    op: str\n    start_timestamp: datetime\n    timestamp: datetime\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    op: str\n    start_timestamp: float\n    timestamp: float\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "getsentry/snuba",
    "commit": "b883f37aba61953d80fba840e217172d4364e2ff",
    "filename": "tests/datasets/test_spans_processor.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/getsentry-snuba/tests/datasets/test_spans_processor.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/datasets/test_spans_processor.py:125:55 Incompatible parameter type [6]: Expected `float` for 1st positional only parameter to call `datetime.utcfromtimestamp` but got `datetime`.",
    "message": " Expected `float` for 1st positional only parameter to call `datetime.utcfromtimestamp` but got `datetime`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 125,
    "warning_line": "            span_finish_ts = datetime.utcfromtimestamp(s.timestamp)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    op: str\n    start_timestamp: datetime\n    timestamp: datetime\n\n",
        "source_code_len": 67,
        "target_code": "    op: str\n    start_timestamp: float\n    timestamp: float\n\n",
        "target_code_len": 61,
        "diff_format": "@@ -15,4 +15,4 @@\n     op: str\n-    start_timestamp: datetime\n-    timestamp: datetime\n+    start_timestamp: float\n+    timestamp: float\n \n",
        "source_code_with_indent": "    op: str\n    start_timestamp: datetime\n    timestamp: datetime\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    op: str\n    start_timestamp: float\n    timestamp: float\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "getsentry/snuba",
    "commit": "b883f37aba61953d80fba840e217172d4364e2ff",
    "filename": "tests/datasets/test_spans_processor.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/getsentry-snuba/tests/datasets/test_spans_processor.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/datasets/test_spans_processor.py:171:16 Incompatible parameter type [6]: Expected `datetime` for 5th parameter `start_timestamp` to call `SpanData.__init__` but got `float`.",
    "message": " Expected `datetime` for 5th parameter `start_timestamp` to call `SpanData.__init__` but got `float`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 171,
    "warning_line": "                start_timestamp=(start_timestamp + timedelta(seconds=1)).timestamp(),",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    op: str\n    start_timestamp: datetime\n    timestamp: datetime\n\n",
        "source_code_len": 67,
        "target_code": "    op: str\n    start_timestamp: float\n    timestamp: float\n\n",
        "target_code_len": 61,
        "diff_format": "@@ -15,4 +15,4 @@\n     op: str\n-    start_timestamp: datetime\n-    timestamp: datetime\n+    start_timestamp: float\n+    timestamp: float\n \n",
        "source_code_with_indent": "    op: str\n    start_timestamp: datetime\n    timestamp: datetime\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    op: str\n    start_timestamp: float\n    timestamp: float\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "getsentry/snuba",
    "commit": "b883f37aba61953d80fba840e217172d4364e2ff",
    "filename": "tests/datasets/test_spans_processor.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/getsentry-snuba/tests/datasets/test_spans_processor.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/datasets/test_spans_processor.py:172:16 Incompatible parameter type [6]: Expected `datetime` for 6th parameter `timestamp` to call `SpanData.__init__` but got `float`.",
    "message": " Expected `datetime` for 6th parameter `timestamp` to call `SpanData.__init__` but got `float`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 172,
    "warning_line": "                timestamp=(start_timestamp + timedelta(seconds=2)).timestamp(),",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    op: str\n    start_timestamp: datetime\n    timestamp: datetime\n\n",
        "source_code_len": 67,
        "target_code": "    op: str\n    start_timestamp: float\n    timestamp: float\n\n",
        "target_code_len": 61,
        "diff_format": "@@ -15,4 +15,4 @@\n     op: str\n-    start_timestamp: datetime\n-    timestamp: datetime\n+    start_timestamp: float\n+    timestamp: float\n \n",
        "source_code_with_indent": "    op: str\n    start_timestamp: datetime\n    timestamp: datetime\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    op: str\n    start_timestamp: float\n    timestamp: float\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "getsentry/snuba",
    "commit": "b883f37aba61953d80fba840e217172d4364e2ff",
    "filename": "tests/datasets/test_spans_processor.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/getsentry-snuba/tests/datasets/test_spans_processor.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/datasets/test_spans_processor.py:179:16 Incompatible parameter type [6]: Expected `datetime` for 5th parameter `start_timestamp` to call `SpanData.__init__` but got `float`.",
    "message": " Expected `datetime` for 5th parameter `start_timestamp` to call `SpanData.__init__` but got `float`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 179,
    "warning_line": "                start_timestamp=(start_timestamp + timedelta(seconds=2)).timestamp(),",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    op: str\n    start_timestamp: datetime\n    timestamp: datetime\n\n",
        "source_code_len": 67,
        "target_code": "    op: str\n    start_timestamp: float\n    timestamp: float\n\n",
        "target_code_len": 61,
        "diff_format": "@@ -15,4 +15,4 @@\n     op: str\n-    start_timestamp: datetime\n-    timestamp: datetime\n+    start_timestamp: float\n+    timestamp: float\n \n",
        "source_code_with_indent": "    op: str\n    start_timestamp: datetime\n    timestamp: datetime\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    op: str\n    start_timestamp: float\n    timestamp: float\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "getsentry/snuba",
    "commit": "b883f37aba61953d80fba840e217172d4364e2ff",
    "filename": "tests/datasets/test_spans_processor.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/getsentry-snuba/tests/datasets/test_spans_processor.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/datasets/test_spans_processor.py:180:16 Incompatible parameter type [6]: Expected `datetime` for 6th parameter `timestamp` to call `SpanData.__init__` but got `float`.",
    "message": " Expected `datetime` for 6th parameter `timestamp` to call `SpanData.__init__` but got `float`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 180,
    "warning_line": "                timestamp=(start_timestamp + timedelta(seconds=3)).timestamp(),",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    op: str\n    start_timestamp: datetime\n    timestamp: datetime\n\n",
        "source_code_len": 67,
        "target_code": "    op: str\n    start_timestamp: float\n    timestamp: float\n\n",
        "target_code_len": 61,
        "diff_format": "@@ -15,4 +15,4 @@\n     op: str\n-    start_timestamp: datetime\n-    timestamp: datetime\n+    start_timestamp: float\n+    timestamp: float\n \n",
        "source_code_with_indent": "    op: str\n    start_timestamp: datetime\n    timestamp: datetime\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    op: str\n    start_timestamp: float\n    timestamp: float\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "getsentry/snuba",
    "commit": "b883f37aba61953d80fba840e217172d4364e2ff",
    "filename": "tests/datasets/test_transaction_processor.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/getsentry-snuba/tests/datasets/test_transaction_processor.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/datasets/test_transaction_processor.py:37:8 Incompatible return type [7]: Expected `Mapping[str, typing.Any]` but got `Tuple[int, str, typing.Dict[str, typing.Union[None, typing.Dict[str, typing.Union[None, typing.Dict[str, typing.Dict[str, typing.Dict[str, float]]], typing.Dict[str, typing.Dict[str, typing.Union[bool, str]]], typing.Dict[str, typing.List[typing.Dict[str, typing.Union[float, str]]]], typing.Dict[str, typing.Union[None, Mapping[str, str], str]], typing.Dict[str, typing.Union[None, typing.Dict[str, None], typing.Dict[str, float], typing.Dict[str, int], typing.Dict[Variable[_KT], Variable[_VT]]]], typing.Dict[str, typing.Union[None, typing.Dict[str, str], typing.List[typing.Union[typing.List[Optional[str]], typing.List[str]]], str]], typing.Dict[str, typing.Union[None, typing.List[typing.Dict[str, str]], str]], typing.Dict[str, str], typing.List[typing.Dict[str, typing.Union[None, typing.Dict[Variable[_KT], Variable[_VT]], float, str]]], typing.List[typing.Union[typing.List[Optional[str]], typing.List[str]]], float, int, str]], int, str]]]`.",
    "message": " Expected `Mapping[str, typing.Any]` but got `Tuple[int, str, typing.Dict[str, typing.Union[None, typing.Dict[str, typing.Union[None, typing.Dict[str, typing.Dict[str, typing.Dict[str, float]]], typing.Dict[str, typing.Dict[str, typing.Union[bool, str]]], typing.Dict[str, typing.List[typing.Dict[str, typing.Union[float, str]]]], typing.Dict[str, typing.Union[None, Mapping[str, str], str]], typing.Dict[str, typing.Union[None, typing.Dict[str, None], typing.Dict[str, float], typing.Dict[str, int], typing.Dict[Variable[_KT], Variable[_VT]]]], typing.Dict[str, typing.Union[None, typing.Dict[str, str], typing.List[typing.Union[typing.List[Optional[str]], typing.List[str]]], str]], typing.Dict[str, typing.Union[None, typing.List[typing.Dict[str, str]], str]], typing.Dict[str, str], typing.List[typing.Dict[str, typing.Union[None, typing.Dict[Variable[_KT], Variable[_VT]], float, str]]], typing.List[typing.Union[typing.List[Optional[str]], typing.List[str]]], float, int, str]], int, str]]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 37,
    "warning_line": "        return (",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def serialize(self) -> Mapping[str, Any]:\n        return (\n",
        "source_code_len": 64,
        "target_code": "\n    def serialize(self) -> Tuple[int, str, Mapping[str, Any]]:\n        return (\n",
        "target_code_len": 81,
        "diff_format": "@@ -35,3 +35,3 @@\n \n-    def serialize(self) -> Mapping[str, Any]:\n+    def serialize(self) -> Tuple[int, str, Mapping[str, Any]]:\n         return (\n",
        "source_code_with_indent": "\n    def serialize(self) -> Mapping[str, Any]:\n        <IND>return (\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    def serialize(self) -> Tuple[int, str, Mapping[str, Any]]:\n        <IND>return (\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "getsentry/snuba",
    "commit": "b883f37aba61953d80fba840e217172d4364e2ff",
    "filename": "tests/datasets/test_transaction_processor.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/getsentry-snuba/tests/datasets/test_transaction_processor.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/datasets/test_transaction_processor.py:262:16 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `Mapping.__getitem__` but got `int`.",
    "message": " Expected `str` for 1st positional only parameter to call `Mapping.__getitem__` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 262,
    "warning_line": "        payload[2][\"data\"][\"type\"] = \"error\"",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def serialize(self) -> Mapping[str, Any]:\n        return (\n",
        "source_code_len": 64,
        "target_code": "\n    def serialize(self) -> Tuple[int, str, Mapping[str, Any]]:\n        return (\n",
        "target_code_len": 81,
        "diff_format": "@@ -35,3 +35,3 @@\n \n-    def serialize(self) -> Mapping[str, Any]:\n+    def serialize(self) -> Tuple[int, str, Mapping[str, Any]]:\n         return (\n",
        "source_code_with_indent": "\n    def serialize(self) -> Mapping[str, Any]:\n        <IND>return (\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    def serialize(self) -> Tuple[int, str, Mapping[str, Any]]:\n        <IND>return (\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "getsentry/snuba",
    "commit": "b883f37aba61953d80fba840e217172d4364e2ff",
    "filename": "tests/datasets/test_transaction_processor.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/getsentry-snuba/tests/datasets/test_transaction_processor.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/datasets/test_transaction_processor.py:268:41 Incompatible parameter type [6]: Expected `Tuple[int, str, typing.Any]` for 1st positional only parameter to call `TransactionsMessageProcessor.process_message` but got `Mapping[str, typing.Any]`.",
    "message": " Expected `Tuple[int, str, typing.Any]` for 1st positional only parameter to call `TransactionsMessageProcessor.process_message` but got `Mapping[str, typing.Any]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 268,
    "warning_line": "        assert processor.process_message(payload, meta) is None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def serialize(self) -> Mapping[str, Any]:\n        return (\n",
        "source_code_len": 64,
        "target_code": "\n    def serialize(self) -> Tuple[int, str, Mapping[str, Any]]:\n        return (\n",
        "target_code_len": 81,
        "diff_format": "@@ -35,3 +35,3 @@\n \n-    def serialize(self) -> Mapping[str, Any]:\n+    def serialize(self) -> Tuple[int, str, Mapping[str, Any]]:\n         return (\n",
        "source_code_with_indent": "\n    def serialize(self) -> Mapping[str, Any]:\n        <IND>return (\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    def serialize(self) -> Tuple[int, str, Mapping[str, Any]]:\n        <IND>return (\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "getsentry/snuba",
    "commit": "b883f37aba61953d80fba840e217172d4364e2ff",
    "filename": "tests/datasets/test_transaction_processor.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/getsentry-snuba/tests/datasets/test_transaction_processor.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/datasets/test_transaction_processor.py:298:20 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `Mapping.__getitem__` but got `int`.",
    "message": " Expected `str` for 1st positional only parameter to call `Mapping.__getitem__` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 298,
    "warning_line": "        del payload[2][\"data\"][\"contexts\"]",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def serialize(self) -> Mapping[str, Any]:\n        return (\n",
        "source_code_len": 64,
        "target_code": "\n    def serialize(self) -> Tuple[int, str, Mapping[str, Any]]:\n        return (\n",
        "target_code_len": 81,
        "diff_format": "@@ -35,3 +35,3 @@\n \n-    def serialize(self) -> Mapping[str, Any]:\n+    def serialize(self) -> Tuple[int, str, Mapping[str, Any]]:\n         return (\n",
        "source_code_with_indent": "\n    def serialize(self) -> Mapping[str, Any]:\n        <IND>return (\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    def serialize(self) -> Tuple[int, str, Mapping[str, Any]]:\n        <IND>return (\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "getsentry/snuba",
    "commit": "b883f37aba61953d80fba840e217172d4364e2ff",
    "filename": "tests/datasets/test_transaction_processor.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/getsentry-snuba/tests/datasets/test_transaction_processor.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/datasets/test_transaction_processor.py:304:41 Incompatible parameter type [6]: Expected `Tuple[int, str, typing.Any]` for 1st positional only parameter to call `TransactionsMessageProcessor.process_message` but got `Mapping[str, typing.Any]`.",
    "message": " Expected `Tuple[int, str, typing.Any]` for 1st positional only parameter to call `TransactionsMessageProcessor.process_message` but got `Mapping[str, typing.Any]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 304,
    "warning_line": "        assert processor.process_message(payload, meta) is None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def serialize(self) -> Mapping[str, Any]:\n        return (\n",
        "source_code_len": 64,
        "target_code": "\n    def serialize(self) -> Tuple[int, str, Mapping[str, Any]]:\n        return (\n",
        "target_code_len": 81,
        "diff_format": "@@ -35,3 +35,3 @@\n \n-    def serialize(self) -> Mapping[str, Any]:\n+    def serialize(self) -> Tuple[int, str, Mapping[str, Any]]:\n         return (\n",
        "source_code_with_indent": "\n    def serialize(self) -> Mapping[str, Any]:\n        <IND>return (\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    def serialize(self) -> Tuple[int, str, Mapping[str, Any]]:\n        <IND>return (\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "getsentry/snuba",
    "commit": "b883f37aba61953d80fba840e217172d4364e2ff",
    "filename": "tests/datasets/test_transaction_processor.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/getsentry-snuba/tests/datasets/test_transaction_processor.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/datasets/test_transaction_processor.py:336:12 Incompatible parameter type [6]: Expected `Tuple[int, str, typing.Any]` for 1st positional only parameter to call `TransactionsMessageProcessor.process_message` but got `Mapping[str, typing.Any]`.",
    "message": " Expected `Tuple[int, str, typing.Any]` for 1st positional only parameter to call `TransactionsMessageProcessor.process_message` but got `Mapping[str, typing.Any]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 336,
    "warning_line": "            message.serialize(), meta",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def serialize(self) -> Mapping[str, Any]:\n        return (\n",
        "source_code_len": 64,
        "target_code": "\n    def serialize(self) -> Tuple[int, str, Mapping[str, Any]]:\n        return (\n",
        "target_code_len": 81,
        "diff_format": "@@ -35,3 +35,3 @@\n \n-    def serialize(self) -> Mapping[str, Any]:\n+    def serialize(self) -> Tuple[int, str, Mapping[str, Any]]:\n         return (\n",
        "source_code_with_indent": "\n    def serialize(self) -> Mapping[str, Any]:\n        <IND>return (\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    def serialize(self) -> Tuple[int, str, Mapping[str, Any]]:\n        <IND>return (\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]