[
  {
    "project": "Qiskit/qiskit-terra",
    "commit": "95fd1b923660f3db4eec8b77e63bf60639a3c15b",
    "filename": "qiskit/aqua/operators/converters/abelian_grouper.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Qiskit-qiskit-terra/qiskit/aqua/operators/converters/abelian_grouper.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "qiskit/aqua/operators/converters/abelian_grouper.py:123:12 Incompatible return type [7]: Expected `ListOp` but got `OperatorBase`.",
    "message": " Expected `ListOp` but got `OperatorBase`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 123,
    "warning_line": "            return group_ops[0] * list_op.coeff",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        if len(group_ops) == 1:\n            return group_ops[0] * list_op.coeff\n        return list_op.__class__(group_ops, coeff=list_op.coeff)\n\n",
        "source_code_len": 146,
        "target_code": "        if len(group_ops) == 1:\n            return group_ops[0] * list_op.coeff  # type: ignore\n        return list_op.__class__(group_ops, coeff=list_op.coeff)  # type: ignore\n\n",
        "target_code_len": 178,
        "diff_format": "@@ -122,4 +122,4 @@\n         if len(group_ops) == 1:\n-            return group_ops[0] * list_op.coeff\n-        return list_op.__class__(group_ops, coeff=list_op.coeff)\n+            return group_ops[0] * list_op.coeff  # type: ignore\n+        return list_op.__class__(group_ops, coeff=list_op.coeff)  # type: ignore\n \n",
        "source_code_with_indent": "        if len(group_ops) == 1:\n            <IND>return group_ops[0] * list_op.coeff\n        <DED>return list_op.__class__(group_ops, coeff=list_op.coeff)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        if len(group_ops) == 1:\n            <IND>return group_ops[0] * list_op.coeff  # type: ignore\n        <DED>return list_op.__class__(group_ops, coeff=list_op.coeff)  # type: ignore\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Qiskit/qiskit-terra",
    "commit": "95fd1b923660f3db4eec8b77e63bf60639a3c15b",
    "filename": "qiskit/aqua/operators/converters/abelian_grouper.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Qiskit-qiskit-terra/qiskit/aqua/operators/converters/abelian_grouper.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "qiskit/aqua/operators/converters/abelian_grouper.py:124:33 Incompatible parameter type [6]: Expected `List[OperatorBase]` for 1st positional only parameter to call `ListOp.__init__` but got `List[ListOp]`.",
    "message": " Expected `List[OperatorBase]` for 1st positional only parameter to call `ListOp.__init__` but got `List[ListOp]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 124,
    "warning_line": "        return list_op.__class__(group_ops, coeff=list_op.coeff)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        if len(group_ops) == 1:\n            return group_ops[0] * list_op.coeff\n        return list_op.__class__(group_ops, coeff=list_op.coeff)\n\n",
        "source_code_len": 146,
        "target_code": "        if len(group_ops) == 1:\n            return group_ops[0] * list_op.coeff  # type: ignore\n        return list_op.__class__(group_ops, coeff=list_op.coeff)  # type: ignore\n\n",
        "target_code_len": 178,
        "diff_format": "@@ -122,4 +122,4 @@\n         if len(group_ops) == 1:\n-            return group_ops[0] * list_op.coeff\n-        return list_op.__class__(group_ops, coeff=list_op.coeff)\n+            return group_ops[0] * list_op.coeff  # type: ignore\n+        return list_op.__class__(group_ops, coeff=list_op.coeff)  # type: ignore\n \n",
        "source_code_with_indent": "        if len(group_ops) == 1:\n            <IND>return group_ops[0] * list_op.coeff\n        <DED>return list_op.__class__(group_ops, coeff=list_op.coeff)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        if len(group_ops) == 1:\n            <IND>return group_ops[0] * list_op.coeff  # type: ignore\n        <DED>return list_op.__class__(group_ops, coeff=list_op.coeff)  # type: ignore\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Qiskit/qiskit-terra",
    "commit": "95fd1b923660f3db4eec8b77e63bf60639a3c15b",
    "filename": "qiskit/aqua/operators/converters/abelian_grouper.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Qiskit-qiskit-terra/qiskit/aqua/operators/converters/abelian_grouper.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "qiskit/aqua/operators/converters/abelian_grouper.py:159:8 Incompatible return type [7]: Expected `List[Tuple[int, int]]` but got `zip[typing.Any]`.",
    "message": " Expected `List[Tuple[int, int]]` but got `zip[typing.Any]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 159,
    "warning_line": "        return zip(*np.where(np.triu(np.logical_not(mat3), k=1)))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from collections import defaultdict\nfrom typing import List, Tuple, Dict\n\n",
        "source_code_len": 74,
        "target_code": "from collections import defaultdict\nfrom typing import List, Tuple, Dict, cast\n\n",
        "target_code_len": 80,
        "diff_format": "@@ -18,3 +18,3 @@\n from collections import defaultdict\n-from typing import List, Tuple, Dict\n+from typing import List, Tuple, Dict, cast\n \n",
        "source_code_with_indent": "from collections import defaultdict\nfrom typing import List, Tuple, Dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from collections import defaultdict\nfrom typing import List, Tuple, Dict, cast\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        # return [(i, j) if mat3[i, j] is False and i < j]\n        return zip(*np.where(np.triu(np.logical_not(mat3), k=1)))\n\n",
        "source_code_len": 126,
        "target_code": "        # return [(i, j) if mat3[i, j] is False and i < j]\n        return cast(List[Tuple[int, int]], zip(*np.where(np.triu(np.logical_not(mat3), k=1))))\n\n",
        "target_code_len": 155,
        "diff_format": "@@ -158,3 +158,3 @@\n         # return [(i, j) if mat3[i, j] is False and i < j]\n-        return zip(*np.where(np.triu(np.logical_not(mat3), k=1)))\n+        return cast(List[Tuple[int, int]], zip(*np.where(np.triu(np.logical_not(mat3), k=1))))\n \n",
        "source_code_with_indent": "        # return [(i, j) if mat3[i, j] is False and i < j]\n        return zip(*np.where(np.triu(np.logical_not(mat3), k=1)))\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        # return [(i, j) if mat3[i, j] is False and i < j]\n        return cast(List[Tuple[int, int]], zip(*np.where(np.triu(np.logical_not(mat3), k=1))))\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Qiskit/qiskit-terra",
    "commit": "95fd1b923660f3db4eec8b77e63bf60639a3c15b",
    "filename": "qiskit/aqua/operators/converters/pauli_basis_change.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Qiskit-qiskit-terra/qiskit/aqua/operators/converters/pauli_basis_change.py",
    "file_hunks_size": 15,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "qiskit/aqua/operators/converters/pauli_basis_change.py:169:55 Incompatible parameter type [6]: Expected `PauliOp` for 1st positional only parameter to call `PauliBasisChange.get_diagonal_pauli_op` but got `OperatorBase`.",
    "message": " Expected `PauliOp` for 1st positional only parameter to call `PauliBasisChange.get_diagonal_pauli_op` but got `OperatorBase`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 169,
    "warning_line": "                diag_ops = [self.get_diagonal_pauli_op(op) for op in operator.oplist]",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "                cob_instr_op, _ = self.get_cob_circuit(origin_pauli)\n                diag_ops = [self.get_diagonal_pauli_op(op) for op in operator.oplist]\n                dest_pauli_op = operator.__class__(diag_ops, coeff=operator.coeff, abelian=True)\n                return self._replacement_fn(cob_instr_op, dest_pauli_op)\n            else:\n",
        "source_code_len": 343,
        "target_code": "                cob_instr_op, _ = self.get_cob_circuit(origin_pauli)\n                diag_ops = \\\n                    [self.get_diagonal_pauli_op(op) for op in operator.oplist]  # type: ignore\n                dest_pauli_op = \\\n                    operator.__class__(diag_ops, coeff=operator.coeff, abelian=True)  # type: ignore\n                return self._replacement_fn(cob_instr_op, dest_pauli_op)  # type: ignore\n            else:\n",
        "target_code_len": 435,
        "diff_format": "@@ -168,5 +168,7 @@\n                 cob_instr_op, _ = self.get_cob_circuit(origin_pauli)\n-                diag_ops = [self.get_diagonal_pauli_op(op) for op in operator.oplist]\n-                dest_pauli_op = operator.__class__(diag_ops, coeff=operator.coeff, abelian=True)\n-                return self._replacement_fn(cob_instr_op, dest_pauli_op)\n+                diag_ops = \\\n+                    [self.get_diagonal_pauli_op(op) for op in operator.oplist]  # type: ignore\n+                dest_pauli_op = \\\n+                    operator.__class__(diag_ops, coeff=operator.coeff, abelian=True)  # type: ignore\n+                return self._replacement_fn(cob_instr_op, dest_pauli_op)  # type: ignore\n             else:\n",
        "source_code_with_indent": "                cob_instr_op, _ = self.get_cob_circuit(origin_pauli)\n                diag_ops = [self.get_diagonal_pauli_op(op) for op in operator.oplist]\n                dest_pauli_op = operator.__class__(diag_ops, coeff=operator.coeff, abelian=True)\n                return self._replacement_fn(cob_instr_op, dest_pauli_op)\n            <DED>else:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent_exact_match": false,
        "target_code_with_indent": "                cob_instr_op, _ = self.get_cob_circuit(origin_pauli)\n                diag_ops =                    [self.get_diagonal_pauli_op(op) for op in operator.oplist]  # type: ignore\n                dest_pauli_op =                    operator.__class__(diag_ops, coeff=operator.coeff, abelian=True)  # type: ignore\n                return self._replacement_fn(cob_instr_op, dest_pauli_op)  # type: ignore\n            <DED>else:\n"
      }
    ]
  },
  {
    "project": "Qiskit/qiskit-terra",
    "commit": "95fd1b923660f3db4eec8b77e63bf60639a3c15b",
    "filename": "qiskit/aqua/operators/converters/pauli_basis_change.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Qiskit-qiskit-terra/qiskit/aqua/operators/converters/pauli_basis_change.py",
    "file_hunks_size": 15,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "qiskit/aqua/operators/converters/pauli_basis_change.py:170:51 Incompatible parameter type [6]: Expected `typing.List[OperatorBase]` for 1st positional only parameter to call `ListOp.__init__` but got `typing.List[PauliOp]`.",
    "message": " Expected `typing.List[OperatorBase]` for 1st positional only parameter to call `ListOp.__init__` but got `typing.List[PauliOp]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 170,
    "warning_line": "                dest_pauli_op = operator.__class__(diag_ops, coeff=operator.coeff, abelian=True)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "                cob_instr_op, _ = self.get_cob_circuit(origin_pauli)\n                diag_ops = [self.get_diagonal_pauli_op(op) for op in operator.oplist]\n                dest_pauli_op = operator.__class__(diag_ops, coeff=operator.coeff, abelian=True)\n                return self._replacement_fn(cob_instr_op, dest_pauli_op)\n            else:\n",
        "source_code_len": 343,
        "target_code": "                cob_instr_op, _ = self.get_cob_circuit(origin_pauli)\n                diag_ops = \\\n                    [self.get_diagonal_pauli_op(op) for op in operator.oplist]  # type: ignore\n                dest_pauli_op = \\\n                    operator.__class__(diag_ops, coeff=operator.coeff, abelian=True)  # type: ignore\n                return self._replacement_fn(cob_instr_op, dest_pauli_op)  # type: ignore\n            else:\n",
        "target_code_len": 435,
        "diff_format": "@@ -168,5 +168,7 @@\n                 cob_instr_op, _ = self.get_cob_circuit(origin_pauli)\n-                diag_ops = [self.get_diagonal_pauli_op(op) for op in operator.oplist]\n-                dest_pauli_op = operator.__class__(diag_ops, coeff=operator.coeff, abelian=True)\n-                return self._replacement_fn(cob_instr_op, dest_pauli_op)\n+                diag_ops = \\\n+                    [self.get_diagonal_pauli_op(op) for op in operator.oplist]  # type: ignore\n+                dest_pauli_op = \\\n+                    operator.__class__(diag_ops, coeff=operator.coeff, abelian=True)  # type: ignore\n+                return self._replacement_fn(cob_instr_op, dest_pauli_op)  # type: ignore\n             else:\n",
        "source_code_with_indent": "                cob_instr_op, _ = self.get_cob_circuit(origin_pauli)\n                diag_ops = [self.get_diagonal_pauli_op(op) for op in operator.oplist]\n                dest_pauli_op = operator.__class__(diag_ops, coeff=operator.coeff, abelian=True)\n                return self._replacement_fn(cob_instr_op, dest_pauli_op)\n            <DED>else:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent_exact_match": false,
        "target_code_with_indent": "                cob_instr_op, _ = self.get_cob_circuit(origin_pauli)\n                diag_ops =                    [self.get_diagonal_pauli_op(op) for op in operator.oplist]  # type: ignore\n                dest_pauli_op =                    operator.__class__(diag_ops, coeff=operator.coeff, abelian=True)  # type: ignore\n                return self._replacement_fn(cob_instr_op, dest_pauli_op)  # type: ignore\n            <DED>else:\n"
      }
    ]
  },
  {
    "project": "Qiskit/qiskit-terra",
    "commit": "95fd1b923660f3db4eec8b77e63bf60639a3c15b",
    "filename": "qiskit/aqua/operators/converters/pauli_basis_change.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Qiskit-qiskit-terra/qiskit/aqua/operators/converters/pauli_basis_change.py",
    "file_hunks_size": 15,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "qiskit/aqua/operators/converters/pauli_basis_change.py:290:59 Invalid type [31]: Expression `(qiskit.aqua.operators.primitive_ops.pauli_op.PauliOp, qiskit.aqua.operators.primitive_ops.pauli_op.PauliOp)` is not a valid type.",
    "message": " Expression `(qiskit.aqua.operators.primitive_ops.pauli_op.PauliOp, qiskit.aqua.operators.primitive_ops.pauli_op.PauliOp)` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 290,
    "warning_line": "                                   pauli_op2: PauliOp) -> (PauliOp, PauliOp):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import Optional, Callable, Union\nimport logging\n",
        "source_code_len": 61,
        "target_code": "\nfrom typing import Optional, Callable, Union, Tuple, cast\nimport logging\n",
        "target_code_len": 74,
        "diff_format": "@@ -16,3 +16,3 @@\n \n-from typing import Optional, Callable, Union\n+from typing import Optional, Callable, Union, Tuple, cast\n import logging\n",
        "source_code_with_indent": "\nfrom typing import Optional, Callable, Union\nimport logging\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import Optional, Callable, Union, Tuple, cast\nimport logging\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                                   pauli_op1: PauliOp,\n                                   pauli_op2: PauliOp) -> (PauliOp, PauliOp):\n        r\"\"\"\n",
        "source_code_len": 146,
        "target_code": "                                   pauli_op1: PauliOp,\n                                   pauli_op2: PauliOp) -> Tuple[PauliOp, PauliOp]:\n        r\"\"\"\n",
        "target_code_len": 151,
        "diff_format": "@@ -289,3 +294,3 @@\n                                    pauli_op1: PauliOp,\n-                                   pauli_op2: PauliOp) -> (PauliOp, PauliOp):\n+                                   pauli_op2: PauliOp) -> Tuple[PauliOp, PauliOp]:\n         r\"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "                                   pauli_op1: PauliOp,\n                                   pauli_op2: PauliOp) -> (PauliOp, PauliOp):\n        <IND>",
        "target_code_with_indent": "                                   pauli_op1: PauliOp,\n                                   pauli_op2: PauliOp) -> Tuple[PauliOp, PauliOp]:\n        <IND>"
      }
    ]
  },
  {
    "project": "Qiskit/qiskit-terra",
    "commit": "95fd1b923660f3db4eec8b77e63bf60639a3c15b",
    "filename": "qiskit/aqua/operators/converters/pauli_basis_change.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Qiskit-qiskit-terra/qiskit/aqua/operators/converters/pauli_basis_change.py",
    "file_hunks_size": 15,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "qiskit/aqua/operators/converters/pauli_basis_change.py:395:65 Invalid type [31]: Expression `(qiskit.aqua.operators.primitive_ops.primitive_op.PrimitiveOp, qiskit.aqua.operators.primitive_ops.pauli_op.PauliOp)` is not a valid type.",
    "message": " Expression `(qiskit.aqua.operators.primitive_ops.primitive_op.PrimitiveOp, qiskit.aqua.operators.primitive_ops.pauli_op.PauliOp)` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 395,
    "warning_line": "    def get_cob_circuit(self, origin: Union[Pauli, PauliOp]) -> (PrimitiveOp, PauliOp):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import Optional, Callable, Union\nimport logging\n",
        "source_code_len": 61,
        "target_code": "\nfrom typing import Optional, Callable, Union, Tuple, cast\nimport logging\n",
        "target_code_len": 74,
        "diff_format": "@@ -16,3 +16,3 @@\n \n-from typing import Optional, Callable, Union\n+from typing import Optional, Callable, Union, Tuple, cast\n import logging\n",
        "source_code_with_indent": "\nfrom typing import Optional, Callable, Union\nimport logging\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import Optional, Callable, Union, Tuple, cast\nimport logging\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def get_cob_circuit(self, origin: Union[Pauli, PauliOp]) -> (PrimitiveOp, PauliOp):\n        r\"\"\"\n",
        "source_code_len": 102,
        "target_code": "\n    def get_cob_circuit(self, origin: Union[Pauli, PauliOp]) -> Tuple[PrimitiveOp, PauliOp]:\n        r\"\"\"\n",
        "target_code_len": 107,
        "diff_format": "@@ -394,3 +399,3 @@\n \n-    def get_cob_circuit(self, origin: Union[Pauli, PauliOp]) -> (PrimitiveOp, PauliOp):\n+    def get_cob_circuit(self, origin: Union[Pauli, PauliOp]) -> Tuple[PrimitiveOp, PauliOp]:\n         r\"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def get_cob_circuit(self, origin: Union[Pauli, PauliOp]) -> (PrimitiveOp, PauliOp):\n        <IND>",
        "target_code_with_indent": "\n    <DED>def get_cob_circuit(self, origin: Union[Pauli, PauliOp]) -> Tuple[PrimitiveOp, PauliOp]:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        return cob_instruction, destination\n",
        "source_code_len": 45,
        "target_code": "\n        return cast(PrimitiveOp, cob_instruction), destination\n",
        "target_code_len": 64,
        "diff_format": "@@ -473,2 +479,2 @@\n \n-        return cob_instruction, destination\n+        return cast(PrimitiveOp, cob_instruction), destination\n",
        "source_code_with_indent": "\n        return cob_instruction, destination\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        return cast(PrimitiveOp, cob_instruction), destination\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Qiskit/qiskit-terra",
    "commit": "95fd1b923660f3db4eec8b77e63bf60639a3c15b",
    "filename": "qiskit/aqua/operators/evolutions/evolved_op.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Qiskit-qiskit-terra/qiskit/aqua/operators/evolutions/evolved_op.py",
    "file_hunks_size": 14,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "qiskit/aqua/operators/evolutions/evolved_op.py:71:28 Incompatible parameter type [6]: Expected `List[OperatorBase]` for 1st positional only parameter to call `SummedOp.__init__` but got `List[EvolvedOp]`.",
    "message": " Expected `List[OperatorBase]` for 1st positional only parameter to call `SummedOp.__init__` but got `List[EvolvedOp]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 71,
    "warning_line": "            return SummedOp([self] + other.oplist)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        if isinstance(other, EvolvedOp) and self.primitive == other.primitive:\n            return EvolvedOp(self.primitive, coeff=self.coeff + other.coeff)\n\n        if isinstance(other, SummedOp):\n            return SummedOp([self] + other.oplist)\n\n",
        "source_code_len": 249,
        "target_code": "        if isinstance(other, EvolvedOp) and self.primitive == other.primitive:\n            return EvolvedOp(self.primitive, coeff=self.coeff + other.coeff)  # type: ignore\n\n        if isinstance(other, SummedOp):\n            op_list = [self] + cast(SummedOp, other).oplist  # type: ignore\n            return SummedOp(op_list)  # type: ignore\n\n",
        "target_code_len": 343,
        "diff_format": "@@ -67,6 +67,7 @@\n         if isinstance(other, EvolvedOp) and self.primitive == other.primitive:\n-            return EvolvedOp(self.primitive, coeff=self.coeff + other.coeff)\n+            return EvolvedOp(self.primitive, coeff=self.coeff + other.coeff)  # type: ignore\n \n         if isinstance(other, SummedOp):\n-            return SummedOp([self] + other.oplist)\n+            op_list = [self] + cast(SummedOp, other).oplist  # type: ignore\n+            return SummedOp(op_list)  # type: ignore\n \n",
        "source_code_with_indent": "        <DED>if isinstance(other, EvolvedOp) and self.primitive == other.primitive:\n            <IND>return EvolvedOp(self.primitive, coeff=self.coeff + other.coeff)\n\n        <DED>if isinstance(other, SummedOp):\n            <IND>return SummedOp([self] + other.oplist)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>if isinstance(other, EvolvedOp) and self.primitive == other.primitive:\n            <IND>return EvolvedOp(self.primitive, coeff=self.coeff + other.coeff)  # type: ignore\n\n        <DED>if isinstance(other, SummedOp):\n            <IND>op_list = [self] + cast(SummedOp, other).oplist  # type: ignore\n            return SummedOp(op_list)  # type: ignore\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Qiskit/qiskit-terra",
    "commit": "95fd1b923660f3db4eec8b77e63bf60639a3c15b",
    "filename": "qiskit/aqua/operators/evolutions/evolved_op.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Qiskit-qiskit-terra/qiskit/aqua/operators/evolutions/evolved_op.py",
    "file_hunks_size": 14,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "qiskit/aqua/operators/evolutions/evolved_op.py:71:37 Unsupported operand [58]: `+` is not supported for operand types `List[EvolvedOp]` and `List[OperatorBase]`.",
    "message": " `+` is not supported for operand types `List[EvolvedOp]` and `List[OperatorBase]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 71,
    "warning_line": "            return SummedOp([self] + other.oplist)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        if isinstance(other, EvolvedOp) and self.primitive == other.primitive:\n            return EvolvedOp(self.primitive, coeff=self.coeff + other.coeff)\n\n        if isinstance(other, SummedOp):\n            return SummedOp([self] + other.oplist)\n\n",
        "source_code_len": 249,
        "target_code": "        if isinstance(other, EvolvedOp) and self.primitive == other.primitive:\n            return EvolvedOp(self.primitive, coeff=self.coeff + other.coeff)  # type: ignore\n\n        if isinstance(other, SummedOp):\n            op_list = [self] + cast(SummedOp, other).oplist  # type: ignore\n            return SummedOp(op_list)  # type: ignore\n\n",
        "target_code_len": 343,
        "diff_format": "@@ -67,6 +67,7 @@\n         if isinstance(other, EvolvedOp) and self.primitive == other.primitive:\n-            return EvolvedOp(self.primitive, coeff=self.coeff + other.coeff)\n+            return EvolvedOp(self.primitive, coeff=self.coeff + other.coeff)  # type: ignore\n \n         if isinstance(other, SummedOp):\n-            return SummedOp([self] + other.oplist)\n+            op_list = [self] + cast(SummedOp, other).oplist  # type: ignore\n+            return SummedOp(op_list)  # type: ignore\n \n",
        "source_code_with_indent": "        <DED>if isinstance(other, EvolvedOp) and self.primitive == other.primitive:\n            <IND>return EvolvedOp(self.primitive, coeff=self.coeff + other.coeff)\n\n        <DED>if isinstance(other, SummedOp):\n            <IND>return SummedOp([self] + other.oplist)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>if isinstance(other, EvolvedOp) and self.primitive == other.primitive:\n            <IND>return EvolvedOp(self.primitive, coeff=self.coeff + other.coeff)  # type: ignore\n\n        <DED>if isinstance(other, SummedOp):\n            <IND>op_list = [self] + cast(SummedOp, other).oplist  # type: ignore\n            return SummedOp(op_list)  # type: ignore\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Qiskit/qiskit-terra",
    "commit": "95fd1b923660f3db4eec8b77e63bf60639a3c15b",
    "filename": "qiskit/aqua/operators/evolutions/evolved_op.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Qiskit-qiskit-terra/qiskit/aqua/operators/evolutions/evolved_op.py",
    "file_hunks_size": 14,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "qiskit/aqua/operators/evolutions/evolved_op.py:86:30 Incompatible parameter type [6]: Expected `List[OperatorBase]` for 1st positional only parameter to call `TensoredOp.__init__` but got `List[EvolvedOp]`.",
    "message": " Expected `List[OperatorBase]` for 1st positional only parameter to call `TensoredOp.__init__` but got `List[EvolvedOp]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 86,
    "warning_line": "            return TensoredOp([self] + other.oplist)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        if isinstance(other, TensoredOp):\n            return TensoredOp([self] + other.oplist)\n\n",
        "source_code_len": 96,
        "target_code": "        if isinstance(other, TensoredOp):\n            return TensoredOp([self] + other.oplist)  # type: ignore\n\n",
        "target_code_len": 112,
        "diff_format": "@@ -85,3 +86,3 @@\n         if isinstance(other, TensoredOp):\n-            return TensoredOp([self] + other.oplist)\n+            return TensoredOp([self] + other.oplist)  # type: ignore\n \n",
        "source_code_with_indent": "        <IND>if isinstance(other, TensoredOp):\n            <IND>return TensoredOp([self] + other.oplist)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>if isinstance(other, TensoredOp):\n            <IND>return TensoredOp([self] + other.oplist)  # type: ignore\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Qiskit/qiskit-terra",
    "commit": "95fd1b923660f3db4eec8b77e63bf60639a3c15b",
    "filename": "qiskit/aqua/operators/evolutions/evolved_op.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Qiskit-qiskit-terra/qiskit/aqua/operators/evolutions/evolved_op.py",
    "file_hunks_size": 14,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "qiskit/aqua/operators/evolutions/evolved_op.py:86:39 Unsupported operand [58]: `+` is not supported for operand types `List[EvolvedOp]` and `List[OperatorBase]`.",
    "message": " `+` is not supported for operand types `List[EvolvedOp]` and `List[OperatorBase]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 86,
    "warning_line": "            return TensoredOp([self] + other.oplist)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        if isinstance(other, TensoredOp):\n            return TensoredOp([self] + other.oplist)\n\n",
        "source_code_len": 96,
        "target_code": "        if isinstance(other, TensoredOp):\n            return TensoredOp([self] + other.oplist)  # type: ignore\n\n",
        "target_code_len": 112,
        "diff_format": "@@ -85,3 +86,3 @@\n         if isinstance(other, TensoredOp):\n-            return TensoredOp([self] + other.oplist)\n+            return TensoredOp([self] + other.oplist)  # type: ignore\n \n",
        "source_code_with_indent": "        <IND>if isinstance(other, TensoredOp):\n            <IND>return TensoredOp([self] + other.oplist)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>if isinstance(other, TensoredOp):\n            <IND>return TensoredOp([self] + other.oplist)  # type: ignore\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Qiskit/qiskit-terra",
    "commit": "95fd1b923660f3db4eec8b77e63bf60639a3c15b",
    "filename": "qiskit/aqua/operators/evolutions/evolved_op.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Qiskit-qiskit-terra/qiskit/aqua/operators/evolutions/evolved_op.py",
    "file_hunks_size": 14,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "qiskit/aqua/operators/evolutions/evolved_op.py:94:30 Incompatible parameter type [6]: Expected `List[OperatorBase]` for 1st positional only parameter to call `ComposedOp.__init__` but got `List[EvolvedOp]`.",
    "message": " Expected `List[OperatorBase]` for 1st positional only parameter to call `ComposedOp.__init__` but got `List[EvolvedOp]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 94,
    "warning_line": "            return ComposedOp([self] + other.oplist)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        if isinstance(other, ComposedOp):\n            return ComposedOp([self] + other.oplist)\n\n",
        "source_code_len": 96,
        "target_code": "        if isinstance(other, ComposedOp):\n            return ComposedOp([self] + other.oplist)  # type: ignore\n\n",
        "target_code_len": 112,
        "diff_format": "@@ -93,3 +94,3 @@\n         if isinstance(other, ComposedOp):\n-            return ComposedOp([self] + other.oplist)\n+            return ComposedOp([self] + other.oplist)  # type: ignore\n \n",
        "source_code_with_indent": "        if isinstance(other, ComposedOp):\n            <IND>return ComposedOp([self] + other.oplist)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        if isinstance(other, ComposedOp):\n            <IND>return ComposedOp([self] + other.oplist)  # type: ignore\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Qiskit/qiskit-terra",
    "commit": "95fd1b923660f3db4eec8b77e63bf60639a3c15b",
    "filename": "qiskit/aqua/operators/evolutions/evolved_op.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Qiskit-qiskit-terra/qiskit/aqua/operators/evolutions/evolved_op.py",
    "file_hunks_size": 14,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "qiskit/aqua/operators/evolutions/evolved_op.py:94:39 Unsupported operand [58]: `+` is not supported for operand types `List[EvolvedOp]` and `List[OperatorBase]`.",
    "message": " `+` is not supported for operand types `List[EvolvedOp]` and `List[OperatorBase]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 94,
    "warning_line": "            return ComposedOp([self] + other.oplist)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        if isinstance(other, ComposedOp):\n            return ComposedOp([self] + other.oplist)\n\n",
        "source_code_len": 96,
        "target_code": "        if isinstance(other, ComposedOp):\n            return ComposedOp([self] + other.oplist)  # type: ignore\n\n",
        "target_code_len": 112,
        "diff_format": "@@ -93,3 +94,3 @@\n         if isinstance(other, ComposedOp):\n-            return ComposedOp([self] + other.oplist)\n+            return ComposedOp([self] + other.oplist)  # type: ignore\n \n",
        "source_code_with_indent": "        if isinstance(other, ComposedOp):\n            <IND>return ComposedOp([self] + other.oplist)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        if isinstance(other, ComposedOp):\n            <IND>return ComposedOp([self] + other.oplist)  # type: ignore\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Qiskit/qiskit-terra",
    "commit": "95fd1b923660f3db4eec8b77e63bf60639a3c15b",
    "filename": "qiskit/aqua/operators/evolutions/evolved_op.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Qiskit-qiskit-terra/qiskit/aqua/operators/evolutions/evolved_op.py",
    "file_hunks_size": 14,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "qiskit/aqua/operators/evolutions/evolved_op.py:125:8 Incompatible return type [7]: Expected `Union[OperatorBase, complex, float]` but got `Union[List[typing.Any], OperatorBase, complex, float]`.",
    "message": " Expected `Union[OperatorBase, complex, float]` but got `Union[List[typing.Any], OperatorBase, complex, float]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 125,
    "warning_line": "        return self.to_matrix_op().eval(front=front)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import Optional, Union, Set, List\nimport logging\n",
        "source_code_len": 62,
        "target_code": "\nfrom typing import Optional, Union, Set, List, cast\nimport logging\n",
        "target_code_len": 68,
        "diff_format": "@@ -16,3 +16,3 @@\n \n-from typing import Optional, Union, Set, List\n+from typing import Optional, Union, Set, List, cast\n import logging\n",
        "source_code_with_indent": "\nfrom typing import Optional, Union, Set, List\nimport logging\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import Optional, Union, Set, List, cast\nimport logging\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                          OperatorBase] = None) -> Union[OperatorBase, float, complex]:\n        return self.to_matrix_op().eval(front=front)\n\n",
        "source_code_len": 142,
        "target_code": "                          OperatorBase] = None) -> Union[OperatorBase, float, complex]:\n        return cast(Union[OperatorBase, float, complex], self.to_matrix_op().eval(front=front))\n\n",
        "target_code_len": 185,
        "diff_format": "@@ -124,3 +126,3 @@\n                           OperatorBase] = None) -> Union[OperatorBase, float, complex]:\n-        return self.to_matrix_op().eval(front=front)\n+        return cast(Union[OperatorBase, float, complex], self.to_matrix_op().eval(front=front))\n \n",
        "source_code_with_indent": "                          OperatorBase] = None) -> Union[OperatorBase, float, complex]:\n        <IND>return self.to_matrix_op().eval(front=front)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                          OperatorBase] = None) -> Union[OperatorBase, float, complex]:\n        <IND>return cast(Union[OperatorBase, float, complex], self.to_matrix_op().eval(front=front))\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Qiskit/qiskit-terra",
    "commit": "95fd1b923660f3db4eec8b77e63bf60639a3c15b",
    "filename": "qiskit/aqua/operators/evolutions/pauli_trotter_evolution.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Qiskit-qiskit-terra/qiskit/aqua/operators/evolutions/pauli_trotter_evolution.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "qiskit/aqua/operators/evolutions/pauli_trotter_evolution.py:156:8 Incompatible return type [7]: Expected `PrimitiveOp` but got `OperatorBase`.",
    "message": " Expected `PrimitiveOp` but got `OperatorBase`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 156,
    "warning_line": "        return cob.convert(pauli_op)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import Optional, Union\nimport logging\n",
        "source_code_len": 51,
        "target_code": "\nfrom typing import Optional, Union, cast\nimport logging\n",
        "target_code_len": 57,
        "diff_format": "@@ -16,3 +16,3 @@\n \n-from typing import Optional, Union\n+from typing import Optional, Union, cast\n import logging\n",
        "source_code_with_indent": "\nfrom typing import Optional, Union\nimport logging\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import Optional, Union, cast\nimport logging\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        cob = PauliBasisChange(destination_basis=destination, replacement_fn=replacement_fn)\n        return cob.convert(pauli_op)\n\n",
        "source_code_len": 131,
        "target_code": "        cob = PauliBasisChange(destination_basis=destination, replacement_fn=replacement_fn)\n        return cast(PrimitiveOp, cob.convert(pauli_op))\n\n",
        "target_code_len": 150,
        "diff_format": "@@ -155,3 +155,3 @@\n         cob = PauliBasisChange(destination_basis=destination, replacement_fn=replacement_fn)\n-        return cob.convert(pauli_op)\n+        return cast(PrimitiveOp, cob.convert(pauli_op))\n \n",
        "source_code_with_indent": "        cob = PauliBasisChange(destination_basis=destination, replacement_fn=replacement_fn)\n        return cob.convert(pauli_op)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        cob = PauliBasisChange(destination_basis=destination, replacement_fn=replacement_fn)\n        return cast(PrimitiveOp, cob.convert(pauli_op))\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Qiskit/qiskit-terra",
    "commit": "95fd1b923660f3db4eec8b77e63bf60639a3c15b",
    "filename": "qiskit/aqua/operators/evolutions/trotterizations/suzuki.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Qiskit-qiskit-terra/qiskit/aqua/operators/evolutions/trotterizations/suzuki.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "qiskit/aqua/operators/evolutions/trotterizations/suzuki.py:64:32 Incompatible parameter type [6]: Expected `List[OperatorBase]` for 1st positional only parameter to call `ComposedOp.__init__` but got `List[PrimitiveOp]`.",
    "message": " Expected `List[OperatorBase]` for 1st positional only parameter to call `ComposedOp.__init__` but got `List[PrimitiveOp]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 64,
    "warning_line": "        single_rep = ComposedOp(composition_list)"
  },
  {
    "project": "Qiskit/qiskit-terra",
    "commit": "95fd1b923660f3db4eec8b77e63bf60639a3c15b",
    "filename": "qiskit/aqua/operators/list_ops/composed_op.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Qiskit-qiskit-terra/qiskit/aqua/operators/list_ops/composed_op.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "qiskit/aqua/operators/list_ops/composed_op.py:102:64 Unsupported operand [58]: `+` is not supported for operand types `List[StateFn]` and `List[OperatorBase]`.",
    "message": " `+` is not supported for operand types `List[StateFn]` and `List[OperatorBase]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 102,
    "warning_line": "            eval_list = [StateFn(front, is_measurement=True)] + eval_list",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        elif front:\n            eval_list = [StateFn(front, is_measurement=True)] + eval_list\n\n",
        "source_code_len": 95,
        "target_code": "        elif front:\n            eval_list = [StateFn(front, is_measurement=True)] + eval_list  # type: ignore\n\n",
        "target_code_len": 111,
        "diff_format": "@@ -101,3 +101,3 @@\n         elif front:\n-            eval_list = [StateFn(front, is_measurement=True)] + eval_list\n+            eval_list = [StateFn(front, is_measurement=True)] + eval_list  # type: ignore\n \n",
        "source_code_with_indent": "        <DED>elif front:\n            <IND>eval_list = [StateFn(front, is_measurement=True)] + eval_list\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>elif front:\n            <IND>eval_list = [StateFn(front, is_measurement=True)] + eval_list  # type: ignore\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Qiskit/qiskit-terra",
    "commit": "95fd1b923660f3db4eec8b77e63bf60639a3c15b",
    "filename": "qiskit/aqua/operators/list_ops/list_op.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Qiskit-qiskit-terra/qiskit/aqua/operators/list_ops/list_op.py",
    "file_hunks_size": 8,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "qiskit/aqua/operators/list_ops/list_op.py:182:4 Inconsistent override [15]: `qiskit.aqua.operators.list_ops.list_op.ListOp.tensorpower` overrides method defined in `OperatorBase` inconsistently. Returned type `Union[OperatorBase, int]` is not a subtype of the overridden return `OperatorBase`.",
    "message": " `qiskit.aqua.operators.list_ops.list_op.ListOp.tensorpower` overrides method defined in `OperatorBase` inconsistently. Returned type `Union[OperatorBase, int]` is not a subtype of the overridden return `OperatorBase`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 182,
    "warning_line": "    def tensorpower(self, other: int) -> Union[OperatorBase, int]:"
  },
  {
    "project": "Qiskit/qiskit-terra",
    "commit": "95fd1b923660f3db4eec8b77e63bf60639a3c15b",
    "filename": "qiskit/aqua/operators/list_ops/tensored_op.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Qiskit-qiskit-terra/qiskit/aqua/operators/list_ops/tensored_op.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "qiskit/aqua/operators/list_ops/tensored_op.py:66:8 Incompatible return type [7]: Expected `Union[OperatorBase, complex, float]` but got `Union[List[typing.Any], OperatorBase, complex, float]`.",
    "message": " Expected `Union[OperatorBase, complex, float]` but got `Union[List[typing.Any], OperatorBase, complex, float]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 66,
    "warning_line": "        return self.to_matrix_op().eval(front=front)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import List, Union\nfrom functools import reduce, partial\n",
        "source_code_len": 70,
        "target_code": "\nfrom typing import List, Union, cast\nfrom functools import reduce, partial\n",
        "target_code_len": 76,
        "diff_format": "@@ -16,3 +16,3 @@\n \n-from typing import List, Union\n+from typing import List, Union, cast\n from functools import reduce, partial\n",
        "source_code_with_indent": "\nfrom typing import List, Union\nfrom functools import reduce, partial\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import List, Union, cast\nfrom functools import reduce, partial\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                          OperatorBase] = None) -> Union[OperatorBase, float, complex]:\n        return self.to_matrix_op().eval(front=front)\n\n",
        "source_code_len": 142,
        "target_code": "                          OperatorBase] = None) -> Union[OperatorBase, float, complex]:\n        return cast(Union[OperatorBase, float, complex], self.to_matrix_op().eval(front=front))\n\n",
        "target_code_len": 185,
        "diff_format": "@@ -65,3 +65,3 @@\n                           OperatorBase] = None) -> Union[OperatorBase, float, complex]:\n-        return self.to_matrix_op().eval(front=front)\n+        return cast(Union[OperatorBase, float, complex], self.to_matrix_op().eval(front=front))\n \n",
        "source_code_with_indent": "                          OperatorBase] = None) -> Union[OperatorBase, float, complex]:\n        <IND>return self.to_matrix_op().eval(front=front)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                          OperatorBase] = None) -> Union[OperatorBase, float, complex]:\n        <IND>return cast(Union[OperatorBase, float, complex], self.to_matrix_op().eval(front=front))\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Qiskit/qiskit-terra",
    "commit": "95fd1b923660f3db4eec8b77e63bf60639a3c15b",
    "filename": "qiskit/aqua/operators/operator_base.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Qiskit-qiskit-terra/qiskit/aqua/operators/operator_base.py",
    "file_hunks_size": 10,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "qiskit/aqua/operators/operator_base.py:153:20 Unsupported operand [58]: `==` is not supported for operand types `OperatorBase` and `int`.",
    "message": " `==` is not supported for operand types `OperatorBase` and `int`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 153,
    "warning_line": "        if other == 0:"
  },
  {
    "project": "Qiskit/qiskit-terra",
    "commit": "95fd1b923660f3db4eec8b77e63bf60639a3c15b",
    "filename": "qiskit/aqua/operators/operator_base.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Qiskit-qiskit-terra/qiskit/aqua/operators/operator_base.py",
    "file_hunks_size": 10,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "qiskit/aqua/operators/operator_base.py:171:20 Unsupported operand [58]: `==` is not supported for operand types `OperatorBase` and `int`.",
    "message": " `==` is not supported for operand types `OperatorBase` and `int`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 171,
    "warning_line": "        if other == 0:"
  },
  {
    "project": "Qiskit/qiskit-terra",
    "commit": "95fd1b923660f3db4eec8b77e63bf60639a3c15b",
    "filename": "qiskit/aqua/operators/operator_base.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Qiskit-qiskit-terra/qiskit/aqua/operators/operator_base.py",
    "file_hunks_size": 10,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "qiskit/aqua/operators/operator_base.py:338:28 Unsupported operand [58]: `/` is not supported for operand types `int` and `Number`.",
    "message": " `/` is not supported for operand types `int` and `Number`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 338,
    "warning_line": "        return self.mul(1 / other)"
  },
  {
    "project": "Qiskit/qiskit-terra",
    "commit": "95fd1b923660f3db4eec8b77e63bf60639a3c15b",
    "filename": "qiskit/aqua/operators/operator_base.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Qiskit-qiskit-terra/qiskit/aqua/operators/operator_base.py",
    "file_hunks_size": 10,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "qiskit/aqua/operators/operator_base.py:366:20 Incompatible parameter type [6]: Expected `OperatorBase` for 1st positional only parameter to call `OperatorBase.__eq__` but got `int`.",
    "message": " Expected `OperatorBase` for 1st positional only parameter to call `OperatorBase.__eq__` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 366,
    "warning_line": "        if other == 1:"
  },
  {
    "project": "Qiskit/qiskit-terra",
    "commit": "95fd1b923660f3db4eec8b77e63bf60639a3c15b",
    "filename": "qiskit/aqua/operators/primitive_ops/circuit_op.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Qiskit-qiskit-terra/qiskit/aqua/operators/primitive_ops/circuit_op.py",
    "file_hunks_size": 13,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "qiskit/aqua/operators/primitive_ops/circuit_op.py:205:8 Incompatible return type [7]: Expected `Union[OperatorBase, complex, float]` but got `Union[List[typing.Any], OperatorBase, complex, float]`.",
    "message": " Expected `Union[OperatorBase, complex, float]` but got `Union[List[typing.Any], OperatorBase, complex, float]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 205,
    "warning_line": "        return self.to_matrix_op().eval(front=front)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import Union, Optional, Set, List\nimport logging\n",
        "source_code_len": 62,
        "target_code": "\nfrom typing import Union, Optional, Set, List, cast\nimport logging\n",
        "target_code_len": 68,
        "diff_format": "@@ -16,3 +16,3 @@\n \n-from typing import Union, Optional, Set, List\n+from typing import Union, Optional, Set, List, cast\n import logging\n",
        "source_code_with_indent": "\nfrom typing import Union, Optional, Set, List\nimport logging\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import Union, Optional, Set, List, cast\nimport logging\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        return self.to_matrix_op().eval(front=front)\n\n",
        "source_code_len": 55,
        "target_code": "\n        return cast(Union[OperatorBase, float, complex], self.to_matrix_op().eval(front=front))\n\n",
        "target_code_len": 98,
        "diff_format": "@@ -204,3 +205,3 @@\n \n-        return self.to_matrix_op().eval(front=front)\n+        return cast(Union[OperatorBase, float, complex], self.to_matrix_op().eval(front=front))\n \n",
        "source_code_with_indent": "\n        <DED>return self.to_matrix_op().eval(front=front)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        <DED>return cast(Union[OperatorBase, float, complex], self.to_matrix_op().eval(front=front))\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Qiskit/qiskit-terra",
    "commit": "95fd1b923660f3db4eec8b77e63bf60639a3c15b",
    "filename": "qiskit/aqua/operators/primitive_ops/primitive_op.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Qiskit-qiskit-terra/qiskit/aqua/operators/primitive_ops/primitive_op.py",
    "file_hunks_size": 11,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "qiskit/aqua/operators/primitive_ops/primitive_op.py:152:4 Inconsistent override [15]: `qiskit.aqua.operators.primitive_ops.primitive_op.PrimitiveOp.tensorpower` overrides method defined in `OperatorBase` inconsistently. Returned type `Union[OperatorBase, int]` is not a subtype of the overridden return `OperatorBase`.",
    "message": " `qiskit.aqua.operators.primitive_ops.primitive_op.PrimitiveOp.tensorpower` overrides method defined in `OperatorBase` inconsistently. Returned type `Union[OperatorBase, int]` is not a subtype of the overridden return `OperatorBase`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 152,
    "warning_line": "    def tensorpower(self, other: int) -> Union[OperatorBase, int]:"
  },
  {
    "project": "Qiskit/qiskit-terra",
    "commit": "95fd1b923660f3db4eec8b77e63bf60639a3c15b",
    "filename": "qiskit/aqua/operators/primitive_ops/primitive_op.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Qiskit-qiskit-terra/qiskit/aqua/operators/primitive_ops/primitive_op.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "qiskit/aqua/operators/primitive_ops/primitive_op.py:271:8 Incompatible return type [7]: Expected `OperatorBase` but got `int`.",
    "message": " Expected `OperatorBase` but got `int`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 271,
    "warning_line": "        return sum([PrimitiveOp(Pauli.from_label(label),",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n        return sum([PrimitiveOp(Pauli.from_label(label),\n                                coeff.real if coeff == coeff.real else coeff)\n",
        "source_code_len": 136,
        "target_code": "\n        return sum([PrimitiveOp(Pauli.from_label(label),  # type: ignore\n                                coeff.real if coeff == coeff.real else coeff)\n",
        "target_code_len": 152,
        "diff_format": "@@ -270,3 +265,3 @@\n \n-        return sum([PrimitiveOp(Pauli.from_label(label),\n+        return sum([PrimitiveOp(Pauli.from_label(label),  # type: ignore\n                                 coeff.real if coeff == coeff.real else coeff)\n",
        "source_code_with_indent": "\n        <DED>return sum([PrimitiveOp(Pauli.from_label(label),\n                                coeff.real if coeff == coeff.real else coeff)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        <DED>return sum([PrimitiveOp(Pauli.from_label(label),  # type: ignore\n                                coeff.real if coeff == coeff.real else coeff)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Qiskit/qiskit-terra",
    "commit": "95fd1b923660f3db4eec8b77e63bf60639a3c15b",
    "filename": "qiskit/aqua/operators/state_fns/circuit_state_fn.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Qiskit-qiskit-terra/qiskit/aqua/operators/state_fns/circuit_state_fn.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "qiskit/aqua/operators/state_fns/circuit_state_fn.py:92:16 Incompatible return type [7]: Expected `CircuitStateFn` but got `SummedOp`.",
    "message": " Expected `CircuitStateFn` but got `SummedOp`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 92,
    "warning_line": "                return SummedOp(statefn_circuits)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import Union, Set, List\nimport numpy as np\n",
        "source_code_len": 56,
        "target_code": "\nfrom typing import Union, Set, List, cast\nimport numpy as np\n",
        "target_code_len": 62,
        "diff_format": "@@ -17,3 +17,3 @@\n \n-from typing import Union, Set, List\n+from typing import Union, Set, List, cast\n import numpy as np\n",
        "source_code_with_indent": "\nfrom typing import Union, Set, List\nimport numpy as np\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import Union, Set, List, cast\nimport numpy as np\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            else:\n                return SummedOp(statefn_circuits)\n        else:\n",
        "source_code_len": 82,
        "target_code": "            else:\n                return cast(CircuitStateFn, SummedOp(cast(List[OperatorBase], statefn_circuits)))\n        else:\n",
        "target_code_len": 130,
        "diff_format": "@@ -91,3 +91,3 @@\n             else:\n-                return SummedOp(statefn_circuits)\n+                return cast(CircuitStateFn, SummedOp(cast(List[OperatorBase], statefn_circuits)))\n         else:\n",
        "source_code_with_indent": "            <DED>else:\n                <IND>return SummedOp(statefn_circuits)\n        <DED><DED>else:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <DED>else:\n                <IND>return cast(CircuitStateFn, SummedOp(cast(List[OperatorBase], statefn_circuits)))\n        <DED><DED>else:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Qiskit/qiskit-terra",
    "commit": "95fd1b923660f3db4eec8b77e63bf60639a3c15b",
    "filename": "qiskit/aqua/operators/state_fns/circuit_state_fn.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Qiskit-qiskit-terra/qiskit/aqua/operators/state_fns/circuit_state_fn.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "qiskit/aqua/operators/state_fns/circuit_state_fn.py:298:12 Incompatible return type [7]: Expected `Union[OperatorBase, complex, float]` but got `Union[List[typing.Any], OperatorBase, complex, float]`.",
    "message": " Expected `Union[OperatorBase, complex, float]` but got `Union[List[typing.Any], OperatorBase, complex, float]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 298,
    "warning_line": "            return new_front.eval()",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import Union, Set, List\nimport numpy as np\n",
        "source_code_len": 56,
        "target_code": "\nfrom typing import Union, Set, List, cast\nimport numpy as np\n",
        "target_code_len": 62,
        "diff_format": "@@ -17,3 +17,3 @@\n \n-from typing import Union, Set, List\n+from typing import Union, Set, List, cast\n import numpy as np\n",
        "source_code_with_indent": "\nfrom typing import Union, Set, List\nimport numpy as np\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import Union, Set, List, cast\nimport numpy as np\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            new_front = self.compose(front)\n            return new_front.eval()\n\n        return self.to_matrix_op().eval(front)\n\n",
        "source_code_len": 129,
        "target_code": "            new_front = self.compose(front)\n            return cast(Union[OperatorBase, float, complex], new_front.eval())\n\n        return cast(Union[OperatorBase, float, complex], self.to_matrix_op().eval(front))\n\n",
        "target_code_len": 215,
        "diff_format": "@@ -297,5 +297,5 @@\n             new_front = self.compose(front)\n-            return new_front.eval()\n-\n-        return self.to_matrix_op().eval(front)\n+            return cast(Union[OperatorBase, float, complex], new_front.eval())\n+\n+        return cast(Union[OperatorBase, float, complex], self.to_matrix_op().eval(front))\n \n",
        "source_code_with_indent": "            <IND>new_front = self.compose(front)\n            return new_front.eval()\n\n        <DED>return self.to_matrix_op().eval(front)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <IND>new_front = self.compose(front)\n            return cast(Union[OperatorBase, float, complex], new_front.eval())\n\n        <DED>return cast(Union[OperatorBase, float, complex], self.to_matrix_op().eval(front))\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Qiskit/qiskit-terra",
    "commit": "95fd1b923660f3db4eec8b77e63bf60639a3c15b",
    "filename": "qiskit/aqua/operators/state_fns/circuit_state_fn.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Qiskit-qiskit-terra/qiskit/aqua/operators/state_fns/circuit_state_fn.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "qiskit/aqua/operators/state_fns/circuit_state_fn.py:300:8 Incompatible return type [7]: Expected `Union[OperatorBase, complex, float]` but got `Union[List[typing.Any], OperatorBase, complex, float]`.",
    "message": " Expected `Union[OperatorBase, complex, float]` but got `Union[List[typing.Any], OperatorBase, complex, float]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 300,
    "warning_line": "        return self.to_matrix_op().eval(front)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import Union, Set, List\nimport numpy as np\n",
        "source_code_len": 56,
        "target_code": "\nfrom typing import Union, Set, List, cast\nimport numpy as np\n",
        "target_code_len": 62,
        "diff_format": "@@ -17,3 +17,3 @@\n \n-from typing import Union, Set, List\n+from typing import Union, Set, List, cast\n import numpy as np\n",
        "source_code_with_indent": "\nfrom typing import Union, Set, List\nimport numpy as np\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import Union, Set, List, cast\nimport numpy as np\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            new_front = self.compose(front)\n            return new_front.eval()\n\n        return self.to_matrix_op().eval(front)\n\n",
        "source_code_len": 129,
        "target_code": "            new_front = self.compose(front)\n            return cast(Union[OperatorBase, float, complex], new_front.eval())\n\n        return cast(Union[OperatorBase, float, complex], self.to_matrix_op().eval(front))\n\n",
        "target_code_len": 215,
        "diff_format": "@@ -297,5 +297,5 @@\n             new_front = self.compose(front)\n-            return new_front.eval()\n-\n-        return self.to_matrix_op().eval(front)\n+            return cast(Union[OperatorBase, float, complex], new_front.eval())\n+\n+        return cast(Union[OperatorBase, float, complex], self.to_matrix_op().eval(front))\n \n",
        "source_code_with_indent": "            <IND>new_front = self.compose(front)\n            return new_front.eval()\n\n        <DED>return self.to_matrix_op().eval(front)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <IND>new_front = self.compose(front)\n            return cast(Union[OperatorBase, float, complex], new_front.eval())\n\n        <DED>return cast(Union[OperatorBase, float, complex], self.to_matrix_op().eval(front))\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Qiskit/qiskit-terra",
    "commit": "95fd1b923660f3db4eec8b77e63bf60639a3c15b",
    "filename": "qiskit/aqua/operators/state_fns/dict_state_fn.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Qiskit-qiskit-terra/qiskit/aqua/operators/state_fns/dict_state_fn.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "qiskit/aqua/operators/state_fns/dict_state_fn.py:230:12 Incompatible return type [7]: Expected `Union[OperatorBase, complex, float]` but got `Union[typing.List[typing.Any], OperatorBase, complex, float]`.",
    "message": " Expected `Union[OperatorBase, complex, float]` but got `Union[typing.List[typing.Any], OperatorBase, complex, float]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 230,
    "warning_line": "            return front.adjoint().eval(self.adjoint())",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import Union, Set\nimport itertools\n",
        "source_code_len": 48,
        "target_code": "\nfrom typing import Union, Set, cast\nimport itertools\n",
        "target_code_len": 54,
        "diff_format": "@@ -16,3 +16,3 @@\n \n-from typing import Union, Set\n+from typing import Union, Set, cast\n import itertools\n",
        "source_code_with_indent": "\nfrom typing import Union, Set\nimport itertools\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import Union, Set, cast\nimport itertools\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        if isinstance(front, OperatorStateFn):\n            return front.adjoint().eval(self.adjoint())\n\n        # All other OperatorBases go here\n        return front.adjoint().eval(self.adjoint().primitive).adjoint() * self.coeff\n\n",
        "source_code_len": 232,
        "target_code": "        if isinstance(front, OperatorStateFn):\n            return cast(Union[OperatorBase, float, complex], front.adjoint().eval(self.adjoint()))\n\n        # All other OperatorBases go here\n        return front.adjoint().eval(self.adjoint().primitive).adjoint() * self.coeff  # type: ignore\n\n",
        "target_code_len": 291,
        "diff_format": "@@ -229,6 +232,6 @@\n         if isinstance(front, OperatorStateFn):\n-            return front.adjoint().eval(self.adjoint())\n+            return cast(Union[OperatorBase, float, complex], front.adjoint().eval(self.adjoint()))\n \n         # All other OperatorBases go here\n-        return front.adjoint().eval(self.adjoint().primitive).adjoint() * self.coeff\n+        return front.adjoint().eval(self.adjoint().primitive).adjoint() * self.coeff  # type: ignore\n \n",
        "source_code_with_indent": "        if isinstance(front, OperatorStateFn):\n            <IND>return front.adjoint().eval(self.adjoint())\n\n        # All other OperatorBases go here\n        <DED>return front.adjoint().eval(self.adjoint().primitive).adjoint() * self.coeff\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        if isinstance(front, OperatorStateFn):\n            <IND>return cast(Union[OperatorBase, float, complex], front.adjoint().eval(self.adjoint()))\n\n        # All other OperatorBases go here\n        <DED>return front.adjoint().eval(self.adjoint().primitive).adjoint() * self.coeff  # type: ignore\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Qiskit/qiskit-terra",
    "commit": "95fd1b923660f3db4eec8b77e63bf60639a3c15b",
    "filename": "qiskit/aqua/operators/state_fns/state_fn.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Qiskit-qiskit-terra/qiskit/aqua/operators/state_fns/state_fn.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "qiskit/aqua/operators/state_fns/state_fn.py:183:4 Inconsistent override [15]: `qiskit.aqua.operators.state_fns.state_fn.StateFn.tensorpower` overrides method defined in `OperatorBase` inconsistently. Returned type `Union[OperatorBase, int]` is not a subtype of the overridden return `OperatorBase`.",
    "message": " `qiskit.aqua.operators.state_fns.state_fn.StateFn.tensorpower` overrides method defined in `OperatorBase` inconsistently. Returned type `Union[OperatorBase, int]` is not a subtype of the overridden return `OperatorBase`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 183,
    "warning_line": "    def tensorpower(self, other: int) -> Union[OperatorBase, int]:"
  },
  {
    "project": "Qiskit/qiskit-terra",
    "commit": "95fd1b923660f3db4eec8b77e63bf60639a3c15b",
    "filename": "qiskit/aqua/operators/state_fns/state_fn.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Qiskit-qiskit-terra/qiskit/aqua/operators/state_fns/state_fn.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "qiskit/aqua/operators/state_fns/state_fn.py:194:16 Invalid type [31]: Expression `(qiskit.aqua.operators.operator_base.OperatorBase, qiskit.aqua.operators.operator_base.OperatorBase)` is not a valid type.",
    "message": " Expression `(qiskit.aqua.operators.operator_base.OperatorBase, qiskit.aqua.operators.operator_base.OperatorBase)` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 194,
    "warning_line": "            -> (OperatorBase, OperatorBase):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import Union, Optional, Callable, Set, Dict\nimport numpy as np\n",
        "source_code_len": 76,
        "target_code": "\nfrom typing import Union, Optional, Callable, Set, Dict, Tuple\nimport numpy as np\n",
        "target_code_len": 83,
        "diff_format": "@@ -16,3 +16,3 @@\n \n-from typing import Union, Optional, Callable, Set, Dict\n+from typing import Union, Optional, Callable, Set, Dict, Tuple\n import numpy as np\n",
        "source_code_with_indent": "\nfrom typing import Union, Optional, Callable, Set, Dict\nimport numpy as np\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import Union, Optional, Callable, Set, Dict, Tuple\nimport numpy as np\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def _check_zero_for_composition_and_expand(self, other: OperatorBase) \\\n            -> (OperatorBase, OperatorBase):\n        new_self = self\n",
        "source_code_len": 145,
        "target_code": "    def _check_zero_for_composition_and_expand(self, other: OperatorBase) \\\n            -> Tuple[OperatorBase, OperatorBase]:\n        new_self = self\n",
        "target_code_len": 150,
        "diff_format": "@@ -193,3 +193,3 @@\n     def _check_zero_for_composition_and_expand(self, other: OperatorBase) \\\n-            -> (OperatorBase, OperatorBase):\n+            -> Tuple[OperatorBase, OperatorBase]:\n         new_self = self\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "    <DED>def _check_zero_for_composition_and_expand(self, other: OperatorBase)            -> (OperatorBase, OperatorBase):\n        <IND>new_self = self\n",
        "target_code_with_indent": "    <DED>def _check_zero_for_composition_and_expand(self, other: OperatorBase)            -> Tuple[OperatorBase, OperatorBase]:\n        <IND>new_self = self\n"
      }
    ]
  }
]