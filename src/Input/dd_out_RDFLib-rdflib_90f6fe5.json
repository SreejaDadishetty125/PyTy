[
  {
    "project": "RDFLib/rdflib",
    "commit": "90f6fe5611f4c7411e5eac347cafb9d009829b6c",
    "filename": "rdflib/graph.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/RDFLib-rdflib/rdflib/graph.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rdflib/graph.py:1140:8 Incompatible return type [7]: Expected `Union[None, bytes, str]` but got `Graph`.",
    "message": " Expected `Union[None, bytes, str]` but got `Graph`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 1140,
    "warning_line": "        return self",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        **args,\n    ) -> None:\n        ...\n",
        "source_code_len": 43,
        "target_code": "        **args,\n    ) -> \"Graph\":\n        ...\n",
        "target_code_len": 46,
        "diff_format": "@@ -1064,3 +1064,3 @@\n         **args,\n-    ) -> None:\n+    ) -> \"Graph\":\n         ...\n",
        "source_code_with_indent": "        **args,\n    ) -> None:\n        <IND>...\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        **args,\n    ) -> \"Graph\":\n        <IND>...\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        **args,\n    ) -> Optional[Union[bytes, str]]:\n        ...\n",
        "source_code_len": 66,
        "target_code": "        **args,\n    ) -> Union[bytes, str, \"Graph\"]:\n        ...\n",
        "target_code_len": 65,
        "diff_format": "@@ -1076,3 +1076,3 @@\n         **args,\n-    ) -> Optional[Union[bytes, str]]:\n+    ) -> Union[bytes, str, \"Graph\"]:\n         ...\n",
        "source_code_with_indent": "        **args,\n    ) -> Optional[Union[bytes, str]]:\n        <IND>...\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        **args,\n    ) -> Union[bytes, str, \"Graph\"]:\n        <IND>...\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        **args,\n    ) -> Optional[Union[bytes, str]]:\n        \"\"\"Serialize the Graph to destination\n",
        "source_code_len": 100,
        "target_code": "        **args,\n    ) -> Union[bytes, str, \"Graph\"]:\n        \"\"\"Serialize the Graph to destination\n",
        "target_code_len": 99,
        "diff_format": "@@ -1086,3 +1086,3 @@\n         **args,\n-    ) -> Optional[Union[bytes, str]]:\n+    ) -> Union[bytes, str, \"Graph\"]:\n         \"\"\"Serialize the Graph to destination\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "        **args,\n    ) -> Optional[Union[bytes, str]]:\n        <IND>",
        "target_code_with_indent": "        **args,\n    ) -> Union[bytes, str, \"Graph\"]:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            if netloc != \"\":\n                print(\n                    \"WARNING: not saving as location\" + \"is not a local file reference\"\n                )\n                return None\n            fd, name = tempfile.mkstemp()\n",
        "source_code_len": 228,
        "target_code": "            if netloc != \"\":\n                logger.warning(\n                    \"WARNING: not saving as location\" + \"is not a local file reference\"\n                )\n                return self\n            fd, name = tempfile.mkstemp()\n",
        "target_code_len": 237,
        "diff_format": "@@ -1125,6 +1125,6 @@\n             if netloc != \"\":\n-                print(\n+                logger.warning(\n                     \"WARNING: not saving as location\" + \"is not a local file reference\"\n                 )\n-                return None\n+                return self\n             fd, name = tempfile.mkstemp()\n",
        "source_code_with_indent": "            if netloc != \"\":\n                <IND>print(\n                    \"WARNING: not saving as location\" + \"is not a local file reference\"\n                )\n                return None\n            <DED>fd, name = tempfile.mkstemp()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            if netloc != \"\":\n                <IND>logger.warning(\n                    \"WARNING: not saving as location\" + \"is not a local file reference\"\n                )\n                return self\n            <DED>fd, name = tempfile.mkstemp()\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "RDFLib/rdflib",
    "commit": "90f6fe5611f4c7411e5eac347cafb9d009829b6c",
    "filename": "rdflib/plugins/sparql/algebra.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/RDFLib-rdflib/rdflib/plugins/sparql/algebra.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rdflib/plugins/sparql/algebra.py:804:21 Incompatible variable type [9]: query_algebra is declared to have type `Query` but is used as type `None`.",
    "message": " query_algebra is declared to have type `Query` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 804,
    "warning_line": "def translateAlgebra(query_algebra: Query = None):",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef translateAlgebra(query_algebra: Query = None):\n    \"\"\"\n",
        "source_code_len": 60,
        "target_code": "\ndef translateAlgebra(query_algebra: Query):\n    \"\"\"\n",
        "target_code_len": 53,
        "diff_format": "@@ -803,3 +803,3 @@\n \n-def translateAlgebra(query_algebra: Query = None):\n+def translateAlgebra(query_algebra: Query):\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>def translateAlgebra(query_algebra: Query = None):\n    <IND>",
        "target_code_with_indent": "\n<DED>def translateAlgebra(query_algebra: Query):\n    <IND>"
      }
    ]
  }
]