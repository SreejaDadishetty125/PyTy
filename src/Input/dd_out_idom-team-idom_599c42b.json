[
  {
    "project": "idom-team/idom",
    "commit": "599c42b0462ebc1e92a300404ca789f261c3e354",
    "filename": "idom/core/hooks.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/idom-team-idom/idom/core/hooks.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "idom/core/hooks.py:45:49 Incompatible parameter type [6]: Expected `typing.Tuple[typing.Any, ...]` for 2nd positional only parameter to call `Hook.use_state` but got `float`.",
    "message": " Expected `typing.Tuple[typing.Any, ...]` for 2nd positional only parameter to call `Hook.use_state` but got `float`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 45,
    "warning_line": "    await dispatch_hook().use_state(_FramePacer, rate).wait()",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n    def create_update_callback(self):\n        element = self._element()  # deref to keep element alive\n        if element is None:\n            raise RuntimeError(f\"Element for hook {self} no longer exists.\")\n        return lambda: self._layout.update(element)\n\n    def use_state(\n        self,\n        _constructor_: Callable[..., _HookData],\n        *args: Tuple[Any, ...],\n        **kwargs: Dict[str, Any],\n    ) -> _HookData:\n",
        "source_code_len": 430,
        "target_code": "\n    def create_update_callback(self) -> Callable[[], None]:\n        element = self._element()  # deref to keep element alive\n        if element is not None:\n            # BUG: addressed by https://github.com/python/mypy/issues/2608\n            return lambda: self._layout.update(element)  # type: ignore\n        else:\n            raise RuntimeError(f\"Element for hook {self} no longer exists.\")\n\n    def use_state(\n        self, _constructor_: Callable[..., _HookData], *args: Any, **kwargs: Any,\n    ) -> _HookData:\n",
        "target_code_len": 518,
        "diff_format": "@@ -97,13 +97,12 @@\n \n-    def create_update_callback(self):\n+    def create_update_callback(self) -> Callable[[], None]:\n         element = self._element()  # deref to keep element alive\n-        if element is None:\n+        if element is not None:\n+            # BUG: addressed by https://github.com/python/mypy/issues/2608\n+            return lambda: self._layout.update(element)  # type: ignore\n+        else:\n             raise RuntimeError(f\"Element for hook {self} no longer exists.\")\n-        return lambda: self._layout.update(element)\n \n     def use_state(\n-        self,\n-        _constructor_: Callable[..., _HookData],\n-        *args: Tuple[Any, ...],\n-        **kwargs: Dict[str, Any],\n+        self, _constructor_: Callable[..., _HookData], *args: Any, **kwargs: Any,\n     ) -> _HookData:\n",
        "source_code_with_indent": "\n    <DED>def create_update_callback(self):\n        <IND>element = self._element()  # deref to keep element alive\n        if element is None:\n            <IND>raise RuntimeError(f\"Element for hook {self} no longer exists.\")\n        <DED>return lambda: self._layout.update(element)\n\n    <DED>def use_state(\n        self,\n        _constructor_: Callable[..., _HookData],\n        *args: Tuple[Any, ...],\n        **kwargs: Dict[str, Any],\n    ) -> _HookData:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def create_update_callback(self) -> Callable[[], None]:\n        <IND>element = self._element()  # deref to keep element alive\n        if element is not None:\n            # BUG: addressed by https://github.com/python/mypy/issues/2608\n            <IND>return lambda: self._layout.update(element)  # type: ignore\n        <DED>else:\n            <IND>raise RuntimeError(f\"Element for hook {self} no longer exists.\")\n\n    <DED><DED>def use_state(\n        self, _constructor_: Callable[..., _HookData], *args: Any, **kwargs: Any,\n    ) -> _HookData:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "idom-team/idom",
    "commit": "599c42b0462ebc1e92a300404ca789f261c3e354",
    "filename": "idom/core/hooks.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/idom-team-idom/idom/core/hooks.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "idom/core/hooks.py:123:4 Incompatible attribute type [8]: Attribute `_current_dispatchers` declared in class `HookDispatcher` has type `Dict[int, HookDispatcher]` but is used as type `WeakValueDictionary[Variable[weakref._KT], Variable[weakref._VT]]`.",
    "message": " Attribute `_current_dispatchers` declared in class `HookDispatcher` has type `Dict[int, HookDispatcher]` but is used as type `WeakValueDictionary[Variable[weakref._KT], Variable[weakref._VT]]`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 123,
    "warning_line": "    _current_dispatchers: Dict[int, \"HookDispatcher\"] = WeakValueDictionary()",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    _current_dispatchers: Dict[int, \"HookDispatcher\"] = WeakValueDictionary()\n\n",
        "source_code_len": 80,
        "target_code": "\n    _current_dispatchers: \"WeakValueDictionary[int, HookDispatcher]\" = WeakValueDictionary()\n\n",
        "target_code_len": 95,
        "diff_format": "@@ -122,3 +121,3 @@\n \n-    _current_dispatchers: Dict[int, \"HookDispatcher\"] = WeakValueDictionary()\n+    _current_dispatchers: \"WeakValueDictionary[int, HookDispatcher]\" = WeakValueDictionary()\n \n",
        "source_code_with_indent": "\n    <IND>_current_dispatchers: Dict[int, \"HookDispatcher\"] = WeakValueDictionary()\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <IND>_current_dispatchers: \"WeakValueDictionary[int, HookDispatcher]\" = WeakValueDictionary()\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]