[
  {
    "project": "theacodes/nox",
    "commit": "4ea20511bb6362bd4dd7a35e7943e9c1f67b2d62",
    "filename": "nox/_decorators.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/theacodes-nox/nox/_decorators.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "nox/_decorators.py:21:30 Incompatible variable type [9]: name is declared to have type `str` but is used as type `None`.",
    "message": " name is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 21,
    "warning_line": "def _copy_func(src: Callable, name: str = None) -> Callable:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _copy_func(src: Callable, name: str = None) -> Callable:\n    dst = types.FunctionType(\n",
        "source_code_len": 92,
        "target_code": "\ndef _copy_func(src: Callable, name: Optional[str] = None) -> Callable:\n    dst = types.FunctionType(\n",
        "target_code_len": 102,
        "diff_format": "@@ -20,3 +20,3 @@\n \n-def _copy_func(src: Callable, name: str = None) -> Callable:\n+def _copy_func(src: Callable, name: Optional[str] = None) -> Callable:\n     dst = types.FunctionType(\n",
        "source_code_with_indent": "\n<DED><DED>def _copy_func(src: Callable, name: str = None) -> Callable:\n    <IND>dst = types.FunctionType(\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED><DED>def _copy_func(src: Callable, name: Optional[str] = None) -> Callable:\n    <IND>dst = types.FunctionType(\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "theacodes/nox",
    "commit": "4ea20511bb6362bd4dd7a35e7943e9c1f67b2d62",
    "filename": "nox/_decorators.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/theacodes-nox/nox/_decorators.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "nox/_decorators.py:44:8 Incompatible variable type [9]: should_warn is declared to have type `Dict[str, typing.Any]` but is used as type `None`.",
    "message": " should_warn is declared to have type `Dict[str, typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 44,
    "warning_line": "        should_warn: Dict[str, Any] = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        venv_params: Any = None,\n        should_warn: Dict[str, Any] = None,\n    ):\n",
        "source_code_len": 84,
        "target_code": "        venv_params: Any = None,\n        should_warn: Optional[Dict[str, Any]] = None,\n    ):\n",
        "target_code_len": 94,
        "diff_format": "@@ -43,3 +43,3 @@\n         venv_params: Any = None,\n-        should_warn: Dict[str, Any] = None,\n+        should_warn: Optional[Dict[str, Any]] = None,\n     ):\n",
        "source_code_with_indent": "        venv_params: Any = None,\n        should_warn: Dict[str, Any] = None,\n    ):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        venv_params: Any = None,\n        should_warn: Optional[Dict[str, Any]] = None,\n    ):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "theacodes/nox",
    "commit": "4ea20511bb6362bd4dd7a35e7943e9c1f67b2d62",
    "filename": "nox/_decorators.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/theacodes-nox/nox/_decorators.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "nox/_decorators.py:56:19 Incompatible variable type [9]: name is declared to have type `str` but is used as type `None`.",
    "message": " name is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 56,
    "warning_line": "    def copy(self, name: str = None) -> \"Func\":",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _copy_func(src: Callable, name: str = None) -> Callable:\n    dst = types.FunctionType(\n",
        "source_code_len": 92,
        "target_code": "\ndef _copy_func(src: Callable, name: Optional[str] = None) -> Callable:\n    dst = types.FunctionType(\n",
        "target_code_len": 102,
        "diff_format": "@@ -20,3 +20,3 @@\n \n-def _copy_func(src: Callable, name: str = None) -> Callable:\n+def _copy_func(src: Callable, name: Optional[str] = None) -> Callable:\n     dst = types.FunctionType(\n",
        "source_code_with_indent": "\n<DED><DED>def _copy_func(src: Callable, name: str = None) -> Callable:\n    <IND>dst = types.FunctionType(\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED><DED>def _copy_func(src: Callable, name: Optional[str] = None) -> Callable:\n    <IND>dst = types.FunctionType(\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def copy(self, name: str = None) -> \"Func\":\n        return Func(\n",
        "source_code_len": 70,
        "target_code": "\n    def copy(self, name: Optional[str] = None) -> \"Func\":\n        return Func(\n",
        "target_code_len": 80,
        "diff_format": "@@ -55,3 +55,3 @@\n \n-    def copy(self, name: str = None) -> \"Func\":\n+    def copy(self, name: Optional[str] = None) -> \"Func\":\n         return Func(\n",
        "source_code_with_indent": "\n    <DED>def copy(self, name: str = None) -> \"Func\":\n        <IND>return Func(\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def copy(self, name: Optional[str] = None) -> \"Func\":\n        <IND>return Func(\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "theacodes/nox",
    "commit": "4ea20511bb6362bd4dd7a35e7943e9c1f67b2d62",
    "filename": "nox/command.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/theacodes-nox/nox/command.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "nox/command.py:28:23 Incompatible variable type [9]: reason is declared to have type `str` but is used as type `None`.",
    "message": " reason is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 28,
    "warning_line": "    def __init__(self, reason: str = None) -> None:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __init__(self, reason: str = None) -> None:\n        super(CommandFailed, self).__init__(reason)\n",
        "source_code_len": 105,
        "target_code": "\n    def __init__(self, reason: Optional[str] = None) -> None:\n        super(CommandFailed, self).__init__(reason)\n",
        "target_code_len": 115,
        "diff_format": "@@ -27,3 +32,3 @@\n \n-    def __init__(self, reason: str = None) -> None:\n+    def __init__(self, reason: Optional[str] = None) -> None:\n         super(CommandFailed, self).__init__(reason)\n",
        "source_code_with_indent": "\n    def __init__(self, reason: str = None) -> None:\n        <IND>super(CommandFailed, self).__init__(reason)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    def __init__(self, reason: Optional[str] = None) -> None:\n        <IND>super(CommandFailed, self).__init__(reason)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "theacodes/nox",
    "commit": "4ea20511bb6362bd4dd7a35e7943e9c1f67b2d62",
    "filename": "nox/command.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/theacodes-nox/nox/command.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "nox/command.py:113:52 Incompatible parameter type [6]: Expected `typing.Mapping[str, str]` for 3rd parameter `env` to call `popen` but got `Optional[typing.Dict[typing.Any, typing.Any]]`.",
    "message": " Expected `typing.Mapping[str, str]` for 3rd parameter `env` to call `popen` but got `Optional[typing.Dict[typing.Any, typing.Any]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 113,
    "warning_line": "            [cmd_path] + list(args), silent=silent, env=env, **popen_kws"
  },
  {
    "project": "theacodes/nox",
    "commit": "4ea20511bb6362bd4dd7a35e7943e9c1f67b2d62",
    "filename": "nox/popen.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/theacodes-nox/nox/popen.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "nox/popen.py:57:4 Incompatible variable type [9]: env is declared to have type `Mapping[str, str]` but is used as type `None`.",
    "message": " env is declared to have type `Mapping[str, str]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 57,
    "warning_line": "    env: Mapping[str, str] = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import sys\nfrom typing import IO, Mapping, Sequence, Tuple, Union\n\n",
        "source_code_len": 67,
        "target_code": "import sys\nfrom typing import IO, Mapping, Optional, Sequence, Tuple, Union\n\n",
        "target_code_len": 77,
        "diff_format": "@@ -18,3 +18,3 @@\n import sys\n-from typing import IO, Mapping, Sequence, Tuple, Union\n+from typing import IO, Mapping, Optional, Sequence, Tuple, Union\n \n",
        "source_code_with_indent": "import sys\nfrom typing import IO, Mapping, Sequence, Tuple, Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import sys\nfrom typing import IO, Mapping, Optional, Sequence, Tuple, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    args: Sequence[str],\n    env: Mapping[str, str] = None,\n    silent: bool = False,\n    stdout: Union[int, IO] = None,\n    stderr: Union[int, IO] = subprocess.STDOUT,\n",
        "source_code_len": 169,
        "target_code": "    args: Sequence[str],\n    env: Optional[Mapping[str, str]] = None,\n    silent: bool = False,\n    stdout: Optional[Union[int, IO]] = None,\n    stderr: Union[int, IO] = subprocess.STDOUT,\n",
        "target_code_len": 189,
        "diff_format": "@@ -56,5 +56,5 @@\n     args: Sequence[str],\n-    env: Mapping[str, str] = None,\n+    env: Optional[Mapping[str, str]] = None,\n     silent: bool = False,\n-    stdout: Union[int, IO] = None,\n+    stdout: Optional[Union[int, IO]] = None,\n     stderr: Union[int, IO] = subprocess.STDOUT,\n",
        "source_code_with_indent": "    args: Sequence[str],\n    env: Mapping[str, str] = None,\n    silent: bool = False,\n    stdout: Union[int, IO] = None,\n    stderr: Union[int, IO] = subprocess.STDOUT,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    args: Sequence[str],\n    env: Optional[Mapping[str, str]] = None,\n    silent: bool = False,\n    stdout: Optional[Union[int, IO]] = None,\n    stderr: Union[int, IO] = subprocess.STDOUT,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "theacodes/nox",
    "commit": "4ea20511bb6362bd4dd7a35e7943e9c1f67b2d62",
    "filename": "nox/popen.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/theacodes-nox/nox/popen.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "nox/popen.py:59:4 Incompatible variable type [9]: stdout is declared to have type `Union[IO[typing.Any], int]` but is used as type `None`.",
    "message": " stdout is declared to have type `Union[IO[typing.Any], int]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 59,
    "warning_line": "    stdout: Union[int, IO] = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import sys\nfrom typing import IO, Mapping, Sequence, Tuple, Union\n\n",
        "source_code_len": 67,
        "target_code": "import sys\nfrom typing import IO, Mapping, Optional, Sequence, Tuple, Union\n\n",
        "target_code_len": 77,
        "diff_format": "@@ -18,3 +18,3 @@\n import sys\n-from typing import IO, Mapping, Sequence, Tuple, Union\n+from typing import IO, Mapping, Optional, Sequence, Tuple, Union\n \n",
        "source_code_with_indent": "import sys\nfrom typing import IO, Mapping, Sequence, Tuple, Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import sys\nfrom typing import IO, Mapping, Optional, Sequence, Tuple, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    args: Sequence[str],\n    env: Mapping[str, str] = None,\n    silent: bool = False,\n    stdout: Union[int, IO] = None,\n    stderr: Union[int, IO] = subprocess.STDOUT,\n",
        "source_code_len": 169,
        "target_code": "    args: Sequence[str],\n    env: Optional[Mapping[str, str]] = None,\n    silent: bool = False,\n    stdout: Optional[Union[int, IO]] = None,\n    stderr: Union[int, IO] = subprocess.STDOUT,\n",
        "target_code_len": 189,
        "diff_format": "@@ -56,5 +56,5 @@\n     args: Sequence[str],\n-    env: Mapping[str, str] = None,\n+    env: Optional[Mapping[str, str]] = None,\n     silent: bool = False,\n-    stdout: Union[int, IO] = None,\n+    stdout: Optional[Union[int, IO]] = None,\n     stderr: Union[int, IO] = subprocess.STDOUT,\n",
        "source_code_with_indent": "    args: Sequence[str],\n    env: Mapping[str, str] = None,\n    silent: bool = False,\n    stdout: Union[int, IO] = None,\n    stderr: Union[int, IO] = subprocess.STDOUT,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    args: Sequence[str],\n    env: Optional[Mapping[str, str]] = None,\n    silent: bool = False,\n    stdout: Optional[Union[int, IO]] = None,\n    stderr: Union[int, IO] = subprocess.STDOUT,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "theacodes/nox",
    "commit": "4ea20511bb6362bd4dd7a35e7943e9c1f67b2d62",
    "filename": "nox/sessions.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/theacodes-nox/nox/sessions.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "nox/sessions.py:214:26 Incompatible variable type [9]: env is declared to have type `Mapping[str, str]` but is used as type `None`.",
    "message": " env is declared to have type `Mapping[str, str]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 214,
    "warning_line": "        self, *args: str, env: Mapping[str, str] = None, **kwargs: Any",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def run(\n        self, *args: str, env: Mapping[str, str] = None, **kwargs: Any\n    ) -> Optional[Any]:\n",
        "source_code_len": 108,
        "target_code": "    def run(\n        self, *args: str, env: Optional[Mapping[str, str]] = None, **kwargs: Any\n    ) -> Optional[Any]:\n",
        "target_code_len": 118,
        "diff_format": "@@ -213,3 +213,3 @@\n     def run(\n-        self, *args: str, env: Mapping[str, str] = None, **kwargs: Any\n+        self, *args: str, env: Optional[Mapping[str, str]] = None, **kwargs: Any\n     ) -> Optional[Any]:\n",
        "source_code_with_indent": "    <DED><DED>def run(\n        self, *args: str, env: Mapping[str, str] = None, **kwargs: Any\n    ) -> Optional[Any]:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED><DED>def run(\n        self, *args: str, env: Optional[Mapping[str, str]] = None, **kwargs: Any\n    ) -> Optional[Any]:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _run(self, *args: str, env: Mapping[str, str] = None, **kwargs: Any) -> Any:\n        \"\"\"Like run(), except that it runs even if --install-only is provided.\"\"\"\n",
        "source_code_len": 168,
        "target_code": "\n    def _run(\n        self, *args: str, env: Optional[Mapping[str, str]] = None, **kwargs: Any\n    ) -> Any:\n        \"\"\"Like run(), except that it runs even if --install-only is provided.\"\"\"\n",
        "target_code_len": 192,
        "diff_format": "@@ -313,3 +313,5 @@\n \n-    def _run(self, *args: str, env: Mapping[str, str] = None, **kwargs: Any) -> Any:\n+    def _run(\n+        self, *args: str, env: Optional[Mapping[str, str]] = None, **kwargs: Any\n+    ) -> Any:\n         \"\"\"Like run(), except that it runs even if --install-only is provided.\"\"\"\n",
        "source_code_with_indent": "\n    <DED>def _run(self, *args: str, env: Mapping[str, str] = None, **kwargs: Any) -> Any:\n        <IND>\"\"\"Like run(), except that it runs even if --install-only is provided.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def _run(\n        self, *args: str, env: Optional[Mapping[str, str]] = None, **kwargs: Any\n    ) -> Any:\n        <IND>\"\"\"Like run(), except that it runs even if --install-only is provided.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "theacodes/nox",
    "commit": "4ea20511bb6362bd4dd7a35e7943e9c1f67b2d62",
    "filename": "nox/sessions.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/theacodes-nox/nox/sessions.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "nox/sessions.py:272:26 Incompatible variable type [9]: env is declared to have type `Mapping[str, str]` but is used as type `None`.",
    "message": " env is declared to have type `Mapping[str, str]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 272,
    "warning_line": "        self, *args: str, env: Mapping[str, str] = None, **kwargs: Any",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def run_always(\n        self, *args: str, env: Mapping[str, str] = None, **kwargs: Any\n    ) -> Optional[Any]:\n",
        "source_code_len": 115,
        "target_code": "    def run_always(\n        self, *args: str, env: Optional[Mapping[str, str]] = None, **kwargs: Any\n    ) -> Optional[Any]:\n",
        "target_code_len": 125,
        "diff_format": "@@ -271,3 +271,3 @@\n     def run_always(\n-        self, *args: str, env: Mapping[str, str] = None, **kwargs: Any\n+        self, *args: str, env: Optional[Mapping[str, str]] = None, **kwargs: Any\n     ) -> Optional[Any]:\n",
        "source_code_with_indent": "    <DED>def run_always(\n        self, *args: str, env: Mapping[str, str] = None, **kwargs: Any\n    ) -> Optional[Any]:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def run_always(\n        self, *args: str, env: Optional[Mapping[str, str]] = None, **kwargs: Any\n    ) -> Optional[Any]:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _run(self, *args: str, env: Mapping[str, str] = None, **kwargs: Any) -> Any:\n        \"\"\"Like run(), except that it runs even if --install-only is provided.\"\"\"\n",
        "source_code_len": 168,
        "target_code": "\n    def _run(\n        self, *args: str, env: Optional[Mapping[str, str]] = None, **kwargs: Any\n    ) -> Any:\n        \"\"\"Like run(), except that it runs even if --install-only is provided.\"\"\"\n",
        "target_code_len": 192,
        "diff_format": "@@ -313,3 +313,5 @@\n \n-    def _run(self, *args: str, env: Mapping[str, str] = None, **kwargs: Any) -> Any:\n+    def _run(\n+        self, *args: str, env: Optional[Mapping[str, str]] = None, **kwargs: Any\n+    ) -> Any:\n         \"\"\"Like run(), except that it runs even if --install-only is provided.\"\"\"\n",
        "source_code_with_indent": "\n    <DED>def _run(self, *args: str, env: Mapping[str, str] = None, **kwargs: Any) -> Any:\n        <IND>\"\"\"Like run(), except that it runs even if --install-only is provided.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def _run(\n        self, *args: str, env: Optional[Mapping[str, str]] = None, **kwargs: Any\n    ) -> Any:\n        <IND>\"\"\"Like run(), except that it runs even if --install-only is provided.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "theacodes/nox",
    "commit": "4ea20511bb6362bd4dd7a35e7943e9c1f67b2d62",
    "filename": "nox/sessions.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/theacodes-nox/nox/sessions.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "nox/sessions.py:314:31 Incompatible variable type [9]: env is declared to have type `Mapping[str, str]` but is used as type `None`.",
    "message": " env is declared to have type `Mapping[str, str]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 314,
    "warning_line": "    def _run(self, *args: str, env: Mapping[str, str] = None, **kwargs: Any) -> Any:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _run(self, *args: str, env: Mapping[str, str] = None, **kwargs: Any) -> Any:\n        \"\"\"Like run(), except that it runs even if --install-only is provided.\"\"\"\n",
        "source_code_len": 168,
        "target_code": "\n    def _run(\n        self, *args: str, env: Optional[Mapping[str, str]] = None, **kwargs: Any\n    ) -> Any:\n        \"\"\"Like run(), except that it runs even if --install-only is provided.\"\"\"\n",
        "target_code_len": 192,
        "diff_format": "@@ -313,3 +313,5 @@\n \n-    def _run(self, *args: str, env: Mapping[str, str] = None, **kwargs: Any) -> Any:\n+    def _run(\n+        self, *args: str, env: Optional[Mapping[str, str]] = None, **kwargs: Any\n+    ) -> Any:\n         \"\"\"Like run(), except that it runs even if --install-only is provided.\"\"\"\n",
        "source_code_with_indent": "\n    <DED>def _run(self, *args: str, env: Mapping[str, str] = None, **kwargs: Any) -> Any:\n        <IND>\"\"\"Like run(), except that it runs even if --install-only is provided.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def _run(\n        self, *args: str, env: Optional[Mapping[str, str]] = None, **kwargs: Any\n    ) -> Any:\n        <IND>\"\"\"Like run(), except that it runs even if --install-only is provided.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "theacodes/nox",
    "commit": "4ea20511bb6362bd4dd7a35e7943e9c1f67b2d62",
    "filename": "nox/virtualenv.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/theacodes-nox/nox/virtualenv.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "nox/virtualenv.py:56:47 Incompatible variable type [9]: env is declared to have type `Mapping[str, str]` but is used as type `None`.",
    "message": " env is declared to have type `Mapping[str, str]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 56,
    "warning_line": "    def __init__(self, bin_paths: None = None, env: Mapping[str, str] = None) -> None:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __init__(self, bin_paths: None = None, env: Mapping[str, str] = None) -> None:\n        self._bin_paths = bin_paths\n",
        "source_code_len": 124,
        "target_code": "\n    def __init__(\n        self, bin_paths: None = None, env: Optional[Mapping[str, str]] = None\n    ) -> None:\n        self._bin_paths = bin_paths\n",
        "target_code_len": 148,
        "diff_format": "@@ -55,3 +55,5 @@\n \n-    def __init__(self, bin_paths: None = None, env: Mapping[str, str] = None) -> None:\n+    def __init__(\n+        self, bin_paths: None = None, env: Optional[Mapping[str, str]] = None\n+    ) -> None:\n         self._bin_paths = bin_paths\n",
        "source_code_with_indent": "\n    def __init__(self, bin_paths: None = None, env: Mapping[str, str] = None) -> None:\n        <IND>self._bin_paths = bin_paths\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    def __init__(\n        self, bin_paths: None = None, env: Optional[Mapping[str, str]] = None\n    ) -> None:\n        <IND>self._bin_paths = bin_paths\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]