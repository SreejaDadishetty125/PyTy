[
  {
    "project": "mediacloud/backend",
    "commit": "3c76fccd7e0785324b87ab3b6d9f5d515dface7e",
    "filename": "mediacloud/mediawords/tm/fetch_topic_tweets.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mediacloud-backend/mediacloud/mediawords/tm/fetch_topic_tweets.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mediacloud/mediawords/tm/fetch_topic_tweets.py:157:25 Unsupported operand [58]: `+` is not supported for operand types `str` and `int`.",
    "message": " `+` is not supported for operand types `str` and `int`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 157,
    "warning_line": "                log.info(\"twitter fetch error.  waiting \" + sleep + \" seconds before retry ...\")",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                sleep = 2 * (twitter_retries**2)\n                log.info(\"twitter fetch error.  waiting \" + sleep + \" seconds before retry ...\")\n                time.sleep(sleep)\n",
        "source_code_len": 180,
        "target_code": "                sleep = 2 * (twitter_retries**2)\n                log.info(\"twitter fetch error.  waiting \" + str(sleep) + \" seconds before retry ...\")\n                time.sleep(sleep)\n",
        "target_code_len": 185,
        "diff_format": "@@ -156,3 +156,3 @@\n                 sleep = 2 * (twitter_retries**2)\n-                log.info(\"twitter fetch error.  waiting \" + sleep + \" seconds before retry ...\")\n+                log.info(\"twitter fetch error.  waiting \" + str(sleep) + \" seconds before retry ...\")\n                 time.sleep(sleep)\n",
        "source_code_with_indent": "                <IND>sleep = 2 * (twitter_retries**2)\n                log.info(\"twitter fetch error.  waiting \" + sleep + \" seconds before retry ...\")\n                time.sleep(sleep)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                <IND>sleep = 2 * (twitter_retries**2)\n                log.info(\"twitter fetch error.  waiting \" + str(sleep) + \" seconds before retry ...\")\n                time.sleep(sleep)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "mediacloud/backend",
    "commit": "3c76fccd7e0785324b87ab3b6d9f5d515dface7e",
    "filename": "mediacloud/mediawords/tm/fetch_topic_tweets.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mediacloud-backend/mediacloud/mediawords/tm/fetch_topic_tweets.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mediacloud/mediawords/tm/fetch_topic_tweets.py:157:68 Unsupported operand [58]: `+` is not supported for operand types `int` and `str`.",
    "message": " `+` is not supported for operand types `int` and `str`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 157,
    "warning_line": "                log.info(\"twitter fetch error.  waiting \" + sleep + \" seconds before retry ...\")",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                sleep = 2 * (twitter_retries**2)\n                log.info(\"twitter fetch error.  waiting \" + sleep + \" seconds before retry ...\")\n                time.sleep(sleep)\n",
        "source_code_len": 180,
        "target_code": "                sleep = 2 * (twitter_retries**2)\n                log.info(\"twitter fetch error.  waiting \" + str(sleep) + \" seconds before retry ...\")\n                time.sleep(sleep)\n",
        "target_code_len": 185,
        "diff_format": "@@ -156,3 +156,3 @@\n                 sleep = 2 * (twitter_retries**2)\n-                log.info(\"twitter fetch error.  waiting \" + sleep + \" seconds before retry ...\")\n+                log.info(\"twitter fetch error.  waiting \" + str(sleep) + \" seconds before retry ...\")\n                 time.sleep(sleep)\n",
        "source_code_with_indent": "                <IND>sleep = 2 * (twitter_retries**2)\n                log.info(\"twitter fetch error.  waiting \" + sleep + \" seconds before retry ...\")\n                time.sleep(sleep)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                <IND>sleep = 2 * (twitter_retries**2)\n                log.info(\"twitter fetch error.  waiting \" + str(sleep) + \" seconds before retry ...\")\n                time.sleep(sleep)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "mediacloud/backend",
    "commit": "3c76fccd7e0785324b87ab3b6d9f5d515dface7e",
    "filename": "mediacloud/mediawords/tm/fetch_topic_tweets.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mediacloud-backend/mediacloud/mediawords/tm/fetch_topic_tweets.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mediacloud/mediawords/tm/fetch_topic_tweets.py:279:8 Incompatible variable type [9]: max_tweets is declared to have type `int` but is used as type `None`.",
    "message": " max_tweets is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 279,
    "warning_line": "        max_tweets: int=None) -> None:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import tweepy\nfrom typing import Type\n\n",
        "source_code_len": 39,
        "target_code": "import tweepy\nimport typing\n\n",
        "target_code_len": 29,
        "diff_format": "@@ -7,3 +7,3 @@\n import tweepy\n-from typing import Type\n+import typing\n \n",
        "source_code_with_indent": "import tweepy\nfrom typing import Type\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import tweepy\nimport typing\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        # so just return a direct dict decoding of the raw twitter payload\n        return mediawords.util.json.decode_json(tweets)\n\n\ndef _add_tweets_to_ch_posts(twitter_class: Type[AbstractTwitter], ch_posts: list) -> None:\n    \"\"\"\n",
        "source_code_len": 232,
        "target_code": "        # so just return a direct dict decoding of the raw twitter payload\n        return list(mediawords.util.json.decode_json(tweets))\n\n\ndef _add_tweets_to_ch_posts(twitter_class: typing.Type[AbstractTwitter], ch_posts: list) -> None:\n    \"\"\"\n",
        "target_code_len": 245,
        "diff_format": "@@ -167,6 +167,6 @@\n         # so just return a direct dict decoding of the raw twitter payload\n-        return mediawords.util.json.decode_json(tweets)\n-\n-\n-def _add_tweets_to_ch_posts(twitter_class: Type[AbstractTwitter], ch_posts: list) -> None:\n+        return list(mediawords.util.json.decode_json(tweets))\n+\n+\n+def _add_tweets_to_ch_posts(twitter_class: typing.Type[AbstractTwitter], ch_posts: list) -> None:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "        # so just return a direct dict decoding of the raw twitter payload\n        <DED>return mediawords.util.json.decode_json(tweets)\n\n\n<DED><DED>def _add_tweets_to_ch_posts(twitter_class: Type[AbstractTwitter], ch_posts: list) -> None:\n    <IND>",
        "target_code_with_indent": "        # so just return a direct dict decoding of the raw twitter payload\n        <DED>return list(mediawords.util.json.decode_json(tweets))\n\n\n<DED><DED>def _add_tweets_to_ch_posts(twitter_class: typing.Type[AbstractTwitter], ch_posts: list) -> None:\n    <IND>"
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        db: DatabaseHandler,\n        twitter_class: Type[AbstractTwitter],\n        topic: dict,\n        topic_tweet_day: dict,\n        max_tweets: int=None) -> None:\n    \"\"\"\n",
        "source_code_len": 174,
        "target_code": "        db: DatabaseHandler,\n        twitter_class: typing.Type[AbstractTwitter],\n        topic: dict,\n        topic_tweet_day: dict,\n        max_tweets: typing.Optional[int]=None) -> None:\n    \"\"\"\n",
        "target_code_len": 198,
        "diff_format": "@@ -275,6 +275,6 @@\n         db: DatabaseHandler,\n-        twitter_class: Type[AbstractTwitter],\n+        twitter_class: typing.Type[AbstractTwitter],\n         topic: dict,\n         topic_tweet_day: dict,\n-        max_tweets: int=None) -> None:\n+        max_tweets: typing.Optional[int]=None) -> None:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "        db: DatabaseHandler,\n        twitter_class: Type[AbstractTwitter],\n        topic: dict,\n        topic_tweet_day: dict,\n        max_tweets: int=None) -> None:\n    <IND>",
        "target_code_with_indent": "        db: DatabaseHandler,\n        twitter_class: typing.Type[AbstractTwitter],\n        topic: dict,\n        topic_tweet_day: dict,\n        max_tweets: typing.Optional[int]=None) -> None:\n    <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        topic: dict,\n        day: datetime,\n        ch_class: Type[AbstractCrimsonHexagon]) -> dict:\n    \"\"\"\n",
        "source_code_len": 109,
        "target_code": "        topic: dict,\n        day: datetime.datetime,\n        ch_class: typing.Type[AbstractCrimsonHexagon]) -> dict:\n    \"\"\"\n",
        "target_code_len": 125,
        "diff_format": "@@ -334,4 +334,4 @@\n         topic: dict,\n-        day: datetime,\n-        ch_class: Type[AbstractCrimsonHexagon]) -> dict:\n+        day: datetime.datetime,\n+        ch_class: typing.Type[AbstractCrimsonHexagon]) -> dict:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "        topic: dict,\n        day: datetime,\n        ch_class: Type[AbstractCrimsonHexagon]) -> dict:\n    <IND>",
        "target_code_with_indent": "        topic: dict,\n        day: datetime.datetime,\n        ch_class: typing.Type[AbstractCrimsonHexagon]) -> dict:\n    <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        topic: dict,\n        twitter_class: Type[AbstractTwitter],\n        ch_class: Type[AbstractCrimsonHexagon]) -> None:\n    \"\"\"\n",
        "source_code_len": 132,
        "target_code": "        topic: dict,\n        twitter_class: typing.Type[AbstractTwitter],\n        ch_class: typing.Type[AbstractCrimsonHexagon]) -> None:\n    \"\"\"\n",
        "target_code_len": 146,
        "diff_format": "@@ -383,4 +383,4 @@\n         topic: dict,\n-        twitter_class: Type[AbstractTwitter],\n-        ch_class: Type[AbstractCrimsonHexagon]) -> None:\n+        twitter_class: typing.Type[AbstractTwitter],\n+        ch_class: typing.Type[AbstractCrimsonHexagon]) -> None:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "        topic: dict,\n        twitter_class: Type[AbstractTwitter],\n        ch_class: Type[AbstractCrimsonHexagon]) -> None:\n    <IND>",
        "target_code_with_indent": "        topic: dict,\n        twitter_class: typing.Type[AbstractTwitter],\n        ch_class: typing.Type[AbstractCrimsonHexagon]) -> None:\n    <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        topics_id: int,\n        twitter_class: Type[AbstractTwitter]=Twitter,\n        ch_class: Type[AbstractCrimsonHexagon]=CrimsonHexagon) -> None:\n    \"\"\"\n",
        "source_code_len": 158,
        "target_code": "        topics_id: int,\n        twitter_class: typing.Type[AbstractTwitter]=Twitter,\n        ch_class: typing.Type[AbstractCrimsonHexagon]=CrimsonHexagon) -> None:\n    \"\"\"\n",
        "target_code_len": 172,
        "diff_format": "@@ -412,4 +412,4 @@\n         topics_id: int,\n-        twitter_class: Type[AbstractTwitter]=Twitter,\n-        ch_class: Type[AbstractCrimsonHexagon]=CrimsonHexagon) -> None:\n+        twitter_class: typing.Type[AbstractTwitter]=Twitter,\n+        ch_class: typing.Type[AbstractCrimsonHexagon]=CrimsonHexagon) -> None:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "        topics_id: int,\n        twitter_class: Type[AbstractTwitter]=Twitter,\n        ch_class: Type[AbstractCrimsonHexagon]=CrimsonHexagon) -> None:\n    <IND>",
        "target_code_with_indent": "        topics_id: int,\n        twitter_class: typing.Type[AbstractTwitter]=Twitter,\n        ch_class: typing.Type[AbstractCrimsonHexagon]=CrimsonHexagon) -> None:\n    <IND>"
      }
    ]
  }
]