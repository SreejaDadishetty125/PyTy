[
  {
    "project": "samuelcolvin/arq",
    "commit": "23b57b6ddb8abda47a4d303a6fdd4c78ac1461d3",
    "filename": "arq/drain.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/samuelcolvin-arq/arq/drain.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "arq/drain.py:59:8 Incompatible attribute type [8]: Attribute `task_exception` declared in class `Drain` has type `Exception` but is used as type `None`.",
    "message": " Attribute `task_exception` declared in class `Drain` has type `Exception` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 59,
    "warning_line": "        self.task_exception: Exception = None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import logging\nfrom typing import Set  # noqa\n\n",
        "source_code_len": 47,
        "target_code": "import logging\nfrom typing import Optional, Set  # noqa\n\n",
        "target_code_len": 57,
        "diff_format": "@@ -8,3 +8,3 @@\n import logging\n-from typing import Set  # noqa\n+from typing import Optional, Set  # noqa\n \n",
        "source_code_with_indent": "import logging\nfrom typing import Set  # noqa\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import logging\nfrom typing import Optional, Set  # noqa\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self.pending_tasks: Set[asyncio.futures.Future] = set()\n        self.task_exception: Exception = None\n        self.semaphore_timeout = semaphore_timeout\n",
        "source_code_len": 161,
        "target_code": "        self.pending_tasks: Set[asyncio.futures.Future] = set()\n        self.task_exception: Optional[Exception] = None\n        self.semaphore_timeout = semaphore_timeout\n",
        "target_code_len": 171,
        "diff_format": "@@ -58,3 +58,3 @@\n         self.pending_tasks: Set[asyncio.futures.Future] = set()\n-        self.task_exception: Exception = None\n+        self.task_exception: Optional[Exception] = None\n         self.semaphore_timeout = semaphore_timeout\n",
        "source_code_with_indent": "        self.pending_tasks: Set[asyncio.futures.Future] = set()\n        self.task_exception: Exception = None\n        self.semaphore_timeout = semaphore_timeout\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self.pending_tasks: Set[asyncio.futures.Future] = set()\n        self.task_exception: Optional[Exception] = None\n        self.semaphore_timeout = semaphore_timeout\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "samuelcolvin/arq",
    "commit": "23b57b6ddb8abda47a4d303a6fdd4c78ac1461d3",
    "filename": "arq/main.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/samuelcolvin-arq/arq/main.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "arq/main.py:57:4 Incompatible attribute type [8]: Attribute `name` declared in class `Actor` has type `str` but is used as type `None`.",
    "message": " Attribute `name` declared in class `Actor` has type `str` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 57,
    "warning_line": "    name: str = None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from datetime import datetime\nfrom typing import Any, Callable, Dict, List, Union  # noqa\n\n",
        "source_code_len": 91,
        "target_code": "from datetime import datetime\nfrom typing import Any, Callable, Dict, List, Optional, Union, cast  # noqa\n\n",
        "target_code_len": 107,
        "diff_format": "@@ -12,3 +12,3 @@\n from datetime import datetime\n-from typing import Any, Callable, Dict, List, Union  # noqa\n+from typing import Any, Callable, Dict, List, Optional, Union, cast  # noqa\n \n",
        "source_code_with_indent": "from datetime import datetime\nfrom typing import Any, Callable, Dict, List, Union  # noqa\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from datetime import datetime\nfrom typing import Any, Callable, Dict, List, Optional, Union, cast  # noqa\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    #: if None the class's name is used\n    name: str = None\n\n",
        "source_code_len": 62,
        "target_code": "    #: if None the class's name is used\n    name: Optional[str] = None\n\n",
        "target_code_len": 72,
        "diff_format": "@@ -56,3 +56,3 @@\n     #: if None the class's name is used\n-    name: str = None\n+    name: Optional[str] = None\n \n",
        "source_code_with_indent": "    #: if None the class's name is used\n    name: str = None\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    #: if None the class's name is used\n    name: Optional[str] = None\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            main_logger.debug('%s.%s \u2192 %s (called directly)', self.name, func_name, queue)\n            data = self.job_class.encode(class_name=self.name, func_name=func_name, args=args, kwargs=kwargs)\n            j = self.job_class(data, queue_name=queue)\n",
        "source_code_len": 256,
        "target_code": "            main_logger.debug('%s.%s \u2192 %s (called directly)', self.name, func_name, queue)\n            data = self.job_class.encode(class_name=cast(str, self.name), func_name=func_name, args=args, kwargs=kwargs)\n            j = self.job_class(data, queue_name=queue)\n",
        "target_code_len": 267,
        "diff_format": "@@ -125,3 +125,3 @@\n             main_logger.debug('%s.%s \u2192 %s (called directly)', self.name, func_name, queue)\n-            data = self.job_class.encode(class_name=self.name, func_name=func_name, args=args, kwargs=kwargs)\n+            data = self.job_class.encode(class_name=cast(str, self.name), func_name=func_name, args=args, kwargs=kwargs)\n             j = self.job_class(data, queue_name=queue)\n",
        "source_code_with_indent": "            <IND>main_logger.debug('%s.%s \u2192 %s (called directly)', self.name, func_name, queue)\n            data = self.job_class.encode(class_name=self.name, func_name=func_name, args=args, kwargs=kwargs)\n            j = self.job_class(data, queue_name=queue)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <IND>main_logger.debug('%s.%s \u2192 %s (called directly)', self.name, func_name, queue)\n            data = self.job_class.encode(class_name=cast(str, self.name), func_name=func_name, args=args, kwargs=kwargs)\n            j = self.job_class(data, queue_name=queue)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            self.queue_lookup[queue],\n            self.job_class.encode(class_name=self.name, func_name=func_name, args=args, kwargs=kwargs),\n        )\n",
        "source_code_len": 152,
        "target_code": "            self.queue_lookup[queue],\n            self.job_class.encode(class_name=cast(str, self.name), func_name=func_name, args=args, kwargs=kwargs),\n        )\n",
        "target_code_len": 163,
        "diff_format": "@@ -132,3 +132,3 @@\n             self.queue_lookup[queue],\n-            self.job_class.encode(class_name=self.name, func_name=func_name, args=args, kwargs=kwargs),\n+            self.job_class.encode(class_name=cast(str, self.name), func_name=func_name, args=args, kwargs=kwargs),\n         )\n",
        "source_code_with_indent": "            self.queue_lookup[queue],\n            self.job_class.encode(class_name=self.name, func_name=func_name, args=args, kwargs=kwargs),\n        )\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            self.queue_lookup[queue],\n            self.job_class.encode(class_name=cast(str, self.name), func_name=func_name, args=args, kwargs=kwargs),\n        )\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "samuelcolvin/arq",
    "commit": "23b57b6ddb8abda47a4d303a6fdd4c78ac1461d3",
    "filename": "arq/worker.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/samuelcolvin-arq/arq/worker.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "arq/worker.py:104:8 Incompatible attribute type [8]: Attribute `start` declared in class `BaseWorker` has type `float` but is used as type `None`.",
    "message": " Attribute `start` declared in class `BaseWorker` has type `float` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 104,
    "warning_line": "        self.start: float = None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from signal import Signals\nfrom typing import Dict, List, Type  # noqa\n\n",
        "source_code_len": 72,
        "target_code": "from signal import Signals\nfrom typing import Dict, List, Optional, Type  # noqa\n\n",
        "target_code_len": 82,
        "diff_format": "@@ -17,3 +17,3 @@\n from signal import Signals\n-from typing import Dict, List, Type  # noqa\n+from typing import Dict, List, Optional, Type  # noqa\n \n",
        "source_code_with_indent": "from signal import Signals\nfrom typing import Dict, List, Type  # noqa\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from signal import Signals\nfrom typing import Dict, List, Optional, Type  # noqa\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self._shadow_lookup:  Dict[str, Actor] = {}\n        self.start: float = None\n        self.last_health_check = 0\n",
        "source_code_len": 120,
        "target_code": "        self._shadow_lookup:  Dict[str, Actor] = {}\n        self.start: Optional[float] = None\n        self.last_health_check = 0\n",
        "target_code_len": 130,
        "diff_format": "@@ -103,3 +103,3 @@\n         self._shadow_lookup:  Dict[str, Actor] = {}\n-        self.start: float = None\n+        self.start: Optional[float] = None\n         self.last_health_check = 0\n",
        "source_code_with_indent": "        self._shadow_lookup:  Dict[str, Actor] = {}\n        self.start: float = None\n        self.last_health_check = 0\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self._shadow_lookup:  Dict[str, Actor] = {}\n        self.start: Optional[float] = None\n        self.last_health_check = 0\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "samuelcolvin/arq",
    "commit": "23b57b6ddb8abda47a4d303a6fdd4c78ac1461d3",
    "filename": "arq/worker.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/samuelcolvin-arq/arq/worker.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "arq/worker.py:108:8 Incompatible attribute type [8]: Attribute `drain` declared in class `BaseWorker` has type `Drain` but is used as type `None`.",
    "message": " Attribute `drain` declared in class `BaseWorker` has type `Drain` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 108,
    "warning_line": "        self.drain: Drain = None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from signal import Signals\nfrom typing import Dict, List, Type  # noqa\n\n",
        "source_code_len": 72,
        "target_code": "from signal import Signals\nfrom typing import Dict, List, Optional, Type  # noqa\n\n",
        "target_code_len": 82,
        "diff_format": "@@ -17,3 +17,3 @@\n from signal import Signals\n-from typing import Dict, List, Type  # noqa\n+from typing import Dict, List, Optional, Type  # noqa\n \n",
        "source_code_with_indent": "from signal import Signals\nfrom typing import Dict, List, Type  # noqa\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from signal import Signals\nfrom typing import Dict, List, Optional, Type  # noqa\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self._closed = False\n        self.drain: Drain = None\n        self.job_class: Type[Job] = None\n        super().__init__(**kwargs)\n",
        "source_code_len": 138,
        "target_code": "        self._closed = False\n        self.drain: Optional[Drain] = None\n        self.job_class: Optional[Type[Job]] = None\n        super().__init__(**kwargs)\n",
        "target_code_len": 158,
        "diff_format": "@@ -107,4 +107,4 @@\n         self._closed = False\n-        self.drain: Drain = None\n-        self.job_class: Type[Job] = None\n+        self.drain: Optional[Drain] = None\n+        self.job_class: Optional[Type[Job]] = None\n         super().__init__(**kwargs)\n",
        "source_code_with_indent": "        self._closed = False\n        self.drain: Drain = None\n        self.job_class: Type[Job] = None\n        super().__init__(**kwargs)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self._closed = False\n        self.drain: Optional[Drain] = None\n        self.job_class: Optional[Type[Job]] = None\n        super().__init__(**kwargs)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "    def handle_prepare_exc(self, msg: str):\n        self.drain.jobs_failed += 1\n        jobs_logger.error(msg)\n",
        "source_code_len": 111,
        "target_code": "    def handle_prepare_exc(self, msg: str):\n        self.drain.jobs_failed += 1  # type: ignore\n        jobs_logger.error(msg)\n",
        "target_code_len": 127,
        "diff_format": "@@ -332,3 +332,3 @@\n     def handle_prepare_exc(self, msg: str):\n-        self.drain.jobs_failed += 1\n+        self.drain.jobs_failed += 1  # type: ignore\n         jobs_logger.error(msg)\n",
        "source_code_with_indent": "    <DED>def handle_prepare_exc(self, msg: str):\n        <IND>self.drain.jobs_failed += 1\n        jobs_logger.error(msg)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def handle_prepare_exc(self, msg: str):\n        <IND>self.drain.jobs_failed += 1  # type: ignore\n        jobs_logger.error(msg)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "samuelcolvin/arq",
    "commit": "23b57b6ddb8abda47a4d303a6fdd4c78ac1461d3",
    "filename": "arq/worker.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/samuelcolvin-arq/arq/worker.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "arq/worker.py:109:8 Incompatible attribute type [8]: Attribute `job_class` declared in class `BaseWorker` has type `Type[Job]` but is used as type `None`.",
    "message": " Attribute `job_class` declared in class `BaseWorker` has type `Type[Job]` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 109,
    "warning_line": "        self.job_class: Type[Job] = None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from signal import Signals\nfrom typing import Dict, List, Type  # noqa\n\n",
        "source_code_len": 72,
        "target_code": "from signal import Signals\nfrom typing import Dict, List, Optional, Type  # noqa\n\n",
        "target_code_len": 82,
        "diff_format": "@@ -17,3 +17,3 @@\n from signal import Signals\n-from typing import Dict, List, Type  # noqa\n+from typing import Dict, List, Optional, Type  # noqa\n \n",
        "source_code_with_indent": "from signal import Signals\nfrom typing import Dict, List, Type  # noqa\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from signal import Signals\nfrom typing import Dict, List, Optional, Type  # noqa\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self._closed = False\n        self.drain: Drain = None\n        self.job_class: Type[Job] = None\n        super().__init__(**kwargs)\n",
        "source_code_len": 138,
        "target_code": "        self._closed = False\n        self.drain: Optional[Drain] = None\n        self.job_class: Optional[Type[Job]] = None\n        super().__init__(**kwargs)\n",
        "target_code_len": 158,
        "diff_format": "@@ -107,4 +107,4 @@\n         self._closed = False\n-        self.drain: Drain = None\n-        self.job_class: Type[Job] = None\n+        self.drain: Optional[Drain] = None\n+        self.job_class: Optional[Type[Job]] = None\n         super().__init__(**kwargs)\n",
        "source_code_with_indent": "        self._closed = False\n        self.drain: Drain = None\n        self.job_class: Type[Job] = None\n        super().__init__(**kwargs)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self._closed = False\n        self.drain: Optional[Drain] = None\n        self.job_class: Optional[Type[Job]] = None\n        super().__init__(**kwargs)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "    def handle_prepare_exc(self, msg: str):\n        self.drain.jobs_failed += 1\n        jobs_logger.error(msg)\n",
        "source_code_len": 111,
        "target_code": "    def handle_prepare_exc(self, msg: str):\n        self.drain.jobs_failed += 1  # type: ignore\n        jobs_logger.error(msg)\n",
        "target_code_len": 127,
        "diff_format": "@@ -332,3 +332,3 @@\n     def handle_prepare_exc(self, msg: str):\n-        self.drain.jobs_failed += 1\n+        self.drain.jobs_failed += 1  # type: ignore\n         jobs_logger.error(msg)\n",
        "source_code_with_indent": "    <DED>def handle_prepare_exc(self, msg: str):\n        <IND>self.drain.jobs_failed += 1\n        jobs_logger.error(msg)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def handle_prepare_exc(self, msg: str):\n        <IND>self.drain.jobs_failed += 1  # type: ignore\n        jobs_logger.error(msg)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "samuelcolvin/arq",
    "commit": "23b57b6ddb8abda47a4d303a6fdd4c78ac1461d3",
    "filename": "arq/worker.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/samuelcolvin-arq/arq/worker.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "arq/worker.py:333:8 Incompatible attribute type [8]: Attribute `jobs_failed` declared in class `Drain` has type `typing.Tuple[int, int, int]` but is used as type `int`.",
    "message": " Attribute `jobs_failed` declared in class `Drain` has type `typing.Tuple[int, int, int]` but is used as type `int`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 333,
    "warning_line": "        self.drain.jobs_failed += 1",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "    def handle_prepare_exc(self, msg: str):\n        self.drain.jobs_failed += 1\n        jobs_logger.error(msg)\n",
        "source_code_len": 111,
        "target_code": "    def handle_prepare_exc(self, msg: str):\n        self.drain.jobs_failed += 1  # type: ignore\n        jobs_logger.error(msg)\n",
        "target_code_len": 127,
        "diff_format": "@@ -332,3 +332,3 @@\n     def handle_prepare_exc(self, msg: str):\n-        self.drain.jobs_failed += 1\n+        self.drain.jobs_failed += 1  # type: ignore\n         jobs_logger.error(msg)\n",
        "source_code_with_indent": "    <DED>def handle_prepare_exc(self, msg: str):\n        <IND>self.drain.jobs_failed += 1\n        jobs_logger.error(msg)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def handle_prepare_exc(self, msg: str):\n        <IND>self.drain.jobs_failed += 1  # type: ignore\n        jobs_logger.error(msg)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "samuelcolvin/arq",
    "commit": "23b57b6ddb8abda47a4d303a6fdd4c78ac1461d3",
    "filename": "arq/worker.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/samuelcolvin-arq/arq/worker.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "arq/worker.py:333:8 Unsupported operand [58]: `+` is not supported for operand types `typing.Tuple[int, int, int]` and `int`.",
    "message": " `+` is not supported for operand types `typing.Tuple[int, int, int]` and `int`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 333,
    "warning_line": "        self.drain.jobs_failed += 1",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "    def handle_prepare_exc(self, msg: str):\n        self.drain.jobs_failed += 1\n        jobs_logger.error(msg)\n",
        "source_code_len": 111,
        "target_code": "    def handle_prepare_exc(self, msg: str):\n        self.drain.jobs_failed += 1  # type: ignore\n        jobs_logger.error(msg)\n",
        "target_code_len": 127,
        "diff_format": "@@ -332,3 +332,3 @@\n     def handle_prepare_exc(self, msg: str):\n-        self.drain.jobs_failed += 1\n+        self.drain.jobs_failed += 1  # type: ignore\n         jobs_logger.error(msg)\n",
        "source_code_with_indent": "    <DED>def handle_prepare_exc(self, msg: str):\n        <IND>self.drain.jobs_failed += 1\n        jobs_logger.error(msg)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def handle_prepare_exc(self, msg: str):\n        <IND>self.drain.jobs_failed += 1  # type: ignore\n        jobs_logger.error(msg)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]