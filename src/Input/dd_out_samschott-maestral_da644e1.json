[
  {
    "project": "samschott/maestral",
    "commit": "da644e1218754c2c247d16544d76b292d48f381c",
    "filename": "maestral/client.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/samschott-maestral/maestral/client.py",
    "file_hunks_size": 13,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "maestral/client.py:111:63 Invalid type [31]: Expression `typing.Callable[($local_maestral?client$_FT, $local_maestral?client$_FT)]` is not a valid type.",
    "message": " Expression `typing.Callable[($local_maestral?client$_FT, $local_maestral?client$_FT)]` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 111,
    "warning_line": "                      local_path_arg: Optional[int] = None) -> Callable[_FT, _FT]:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def to_maestral_error(dbx_path_arg: Optional[int] = None,\n                      local_path_arg: Optional[int] = None) -> Callable[_FT, _FT]:\n    \"\"\"\n",
        "source_code_len": 149,
        "target_code": "def to_maestral_error(dbx_path_arg: Optional[int] = None,\n                      local_path_arg: Optional[int] = None) -> Callable[[_FT], _FT]:\n    \"\"\"\n",
        "target_code_len": 151,
        "diff_format": "@@ -110,3 +110,3 @@\n def to_maestral_error(dbx_path_arg: Optional[int] = None,\n-                      local_path_arg: Optional[int] = None) -> Callable[_FT, _FT]:\n+                      local_path_arg: Optional[int] = None) -> Callable[[_FT], _FT]:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "<DED><DED>def to_maestral_error(dbx_path_arg: Optional[int] = None,\n                      local_path_arg: Optional[int] = None) -> Callable[_FT, _FT]:\n    <IND>",
        "target_code_with_indent": "<DED><DED>def to_maestral_error(dbx_path_arg: Optional[int] = None,\n                      local_path_arg: Optional[int] = None) -> Callable[[_FT], _FT]:\n    <IND>"
      }
    ]
  },
  {
    "project": "samschott/maestral",
    "commit": "da644e1218754c2c247d16544d76b292d48f381c",
    "filename": "maestral/client.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/samschott-maestral/maestral/client.py",
    "file_hunks_size": 13,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "maestral/client.py:392:75 Incompatible parameter type [6]: Expected `typing.Optional[int]` for 1st positional only parameter to call `io.BufferedIOBase.read` but got `float`.",
    "message": " Expected `typing.Optional[int]` for 1st positional only parameter to call `io.BufferedIOBase.read` but got `float`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 392,
    "warning_line": "                session_start = self.dbx.files_upload_session_start(f.read(chunk_size))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        chunk_size_mb = clamp(chunk_size_mb, 0.1, 150)\n        chunk_size = chunk_size_mb * 10**6  # convert to bytes\n\n",
        "source_code_len": 119,
        "target_code": "        chunk_size_mb = clamp(chunk_size_mb, 0.1, 150)\n        chunk_size = int(chunk_size_mb * 10**6)  # convert to bytes\n\n",
        "target_code_len": 124,
        "diff_format": "@@ -372,3 +372,3 @@\n         chunk_size_mb = clamp(chunk_size_mb, 0.1, 150)\n-        chunk_size = chunk_size_mb * 10**6  # convert to bytes\n+        chunk_size = int(chunk_size_mb * 10**6)  # convert to bytes\n \n",
        "source_code_with_indent": "        chunk_size_mb = clamp(chunk_size_mb, 0.1, 150)\n        chunk_size = chunk_size_mb * 10**6  # convert to bytes\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        chunk_size_mb = clamp(chunk_size_mb, 0.1, 150)\n        chunk_size = int(chunk_size_mb * 10**6)  # convert to bytes\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "samschott/maestral",
    "commit": "da644e1218754c2c247d16544d76b292d48f381c",
    "filename": "maestral/client.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/samschott-maestral/maestral/client.py",
    "file_hunks_size": 13,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "maestral/client.py:405:39 Incompatible parameter type [6]: Expected `typing.Optional[int]` for 1st positional only parameter to call `io.BufferedIOBase.read` but got `float`.",
    "message": " Expected `typing.Optional[int]` for 1st positional only parameter to call `io.BufferedIOBase.read` but got `float`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 405,
    "warning_line": "                                f.read(chunk_size),",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        chunk_size_mb = clamp(chunk_size_mb, 0.1, 150)\n        chunk_size = chunk_size_mb * 10**6  # convert to bytes\n\n",
        "source_code_len": 119,
        "target_code": "        chunk_size_mb = clamp(chunk_size_mb, 0.1, 150)\n        chunk_size = int(chunk_size_mb * 10**6)  # convert to bytes\n\n",
        "target_code_len": 124,
        "diff_format": "@@ -372,3 +372,3 @@\n         chunk_size_mb = clamp(chunk_size_mb, 0.1, 150)\n-        chunk_size = chunk_size_mb * 10**6  # convert to bytes\n+        chunk_size = int(chunk_size_mb * 10**6)  # convert to bytes\n \n",
        "source_code_with_indent": "        chunk_size_mb = clamp(chunk_size_mb, 0.1, 150)\n        chunk_size = chunk_size_mb * 10**6  # convert to bytes\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        chunk_size_mb = clamp(chunk_size_mb, 0.1, 150)\n        chunk_size = int(chunk_size_mb * 10**6)  # convert to bytes\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "samschott/maestral",
    "commit": "da644e1218754c2c247d16544d76b292d48f381c",
    "filename": "maestral/client.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/samschott-maestral/maestral/client.py",
    "file_hunks_size": 13,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "maestral/client.py:414:39 Incompatible parameter type [6]: Expected `typing.Optional[int]` for 1st positional only parameter to call `io.BufferedIOBase.read` but got `float`.",
    "message": " Expected `typing.Optional[int]` for 1st positional only parameter to call `io.BufferedIOBase.read` but got `float`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 414,
    "warning_line": "                                f.read(chunk_size),",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        chunk_size_mb = clamp(chunk_size_mb, 0.1, 150)\n        chunk_size = chunk_size_mb * 10**6  # convert to bytes\n\n",
        "source_code_len": 119,
        "target_code": "        chunk_size_mb = clamp(chunk_size_mb, 0.1, 150)\n        chunk_size = int(chunk_size_mb * 10**6)  # convert to bytes\n\n",
        "target_code_len": 124,
        "diff_format": "@@ -372,3 +372,3 @@\n         chunk_size_mb = clamp(chunk_size_mb, 0.1, 150)\n-        chunk_size = chunk_size_mb * 10**6  # convert to bytes\n+        chunk_size = int(chunk_size_mb * 10**6)  # convert to bytes\n \n",
        "source_code_with_indent": "        chunk_size_mb = clamp(chunk_size_mb, 0.1, 150)\n        chunk_size = chunk_size_mb * 10**6  # convert to bytes\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        chunk_size_mb = clamp(chunk_size_mb, 0.1, 150)\n        chunk_size = int(chunk_size_mb * 10**6)  # convert to bytes\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "samschott/maestral",
    "commit": "da644e1218754c2c247d16544d76b292d48f381c",
    "filename": "maestral/daemon.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/samschott-maestral/maestral/daemon.py",
    "file_hunks_size": 11,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "maestral/daemon.py:107:35 Unsupported operand [58]: `+` is not supported for operand types `typing.List[Union[typing.Type[maestral.errors.ConflictError], typing.Type[maestral.errors.DropboxServerError], typing.Type[maestral.errors.FileSizeError], typing.Type[maestral.errors.InsufficientPermissionsError], typing.Type[maestral.errors.InsufficientSpaceError], typing.Type[maestral.errors.IsAFolderError], typing.Type[maestral.errors.NotAFolderError], typing.Type[maestral.errors.NotFoundError], typing.Type[maestral.errors.PathError], typing.Type[maestral.errors.RestrictedContentError], typing.Type[maestral.errors.SyncError], typing.Type[maestral.errors.UnsupportedFileError]]]` and `typing.List[Union[typing.Type[maestral.errors.BadInputError], typing.Type[maestral.errors.CursorResetError], typing.Type[maestral.errors.DropboxAuthError], typing.Type[maestral.errors.InotifyError], typing.Type[maestral.errors.KeyringAccessError], typing.Type[maestral.errors.MaestralApiError], typing.Type[maestral.errors.NoDropboxDirError], typing.Type[maestral.errors.NotLinkedError], typing.Type[maestral.errors.OutOfMemoryError], typing.Type[maestral.errors.RestrictedContentError], typing.Type[maestral.errors.RevFileError], typing.Type[maestral.errors.TokenExpiredError], typing.Type[maestral.errors.TokenRevokedError]]]`.",
    "message": " `+` is not supported for operand types `typing.List[Union[typing.Type[maestral.errors.ConflictError], typing.Type[maestral.errors.DropboxServerError], typing.Type[maestral.errors.FileSizeError], typing.Type[maestral.errors.InsufficientPermissionsError], typing.Type[maestral.errors.InsufficientSpaceError], typing.Type[maestral.errors.IsAFolderError], typing.Type[maestral.errors.NotAFolderError], typing.Type[maestral.errors.NotFoundError], typing.Type[maestral.errors.PathError], typing.Type[maestral.errors.RestrictedContentError], typing.Type[maestral.errors.SyncError], typing.Type[maestral.errors.UnsupportedFileError]]]` and `typing.List[Union[typing.Type[maestral.errors.BadInputError], typing.Type[maestral.errors.CursorResetError], typing.Type[maestral.errors.DropboxAuthError], typing.Type[maestral.errors.InotifyError], typing.Type[maestral.errors.KeyringAccessError], typing.Type[maestral.errors.MaestralApiError], typing.Type[maestral.errors.NoDropboxDirError], typing.Type[maestral.errors.NotLinkedError], typing.Type[maestral.errors.OutOfMemoryError], typing.Type[maestral.errors.RestrictedContentError], typing.Type[maestral.errors.RevFileError], typing.Type[maestral.errors.TokenExpiredError], typing.Type[maestral.errors.TokenRevokedError]]]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 107,
    "warning_line": "for err_cls in list(SYNC_ERRORS) + list(FATAL_ERRORS):"
  },
  {
    "project": "samschott/maestral",
    "commit": "da644e1218754c2c247d16544d76b292d48f381c",
    "filename": "maestral/daemon.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/samschott-maestral/maestral/daemon.py",
    "file_hunks_size": 11,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "maestral/daemon.py:348:12 Incompatible variable type [9]: timeout is declared to have type `int` but is used as type `float`.",
    "message": " timeout is declared to have type `int` but is used as type `float`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 348,
    "warning_line": "            timeout -= 0.2"
  },
  {
    "project": "samschott/maestral",
    "commit": "da644e1218754c2c247d16544d76b292d48f381c",
    "filename": "maestral/daemon.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/samschott-maestral/maestral/daemon.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "maestral/daemon.py:543:16 Incompatible variable type [9]: timeout is declared to have type `int` but is used as type `float`.",
    "message": " timeout is declared to have type `int` but is used as type `float`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 543,
    "warning_line": "                timeout -= 0.2",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def stop_maestral_daemon_process(config_name: str = 'maestral',\n                                 timeout: int = 10) -> Exit:\n    \"\"\"Stops a maestral daemon process by finding its PID and shutting it down.\n",
        "source_code_len": 205,
        "target_code": "def stop_maestral_daemon_process(config_name: str = 'maestral',\n                                 timeout: float = 10) -> Exit:\n    \"\"\"Stops a maestral daemon process by finding its PID and shutting it down.\n",
        "target_code_len": 207,
        "diff_format": "@@ -510,3 +509,3 @@\n def stop_maestral_daemon_process(config_name: str = 'maestral',\n-                                 timeout: int = 10) -> Exit:\n+                                 timeout: float = 10) -> Exit:\n     \"\"\"Stops a maestral daemon process by finding its PID and shutting it down.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "<DED>def stop_maestral_daemon_process(config_name: str = 'maestral',\n                                 timeout: int = 10) -> Exit:\n    <IND>",
        "target_code_with_indent": "<DED>def stop_maestral_daemon_process(config_name: str = 'maestral',\n                                 timeout: float = 10) -> Exit:\n    <IND>"
      }
    ]
  },
  {
    "project": "samschott/maestral",
    "commit": "da644e1218754c2c247d16544d76b292d48f381c",
    "filename": "maestral/daemon.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/samschott-maestral/maestral/daemon.py",
    "file_hunks_size": 11,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "maestral/daemon.py:635:33 Unbound name [10]: Name `Type` is used but not defined in the current scope.",
    "message": " Name `Type` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 635,
    "warning_line": "    def __exit__(self, exc_type: Type[Exception], exc_value: Exception, tb: TracebackType):"
  },
  {
    "project": "samschott/maestral",
    "commit": "da644e1218754c2c247d16544d76b292d48f381c",
    "filename": "maestral/utils/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/samschott-maestral/maestral/utils/__init__.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "maestral/utils/__init__.py:13:4 Incompatible variable type [9]: sep is declared to have type `bool` but is used as type `typing.Union[str, str]`.",
    "message": " sep is declared to have type `bool` but is used as type `typing.Union[str, str]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 13,
    "warning_line": "    sep = ' ' if sep else ''",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    \"\"\"\n    sep = ' ' if sep else ''\n\n",
        "source_code_len": 38,
        "target_code": "    \"\"\"\n    sep_char = ' ' if sep else ''\n\n",
        "target_code_len": 43,
        "diff_format": "@@ -12,3 +12,3 @@\n     \"\"\"\n-    sep = ' ' if sep else ''\n+    sep_char = ' ' if sep else ''\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    sep = ' ' if sep else ''\n\n",
        "target_code_with_indent": "\n    sep_char = ' ' if sep else ''\n\n"
      }
    ]
  },
  {
    "project": "samschott/maestral",
    "commit": "da644e1218754c2c247d16544d76b292d48f381c",
    "filename": "maestral/utils/autostart.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/samschott-maestral/maestral/utils/autostart.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "maestral/utils/autostart.py:185:8 Incompatible variable type [9]: start_cmd is declared to have type `str` but is used as type `typing.List[str]`.",
    "message": " start_cmd is declared to have type `str` but is used as type `typing.List[str]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 185,
    "warning_line": "        start_cmd = shlex.split(start_cmd)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        start_cmd = shlex.split(start_cmd)\n        arguments = [f'\\t\\t<string>{arg}</string>' for arg in start_cmd]\n\n",
        "source_code_len": 118,
        "target_code": "\n        start_cmd_list = shlex.split(start_cmd)\n        arguments = [f'\\t\\t<string>{arg}</string>' for arg in start_cmd_list]\n\n",
        "target_code_len": 128,
        "diff_format": "@@ -184,4 +184,4 @@\n \n-        start_cmd = shlex.split(start_cmd)\n-        arguments = [f'\\t\\t<string>{arg}</string>' for arg in start_cmd]\n+        start_cmd_list = shlex.split(start_cmd)\n+        arguments = [f'\\t\\t<string>{arg}</string>' for arg in start_cmd_list]\n \n",
        "source_code_with_indent": "\n        start_cmd = shlex.split(start_cmd)\n        arguments = [f'\\t\\t<string>{arg}</string>' for arg in start_cmd]\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        start_cmd_list = shlex.split(start_cmd)\n        arguments = [f'\\t\\t<string>{arg}</string>' for arg in start_cmd_list]\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "samschott/maestral",
    "commit": "da644e1218754c2c247d16544d76b292d48f381c",
    "filename": "maestral/utils/notify.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/samschott-maestral/maestral/utils/notify.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "maestral/utils/notify.py:423:8 Incompatible attribute type [8]: Attribute `_snooze` declared in class `MaestralDesktopNotifier` has type `int` but is used as type `float`.",
    "message": " Attribute `_snooze` declared in class `MaestralDesktopNotifier` has type `int` but is used as type `float`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 423,
    "warning_line": "        self._snooze = time.time() + minutes * 60",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self._conf = MaestralConfig(config_name)\n        self._snooze = 0\n\n",
        "source_code_len": 75,
        "target_code": "        self._conf = MaestralConfig(config_name)\n        self._snooze = 0.0\n\n",
        "target_code_len": 77,
        "diff_format": "@@ -400,3 +405,3 @@\n         self._conf = MaestralConfig(config_name)\n-        self._snooze = 0\n+        self._snooze = 0.0\n \n",
        "source_code_with_indent": "        self._conf = MaestralConfig(config_name)\n        self._snooze = 0\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self._conf = MaestralConfig(config_name)\n        self._snooze = 0.0\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "samschott/maestral",
    "commit": "da644e1218754c2c247d16544d76b292d48f381c",
    "filename": "maestral/utils/updates.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/samschott-maestral/maestral/utils/updates.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "maestral/utils/updates.py:102:4 Incompatible return type [7]: Expected `Dict[str, Optional[typing.Any]]` but got `Dict[str, typing.Union[None, bool, str]]`.",
    "message": " Expected `Dict[str, Optional[typing.Any]]` but got `Dict[str, typing.Union[None, bool, str]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 102,
    "warning_line": "    return {'update_available': bool(new_version),",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from packaging.version import Version\nfrom typing import List, Optional, Dict\n\n",
        "source_code_len": 79,
        "target_code": "from packaging.version import Version\nfrom typing import List, Optional, Dict, Union\n\n",
        "target_code_len": 86,
        "diff_format": "@@ -15,3 +15,3 @@\n from packaging.version import Version\n-from typing import List, Optional, Dict\n+from typing import List, Optional, Dict, Union\n \n",
        "source_code_with_indent": "from packaging.version import Version\nfrom typing import List, Optional, Dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from packaging.version import Version\nfrom typing import List, Optional, Dict, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef check_update_available(current_version: str = __version__) -> Dict[str, Optional[str, bool]]:\n    \"\"\"\n",
        "source_code_len": 107,
        "target_code": "\ndef check_update_available(current_version: str = __version__) -> Dict[str, Union[str, bool, None]]:\n    \"\"\"\n",
        "target_code_len": 110,
        "diff_format": "@@ -50,3 +50,3 @@\n \n-def check_update_available(current_version: str = __version__) -> Dict[str, Optional[str, bool]]:\n+def check_update_available(current_version: str = __version__) -> Dict[str, Union[str, bool, None]]:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>def check_update_available(current_version: str = __version__) -> Dict[str, Optional[str, bool]]:\n    <IND>",
        "target_code_with_indent": "\n<DED>def check_update_available(current_version: str = __version__) -> Dict[str, Union[str, bool, None]]:\n    <IND>"
      }
    ]
  }
]