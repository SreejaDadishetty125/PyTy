[
  {
    "project": "DeepRegNet/DeepReg",
    "commit": "127a704dcc244084852558a2fbf67c180164febc",
    "filename": "deepreg/config/parser.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DeepRegNet-DeepReg/deepreg/config/parser.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "deepreg/config/parser.py:23:52 Incompatible parameter type [6]: Expected `typing.Dict[typing.Any, typing.Any]` for 2nd positional only parameter to call `update_nested_dict` but got `typing.Mapping[typing.Any, typing.Any]`.",
    "message": " Expected `typing.Dict[typing.Any, typing.Any]` for 2nd positional only parameter to call `update_nested_dict` but got `typing.Mapping[typing.Any, typing.Any]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 23,
    "warning_line": "            d[k] = update_nested_dict(d.get(k, {}), v)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    for k, v in u.items():\n        if isinstance(v, collections.Mapping):\n            d[k] = update_nested_dict(d.get(k, {}), v)\n",
        "source_code_len": 129,
        "target_code": "    for k, v in u.items():\n        if isinstance(v, dict):\n            d[k] = update_nested_dict(d.get(k, {}), v)\n",
        "target_code_len": 114,
        "diff_format": "@@ -21,3 +21,3 @@\n     for k, v in u.items():\n-        if isinstance(v, collections.Mapping):\n+        if isinstance(v, dict):\n             d[k] = update_nested_dict(d.get(k, {}), v)\n",
        "source_code_with_indent": "    for k, v in u.items():\n        <IND>if isinstance(v, collections.Mapping):\n            <IND>d[k] = update_nested_dict(d.get(k, {}), v)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    for k, v in u.items():\n        <IND>if isinstance(v, dict):\n            <IND>d[k] = update_nested_dict(d.get(k, {}), v)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "DeepRegNet/DeepReg",
    "commit": "127a704dcc244084852558a2fbf67c180164febc",
    "filename": "deepreg/config/parser.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DeepRegNet-DeepReg/deepreg/config/parser.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "deepreg/config/parser.py:29:31 Invalid type [31]: Expression `(str, list)` is not a valid type.",
    "message": " Expression `(str, list)` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 29,
    "warning_line": "def load_configs(config_path: (str, list)) -> dict:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import collections.abc\nimport logging\nimport os\n\n",
        "source_code_len": 49,
        "target_code": "import logging\nimport os\nfrom typing import Dict, List, Union\n\n",
        "target_code_len": 63,
        "diff_format": "@@ -1,4 +1,4 @@\n-import collections.abc\n import logging\n import os\n+from typing import Dict, List, Union\n \n",
        "source_code_with_indent": "import collections.abc\nimport logging\nimport os\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import logging\nimport os\nfrom typing import Dict, List, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    for k, v in u.items():\n        if isinstance(v, collections.Mapping):\n            d[k] = update_nested_dict(d.get(k, {}), v)\n",
        "source_code_len": 129,
        "target_code": "    for k, v in u.items():\n        if isinstance(v, dict):\n            d[k] = update_nested_dict(d.get(k, {}), v)\n",
        "target_code_len": 114,
        "diff_format": "@@ -21,3 +21,3 @@\n     for k, v in u.items():\n-        if isinstance(v, collections.Mapping):\n+        if isinstance(v, dict):\n             d[k] = update_nested_dict(d.get(k, {}), v)\n",
        "source_code_with_indent": "    for k, v in u.items():\n        <IND>if isinstance(v, collections.Mapping):\n            <IND>d[k] = update_nested_dict(d.get(k, {}), v)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    for k, v in u.items():\n        <IND>if isinstance(v, dict):\n            <IND>d[k] = update_nested_dict(d.get(k, {}), v)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef load_configs(config_path: (str, list)) -> dict:\n    \"\"\"\n",
        "source_code_len": 61,
        "target_code": "\ndef load_configs(config_path: Union[str, List[str]]) -> Dict:\n    \"\"\"\n",
        "target_code_len": 71,
        "diff_format": "@@ -28,3 +28,3 @@\n \n-def load_configs(config_path: (str, list)) -> dict:\n+def load_configs(config_path: Union[str, List[str]]) -> Dict:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>def load_configs(config_path: (str, list)) -> dict:\n    <IND>",
        "target_code_with_indent": "\n<DED>def load_configs(config_path: Union[str, List[str]]) -> Dict:\n    <IND>"
      }
    ]
  },
  {
    "project": "DeepRegNet/DeepReg",
    "commit": "127a704dcc244084852558a2fbf67c180164febc",
    "filename": "deepreg/dataset/load.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DeepRegNet-DeepReg/deepreg/dataset/load.py",
    "file_hunks_size": 1,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "deepreg/dataset/load.py:49:4 Incompatible return type [7]: Expected `Optional[DataLoader]` but got `object`.",
    "message": " Expected `Optional[DataLoader]` but got `object`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 49,
    "warning_line": "    return data_loader"
  },
  {
    "project": "DeepRegNet/DeepReg",
    "commit": "127a704dcc244084852558a2fbf67c180164febc",
    "filename": "deepreg/dataset/loader/grouped_loader.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DeepRegNet-DeepReg/deepreg/dataset/loader/grouped_loader.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "deepreg/dataset/loader/grouped_loader.py:34:23 Invalid type [31]: Expression `(str, None)` is not a valid type.",
    "message": " Expression `(str, None)` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 34,
    "warning_line": "        sample_label: (str, None),",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from copy import deepcopy\nfrom typing import List\n\n",
        "source_code_len": 51,
        "target_code": "from copy import deepcopy\nfrom typing import List, Optional, Tuple, Union\n\n",
        "target_code_len": 75,
        "diff_format": "@@ -8,3 +8,3 @@\n from copy import deepcopy\n-from typing import List\n+from typing import List, Optional, Tuple, Union\n \n",
        "source_code_with_indent": "from copy import deepcopy\nfrom typing import List\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from copy import deepcopy\nfrom typing import List, Optional, Tuple, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        labeled: bool,\n        sample_label: (str, None),\n        intra_group_prob: float,\n",
        "source_code_len": 91,
        "target_code": "        labeled: bool,\n        sample_label: Optional[str],\n        intra_group_prob: float,\n",
        "target_code_len": 93,
        "diff_format": "@@ -33,3 +33,3 @@\n         labeled: bool,\n-        sample_label: (str, None),\n+        sample_label: Optional[str],\n         intra_group_prob: float,\n",
        "source_code_with_indent": "        labeled: bool,\n        sample_label: (str, None),\n        intra_group_prob: float,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        labeled: bool,\n        sample_label: Optional[str],\n        intra_group_prob: float,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "DeepRegNet/DeepReg",
    "commit": "127a704dcc244084852558a2fbf67c180164febc",
    "filename": "deepreg/dataset/loader/grouped_loader.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DeepRegNet-DeepReg/deepreg/dataset/loader/grouped_loader.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "deepreg/dataset/loader/grouped_loader.py:38:15 Invalid type [31]: Expression `(int, None)` is not a valid type.",
    "message": " Expression `(int, None)` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 38,
    "warning_line": "        seed: (int, None),",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from copy import deepcopy\nfrom typing import List\n\n",
        "source_code_len": 51,
        "target_code": "from copy import deepcopy\nfrom typing import List, Optional, Tuple, Union\n\n",
        "target_code_len": 75,
        "diff_format": "@@ -8,3 +8,3 @@\n from copy import deepcopy\n-from typing import List\n+from typing import List, Optional, Tuple, Union\n \n",
        "source_code_with_indent": "from copy import deepcopy\nfrom typing import List\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from copy import deepcopy\nfrom typing import List, Optional, Tuple, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        sample_image_in_group: bool,\n        seed: (int, None),\n        image_shape: (list, tuple),\n    ):\n",
        "source_code_len": 107,
        "target_code": "        sample_image_in_group: bool,\n        seed: Optional[int],\n        image_shape: Union[Tuple[int, ...], List[int]],\n    ):\n",
        "target_code_len": 129,
        "diff_format": "@@ -37,4 +37,4 @@\n         sample_image_in_group: bool,\n-        seed: (int, None),\n-        image_shape: (list, tuple),\n+        seed: Optional[int],\n+        image_shape: Union[Tuple[int, ...], List[int]],\n     ):\n",
        "source_code_with_indent": "        sample_image_in_group: bool,\n        seed: (int, None),\n        image_shape: (list, tuple),\n    ):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        sample_image_in_group: bool,\n        seed: Optional[int],\n        image_shape: Union[Tuple[int, ...], List[int]],\n    ):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "DeepRegNet/DeepReg",
    "commit": "127a704dcc244084852558a2fbf67c180164febc",
    "filename": "deepreg/dataset/loader/grouped_loader.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DeepRegNet-DeepReg/deepreg/dataset/loader/grouped_loader.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "deepreg/dataset/loader/grouped_loader.py:39:22 Invalid type [31]: Expression `(list, tuple)` is not a valid type.",
    "message": " Expression `(list, tuple)` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 39,
    "warning_line": "        image_shape: (list, tuple),",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from copy import deepcopy\nfrom typing import List\n\n",
        "source_code_len": 51,
        "target_code": "from copy import deepcopy\nfrom typing import List, Optional, Tuple, Union\n\n",
        "target_code_len": 75,
        "diff_format": "@@ -8,3 +8,3 @@\n from copy import deepcopy\n-from typing import List\n+from typing import List, Optional, Tuple, Union\n \n",
        "source_code_with_indent": "from copy import deepcopy\nfrom typing import List\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from copy import deepcopy\nfrom typing import List, Optional, Tuple, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        sample_image_in_group: bool,\n        seed: (int, None),\n        image_shape: (list, tuple),\n    ):\n",
        "source_code_len": 107,
        "target_code": "        sample_image_in_group: bool,\n        seed: Optional[int],\n        image_shape: Union[Tuple[int, ...], List[int]],\n    ):\n",
        "target_code_len": 129,
        "diff_format": "@@ -37,4 +37,4 @@\n         sample_image_in_group: bool,\n-        seed: (int, None),\n-        image_shape: (list, tuple),\n+        seed: Optional[int],\n+        image_shape: Union[Tuple[int, ...], List[int]],\n     ):\n",
        "source_code_with_indent": "        sample_image_in_group: bool,\n        seed: (int, None),\n        image_shape: (list, tuple),\n    ):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        sample_image_in_group: bool,\n        seed: Optional[int],\n        image_shape: Union[Tuple[int, ...], List[int]],\n    ):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "DeepRegNet/DeepReg",
    "commit": "127a704dcc244084852558a2fbf67c180164febc",
    "filename": "deepreg/dataset/loader/h5_loader.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DeepRegNet-DeepReg/deepreg/dataset/loader/h5_loader.py",
    "file_hunks_size": 6,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "deepreg/dataset/loader/h5_loader.py:101:31 Invalid type [31]: Expression `(int, tuple)` is not a valid type.",
    "message": " Expression `(int, tuple)` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 101,
    "warning_line": "    def get_data(self, index: (int, tuple)) -> np.ndarray:"
  },
  {
    "project": "DeepRegNet/DeepReg",
    "commit": "127a704dcc244084852558a2fbf67c180164febc",
    "filename": "deepreg/dataset/loader/interface.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DeepRegNet-DeepReg/deepreg/dataset/loader/interface.py",
    "file_hunks_size": 17,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "deepreg/dataset/loader/interface.py:24:18 Invalid type [31]: Expression `(bool, None)` is not a valid type.",
    "message": " Expression `(bool, None)` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 24,
    "warning_line": "        labeled: (bool, None),"
  },
  {
    "project": "DeepRegNet/DeepReg",
    "commit": "127a704dcc244084852558a2fbf67c180164febc",
    "filename": "deepreg/dataset/loader/interface.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DeepRegNet-DeepReg/deepreg/dataset/loader/interface.py",
    "file_hunks_size": 17,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "deepreg/dataset/loader/interface.py:25:22 Invalid type [31]: Expression `(int, None)` is not a valid type.",
    "message": " Expression `(int, None)` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 25,
    "warning_line": "        num_indices: (int, None),"
  },
  {
    "project": "DeepRegNet/DeepReg",
    "commit": "127a704dcc244084852558a2fbf67c180164febc",
    "filename": "deepreg/dataset/loader/interface.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DeepRegNet-DeepReg/deepreg/dataset/loader/interface.py",
    "file_hunks_size": 17,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "deepreg/dataset/loader/interface.py:26:23 Invalid type [31]: Expression `(str, None)` is not a valid type.",
    "message": " Expression `(str, None)` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 26,
    "warning_line": "        sample_label: (str, None),"
  },
  {
    "project": "DeepRegNet/DeepReg",
    "commit": "127a704dcc244084852558a2fbf67c180164febc",
    "filename": "deepreg/dataset/loader/interface.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DeepRegNet-DeepReg/deepreg/dataset/loader/interface.py",
    "file_hunks_size": 17,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "deepreg/dataset/loader/interface.py:27:15 Invalid type [31]: Expression `(int, None)` is not a valid type.",
    "message": " Expression `(int, None)` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 27,
    "warning_line": "        seed: (int, None) = None,"
  },
  {
    "project": "DeepRegNet/DeepReg",
    "commit": "127a704dcc244084852558a2fbf67c180164febc",
    "filename": "deepreg/dataset/loader/interface.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DeepRegNet-DeepReg/deepreg/dataset/loader/interface.py",
    "file_hunks_size": 17,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "deepreg/dataset/loader/interface.py:157:29 Invalid type [31]: Expression `(list, tuple)` is not a valid type.",
    "message": " Expression `(list, tuple)` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 157,
    "warning_line": "        moving_image_shape: (list, tuple),",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from abc import ABC\nfrom typing import Dict, List, Optional, Union\n\n",
        "source_code_len": 68,
        "target_code": "from abc import ABC\nfrom typing import Dict, List, Optional, Tuple, Union\n\n",
        "target_code_len": 75,
        "diff_format": "@@ -5,3 +5,3 @@\n from abc import ABC\n-from typing import Dict, List, Optional, Union\n+from typing import Dict, List, Optional, Tuple, Union\n \n",
        "source_code_with_indent": "from abc import ABC\nfrom typing import Dict, List, Optional, Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from abc import ABC\nfrom typing import Dict, List, Optional, Tuple, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self,\n        moving_image_shape: (list, tuple),\n        fixed_image_shape: (list, tuple),\n        **kwargs,\n",
        "source_code_len": 117,
        "target_code": "        self,\n        moving_image_shape: Union[Tuple[int, ...], List[int]],\n        fixed_image_shape: Union[Tuple[int, ...], List[int]],\n        **kwargs,\n",
        "target_code_len": 157,
        "diff_format": "@@ -156,4 +156,4 @@\n         self,\n-        moving_image_shape: (list, tuple),\n-        fixed_image_shape: (list, tuple),\n+        moving_image_shape: Union[Tuple[int, ...], List[int]],\n+        fixed_image_shape: Union[Tuple[int, ...], List[int]],\n         **kwargs,\n",
        "source_code_with_indent": "        self,\n        moving_image_shape: (list, tuple),\n        fixed_image_shape: (list, tuple),\n        **kwargs,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self,\n        moving_image_shape: Union[Tuple[int, ...], List[int]],\n        fixed_image_shape: Union[Tuple[int, ...], List[int]],\n        **kwargs,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "DeepRegNet/DeepReg",
    "commit": "127a704dcc244084852558a2fbf67c180164febc",
    "filename": "deepreg/dataset/loader/interface.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DeepRegNet-DeepReg/deepreg/dataset/loader/interface.py",
    "file_hunks_size": 17,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "deepreg/dataset/loader/interface.py:158:28 Invalid type [31]: Expression `(list, tuple)` is not a valid type.",
    "message": " Expression `(list, tuple)` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 158,
    "warning_line": "        fixed_image_shape: (list, tuple),",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from abc import ABC\nfrom typing import Dict, List, Optional, Union\n\n",
        "source_code_len": 68,
        "target_code": "from abc import ABC\nfrom typing import Dict, List, Optional, Tuple, Union\n\n",
        "target_code_len": 75,
        "diff_format": "@@ -5,3 +5,3 @@\n from abc import ABC\n-from typing import Dict, List, Optional, Union\n+from typing import Dict, List, Optional, Tuple, Union\n \n",
        "source_code_with_indent": "from abc import ABC\nfrom typing import Dict, List, Optional, Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from abc import ABC\nfrom typing import Dict, List, Optional, Tuple, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self,\n        moving_image_shape: (list, tuple),\n        fixed_image_shape: (list, tuple),\n        **kwargs,\n",
        "source_code_len": 117,
        "target_code": "        self,\n        moving_image_shape: Union[Tuple[int, ...], List[int]],\n        fixed_image_shape: Union[Tuple[int, ...], List[int]],\n        **kwargs,\n",
        "target_code_len": 157,
        "diff_format": "@@ -156,4 +156,4 @@\n         self,\n-        moving_image_shape: (list, tuple),\n-        fixed_image_shape: (list, tuple),\n+        moving_image_shape: Union[Tuple[int, ...], List[int]],\n+        fixed_image_shape: Union[Tuple[int, ...], List[int]],\n         **kwargs,\n",
        "source_code_with_indent": "        self,\n        moving_image_shape: (list, tuple),\n        fixed_image_shape: (list, tuple),\n        **kwargs,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self,\n        moving_image_shape: Union[Tuple[int, ...], List[int]],\n        fixed_image_shape: Union[Tuple[int, ...], List[int]],\n        **kwargs,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "DeepRegNet/DeepReg",
    "commit": "127a704dcc244084852558a2fbf67c180164febc",
    "filename": "deepreg/dataset/loader/interface.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DeepRegNet-DeepReg/deepreg/dataset/loader/interface.py",
    "file_hunks_size": 17,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "deepreg/dataset/loader/interface.py:209:37 Invalid type [31]: Expression `(list, tuple)` is not a valid type.",
    "message": " Expression `(list, tuple)` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 209,
    "warning_line": "    def __init__(self, image_shape: (list, tuple), **kwargs):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from abc import ABC\nfrom typing import Dict, List, Optional, Union\n\n",
        "source_code_len": 68,
        "target_code": "from abc import ABC\nfrom typing import Dict, List, Optional, Tuple, Union\n\n",
        "target_code_len": 75,
        "diff_format": "@@ -5,3 +5,3 @@\n from abc import ABC\n-from typing import Dict, List, Optional, Union\n+from typing import Dict, List, Optional, Tuple, Union\n \n",
        "source_code_with_indent": "from abc import ABC\nfrom typing import Dict, List, Optional, Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from abc import ABC\nfrom typing import Dict, List, Optional, Tuple, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __init__(self, image_shape: (list, tuple), **kwargs):\n        \"\"\"\n",
        "source_code_len": 75,
        "target_code": "\n    def __init__(self, image_shape: Union[Tuple[int, ...], List[int]], **kwargs):\n        \"\"\"\n",
        "target_code_len": 95,
        "diff_format": "@@ -208,3 +208,3 @@\n \n-    def __init__(self, image_shape: (list, tuple), **kwargs):\n+    def __init__(self, image_shape: Union[Tuple[int, ...], List[int]], **kwargs):\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    def __init__(self, image_shape: (list, tuple), **kwargs):\n        <IND>",
        "target_code_with_indent": "\n    def __init__(self, image_shape: Union[Tuple[int, ...], List[int]], **kwargs):\n        <IND>"
      }
    ]
  },
  {
    "project": "DeepRegNet/DeepReg",
    "commit": "127a704dcc244084852558a2fbf67c180164febc",
    "filename": "deepreg/dataset/loader/interface.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DeepRegNet-DeepReg/deepreg/dataset/loader/interface.py",
    "file_hunks_size": 17,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "deepreg/dataset/loader/interface.py:332:23 Invalid type [31]: Expression `(numpy.ndarray, None)` is not a valid type.",
    "message": " Expression `(numpy.ndarray, None)` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 332,
    "warning_line": "        moving_label: (np.ndarray, None),",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        fixed_image: np.ndarray,\n        moving_label: (np.ndarray, None),\n        fixed_label: (np.ndarray, None),\n        image_indices: list,\n",
        "source_code_len": 145,
        "target_code": "        fixed_image: np.ndarray,\n        moving_label: Optional[np.ndarray],\n        fixed_label: Optional[np.ndarray],\n        image_indices: list,\n",
        "target_code_len": 149,
        "diff_format": "@@ -331,4 +331,4 @@\n         fixed_image: np.ndarray,\n-        moving_label: (np.ndarray, None),\n-        fixed_label: (np.ndarray, None),\n+        moving_label: Optional[np.ndarray],\n+        fixed_label: Optional[np.ndarray],\n         image_indices: list,\n",
        "source_code_with_indent": "        fixed_image: np.ndarray,\n        moving_label: (np.ndarray, None),\n        fixed_label: (np.ndarray, None),\n        image_indices: list,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        fixed_image: np.ndarray,\n        moving_label: Optional[np.ndarray],\n        fixed_label: Optional[np.ndarray],\n        image_indices: list,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "DeepRegNet/DeepReg",
    "commit": "127a704dcc244084852558a2fbf67c180164febc",
    "filename": "deepreg/dataset/loader/interface.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DeepRegNet-DeepReg/deepreg/dataset/loader/interface.py",
    "file_hunks_size": 17,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "deepreg/dataset/loader/interface.py:333:22 Invalid type [31]: Expression `(numpy.ndarray, None)` is not a valid type.",
    "message": " Expression `(numpy.ndarray, None)` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 333,
    "warning_line": "        fixed_label: (np.ndarray, None),",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        fixed_image: np.ndarray,\n        moving_label: (np.ndarray, None),\n        fixed_label: (np.ndarray, None),\n        image_indices: list,\n",
        "source_code_len": 145,
        "target_code": "        fixed_image: np.ndarray,\n        moving_label: Optional[np.ndarray],\n        fixed_label: Optional[np.ndarray],\n        image_indices: list,\n",
        "target_code_len": 149,
        "diff_format": "@@ -331,4 +331,4 @@\n         fixed_image: np.ndarray,\n-        moving_label: (np.ndarray, None),\n-        fixed_label: (np.ndarray, None),\n+        moving_label: Optional[np.ndarray],\n+        fixed_label: Optional[np.ndarray],\n         image_indices: list,\n",
        "source_code_with_indent": "        fixed_image: np.ndarray,\n        moving_label: (np.ndarray, None),\n        fixed_label: (np.ndarray, None),\n        image_indices: list,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        fixed_image: np.ndarray,\n        moving_label: Optional[np.ndarray],\n        fixed_label: Optional[np.ndarray],\n        image_indices: list,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "DeepRegNet/DeepReg",
    "commit": "127a704dcc244084852558a2fbf67c180164febc",
    "filename": "deepreg/dataset/loader/interface.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DeepRegNet-DeepReg/deepreg/dataset/loader/interface.py",
    "file_hunks_size": 17,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "deepreg/dataset/loader/interface.py:431:23 Invalid type [31]: Expression `(numpy.ndarray, None)` is not a valid type.",
    "message": " Expression `(numpy.ndarray, None)` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 431,
    "warning_line": "        moving_label: (np.ndarray, None),",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        fixed_image: np.ndarray,\n        moving_label: (np.ndarray, None),\n        fixed_label: (np.ndarray, None),\n        image_indices: list,\n",
        "source_code_len": 145,
        "target_code": "        fixed_image: np.ndarray,\n        moving_label: Optional[np.ndarray],\n        fixed_label: Optional[np.ndarray],\n        image_indices: list,\n",
        "target_code_len": 149,
        "diff_format": "@@ -430,4 +430,4 @@\n         fixed_image: np.ndarray,\n-        moving_label: (np.ndarray, None),\n-        fixed_label: (np.ndarray, None),\n+        moving_label: Optional[np.ndarray],\n+        fixed_label: Optional[np.ndarray],\n         image_indices: list,\n",
        "source_code_with_indent": "        fixed_image: np.ndarray,\n        moving_label: (np.ndarray, None),\n        fixed_label: (np.ndarray, None),\n        image_indices: list,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        fixed_image: np.ndarray,\n        moving_label: Optional[np.ndarray],\n        fixed_label: Optional[np.ndarray],\n        image_indices: list,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "DeepRegNet/DeepReg",
    "commit": "127a704dcc244084852558a2fbf67c180164febc",
    "filename": "deepreg/dataset/loader/interface.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DeepRegNet-DeepReg/deepreg/dataset/loader/interface.py",
    "file_hunks_size": 17,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "deepreg/dataset/loader/interface.py:432:22 Invalid type [31]: Expression `(numpy.ndarray, None)` is not a valid type.",
    "message": " Expression `(numpy.ndarray, None)` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 432,
    "warning_line": "        fixed_label: (np.ndarray, None),",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        fixed_image: np.ndarray,\n        moving_label: (np.ndarray, None),\n        fixed_label: (np.ndarray, None),\n        image_indices: list,\n",
        "source_code_len": 145,
        "target_code": "        fixed_image: np.ndarray,\n        moving_label: Optional[np.ndarray],\n        fixed_label: Optional[np.ndarray],\n        image_indices: list,\n",
        "target_code_len": 149,
        "diff_format": "@@ -430,4 +430,4 @@\n         fixed_image: np.ndarray,\n-        moving_label: (np.ndarray, None),\n-        fixed_label: (np.ndarray, None),\n+        moving_label: Optional[np.ndarray],\n+        fixed_label: Optional[np.ndarray],\n         image_indices: list,\n",
        "source_code_with_indent": "        fixed_image: np.ndarray,\n        moving_label: (np.ndarray, None),\n        fixed_label: (np.ndarray, None),\n        image_indices: list,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        fixed_image: np.ndarray,\n        moving_label: Optional[np.ndarray],\n        fixed_label: Optional[np.ndarray],\n        image_indices: list,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "DeepRegNet/DeepReg",
    "commit": "127a704dcc244084852558a2fbf67c180164febc",
    "filename": "deepreg/dataset/loader/interface.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DeepRegNet-DeepReg/deepreg/dataset/loader/interface.py",
    "file_hunks_size": 17,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "deepreg/dataset/loader/interface.py:522:31 Invalid type [31]: Expression `(int, tuple)` is not a valid type.",
    "message": " Expression `(int, tuple)` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 522,
    "warning_line": "    def get_data(self, index: (int, tuple)):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from abc import ABC\nfrom typing import Dict, List, Optional, Union\n\n",
        "source_code_len": 68,
        "target_code": "from abc import ABC\nfrom typing import Dict, List, Optional, Tuple, Union\n\n",
        "target_code_len": 75,
        "diff_format": "@@ -5,3 +5,3 @@\n from abc import ABC\n-from typing import Dict, List, Optional, Union\n+from typing import Dict, List, Optional, Tuple, Union\n \n",
        "source_code_with_indent": "from abc import ABC\nfrom typing import Dict, List, Optional, Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from abc import ABC\nfrom typing import Dict, List, Optional, Tuple, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def get_data(self, index: (int, tuple)):\n        \"\"\"\n",
        "source_code_len": 58,
        "target_code": "\n    def get_data(self, index: Union[int, Tuple[int, ...]]) -> np.ndarray:\n        \"\"\"\n",
        "target_code_len": 87,
        "diff_format": "@@ -521,3 +521,3 @@\n \n-    def get_data(self, index: (int, tuple)):\n+    def get_data(self, index: Union[int, Tuple[int, ...]]) -> np.ndarray:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def get_data(self, index: (int, tuple)):\n        <IND>",
        "target_code_with_indent": "\n    <DED>def get_data(self, index: Union[int, Tuple[int, ...]]) -> np.ndarray:\n        <IND>"
      }
    ]
  },
  {
    "project": "DeepRegNet/DeepReg",
    "commit": "127a704dcc244084852558a2fbf67c180164febc",
    "filename": "deepreg/dataset/loader/nifti_loader.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DeepRegNet-DeepReg/deepreg/dataset/loader/nifti_loader.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "deepreg/dataset/loader/nifti_loader.py:110:31 Invalid type [31]: Expression `(int, tuple)` is not a valid type.",
    "message": " Expression `(int, tuple)` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 110,
    "warning_line": "    def get_data(self, index: (int, tuple)) -> np.ndarray:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import os\nfrom typing import List\n\n",
        "source_code_len": 35,
        "target_code": "import os\nfrom typing import List, Tuple, Union\n\n",
        "target_code_len": 49,
        "diff_format": "@@ -1,3 +1,3 @@\n import os\n-from typing import List\n+from typing import List, Tuple, Union\n \n",
        "source_code_with_indent": "import os\nfrom typing import List\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import os\nfrom typing import List, Tuple, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def get_data(self, index: (int, tuple)) -> np.ndarray:\n        \"\"\"\n",
        "source_code_len": 72,
        "target_code": "\n    def get_data(self, index: Union[int, Tuple[int, ...]]) -> np.ndarray:\n        \"\"\"\n",
        "target_code_len": 87,
        "diff_format": "@@ -109,3 +109,3 @@\n \n-    def get_data(self, index: (int, tuple)) -> np.ndarray:\n+    def get_data(self, index: Union[int, Tuple[int, ...]]) -> np.ndarray:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def get_data(self, index: (int, tuple)) -> np.ndarray:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def get_data(self, index: Union[int, Tuple[int, ...]]) -> np.ndarray:\n        <IND>"
      }
    ]
  },
  {
    "project": "DeepRegNet/DeepReg",
    "commit": "127a704dcc244084852558a2fbf67c180164febc",
    "filename": "deepreg/dataset/loader/paired_loader.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DeepRegNet-DeepReg/deepreg/dataset/loader/paired_loader.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "deepreg/dataset/loader/paired_loader.py:32:29 Invalid type [31]: Expression `(list, tuple)` is not a valid type.",
    "message": " Expression `(list, tuple)` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 32,
    "warning_line": "        moving_image_shape: (list, tuple),",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import random\nfrom typing import List\n\n",
        "source_code_len": 39,
        "target_code": "import random\nfrom typing import List, Tuple, Union\n\n",
        "target_code_len": 53,
        "diff_format": "@@ -6,3 +6,3 @@\n import random\n-from typing import List\n+from typing import List, Tuple, Union\n \n",
        "source_code_with_indent": "import random\nfrom typing import List\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import random\nfrom typing import List, Tuple, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        seed,\n        moving_image_shape: (list, tuple),\n        fixed_image_shape: (list, tuple),\n    ):\n",
        "source_code_len": 106,
        "target_code": "        seed,\n        moving_image_shape: Union[Tuple[int, ...], List[int]],\n        fixed_image_shape: Union[Tuple[int, ...], List[int]],\n    ):\n",
        "target_code_len": 146,
        "diff_format": "@@ -31,4 +31,4 @@\n         seed,\n-        moving_image_shape: (list, tuple),\n-        fixed_image_shape: (list, tuple),\n+        moving_image_shape: Union[Tuple[int, ...], List[int]],\n+        fixed_image_shape: Union[Tuple[int, ...], List[int]],\n     ):\n",
        "source_code_with_indent": "        seed,\n        moving_image_shape: (list, tuple),\n        fixed_image_shape: (list, tuple),\n    ):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        seed,\n        moving_image_shape: Union[Tuple[int, ...], List[int]],\n        fixed_image_shape: Union[Tuple[int, ...], List[int]],\n    ):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "DeepRegNet/DeepReg",
    "commit": "127a704dcc244084852558a2fbf67c180164febc",
    "filename": "deepreg/dataset/loader/paired_loader.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DeepRegNet-DeepReg/deepreg/dataset/loader/paired_loader.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "deepreg/dataset/loader/paired_loader.py:33:28 Invalid type [31]: Expression `(list, tuple)` is not a valid type.",
    "message": " Expression `(list, tuple)` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 33,
    "warning_line": "        fixed_image_shape: (list, tuple),",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import random\nfrom typing import List\n\n",
        "source_code_len": 39,
        "target_code": "import random\nfrom typing import List, Tuple, Union\n\n",
        "target_code_len": 53,
        "diff_format": "@@ -6,3 +6,3 @@\n import random\n-from typing import List\n+from typing import List, Tuple, Union\n \n",
        "source_code_with_indent": "import random\nfrom typing import List\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import random\nfrom typing import List, Tuple, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        seed,\n        moving_image_shape: (list, tuple),\n        fixed_image_shape: (list, tuple),\n    ):\n",
        "source_code_len": 106,
        "target_code": "        seed,\n        moving_image_shape: Union[Tuple[int, ...], List[int]],\n        fixed_image_shape: Union[Tuple[int, ...], List[int]],\n    ):\n",
        "target_code_len": 146,
        "diff_format": "@@ -31,4 +31,4 @@\n         seed,\n-        moving_image_shape: (list, tuple),\n-        fixed_image_shape: (list, tuple),\n+        moving_image_shape: Union[Tuple[int, ...], List[int]],\n+        fixed_image_shape: Union[Tuple[int, ...], List[int]],\n     ):\n",
        "source_code_with_indent": "        seed,\n        moving_image_shape: (list, tuple),\n        fixed_image_shape: (list, tuple),\n    ):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        seed,\n        moving_image_shape: Union[Tuple[int, ...], List[int]],\n        fixed_image_shape: Union[Tuple[int, ...], List[int]],\n    ):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "DeepRegNet/DeepReg",
    "commit": "127a704dcc244084852558a2fbf67c180164febc",
    "filename": "deepreg/dataset/loader/unpaired_loader.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DeepRegNet-DeepReg/deepreg/dataset/loader/unpaired_loader.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "deepreg/dataset/loader/unpaired_loader.py:33:22 Invalid type [31]: Expression `(list, tuple)` is not a valid type.",
    "message": " Expression `(list, tuple)` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 33,
    "warning_line": "        image_shape: (list, tuple),",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import random\nfrom typing import List\n\n",
        "source_code_len": 39,
        "target_code": "import random\nfrom typing import List, Tuple, Union\n\n",
        "target_code_len": 53,
        "diff_format": "@@ -6,3 +6,3 @@\n import random\n-from typing import List\n+from typing import List, Tuple, Union\n \n",
        "source_code_with_indent": "import random\nfrom typing import List\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import random\nfrom typing import List, Tuple, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        seed: int,\n        image_shape: (list, tuple),\n    ):\n",
        "source_code_len": 62,
        "target_code": "        seed: int,\n        image_shape: Union[Tuple[int, ...], List[int]],\n    ):\n",
        "target_code_len": 82,
        "diff_format": "@@ -32,3 +32,3 @@\n         seed: int,\n-        image_shape: (list, tuple),\n+        image_shape: Union[Tuple[int, ...], List[int]],\n     ):\n",
        "source_code_with_indent": "        seed: int,\n        image_shape: (list, tuple),\n    ):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        seed: int,\n        image_shape: Union[Tuple[int, ...], List[int]],\n    ):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "DeepRegNet/DeepReg",
    "commit": "127a704dcc244084852558a2fbf67c180164febc",
    "filename": "deepreg/dataset/preprocess.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DeepRegNet-DeepReg/deepreg/dataset/preprocess.py",
    "file_hunks_size": 13,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "deepreg/dataset/preprocess.py:43:50 Incompatible parameter type [6]: Expected `typing.Union[typing.List[int], typing.Tuple[int, int, int]]` for 1st parameter `grid_size` to call `get_reference_grid` but got `typing.Tuple[typing.Any, ...]`.",
    "message": " Expected `typing.Union[typing.List[int], typing.Tuple[int, int, int]]` for 1st parameter `grid_size` to call `get_reference_grid` but got `typing.Tuple[typing.Any, ...]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 43,
    "warning_line": "        self.moving_grid_ref = get_reference_grid(grid_size=moving_image_size)"
  },
  {
    "project": "DeepRegNet/DeepReg",
    "commit": "127a704dcc244084852558a2fbf67c180164febc",
    "filename": "deepreg/dataset/preprocess.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DeepRegNet-DeepReg/deepreg/dataset/preprocess.py",
    "file_hunks_size": 13,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "deepreg/dataset/preprocess.py:44:49 Incompatible parameter type [6]: Expected `typing.Union[typing.List[int], typing.Tuple[int, int, int]]` for 1st parameter `grid_size` to call `get_reference_grid` but got `typing.Tuple[typing.Any, ...]`.",
    "message": " Expected `typing.Union[typing.List[int], typing.Tuple[int, int, int]]` for 1st parameter `grid_size` to call `get_reference_grid` but got `typing.Tuple[typing.Any, ...]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 44,
    "warning_line": "        self.fixed_grid_ref = get_reference_grid(grid_size=fixed_image_size)"
  },
  {
    "project": "DeepRegNet/DeepReg",
    "commit": "127a704dcc244084852558a2fbf67c180164febc",
    "filename": "deepreg/dataset/preprocess.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DeepRegNet-DeepReg/deepreg/dataset/preprocess.py",
    "file_hunks_size": 13,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "deepreg/dataset/preprocess.py:47:39 Invalid type [31]: Expression `(tensorflow.Tensor, tensorflow.Tensor)` is not a valid type.",
    "message": " Expression `(tensorflow.Tensor, tensorflow.Tensor)` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 47,
    "warning_line": "    def gen_transform_params(self) -> (tf.Tensor, tf.Tensor):"
  },
  {
    "project": "DeepRegNet/DeepReg",
    "commit": "127a704dcc244084852558a2fbf67c180164febc",
    "filename": "deepreg/dataset/preprocess.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DeepRegNet-DeepReg/deepreg/dataset/preprocess.py",
    "file_hunks_size": 13,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "deepreg/dataset/preprocess.py:161:39 Invalid type [31]: Expression `(tensorflow.Tensor, tensorflow.Tensor)` is not a valid type.",
    "message": " Expression `(tensorflow.Tensor, tensorflow.Tensor)` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 161,
    "warning_line": "    def gen_transform_params(self) -> (tf.Tensor, tf.Tensor):"
  },
  {
    "project": "DeepRegNet/DeepReg",
    "commit": "127a704dcc244084852558a2fbf67c180164febc",
    "filename": "deepreg/dataset/preprocess.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DeepRegNet-DeepReg/deepreg/dataset/preprocess.py",
    "file_hunks_size": 13,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "deepreg/dataset/preprocess.py:241:39 Invalid type [31]: Expression `(tensorflow.Tensor, tensorflow.Tensor)` is not a valid type.",
    "message": " Expression `(tensorflow.Tensor, tensorflow.Tensor)` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 241,
    "warning_line": "    def gen_transform_params(self) -> (tf.Tensor, tf.Tensor):"
  },
  {
    "project": "DeepRegNet/DeepReg",
    "commit": "127a704dcc244084852558a2fbf67c180164febc",
    "filename": "deepreg/dataset/preprocess.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DeepRegNet-DeepReg/deepreg/dataset/preprocess.py",
    "file_hunks_size": 13,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "deepreg/dataset/preprocess.py:253:67 Incompatible parameter type [6]: Expected `int` for 2nd positional only parameter to call `gen_rand_ddf` but got `typing.Union[tuple[typing.Any], int]`.",
    "message": " Expected `int` for 2nd positional only parameter to call `gen_rand_ddf` but got `typing.Union[tuple[typing.Any], int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 253,
    "warning_line": "        moving = gen_rand_ddf(image_size=self.moving_image_size, **kwargs)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"\"\"\n        kwargs = dict(\n            batch_size=self.batch_size,\n",
        "source_code_len": 75,
        "target_code": "        \"\"\"\n        moving = gen_rand_ddf(\n            image_size=self.moving_image_size,\n            batch_size=self.batch_size,\n",
        "target_code_len": 130,
        "diff_format": "@@ -247,3 +247,4 @@\n         \"\"\"\n-        kwargs = dict(\n+        moving = gen_rand_ddf(\n+            image_size=self.moving_image_size,\n             batch_size=self.batch_size,\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n        kwargs = dict(\n            batch_size=self.batch_size,\n",
        "target_code_with_indent": "\n        moving = gen_rand_ddf(\n            image_size=self.moving_image_size,\n            batch_size=self.batch_size,\n"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        )\n        moving = gen_rand_ddf(image_size=self.moving_image_size, **kwargs)\n        fixed = gen_rand_ddf(image_size=self.fixed_image_size, **kwargs)\n        return moving, fixed\n",
        "source_code_len": 187,
        "target_code": "        )\n        fixed = gen_rand_ddf(\n            image_size=self.fixed_image_size,\n            batch_size=self.batch_size,\n            field_strength=self.field_strength,\n            low_res_size=self.low_res_size,\n        )\n        return moving, fixed\n",
        "target_code_len": 257,
        "diff_format": "@@ -252,4 +253,8 @@\n         )\n-        moving = gen_rand_ddf(image_size=self.moving_image_size, **kwargs)\n-        fixed = gen_rand_ddf(image_size=self.fixed_image_size, **kwargs)\n+        fixed = gen_rand_ddf(\n+            image_size=self.fixed_image_size,\n+            batch_size=self.batch_size,\n+            field_strength=self.field_strength,\n+            low_res_size=self.low_res_size,\n+        )\n         return moving, fixed\n",
        "source_code_with_indent": "        )\n        moving = gen_rand_ddf(image_size=self.moving_image_size, **kwargs)\n        fixed = gen_rand_ddf(image_size=self.fixed_image_size, **kwargs)\n        return moving, fixed\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        )\n        fixed = gen_rand_ddf(\n            image_size=self.fixed_image_size,\n            batch_size=self.batch_size,\n            field_strength=self.field_strength,\n            low_res_size=self.low_res_size,\n        )\n        return moving, fixed\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "DeepRegNet/DeepReg",
    "commit": "127a704dcc244084852558a2fbf67c180164febc",
    "filename": "deepreg/dataset/preprocess.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DeepRegNet-DeepReg/deepreg/dataset/preprocess.py",
    "file_hunks_size": 13,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "deepreg/dataset/preprocess.py:254:65 Incompatible parameter type [6]: Expected `int` for 2nd positional only parameter to call `gen_rand_ddf` but got `typing.Union[tuple[typing.Any], int]`.",
    "message": " Expected `int` for 2nd positional only parameter to call `gen_rand_ddf` but got `typing.Union[tuple[typing.Any], int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 254,
    "warning_line": "        fixed = gen_rand_ddf(image_size=self.fixed_image_size, **kwargs)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"\"\"\n        kwargs = dict(\n            batch_size=self.batch_size,\n",
        "source_code_len": 75,
        "target_code": "        \"\"\"\n        moving = gen_rand_ddf(\n            image_size=self.moving_image_size,\n            batch_size=self.batch_size,\n",
        "target_code_len": 130,
        "diff_format": "@@ -247,3 +247,4 @@\n         \"\"\"\n-        kwargs = dict(\n+        moving = gen_rand_ddf(\n+            image_size=self.moving_image_size,\n             batch_size=self.batch_size,\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n        kwargs = dict(\n            batch_size=self.batch_size,\n",
        "target_code_with_indent": "\n        moving = gen_rand_ddf(\n            image_size=self.moving_image_size,\n            batch_size=self.batch_size,\n"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        )\n        moving = gen_rand_ddf(image_size=self.moving_image_size, **kwargs)\n        fixed = gen_rand_ddf(image_size=self.fixed_image_size, **kwargs)\n        return moving, fixed\n",
        "source_code_len": 187,
        "target_code": "        )\n        fixed = gen_rand_ddf(\n            image_size=self.fixed_image_size,\n            batch_size=self.batch_size,\n            field_strength=self.field_strength,\n            low_res_size=self.low_res_size,\n        )\n        return moving, fixed\n",
        "target_code_len": 257,
        "diff_format": "@@ -252,4 +253,8 @@\n         )\n-        moving = gen_rand_ddf(image_size=self.moving_image_size, **kwargs)\n-        fixed = gen_rand_ddf(image_size=self.fixed_image_size, **kwargs)\n+        fixed = gen_rand_ddf(\n+            image_size=self.fixed_image_size,\n+            batch_size=self.batch_size,\n+            field_strength=self.field_strength,\n+            low_res_size=self.low_res_size,\n+        )\n         return moving, fixed\n",
        "source_code_with_indent": "        )\n        moving = gen_rand_ddf(image_size=self.moving_image_size, **kwargs)\n        fixed = gen_rand_ddf(image_size=self.fixed_image_size, **kwargs)\n        return moving, fixed\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        )\n        fixed = gen_rand_ddf(\n            image_size=self.fixed_image_size,\n            batch_size=self.batch_size,\n            field_strength=self.field_strength,\n            low_res_size=self.low_res_size,\n        )\n        return moving, fixed\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "DeepRegNet/DeepReg",
    "commit": "127a704dcc244084852558a2fbf67c180164febc",
    "filename": "deepreg/dataset/preprocess.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DeepRegNet-DeepReg/deepreg/dataset/preprocess.py",
    "file_hunks_size": 13,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "deepreg/dataset/preprocess.py:330:42 Invalid type [31]: Expression `(int, None)` is not a valid type.",
    "message": " Expression `(int, None)` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 330,
    "warning_line": "    batch_size: int, scale: float, seed: (int, None) = None"
  },
  {
    "project": "DeepRegNet/DeepReg",
    "commit": "127a704dcc244084852558a2fbf67c180164febc",
    "filename": "deepreg/dataset/preprocess.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DeepRegNet-DeepReg/deepreg/dataset/preprocess.py",
    "file_hunks_size": 13,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "deepreg/dataset/preprocess.py:459:21 Invalid type [31]: Expression `(tuple, list)` is not a valid type.",
    "message": " Expression `(tuple, list)` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 459,
    "warning_line": "    field_strength: (tuple, list),"
  },
  {
    "project": "DeepRegNet/DeepReg",
    "commit": "127a704dcc244084852558a2fbf67c180164febc",
    "filename": "deepreg/dataset/preprocess.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DeepRegNet-DeepReg/deepreg/dataset/preprocess.py",
    "file_hunks_size": 13,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "deepreg/dataset/preprocess.py:460:19 Invalid type [31]: Expression `(tuple, list)` is not a valid type.",
    "message": " Expression `(tuple, list)` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 460,
    "warning_line": "    low_res_size: (tuple, list),"
  },
  {
    "project": "DeepRegNet/DeepReg",
    "commit": "127a704dcc244084852558a2fbf67c180164febc",
    "filename": "deepreg/dataset/preprocess.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DeepRegNet-DeepReg/deepreg/dataset/preprocess.py",
    "file_hunks_size": 13,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "deepreg/dataset/preprocess.py:461:11 Invalid type [31]: Expression `(int, None)` is not a valid type.",
    "message": " Expression `(int, None)` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 461,
    "warning_line": "    seed: (int, None) = None,"
  },
  {
    "project": "DeepRegNet/DeepReg",
    "commit": "127a704dcc244084852558a2fbf67c180164febc",
    "filename": "deepreg/model/backbone/global_net.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DeepRegNet-DeepReg/deepreg/model/backbone/global_net.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "deepreg/model/backbone/global_net.py:27:60 Incompatible parameter type [6]: Expected `Union[List[int], Tuple[int, int, int]]` for 1st positional only parameter to call `layer_util.get_reference_grid` but got `typing.Tuple[typing.Any, ...]`.",
    "message": " Expected `Union[List[int], Tuple[int, int, int]]` for 1st positional only parameter to call `layer_util.get_reference_grid` but got `typing.Tuple[typing.Any, ...]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 27,
    "warning_line": "        self.reference_grid = layer_util.get_reference_grid(image_size)"
  },
  {
    "project": "DeepRegNet/DeepReg",
    "commit": "127a704dcc244084852558a2fbf67c180164febc",
    "filename": "deepreg/model/backbone/global_net.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DeepRegNet-DeepReg/deepreg/model/backbone/global_net.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "deepreg/model/backbone/global_net.py:120:4 Inconsistent override [14]: `deepreg.model.backbone.global_net.GlobalNet.build_output_block` overrides method defined in `UNet` inconsistently. Could not find parameter `extract_levels` in overriding signature.",
    "message": " `deepreg.model.backbone.global_net.GlobalNet.build_output_block` overrides method defined in `UNet` inconsistently. Could not find parameter `extract_levels` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 120,
    "warning_line": "    def build_output_block("
  },
  {
    "project": "DeepRegNet/DeepReg",
    "commit": "127a704dcc244084852558a2fbf67c180164febc",
    "filename": "deepreg/model/backbone/global_net.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DeepRegNet-DeepReg/deepreg/model/backbone/global_net.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "deepreg/model/backbone/global_net.py:120:4 Inconsistent override [14]: `deepreg.model.backbone.global_net.GlobalNet.build_output_block` overrides method defined in `UNet` inconsistently. Could not find parameter `out_activation` in overriding signature.",
    "message": " `deepreg.model.backbone.global_net.GlobalNet.build_output_block` overrides method defined in `UNet` inconsistently. Could not find parameter `out_activation` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 120,
    "warning_line": "    def build_output_block("
  },
  {
    "project": "DeepRegNet/DeepReg",
    "commit": "127a704dcc244084852558a2fbf67c180164febc",
    "filename": "deepreg/model/backbone/global_net.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DeepRegNet-DeepReg/deepreg/model/backbone/global_net.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "deepreg/model/backbone/global_net.py:120:4 Inconsistent override [14]: `deepreg.model.backbone.global_net.GlobalNet.build_output_block` overrides method defined in `UNet` inconsistently. Could not find parameter `out_channels` in overriding signature.",
    "message": " `deepreg.model.backbone.global_net.GlobalNet.build_output_block` overrides method defined in `UNet` inconsistently. Could not find parameter `out_channels` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 120,
    "warning_line": "    def build_output_block("
  },
  {
    "project": "DeepRegNet/DeepReg",
    "commit": "127a704dcc244084852558a2fbf67c180164febc",
    "filename": "deepreg/model/backbone/global_net.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DeepRegNet-DeepReg/deepreg/model/backbone/global_net.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "deepreg/model/backbone/global_net.py:120:4 Inconsistent override [14]: `deepreg.model.backbone.global_net.GlobalNet.build_output_block` overrides method defined in `UNet` inconsistently. Could not find parameter `out_kernel_initializer` in overriding signature.",
    "message": " `deepreg.model.backbone.global_net.GlobalNet.build_output_block` overrides method defined in `UNet` inconsistently. Could not find parameter `out_kernel_initializer` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 120,
    "warning_line": "    def build_output_block("
  },
  {
    "project": "DeepRegNet/DeepReg",
    "commit": "127a704dcc244084852558a2fbf67c180164febc",
    "filename": "deepreg/model/backbone/u_net.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DeepRegNet-DeepReg/deepreg/model/backbone/u_net.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "deepreg/model/backbone/u_net.py:76:12 Incompatible parameter type [6]: Expected `int` for 3rd parameter `num_channel_initial` to call `Backbone.__init__` but got `Optional[int]`.",
    "message": " Expected `int` for 3rd parameter `num_channel_initial` to call `Backbone.__init__` but got `Optional[int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 76,
    "warning_line": "            num_channel_initial=num_channel_initial,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        image_size: tuple,\n        num_channel_initial: Optional[int],\n        depth: int,\n",
        "source_code_len": 91,
        "target_code": "        image_size: tuple,\n        num_channel_initial: int,\n        depth: int,\n",
        "target_code_len": 81,
        "diff_format": "@@ -30,3 +30,3 @@\n         image_size: tuple,\n-        num_channel_initial: Optional[int],\n+        num_channel_initial: int,\n         depth: int,\n",
        "source_code_with_indent": "        image_size: tuple,\n        num_channel_initial: Optional[int],\n        depth: int,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        image_size: tuple,\n        num_channel_initial: int,\n        depth: int,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "DeepRegNet/DeepReg",
    "commit": "127a704dcc244084852558a2fbf67c180164febc",
    "filename": "deepreg/model/backbone/u_net.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DeepRegNet-DeepReg/deepreg/model/backbone/u_net.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "deepreg/model/backbone/u_net.py:110:12 Incompatible parameter type [6]: Expected `int` for 2nd parameter `num_channel_initial` to call `UNet.build_layers` but got `Optional[int]`.",
    "message": " Expected `int` for 2nd parameter `num_channel_initial` to call `UNet.build_layers` but got `Optional[int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 110,
    "warning_line": "            num_channel_initial=num_channel_initial,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        image_size: tuple,\n        num_channel_initial: Optional[int],\n        depth: int,\n",
        "source_code_len": 91,
        "target_code": "        image_size: tuple,\n        num_channel_initial: int,\n        depth: int,\n",
        "target_code_len": 81,
        "diff_format": "@@ -30,3 +30,3 @@\n         image_size: tuple,\n-        num_channel_initial: Optional[int],\n+        num_channel_initial: int,\n         depth: int,\n",
        "source_code_with_indent": "        image_size: tuple,\n        num_channel_initial: Optional[int],\n        depth: int,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        image_size: tuple,\n        num_channel_initial: int,\n        depth: int,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "DeepRegNet/DeepReg",
    "commit": "127a704dcc244084852558a2fbf67c180164febc",
    "filename": "deepreg/model/backbone/u_net.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DeepRegNet-DeepReg/deepreg/model/backbone/u_net.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "deepreg/model/backbone/u_net.py:504:16 Incompatible parameter type [6]: Expected `int` for 2nd parameter `output_padding` to call `UNet.build_up_sampling_block` but got `Union[int, typing.Tuple[int, ...]]`.",
    "message": " Expected `int` for 2nd parameter `output_padding` to call `UNet.build_up_sampling_block` but got `Union[int, typing.Tuple[int, ...]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 504,
    "warning_line": "                output_padding=output_padding,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        filters: int,\n        output_padding: int,\n        kernel_size: int,\n        padding: str,\n        strides: int,\n        output_shape: tuple,\n    ) -> Union[tf.keras.Model, tfkl.Layer]:\n",
        "source_code_len": 194,
        "target_code": "        filters: int,\n        output_padding: Union[Tuple[int, ...], int],\n        kernel_size: Union[Tuple[int, ...], int],\n        padding: str,\n        strides: Union[Tuple[int, ...], int],\n        output_shape: Tuple[int, ...],\n    ) -> Union[tf.keras.Model, tfkl.Layer]:\n",
        "target_code_len": 276,
        "diff_format": "@@ -211,7 +211,7 @@\n         filters: int,\n-        output_padding: int,\n-        kernel_size: int,\n+        output_padding: Union[Tuple[int, ...], int],\n+        kernel_size: Union[Tuple[int, ...], int],\n         padding: str,\n-        strides: int,\n-        output_shape: tuple,\n+        strides: Union[Tuple[int, ...], int],\n+        output_shape: Tuple[int, ...],\n     ) -> Union[tf.keras.Model, tfkl.Layer]:\n",
        "source_code_with_indent": "        filters: int,\n        output_padding: int,\n        kernel_size: int,\n        padding: str,\n        strides: int,\n        output_shape: tuple,\n    ) -> Union[tf.keras.Model, tfkl.Layer]:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        filters: int,\n        output_padding: Union[Tuple[int, ...], int],\n        kernel_size: Union[Tuple[int, ...], int],\n        padding: str,\n        strides: Union[Tuple[int, ...], int],\n        output_shape: Tuple[int, ...],\n    ) -> Union[tf.keras.Model, tfkl.Layer]:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "DeepRegNet/DeepReg",
    "commit": "127a704dcc244084852558a2fbf67c180164febc",
    "filename": "deepreg/model/network.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DeepRegNet-DeepReg/deepreg/model/network.py",
    "file_hunks_size": 10,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "deepreg/model/network.py:215:19 Call error [29]: `object` is not a function.",
    "message": " `object` is not a function.",
    "rule_id": "Call error [29]",
    "warning_line_no": 215,
    "warning_line": "            loss = loss_cls(**inputs_dict) / self.global_batch_size"
  },
  {
    "project": "DeepRegNet/DeepReg",
    "commit": "127a704dcc244084852558a2fbf67c180164febc",
    "filename": "deepreg/model/network.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DeepRegNet-DeepReg/deepreg/model/network.py",
    "file_hunks_size": 10,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "deepreg/model/network.py:253:10 Invalid type [31]: Expression `(tensorflow.Tensor, typing.Dict)` is not a valid type.",
    "message": " Expression `(tensorflow.Tensor, typing.Dict)` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 253,
    "warning_line": "    ) -> (tf.Tensor, Dict):"
  },
  {
    "project": "DeepRegNet/DeepReg",
    "commit": "127a704dcc244084852558a2fbf67c180164febc",
    "filename": "deepreg/model/network.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DeepRegNet-DeepReg/deepreg/model/network.py",
    "file_hunks_size": 10,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "deepreg/model/network.py:360:10 Invalid type [31]: Expression `(tensorflow.Tensor, typing.Dict)` is not a valid type.",
    "message": " Expression `(tensorflow.Tensor, typing.Dict)` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 360,
    "warning_line": "    ) -> (tf.Tensor, Dict):"
  },
  {
    "project": "DeepRegNet/DeepReg",
    "commit": "127a704dcc244084852558a2fbf67c180164febc",
    "filename": "deepreg/model/network.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DeepRegNet-DeepReg/deepreg/model/network.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "deepreg/model/network.py:381:34 Incompatible parameter type [6]: Expected `typing.Tuple[typing.Any, typing_extensions.Literal[True], typing_extensions.Literal[False]]` for 2nd positional only parameter to call `dict.__setitem__` but got `typing.Tuple[typing.Any, None, None]`.",
    "message": " Expected `typing.Tuple[typing.Any, typing_extensions.Literal[True], typing_extensions.Literal[False]]` for 2nd positional only parameter to call `dict.__setitem__` but got `typing.Tuple[typing.Any, None, None]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 381,
    "warning_line": "            processed[\"theta\"] = (outputs[\"theta\"], None, None)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        if \"theta\" in outputs:\n            processed[\"theta\"] = (outputs[\"theta\"], None, None)\n\n",
        "source_code_len": 96,
        "target_code": "        if \"theta\" in outputs:\n            processed[\"theta\"] = (outputs[\"theta\"], None, None)  # type: ignore\n\n",
        "target_code_len": 112,
        "diff_format": "@@ -380,3 +380,3 @@\n         if \"theta\" in outputs:\n-            processed[\"theta\"] = (outputs[\"theta\"], None, None)\n+            processed[\"theta\"] = (outputs[\"theta\"], None, None)  # type: ignore\n \n",
        "source_code_with_indent": "        if \"theta\" in outputs:\n            <IND>processed[\"theta\"] = (outputs[\"theta\"], None, None)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        if \"theta\" in outputs:\n            <IND>processed[\"theta\"] = (outputs[\"theta\"], None, None)  # type: ignore\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "DeepRegNet/DeepReg",
    "commit": "127a704dcc244084852558a2fbf67c180164febc",
    "filename": "deepreg/model/network.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DeepRegNet-DeepReg/deepreg/model/network.py",
    "file_hunks_size": 10,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "deepreg/model/network.py:450:10 Invalid type [31]: Expression `(tensorflow.Tensor, typing.Dict)` is not a valid type.",
    "message": " Expression `(tensorflow.Tensor, typing.Dict)` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 450,
    "warning_line": "    ) -> (tf.Tensor, Dict):"
  },
  {
    "project": "DeepRegNet/DeepReg",
    "commit": "127a704dcc244084852558a2fbf67c180164febc",
    "filename": "deepreg/model/network.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DeepRegNet-DeepReg/deepreg/model/network.py",
    "file_hunks_size": 10,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "deepreg/model/network.py:514:10 Invalid type [31]: Expression `(tensorflow.Tensor, typing.Dict)` is not a valid type.",
    "message": " Expression `(tensorflow.Tensor, typing.Dict)` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 514,
    "warning_line": "    ) -> (tf.Tensor, Dict):"
  },
  {
    "project": "DeepRegNet/DeepReg",
    "commit": "127a704dcc244084852558a2fbf67c180164febc",
    "filename": "deepreg/predict.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DeepRegNet-DeepReg/deepreg/predict.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "deepreg/predict.py:30:61 Invalid type [31]: Expression `(str, str)` is not a valid type.",
    "message": " Expression `(str, str)` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 30,
    "warning_line": "def build_pair_output_path(indices: list, save_dir: str) -> (str, str):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import shutil\n\n",
        "source_code_len": 15,
        "target_code": "import shutil\nfrom typing import Dict, List, Tuple, Union\n\n",
        "target_code_len": 59,
        "diff_format": "@@ -11,2 +11,3 @@\n import shutil\n+from typing import Dict, List, Tuple, Union\n \n",
        "source_code_with_indent": "import shutil\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import shutil\nfrom typing import Dict, List, Tuple, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef build_pair_output_path(indices: list, save_dir: str) -> (str, str):\n    \"\"\"\n",
        "source_code_len": 81,
        "target_code": "\ndef build_pair_output_path(indices: list, save_dir: str) -> Tuple[str, str]:\n    \"\"\"\n",
        "target_code_len": 86,
        "diff_format": "@@ -29,3 +30,3 @@\n \n-def build_pair_output_path(indices: list, save_dir: str) -> (str, str):\n+def build_pair_output_path(indices: list, save_dir: str) -> Tuple[str, str]:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\ndef build_pair_output_path(indices: list, save_dir: str) -> (str, str):\n    <IND>",
        "target_code_with_indent": "\ndef build_pair_output_path(indices: list, save_dir: str) -> Tuple[str, str]:\n    <IND>"
      }
    ]
  },
  {
    "project": "DeepRegNet/DeepReg",
    "commit": "127a704dcc244084852558a2fbf67c180164febc",
    "filename": "deepreg/predict.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DeepRegNet-DeepReg/deepreg/predict.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "deepreg/predict.py:150:18 Invalid type [31]: Expression `(str, list)` is not a valid type.",
    "message": " Expression `(str, list)` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 150,
    "warning_line": "    config_path: (str, list), log_root: str, log_dir: str, ckpt_path: str",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import shutil\n\n",
        "source_code_len": 15,
        "target_code": "import shutil\nfrom typing import Dict, List, Tuple, Union\n\n",
        "target_code_len": 59,
        "diff_format": "@@ -11,2 +11,3 @@\n import shutil\n+from typing import Dict, List, Tuple, Union\n \n",
        "source_code_with_indent": "import shutil\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import shutil\nfrom typing import Dict, List, Tuple, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def build_config(\n    config_path: (str, list), log_root: str, log_dir: str, ckpt_path: str\n) -> [dict, str]:\n    \"\"\"\n",
        "source_code_len": 118,
        "target_code": "def build_config(\n    config_path: Union[str, List[str]], log_root: str, log_dir: str, ckpt_path: str\n) -> Tuple[Dict, str, str]:\n    \"\"\"\n",
        "target_code_len": 138,
        "diff_format": "@@ -149,4 +150,4 @@\n def build_config(\n-    config_path: (str, list), log_root: str, log_dir: str, ckpt_path: str\n-) -> [dict, str]:\n+    config_path: Union[str, List[str]], log_root: str, log_dir: str, ckpt_path: str\n+) -> Tuple[Dict, str, str]:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "<DED>def build_config(\n    config_path: (str, list), log_root: str, log_dir: str, ckpt_path: str\n) -> [dict, str]:\n    <IND>",
        "target_code_with_indent": "<DED>def build_config(\n    config_path: Union[str, List[str]], log_root: str, log_dir: str, ckpt_path: str\n) -> Tuple[Dict, str, str]:\n    <IND>"
      }
    ]
  },
  {
    "project": "DeepRegNet/DeepReg",
    "commit": "127a704dcc244084852558a2fbf67c180164febc",
    "filename": "deepreg/predict.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DeepRegNet-DeepReg/deepreg/predict.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "deepreg/predict.py:151:5 Invalid type [31]: Expression `[dict, str]` is not a valid type.",
    "message": " Expression `[dict, str]` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 151,
    "warning_line": ") -> [dict, str]:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import shutil\n\n",
        "source_code_len": 15,
        "target_code": "import shutil\nfrom typing import Dict, List, Tuple, Union\n\n",
        "target_code_len": 59,
        "diff_format": "@@ -11,2 +11,3 @@\n import shutil\n+from typing import Dict, List, Tuple, Union\n \n",
        "source_code_with_indent": "import shutil\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import shutil\nfrom typing import Dict, List, Tuple, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def build_config(\n    config_path: (str, list), log_root: str, log_dir: str, ckpt_path: str\n) -> [dict, str]:\n    \"\"\"\n",
        "source_code_len": 118,
        "target_code": "def build_config(\n    config_path: Union[str, List[str]], log_root: str, log_dir: str, ckpt_path: str\n) -> Tuple[Dict, str, str]:\n    \"\"\"\n",
        "target_code_len": 138,
        "diff_format": "@@ -149,4 +150,4 @@\n def build_config(\n-    config_path: (str, list), log_root: str, log_dir: str, ckpt_path: str\n-) -> [dict, str]:\n+    config_path: Union[str, List[str]], log_root: str, log_dir: str, ckpt_path: str\n+) -> Tuple[Dict, str, str]:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "<DED>def build_config(\n    config_path: (str, list), log_root: str, log_dir: str, ckpt_path: str\n) -> [dict, str]:\n    <IND>",
        "target_code_with_indent": "<DED>def build_config(\n    config_path: Union[str, List[str]], log_root: str, log_dir: str, ckpt_path: str\n) -> Tuple[Dict, str, str]:\n    <IND>"
      }
    ]
  },
  {
    "project": "DeepRegNet/DeepReg",
    "commit": "127a704dcc244084852558a2fbf67c180164febc",
    "filename": "deepreg/predict.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DeepRegNet-DeepReg/deepreg/predict.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "deepreg/predict.py:193:18 Invalid type [31]: Expression `(str, list)` is not a valid type.",
    "message": " Expression `(str, list)` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 193,
    "warning_line": "    config_path: (str, list),",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import shutil\n\n",
        "source_code_len": 15,
        "target_code": "import shutil\nfrom typing import Dict, List, Tuple, Union\n\n",
        "target_code_len": 59,
        "diff_format": "@@ -11,2 +11,3 @@\n import shutil\n+from typing import Dict, List, Tuple, Union\n \n",
        "source_code_with_indent": "import shutil\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import shutil\nfrom typing import Dict, List, Tuple, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    sample_label: str,\n    config_path: (str, list),\n    save_nifti: bool = True,\n",
        "source_code_len": 82,
        "target_code": "    sample_label: str,\n    config_path: Union[str, List[str]],\n    save_nifti: bool = True,\n",
        "target_code_len": 92,
        "diff_format": "@@ -192,3 +193,3 @@\n     sample_label: str,\n-    config_path: (str, list),\n+    config_path: Union[str, List[str]],\n     save_nifti: bool = True,\n",
        "source_code_with_indent": "    sample_label: str,\n    config_path: (str, list),\n    save_nifti: bool = True,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    sample_label: str,\n    config_path: Union[str, List[str]],\n    save_nifti: bool = True,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "DeepRegNet/DeepReg",
    "commit": "127a704dcc244084852558a2fbf67c180164febc",
    "filename": "deepreg/train.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DeepRegNet-DeepReg/deepreg/train.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "deepreg/train.py:20:18 Invalid type [31]: Expression `(str, list)` is not a valid type.",
    "message": " Expression `(str, list)` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 20,
    "warning_line": "    config_path: (str, list),",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import os\n\n",
        "source_code_len": 11,
        "target_code": "import os\nfrom typing import Dict, List, Tuple, Union\n\n",
        "target_code_len": 55,
        "diff_format": "@@ -8,2 +8,3 @@\n import os\n+from typing import Dict, List, Tuple, Union\n \n",
        "source_code_with_indent": "import os\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import os\nfrom typing import Dict, List, Tuple, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def build_config(\n    config_path: (str, list),\n    log_root: str,\n",
        "source_code_len": 67,
        "target_code": "def build_config(\n    config_path: Union[str, List[str]],\n    log_root: str,\n",
        "target_code_len": 77,
        "diff_format": "@@ -19,3 +20,3 @@\n def build_config(\n-    config_path: (str, list),\n+    config_path: Union[str, List[str]],\n     log_root: str,\n",
        "source_code_with_indent": "def build_config(\n    config_path: (str, list),\n    log_root: str,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "def build_config(\n    config_path: Union[str, List[str]],\n    log_root: str,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "DeepRegNet/DeepReg",
    "commit": "127a704dcc244084852558a2fbf67c180164febc",
    "filename": "deepreg/train.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DeepRegNet-DeepReg/deepreg/train.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "deepreg/train.py:25:5 Invalid type [31]: Expression `[dict, str]` is not a valid type.",
    "message": " Expression `[dict, str]` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 25,
    "warning_line": ") -> [dict, str]:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import os\n\n",
        "source_code_len": 11,
        "target_code": "import os\nfrom typing import Dict, List, Tuple, Union\n\n",
        "target_code_len": 55,
        "diff_format": "@@ -8,2 +8,3 @@\n import os\n+from typing import Dict, List, Tuple, Union\n \n",
        "source_code_with_indent": "import os\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import os\nfrom typing import Dict, List, Tuple, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    max_epochs: int = -1,\n) -> [dict, str]:\n    \"\"\"\n",
        "source_code_len": 52,
        "target_code": "    max_epochs: int = -1,\n) -> Tuple[Dict, str, str]:\n    \"\"\"\n",
        "target_code_len": 62,
        "diff_format": "@@ -24,3 +25,3 @@\n     max_epochs: int = -1,\n-) -> [dict, str]:\n+) -> Tuple[Dict, str, str]:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "    max_epochs: int = -1,\n) -> [dict, str]:\n    <IND>",
        "target_code_with_indent": "    max_epochs: int = -1,\n) -> Tuple[Dict, str, str]:\n    <IND>"
      }
    ]
  },
  {
    "project": "DeepRegNet/DeepReg",
    "commit": "127a704dcc244084852558a2fbf67c180164febc",
    "filename": "deepreg/train.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DeepRegNet-DeepReg/deepreg/train.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "deepreg/train.py:66:18 Invalid type [31]: Expression `(str, list)` is not a valid type.",
    "message": " Expression `(str, list)` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 66,
    "warning_line": "    config_path: (str, list),",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import os\n\n",
        "source_code_len": 11,
        "target_code": "import os\nfrom typing import Dict, List, Tuple, Union\n\n",
        "target_code_len": 55,
        "diff_format": "@@ -8,2 +8,3 @@\n import os\n+from typing import Dict, List, Tuple, Union\n \n",
        "source_code_with_indent": "import os\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import os\nfrom typing import Dict, List, Tuple, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    gpu: str,\n    config_path: (str, list),\n    gpu_allow_growth: bool,\n",
        "source_code_len": 72,
        "target_code": "    gpu: str,\n    config_path: Union[str, List[str]],\n    gpu_allow_growth: bool,\n",
        "target_code_len": 82,
        "diff_format": "@@ -65,3 +66,3 @@\n     gpu: str,\n-    config_path: (str, list),\n+    config_path: Union[str, List[str]],\n     gpu_allow_growth: bool,\n",
        "source_code_with_indent": "    gpu: str,\n    config_path: (str, list),\n    gpu_allow_growth: bool,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    gpu: str,\n    config_path: Union[str, List[str]],\n    gpu_allow_growth: bool,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "DeepRegNet/DeepReg",
    "commit": "127a704dcc244084852558a2fbf67c180164febc",
    "filename": "deepreg/util.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DeepRegNet-DeepReg/deepreg/util.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "deepreg/util.py:24:5 Invalid type [31]: Expression `[(deepreg.dataset.loader.interface.DataLoader, None), (tensorflow.data.Dataset, None), (int, None)]` is not a valid type.",
    "message": " Expression `[(deepreg.dataset.loader.interface.DataLoader, None), (tensorflow.data.Dataset, None), (int, None)]` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 24,
    "warning_line": ") -> [(DataLoader, None), (tf.data.Dataset, None), (int, None)]:"
  },
  {
    "project": "DeepRegNet/DeepReg",
    "commit": "127a704dcc244084852558a2fbf67c180164febc",
    "filename": "deepreg/util.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DeepRegNet-DeepReg/deepreg/util.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "deepreg/util.py:72:10 Invalid type [31]: Expression `(numpy.ndarray, tensorflow.Tensor)` is not a valid type.",
    "message": " Expression `(numpy.ndarray, tensorflow.Tensor)` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 72,
    "warning_line": "    arr: (np.ndarray, tf.Tensor),"
  },
  {
    "project": "DeepRegNet/DeepReg",
    "commit": "127a704dcc244084852558a2fbf67c180164febc",
    "filename": "deepreg/util.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DeepRegNet-DeepReg/deepreg/util.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "deepreg/util.py:140:18 Invalid type [31]: Expression `(tensorflow.Tensor, None)` is not a valid type.",
    "message": " Expression `(tensorflow.Tensor, None)` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 140,
    "warning_line": "    fixed_label: (tf.Tensor, None),"
  },
  {
    "project": "DeepRegNet/DeepReg",
    "commit": "127a704dcc244084852558a2fbf67c180164febc",
    "filename": "deepreg/util.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DeepRegNet-DeepReg/deepreg/util.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "deepreg/util.py:141:23 Invalid type [31]: Expression `(tensorflow.Tensor, None)` is not a valid type.",
    "message": " Expression `(tensorflow.Tensor, None)` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 141,
    "warning_line": "    pred_fixed_image: (tf.Tensor, None),"
  },
  {
    "project": "DeepRegNet/DeepReg",
    "commit": "127a704dcc244084852558a2fbf67c180164febc",
    "filename": "deepreg/util.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DeepRegNet-DeepReg/deepreg/util.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "deepreg/util.py:142:23 Invalid type [31]: Expression `(tensorflow.Tensor, None)` is not a valid type.",
    "message": " Expression `(tensorflow.Tensor, None)` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 142,
    "warning_line": "    pred_fixed_label: (tf.Tensor, None),"
  },
  {
    "project": "DeepRegNet/DeepReg",
    "commit": "127a704dcc244084852558a2fbf67c180164febc",
    "filename": "demos/classical_ct_headneck_affine/demo_register.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DeepRegNet-DeepReg/demos/classical_ct_headneck_affine/demo_register.py",
    "file_hunks_size": 1,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "demos/classical_ct_headneck_affine/demo_register.py:92:15 Call error [29]: `object` is not a function.",
    "message": " `object` is not a function.",
    "rule_id": "Call error [29]",
    "warning_line_no": 92,
    "warning_line": "        loss = REGISTRY.build_loss(config=image_loss_config)("
  },
  {
    "project": "DeepRegNet/DeepReg",
    "commit": "127a704dcc244084852558a2fbf67c180164febc",
    "filename": "demos/classical_mr_prostate_nonrigid/demo_register.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DeepRegNet-DeepReg/demos/classical_mr_prostate_nonrigid/demo_register.py",
    "file_hunks_size": 1,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "demos/classical_mr_prostate_nonrigid/demo_register.py:79:21 Call error [29]: `object` is not a function.",
    "message": " `object` is not a function.",
    "rule_id": "Call error [29]",
    "warning_line_no": 79,
    "warning_line": "        loss_image = REGISTRY.build_loss(config=image_loss_config)("
  },
  {
    "project": "DeepRegNet/DeepReg",
    "commit": "127a704dcc244084852558a2fbf67c180164febc",
    "filename": "demos/classical_mr_prostate_nonrigid/demo_register.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DeepRegNet-DeepReg/demos/classical_mr_prostate_nonrigid/demo_register.py",
    "file_hunks_size": 1,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "demos/classical_mr_prostate_nonrigid/demo_register.py:83:22 Call error [29]: `object` is not a function.",
    "message": " `object` is not a function.",
    "rule_id": "Call error [29]",
    "warning_line_no": 83,
    "warning_line": "        loss_deform = REGISTRY.build_loss(config=deform_loss_config)("
  },
  {
    "project": "DeepRegNet/DeepReg",
    "commit": "127a704dcc244084852558a2fbf67c180164febc",
    "filename": "test/unit/test_config_v011.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DeepRegNet-DeepReg/test/unit/test_config_v011.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "test/unit/test_config_v011.py:171:45 Incompatible parameter type [6]: Expected `typing.Union[typing.Dict[str, typing.Union[typing.List[int], str]], typing.Dict[str, str], str]` for 2nd positional only parameter to call `dict.__setitem__` but got `float`.",
    "message": " Expected `typing.Union[typing.Dict[str, typing.Union[typing.List[int], str]], typing.Dict[str, str], str]` for 2nd positional only parameter to call `dict.__setitem__` but got `float`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 171,
    "warning_line": "            loss_config[\"label\"][\"weight\"] = 2.0",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        if name_loss == \"multi_scale\":\n            loss_config[\"label\"][\"weight\"] = 2.0\n\n",
        "source_code_len": 89,
        "target_code": "        if name_loss == \"multi_scale\":\n            loss_config[\"label\"][\"weight\"] = 2.0  # type: ignore\n\n",
        "target_code_len": 105,
        "diff_format": "@@ -170,3 +170,3 @@\n         if name_loss == \"multi_scale\":\n-            loss_config[\"label\"][\"weight\"] = 2.0\n+            loss_config[\"label\"][\"weight\"] = 2.0  # type: ignore\n \n",
        "source_code_with_indent": "        if name_loss == \"multi_scale\":\n            <IND>loss_config[\"label\"][\"weight\"] = 2.0\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        if name_loss == \"multi_scale\":\n            <IND>loss_config[\"label\"][\"weight\"] = 2.0  # type: ignore\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "DeepRegNet/DeepReg",
    "commit": "127a704dcc244084852558a2fbf67c180164febc",
    "filename": "test/unit/test_dataset_load.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DeepRegNet-DeepReg/test/unit/test_dataset_load.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "test/unit/test_dataset_load.py:41:31 Incompatible parameter type [6]: Expected `typing.Union[typing.Type[typing.Any], typing.Tuple[typing.Type[typing.Any], ...]]` for 2nd positional only parameter to call `isinstance` but got `typing.Callable[..., typing.Any]`.",
    "message": " Expected `typing.Union[typing.Type[typing.Any], typing.Tuple[typing.Type[typing.Any], ...]]` for 2nd positional only parameter to call `isinstance` but got `typing.Callable[..., typing.Any]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 41,
    "warning_line": "        assert isinstance(got, expected)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        expected = REGISTRY.get(category=DATA_LOADER_CLASS, key=data_type)\n        assert isinstance(got, expected)\n\n",
        "source_code_len": 117,
        "target_code": "        expected = REGISTRY.get(category=DATA_LOADER_CLASS, key=data_type)\n        assert isinstance(got, expected)  # type: ignore\n\n",
        "target_code_len": 133,
        "diff_format": "@@ -40,3 +40,3 @@\n         expected = REGISTRY.get(category=DATA_LOADER_CLASS, key=data_type)\n-        assert isinstance(got, expected)\n+        assert isinstance(got, expected)  # type: ignore\n \n",
        "source_code_with_indent": "        expected = REGISTRY.get(category=DATA_LOADER_CLASS, key=data_type)\n        assert isinstance(got, expected)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        expected = REGISTRY.get(category=DATA_LOADER_CLASS, key=data_type)\n        assert isinstance(got, expected)  # type: ignore\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "DeepRegNet/DeepReg",
    "commit": "127a704dcc244084852558a2fbf67c180164febc",
    "filename": "test/unit/test_network.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DeepRegNet-DeepReg/test/unit/test_network.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "test/unit/test_network.py:38:42 Incompatible parameter type [6]: Expected `int` for 2nd positional only parameter to call `dict.__setitem__` but got `typing.List[typing.Dict[str, typing.Union[float, str]]]`.",
    "message": " Expected `int` for 2nd positional only parameter to call `dict.__setitem__` but got `typing.List[typing.Dict[str, typing.Union[float, str]]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 38,
    "warning_line": "config_multiple_losses[\"loss\"][\"image\"] = [",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nconfig_multiple_losses = deepcopy(config)\nconfig_multiple_losses[\"loss\"][\"image\"] = [\n    {\"name\": \"lncc\", \"weight\": 0.1},\n    {\"name\": \"ssd\", \"weight\": 0.1},\n    {\"name\": \"gmi\", \"weight\": 0.1},\n]\n\n",
        "source_code_len": 199,
        "target_code": "\nconfig_multiple_losses = {\n    \"backbone\": {\"num_channel_initial\": 4, \"control_points\": 2},\n    \"loss\": {\n        \"image\": [\n            {\"name\": \"lncc\", \"weight\": 0.1},\n            {\"name\": \"ssd\", \"weight\": 0.1},\n            {\"name\": \"gmi\", \"weight\": 0.1},\n        ],\n        \"label\": {\n            \"name\": \"dice\",\n            \"weight\": 1,\n            \"scales\": [0, 1],\n        },\n        \"regularization\": {\"weight\": 0.1, \"name\": \"bending\"},\n    },\n}\n\n",
        "target_code_len": 455,
        "diff_format": "@@ -36,8 +36,18 @@\n \n-config_multiple_losses = deepcopy(config)\n-config_multiple_losses[\"loss\"][\"image\"] = [\n-    {\"name\": \"lncc\", \"weight\": 0.1},\n-    {\"name\": \"ssd\", \"weight\": 0.1},\n-    {\"name\": \"gmi\", \"weight\": 0.1},\n-]\n+config_multiple_losses = {\n+    \"backbone\": {\"num_channel_initial\": 4, \"control_points\": 2},\n+    \"loss\": {\n+        \"image\": [\n+            {\"name\": \"lncc\", \"weight\": 0.1},\n+            {\"name\": \"ssd\", \"weight\": 0.1},\n+            {\"name\": \"gmi\", \"weight\": 0.1},\n+        ],\n+        \"label\": {\n+            \"name\": \"dice\",\n+            \"weight\": 1,\n+            \"scales\": [0, 1],\n+        },\n+        \"regularization\": {\"weight\": 0.1, \"name\": \"bending\"},\n+    },\n+}\n \n",
        "source_code_with_indent": "\nconfig_multiple_losses = deepcopy(config)\nconfig_multiple_losses[\"loss\"][\"image\"] = [\n    {\"name\": \"lncc\", \"weight\": 0.1},\n    {\"name\": \"ssd\", \"weight\": 0.1},\n    {\"name\": \"gmi\", \"weight\": 0.1},\n]\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nconfig_multiple_losses = {\n    \"backbone\": {\"num_channel_initial\": 4, \"control_points\": 2},\n    \"loss\": {\n        \"image\": [\n            {\"name\": \"lncc\", \"weight\": 0.1},\n            {\"name\": \"ssd\", \"weight\": 0.1},\n            {\"name\": \"gmi\", \"weight\": 0.1},\n        ],\n        \"label\": {\n            \"name\": \"dice\",\n            \"weight\": 1,\n            \"scales\": [0, 1],\n        },\n        \"regularization\": {\"weight\": 0.1, \"name\": \"bending\"},\n    },\n}\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "DeepRegNet/DeepReg",
    "commit": "127a704dcc244084852558a2fbf67c180164febc",
    "filename": "test/unit/test_network.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DeepRegNet-DeepReg/test/unit/test_network.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "test/unit/test_network.py:57:33 Incompatible parameter type [6]: Expected `int` for 2nd positional only parameter to call `dict.__setitem__` but got `str`.",
    "message": " Expected `int` for 2nd positional only parameter to call `dict.__setitem__` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 57,
    "warning_line": "    copied[\"backbone\"][\"name\"] = backbone",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "    copied[\"method\"] = method\n    copied[\"backbone\"][\"name\"] = backbone\n    if method == \"conditional\":\n        copied[\"backbone\"].pop(\"control_points\", None)\n    copied[\"backbone\"] = {**backbone_args[backbone], **copied[\"backbone\"]}\n    return REGISTRY.build_model(\n        config=dict(\n",
        "source_code_len": 288,
        "target_code": "    copied[\"method\"] = method\n    copied[\"backbone\"][\"name\"] = backbone  # type: ignore\n    if method == \"conditional\":\n        copied[\"backbone\"].pop(\"control_points\", None)  # type: ignore\n    copied[\"backbone\"].update(backbone_args[backbone])  # type: ignore\n    return REGISTRY.build_model(  # type: ignore\n        config=dict(\n",
        "target_code_len": 332,
        "diff_format": "@@ -56,7 +66,7 @@\n     copied[\"method\"] = method\n-    copied[\"backbone\"][\"name\"] = backbone\n+    copied[\"backbone\"][\"name\"] = backbone  # type: ignore\n     if method == \"conditional\":\n-        copied[\"backbone\"].pop(\"control_points\", None)\n-    copied[\"backbone\"] = {**backbone_args[backbone], **copied[\"backbone\"]}\n-    return REGISTRY.build_model(\n+        copied[\"backbone\"].pop(\"control_points\", None)  # type: ignore\n+    copied[\"backbone\"].update(backbone_args[backbone])  # type: ignore\n+    return REGISTRY.build_model(  # type: ignore\n         config=dict(\n",
        "source_code_with_indent": "    copied[\"method\"] = method\n    copied[\"backbone\"][\"name\"] = backbone\n    if method == \"conditional\":\n        <IND>copied[\"backbone\"].pop(\"control_points\", None)\n    <DED>copied[\"backbone\"] = {**backbone_args[backbone], **copied[\"backbone\"]}\n    return REGISTRY.build_model(\n        config=dict(\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    copied[\"method\"] = method\n    copied[\"backbone\"][\"name\"] = backbone  # type: ignore\n    if method == \"conditional\":\n        <IND>copied[\"backbone\"].pop(\"control_points\", None)  # type: ignore\n    <DED>copied[\"backbone\"].update(backbone_args[backbone])  # type: ignore\n    return REGISTRY.build_model(  # type: ignore\n        config=dict(\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "DeepRegNet/DeepReg",
    "commit": "127a704dcc244084852558a2fbf67c180164febc",
    "filename": "test/unit/test_network.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DeepRegNet-DeepReg/test/unit/test_network.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "test/unit/test_network.py:61:4 Incompatible return type [7]: Expected `RegistrationModel` but got `object`.",
    "message": " Expected `RegistrationModel` but got `object`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 61,
    "warning_line": "    return REGISTRY.build_model(",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "    copied[\"method\"] = method\n    copied[\"backbone\"][\"name\"] = backbone\n    if method == \"conditional\":\n        copied[\"backbone\"].pop(\"control_points\", None)\n    copied[\"backbone\"] = {**backbone_args[backbone], **copied[\"backbone\"]}\n    return REGISTRY.build_model(\n        config=dict(\n",
        "source_code_len": 288,
        "target_code": "    copied[\"method\"] = method\n    copied[\"backbone\"][\"name\"] = backbone  # type: ignore\n    if method == \"conditional\":\n        copied[\"backbone\"].pop(\"control_points\", None)  # type: ignore\n    copied[\"backbone\"].update(backbone_args[backbone])  # type: ignore\n    return REGISTRY.build_model(  # type: ignore\n        config=dict(\n",
        "target_code_len": 332,
        "diff_format": "@@ -56,7 +66,7 @@\n     copied[\"method\"] = method\n-    copied[\"backbone\"][\"name\"] = backbone\n+    copied[\"backbone\"][\"name\"] = backbone  # type: ignore\n     if method == \"conditional\":\n-        copied[\"backbone\"].pop(\"control_points\", None)\n-    copied[\"backbone\"] = {**backbone_args[backbone], **copied[\"backbone\"]}\n-    return REGISTRY.build_model(\n+        copied[\"backbone\"].pop(\"control_points\", None)  # type: ignore\n+    copied[\"backbone\"].update(backbone_args[backbone])  # type: ignore\n+    return REGISTRY.build_model(  # type: ignore\n         config=dict(\n",
        "source_code_with_indent": "    copied[\"method\"] = method\n    copied[\"backbone\"][\"name\"] = backbone\n    if method == \"conditional\":\n        <IND>copied[\"backbone\"].pop(\"control_points\", None)\n    <DED>copied[\"backbone\"] = {**backbone_args[backbone], **copied[\"backbone\"]}\n    return REGISTRY.build_model(\n        config=dict(\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    copied[\"method\"] = method\n    copied[\"backbone\"][\"name\"] = backbone  # type: ignore\n    if method == \"conditional\":\n        <IND>copied[\"backbone\"].pop(\"control_points\", None)  # type: ignore\n    <DED>copied[\"backbone\"].update(backbone_args[backbone])  # type: ignore\n    return REGISTRY.build_model(  # type: ignore\n        config=dict(\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]