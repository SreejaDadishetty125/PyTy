[
  {
    "project": "microsoft/graspologic",
    "commit": "b0e646278db3b6193d23e3ec6668bfffd1a10726",
    "filename": "graspologic/embed/case.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-graspologic/graspologic/embed/case.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "graspologic/embed/case.py:108:4 Inconsistent override [14]: `graspologic.embed.case.CovariateAssistedEmbed.fit` overrides method defined in `BaseSpectralEmbed` inconsistently. Could not find parameter `Variable(unknown)` in overriding signature.",
    "message": " `graspologic.embed.case.CovariateAssistedEmbed.fit` overrides method defined in `BaseSpectralEmbed` inconsistently. Could not find parameter `Variable(unknown)` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 108,
    "warning_line": "    def fit(",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n    def fit(\n        self, graph: np.ndarray, covariates: np.ndarray, y: None = None\n",
        "source_code_len": 86,
        "target_code": "\n    def fit(  # type: ignore\n        self, graph: np.ndarray, covariates: np.ndarray, y: None = None\n",
        "target_code_len": 102,
        "diff_format": "@@ -107,3 +107,3 @@\n \n-    def fit(\n+    def fit(  # type: ignore\n         self, graph: np.ndarray, covariates: np.ndarray, y: None = None\n",
        "source_code_with_indent": "\n    <DED>def fit(\n        self, graph: np.ndarray, covariates: np.ndarray, y: None = None\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def fit(  # type: ignore\n        self, graph: np.ndarray, covariates: np.ndarray, y: None = None\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "microsoft/graspologic",
    "commit": "b0e646278db3b6193d23e3ec6668bfffd1a10726",
    "filename": "graspologic/embed/case.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-graspologic/graspologic/embed/case.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "graspologic/embed/case.py:108:4 Inconsistent override [14]: `graspologic.embed.case.CovariateAssistedEmbed.fit` overrides method defined in `BaseSpectralEmbed` inconsistently. Could not find parameter `Keywords(unknown)` in overriding signature.",
    "message": " `graspologic.embed.case.CovariateAssistedEmbed.fit` overrides method defined in `BaseSpectralEmbed` inconsistently. Could not find parameter `Keywords(unknown)` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 108,
    "warning_line": "    def fit(",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n    def fit(\n        self, graph: np.ndarray, covariates: np.ndarray, y: None = None\n",
        "source_code_len": 86,
        "target_code": "\n    def fit(  # type: ignore\n        self, graph: np.ndarray, covariates: np.ndarray, y: None = None\n",
        "target_code_len": 102,
        "diff_format": "@@ -107,3 +107,3 @@\n \n-    def fit(\n+    def fit(  # type: ignore\n         self, graph: np.ndarray, covariates: np.ndarray, y: None = None\n",
        "source_code_with_indent": "\n    <DED>def fit(\n        self, graph: np.ndarray, covariates: np.ndarray, y: None = None\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def fit(  # type: ignore\n        self, graph: np.ndarray, covariates: np.ndarray, y: None = None\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "microsoft/graspologic",
    "commit": "b0e646278db3b6193d23e3ec6668bfffd1a10726",
    "filename": "graspologic/embed/case.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-graspologic/graspologic/embed/case.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "graspologic/embed/case.py:163:4 Inconsistent override [14]: `graspologic.embed.case.CovariateAssistedEmbed.fit_transform` overrides method defined in `BaseSpectralEmbed` inconsistently. Could not find parameter `y` in overriding signature.",
    "message": " `graspologic.embed.case.CovariateAssistedEmbed.fit_transform` overrides method defined in `BaseSpectralEmbed` inconsistently. Could not find parameter `y` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 163,
    "warning_line": "    def fit_transform(self, graph: np.ndarray, covariates: np.ndarray):",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n    def fit_transform(self, graph: np.ndarray, covariates: np.ndarray):\n        # Allows `for self.fit_transform(graph, covariates)` without needing keyword arguments.\n",
        "source_code_len": 169,
        "target_code": "\n    def fit_transform(self, graph: np.ndarray, covariates: np.ndarray):  # type: ignore\n        # Allows `for self.fit_transform(graph, covariates)` without needing keyword arguments.\n",
        "target_code_len": 185,
        "diff_format": "@@ -162,3 +162,3 @@\n \n-    def fit_transform(self, graph: np.ndarray, covariates: np.ndarray):\n+    def fit_transform(self, graph: np.ndarray, covariates: np.ndarray):  # type: ignore\n         # Allows `for self.fit_transform(graph, covariates)` without needing keyword arguments.\n",
        "source_code_with_indent": "\n    <DED>def fit_transform(self, graph: np.ndarray, covariates: np.ndarray):\n        # Allows `for self.fit_transform(graph, covariates)` without needing keyword arguments.\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def fit_transform(self, graph: np.ndarray, covariates: np.ndarray):  # type: ignore\n        # Allows `for self.fit_transform(graph, covariates)` without needing keyword arguments.\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "microsoft/graspologic",
    "commit": "b0e646278db3b6193d23e3ec6668bfffd1a10726",
    "filename": "graspologic/embed/case.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-graspologic/graspologic/embed/case.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "graspologic/embed/case.py:163:4 Inconsistent override [14]: `graspologic.embed.case.CovariateAssistedEmbed.fit_transform` overrides method defined in `BaseSpectralEmbed` inconsistently. Could not find parameter `Variable(unknown)` in overriding signature.",
    "message": " `graspologic.embed.case.CovariateAssistedEmbed.fit_transform` overrides method defined in `BaseSpectralEmbed` inconsistently. Could not find parameter `Variable(unknown)` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 163,
    "warning_line": "    def fit_transform(self, graph: np.ndarray, covariates: np.ndarray):",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n    def fit_transform(self, graph: np.ndarray, covariates: np.ndarray):\n        # Allows `for self.fit_transform(graph, covariates)` without needing keyword arguments.\n",
        "source_code_len": 169,
        "target_code": "\n    def fit_transform(self, graph: np.ndarray, covariates: np.ndarray):  # type: ignore\n        # Allows `for self.fit_transform(graph, covariates)` without needing keyword arguments.\n",
        "target_code_len": 185,
        "diff_format": "@@ -162,3 +162,3 @@\n \n-    def fit_transform(self, graph: np.ndarray, covariates: np.ndarray):\n+    def fit_transform(self, graph: np.ndarray, covariates: np.ndarray):  # type: ignore\n         # Allows `for self.fit_transform(graph, covariates)` without needing keyword arguments.\n",
        "source_code_with_indent": "\n    <DED>def fit_transform(self, graph: np.ndarray, covariates: np.ndarray):\n        # Allows `for self.fit_transform(graph, covariates)` without needing keyword arguments.\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def fit_transform(self, graph: np.ndarray, covariates: np.ndarray):  # type: ignore\n        # Allows `for self.fit_transform(graph, covariates)` without needing keyword arguments.\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "microsoft/graspologic",
    "commit": "b0e646278db3b6193d23e3ec6668bfffd1a10726",
    "filename": "graspologic/embed/case.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-graspologic/graspologic/embed/case.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "graspologic/embed/case.py:163:4 Inconsistent override [14]: `graspologic.embed.case.CovariateAssistedEmbed.fit_transform` overrides method defined in `BaseSpectralEmbed` inconsistently. Could not find parameter `Keywords(unknown)` in overriding signature.",
    "message": " `graspologic.embed.case.CovariateAssistedEmbed.fit_transform` overrides method defined in `BaseSpectralEmbed` inconsistently. Could not find parameter `Keywords(unknown)` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 163,
    "warning_line": "    def fit_transform(self, graph: np.ndarray, covariates: np.ndarray):",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n    def fit_transform(self, graph: np.ndarray, covariates: np.ndarray):\n        # Allows `for self.fit_transform(graph, covariates)` without needing keyword arguments.\n",
        "source_code_len": 169,
        "target_code": "\n    def fit_transform(self, graph: np.ndarray, covariates: np.ndarray):  # type: ignore\n        # Allows `for self.fit_transform(graph, covariates)` without needing keyword arguments.\n",
        "target_code_len": 185,
        "diff_format": "@@ -162,3 +162,3 @@\n \n-    def fit_transform(self, graph: np.ndarray, covariates: np.ndarray):\n+    def fit_transform(self, graph: np.ndarray, covariates: np.ndarray):  # type: ignore\n         # Allows `for self.fit_transform(graph, covariates)` without needing keyword arguments.\n",
        "source_code_with_indent": "\n    <DED>def fit_transform(self, graph: np.ndarray, covariates: np.ndarray):\n        # Allows `for self.fit_transform(graph, covariates)` without needing keyword arguments.\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def fit_transform(self, graph: np.ndarray, covariates: np.ndarray):  # type: ignore\n        # Allows `for self.fit_transform(graph, covariates)` without needing keyword arguments.\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "microsoft/graspologic",
    "commit": "b0e646278db3b6193d23e3ec6668bfffd1a10726",
    "filename": "graspologic/embed/lse.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-graspologic/graspologic/embed/lse.py",
    "file_hunks_size": 5,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "graspologic/embed/lse.py:145:4 Inconsistent override [14]: `graspologic.embed.lse.LaplacianSpectralEmbed.fit` overrides method defined in `BaseSpectralEmbed` inconsistently. Could not find parameter `Variable(unknown)` in overriding signature.",
    "message": " `graspologic.embed.lse.LaplacianSpectralEmbed.fit` overrides method defined in `BaseSpectralEmbed` inconsistently. Could not find parameter `Variable(unknown)` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 145,
    "warning_line": "    def fit(self, graph: Union[np.ndarray, nx.Graph], y=None):"
  },
  {
    "project": "microsoft/graspologic",
    "commit": "b0e646278db3b6193d23e3ec6668bfffd1a10726",
    "filename": "graspologic/embed/lse.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-graspologic/graspologic/embed/lse.py",
    "file_hunks_size": 5,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "graspologic/embed/lse.py:145:4 Inconsistent override [14]: `graspologic.embed.lse.LaplacianSpectralEmbed.fit` overrides method defined in `BaseSpectralEmbed` inconsistently. Could not find parameter `Keywords(unknown)` in overriding signature.",
    "message": " `graspologic.embed.lse.LaplacianSpectralEmbed.fit` overrides method defined in `BaseSpectralEmbed` inconsistently. Could not find parameter `Keywords(unknown)` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 145,
    "warning_line": "    def fit(self, graph: Union[np.ndarray, nx.Graph], y=None):"
  },
  {
    "project": "microsoft/graspologic",
    "commit": "b0e646278db3b6193d23e3ec6668bfffd1a10726",
    "filename": "graspologic/nominate/spectralVN.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-graspologic/graspologic/nominate/spectralVN.py",
    "file_hunks_size": 14,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "graspologic/nominate/spectralVN.py:79:8 Incompatible variable type [9]: metric_params is declared to have type `typing.Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "message": " metric_params is declared to have type `typing.Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 79,
    "warning_line": "        metric_params: dict = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import Tuple, Union\n\n",
        "source_code_len": 34,
        "target_code": "\nfrom typing import Any, Dict, List, Optional, Tuple, Union\n\n",
        "target_code_len": 61,
        "diff_format": "@@ -3,3 +3,3 @@\n \n-from typing import Tuple, Union\n+from typing import Any, Dict, List, Optional, Tuple, Union\n \n",
        "source_code_with_indent": "\nfrom typing import Tuple, Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import Any, Dict, List, Optional, Tuple, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from sklearn.utils import check_array\n\nfrom ..embed import AdjacencySpectralEmbed, BaseSpectralEmbed, LaplacianSpectralEmbed\n\n",
        "source_code_len": 126,
        "target_code": "from sklearn.utils import check_array\nfrom typing_extensions import Literal\n\nfrom ..embed import AdjacencySpectralEmbed, BaseSpectralEmbed, LaplacianSpectralEmbed\n\n# Type aliases\nEmbedderType = Union[Literal[\"ase\", \"ASE\", \"lse\", \"LSE\"], BaseSpectralEmbed]\n\n",
        "target_code_len": 257,
        "diff_format": "@@ -9,4 +9,8 @@\n from sklearn.utils import check_array\n+from typing_extensions import Literal\n \n from ..embed import AdjacencySpectralEmbed, BaseSpectralEmbed, LaplacianSpectralEmbed\n+\n+# Type aliases\n+EmbedderType = Union[Literal[\"ase\", \"ASE\", \"lse\", \"LSE\"], BaseSpectralEmbed]\n \n",
        "source_code_with_indent": "from sklearn.utils import check_array\n\nfrom ..embed import AdjacencySpectralEmbed, BaseSpectralEmbed, LaplacianSpectralEmbed\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from sklearn.utils import check_array\nfrom typing_extensions import Literal\n\nfrom ..embed import AdjacencySpectralEmbed, BaseSpectralEmbed, LaplacianSpectralEmbed\n\n# Type aliases\nEmbedderType = Union[Literal[\"ase\", \"ASE\", \"lse\", \"LSE\"], BaseSpectralEmbed]\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        input_graph: bool = True,\n        embedder: Union[str, BaseSpectralEmbed] = \"ase\",\n        n_neighbors=None,\n        metric: str = \"euclidean\",\n        metric_params: dict = None,\n    ):\n",
        "source_code_len": 195,
        "target_code": "        input_graph: bool = True,\n        embedder: EmbedderType = \"ase\",\n        n_neighbors: Optional[int] = None,\n        metric: str = \"euclidean\",\n        metric_params: Optional[Dict[str, Any]] = None,\n    ):\n",
        "target_code_len": 215,
        "diff_format": "@@ -75,6 +79,6 @@\n         input_graph: bool = True,\n-        embedder: Union[str, BaseSpectralEmbed] = \"ase\",\n-        n_neighbors=None,\n+        embedder: EmbedderType = \"ase\",\n+        n_neighbors: Optional[int] = None,\n         metric: str = \"euclidean\",\n-        metric_params: dict = None,\n+        metric_params: Optional[Dict[str, Any]] = None,\n     ):\n",
        "source_code_with_indent": "        input_graph: bool = True,\n        embedder: Union[str, BaseSpectralEmbed] = \"ase\",\n        n_neighbors=None,\n        metric: str = \"euclidean\",\n        metric_params: dict = None,\n    ):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        input_graph: bool = True,\n        embedder: EmbedderType = \"ase\",\n        n_neighbors: Optional[int] = None,\n        metric: str = \"euclidean\",\n        metric_params: Optional[Dict[str, Any]] = None,\n    ):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "microsoft/graspologic",
    "commit": "b0e646278db3b6193d23e3ec6668bfffd1a10726",
    "filename": "graspologic/pipeline/embed/laplacian_spectral_embedding.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-graspologic/graspologic/pipeline/embed/laplacian_spectral_embedding.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "graspologic/pipeline/embed/laplacian_spectral_embedding.py:171:31 Unsupported operand [58]: `>=` is not supported for operand types `numbers.Real` and `int`.",
    "message": " `>=` is not supported for operand types `numbers.Real` and `int`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 171,
    "warning_line": "        regularizer is None or regularizer >= 0, \"regularizer must be nonnegative\"",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    check_argument(\n        regularizer is None or regularizer >= 0, \"regularizer must be nonnegative\"\n    )\n",
        "source_code_len": 109,
        "target_code": "    check_argument(\n        regularizer is None or float(regularizer) >= 0,\n        \"regularizer must be nonnegative\",\n    )\n",
        "target_code_len": 125,
        "diff_format": "@@ -170,3 +172,4 @@\n     check_argument(\n-        regularizer is None or regularizer >= 0, \"regularizer must be nonnegative\"\n+        regularizer is None or float(regularizer) >= 0,\n+        \"regularizer must be nonnegative\",\n     )\n",
        "source_code_with_indent": "    check_argument(\n        regularizer is None or regularizer >= 0, \"regularizer must be nonnegative\"\n    )\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    check_argument(\n        regularizer is None or float(regularizer) >= 0,\n        \"regularizer must be nonnegative\",\n    )\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "microsoft/graspologic",
    "commit": "b0e646278db3b6193d23e3ec6668bfffd1a10726",
    "filename": "graspologic/pipeline/embed/laplacian_spectral_embedding.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-graspologic/graspologic/pipeline/embed/laplacian_spectral_embedding.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "graspologic/pipeline/embed/laplacian_spectral_embedding.py:189:8 Incompatible variable type [9]: weight_attribute is declared to have type `str` but is used as type `None`.",
    "message": " weight_attribute is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 189,
    "warning_line": "        weight_attribute = None  # this supercedes what the user said, because",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        )\n        weight_attribute = None  # this supercedes what the user said, because\n        # not all of the weights are real numbers, if they exist at all\n",
        "source_code_len": 161,
        "target_code": "        )\n        used_weight_attribute = None  # this supercedes what the user said, because\n        # not all of the weights are real numbers, if they exist at all\n",
        "target_code_len": 166,
        "diff_format": "@@ -188,3 +192,3 @@\n         )\n-        weight_attribute = None  # this supercedes what the user said, because\n+        used_weight_attribute = None  # this supercedes what the user said, because\n         # not all of the weights are real numbers, if they exist at all\n",
        "source_code_with_indent": "        )\n        weight_attribute = None  # this supercedes what the user said, because\n        # not all of the weights are real numbers, if they exist at all\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        )\n        used_weight_attribute = None  # this supercedes what the user said, because\n        # not all of the weights are real numbers, if they exist at all\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "microsoft/graspologic",
    "commit": "b0e646278db3b6193d23e3ec6668bfffd1a10726",
    "filename": "graspologic/pipeline/embed/omnibus_embedding.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-graspologic/graspologic/pipeline/embed/omnibus_embedding.py",
    "file_hunks_size": 14,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "graspologic/pipeline/embed/omnibus_embedding.py:155:4 Incompatible variable type [9]: weight_attribute is declared to have type `str` but is used as type `Optional[str]`.",
    "message": " weight_attribute is declared to have type `str` but is used as type `Optional[str]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 155,
    "warning_line": "    weight_attribute = _graphs_precondition_checks(graphs, weight_attribute)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    weight_attribute = _graphs_precondition_checks(graphs, weight_attribute)\n    perform_augment_diagonal = not use_laplacian\n",
        "source_code_len": 127,
        "target_code": "\n    used_weight_attribute = _graphs_precondition_checks(graphs, weight_attribute)\n    perform_augment_diagonal = not use_laplacian\n",
        "target_code_len": 132,
        "diff_format": "@@ -154,3 +155,3 @@\n \n-    weight_attribute = _graphs_precondition_checks(graphs, weight_attribute)\n+    used_weight_attribute = _graphs_precondition_checks(graphs, weight_attribute)\n     perform_augment_diagonal = not use_laplacian\n",
        "source_code_with_indent": "\n    weight_attribute = _graphs_precondition_checks(graphs, weight_attribute)\n    perform_augment_diagonal = not use_laplacian\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    used_weight_attribute = _graphs_precondition_checks(graphs, weight_attribute)\n    perform_augment_diagonal = not use_laplacian\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "microsoft/graspologic",
    "commit": "b0e646278db3b6193d23e3ec6668bfffd1a10726",
    "filename": "graspologic/pipeline/embed/omnibus_embedding.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-graspologic/graspologic/pipeline/embed/omnibus_embedding.py",
    "file_hunks_size": 14,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "graspologic/pipeline/embed/omnibus_embedding.py:255:12 Incompatible variable type [9]: weight_attribute is declared to have type `str` but is used as type `None`.",
    "message": " weight_attribute is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 255,
    "warning_line": "            weight_attribute = None  # this supercedes what the user said, because",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            )\n            weight_attribute = None  # this supercedes what the user said, because\n            # not all of the weights are real numbers, if they exist at all\n",
        "source_code_len": 173,
        "target_code": "            )\n            used_weight_attribute = None  # this supercedes what the user said, because\n            # not all of the weights are real numbers, if they exist at all\n",
        "target_code_len": 178,
        "diff_format": "@@ -254,3 +258,3 @@\n             )\n-            weight_attribute = None  # this supercedes what the user said, because\n+            used_weight_attribute = None  # this supercedes what the user said, because\n             # not all of the weights are real numbers, if they exist at all\n",
        "source_code_with_indent": "            )\n            weight_attribute = None  # this supercedes what the user said, because\n            # not all of the weights are real numbers, if they exist at all\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            )\n            used_weight_attribute = None  # this supercedes what the user said, because\n            # not all of the weights are real numbers, if they exist at all\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]