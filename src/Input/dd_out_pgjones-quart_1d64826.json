[
  {
    "project": "pgjones/quart",
    "commit": "1d64826db613462cf60b00281cec1f48413a5b68",
    "filename": "src/quart/asgi.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pgjones-quart/src/quart/asgi.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/quart/asgi.py:50:28 Incompatible parameter type [6]: Expected `Set[asyncio.futures.Future[typing.Any]]` for 1st positional only parameter to call `_cancel_tasks` but got `Set[asyncio.tasks.Task[None]]`.",
    "message": " Expected `Set[asyncio.futures.Future[typing.Any]]` for 1st positional only parameter to call `_cancel_tasks` but got `Set[asyncio.tasks.Task[None]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 50,
    "warning_line": "        await _cancel_tasks(pending)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nasync def _cancel_tasks(tasks: Set[asyncio.Future]) -> None:\n    # Cancel any pending, and wait for the cancellation to\n",
        "source_code_len": 121,
        "target_code": "\nasync def _cancel_tasks(tasks: Set[asyncio.Task]) -> None:\n    # Cancel any pending, and wait for the cancellation to\n",
        "target_code_len": 119,
        "diff_format": "@@ -339,3 +339,3 @@\n \n-async def _cancel_tasks(tasks: Set[asyncio.Future]) -> None:\n+async def _cancel_tasks(tasks: Set[asyncio.Task]) -> None:\n     # Cancel any pending, and wait for the cancellation to\n",
        "source_code_with_indent": "\n<DED><DED><DED><DED>async def _cancel_tasks(tasks: Set[asyncio.Future]) -> None:\n    # Cancel any pending, and wait for the cancellation to\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED><DED><DED><DED>async def _cancel_tasks(tasks: Set[asyncio.Task]) -> None:\n    # Cancel any pending, and wait for the cancellation to\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _raise_exceptions(tasks: Set[asyncio.Future]) -> None:\n    # Raise any unexpected exceptions\n",
        "source_code_len": 98,
        "target_code": "\ndef _raise_exceptions(tasks: Set[asyncio.Task]) -> None:\n    # Raise any unexpected exceptions\n",
        "target_code_len": 96,
        "diff_format": "@@ -348,3 +348,3 @@\n \n-def _raise_exceptions(tasks: Set[asyncio.Future]) -> None:\n+def _raise_exceptions(tasks: Set[asyncio.Task]) -> None:\n     # Raise any unexpected exceptions\n",
        "source_code_with_indent": "\n<DED>def _raise_exceptions(tasks: Set[asyncio.Future]) -> None:\n    # Raise any unexpected exceptions\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def _raise_exceptions(tasks: Set[asyncio.Task]) -> None:\n    # Raise any unexpected exceptions\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pgjones/quart",
    "commit": "1d64826db613462cf60b00281cec1f48413a5b68",
    "filename": "src/quart/asgi.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pgjones-quart/src/quart/asgi.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/quart/asgi.py:51:26 Incompatible parameter type [6]: Expected `Set[asyncio.futures.Future[typing.Any]]` for 1st positional only parameter to call `_raise_exceptions` but got `Set[asyncio.tasks.Task[None]]`.",
    "message": " Expected `Set[asyncio.futures.Future[typing.Any]]` for 1st positional only parameter to call `_raise_exceptions` but got `Set[asyncio.tasks.Task[None]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 51,
    "warning_line": "        _raise_exceptions(done)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nasync def _cancel_tasks(tasks: Set[asyncio.Future]) -> None:\n    # Cancel any pending, and wait for the cancellation to\n",
        "source_code_len": 121,
        "target_code": "\nasync def _cancel_tasks(tasks: Set[asyncio.Task]) -> None:\n    # Cancel any pending, and wait for the cancellation to\n",
        "target_code_len": 119,
        "diff_format": "@@ -339,3 +339,3 @@\n \n-async def _cancel_tasks(tasks: Set[asyncio.Future]) -> None:\n+async def _cancel_tasks(tasks: Set[asyncio.Task]) -> None:\n     # Cancel any pending, and wait for the cancellation to\n",
        "source_code_with_indent": "\n<DED><DED><DED><DED>async def _cancel_tasks(tasks: Set[asyncio.Future]) -> None:\n    # Cancel any pending, and wait for the cancellation to\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED><DED><DED><DED>async def _cancel_tasks(tasks: Set[asyncio.Task]) -> None:\n    # Cancel any pending, and wait for the cancellation to\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _raise_exceptions(tasks: Set[asyncio.Future]) -> None:\n    # Raise any unexpected exceptions\n",
        "source_code_len": 98,
        "target_code": "\ndef _raise_exceptions(tasks: Set[asyncio.Task]) -> None:\n    # Raise any unexpected exceptions\n",
        "target_code_len": 96,
        "diff_format": "@@ -348,3 +348,3 @@\n \n-def _raise_exceptions(tasks: Set[asyncio.Future]) -> None:\n+def _raise_exceptions(tasks: Set[asyncio.Task]) -> None:\n     # Raise any unexpected exceptions\n",
        "source_code_with_indent": "\n<DED>def _raise_exceptions(tasks: Set[asyncio.Future]) -> None:\n    # Raise any unexpected exceptions\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def _raise_exceptions(tasks: Set[asyncio.Task]) -> None:\n    # Raise any unexpected exceptions\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pgjones/quart",
    "commit": "1d64826db613462cf60b00281cec1f48413a5b68",
    "filename": "src/quart/asgi.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pgjones-quart/src/quart/asgi.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/quart/asgi.py:168:28 Incompatible parameter type [6]: Expected `Set[asyncio.futures.Future[typing.Any]]` for 1st positional only parameter to call `_cancel_tasks` but got `Set[asyncio.tasks.Task[None]]`.",
    "message": " Expected `Set[asyncio.futures.Future[typing.Any]]` for 1st positional only parameter to call `_cancel_tasks` but got `Set[asyncio.tasks.Task[None]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 168,
    "warning_line": "        await _cancel_tasks(pending)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nasync def _cancel_tasks(tasks: Set[asyncio.Future]) -> None:\n    # Cancel any pending, and wait for the cancellation to\n",
        "source_code_len": 121,
        "target_code": "\nasync def _cancel_tasks(tasks: Set[asyncio.Task]) -> None:\n    # Cancel any pending, and wait for the cancellation to\n",
        "target_code_len": 119,
        "diff_format": "@@ -339,3 +339,3 @@\n \n-async def _cancel_tasks(tasks: Set[asyncio.Future]) -> None:\n+async def _cancel_tasks(tasks: Set[asyncio.Task]) -> None:\n     # Cancel any pending, and wait for the cancellation to\n",
        "source_code_with_indent": "\n<DED><DED><DED><DED>async def _cancel_tasks(tasks: Set[asyncio.Future]) -> None:\n    # Cancel any pending, and wait for the cancellation to\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED><DED><DED><DED>async def _cancel_tasks(tasks: Set[asyncio.Task]) -> None:\n    # Cancel any pending, and wait for the cancellation to\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _raise_exceptions(tasks: Set[asyncio.Future]) -> None:\n    # Raise any unexpected exceptions\n",
        "source_code_len": 98,
        "target_code": "\ndef _raise_exceptions(tasks: Set[asyncio.Task]) -> None:\n    # Raise any unexpected exceptions\n",
        "target_code_len": 96,
        "diff_format": "@@ -348,3 +348,3 @@\n \n-def _raise_exceptions(tasks: Set[asyncio.Future]) -> None:\n+def _raise_exceptions(tasks: Set[asyncio.Task]) -> None:\n     # Raise any unexpected exceptions\n",
        "source_code_with_indent": "\n<DED>def _raise_exceptions(tasks: Set[asyncio.Future]) -> None:\n    # Raise any unexpected exceptions\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def _raise_exceptions(tasks: Set[asyncio.Task]) -> None:\n    # Raise any unexpected exceptions\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pgjones/quart",
    "commit": "1d64826db613462cf60b00281cec1f48413a5b68",
    "filename": "src/quart/asgi.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pgjones-quart/src/quart/asgi.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/quart/asgi.py:169:26 Incompatible parameter type [6]: Expected `Set[asyncio.futures.Future[typing.Any]]` for 1st positional only parameter to call `_raise_exceptions` but got `Set[asyncio.tasks.Task[None]]`.",
    "message": " Expected `Set[asyncio.futures.Future[typing.Any]]` for 1st positional only parameter to call `_raise_exceptions` but got `Set[asyncio.tasks.Task[None]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 169,
    "warning_line": "        _raise_exceptions(done)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nasync def _cancel_tasks(tasks: Set[asyncio.Future]) -> None:\n    # Cancel any pending, and wait for the cancellation to\n",
        "source_code_len": 121,
        "target_code": "\nasync def _cancel_tasks(tasks: Set[asyncio.Task]) -> None:\n    # Cancel any pending, and wait for the cancellation to\n",
        "target_code_len": 119,
        "diff_format": "@@ -339,3 +339,3 @@\n \n-async def _cancel_tasks(tasks: Set[asyncio.Future]) -> None:\n+async def _cancel_tasks(tasks: Set[asyncio.Task]) -> None:\n     # Cancel any pending, and wait for the cancellation to\n",
        "source_code_with_indent": "\n<DED><DED><DED><DED>async def _cancel_tasks(tasks: Set[asyncio.Future]) -> None:\n    # Cancel any pending, and wait for the cancellation to\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED><DED><DED><DED>async def _cancel_tasks(tasks: Set[asyncio.Task]) -> None:\n    # Cancel any pending, and wait for the cancellation to\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _raise_exceptions(tasks: Set[asyncio.Future]) -> None:\n    # Raise any unexpected exceptions\n",
        "source_code_len": 98,
        "target_code": "\ndef _raise_exceptions(tasks: Set[asyncio.Task]) -> None:\n    # Raise any unexpected exceptions\n",
        "target_code_len": 96,
        "diff_format": "@@ -348,3 +348,3 @@\n \n-def _raise_exceptions(tasks: Set[asyncio.Future]) -> None:\n+def _raise_exceptions(tasks: Set[asyncio.Task]) -> None:\n     # Raise any unexpected exceptions\n",
        "source_code_with_indent": "\n<DED>def _raise_exceptions(tasks: Set[asyncio.Future]) -> None:\n    # Raise any unexpected exceptions\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def _raise_exceptions(tasks: Set[asyncio.Task]) -> None:\n    # Raise any unexpected exceptions\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]