[
  {
    "project": "pythonarcade/arcade",
    "commit": "0c4e9bc4e7431239d57a95e680a1945e8a1c3927",
    "filename": "arcade/experimental/pymunk_physics_engine.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pythonarcade-arcade/arcade/experimental/pymunk_physics_engine.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "arcade/experimental/pymunk_physics_engine.py:45:19 Incompatible variable type [9]: collision_type is declared to have type `str` but is used as type `None`.",
    "message": " collision_type is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 45,
    "warning_line": "                   collision_type: str = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                   radius: float = 0,\n                   collision_type: str = None,\n                   ):\n",
        "source_code_len": 107,
        "target_code": "                   radius: float = 0,\n                   collision_type: str = \"default\",\n                   ):\n",
        "target_code_len": 112,
        "diff_format": "@@ -44,3 +47,3 @@\n                    radius: float = 0,\n-                   collision_type: str = None,\n+                   collision_type: str = \"default\",\n                    ):\n",
        "source_code_with_indent": "                   radius: float = 0,\n                   collision_type: str = None,\n                   ):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                   radius: float = 0,\n                   collision_type: str = \"default\",\n                   ):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pythonarcade/arcade",
    "commit": "0c4e9bc4e7431239d57a95e680a1945e8a1c3927",
    "filename": "arcade/experimental/pymunk_physics_engine.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pythonarcade-arcade/arcade/experimental/pymunk_physics_engine.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "arcade/experimental/pymunk_physics_engine.py:123:16 Incompatible return type [7]: Expected `arcade.sprite.Sprite` but got implicit return value of `None`.",
    "message": " Expected `arcade.sprite.Sprite` but got implicit return value of `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 123,
    "warning_line": "                return sprite",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import Callable\nfrom arcade import Sprite\n",
        "source_code_len": 54,
        "target_code": "from typing import Callable\nfrom typing import List\nfrom typing import Dict\nfrom typing import Optional\nfrom arcade import Sprite\n",
        "target_code_len": 130,
        "diff_format": "@@ -7,2 +7,5 @@\n from typing import Callable\n+from typing import List\n+from typing import Dict\n+from typing import Optional\n from arcade import Sprite\n",
        "source_code_with_indent": "from typing import Callable\nfrom arcade import Sprite\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Callable\nfrom typing import List\nfrom typing import Dict\nfrom typing import Optional\nfrom arcade import Sprite\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def get_sprite_for_shape(self, shape) -> Sprite:\n        \"\"\" Given a shape, what sprite is associated with it? \"\"\"\n",
        "source_code_len": 120,
        "target_code": "\n    def get_sprite_for_shape(self, shape) -> Optional[Sprite]:\n        \"\"\" Given a shape, what sprite is associated with it? \"\"\"\n",
        "target_code_len": 130,
        "diff_format": "@@ -118,3 +121,3 @@\n \n-    def get_sprite_for_shape(self, shape) -> Sprite:\n+    def get_sprite_for_shape(self, shape) -> Optional[Sprite]:\n         \"\"\" Given a shape, what sprite is associated with it? \"\"\"\n",
        "source_code_with_indent": "\n    <DED>def get_sprite_for_shape(self, shape) -> Sprite:\n        <IND>\"\"\" Given a shape, what sprite is associated with it? \"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def get_sprite_for_shape(self, shape) -> Optional[Sprite]:\n        <IND>\"\"\" Given a shape, what sprite is associated with it? \"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]