[
  {
    "project": "opendatacube/datacube-core",
    "commit": "15b8681a0f17111d5ac42b56c2ff50c671d0cb70",
    "filename": "datacube/testutils/geom.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/opendatacube-datacube-core/datacube/testutils/geom.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "datacube/testutils/geom.py:27:35 Invalid type [31]: Expression `(numpy.ndarray, numpy.ndarray)` is not a valid type.",
    "message": " Expression `(numpy.ndarray, numpy.ndarray)` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 27,
    "warning_line": "def xy_from_gbox(gbox: GeoBox) -> (np.ndarray, np.ndarray):"
  },
  {
    "project": "opendatacube/datacube-core",
    "commit": "15b8681a0f17111d5ac42b56c2ff50c671d0cb70",
    "filename": "datacube/testutils/geom.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/opendatacube-datacube-core/datacube/testutils/geom.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "datacube/testutils/geom.py:40:35 Invalid type [31]: Expression `(numpy.ndarray, numpy.ndarray, affine.Affine)` is not a valid type.",
    "message": " Expression `(numpy.ndarray, numpy.ndarray, affine.Affine)` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 40,
    "warning_line": "            deg: float = 45.0) -> (np.ndarray, np.ndarray, Affine):"
  },
  {
    "project": "opendatacube/datacube-core",
    "commit": "15b8681a0f17111d5ac42b56c2ff50c671d0cb70",
    "filename": "datacube/utils/geometry/tools.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/opendatacube-datacube-core/datacube/utils/geometry/tools.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "datacube/utils/geometry/tools.py:178:62 Invalid type [31]: Expression `(numpy.ndarray, numpy.ndarray)` is not a valid type.",
    "message": " Expression `(numpy.ndarray, numpy.ndarray)` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 178,
    "warning_line": "def apply_affine(A: Affine, x: np.ndarray, y: np.ndarray) -> (np.ndarray, np.ndarray):"
  },
  {
    "project": "opendatacube/datacube-core",
    "commit": "15b8681a0f17111d5ac42b56c2ff50c671d0cb70",
    "filename": "datacube/utils/geometry/tools.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/opendatacube-datacube-core/datacube/utils/geometry/tools.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "datacube/utils/geometry/tools.py:427:4 Incompatible return type [7]: Expected `slice` but got `typing.Tuple[slice, slice]`.",
    "message": " Expected `slice` but got `typing.Tuple[slice, slice]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 427,
    "warning_line": "    return (src, dst)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from types import SimpleNamespace\nfrom affine import Affine\n",
        "source_code_len": 60,
        "target_code": "from types import SimpleNamespace\nfrom typing import Tuple\nfrom affine import Affine\n",
        "target_code_len": 85,
        "diff_format": "@@ -3,2 +3,3 @@\n from types import SimpleNamespace\n+from typing import Tuple\n from affine import Affine\n",
        "source_code_with_indent": "from types import SimpleNamespace\nfrom affine import Affine\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from types import SimpleNamespace\nfrom typing import Tuple\nfrom affine import Affine\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef compute_axis_overlap(Ns: int, Nd: int, s: float, t: float) -> slice:\n    \"\"\"\n",
        "source_code_len": 82,
        "target_code": "\ndef compute_axis_overlap(Ns: int, Nd: int, s: float, t: float) -> Tuple[slice, slice]:\n    \"\"\"\n",
        "target_code_len": 96,
        "diff_format": "@@ -374,3 +375,3 @@\n \n-def compute_axis_overlap(Ns: int, Nd: int, s: float, t: float) -> slice:\n+def compute_axis_overlap(Ns: int, Nd: int, s: float, t: float) -> Tuple[slice, slice]:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>def compute_axis_overlap(Ns: int, Nd: int, s: float, t: float) -> slice:\n    <IND>",
        "target_code_with_indent": "\n<DED>def compute_axis_overlap(Ns: int, Nd: int, s: float, t: float) -> Tuple[slice, slice]:\n    <IND>"
      }
    ]
  }
]