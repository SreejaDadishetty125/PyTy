[
  {
    "project": "bytedance/fedlearner",
    "commit": "f868460f2f7a9bd872c94958c8a9c17eb05bba38",
    "filename": "web_console_v2/api/fedlearner_webconsole/db.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/bytedance-fedlearner/web_console_v2/api/fedlearner_webconsole/db.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "web_console_v2/api/fedlearner_webconsole/db.py:44:18 Incompatible variable type [9]: ignores is declared to have type `List[str]` but is used as type `None`.",
    "message": " ignores is declared to have type `List[str]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 44,
    "warning_line": "def to_dict_mixin(ignores: List[str] = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "db = SQLAlchemy(session_options=SESSION_OPTIONS, engine_options=ENGINE_OPTIONS)\n\n\ndef to_dict_mixin(ignores: List[str] = None,\n                  extras: Dict[str, Callable] = None):\n    if ignores is None:\n        ignores = []\n    if extras is None:\n        extras = {}\n\n    def decorator(cls):\n        \"\"\"A decorator to add a to_dict method to a sqlalchemy model class.\"\"\"\n        def to_dict(self: db.Model):\n            \"\"\"A helper function to convert a sqlalchemy model to dict.\"\"\"\n            dic = {}\n            # Puts all columns into the dict\n            for col in self.__table__.columns:\n                if col.key in ignores:\n                    continue\n                dic[col.key] = getattr(self, col.key)\n            # Puts extra items specified by consumer\n            for extra_key, func in extras.items():\n                dic[extra_key] = func(self)\n            # Converts type\n            for key in dic:\n                value = dic[key]\n                if isinstance(value, datetime):\n                    # If there is no timezone, we should treat it as\n                    # UTC datetime,otherwise it will be calculated\n                    # as local time when converting to timestamp.\n                    # Context: all datetime in db is UTC datetime,\n                    # see details in db.py#turn_db_timezone_to_utc\n                    if value.tzinfo is None:\n                        dic[key] = int(\n                            value.replace(tzinfo=timezone.utc).timestamp())\n                    else:\n                        dic[key] = int(value.timestamp())\n                elif isinstance(value, Message):\n                    dic[key] = MessageToDict(\n                        value,\n                        preserving_proto_field_name=True,\n                        including_default_value_fields=True)\n                elif isinstance(value, Enum):\n                    dic[key] = value.name\n            return dic\n\n        setattr(cls, 'to_dict', to_dict)\n        return cls\n\n    return decorator\n\n",
        "source_code_len": 2027,
        "target_code": "db = SQLAlchemy(session_options=SESSION_OPTIONS, engine_options=ENGINE_OPTIONS)\n\n",
        "target_code_len": 81,
        "diff_format": "@@ -41,51 +37,2 @@\n db = SQLAlchemy(session_options=SESSION_OPTIONS, engine_options=ENGINE_OPTIONS)\n-\n-\n-def to_dict_mixin(ignores: List[str] = None,\n-                  extras: Dict[str, Callable] = None):\n-    if ignores is None:\n-        ignores = []\n-    if extras is None:\n-        extras = {}\n-\n-    def decorator(cls):\n-        \"\"\"A decorator to add a to_dict method to a sqlalchemy model class.\"\"\"\n-        def to_dict(self: db.Model):\n-            \"\"\"A helper function to convert a sqlalchemy model to dict.\"\"\"\n-            dic = {}\n-            # Puts all columns into the dict\n-            for col in self.__table__.columns:\n-                if col.key in ignores:\n-                    continue\n-                dic[col.key] = getattr(self, col.key)\n-            # Puts extra items specified by consumer\n-            for extra_key, func in extras.items():\n-                dic[extra_key] = func(self)\n-            # Converts type\n-            for key in dic:\n-                value = dic[key]\n-                if isinstance(value, datetime):\n-                    # If there is no timezone, we should treat it as\n-                    # UTC datetime,otherwise it will be calculated\n-                    # as local time when converting to timestamp.\n-                    # Context: all datetime in db is UTC datetime,\n-                    # see details in db.py#turn_db_timezone_to_utc\n-                    if value.tzinfo is None:\n-                        dic[key] = int(\n-                            value.replace(tzinfo=timezone.utc).timestamp())\n-                    else:\n-                        dic[key] = int(value.timestamp())\n-                elif isinstance(value, Message):\n-                    dic[key] = MessageToDict(\n-                        value,\n-                        preserving_proto_field_name=True,\n-                        including_default_value_fields=True)\n-                elif isinstance(value, Enum):\n-                    dic[key] = value.name\n-            return dic\n-\n-        setattr(cls, 'to_dict', to_dict)\n-        return cls\n-\n-    return decorator\n \n",
        "source_code_with_indent": "db = SQLAlchemy(session_options=SESSION_OPTIONS, engine_options=ENGINE_OPTIONS)\n\n\ndef to_dict_mixin(ignores: List[str] = None,\n                  extras: Dict[str, Callable] = None):\n    <IND>if ignores is None:\n        <IND>ignores = []\n    <DED>if extras is None:\n        <IND>extras = {}\n\n    <DED>def decorator(cls):\n        <IND>\"\"\"A decorator to add a to_dict method to a sqlalchemy model class.\"\"\"\n        def to_dict(self: db.Model):\n            <IND>\"\"\"A helper function to convert a sqlalchemy model to dict.\"\"\"\n            dic = {}\n            # Puts all columns into the dict\n            for col in self.__table__.columns:\n                <IND>if col.key in ignores:\n                    <IND>continue\n                <DED>dic[col.key] = getattr(self, col.key)\n            # Puts extra items specified by consumer\n            <DED>for extra_key, func in extras.items():\n                <IND>dic[extra_key] = func(self)\n            # Converts type\n            <DED>for key in dic:\n                <IND>value = dic[key]\n                if isinstance(value, datetime):\n                    # If there is no timezone, we should treat it as\n                    # UTC datetime,otherwise it will be calculated\n                    # as local time when converting to timestamp.\n                    # Context: all datetime in db is UTC datetime,\n                    # see details in db.py#turn_db_timezone_to_utc\n                    <IND>if value.tzinfo is None:\n                        <IND>dic[key] = int(\n                            value.replace(tzinfo=timezone.utc).timestamp())\n                    <DED>else:\n                        <IND>dic[key] = int(value.timestamp())\n                <DED><DED>elif isinstance(value, Message):\n                    <IND>dic[key] = MessageToDict(\n                        value,\n                        preserving_proto_field_name=True,\n                        including_default_value_fields=True)\n                <DED>elif isinstance(value, Enum):\n                    <IND>dic[key] = value.name\n            <DED><DED>return dic\n\n        <DED>setattr(cls, 'to_dict', to_dict)\n        return cls\n\n    <DED>return decorator\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "db = SQLAlchemy(session_options=SESSION_OPTIONS, engine_options=ENGINE_OPTIONS)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "bytedance/fedlearner",
    "commit": "f868460f2f7a9bd872c94958c8a9c17eb05bba38",
    "filename": "web_console_v2/api/fedlearner_webconsole/db.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/bytedance-fedlearner/web_console_v2/api/fedlearner_webconsole/db.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "web_console_v2/api/fedlearner_webconsole/db.py:45:18 Incompatible variable type [9]: extras is declared to have type `Dict[str, typing.Callable[..., typing.Any]]` but is used as type `None`.",
    "message": " extras is declared to have type `Dict[str, typing.Callable[..., typing.Any]]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 45,
    "warning_line": "                  extras: Dict[str, Callable] = None):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "db = SQLAlchemy(session_options=SESSION_OPTIONS, engine_options=ENGINE_OPTIONS)\n\n\ndef to_dict_mixin(ignores: List[str] = None,\n                  extras: Dict[str, Callable] = None):\n    if ignores is None:\n        ignores = []\n    if extras is None:\n        extras = {}\n\n    def decorator(cls):\n        \"\"\"A decorator to add a to_dict method to a sqlalchemy model class.\"\"\"\n        def to_dict(self: db.Model):\n            \"\"\"A helper function to convert a sqlalchemy model to dict.\"\"\"\n            dic = {}\n            # Puts all columns into the dict\n            for col in self.__table__.columns:\n                if col.key in ignores:\n                    continue\n                dic[col.key] = getattr(self, col.key)\n            # Puts extra items specified by consumer\n            for extra_key, func in extras.items():\n                dic[extra_key] = func(self)\n            # Converts type\n            for key in dic:\n                value = dic[key]\n                if isinstance(value, datetime):\n                    # If there is no timezone, we should treat it as\n                    # UTC datetime,otherwise it will be calculated\n                    # as local time when converting to timestamp.\n                    # Context: all datetime in db is UTC datetime,\n                    # see details in db.py#turn_db_timezone_to_utc\n                    if value.tzinfo is None:\n                        dic[key] = int(\n                            value.replace(tzinfo=timezone.utc).timestamp())\n                    else:\n                        dic[key] = int(value.timestamp())\n                elif isinstance(value, Message):\n                    dic[key] = MessageToDict(\n                        value,\n                        preserving_proto_field_name=True,\n                        including_default_value_fields=True)\n                elif isinstance(value, Enum):\n                    dic[key] = value.name\n            return dic\n\n        setattr(cls, 'to_dict', to_dict)\n        return cls\n\n    return decorator\n\n",
        "source_code_len": 2027,
        "target_code": "db = SQLAlchemy(session_options=SESSION_OPTIONS, engine_options=ENGINE_OPTIONS)\n\n",
        "target_code_len": 81,
        "diff_format": "@@ -41,51 +37,2 @@\n db = SQLAlchemy(session_options=SESSION_OPTIONS, engine_options=ENGINE_OPTIONS)\n-\n-\n-def to_dict_mixin(ignores: List[str] = None,\n-                  extras: Dict[str, Callable] = None):\n-    if ignores is None:\n-        ignores = []\n-    if extras is None:\n-        extras = {}\n-\n-    def decorator(cls):\n-        \"\"\"A decorator to add a to_dict method to a sqlalchemy model class.\"\"\"\n-        def to_dict(self: db.Model):\n-            \"\"\"A helper function to convert a sqlalchemy model to dict.\"\"\"\n-            dic = {}\n-            # Puts all columns into the dict\n-            for col in self.__table__.columns:\n-                if col.key in ignores:\n-                    continue\n-                dic[col.key] = getattr(self, col.key)\n-            # Puts extra items specified by consumer\n-            for extra_key, func in extras.items():\n-                dic[extra_key] = func(self)\n-            # Converts type\n-            for key in dic:\n-                value = dic[key]\n-                if isinstance(value, datetime):\n-                    # If there is no timezone, we should treat it as\n-                    # UTC datetime,otherwise it will be calculated\n-                    # as local time when converting to timestamp.\n-                    # Context: all datetime in db is UTC datetime,\n-                    # see details in db.py#turn_db_timezone_to_utc\n-                    if value.tzinfo is None:\n-                        dic[key] = int(\n-                            value.replace(tzinfo=timezone.utc).timestamp())\n-                    else:\n-                        dic[key] = int(value.timestamp())\n-                elif isinstance(value, Message):\n-                    dic[key] = MessageToDict(\n-                        value,\n-                        preserving_proto_field_name=True,\n-                        including_default_value_fields=True)\n-                elif isinstance(value, Enum):\n-                    dic[key] = value.name\n-            return dic\n-\n-        setattr(cls, 'to_dict', to_dict)\n-        return cls\n-\n-    return decorator\n \n",
        "source_code_with_indent": "db = SQLAlchemy(session_options=SESSION_OPTIONS, engine_options=ENGINE_OPTIONS)\n\n\ndef to_dict_mixin(ignores: List[str] = None,\n                  extras: Dict[str, Callable] = None):\n    <IND>if ignores is None:\n        <IND>ignores = []\n    <DED>if extras is None:\n        <IND>extras = {}\n\n    <DED>def decorator(cls):\n        <IND>\"\"\"A decorator to add a to_dict method to a sqlalchemy model class.\"\"\"\n        def to_dict(self: db.Model):\n            <IND>\"\"\"A helper function to convert a sqlalchemy model to dict.\"\"\"\n            dic = {}\n            # Puts all columns into the dict\n            for col in self.__table__.columns:\n                <IND>if col.key in ignores:\n                    <IND>continue\n                <DED>dic[col.key] = getattr(self, col.key)\n            # Puts extra items specified by consumer\n            <DED>for extra_key, func in extras.items():\n                <IND>dic[extra_key] = func(self)\n            # Converts type\n            <DED>for key in dic:\n                <IND>value = dic[key]\n                if isinstance(value, datetime):\n                    # If there is no timezone, we should treat it as\n                    # UTC datetime,otherwise it will be calculated\n                    # as local time when converting to timestamp.\n                    # Context: all datetime in db is UTC datetime,\n                    # see details in db.py#turn_db_timezone_to_utc\n                    <IND>if value.tzinfo is None:\n                        <IND>dic[key] = int(\n                            value.replace(tzinfo=timezone.utc).timestamp())\n                    <DED>else:\n                        <IND>dic[key] = int(value.timestamp())\n                <DED><DED>elif isinstance(value, Message):\n                    <IND>dic[key] = MessageToDict(\n                        value,\n                        preserving_proto_field_name=True,\n                        including_default_value_fields=True)\n                <DED>elif isinstance(value, Enum):\n                    <IND>dic[key] = value.name\n            <DED><DED>return dic\n\n        <DED>setattr(cls, 'to_dict', to_dict)\n        return cls\n\n    <DED>return decorator\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "db = SQLAlchemy(session_options=SESSION_OPTIONS, engine_options=ENGINE_OPTIONS)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "bytedance/fedlearner",
    "commit": "f868460f2f7a9bd872c94958c8a9c17eb05bba38",
    "filename": "web_console_v2/api/fedlearner_webconsole/utils/k8s_client.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/bytedance-fedlearner/web_console_v2/api/fedlearner_webconsole/utils/k8s_client.py",
    "file_hunks_size": 11,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "web_console_v2/api/fedlearner_webconsole/utils/k8s_client.py:288:12 Incompatible return type [7]: Expected `typing.Dict[typing.Any, typing.Any]` but got implicit return value of `None`.",
    "message": " Expected `typing.Dict[typing.Any, typing.Any]` but got implicit return value of `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 288,
    "warning_line": "            self._raise_runtime_error(e)"
  },
  {
    "project": "bytedance/fedlearner",
    "commit": "f868460f2f7a9bd872c94958c8a9c17eb05bba38",
    "filename": "web_console_v2/api/fedlearner_webconsole/utils/k8s_client.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/bytedance-fedlearner/web_console_v2/api/fedlearner_webconsole/utils/k8s_client.py",
    "file_hunks_size": 11,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "web_console_v2/api/fedlearner_webconsole/utils/k8s_client.py:302:12 Incompatible return type [7]: Expected `typing.Dict[typing.Any, typing.Any]` but got implicit return value of `None`.",
    "message": " Expected `typing.Dict[typing.Any, typing.Any]` but got implicit return value of `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 302,
    "warning_line": "            self._raise_runtime_error(e)"
  },
  {
    "project": "bytedance/fedlearner",
    "commit": "f868460f2f7a9bd872c94958c8a9c17eb05bba38",
    "filename": "web_console_v2/api/fedlearner_webconsole/utils/k8s_client.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/bytedance-fedlearner/web_console_v2/api/fedlearner_webconsole/utils/k8s_client.py",
    "file_hunks_size": 11,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "web_console_v2/api/fedlearner_webconsole/utils/k8s_client.py:317:12 Incompatible return type [7]: Expected `typing.Dict[typing.Any, typing.Any]` but got implicit return value of `None`.",
    "message": " Expected `typing.Dict[typing.Any, typing.Any]` but got implicit return value of `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 317,
    "warning_line": "            self._raise_runtime_error(e)"
  }
]