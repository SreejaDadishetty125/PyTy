[
  {
    "project": "willmcgugan/rich",
    "commit": "bee681d359e6a980341263ecc0965551e8364b90",
    "filename": "rich/_wrap.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/willmcgugan-rich/rich/_wrap.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rich/_wrap.py:33:22 Unbound name [10]: Name `wrap` is used but not defined in the current scope.",
    "message": " Name `wrap` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 33,
    "warning_line": "    boundaries = [0, *wrap(test, 10), len(test)]",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "    return divides\n\n\nif __name__ == \"__main__\":  # pragma: no cover\n    test = \"      Where there is a Will there is a way. Hello World. There   can be only one.\"\n\n    boundaries = [0, *wrap(test, 10), len(test)]\n    print(boundaries)\n    for start, end in zip(boundaries, boundaries[1:]):\n        line = test[start:end]\n        print(f\"{len(line)}\\t\", repr(line))\n\n",
        "source_code_len": 366,
        "target_code": "    return divides\n",
        "target_code_len": 19,
        "diff_format": "@@ -27,12 +27,1 @@\n     return divides\n-\n-\n-if __name__ == \"__main__\":  # pragma: no cover\n-    test = \"      Where there is a Will there is a way. Hello World. There   can be only one.\"\n-\n-    boundaries = [0, *wrap(test, 10), len(test)]\n-    print(boundaries)\n-    for start, end in zip(boundaries, boundaries[1:]):\n-        line = test[start:end]\n-        print(f\"{len(line)}\\t\", repr(line))\n-\n",
        "source_code_with_indent": "    <DED>return divides\n\n\n<DED>if __name__ == \"__main__\":  # pragma: no cover\n    <IND>test = \"      Where there is a Will there is a way. Hello World. There   can be only one.\"\n\n    boundaries = [0, *wrap(test, 10), len(test)]\n    print(boundaries)\n    for start, end in zip(boundaries, boundaries[1:]):\n        <IND>line = test[start:end]\n        print(f\"{len(line)}\\t\", repr(line))\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>return divides\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "willmcgugan/rich",
    "commit": "bee681d359e6a980341263ecc0965551e8364b90",
    "filename": "rich/markdown.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/willmcgugan-rich/rich/markdown.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rich/markdown.py:167:12 Incompatible return type [7]: Expected `ListElement` but got `CodeBlock`.",
    "message": " Expected `ListElement` but got `CodeBlock`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 167,
    "warning_line": "            return cls(\"default\", markdown.code_theme)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @classmethod\n    def create(cls, markdown: \"Markdown\", node: Any) -> \"ListElement\":\n        if node.info is None:\n",
        "source_code_len": 118,
        "target_code": "    @classmethod\n    def create(cls, markdown: \"Markdown\", node: Any) -> \"CodeBlock\":\n        if node.info is None:\n",
        "target_code_len": 116,
        "diff_format": "@@ -164,3 +164,3 @@\n     @classmethod\n-    def create(cls, markdown: \"Markdown\", node: Any) -> \"ListElement\":\n+    def create(cls, markdown: \"Markdown\", node: Any) -> \"CodeBlock\":\n         if node.info is None:\n",
        "source_code_with_indent": "    @classmethod\n    def create(cls, markdown: \"Markdown\", node: Any) -> \"ListElement\":\n        <IND>if node.info is None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    @classmethod\n    def create(cls, markdown: \"Markdown\", node: Any) -> \"CodeBlock\":\n        <IND>if node.info is None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "willmcgugan/rich",
    "commit": "bee681d359e6a980341263ecc0965551e8364b90",
    "filename": "rich/markdown.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/willmcgugan-rich/rich/markdown.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rich/markdown.py:169:8 Incompatible return type [7]: Expected `ListElement` but got `CodeBlock`.",
    "message": " Expected `ListElement` but got `CodeBlock`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 169,
    "warning_line": "        return cls(lexer_name, markdown.code_theme)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @classmethod\n    def create(cls, markdown: \"Markdown\", node: Any) -> \"ListElement\":\n        if node.info is None:\n",
        "source_code_len": 118,
        "target_code": "    @classmethod\n    def create(cls, markdown: \"Markdown\", node: Any) -> \"CodeBlock\":\n        if node.info is None:\n",
        "target_code_len": 116,
        "diff_format": "@@ -164,3 +164,3 @@\n     @classmethod\n-    def create(cls, markdown: \"Markdown\", node: Any) -> \"ListElement\":\n+    def create(cls, markdown: \"Markdown\", node: Any) -> \"CodeBlock\":\n         if node.info is None:\n",
        "source_code_with_indent": "    @classmethod\n    def create(cls, markdown: \"Markdown\", node: Any) -> \"ListElement\":\n        <IND>if node.info is None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    @classmethod\n    def create(cls, markdown: \"Markdown\", node: Any) -> \"CodeBlock\":\n        <IND>if node.info is None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "willmcgugan/rich",
    "commit": "bee681d359e6a980341263ecc0965551e8364b90",
    "filename": "rich/markdown.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/willmcgugan-rich/rich/markdown.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rich/markdown.py:336:4 Incompatible attribute type [8]: Attribute `elements` declared in class `Markdown` has type `Dict[str, MarkdownElement]` but is used as type `Dict[str, typing.Type[Union[BlockQuote, CodeBlock, Heading, HorizontalRule, ListElement, ListItem, Paragraph]]]`.",
    "message": " Attribute `elements` declared in class `Markdown` has type `Dict[str, MarkdownElement]` but is used as type `Dict[str, typing.Type[Union[BlockQuote, CodeBlock, Heading, HorizontalRule, ListElement, ListItem, Paragraph]]]`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 336,
    "warning_line": "    elements: ClassVar[Dict[str, MarkdownElement]] = {",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from dataclasses import dataclass\nfrom typing import Any, ClassVar, Dict, Iterable, List, Optional, Union\n\n",
        "source_code_len": 107,
        "target_code": "from dataclasses import dataclass\nfrom typing import Any, ClassVar, Dict, Iterable, List, Optional, Type, Union\n\n",
        "target_code_len": 113,
        "diff_format": "@@ -1,3 +1,3 @@\n from dataclasses import dataclass\n-from typing import Any, ClassVar, Dict, Iterable, List, Optional, Union\n+from typing import Any, ClassVar, Dict, Iterable, List, Optional, Type, Union\n \n",
        "source_code_with_indent": "from dataclasses import dataclass\nfrom typing import Any, ClassVar, Dict, Iterable, List, Optional, Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from dataclasses import dataclass\nfrom typing import Any, ClassVar, Dict, Iterable, List, Optional, Type, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    elements: ClassVar[Dict[str, MarkdownElement]] = {\n        \"paragraph\": Paragraph,\n",
        "source_code_len": 88,
        "target_code": "\n    elements: ClassVar[Dict[str, Type[MarkdownElement]]] = {\n        \"paragraph\": Paragraph,\n",
        "target_code_len": 94,
        "diff_format": "@@ -335,3 +335,3 @@\n \n-    elements: ClassVar[Dict[str, MarkdownElement]] = {\n+    elements: ClassVar[Dict[str, Type[MarkdownElement]]] = {\n         \"paragraph\": Paragraph,\n",
        "source_code_with_indent": "\n    <IND>elements: ClassVar[Dict[str, MarkdownElement]] = {\n        \"paragraph\": Paragraph,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <IND>elements: ClassVar[Dict[str, Type[MarkdownElement]]] = {\n        \"paragraph\": Paragraph,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "willmcgugan/rich",
    "commit": "bee681d359e6a980341263ecc0965551e8364b90",
    "filename": "rich/text.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/willmcgugan-rich/rich/text.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rich/text.py:400:8 Incompatible return type [7]: Expected `List[Text]` but got `Lines`.",
    "message": " Expected `List[Text]` but got `Lines`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 400,
    "warning_line": "        return lines",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def split(self, separator=\"\\n\", include_separator: bool = False) -> List[\"Text\"]:\n        \"\"\"Split rich text in to lines, preserving styles.\n",
        "source_code_len": 146,
        "target_code": "\n    def split(self, separator=\"\\n\", include_separator: bool = False) -> Lines:\n        \"\"\"Split rich text in to lines, preserving styles.\n",
        "target_code_len": 139,
        "diff_format": "@@ -368,3 +368,3 @@\n \n-    def split(self, separator=\"\\n\", include_separator: bool = False) -> List[\"Text\"]:\n+    def split(self, separator=\"\\n\", include_separator: bool = False) -> Lines:\n         \"\"\"Split rich text in to lines, preserving styles.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED><DED>def split(self, separator=\"\\n\", include_separator: bool = False) -> List[\"Text\"]:\n        <IND>",
        "target_code_with_indent": "\n    <DED><DED>def split(self, separator=\"\\n\", include_separator: bool = False) -> Lines:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        if separator not in text:\n            return [self.copy()]\n        if text.endswith(separator):\n",
        "source_code_len": 104,
        "target_code": "        if separator not in text:\n            return Lines([self.copy()])\n        if text.endswith(separator):\n",
        "target_code_len": 111,
        "diff_format": "@@ -381,3 +381,3 @@\n         if separator not in text:\n-            return [self.copy()]\n+            return Lines([self.copy()])\n         if text.endswith(separator):\n",
        "source_code_with_indent": "        if separator not in text:\n            <IND>return [self.copy()]\n        <DED>if text.endswith(separator):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        if separator not in text:\n            <IND>return Lines([self.copy()])\n        <DED>if text.endswith(separator):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]