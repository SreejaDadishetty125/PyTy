[
  {
    "project": "apache/tvm",
    "commit": "d05fed22f5f9e29a4c2bb866de478a5b82a8641e",
    "filename": "tests/python/relay/test_type_infer.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/apache-tvm/tests/python/relay/test_type_infer.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/python/relay/test_type_infer.py:190:4 Unbound name [10]: Name `test_generalized_tuple` is used but not defined in the current scope.",
    "message": " Name `test_generalized_tuple` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 190,
    "warning_line": "    test_generalized_tuple()",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            relay.TupleType([tp, tp]))\n\n",
        "source_code_len": 40,
        "target_code": "            relay.TupleType([tp, tp]))\n\n\ndef test_ref():\n    x = relay.var(\"x\", \"float32\")\n    y = relay.var(\"y\", \"float32\")\n    r = relay.RefCreate(x)\n    st = relay.scalar_type(\"float32\")\n    assert relay.ir_pass.infer_type(r).checked_type == relay.RefType(st)\n    g = relay.RefRead(r)\n    assert relay.ir_pass.infer_type(g).checked_type == st\n    w = relay.RefWrite(r, y)\n    assert relay.ir_pass.infer_type(w).checked_type == relay.TupleType([])\n\n",
        "target_code_len": 451,
        "diff_format": "@@ -131,2 +131,14 @@\n             relay.TupleType([tp, tp]))\n+\n+\n+def test_ref():\n+    x = relay.var(\"x\", \"float32\")\n+    y = relay.var(\"y\", \"float32\")\n+    r = relay.RefCreate(x)\n+    st = relay.scalar_type(\"float32\")\n+    assert relay.ir_pass.infer_type(r).checked_type == relay.RefType(st)\n+    g = relay.RefRead(r)\n+    assert relay.ir_pass.infer_type(g).checked_type == st\n+    w = relay.RefWrite(r, y)\n+    assert relay.ir_pass.infer_type(w).checked_type == relay.TupleType([])\n \n",
        "source_code_with_indent": "            relay.TupleType([tp, tp]))\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            relay.TupleType([tp, tp]))\n\n\n<DED>def test_ref():\n    <IND>x = relay.var(\"x\", \"float32\")\n    y = relay.var(\"y\", \"float32\")\n    r = relay.RefCreate(x)\n    st = relay.scalar_type(\"float32\")\n    assert relay.ir_pass.infer_type(r).checked_type == relay.RefType(st)\n    g = relay.RefRead(r)\n    assert relay.ir_pass.infer_type(g).checked_type == st\n    w = relay.RefWrite(r, y)\n    assert relay.ir_pass.infer_type(w).checked_type == relay.TupleType([])\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    test_tuple()\n    test_generalized_tuple()\n    test_incomplete_call()\n    test_generalized_call()\n    test_call_with_type_args()\n    test_free_expr()\n    test_type_args()\n    test_self_reference()\n    test_global_var_recursion()\n    test_equal()\n",
        "source_code_len": 249,
        "target_code": "    test_tuple()\n    test_incomplete_call()\n    test_free_expr()\n    test_type_args()\n    test_global_var_recursion()\n    test_equal()\n    test_ref()\n",
        "target_code_len": 150,
        "diff_format": "@@ -189,10 +201,7 @@\n     test_tuple()\n-    test_generalized_tuple()\n     test_incomplete_call()\n-    test_generalized_call()\n-    test_call_with_type_args()\n     test_free_expr()\n     test_type_args()\n-    test_self_reference()\n     test_global_var_recursion()\n     test_equal()\n+    test_ref()\n",
        "source_code_with_indent": "    test_tuple()\n    test_generalized_tuple()\n    test_incomplete_call()\n    test_generalized_call()\n    test_call_with_type_args()\n    test_free_expr()\n    test_type_args()\n    test_self_reference()\n    test_global_var_recursion()\n    test_equal()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    test_tuple()\n    test_incomplete_call()\n    test_free_expr()\n    test_type_args()\n    test_global_var_recursion()\n    test_equal()\n    test_ref()\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "apache/tvm",
    "commit": "d05fed22f5f9e29a4c2bb866de478a5b82a8641e",
    "filename": "tests/python/relay/test_type_infer.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/apache-tvm/tests/python/relay/test_type_infer.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/python/relay/test_type_infer.py:192:4 Unbound name [10]: Name `test_generalized_call` is used but not defined in the current scope.",
    "message": " Name `test_generalized_call` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 192,
    "warning_line": "    test_generalized_call()",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            relay.TupleType([tp, tp]))\n\n",
        "source_code_len": 40,
        "target_code": "            relay.TupleType([tp, tp]))\n\n\ndef test_ref():\n    x = relay.var(\"x\", \"float32\")\n    y = relay.var(\"y\", \"float32\")\n    r = relay.RefCreate(x)\n    st = relay.scalar_type(\"float32\")\n    assert relay.ir_pass.infer_type(r).checked_type == relay.RefType(st)\n    g = relay.RefRead(r)\n    assert relay.ir_pass.infer_type(g).checked_type == st\n    w = relay.RefWrite(r, y)\n    assert relay.ir_pass.infer_type(w).checked_type == relay.TupleType([])\n\n",
        "target_code_len": 451,
        "diff_format": "@@ -131,2 +131,14 @@\n             relay.TupleType([tp, tp]))\n+\n+\n+def test_ref():\n+    x = relay.var(\"x\", \"float32\")\n+    y = relay.var(\"y\", \"float32\")\n+    r = relay.RefCreate(x)\n+    st = relay.scalar_type(\"float32\")\n+    assert relay.ir_pass.infer_type(r).checked_type == relay.RefType(st)\n+    g = relay.RefRead(r)\n+    assert relay.ir_pass.infer_type(g).checked_type == st\n+    w = relay.RefWrite(r, y)\n+    assert relay.ir_pass.infer_type(w).checked_type == relay.TupleType([])\n \n",
        "source_code_with_indent": "            relay.TupleType([tp, tp]))\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            relay.TupleType([tp, tp]))\n\n\n<DED>def test_ref():\n    <IND>x = relay.var(\"x\", \"float32\")\n    y = relay.var(\"y\", \"float32\")\n    r = relay.RefCreate(x)\n    st = relay.scalar_type(\"float32\")\n    assert relay.ir_pass.infer_type(r).checked_type == relay.RefType(st)\n    g = relay.RefRead(r)\n    assert relay.ir_pass.infer_type(g).checked_type == st\n    w = relay.RefWrite(r, y)\n    assert relay.ir_pass.infer_type(w).checked_type == relay.TupleType([])\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    test_tuple()\n    test_generalized_tuple()\n    test_incomplete_call()\n    test_generalized_call()\n    test_call_with_type_args()\n    test_free_expr()\n    test_type_args()\n    test_self_reference()\n    test_global_var_recursion()\n    test_equal()\n",
        "source_code_len": 249,
        "target_code": "    test_tuple()\n    test_incomplete_call()\n    test_free_expr()\n    test_type_args()\n    test_global_var_recursion()\n    test_equal()\n    test_ref()\n",
        "target_code_len": 150,
        "diff_format": "@@ -189,10 +201,7 @@\n     test_tuple()\n-    test_generalized_tuple()\n     test_incomplete_call()\n-    test_generalized_call()\n-    test_call_with_type_args()\n     test_free_expr()\n     test_type_args()\n-    test_self_reference()\n     test_global_var_recursion()\n     test_equal()\n+    test_ref()\n",
        "source_code_with_indent": "    test_tuple()\n    test_generalized_tuple()\n    test_incomplete_call()\n    test_generalized_call()\n    test_call_with_type_args()\n    test_free_expr()\n    test_type_args()\n    test_self_reference()\n    test_global_var_recursion()\n    test_equal()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    test_tuple()\n    test_incomplete_call()\n    test_free_expr()\n    test_type_args()\n    test_global_var_recursion()\n    test_equal()\n    test_ref()\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "apache/tvm",
    "commit": "d05fed22f5f9e29a4c2bb866de478a5b82a8641e",
    "filename": "tests/python/relay/test_type_infer.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/apache-tvm/tests/python/relay/test_type_infer.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/python/relay/test_type_infer.py:193:4 Unbound name [10]: Name `test_call_with_type_args` is used but not defined in the current scope.",
    "message": " Name `test_call_with_type_args` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 193,
    "warning_line": "    test_call_with_type_args()",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            relay.TupleType([tp, tp]))\n\n",
        "source_code_len": 40,
        "target_code": "            relay.TupleType([tp, tp]))\n\n\ndef test_ref():\n    x = relay.var(\"x\", \"float32\")\n    y = relay.var(\"y\", \"float32\")\n    r = relay.RefCreate(x)\n    st = relay.scalar_type(\"float32\")\n    assert relay.ir_pass.infer_type(r).checked_type == relay.RefType(st)\n    g = relay.RefRead(r)\n    assert relay.ir_pass.infer_type(g).checked_type == st\n    w = relay.RefWrite(r, y)\n    assert relay.ir_pass.infer_type(w).checked_type == relay.TupleType([])\n\n",
        "target_code_len": 451,
        "diff_format": "@@ -131,2 +131,14 @@\n             relay.TupleType([tp, tp]))\n+\n+\n+def test_ref():\n+    x = relay.var(\"x\", \"float32\")\n+    y = relay.var(\"y\", \"float32\")\n+    r = relay.RefCreate(x)\n+    st = relay.scalar_type(\"float32\")\n+    assert relay.ir_pass.infer_type(r).checked_type == relay.RefType(st)\n+    g = relay.RefRead(r)\n+    assert relay.ir_pass.infer_type(g).checked_type == st\n+    w = relay.RefWrite(r, y)\n+    assert relay.ir_pass.infer_type(w).checked_type == relay.TupleType([])\n \n",
        "source_code_with_indent": "            relay.TupleType([tp, tp]))\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            relay.TupleType([tp, tp]))\n\n\n<DED>def test_ref():\n    <IND>x = relay.var(\"x\", \"float32\")\n    y = relay.var(\"y\", \"float32\")\n    r = relay.RefCreate(x)\n    st = relay.scalar_type(\"float32\")\n    assert relay.ir_pass.infer_type(r).checked_type == relay.RefType(st)\n    g = relay.RefRead(r)\n    assert relay.ir_pass.infer_type(g).checked_type == st\n    w = relay.RefWrite(r, y)\n    assert relay.ir_pass.infer_type(w).checked_type == relay.TupleType([])\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    test_tuple()\n    test_generalized_tuple()\n    test_incomplete_call()\n    test_generalized_call()\n    test_call_with_type_args()\n    test_free_expr()\n    test_type_args()\n    test_self_reference()\n    test_global_var_recursion()\n    test_equal()\n",
        "source_code_len": 249,
        "target_code": "    test_tuple()\n    test_incomplete_call()\n    test_free_expr()\n    test_type_args()\n    test_global_var_recursion()\n    test_equal()\n    test_ref()\n",
        "target_code_len": 150,
        "diff_format": "@@ -189,10 +201,7 @@\n     test_tuple()\n-    test_generalized_tuple()\n     test_incomplete_call()\n-    test_generalized_call()\n-    test_call_with_type_args()\n     test_free_expr()\n     test_type_args()\n-    test_self_reference()\n     test_global_var_recursion()\n     test_equal()\n+    test_ref()\n",
        "source_code_with_indent": "    test_tuple()\n    test_generalized_tuple()\n    test_incomplete_call()\n    test_generalized_call()\n    test_call_with_type_args()\n    test_free_expr()\n    test_type_args()\n    test_self_reference()\n    test_global_var_recursion()\n    test_equal()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    test_tuple()\n    test_incomplete_call()\n    test_free_expr()\n    test_type_args()\n    test_global_var_recursion()\n    test_equal()\n    test_ref()\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "apache/tvm",
    "commit": "d05fed22f5f9e29a4c2bb866de478a5b82a8641e",
    "filename": "tests/python/relay/test_type_infer.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/apache-tvm/tests/python/relay/test_type_infer.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/python/relay/test_type_infer.py:196:4 Unbound name [10]: Name `test_self_reference` is used but not defined in the current scope.",
    "message": " Name `test_self_reference` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 196,
    "warning_line": "    test_self_reference()",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            relay.TupleType([tp, tp]))\n\n",
        "source_code_len": 40,
        "target_code": "            relay.TupleType([tp, tp]))\n\n\ndef test_ref():\n    x = relay.var(\"x\", \"float32\")\n    y = relay.var(\"y\", \"float32\")\n    r = relay.RefCreate(x)\n    st = relay.scalar_type(\"float32\")\n    assert relay.ir_pass.infer_type(r).checked_type == relay.RefType(st)\n    g = relay.RefRead(r)\n    assert relay.ir_pass.infer_type(g).checked_type == st\n    w = relay.RefWrite(r, y)\n    assert relay.ir_pass.infer_type(w).checked_type == relay.TupleType([])\n\n",
        "target_code_len": 451,
        "diff_format": "@@ -131,2 +131,14 @@\n             relay.TupleType([tp, tp]))\n+\n+\n+def test_ref():\n+    x = relay.var(\"x\", \"float32\")\n+    y = relay.var(\"y\", \"float32\")\n+    r = relay.RefCreate(x)\n+    st = relay.scalar_type(\"float32\")\n+    assert relay.ir_pass.infer_type(r).checked_type == relay.RefType(st)\n+    g = relay.RefRead(r)\n+    assert relay.ir_pass.infer_type(g).checked_type == st\n+    w = relay.RefWrite(r, y)\n+    assert relay.ir_pass.infer_type(w).checked_type == relay.TupleType([])\n \n",
        "source_code_with_indent": "            relay.TupleType([tp, tp]))\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            relay.TupleType([tp, tp]))\n\n\n<DED>def test_ref():\n    <IND>x = relay.var(\"x\", \"float32\")\n    y = relay.var(\"y\", \"float32\")\n    r = relay.RefCreate(x)\n    st = relay.scalar_type(\"float32\")\n    assert relay.ir_pass.infer_type(r).checked_type == relay.RefType(st)\n    g = relay.RefRead(r)\n    assert relay.ir_pass.infer_type(g).checked_type == st\n    w = relay.RefWrite(r, y)\n    assert relay.ir_pass.infer_type(w).checked_type == relay.TupleType([])\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    test_tuple()\n    test_generalized_tuple()\n    test_incomplete_call()\n    test_generalized_call()\n    test_call_with_type_args()\n    test_free_expr()\n    test_type_args()\n    test_self_reference()\n    test_global_var_recursion()\n    test_equal()\n",
        "source_code_len": 249,
        "target_code": "    test_tuple()\n    test_incomplete_call()\n    test_free_expr()\n    test_type_args()\n    test_global_var_recursion()\n    test_equal()\n    test_ref()\n",
        "target_code_len": 150,
        "diff_format": "@@ -189,10 +201,7 @@\n     test_tuple()\n-    test_generalized_tuple()\n     test_incomplete_call()\n-    test_generalized_call()\n-    test_call_with_type_args()\n     test_free_expr()\n     test_type_args()\n-    test_self_reference()\n     test_global_var_recursion()\n     test_equal()\n+    test_ref()\n",
        "source_code_with_indent": "    test_tuple()\n    test_generalized_tuple()\n    test_incomplete_call()\n    test_generalized_call()\n    test_call_with_type_args()\n    test_free_expr()\n    test_type_args()\n    test_self_reference()\n    test_global_var_recursion()\n    test_equal()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    test_tuple()\n    test_incomplete_call()\n    test_free_expr()\n    test_type_args()\n    test_global_var_recursion()\n    test_equal()\n    test_ref()\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]