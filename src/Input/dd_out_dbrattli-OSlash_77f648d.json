[
  {
    "project": "dbrattli/OSlash",
    "commit": "77f648dfc551f4f89fb4557fb7c60e4803a98724",
    "filename": "oslash/writer.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/dbrattli-OSlash/oslash/writer.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "oslash/writer.py:37:23 Incompatible parameter type [6]: Expected `Union[oslash.abc.monoid.Monoid, str]` for 2nd positional only parameter to call `Writer.__init__` but got `Variable[W]`.",
    "message": " Expected `Union[oslash.abc.monoid.Monoid, str]` for 2nd positional only parameter to call `Writer.__init__` but got `Variable[W]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 37,
    "warning_line": "        return Writer(*func((value, log)))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def map(self, func: Callable[[Tuple], Tuple[B, W]]) -> 'Writer':\n        \"\"\"Map a function func over the Writer value.\n",
        "source_code_len": 124,
        "target_code": "\n    def map(self, func: Callable[[Tuple[Any, Log]], Tuple[Any, Log]]) -> 'Writer':\n        \"\"\"Map a function func over the Writer value.\n",
        "target_code_len": 138,
        "diff_format": "@@ -26,3 +22,3 @@\n \n-    def map(self, func: Callable[[Tuple], Tuple[B, W]]) -> 'Writer':\n+    def map(self, func: Callable[[Tuple[Any, Log]], Tuple[Any, Log]]) -> 'Writer':\n         \"\"\"Map a function func over the Writer value.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def map(self, func: Callable[[Tuple], Tuple[B, W]]) -> 'Writer':\n        <IND>",
        "target_code_with_indent": "\n    <DED>def map(self, func: Callable[[Tuple[Any, Log]], Tuple[Any, Log]]) -> 'Writer':\n        <IND>"
      }
    ]
  },
  {
    "project": "dbrattli/OSlash",
    "commit": "77f648dfc551f4f89fb4557fb7c60e4803a98724",
    "filename": "oslash/writer.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/dbrattli-OSlash/oslash/writer.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "oslash/writer.py:48:29 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `str.__add__` but got `Union[oslash.abc.monoid.Monoid, str]`.",
    "message": " Expected `str` for 1st positional only parameter to call `str.__add__` but got `Union[oslash.abc.monoid.Monoid, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 48,
    "warning_line": "        return Writer(b, w + w_)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import Callable, Tuple, TypeVar, Any, Union\n\n",
        "source_code_len": 57,
        "target_code": "from typing import Callable, Tuple, Any, Union, cast\n\n",
        "target_code_len": 54,
        "diff_format": "@@ -1,2 +1,2 @@\n-from typing import Callable, Tuple, TypeVar, Any, Union\n+from typing import Callable, Tuple, Any, Union, cast\n \n",
        "source_code_with_indent": "from typing import Callable, Tuple, TypeVar, Any, Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Callable, Tuple, Any, Union, cast\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "from .util import Unit\n\nA = TypeVar('A')\nB = TypeVar('B')\nW = TypeVar('W')\n\n",
        "source_code_len": 76,
        "target_code": "from .util import Unit\n\n",
        "target_code_len": 24,
        "diff_format": "@@ -6,6 +6,2 @@\n from .util import Unit\n-\n-A = TypeVar('A')\n-B = TypeVar('B')\n-W = TypeVar('W')\n \n",
        "source_code_with_indent": "from .util import Unit\n\nA = TypeVar('A')\nB = TypeVar('B')\nW = TypeVar('W')\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from .util import Unit\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def map(self, func: Callable[[Tuple], Tuple[B, W]]) -> 'Writer':\n        \"\"\"Map a function func over the Writer value.\n",
        "source_code_len": 124,
        "target_code": "\n    def map(self, func: Callable[[Tuple[Any, Log]], Tuple[Any, Log]]) -> 'Writer':\n        \"\"\"Map a function func over the Writer value.\n",
        "target_code_len": 138,
        "diff_format": "@@ -26,3 +22,3 @@\n \n-    def map(self, func: Callable[[Tuple], Tuple[B, W]]) -> 'Writer':\n+    def map(self, func: Callable[[Tuple[Any, Log]], Tuple[Any, Log]]) -> 'Writer':\n         \"\"\"Map a function func over the Writer value.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def map(self, func: Callable[[Tuple], Tuple[B, W]]) -> 'Writer':\n        <IND>",
        "target_code_with_indent": "\n    <DED>def map(self, func: Callable[[Tuple[Any, Log]], Tuple[Any, Log]]) -> 'Writer':\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"\"\"\n        value, log = self.run()\n        return Writer(*func((value, log)))\n\n    def bind(self, func: Callable[[A], 'Writer']) -> 'Writer':\n        \"\"\"Flat is better than nested.\n",
        "source_code_len": 190,
        "target_code": "        \"\"\"\n        a, w = self.run()\n        b, _w = func((a, w))\n        return Writer(b, _w)\n\n    def bind(self, func: Callable[[Any], 'Writer']) -> 'Writer':\n        \"\"\"Flat is better than nested.\n",
        "target_code_len": 201,
        "diff_format": "@@ -35,6 +31,7 @@\n         \"\"\"\n-        value, log = self.run()\n-        return Writer(*func((value, log)))\n+        a, w = self.run()\n+        b, _w = func((a, w))\n+        return Writer(b, _w)\n \n-    def bind(self, func: Callable[[A], 'Writer']) -> 'Writer':\n+    def bind(self, func: Callable[[Any], 'Writer']) -> 'Writer':\n         \"\"\"Flat is better than nested.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n        value, log = self.run()\n        return Writer(*func((value, log)))\n\n    <DED>def bind(self, func: Callable[[A], 'Writer']) -> 'Writer':\n        <IND>",
        "target_code_with_indent": "\n        a, w = self.run()\n        b, _w = func((a, w))\n        return Writer(b, _w)\n\n    <DED>def bind(self, func: Callable[[Any], 'Writer']) -> 'Writer':\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        b, w_ = func(a).run()\n        return Writer(b, w + w_)\n\n",
        "source_code_len": 64,
        "target_code": "        b, w_ = func(a).run()\n\n        if isinstance(w_, Monoid):\n            w__ = cast(Monoid, w).append(w_)\n        else:\n            w__ = w + w_\n\n        return Writer(b, w__)\n\n",
        "target_code_len": 182,
        "diff_format": "@@ -47,3 +44,9 @@\n         b, w_ = func(a).run()\n-        return Writer(b, w + w_)\n+\n+        if isinstance(w_, Monoid):\n+            w__ = cast(Monoid, w).append(w_)\n+        else:\n+            w__ = w + w_\n+\n+        return Writer(b, w__)\n \n",
        "source_code_with_indent": "        b, w_ = func(a).run()\n        return Writer(b, w + w_)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        b, w_ = func(a).run()\n\n        if isinstance(w_, Monoid):\n            <IND>w__ = cast(Monoid, w).append(w_)\n        <DED>else:\n            <IND>w__ = w + w_\n\n        <DED>return Writer(b, w__)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def append(self, other: W) -> W:\n        return self + other\n",
        "source_code_len": 66,
        "target_code": "\n    def append(self, other: 'Writer') -> 'Writer':\n        return self + other\n",
        "target_code_len": 80,
        "diff_format": "@@ -59,3 +62,3 @@\n \n-    def append(self, other: W) -> W:\n+    def append(self, other: 'Writer') -> 'Writer':\n         return self + other\n",
        "source_code_with_indent": "\n    <DED>def append(self, other: W) -> W:\n        <IND>return self + other\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def append(self, other: 'Writer') -> 'Writer':\n        <IND>return self + other\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @staticmethod\n    def apply_log(a: tuple, func: Callable[[A], Tuple[B, W]]) -> Tuple[B, W]:\n        \"\"\"Apply a function to a value with a log.\n",
        "source_code_len": 147,
        "target_code": "    @staticmethod\n    def apply_log(a: tuple, func: Callable[[Any], Tuple[Any, Log]]) -> Tuple[Any, Log]:\n        \"\"\"Apply a function to a value with a log.\n",
        "target_code_len": 157,
        "diff_format": "@@ -75,3 +78,3 @@\n     @staticmethod\n-    def apply_log(a: tuple, func: Callable[[A], Tuple[B, W]]) -> Tuple[B, W]:\n+    def apply_log(a: tuple, func: Callable[[Any], Tuple[Any, Log]]) -> Tuple[Any, Log]:\n         \"\"\"Apply a function to a value with a log.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "    <DED>@staticmethod\n    def apply_log(a: tuple, func: Callable[[A], Tuple[B, W]]) -> Tuple[B, W]:\n        <IND>",
        "target_code_with_indent": "    <DED>@staticmethod\n    def apply_log(a: tuple, func: Callable[[Any], Tuple[Any, Log]]) -> Tuple[Any, Log]:\n        <IND>"
      }
    ]
  }
]