[
  {
    "project": "pytorch/ignite",
    "commit": "825be07f639d41b135b6fdafcd691088b09f6447",
    "filename": "ignite/contrib/handlers/mlflow_logger.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pytorch-ignite/ignite/contrib/handlers/mlflow_logger.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "ignite/contrib/handlers/mlflow_logger.py:225:22 Call error [29]: `Optional[typing.Callable[..., typing.Any]]` is not a function.",
    "message": " `Optional[typing.Callable[..., typing.Any]]` is not a function.",
    "rule_id": "Call error [29]",
    "warning_line_no": 225,
    "warning_line": "        global_step = self.global_step_transform(engine, event_name)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n        global_step = self.global_step_transform(engine, event_name)\n\n",
        "source_code_len": 71,
        "target_code": "\n        global_step = self.global_step_transform(engine, event_name)  # type: ignore[misc]\n\n",
        "target_code_len": 93,
        "diff_format": "@@ -224,3 +224,3 @@\n \n-        global_step = self.global_step_transform(engine, event_name)\n+        global_step = self.global_step_transform(engine, event_name)  # type: ignore[misc]\n \n",
        "source_code_with_indent": "\n        global_step = self.global_step_transform(engine, event_name)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        global_step = self.global_step_transform(engine, event_name)  # type: ignore[misc]\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pytorch/ignite",
    "commit": "825be07f639d41b135b6fdafcd691088b09f6447",
    "filename": "ignite/contrib/handlers/mlflow_logger.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pytorch-ignite/ignite/contrib/handlers/mlflow_logger.py",
    "file_hunks_size": 10,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ignite/contrib/handlers/mlflow_logger.py:300:58 Incompatible parameter type [6]: Expected `ignite.engine.events.Events` for 1st positional only parameter to call `ignite.engine.events.State.get_event_attrib_value` but got `Union[ignite.engine.events.EventEnum, str]`.",
    "message": " Expected `ignite.engine.events.Events` for 1st positional only parameter to call `ignite.engine.events.State.get_event_attrib_value` but got `Union[ignite.engine.events.EventEnum, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 300,
    "warning_line": "        global_step = engine.state.get_event_attrib_value(event_name)"
  },
  {
    "project": "pytorch/ignite",
    "commit": "825be07f639d41b135b6fdafcd691088b09f6447",
    "filename": "ignite/contrib/handlers/neptune_logger.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pytorch-ignite/ignite/contrib/handlers/neptune_logger.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "ignite/contrib/handlers/neptune_logger.py:336:22 Call error [29]: `Optional[typing.Callable[..., typing.Any]]` is not a function.",
    "message": " `Optional[typing.Callable[..., typing.Any]]` is not a function.",
    "rule_id": "Call error [29]",
    "warning_line_no": 336,
    "warning_line": "        global_step = self.global_step_transform(engine, event_name)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n        global_step = self.global_step_transform(engine, event_name)\n\n",
        "source_code_len": 71,
        "target_code": "\n        global_step = self.global_step_transform(engine, event_name)  # type: ignore[misc]\n\n",
        "target_code_len": 93,
        "diff_format": "@@ -335,3 +335,3 @@\n \n-        global_step = self.global_step_transform(engine, event_name)\n+        global_step = self.global_step_transform(engine, event_name)  # type: ignore[misc]\n \n",
        "source_code_with_indent": "\n        global_step = self.global_step_transform(engine, event_name)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        global_step = self.global_step_transform(engine, event_name)  # type: ignore[misc]\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pytorch/ignite",
    "commit": "825be07f639d41b135b6fdafcd691088b09f6447",
    "filename": "ignite/contrib/handlers/neptune_logger.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pytorch-ignite/ignite/contrib/handlers/neptune_logger.py",
    "file_hunks_size": 10,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ignite/contrib/handlers/neptune_logger.py:401:58 Incompatible parameter type [6]: Expected `ignite.engine.events.Events` for 1st positional only parameter to call `ignite.engine.events.State.get_event_attrib_value` but got `Union[ignite.engine.events.EventEnum, str]`.",
    "message": " Expected `ignite.engine.events.Events` for 1st positional only parameter to call `ignite.engine.events.State.get_event_attrib_value` but got `Union[ignite.engine.events.EventEnum, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 401,
    "warning_line": "        global_step = engine.state.get_event_attrib_value(event_name)"
  },
  {
    "project": "pytorch/ignite",
    "commit": "825be07f639d41b135b6fdafcd691088b09f6447",
    "filename": "ignite/contrib/handlers/neptune_logger.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pytorch-ignite/ignite/contrib/handlers/neptune_logger.py",
    "file_hunks_size": 10,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ignite/contrib/handlers/neptune_logger.py:456:58 Incompatible parameter type [6]: Expected `ignite.engine.events.Events` for 1st positional only parameter to call `ignite.engine.events.State.get_event_attrib_value` but got `Union[ignite.engine.events.EventEnum, str]`.",
    "message": " Expected `ignite.engine.events.Events` for 1st positional only parameter to call `ignite.engine.events.State.get_event_attrib_value` but got `Union[ignite.engine.events.EventEnum, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 456,
    "warning_line": "        global_step = engine.state.get_event_attrib_value(event_name)"
  },
  {
    "project": "pytorch/ignite",
    "commit": "825be07f639d41b135b6fdafcd691088b09f6447",
    "filename": "ignite/contrib/handlers/polyaxon_logger.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pytorch-ignite/ignite/contrib/handlers/polyaxon_logger.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "ignite/contrib/handlers/polyaxon_logger.py:217:22 Call error [29]: `Optional[typing.Callable[..., typing.Any]]` is not a function.",
    "message": " `Optional[typing.Callable[..., typing.Any]]` is not a function.",
    "rule_id": "Call error [29]",
    "warning_line_no": 217,
    "warning_line": "        global_step = self.global_step_transform(engine, event_name)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n        global_step = self.global_step_transform(engine, event_name)\n\n",
        "source_code_len": 71,
        "target_code": "\n        global_step = self.global_step_transform(engine, event_name)  # type: ignore[misc]\n\n",
        "target_code_len": 93,
        "diff_format": "@@ -216,3 +216,3 @@\n \n-        global_step = self.global_step_transform(engine, event_name)\n+        global_step = self.global_step_transform(engine, event_name)  # type: ignore[misc]\n \n",
        "source_code_with_indent": "\n        global_step = self.global_step_transform(engine, event_name)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        global_step = self.global_step_transform(engine, event_name)  # type: ignore[misc]\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pytorch/ignite",
    "commit": "825be07f639d41b135b6fdafcd691088b09f6447",
    "filename": "ignite/contrib/handlers/polyaxon_logger.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pytorch-ignite/ignite/contrib/handlers/polyaxon_logger.py",
    "file_hunks_size": 8,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ignite/contrib/handlers/polyaxon_logger.py:228:66 Incompatible parameter type [6]: Expected `int` for 2nd positional only parameter to call `dict.__setitem__` but got `numbers.Number`.",
    "message": " Expected `int` for 2nd positional only parameter to call `dict.__setitem__` but got `numbers.Number`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 228,
    "warning_line": "                rendered_metrics[\"{}/{}\".format(self.tag, key)] = value"
  },
  {
    "project": "pytorch/ignite",
    "commit": "825be07f639d41b135b6fdafcd691088b09f6447",
    "filename": "ignite/contrib/handlers/polyaxon_logger.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pytorch-ignite/ignite/contrib/handlers/polyaxon_logger.py",
    "file_hunks_size": 8,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ignite/contrib/handlers/polyaxon_logger.py:279:58 Incompatible parameter type [6]: Expected `ignite.engine.events.Events` for 1st positional only parameter to call `ignite.engine.events.State.get_event_attrib_value` but got `Union[ignite.engine.events.EventEnum, str]`.",
    "message": " Expected `ignite.engine.events.Events` for 1st positional only parameter to call `ignite.engine.events.State.get_event_attrib_value` but got `Union[ignite.engine.events.EventEnum, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 279,
    "warning_line": "        global_step = engine.state.get_event_attrib_value(event_name)"
  },
  {
    "project": "pytorch/ignite",
    "commit": "825be07f639d41b135b6fdafcd691088b09f6447",
    "filename": "ignite/contrib/handlers/tensorboard_logger.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pytorch-ignite/ignite/contrib/handlers/tensorboard_logger.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "ignite/contrib/handlers/tensorboard_logger.py:279:22 Call error [29]: `Optional[typing.Callable[..., typing.Any]]` is not a function.",
    "message": " `Optional[typing.Callable[..., typing.Any]]` is not a function.",
    "rule_id": "Call error [29]",
    "warning_line_no": 279,
    "warning_line": "        global_step = self.global_step_transform(engine, event_name)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n        global_step = self.global_step_transform(engine, event_name)\n        if not isinstance(global_step, int):\n",
        "source_code_len": 115,
        "target_code": "\n        global_step = self.global_step_transform(engine, event_name)  # type: ignore[misc]\n        if not isinstance(global_step, int):\n",
        "target_code_len": 137,
        "diff_format": "@@ -278,3 +278,3 @@\n \n-        global_step = self.global_step_transform(engine, event_name)\n+        global_step = self.global_step_transform(engine, event_name)  # type: ignore[misc]\n         if not isinstance(global_step, int):\n",
        "source_code_with_indent": "\n        global_step = self.global_step_transform(engine, event_name)\n        if not isinstance(global_step, int):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        global_step = self.global_step_transform(engine, event_name)  # type: ignore[misc]\n        if not isinstance(global_step, int):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pytorch/ignite",
    "commit": "825be07f639d41b135b6fdafcd691088b09f6447",
    "filename": "ignite/contrib/handlers/tensorboard_logger.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pytorch-ignite/ignite/contrib/handlers/tensorboard_logger.py",
    "file_hunks_size": 11,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ignite/contrib/handlers/tensorboard_logger.py:335:58 Incompatible parameter type [6]: Expected `ignite.engine.events.Events` for 1st positional only parameter to call `ignite.engine.events.State.get_event_attrib_value` but got `Union[ignite.engine.events.EventEnum, str]`.",
    "message": " Expected `ignite.engine.events.Events` for 1st positional only parameter to call `ignite.engine.events.State.get_event_attrib_value` but got `Union[ignite.engine.events.EventEnum, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 335,
    "warning_line": "        global_step = engine.state.get_event_attrib_value(event_name)"
  },
  {
    "project": "pytorch/ignite",
    "commit": "825be07f639d41b135b6fdafcd691088b09f6447",
    "filename": "ignite/contrib/handlers/tensorboard_logger.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pytorch-ignite/ignite/contrib/handlers/tensorboard_logger.py",
    "file_hunks_size": 11,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ignite/contrib/handlers/tensorboard_logger.py:382:58 Incompatible parameter type [6]: Expected `ignite.engine.events.Events` for 1st positional only parameter to call `ignite.engine.events.State.get_event_attrib_value` but got `Union[ignite.engine.events.EventEnum, str]`.",
    "message": " Expected `ignite.engine.events.Events` for 1st positional only parameter to call `ignite.engine.events.State.get_event_attrib_value` but got `Union[ignite.engine.events.EventEnum, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 382,
    "warning_line": "        global_step = engine.state.get_event_attrib_value(event_name)"
  },
  {
    "project": "pytorch/ignite",
    "commit": "825be07f639d41b135b6fdafcd691088b09f6447",
    "filename": "ignite/contrib/handlers/tensorboard_logger.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pytorch-ignite/ignite/contrib/handlers/tensorboard_logger.py",
    "file_hunks_size": 11,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ignite/contrib/handlers/tensorboard_logger.py:426:58 Incompatible parameter type [6]: Expected `ignite.engine.events.Events` for 1st positional only parameter to call `ignite.engine.events.State.get_event_attrib_value` but got `Union[ignite.engine.events.EventEnum, str]`.",
    "message": " Expected `ignite.engine.events.Events` for 1st positional only parameter to call `ignite.engine.events.State.get_event_attrib_value` but got `Union[ignite.engine.events.EventEnum, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 426,
    "warning_line": "        global_step = engine.state.get_event_attrib_value(event_name)"
  },
  {
    "project": "pytorch/ignite",
    "commit": "825be07f639d41b135b6fdafcd691088b09f6447",
    "filename": "ignite/contrib/handlers/tensorboard_logger.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pytorch-ignite/ignite/contrib/handlers/tensorboard_logger.py",
    "file_hunks_size": 11,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ignite/contrib/handlers/tensorboard_logger.py:475:58 Incompatible parameter type [6]: Expected `ignite.engine.events.Events` for 1st positional only parameter to call `ignite.engine.events.State.get_event_attrib_value` but got `Union[ignite.engine.events.EventEnum, str]`.",
    "message": " Expected `ignite.engine.events.Events` for 1st positional only parameter to call `ignite.engine.events.State.get_event_attrib_value` but got `Union[ignite.engine.events.EventEnum, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 475,
    "warning_line": "        global_step = engine.state.get_event_attrib_value(event_name)"
  },
  {
    "project": "pytorch/ignite",
    "commit": "825be07f639d41b135b6fdafcd691088b09f6447",
    "filename": "ignite/contrib/handlers/tensorboard_logger.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pytorch-ignite/ignite/contrib/handlers/tensorboard_logger.py",
    "file_hunks_size": 11,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ignite/contrib/handlers/tensorboard_logger.py:519:58 Incompatible parameter type [6]: Expected `ignite.engine.events.Events` for 1st positional only parameter to call `ignite.engine.events.State.get_event_attrib_value` but got `Union[ignite.engine.events.EventEnum, str]`.",
    "message": " Expected `ignite.engine.events.Events` for 1st positional only parameter to call `ignite.engine.events.State.get_event_attrib_value` but got `Union[ignite.engine.events.EventEnum, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 519,
    "warning_line": "        global_step = engine.state.get_event_attrib_value(event_name)"
  },
  {
    "project": "pytorch/ignite",
    "commit": "825be07f639d41b135b6fdafcd691088b09f6447",
    "filename": "ignite/contrib/handlers/time_profilers.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pytorch-ignite/ignite/contrib/handlers/time_profilers.py",
    "file_hunks_size": 30,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ignite/contrib/handlers/time_profilers.py:103:31 Unsupported operand [58]: `*` is not supported for operand types `typing.Optional[int]` and `typing.Optional[int]`.",
    "message": " `*` is not supported for operand types `typing.Optional[int]` and `typing.Optional[int]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 103,
    "warning_line": "        self.total_num_iters = self.max_epochs * num_iters_per_epoch"
  },
  {
    "project": "pytorch/ignite",
    "commit": "825be07f639d41b135b6fdafcd691088b09f6447",
    "filename": "ignite/contrib/handlers/time_profilers.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pytorch-ignite/ignite/contrib/handlers/time_profilers.py",
    "file_hunks_size": 30,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ignite/contrib/handlers/time_profilers.py:104:20 Incompatible parameter type [6]: Expected `int` for 1st positional only parameter to call `BasicTimeProfiler._reset` but got `typing.Optional[int]`.",
    "message": " Expected `int` for 1st positional only parameter to call `BasicTimeProfiler._reset` but got `typing.Optional[int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 104,
    "warning_line": "        self._reset(self.max_epochs, self.total_num_iters)"
  },
  {
    "project": "pytorch/ignite",
    "commit": "825be07f639d41b135b6fdafcd691088b09f6447",
    "filename": "ignite/contrib/handlers/time_profilers.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pytorch-ignite/ignite/contrib/handlers/time_profilers.py",
    "file_hunks_size": 30,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ignite/contrib/handlers/time_profilers.py:216:20 Unsupported operand [58]: `>` is not supported for operand types `Sequence[typing.Any]` and `int`.",
    "message": " `>` is not supported for operand types `Sequence[typing.Any]` and `int`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 216,
    "warning_line": "        data = data[data > 0]"
  },
  {
    "project": "pytorch/ignite",
    "commit": "825be07f639d41b135b6fdafcd691088b09f6447",
    "filename": "ignite/contrib/handlers/time_profilers.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pytorch-ignite/ignite/contrib/handlers/time_profilers.py",
    "file_hunks_size": 30,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ignite/contrib/handlers/time_profilers.py:548:87 Incompatible parameter type [6]: Expected `ignite.engine.events.Events` for 2nd positional only parameter to call `HandlersTimeProfiler._create_wrapped_handler` but got `ignite.engine.events.EventEnum`.",
    "message": " Expected `ignite.engine.events.Events` for 2nd positional only parameter to call `HandlersTimeProfiler._create_wrapped_handler` but got `ignite.engine.events.EventEnum`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 548,
    "warning_line": "                    engine._event_handlers[e][i] = (self._create_wrapped_handler(func, e), args, kwargs)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _create_wrapped_handler(self, handler: Callable, event: Events) -> Callable:\n        @functools.wraps(handler)\n",
        "source_code_len": 120,
        "target_code": "\n    def _create_wrapped_handler(self, handler: Callable, event: EventEnum) -> Callable:\n        @functools.wraps(handler)\n",
        "target_code_len": 123,
        "diff_format": "@@ -486,3 +493,3 @@\n \n-    def _create_wrapped_handler(self, handler: Callable, event: Events) -> Callable:\n+    def _create_wrapped_handler(self, handler: Callable, event: EventEnum) -> Callable:\n         @functools.wraps(handler)\n",
        "source_code_with_indent": "\n    <DED>def _create_wrapped_handler(self, handler: Callable, event: Events) -> Callable:\n        <IND>@functools.wraps(handler)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def _create_wrapped_handler(self, handler: Callable, event: EventEnum) -> Callable:\n        <IND>@functools.wraps(handler)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pytorch/ignite",
    "commit": "825be07f639d41b135b6fdafcd691088b09f6447",
    "filename": "ignite/contrib/handlers/time_profilers.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pytorch-ignite/ignite/contrib/handlers/time_profilers.py",
    "file_hunks_size": 30,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "ignite/contrib/handlers/time_profilers.py:698:40 Incompatible parameter type [6]: Expected `typing.Sized` for 1st positional only parameter to call `len` but got `Union[float, str]`.",
    "message": " Expected `typing.Sized` for 1st positional only parameter to call `len` but got `Union[float, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 698,
    "warning_line": "        handler_column_width = max([len(item[0]) for item in results]) + 4",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        # adopted implementation of torch.autograd.profiler.build_table\n        handler_column_width = max([len(item[0]) for item in results]) + 4\n        event_column_width = max([len(item[1]) for item in results]) + 4\n\n",
        "source_code_len": 221,
        "target_code": "        # adopted implementation of torch.autograd.profiler.build_table\n        handler_column_width = max([len(item[0]) for item in results]) + 4  # type: ignore[arg-type]\n        event_column_width = max([len(item[1]) for item in results]) + 4  # type: ignore[arg-type]\n\n",
        "target_code_len": 273,
        "diff_format": "@@ -697,4 +706,4 @@\n         # adopted implementation of torch.autograd.profiler.build_table\n-        handler_column_width = max([len(item[0]) for item in results]) + 4\n-        event_column_width = max([len(item[1]) for item in results]) + 4\n+        handler_column_width = max([len(item[0]) for item in results]) + 4  # type: ignore[arg-type]\n+        event_column_width = max([len(item[1]) for item in results]) + 4  # type: ignore[arg-type]\n \n",
        "source_code_with_indent": "        # adopted implementation of torch.autograd.profiler.build_table\n        handler_column_width = max([len(item[0]) for item in results]) + 4\n        event_column_width = max([len(item[1]) for item in results]) + 4\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        # adopted implementation of torch.autograd.profiler.build_table\n        handler_column_width = max([len(item[0]) for item in results]) + 4  # type: ignore[arg-type]\n        event_column_width = max([len(item[1]) for item in results]) + 4  # type: ignore[arg-type]\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pytorch/ignite",
    "commit": "825be07f639d41b135b6fdafcd691088b09f6447",
    "filename": "ignite/contrib/handlers/time_profilers.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pytorch-ignite/ignite/contrib/handlers/time_profilers.py",
    "file_hunks_size": 30,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "ignite/contrib/handlers/time_profilers.py:699:38 Incompatible parameter type [6]: Expected `typing.Sized` for 1st positional only parameter to call `len` but got `Union[float, str]`.",
    "message": " Expected `typing.Sized` for 1st positional only parameter to call `len` but got `Union[float, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 699,
    "warning_line": "        event_column_width = max([len(item[1]) for item in results]) + 4",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        # adopted implementation of torch.autograd.profiler.build_table\n        handler_column_width = max([len(item[0]) for item in results]) + 4\n        event_column_width = max([len(item[1]) for item in results]) + 4\n\n",
        "source_code_len": 221,
        "target_code": "        # adopted implementation of torch.autograd.profiler.build_table\n        handler_column_width = max([len(item[0]) for item in results]) + 4  # type: ignore[arg-type]\n        event_column_width = max([len(item[1]) for item in results]) + 4  # type: ignore[arg-type]\n\n",
        "target_code_len": 273,
        "diff_format": "@@ -697,4 +706,4 @@\n         # adopted implementation of torch.autograd.profiler.build_table\n-        handler_column_width = max([len(item[0]) for item in results]) + 4\n-        event_column_width = max([len(item[1]) for item in results]) + 4\n+        handler_column_width = max([len(item[0]) for item in results]) + 4  # type: ignore[arg-type]\n+        event_column_width = max([len(item[1]) for item in results]) + 4  # type: ignore[arg-type]\n \n",
        "source_code_with_indent": "        # adopted implementation of torch.autograd.profiler.build_table\n        handler_column_width = max([len(item[0]) for item in results]) + 4\n        event_column_width = max([len(item[1]) for item in results]) + 4\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        # adopted implementation of torch.autograd.profiler.build_table\n        handler_column_width = max([len(item[0]) for item in results]) + 4  # type: ignore[arg-type]\n        event_column_width = max([len(item[1]) for item in results]) + 4  # type: ignore[arg-type]\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pytorch/ignite",
    "commit": "825be07f639d41b135b6fdafcd691088b09f6447",
    "filename": "ignite/contrib/handlers/tqdm_logger.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pytorch-ignite/ignite/contrib/handlers/tqdm_logger.py",
    "file_hunks_size": 18,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "ignite/contrib/handlers/tqdm_logger.py:157:4 Inconsistent override [14]: `ignite.contrib.handlers.tqdm_logger.ProgressBar.attach` overrides method defined in `BaseLogger` inconsistently. Could not find parameter `log_handler` in overriding signature.",
    "message": " `ignite.contrib.handlers.tqdm_logger.ProgressBar.attach` overrides method defined in `BaseLogger` inconsistently. Could not find parameter `log_handler` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 157,
    "warning_line": "    def attach(",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n    def attach(\n        self,\n",
        "source_code_len": 31,
        "target_code": "\n    def attach(  # type: ignore[override]\n        self,\n",
        "target_code_len": 57,
        "diff_format": "@@ -156,3 +157,3 @@\n \n-    def attach(\n+    def attach(  # type: ignore[override]\n         self,\n",
        "source_code_with_indent": "\n    <DED>def attach(\n        self,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def attach(  # type: ignore[override]\n        self,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pytorch/ignite",
    "commit": "825be07f639d41b135b6fdafcd691088b09f6447",
    "filename": "ignite/contrib/handlers/tqdm_logger.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pytorch-ignite/ignite/contrib/handlers/tqdm_logger.py",
    "file_hunks_size": 18,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ignite/contrib/handlers/tqdm_logger.py:265:62 Incompatible parameter type [6]: Expected `ignite.engine.events.Events` for 1st positional only parameter to call `ignite.engine.events.State.get_event_attrib_value` but got `EventEnum`.",
    "message": " Expected `ignite.engine.events.Events` for 1st positional only parameter to call `ignite.engine.events.State.get_event_attrib_value` but got `EventEnum`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 265,
    "warning_line": "            global_step = engine.state.get_event_attrib_value(self.closing_event_name)"
  },
  {
    "project": "pytorch/ignite",
    "commit": "825be07f639d41b135b6fdafcd691088b09f6447",
    "filename": "ignite/contrib/handlers/tqdm_logger.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pytorch-ignite/ignite/contrib/handlers/tqdm_logger.py",
    "file_hunks_size": 18,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ignite/contrib/handlers/tqdm_logger.py:288:58 Incompatible parameter type [6]: Expected `ignite.engine.events.Events` for 1st positional only parameter to call `ignite.engine.events.State.get_event_attrib_value` but got `Union[CallableEventWithFilter, Enum]`.",
    "message": " Expected `ignite.engine.events.Events` for 1st positional only parameter to call `ignite.engine.events.State.get_event_attrib_value` but got `Union[CallableEventWithFilter, Enum]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 288,
    "warning_line": "        global_step = engine.state.get_event_attrib_value(event_name)"
  },
  {
    "project": "pytorch/ignite",
    "commit": "825be07f639d41b135b6fdafcd691088b09f6447",
    "filename": "ignite/contrib/handlers/trains_logger.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pytorch-ignite/ignite/contrib/handlers/trains_logger.py",
    "file_hunks_size": 20,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "ignite/contrib/handlers/trains_logger.py:306:22 Call error [29]: `Optional[typing.Callable[..., typing.Any]]` is not a function.",
    "message": " `Optional[typing.Callable[..., typing.Any]]` is not a function.",
    "rule_id": "Call error [29]",
    "warning_line_no": 306,
    "warning_line": "        global_step = self.global_step_transform(engine, event_name)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n        global_step = self.global_step_transform(engine, event_name)\n\n",
        "source_code_len": 71,
        "target_code": "\n        global_step = self.global_step_transform(engine, event_name)  # type: ignore[misc]\n\n",
        "target_code_len": 93,
        "diff_format": "@@ -305,3 +305,3 @@\n \n-        global_step = self.global_step_transform(engine, event_name)\n+        global_step = self.global_step_transform(engine, event_name)  # type: ignore[misc]\n \n",
        "source_code_with_indent": "\n        global_step = self.global_step_transform(engine, event_name)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        global_step = self.global_step_transform(engine, event_name)  # type: ignore[misc]\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pytorch/ignite",
    "commit": "825be07f639d41b135b6fdafcd691088b09f6447",
    "filename": "ignite/contrib/handlers/trains_logger.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pytorch-ignite/ignite/contrib/handlers/trains_logger.py",
    "file_hunks_size": 20,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ignite/contrib/handlers/trains_logger.py:369:58 Incompatible parameter type [6]: Expected `ignite.engine.events.Events` for 1st positional only parameter to call `ignite.engine.events.State.get_event_attrib_value` but got `ignite.engine.events.EventEnum`.",
    "message": " Expected `ignite.engine.events.Events` for 1st positional only parameter to call `ignite.engine.events.State.get_event_attrib_value` but got `ignite.engine.events.EventEnum`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 369,
    "warning_line": "        global_step = engine.state.get_event_attrib_value(event_name)"
  },
  {
    "project": "pytorch/ignite",
    "commit": "825be07f639d41b135b6fdafcd691088b09f6447",
    "filename": "ignite/contrib/handlers/trains_logger.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pytorch-ignite/ignite/contrib/handlers/trains_logger.py",
    "file_hunks_size": 20,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ignite/contrib/handlers/trains_logger.py:421:58 Incompatible parameter type [6]: Expected `ignite.engine.events.Events` for 1st positional only parameter to call `ignite.engine.events.State.get_event_attrib_value` but got `ignite.engine.events.EventEnum`.",
    "message": " Expected `ignite.engine.events.Events` for 1st positional only parameter to call `ignite.engine.events.State.get_event_attrib_value` but got `ignite.engine.events.EventEnum`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 421,
    "warning_line": "        global_step = engine.state.get_event_attrib_value(event_name)"
  },
  {
    "project": "pytorch/ignite",
    "commit": "825be07f639d41b135b6fdafcd691088b09f6447",
    "filename": "ignite/contrib/handlers/trains_logger.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pytorch-ignite/ignite/contrib/handlers/trains_logger.py",
    "file_hunks_size": 20,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ignite/contrib/handlers/trains_logger.py:472:58 Incompatible parameter type [6]: Expected `ignite.engine.events.Events` for 1st positional only parameter to call `ignite.engine.events.State.get_event_attrib_value` but got `ignite.engine.events.EventEnum`.",
    "message": " Expected `ignite.engine.events.Events` for 1st positional only parameter to call `ignite.engine.events.State.get_event_attrib_value` but got `ignite.engine.events.EventEnum`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 472,
    "warning_line": "        global_step = engine.state.get_event_attrib_value(event_name)"
  },
  {
    "project": "pytorch/ignite",
    "commit": "825be07f639d41b135b6fdafcd691088b09f6447",
    "filename": "ignite/contrib/handlers/trains_logger.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pytorch-ignite/ignite/contrib/handlers/trains_logger.py",
    "file_hunks_size": 20,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ignite/contrib/handlers/trains_logger.py:527:58 Incompatible parameter type [6]: Expected `ignite.engine.events.Events` for 1st positional only parameter to call `ignite.engine.events.State.get_event_attrib_value` but got `ignite.engine.events.EventEnum`.",
    "message": " Expected `ignite.engine.events.Events` for 1st positional only parameter to call `ignite.engine.events.State.get_event_attrib_value` but got `ignite.engine.events.EventEnum`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 527,
    "warning_line": "        global_step = engine.state.get_event_attrib_value(event_name)"
  },
  {
    "project": "pytorch/ignite",
    "commit": "825be07f639d41b135b6fdafcd691088b09f6447",
    "filename": "ignite/contrib/handlers/trains_logger.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pytorch-ignite/ignite/contrib/handlers/trains_logger.py",
    "file_hunks_size": 20,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ignite/contrib/handlers/trains_logger.py:578:58 Incompatible parameter type [6]: Expected `ignite.engine.events.Events` for 1st positional only parameter to call `ignite.engine.events.State.get_event_attrib_value` but got `ignite.engine.events.EventEnum`.",
    "message": " Expected `ignite.engine.events.Events` for 1st positional only parameter to call `ignite.engine.events.State.get_event_attrib_value` but got `ignite.engine.events.EventEnum`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 578,
    "warning_line": "        global_step = engine.state.get_event_attrib_value(event_name)"
  },
  {
    "project": "pytorch/ignite",
    "commit": "825be07f639d41b135b6fdafcd691088b09f6447",
    "filename": "ignite/contrib/handlers/trains_logger.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pytorch-ignite/ignite/contrib/handlers/trains_logger.py",
    "file_hunks_size": 20,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ignite/contrib/handlers/trains_logger.py:636:14 Incompatible variable type [9]: logger is declared to have type `TrainsLogger` but is used as type `None`.",
    "message": " logger is declared to have type `TrainsLogger` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 636,
    "warning_line": "        self, logger: TrainsLogger = None, output_uri: str = None, dirname: str = None, *args: Any, **kwargs: Any",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def __init__(\n        self, logger: TrainsLogger = None, output_uri: str = None, dirname: str = None, *args: Any, **kwargs: Any\n    ):\n\n",
        "source_code_len": 140,
        "target_code": "    def __init__(\n        self,\n        logger: Optional[TrainsLogger] = None,\n        output_uri: Optional[str] = None,\n        dirname: Optional[str] = None,\n        *args: Any,\n        **kwargs: Any\n    ) -> None:\n\n",
        "target_code_len": 218,
        "diff_format": "@@ -635,4 +635,9 @@\n     def __init__(\n-        self, logger: TrainsLogger = None, output_uri: str = None, dirname: str = None, *args: Any, **kwargs: Any\n-    ):\n+        self,\n+        logger: Optional[TrainsLogger] = None,\n+        output_uri: Optional[str] = None,\n+        dirname: Optional[str] = None,\n+        *args: Any,\n+        **kwargs: Any\n+    ) -> None:\n \n",
        "source_code_with_indent": "    def __init__(\n        self, logger: TrainsLogger = None, output_uri: str = None, dirname: str = None, *args: Any, **kwargs: Any\n    ):\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def __init__(\n        self,\n        logger: Optional[TrainsLogger] = None,\n        output_uri: Optional[str] = None,\n        dirname: Optional[str] = None,\n        *args: Any,\n        **kwargs: Any\n    ) -> None:\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pytorch/ignite",
    "commit": "825be07f639d41b135b6fdafcd691088b09f6447",
    "filename": "ignite/contrib/handlers/trains_logger.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pytorch-ignite/ignite/contrib/handlers/trains_logger.py",
    "file_hunks_size": 20,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ignite/contrib/handlers/trains_logger.py:636:43 Incompatible variable type [9]: output_uri is declared to have type `str` but is used as type `None`.",
    "message": " output_uri is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 636,
    "warning_line": "        self, logger: TrainsLogger = None, output_uri: str = None, dirname: str = None, *args: Any, **kwargs: Any",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def __init__(\n        self, logger: TrainsLogger = None, output_uri: str = None, dirname: str = None, *args: Any, **kwargs: Any\n    ):\n\n",
        "source_code_len": 140,
        "target_code": "    def __init__(\n        self,\n        logger: Optional[TrainsLogger] = None,\n        output_uri: Optional[str] = None,\n        dirname: Optional[str] = None,\n        *args: Any,\n        **kwargs: Any\n    ) -> None:\n\n",
        "target_code_len": 218,
        "diff_format": "@@ -635,4 +635,9 @@\n     def __init__(\n-        self, logger: TrainsLogger = None, output_uri: str = None, dirname: str = None, *args: Any, **kwargs: Any\n-    ):\n+        self,\n+        logger: Optional[TrainsLogger] = None,\n+        output_uri: Optional[str] = None,\n+        dirname: Optional[str] = None,\n+        *args: Any,\n+        **kwargs: Any\n+    ) -> None:\n \n",
        "source_code_with_indent": "    def __init__(\n        self, logger: TrainsLogger = None, output_uri: str = None, dirname: str = None, *args: Any, **kwargs: Any\n    ):\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def __init__(\n        self,\n        logger: Optional[TrainsLogger] = None,\n        output_uri: Optional[str] = None,\n        dirname: Optional[str] = None,\n        *args: Any,\n        **kwargs: Any\n    ) -> None:\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pytorch/ignite",
    "commit": "825be07f639d41b135b6fdafcd691088b09f6447",
    "filename": "ignite/contrib/handlers/trains_logger.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pytorch-ignite/ignite/contrib/handlers/trains_logger.py",
    "file_hunks_size": 20,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ignite/contrib/handlers/trains_logger.py:636:67 Incompatible variable type [9]: dirname is declared to have type `str` but is used as type `None`.",
    "message": " dirname is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 636,
    "warning_line": "        self, logger: TrainsLogger = None, output_uri: str = None, dirname: str = None, *args: Any, **kwargs: Any",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def __init__(\n        self, logger: TrainsLogger = None, output_uri: str = None, dirname: str = None, *args: Any, **kwargs: Any\n    ):\n\n",
        "source_code_len": 140,
        "target_code": "    def __init__(\n        self,\n        logger: Optional[TrainsLogger] = None,\n        output_uri: Optional[str] = None,\n        dirname: Optional[str] = None,\n        *args: Any,\n        **kwargs: Any\n    ) -> None:\n\n",
        "target_code_len": 218,
        "diff_format": "@@ -635,4 +635,9 @@\n     def __init__(\n-        self, logger: TrainsLogger = None, output_uri: str = None, dirname: str = None, *args: Any, **kwargs: Any\n-    ):\n+        self,\n+        logger: Optional[TrainsLogger] = None,\n+        output_uri: Optional[str] = None,\n+        dirname: Optional[str] = None,\n+        *args: Any,\n+        **kwargs: Any\n+    ) -> None:\n \n",
        "source_code_with_indent": "    def __init__(\n        self, logger: TrainsLogger = None, output_uri: str = None, dirname: str = None, *args: Any, **kwargs: Any\n    ):\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def __init__(\n        self,\n        logger: Optional[TrainsLogger] = None,\n        output_uri: Optional[str] = None,\n        dirname: Optional[str] = None,\n        *args: Any,\n        **kwargs: Any\n    ) -> None:\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pytorch/ignite",
    "commit": "825be07f639d41b135b6fdafcd691088b09f6447",
    "filename": "ignite/contrib/handlers/wandb_logger.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pytorch-ignite/ignite/contrib/handlers/wandb_logger.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "ignite/contrib/handlers/wandb_logger.py:264:22 Call error [29]: `Optional[typing.Callable[..., typing.Any]]` is not a function.",
    "message": " `Optional[typing.Callable[..., typing.Any]]` is not a function.",
    "rule_id": "Call error [29]",
    "warning_line_no": 264,
    "warning_line": "        global_step = self.global_step_transform(engine, event_name)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n        global_step = self.global_step_transform(engine, event_name)\n        if not isinstance(global_step, int):\n",
        "source_code_len": 115,
        "target_code": "\n        global_step = self.global_step_transform(engine, event_name)  # type: ignore[misc]\n        if not isinstance(global_step, int):\n",
        "target_code_len": 137,
        "diff_format": "@@ -263,3 +262,3 @@\n \n-        global_step = self.global_step_transform(engine, event_name)\n+        global_step = self.global_step_transform(engine, event_name)  # type: ignore[misc]\n         if not isinstance(global_step, int):\n",
        "source_code_with_indent": "\n        <DED>global_step = self.global_step_transform(engine, event_name)\n        if not isinstance(global_step, int):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        <DED>global_step = self.global_step_transform(engine, event_name)  # type: ignore[misc]\n        if not isinstance(global_step, int):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pytorch/ignite",
    "commit": "825be07f639d41b135b6fdafcd691088b09f6447",
    "filename": "ignite/contrib/handlers/wandb_logger.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pytorch-ignite/ignite/contrib/handlers/wandb_logger.py",
    "file_hunks_size": 9,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ignite/contrib/handlers/wandb_logger.py:330:58 Incompatible parameter type [6]: Expected `ignite.engine.events.Events` for 1st positional only parameter to call `ignite.engine.events.State.get_event_attrib_value` but got `Union[Enum, ignite.engine.events.CallableEventWithFilter]`.",
    "message": " Expected `ignite.engine.events.Events` for 1st positional only parameter to call `ignite.engine.events.State.get_event_attrib_value` but got `Union[Enum, ignite.engine.events.CallableEventWithFilter]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 330,
    "warning_line": "        global_step = engine.state.get_event_attrib_value(event_name)"
  }
]