[
  {
    "project": "ConsenSys/mythril",
    "commit": "2cfcd2eb3b73d6dee5ae34055847bc32581d4e38",
    "filename": "mythril/analysis/module/util.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ConsenSys-mythril/mythril/analysis/module/util.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mythril/analysis/module/util.py:20:4 Incompatible variable type [9]: hook_dict is declared to have type `Dict[str, typing.Callable[..., typing.Any]]` but is used as type `typing.DefaultDict[Variable[collections._KT], List[Variable[_T]]]`.",
    "message": " hook_dict is declared to have type `Dict[str, typing.Callable[..., typing.Any]]` but is used as type `typing.DefaultDict[Variable[collections._KT], List[Variable[_T]]]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 20,
    "warning_line": "    hook_dict = defaultdict(list)  # type: Dict[str, Callable]",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from collections import defaultdict\nfrom typing import List, Optional, Callable, Dict\nimport logging\n",
        "source_code_len": 101,
        "target_code": "from collections import defaultdict\nfrom typing import List, Optional, Callable, Mapping, Dict\nimport logging\n",
        "target_code_len": 110,
        "diff_format": "@@ -1,3 +1,3 @@\n from collections import defaultdict\n-from typing import List, Optional, Callable, Dict\n+from typing import List, Optional, Callable, Mapping, Dict\n import logging\n",
        "source_code_with_indent": "from collections import defaultdict\nfrom typing import List, Optional, Callable, Dict\nimport logging\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from collections import defaultdict\nfrom typing import List, Optional, Callable, Mapping, Dict\nimport logging\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef get_detection_module_hooks(modules: List[DetectionModule], hook_type=\"pre\") -> Dict[str, Callable]:\n    \"\"\" Gets a dictionary with the hooks for the passed detection modules\n",
        "source_code_len": 179,
        "target_code": "\ndef get_detection_module_hooks(modules: List[DetectionModule], hook_type=\"pre\") -> Dict[str, List[Callable]]:\n    \"\"\" Gets a dictionary with the hooks for the passed detection modules\n",
        "target_code_len": 185,
        "diff_format": "@@ -12,3 +12,3 @@\n \n-def get_detection_module_hooks(modules: List[DetectionModule], hook_type=\"pre\") -> Dict[str, Callable]:\n+def get_detection_module_hooks(modules: List[DetectionModule], hook_type=\"pre\") -> Dict[str, List[Callable]]:\n     \"\"\" Gets a dictionary with the hooks for the passed detection modules\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\ndef get_detection_module_hooks(modules: List[DetectionModule], hook_type=\"pre\") -> Dict[str, Callable]:\n    <IND>",
        "target_code_with_indent": "\ndef get_detection_module_hooks(modules: List[DetectionModule], hook_type=\"pre\") -> Dict[str, List[Callable]]:\n    <IND>"
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    \"\"\"\n    hook_dict = defaultdict(list)  # type: Dict[str, Callable]\n    for module in modules:\n",
        "source_code_len": 98,
        "target_code": "    \"\"\"\n    hook_dict = defaultdict(list)  # type: Mapping[str, List[Callable]]\n    for module in modules:\n",
        "target_code_len": 107,
        "diff_format": "@@ -19,3 +19,3 @@\n     \"\"\"\n-    hook_dict = defaultdict(list)  # type: Dict[str, Callable]\n+    hook_dict = defaultdict(list)  # type: Mapping[str, List[Callable]]\n     for module in modules:\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    hook_dict = defaultdict(list)  # type: Dict[str, Callable]\n    for module in modules:\n",
        "target_code_with_indent": "\n    hook_dict = defaultdict(list)  # type: Mapping[str, List[Callable]]\n    for module in modules:\n"
      }
    ]
  },
  {
    "project": "ConsenSys/mythril",
    "commit": "2cfcd2eb3b73d6dee5ae34055847bc32581d4e38",
    "filename": "mythril/analysis/symbolic.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ConsenSys-mythril/mythril/analysis/symbolic.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mythril/analysis/symbolic.py:149:16 Incompatible parameter type [6]: Expected `typing.Dict[str, List[typing.Callable[..., typing.Any]]]` for 2nd parameter `hook_dict` to call `svm.LaserEVM.register_hooks` but got `typing.Dict[str, typing.Callable[..., typing.Any]]`.",
    "message": " Expected `typing.Dict[str, List[typing.Callable[..., typing.Any]]]` for 2nd parameter `hook_dict` to call `svm.LaserEVM.register_hooks` but got `typing.Dict[str, typing.Callable[..., typing.Any]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 149,
    "warning_line": "                hook_dict=get_detection_module_hooks(modules, hook_type=\"pre\"),"
  },
  {
    "project": "ConsenSys/mythril",
    "commit": "2cfcd2eb3b73d6dee5ae34055847bc32581d4e38",
    "filename": "mythril/analysis/symbolic.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ConsenSys-mythril/mythril/analysis/symbolic.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mythril/analysis/symbolic.py:149:53 Incompatible parameter type [6]: Expected `List[mythril.analysis.module.base.DetectionModule]` for 1st positional only parameter to call `mythril.analysis.module.util.get_detection_module_hooks` but got `Optional[List[mythril.analysis.module.base.DetectionModule]]`.",
    "message": " Expected `List[mythril.analysis.module.base.DetectionModule]` for 1st positional only parameter to call `mythril.analysis.module.util.get_detection_module_hooks` but got `Optional[List[mythril.analysis.module.base.DetectionModule]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 149,
    "warning_line": "                hook_dict=get_detection_module_hooks(modules, hook_type=\"pre\"),"
  },
  {
    "project": "ConsenSys/mythril",
    "commit": "2cfcd2eb3b73d6dee5ae34055847bc32581d4e38",
    "filename": "mythril/analysis/symbolic.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ConsenSys-mythril/mythril/analysis/symbolic.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mythril/analysis/symbolic.py:153:16 Incompatible parameter type [6]: Expected `typing.Dict[str, List[typing.Callable[..., typing.Any]]]` for 2nd parameter `hook_dict` to call `svm.LaserEVM.register_hooks` but got `typing.Dict[str, typing.Callable[..., typing.Any]]`.",
    "message": " Expected `typing.Dict[str, List[typing.Callable[..., typing.Any]]]` for 2nd parameter `hook_dict` to call `svm.LaserEVM.register_hooks` but got `typing.Dict[str, typing.Callable[..., typing.Any]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 153,
    "warning_line": "                hook_dict=get_detection_module_hooks(modules, hook_type=\"post\"),"
  },
  {
    "project": "ConsenSys/mythril",
    "commit": "2cfcd2eb3b73d6dee5ae34055847bc32581d4e38",
    "filename": "mythril/analysis/symbolic.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ConsenSys-mythril/mythril/analysis/symbolic.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mythril/analysis/symbolic.py:153:53 Incompatible parameter type [6]: Expected `List[mythril.analysis.module.base.DetectionModule]` for 1st positional only parameter to call `mythril.analysis.module.util.get_detection_module_hooks` but got `Optional[List[mythril.analysis.module.base.DetectionModule]]`.",
    "message": " Expected `List[mythril.analysis.module.base.DetectionModule]` for 1st positional only parameter to call `mythril.analysis.module.util.get_detection_module_hooks` but got `Optional[List[mythril.analysis.module.base.DetectionModule]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 153,
    "warning_line": "                hook_dict=get_detection_module_hooks(modules, hook_type=\"post\"),"
  },
  {
    "project": "ConsenSys/mythril",
    "commit": "2cfcd2eb3b73d6dee5ae34055847bc32581d4e38",
    "filename": "mythril/mythril/mythril_analyzer.py",
    "min_patch_found": false,
    "full_warning_msg": "mythril/mythril/mythril_analyzer.py:167:20 Incompatible parameter type [6]: Expected `Optional[List[mythril.analysis.module.base.DetectionModule]]` for 10th parameter `modules` to call `SymExecWrapper.__init__` but got `Optional[List[str]]`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  }
]