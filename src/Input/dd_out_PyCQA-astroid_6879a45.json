[
  {
    "project": "PyCQA/astroid",
    "commit": "6879a45f382ae396e88d16e75a7b13bbbd6309a2",
    "filename": "astroid/brain/brain_re.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/PyCQA-astroid/astroid/brain/brain_re.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "astroid/brain/brain_re.py:67:42 Incompatible variable type [9]: ctx is declared to have type `context.InferenceContext` but is used as type `None`.",
    "message": " ctx is declared to have type `context.InferenceContext` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 67,
    "warning_line": "def infer_pattern_match(node: nodes.Call, ctx: context.InferenceContext = None):"
  },
  {
    "project": "PyCQA/astroid",
    "commit": "6879a45f382ae396e88d16e75a7b13bbbd6309a2",
    "filename": "astroid/builder.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/PyCQA-astroid/astroid/builder.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "astroid/builder.py:85:40 Incompatible variable type [9]: modname is declared to have type `str` but is used as type `None`.",
    "message": " modname is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 85,
    "warning_line": "        self, module: types.ModuleType, modname: str = None"
  },
  {
    "project": "PyCQA/astroid",
    "commit": "6879a45f382ae396e88d16e75a7b13bbbd6309a2",
    "filename": "astroid/manager.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/PyCQA-astroid/astroid/manager.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "astroid/manager.py:271:56 Incompatible variable type [9]: modname is declared to have type `str` but is used as type `None`.",
    "message": " modname is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 271,
    "warning_line": "    def ast_from_module(self, module: types.ModuleType, modname: str = None):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import zipimport\nfrom typing import TYPE_CHECKING, ClassVar, List\n\n",
        "source_code_len": 67,
        "target_code": "import zipimport\nfrom typing import TYPE_CHECKING, ClassVar, List, Optional\n\n",
        "target_code_len": 77,
        "diff_format": "@@ -34,3 +34,3 @@\n import zipimport\n-from typing import TYPE_CHECKING, ClassVar, List\n+from typing import TYPE_CHECKING, ClassVar, List, Optional\n \n",
        "source_code_with_indent": "import zipimport\nfrom typing import TYPE_CHECKING, ClassVar, List\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import zipimport\nfrom typing import TYPE_CHECKING, ClassVar, List, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def ast_from_module(self, module: types.ModuleType, modname: str = None):\n        \"\"\"given an imported module, return the astroid object\"\"\"\n",
        "source_code_len": 145,
        "target_code": "\n    def ast_from_module(self, module: types.ModuleType, modname: Optional[str] = None):\n        \"\"\"given an imported module, return the astroid object\"\"\"\n",
        "target_code_len": 155,
        "diff_format": "@@ -270,3 +270,3 @@\n \n-    def ast_from_module(self, module: types.ModuleType, modname: str = None):\n+    def ast_from_module(self, module: types.ModuleType, modname: Optional[str] = None):\n         \"\"\"given an imported module, return the astroid object\"\"\"\n",
        "source_code_with_indent": "\n    <DED>def ast_from_module(self, module: types.ModuleType, modname: str = None):\n        <IND>\"\"\"given an imported module, return the astroid object\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def ast_from_module(self, module: types.ModuleType, modname: Optional[str] = None):\n        <IND>\"\"\"given an imported module, return the astroid object\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "PyCQA/astroid",
    "commit": "6879a45f382ae396e88d16e75a7b13bbbd6309a2",
    "filename": "astroid/raw_building.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/PyCQA-astroid/astroid/raw_building.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "astroid/raw_building.py:109:28 Incompatible variable type [9]: doc is declared to have type `str` but is used as type `None`.",
    "message": " doc is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 109,
    "warning_line": "def build_module(name: str, doc: str = None) -> nodes.Module:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef build_module(name: str, doc: str = None) -> nodes.Module:\n    \"\"\"create and initialize an astroid Module node\"\"\"\n",
        "source_code_len": 118,
        "target_code": "\ndef build_module(name: str, doc: Optional[str] = None) -> nodes.Module:\n    \"\"\"create and initialize an astroid Module node\"\"\"\n",
        "target_code_len": 128,
        "diff_format": "@@ -108,3 +108,3 @@\n \n-def build_module(name: str, doc: str = None) -> nodes.Module:\n+def build_module(name: str, doc: Optional[str] = None) -> nodes.Module:\n     \"\"\"create and initialize an astroid Module node\"\"\"\n",
        "source_code_with_indent": "\n<DED>def build_module(name: str, doc: str = None) -> nodes.Module:\n    <IND>\"\"\"create and initialize an astroid Module node\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def build_module(name: str, doc: Optional[str] = None) -> nodes.Module:\n    <IND>\"\"\"create and initialize an astroid Module node\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "PyCQA/astroid",
    "commit": "6879a45f382ae396e88d16e75a7b13bbbd6309a2",
    "filename": "astroid/raw_building.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/PyCQA-astroid/astroid/raw_building.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "astroid/raw_building.py:307:40 Incompatible variable type [9]: modname is declared to have type `str` but is used as type `None`.",
    "message": " modname is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 307,
    "warning_line": "        self, module: types.ModuleType, modname: str = None, path: str = None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def inspect_build(\n        self, module: types.ModuleType, modname: str = None, path: str = None\n    ) -> nodes.Module:\n",
        "source_code_len": 124,
        "target_code": "    def inspect_build(\n        self,\n        module: types.ModuleType,\n        modname: Optional[str] = None,\n        path: Optional[str] = None,\n    ) -> nodes.Module:\n",
        "target_code_len": 169,
        "diff_format": "@@ -306,3 +306,6 @@\n     def inspect_build(\n-        self, module: types.ModuleType, modname: str = None, path: str = None\n+        self,\n+        module: types.ModuleType,\n+        modname: Optional[str] = None,\n+        path: Optional[str] = None,\n     ) -> nodes.Module:\n",
        "source_code_with_indent": "    <DED>def inspect_build(\n        self, module: types.ModuleType, modname: str = None, path: str = None\n    ) -> nodes.Module:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def inspect_build(\n        self,\n        module: types.ModuleType,\n        modname: Optional[str] = None,\n        path: Optional[str] = None,\n    ) -> nodes.Module:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "PyCQA/astroid",
    "commit": "6879a45f382ae396e88d16e75a7b13bbbd6309a2",
    "filename": "astroid/raw_building.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/PyCQA-astroid/astroid/raw_building.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "astroid/raw_building.py:307:61 Incompatible variable type [9]: path is declared to have type `str` but is used as type `None`.",
    "message": " path is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 307,
    "warning_line": "        self, module: types.ModuleType, modname: str = None, path: str = None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def inspect_build(\n        self, module: types.ModuleType, modname: str = None, path: str = None\n    ) -> nodes.Module:\n",
        "source_code_len": 124,
        "target_code": "    def inspect_build(\n        self,\n        module: types.ModuleType,\n        modname: Optional[str] = None,\n        path: Optional[str] = None,\n    ) -> nodes.Module:\n",
        "target_code_len": 169,
        "diff_format": "@@ -306,3 +306,6 @@\n     def inspect_build(\n-        self, module: types.ModuleType, modname: str = None, path: str = None\n+        self,\n+        module: types.ModuleType,\n+        modname: Optional[str] = None,\n+        path: Optional[str] = None,\n     ) -> nodes.Module:\n",
        "source_code_with_indent": "    <DED>def inspect_build(\n        self, module: types.ModuleType, modname: str = None, path: str = None\n    ) -> nodes.Module:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def inspect_build(\n        self,\n        module: types.ModuleType,\n        modname: Optional[str] = None,\n        path: Optional[str] = None,\n    ) -> nodes.Module:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "PyCQA/astroid",
    "commit": "6879a45f382ae396e88d16e75a7b13bbbd6309a2",
    "filename": "astroid/raw_building.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/PyCQA-astroid/astroid/raw_building.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "astroid/raw_building.py:317:41 Incompatible parameter type [6]: Expected `str` for 2nd positional only parameter to call `build_module` but got `Optional[str]`.",
    "message": " Expected `str` for 2nd positional only parameter to call `build_module` but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 317,
    "warning_line": "            node = build_module(modname, module.__doc__)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef build_module(name: str, doc: str = None) -> nodes.Module:\n    \"\"\"create and initialize an astroid Module node\"\"\"\n",
        "source_code_len": 118,
        "target_code": "\ndef build_module(name: str, doc: Optional[str] = None) -> nodes.Module:\n    \"\"\"create and initialize an astroid Module node\"\"\"\n",
        "target_code_len": 128,
        "diff_format": "@@ -108,3 +108,3 @@\n \n-def build_module(name: str, doc: str = None) -> nodes.Module:\n+def build_module(name: str, doc: Optional[str] = None) -> nodes.Module:\n     \"\"\"create and initialize an astroid Module node\"\"\"\n",
        "source_code_with_indent": "\n<DED>def build_module(name: str, doc: str = None) -> nodes.Module:\n    <IND>\"\"\"create and initialize an astroid Module node\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def build_module(name: str, doc: Optional[str] = None) -> nodes.Module:\n    <IND>\"\"\"create and initialize an astroid Module node\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]