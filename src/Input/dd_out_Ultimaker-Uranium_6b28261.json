[
  {
    "project": "Ultimaker/Uranium",
    "commit": "6b28261eca557f5f750ef294277b4937b83730d1",
    "filename": "UM/Settings/ContainerStack.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Ultimaker-Uranium/UM/Settings/ContainerStack.py",
    "file_hunks_size": 13,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "UM/Settings/ContainerStack.py:342:98 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `UM.VersionUpgradeManager.VersionUpgradeManager.getFileVersion` but got `Optional[str]`.",
    "message": " Expected `str` for 1st positional only parameter to call `UM.VersionUpgradeManager.VersionUpgradeManager.getFileVersion` but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 342,
    "warning_line": "            version = UM.VersionUpgradeManager.VersionUpgradeManager.getInstance().getFileVersion(configuration_type,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        configuration_type = cls.getConfigurationTypeFromSerialized(serialized)\n        # get version\n",
        "source_code_len": 102,
        "target_code": "        configuration_type = cls.getConfigurationTypeFromSerialized(serialized)\n        if not configuration_type:\n            Logger.log(\"d\", \"Could not get type from serialized.\")\n            return None\n\n        # get version\n",
        "target_code_len": 229,
        "diff_format": "@@ -337,2 +336,6 @@\n         configuration_type = cls.getConfigurationTypeFromSerialized(serialized)\n+        if not configuration_type:\n+            Logger.log(\"d\", \"Could not get type from serialized.\")\n+            return None\n+\n         # get version\n",
        "source_code_with_indent": "        <IND>configuration_type = cls.getConfigurationTypeFromSerialized(serialized)\n        # get version\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>configuration_type = cls.getConfigurationTypeFromSerialized(serialized)\n        if not configuration_type:\n            <IND>Logger.log(\"d\", \"Could not get type from serialized.\")\n            return None\n\n        # get version\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Ultimaker/Uranium",
    "commit": "6b28261eca557f5f750ef294277b4937b83730d1",
    "filename": "UM/Settings/ContainerStack.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Ultimaker-Uranium/UM/Settings/ContainerStack.py",
    "file_hunks_size": 13,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "UM/Settings/ContainerStack.py:450:20 Incompatible parameter type [6]: Expected `typing.AbstractSet[Variable[_S]]` for 1st positional only parameter to call `set.__ior__` but got `List[str]`.",
    "message": " Expected `typing.AbstractSet[Variable[_S]]` for 1st positional only parameter to call `set.__ior__` but got `List[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 450,
    "warning_line": "            keys |= definition_container.getAllKeys()"
  },
  {
    "project": "Ultimaker/Uranium",
    "commit": "6b28261eca557f5f750ef294277b4937b83730d1",
    "filename": "UM/Settings/ContainerStack.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Ultimaker-Uranium/UM/Settings/ContainerStack.py",
    "file_hunks_size": 13,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "UM/Settings/ContainerStack.py:601:42 Incompatible parameter type [6]: Expected `Tuple[Signal, List[typing.Any]]` for 1st positional only parameter to call `list.append` but got `Tuple[Signal, ContainerInterface]`.",
    "message": " Expected `Tuple[Signal, List[typing.Any]]` for 1st positional only parameter to call `list.append` but got `Tuple[Signal, ContainerInterface]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 601,
    "warning_line": "            self._postponed_emits.append((self.containersChanged, container))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self._path = \"\"  # type: str\n        self._postponed_emits = [] #type: List[Tuple[Signal, List[Any]]] # gets filled with 2-tuples: signal, signal_argument(s)\n\n",
        "source_code_len": 167,
        "target_code": "        self._path = \"\"  # type: str\n        self._postponed_emits = [] #type: List[Tuple[Signal, ContainerInterface]] # gets filled with 2-tuples: signal, signal_argument(s)\n\n",
        "target_code_len": 176,
        "diff_format": "@@ -72,3 +71,3 @@\n         self._path = \"\"  # type: str\n-        self._postponed_emits = [] #type: List[Tuple[Signal, List[Any]]] # gets filled with 2-tuples: signal, signal_argument(s)\n+        self._postponed_emits = [] #type: List[Tuple[Signal, ContainerInterface]] # gets filled with 2-tuples: signal, signal_argument(s)\n \n",
        "source_code_with_indent": "        self._path = \"\"  # type: str\n        self._postponed_emits = [] #type: List[Tuple[Signal, List[Any]]] # gets filled with 2-tuples: signal, signal_argument(s)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self._path = \"\"  # type: str\n        self._postponed_emits = [] #type: List[Tuple[Signal, ContainerInterface]] # gets filled with 2-tuples: signal, signal_argument(s)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Ultimaker/Uranium",
    "commit": "6b28261eca557f5f750ef294277b4937b83730d1",
    "filename": "UM/Settings/ContainerStack.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Ultimaker-Uranium/UM/Settings/ContainerStack.py",
    "file_hunks_size": 13,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "UM/Settings/ContainerStack.py:724:0 Incompatible variable type [9]: _containerRegistry is declared to have type `ContainerRegistryInterface` but is used as type `None`.",
    "message": " _containerRegistry is declared to have type `ContainerRegistryInterface` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 724,
    "warning_line": "_containerRegistry = None   # type:  ContainerRegistryInterface",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n_containerRegistry = None   # type:  ContainerRegistryInterface\n\n",
        "source_code_len": 66,
        "target_code": "\n_containerRegistry = ContainerRegistryInterface() # type: ContainerRegistryInterface\n\n",
        "target_code_len": 87,
        "diff_format": "@@ -723,3 +726,3 @@\n \n-_containerRegistry = None   # type:  ContainerRegistryInterface\n+_containerRegistry = ContainerRegistryInterface() # type: ContainerRegistryInterface\n \n",
        "source_code_with_indent": "\n<DED><DED>_containerRegistry = None   # type:  ContainerRegistryInterface\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED><DED>_containerRegistry = ContainerRegistryInterface() # type: ContainerRegistryInterface\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Ultimaker/Uranium",
    "commit": "6b28261eca557f5f750ef294277b4937b83730d1",
    "filename": "UM/Settings/DefinitionContainer.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Ultimaker-Uranium/UM/Settings/DefinitionContainer.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "UM/Settings/DefinitionContainer.py:160:8 Incompatible return type [7]: Expected `List[str]` but got `typing.Set[typing.Any]`.",
    "message": " Expected `List[str]` but got `typing.Set[typing.Any]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 160,
    "warning_line": "        return keys",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import Dict, Any, List, Optional\n\n",
        "source_code_len": 47,
        "target_code": "\nfrom typing import Dict, Any, List, Optional, Set\n\n",
        "target_code_len": 52,
        "diff_format": "@@ -22,3 +22,3 @@\n \n-from typing import Dict, Any, List, Optional\n+from typing import Dict, Any, List, Optional, Set\n \n",
        "source_code_with_indent": "\nfrom typing import Dict, Any, List, Optional\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import Dict, Any, List, Optional, Set\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    #   \\return A set of all keys of settings in this container.\n    def getAllKeys(self) -> List[str]:\n        keys = set()\n",
        "source_code_len": 125,
        "target_code": "    #   \\return A set of all keys of settings in this container.\n    def getAllKeys(self) -> Set[str]:\n        keys = set()\n",
        "target_code_len": 124,
        "diff_format": "@@ -155,3 +155,3 @@\n     #   \\return A set of all keys of settings in this container.\n-    def getAllKeys(self) -> List[str]:\n+    def getAllKeys(self) -> Set[str]:\n         keys = set()\n",
        "source_code_with_indent": "    #   \\return A set of all keys of settings in this container.\n    <DED>def getAllKeys(self) -> List[str]:\n        <IND>keys = set()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    #   \\return A set of all keys of settings in this container.\n    <DED>def getAllKeys(self) -> Set[str]:\n        <IND>keys = set()\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]