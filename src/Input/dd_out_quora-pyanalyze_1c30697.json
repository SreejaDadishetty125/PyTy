[
  {
    "project": "quora/pyanalyze",
    "commit": "1c3069709776f1edcd4078b7c17f9ad62637a773",
    "filename": "pyanalyze/yield_checker.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/quora-pyanalyze/pyanalyze/yield_checker.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pyanalyze/yield_checker.py:105:12 Incompatible return type [7]: Expected `Tuple[List[_ast.AST], List[_ast.AST]]` but got `Tuple[List[_ast.AST], List[Optional[_ast.expr]]]`.",
    "message": " Expected `Tuple[List[_ast.AST], List[_ast.AST]]` but got `Tuple[List[_ast.AST], List[Optional[_ast.expr]]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 105,
    "warning_line": "            return ([ast.Name(id=\"_\", ctx=ast.Store())], [self.yield_node.value])",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"\"\"Returns a pair of a list of target nodes and a list of value nodes.\"\"\"\n        if isinstance(self.statement_node, ast.Assign):\n",
        "source_code_len": 138,
        "target_code": "        \"\"\"Returns a pair of a list of target nodes and a list of value nodes.\"\"\"\n        assert self.yield_node.value is not None\n        if isinstance(self.statement_node, ast.Assign):\n",
        "target_code_len": 187,
        "diff_format": "@@ -65,2 +65,3 @@\n         \"\"\"Returns a pair of a list of target nodes and a list of value nodes.\"\"\"\n+        assert self.yield_node.value is not None\n         if isinstance(self.statement_node, ast.Assign):\n",
        "source_code_with_indent": "        <IND>\"\"\"Returns a pair of a list of target nodes and a list of value nodes.\"\"\"\n        if isinstance(self.statement_node, ast.Assign):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>\"\"\"Returns a pair of a list of target nodes and a list of value nodes.\"\"\"\n        assert self.yield_node.value is not None\n        if isinstance(self.statement_node, ast.Assign):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "quora/pyanalyze",
    "commit": "1c3069709776f1edcd4078b7c17f9ad62637a773",
    "filename": "pyanalyze/yield_checker.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/quora-pyanalyze/pyanalyze/yield_checker.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pyanalyze/yield_checker.py:107:8 Incompatible return type [7]: Expected `Tuple[List[_ast.AST], List[_ast.AST]]` but got `Tuple[List[_ast.AST], List[_ast.expr]]`.",
    "message": " Expected `Tuple[List[_ast.AST], List[_ast.AST]]` but got `Tuple[List[_ast.AST], List[_ast.expr]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 107,
    "warning_line": "        return (",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"\"\"Returns a pair of a list of target nodes and a list of value nodes.\"\"\"\n        if isinstance(self.statement_node, ast.Assign):\n",
        "source_code_len": 138,
        "target_code": "        \"\"\"Returns a pair of a list of target nodes and a list of value nodes.\"\"\"\n        assert self.yield_node.value is not None\n        if isinstance(self.statement_node, ast.Assign):\n",
        "target_code_len": 187,
        "diff_format": "@@ -65,2 +65,3 @@\n         \"\"\"Returns a pair of a list of target nodes and a list of value nodes.\"\"\"\n+        assert self.yield_node.value is not None\n         if isinstance(self.statement_node, ast.Assign):\n",
        "source_code_with_indent": "        <IND>\"\"\"Returns a pair of a list of target nodes and a list of value nodes.\"\"\"\n        if isinstance(self.statement_node, ast.Assign):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>\"\"\"Returns a pair of a list of target nodes and a list of value nodes.\"\"\"\n        assert self.yield_node.value is not None\n        if isinstance(self.statement_node, ast.Assign):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "quora/pyanalyze",
    "commit": "1c3069709776f1edcd4078b7c17f9ad62637a773",
    "filename": "pyanalyze/yield_checker.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/quora-pyanalyze/pyanalyze/yield_checker.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pyanalyze/yield_checker.py:552:50 Incompatible parameter type [6]: Expected `_ast.AST` for 1st positional only parameter to call `YieldChecker.generate_varname_from_node` but got `Optional[_ast.expr]`.",
    "message": " Expected `_ast.AST` for 1st positional only parameter to call `YieldChecker.generate_varname_from_node` but got `Optional[_ast.expr]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 552,
    "warning_line": "        varname = self.generate_varname_from_node(yield_info.yield_node.value)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"\"\"\n        varname = self.generate_varname_from_node(yield_info.yield_node.value)\n",
        "source_code_len": 91,
        "target_code": "        \"\"\"\n        assert yield_info.yield_node.value is not None\n        varname = self.generate_varname_from_node(yield_info.yield_node.value)\n",
        "target_code_len": 146,
        "diff_format": "@@ -551,2 +553,3 @@\n         \"\"\"\n+        assert yield_info.yield_node.value is not None\n         varname = self.generate_varname_from_node(yield_info.yield_node.value)\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n        varname = self.generate_varname_from_node(yield_info.yield_node.value)\n",
        "target_code_with_indent": "\n        assert yield_info.yield_node.value is not None\n        varname = self.generate_varname_from_node(yield_info.yield_node.value)\n"
      }
    ]
  }
]