[
  {
    "project": "abhinavsingh/proxy.py",
    "commit": "864a0b8f5f00e3a2e53fda1ecf035a071de14d33",
    "filename": "proxy/core/ssh/tunnel.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/abhinavsingh-proxy.py/proxy/core/ssh/tunnel.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "proxy/core/ssh/tunnel.py:47:12 Incompatible variable type [9]: transport is declared to have type `paramiko.transport.Transport` but is used as type `typing.Optional[paramiko.transport.Transport]`.",
    "message": " transport is declared to have type `paramiko.transport.Transport` but is used as type `typing.Optional[paramiko.transport.Transport]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 47,
    "warning_line": "            transport: paramiko.transport.Transport = ssh.get_transport()",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\"\"\"\nfrom typing import Tuple, Callable\n\n",
        "source_code_len": 40,
        "target_code": "\"\"\"\nfrom typing import Optional, Tuple, Callable\n\n",
        "target_code_len": 50,
        "diff_format": "@@ -10,3 +10,3 @@\n \"\"\"\n-from typing import Tuple, Callable\n+from typing import Optional, Tuple, Callable\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\nfrom typing import Tuple, Callable\n\n",
        "target_code_with_indent": "\nfrom typing import Optional, Tuple, Callable\n\n"
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            print('SSH connection established...')\n            transport: paramiko.transport.Transport = ssh.get_transport()\n            transport.request_port_forward('', self.remote_proxy_port)\n",
        "source_code_len": 196,
        "target_code": "            print('SSH connection established...')\n            transport: Optional[paramiko.transport.Transport] = ssh.get_transport(\n            )\n            assert transport is not None\n            transport.request_port_forward('', self.remote_proxy_port)\n",
        "target_code_len": 260,
        "diff_format": "@@ -46,3 +46,5 @@\n             print('SSH connection established...')\n-            transport: paramiko.transport.Transport = ssh.get_transport()\n+            transport: Optional[paramiko.transport.Transport] = ssh.get_transport(\n+            )\n+            assert transport is not None\n             transport.request_port_forward('', self.remote_proxy_port)\n",
        "source_code_with_indent": "            print('SSH connection established...')\n            transport: paramiko.transport.Transport = ssh.get_transport()\n            transport.request_port_forward('', self.remote_proxy_port)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            print('SSH connection established...')\n            transport: Optional[paramiko.transport.Transport] = ssh.get_transport(\n            )\n            assert transport is not None\n            transport.request_port_forward('', self.remote_proxy_port)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            while True:\n                conn: paramiko.channel.Channel = transport.accept(timeout=1)\n                e = transport.get_exception()\n",
        "source_code_len": 147,
        "target_code": "            while True:\n                conn: Optional[paramiko.channel.Channel] = transport.accept(\n                    timeout=1)\n                assert conn is not None\n                e = transport.get_exception()\n",
        "target_code_len": 218,
        "diff_format": "@@ -50,3 +52,5 @@\n             while True:\n-                conn: paramiko.channel.Channel = transport.accept(timeout=1)\n+                conn: Optional[paramiko.channel.Channel] = transport.accept(\n+                    timeout=1)\n+                assert conn is not None\n                 e = transport.get_exception()\n",
        "source_code_with_indent": "            while True:\n                <IND>conn: paramiko.channel.Channel = transport.accept(timeout=1)\n                e = transport.get_exception()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            while True:\n                <IND>conn: Optional[paramiko.channel.Channel] = transport.accept(\n                    timeout=1)\n                assert conn is not None\n                e = transport.get_exception()\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "abhinavsingh/proxy.py",
    "commit": "864a0b8f5f00e3a2e53fda1ecf035a071de14d33",
    "filename": "proxy/core/ssh/tunnel.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/abhinavsingh-proxy.py/proxy/core/ssh/tunnel.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "proxy/core/ssh/tunnel.py:51:16 Incompatible variable type [9]: conn is declared to have type `paramiko.channel.Channel` but is used as type `typing.Optional[paramiko.channel.Channel]`.",
    "message": " conn is declared to have type `paramiko.channel.Channel` but is used as type `typing.Optional[paramiko.channel.Channel]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 51,
    "warning_line": "                conn: paramiko.channel.Channel = transport.accept(timeout=1)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\"\"\"\nfrom typing import Tuple, Callable\n\n",
        "source_code_len": 40,
        "target_code": "\"\"\"\nfrom typing import Optional, Tuple, Callable\n\n",
        "target_code_len": 50,
        "diff_format": "@@ -10,3 +10,3 @@\n \"\"\"\n-from typing import Tuple, Callable\n+from typing import Optional, Tuple, Callable\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\nfrom typing import Tuple, Callable\n\n",
        "target_code_with_indent": "\nfrom typing import Optional, Tuple, Callable\n\n"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            print('SSH connection established...')\n            transport: paramiko.transport.Transport = ssh.get_transport()\n            transport.request_port_forward('', self.remote_proxy_port)\n",
        "source_code_len": 196,
        "target_code": "            print('SSH connection established...')\n            transport: Optional[paramiko.transport.Transport] = ssh.get_transport(\n            )\n            assert transport is not None\n            transport.request_port_forward('', self.remote_proxy_port)\n",
        "target_code_len": 260,
        "diff_format": "@@ -46,3 +46,5 @@\n             print('SSH connection established...')\n-            transport: paramiko.transport.Transport = ssh.get_transport()\n+            transport: Optional[paramiko.transport.Transport] = ssh.get_transport(\n+            )\n+            assert transport is not None\n             transport.request_port_forward('', self.remote_proxy_port)\n",
        "source_code_with_indent": "            print('SSH connection established...')\n            transport: paramiko.transport.Transport = ssh.get_transport()\n            transport.request_port_forward('', self.remote_proxy_port)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            print('SSH connection established...')\n            transport: Optional[paramiko.transport.Transport] = ssh.get_transport(\n            )\n            assert transport is not None\n            transport.request_port_forward('', self.remote_proxy_port)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            while True:\n                conn: paramiko.channel.Channel = transport.accept(timeout=1)\n                e = transport.get_exception()\n",
        "source_code_len": 147,
        "target_code": "            while True:\n                conn: Optional[paramiko.channel.Channel] = transport.accept(\n                    timeout=1)\n                assert conn is not None\n                e = transport.get_exception()\n",
        "target_code_len": 218,
        "diff_format": "@@ -50,3 +52,5 @@\n             while True:\n-                conn: paramiko.channel.Channel = transport.accept(timeout=1)\n+                conn: Optional[paramiko.channel.Channel] = transport.accept(\n+                    timeout=1)\n+                assert conn is not None\n                 e = transport.get_exception()\n",
        "source_code_with_indent": "            while True:\n                <IND>conn: paramiko.channel.Channel = transport.accept(timeout=1)\n                e = transport.get_exception()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            while True:\n                <IND>conn: Optional[paramiko.channel.Channel] = transport.accept(\n                    timeout=1)\n                assert conn is not None\n                e = transport.get_exception()\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]