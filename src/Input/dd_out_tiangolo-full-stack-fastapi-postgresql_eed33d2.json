[
  {
    "project": "tiangolo/full-stack-fastapi-postgresql",
    "commit": "eed33d276d04a719e7555be6d0c4ccda42d49716",
    "filename": "{{cookiecutter.project_slug}}/backend/app/app/core/config.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/tiangolo-full-stack-fastapi-postgresql/{{cookiecutter.project_slug}}/backend/app/app/core/config.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "{{cookiecutter.project_slug}}/backend/app/app/core/config.py:56:4 Incompatible attribute type [8]: Attribute `SMTP_PORT` declared in class `Settings` has type `int` but is used as type `None`.",
    "message": " Attribute `SMTP_PORT` declared in class `Settings` has type `int` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 56,
    "warning_line": "    SMTP_PORT: int = None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import secrets\nfrom typing import List\n\n",
        "source_code_len": 40,
        "target_code": "import secrets\nfrom typing import Any, Dict, List, Optional, Union\n\n",
        "target_code_len": 68,
        "diff_format": "@@ -1,3 +1,3 @@\n import secrets\n-from typing import List\n+from typing import Any, Dict, List, Optional, Union\n \n",
        "source_code_with_indent": "import secrets\nfrom typing import List\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import secrets\nfrom typing import Any, Dict, List, Optional, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    SMTP_TLS: bool = True\n    SMTP_PORT: int = None\n    SMTP_HOST: str = None\n    SMTP_USER: str = None\n    SMTP_PASSWORD: str = None\n    EMAILS_FROM_EMAIL: EmailStr = None\n    EMAILS_FROM_NAME: str = None\n\n    @validator(\"EMAILS_FROM_NAME\")\n    def get_project_name(cls, v, values):\n        if not v:\n",
        "source_code_len": 302,
        "target_code": "    SMTP_TLS: bool = True\n    SMTP_PORT: Optional[int] = None\n    SMTP_HOST: Optional[str] = None\n    SMTP_USER: Optional[str] = None\n    SMTP_PASSWORD: Optional[str] = None\n    EMAILS_FROM_EMAIL: Optional[EmailStr] = None\n    EMAILS_FROM_NAME: Optional[str] = None\n\n    @validator(\"EMAILS_FROM_NAME\")\n    def get_project_name(cls, v: Optional[str], values: Dict[str, Any]) -> str:\n        if not v:\n",
        "target_code_len": 400,
        "diff_format": "@@ -55,11 +54,11 @@\n     SMTP_TLS: bool = True\n-    SMTP_PORT: int = None\n-    SMTP_HOST: str = None\n-    SMTP_USER: str = None\n-    SMTP_PASSWORD: str = None\n-    EMAILS_FROM_EMAIL: EmailStr = None\n-    EMAILS_FROM_NAME: str = None\n+    SMTP_PORT: Optional[int] = None\n+    SMTP_HOST: Optional[str] = None\n+    SMTP_USER: Optional[str] = None\n+    SMTP_PASSWORD: Optional[str] = None\n+    EMAILS_FROM_EMAIL: Optional[EmailStr] = None\n+    EMAILS_FROM_NAME: Optional[str] = None\n \n     @validator(\"EMAILS_FROM_NAME\")\n-    def get_project_name(cls, v, values):\n+    def get_project_name(cls, v: Optional[str], values: Dict[str, Any]) -> str:\n         if not v:\n",
        "source_code_with_indent": "    <DED>SMTP_TLS: bool = True\n    SMTP_PORT: int = None\n    SMTP_HOST: str = None\n    SMTP_USER: str = None\n    SMTP_PASSWORD: str = None\n    EMAILS_FROM_EMAIL: EmailStr = None\n    EMAILS_FROM_NAME: str = None\n\n    @validator(\"EMAILS_FROM_NAME\")\n    def get_project_name(cls, v, values):\n        <IND>if not v:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>SMTP_TLS: bool = True\n    SMTP_PORT: Optional[int] = None\n    SMTP_HOST: Optional[str] = None\n    SMTP_USER: Optional[str] = None\n    SMTP_PASSWORD: Optional[str] = None\n    EMAILS_FROM_EMAIL: Optional[EmailStr] = None\n    EMAILS_FROM_NAME: Optional[str] = None\n\n    @validator(\"EMAILS_FROM_NAME\")\n    def get_project_name(cls, v: Optional[str], values: Dict[str, Any]) -> str:\n        <IND>if not v:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "tiangolo/full-stack-fastapi-postgresql",
    "commit": "eed33d276d04a719e7555be6d0c4ccda42d49716",
    "filename": "{{cookiecutter.project_slug}}/backend/app/app/core/config.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/tiangolo-full-stack-fastapi-postgresql/{{cookiecutter.project_slug}}/backend/app/app/core/config.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "{{cookiecutter.project_slug}}/backend/app/app/core/config.py:57:4 Incompatible attribute type [8]: Attribute `SMTP_HOST` declared in class `Settings` has type `str` but is used as type `None`.",
    "message": " Attribute `SMTP_HOST` declared in class `Settings` has type `str` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 57,
    "warning_line": "    SMTP_HOST: str = None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import secrets\nfrom typing import List\n\n",
        "source_code_len": 40,
        "target_code": "import secrets\nfrom typing import Any, Dict, List, Optional, Union\n\n",
        "target_code_len": 68,
        "diff_format": "@@ -1,3 +1,3 @@\n import secrets\n-from typing import List\n+from typing import Any, Dict, List, Optional, Union\n \n",
        "source_code_with_indent": "import secrets\nfrom typing import List\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import secrets\nfrom typing import Any, Dict, List, Optional, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    SMTP_TLS: bool = True\n    SMTP_PORT: int = None\n    SMTP_HOST: str = None\n    SMTP_USER: str = None\n    SMTP_PASSWORD: str = None\n    EMAILS_FROM_EMAIL: EmailStr = None\n    EMAILS_FROM_NAME: str = None\n\n    @validator(\"EMAILS_FROM_NAME\")\n    def get_project_name(cls, v, values):\n        if not v:\n",
        "source_code_len": 302,
        "target_code": "    SMTP_TLS: bool = True\n    SMTP_PORT: Optional[int] = None\n    SMTP_HOST: Optional[str] = None\n    SMTP_USER: Optional[str] = None\n    SMTP_PASSWORD: Optional[str] = None\n    EMAILS_FROM_EMAIL: Optional[EmailStr] = None\n    EMAILS_FROM_NAME: Optional[str] = None\n\n    @validator(\"EMAILS_FROM_NAME\")\n    def get_project_name(cls, v: Optional[str], values: Dict[str, Any]) -> str:\n        if not v:\n",
        "target_code_len": 400,
        "diff_format": "@@ -55,11 +54,11 @@\n     SMTP_TLS: bool = True\n-    SMTP_PORT: int = None\n-    SMTP_HOST: str = None\n-    SMTP_USER: str = None\n-    SMTP_PASSWORD: str = None\n-    EMAILS_FROM_EMAIL: EmailStr = None\n-    EMAILS_FROM_NAME: str = None\n+    SMTP_PORT: Optional[int] = None\n+    SMTP_HOST: Optional[str] = None\n+    SMTP_USER: Optional[str] = None\n+    SMTP_PASSWORD: Optional[str] = None\n+    EMAILS_FROM_EMAIL: Optional[EmailStr] = None\n+    EMAILS_FROM_NAME: Optional[str] = None\n \n     @validator(\"EMAILS_FROM_NAME\")\n-    def get_project_name(cls, v, values):\n+    def get_project_name(cls, v: Optional[str], values: Dict[str, Any]) -> str:\n         if not v:\n",
        "source_code_with_indent": "    <DED>SMTP_TLS: bool = True\n    SMTP_PORT: int = None\n    SMTP_HOST: str = None\n    SMTP_USER: str = None\n    SMTP_PASSWORD: str = None\n    EMAILS_FROM_EMAIL: EmailStr = None\n    EMAILS_FROM_NAME: str = None\n\n    @validator(\"EMAILS_FROM_NAME\")\n    def get_project_name(cls, v, values):\n        <IND>if not v:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>SMTP_TLS: bool = True\n    SMTP_PORT: Optional[int] = None\n    SMTP_HOST: Optional[str] = None\n    SMTP_USER: Optional[str] = None\n    SMTP_PASSWORD: Optional[str] = None\n    EMAILS_FROM_EMAIL: Optional[EmailStr] = None\n    EMAILS_FROM_NAME: Optional[str] = None\n\n    @validator(\"EMAILS_FROM_NAME\")\n    def get_project_name(cls, v: Optional[str], values: Dict[str, Any]) -> str:\n        <IND>if not v:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "tiangolo/full-stack-fastapi-postgresql",
    "commit": "eed33d276d04a719e7555be6d0c4ccda42d49716",
    "filename": "{{cookiecutter.project_slug}}/backend/app/app/core/config.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/tiangolo-full-stack-fastapi-postgresql/{{cookiecutter.project_slug}}/backend/app/app/core/config.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "{{cookiecutter.project_slug}}/backend/app/app/core/config.py:58:4 Incompatible attribute type [8]: Attribute `SMTP_USER` declared in class `Settings` has type `str` but is used as type `None`.",
    "message": " Attribute `SMTP_USER` declared in class `Settings` has type `str` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 58,
    "warning_line": "    SMTP_USER: str = None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import secrets\nfrom typing import List\n\n",
        "source_code_len": 40,
        "target_code": "import secrets\nfrom typing import Any, Dict, List, Optional, Union\n\n",
        "target_code_len": 68,
        "diff_format": "@@ -1,3 +1,3 @@\n import secrets\n-from typing import List\n+from typing import Any, Dict, List, Optional, Union\n \n",
        "source_code_with_indent": "import secrets\nfrom typing import List\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import secrets\nfrom typing import Any, Dict, List, Optional, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    SMTP_TLS: bool = True\n    SMTP_PORT: int = None\n    SMTP_HOST: str = None\n    SMTP_USER: str = None\n    SMTP_PASSWORD: str = None\n    EMAILS_FROM_EMAIL: EmailStr = None\n    EMAILS_FROM_NAME: str = None\n\n    @validator(\"EMAILS_FROM_NAME\")\n    def get_project_name(cls, v, values):\n        if not v:\n",
        "source_code_len": 302,
        "target_code": "    SMTP_TLS: bool = True\n    SMTP_PORT: Optional[int] = None\n    SMTP_HOST: Optional[str] = None\n    SMTP_USER: Optional[str] = None\n    SMTP_PASSWORD: Optional[str] = None\n    EMAILS_FROM_EMAIL: Optional[EmailStr] = None\n    EMAILS_FROM_NAME: Optional[str] = None\n\n    @validator(\"EMAILS_FROM_NAME\")\n    def get_project_name(cls, v: Optional[str], values: Dict[str, Any]) -> str:\n        if not v:\n",
        "target_code_len": 400,
        "diff_format": "@@ -55,11 +54,11 @@\n     SMTP_TLS: bool = True\n-    SMTP_PORT: int = None\n-    SMTP_HOST: str = None\n-    SMTP_USER: str = None\n-    SMTP_PASSWORD: str = None\n-    EMAILS_FROM_EMAIL: EmailStr = None\n-    EMAILS_FROM_NAME: str = None\n+    SMTP_PORT: Optional[int] = None\n+    SMTP_HOST: Optional[str] = None\n+    SMTP_USER: Optional[str] = None\n+    SMTP_PASSWORD: Optional[str] = None\n+    EMAILS_FROM_EMAIL: Optional[EmailStr] = None\n+    EMAILS_FROM_NAME: Optional[str] = None\n \n     @validator(\"EMAILS_FROM_NAME\")\n-    def get_project_name(cls, v, values):\n+    def get_project_name(cls, v: Optional[str], values: Dict[str, Any]) -> str:\n         if not v:\n",
        "source_code_with_indent": "    <DED>SMTP_TLS: bool = True\n    SMTP_PORT: int = None\n    SMTP_HOST: str = None\n    SMTP_USER: str = None\n    SMTP_PASSWORD: str = None\n    EMAILS_FROM_EMAIL: EmailStr = None\n    EMAILS_FROM_NAME: str = None\n\n    @validator(\"EMAILS_FROM_NAME\")\n    def get_project_name(cls, v, values):\n        <IND>if not v:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>SMTP_TLS: bool = True\n    SMTP_PORT: Optional[int] = None\n    SMTP_HOST: Optional[str] = None\n    SMTP_USER: Optional[str] = None\n    SMTP_PASSWORD: Optional[str] = None\n    EMAILS_FROM_EMAIL: Optional[EmailStr] = None\n    EMAILS_FROM_NAME: Optional[str] = None\n\n    @validator(\"EMAILS_FROM_NAME\")\n    def get_project_name(cls, v: Optional[str], values: Dict[str, Any]) -> str:\n        <IND>if not v:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "tiangolo/full-stack-fastapi-postgresql",
    "commit": "eed33d276d04a719e7555be6d0c4ccda42d49716",
    "filename": "{{cookiecutter.project_slug}}/backend/app/app/core/config.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/tiangolo-full-stack-fastapi-postgresql/{{cookiecutter.project_slug}}/backend/app/app/core/config.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "{{cookiecutter.project_slug}}/backend/app/app/core/config.py:59:4 Incompatible attribute type [8]: Attribute `SMTP_PASSWORD` declared in class `Settings` has type `str` but is used as type `None`.",
    "message": " Attribute `SMTP_PASSWORD` declared in class `Settings` has type `str` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 59,
    "warning_line": "    SMTP_PASSWORD: str = None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import secrets\nfrom typing import List\n\n",
        "source_code_len": 40,
        "target_code": "import secrets\nfrom typing import Any, Dict, List, Optional, Union\n\n",
        "target_code_len": 68,
        "diff_format": "@@ -1,3 +1,3 @@\n import secrets\n-from typing import List\n+from typing import Any, Dict, List, Optional, Union\n \n",
        "source_code_with_indent": "import secrets\nfrom typing import List\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import secrets\nfrom typing import Any, Dict, List, Optional, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    SMTP_TLS: bool = True\n    SMTP_PORT: int = None\n    SMTP_HOST: str = None\n    SMTP_USER: str = None\n    SMTP_PASSWORD: str = None\n    EMAILS_FROM_EMAIL: EmailStr = None\n    EMAILS_FROM_NAME: str = None\n\n    @validator(\"EMAILS_FROM_NAME\")\n    def get_project_name(cls, v, values):\n        if not v:\n",
        "source_code_len": 302,
        "target_code": "    SMTP_TLS: bool = True\n    SMTP_PORT: Optional[int] = None\n    SMTP_HOST: Optional[str] = None\n    SMTP_USER: Optional[str] = None\n    SMTP_PASSWORD: Optional[str] = None\n    EMAILS_FROM_EMAIL: Optional[EmailStr] = None\n    EMAILS_FROM_NAME: Optional[str] = None\n\n    @validator(\"EMAILS_FROM_NAME\")\n    def get_project_name(cls, v: Optional[str], values: Dict[str, Any]) -> str:\n        if not v:\n",
        "target_code_len": 400,
        "diff_format": "@@ -55,11 +54,11 @@\n     SMTP_TLS: bool = True\n-    SMTP_PORT: int = None\n-    SMTP_HOST: str = None\n-    SMTP_USER: str = None\n-    SMTP_PASSWORD: str = None\n-    EMAILS_FROM_EMAIL: EmailStr = None\n-    EMAILS_FROM_NAME: str = None\n+    SMTP_PORT: Optional[int] = None\n+    SMTP_HOST: Optional[str] = None\n+    SMTP_USER: Optional[str] = None\n+    SMTP_PASSWORD: Optional[str] = None\n+    EMAILS_FROM_EMAIL: Optional[EmailStr] = None\n+    EMAILS_FROM_NAME: Optional[str] = None\n \n     @validator(\"EMAILS_FROM_NAME\")\n-    def get_project_name(cls, v, values):\n+    def get_project_name(cls, v: Optional[str], values: Dict[str, Any]) -> str:\n         if not v:\n",
        "source_code_with_indent": "    <DED>SMTP_TLS: bool = True\n    SMTP_PORT: int = None\n    SMTP_HOST: str = None\n    SMTP_USER: str = None\n    SMTP_PASSWORD: str = None\n    EMAILS_FROM_EMAIL: EmailStr = None\n    EMAILS_FROM_NAME: str = None\n\n    @validator(\"EMAILS_FROM_NAME\")\n    def get_project_name(cls, v, values):\n        <IND>if not v:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>SMTP_TLS: bool = True\n    SMTP_PORT: Optional[int] = None\n    SMTP_HOST: Optional[str] = None\n    SMTP_USER: Optional[str] = None\n    SMTP_PASSWORD: Optional[str] = None\n    EMAILS_FROM_EMAIL: Optional[EmailStr] = None\n    EMAILS_FROM_NAME: Optional[str] = None\n\n    @validator(\"EMAILS_FROM_NAME\")\n    def get_project_name(cls, v: Optional[str], values: Dict[str, Any]) -> str:\n        <IND>if not v:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "tiangolo/full-stack-fastapi-postgresql",
    "commit": "eed33d276d04a719e7555be6d0c4ccda42d49716",
    "filename": "{{cookiecutter.project_slug}}/backend/app/app/core/config.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/tiangolo-full-stack-fastapi-postgresql/{{cookiecutter.project_slug}}/backend/app/app/core/config.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "{{cookiecutter.project_slug}}/backend/app/app/core/config.py:61:4 Incompatible attribute type [8]: Attribute `EMAILS_FROM_NAME` declared in class `Settings` has type `str` but is used as type `None`.",
    "message": " Attribute `EMAILS_FROM_NAME` declared in class `Settings` has type `str` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 61,
    "warning_line": "    EMAILS_FROM_NAME: str = None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import secrets\nfrom typing import List\n\n",
        "source_code_len": 40,
        "target_code": "import secrets\nfrom typing import Any, Dict, List, Optional, Union\n\n",
        "target_code_len": 68,
        "diff_format": "@@ -1,3 +1,3 @@\n import secrets\n-from typing import List\n+from typing import Any, Dict, List, Optional, Union\n \n",
        "source_code_with_indent": "import secrets\nfrom typing import List\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import secrets\nfrom typing import Any, Dict, List, Optional, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    SMTP_TLS: bool = True\n    SMTP_PORT: int = None\n    SMTP_HOST: str = None\n    SMTP_USER: str = None\n    SMTP_PASSWORD: str = None\n    EMAILS_FROM_EMAIL: EmailStr = None\n    EMAILS_FROM_NAME: str = None\n\n    @validator(\"EMAILS_FROM_NAME\")\n    def get_project_name(cls, v, values):\n        if not v:\n",
        "source_code_len": 302,
        "target_code": "    SMTP_TLS: bool = True\n    SMTP_PORT: Optional[int] = None\n    SMTP_HOST: Optional[str] = None\n    SMTP_USER: Optional[str] = None\n    SMTP_PASSWORD: Optional[str] = None\n    EMAILS_FROM_EMAIL: Optional[EmailStr] = None\n    EMAILS_FROM_NAME: Optional[str] = None\n\n    @validator(\"EMAILS_FROM_NAME\")\n    def get_project_name(cls, v: Optional[str], values: Dict[str, Any]) -> str:\n        if not v:\n",
        "target_code_len": 400,
        "diff_format": "@@ -55,11 +54,11 @@\n     SMTP_TLS: bool = True\n-    SMTP_PORT: int = None\n-    SMTP_HOST: str = None\n-    SMTP_USER: str = None\n-    SMTP_PASSWORD: str = None\n-    EMAILS_FROM_EMAIL: EmailStr = None\n-    EMAILS_FROM_NAME: str = None\n+    SMTP_PORT: Optional[int] = None\n+    SMTP_HOST: Optional[str] = None\n+    SMTP_USER: Optional[str] = None\n+    SMTP_PASSWORD: Optional[str] = None\n+    EMAILS_FROM_EMAIL: Optional[EmailStr] = None\n+    EMAILS_FROM_NAME: Optional[str] = None\n \n     @validator(\"EMAILS_FROM_NAME\")\n-    def get_project_name(cls, v, values):\n+    def get_project_name(cls, v: Optional[str], values: Dict[str, Any]) -> str:\n         if not v:\n",
        "source_code_with_indent": "    <DED>SMTP_TLS: bool = True\n    SMTP_PORT: int = None\n    SMTP_HOST: str = None\n    SMTP_USER: str = None\n    SMTP_PASSWORD: str = None\n    EMAILS_FROM_EMAIL: EmailStr = None\n    EMAILS_FROM_NAME: str = None\n\n    @validator(\"EMAILS_FROM_NAME\")\n    def get_project_name(cls, v, values):\n        <IND>if not v:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>SMTP_TLS: bool = True\n    SMTP_PORT: Optional[int] = None\n    SMTP_HOST: Optional[str] = None\n    SMTP_USER: Optional[str] = None\n    SMTP_PASSWORD: Optional[str] = None\n    EMAILS_FROM_EMAIL: Optional[EmailStr] = None\n    EMAILS_FROM_NAME: Optional[str] = None\n\n    @validator(\"EMAILS_FROM_NAME\")\n    def get_project_name(cls, v: Optional[str], values: Dict[str, Any]) -> str:\n        <IND>if not v:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "tiangolo/full-stack-fastapi-postgresql",
    "commit": "eed33d276d04a719e7555be6d0c4ccda42d49716",
    "filename": "{{cookiecutter.project_slug}}/backend/app/app/core/jwt.py",
    "min_patch_found": false,
    "full_warning_msg": "{{cookiecutter.project_slug}}/backend/app/app/core/jwt.py:11:39 Incompatible variable type [9]: expires_delta is declared to have type `timedelta` but is used as type `None`.",
    "exception": "[Errno 2] No such file or directory: '/home/chowyi/TypeAnnotation_Study/GitHub/tiangolo-full-stack-fastapi-postgresql/{{cookiecutter.project_slug}}/backend/app/app/core/jwt.py'",
    "dd_fail": true
  },
  {
    "project": "tiangolo/full-stack-fastapi-postgresql",
    "commit": "eed33d276d04a719e7555be6d0c4ccda42d49716",
    "filename": "{{cookiecutter.project_slug}}/backend/app/app/schemas/item.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/tiangolo-full-stack-fastapi-postgresql/{{cookiecutter.project_slug}}/backend/app/app/schemas/item.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "{{cookiecutter.project_slug}}/backend/app/app/schemas/item.py:8:4 Incompatible attribute type [8]: Attribute `title` declared in class `ItemBase` has type `str` but is used as type `None`.",
    "message": " Attribute `title` declared in class `ItemBase` has type `str` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 8,
    "warning_line": "    title: str = None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from pydantic import BaseModel\n",
        "source_code_len": 31,
        "target_code": "from typing import Optional\n\nfrom pydantic import BaseModel\n",
        "target_code_len": 60,
        "diff_format": "@@ -1,1 +1,3 @@\n+from typing import Optional\n+\n from pydantic import BaseModel\n",
        "source_code_with_indent": "from pydantic import BaseModel\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Optional\n\nfrom pydantic import BaseModel\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "class ItemBase(BaseModel):\n    title: str = None\n    description: str = None\n\n",
        "source_code_len": 78,
        "target_code": "class ItemBase(BaseModel):\n    title: Optional[str] = None\n    description: Optional[str] = None\n\n",
        "target_code_len": 98,
        "diff_format": "@@ -7,4 +9,4 @@\n class ItemBase(BaseModel):\n-    title: str = None\n-    description: str = None\n+    title: Optional[str] = None\n+    description: Optional[str] = None\n \n",
        "source_code_with_indent": "class ItemBase(BaseModel):\n    <IND>title: str = None\n    description: str = None\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "class ItemBase(BaseModel):\n    <IND>title: Optional[str] = None\n    description: Optional[str] = None\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "tiangolo/full-stack-fastapi-postgresql",
    "commit": "eed33d276d04a719e7555be6d0c4ccda42d49716",
    "filename": "{{cookiecutter.project_slug}}/backend/app/app/schemas/item.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/tiangolo-full-stack-fastapi-postgresql/{{cookiecutter.project_slug}}/backend/app/app/schemas/item.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "{{cookiecutter.project_slug}}/backend/app/app/schemas/item.py:9:4 Incompatible attribute type [8]: Attribute `description` declared in class `ItemBase` has type `str` but is used as type `None`.",
    "message": " Attribute `description` declared in class `ItemBase` has type `str` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 9,
    "warning_line": "    description: str = None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from pydantic import BaseModel\n",
        "source_code_len": 31,
        "target_code": "from typing import Optional\n\nfrom pydantic import BaseModel\n",
        "target_code_len": 60,
        "diff_format": "@@ -1,1 +1,3 @@\n+from typing import Optional\n+\n from pydantic import BaseModel\n",
        "source_code_with_indent": "from pydantic import BaseModel\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Optional\n\nfrom pydantic import BaseModel\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "class ItemBase(BaseModel):\n    title: str = None\n    description: str = None\n\n",
        "source_code_len": 78,
        "target_code": "class ItemBase(BaseModel):\n    title: Optional[str] = None\n    description: Optional[str] = None\n\n",
        "target_code_len": 98,
        "diff_format": "@@ -7,4 +9,4 @@\n class ItemBase(BaseModel):\n-    title: str = None\n-    description: str = None\n+    title: Optional[str] = None\n+    description: Optional[str] = None\n \n",
        "source_code_with_indent": "class ItemBase(BaseModel):\n    <IND>title: str = None\n    description: str = None\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "class ItemBase(BaseModel):\n    <IND>title: Optional[str] = None\n    description: Optional[str] = None\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "tiangolo/full-stack-fastapi-postgresql",
    "commit": "eed33d276d04a719e7555be6d0c4ccda42d49716",
    "filename": "{{cookiecutter.project_slug}}/backend/app/app/schemas/token.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/tiangolo-full-stack-fastapi-postgresql/{{cookiecutter.project_slug}}/backend/app/app/schemas/token.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "{{cookiecutter.project_slug}}/backend/app/app/schemas/token.py:10:4 Incompatible attribute type [8]: Attribute `user_id` declared in class `TokenPayload` has type `int` but is used as type `None`.",
    "message": " Attribute `user_id` declared in class `TokenPayload` has type `int` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 10,
    "warning_line": "    user_id: int = None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from pydantic import BaseModel\n",
        "source_code_len": 31,
        "target_code": "from typing import Optional\n\nfrom pydantic import BaseModel\n",
        "target_code_len": 60,
        "diff_format": "@@ -1,1 +1,3 @@\n+from typing import Optional\n+\n from pydantic import BaseModel\n",
        "source_code_with_indent": "from pydantic import BaseModel\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Optional\n\nfrom pydantic import BaseModel\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "class TokenPayload(BaseModel):\n    user_id: int = None\n",
        "source_code_len": 55,
        "target_code": "class TokenPayload(BaseModel):\n    sub: Optional[int] = None\n",
        "target_code_len": 61,
        "diff_format": "@@ -9,2 +11,2 @@\n class TokenPayload(BaseModel):\n-    user_id: int = None\n+    sub: Optional[int] = None\n",
        "source_code_with_indent": "<DED>class TokenPayload(BaseModel):\n    <IND>user_id: int = None\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED>class TokenPayload(BaseModel):\n    <IND>sub: Optional[int] = None\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "tiangolo/full-stack-fastapi-postgresql",
    "commit": "eed33d276d04a719e7555be6d0c4ccda42d49716",
    "filename": "{{cookiecutter.project_slug}}/backend/app/app/schemas/user.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/tiangolo-full-stack-fastapi-postgresql/{{cookiecutter.project_slug}}/backend/app/app/schemas/user.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "{{cookiecutter.project_slug}}/backend/app/app/schemas/user.py:26:4 Incompatible attribute type [8]: Attribute `id` declared in class `UserInDBBase` has type `int` but is used as type `None`.",
    "message": " Attribute `id` declared in class `UserInDBBase` has type `int` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 26,
    "warning_line": "    id: int = None",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "class UserInDBBase(UserBase):\n    id: int = None\n\n",
        "source_code_len": 50,
        "target_code": "class UserInDBBase(UserBase):\n    id: Optional[int] = None\n\n",
        "target_code_len": 60,
        "diff_format": "@@ -25,3 +25,3 @@\n class UserInDBBase(UserBase):\n-    id: int = None\n+    id: Optional[int] = None\n \n",
        "source_code_with_indent": "<DED>class UserInDBBase(UserBase):\n    <IND>id: int = None\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED>class UserInDBBase(UserBase):\n    <IND>id: Optional[int] = None\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]