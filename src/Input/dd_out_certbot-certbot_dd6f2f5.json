[
  {
    "project": "certbot/certbot",
    "commit": "dd6f2f565e8183b69ff3abf5d965d0d1575b2e5e",
    "filename": "certbot-nginx/certbot_nginx/_internal/nginxparser.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/certbot-certbot/certbot-nginx/certbot_nginx/_internal/nginxparser.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "certbot-nginx/certbot_nginx/_internal/nginxparser.py:133:18 Invalid type [31]: Expression `certbot.__sub__(nginx.certbot_nginx._internal.nginxparser.UnspacedList)` is not a valid type.",
    "message": " Expression `certbot.__sub__(nginx.certbot_nginx._internal.nginxparser.UnspacedList)` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 133,
    "warning_line": "def dumps(blocks):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n# Shortcut functions to respect Python's serialization interface\n# (like pyyaml, picker or json)\n\ndef loads(source):\n    \"\"\"Parses from a string.\n\n    :param str source: The string to parse\n    :returns: The parsed tree\n    :rtype: list\n\n    \"\"\"\n    return UnspacedList(RawNginxParser(source).as_list())\n\n\ndef load(_file):\n    \"\"\"Parses from a file.\n\n    :param file _file: The file to parse\n    :returns: The parsed tree\n    :rtype: list\n\n    \"\"\"\n    return loads(_file.read())\n\n\ndef dumps(blocks):\n    # type: (UnspacedList) -> str\n    \"\"\"Dump to a Unicode string.\n\n    :param UnspacedList block: The parsed tree\n    :rtype: str\n\n    \"\"\"\n    return str(RawNginxDumper(blocks.spaced))\n\n\ndef dump(blocks, _file):\n    # type: (UnspacedList, IO[Any]) -> None\n    \"\"\"Dump to a file.\n\n    :param UnspacedList block: The parsed tree\n    :param IO[Any] _file: The file stream to dump to. It must be opened with\n                          Unicode encoding.\n    :rtype: None\n\n    \"\"\"\n    _file.write(dumps(blocks))\n\n\nspacey = lambda x: (isinstance(x, str) and x.isspace()) or x == ''\n\n",
        "source_code_len": 1077,
        "target_code": "\nspacey = lambda x: (isinstance(x, str) and x.isspace()) or x == ''\n\n\n",
        "target_code_len": 70,
        "diff_format": "@@ -107,52 +108,4 @@\n \n-# Shortcut functions to respect Python's serialization interface\n-# (like pyyaml, picker or json)\n-\n-def loads(source):\n-    \"\"\"Parses from a string.\n-\n-    :param str source: The string to parse\n-    :returns: The parsed tree\n-    :rtype: list\n-\n-    \"\"\"\n-    return UnspacedList(RawNginxParser(source).as_list())\n-\n-\n-def load(_file):\n-    \"\"\"Parses from a file.\n-\n-    :param file _file: The file to parse\n-    :returns: The parsed tree\n-    :rtype: list\n-\n-    \"\"\"\n-    return loads(_file.read())\n-\n-\n-def dumps(blocks):\n-    # type: (UnspacedList) -> str\n-    \"\"\"Dump to a Unicode string.\n-\n-    :param UnspacedList block: The parsed tree\n-    :rtype: str\n-\n-    \"\"\"\n-    return str(RawNginxDumper(blocks.spaced))\n-\n-\n-def dump(blocks, _file):\n-    # type: (UnspacedList, IO[Any]) -> None\n-    \"\"\"Dump to a file.\n-\n-    :param UnspacedList block: The parsed tree\n-    :param IO[Any] _file: The file stream to dump to. It must be opened with\n-                          Unicode encoding.\n-    :rtype: None\n-\n-    \"\"\"\n-    _file.write(dumps(blocks))\n-\n-\n spacey = lambda x: (isinstance(x, str) and x.isspace()) or x == ''\n+\n \n",
        "source_code_with_indent": "\n# Shortcut functions to respect Python's serialization interface\n# (like pyyaml, picker or json)\n\n<DED><DED>def loads(source):\n    <IND>\"\"\"Parses from a string.\n\n    :param str source: The string to parse\n    :returns: The parsed tree\n    :rtype: list\n\n    \"\"\"\n    return UnspacedList(RawNginxParser(source).as_list())\n\n\n<DED>def load(_file):\n    <IND>\"\"\"Parses from a file.\n\n    :param file _file: The file to parse\n    :returns: The parsed tree\n    :rtype: list\n\n    \"\"\"\n    return loads(_file.read())\n\n\n<DED>def dumps(blocks):\n    # type: (UnspacedList) -> str\n    <IND>\"\"\"Dump to a Unicode string.\n\n    :param UnspacedList block: The parsed tree\n    :rtype: str\n\n    \"\"\"\n    return str(RawNginxDumper(blocks.spaced))\n\n\n<DED>def dump(blocks, _file):\n    # type: (UnspacedList, IO[Any]) -> None\n    <IND>\"\"\"Dump to a file.\n\n    :param UnspacedList block: The parsed tree\n    :param IO[Any] _file: The file stream to dump to. It must be opened with\n                          Unicode encoding.\n    :rtype: None\n\n    \"\"\"\n    _file.write(dumps(blocks))\n\n\n<DED>spacey = lambda x: (isinstance(x, str) and x.isspace()) or x == ''\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED><DED>spacey = lambda x: (isinstance(x, str) and x.isspace()) or x == ''\n\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "certbot/certbot",
    "commit": "dd6f2f565e8183b69ff3abf5d965d0d1575b2e5e",
    "filename": "certbot-nginx/certbot_nginx/_internal/nginxparser.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/certbot-certbot/certbot-nginx/certbot_nginx/_internal/nginxparser.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "certbot-nginx/certbot_nginx/_internal/nginxparser.py:144:24 Invalid type [31]: Expression `certbot.__sub__(nginx.certbot_nginx._internal.nginxparser.UnspacedList)` is not a valid type.",
    "message": " Expression `certbot.__sub__(nginx.certbot_nginx._internal.nginxparser.UnspacedList)` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 144,
    "warning_line": "def dump(blocks, _file):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n# Shortcut functions to respect Python's serialization interface\n# (like pyyaml, picker or json)\n\ndef loads(source):\n    \"\"\"Parses from a string.\n\n    :param str source: The string to parse\n    :returns: The parsed tree\n    :rtype: list\n\n    \"\"\"\n    return UnspacedList(RawNginxParser(source).as_list())\n\n\ndef load(_file):\n    \"\"\"Parses from a file.\n\n    :param file _file: The file to parse\n    :returns: The parsed tree\n    :rtype: list\n\n    \"\"\"\n    return loads(_file.read())\n\n\ndef dumps(blocks):\n    # type: (UnspacedList) -> str\n    \"\"\"Dump to a Unicode string.\n\n    :param UnspacedList block: The parsed tree\n    :rtype: str\n\n    \"\"\"\n    return str(RawNginxDumper(blocks.spaced))\n\n\ndef dump(blocks, _file):\n    # type: (UnspacedList, IO[Any]) -> None\n    \"\"\"Dump to a file.\n\n    :param UnspacedList block: The parsed tree\n    :param IO[Any] _file: The file stream to dump to. It must be opened with\n                          Unicode encoding.\n    :rtype: None\n\n    \"\"\"\n    _file.write(dumps(blocks))\n\n\nspacey = lambda x: (isinstance(x, str) and x.isspace()) or x == ''\n\n",
        "source_code_len": 1077,
        "target_code": "\nspacey = lambda x: (isinstance(x, str) and x.isspace()) or x == ''\n\n\n",
        "target_code_len": 70,
        "diff_format": "@@ -107,52 +108,4 @@\n \n-# Shortcut functions to respect Python's serialization interface\n-# (like pyyaml, picker or json)\n-\n-def loads(source):\n-    \"\"\"Parses from a string.\n-\n-    :param str source: The string to parse\n-    :returns: The parsed tree\n-    :rtype: list\n-\n-    \"\"\"\n-    return UnspacedList(RawNginxParser(source).as_list())\n-\n-\n-def load(_file):\n-    \"\"\"Parses from a file.\n-\n-    :param file _file: The file to parse\n-    :returns: The parsed tree\n-    :rtype: list\n-\n-    \"\"\"\n-    return loads(_file.read())\n-\n-\n-def dumps(blocks):\n-    # type: (UnspacedList) -> str\n-    \"\"\"Dump to a Unicode string.\n-\n-    :param UnspacedList block: The parsed tree\n-    :rtype: str\n-\n-    \"\"\"\n-    return str(RawNginxDumper(blocks.spaced))\n-\n-\n-def dump(blocks, _file):\n-    # type: (UnspacedList, IO[Any]) -> None\n-    \"\"\"Dump to a file.\n-\n-    :param UnspacedList block: The parsed tree\n-    :param IO[Any] _file: The file stream to dump to. It must be opened with\n-                          Unicode encoding.\n-    :rtype: None\n-\n-    \"\"\"\n-    _file.write(dumps(blocks))\n-\n-\n spacey = lambda x: (isinstance(x, str) and x.isspace()) or x == ''\n+\n \n",
        "source_code_with_indent": "\n# Shortcut functions to respect Python's serialization interface\n# (like pyyaml, picker or json)\n\n<DED><DED>def loads(source):\n    <IND>\"\"\"Parses from a string.\n\n    :param str source: The string to parse\n    :returns: The parsed tree\n    :rtype: list\n\n    \"\"\"\n    return UnspacedList(RawNginxParser(source).as_list())\n\n\n<DED>def load(_file):\n    <IND>\"\"\"Parses from a file.\n\n    :param file _file: The file to parse\n    :returns: The parsed tree\n    :rtype: list\n\n    \"\"\"\n    return loads(_file.read())\n\n\n<DED>def dumps(blocks):\n    # type: (UnspacedList) -> str\n    <IND>\"\"\"Dump to a Unicode string.\n\n    :param UnspacedList block: The parsed tree\n    :rtype: str\n\n    \"\"\"\n    return str(RawNginxDumper(blocks.spaced))\n\n\n<DED>def dump(blocks, _file):\n    # type: (UnspacedList, IO[Any]) -> None\n    <IND>\"\"\"Dump to a file.\n\n    :param UnspacedList block: The parsed tree\n    :param IO[Any] _file: The file stream to dump to. It must be opened with\n                          Unicode encoding.\n    :rtype: None\n\n    \"\"\"\n    _file.write(dumps(blocks))\n\n\n<DED>spacey = lambda x: (isinstance(x, str) and x.isspace()) or x == ''\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED><DED>spacey = lambda x: (isinstance(x, str) and x.isspace()) or x == ''\n\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]