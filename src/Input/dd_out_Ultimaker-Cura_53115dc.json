[
  {
    "project": "Ultimaker/Cura",
    "commit": "53115dc3b20986c8ba12cd24328563e6b822fe8e",
    "filename": "plugins/Toolbox/src/CloudSync/DownloadPresenter.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Ultimaker-Cura/plugins/Toolbox/src/CloudSync/DownloadPresenter.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "plugins/Toolbox/src/CloudSync/DownloadPresenter.py:127:8 Incompatible return type [7]: Expected `bool` but got implicit return value of `None`.",
    "message": " Expected `bool` but got implicit return value of `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 127,
    "warning_line": "        self.done.emit(success_items, error_items)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self.done.emit(success_items, error_items)\n",
        "source_code_len": 51,
        "target_code": "        self.done.emit(success_items, error_items)\n        return True\n",
        "target_code_len": 71,
        "diff_format": "@@ -127,1 +126,2 @@\n         self.done.emit(success_items, error_items)\n+        return True\n",
        "source_code_with_indent": "        self.done.emit(success_items, error_items)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self.done.emit(success_items, error_items)\n        return True\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Ultimaker/Cura",
    "commit": "53115dc3b20986c8ba12cd24328563e6b822fe8e",
    "filename": "plugins/Toolbox/src/CloudSync/LicensePresenter.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Ultimaker-Cura/plugins/Toolbox/src/CloudSync/LicensePresenter.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "plugins/Toolbox/src/CloudSync/LicensePresenter.py:50:45 Incompatible parameter type [6]: Expected `typing.Sized` for 1st positional only parameter to call `len` but got `Optional[Dict[typing.Any, typing.Any]]`.",
    "message": " Expected `typing.Sized` for 1st positional only parameter to call `len` but got `Optional[Dict[typing.Any, typing.Any]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 50,
    "warning_line": "        self._license_model.setPageCount(len(self._package_models))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import os\nfrom typing import Dict, Optional\n\n",
        "source_code_len": 45,
        "target_code": "import os\nfrom typing import Dict, Optional, List\n\n",
        "target_code_len": 51,
        "diff_format": "@@ -1,3 +1,3 @@\n import os\n-from typing import Dict, Optional\n+from typing import Dict, Optional, List\n \n",
        "source_code_with_indent": "import os\nfrom typing import Dict, Optional\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import os\nfrom typing import Dict, Optional, List\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self._current_package_idx = 0\n        self._package_models = None  # type: Optional[Dict]\n        self._license_model = LicenseModel()  # type: LicenseModel\n",
        "source_code_len": 165,
        "target_code": "        self._current_package_idx = 0\n        self._package_models = []  # type: List[Dict]\n        self._license_model = LicenseModel()  # type: LicenseModel\n",
        "target_code_len": 159,
        "diff_format": "@@ -26,3 +26,3 @@\n         self._current_package_idx = 0\n-        self._package_models = None  # type: Optional[Dict]\n+        self._package_models = []  # type: List[Dict]\n         self._license_model = LicenseModel()  # type: LicenseModel\n",
        "source_code_with_indent": "        self._current_package_idx = 0\n        self._package_models = None  # type: Optional[Dict]\n        self._license_model = LicenseModel()  # type: LicenseModel\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self._current_package_idx = 0\n        self._package_models = []  # type: List[Dict]\n        self._license_model = LicenseModel()  # type: LicenseModel\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Ultimaker/Cura",
    "commit": "53115dc3b20986c8ba12cd24328563e6b822fe8e",
    "filename": "plugins/Toolbox/src/CloudSync/LicensePresenter.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Ultimaker-Cura/plugins/Toolbox/src/CloudSync/LicensePresenter.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "plugins/Toolbox/src/CloudSync/LicensePresenter.py:64:8 Incompatible attribute type [8]: Attribute `_package_models` declared in class `LicensePresenter` has type `Optional[Dict[typing.Any, typing.Any]]` but is used as type `typing.List[Dict[str, Optional[str]]]`.",
    "message": " Attribute `_package_models` declared in class `LicensePresenter` has type `Optional[Dict[typing.Any, typing.Any]]` but is used as type `typing.List[Dict[str, Optional[str]]]`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 64,
    "warning_line": "        self._package_models = [",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import os\nfrom typing import Dict, Optional\n\n",
        "source_code_len": 45,
        "target_code": "import os\nfrom typing import Dict, Optional, List\n\n",
        "target_code_len": 51,
        "diff_format": "@@ -1,3 +1,3 @@\n import os\n-from typing import Dict, Optional\n+from typing import Dict, Optional, List\n \n",
        "source_code_with_indent": "import os\nfrom typing import Dict, Optional\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import os\nfrom typing import Dict, Optional, List\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self._current_package_idx = 0\n        self._package_models = None  # type: Optional[Dict]\n        self._license_model = LicenseModel()  # type: LicenseModel\n",
        "source_code_len": 165,
        "target_code": "        self._current_package_idx = 0\n        self._package_models = []  # type: List[Dict]\n        self._license_model = LicenseModel()  # type: LicenseModel\n",
        "target_code_len": 159,
        "diff_format": "@@ -26,3 +26,3 @@\n         self._current_package_idx = 0\n-        self._package_models = None  # type: Optional[Dict]\n+        self._package_models = []  # type: List[Dict]\n         self._license_model = LicenseModel()  # type: LicenseModel\n",
        "source_code_with_indent": "        self._current_package_idx = 0\n        self._package_models = None  # type: Optional[Dict]\n        self._license_model = LicenseModel()  # type: LicenseModel\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self._current_package_idx = 0\n        self._package_models = []  # type: List[Dict]\n        self._license_model = LicenseModel()  # type: LicenseModel\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Ultimaker/Cura",
    "commit": "53115dc3b20986c8ba12cd24328563e6b822fe8e",
    "filename": "plugins/Toolbox/src/CloudSync/SyncOrchestrator.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Ultimaker-Cura/plugins/Toolbox/src/CloudSync/SyncOrchestrator.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "plugins/Toolbox/src/CloudSync/SyncOrchestrator.py:73:41 Invalid type [31]: Expression `[typing.Dict[(str, typing.Any)]]` is not a valid type.",
    "message": " Expression `[typing.Dict[(str, typing.Any)]]` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 73,
    "warning_line": "    def _onLicenseAnswers(self, answers: [Dict[str, Any]]):",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    # Called when user has accepted / declined all licenses for the downloaded packages\n    def _onLicenseAnswers(self, answers: [Dict[str, Any]]):\n        Logger.debug(\"Got license answers: {}\", answers)\n",
        "source_code_len": 205,
        "target_code": "    # Called when user has accepted / declined all licenses for the downloaded packages\n    def _onLicenseAnswers(self, answers: List[Dict[str, Any]]):\n        Logger.debug(\"Got license answers: {}\", answers)\n",
        "target_code_len": 209,
        "diff_format": "@@ -72,3 +72,3 @@\n     # Called when user has accepted / declined all licenses for the downloaded packages\n-    def _onLicenseAnswers(self, answers: [Dict[str, Any]]):\n+    def _onLicenseAnswers(self, answers: List[Dict[str, Any]]):\n         Logger.debug(\"Got license answers: {}\", answers)\n",
        "source_code_with_indent": "    # Called when user has accepted / declined all licenses for the downloaded packages\n    <DED>def _onLicenseAnswers(self, answers: [Dict[str, Any]]):\n        <IND>Logger.debug(\"Got license answers: {}\", answers)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    # Called when user has accepted / declined all licenses for the downloaded packages\n    <DED>def _onLicenseAnswers(self, answers: List[Dict[str, Any]]):\n        <IND>Logger.debug(\"Got license answers: {}\", answers)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]