[
  {
    "project": "microsoft/torchgeo",
    "commit": "8b0a005c3a9e1f298d4adb31065023fbe9f28335",
    "filename": "torchgeo/samplers/samplers.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-torchgeo/torchgeo/samplers/samplers.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "torchgeo/samplers/samplers.py:55:30 Incompatible parameter type [6]: Expected `int` for 1st positional only parameter to call `random.randint` but got `typing.Union[float, int]`.",
    "message": " Expected `int` for 1st positional only parameter to call `random.randint` but got `typing.Union[float, int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 55,
    "warning_line": "        minx = random.randint(self.roi.minx, self.roi.maxx - self.size)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __init__(self, roi: BoundingBox, size: int) -> None:\n        \"\"\"Initialize a new RandomGeoSampler.\n",
        "source_code_len": 108,
        "target_code": "\n    def __init__(self, roi: BoundingBox, size: int, length: int) -> None:\n        \"\"\"Initialize a new RandomGeoSampler.\n",
        "target_code_len": 121,
        "diff_format": "@@ -38,3 +46,3 @@\n \n-    def __init__(self, roi: BoundingBox, size: int) -> None:\n+    def __init__(self, roi: BoundingBox, size: int, length: int) -> None:\n         \"\"\"Initialize a new RandomGeoSampler.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    def __init__(self, roi: BoundingBox, size: int) -> None:\n        <IND>",
        "target_code_with_indent": "\n    def __init__(self, roi: BoundingBox, size: int, length: int) -> None:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self.size = size\n\n",
        "source_code_len": 26,
        "target_code": "        self.size = size\n        self.length = length\n\n",
        "target_code_len": 55,
        "diff_format": "@@ -47,2 +56,3 @@\n         self.size = size\n+        self.length = length\n \n",
        "source_code_with_indent": "        self.size = size\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self.size = size\n        self.length = length\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"\"\"\n        minx = random.randint(self.roi.minx, self.roi.maxx - self.size)\n        maxx = minx + self.size\n\n        miny = random.randint(self.roi.miny, self.roi.maxy - self.size)\n        maxy = miny + self.size\n\n        # TODO: figure out how to handle time\n        mint = self.roi.mint\n        maxt = self.roi.maxt\n\n        return minx, maxx, miny, maxy, mint, maxt\n\n",
        "source_code_len": 378,
        "target_code": "        \"\"\"\n        for _ in range(len(self)):\n            minx = random.randint(int(self.roi.minx), int(self.roi.maxx) - self.size)\n            maxx = minx + self.size\n\n            miny = random.randint(int(self.roi.miny), int(self.roi.maxy) - self.size)\n            maxy = miny + self.size\n\n            # TODO: figure out how to handle time\n            mint = self.roi.mint\n            maxt = self.roi.maxt\n\n            yield BoundingBox(minx, maxx, miny, maxy, mint, maxt)\n\n    def __len__(self) -> int:\n        \"\"\"Return the number of samples in a single epoch.\n\n        Returns:\n            length of the epoch\n        \"\"\"\n        return self.length\n\n",
        "target_code_len": 656,
        "diff_format": "@@ -54,13 +64,22 @@\n         \"\"\"\n-        minx = random.randint(self.roi.minx, self.roi.maxx - self.size)\n-        maxx = minx + self.size\n+        for _ in range(len(self)):\n+            minx = random.randint(int(self.roi.minx), int(self.roi.maxx) - self.size)\n+            maxx = minx + self.size\n \n-        miny = random.randint(self.roi.miny, self.roi.maxy - self.size)\n-        maxy = miny + self.size\n+            miny = random.randint(int(self.roi.miny), int(self.roi.maxy) - self.size)\n+            maxy = miny + self.size\n \n-        # TODO: figure out how to handle time\n-        mint = self.roi.mint\n-        maxt = self.roi.maxt\n+            # TODO: figure out how to handle time\n+            mint = self.roi.mint\n+            maxt = self.roi.maxt\n \n-        return minx, maxx, miny, maxy, mint, maxt\n+            yield BoundingBox(minx, maxx, miny, maxy, mint, maxt)\n+\n+    def __len__(self) -> int:\n+        \"\"\"Return the number of samples in a single epoch.\n+\n+        Returns:\n+            length of the epoch\n+        \"\"\"\n+        return self.length\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n        minx = random.randint(self.roi.minx, self.roi.maxx - self.size)\n        maxx = minx + self.size\n\n        miny = random.randint(self.roi.miny, self.roi.maxy - self.size)\n        maxy = miny + self.size\n\n        # TODO: figure out how to handle time\n        mint = self.roi.mint\n        maxt = self.roi.maxt\n\n        return minx, maxx, miny, maxy, mint, maxt\n\n",
        "target_code_with_indent": "\n        for _ in range(len(self)):\n            <IND>minx = random.randint(int(self.roi.minx), int(self.roi.maxx) - self.size)\n            maxx = minx + self.size\n\n            miny = random.randint(int(self.roi.miny), int(self.roi.maxy) - self.size)\n            maxy = miny + self.size\n\n            # TODO: figure out how to handle time\n            mint = self.roi.mint\n            maxt = self.roi.maxt\n\n            yield BoundingBox(minx, maxx, miny, maxy, mint, maxt)\n\n    <DED><DED>def __len__(self) -> int:\n        <IND>\"\"\"Return the number of samples in a single epoch.\n\n        Returns:\n            length of the epoch\n        \"\"\"\n        return self.length\n\n"
      }
    ]
  },
  {
    "project": "microsoft/torchgeo",
    "commit": "8b0a005c3a9e1f298d4adb31065023fbe9f28335",
    "filename": "torchgeo/samplers/samplers.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-torchgeo/torchgeo/samplers/samplers.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "torchgeo/samplers/samplers.py:55:45 Incompatible parameter type [6]: Expected `int` for 2nd positional only parameter to call `random.randint` but got `float`.",
    "message": " Expected `int` for 2nd positional only parameter to call `random.randint` but got `float`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 55,
    "warning_line": "        minx = random.randint(self.roi.minx, self.roi.maxx - self.size)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __init__(self, roi: BoundingBox, size: int) -> None:\n        \"\"\"Initialize a new RandomGeoSampler.\n",
        "source_code_len": 108,
        "target_code": "\n    def __init__(self, roi: BoundingBox, size: int, length: int) -> None:\n        \"\"\"Initialize a new RandomGeoSampler.\n",
        "target_code_len": 121,
        "diff_format": "@@ -38,3 +46,3 @@\n \n-    def __init__(self, roi: BoundingBox, size: int) -> None:\n+    def __init__(self, roi: BoundingBox, size: int, length: int) -> None:\n         \"\"\"Initialize a new RandomGeoSampler.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    def __init__(self, roi: BoundingBox, size: int) -> None:\n        <IND>",
        "target_code_with_indent": "\n    def __init__(self, roi: BoundingBox, size: int, length: int) -> None:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self.size = size\n\n",
        "source_code_len": 26,
        "target_code": "        self.size = size\n        self.length = length\n\n",
        "target_code_len": 55,
        "diff_format": "@@ -47,2 +56,3 @@\n         self.size = size\n+        self.length = length\n \n",
        "source_code_with_indent": "        self.size = size\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self.size = size\n        self.length = length\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"\"\"\n        minx = random.randint(self.roi.minx, self.roi.maxx - self.size)\n        maxx = minx + self.size\n\n        miny = random.randint(self.roi.miny, self.roi.maxy - self.size)\n        maxy = miny + self.size\n\n        # TODO: figure out how to handle time\n        mint = self.roi.mint\n        maxt = self.roi.maxt\n\n        return minx, maxx, miny, maxy, mint, maxt\n\n",
        "source_code_len": 378,
        "target_code": "        \"\"\"\n        for _ in range(len(self)):\n            minx = random.randint(int(self.roi.minx), int(self.roi.maxx) - self.size)\n            maxx = minx + self.size\n\n            miny = random.randint(int(self.roi.miny), int(self.roi.maxy) - self.size)\n            maxy = miny + self.size\n\n            # TODO: figure out how to handle time\n            mint = self.roi.mint\n            maxt = self.roi.maxt\n\n            yield BoundingBox(minx, maxx, miny, maxy, mint, maxt)\n\n    def __len__(self) -> int:\n        \"\"\"Return the number of samples in a single epoch.\n\n        Returns:\n            length of the epoch\n        \"\"\"\n        return self.length\n\n",
        "target_code_len": 656,
        "diff_format": "@@ -54,13 +64,22 @@\n         \"\"\"\n-        minx = random.randint(self.roi.minx, self.roi.maxx - self.size)\n-        maxx = minx + self.size\n+        for _ in range(len(self)):\n+            minx = random.randint(int(self.roi.minx), int(self.roi.maxx) - self.size)\n+            maxx = minx + self.size\n \n-        miny = random.randint(self.roi.miny, self.roi.maxy - self.size)\n-        maxy = miny + self.size\n+            miny = random.randint(int(self.roi.miny), int(self.roi.maxy) - self.size)\n+            maxy = miny + self.size\n \n-        # TODO: figure out how to handle time\n-        mint = self.roi.mint\n-        maxt = self.roi.maxt\n+            # TODO: figure out how to handle time\n+            mint = self.roi.mint\n+            maxt = self.roi.maxt\n \n-        return minx, maxx, miny, maxy, mint, maxt\n+            yield BoundingBox(minx, maxx, miny, maxy, mint, maxt)\n+\n+    def __len__(self) -> int:\n+        \"\"\"Return the number of samples in a single epoch.\n+\n+        Returns:\n+            length of the epoch\n+        \"\"\"\n+        return self.length\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n        minx = random.randint(self.roi.minx, self.roi.maxx - self.size)\n        maxx = minx + self.size\n\n        miny = random.randint(self.roi.miny, self.roi.maxy - self.size)\n        maxy = miny + self.size\n\n        # TODO: figure out how to handle time\n        mint = self.roi.mint\n        maxt = self.roi.maxt\n\n        return minx, maxx, miny, maxy, mint, maxt\n\n",
        "target_code_with_indent": "\n        for _ in range(len(self)):\n            <IND>minx = random.randint(int(self.roi.minx), int(self.roi.maxx) - self.size)\n            maxx = minx + self.size\n\n            miny = random.randint(int(self.roi.miny), int(self.roi.maxy) - self.size)\n            maxy = miny + self.size\n\n            # TODO: figure out how to handle time\n            mint = self.roi.mint\n            maxt = self.roi.maxt\n\n            yield BoundingBox(minx, maxx, miny, maxy, mint, maxt)\n\n    <DED><DED>def __len__(self) -> int:\n        <IND>\"\"\"Return the number of samples in a single epoch.\n\n        Returns:\n            length of the epoch\n        \"\"\"\n        return self.length\n\n"
      }
    ]
  },
  {
    "project": "microsoft/torchgeo",
    "commit": "8b0a005c3a9e1f298d4adb31065023fbe9f28335",
    "filename": "torchgeo/samplers/samplers.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-torchgeo/torchgeo/samplers/samplers.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "torchgeo/samplers/samplers.py:58:30 Incompatible parameter type [6]: Expected `int` for 1st positional only parameter to call `random.randint` but got `typing.Union[float, int]`.",
    "message": " Expected `int` for 1st positional only parameter to call `random.randint` but got `typing.Union[float, int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 58,
    "warning_line": "        miny = random.randint(self.roi.miny, self.roi.maxy - self.size)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __init__(self, roi: BoundingBox, size: int) -> None:\n        \"\"\"Initialize a new RandomGeoSampler.\n",
        "source_code_len": 108,
        "target_code": "\n    def __init__(self, roi: BoundingBox, size: int, length: int) -> None:\n        \"\"\"Initialize a new RandomGeoSampler.\n",
        "target_code_len": 121,
        "diff_format": "@@ -38,3 +46,3 @@\n \n-    def __init__(self, roi: BoundingBox, size: int) -> None:\n+    def __init__(self, roi: BoundingBox, size: int, length: int) -> None:\n         \"\"\"Initialize a new RandomGeoSampler.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    def __init__(self, roi: BoundingBox, size: int) -> None:\n        <IND>",
        "target_code_with_indent": "\n    def __init__(self, roi: BoundingBox, size: int, length: int) -> None:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self.size = size\n\n",
        "source_code_len": 26,
        "target_code": "        self.size = size\n        self.length = length\n\n",
        "target_code_len": 55,
        "diff_format": "@@ -47,2 +56,3 @@\n         self.size = size\n+        self.length = length\n \n",
        "source_code_with_indent": "        self.size = size\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self.size = size\n        self.length = length\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"\"\"\n        minx = random.randint(self.roi.minx, self.roi.maxx - self.size)\n        maxx = minx + self.size\n\n        miny = random.randint(self.roi.miny, self.roi.maxy - self.size)\n        maxy = miny + self.size\n\n        # TODO: figure out how to handle time\n        mint = self.roi.mint\n        maxt = self.roi.maxt\n\n        return minx, maxx, miny, maxy, mint, maxt\n\n",
        "source_code_len": 378,
        "target_code": "        \"\"\"\n        for _ in range(len(self)):\n            minx = random.randint(int(self.roi.minx), int(self.roi.maxx) - self.size)\n            maxx = minx + self.size\n\n            miny = random.randint(int(self.roi.miny), int(self.roi.maxy) - self.size)\n            maxy = miny + self.size\n\n            # TODO: figure out how to handle time\n            mint = self.roi.mint\n            maxt = self.roi.maxt\n\n            yield BoundingBox(minx, maxx, miny, maxy, mint, maxt)\n\n    def __len__(self) -> int:\n        \"\"\"Return the number of samples in a single epoch.\n\n        Returns:\n            length of the epoch\n        \"\"\"\n        return self.length\n\n",
        "target_code_len": 656,
        "diff_format": "@@ -54,13 +64,22 @@\n         \"\"\"\n-        minx = random.randint(self.roi.minx, self.roi.maxx - self.size)\n-        maxx = minx + self.size\n+        for _ in range(len(self)):\n+            minx = random.randint(int(self.roi.minx), int(self.roi.maxx) - self.size)\n+            maxx = minx + self.size\n \n-        miny = random.randint(self.roi.miny, self.roi.maxy - self.size)\n-        maxy = miny + self.size\n+            miny = random.randint(int(self.roi.miny), int(self.roi.maxy) - self.size)\n+            maxy = miny + self.size\n \n-        # TODO: figure out how to handle time\n-        mint = self.roi.mint\n-        maxt = self.roi.maxt\n+            # TODO: figure out how to handle time\n+            mint = self.roi.mint\n+            maxt = self.roi.maxt\n \n-        return minx, maxx, miny, maxy, mint, maxt\n+            yield BoundingBox(minx, maxx, miny, maxy, mint, maxt)\n+\n+    def __len__(self) -> int:\n+        \"\"\"Return the number of samples in a single epoch.\n+\n+        Returns:\n+            length of the epoch\n+        \"\"\"\n+        return self.length\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n        minx = random.randint(self.roi.minx, self.roi.maxx - self.size)\n        maxx = minx + self.size\n\n        miny = random.randint(self.roi.miny, self.roi.maxy - self.size)\n        maxy = miny + self.size\n\n        # TODO: figure out how to handle time\n        mint = self.roi.mint\n        maxt = self.roi.maxt\n\n        return minx, maxx, miny, maxy, mint, maxt\n\n",
        "target_code_with_indent": "\n        for _ in range(len(self)):\n            <IND>minx = random.randint(int(self.roi.minx), int(self.roi.maxx) - self.size)\n            maxx = minx + self.size\n\n            miny = random.randint(int(self.roi.miny), int(self.roi.maxy) - self.size)\n            maxy = miny + self.size\n\n            # TODO: figure out how to handle time\n            mint = self.roi.mint\n            maxt = self.roi.maxt\n\n            yield BoundingBox(minx, maxx, miny, maxy, mint, maxt)\n\n    <DED><DED>def __len__(self) -> int:\n        <IND>\"\"\"Return the number of samples in a single epoch.\n\n        Returns:\n            length of the epoch\n        \"\"\"\n        return self.length\n\n"
      }
    ]
  },
  {
    "project": "microsoft/torchgeo",
    "commit": "8b0a005c3a9e1f298d4adb31065023fbe9f28335",
    "filename": "torchgeo/samplers/samplers.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-torchgeo/torchgeo/samplers/samplers.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "torchgeo/samplers/samplers.py:58:45 Incompatible parameter type [6]: Expected `int` for 2nd positional only parameter to call `random.randint` but got `float`.",
    "message": " Expected `int` for 2nd positional only parameter to call `random.randint` but got `float`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 58,
    "warning_line": "        miny = random.randint(self.roi.miny, self.roi.maxy - self.size)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __init__(self, roi: BoundingBox, size: int) -> None:\n        \"\"\"Initialize a new RandomGeoSampler.\n",
        "source_code_len": 108,
        "target_code": "\n    def __init__(self, roi: BoundingBox, size: int, length: int) -> None:\n        \"\"\"Initialize a new RandomGeoSampler.\n",
        "target_code_len": 121,
        "diff_format": "@@ -38,3 +46,3 @@\n \n-    def __init__(self, roi: BoundingBox, size: int) -> None:\n+    def __init__(self, roi: BoundingBox, size: int, length: int) -> None:\n         \"\"\"Initialize a new RandomGeoSampler.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    def __init__(self, roi: BoundingBox, size: int) -> None:\n        <IND>",
        "target_code_with_indent": "\n    def __init__(self, roi: BoundingBox, size: int, length: int) -> None:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self.size = size\n\n",
        "source_code_len": 26,
        "target_code": "        self.size = size\n        self.length = length\n\n",
        "target_code_len": 55,
        "diff_format": "@@ -47,2 +56,3 @@\n         self.size = size\n+        self.length = length\n \n",
        "source_code_with_indent": "        self.size = size\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self.size = size\n        self.length = length\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"\"\"\n        minx = random.randint(self.roi.minx, self.roi.maxx - self.size)\n        maxx = minx + self.size\n\n        miny = random.randint(self.roi.miny, self.roi.maxy - self.size)\n        maxy = miny + self.size\n\n        # TODO: figure out how to handle time\n        mint = self.roi.mint\n        maxt = self.roi.maxt\n\n        return minx, maxx, miny, maxy, mint, maxt\n\n",
        "source_code_len": 378,
        "target_code": "        \"\"\"\n        for _ in range(len(self)):\n            minx = random.randint(int(self.roi.minx), int(self.roi.maxx) - self.size)\n            maxx = minx + self.size\n\n            miny = random.randint(int(self.roi.miny), int(self.roi.maxy) - self.size)\n            maxy = miny + self.size\n\n            # TODO: figure out how to handle time\n            mint = self.roi.mint\n            maxt = self.roi.maxt\n\n            yield BoundingBox(minx, maxx, miny, maxy, mint, maxt)\n\n    def __len__(self) -> int:\n        \"\"\"Return the number of samples in a single epoch.\n\n        Returns:\n            length of the epoch\n        \"\"\"\n        return self.length\n\n",
        "target_code_len": 656,
        "diff_format": "@@ -54,13 +64,22 @@\n         \"\"\"\n-        minx = random.randint(self.roi.minx, self.roi.maxx - self.size)\n-        maxx = minx + self.size\n+        for _ in range(len(self)):\n+            minx = random.randint(int(self.roi.minx), int(self.roi.maxx) - self.size)\n+            maxx = minx + self.size\n \n-        miny = random.randint(self.roi.miny, self.roi.maxy - self.size)\n-        maxy = miny + self.size\n+            miny = random.randint(int(self.roi.miny), int(self.roi.maxy) - self.size)\n+            maxy = miny + self.size\n \n-        # TODO: figure out how to handle time\n-        mint = self.roi.mint\n-        maxt = self.roi.maxt\n+            # TODO: figure out how to handle time\n+            mint = self.roi.mint\n+            maxt = self.roi.maxt\n \n-        return minx, maxx, miny, maxy, mint, maxt\n+            yield BoundingBox(minx, maxx, miny, maxy, mint, maxt)\n+\n+    def __len__(self) -> int:\n+        \"\"\"Return the number of samples in a single epoch.\n+\n+        Returns:\n+            length of the epoch\n+        \"\"\"\n+        return self.length\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n        minx = random.randint(self.roi.minx, self.roi.maxx - self.size)\n        maxx = minx + self.size\n\n        miny = random.randint(self.roi.miny, self.roi.maxy - self.size)\n        maxy = miny + self.size\n\n        # TODO: figure out how to handle time\n        mint = self.roi.mint\n        maxt = self.roi.maxt\n\n        return minx, maxx, miny, maxy, mint, maxt\n\n",
        "target_code_with_indent": "\n        for _ in range(len(self)):\n            <IND>minx = random.randint(int(self.roi.minx), int(self.roi.maxx) - self.size)\n            maxx = minx + self.size\n\n            miny = random.randint(int(self.roi.miny), int(self.roi.maxy) - self.size)\n            maxy = miny + self.size\n\n            # TODO: figure out how to handle time\n            mint = self.roi.mint\n            maxt = self.roi.maxt\n\n            yield BoundingBox(minx, maxx, miny, maxy, mint, maxt)\n\n    <DED><DED>def __len__(self) -> int:\n        <IND>\"\"\"Return the number of samples in a single epoch.\n\n        Returns:\n            length of the epoch\n        \"\"\"\n        return self.length\n\n"
      }
    ]
  },
  {
    "project": "microsoft/torchgeo",
    "commit": "8b0a005c3a9e1f298d4adb31065023fbe9f28335",
    "filename": "torchgeo/samplers/samplers.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-torchgeo/torchgeo/samplers/samplers.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "torchgeo/samplers/samplers.py:65:8 Incompatible return type [7]: Expected `Iterator[torchgeo.datasets.utils.BoundingBox]` but got `Tuple[int, int, int, int, typing.Union[float, int], typing.Union[float, int]]`.",
    "message": " Expected `Iterator[torchgeo.datasets.utils.BoundingBox]` but got `Tuple[int, int, int, int, typing.Union[float, int], typing.Union[float, int]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 65,
    "warning_line": "        return minx, maxx, miny, maxy, mint, maxt",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __init__(self, roi: BoundingBox, size: int) -> None:\n        \"\"\"Initialize a new RandomGeoSampler.\n",
        "source_code_len": 108,
        "target_code": "\n    def __init__(self, roi: BoundingBox, size: int, length: int) -> None:\n        \"\"\"Initialize a new RandomGeoSampler.\n",
        "target_code_len": 121,
        "diff_format": "@@ -38,3 +46,3 @@\n \n-    def __init__(self, roi: BoundingBox, size: int) -> None:\n+    def __init__(self, roi: BoundingBox, size: int, length: int) -> None:\n         \"\"\"Initialize a new RandomGeoSampler.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    def __init__(self, roi: BoundingBox, size: int) -> None:\n        <IND>",
        "target_code_with_indent": "\n    def __init__(self, roi: BoundingBox, size: int, length: int) -> None:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self.size = size\n\n",
        "source_code_len": 26,
        "target_code": "        self.size = size\n        self.length = length\n\n",
        "target_code_len": 55,
        "diff_format": "@@ -47,2 +56,3 @@\n         self.size = size\n+        self.length = length\n \n",
        "source_code_with_indent": "        self.size = size\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self.size = size\n        self.length = length\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"\"\"\n        minx = random.randint(self.roi.minx, self.roi.maxx - self.size)\n        maxx = minx + self.size\n\n        miny = random.randint(self.roi.miny, self.roi.maxy - self.size)\n        maxy = miny + self.size\n\n        # TODO: figure out how to handle time\n        mint = self.roi.mint\n        maxt = self.roi.maxt\n\n        return minx, maxx, miny, maxy, mint, maxt\n\n",
        "source_code_len": 378,
        "target_code": "        \"\"\"\n        for _ in range(len(self)):\n            minx = random.randint(int(self.roi.minx), int(self.roi.maxx) - self.size)\n            maxx = minx + self.size\n\n            miny = random.randint(int(self.roi.miny), int(self.roi.maxy) - self.size)\n            maxy = miny + self.size\n\n            # TODO: figure out how to handle time\n            mint = self.roi.mint\n            maxt = self.roi.maxt\n\n            yield BoundingBox(minx, maxx, miny, maxy, mint, maxt)\n\n    def __len__(self) -> int:\n        \"\"\"Return the number of samples in a single epoch.\n\n        Returns:\n            length of the epoch\n        \"\"\"\n        return self.length\n\n",
        "target_code_len": 656,
        "diff_format": "@@ -54,13 +64,22 @@\n         \"\"\"\n-        minx = random.randint(self.roi.minx, self.roi.maxx - self.size)\n-        maxx = minx + self.size\n+        for _ in range(len(self)):\n+            minx = random.randint(int(self.roi.minx), int(self.roi.maxx) - self.size)\n+            maxx = minx + self.size\n \n-        miny = random.randint(self.roi.miny, self.roi.maxy - self.size)\n-        maxy = miny + self.size\n+            miny = random.randint(int(self.roi.miny), int(self.roi.maxy) - self.size)\n+            maxy = miny + self.size\n \n-        # TODO: figure out how to handle time\n-        mint = self.roi.mint\n-        maxt = self.roi.maxt\n+            # TODO: figure out how to handle time\n+            mint = self.roi.mint\n+            maxt = self.roi.maxt\n \n-        return minx, maxx, miny, maxy, mint, maxt\n+            yield BoundingBox(minx, maxx, miny, maxy, mint, maxt)\n+\n+    def __len__(self) -> int:\n+        \"\"\"Return the number of samples in a single epoch.\n+\n+        Returns:\n+            length of the epoch\n+        \"\"\"\n+        return self.length\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n        minx = random.randint(self.roi.minx, self.roi.maxx - self.size)\n        maxx = minx + self.size\n\n        miny = random.randint(self.roi.miny, self.roi.maxy - self.size)\n        maxy = miny + self.size\n\n        # TODO: figure out how to handle time\n        mint = self.roi.mint\n        maxt = self.roi.maxt\n\n        return minx, maxx, miny, maxy, mint, maxt\n\n",
        "target_code_with_indent": "\n        for _ in range(len(self)):\n            <IND>minx = random.randint(int(self.roi.minx), int(self.roi.maxx) - self.size)\n            maxx = minx + self.size\n\n            miny = random.randint(int(self.roi.miny), int(self.roi.maxy) - self.size)\n            maxy = miny + self.size\n\n            # TODO: figure out how to handle time\n            mint = self.roi.mint\n            maxt = self.roi.maxt\n\n            yield BoundingBox(minx, maxx, miny, maxy, mint, maxt)\n\n    <DED><DED>def __len__(self) -> int:\n        <IND>\"\"\"Return the number of samples in a single epoch.\n\n        Returns:\n            length of the epoch\n        \"\"\"\n        return self.length\n\n"
      }
    ]
  }
]