[
  {
    "project": "awslabs/sockeye",
    "commit": "3f77dfbb5d90c3ef4eb9c50731b487c69efde151",
    "filename": "sockeye/embeddings.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/awslabs-sockeye/sockeye/embeddings.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "sockeye/embeddings.py:68:4 Incompatible return type [7]: Expected `List[Tuple[int, float]]` but got `zip[typing.Any]`.",
    "message": " Expected `List[Tuple[int, float]]` but got `zip[typing.Any]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 68,
    "warning_line": "    return zip(indices.asnumpy(), values.asnumpy())",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import sys\nfrom typing import List, Tuple\n\n",
        "source_code_len": 43,
        "target_code": "import sys\nfrom typing import Iterable, Tuple\n\n",
        "target_code_len": 47,
        "diff_format": "@@ -18,3 +18,3 @@\n import sys\n-from typing import List, Tuple\n+from typing import Iterable, Tuple\n \n",
        "source_code_with_indent": "import sys\nfrom typing import List, Tuple\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import sys\nfrom typing import Iterable, Tuple\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "              k: int,\n              gamma: float = 1.0) -> List[Tuple[int, float]]:\n    \"\"\"\n",
        "source_code_len": 92,
        "target_code": "              k: int,\n              gamma: float = 1.0) -> Iterable[Tuple[int, float]]:\n    \"\"\"\n",
        "target_code_len": 96,
        "diff_format": "@@ -56,3 +56,3 @@\n               k: int,\n-              gamma: float = 1.0) -> List[Tuple[int, float]]:\n+              gamma: float = 1.0) -> Iterable[Tuple[int, float]]:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "              k: int,\n              gamma: float = 1.0) -> List[Tuple[int, float]]:\n    <IND>",
        "target_code_with_indent": "              k: int,\n              gamma: float = 1.0) -> Iterable[Tuple[int, float]]:\n    <IND>"
      }
    ]
  },
  {
    "project": "awslabs/sockeye",
    "commit": "3f77dfbb5d90c3ef4eb9c50731b487c69efde151",
    "filename": "sockeye/inference.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/awslabs-sockeye/sockeye/inference.py",
    "file_hunks_size": 29,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "sockeye/inference.py:84:37 Incompatible parameter type [6]: Expected `int` for 1st positional only parameter to call `model.SockeyeModel._build_model_components` but got `Optional[int]`.",
    "message": " Expected `int` for 1st positional only parameter to call `model.SockeyeModel._build_model_components` but got `Optional[int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 84,
    "warning_line": "        self._build_model_components(self.max_input_len, fused)"
  },
  {
    "project": "awslabs/sockeye",
    "commit": "3f77dfbb5d90c3ef4eb9c50731b487c69efde151",
    "filename": "sockeye/inference.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/awslabs-sockeye/sockeye/inference.py",
    "file_hunks_size": 29,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "sockeye/inference.py:88:64 Incompatible parameter type [6]: Expected `int` for 1st positional only parameter to call `InferenceModel._get_encoder_data_shapes` but got `Optional[int]`.",
    "message": " Expected `int` for 1st positional only parameter to call `InferenceModel._get_encoder_data_shapes` but got `Optional[int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 88,
    "warning_line": "        max_encoder_data_shapes = self._get_encoder_data_shapes(self.max_input_len)"
  },
  {
    "project": "awslabs/sockeye",
    "commit": "3f77dfbb5d90c3ef4eb9c50731b487c69efde151",
    "filename": "sockeye/inference.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/awslabs-sockeye/sockeye/inference.py",
    "file_hunks_size": 29,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "sockeye/inference.py:440:46 Incompatible parameter type [6]: Expected `int` for 1st positional only parameter to call `data_io.define_buckets` but got `Optional[int]`.",
    "message": " Expected `int` for 1st positional only parameter to call `data_io.define_buckets` but got `Optional[int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 440,
    "warning_line": "        self.buckets = data_io.define_buckets(self.models[0].max_input_len)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self.beam_size = self.models[0].beam_size\n        self.buckets = data_io.define_buckets(self.models[0].max_input_len)\n        self.pad_dist = mx.nd.full((self.beam_size, len(self.vocab_target)), val=np.inf, ctx=self.context)\n",
        "source_code_len": 233,
        "target_code": "        self.beam_size = self.models[0].beam_size\n        self.buckets = data_io.define_buckets(self.models[0].config.max_seq_len_source)\n        self.pad_dist = mx.nd.full((self.beam_size, len(self.vocab_target)), val=np.inf, ctx=self.context)\n",
        "target_code_len": 245,
        "diff_format": "@@ -439,3 +344,3 @@\n         self.beam_size = self.models[0].beam_size\n-        self.buckets = data_io.define_buckets(self.models[0].max_input_len)\n+        self.buckets = data_io.define_buckets(self.models[0].config.max_seq_len_source)\n         self.pad_dist = mx.nd.full((self.beam_size, len(self.vocab_target)), val=np.inf, ctx=self.context)\n",
        "source_code_with_indent": "        self.beam_size = self.models[0].beam_size\n        self.buckets = data_io.define_buckets(self.models[0].max_input_len)\n        self.pad_dist = mx.nd.full((self.beam_size, len(self.vocab_target)), val=np.inf, ctx=self.context)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self.beam_size = self.models[0].beam_size\n        self.buckets = data_io.define_buckets(self.models[0].config.max_seq_len_source)\n        self.pad_dist = mx.nd.full((self.beam_size, len(self.vocab_target)), val=np.inf, ctx=self.context)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]