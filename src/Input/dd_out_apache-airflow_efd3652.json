[
  {
    "project": "apache/airflow",
    "commit": "efd365274a548e7dd859ca1823da6a7c417a34f1",
    "filename": "airflow/utils/dot_renderer.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/apache-airflow/airflow/utils/dot_renderer.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "airflow/utils/dot_renderer.py:118:29 Incompatible parameter type [6]: Expected `TaskGroup` for 1st positional only parameter to call `_draw_task_group` but got `TaskMixin`.",
    "message": " Expected `TaskGroup` for 1st positional only parameter to call `_draw_task_group` but got `TaskMixin`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 118,
    "warning_line": "            _draw_task_group(node, parent_graph, states_by_task_id)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\"\"\"Renderer DAG (tasks and dependencies) to the graphviz object.\"\"\"\nfrom typing import Dict, List, Optional\n\n",
        "source_code_len": 109,
        "target_code": "\"\"\"Renderer DAG (tasks and dependencies) to the graphviz object.\"\"\"\nfrom typing import Any, Dict, List, Optional\n\n",
        "target_code_len": 114,
        "diff_format": "@@ -19,3 +19,3 @@\n \"\"\"Renderer DAG (tasks and dependencies) to the graphviz object.\"\"\"\n-from typing import Dict, List, Optional\n+from typing import Any, Dict, List, Optional\n \n",
        "source_code_with_indent": "\"\"\"Renderer DAG (tasks and dependencies) to the graphviz object.\"\"\"\nfrom typing import Dict, List, Optional\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\"\"\"Renderer DAG (tasks and dependencies) to the graphviz object.\"\"\"\nfrom typing import Any, Dict, List, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom airflow.models import TaskInstance\n",
        "source_code_len": 41,
        "target_code": "\nfrom airflow import AirflowException\nfrom airflow.models import TaskInstance\n",
        "target_code_len": 78,
        "diff_format": "@@ -23,2 +23,3 @@\n \n+from airflow import AirflowException\n from airflow.models import TaskInstance\n",
        "source_code_with_indent": "\nfrom airflow.models import TaskInstance\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom airflow import AirflowException\nfrom airflow.models import TaskInstance\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _draw_task(task: BaseOperator, parent_graph: graphviz.Digraph, states_by_task_id: Dict[str, str]) -> None:\n    \"\"\"Draw a single task on the given parent_graph\"\"\"\n",
        "source_code_len": 167,
        "target_code": "\ndef _draw_task(\n    task: BaseOperator, parent_graph: graphviz.Digraph, states_by_task_id: Optional[Dict[Any, Any]]\n) -> None:\n    \"\"\"Draw a single task on the given parent_graph\"\"\"\n",
        "target_code_len": 183,
        "diff_format": "@@ -49,3 +50,5 @@\n \n-def _draw_task(task: BaseOperator, parent_graph: graphviz.Digraph, states_by_task_id: Dict[str, str]) -> None:\n+def _draw_task(\n+    task: BaseOperator, parent_graph: graphviz.Digraph, states_by_task_id: Optional[Dict[Any, Any]]\n+) -> None:\n     \"\"\"Draw a single task on the given parent_graph\"\"\"\n",
        "source_code_with_indent": "\n<DED>def _draw_task(task: BaseOperator, parent_graph: graphviz.Digraph, states_by_task_id: Dict[str, str]) -> None:\n    <IND>\"\"\"Draw a single task on the given parent_graph\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def _draw_task(\n    task: BaseOperator, parent_graph: graphviz.Digraph, states_by_task_id: Optional[Dict[Any, Any]]\n) -> None:\n    <IND>\"\"\"Draw a single task on the given parent_graph\"\"\"\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def _draw_task_group(\n    task_group: TaskGroup, parent_graph: graphviz.Digraph, states_by_task_id: Dict[str, str]\n) -> None:\n",
        "source_code_len": 126,
        "target_code": "def _draw_task_group(\n    task_group: TaskGroup, parent_graph: graphviz.Digraph, states_by_task_id: Optional[Dict[str, str]]\n) -> None:\n",
        "target_code_len": 136,
        "diff_format": "@@ -72,3 +75,3 @@\n def _draw_task_group(\n-    task_group: TaskGroup, parent_graph: graphviz.Digraph, states_by_task_id: Dict[str, str]\n+    task_group: TaskGroup, parent_graph: graphviz.Digraph, states_by_task_id: Optional[Dict[str, str]]\n ) -> None:\n",
        "source_code_with_indent": "<DED>def _draw_task_group(\n    task_group: TaskGroup, parent_graph: graphviz.Digraph, states_by_task_id: Dict[str, str]\n) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED>def _draw_task_group(\n    task_group: TaskGroup, parent_graph: graphviz.Digraph, states_by_task_id: Optional[Dict[str, str]]\n) -> None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _draw_nodes(node: TaskMixin, parent_graph: graphviz.Digraph, states_by_task_id: Dict[str, str]) -> None:\n    \"\"\"Draw the node and its children on the given parent_graph recursively.\"\"\"\n",
        "source_code_len": 190,
        "target_code": "\ndef _draw_nodes(\n    node: TaskMixin, parent_graph: graphviz.Digraph, states_by_task_id: Optional[Dict[Any, Any]]\n) -> None:\n    \"\"\"Draw the node and its children on the given parent_graph recursively.\"\"\"\n",
        "target_code_len": 206,
        "diff_format": "@@ -109,3 +112,5 @@\n \n-def _draw_nodes(node: TaskMixin, parent_graph: graphviz.Digraph, states_by_task_id: Dict[str, str]) -> None:\n+def _draw_nodes(\n+    node: TaskMixin, parent_graph: graphviz.Digraph, states_by_task_id: Optional[Dict[Any, Any]]\n+) -> None:\n     \"\"\"Draw the node and its children on the given parent_graph recursively.\"\"\"\n",
        "source_code_with_indent": "\n<DED><DED>def _draw_nodes(node: TaskMixin, parent_graph: graphviz.Digraph, states_by_task_id: Dict[str, str]) -> None:\n    <IND>\"\"\"Draw the node and its children on the given parent_graph recursively.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED><DED>def _draw_nodes(\n    node: TaskMixin, parent_graph: graphviz.Digraph, states_by_task_id: Optional[Dict[Any, Any]]\n) -> None:\n    <IND>\"\"\"Draw the node and its children on the given parent_graph recursively.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    else:\n        # Draw TaskGroup\n",
        "source_code_len": 35,
        "target_code": "    else:\n        if not isinstance(node, TaskGroup):\n            raise AirflowException(f\"The node {node} should be TaskGroup and is not\")\n        # Draw TaskGroup\n",
        "target_code_len": 165,
        "diff_format": "@@ -114,2 +119,4 @@\n     else:\n+        if not isinstance(node, TaskGroup):\n+            raise AirflowException(f\"The node {node} should be TaskGroup and is not\")\n         # Draw TaskGroup\n",
        "source_code_with_indent": "    <DED>else:\n        # Draw TaskGroup\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>else:\n        <IND>if not isinstance(node, TaskGroup):\n            <IND>raise AirflowException(f\"The node {node} should be TaskGroup and is not\")\n        # Draw TaskGroup\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "apache/airflow",
    "commit": "efd365274a548e7dd859ca1823da6a7c417a34f1",
    "filename": "airflow/utils/dot_renderer.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/apache-airflow/airflow/utils/dot_renderer.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "airflow/utils/dot_renderer.py:129:33 Incompatible parameter type [6]: Expected `TaskGroup` for 1st positional only parameter to call `_draw_task_group` but got `TaskMixin`.",
    "message": " Expected `TaskGroup` for 1st positional only parameter to call `_draw_task_group` but got `TaskMixin`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 129,
    "warning_line": "                _draw_task_group(node, sub, states_by_task_id)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\"\"\"Renderer DAG (tasks and dependencies) to the graphviz object.\"\"\"\nfrom typing import Dict, List, Optional\n\n",
        "source_code_len": 109,
        "target_code": "\"\"\"Renderer DAG (tasks and dependencies) to the graphviz object.\"\"\"\nfrom typing import Any, Dict, List, Optional\n\n",
        "target_code_len": 114,
        "diff_format": "@@ -19,3 +19,3 @@\n \"\"\"Renderer DAG (tasks and dependencies) to the graphviz object.\"\"\"\n-from typing import Dict, List, Optional\n+from typing import Any, Dict, List, Optional\n \n",
        "source_code_with_indent": "\"\"\"Renderer DAG (tasks and dependencies) to the graphviz object.\"\"\"\nfrom typing import Dict, List, Optional\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\"\"\"Renderer DAG (tasks and dependencies) to the graphviz object.\"\"\"\nfrom typing import Any, Dict, List, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom airflow.models import TaskInstance\n",
        "source_code_len": 41,
        "target_code": "\nfrom airflow import AirflowException\nfrom airflow.models import TaskInstance\n",
        "target_code_len": 78,
        "diff_format": "@@ -23,2 +23,3 @@\n \n+from airflow import AirflowException\n from airflow.models import TaskInstance\n",
        "source_code_with_indent": "\nfrom airflow.models import TaskInstance\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom airflow import AirflowException\nfrom airflow.models import TaskInstance\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _draw_task(task: BaseOperator, parent_graph: graphviz.Digraph, states_by_task_id: Dict[str, str]) -> None:\n    \"\"\"Draw a single task on the given parent_graph\"\"\"\n",
        "source_code_len": 167,
        "target_code": "\ndef _draw_task(\n    task: BaseOperator, parent_graph: graphviz.Digraph, states_by_task_id: Optional[Dict[Any, Any]]\n) -> None:\n    \"\"\"Draw a single task on the given parent_graph\"\"\"\n",
        "target_code_len": 183,
        "diff_format": "@@ -49,3 +50,5 @@\n \n-def _draw_task(task: BaseOperator, parent_graph: graphviz.Digraph, states_by_task_id: Dict[str, str]) -> None:\n+def _draw_task(\n+    task: BaseOperator, parent_graph: graphviz.Digraph, states_by_task_id: Optional[Dict[Any, Any]]\n+) -> None:\n     \"\"\"Draw a single task on the given parent_graph\"\"\"\n",
        "source_code_with_indent": "\n<DED>def _draw_task(task: BaseOperator, parent_graph: graphviz.Digraph, states_by_task_id: Dict[str, str]) -> None:\n    <IND>\"\"\"Draw a single task on the given parent_graph\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def _draw_task(\n    task: BaseOperator, parent_graph: graphviz.Digraph, states_by_task_id: Optional[Dict[Any, Any]]\n) -> None:\n    <IND>\"\"\"Draw a single task on the given parent_graph\"\"\"\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def _draw_task_group(\n    task_group: TaskGroup, parent_graph: graphviz.Digraph, states_by_task_id: Dict[str, str]\n) -> None:\n",
        "source_code_len": 126,
        "target_code": "def _draw_task_group(\n    task_group: TaskGroup, parent_graph: graphviz.Digraph, states_by_task_id: Optional[Dict[str, str]]\n) -> None:\n",
        "target_code_len": 136,
        "diff_format": "@@ -72,3 +75,3 @@\n def _draw_task_group(\n-    task_group: TaskGroup, parent_graph: graphviz.Digraph, states_by_task_id: Dict[str, str]\n+    task_group: TaskGroup, parent_graph: graphviz.Digraph, states_by_task_id: Optional[Dict[str, str]]\n ) -> None:\n",
        "source_code_with_indent": "<DED>def _draw_task_group(\n    task_group: TaskGroup, parent_graph: graphviz.Digraph, states_by_task_id: Dict[str, str]\n) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED>def _draw_task_group(\n    task_group: TaskGroup, parent_graph: graphviz.Digraph, states_by_task_id: Optional[Dict[str, str]]\n) -> None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _draw_nodes(node: TaskMixin, parent_graph: graphviz.Digraph, states_by_task_id: Dict[str, str]) -> None:\n    \"\"\"Draw the node and its children on the given parent_graph recursively.\"\"\"\n",
        "source_code_len": 190,
        "target_code": "\ndef _draw_nodes(\n    node: TaskMixin, parent_graph: graphviz.Digraph, states_by_task_id: Optional[Dict[Any, Any]]\n) -> None:\n    \"\"\"Draw the node and its children on the given parent_graph recursively.\"\"\"\n",
        "target_code_len": 206,
        "diff_format": "@@ -109,3 +112,5 @@\n \n-def _draw_nodes(node: TaskMixin, parent_graph: graphviz.Digraph, states_by_task_id: Dict[str, str]) -> None:\n+def _draw_nodes(\n+    node: TaskMixin, parent_graph: graphviz.Digraph, states_by_task_id: Optional[Dict[Any, Any]]\n+) -> None:\n     \"\"\"Draw the node and its children on the given parent_graph recursively.\"\"\"\n",
        "source_code_with_indent": "\n<DED><DED>def _draw_nodes(node: TaskMixin, parent_graph: graphviz.Digraph, states_by_task_id: Dict[str, str]) -> None:\n    <IND>\"\"\"Draw the node and its children on the given parent_graph recursively.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED><DED>def _draw_nodes(\n    node: TaskMixin, parent_graph: graphviz.Digraph, states_by_task_id: Optional[Dict[Any, Any]]\n) -> None:\n    <IND>\"\"\"Draw the node and its children on the given parent_graph recursively.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    else:\n        # Draw TaskGroup\n",
        "source_code_len": 35,
        "target_code": "    else:\n        if not isinstance(node, TaskGroup):\n            raise AirflowException(f\"The node {node} should be TaskGroup and is not\")\n        # Draw TaskGroup\n",
        "target_code_len": 165,
        "diff_format": "@@ -114,2 +119,4 @@\n     else:\n+        if not isinstance(node, TaskGroup):\n+            raise AirflowException(f\"The node {node} should be TaskGroup and is not\")\n         # Draw TaskGroup\n",
        "source_code_with_indent": "    <DED>else:\n        # Draw TaskGroup\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>else:\n        <IND>if not isinstance(node, TaskGroup):\n            <IND>raise AirflowException(f\"The node {node} should be TaskGroup and is not\")\n        # Draw TaskGroup\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "apache/airflow",
    "commit": "efd365274a548e7dd859ca1823da6a7c417a34f1",
    "filename": "airflow/utils/edgemodifier.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/apache-airflow/airflow/utils/edgemodifier.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "airflow/utils/edgemodifier.py:41:23 Incompatible variable type [9]: label is declared to have type `str` but is used as type `None`.",
    "message": " label is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 41,
    "warning_line": "    def __init__(self, label: str = None):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import Sequence, Union\n\n",
        "source_code_len": 37,
        "target_code": "\nfrom typing import List, Optional, Sequence, Union\n\n",
        "target_code_len": 53,
        "diff_format": "@@ -17,3 +17,3 @@\n \n-from typing import Sequence, Union\n+from typing import List, Optional, Sequence, Union\n \n",
        "source_code_with_indent": "\nfrom typing import Sequence, Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import List, Optional, Sequence, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __init__(self, label: str = None):\n        self.label = label\n        self._upstream = []\n        self._downstream = []\n\n",
        "source_code_len": 130,
        "target_code": "\n    def __init__(self, label: Optional[str] = None):\n        from airflow.models.baseoperator import BaseOperator\n\n        self.label = label\n        self._upstream: List[BaseOperator] = []\n        self._downstream: List[BaseOperator] = []\n\n",
        "target_code_len": 242,
        "diff_format": "@@ -40,6 +40,8 @@\n \n-    def __init__(self, label: str = None):\n+    def __init__(self, label: Optional[str] = None):\n+        from airflow.models.baseoperator import BaseOperator\n+\n         self.label = label\n-        self._upstream = []\n-        self._downstream = []\n+        self._upstream: List[BaseOperator] = []\n+        self._downstream: List[BaseOperator] = []\n \n",
        "source_code_with_indent": "\n    def __init__(self, label: str = None):\n        <IND>self.label = label\n        self._upstream = []\n        self._downstream = []\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    def __init__(self, label: Optional[str] = None):\n        <IND>from airflow.models.baseoperator import BaseOperator\n\n        self.label = label\n        self._upstream: List[BaseOperator] = []\n        self._downstream: List[BaseOperator] = []\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "apache/airflow",
    "commit": "efd365274a548e7dd859ca1823da6a7c417a34f1",
    "filename": "airflow/utils/log/secrets_masker.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/apache-airflow/airflow/utils/log/secrets_masker.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "airflow/utils/log/secrets_masker.py:75:52 Incompatible variable type [9]: name is declared to have type `str` but is used as type `None`.",
    "message": " name is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 75,
    "warning_line": "def mask_secret(secret: Union[str, dict, Iterable], name: str = None) -> None:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef mask_secret(secret: Union[str, dict, Iterable], name: str = None) -> None:\n    \"\"\"\n",
        "source_code_len": 88,
        "target_code": "\ndef mask_secret(secret: Union[str, dict, Iterable], name: Optional[str] = None) -> None:\n    \"\"\"\n",
        "target_code_len": 98,
        "diff_format": "@@ -74,3 +74,3 @@\n \n-def mask_secret(secret: Union[str, dict, Iterable], name: str = None) -> None:\n+def mask_secret(secret: Union[str, dict, Iterable], name: Optional[str] = None) -> None:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>def mask_secret(secret: Union[str, dict, Iterable], name: str = None) -> None:\n    <IND>",
        "target_code_with_indent": "\n<DED>def mask_secret(secret: Union[str, dict, Iterable], name: Optional[str] = None) -> None:\n    <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def add_mask(self, secret: Union[str, dict, Iterable], name: str = None):\n        \"\"\"Add a new secret to be masked to this filter instance.\"\"\"\n",
        "source_code_len": 148,
        "target_code": "\n    def add_mask(self, secret: Union[str, dict, Iterable], name: Optional[str] = None):\n        \"\"\"Add a new secret to be masked to this filter instance.\"\"\"\n",
        "target_code_len": 158,
        "diff_format": "@@ -236,3 +236,3 @@\n \n-    def add_mask(self, secret: Union[str, dict, Iterable], name: str = None):\n+    def add_mask(self, secret: Union[str, dict, Iterable], name: Optional[str] = None):\n         \"\"\"Add a new secret to be masked to this filter instance.\"\"\"\n",
        "source_code_with_indent": "\n    <DED>def add_mask(self, secret: Union[str, dict, Iterable], name: str = None):\n        <IND>\"\"\"Add a new secret to be masked to this filter instance.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def add_mask(self, secret: Union[str, dict, Iterable], name: Optional[str] = None):\n        <IND>\"\"\"Add a new secret to be masked to this filter instance.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "apache/airflow",
    "commit": "efd365274a548e7dd859ca1823da6a7c417a34f1",
    "filename": "airflow/utils/log/secrets_masker.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/apache-airflow/airflow/utils/log/secrets_masker.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "airflow/utils/log/secrets_masker.py:96:36 Incompatible variable type [9]: name is declared to have type `str` but is used as type `None`.",
    "message": " name is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 96,
    "warning_line": "def redact(value: \"RedactableItem\", name: str = None) -> \"RedactableItem\":",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef redact(value: \"RedactableItem\", name: str = None) -> \"RedactableItem\":\n    \"\"\"Redact any secrets found in ``value``.\"\"\"\n",
        "source_code_len": 125,
        "target_code": "\ndef redact(value: \"RedactableItem\", name: Optional[str] = None) -> \"RedactableItem\":\n    \"\"\"Redact any secrets found in ``value``.\"\"\"\n",
        "target_code_len": 135,
        "diff_format": "@@ -95,3 +95,3 @@\n \n-def redact(value: \"RedactableItem\", name: str = None) -> \"RedactableItem\":\n+def redact(value: \"RedactableItem\", name: Optional[str] = None) -> \"RedactableItem\":\n     \"\"\"Redact any secrets found in ``value``.\"\"\"\n",
        "source_code_with_indent": "\n<DED>def redact(value: \"RedactableItem\", name: str = None) -> \"RedactableItem\":\n    <IND>\"\"\"Redact any secrets found in ``value``.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def redact(value: \"RedactableItem\", name: Optional[str] = None) -> \"RedactableItem\":\n    <IND>\"\"\"Redact any secrets found in ``value``.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "apache/airflow",
    "commit": "efd365274a548e7dd859ca1823da6a7c417a34f1",
    "filename": "airflow/utils/log/secrets_masker.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/apache-airflow/airflow/utils/log/secrets_masker.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "airflow/utils/log/secrets_masker.py:176:12 Incompatible return type [7]: Expected `Variable[RedactableItem]` but got `str`.",
    "message": " Expected `Variable[RedactableItem]` but got `str`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 176,
    "warning_line": "            return '***'",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import re\nfrom typing import TYPE_CHECKING, Iterable, Optional, Set, TypeVar, Union\n\n",
        "source_code_len": 85,
        "target_code": "import re\nfrom typing import TYPE_CHECKING, Any, Dict, Iterable, List, Optional, Set, Tuple, Union\n\n",
        "target_code_len": 100,
        "diff_format": "@@ -20,3 +20,3 @@\n import re\n-from typing import TYPE_CHECKING, Iterable, Optional, Set, TypeVar, Union\n+from typing import TYPE_CHECKING, Any, Dict, Iterable, List, Optional, Set, Tuple, Union\n \n",
        "source_code_with_indent": "import re\nfrom typing import TYPE_CHECKING, Iterable, Optional, Set, TypeVar, Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import re\nfrom typing import TYPE_CHECKING, Any, Dict, Iterable, List, Optional, Set, Tuple, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    RedactableItem = TypeVar('RedactableItem')\n\n",
        "source_code_len": 49,
        "target_code": "\n    RedactableItem = Union[str, Dict[Any, Any], Tuple[Any, ...], List[Any]]\n\n",
        "target_code_len": 78,
        "diff_format": "@@ -27,3 +27,3 @@\n \n-    RedactableItem = TypeVar('RedactableItem')\n+    RedactableItem = Union[str, Dict[Any, Any], Tuple[Any, ...], List[Any]]\n \n",
        "source_code_with_indent": "\n    RedactableItem = TypeVar('RedactableItem')\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    RedactableItem = Union[str, Dict[Any, Any], Tuple[Any, ...], List[Any]]\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "apache/airflow",
    "commit": "efd365274a548e7dd859ca1823da6a7c417a34f1",
    "filename": "airflow/utils/log/secrets_masker.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/apache-airflow/airflow/utils/log/secrets_masker.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "airflow/utils/log/secrets_masker.py:237:59 Incompatible variable type [9]: name is declared to have type `str` but is used as type `None`.",
    "message": " name is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 237,
    "warning_line": "    def add_mask(self, secret: Union[str, dict, Iterable], name: str = None):",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def add_mask(self, secret: Union[str, dict, Iterable], name: str = None):\n        \"\"\"Add a new secret to be masked to this filter instance.\"\"\"\n",
        "source_code_len": 148,
        "target_code": "\n    def add_mask(self, secret: Union[str, dict, Iterable], name: Optional[str] = None):\n        \"\"\"Add a new secret to be masked to this filter instance.\"\"\"\n",
        "target_code_len": 158,
        "diff_format": "@@ -236,3 +236,3 @@\n \n-    def add_mask(self, secret: Union[str, dict, Iterable], name: str = None):\n+    def add_mask(self, secret: Union[str, dict, Iterable], name: Optional[str] = None):\n         \"\"\"Add a new secret to be masked to this filter instance.\"\"\"\n",
        "source_code_with_indent": "\n    <DED>def add_mask(self, secret: Union[str, dict, Iterable], name: str = None):\n        <IND>\"\"\"Add a new secret to be masked to this filter instance.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def add_mask(self, secret: Union[str, dict, Iterable], name: Optional[str] = None):\n        <IND>\"\"\"Add a new secret to be masked to this filter instance.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "apache/airflow",
    "commit": "efd365274a548e7dd859ca1823da6a7c417a34f1",
    "filename": "airflow/utils/task_group.py",
    "min_patch_found": false,
    "full_warning_msg": "airflow/utils/task_group.py:124:39 Incompatible parameter type [6]: Expected `Variable[typing.AnyStr <: [str, bytes]]` for 2nd positional only parameter to call `re.split` but got `Optional[str]`.",
    "exception": "too many values to unpack (expected 2)",
    "dd_fail": true
  }
]