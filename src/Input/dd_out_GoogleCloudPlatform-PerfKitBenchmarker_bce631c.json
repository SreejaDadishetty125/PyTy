[
  {
    "project": "GoogleCloudPlatform/PerfKitBenchmarker",
    "commit": "bce631cb26a15bc476517a7bdac4012a951ddfa2",
    "filename": "perfkitbenchmarker/providers/aws/redshift.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/GoogleCloudPlatform-PerfKitBenchmarker/perfkitbenchmarker/providers/aws/redshift.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "perfkitbenchmarker/providers/aws/redshift.py:141:2 Inconsistent override [15]: `perfkitbenchmarker.providers.aws.redshift.CliClientInterface.ExecuteQuery` overrides method defined in `edw_service.EdwClientInterface` inconsistently. Returned type `unknown` is not a subtype of the overridden return `typing.Tuple[float, Dict[str, str]]`.",
    "message": " `perfkitbenchmarker.providers.aws.redshift.CliClientInterface.ExecuteQuery` overrides method defined in `edw_service.EdwClientInterface` inconsistently. Returned type `unknown` is not a subtype of the overridden return `typing.Tuple[float, Dict[str, str]]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 141,
    "warning_line": "  def ExecuteQuery(self, query_name: Text) -> (float, Dict[str, str]):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import os\nfrom typing import Dict, List, Text\n\n",
        "source_code_len": 47,
        "target_code": "import os\nfrom typing import Dict, List, Text, Tuple\n\n",
        "target_code_len": 54,
        "diff_format": "@@ -22,3 +22,3 @@\n import os\n-from typing import Dict, List, Text\n+from typing import Dict, List, Text, Tuple\n \n",
        "source_code_with_indent": "import os\nfrom typing import Dict, List, Text\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import os\nfrom typing import Dict, List, Text, Tuple\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n  def ExecuteQuery(self, query_name: Text) -> (float, Dict[str, str]):\n    \"\"\"Executes a query and returns performance details.\n",
        "source_code_len": 129,
        "target_code": "\n  def ExecuteQuery(self, query_name: Text) -> Tuple[float, Dict[str, str]]:\n    \"\"\"Executes a query and returns performance details.\n",
        "target_code_len": 134,
        "diff_format": "@@ -140,3 +143,3 @@\n \n-  def ExecuteQuery(self, query_name: Text) -> (float, Dict[str, str]):\n+  def ExecuteQuery(self, query_name: Text) -> Tuple[float, Dict[str, str]]:\n     \"\"\"Executes a query and returns performance details.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n  <DED>def ExecuteQuery(self, query_name: Text) -> (float, Dict[str, str]):\n    <IND>",
        "target_code_with_indent": "\n  <DED>def ExecuteQuery(self, query_name: Text) -> Tuple[float, Dict[str, str]]:\n    <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n  def ExecuteQuery(self, query_name: Text) -> (float, Dict[str, str]):\n    \"\"\"Executes a query and returns performance details.\n",
        "source_code_len": 129,
        "target_code": "\n  def ExecuteQuery(self, query_name: Text) -> Tuple[float, Dict[str, str]]:\n    \"\"\"Executes a query and returns performance details.\n",
        "target_code_len": 134,
        "diff_format": "@@ -208,3 +214,3 @@\n \n-  def ExecuteQuery(self, query_name: Text) -> (float, Dict[str, str]):\n+  def ExecuteQuery(self, query_name: Text) -> Tuple[float, Dict[str, str]]:\n     \"\"\"Executes a query and returns performance details.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n  <DED>def ExecuteQuery(self, query_name: Text) -> (float, Dict[str, str]):\n    <IND>",
        "target_code_with_indent": "\n  <DED>def ExecuteQuery(self, query_name: Text) -> Tuple[float, Dict[str, str]]:\n    <IND>"
      }
    ]
  },
  {
    "project": "GoogleCloudPlatform/PerfKitBenchmarker",
    "commit": "bce631cb26a15bc476517a7bdac4012a951ddfa2",
    "filename": "perfkitbenchmarker/providers/aws/redshift.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/GoogleCloudPlatform-PerfKitBenchmarker/perfkitbenchmarker/providers/aws/redshift.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "perfkitbenchmarker/providers/aws/redshift.py:141:47 Invalid type [31]: Expression `(float, typing.Dict[(str, str)])` is not a valid type.",
    "message": " Expression `(float, typing.Dict[(str, str)])` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 141,
    "warning_line": "  def ExecuteQuery(self, query_name: Text) -> (float, Dict[str, str]):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import os\nfrom typing import Dict, List, Text\n\n",
        "source_code_len": 47,
        "target_code": "import os\nfrom typing import Dict, List, Text, Tuple\n\n",
        "target_code_len": 54,
        "diff_format": "@@ -22,3 +22,3 @@\n import os\n-from typing import Dict, List, Text\n+from typing import Dict, List, Text, Tuple\n \n",
        "source_code_with_indent": "import os\nfrom typing import Dict, List, Text\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import os\nfrom typing import Dict, List, Text, Tuple\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n  def ExecuteQuery(self, query_name: Text) -> (float, Dict[str, str]):\n    \"\"\"Executes a query and returns performance details.\n",
        "source_code_len": 129,
        "target_code": "\n  def ExecuteQuery(self, query_name: Text) -> Tuple[float, Dict[str, str]]:\n    \"\"\"Executes a query and returns performance details.\n",
        "target_code_len": 134,
        "diff_format": "@@ -140,3 +143,3 @@\n \n-  def ExecuteQuery(self, query_name: Text) -> (float, Dict[str, str]):\n+  def ExecuteQuery(self, query_name: Text) -> Tuple[float, Dict[str, str]]:\n     \"\"\"Executes a query and returns performance details.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n  <DED>def ExecuteQuery(self, query_name: Text) -> (float, Dict[str, str]):\n    <IND>",
        "target_code_with_indent": "\n  <DED>def ExecuteQuery(self, query_name: Text) -> Tuple[float, Dict[str, str]]:\n    <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n  def ExecuteQuery(self, query_name: Text) -> (float, Dict[str, str]):\n    \"\"\"Executes a query and returns performance details.\n",
        "source_code_len": 129,
        "target_code": "\n  def ExecuteQuery(self, query_name: Text) -> Tuple[float, Dict[str, str]]:\n    \"\"\"Executes a query and returns performance details.\n",
        "target_code_len": 134,
        "diff_format": "@@ -208,3 +214,3 @@\n \n-  def ExecuteQuery(self, query_name: Text) -> (float, Dict[str, str]):\n+  def ExecuteQuery(self, query_name: Text) -> Tuple[float, Dict[str, str]]:\n     \"\"\"Executes a query and returns performance details.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n  <DED>def ExecuteQuery(self, query_name: Text) -> (float, Dict[str, str]):\n    <IND>",
        "target_code_with_indent": "\n  <DED>def ExecuteQuery(self, query_name: Text) -> Tuple[float, Dict[str, str]]:\n    <IND>"
      }
    ]
  },
  {
    "project": "GoogleCloudPlatform/PerfKitBenchmarker",
    "commit": "bce631cb26a15bc476517a7bdac4012a951ddfa2",
    "filename": "perfkitbenchmarker/providers/aws/redshift.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/GoogleCloudPlatform-PerfKitBenchmarker/perfkitbenchmarker/providers/aws/redshift.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "perfkitbenchmarker/providers/aws/redshift.py:209:2 Inconsistent override [15]: `perfkitbenchmarker.providers.aws.redshift.JdbcClientInterface.ExecuteQuery` overrides method defined in `edw_service.EdwClientInterface` inconsistently. Returned type `unknown` is not a subtype of the overridden return `typing.Tuple[float, Dict[str, str]]`.",
    "message": " `perfkitbenchmarker.providers.aws.redshift.JdbcClientInterface.ExecuteQuery` overrides method defined in `edw_service.EdwClientInterface` inconsistently. Returned type `unknown` is not a subtype of the overridden return `typing.Tuple[float, Dict[str, str]]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 209,
    "warning_line": "  def ExecuteQuery(self, query_name: Text) -> (float, Dict[str, str]):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import os\nfrom typing import Dict, List, Text\n\n",
        "source_code_len": 47,
        "target_code": "import os\nfrom typing import Dict, List, Text, Tuple\n\n",
        "target_code_len": 54,
        "diff_format": "@@ -22,3 +22,3 @@\n import os\n-from typing import Dict, List, Text\n+from typing import Dict, List, Text, Tuple\n \n",
        "source_code_with_indent": "import os\nfrom typing import Dict, List, Text\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import os\nfrom typing import Dict, List, Text, Tuple\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n  def ExecuteQuery(self, query_name: Text) -> (float, Dict[str, str]):\n    \"\"\"Executes a query and returns performance details.\n",
        "source_code_len": 129,
        "target_code": "\n  def ExecuteQuery(self, query_name: Text) -> Tuple[float, Dict[str, str]]:\n    \"\"\"Executes a query and returns performance details.\n",
        "target_code_len": 134,
        "diff_format": "@@ -140,3 +143,3 @@\n \n-  def ExecuteQuery(self, query_name: Text) -> (float, Dict[str, str]):\n+  def ExecuteQuery(self, query_name: Text) -> Tuple[float, Dict[str, str]]:\n     \"\"\"Executes a query and returns performance details.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n  <DED>def ExecuteQuery(self, query_name: Text) -> (float, Dict[str, str]):\n    <IND>",
        "target_code_with_indent": "\n  <DED>def ExecuteQuery(self, query_name: Text) -> Tuple[float, Dict[str, str]]:\n    <IND>"
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n  def ExecuteQuery(self, query_name: Text) -> (float, Dict[str, str]):\n    \"\"\"Executes a query and returns performance details.\n",
        "source_code_len": 129,
        "target_code": "\n  def ExecuteQuery(self, query_name: Text) -> Tuple[float, Dict[str, str]]:\n    \"\"\"Executes a query and returns performance details.\n",
        "target_code_len": 134,
        "diff_format": "@@ -208,3 +214,3 @@\n \n-  def ExecuteQuery(self, query_name: Text) -> (float, Dict[str, str]):\n+  def ExecuteQuery(self, query_name: Text) -> Tuple[float, Dict[str, str]]:\n     \"\"\"Executes a query and returns performance details.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n  <DED>def ExecuteQuery(self, query_name: Text) -> (float, Dict[str, str]):\n    <IND>",
        "target_code_with_indent": "\n  <DED>def ExecuteQuery(self, query_name: Text) -> Tuple[float, Dict[str, str]]:\n    <IND>"
      }
    ]
  },
  {
    "project": "GoogleCloudPlatform/PerfKitBenchmarker",
    "commit": "bce631cb26a15bc476517a7bdac4012a951ddfa2",
    "filename": "perfkitbenchmarker/providers/aws/redshift.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/GoogleCloudPlatform-PerfKitBenchmarker/perfkitbenchmarker/providers/aws/redshift.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "perfkitbenchmarker/providers/aws/redshift.py:209:47 Invalid type [31]: Expression `(float, typing.Dict[(str, str)])` is not a valid type.",
    "message": " Expression `(float, typing.Dict[(str, str)])` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 209,
    "warning_line": "  def ExecuteQuery(self, query_name: Text) -> (float, Dict[str, str]):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import os\nfrom typing import Dict, List, Text\n\n",
        "source_code_len": 47,
        "target_code": "import os\nfrom typing import Dict, List, Text, Tuple\n\n",
        "target_code_len": 54,
        "diff_format": "@@ -22,3 +22,3 @@\n import os\n-from typing import Dict, List, Text\n+from typing import Dict, List, Text, Tuple\n \n",
        "source_code_with_indent": "import os\nfrom typing import Dict, List, Text\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import os\nfrom typing import Dict, List, Text, Tuple\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n  def ExecuteQuery(self, query_name: Text) -> (float, Dict[str, str]):\n    \"\"\"Executes a query and returns performance details.\n",
        "source_code_len": 129,
        "target_code": "\n  def ExecuteQuery(self, query_name: Text) -> Tuple[float, Dict[str, str]]:\n    \"\"\"Executes a query and returns performance details.\n",
        "target_code_len": 134,
        "diff_format": "@@ -140,3 +143,3 @@\n \n-  def ExecuteQuery(self, query_name: Text) -> (float, Dict[str, str]):\n+  def ExecuteQuery(self, query_name: Text) -> Tuple[float, Dict[str, str]]:\n     \"\"\"Executes a query and returns performance details.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n  <DED>def ExecuteQuery(self, query_name: Text) -> (float, Dict[str, str]):\n    <IND>",
        "target_code_with_indent": "\n  <DED>def ExecuteQuery(self, query_name: Text) -> Tuple[float, Dict[str, str]]:\n    <IND>"
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n  def ExecuteQuery(self, query_name: Text) -> (float, Dict[str, str]):\n    \"\"\"Executes a query and returns performance details.\n",
        "source_code_len": 129,
        "target_code": "\n  def ExecuteQuery(self, query_name: Text) -> Tuple[float, Dict[str, str]]:\n    \"\"\"Executes a query and returns performance details.\n",
        "target_code_len": 134,
        "diff_format": "@@ -208,3 +214,3 @@\n \n-  def ExecuteQuery(self, query_name: Text) -> (float, Dict[str, str]):\n+  def ExecuteQuery(self, query_name: Text) -> Tuple[float, Dict[str, str]]:\n     \"\"\"Executes a query and returns performance details.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n  <DED>def ExecuteQuery(self, query_name: Text) -> (float, Dict[str, str]):\n    <IND>",
        "target_code_with_indent": "\n  <DED>def ExecuteQuery(self, query_name: Text) -> Tuple[float, Dict[str, str]]:\n    <IND>"
      }
    ]
  }
]