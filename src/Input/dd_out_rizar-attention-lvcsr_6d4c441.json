[
  {
    "project": "rizar/attention-lvcsr",
    "commit": "6d4c441d444fc4980b8e49eb2e2b66bb124b6047",
    "filename": "benchmark/autoencoder/aa.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/rizar-attention-lvcsr/benchmark/autoencoder/aa.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "benchmark/autoencoder/aa.py:210:9 Unbound name [10]: Name `xrange` is used but not defined in the current scope.",
    "message": " Name `xrange` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 210,
    "warning_line": "for i in xrange(niter):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import theano.sandbox\nfrom theano.compile import module, Mode, ProfileMode\n",
        "source_code_len": 75,
        "target_code": "import theano.sandbox\nfrom six.moves import xrange\nfrom theano.compile import module, Mode, ProfileMode\n",
        "target_code_len": 104,
        "diff_format": "@@ -10,2 +10,3 @@\n import theano.sandbox\n+from six.moves import xrange\n from theano.compile import module, Mode, ProfileMode\n",
        "source_code_with_indent": "import theano.sandbox\nfrom theano.compile import module, Mode, ProfileMode\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import theano.sandbox\nfrom six.moves import xrange\nfrom theano.compile import module, Mode, ProfileMode\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "rizar/attention-lvcsr",
    "commit": "6d4c441d444fc4980b8e49eb2e2b66bb124b6047",
    "filename": "benchmark/autoencoder/aa_numpy.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/rizar-attention-lvcsr/benchmark/autoencoder/aa_numpy.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "benchmark/autoencoder/aa_numpy.py:23:9 Unbound name [10]: Name `xrange` is used but not defined in the current scope.",
    "message": " Name `xrange` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 23,
    "warning_line": "for i in xrange(niter):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import time\n\n",
        "source_code_len": 13,
        "target_code": "import time\nfrom six.moves import xrange\n\n",
        "target_code_len": 42,
        "diff_format": "@@ -6,2 +6,3 @@\n import time\n+from six.moves import xrange\n \n",
        "source_code_with_indent": "import time\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import time\nfrom six.moves import xrange\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "rizar/attention-lvcsr",
    "commit": "6d4c441d444fc4980b8e49eb2e2b66bb124b6047",
    "filename": "doc/crei2013/ifelse_switch.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/rizar-attention-lvcsr/doc/crei2013/ifelse_switch.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "doc/crei2013/ifelse_switch.py:27:9 Unbound name [10]: Name `xrange` is used but not defined in the current scope.",
    "message": " Name `xrange` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 27,
    "warning_line": "for i in xrange(n_times):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from theano import tensor as tt\nfrom theano.ifelse import ifelse\n",
        "source_code_len": 65,
        "target_code": "from theano import tensor as tt\nfrom six.moves import xrange\nfrom theano.ifelse import ifelse\n",
        "target_code_len": 94,
        "diff_format": "@@ -7,2 +7,3 @@\n from theano import tensor as tt\n+from six.moves import xrange\n from theano.ifelse import ifelse\n",
        "source_code_with_indent": "from theano import tensor as tt\nfrom theano.ifelse import ifelse\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from theano import tensor as tt\nfrom six.moves import xrange\nfrom theano.ifelse import ifelse\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "rizar/attention-lvcsr",
    "commit": "6d4c441d444fc4980b8e49eb2e2b66bb124b6047",
    "filename": "theano/sandbox/test_theano_object.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/rizar-attention-lvcsr/theano/sandbox/test_theano_object.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "theano/sandbox/test_theano_object.py:19:15 Unbound name [10]: Name `TheanoObject` is used but not defined in the current scope.",
    "message": " Name `TheanoObject` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 19,
    "warning_line": "class MyModule(TheanoObject):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from __future__ import print_function\nfrom theano_object import *\n\n",
        "source_code_len": 67,
        "target_code": "from __future__ import print_function\nfrom .theano_object import *\n\n",
        "target_code_len": 68,
        "diff_format": "@@ -1,3 +1,3 @@\n from __future__ import print_function\n-from theano_object import *\n+from .theano_object import *\n \n",
        "source_code_with_indent": "from __future__ import print_function\nfrom theano_object import *\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from __future__ import print_function\nfrom .theano_object import *\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "rizar/attention-lvcsr",
    "commit": "6d4c441d444fc4980b8e49eb2e2b66bb124b6047",
    "filename": "theano/sandbox/test_theano_object.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/rizar-attention-lvcsr/theano/sandbox/test_theano_object.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "theano/sandbox/test_theano_object.py:29:5 Unbound name [10]: Name `symbolic_fn` is used but not defined in the current scope.",
    "message": " Name `symbolic_fn` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 29,
    "warning_line": "    @symbolic_fn",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from __future__ import print_function\nfrom theano_object import *\n\n",
        "source_code_len": 67,
        "target_code": "from __future__ import print_function\nfrom .theano_object import *\n\n",
        "target_code_len": 68,
        "diff_format": "@@ -1,3 +1,3 @@\n from __future__ import print_function\n-from theano_object import *\n+from .theano_object import *\n \n",
        "source_code_with_indent": "from __future__ import print_function\nfrom theano_object import *\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from __future__ import print_function\nfrom .theano_object import *\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "rizar/attention-lvcsr",
    "commit": "6d4c441d444fc4980b8e49eb2e2b66bb124b6047",
    "filename": "theano/sandbox/test_theano_object.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/rizar-attention-lvcsr/theano/sandbox/test_theano_object.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "theano/sandbox/test_theano_object.py:33:5 Unbound name [10]: Name `symbolic_fn_opts` is used but not defined in the current scope.",
    "message": " Name `symbolic_fn_opts` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 33,
    "warning_line": "    @symbolic_fn_opts(mode='FAST_COMPILE')",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from __future__ import print_function\nfrom theano_object import *\n\n",
        "source_code_len": 67,
        "target_code": "from __future__ import print_function\nfrom .theano_object import *\n\n",
        "target_code_len": 68,
        "diff_format": "@@ -1,3 +1,3 @@\n from __future__ import print_function\n-from theano_object import *\n+from .theano_object import *\n \n",
        "source_code_with_indent": "from __future__ import print_function\nfrom theano_object import *\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from __future__ import print_function\nfrom .theano_object import *\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "rizar/attention-lvcsr",
    "commit": "6d4c441d444fc4980b8e49eb2e2b66bb124b6047",
    "filename": "theano/scalar/tests/test_basic.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/rizar-attention-lvcsr/theano/scalar/tests/test_basic.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "theano/scalar/tests/test_basic.py:240:14 Unsupported operand [58]: `+` is not supported for operand types `range` and `range`.",
    "message": " `+` is not supported for operand types `range` and `range`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 240,
    "warning_line": "        (inv, range(-127, 0) + range(1, 127)),",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    unary_ops_vals = [\n        (inv, range(-127, 0) + range(1, 127)),\n        (sqrt, range(0, 128)),\n        (log, range(1, 128)),\n        (log2, range(1, 128)),\n        (log10, range(1, 128)),\n        (log1p, range(0, 128)),\n        (exp, range(-127, 89)),\n        (exp2, range(-127, 89)),\n        (expm1, range(-127, 89)),\n        (deg2rad, range(-127, 128)),\n        (rad2deg, range(-127, 128)),\n        (cos, range(-127, 128)),\n        (arccos, range(-1, 2)),\n        (cosh, range(-89, 90)),\n        (arccosh, range(1, 128)),\n        (sin, range(-127, 128)),\n        (arcsin, range(-1, 2)),\n        (sinh, range(-89, 90)),\n        (arcsinh, range(-127, 128)),\n        (tan, range(-3, 4)),\n        (arctan, range(-127, 128)),\n        (tanh, range(-127, 128)),\n        (arctanh, [0])]\n",
        "source_code_len": 787,
        "target_code": "    unary_ops_vals = [\n        (inv, list(range(-127, 0)) + list(range(1, 127))),\n        (sqrt, list(range(0, 128))),\n        (log, list(range(1, 128))),\n        (log2, list(range(1, 128))),\n        (log10, list(range(1, 128))),\n        (log1p, list(range(0, 128))),\n        (exp, list(range(-127, 89))),\n        (exp2, list(range(-127, 89))),\n        (expm1, list(range(-127, 89))),\n        (deg2rad, list(range(-127, 128))),\n        (rad2deg, list(range(-127, 128))),\n        (cos, list(range(-127, 128))),\n        (arccos, list(range(-1, 2))),\n        (cosh, list(range(-89, 90))),\n        (arccosh, list(range(1, 128))),\n        (sin, list(range(-127, 128))),\n        (arcsin, list(range(-1, 2))),\n        (sinh, list(range(-89, 90))),\n        (arcsinh, list(range(-127, 128))),\n        (tan, list(range(-3, 4))),\n        (arctan, list(range(-127, 128))),\n        (tanh, list(range(-127, 128))),\n        (arctanh, [0])]\n",
        "target_code_len": 925,
        "diff_format": "@@ -239,24 +239,24 @@\n     unary_ops_vals = [\n-        (inv, range(-127, 0) + range(1, 127)),\n-        (sqrt, range(0, 128)),\n-        (log, range(1, 128)),\n-        (log2, range(1, 128)),\n-        (log10, range(1, 128)),\n-        (log1p, range(0, 128)),\n-        (exp, range(-127, 89)),\n-        (exp2, range(-127, 89)),\n-        (expm1, range(-127, 89)),\n-        (deg2rad, range(-127, 128)),\n-        (rad2deg, range(-127, 128)),\n-        (cos, range(-127, 128)),\n-        (arccos, range(-1, 2)),\n-        (cosh, range(-89, 90)),\n-        (arccosh, range(1, 128)),\n-        (sin, range(-127, 128)),\n-        (arcsin, range(-1, 2)),\n-        (sinh, range(-89, 90)),\n-        (arcsinh, range(-127, 128)),\n-        (tan, range(-3, 4)),\n-        (arctan, range(-127, 128)),\n-        (tanh, range(-127, 128)),\n+        (inv, list(range(-127, 0)) + list(range(1, 127))),\n+        (sqrt, list(range(0, 128))),\n+        (log, list(range(1, 128))),\n+        (log2, list(range(1, 128))),\n+        (log10, list(range(1, 128))),\n+        (log1p, list(range(0, 128))),\n+        (exp, list(range(-127, 89))),\n+        (exp2, list(range(-127, 89))),\n+        (expm1, list(range(-127, 89))),\n+        (deg2rad, list(range(-127, 128))),\n+        (rad2deg, list(range(-127, 128))),\n+        (cos, list(range(-127, 128))),\n+        (arccos, list(range(-1, 2))),\n+        (cosh, list(range(-89, 90))),\n+        (arccosh, list(range(1, 128))),\n+        (sin, list(range(-127, 128))),\n+        (arcsin, list(range(-1, 2))),\n+        (sinh, list(range(-89, 90))),\n+        (arcsinh, list(range(-127, 128))),\n+        (tan, list(range(-3, 4))),\n+        (arctan, list(range(-127, 128))),\n+        (tanh, list(range(-127, 128))),\n         (arctanh, [0])]\n",
        "source_code_with_indent": "    <IND>unary_ops_vals = [\n        (inv, range(-127, 0) + range(1, 127)),\n        (sqrt, range(0, 128)),\n        (log, range(1, 128)),\n        (log2, range(1, 128)),\n        (log10, range(1, 128)),\n        (log1p, range(0, 128)),\n        (exp, range(-127, 89)),\n        (exp2, range(-127, 89)),\n        (expm1, range(-127, 89)),\n        (deg2rad, range(-127, 128)),\n        (rad2deg, range(-127, 128)),\n        (cos, range(-127, 128)),\n        (arccos, range(-1, 2)),\n        (cosh, range(-89, 90)),\n        (arccosh, range(1, 128)),\n        (sin, range(-127, 128)),\n        (arcsin, range(-1, 2)),\n        (sinh, range(-89, 90)),\n        (arcsinh, range(-127, 128)),\n        (tan, range(-3, 4)),\n        (arctan, range(-127, 128)),\n        (tanh, range(-127, 128)),\n        (arctanh, [0])]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <IND>unary_ops_vals = [\n        (inv, list(range(-127, 0)) + list(range(1, 127))),\n        (sqrt, list(range(0, 128))),\n        (log, list(range(1, 128))),\n        (log2, list(range(1, 128))),\n        (log10, list(range(1, 128))),\n        (log1p, list(range(0, 128))),\n        (exp, list(range(-127, 89))),\n        (exp2, list(range(-127, 89))),\n        (expm1, list(range(-127, 89))),\n        (deg2rad, list(range(-127, 128))),\n        (rad2deg, list(range(-127, 128))),\n        (cos, list(range(-127, 128))),\n        (arccos, list(range(-1, 2))),\n        (cosh, list(range(-89, 90))),\n        (arccosh, list(range(1, 128))),\n        (sin, list(range(-127, 128))),\n        (arcsin, list(range(-1, 2))),\n        (sinh, list(range(-89, 90))),\n        (arcsinh, list(range(-127, 128))),\n        (tan, list(range(-3, 4))),\n        (arctan, list(range(-127, 128))),\n        (tanh, list(range(-127, 128))),\n        (arctanh, [0])]\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "rizar/attention-lvcsr",
    "commit": "6d4c441d444fc4980b8e49eb2e2b66bb124b6047",
    "filename": "theano/tensor/tests/test_basic.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/rizar-attention-lvcsr/theano/tensor/tests/test_basic.py",
    "file_hunks_size": 55,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "theano/tensor/tests/test_basic.py:703:16 Unbound name [10]: Name `reduce` is used but not defined in the current scope.",
    "message": " Name `reduce` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 703,
    "warning_line": "        inputs, reduce(lambda x, y: x + y, inputs)),",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from theano.compat import PY3, exc_message, operator_div\nfrom theano.compat.six import StringIO\nfrom theano import compile, config, function, gof, tensor, shared\n",
        "source_code_len": 162,
        "target_code": "from theano.compat import PY3, exc_message, operator_div\nfrom six.moves import StringIO, reduce\nfrom theano import compile, config, function, gof, tensor, shared\n",
        "target_code_len": 162,
        "diff_format": "@@ -23,3 +24,3 @@\n from theano.compat import PY3, exc_message, operator_div\n-from theano.compat.six import StringIO\n+from six.moves import StringIO, reduce\n from theano import compile, config, function, gof, tensor, shared\n",
        "source_code_with_indent": "from theano.compat import PY3, exc_message, operator_div\nfrom theano.compat.six import StringIO\nfrom theano import compile, config, function, gof, tensor, shared\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from theano.compat import PY3, exc_message, operator_div\nfrom six.moves import StringIO, reduce\nfrom theano import compile, config, function, gof, tensor, shared\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "rizar/attention-lvcsr",
    "commit": "6d4c441d444fc4980b8e49eb2e2b66bb124b6047",
    "filename": "theano/tensor/tests/test_basic.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/rizar-attention-lvcsr/theano/tensor/tests/test_basic.py",
    "file_hunks_size": 55,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "theano/tensor/tests/test_basic.py:848:33 Unsupported operand [58]: `+` is not supported for operand types `range` and `range`.",
    "message": " `+` is not supported for operand types `range` and `range`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 848,
    "warning_line": "          numpy.tile(numpy.array(range(-127, 0) + range(1, 128), dtype='int8'),",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T,\n          numpy.tile(numpy.array(range(-127, 0) + range(1, 128), dtype='int8'),\n                     [255, 1])],\n",
        "source_code_len": 186,
        "target_code": "    int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T,\n          numpy.tile(numpy.array(list(range(-127, 0)) + list(range(1, 128)),\n                                 dtype='int8'),\n                     [255, 1])],\n",
        "target_code_len": 231,
        "diff_format": "@@ -847,3 +856,4 @@\n     int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T,\n-          numpy.tile(numpy.array(range(-127, 0) + range(1, 128), dtype='int8'),\n+          numpy.tile(numpy.array(list(range(-127, 0)) + list(range(1, 128)),\n+                                 dtype='int8'),\n                      [255, 1])],\n",
        "source_code_with_indent": "    int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T,\n          numpy.tile(numpy.array(range(-127, 0) + range(1, 128), dtype='int8'),\n                     [255, 1])],\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T,\n          numpy.tile(numpy.array(list(range(-127, 0)) + list(range(1, 128)),\n                                 dtype='int8'),\n                     [255, 1])],\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "rizar/attention-lvcsr",
    "commit": "6d4c441d444fc4980b8e49eb2e2b66bb124b6047",
    "filename": "theano/tensor/tests/test_basic.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/rizar-attention-lvcsr/theano/tensor/tests/test_basic.py",
    "file_hunks_size": 55,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "theano/tensor/tests/test_basic.py:935:22 Unsupported operand [58]: `+` is not supported for operand types `range` and `range`.",
    "message": " `+` is not supported for operand types `range` and `range`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 935,
    "warning_line": "    int8=[numpy.array(range(-127, 0) + range(1, 127), dtype='int8')],",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    integers=[randint_nonzero(2, 3)],\n    int8=[numpy.array(range(-127, 0) + range(1, 127), dtype='int8')],\n    complex=[randcomplex_nonzero((2, 3))],\n",
        "source_code_len": 151,
        "target_code": "    integers=[randint_nonzero(2, 3)],\n    int8=[numpy.array(list(range(-127, 0)) + list(range(1, 127)), dtype='int8')],\n    complex=[randcomplex_nonzero((2, 3))],\n",
        "target_code_len": 163,
        "diff_format": "@@ -934,3 +944,3 @@\n     integers=[randint_nonzero(2, 3)],\n-    int8=[numpy.array(range(-127, 0) + range(1, 127), dtype='int8')],\n+    int8=[numpy.array(list(range(-127, 0)) + list(range(1, 127)), dtype='int8')],\n     complex=[randcomplex_nonzero((2, 3))],\n",
        "source_code_with_indent": "    integers=[randint_nonzero(2, 3)],\n    int8=[numpy.array(range(-127, 0) + range(1, 127), dtype='int8')],\n    complex=[randcomplex_nonzero((2, 3))],\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    integers=[randint_nonzero(2, 3)],\n    int8=[numpy.array(list(range(-127, 0)) + list(range(1, 127)), dtype='int8')],\n    complex=[randcomplex_nonzero((2, 3))],\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]