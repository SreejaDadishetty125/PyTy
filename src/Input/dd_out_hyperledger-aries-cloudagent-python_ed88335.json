[
  {
    "project": "hyperledger/aries-cloudagent-python",
    "commit": "ed88335073fca540dde7a5dda148fb02782ff89c",
    "filename": "aries_cloudagent/protocols/coordinate_mediation/v1_0/manager.py",
    "min_patch_found": false,
    "full_warning_msg": "aries_cloudagent/protocols/coordinate_mediation/v1_0/manager.py:115:58 Incompatible parameter type [6]: Expected `aries_cloudagent.config.injection_context.InjectionContext` for 1st positional only parameter to call `MediationRecord.exists_for_connection_id` but got `ProfileSession`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "hyperledger/aries-cloudagent-python",
    "commit": "ed88335073fca540dde7a5dda148fb02782ff89c",
    "filename": "aries_cloudagent/protocols/coordinate_mediation/v1_0/models/mediation_record.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/hyperledger-aries-cloudagent-python/aries_cloudagent/protocols/coordinate_mediation/v1_0/models/mediation_record.py",
    "file_hunks_size": 7,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "aries_cloudagent/protocols/coordinate_mediation/v1_0/models/mediation_record.py:108:48 Incompatible parameter type [6]: Expected `aries_cloudagent.core.profile.ProfileSession` for 1st positional only parameter to call `BaseRecord.retrieve_by_tag_filter` but got `InjectionContext`.",
    "message": " Expected `aries_cloudagent.core.profile.ProfileSession` for 1st positional only parameter to call `BaseRecord.retrieve_by_tag_filter` but got `InjectionContext`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 108,
    "warning_line": "        return await cls.retrieve_by_tag_filter(context, tag_filter)"
  },
  {
    "project": "hyperledger/aries-cloudagent-python",
    "commit": "ed88335073fca540dde7a5dda148fb02782ff89c",
    "filename": "aries_cloudagent/protocols/coordinate_mediation/v1_0/models/mediation_record.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/hyperledger-aries-cloudagent-python/aries_cloudagent/protocols/coordinate_mediation/v1_0/models/mediation_record.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "aries_cloudagent/protocols/coordinate_mediation/v1_0/models/mediation_record.py:126:54 Incompatible parameter type [6]: Expected `aries_cloudagent.core.profile.ProfileSession` for 1st positional only parameter to call `BaseRecord.retrieve_by_tag_filter` but got `InjectionContext`.",
    "message": " Expected `aries_cloudagent.core.profile.ProfileSession` for 1st positional only parameter to call `BaseRecord.retrieve_by_tag_filter` but got `InjectionContext`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 126,
    "warning_line": "            record = await cls.retrieve_by_tag_filter(context, tag_filter)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom .....config.injection_context import InjectionContext\nfrom .....messaging.models.base_record import BaseRecord, BaseRecordSchema\n",
        "source_code_len": 135,
        "target_code": "\nfrom .....core.profile import ProfileSession\nfrom .....messaging.models.base_record import BaseRecord, BaseRecordSchema\n",
        "target_code_len": 121,
        "diff_format": "@@ -6,3 +6,3 @@\n \n-from .....config.injection_context import InjectionContext\n+from .....core.profile import ProfileSession\n from .....messaging.models.base_record import BaseRecord, BaseRecordSchema\n",
        "source_code_with_indent": "\nfrom .....config.injection_context import InjectionContext\nfrom .....messaging.models.base_record import BaseRecord, BaseRecordSchema\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom .....core.profile import ProfileSession\nfrom .....messaging.models.base_record import BaseRecord, BaseRecordSchema\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    async def retrieve_by_connection_id(\n        cls, context: InjectionContext, connection_id: str\n    ) -> \"MediationRecord\":\n",
        "source_code_len": 128,
        "target_code": "    async def retrieve_by_connection_id(\n        cls, session: ProfileSession, connection_id: str\n    ) -> \"MediationRecord\":\n",
        "target_code_len": 126,
        "diff_format": "@@ -94,3 +94,3 @@\n     async def retrieve_by_connection_id(\n-        cls, context: InjectionContext, connection_id: str\n+        cls, session: ProfileSession, connection_id: str\n     ) -> \"MediationRecord\":\n",
        "source_code_with_indent": "    async def retrieve_by_connection_id(\n        cls, context: InjectionContext, connection_id: str\n    ) -> \"MediationRecord\":\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    async def retrieve_by_connection_id(\n        cls, session: ProfileSession, connection_id: str\n    ) -> \"MediationRecord\":\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        tag_filter = {\"connection_id\": connection_id}\n        return await cls.retrieve_by_tag_filter(context, tag_filter)\n\n",
        "source_code_len": 124,
        "target_code": "        tag_filter = {\"connection_id\": connection_id}\n        return await cls.retrieve_by_tag_filter(session, tag_filter)\n\n",
        "target_code_len": 124,
        "diff_format": "@@ -107,3 +107,3 @@\n         tag_filter = {\"connection_id\": connection_id}\n-        return await cls.retrieve_by_tag_filter(context, tag_filter)\n+        return await cls.retrieve_by_tag_filter(session, tag_filter)\n \n",
        "source_code_with_indent": "        tag_filter = {\"connection_id\": connection_id}\n        return await cls.retrieve_by_tag_filter(context, tag_filter)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        tag_filter = {\"connection_id\": connection_id}\n        return await cls.retrieve_by_tag_filter(session, tag_filter)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    async def exists_for_connection_id(\n        cls, context: InjectionContext, connection_id: str\n    ) -> bool:\n",
        "source_code_len": 114,
        "target_code": "    async def exists_for_connection_id(\n        cls, session: ProfileSession, connection_id: str\n    ) -> bool:\n",
        "target_code_len": 112,
        "diff_format": "@@ -111,3 +111,3 @@\n     async def exists_for_connection_id(\n-        cls, context: InjectionContext, connection_id: str\n+        cls, session: ProfileSession, connection_id: str\n     ) -> bool:\n",
        "source_code_with_indent": "    async def exists_for_connection_id(\n        cls, context: InjectionContext, connection_id: str\n    ) -> bool:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    async def exists_for_connection_id(\n        cls, session: ProfileSession, connection_id: str\n    ) -> bool:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        try:\n            record = await cls.retrieve_by_tag_filter(context, tag_filter)\n        except StorageNotFoundError:\n",
        "source_code_len": 125,
        "target_code": "        try:\n            record = await cls.retrieve_by_tag_filter(session, tag_filter)\n        except StorageNotFoundError:\n",
        "target_code_len": 125,
        "diff_format": "@@ -125,3 +125,3 @@\n         try:\n-            record = await cls.retrieve_by_tag_filter(context, tag_filter)\n+            record = await cls.retrieve_by_tag_filter(session, tag_filter)\n         except StorageNotFoundError:\n",
        "source_code_with_indent": "        try:\n            <IND>record = await cls.retrieve_by_tag_filter(context, tag_filter)\n        <DED>except StorageNotFoundError:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        try:\n            <IND>record = await cls.retrieve_by_tag_filter(session, tag_filter)\n        <DED>except StorageNotFoundError:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]