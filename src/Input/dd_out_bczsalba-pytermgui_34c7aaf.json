[
  {
    "project": "bczsalba/pytermgui",
    "commit": "34c7aaff188ea8f98267b2a63f5e4531d183e8fa",
    "filename": "examples/bezocalc.py",
    "min_patch_found": false,
    "full_warning_msg": "examples/bezocalc.py:234:23 Incompatible parameter type [6]: Expected `pytermgui.widgets.base.Widget` for 1st positional only parameter to call `pytermgui.widgets.base.Container.__init__` but got `str`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "bczsalba/pytermgui",
    "commit": "34c7aaff188ea8f98267b2a63f5e4531d183e8fa",
    "filename": "examples/bezocalc.py",
    "min_patch_found": false,
    "full_warning_msg": "examples/bezocalc.py:239:26 Incompatible parameter type [6]: Expected `pytermgui.widgets.base.Widget` for 1st positional only parameter to call `pytermgui.widgets.base.Container.__init__` but got `str`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "bczsalba/pytermgui",
    "commit": "34c7aaff188ea8f98267b2a63f5e4531d183e8fa",
    "filename": "pytermgui/__init__.py",
    "min_patch_found": false,
    "full_warning_msg": "pytermgui/__init__.py:157:33 Incompatible parameter type [6]: Expected `widgets.base.Widget` for 1st positional only parameter to call `widgets.base.Container.__init__` but got `Union[None, typing.List[widgets.extra.Splitter], widgets.base.Widget]`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "bczsalba/pytermgui",
    "commit": "34c7aaff188ea8f98267b2a63f5e4531d183e8fa",
    "filename": "pytermgui/__init__.py",
    "min_patch_found": false,
    "full_warning_msg": "pytermgui/__init__.py:157:39 Incompatible parameter type [6]: Expected `widgets.base.Widget` for 2nd positional only parameter to call `widgets.base.Container.__init__` but got `Union[None, typing.List[widgets.extra.Splitter], widgets.base.Widget]`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "bczsalba/pytermgui",
    "commit": "34c7aaff188ea8f98267b2a63f5e4531d183e8fa",
    "filename": "pytermgui/cmd.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/bczsalba-pytermgui/pytermgui/cmd.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pytermgui/cmd.py:145:11 Call error [29]: `Optional[typing.Callable[[str], typing.Tuple[pytermgui.ansi_interface.MouseAction, typing.Tuple[int, int]]]]` is not a function.",
    "message": " `Optional[typing.Callable[[str], typing.Tuple[pytermgui.ansi_interface.MouseAction, typing.Tuple[int, int]]]]` is not a function.",
    "rule_id": "Call error [29]",
    "warning_line_no": 145,
    "warning_line": "        if self.manager.mouse_translator(key) is not None:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        # Don't display mouse codes\n        if self.manager.mouse_translator(key) is not None:\n            return True\n",
        "source_code_len": 119,
        "target_code": "        # Don't display mouse codes\n        if (\n            self.manager.mouse_translator is not None\n            and self.manager.mouse_translator(key) is not None\n        ):\n            return True\n",
        "target_code_len": 201,
        "diff_format": "@@ -144,3 +145,6 @@\n         # Don't display mouse codes\n-        if self.manager.mouse_translator(key) is not None:\n+        if (\n+            self.manager.mouse_translator is not None\n+            and self.manager.mouse_translator(key) is not None\n+        ):\n             return True\n",
        "source_code_with_indent": "        # Don't display mouse codes\n        if self.manager.mouse_translator(key) is not None:\n            <IND>return True\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        # Don't display mouse codes\n        if (\n            self.manager.mouse_translator is not None\n            and self.manager.mouse_translator(key) is not None\n        ):\n            <IND>return True\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "bczsalba/pytermgui",
    "commit": "34c7aaff188ea8f98267b2a63f5e4531d183e8fa",
    "filename": "pytermgui/cmd.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/bczsalba-pytermgui/pytermgui/cmd.py",
    "file_hunks_size": 10,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pytermgui/cmd.py:178:26 Incompatible parameter type [6]: Expected `typing.Callable[[pytermgui.widgets.base.Widget, str], typing.Any]` for 2nd positional only parameter to call `pytermgui.widgets.base.Widget.bind` but got `BoundMethod[typing.Callable(GetchApplication._key_callback)[[Named(self, GetchApplication), Named(window, pytermgui.window_manager.Window), Named(key, str)], bool], GetchApplication]`.",
    "message": " Expected `typing.Callable[[pytermgui.widgets.base.Widget, str], typing.Any]` for 2nd positional only parameter to call `pytermgui.widgets.base.Widget.bind` but got `BoundMethod[typing.Callable(GetchApplication._key_callback)[[Named(self, GetchApplication), Named(window, pytermgui.window_manager.Window), Named(key, str)], bool], GetchApplication]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 178,
    "warning_line": "            keys.ANY_KEY, self._key_callback, description=\"Read key & update window\""
  },
  {
    "project": "bczsalba/pytermgui",
    "commit": "34c7aaff188ea8f98267b2a63f5e4531d183e8fa",
    "filename": "pytermgui/cmd.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/bczsalba-pytermgui/pytermgui/cmd.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pytermgui/cmd.py:182:8 Incompatible return type [7]: Expected `pytermgui.window_manager.Window` but got `pytermgui.widgets.base.Container`.",
    "message": " Expected `pytermgui.window_manager.Window` but got `pytermgui.widgets.base.Container`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 182,
    "warning_line": "        return window",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        return window\n",
        "source_code_len": 23,
        "target_code": "\n        assert isinstance(window, Window)\n        return window\n",
        "target_code_len": 65,
        "diff_format": "@@ -181,2 +186,3 @@\n \n+        assert isinstance(window, Window)\n         return window\n",
        "source_code_with_indent": "\n        return window\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        assert isinstance(window, Window)\n        return window\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "bczsalba/pytermgui",
    "commit": "34c7aaff188ea8f98267b2a63f5e4531d183e8fa",
    "filename": "pytermgui/cmd.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/bczsalba-pytermgui/pytermgui/cmd.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pytermgui/cmd.py:252:27 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `io.TextIOBase.write` but got `typing.List[str]`.",
    "message": " Expected `str` for 1st positional only parameter to call `io.TextIOBase.write` but got `typing.List[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 252,
    "warning_line": "                file.write(window.get_lines())",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            with open(\"dump\", \"w\") as file:\n                file.write(window.get_lines())\n\n            sys.exit()\n\n\n",
        "source_code_len": 117,
        "target_code": "            with open(\"dump\", \"w\") as file:\n                file.write(\"\\n\".join(window.get_lines()))\n\n            sys.exit()\n\n",
        "target_code_len": 127,
        "diff_format": "@@ -251,6 +260,5 @@\n             with open(\"dump\", \"w\") as file:\n-                file.write(window.get_lines())\n+                file.write(\"\\n\".join(window.get_lines()))\n \n             sys.exit()\n-\n \n",
        "source_code_with_indent": "            with open(\"dump\", \"w\") as file:\n                <IND>file.write(window.get_lines())\n\n            <DED>sys.exit()\n\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            with open(\"dump\", \"w\") as file:\n                <IND>file.write(\"\\n\".join(window.get_lines()))\n\n            <DED>sys.exit()\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "bczsalba/pytermgui",
    "commit": "34c7aaff188ea8f98267b2a63f5e4531d183e8fa",
    "filename": "pytermgui/cmd.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/bczsalba-pytermgui/pytermgui/cmd.py",
    "file_hunks_size": 10,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pytermgui/cmd.py:323:8 Incompatible return type [7]: Expected `pytermgui.window_manager.Window` but got `pytermgui.widgets.base.Container`.",
    "message": " Expected `pytermgui.window_manager.Window` but got `pytermgui.widgets.base.Container`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 323,
    "warning_line": "        return window"
  },
  {
    "project": "bczsalba/pytermgui",
    "commit": "34c7aaff188ea8f98267b2a63f5e4531d183e8fa",
    "filename": "pytermgui/cmd.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/bczsalba-pytermgui/pytermgui/cmd.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pytermgui/cmd.py:358:8 Incompatible return type [7]: Expected `pytermgui.window_manager.Window` but got `pytermgui.widgets.base.Container`.",
    "message": " Expected `pytermgui.window_manager.Window` but got `pytermgui.widgets.base.Container`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 358,
    "warning_line": "        return window.center()",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nclass HelperApplication(Application):\n    \"\"\"Application class to show all currently-active bindings\"\"\"\n\n    title = \"Help\"\n    description = \"See all current bindings\"\n\n    def finish(self, window: Window) -> None:\n        \"\"\"Do nothing on finish\"\"\"\n\n    def construct_window(self) -> Window:\n        \"\"\"Construct an application window\"\"\"\n\n        window = self._get_base_window(width=50) + \"[wm-title]Current bindings\" + \"\"\n\n        bindings = self.manager.list_bindings() + self.manager.focused.list_bindings()\n\n        # Convert keycode into key name\n        for i, binding in enumerate(bindings):\n            binding_mutable = list(binding)\n            binding_mutable[0] = _get_key_name(binding[0]).strip(\"'\")\n            bindings[i] = tuple(binding_mutable)\n\n        # Sort keys according to key name length\n        bindings.sort(key=lambda item: real_length(item[0]))\n\n        for (key, _, description) in bindings:\n            window += Label(\"[wm-section]\" + key + \": \", parent_align=0)\n            window += Label(description, padding=2, parent_align=0)\n            window += \"\"\n\n        window.bind(keys.ESC, lambda *_: window.close())\n\n        return window.center()\n\n",
        "source_code_len": 1182,
        "target_code": "\n# class HelperApplication(Application):\n#     \"\"\"Application class to show all currently-active bindings\"\"\"\n#\n#     title = \"Help\"\n#     description = \"See all current bindings\"\n#\n#     def finish(self, window: Window) -> None:\n#         \"\"\"Do nothing on finish\"\"\"\n#\n#     def construct_window(self) -> Window:\n#         \"\"\"Construct an application window\"\"\"\n#\n#         window = self._get_base_window(width=50) + \"[wm-title]Current bindings\" + \"\"\n#\n#         bindings = list(self.manager.bindings)\n#\n#         if self.manager.focused is not None:\n#             bindings += list(self.manager.focused.bindings)\n#\n#         # Convert keycode into key name\n#         for i, binding in enumerate(bindings):\n#             binding_mutable = list(binding)\n#             binding_mutable[0] = _get_key_name(binding[0]).strip(\"'\")\n#             bindings[i] = tuple(binding_mutable)\n#\n#         # Sort keys according to key name length\n#         bindings.sort(key=lambda item: real_length(item[0]))\n#\n#         for (key, _, description) in bindings:\n#             window += Label(\"[wm-section]\" + key + \": \", parent_align=0)\n#             window += Label(description, padding=2, parent_align=0)\n#             window += \"\"\n#\n#         window.bind(keys.ESC, lambda *_: window.close())\n#\n#         return window.center()\n\n",
        "target_code_len": 1309,
        "diff_format": "@@ -325,35 +333,38 @@\n \n-class HelperApplication(Application):\n-    \"\"\"Application class to show all currently-active bindings\"\"\"\n-\n-    title = \"Help\"\n-    description = \"See all current bindings\"\n-\n-    def finish(self, window: Window) -> None:\n-        \"\"\"Do nothing on finish\"\"\"\n-\n-    def construct_window(self) -> Window:\n-        \"\"\"Construct an application window\"\"\"\n-\n-        window = self._get_base_window(width=50) + \"[wm-title]Current bindings\" + \"\"\n-\n-        bindings = self.manager.list_bindings() + self.manager.focused.list_bindings()\n-\n-        # Convert keycode into key name\n-        for i, binding in enumerate(bindings):\n-            binding_mutable = list(binding)\n-            binding_mutable[0] = _get_key_name(binding[0]).strip(\"'\")\n-            bindings[i] = tuple(binding_mutable)\n-\n-        # Sort keys according to key name length\n-        bindings.sort(key=lambda item: real_length(item[0]))\n-\n-        for (key, _, description) in bindings:\n-            window += Label(\"[wm-section]\" + key + \": \", parent_align=0)\n-            window += Label(description, padding=2, parent_align=0)\n-            window += \"\"\n-\n-        window.bind(keys.ESC, lambda *_: window.close())\n-\n-        return window.center()\n+# class HelperApplication(Application):\n+#     \"\"\"Application class to show all currently-active bindings\"\"\"\n+#\n+#     title = \"Help\"\n+#     description = \"See all current bindings\"\n+#\n+#     def finish(self, window: Window) -> None:\n+#         \"\"\"Do nothing on finish\"\"\"\n+#\n+#     def construct_window(self) -> Window:\n+#         \"\"\"Construct an application window\"\"\"\n+#\n+#         window = self._get_base_window(width=50) + \"[wm-title]Current bindings\" + \"\"\n+#\n+#         bindings = list(self.manager.bindings)\n+#\n+#         if self.manager.focused is not None:\n+#             bindings += list(self.manager.focused.bindings)\n+#\n+#         # Convert keycode into key name\n+#         for i, binding in enumerate(bindings):\n+#             binding_mutable = list(binding)\n+#             binding_mutable[0] = _get_key_name(binding[0]).strip(\"'\")\n+#             bindings[i] = tuple(binding_mutable)\n+#\n+#         # Sort keys according to key name length\n+#         bindings.sort(key=lambda item: real_length(item[0]))\n+#\n+#         for (key, _, description) in bindings:\n+#             window += Label(\"[wm-section]\" + key + \": \", parent_align=0)\n+#             window += Label(description, padding=2, parent_align=0)\n+#             window += \"\"\n+#\n+#         window.bind(keys.ESC, lambda *_: window.close())\n+#\n+#         return window.center()\n \n",
        "source_code_with_indent": "\n<DED><DED>class HelperApplication(Application):\n    <IND>\"\"\"Application class to show all currently-active bindings\"\"\"\n\n    title = \"Help\"\n    description = \"See all current bindings\"\n\n    def finish(self, window: Window) -> None:\n        <IND>\"\"\"Do nothing on finish\"\"\"\n\n    <DED>def construct_window(self) -> Window:\n        <IND>\"\"\"Construct an application window\"\"\"\n\n        window = self._get_base_window(width=50) + \"[wm-title]Current bindings\" + \"\"\n\n        bindings = self.manager.list_bindings() + self.manager.focused.list_bindings()\n\n        # Convert keycode into key name\n        for i, binding in enumerate(bindings):\n            <IND>binding_mutable = list(binding)\n            binding_mutable[0] = _get_key_name(binding[0]).strip(\"'\")\n            bindings[i] = tuple(binding_mutable)\n\n        # Sort keys according to key name length\n        <DED>bindings.sort(key=lambda item: real_length(item[0]))\n\n        for (key, _, description) in bindings:\n            <IND>window += Label(\"[wm-section]\" + key + \": \", parent_align=0)\n            window += Label(description, padding=2, parent_align=0)\n            window += \"\"\n\n        <DED>window.bind(keys.ESC, lambda *_: window.close())\n\n        return window.center()\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n# class HelperApplication(Application):\n#     \"\"\"Application class to show all currently-active bindings\"\"\"\n#\n#     title = \"Help\"\n#     description = \"See all current bindings\"\n#\n#     def finish(self, window: Window) -> None:\n#         \"\"\"Do nothing on finish\"\"\"\n#\n#     def construct_window(self) -> Window:\n#         \"\"\"Construct an application window\"\"\"\n#\n#         window = self._get_base_window(width=50) + \"[wm-title]Current bindings\" + \"\"\n#\n#         bindings = list(self.manager.bindings)\n#\n#         if self.manager.focused is not None:\n#             bindings += list(self.manager.focused.bindings)\n#\n#         # Convert keycode into key name\n#         for i, binding in enumerate(bindings):\n#             binding_mutable = list(binding)\n#             binding_mutable[0] = _get_key_name(binding[0]).strip(\"'\")\n#             bindings[i] = tuple(binding_mutable)\n#\n#         # Sort keys according to key name length\n#         bindings.sort(key=lambda item: real_length(item[0]))\n#\n#         for (key, _, description) in bindings:\n#             window += Label(\"[wm-section]\" + key + \": \", parent_align=0)\n#             window += Label(description, padding=2, parent_align=0)\n#             window += \"\"\n#\n#         window.bind(keys.ESC, lambda *_: window.close())\n#\n#         return window.center()\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        helper = HelperApplication(manager)\n\n",
        "source_code_len": 46,
        "target_code": "\n        # helper = HelperApplication(manager)\n\n",
        "target_code_len": 48,
        "diff_format": "@@ -384,3 +395,3 @@\n \n-        helper = HelperApplication(manager)\n+        # helper = HelperApplication(manager)\n \n",
        "source_code_with_indent": "\n        helper = HelperApplication(manager)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        # helper = HelperApplication(manager)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        manager.bind(\n            \"?\",\n            lambda *_: manager.add(helper.construct_window()),\n            description=\"Show all active bindings\",\n        )\n\n",
        "source_code_len": 166,
        "target_code": "\n        # manager.bind(\n        #     \"?\",\n        #     lambda *_: manager.add(helper.construct_window()),\n        #     description=\"Show all active bindings\",\n        # )\n\n",
        "target_code_len": 176,
        "diff_format": "@@ -397,7 +408,7 @@\n \n-        manager.bind(\n-            \"?\",\n-            lambda *_: manager.add(helper.construct_window()),\n-            description=\"Show all active bindings\",\n-        )\n+        # manager.bind(\n+        #     \"?\",\n+        #     lambda *_: manager.add(helper.construct_window()),\n+        #     description=\"Show all active bindings\",\n+        # )\n \n",
        "source_code_with_indent": "\n        manager.bind(\n            \"?\",\n            lambda *_: manager.add(helper.construct_window()),\n            description=\"Show all active bindings\",\n        )\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        # manager.bind(\n        #     \"?\",\n        #     lambda *_: manager.add(helper.construct_window()),\n        #     description=\"Show all active bindings\",\n        # )\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "bczsalba/pytermgui",
    "commit": "34c7aaff188ea8f98267b2a63f5e4531d183e8fa",
    "filename": "pytermgui/file_loaders.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/bczsalba-pytermgui/pytermgui/file_loaders.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pytermgui/file_loaders.py:176:40 Invalid type [31]: Expression `typing.Callable[(None, pytermgui.widgets.Widget)]` is not a valid type.",
    "message": " Expression `typing.Callable[(None, pytermgui.widgets.Widget)]` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 176,
    "warning_line": "    def __getattr__(self, attr: str) -> Callable[None, widgets.Widget]:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __getattr__(self, attr: str) -> Callable[None, widgets.Widget]:\n        \"\"\"Get copy of widget from namespace widget list by its name\"\"\"\n",
        "source_code_len": 145,
        "target_code": "\n    def __getattr__(self, attr: str) -> widgets.Widget:\n        \"\"\"Get copy of widget from namespace widget list by its name\"\"\"\n",
        "target_code_len": 129,
        "diff_format": "@@ -175,3 +177,3 @@\n \n-    def __getattr__(self, attr: str) -> Callable[None, widgets.Widget]:\n+    def __getattr__(self, attr: str) -> widgets.Widget:\n         \"\"\"Get copy of widget from namespace widget list by its name\"\"\"\n",
        "source_code_with_indent": "\n    <DED><DED><DED>def __getattr__(self, attr: str) -> Callable[None, widgets.Widget]:\n        <IND>\"\"\"Get copy of widget from namespace widget list by its name\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED><DED><DED>def __getattr__(self, attr: str) -> widgets.Widget:\n        <IND>\"\"\"Get copy of widget from namespace widget list by its name\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "bczsalba/pytermgui",
    "commit": "34c7aaff188ea8f98267b2a63f5e4531d183e8fa",
    "filename": "pytermgui/file_loaders.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/bczsalba-pytermgui/pytermgui/file_loaders.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pytermgui/file_loaders.py:180:12 Incompatible return type [7]: Expected `typing.Callable[..., unknown]` but got `widgets.base.Widget`.",
    "message": " Expected `typing.Callable[..., unknown]` but got `widgets.base.Widget`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 180,
    "warning_line": "            return self.widgets[attr].copy()",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __getattr__(self, attr: str) -> Callable[None, widgets.Widget]:\n        \"\"\"Get copy of widget from namespace widget list by its name\"\"\"\n",
        "source_code_len": 145,
        "target_code": "\n    def __getattr__(self, attr: str) -> widgets.Widget:\n        \"\"\"Get copy of widget from namespace widget list by its name\"\"\"\n",
        "target_code_len": 129,
        "diff_format": "@@ -175,3 +177,3 @@\n \n-    def __getattr__(self, attr: str) -> Callable[None, widgets.Widget]:\n+    def __getattr__(self, attr: str) -> widgets.Widget:\n         \"\"\"Get copy of widget from namespace widget list by its name\"\"\"\n",
        "source_code_with_indent": "\n    <DED><DED><DED>def __getattr__(self, attr: str) -> Callable[None, widgets.Widget]:\n        <IND>\"\"\"Get copy of widget from namespace widget list by its name\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED><DED><DED>def __getattr__(self, attr: str) -> widgets.Widget:\n        <IND>\"\"\"Get copy of widget from namespace widget list by its name\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "bczsalba/pytermgui",
    "commit": "34c7aaff188ea8f98267b2a63f5e4531d183e8fa",
    "filename": "pytermgui/file_loaders.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/bczsalba-pytermgui/pytermgui/file_loaders.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pytermgui/file_loaders.py:221:52 Incompatible parameter type [6]: Expected `typing.Dict[typing.Any, typing.Any]` for 1st positional only parameter to call `WidgetNamespace.from_config` but got `str`.",
    "message": " Expected `typing.Dict[typing.Any, typing.Any]` for 1st positional only parameter to call `WidgetNamespace.from_config` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 221,
    "warning_line": "            namespace = WidgetNamespace.from_config(data, loader=self)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        else:\n            namespace = WidgetNamespace.from_config(data, loader=self)\n\n        # Create aliases\n        for key, value in parsed.get(\"markup\").items() or []:\n            markup.alias(key, value)\n",
        "source_code_len": 210,
        "target_code": "        else:\n            namespace = WidgetNamespace.from_config({}, loader=self)\n\n        # Create aliases\n        for key, value in (parsed.get(\"markup\") or {}).items():\n            markup.alias(key, value)\n",
        "target_code_len": 210,
        "diff_format": "@@ -220,6 +222,6 @@\n         else:\n-            namespace = WidgetNamespace.from_config(data, loader=self)\n+            namespace = WidgetNamespace.from_config({}, loader=self)\n \n         # Create aliases\n-        for key, value in parsed.get(\"markup\").items() or []:\n+        for key, value in (parsed.get(\"markup\") or {}).items():\n             markup.alias(key, value)\n",
        "source_code_with_indent": "        <DED>else:\n            <IND>namespace = WidgetNamespace.from_config(data, loader=self)\n\n        # Create aliases\n        <DED>for key, value in parsed.get(\"markup\").items() or []:\n            <IND>markup.alias(key, value)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>else:\n            <IND>namespace = WidgetNamespace.from_config({}, loader=self)\n\n        # Create aliases\n        <DED>for key, value in (parsed.get(\"markup\") or {}).items():\n            <IND>markup.alias(key, value)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "bczsalba/pytermgui",
    "commit": "34c7aaff188ea8f98267b2a63f5e4531d183e8fa",
    "filename": "pytermgui/serializer.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/bczsalba-pytermgui/pytermgui/serializer.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pytermgui/serializer.py:46:22 Incompatible parameter type [6]: Expected `Widget` for 1st positional only parameter to call `Serializer.register` but got `Type[Window]`.",
    "message": " Expected `Widget` for 1st positional only parameter to call `Serializer.register` but got `Type[Window]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 46,
    "warning_line": "        self.register(Window)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def register(self, cls: Widget) -> None:\n        \"\"\"Make object aware of a custom widget class, so\n",
        "source_code_len": 104,
        "target_code": "\n    def register(self, cls: Type[Widget]) -> None:\n        \"\"\"Make object aware of a custom widget class, so\n",
        "target_code_len": 110,
        "diff_format": "@@ -69,3 +69,3 @@\n \n-    def register(self, cls: Widget) -> None:\n+    def register(self, cls: Type[Widget]) -> None:\n         \"\"\"Make object aware of a custom widget class, so\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def register(self, cls: Widget) -> None:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def register(self, cls: Type[Widget]) -> None:\n        <IND>"
      }
    ]
  },
  {
    "project": "bczsalba/pytermgui",
    "commit": "34c7aaff188ea8f98267b2a63f5e4531d183e8fa",
    "filename": "pytermgui/window_manager.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/bczsalba-pytermgui/pytermgui/window_manager.py",
    "file_hunks_size": 10,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pytermgui/window_manager.py:162:32 Incompatible parameter type [6]: Expected `pytermgui.widgets.base.Widget` for 1st positional only parameter to call `pytermgui.widgets.base.Widget.debug` but got `Rect`.",
    "message": " Expected `pytermgui.widgets.base.Widget` for 1st positional only parameter to call `pytermgui.widgets.base.Widget.debug` but got `Rect`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 162,
    "warning_line": "        return str(Widget.debug(self))"
  },
  {
    "project": "bczsalba/pytermgui",
    "commit": "34c7aaff188ea8f98267b2a63f5e4531d183e8fa",
    "filename": "pytermgui/window_manager.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/bczsalba-pytermgui/pytermgui/window_manager.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pytermgui/window_manager.py:374:39 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `dict.__getitem__` but got `typing.Type[typing.Tuple[MouseAction, typing.Tuple[int, int]]]`.",
    "message": " Expected `str` for 1st positional only parameter to call `dict.__getitem__` but got `typing.Type[typing.Tuple[MouseAction, typing.Tuple[int, int]]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 374,
    "warning_line": "            method, _ = self._bindings[MouseEvent]",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        # Execute universal mouse binding\n        if is_mouse_event(key) and MouseEvent in self._bindings:\n            method, _ = self._bindings[MouseEvent]\n",
        "source_code_len": 158,
        "target_code": "        # Execute universal mouse binding\n        if isinstance(key, MouseEvent) and MouseEvent in self._bindings:\n            method, _ = self._bindings[MouseEvent]\n",
        "target_code_len": 166,
        "diff_format": "@@ -372,3 +371,3 @@\n         # Execute universal mouse binding\n-        if is_mouse_event(key) and MouseEvent in self._bindings:\n+        if isinstance(key, MouseEvent) and MouseEvent in self._bindings:\n             method, _ = self._bindings[MouseEvent]\n",
        "source_code_with_indent": "        # Execute universal mouse binding\n        if is_mouse_event(key) and MouseEvent in self._bindings:\n            <IND>method, _ = self._bindings[MouseEvent]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        # Execute universal mouse binding\n        if isinstance(key, MouseEvent) and MouseEvent in self._bindings:\n            <IND>method, _ = self._bindings[MouseEvent]\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "bczsalba/pytermgui",
    "commit": "34c7aaff188ea8f98267b2a63f5e4531d183e8fa",
    "filename": "pytermgui/window_manager.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/bczsalba-pytermgui/pytermgui/window_manager.py",
    "file_hunks_size": 10,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pytermgui/window_manager.py:436:47 Incompatible parameter type [6]: Expected `typing.Tuple[MouseAction, typing.Tuple[int, int]]` for 1st positional only parameter to call `Container.handle_mouse` but got `typing.Union[typing.Tuple[int, int], MouseAction]`.",
    "message": " Expected `typing.Tuple[MouseAction, typing.Tuple[int, int]]` for 1st positional only parameter to call `Container.handle_mouse` but got `typing.Union[typing.Tuple[int, int], MouseAction]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 436,
    "warning_line": "                    if not window.handle_mouse(event) and action in handlers:"
  },
  {
    "project": "bczsalba/pytermgui",
    "commit": "34c7aaff188ea8f98267b2a63f5e4531d183e8fa",
    "filename": "pytermgui/window_manager.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/bczsalba-pytermgui/pytermgui/window_manager.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pytermgui/window_manager.py:441:42 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `WindowManager.execute_binding` but got `typing.Tuple[typing.Any, typing.Any]`.",
    "message": " Expected `str` for 1st positional only parameter to call `WindowManager.execute_binding` but got `typing.Tuple[typing.Any, typing.Any]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 441,
    "warning_line": "                    self.execute_binding((action, pos))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def execute_binding(self, key: str) -> bool:\n        \"\"\"Execute bindings, including mouse ones\"\"\"\n",
        "source_code_len": 103,
        "target_code": "\n    def execute_binding(self, key: Any) -> bool:\n        \"\"\"Execute bindings, including mouse ones\"\"\"\n",
        "target_code_len": 103,
        "diff_format": "@@ -368,3 +367,3 @@\n \n-    def execute_binding(self, key: str) -> bool:\n+    def execute_binding(self, key: Any) -> bool:\n         \"\"\"Execute bindings, including mouse ones\"\"\"\n",
        "source_code_with_indent": "\n    <DED>def execute_binding(self, key: str) -> bool:\n        <IND>\"\"\"Execute bindings, including mouse ones\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def execute_binding(self, key: Any) -> bool:\n        <IND>\"\"\"Execute bindings, including mouse ones\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "bczsalba/pytermgui",
    "commit": "34c7aaff188ea8f98267b2a63f5e4531d183e8fa",
    "filename": "pytermgui/window_manager.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/bczsalba-pytermgui/pytermgui/window_manager.py",
    "file_hunks_size": 10,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pytermgui/window_manager.py:619:16 Incompatible attribute type [8]: Attribute `mouse_translator` declared in class `WindowManager` has type `Optional[typing.Callable[[str], typing.Tuple[MouseAction, typing.Tuple[int, int]]]]` but is used as type `typing.Callable[[str], Optional[typing.List[Optional[typing.Tuple[MouseAction, typing.Tuple[int, int]]]]]]`.",
    "message": " Attribute `mouse_translator` declared in class `WindowManager` has type `Optional[typing.Callable[[str], typing.Tuple[MouseAction, typing.Tuple[int, int]]]]` but is used as type `typing.Callable[[str], Optional[typing.List[Optional[typing.Tuple[MouseAction, typing.Tuple[int, int]]]]]]`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 619,
    "warning_line": "                self.mouse_translator = translate"
  },
  {
    "project": "bczsalba/pytermgui",
    "commit": "34c7aaff188ea8f98267b2a63f5e4531d183e8fa",
    "filename": "pytermgui/window_manager.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/bczsalba-pytermgui/pytermgui/window_manager.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pytermgui/window_manager.py:676:24 Incompatible parameter type [6]: Expected `pytermgui.widgets.base.Widget` for 1st positional only parameter to call `Window.__init__` but got `str`.",
    "message": " Expected `pytermgui.widgets.base.Widget` for 1st positional only parameter to call `Window.__init__` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 676,
    "warning_line": "        window = Window(\"[wm-title]Alert!\", is_modal=True, width=50)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __init__(self, *widgets: Widget, **attrs: Any) -> None:\n        \"\"\"Initialize object\"\"\"\n",
        "source_code_len": 97,
        "target_code": "\n    def __init__(self, *widgets: Any, **attrs: Any) -> None:\n        \"\"\"Initialize object\"\"\"\n",
        "target_code_len": 94,
        "diff_format": "@@ -185,3 +184,3 @@\n \n-    def __init__(self, *widgets: Widget, **attrs: Any) -> None:\n+    def __init__(self, *widgets: Any, **attrs: Any) -> None:\n         \"\"\"Initialize object\"\"\"\n",
        "source_code_with_indent": "\n    def __init__(self, *widgets: Widget, **attrs: Any) -> None:\n        <IND>\"\"\"Initialize object\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    def __init__(self, *widgets: Any, **attrs: Any) -> None:\n        <IND>\"\"\"Initialize object\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]