[
  {
    "project": "elyra-ai/elyra",
    "commit": "91eae07754821516ae2d042550534da2b9a799d7",
    "filename": "elyra/pipeline/kfp/processor_kfp.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/elyra-ai-elyra/elyra/pipeline/kfp/processor_kfp.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "elyra/pipeline/kfp/processor_kfp.py:793:25 Incompatible parameter type [6]: Expected `typing.Union[bytes, str]` for 1st positional only parameter to call `requests.sessions.Session.get` but got `typing.Optional[str]`.",
    "message": " Expected `typing.Union[bytes, str]` for 1st positional only parameter to call `requests.sessions.Session.get` but got `typing.Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 793,
    "warning_line": "            resp = s.get(auth_session[\"redirect_url\"], allow_redirects=True)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n            # we expect a \"Dex Login\" URL to have `/auth` in the HTTP path\n            if \"/auth\" not in redirect_url_obj.path:\n                raise RuntimeError(\n                    f\"Path of `redirect_url` must contain '/auth', but got: {auth_session['redirect_url']}\"\n                )\n\n            # rewrite \"Dex Login\" URL to \"/auth/local\" (for dex `staticPasswords` login)\n            # (needed when dex is configured with multiple auth options)\n            if \"/auth/local\" not in redirect_url_obj.path:\n                redirect_url_obj = redirect_url_obj._replace(\n                    path=redirect_url_obj.path.replace(\"/auth\", \"/auth/local\")\n                )\n                auth_session[\"redirect_url\"] = redirect_url_obj.geturl()\n\n            # Get redirected to page we can POST credentials to\n            # (needed when dex is configured with multiple auth options)\n            resp = s.get(auth_session[\"redirect_url\"], allow_redirects=True)\n            if resp.status_code != 200:\n                raise RuntimeError(\n                    f\"HTTP status code '{resp.status_code}' for GET against: {auth_session['redirect_url']}\"\n                )\n\n            auth_session[\"dex_login_url\"] = resp.url\n\n            ################\n            # Attempt Dex `staticPasswords` Login\n            ################\n",
        "source_code_len": 1326,
        "target_code": "\n            # if we are at `/auth?=xxxx` path, we need to select an auth type\n            if re.search(r\"/auth$\", redirect_url_obj.path):\n                # default to \"staticPasswords\" auth type\n                redirect_url_obj = redirect_url_obj._replace(\n                    path=re.sub(r\"/auth$\", \"/auth/local\", redirect_url_obj.path)\n                )\n\n            # if we are at `/auth/xxxx/login` path, then no further action is needed (we can use it for login POST)\n            if re.search(r\"/auth/.*/login$\", redirect_url_obj.path):\n                auth_session[\"dex_login_url\"] = redirect_url_obj.geturl()\n\n            # else, we need to be redirected to the actual login page\n            else:\n                # this GET should redirect us to the `/auth/xxxx/login` path\n                resp = s.get(redirect_url_obj.geturl(), allow_redirects=True)\n                if resp.status_code != 200:\n                    raise RuntimeError(\n                        f\"HTTP status code '{resp.status_code}' for GET against: {redirect_url_obj.geturl()}\"\n                    )\n\n                # set the login url\n                auth_session[\"dex_login_url\"] = resp.url\n\n            ################\n            # Attempt Dex Login\n            ################\n",
        "target_code_len": 1262,
        "diff_format": "@@ -776,28 +777,27 @@\n \n-            # we expect a \"Dex Login\" URL to have `/auth` in the HTTP path\n-            if \"/auth\" not in redirect_url_obj.path:\n-                raise RuntimeError(\n-                    f\"Path of `redirect_url` must contain '/auth', but got: {auth_session['redirect_url']}\"\n+            # if we are at `/auth?=xxxx` path, we need to select an auth type\n+            if re.search(r\"/auth$\", redirect_url_obj.path):\n+                # default to \"staticPasswords\" auth type\n+                redirect_url_obj = redirect_url_obj._replace(\n+                    path=re.sub(r\"/auth$\", \"/auth/local\", redirect_url_obj.path)\n                 )\n \n-            # rewrite \"Dex Login\" URL to \"/auth/local\" (for dex `staticPasswords` login)\n-            # (needed when dex is configured with multiple auth options)\n-            if \"/auth/local\" not in redirect_url_obj.path:\n-                redirect_url_obj = redirect_url_obj._replace(\n-                    path=redirect_url_obj.path.replace(\"/auth\", \"/auth/local\")\n-                )\n-                auth_session[\"redirect_url\"] = redirect_url_obj.geturl()\n-\n-            # Get redirected to page we can POST credentials to\n-            # (needed when dex is configured with multiple auth options)\n-            resp = s.get(auth_session[\"redirect_url\"], allow_redirects=True)\n-            if resp.status_code != 200:\n-                raise RuntimeError(\n-                    f\"HTTP status code '{resp.status_code}' for GET against: {auth_session['redirect_url']}\"\n-                )\n-\n-            auth_session[\"dex_login_url\"] = resp.url\n+            # if we are at `/auth/xxxx/login` path, then no further action is needed (we can use it for login POST)\n+            if re.search(r\"/auth/.*/login$\", redirect_url_obj.path):\n+                auth_session[\"dex_login_url\"] = redirect_url_obj.geturl()\n+\n+            # else, we need to be redirected to the actual login page\n+            else:\n+                # this GET should redirect us to the `/auth/xxxx/login` path\n+                resp = s.get(redirect_url_obj.geturl(), allow_redirects=True)\n+                if resp.status_code != 200:\n+                    raise RuntimeError(\n+                        f\"HTTP status code '{resp.status_code}' for GET against: {redirect_url_obj.geturl()}\"\n+                    )\n+\n+                # set the login url\n+                auth_session[\"dex_login_url\"] = resp.url\n \n             ################\n-            # Attempt Dex `staticPasswords` Login\n+            # Attempt Dex Login\n             ################\n",
        "source_code_with_indent": "\n            # we expect a \"Dex Login\" URL to have `/auth` in the HTTP path\n            if \"/auth\" not in redirect_url_obj.path:\n                <IND>raise RuntimeError(\n                    f\"Path of `redirect_url` must contain '/auth', but got: {auth_session['redirect_url']}\"\n                )\n\n            # rewrite \"Dex Login\" URL to \"/auth/local\" (for dex `staticPasswords` login)\n            # (needed when dex is configured with multiple auth options)\n            <DED>if \"/auth/local\" not in redirect_url_obj.path:\n                <IND>redirect_url_obj = redirect_url_obj._replace(\n                    path=redirect_url_obj.path.replace(\"/auth\", \"/auth/local\")\n                )\n                auth_session[\"redirect_url\"] = redirect_url_obj.geturl()\n\n            # Get redirected to page we can POST credentials to\n            # (needed when dex is configured with multiple auth options)\n            <DED>resp = s.get(auth_session[\"redirect_url\"], allow_redirects=True)\n            if resp.status_code != 200:\n                <IND>raise RuntimeError(\n                    f\"HTTP status code '{resp.status_code}' for GET against: {auth_session['redirect_url']}\"\n                )\n\n            <DED>auth_session[\"dex_login_url\"] = resp.url\n\n            ################\n            # Attempt Dex `staticPasswords` Login\n            ################\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n            # if we are at `/auth?=xxxx` path, we need to select an auth type\n            if re.search(r\"/auth$\", redirect_url_obj.path):\n                # default to \"staticPasswords\" auth type\n                <IND>redirect_url_obj = redirect_url_obj._replace(\n                    path=re.sub(r\"/auth$\", \"/auth/local\", redirect_url_obj.path)\n                )\n\n            # if we are at `/auth/xxxx/login` path, then no further action is needed (we can use it for login POST)\n            <DED>if re.search(r\"/auth/.*/login$\", redirect_url_obj.path):\n                <IND>auth_session[\"dex_login_url\"] = redirect_url_obj.geturl()\n\n            # else, we need to be redirected to the actual login page\n            <DED>else:\n                # this GET should redirect us to the `/auth/xxxx/login` path\n                <IND>resp = s.get(redirect_url_obj.geturl(), allow_redirects=True)\n                if resp.status_code != 200:\n                    <IND>raise RuntimeError(\n                        f\"HTTP status code '{resp.status_code}' for GET against: {redirect_url_obj.geturl()}\"\n                    )\n\n                # set the login url\n                <DED>auth_session[\"dex_login_url\"] = resp.url\n\n            ################\n            # Attempt Dex Login\n            ################\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]