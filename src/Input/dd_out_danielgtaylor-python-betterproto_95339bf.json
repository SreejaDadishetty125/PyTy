[
  {
    "project": "danielgtaylor/python-betterproto",
    "commit": "95339bf74d774bb57a55a73167d94bd5e44df439",
    "filename": "src/betterproto/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/danielgtaylor-python-betterproto/src/betterproto/__init__.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "src/betterproto/__init__.py:275:12 Incompatible return type [7]: Expected `Enum` but got `enum.Enum`.",
    "message": " Expected `Enum` but got `enum.Enum`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 275,
    "warning_line": "            return cls._member_map_[name]",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        try:\n            return cls._member_map_[name]\n        except KeyError as e:\n",
        "source_code_len": 85,
        "target_code": "        try:\n            return cls._member_map_[name]  # type: ignore\n        except KeyError as e:\n",
        "target_code_len": 101,
        "diff_format": "@@ -274,3 +275,3 @@\n         try:\n-            return cls._member_map_[name]\n+            return cls._member_map_[name]  # type: ignore\n         except KeyError as e:\n",
        "source_code_with_indent": "        try:\n            <IND>return cls._member_map_[name]\n        <DED>except KeyError as e:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        try:\n            <IND>return cls._member_map_[name]  # type: ignore\n        <DED>except KeyError as e:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "danielgtaylor/python-betterproto",
    "commit": "95339bf74d774bb57a55a73167d94bd5e44df439",
    "filename": "src/betterproto/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/danielgtaylor-python-betterproto/src/betterproto/__init__.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/betterproto/__init__.py:520:54 Incompatible parameter type [6]: Expected `List[dataclasses.Field[typing.Any]]` for 2nd positional only parameter to call `ProtoClassMetadata._get_default_gen` but got `typing.Tuple[dataclasses.Field[typing.Any], ...]`.",
    "message": " Expected `List[dataclasses.Field[typing.Any]]` for 2nd positional only parameter to call `ProtoClassMetadata._get_default_gen` but got `typing.Tuple[dataclasses.Field[typing.Any], ...]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 520,
    "warning_line": "        self.default_gen = self._get_default_gen(cls, fields)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    Generator,\n    List,\n",
        "source_code_len": 25,
        "target_code": "    Generator,\n    Iterable,\n    List,\n",
        "target_code_len": 39,
        "diff_format": "@@ -17,2 +17,3 @@\n     Generator,\n+    Iterable,\n     List,\n",
        "source_code_with_indent": "    Generator,\n    List,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    Generator,\n    Iterable,\n    List,\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def _get_default_gen(\n        cls: Type[\"Message\"], fields: List[dataclasses.Field]\n    ) -> Dict[str, Callable[[], Any]]:\n",
        "source_code_len": 127,
        "target_code": "    def _get_default_gen(\n        cls: Type[\"Message\"], fields: Iterable[dataclasses.Field]\n    ) -> Dict[str, Callable[[], Any]]:\n",
        "target_code_len": 131,
        "diff_format": "@@ -524,3 +525,3 @@\n     def _get_default_gen(\n-        cls: Type[\"Message\"], fields: List[dataclasses.Field]\n+        cls: Type[\"Message\"], fields: Iterable[dataclasses.Field]\n     ) -> Dict[str, Callable[[], Any]]:\n",
        "source_code_with_indent": "    def _get_default_gen(\n        cls: Type[\"Message\"], fields: List[dataclasses.Field]\n    ) -> Dict[str, Callable[[], Any]]:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def _get_default_gen(\n        cls: Type[\"Message\"], fields: Iterable[dataclasses.Field]\n    ) -> Dict[str, Callable[[], Any]]:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "danielgtaylor/python-betterproto",
    "commit": "95339bf74d774bb57a55a73167d94bd5e44df439",
    "filename": "src/betterproto/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/danielgtaylor-python-betterproto/src/betterproto/__init__.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/betterproto/__init__.py:521:56 Incompatible parameter type [6]: Expected `List[dataclasses.Field[typing.Any]]` for 2nd positional only parameter to call `ProtoClassMetadata._get_cls_by_field` but got `typing.Tuple[dataclasses.Field[typing.Any], ...]`.",
    "message": " Expected `List[dataclasses.Field[typing.Any]]` for 2nd positional only parameter to call `ProtoClassMetadata._get_cls_by_field` but got `typing.Tuple[dataclasses.Field[typing.Any], ...]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 521,
    "warning_line": "        self.cls_by_field = self._get_cls_by_field(cls, fields)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    Generator,\n    List,\n",
        "source_code_len": 25,
        "target_code": "    Generator,\n    Iterable,\n    List,\n",
        "target_code_len": 39,
        "diff_format": "@@ -17,2 +17,3 @@\n     Generator,\n+    Iterable,\n     List,\n",
        "source_code_with_indent": "    Generator,\n    List,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    Generator,\n    Iterable,\n    List,\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def _get_cls_by_field(\n        cls: Type[\"Message\"], fields: List[dataclasses.Field]\n    ) -> Dict[str, Type]:\n",
        "source_code_len": 115,
        "target_code": "    def _get_cls_by_field(\n        cls: Type[\"Message\"], fields: Iterable[dataclasses.Field]\n    ) -> Dict[str, Type]:\n",
        "target_code_len": 119,
        "diff_format": "@@ -530,3 +531,3 @@\n     def _get_cls_by_field(\n-        cls: Type[\"Message\"], fields: List[dataclasses.Field]\n+        cls: Type[\"Message\"], fields: Iterable[dataclasses.Field]\n     ) -> Dict[str, Type]:\n",
        "source_code_with_indent": "    def _get_cls_by_field(\n        cls: Type[\"Message\"], fields: List[dataclasses.Field]\n    ) -> Dict[str, Type]:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def _get_cls_by_field(\n        cls: Type[\"Message\"], fields: Iterable[dataclasses.Field]\n    ) -> Dict[str, Type]:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "danielgtaylor/python-betterproto",
    "commit": "95339bf74d774bb57a55a73167d94bd5e44df439",
    "filename": "src/betterproto/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/danielgtaylor-python-betterproto/src/betterproto/__init__.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/betterproto/__init__.py:766:20 Incompatible parameter type [6]: Expected `bool` for 4th parameter `serialize_empty` to call `_serialize_single` but got `Optional[bool]`.",
    "message": " Expected `bool` for 4th parameter `serialize_empty` to call `_serialize_single` but got `Optional[bool]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 766,
    "warning_line": "                    serialize_empty=serialize_empty or selected_in_group,",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                    value,\n                    serialize_empty=serialize_empty or selected_in_group,\n                    wraps=meta.wraps or \"\",\n",
        "source_code_len": 145,
        "target_code": "                    value,\n                    serialize_empty=serialize_empty or bool(selected_in_group),\n                    wraps=meta.wraps or \"\",\n",
        "target_code_len": 151,
        "diff_format": "@@ -765,3 +766,3 @@\n                     value,\n-                    serialize_empty=serialize_empty or selected_in_group,\n+                    serialize_empty=serialize_empty or bool(selected_in_group),\n                     wraps=meta.wraps or \"\",\n",
        "source_code_with_indent": "                    value,\n                    serialize_empty=serialize_empty or selected_in_group,\n                    wraps=meta.wraps or \"\",\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                    value,\n                    serialize_empty=serialize_empty or bool(selected_in_group),\n                    wraps=meta.wraps or \"\",\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "danielgtaylor/python-betterproto",
    "commit": "95339bf74d774bb57a55a73167d94bd5e44df439",
    "filename": "src/betterproto/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/danielgtaylor-python-betterproto/src/betterproto/__init__.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/betterproto/__init__.py:1304:4 Inconsistent override [14]: `src.betterproto._WrappedMessage.to_dict` overrides method defined in `Message` inconsistently. Could not find parameter `include_default_values` in overriding signature.",
    "message": " `src.betterproto._WrappedMessage.to_dict` overrides method defined in `Message` inconsistently. Could not find parameter `include_default_values` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 1304,
    "warning_line": "    def to_dict(self, casing: Casing = Casing.CAMEL) -> Any:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "\nclass _WrappedMessage(Message):\n    \"\"\"\n    Google protobuf wrapper types base class. JSON representation is just the\n    value itself.\n    \"\"\"\n\n    value: Any\n\n    def to_dict(self, casing: Casing = Casing.CAMEL) -> Any:\n        return self.value\n\n    def from_dict(self: T, value: Any) -> T:\n        if value is not None:\n            self.value = value\n        return self\n\n\ndef _get_wrapper(proto_type: str) -> Type:\n",
        "source_code_len": 421,
        "target_code": "\ndef _get_wrapper(proto_type: str) -> Type:\n",
        "target_code_len": 44,
        "diff_format": "@@ -1295,19 +1296,2 @@\n \n-class _WrappedMessage(Message):\n-    \"\"\"\n-    Google protobuf wrapper types base class. JSON representation is just the\n-    value itself.\n-    \"\"\"\n-\n-    value: Any\n-\n-    def to_dict(self, casing: Casing = Casing.CAMEL) -> Any:\n-        return self.value\n-\n-    def from_dict(self: T, value: Any) -> T:\n-        if value is not None:\n-            self.value = value\n-        return self\n-\n-\n def _get_wrapper(proto_type: str) -> Type:\n",
        "source_code_with_indent": "\n<DED><DED>class _WrappedMessage(Message):\n    <IND>\"\"\"\n    Google protobuf wrapper types base class. JSON representation is just the\n    value itself.\n    \"\"\"\n\n    value: Any\n\n    def to_dict(self, casing: Casing = Casing.CAMEL) -> Any:\n        <IND>return self.value\n\n    <DED>def from_dict(self: T, value: Any) -> T:\n        <IND>if value is not None:\n            <IND>self.value = value\n        <DED>return self\n\n\n<DED><DED>def _get_wrapper(proto_type: str) -> Type:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED><DED>def _get_wrapper(proto_type: str) -> Type:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "danielgtaylor/python-betterproto",
    "commit": "95339bf74d774bb57a55a73167d94bd5e44df439",
    "filename": "src/betterproto/grpc/util/async_channel.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/danielgtaylor-python-betterproto/src/betterproto/grpc/util/async_channel.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/betterproto/grpc/util/async_channel.py:90:12 Incompatible return type [7]: Expected `Variable[T]` but got `Union[object, Variable[T]]`.",
    "message": " Expected `Variable[T]` but got `Union[object, Variable[T]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 90,
    "warning_line": "            return result",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def __init__(self, *, buffer_limit: int = 0, close: bool = False):\n        self._queue: asyncio.Queue[Union[T, object]] = asyncio.Queue(buffer_limit)\n        self._closed = False\n",
        "source_code_len": 183,
        "target_code": "    def __init__(self, *, buffer_limit: int = 0, close: bool = False):\n        self._queue: asyncio.Queue[T] = asyncio.Queue(buffer_limit)\n        self._closed = False\n",
        "target_code_len": 168,
        "diff_format": "@@ -72,3 +72,3 @@\n     def __init__(self, *, buffer_limit: int = 0, close: bool = False):\n-        self._queue: asyncio.Queue[Union[T, object]] = asyncio.Queue(buffer_limit)\n+        self._queue: asyncio.Queue[T] = asyncio.Queue(buffer_limit)\n         self._closed = False\n",
        "source_code_with_indent": "    def __init__(self, *, buffer_limit: int = 0, close: bool = False):\n        <IND>self._queue: asyncio.Queue[Union[T, object]] = asyncio.Queue(buffer_limit)\n        self._closed = False\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def __init__(self, *, buffer_limit: int = 0, close: bool = False):\n        <IND>self._queue: asyncio.Queue[T] = asyncio.Queue(buffer_limit)\n        self._closed = False\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "danielgtaylor/python-betterproto",
    "commit": "95339bf74d774bb57a55a73167d94bd5e44df439",
    "filename": "src/betterproto/grpc/util/async_channel.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/danielgtaylor-python-betterproto/src/betterproto/grpc/util/async_channel.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/betterproto/grpc/util/async_channel.py:161:12 Incompatible return type [7]: Expected `Optional[Variable[T]]` but got `Union[object, Variable[T]]`.",
    "message": " Expected `Optional[Variable[T]]` but got `Union[object, Variable[T]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 161,
    "warning_line": "            return result",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def __init__(self, *, buffer_limit: int = 0, close: bool = False):\n        self._queue: asyncio.Queue[Union[T, object]] = asyncio.Queue(buffer_limit)\n        self._closed = False\n",
        "source_code_len": 183,
        "target_code": "    def __init__(self, *, buffer_limit: int = 0, close: bool = False):\n        self._queue: asyncio.Queue[T] = asyncio.Queue(buffer_limit)\n        self._closed = False\n",
        "target_code_len": 168,
        "diff_format": "@@ -72,3 +72,3 @@\n     def __init__(self, *, buffer_limit: int = 0, close: bool = False):\n-        self._queue: asyncio.Queue[Union[T, object]] = asyncio.Queue(buffer_limit)\n+        self._queue: asyncio.Queue[T] = asyncio.Queue(buffer_limit)\n         self._closed = False\n",
        "source_code_with_indent": "    def __init__(self, *, buffer_limit: int = 0, close: bool = False):\n        <IND>self._queue: asyncio.Queue[Union[T, object]] = asyncio.Queue(buffer_limit)\n        self._closed = False\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def __init__(self, *, buffer_limit: int = 0, close: bool = False):\n        <IND>self._queue: asyncio.Queue[T] = asyncio.Queue(buffer_limit)\n        self._closed = False\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "danielgtaylor/python-betterproto",
    "commit": "95339bf74d774bb57a55a73167d94bd5e44df439",
    "filename": "src/betterproto/plugin/parser.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/danielgtaylor-python-betterproto/src/betterproto/plugin/parser.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/betterproto/plugin/parser.py:108:18 Unbound name [10]: Name `Set` is used but not defined in the current scope.",
    "message": " Name `Set` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 108,
    "warning_line": "    output_paths: Set[pathlib.Path] = set()",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import sys\nfrom typing import Iterator, List, Tuple, TYPE_CHECKING, Union\nfrom .compiler import outputfile_compiler\n",
        "source_code_len": 116,
        "target_code": "import sys\nfrom typing import Iterator, List, Set, Tuple, TYPE_CHECKING, Union\nfrom .compiler import outputfile_compiler\n",
        "target_code_len": 121,
        "diff_format": "@@ -15,3 +15,3 @@\n import sys\n-from typing import Iterator, List, Tuple, TYPE_CHECKING, Union\n+from typing import Iterator, List, Set, Tuple, TYPE_CHECKING, Union\n from .compiler import outputfile_compiler\n",
        "source_code_with_indent": "import sys\nfrom typing import Iterator, List, Tuple, TYPE_CHECKING, Union\nfrom .compiler import outputfile_compiler\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import sys\nfrom typing import Iterator, List, Set, Tuple, TYPE_CHECKING, Union\nfrom .compiler import outputfile_compiler\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]