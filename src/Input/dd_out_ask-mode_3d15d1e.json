[
  {
    "project": "ask/mode",
    "commit": "3d15d1efcedaf0ea20a185ceae5b97e35ac4bac9",
    "filename": "mode/locals.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ask-mode/mode/locals.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "mode/locals.py:393:8 Incompatible return type [7]: Expected `typing.Tuple[typing.Any, ...]` but got `Union[str, typing.Tuple[typing.Any, ...]]`.",
    "message": " Expected `typing.Tuple[typing.Any, ...]` but got `Union[str, typing.Tuple[typing.Any, ...]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 393,
    "warning_line": "        return self._get_current_object().__reduce__()",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "    def __reduce__(self) -> Tuple:\n        return self._get_current_object().__reduce__()\n\n",
        "source_code_len": 91,
        "target_code": "    def __reduce__(self) -> Tuple:\n        return self._get_current_object().__reduce__()  # type: ignore\n\n",
        "target_code_len": 107,
        "diff_format": "@@ -392,3 +392,3 @@\n     def __reduce__(self) -> Tuple:\n-        return self._get_current_object().__reduce__()\n+        return self._get_current_object().__reduce__()  # type: ignore\n \n",
        "source_code_with_indent": "    <DED>def __reduce__(self) -> Tuple:\n        <IND>return self._get_current_object().__reduce__()\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def __reduce__(self) -> Tuple:\n        <IND>return self._get_current_object().__reduce__()  # type: ignore\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ask/mode",
    "commit": "3d15d1efcedaf0ea20a185ceae5b97e35ac4bac9",
    "filename": "mode/services.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ask-mode/mode/services.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mode/services.py:107:35 Incompatible parameter type [6]: Expected `logging.Logger` for 1st positional only parameter to call `CompositeLogger.__init__` but got `Optional[logging.Logger]`.",
    "message": " Expected `logging.Logger` for 1st positional only parameter to call `CompositeLogger.__init__` but got `Optional[logging.Logger]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 107,
    "warning_line": "        self.log = CompositeLogger(self.logger, formatter=self._format_log)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    #: If not explicitly set this will be based on get_logger(cls.__name__)\n    logger: Optional[logging.Logger] = None\n\n",
        "source_code_len": 121,
        "target_code": "    #: If not explicitly set this will be based on get_logger(cls.__name__)\n    # This is automatically set when class is constructed, and so is only\n    # None on the class, never on an instance. For simplicity we cast\n    # the None to logger.\n    logger: logging.Logger = cast(logging.Logger, None)\n\n",
        "target_code_len": 303,
        "diff_format": "@@ -91,3 +91,6 @@\n     #: If not explicitly set this will be based on get_logger(cls.__name__)\n-    logger: Optional[logging.Logger] = None\n+    # This is automatically set when class is constructed, and so is only\n+    # None on the class, never on an instance. For simplicity we cast\n+    # the None to logger.\n+    logger: logging.Logger = cast(logging.Logger, None)\n \n",
        "source_code_with_indent": "    #: If not explicitly set this will be based on get_logger(cls.__name__)\n    logger: Optional[logging.Logger] = None\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    #: If not explicitly set this will be based on get_logger(cls.__name__)\n    # This is automatically set when class is constructed, and so is only\n    # None on the class, never on an instance. For simplicity we cast\n    # the None to logger.\n    logger: logging.Logger = cast(logging.Logger, None)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ask/mode",
    "commit": "3d15d1efcedaf0ea20a185ceae5b97e35ac4bac9",
    "filename": "mode/services.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ask-mode/mode/services.py",
    "file_hunks_size": 8,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mode/services.py:716:12 Incompatible parameter type [6]: Expected `Optional[float]` for 3rd parameter `timeout` to call `asyncio.tasks.wait` but got `Union[datetime.timedelta, float, str]`.",
    "message": " Expected `Optional[float]` for 3rd parameter `timeout` to call `asyncio.tasks.wait` but got `Union[datetime.timedelta, float, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 716,
    "warning_line": "            timeout=timeout,"
  },
  {
    "project": "ask/mode",
    "commit": "3d15d1efcedaf0ea20a185ceae5b97e35ac4bac9",
    "filename": "mode/services.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ask-mode/mode/services.py",
    "file_hunks_size": 8,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mode/services.py:763:42 Incompatible parameter type [6]: Expected `Optional[Type[BaseException]]` for 1st positional only parameter to call `contextlib.ExitStack.__exit__` but got `Union[None, Type[BaseException], BaseException, TracebackType]`.",
    "message": " Expected `Optional[Type[BaseException]]` for 1st positional only parameter to call `contextlib.ExitStack.__exit__` but got `Union[None, Type[BaseException], BaseException, TracebackType]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 763,
    "warning_line": "                self.exit_stack.__exit__(*sys.exc_info())"
  },
  {
    "project": "ask/mode",
    "commit": "3d15d1efcedaf0ea20a185ceae5b97e35ac4bac9",
    "filename": "mode/services.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ask-mode/mode/services.py",
    "file_hunks_size": 8,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mode/services.py:763:42 Incompatible parameter type [6]: Expected `Optional[BaseException]` for 1st positional only parameter to call `contextlib.ExitStack.__exit__` but got `Union[None, Type[BaseException], BaseException, TracebackType]`.",
    "message": " Expected `Optional[BaseException]` for 1st positional only parameter to call `contextlib.ExitStack.__exit__` but got `Union[None, Type[BaseException], BaseException, TracebackType]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 763,
    "warning_line": "                self.exit_stack.__exit__(*sys.exc_info())"
  },
  {
    "project": "ask/mode",
    "commit": "3d15d1efcedaf0ea20a185ceae5b97e35ac4bac9",
    "filename": "mode/services.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ask-mode/mode/services.py",
    "file_hunks_size": 8,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mode/services.py:763:42 Incompatible parameter type [6]: Expected `Optional[TracebackType]` for 1st positional only parameter to call `contextlib.ExitStack.__exit__` but got `Union[None, Type[BaseException], BaseException, TracebackType]`.",
    "message": " Expected `Optional[TracebackType]` for 1st positional only parameter to call `contextlib.ExitStack.__exit__` but got `Union[None, Type[BaseException], BaseException, TracebackType]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 763,
    "warning_line": "                self.exit_stack.__exit__(*sys.exc_info())"
  },
  {
    "project": "ask/mode",
    "commit": "3d15d1efcedaf0ea20a185ceae5b97e35ac4bac9",
    "filename": "mode/timers.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ask-mode/mode/timers.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mode/timers.py:69:11 Unsupported operand [58]: `>=` is not supported for operand types `typing.Union[datetime.timedelta, float, str]` and `float`.",
    "message": " `>=` is not supported for operand types `typing.Union[datetime.timedelta, float, str]` and `float`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 69,
    "warning_line": "        if interval >= 1.0 and abs_drift >= max_drift:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        if interval >= 1.0 and abs_drift >= max_drift:\n            if drift < 0:\n",
        "source_code_len": 82,
        "target_code": "\n        if interval_s >= 1.0 and abs_drift >= max_drift:\n            if drift < 0:\n",
        "target_code_len": 84,
        "diff_format": "@@ -68,3 +68,3 @@\n \n-        if interval >= 1.0 and abs_drift >= max_drift:\n+        if interval_s >= 1.0 and abs_drift >= max_drift:\n             if drift < 0:\n",
        "source_code_with_indent": "\n        <DED>if interval >= 1.0 and abs_drift >= max_drift:\n            <IND>if drift < 0:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        <DED>if interval_s >= 1.0 and abs_drift >= max_drift:\n            <IND>if drift < 0:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ask/mode",
    "commit": "3d15d1efcedaf0ea20a185ceae5b97e35ac4bac9",
    "filename": "mode/utils/_py37_contextlib.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ask-mode/mode/utils/_py37_contextlib.py",
    "file_hunks_size": 24,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "mode/utils/_py37_contextlib.py:176:37 Incompatible parameter type [6]: Expected `typing.Callable[..., typing.Any]` for 1st positional only parameter to call `_BaseExitStack._push_exit_callback` but got `Union[typing.Callable[..., typing.Any], ContextManager[typing.Any]]`.",
    "message": " Expected `typing.Callable[..., typing.Any]` for 1st positional only parameter to call `_BaseExitStack._push_exit_callback` but got `Union[typing.Callable[..., typing.Any], ContextManager[typing.Any]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 176,
    "warning_line": "            self._push_exit_callback(exit)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        try:\n            exit_method = _cb_type.__exit__\n        except AttributeError:\n            # Not a context manager, so assume it's a callable.\n            self._push_exit_callback(exit)\n        else:\n            self._push_cm_exit(exit, exit_method)\n        return exit  # Allow use as a decorator.\n",
        "source_code_len": 308,
        "target_code": "        try:\n            exit_method = _cb_type.__exit__  # type: ignore\n        except AttributeError:\n            # Not a context manager, so assume it's a callable.\n            self._push_exit_callback(exit)  # type: ignore\n        else:\n            self._push_cm_exit(exit, exit_method)  # type: ignore\n        return exit  # Allow use as a decorator.\n",
        "target_code_len": 356,
        "diff_format": "@@ -172,8 +178,8 @@\n         try:\n-            exit_method = _cb_type.__exit__\n+            exit_method = _cb_type.__exit__  # type: ignore\n         except AttributeError:\n             # Not a context manager, so assume it's a callable.\n-            self._push_exit_callback(exit)\n+            self._push_exit_callback(exit)  # type: ignore\n         else:\n-            self._push_cm_exit(exit, exit_method)\n+            self._push_cm_exit(exit, exit_method)  # type: ignore\n         return exit  # Allow use as a decorator.\n",
        "source_code_with_indent": "        try:\n            <IND>exit_method = _cb_type.__exit__\n        <DED>except AttributeError:\n            # Not a context manager, so assume it's a callable.\n            <IND>self._push_exit_callback(exit)\n        <DED>else:\n            <IND>self._push_cm_exit(exit, exit_method)\n        <DED>return exit  # Allow use as a decorator.\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        try:\n            <IND>exit_method = _cb_type.__exit__  # type: ignore\n        <DED>except AttributeError:\n            # Not a context manager, so assume it's a callable.\n            <IND>self._push_exit_callback(exit)  # type: ignore\n        <DED>else:\n            <IND>self._push_cm_exit(exit, exit_method)  # type: ignore\n        <DED>return exit  # Allow use as a decorator.\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ask/mode",
    "commit": "3d15d1efcedaf0ea20a185ceae5b97e35ac4bac9",
    "filename": "mode/utils/_py37_contextlib.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ask-mode/mode/utils/_py37_contextlib.py",
    "file_hunks_size": 24,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "mode/utils/_py37_contextlib.py:178:31 Incompatible parameter type [6]: Expected `ContextManager[typing.Any]` for 1st positional only parameter to call `_BaseExitStack._push_cm_exit` but got `Union[typing.Callable[..., typing.Any], ContextManager[typing.Any]]`.",
    "message": " Expected `ContextManager[typing.Any]` for 1st positional only parameter to call `_BaseExitStack._push_cm_exit` but got `Union[typing.Callable[..., typing.Any], ContextManager[typing.Any]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 178,
    "warning_line": "            self._push_cm_exit(exit, exit_method)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        try:\n            exit_method = _cb_type.__exit__\n        except AttributeError:\n            # Not a context manager, so assume it's a callable.\n            self._push_exit_callback(exit)\n        else:\n            self._push_cm_exit(exit, exit_method)\n        return exit  # Allow use as a decorator.\n",
        "source_code_len": 308,
        "target_code": "        try:\n            exit_method = _cb_type.__exit__  # type: ignore\n        except AttributeError:\n            # Not a context manager, so assume it's a callable.\n            self._push_exit_callback(exit)  # type: ignore\n        else:\n            self._push_cm_exit(exit, exit_method)  # type: ignore\n        return exit  # Allow use as a decorator.\n",
        "target_code_len": 356,
        "diff_format": "@@ -172,8 +178,8 @@\n         try:\n-            exit_method = _cb_type.__exit__\n+            exit_method = _cb_type.__exit__  # type: ignore\n         except AttributeError:\n             # Not a context manager, so assume it's a callable.\n-            self._push_exit_callback(exit)\n+            self._push_exit_callback(exit)  # type: ignore\n         else:\n-            self._push_cm_exit(exit, exit_method)\n+            self._push_cm_exit(exit, exit_method)  # type: ignore\n         return exit  # Allow use as a decorator.\n",
        "source_code_with_indent": "        try:\n            <IND>exit_method = _cb_type.__exit__\n        <DED>except AttributeError:\n            # Not a context manager, so assume it's a callable.\n            <IND>self._push_exit_callback(exit)\n        <DED>else:\n            <IND>self._push_cm_exit(exit, exit_method)\n        <DED>return exit  # Allow use as a decorator.\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        try:\n            <IND>exit_method = _cb_type.__exit__  # type: ignore\n        <DED>except AttributeError:\n            # Not a context manager, so assume it's a callable.\n            <IND>self._push_exit_callback(exit)  # type: ignore\n        <DED>else:\n            <IND>self._push_cm_exit(exit, exit_method)  # type: ignore\n        <DED>return exit  # Allow use as a decorator.\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ask/mode",
    "commit": "3d15d1efcedaf0ea20a185ceae5b97e35ac4bac9",
    "filename": "mode/utils/_py37_contextlib.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ask-mode/mode/utils/_py37_contextlib.py",
    "file_hunks_size": 24,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mode/utils/_py37_contextlib.py:217:37 Incompatible parameter type [6]: Expected `typing.Callable[..., typing.Any]` for 1st positional only parameter to call `deque.append` but got `Tuple[bool, typing.Callable[..., typing.Any]]`.",
    "message": " Expected `typing.Callable[..., typing.Any]` for 1st positional only parameter to call `deque.append` but got `Tuple[bool, typing.Callable[..., typing.Any]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 217,
    "warning_line": "        self._exit_callbacks.append((is_sync, callback))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    _exit_callbacks: Deque[Callable]\n\n",
        "source_code_len": 39,
        "target_code": "\n    _exit_callbacks: Deque[Tuple[bool, Callable]]\n\n",
        "target_code_len": 52,
        "diff_format": "@@ -134,3 +136,3 @@\n \n-    _exit_callbacks: Deque[Callable]\n+    _exit_callbacks: Deque[Tuple[bool, Callable]]\n \n",
        "source_code_with_indent": "\n    _exit_callbacks: Deque[Callable]\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    _exit_callbacks: Deque[Tuple[bool, Callable]]\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ask/mode",
    "commit": "3d15d1efcedaf0ea20a185ceae5b97e35ac4bac9",
    "filename": "mode/utils/_py37_contextlib.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ask-mode/mode/utils/_py37_contextlib.py",
    "file_hunks_size": 24,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "mode/utils/_py37_contextlib.py:272:39 Incompatible parameter type [6]: Expected `BaseException` for 1st positional only parameter to anonymous call but got `typing.Optional[BaseException]`.",
    "message": " Expected `BaseException` for 1st positional only parameter to anonymous call but got `typing.Optional[BaseException]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 272,
    "warning_line": "                _fix_exception_context(new_exc_details[1], exc_details[1])",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "                # simulate the stack of exceptions by setting the context\n                _fix_exception_context(new_exc_details[1], exc_details[1])\n                pending_raise = True\n",
        "source_code_len": 186,
        "target_code": "                # simulate the stack of exceptions by setting the context\n                _fix_exception_context(\n                    new_exc_details[1],  # type: ignore\n                    exc_details[1])\n                pending_raise = True\n",
        "target_code_len": 243,
        "diff_format": "@@ -271,3 +277,5 @@\n                 # simulate the stack of exceptions by setting the context\n-                _fix_exception_context(new_exc_details[1], exc_details[1])\n+                _fix_exception_context(\n+                    new_exc_details[1],  # type: ignore\n+                    exc_details[1])\n                 pending_raise = True\n",
        "source_code_with_indent": "                # simulate the stack of exceptions by setting the context\n                _fix_exception_context(new_exc_details[1], exc_details[1])\n                pending_raise = True\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                # simulate the stack of exceptions by setting the context\n                _fix_exception_context(\n                    new_exc_details[1],  # type: ignore\n                    exc_details[1])\n                pending_raise = True\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ask/mode",
    "commit": "3d15d1efcedaf0ea20a185ceae5b97e35ac4bac9",
    "filename": "mode/utils/_py37_contextlib.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ask-mode/mode/utils/_py37_contextlib.py",
    "file_hunks_size": 24,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "mode/utils/_py37_contextlib.py:284:8 Incompatible return type [7]: Expected `None` but got `bool`.",
    "message": " Expected `None` but got `bool`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 284,
    "warning_line": "        return received_exc and suppressed_exc",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "                raise\n        return received_exc and suppressed_exc\n\n",
        "source_code_len": 70,
        "target_code": "                raise\n        return received_exc and suppressed_exc  # type: ignore\n\n",
        "target_code_len": 86,
        "diff_format": "@@ -283,3 +291,3 @@\n                 raise\n-        return received_exc and suppressed_exc\n+        return received_exc and suppressed_exc  # type: ignore\n \n",
        "source_code_with_indent": "                raise\n        <DED><DED>return received_exc and suppressed_exc\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                raise\n        <DED><DED>return received_exc and suppressed_exc  # type: ignore\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ask/mode",
    "commit": "3d15d1efcedaf0ea20a185ceae5b97e35ac4bac9",
    "filename": "mode/utils/_py37_contextlib.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ask-mode/mode/utils/_py37_contextlib.py",
    "file_hunks_size": 24,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "mode/utils/_py37_contextlib.py:346:37 Incompatible parameter type [6]: Expected `typing.Callable[..., typing.Any]` for 1st positional only parameter to call `_BaseExitStack._push_exit_callback` but got `Union[typing.Callable[..., Awaitable[typing.Any]], typing.AsyncContextManager[typing.Any]]`.",
    "message": " Expected `typing.Callable[..., typing.Any]` for 1st positional only parameter to call `_BaseExitStack._push_exit_callback` but got `Union[typing.Callable[..., Awaitable[typing.Any]], typing.AsyncContextManager[typing.Any]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 346,
    "warning_line": "            self._push_exit_callback(exit, False)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        try:\n            exit_method = _cb_type.__aexit__\n        except AttributeError:\n            # Not an async context manager, so assume it's a coroutine function\n            self._push_exit_callback(exit, False)\n        else:\n            self._push_async_cm_exit(exit, exit_method)\n        return exit  # Allow use as a decorator\n",
        "source_code_len": 337,
        "target_code": "        try:\n            exit_method = _cb_type.__aexit__  # type: ignore\n        except AttributeError:\n            # Not an async context manager, so assume it's a coroutine function\n            self._push_exit_callback(exit, False)  # type: ignore\n        else:\n            self._push_async_cm_exit(exit, exit_method)  # type: ignore\n        return exit  # Allow use as a decorator\n",
        "target_code_len": 385,
        "diff_format": "@@ -342,8 +354,8 @@\n         try:\n-            exit_method = _cb_type.__aexit__\n+            exit_method = _cb_type.__aexit__  # type: ignore\n         except AttributeError:\n             # Not an async context manager, so assume it's a coroutine function\n-            self._push_exit_callback(exit, False)\n+            self._push_exit_callback(exit, False)  # type: ignore\n         else:\n-            self._push_async_cm_exit(exit, exit_method)\n+            self._push_async_cm_exit(exit, exit_method)  # type: ignore\n         return exit  # Allow use as a decorator\n",
        "source_code_with_indent": "        try:\n            <IND>exit_method = _cb_type.__aexit__\n        <DED>except AttributeError:\n            # Not an async context manager, so assume it's a coroutine function\n            <IND>self._push_exit_callback(exit, False)\n        <DED>else:\n            <IND>self._push_async_cm_exit(exit, exit_method)\n        <DED>return exit  # Allow use as a decorator\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        try:\n            <IND>exit_method = _cb_type.__aexit__  # type: ignore\n        <DED>except AttributeError:\n            # Not an async context manager, so assume it's a coroutine function\n            <IND>self._push_exit_callback(exit, False)  # type: ignore\n        <DED>else:\n            <IND>self._push_async_cm_exit(exit, exit_method)  # type: ignore\n        <DED>return exit  # Allow use as a decorator\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ask/mode",
    "commit": "3d15d1efcedaf0ea20a185ceae5b97e35ac4bac9",
    "filename": "mode/utils/_py37_contextlib.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ask-mode/mode/utils/_py37_contextlib.py",
    "file_hunks_size": 24,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "mode/utils/_py37_contextlib.py:348:37 Incompatible parameter type [6]: Expected `typing.AsyncContextManager[typing.Any]` for 1st positional only parameter to call `AsyncExitStack._push_async_cm_exit` but got `Union[typing.Callable[..., Awaitable[typing.Any]], typing.AsyncContextManager[typing.Any]]`.",
    "message": " Expected `typing.AsyncContextManager[typing.Any]` for 1st positional only parameter to call `AsyncExitStack._push_async_cm_exit` but got `Union[typing.Callable[..., Awaitable[typing.Any]], typing.AsyncContextManager[typing.Any]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 348,
    "warning_line": "            self._push_async_cm_exit(exit, exit_method)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        try:\n            exit_method = _cb_type.__aexit__\n        except AttributeError:\n            # Not an async context manager, so assume it's a coroutine function\n            self._push_exit_callback(exit, False)\n        else:\n            self._push_async_cm_exit(exit, exit_method)\n        return exit  # Allow use as a decorator\n",
        "source_code_len": 337,
        "target_code": "        try:\n            exit_method = _cb_type.__aexit__  # type: ignore\n        except AttributeError:\n            # Not an async context manager, so assume it's a coroutine function\n            self._push_exit_callback(exit, False)  # type: ignore\n        else:\n            self._push_async_cm_exit(exit, exit_method)  # type: ignore\n        return exit  # Allow use as a decorator\n",
        "target_code_len": 385,
        "diff_format": "@@ -342,8 +354,8 @@\n         try:\n-            exit_method = _cb_type.__aexit__\n+            exit_method = _cb_type.__aexit__  # type: ignore\n         except AttributeError:\n             # Not an async context manager, so assume it's a coroutine function\n-            self._push_exit_callback(exit, False)\n+            self._push_exit_callback(exit, False)  # type: ignore\n         else:\n-            self._push_async_cm_exit(exit, exit_method)\n+            self._push_async_cm_exit(exit, exit_method)  # type: ignore\n         return exit  # Allow use as a decorator\n",
        "source_code_with_indent": "        try:\n            <IND>exit_method = _cb_type.__aexit__\n        <DED>except AttributeError:\n            # Not an async context manager, so assume it's a coroutine function\n            <IND>self._push_exit_callback(exit, False)\n        <DED>else:\n            <IND>self._push_async_cm_exit(exit, exit_method)\n        <DED>return exit  # Allow use as a decorator\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        try:\n            <IND>exit_method = _cb_type.__aexit__  # type: ignore\n        <DED>except AttributeError:\n            # Not an async context manager, so assume it's a coroutine function\n            <IND>self._push_exit_callback(exit, False)  # type: ignore\n        <DED>else:\n            <IND>self._push_async_cm_exit(exit, exit_method)  # type: ignore\n        <DED>return exit  # Allow use as a decorator\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ask/mode",
    "commit": "3d15d1efcedaf0ea20a185ceae5b97e35ac4bac9",
    "filename": "mode/utils/_py37_contextlib.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ask-mode/mode/utils/_py37_contextlib.py",
    "file_hunks_size": 24,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "mode/utils/_py37_contextlib.py:421:39 Incompatible parameter type [6]: Expected `BaseException` for 1st positional only parameter to anonymous call but got `typing.Optional[BaseException]`.",
    "message": " Expected `BaseException` for 1st positional only parameter to anonymous call but got `typing.Optional[BaseException]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 421,
    "warning_line": "                _fix_exception_context(new_exc_details[1], exc_details[1])",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "                # simulate the stack of exceptions by setting the context\n                _fix_exception_context(new_exc_details[1], exc_details[1])\n                pending_raise = True\n",
        "source_code_len": 186,
        "target_code": "                # simulate the stack of exceptions by setting the context\n                _fix_exception_context(\n                    new_exc_details[1],  # type: ignore\n                    exc_details[1])\n                pending_raise = True\n",
        "target_code_len": 243,
        "diff_format": "@@ -420,3 +432,5 @@\n                 # simulate the stack of exceptions by setting the context\n-                _fix_exception_context(new_exc_details[1], exc_details[1])\n+                _fix_exception_context(\n+                    new_exc_details[1],  # type: ignore\n+                    exc_details[1])\n                 pending_raise = True\n",
        "source_code_with_indent": "                # simulate the stack of exceptions by setting the context\n                _fix_exception_context(new_exc_details[1], exc_details[1])\n                pending_raise = True\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                # simulate the stack of exceptions by setting the context\n                _fix_exception_context(\n                    new_exc_details[1],  # type: ignore\n                    exc_details[1])\n                pending_raise = True\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ask/mode",
    "commit": "3d15d1efcedaf0ea20a185ceae5b97e35ac4bac9",
    "filename": "mode/utils/futures.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ask-mode/mode/utils/futures.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mode/utils/futures.py:35:4 Incompatible attribute type [8]: Attribute `fut` declared in class `StampedeWrapper` has type `asyncio.futures.Future[typing.Any]` but is used as type `None`.",
    "message": " Attribute `fut` declared in class `StampedeWrapper` has type `asyncio.futures.Future[typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 35,
    "warning_line": "    fut: asyncio.Future = None",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "class StampedeWrapper:\n    fut: asyncio.Future = None\n\n",
        "source_code_len": 55,
        "target_code": "class StampedeWrapper:\n    fut: Optional[asyncio.Future] = None\n\n",
        "target_code_len": 65,
        "diff_format": "@@ -34,3 +35,3 @@\n class StampedeWrapper:\n-    fut: asyncio.Future = None\n+    fut: Optional[asyncio.Future] = None\n \n",
        "source_code_with_indent": "class StampedeWrapper:\n    <IND>fut: asyncio.Future = None\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "class StampedeWrapper:\n    <IND>fut: Optional[asyncio.Future] = None\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ask/mode",
    "commit": "3d15d1efcedaf0ea20a185ceae5b97e35ac4bac9",
    "filename": "mode/utils/futures.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ask-mode/mode/utils/futures.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mode/utils/futures.py:62:16 Incompatible attribute type [8]: Attribute `fut` declared in class `StampedeWrapper` has type `asyncio.futures.Future[typing.Any]` but is used as type `None`.",
    "message": " Attribute `fut` declared in class `StampedeWrapper` has type `asyncio.futures.Future[typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 62,
    "warning_line": "                self.fut = None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "class StampedeWrapper:\n    fut: asyncio.Future = None\n\n",
        "source_code_len": 55,
        "target_code": "class StampedeWrapper:\n    fut: Optional[asyncio.Future] = None\n\n",
        "target_code_len": 65,
        "diff_format": "@@ -34,3 +35,3 @@\n class StampedeWrapper:\n-    fut: asyncio.Future = None\n+    fut: Optional[asyncio.Future] = None\n \n",
        "source_code_with_indent": "class StampedeWrapper:\n    <IND>fut: asyncio.Future = None\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "class StampedeWrapper:\n    <IND>fut: Optional[asyncio.Future] = None\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ask/mode",
    "commit": "3d15d1efcedaf0ea20a185ceae5b97e35ac4bac9",
    "filename": "mode/utils/logging.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ask-mode/mode/utils/logging.py",
    "file_hunks_size": 29,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mode/utils/logging.py:332:8 Incompatible variable type [9]: loghandlers is declared to have type `List[logging.StreamHandler[typing.Any]]` but is used as type `None`.",
    "message": " loghandlers is declared to have type `List[logging.StreamHandler[typing.Any]]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 332,
    "warning_line": "        loghandlers: List[logging.StreamHandler] = None,"
  },
  {
    "project": "ask/mode",
    "commit": "3d15d1efcedaf0ea20a185ceae5b97e35ac4bac9",
    "filename": "mode/utils/logging.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ask-mode/mode/utils/logging.py",
    "file_hunks_size": 29,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mode/utils/logging.py:362:19 Incompatible variable type [9]: stream is declared to have type `IO[typing.Any]` but is used as type `None`.",
    "message": " stream is declared to have type `IO[typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 362,
    "warning_line": "                   stream: IO = None,"
  },
  {
    "project": "ask/mode",
    "commit": "3d15d1efcedaf0ea20a185ceae5b97e35ac4bac9",
    "filename": "mode/utils/logging.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ask-mode/mode/utils/logging.py",
    "file_hunks_size": 29,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mode/utils/logging.py:363:19 Incompatible variable type [9]: loghandlers is declared to have type `List[logging.StreamHandler[typing.Any]]` but is used as type `None`.",
    "message": " loghandlers is declared to have type `List[logging.StreamHandler[typing.Any]]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 363,
    "warning_line": "                   loghandlers: List[logging.StreamHandler] = None,"
  },
  {
    "project": "ask/mode",
    "commit": "3d15d1efcedaf0ea20a185ceae5b97e35ac4bac9",
    "filename": "mode/utils/logging.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ask-mode/mode/utils/logging.py",
    "file_hunks_size": 29,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mode/utils/logging.py:417:8 Incompatible attribute type [8]: Attribute `severity` declared in class `Logwrapped` has type `int` but is used as type `Union[int, str]`.",
    "message": " Attribute `severity` declared in class `Logwrapped` has type `int` but is used as type `Union[int, str]`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 417,
    "warning_line": "        self.severity = level_number(severity) if severity else severity",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self.logger = logger\n        self.severity = level_number(severity) if severity else severity\n        self.ident = ident\n",
        "source_code_len": 129,
        "target_code": "        self.logger = logger\n        self.severity = level_number(severity) if severity else logging.WARN\n        self.ident = ident\n",
        "target_code_len": 133,
        "diff_format": "@@ -416,3 +432,3 @@\n         self.logger = logger\n-        self.severity = level_number(severity) if severity else severity\n+        self.severity = level_number(severity) if severity else logging.WARN\n         self.ident = ident\n",
        "source_code_with_indent": "        self.logger = logger\n        self.severity = level_number(severity) if severity else severity\n        self.ident = ident\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self.logger = logger\n        self.severity = level_number(severity) if severity else logging.WARN\n        self.ident = ident\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ask/mode",
    "commit": "3d15d1efcedaf0ea20a185ceae5b97e35ac4bac9",
    "filename": "mode/utils/logging.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ask-mode/mode/utils/logging.py",
    "file_hunks_size": 29,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mode/utils/logging.py:602:23 Incompatible parameter type [6]: Expected `typing.Iterator[Variable[_T]]` for 1st positional only parameter to call `next` but got `Iterable[int]`.",
    "message": " Expected `typing.Iterator[Variable[_T]]` for 1st positional only parameter to call `next` but got `Iterable[int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 602,
    "warning_line": "        self.id = next(self._id_source)"
  },
  {
    "project": "ask/mode",
    "commit": "3d15d1efcedaf0ea20a185ceae5b97e35ac4bac9",
    "filename": "mode/utils/logging.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ask-mode/mode/utils/logging.py",
    "file_hunks_size": 29,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mode/utils/logging.py:606:8 Incompatible attribute type [8]: Attribute `started_at_date` declared in class `flight_recorder` has type `str` but is used as type `None`.",
    "message": " Attribute `started_at_date` declared in class `flight_recorder` has type `str` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 606,
    "warning_line": "        self.started_at_date = None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    loop: asyncio.AbstractEventLoop\n    started_at_date: str\n    enabled_by: Optional[asyncio.Task]\n\n    _fut: asyncio.Future\n    _logs: List[Tuple[int, str, Tuple[Any], Dict[str, Any]]]\n    _default_context: Dict[str, Any]\n",
        "source_code_len": 224,
        "target_code": "    loop: asyncio.AbstractEventLoop\n    started_at_date: Optional[str]\n    enabled_by: Optional[asyncio.Task]\n    extra_context: Dict[str, Any]\n\n    _fut: Optional[asyncio.Future]\n    _logs: List[LogMessage]\n    _default_context: Dict[str, Any]\n",
        "target_code_len": 245,
        "diff_format": "@@ -591,7 +606,8 @@\n     loop: asyncio.AbstractEventLoop\n-    started_at_date: str\n+    started_at_date: Optional[str]\n     enabled_by: Optional[asyncio.Task]\n-\n-    _fut: asyncio.Future\n-    _logs: List[Tuple[int, str, Tuple[Any], Dict[str, Any]]]\n+    extra_context: Dict[str, Any]\n+\n+    _fut: Optional[asyncio.Future]\n+    _logs: List[LogMessage]\n     _default_context: Dict[str, Any]\n",
        "source_code_with_indent": "    loop: asyncio.AbstractEventLoop\n    started_at_date: str\n    enabled_by: Optional[asyncio.Task]\n\n    _fut: asyncio.Future\n    _logs: List[Tuple[int, str, Tuple[Any], Dict[str, Any]]]\n    _default_context: Dict[str, Any]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    loop: asyncio.AbstractEventLoop\n    started_at_date: Optional[str]\n    enabled_by: Optional[asyncio.Task]\n    extra_context: Dict[str, Any]\n\n    _fut: Optional[asyncio.Future]\n    _logs: List[LogMessage]\n    _default_context: Dict[str, Any]\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ask/mode",
    "commit": "3d15d1efcedaf0ea20a185ceae5b97e35ac4bac9",
    "filename": "mode/utils/logging.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ask-mode/mode/utils/logging.py",
    "file_hunks_size": 29,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mode/utils/logging.py:609:8 Incompatible attribute type [8]: Attribute `_fut` declared in class `flight_recorder` has type `asyncio.futures.Future[typing.Any]` but is used as type `None`.",
    "message": " Attribute `_fut` declared in class `flight_recorder` has type `asyncio.futures.Future[typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 609,
    "warning_line": "        self._fut = None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    loop: asyncio.AbstractEventLoop\n    started_at_date: str\n    enabled_by: Optional[asyncio.Task]\n\n    _fut: asyncio.Future\n    _logs: List[Tuple[int, str, Tuple[Any], Dict[str, Any]]]\n    _default_context: Dict[str, Any]\n",
        "source_code_len": 224,
        "target_code": "    loop: asyncio.AbstractEventLoop\n    started_at_date: Optional[str]\n    enabled_by: Optional[asyncio.Task]\n    extra_context: Dict[str, Any]\n\n    _fut: Optional[asyncio.Future]\n    _logs: List[LogMessage]\n    _default_context: Dict[str, Any]\n",
        "target_code_len": 245,
        "diff_format": "@@ -591,7 +606,8 @@\n     loop: asyncio.AbstractEventLoop\n-    started_at_date: str\n+    started_at_date: Optional[str]\n     enabled_by: Optional[asyncio.Task]\n-\n-    _fut: asyncio.Future\n-    _logs: List[Tuple[int, str, Tuple[Any], Dict[str, Any]]]\n+    extra_context: Dict[str, Any]\n+\n+    _fut: Optional[asyncio.Future]\n+    _logs: List[LogMessage]\n     _default_context: Dict[str, Any]\n",
        "source_code_with_indent": "    loop: asyncio.AbstractEventLoop\n    started_at_date: str\n    enabled_by: Optional[asyncio.Task]\n\n    _fut: asyncio.Future\n    _logs: List[Tuple[int, str, Tuple[Any], Dict[str, Any]]]\n    _default_context: Dict[str, Any]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    loop: asyncio.AbstractEventLoop\n    started_at_date: Optional[str]\n    enabled_by: Optional[asyncio.Task]\n    extra_context: Dict[str, Any]\n\n    _fut: Optional[asyncio.Future]\n    _logs: List[LogMessage]\n    _default_context: Dict[str, Any]\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ask/mode",
    "commit": "3d15d1efcedaf0ea20a185ceae5b97e35ac4bac9",
    "filename": "mode/utils/logging.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ask-mode/mode/utils/logging.py",
    "file_hunks_size": 29,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mode/utils/logging.py:640:13 Incompatible attribute type [8]: Attribute `_fut` declared in class `flight_recorder` has type `asyncio.futures.Future[typing.Any]` but is used as type `None`.",
    "message": " Attribute `_fut` declared in class `flight_recorder` has type `asyncio.futures.Future[typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 640,
    "warning_line": "        fut, self._fut = self._fut, None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    loop: asyncio.AbstractEventLoop\n    started_at_date: str\n    enabled_by: Optional[asyncio.Task]\n\n    _fut: asyncio.Future\n    _logs: List[Tuple[int, str, Tuple[Any], Dict[str, Any]]]\n    _default_context: Dict[str, Any]\n",
        "source_code_len": 224,
        "target_code": "    loop: asyncio.AbstractEventLoop\n    started_at_date: Optional[str]\n    enabled_by: Optional[asyncio.Task]\n    extra_context: Dict[str, Any]\n\n    _fut: Optional[asyncio.Future]\n    _logs: List[LogMessage]\n    _default_context: Dict[str, Any]\n",
        "target_code_len": 245,
        "diff_format": "@@ -591,7 +606,8 @@\n     loop: asyncio.AbstractEventLoop\n-    started_at_date: str\n+    started_at_date: Optional[str]\n     enabled_by: Optional[asyncio.Task]\n-\n-    _fut: asyncio.Future\n-    _logs: List[Tuple[int, str, Tuple[Any], Dict[str, Any]]]\n+    extra_context: Dict[str, Any]\n+\n+    _fut: Optional[asyncio.Future]\n+    _logs: List[LogMessage]\n     _default_context: Dict[str, Any]\n",
        "source_code_with_indent": "    loop: asyncio.AbstractEventLoop\n    started_at_date: str\n    enabled_by: Optional[asyncio.Task]\n\n    _fut: asyncio.Future\n    _logs: List[Tuple[int, str, Tuple[Any], Dict[str, Any]]]\n    _default_context: Dict[str, Any]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    loop: asyncio.AbstractEventLoop\n    started_at_date: Optional[str]\n    enabled_by: Optional[asyncio.Task]\n    extra_context: Dict[str, Any]\n\n    _fut: Optional[asyncio.Future]\n    _logs: List[LogMessage]\n    _default_context: Dict[str, Any]\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ask/mode",
    "commit": "3d15d1efcedaf0ea20a185ceae5b97e35ac4bac9",
    "filename": "mode/utils/logging.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ask-mode/mode/utils/logging.py",
    "file_hunks_size": 29,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mode/utils/logging.py:655:26 Incompatible parameter type [6]: Expected `Tuple[int, str, Tuple[typing.Any], Dict[str, typing.Any]]` for 1st positional only parameter to call `list.append` but got `LogMessage`.",
    "message": " Expected `Tuple[int, str, Tuple[typing.Any], Dict[str, typing.Any]]` for 1st positional only parameter to call `list.append` but got `LogMessage`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 655,
    "warning_line": "        self._logs.append(log)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    loop: asyncio.AbstractEventLoop\n    started_at_date: str\n    enabled_by: Optional[asyncio.Task]\n\n    _fut: asyncio.Future\n    _logs: List[Tuple[int, str, Tuple[Any], Dict[str, Any]]]\n    _default_context: Dict[str, Any]\n",
        "source_code_len": 224,
        "target_code": "    loop: asyncio.AbstractEventLoop\n    started_at_date: Optional[str]\n    enabled_by: Optional[asyncio.Task]\n    extra_context: Dict[str, Any]\n\n    _fut: Optional[asyncio.Future]\n    _logs: List[LogMessage]\n    _default_context: Dict[str, Any]\n",
        "target_code_len": 245,
        "diff_format": "@@ -591,7 +606,8 @@\n     loop: asyncio.AbstractEventLoop\n-    started_at_date: str\n+    started_at_date: Optional[str]\n     enabled_by: Optional[asyncio.Task]\n-\n-    _fut: asyncio.Future\n-    _logs: List[Tuple[int, str, Tuple[Any], Dict[str, Any]]]\n+    extra_context: Dict[str, Any]\n+\n+    _fut: Optional[asyncio.Future]\n+    _logs: List[LogMessage]\n     _default_context: Dict[str, Any]\n",
        "source_code_with_indent": "    loop: asyncio.AbstractEventLoop\n    started_at_date: str\n    enabled_by: Optional[asyncio.Task]\n\n    _fut: asyncio.Future\n    _logs: List[Tuple[int, str, Tuple[Any], Dict[str, Any]]]\n    _default_context: Dict[str, Any]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    loop: asyncio.AbstractEventLoop\n    started_at_date: Optional[str]\n    enabled_by: Optional[asyncio.Task]\n    extra_context: Dict[str, Any]\n\n    _fut: Optional[asyncio.Future]\n    _logs: List[LogMessage]\n    _default_context: Dict[str, Any]\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ask/mode",
    "commit": "3d15d1efcedaf0ea20a185ceae5b97e35ac4bac9",
    "filename": "mode/utils/logging.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ask-mode/mode/utils/logging.py",
    "file_hunks_size": 29,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mode/utils/logging.py:746:4 Incompatible attribute type [8]: Attribute `name` declared in class `FileLogProxy` has type `str` but is used as type `None`.",
    "message": " Attribute `name` declared in class `FileLogProxy` has type `str` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 746,
    "warning_line": "    name: str = None"
  },
  {
    "project": "ask/mode",
    "commit": "3d15d1efcedaf0ea20a185ceae5b97e35ac4bac9",
    "filename": "mode/utils/logging.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ask-mode/mode/utils/logging.py",
    "file_hunks_size": 29,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mode/utils/logging.py:775:8 Incompatible attribute type [8]: Attribute `handleError` declared in class `logging.Handler` has type `BoundMethod[typing.Callable(logging.Handler.handleError)[[Named(self, logging.Handler), Named(record, logging.LogRecord)], None], logging.Handler]` but is used as type `BoundMethod[typing.Callable(FileLogProxy._safewrap_handler.WithSafeHandleError.handleError)[[Named(self, FileLogProxy._safewrap_handler.WithSafeHandleError), Named(record, logging.LogRecord)], None], FileLogProxy._safewrap_handler.WithSafeHandleError]`.",
    "message": " Attribute `handleError` declared in class `logging.Handler` has type `BoundMethod[typing.Callable(logging.Handler.handleError)[[Named(self, logging.Handler), Named(record, logging.LogRecord)], None], logging.Handler]` but is used as type `BoundMethod[typing.Callable(FileLogProxy._safewrap_handler.WithSafeHandleError.handleError)[[Named(self, FileLogProxy._safewrap_handler.WithSafeHandleError), Named(record, logging.LogRecord)], None], FileLogProxy._safewrap_handler.WithSafeHandleError]`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 775,
    "warning_line": "        handler.handleError = WithSafeHandleError().handleError"
  },
  {
    "project": "ask/mode",
    "commit": "3d15d1efcedaf0ea20a185ceae5b97e35ac4bac9",
    "filename": "mode/utils/logging.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ask-mode/mode/utils/logging.py",
    "file_hunks_size": 29,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mode/utils/logging.py:809:8 Incompatible variable type [9]: sys.stdout is declared to have type `typing.TextIO` but is used as type `FileLogProxy`.",
    "message": " sys.stdout is declared to have type `typing.TextIO` but is used as type `FileLogProxy`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 809,
    "warning_line": "        sys.stdout = proxy"
  },
  {
    "project": "ask/mode",
    "commit": "3d15d1efcedaf0ea20a185ceae5b97e35ac4bac9",
    "filename": "mode/utils/logging.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ask-mode/mode/utils/logging.py",
    "file_hunks_size": 29,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mode/utils/logging.py:811:8 Incompatible variable type [9]: sys.stderr is declared to have type `typing.TextIO` but is used as type `FileLogProxy`.",
    "message": " sys.stderr is declared to have type `typing.TextIO` but is used as type `FileLogProxy`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 811,
    "warning_line": "        sys.stderr = proxy"
  },
  {
    "project": "ask/mode",
    "commit": "3d15d1efcedaf0ea20a185ceae5b97e35ac4bac9",
    "filename": "mode/utils/logging.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ask-mode/mode/utils/logging.py",
    "file_hunks_size": 29,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mode/utils/logging.py:813:8 Incompatible return type [7]: Expected `ContextManager[FileLogProxy]` but got `typing.Generator[FileLogProxy, None, None]`.",
    "message": " Expected `ContextManager[FileLogProxy]` but got `typing.Generator[FileLogProxy, None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 813,
    "warning_line": "        yield proxy"
  },
  {
    "project": "ask/mode",
    "commit": "3d15d1efcedaf0ea20a185ceae5b97e35ac4bac9",
    "filename": "mode/utils/text.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ask-mode/mode/utils/text.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mode/utils/text.py:186:54 Incompatible parameter type [6]: Expected `str` for 3rd positional only parameter to call `abbr` but got `None`.",
    "message": " Expected `str` for 3rd positional only parameter to call `abbr` but got `None`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 186,
    "warning_line": "            module = abbr(module, max - len(cls) - 3, None, words=True)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        if sep:\n            module = abbr(module, max - len(cls) - 3, None, words=True)\n            return module + '[.]' + cls\n",
        "source_code_len": 128,
        "target_code": "        if sep:\n            module = abbr(module, max - len(cls) - 3, '', words=True)\n            return module + '[.]' + cls\n",
        "target_code_len": 126,
        "diff_format": "@@ -185,3 +186,3 @@\n         if sep:\n-            module = abbr(module, max - len(cls) - 3, None, words=True)\n+            module = abbr(module, max - len(cls) - 3, '', words=True)\n             return module + '[.]' + cls\n",
        "source_code_with_indent": "        if sep:\n            <IND>module = abbr(module, max - len(cls) - 3, None, words=True)\n            return module + '[.]' + cls\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        if sep:\n            <IND>module = abbr(module, max - len(cls) - 3, '', words=True)\n            return module + '[.]' + cls\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ask/mode",
    "commit": "3d15d1efcedaf0ea20a185ceae5b97e35ac4bac9",
    "filename": "mode/utils/text.py",
    "min_patch_found": false,
    "full_warning_msg": "mode/utils/text.py:208:8 Incompatible return type [7]: Expected `Variable[AnyStr <: [str, bytes]]` but got `str`.",
    "exception": "too many values to unpack (expected 2)",
    "dd_fail": true
  },
  {
    "project": "ask/mode",
    "commit": "3d15d1efcedaf0ea20a185ceae5b97e35ac4bac9",
    "filename": "mode/utils/text.py",
    "min_patch_found": false,
    "full_warning_msg": "mode/utils/text.py:208:24 Unsupported operand [58]: `+` is not supported for operand types `str` and `Variable[AnyStr <: [str, bytes]]`.",
    "exception": "too many values to unpack (expected 2)",
    "dd_fail": true
  },
  {
    "project": "ask/mode",
    "commit": "3d15d1efcedaf0ea20a185ceae5b97e35ac4bac9",
    "filename": "mode/utils/text.py",
    "min_patch_found": false,
    "full_warning_msg": "mode/utils/text.py:209:4 Incompatible return type [7]: Expected `Variable[AnyStr <: [str, bytes]]` but got `None`.",
    "exception": "too many values to unpack (expected 2)",
    "dd_fail": true
  },
  {
    "project": "ask/mode",
    "commit": "3d15d1efcedaf0ea20a185ceae5b97e35ac4bac9",
    "filename": "mode/utils/times.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ask-mode/mode/utils/times.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mode/utils/times.py:260:52 Incompatible parameter type [6]: Expected `int` for 1st positional only parameter to call `pluralize` but got `float`.",
    "message": " Expected `int` for 1st positional only parameter to call `pluralize` but got `float`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 260,
    "warning_line": "                                          pluralize(w, unit))",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            return '{0}{1}{2} {3}'.format(prefix, sep, formatter(w),\n                                          pluralize(w, unit))\n    if microseconds and secs > 0.0:\n",
        "source_code_len": 167,
        "target_code": "            return '{0}{1}{2} {3}'.format(prefix, sep, formatter(w),\n                                          pluralize(int(w), unit))\n    if microseconds and secs > 0.0:\n",
        "target_code_len": 172,
        "diff_format": "@@ -259,3 +258,3 @@\n             return '{0}{1}{2} {3}'.format(prefix, sep, formatter(w),\n-                                          pluralize(w, unit))\n+                                          pluralize(int(w), unit))\n     if microseconds and secs > 0.0:\n",
        "source_code_with_indent": "            return '{0}{1}{2} {3}'.format(prefix, sep, formatter(w),\n                                          pluralize(w, unit))\n    <DED><DED>if microseconds and secs > 0.0:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            return '{0}{1}{2} {3}'.format(prefix, sep, formatter(w),\n                                          pluralize(int(w), unit))\n    <DED><DED>if microseconds and secs > 0.0:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ask/mode",
    "commit": "3d15d1efcedaf0ea20a185ceae5b97e35ac4bac9",
    "filename": "mode/utils/tracebacks.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ask-mode/mode/utils/tracebacks.py",
    "file_hunks_size": 15,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mode/utils/tracebacks.py:36:12 Incompatible parameter type [6]: Expected `Generator[typing.Tuple[FrameType, int], None, None]` for 1st positional only parameter to call `StackSummary.extract` but got `typing.Iterator[typing.Tuple[FrameType, int]]`.",
    "message": " Expected `Generator[typing.Tuple[FrameType, int], None, None]` for 1st positional only parameter to call `StackSummary.extract` but got `typing.Iterator[typing.Tuple[FrameType, int]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 36,
    "warning_line": "            walk_tb(tb),",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from traceback import StackSummary, print_list, walk_tb\nfrom types import FrameType\nfrom typing import (\n",
        "source_code_len": 105,
        "target_code": "from traceback import StackSummary, print_list, walk_tb\nfrom types import FrameType, TracebackType\nfrom typing import (\n",
        "target_code_len": 120,
        "diff_format": "@@ -6,3 +6,3 @@\n from traceback import StackSummary, print_list, walk_tb\n-from types import FrameType\n+from types import FrameType, TracebackType\n from typing import (\n",
        "source_code_with_indent": "from traceback import StackSummary, print_list, walk_tb\nfrom types import FrameType\nfrom typing import (\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from traceback import StackSummary, print_list, walk_tb\nfrom types import FrameType, TracebackType\nfrom typing import (\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    Union,\n)\n",
        "source_code_len": 13,
        "target_code": "    Union,\n    cast,\n)\n",
        "target_code_len": 23,
        "diff_format": "@@ -15,2 +15,3 @@\n     Union,\n+    cast,\n )\n",
        "source_code_with_indent": "    Union,\n)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    Union,\n    cast,\n)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        StackSummary.extract(\n            walk_tb(tb),\n            limit=limit,\n",
        "source_code_len": 80,
        "target_code": "        StackSummary.extract(\n            cast(Generator, walk_tb(cast(TracebackType, tb))),\n            limit=limit,\n",
        "target_code_len": 118,
        "diff_format": "@@ -35,3 +36,3 @@\n         StackSummary.extract(\n-            walk_tb(tb),\n+            cast(Generator, walk_tb(cast(TracebackType, tb))),\n             limit=limit,\n",
        "source_code_with_indent": "        StackSummary.extract(\n            walk_tb(tb),\n            limit=limit,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        StackSummary.extract(\n            cast(Generator, walk_tb(cast(TracebackType, tb))),\n            limit=limit,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ask/mode",
    "commit": "3d15d1efcedaf0ea20a185ceae5b97e35ac4bac9",
    "filename": "mode/utils/tracebacks.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ask-mode/mode/utils/tracebacks.py",
    "file_hunks_size": 15,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mode/utils/tracebacks.py:36:20 Incompatible parameter type [6]: Expected `Optional[types.TracebackType]` for 1st positional only parameter to call `walk_tb` but got `Traceback`.",
    "message": " Expected `Optional[types.TracebackType]` for 1st positional only parameter to call `walk_tb` but got `Traceback`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 36,
    "warning_line": "            walk_tb(tb),",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from traceback import StackSummary, print_list, walk_tb\nfrom types import FrameType\nfrom typing import (\n",
        "source_code_len": 105,
        "target_code": "from traceback import StackSummary, print_list, walk_tb\nfrom types import FrameType, TracebackType\nfrom typing import (\n",
        "target_code_len": 120,
        "diff_format": "@@ -6,3 +6,3 @@\n from traceback import StackSummary, print_list, walk_tb\n-from types import FrameType\n+from types import FrameType, TracebackType\n from typing import (\n",
        "source_code_with_indent": "from traceback import StackSummary, print_list, walk_tb\nfrom types import FrameType\nfrom typing import (\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from traceback import StackSummary, print_list, walk_tb\nfrom types import FrameType, TracebackType\nfrom typing import (\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    Union,\n)\n",
        "source_code_len": 13,
        "target_code": "    Union,\n    cast,\n)\n",
        "target_code_len": 23,
        "diff_format": "@@ -15,2 +15,3 @@\n     Union,\n+    cast,\n )\n",
        "source_code_with_indent": "    Union,\n)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    Union,\n    cast,\n)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        StackSummary.extract(\n            walk_tb(tb),\n            limit=limit,\n",
        "source_code_len": 80,
        "target_code": "        StackSummary.extract(\n            cast(Generator, walk_tb(cast(TracebackType, tb))),\n            limit=limit,\n",
        "target_code_len": 118,
        "diff_format": "@@ -35,3 +36,3 @@\n         StackSummary.extract(\n-            walk_tb(tb),\n+            cast(Generator, walk_tb(cast(TracebackType, tb))),\n             limit=limit,\n",
        "source_code_with_indent": "        StackSummary.extract(\n            walk_tb(tb),\n            limit=limit,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        StackSummary.extract(\n            cast(Generator, walk_tb(cast(TracebackType, tb))),\n            limit=limit,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ask/mode",
    "commit": "3d15d1efcedaf0ea20a185ceae5b97e35ac4bac9",
    "filename": "mode/utils/tracebacks.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ask-mode/mode/utils/tracebacks.py",
    "file_hunks_size": 15,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mode/utils/tracebacks.py:50:4 Incompatible return type [7]: Expected `None` but got `str`.",
    "message": " Expected `None` but got `str`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 50,
    "warning_line": "    return f.getvalue()",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                      limit: int = DEFAULT_MAX_FRAMES,\n                      capture_locals: bool = False) -> None:\n    \"\"\"Format :class:`asyncio.Task` stack trace as a string.\"\"\"\n",
        "source_code_len": 180,
        "target_code": "                      limit: int = DEFAULT_MAX_FRAMES,\n                      capture_locals: bool = False) -> str:\n    \"\"\"Format :class:`asyncio.Task` stack trace as a string.\"\"\"\n",
        "target_code_len": 179,
        "diff_format": "@@ -45,3 +46,3 @@\n                       limit: int = DEFAULT_MAX_FRAMES,\n-                      capture_locals: bool = False) -> None:\n+                      capture_locals: bool = False) -> str:\n     \"\"\"Format :class:`asyncio.Task` stack trace as a string.\"\"\"\n",
        "source_code_with_indent": "                      limit: int = DEFAULT_MAX_FRAMES,\n                      capture_locals: bool = False) -> None:\n    <IND>\"\"\"Format :class:`asyncio.Task` stack trace as a string.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                      limit: int = DEFAULT_MAX_FRAMES,\n                      capture_locals: bool = False) -> str:\n    <IND>\"\"\"Format :class:`asyncio.Task` stack trace as a string.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ask/mode",
    "commit": "3d15d1efcedaf0ea20a185ceae5b97e35ac4bac9",
    "filename": "mode/utils/tracebacks.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ask-mode/mode/utils/tracebacks.py",
    "file_hunks_size": 15,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mode/utils/tracebacks.py:130:16 Incompatible return type [7]: Expected `Traceback` but got `_Truncated`.",
    "message": " Expected `Traceback` but got `_Truncated`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 130,
    "warning_line": "                return _Truncated(filename='async_generator_asend')",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from traceback import StackSummary, print_list, walk_tb\nfrom types import FrameType\nfrom typing import (\n",
        "source_code_len": 105,
        "target_code": "from traceback import StackSummary, print_list, walk_tb\nfrom types import FrameType, TracebackType\nfrom typing import (\n",
        "target_code_len": 120,
        "diff_format": "@@ -6,3 +6,3 @@\n from traceback import StackSummary, print_list, walk_tb\n-from types import FrameType\n+from types import FrameType, TracebackType\n from typing import (\n",
        "source_code_with_indent": "from traceback import StackSummary, print_list, walk_tb\nfrom types import FrameType\nfrom typing import (\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from traceback import StackSummary, print_list, walk_tb\nfrom types import FrameType, TracebackType\nfrom typing import (\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    Union,\n)\n",
        "source_code_len": 13,
        "target_code": "    Union,\n    cast,\n)\n",
        "target_code_len": 23,
        "diff_format": "@@ -15,2 +15,3 @@\n     Union,\n+    cast,\n )\n",
        "source_code_with_indent": "    Union,\n)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    Union,\n    cast,\n)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        StackSummary.extract(\n            walk_tb(tb),\n            limit=limit,\n",
        "source_code_len": 80,
        "target_code": "        StackSummary.extract(\n            cast(Generator, walk_tb(cast(TracebackType, tb))),\n            limit=limit,\n",
        "target_code_len": 118,
        "diff_format": "@@ -35,3 +36,3 @@\n         StackSummary.extract(\n-            walk_tb(tb),\n+            cast(Generator, walk_tb(cast(TracebackType, tb))),\n             limit=limit,\n",
        "source_code_with_indent": "        StackSummary.extract(\n            walk_tb(tb),\n            limit=limit,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        StackSummary.extract(\n            cast(Generator, walk_tb(cast(TracebackType, tb))),\n            limit=limit,\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __init__(self, filename='...', name='[rest of traceback truncated]'):\n        self.tb_lineno = -1\n        self.tb_frame = _CustomFrame(\n            globals={\n",
        "source_code_len": 167,
        "target_code": "\n    def __init__(self,\n                 filename: str = '...',\n                 name: str = '[rest of traceback truncated]') -> None:\n        self.tb_lineno = -1\n        self.tb_frame = cast(FrameType, _CustomFrame(\n            globals={\n",
        "target_code_len": 239,
        "diff_format": "@@ -85,5 +87,7 @@\n \n-    def __init__(self, filename='...', name='[rest of traceback truncated]'):\n+    def __init__(self,\n+                 filename: str = '...',\n+                 name: str = '[rest of traceback truncated]') -> None:\n         self.tb_lineno = -1\n-        self.tb_frame = _CustomFrame(\n+        self.tb_frame = cast(FrameType, _CustomFrame(\n             globals={\n",
        "source_code_with_indent": "\n    <IND>def __init__(self, filename='...', name='[rest of traceback truncated]'):\n        <IND>self.tb_lineno = -1\n        self.tb_frame = _CustomFrame(\n            globals={\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <IND>def __init__(self,\n                 filename: str = '...',\n                 name: str = '[rest of traceback truncated]') -> None:\n        <IND>self.tb_lineno = -1\n        self.tb_frame = cast(FrameType, _CustomFrame(\n            globals={\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            ),\n        )\n        self.tb_next = None\n",
        "source_code_len": 53,
        "target_code": "            ),\n        ))\n        self.tb_next = None\n",
        "target_code_len": 54,
        "diff_format": "@@ -98,3 +102,3 @@\n             ),\n-        )\n+        ))\n         self.tb_next = None\n",
        "source_code_with_indent": "            ),\n        )\n        self.tb_next = None\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            ),\n        ))\n        self.tb_next = None\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def from_task(cls, task: asyncio.Task, *,\n                  limit: int = DEFAULT_MAX_FRAMES) -> 'Traceback':\n        coro = task._coro  # type: ignore\n",
        "source_code_len": 155,
        "target_code": "    def from_task(cls, task: asyncio.Task, *,\n                  limit: int = DEFAULT_MAX_FRAMES) -> _BaseTraceback:\n        coro = task._coro  # type: ignore\n",
        "target_code_len": 158,
        "diff_format": "@@ -117,3 +121,3 @@\n     def from_task(cls, task: asyncio.Task, *,\n-                  limit: int = DEFAULT_MAX_FRAMES) -> 'Traceback':\n+                  limit: int = DEFAULT_MAX_FRAMES) -> _BaseTraceback:\n         coro = task._coro  # type: ignore\n",
        "source_code_with_indent": "    def from_task(cls, task: asyncio.Task, *,\n                  limit: int = DEFAULT_MAX_FRAMES) -> 'Traceback':\n        <IND>coro = task._coro  # type: ignore\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def from_task(cls, task: asyncio.Task, *,\n                  limit: int = DEFAULT_MAX_FRAMES) -> _BaseTraceback:\n        <IND>coro = task._coro  # type: ignore\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                       depth: int = 0,\n                       limit: int = DEFAULT_MAX_FRAMES) -> 'Traceback':\n        try:\n",
        "source_code_len": 124,
        "target_code": "                       depth: int = 0,\n                       limit: int = DEFAULT_MAX_FRAMES) -> _BaseTraceback:\n        try:\n",
        "target_code_len": 127,
        "diff_format": "@@ -124,3 +128,3 @@\n                        depth: int = 0,\n-                       limit: int = DEFAULT_MAX_FRAMES) -> 'Traceback':\n+                       limit: int = DEFAULT_MAX_FRAMES) -> _BaseTraceback:\n         try:\n",
        "source_code_with_indent": "                       depth: int = 0,\n                       limit: int = DEFAULT_MAX_FRAMES) -> 'Traceback':\n        <IND>try:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                       depth: int = 0,\n                       limit: int = DEFAULT_MAX_FRAMES) -> _BaseTraceback:\n        <IND>try:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        if cr_await is not None and asyncio.iscoroutine(cr_await):\n            next_node: Traceback\n            if limit is not None and depth > limit:\n",
        "source_code_len": 152,
        "target_code": "        if cr_await is not None and asyncio.iscoroutine(cr_await):\n            next_node: _BaseTraceback\n            if limit is not None and depth > limit:\n",
        "target_code_len": 157,
        "diff_format": "@@ -157,3 +161,3 @@\n         if cr_await is not None and asyncio.iscoroutine(cr_await):\n-            next_node: Traceback\n+            next_node: _BaseTraceback\n             if limit is not None and depth > limit:\n",
        "source_code_with_indent": "        if cr_await is not None and asyncio.iscoroutine(cr_await):\n            <IND>next_node: Traceback\n            if limit is not None and depth > limit:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        if cr_await is not None and asyncio.iscoroutine(cr_await):\n            <IND>next_node: _BaseTraceback\n            if limit is not None and depth > limit:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ask/mode",
    "commit": "3d15d1efcedaf0ea20a185ceae5b97e35ac4bac9",
    "filename": "mode/utils/tracebacks.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ask-mode/mode/utils/tracebacks.py",
    "file_hunks_size": 15,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mode/utils/tracebacks.py:148:8 Incompatible variable type [9]: root is declared to have type `Traceback` but is used as type `None`.",
    "message": " root is declared to have type `Traceback` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 148,
    "warning_line": "        root: Traceback = None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from traceback import StackSummary, print_list, walk_tb\nfrom types import FrameType\nfrom typing import (\n",
        "source_code_len": 105,
        "target_code": "from traceback import StackSummary, print_list, walk_tb\nfrom types import FrameType, TracebackType\nfrom typing import (\n",
        "target_code_len": 120,
        "diff_format": "@@ -6,3 +6,3 @@\n from traceback import StackSummary, print_list, walk_tb\n-from types import FrameType\n+from types import FrameType, TracebackType\n from typing import (\n",
        "source_code_with_indent": "from traceback import StackSummary, print_list, walk_tb\nfrom types import FrameType\nfrom typing import (\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from traceback import StackSummary, print_list, walk_tb\nfrom types import FrameType, TracebackType\nfrom typing import (\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    Union,\n)\n",
        "source_code_len": 13,
        "target_code": "    Union,\n    cast,\n)\n",
        "target_code_len": 23,
        "diff_format": "@@ -15,2 +15,3 @@\n     Union,\n+    cast,\n )\n",
        "source_code_with_indent": "    Union,\n)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    Union,\n    cast,\n)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        StackSummary.extract(\n            walk_tb(tb),\n            limit=limit,\n",
        "source_code_len": 80,
        "target_code": "        StackSummary.extract(\n            cast(Generator, walk_tb(cast(TracebackType, tb))),\n            limit=limit,\n",
        "target_code_len": 118,
        "diff_format": "@@ -35,3 +36,3 @@\n         StackSummary.extract(\n-            walk_tb(tb),\n+            cast(Generator, walk_tb(cast(TracebackType, tb))),\n             limit=limit,\n",
        "source_code_with_indent": "        StackSummary.extract(\n            walk_tb(tb),\n            limit=limit,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        StackSummary.extract(\n            cast(Generator, walk_tb(cast(TracebackType, tb))),\n            limit=limit,\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __init__(self, filename='...', name='[rest of traceback truncated]'):\n        self.tb_lineno = -1\n        self.tb_frame = _CustomFrame(\n            globals={\n",
        "source_code_len": 167,
        "target_code": "\n    def __init__(self,\n                 filename: str = '...',\n                 name: str = '[rest of traceback truncated]') -> None:\n        self.tb_lineno = -1\n        self.tb_frame = cast(FrameType, _CustomFrame(\n            globals={\n",
        "target_code_len": 239,
        "diff_format": "@@ -85,5 +87,7 @@\n \n-    def __init__(self, filename='...', name='[rest of traceback truncated]'):\n+    def __init__(self,\n+                 filename: str = '...',\n+                 name: str = '[rest of traceback truncated]') -> None:\n         self.tb_lineno = -1\n-        self.tb_frame = _CustomFrame(\n+        self.tb_frame = cast(FrameType, _CustomFrame(\n             globals={\n",
        "source_code_with_indent": "\n    <IND>def __init__(self, filename='...', name='[rest of traceback truncated]'):\n        <IND>self.tb_lineno = -1\n        self.tb_frame = _CustomFrame(\n            globals={\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <IND>def __init__(self,\n                 filename: str = '...',\n                 name: str = '[rest of traceback truncated]') -> None:\n        <IND>self.tb_lineno = -1\n        self.tb_frame = cast(FrameType, _CustomFrame(\n            globals={\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            ),\n        )\n        self.tb_next = None\n",
        "source_code_len": 53,
        "target_code": "            ),\n        ))\n        self.tb_next = None\n",
        "target_code_len": 54,
        "diff_format": "@@ -98,3 +102,3 @@\n             ),\n-        )\n+        ))\n         self.tb_next = None\n",
        "source_code_with_indent": "            ),\n        )\n        self.tb_next = None\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            ),\n        ))\n        self.tb_next = None\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def from_task(cls, task: asyncio.Task, *,\n                  limit: int = DEFAULT_MAX_FRAMES) -> 'Traceback':\n        coro = task._coro  # type: ignore\n",
        "source_code_len": 155,
        "target_code": "    def from_task(cls, task: asyncio.Task, *,\n                  limit: int = DEFAULT_MAX_FRAMES) -> _BaseTraceback:\n        coro = task._coro  # type: ignore\n",
        "target_code_len": 158,
        "diff_format": "@@ -117,3 +121,3 @@\n     def from_task(cls, task: asyncio.Task, *,\n-                  limit: int = DEFAULT_MAX_FRAMES) -> 'Traceback':\n+                  limit: int = DEFAULT_MAX_FRAMES) -> _BaseTraceback:\n         coro = task._coro  # type: ignore\n",
        "source_code_with_indent": "    def from_task(cls, task: asyncio.Task, *,\n                  limit: int = DEFAULT_MAX_FRAMES) -> 'Traceback':\n        <IND>coro = task._coro  # type: ignore\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def from_task(cls, task: asyncio.Task, *,\n                  limit: int = DEFAULT_MAX_FRAMES) -> _BaseTraceback:\n        <IND>coro = task._coro  # type: ignore\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                       depth: int = 0,\n                       limit: int = DEFAULT_MAX_FRAMES) -> 'Traceback':\n        try:\n",
        "source_code_len": 124,
        "target_code": "                       depth: int = 0,\n                       limit: int = DEFAULT_MAX_FRAMES) -> _BaseTraceback:\n        try:\n",
        "target_code_len": 127,
        "diff_format": "@@ -124,3 +128,3 @@\n                        depth: int = 0,\n-                       limit: int = DEFAULT_MAX_FRAMES) -> 'Traceback':\n+                       limit: int = DEFAULT_MAX_FRAMES) -> _BaseTraceback:\n         try:\n",
        "source_code_with_indent": "                       depth: int = 0,\n                       limit: int = DEFAULT_MAX_FRAMES) -> 'Traceback':\n        <IND>try:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                       depth: int = 0,\n                       limit: int = DEFAULT_MAX_FRAMES) -> _BaseTraceback:\n        <IND>try:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        prev = None\n        root: Traceback = None\n        for f in frames:\n",
        "source_code_len": 76,
        "target_code": "        prev = None\n        root: Optional[_BaseTraceback] = None\n        for f in frames:\n",
        "target_code_len": 91,
        "diff_format": "@@ -147,3 +151,3 @@\n         prev = None\n-        root: Traceback = None\n+        root: Optional[_BaseTraceback] = None\n         for f in frames:\n",
        "source_code_with_indent": "        prev = None\n        root: Traceback = None\n        for f in frames:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        prev = None\n        root: Optional[_BaseTraceback] = None\n        for f in frames:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        if cr_await is not None and asyncio.iscoroutine(cr_await):\n            next_node: Traceback\n            if limit is not None and depth > limit:\n",
        "source_code_len": 152,
        "target_code": "        if cr_await is not None and asyncio.iscoroutine(cr_await):\n            next_node: _BaseTraceback\n            if limit is not None and depth > limit:\n",
        "target_code_len": 157,
        "diff_format": "@@ -157,3 +161,3 @@\n         if cr_await is not None and asyncio.iscoroutine(cr_await):\n-            next_node: Traceback\n+            next_node: _BaseTraceback\n             if limit is not None and depth > limit:\n",
        "source_code_with_indent": "        if cr_await is not None and asyncio.iscoroutine(cr_await):\n            <IND>next_node: Traceback\n            if limit is not None and depth > limit:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        if cr_await is not None and asyncio.iscoroutine(cr_await):\n            <IND>next_node: _BaseTraceback\n            if limit is not None and depth > limit:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                return next_node\n        return root\n",
        "source_code_len": 53,
        "target_code": "                return next_node\n        if root is None:\n            raise RuntimeError('cannot find stack of coroutine')\n        return root\n",
        "target_code_len": 143,
        "diff_format": "@@ -167,2 +171,4 @@\n                 return next_node\n+        if root is None:\n+            raise RuntimeError('cannot find stack of coroutine')\n         return root\n",
        "source_code_with_indent": "                <IND>return next_node\n        <DED><DED>return root\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                <IND>return next_node\n        <DED><DED>if root is None:\n            <IND>raise RuntimeError('cannot find stack of coroutine')\n        <DED>return root\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ask/mode",
    "commit": "3d15d1efcedaf0ea20a185ceae5b97e35ac4bac9",
    "filename": "mode/utils/tracebacks.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ask-mode/mode/utils/tracebacks.py",
    "file_hunks_size": 15,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mode/utils/tracebacks.py:160:16 Incompatible variable type [9]: next_node is declared to have type `Traceback` but is used as type `_Truncated`.",
    "message": " next_node is declared to have type `Traceback` but is used as type `_Truncated`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 160,
    "warning_line": "                next_node = _Truncated()",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from traceback import StackSummary, print_list, walk_tb\nfrom types import FrameType\nfrom typing import (\n",
        "source_code_len": 105,
        "target_code": "from traceback import StackSummary, print_list, walk_tb\nfrom types import FrameType, TracebackType\nfrom typing import (\n",
        "target_code_len": 120,
        "diff_format": "@@ -6,3 +6,3 @@\n from traceback import StackSummary, print_list, walk_tb\n-from types import FrameType\n+from types import FrameType, TracebackType\n from typing import (\n",
        "source_code_with_indent": "from traceback import StackSummary, print_list, walk_tb\nfrom types import FrameType\nfrom typing import (\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from traceback import StackSummary, print_list, walk_tb\nfrom types import FrameType, TracebackType\nfrom typing import (\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    Union,\n)\n",
        "source_code_len": 13,
        "target_code": "    Union,\n    cast,\n)\n",
        "target_code_len": 23,
        "diff_format": "@@ -15,2 +15,3 @@\n     Union,\n+    cast,\n )\n",
        "source_code_with_indent": "    Union,\n)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    Union,\n    cast,\n)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        StackSummary.extract(\n            walk_tb(tb),\n            limit=limit,\n",
        "source_code_len": 80,
        "target_code": "        StackSummary.extract(\n            cast(Generator, walk_tb(cast(TracebackType, tb))),\n            limit=limit,\n",
        "target_code_len": 118,
        "diff_format": "@@ -35,3 +36,3 @@\n         StackSummary.extract(\n-            walk_tb(tb),\n+            cast(Generator, walk_tb(cast(TracebackType, tb))),\n             limit=limit,\n",
        "source_code_with_indent": "        StackSummary.extract(\n            walk_tb(tb),\n            limit=limit,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        StackSummary.extract(\n            cast(Generator, walk_tb(cast(TracebackType, tb))),\n            limit=limit,\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __init__(self, filename='...', name='[rest of traceback truncated]'):\n        self.tb_lineno = -1\n        self.tb_frame = _CustomFrame(\n            globals={\n",
        "source_code_len": 167,
        "target_code": "\n    def __init__(self,\n                 filename: str = '...',\n                 name: str = '[rest of traceback truncated]') -> None:\n        self.tb_lineno = -1\n        self.tb_frame = cast(FrameType, _CustomFrame(\n            globals={\n",
        "target_code_len": 239,
        "diff_format": "@@ -85,5 +87,7 @@\n \n-    def __init__(self, filename='...', name='[rest of traceback truncated]'):\n+    def __init__(self,\n+                 filename: str = '...',\n+                 name: str = '[rest of traceback truncated]') -> None:\n         self.tb_lineno = -1\n-        self.tb_frame = _CustomFrame(\n+        self.tb_frame = cast(FrameType, _CustomFrame(\n             globals={\n",
        "source_code_with_indent": "\n    <IND>def __init__(self, filename='...', name='[rest of traceback truncated]'):\n        <IND>self.tb_lineno = -1\n        self.tb_frame = _CustomFrame(\n            globals={\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <IND>def __init__(self,\n                 filename: str = '...',\n                 name: str = '[rest of traceback truncated]') -> None:\n        <IND>self.tb_lineno = -1\n        self.tb_frame = cast(FrameType, _CustomFrame(\n            globals={\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            ),\n        )\n        self.tb_next = None\n",
        "source_code_len": 53,
        "target_code": "            ),\n        ))\n        self.tb_next = None\n",
        "target_code_len": 54,
        "diff_format": "@@ -98,3 +102,3 @@\n             ),\n-        )\n+        ))\n         self.tb_next = None\n",
        "source_code_with_indent": "            ),\n        )\n        self.tb_next = None\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            ),\n        ))\n        self.tb_next = None\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def from_task(cls, task: asyncio.Task, *,\n                  limit: int = DEFAULT_MAX_FRAMES) -> 'Traceback':\n        coro = task._coro  # type: ignore\n",
        "source_code_len": 155,
        "target_code": "    def from_task(cls, task: asyncio.Task, *,\n                  limit: int = DEFAULT_MAX_FRAMES) -> _BaseTraceback:\n        coro = task._coro  # type: ignore\n",
        "target_code_len": 158,
        "diff_format": "@@ -117,3 +121,3 @@\n     def from_task(cls, task: asyncio.Task, *,\n-                  limit: int = DEFAULT_MAX_FRAMES) -> 'Traceback':\n+                  limit: int = DEFAULT_MAX_FRAMES) -> _BaseTraceback:\n         coro = task._coro  # type: ignore\n",
        "source_code_with_indent": "    def from_task(cls, task: asyncio.Task, *,\n                  limit: int = DEFAULT_MAX_FRAMES) -> 'Traceback':\n        <IND>coro = task._coro  # type: ignore\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def from_task(cls, task: asyncio.Task, *,\n                  limit: int = DEFAULT_MAX_FRAMES) -> _BaseTraceback:\n        <IND>coro = task._coro  # type: ignore\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                       depth: int = 0,\n                       limit: int = DEFAULT_MAX_FRAMES) -> 'Traceback':\n        try:\n",
        "source_code_len": 124,
        "target_code": "                       depth: int = 0,\n                       limit: int = DEFAULT_MAX_FRAMES) -> _BaseTraceback:\n        try:\n",
        "target_code_len": 127,
        "diff_format": "@@ -124,3 +128,3 @@\n                        depth: int = 0,\n-                       limit: int = DEFAULT_MAX_FRAMES) -> 'Traceback':\n+                       limit: int = DEFAULT_MAX_FRAMES) -> _BaseTraceback:\n         try:\n",
        "source_code_with_indent": "                       depth: int = 0,\n                       limit: int = DEFAULT_MAX_FRAMES) -> 'Traceback':\n        <IND>try:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                       depth: int = 0,\n                       limit: int = DEFAULT_MAX_FRAMES) -> _BaseTraceback:\n        <IND>try:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        if cr_await is not None and asyncio.iscoroutine(cr_await):\n            next_node: Traceback\n            if limit is not None and depth > limit:\n",
        "source_code_len": 152,
        "target_code": "        if cr_await is not None and asyncio.iscoroutine(cr_await):\n            next_node: _BaseTraceback\n            if limit is not None and depth > limit:\n",
        "target_code_len": 157,
        "diff_format": "@@ -157,3 +161,3 @@\n         if cr_await is not None and asyncio.iscoroutine(cr_await):\n-            next_node: Traceback\n+            next_node: _BaseTraceback\n             if limit is not None and depth > limit:\n",
        "source_code_with_indent": "        if cr_await is not None and asyncio.iscoroutine(cr_await):\n            <IND>next_node: Traceback\n            if limit is not None and depth > limit:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        if cr_await is not None and asyncio.iscoroutine(cr_await):\n            <IND>next_node: _BaseTraceback\n            if limit is not None and depth > limit:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ask/mode",
    "commit": "3d15d1efcedaf0ea20a185ceae5b97e35ac4bac9",
    "filename": "mode/utils/trees.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ask-mode/mode/utils/trees.py",
    "file_hunks_size": 13,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mode/utils/trees.py:38:4 Incompatible attribute type [8]: Attribute `_root` declared in class `Node` has type `NodeT[Variable[_T]]` but is used as type `None`.",
    "message": " Attribute `_root` declared in class `Node` has type `NodeT[Variable[_T]]` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 38,
    "warning_line": "    _root: NodeT[_T] = None"
  },
  {
    "project": "ask/mode",
    "commit": "3d15d1efcedaf0ea20a185ceae5b97e35ac4bac9",
    "filename": "mode/utils/trees.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ask-mode/mode/utils/trees.py",
    "file_hunks_size": 13,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mode/utils/trees.py:39:4 Incompatible attribute type [8]: Attribute `_parent` declared in class `Node` has type `NodeT[Variable[_T]]` but is used as type `None`.",
    "message": " Attribute `_parent` declared in class `Node` has type `NodeT[Variable[_T]]` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 39,
    "warning_line": "    _parent: NodeT[_T] = None"
  },
  {
    "project": "ask/mode",
    "commit": "3d15d1efcedaf0ea20a185ceae5b97e35ac4bac9",
    "filename": "mode/utils/trees.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ask-mode/mode/utils/trees.py",
    "file_hunks_size": 13,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mode/utils/trees.py:49:17 Incompatible variable type [9]: children is declared to have type `List[NodeT[Variable[_T]]]` but is used as type `None`.",
    "message": " children is declared to have type `List[NodeT[Variable[_T]]]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 49,
    "warning_line": "                 children: List[NodeT[_T]] = None) -> None:"
  },
  {
    "project": "ask/mode",
    "commit": "3d15d1efcedaf0ea20a185ceae5b97e35ac4bac9",
    "filename": "mode/utils/trees.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ask-mode/mode/utils/trees.py",
    "file_hunks_size": 13,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mode/utils/trees.py:69:19 Incompatible parameter type [6]: Expected `Variable[_T]` for 1st positional only parameter to call `NodeT.add` but got `Node[Variable[_T]]`.",
    "message": " Expected `Variable[_T]` for 1st positional only parameter to call `NodeT.add` but got `Node[Variable[_T]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 69,
    "warning_line": "        parent.add(self)"
  },
  {
    "project": "ask/mode",
    "commit": "3d15d1efcedaf0ea20a185ceae5b97e35ac4bac9",
    "filename": "mode/utils/trees.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ask-mode/mode/utils/trees.py",
    "file_hunks_size": 13,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mode/utils/trees.py:75:8 Incompatible attribute type [8]: Attribute `parent` declared in class `Node` has type `NodeT[typing.Any]` but is used as type `None`.",
    "message": " Attribute `parent` declared in class `Node` has type `NodeT[typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 75,
    "warning_line": "        self.parent = None"
  },
  {
    "project": "ask/mode",
    "commit": "3d15d1efcedaf0ea20a185ceae5b97e35ac4bac9",
    "filename": "mode/utils/trees.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ask-mode/mode/utils/trees.py",
    "file_hunks_size": 13,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mode/utils/trees.py:76:8 Incompatible attribute type [8]: Attribute `root` declared in class `Node` has type `NodeT[typing.Any]` but is used as type `None`.",
    "message": " Attribute `root` declared in class `Node` has type `NodeT[typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 76,
    "warning_line": "        self.root = None"
  },
  {
    "project": "ask/mode",
    "commit": "3d15d1efcedaf0ea20a185ceae5b97e35ac4bac9",
    "filename": "mode/utils/types/trees.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ask-mode/mode/utils/types/trees.py",
    "file_hunks_size": 5,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mode/utils/types/trees.py:14:4 Incompatible attribute type [8]: Attribute `root` declared in class `NodeT` has type `NodeT[typing.Any]` but is used as type `None`.",
    "message": " Attribute `root` declared in class `NodeT` has type `NodeT[typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 14,
    "warning_line": "    root: 'NodeT' = None"
  },
  {
    "project": "ask/mode",
    "commit": "3d15d1efcedaf0ea20a185ceae5b97e35ac4bac9",
    "filename": "mode/utils/types/trees.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ask-mode/mode/utils/types/trees.py",
    "file_hunks_size": 5,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mode/utils/types/trees.py:15:4 Incompatible attribute type [8]: Attribute `children` declared in class `NodeT` has type `List[typing.Any]` but is used as type `None`.",
    "message": " Attribute `children` declared in class `NodeT` has type `List[typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 15,
    "warning_line": "    children: List[Any] = None"
  },
  {
    "project": "ask/mode",
    "commit": "3d15d1efcedaf0ea20a185ceae5b97e35ac4bac9",
    "filename": "mode/utils/types/trees.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ask-mode/mode/utils/types/trees.py",
    "file_hunks_size": 5,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mode/utils/types/trees.py:16:4 Incompatible attribute type [8]: Attribute `parent` declared in class `NodeT` has type `NodeT[typing.Any]` but is used as type `None`.",
    "message": " Attribute `parent` declared in class `NodeT` has type `NodeT[typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 16,
    "warning_line": "    parent: 'NodeT' = None"
  },
  {
    "project": "ask/mode",
    "commit": "3d15d1efcedaf0ea20a185ceae5b97e35ac4bac9",
    "filename": "mode/worker.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ask-mode/mode/worker.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mode/worker.py:194:16 Incompatible parameter type [6]: Expected `List[_logging.StreamHandler[typing.Any]]` for 4th parameter `loghandlers` to call `logging.setup_logging` but got `List[Handler]`.",
    "message": " Expected `List[_logging.StreamHandler[typing.Any]]` for 4th parameter `loghandlers` to call `logging.setup_logging` but got `List[Handler]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 194,
    "warning_line": "                loghandlers=self.loghandlers,"
  },
  {
    "project": "ask/mode",
    "commit": "3d15d1efcedaf0ea20a185ceae5b97e35ac4bac9",
    "filename": "mode/worker.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ask-mode/mode/worker.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mode/worker.py:260:21 Incompatible parameter type [6]: Expected `asyncio.futures.Future[typing.Any]` for 1st positional only parameter to call `maybe_cancel` but got `Optional[asyncio.futures.Future[typing.Any]]`.",
    "message": " Expected `asyncio.futures.Future[typing.Any]` for 1st positional only parameter to call `maybe_cancel` but got `Optional[asyncio.futures.Future[typing.Any]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 260,
    "warning_line": "        maybe_cancel(self._starting_fut)"
  },
  {
    "project": "ask/mode",
    "commit": "3d15d1efcedaf0ea20a185ceae5b97e35ac4bac9",
    "filename": "mode/worker.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ask-mode/mode/worker.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mode/worker.py:276:29 Incompatible parameter type [6]: Expected `asyncio.futures.Future[typing.Any]` for 1st positional only parameter to call `maybe_cancel` but got `Optional[asyncio.futures.Future[typing.Any]]`.",
    "message": " Expected `asyncio.futures.Future[typing.Any]` for 1st positional only parameter to call `maybe_cancel` but got `Optional[asyncio.futures.Future[typing.Any]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 276,
    "warning_line": "                maybe_cancel(self._starting_fut)"
  }
]