[
  {
    "project": "adap/flower",
    "commit": "38cda146d8ab2ab4f36bd0dbac02210a63c06532",
    "filename": "src/py/flwr_experimental/ops/cluster.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/adap-flower/src/py/flwr_experimental/ops/cluster.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/py/flwr_experimental/ops/cluster.py:74:39 Incompatible parameter type [6]: Expected `typing.Union[typing.Type[paramiko.client.MissingHostKeyPolicy], paramiko.client.MissingHostKeyPolicy]` for 1st positional only parameter to call `SSHClient.set_missing_host_key_policy` but got `typing.Type[IgnoreHostKeyPolicy]`.",
    "message": " Expected `typing.Union[typing.Type[paramiko.client.MissingHostKeyPolicy], paramiko.client.MissingHostKeyPolicy]` for 1st positional only parameter to call `SSHClient.set_missing_host_key_policy` but got `typing.Type[IgnoreHostKeyPolicy]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 74,
    "warning_line": "    client.set_missing_host_key_policy(IgnoreHostKeyPolicy)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from logging import DEBUG, ERROR\nfrom typing import Dict, Iterator, List, Optional, Tuple\n\nfrom paramiko.client import SSHClient\nfrom paramiko.sftp_attr import SFTPAttributes\n",
        "source_code_len": 175,
        "target_code": "from logging import DEBUG, ERROR\nfrom typing import Dict, Iterator, List, Optional, Tuple, Type, Union, cast\n\nfrom paramiko.client import MissingHostKeyPolicy, SSHClient\nfrom paramiko.sftp_attr import SFTPAttributes\n",
        "target_code_len": 216,
        "diff_format": "@@ -19,5 +19,5 @@\n from logging import DEBUG, ERROR\n-from typing import Dict, Iterator, List, Optional, Tuple\n-\n-from paramiko.client import SSHClient\n+from typing import Dict, Iterator, List, Optional, Tuple, Type, Union, cast\n+\n+from paramiko.client import MissingHostKeyPolicy, SSHClient\n from paramiko.sftp_attr import SFTPAttributes\n",
        "source_code_with_indent": "from logging import DEBUG, ERROR\nfrom typing import Dict, Iterator, List, Optional, Tuple\n\nfrom paramiko.client import SSHClient\nfrom paramiko.sftp_attr import SFTPAttributes\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from logging import DEBUG, ERROR\nfrom typing import Dict, Iterator, List, Optional, Tuple, Type, Union, cast\n\nfrom paramiko.client import MissingHostKeyPolicy, SSHClient\nfrom paramiko.sftp_attr import SFTPAttributes\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    client = SSHClient()\n    client.set_missing_host_key_policy(IgnoreHostKeyPolicy)\n    client.connect(\n        hostname=instance.public_ip,\n        port=instance.ssh_port,\n        username=username,\n",
        "source_code_len": 202,
        "target_code": "\n    instance_ssh_port: int = cast(int, instance.ssh_port)\n    ignore_host_key_policy: Union[\n        Type[MissingHostKeyPolicy], MissingHostKeyPolicy\n    ] = cast(\n        Union[Type[MissingHostKeyPolicy], MissingHostKeyPolicy], IgnoreHostKeyPolicy\n    )\n\n    client = SSHClient()\n    client.set_missing_host_key_policy(ignore_host_key_policy)\n    client.connect(\n        hostname=str(instance.public_ip),\n        port=instance_ssh_port,\n        username=username,\n",
        "target_code_len": 466,
        "diff_format": "@@ -72,7 +72,14 @@\n \n+    instance_ssh_port: int = cast(int, instance.ssh_port)\n+    ignore_host_key_policy: Union[\n+        Type[MissingHostKeyPolicy], MissingHostKeyPolicy\n+    ] = cast(\n+        Union[Type[MissingHostKeyPolicy], MissingHostKeyPolicy], IgnoreHostKeyPolicy\n+    )\n+\n     client = SSHClient()\n-    client.set_missing_host_key_policy(IgnoreHostKeyPolicy)\n+    client.set_missing_host_key_policy(ignore_host_key_policy)\n     client.connect(\n-        hostname=instance.public_ip,\n-        port=instance.ssh_port,\n+        hostname=str(instance.public_ip),\n+        port=instance_ssh_port,\n         username=username,\n",
        "source_code_with_indent": "\n    client = SSHClient()\n    client.set_missing_host_key_policy(IgnoreHostKeyPolicy)\n    client.connect(\n        hostname=instance.public_ip,\n        port=instance.ssh_port,\n        username=username,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    instance_ssh_port: int = cast(int, instance.ssh_port)\n    ignore_host_key_policy: Union[\n        Type[MissingHostKeyPolicy], MissingHostKeyPolicy\n    ] = cast(\n        Union[Type[MissingHostKeyPolicy], MissingHostKeyPolicy], IgnoreHostKeyPolicy\n    )\n\n    client = SSHClient()\n    client.set_missing_host_key_policy(ignore_host_key_policy)\n    client.connect(\n        hostname=str(instance.public_ip),\n        port=instance_ssh_port,\n        username=username,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "adap/flower",
    "commit": "38cda146d8ab2ab4f36bd0dbac02210a63c06532",
    "filename": "src/py/flwr_experimental/ops/cluster.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/adap-flower/src/py/flwr_experimental/ops/cluster.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/py/flwr_experimental/ops/cluster.py:76:8 Incompatible parameter type [6]: Expected `str` for 1st parameter `hostname` to call `SSHClient.connect` but got `Optional[str]`.",
    "message": " Expected `str` for 1st parameter `hostname` to call `SSHClient.connect` but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 76,
    "warning_line": "        hostname=instance.public_ip,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from logging import DEBUG, ERROR\nfrom typing import Dict, Iterator, List, Optional, Tuple\n\nfrom paramiko.client import SSHClient\nfrom paramiko.sftp_attr import SFTPAttributes\n",
        "source_code_len": 175,
        "target_code": "from logging import DEBUG, ERROR\nfrom typing import Dict, Iterator, List, Optional, Tuple, Type, Union, cast\n\nfrom paramiko.client import MissingHostKeyPolicy, SSHClient\nfrom paramiko.sftp_attr import SFTPAttributes\n",
        "target_code_len": 216,
        "diff_format": "@@ -19,5 +19,5 @@\n from logging import DEBUG, ERROR\n-from typing import Dict, Iterator, List, Optional, Tuple\n-\n-from paramiko.client import SSHClient\n+from typing import Dict, Iterator, List, Optional, Tuple, Type, Union, cast\n+\n+from paramiko.client import MissingHostKeyPolicy, SSHClient\n from paramiko.sftp_attr import SFTPAttributes\n",
        "source_code_with_indent": "from logging import DEBUG, ERROR\nfrom typing import Dict, Iterator, List, Optional, Tuple\n\nfrom paramiko.client import SSHClient\nfrom paramiko.sftp_attr import SFTPAttributes\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from logging import DEBUG, ERROR\nfrom typing import Dict, Iterator, List, Optional, Tuple, Type, Union, cast\n\nfrom paramiko.client import MissingHostKeyPolicy, SSHClient\nfrom paramiko.sftp_attr import SFTPAttributes\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    client = SSHClient()\n    client.set_missing_host_key_policy(IgnoreHostKeyPolicy)\n    client.connect(\n        hostname=instance.public_ip,\n        port=instance.ssh_port,\n        username=username,\n",
        "source_code_len": 202,
        "target_code": "\n    instance_ssh_port: int = cast(int, instance.ssh_port)\n    ignore_host_key_policy: Union[\n        Type[MissingHostKeyPolicy], MissingHostKeyPolicy\n    ] = cast(\n        Union[Type[MissingHostKeyPolicy], MissingHostKeyPolicy], IgnoreHostKeyPolicy\n    )\n\n    client = SSHClient()\n    client.set_missing_host_key_policy(ignore_host_key_policy)\n    client.connect(\n        hostname=str(instance.public_ip),\n        port=instance_ssh_port,\n        username=username,\n",
        "target_code_len": 466,
        "diff_format": "@@ -72,7 +72,14 @@\n \n+    instance_ssh_port: int = cast(int, instance.ssh_port)\n+    ignore_host_key_policy: Union[\n+        Type[MissingHostKeyPolicy], MissingHostKeyPolicy\n+    ] = cast(\n+        Union[Type[MissingHostKeyPolicy], MissingHostKeyPolicy], IgnoreHostKeyPolicy\n+    )\n+\n     client = SSHClient()\n-    client.set_missing_host_key_policy(IgnoreHostKeyPolicy)\n+    client.set_missing_host_key_policy(ignore_host_key_policy)\n     client.connect(\n-        hostname=instance.public_ip,\n-        port=instance.ssh_port,\n+        hostname=str(instance.public_ip),\n+        port=instance_ssh_port,\n         username=username,\n",
        "source_code_with_indent": "\n    client = SSHClient()\n    client.set_missing_host_key_policy(IgnoreHostKeyPolicy)\n    client.connect(\n        hostname=instance.public_ip,\n        port=instance.ssh_port,\n        username=username,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    instance_ssh_port: int = cast(int, instance.ssh_port)\n    ignore_host_key_policy: Union[\n        Type[MissingHostKeyPolicy], MissingHostKeyPolicy\n    ] = cast(\n        Union[Type[MissingHostKeyPolicy], MissingHostKeyPolicy], IgnoreHostKeyPolicy\n    )\n\n    client = SSHClient()\n    client.set_missing_host_key_policy(ignore_host_key_policy)\n    client.connect(\n        hostname=str(instance.public_ip),\n        port=instance_ssh_port,\n        username=username,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "adap/flower",
    "commit": "38cda146d8ab2ab4f36bd0dbac02210a63c06532",
    "filename": "src/py/flwr_experimental/ops/cluster.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/adap-flower/src/py/flwr_experimental/ops/cluster.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/py/flwr_experimental/ops/cluster.py:77:8 Incompatible parameter type [6]: Expected `int` for 2nd parameter `port` to call `SSHClient.connect` but got `Optional[int]`.",
    "message": " Expected `int` for 2nd parameter `port` to call `SSHClient.connect` but got `Optional[int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 77,
    "warning_line": "        port=instance.ssh_port,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from logging import DEBUG, ERROR\nfrom typing import Dict, Iterator, List, Optional, Tuple\n\nfrom paramiko.client import SSHClient\nfrom paramiko.sftp_attr import SFTPAttributes\n",
        "source_code_len": 175,
        "target_code": "from logging import DEBUG, ERROR\nfrom typing import Dict, Iterator, List, Optional, Tuple, Type, Union, cast\n\nfrom paramiko.client import MissingHostKeyPolicy, SSHClient\nfrom paramiko.sftp_attr import SFTPAttributes\n",
        "target_code_len": 216,
        "diff_format": "@@ -19,5 +19,5 @@\n from logging import DEBUG, ERROR\n-from typing import Dict, Iterator, List, Optional, Tuple\n-\n-from paramiko.client import SSHClient\n+from typing import Dict, Iterator, List, Optional, Tuple, Type, Union, cast\n+\n+from paramiko.client import MissingHostKeyPolicy, SSHClient\n from paramiko.sftp_attr import SFTPAttributes\n",
        "source_code_with_indent": "from logging import DEBUG, ERROR\nfrom typing import Dict, Iterator, List, Optional, Tuple\n\nfrom paramiko.client import SSHClient\nfrom paramiko.sftp_attr import SFTPAttributes\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from logging import DEBUG, ERROR\nfrom typing import Dict, Iterator, List, Optional, Tuple, Type, Union, cast\n\nfrom paramiko.client import MissingHostKeyPolicy, SSHClient\nfrom paramiko.sftp_attr import SFTPAttributes\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    client = SSHClient()\n    client.set_missing_host_key_policy(IgnoreHostKeyPolicy)\n    client.connect(\n        hostname=instance.public_ip,\n        port=instance.ssh_port,\n        username=username,\n",
        "source_code_len": 202,
        "target_code": "\n    instance_ssh_port: int = cast(int, instance.ssh_port)\n    ignore_host_key_policy: Union[\n        Type[MissingHostKeyPolicy], MissingHostKeyPolicy\n    ] = cast(\n        Union[Type[MissingHostKeyPolicy], MissingHostKeyPolicy], IgnoreHostKeyPolicy\n    )\n\n    client = SSHClient()\n    client.set_missing_host_key_policy(ignore_host_key_policy)\n    client.connect(\n        hostname=str(instance.public_ip),\n        port=instance_ssh_port,\n        username=username,\n",
        "target_code_len": 466,
        "diff_format": "@@ -72,7 +72,14 @@\n \n+    instance_ssh_port: int = cast(int, instance.ssh_port)\n+    ignore_host_key_policy: Union[\n+        Type[MissingHostKeyPolicy], MissingHostKeyPolicy\n+    ] = cast(\n+        Union[Type[MissingHostKeyPolicy], MissingHostKeyPolicy], IgnoreHostKeyPolicy\n+    )\n+\n     client = SSHClient()\n-    client.set_missing_host_key_policy(IgnoreHostKeyPolicy)\n+    client.set_missing_host_key_policy(ignore_host_key_policy)\n     client.connect(\n-        hostname=instance.public_ip,\n-        port=instance.ssh_port,\n+        hostname=str(instance.public_ip),\n+        port=instance_ssh_port,\n         username=username,\n",
        "source_code_with_indent": "\n    client = SSHClient()\n    client.set_missing_host_key_policy(IgnoreHostKeyPolicy)\n    client.connect(\n        hostname=instance.public_ip,\n        port=instance.ssh_port,\n        username=username,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    instance_ssh_port: int = cast(int, instance.ssh_port)\n    ignore_host_key_policy: Union[\n        Type[MissingHostKeyPolicy], MissingHostKeyPolicy\n    ] = cast(\n        Union[Type[MissingHostKeyPolicy], MissingHostKeyPolicy], IgnoreHostKeyPolicy\n    )\n\n    client = SSHClient()\n    client.set_missing_host_key_policy(ignore_host_key_policy)\n    client.connect(\n        hostname=str(instance.public_ip),\n        port=instance_ssh_port,\n        username=username,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "adap/flower",
    "commit": "38cda146d8ab2ab4f36bd0dbac02210a63c06532",
    "filename": "src/py/flwr_experimental/ops/cluster.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/adap-flower/src/py/flwr_experimental/ops/cluster.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/py/flwr_experimental/ops/cluster.py:270:8 Incompatible return type [7]: Expected `Tuple[str, str]` but got `Tuple[List[typing.Any], List[typing.Any]]`.",
    "message": " Expected `Tuple[str, str]` but got `Tuple[List[typing.Any], List[typing.Any]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 270,
    "warning_line": "        return stdout, stderr",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nExecInfo = Tuple[str, str]\n\n",
        "source_code_len": 29,
        "target_code": "\nExecInfo = Tuple[List[str], List[str]]\n\n",
        "target_code_len": 41,
        "diff_format": "@@ -29,3 +29,3 @@\n \n-ExecInfo = Tuple[str, str]\n+ExecInfo = Tuple[List[str], List[str]]\n \n",
        "source_code_with_indent": "\nExecInfo = Tuple[str, str]\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nExecInfo = Tuple[List[str], List[str]]\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]