[
  {
    "project": "spesmilo/electrum",
    "commit": "1af225015a19e0697f3ca31535d74f6f646ea7ac",
    "filename": "electrum/bitcoin.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/spesmilo-electrum/electrum/bitcoin.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrum/bitcoin.py:436:38 Invalid type [31]: Expression `(str, bytes, bool)` is not a valid type.",
    "message": " Expression `(str, bytes, bool)` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 436,
    "warning_line": "def deserialize_privkey(key: str) -> (str, bytes, bool):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import hashlib\nfrom typing import List\n\n",
        "source_code_len": 40,
        "target_code": "import hashlib\nfrom typing import List, Tuple\n\n",
        "target_code_len": 47,
        "diff_format": "@@ -26,3 +26,3 @@\n import hashlib\n-from typing import List\n+from typing import List, Tuple\n \n",
        "source_code_with_indent": "import hashlib\nfrom typing import List\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import hashlib\nfrom typing import List, Tuple\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef deserialize_privkey(key: str) -> (str, bytes, bool):\n    if is_minikey(key):\n",
        "source_code_len": 82,
        "target_code": "\ndef deserialize_privkey(key: str) -> Tuple[str, bytes, bool]:\n    if is_minikey(key):\n",
        "target_code_len": 87,
        "diff_format": "@@ -435,3 +435,3 @@\n \n-def deserialize_privkey(key: str) -> (str, bytes, bool):\n+def deserialize_privkey(key: str) -> Tuple[str, bytes, bool]:\n     if is_minikey(key):\n",
        "source_code_with_indent": "\n<DED><DED>def deserialize_privkey(key: str) -> (str, bytes, bool):\n    <IND>if is_minikey(key):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED><DED>def deserialize_privkey(key: str) -> Tuple[str, bytes, bool]:\n    <IND>if is_minikey(key):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "spesmilo/electrum",
    "commit": "1af225015a19e0697f3ca31535d74f6f646ea7ac",
    "filename": "electrum/ecc.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/spesmilo-electrum/electrum/ecc.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrum/ecc.py:113:33 Invalid type [31]: Expression `(int, int)` is not a valid type.",
    "message": " Expression `(int, int)` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 113,
    "warning_line": "def ser_to_point(ser: bytes) -> (int, int):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import base64\nimport hmac\nimport hashlib\nfrom typing import Union\n\n\n",
        "source_code_len": 68,
        "target_code": "import base64\nimport hashlib\nfrom typing import Union, Tuple\n\n",
        "target_code_len": 62,
        "diff_format": "@@ -26,6 +26,4 @@\n import base64\n-import hmac\n import hashlib\n-from typing import Union\n-\n+from typing import Union, Tuple\n \n",
        "source_code_with_indent": "import base64\nimport hmac\nimport hashlib\nfrom typing import Union\n\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import base64\nimport hashlib\nfrom typing import Union, Tuple\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef ser_to_point(ser: bytes) -> (int, int):\n    if ser[0] not in (0x02, 0x03, 0x04):\n",
        "source_code_len": 86,
        "target_code": "\ndef ser_to_point(ser: bytes) -> Tuple[int, int]:\n    if ser[0] not in (0x02, 0x03, 0x04):\n",
        "target_code_len": 91,
        "diff_format": "@@ -112,3 +110,3 @@\n \n-def ser_to_point(ser: bytes) -> (int, int):\n+def ser_to_point(ser: bytes) -> Tuple[int, int]:\n     if ser[0] not in (0x02, 0x03, 0x04):\n",
        "source_code_with_indent": "\n<DED>def ser_to_point(ser: bytes) -> (int, int):\n    <IND>if ser[0] not in (0x02, 0x03, 0x04):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def ser_to_point(ser: bytes) -> Tuple[int, int]:\n    <IND>if ser[0] not in (0x02, 0x03, 0x04):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "spesmilo/electrum",
    "commit": "1af225015a19e0697f3ca31535d74f6f646ea7ac",
    "filename": "electrum/ecc.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/spesmilo-electrum/electrum/ecc.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrum/ecc.py:230:24 Invalid type [31]: Expression `(int, int)` is not a valid type.",
    "message": " Expression `(int, int)` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 230,
    "warning_line": "    def point(self) -> (int, int):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import base64\nimport hmac\nimport hashlib\nfrom typing import Union\n\n\n",
        "source_code_len": 68,
        "target_code": "import base64\nimport hashlib\nfrom typing import Union, Tuple\n\n",
        "target_code_len": 62,
        "diff_format": "@@ -26,6 +26,4 @@\n import base64\n-import hmac\n import hashlib\n-from typing import Union\n-\n+from typing import Union, Tuple\n \n",
        "source_code_with_indent": "import base64\nimport hmac\nimport hashlib\nfrom typing import Union\n\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import base64\nimport hashlib\nfrom typing import Union, Tuple\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def point(self) -> (int, int):\n        return self._pubkey.point.x(), self._pubkey.point.y()\n",
        "source_code_len": 98,
        "target_code": "\n    def point(self) -> Tuple[int, int]:\n        return self._pubkey.point.x(), self._pubkey.point.y()\n",
        "target_code_len": 103,
        "diff_format": "@@ -229,3 +227,3 @@\n \n-    def point(self) -> (int, int):\n+    def point(self) -> Tuple[int, int]:\n         return self._pubkey.point.x(), self._pubkey.point.y()\n",
        "source_code_with_indent": "\n    <DED>def point(self) -> (int, int):\n        <IND>return self._pubkey.point.x(), self._pubkey.point.y()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def point(self) -> Tuple[int, int]:\n        <IND>return self._pubkey.point.x(), self._pubkey.point.y()\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "spesmilo/electrum",
    "commit": "1af225015a19e0697f3ca31535d74f6f646ea7ac",
    "filename": "electrum/gui/qt/installwizard.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/spesmilo-electrum/electrum/gui/qt/installwizard.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrum/gui/qt/installwizard.py:509:56 Invalid type [31]: Expression `(str, str)` is not a valid type.",
    "message": " Expression `(str, str)` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 509,
    "warning_line": "                               test_text, run_next) -> (str, str):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import traceback\n\n",
        "source_code_len": 18,
        "target_code": "import traceback\nfrom typing import Tuple\n\n",
        "target_code_len": 43,
        "diff_format": "@@ -5,2 +5,3 @@\n import traceback\n+from typing import Tuple\n \n",
        "source_code_with_indent": "import traceback\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import traceback\nfrom typing import Tuple\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def choice_and_line_dialog(self, title, message1, choices, message2,\n                               test_text, run_next) -> (str, str):\n        vbox = QVBoxLayout()\n",
        "source_code_len": 169,
        "target_code": "    def choice_and_line_dialog(self, title, message1, choices, message2,\n                               test_text, run_next) -> Tuple[str, str]:\n        vbox = QVBoxLayout()\n",
        "target_code_len": 174,
        "diff_format": "@@ -508,3 +509,3 @@\n     def choice_and_line_dialog(self, title, message1, choices, message2,\n-                               test_text, run_next) -> (str, str):\n+                               test_text, run_next) -> Tuple[str, str]:\n         vbox = QVBoxLayout()\n",
        "source_code_with_indent": "    def choice_and_line_dialog(self, title, message1, choices, message2,\n                               test_text, run_next) -> (str, str):\n        <IND>vbox = QVBoxLayout()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def choice_and_line_dialog(self, title, message1, choices, message2,\n                               test_text, run_next) -> Tuple[str, str]:\n        <IND>vbox = QVBoxLayout()\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]