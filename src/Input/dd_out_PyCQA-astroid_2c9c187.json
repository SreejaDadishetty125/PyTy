[
  {
    "project": "PyCQA/astroid",
    "commit": "2c9c187b1c47adc4661246b922e3a41dc0756396",
    "filename": "astroid/builder.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/PyCQA-astroid/astroid/builder.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "astroid/builder.py:267:38 Incompatible parameter type [6]: Expected `typing.Optional[List[str]]` for 3rd parameter `path` to call `nodes.scoped_nodes.Module.__init__` but got `str`.",
    "message": " Expected `typing.Optional[List[str]]` for 3rd parameter `path` to call `nodes.scoped_nodes.Module.__init__` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 267,
    "warning_line": "    return nodes.Module(name, doc=\"\", path=path, package=True)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef build_namespace_package_module(name, path: str) -> nodes.Module:\n    return nodes.Module(name, doc=\"\", path=path, package=True)\n",
        "source_code_len": 133,
        "target_code": "\ndef build_namespace_package_module(name: str, path: List[str]) -> nodes.Module:\n    return nodes.Module(name, doc=\"\", path=path, package=True)\n",
        "target_code_len": 144,
        "diff_format": "@@ -265,3 +265,3 @@\n \n-def build_namespace_package_module(name, path: str) -> nodes.Module:\n+def build_namespace_package_module(name: str, path: List[str]) -> nodes.Module:\n     return nodes.Module(name, doc=\"\", path=path, package=True)\n",
        "source_code_with_indent": "\n<DED><DED><DED>def build_namespace_package_module(name, path: str) -> nodes.Module:\n    <IND>return nodes.Module(name, doc=\"\", path=path, package=True)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED><DED><DED>def build_namespace_package_module(name: str, path: List[str]) -> nodes.Module:\n    <IND>return nodes.Module(name, doc=\"\", path=path, package=True)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]