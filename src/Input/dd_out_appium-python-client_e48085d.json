[
  {
    "project": "appium/python-client",
    "commit": "e48085d27968a93d9cfb5d86964ac84198b52214",
    "filename": "appium/webdriver/webdriver.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/appium-python-client/appium/webdriver/webdriver.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "appium/webdriver/webdriver.py:398:8 Incompatible return type [7]: Expected `Variable[T (bound to WebDriver)]` but got `WebDriver`.",
    "message": " Expected `Variable[T (bound to WebDriver)]` but got `WebDriver`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 398,
    "warning_line": "        return self",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "        return MobileSwitchTo(self)\n\n    def add_command(self, method: CommandMethod, url: str, name: str) -> T:\n        \"\"\"Add a custom command as 'name'\n\n        Args:\n            method: The method of HTTP request. Available methods are CommandMethod.\n            url: The url is URL template as https://www.w3.org/TR/webdriver/#endpoints.\n                 `$sessionId` is a placeholder of current session id.\n                 Other placeholders can be specified with `$` prefix like `$id`.\n                 Then, `{'id': 'some id'}` argument in `execute_custom_command` replaces\n                 the `$id` with the value, `some id`, in the request.\n            name: The name of a command to call in `execute_custom_command`.\n\n        Returns:\n            `appium.webdriver.webdriver.WebDriver`: Self instance\n\n        Raises:\n            ValueError\n\n        Examples:\n            Define 'test_command' as GET and 'session/$sessionId/path/to/custom/url'\n\n            >>> from appium.webdriver.command_method import CommandMethod\n            >>> driver.add_command(\n                    method=CommandMethod.GET,\n                    url='session/$sessionId/path/to/custom/url',\n                    name='test_command'\n                )\n\n        \"\"\"\n        if name in self.command_executor._commands:\n            raise ValueError(\"{} is already defined\".format(name))\n\n        if not isinstance(method, CommandMethod):\n            raise ValueError(\n                \"'{}' is invalid. Valid method should be one of '{}'.\".format(method, CommandMethod.__name__)\n            )\n\n        self.command_executor._commands[name] = (method.value, url)\n        return self\n\n    def execute_custom_command(self, name: str, args: Dict = {}) -> Any:\n        \"\"\"Execute a custom command defined as 'name' with args command.\n\n        Args:\n            name: The name of command defined by `add_command`.\n            args: The argument as this command body\n\n        Returns:\n            'value' JSON object field in the response body.\n\n        Raises:\n            ValueError, selenium.common.exceptions.WebDriverException\n\n        Examples:\n            Calls 'test_command' command without arguments.\n\n            >>> from appium.webdriver.command_method import CommandMethod\n            >>> driver.add_command(\n                    method=CommandMethod.GET,\n                    url='session/$sessionId/path/to/custom/url',\n                    name='test_command'\n                )\n            >>> result = driver.execute_custom_command('test_command')\n\n            Calls 'test_command' command with arguments.\n\n            >>> from appium.webdriver.command_method import CommandMethod\n            >>> driver.add_command(\n                    method=CommandMethod.POST,\n                    url='session/$sessionId/path/to/custom/url',\n                    name='test_command'\n                )\n            >>> result = driver.execute_custom_command('test_command', {'dummy': 'test argument'})\n\n            Calls 'test_command' command with arguments, and the path has 'element id'.\n            The '$id' will be 'element id' by 'id' key in the given argument.\n\n            >>> from appium.webdriver.command_method import CommandMethod\n            >>> driver.add_command(\n                    method=CommandMethod.POST,\n                    url='session/$sessionId/path/to/$id/url',\n                    name='test_command'\n                )\n            >>> result = driver.execute_custom_command('test_command', {'id': 'element id', 'dummy': 'test argument'})\n\n        \"\"\"\n        if name not in self.command_executor._commands:\n            raise ValueError(\"No {} custom command. Please add it by 'add_command'\".format(name))\n        return self.execute(name, args)['value']\n\n",
        "source_code_len": 3756,
        "target_code": "        return MobileSwitchTo(self)\n\n",
        "target_code_len": 37,
        "diff_format": "@@ -358,92 +489,2 @@\n         return MobileSwitchTo(self)\n-\n-    def add_command(self, method: CommandMethod, url: str, name: str) -> T:\n-        \"\"\"Add a custom command as 'name'\n-\n-        Args:\n-            method: The method of HTTP request. Available methods are CommandMethod.\n-            url: The url is URL template as https://www.w3.org/TR/webdriver/#endpoints.\n-                 `$sessionId` is a placeholder of current session id.\n-                 Other placeholders can be specified with `$` prefix like `$id`.\n-                 Then, `{'id': 'some id'}` argument in `execute_custom_command` replaces\n-                 the `$id` with the value, `some id`, in the request.\n-            name: The name of a command to call in `execute_custom_command`.\n-\n-        Returns:\n-            `appium.webdriver.webdriver.WebDriver`: Self instance\n-\n-        Raises:\n-            ValueError\n-\n-        Examples:\n-            Define 'test_command' as GET and 'session/$sessionId/path/to/custom/url'\n-\n-            >>> from appium.webdriver.command_method import CommandMethod\n-            >>> driver.add_command(\n-                    method=CommandMethod.GET,\n-                    url='session/$sessionId/path/to/custom/url',\n-                    name='test_command'\n-                )\n-\n-        \"\"\"\n-        if name in self.command_executor._commands:\n-            raise ValueError(\"{} is already defined\".format(name))\n-\n-        if not isinstance(method, CommandMethod):\n-            raise ValueError(\n-                \"'{}' is invalid. Valid method should be one of '{}'.\".format(method, CommandMethod.__name__)\n-            )\n-\n-        self.command_executor._commands[name] = (method.value, url)\n-        return self\n-\n-    def execute_custom_command(self, name: str, args: Dict = {}) -> Any:\n-        \"\"\"Execute a custom command defined as 'name' with args command.\n-\n-        Args:\n-            name: The name of command defined by `add_command`.\n-            args: The argument as this command body\n-\n-        Returns:\n-            'value' JSON object field in the response body.\n-\n-        Raises:\n-            ValueError, selenium.common.exceptions.WebDriverException\n-\n-        Examples:\n-            Calls 'test_command' command without arguments.\n-\n-            >>> from appium.webdriver.command_method import CommandMethod\n-            >>> driver.add_command(\n-                    method=CommandMethod.GET,\n-                    url='session/$sessionId/path/to/custom/url',\n-                    name='test_command'\n-                )\n-            >>> result = driver.execute_custom_command('test_command')\n-\n-            Calls 'test_command' command with arguments.\n-\n-            >>> from appium.webdriver.command_method import CommandMethod\n-            >>> driver.add_command(\n-                    method=CommandMethod.POST,\n-                    url='session/$sessionId/path/to/custom/url',\n-                    name='test_command'\n-                )\n-            >>> result = driver.execute_custom_command('test_command', {'dummy': 'test argument'})\n-\n-            Calls 'test_command' command with arguments, and the path has 'element id'.\n-            The '$id' will be 'element id' by 'id' key in the given argument.\n-\n-            >>> from appium.webdriver.command_method import CommandMethod\n-            >>> driver.add_command(\n-                    method=CommandMethod.POST,\n-                    url='session/$sessionId/path/to/$id/url',\n-                    name='test_command'\n-                )\n-            >>> result = driver.execute_custom_command('test_command', {'id': 'element id', 'dummy': 'test argument'})\n-\n-        \"\"\"\n-        if name not in self.command_executor._commands:\n-            raise ValueError(\"No {} custom command. Please add it by 'add_command'\".format(name))\n-        return self.execute(name, args)['value']\n \n",
        "source_code_with_indent": "        return MobileSwitchTo(self)\n\n    <DED>def add_command(self, method: CommandMethod, url: str, name: str) -> T:\n        <IND>\"\"\"Add a custom command as 'name'\n\n        Args:\n            method: The method of HTTP request. Available methods are CommandMethod.\n            url: The url is URL template as https://www.w3.org/TR/webdriver/#endpoints.\n                 `$sessionId` is a placeholder of current session id.\n                 Other placeholders can be specified with `$` prefix like `$id`.\n                 Then, `{'id': 'some id'}` argument in `execute_custom_command` replaces\n                 the `$id` with the value, `some id`, in the request.\n            name: The name of a command to call in `execute_custom_command`.\n\n        Returns:\n            `appium.webdriver.webdriver.WebDriver`: Self instance\n\n        Raises:\n            ValueError\n\n        Examples:\n            Define 'test_command' as GET and 'session/$sessionId/path/to/custom/url'\n\n            >>> from appium.webdriver.command_method import CommandMethod\n            >>> driver.add_command(\n                    method=CommandMethod.GET,\n                    url='session/$sessionId/path/to/custom/url',\n                    name='test_command'\n                )\n\n        \"\"\"\n        if name in self.command_executor._commands:\n            <IND>raise ValueError(\"{} is already defined\".format(name))\n\n        <DED>if not isinstance(method, CommandMethod):\n            <IND>raise ValueError(\n                \"'{}' is invalid. Valid method should be one of '{}'.\".format(method, CommandMethod.__name__)\n            )\n\n        <DED>self.command_executor._commands[name] = (method.value, url)\n        return self\n\n    <DED>def execute_custom_command(self, name: str, args: Dict = {}) -> Any:\n        <IND>\"\"\"Execute a custom command defined as 'name' with args command.\n\n        Args:\n            name: The name of command defined by `add_command`.\n            args: The argument as this command body\n\n        Returns:\n            'value' JSON object field in the response body.\n\n        Raises:\n            ValueError, selenium.common.exceptions.WebDriverException\n\n        Examples:\n            Calls 'test_command' command without arguments.\n\n            >>> from appium.webdriver.command_method import CommandMethod\n            >>> driver.add_command(\n                    method=CommandMethod.GET,\n                    url='session/$sessionId/path/to/custom/url',\n                    name='test_command'\n                )\n            >>> result = driver.execute_custom_command('test_command')\n\n            Calls 'test_command' command with arguments.\n\n            >>> from appium.webdriver.command_method import CommandMethod\n            >>> driver.add_command(\n                    method=CommandMethod.POST,\n                    url='session/$sessionId/path/to/custom/url',\n                    name='test_command'\n                )\n            >>> result = driver.execute_custom_command('test_command', {'dummy': 'test argument'})\n\n            Calls 'test_command' command with arguments, and the path has 'element id'.\n            The '$id' will be 'element id' by 'id' key in the given argument.\n\n            >>> from appium.webdriver.command_method import CommandMethod\n            >>> driver.add_command(\n                    method=CommandMethod.POST,\n                    url='session/$sessionId/path/to/$id/url',\n                    name='test_command'\n                )\n            >>> result = driver.execute_custom_command('test_command', {'id': 'element id', 'dummy': 'test argument'})\n\n        \"\"\"\n        if name not in self.command_executor._commands:\n            <IND>raise ValueError(\"No {} custom command. Please add it by 'add_command'\".format(name))\n        <DED>return self.execute(name, args)['value']\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        return MobileSwitchTo(self)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]