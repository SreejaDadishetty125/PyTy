[
  {
    "project": "bokeh/bokeh",
    "commit": "619099e933b49a4b04bf98e6945f45d39229828f",
    "filename": "bokeh/protocol/message.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/bokeh-bokeh/bokeh/protocol/message.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bokeh/protocol/message.py:204:8 Incompatible attribute type [8]: Attribute `_header_json` declared in class `Message` has type `typing.Optional[str]` but is used as type `typing.Union[bytes, str]`.",
    "message": " Attribute `_header_json` declared in class `Message` has type `typing.Optional[str]` but is used as type `typing.Union[bytes, str]`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 204,
    "warning_line": "        msg._header_json = header_json",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @classmethod\n    def assemble(cls, header_json: Fragment, metadata_json: Fragment, content_json: Fragment) -> Message[Content]:\n        ''' Creates a new message, assembled from JSON fragments.\n",
        "source_code_len": 198,
        "target_code": "    @classmethod\n    def assemble(cls, header_json: str, metadata_json: str, content_json: str) -> Message[Content]:\n        ''' Creates a new message, assembled from JSON fragments.\n",
        "target_code_len": 183,
        "diff_format": "@@ -168,3 +168,3 @@\n     @classmethod\n-    def assemble(cls, header_json: Fragment, metadata_json: Fragment, content_json: Fragment) -> Message[Content]:\n+    def assemble(cls, header_json: str, metadata_json: str, content_json: str) -> Message[Content]:\n         ''' Creates a new message, assembled from JSON fragments.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "    <DED>@classmethod\n    def assemble(cls, header_json: Fragment, metadata_json: Fragment, content_json: Fragment) -> Message[Content]:\n        <IND>",
        "target_code_with_indent": "    <DED>@classmethod\n    def assemble(cls, header_json: str, metadata_json: str, content_json: str) -> Message[Content]:\n        <IND>"
      }
    ]
  },
  {
    "project": "bokeh/bokeh",
    "commit": "619099e933b49a4b04bf98e6945f45d39229828f",
    "filename": "bokeh/protocol/message.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/bokeh-bokeh/bokeh/protocol/message.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bokeh/protocol/message.py:205:8 Incompatible attribute type [8]: Attribute `_metadata_json` declared in class `Message` has type `typing.Optional[str]` but is used as type `typing.Union[bytes, str]`.",
    "message": " Attribute `_metadata_json` declared in class `Message` has type `typing.Optional[str]` but is used as type `typing.Union[bytes, str]`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 205,
    "warning_line": "        msg._metadata_json = metadata_json",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @classmethod\n    def assemble(cls, header_json: Fragment, metadata_json: Fragment, content_json: Fragment) -> Message[Content]:\n        ''' Creates a new message, assembled from JSON fragments.\n",
        "source_code_len": 198,
        "target_code": "    @classmethod\n    def assemble(cls, header_json: str, metadata_json: str, content_json: str) -> Message[Content]:\n        ''' Creates a new message, assembled from JSON fragments.\n",
        "target_code_len": 183,
        "diff_format": "@@ -168,3 +168,3 @@\n     @classmethod\n-    def assemble(cls, header_json: Fragment, metadata_json: Fragment, content_json: Fragment) -> Message[Content]:\n+    def assemble(cls, header_json: str, metadata_json: str, content_json: str) -> Message[Content]:\n         ''' Creates a new message, assembled from JSON fragments.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "    <DED>@classmethod\n    def assemble(cls, header_json: Fragment, metadata_json: Fragment, content_json: Fragment) -> Message[Content]:\n        <IND>",
        "target_code_with_indent": "    <DED>@classmethod\n    def assemble(cls, header_json: str, metadata_json: str, content_json: str) -> Message[Content]:\n        <IND>"
      }
    ]
  },
  {
    "project": "bokeh/bokeh",
    "commit": "619099e933b49a4b04bf98e6945f45d39229828f",
    "filename": "bokeh/protocol/message.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/bokeh-bokeh/bokeh/protocol/message.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bokeh/protocol/message.py:206:8 Incompatible attribute type [8]: Attribute `_content_json` declared in class `Message` has type `typing.Optional[str]` but is used as type `typing.Union[bytes, str]`.",
    "message": " Attribute `_content_json` declared in class `Message` has type `typing.Optional[str]` but is used as type `typing.Union[bytes, str]`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 206,
    "warning_line": "        msg._content_json = content_json",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @classmethod\n    def assemble(cls, header_json: Fragment, metadata_json: Fragment, content_json: Fragment) -> Message[Content]:\n        ''' Creates a new message, assembled from JSON fragments.\n",
        "source_code_len": 198,
        "target_code": "    @classmethod\n    def assemble(cls, header_json: str, metadata_json: str, content_json: str) -> Message[Content]:\n        ''' Creates a new message, assembled from JSON fragments.\n",
        "target_code_len": 183,
        "diff_format": "@@ -168,3 +168,3 @@\n     @classmethod\n-    def assemble(cls, header_json: Fragment, metadata_json: Fragment, content_json: Fragment) -> Message[Content]:\n+    def assemble(cls, header_json: str, metadata_json: str, content_json: str) -> Message[Content]:\n         ''' Creates a new message, assembled from JSON fragments.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "    <DED>@classmethod\n    def assemble(cls, header_json: Fragment, metadata_json: Fragment, content_json: Fragment) -> Message[Content]:\n        <IND>",
        "target_code_with_indent": "    <DED>@classmethod\n    def assemble(cls, header_json: str, metadata_json: str, content_json: str) -> Message[Content]:\n        <IND>"
      }
    ]
  },
  {
    "project": "bokeh/bokeh",
    "commit": "619099e933b49a4b04bf98e6945f45d39229828f",
    "filename": "bokeh/protocol/message.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/bokeh-bokeh/bokeh/protocol/message.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bokeh/protocol/message.py:272:37 Incompatible parameter type [6]: Expected `typing.Union[bytes, str]` for 1st positional only parameter to call `WebSocketClientConnectionWrapper.write_message` but got `BufferHeader`.",
    "message": " Expected `typing.Union[bytes, str]` for 1st positional only parameter to call `WebSocketClientConnectionWrapper.write_message` but got `BufferHeader`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 272,
    "warning_line": "            await conn.write_message(header, locked=locked)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nclass BufferHeader(TypedDict):\n    id: ID\n\n",
        "source_code_len": 44,
        "target_code": "\n# class BufferHeader(TypedDict):\n#     id: ID\nBufferHeader = str\n\n",
        "target_code_len": 67,
        "diff_format": "@@ -109,4 +108,5 @@\n \n-class BufferHeader(TypedDict):\n-    id: ID\n+# class BufferHeader(TypedDict):\n+#     id: ID\n+BufferHeader = str\n \n",
        "source_code_with_indent": "\n<DED>class BufferHeader(TypedDict):\n    <IND>id: ID\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n# class BufferHeader(TypedDict):\n#     id: ID\n<DED>BufferHeader = str\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "bokeh/bokeh",
    "commit": "619099e933b49a4b04bf98e6945f45d39229828f",
    "filename": "bokeh/protocol/messages/error.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/bokeh-bokeh/bokeh/protocol/messages/error.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bokeh/protocol/messages/error.py:75:11 Unsupported operand [58]: `in` is not supported for right operand type `error.Error`.",
    "message": " `in` is not supported for right operand type `error.Error`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 75,
    "warning_line": "        if \"traceback\" in self.content:"
  },
  {
    "project": "bokeh/bokeh",
    "commit": "619099e933b49a4b04bf98e6945f45d39229828f",
    "filename": "bokeh/protocol/receiver.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/bokeh-bokeh/bokeh/protocol/receiver.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "bokeh/protocol/receiver.py:132:8 Incompatible return type [7]: Expected `Message[typing.Any]` but got `typing.Optional[Message[typing.Any]]`.",
    "message": " Expected `Message[typing.Any]` but got `typing.Optional[Message[typing.Any]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 132,
    "warning_line": "        return self._message",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        self._protocol = protocol\n        self._current_consumer = self._HEADER\n        self._message = None\n        self._buf_header = None\n\n    async def consume(self, fragment: Fragment) -> Message[Any]:\n        ''' Consume individual protocol message fragments.\n",
        "source_code_len": 266,
        "target_code": "        self._protocol = protocol\n        self._current_consumer = self._HEADER  # type: ignore[assignment] # https://github.com/python/mypy/issues/2427\n        self._message = None\n        self._partial = None\n        self._buf_header = None\n\n    async def consume(self, fragment: Fragment) -> Message[Any]|None:\n        ''' Consume individual protocol message fragments.\n",
        "target_code_len": 373,
        "diff_format": "@@ -116,7 +118,8 @@\n         self._protocol = protocol\n-        self._current_consumer = self._HEADER\n+        self._current_consumer = self._HEADER  # type: ignore[assignment] # https://github.com/python/mypy/issues/2427\n         self._message = None\n+        self._partial = None\n         self._buf_header = None\n \n-    async def consume(self, fragment: Fragment) -> Message[Any]:\n+    async def consume(self, fragment: Fragment) -> Message[Any]|None:\n         ''' Consume individual protocol message fragments.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "        self._protocol = protocol\n        self._current_consumer = self._HEADER\n        self._message = None\n        self._buf_header = None\n\n    <DED>async def consume(self, fragment: Fragment) -> Message[Any]:\n        <IND>",
        "target_code_with_indent": "        self._protocol = protocol\n        self._current_consumer = self._HEADER  # type: ignore[assignment] # https://github.com/python/mypy/issues/2427\n        self._message = None\n        self._partial = None\n        self._buf_header = None\n\n    <DED>async def consume(self, fragment: Fragment) -> Message[Any]|None:\n        <IND>"
      }
    ]
  },
  {
    "project": "bokeh/bokeh",
    "commit": "619099e933b49a4b04bf98e6945f45d39229828f",
    "filename": "bokeh/protocol/receiver.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/bokeh-bokeh/bokeh/protocol/receiver.py",
    "file_hunks_size": 9,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bokeh/protocol/receiver.py:158:8 Incompatible attribute type [8]: Attribute `_buf_header` declared in class `Receiver` has type `typing.Optional[BufferHeader]` but is used as type `Union[bytes, str]`.",
    "message": " Attribute `_buf_header` declared in class `Receiver` has type `typing.Optional[BufferHeader]` but is used as type `Union[bytes, str]`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 158,
    "warning_line": "        self._buf_header = fragment"
  }
]