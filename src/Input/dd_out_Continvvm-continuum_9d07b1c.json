[
  {
    "project": "Continvvm/continuum",
    "commit": "9d07b1c1ce22d503d3c49bc46d026efe8a9e38c4",
    "filename": "clloader/datasets/base.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Continvvm-continuum/clloader/datasets/base.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "clloader/datasets/base.py:21:8 Incompatible return type [7]: Expected `List[int]` but got `None`.",
    "message": " Expected `List[int]` but got `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 21,
    "warning_line": "        return None",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @property\n    def class_order(self) -> List[int]:\n        return None\n",
        "source_code_len": 74,
        "target_code": "    @property\n    def class_order(self) -> Union[None, List[int]]:\n        return None\n",
        "target_code_len": 87,
        "diff_format": "@@ -19,3 +19,3 @@\n     @property\n-    def class_order(self) -> List[int]:\n+    def class_order(self) -> Union[None, List[int]]:\n         return None\n",
        "source_code_with_indent": "    <DED>@property\n    def class_order(self) -> List[int]:\n        <IND>return None\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@property\n    def class_order(self) -> Union[None, List[int]]:\n        <IND>return None\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Continvvm/continuum",
    "commit": "9d07b1c1ce22d503d3c49bc46d026efe8a9e38c4",
    "filename": "clloader/datasets/base.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Continvvm-continuum/clloader/datasets/base.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "clloader/datasets/base.py:101:8 Incompatible return type [7]: Expected `bool` but got `str`.",
    "message": " Expected `bool` but got `str`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 101,
    "warning_line": "        return self._data_type",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @property\n    def data_type(self) -> bool:\n        return self._data_type\n",
        "source_code_len": 78,
        "target_code": "    @property\n    def data_type(self) -> str:\n        return self._data_type\n",
        "target_code_len": 77,
        "diff_format": "@@ -99,3 +99,3 @@\n     @property\n-    def data_type(self) -> bool:\n+    def data_type(self) -> str:\n         return self._data_type\n",
        "source_code_with_indent": "    <DED>@property\n    def data_type(self) -> bool:\n        <IND>return self._data_type\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@property\n    def data_type(self) -> str:\n        <IND>return self._data_type\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Continvvm/continuum",
    "commit": "9d07b1c1ce22d503d3c49bc46d026efe8a9e38c4",
    "filename": "clloader/datasets/fellowship.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Continvvm-continuum/clloader/datasets/fellowship.py",
    "file_hunks_size": 5,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "clloader/datasets/fellowship.py:15:8 Incompatible variable type [9]: dataset_list is declared to have type `List[_ContinuumDataset]` but is used as type `None`.",
    "message": " dataset_list is declared to have type `List[_ContinuumDataset]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 15,
    "warning_line": "        dataset_list: List[_ContinuumDataset] = None"
  },
  {
    "project": "Continvvm/continuum",
    "commit": "9d07b1c1ce22d503d3c49bc46d026efe8a9e38c4",
    "filename": "clloader/datasets/fellowship.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Continvvm-continuum/clloader/datasets/fellowship.py",
    "file_hunks_size": 5,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "clloader/datasets/fellowship.py:19:25 Call error [29]: `_ContinuumDataset` is not a function.",
    "message": " `_ContinuumDataset` is not a function.",
    "rule_id": "Call error [29]",
    "warning_line_no": 19,
    "warning_line": "        self.datasets = [dataset(data_path, download) for dataset in dataset_list]"
  },
  {
    "project": "Continvvm/continuum",
    "commit": "9d07b1c1ce22d503d3c49bc46d026efe8a9e38c4",
    "filename": "clloader/datasets/fellowship.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Continvvm-continuum/clloader/datasets/fellowship.py",
    "file_hunks_size": 5,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "clloader/datasets/fellowship.py:42:46 Incompatible parameter type [6]: Expected `List[_ContinuumDataset]` for 3rd parameter `dataset_list` to call `Fellowship.__init__` but got `List[typing.Type[typing.Union[FashionMNIST, KMNIST, MNIST]]]`.",
    "message": " Expected `List[_ContinuumDataset]` for 3rd parameter `dataset_list` to call `Fellowship.__init__` but got `List[typing.Type[typing.Union[FashionMNIST, KMNIST, MNIST]]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 42,
    "warning_line": "        super().__init__(data_path, download, dataset_list=[MNIST, FashionMNIST, KMNIST])"
  },
  {
    "project": "Continvvm/continuum",
    "commit": "9d07b1c1ce22d503d3c49bc46d026efe8a9e38c4",
    "filename": "clloader/datasets/fellowship.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Continvvm-continuum/clloader/datasets/fellowship.py",
    "file_hunks_size": 5,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "clloader/datasets/fellowship.py:48:46 Incompatible parameter type [6]: Expected `List[_ContinuumDataset]` for 3rd parameter `dataset_list` to call `Fellowship.__init__` but got `List[typing.Type[typing.Union[CIFAR10, CIFAR100]]]`.",
    "message": " Expected `List[_ContinuumDataset]` for 3rd parameter `dataset_list` to call `Fellowship.__init__` but got `List[typing.Type[typing.Union[CIFAR10, CIFAR100]]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 48,
    "warning_line": "        super().__init__(data_path, download, dataset_list=[CIFAR10, CIFAR100])"
  },
  {
    "project": "Continvvm/continuum",
    "commit": "9d07b1c1ce22d503d3c49bc46d026efe8a9e38c4",
    "filename": "clloader/datasets/transformed.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Continvvm-continuum/clloader/datasets/transformed.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "clloader/datasets/transformed.py:109:4 Inconsistent override [14]: `clloader.datasets.transformed.RotatedMNIST._transform` overrides method defined in `PermutedMNIST` inconsistently. Could not find parameter `seed` in overriding signature.",
    "message": " `clloader.datasets.transformed.RotatedMNIST._transform` overrides method defined in `PermutedMNIST` inconsistently. Could not find parameter `seed` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 109,
    "warning_line": "    def _transform(self, x: np.ndarray, angle: int) -> np.ndarray:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _transform(self, x: np.ndarray, seed: int) -> np.ndarray:\n        # It's important to generate a new random state with a given seed\n",
        "source_code_len": 141,
        "target_code": "\n    def _transform(self, x: np.ndarray, value: int) -> np.ndarray:\n        # It's important to generate a new random state with a given seed\n",
        "target_code_len": 142,
        "diff_format": "@@ -72,3 +72,3 @@\n \n-    def _transform(self, x: np.ndarray, seed: int) -> np.ndarray:\n+    def _transform(self, x: np.ndarray, value: int) -> np.ndarray:\n         # It's important to generate a new random state with a given seed\n",
        "source_code_with_indent": "\n    <DED>def _transform(self, x: np.ndarray, seed: int) -> np.ndarray:\n        # It's important to generate a new random state with a given seed\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def _transform(self, x: np.ndarray, value: int) -> np.ndarray:\n        # It's important to generate a new random state with a given seed\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        # and also that train & test have the same transformation.\n        random_state = np.random.RandomState(seed=seed)\n        permutations = random_state.permutation(x.shape[1] * x.shape[2])\n",
        "source_code_len": 196,
        "target_code": "        # and also that train & test have the same transformation.\n        random_state = np.random.RandomState(seed=value)\n        permutations = random_state.permutation(x.shape[1] * x.shape[2])\n",
        "target_code_len": 197,
        "diff_format": "@@ -76,3 +76,3 @@\n         # and also that train & test have the same transformation.\n-        random_state = np.random.RandomState(seed=seed)\n+        random_state = np.random.RandomState(seed=value)\n         permutations = random_state.permutation(x.shape[1] * x.shape[2])\n",
        "source_code_with_indent": "        # and also that train & test have the same transformation.\n        <IND>random_state = np.random.RandomState(seed=seed)\n        permutations = random_state.permutation(x.shape[1] * x.shape[2])\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        # and also that train & test have the same transformation.\n        <IND>random_state = np.random.RandomState(seed=value)\n        permutations = random_state.permutation(x.shape[1] * x.shape[2])\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _transform(self, x: np.ndarray, angle: int) -> np.ndarray:\n        x_transformed = ndimage.rotate(x, angle=angle, axes=(2, 1), reshape=False)\n        return x_transformed\n",
        "source_code_len": 180,
        "target_code": "\n    def _transform(self, x: np.ndarray, value: int) -> np.ndarray:\n        x_transformed = ndimage.rotate(x, angle=value, axes=(2, 1), reshape=False)\n        return x_transformed\n",
        "target_code_len": 180,
        "diff_format": "@@ -108,4 +108,4 @@\n \n-    def _transform(self, x: np.ndarray, angle: int) -> np.ndarray:\n-        x_transformed = ndimage.rotate(x, angle=angle, axes=(2, 1), reshape=False)\n+    def _transform(self, x: np.ndarray, value: int) -> np.ndarray:\n+        x_transformed = ndimage.rotate(x, angle=value, axes=(2, 1), reshape=False)\n         return x_transformed\n",
        "source_code_with_indent": "\n    <DED>def _transform(self, x: np.ndarray, angle: int) -> np.ndarray:\n        <IND>x_transformed = ndimage.rotate(x, angle=angle, axes=(2, 1), reshape=False)\n        return x_transformed\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def _transform(self, x: np.ndarray, value: int) -> np.ndarray:\n        <IND>x_transformed = ndimage.rotate(x, angle=value, axes=(2, 1), reshape=False)\n        return x_transformed\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]