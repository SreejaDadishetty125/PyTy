[
  {
    "project": "goodboy/tractor",
    "commit": "3130a04c6109121729914307c2079cf670ae1104",
    "filename": "tractor/trionics/_mngrs.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/goodboy-tractor/tractor/trionics/_mngrs.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tractor/trionics/_mngrs.py:28:4 Incompatible return type [7]: Expected `Variable[T]` but got implicit return value of `None`.",
    "message": " Expected `Variable[T]` but got implicit return value of `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 28,
    "warning_line": "    async with mngr as value:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "'''\nfrom typing import AsyncContextManager\nfrom typing import TypeVar\nfrom contextlib import asynccontextmanager as acm\n",
        "source_code_len": 120,
        "target_code": "'''\nfrom typing import AsyncContextManager, AsyncGenerator\nfrom typing import TypeVar, Sequence\nfrom contextlib import asynccontextmanager as acm\n",
        "target_code_len": 146,
        "diff_format": "@@ -4,4 +4,4 @@\n '''\n-from typing import AsyncContextManager\n-from typing import TypeVar\n+from typing import AsyncContextManager, AsyncGenerator\n+from typing import TypeVar, Sequence\n from contextlib import asynccontextmanager as acm\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\nfrom typing import AsyncContextManager\nfrom typing import TypeVar\nfrom contextlib import asynccontextmanager as acm\n",
        "target_code_with_indent": "\nfrom typing import AsyncContextManager, AsyncGenerator\nfrom typing import TypeVar, Sequence\nfrom contextlib import asynccontextmanager as acm\n"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "async def _enter_and_wait(\n\n    mngr: AsyncContextManager[T],\n    to_yield: dict[int, T],\n    all_entered: trio.Event,\n    teardown_trigger: trio.Event,\n\n) -> T:\n    '''Open the async context manager deliver it's value\n",
        "source_code_len": 219,
        "target_code": "async def _enter_and_wait(\n    mngr: AsyncContextManager[T],\n    unwrapped: dict[int, T],\n    all_entered: trio.Event,\n    teardown_trigger: trio.Event,\n) -> None:\n    '''Open the async context manager deliver it's value\n",
        "target_code_len": 221,
        "diff_format": "@@ -16,9 +16,7 @@\n async def _enter_and_wait(\n-\n     mngr: AsyncContextManager[T],\n-    to_yield: dict[int, T],\n+    unwrapped: dict[int, T],\n     all_entered: trio.Event,\n     teardown_trigger: trio.Event,\n-\n-) -> T:\n+) -> None:\n     '''Open the async context manager deliver it's value\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "async def _enter_and_wait(\n\n    mngr: AsyncContextManager[T],\n    to_yield: dict[int, T],\n    all_entered: trio.Event,\n    teardown_trigger: trio.Event,\n\n) -> T:\n    <IND>",
        "target_code_with_indent": "async def _enter_and_wait(\n    mngr: AsyncContextManager[T],\n    unwrapped: dict[int, T],\n    all_entered: trio.Event,\n    teardown_trigger: trio.Event,\n) -> None:\n    <IND>"
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    async with mngr as value:\n        to_yield[id(mngr)] = value\n\n        if all(to_yield.values()):\n            all_entered.set()\n",
        "source_code_len": 131,
        "target_code": "    async with mngr as value:\n        unwrapped[id(mngr)] = value\n\n        if all(unwrapped.values()):\n            all_entered.set()\n",
        "target_code_len": 133,
        "diff_format": "@@ -28,5 +26,5 @@\n     async with mngr as value:\n-        to_yield[id(mngr)] = value\n+        unwrapped[id(mngr)] = value\n \n-        if all(to_yield.values()):\n+        if all(unwrapped.values()):\n             all_entered.set()\n",
        "source_code_with_indent": "    async with mngr as value:\n        <IND>to_yield[id(mngr)] = value\n\n        if all(to_yield.values()):\n            <IND>all_entered.set()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    async with mngr as value:\n        <IND>unwrapped[id(mngr)] = value\n\n        if all(unwrapped.values()):\n            <IND>all_entered.set()\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "async def async_enter_all(\n\n    *mngrs: tuple[AsyncContextManager[T]],\n    teardown_trigger: trio.Event,\n\n) -> tuple[T]:\n\n    to_yield = {}.fromkeys(id(mngr) for mngr in mngrs)\n\n",
        "source_code_len": 178,
        "target_code": "async def async_enter_all(\n    mngrs: Sequence[AsyncContextManager[T]],\n    teardown_trigger: trio.Event,\n) -> AsyncGenerator[tuple[T, ...], None]:\n    \"\"\"This async context manager expects a 'teardown_trigger' from the\n    outside world which will be used internally to gracefully teardown\n    individual context managers.\n    \"\"\"\n    unwrapped = {}.fromkeys(id(mngr) for mngr in mngrs)\n\n",
        "target_code_len": 389,
        "diff_format": "@@ -38,9 +36,10 @@\n async def async_enter_all(\n-\n-    *mngrs: tuple[AsyncContextManager[T]],\n+    mngrs: Sequence[AsyncContextManager[T]],\n     teardown_trigger: trio.Event,\n-\n-) -> tuple[T]:\n-\n-    to_yield = {}.fromkeys(id(mngr) for mngr in mngrs)\n+) -> AsyncGenerator[tuple[T, ...], None]:\n+    \"\"\"This async context manager expects a 'teardown_trigger' from the\n+    outside world which will be used internally to gracefully teardown\n+    individual context managers.\n+    \"\"\"\n+    unwrapped = {}.fromkeys(id(mngr) for mngr in mngrs)\n \n",
        "source_code_with_indent": "async def async_enter_all(\n\n    *mngrs: tuple[AsyncContextManager[T]],\n    teardown_trigger: trio.Event,\n\n) -> tuple[T]:\n\n    <IND>to_yield = {}.fromkeys(id(mngr) for mngr in mngrs)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "async def async_enter_all(\n    mngrs: Sequence[AsyncContextManager[T]],\n    teardown_trigger: trio.Event,\n) -> AsyncGenerator[tuple[T, ...], None]:\n    <IND>\"\"\"This async context manager expects a 'teardown_trigger' from the\n    outside world which will be used internally to gracefully teardown\n    individual context managers.\n    \"\"\"\n    unwrapped = {}.fromkeys(id(mngr) for mngr in mngrs)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                mngr,\n                to_yield,\n                all_entered,\n",
        "source_code_len": 77,
        "target_code": "                mngr,\n                unwrapped,\n                all_entered,\n",
        "target_code_len": 78,
        "diff_format": "@@ -53,3 +52,3 @@\n                 mngr,\n-                to_yield,\n+                unwrapped,\n                 all_entered,\n",
        "source_code_with_indent": "                mngr,\n                to_yield,\n                all_entered,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                mngr,\n                unwrapped,\n                all_entered,\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        await all_entered.wait()\n        yield tuple(to_yield.values())\n",
        "source_code_len": 72,
        "target_code": "        await all_entered.wait()\n\n        yield tuple(unwrapped.values())\n",
        "target_code_len": 74,
        "diff_format": "@@ -60,2 +59,3 @@\n         await all_entered.wait()\n-        yield tuple(to_yield.values())\n+\n+        yield tuple(unwrapped.values())\n",
        "source_code_with_indent": "        <DED>await all_entered.wait()\n        yield tuple(to_yield.values())\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>await all_entered.wait()\n\n        yield tuple(unwrapped.values())\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "goodboy/tractor",
    "commit": "3130a04c6109121729914307c2079cf670ae1104",
    "filename": "tractor/trionics/_mngrs.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/goodboy-tractor/tractor/trionics/_mngrs.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tractor/trionics/_mngrs.py:61:8 Incompatible return type [7]: Expected `typing.Tuple[Variable[T]]` but got `typing.AsyncGenerator[typing.Tuple[typing.Any, ...], None]`.",
    "message": " Expected `typing.Tuple[Variable[T]]` but got `typing.AsyncGenerator[typing.Tuple[typing.Any, ...], None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 61,
    "warning_line": "        yield tuple(to_yield.values())",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "'''\nfrom typing import AsyncContextManager\nfrom typing import TypeVar\nfrom contextlib import asynccontextmanager as acm\n",
        "source_code_len": 120,
        "target_code": "'''\nfrom typing import AsyncContextManager, AsyncGenerator\nfrom typing import TypeVar, Sequence\nfrom contextlib import asynccontextmanager as acm\n",
        "target_code_len": 146,
        "diff_format": "@@ -4,4 +4,4 @@\n '''\n-from typing import AsyncContextManager\n-from typing import TypeVar\n+from typing import AsyncContextManager, AsyncGenerator\n+from typing import TypeVar, Sequence\n from contextlib import asynccontextmanager as acm\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\nfrom typing import AsyncContextManager\nfrom typing import TypeVar\nfrom contextlib import asynccontextmanager as acm\n",
        "target_code_with_indent": "\nfrom typing import AsyncContextManager, AsyncGenerator\nfrom typing import TypeVar, Sequence\nfrom contextlib import asynccontextmanager as acm\n"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "async def _enter_and_wait(\n\n    mngr: AsyncContextManager[T],\n    to_yield: dict[int, T],\n    all_entered: trio.Event,\n    teardown_trigger: trio.Event,\n\n) -> T:\n    '''Open the async context manager deliver it's value\n",
        "source_code_len": 219,
        "target_code": "async def _enter_and_wait(\n    mngr: AsyncContextManager[T],\n    unwrapped: dict[int, T],\n    all_entered: trio.Event,\n    teardown_trigger: trio.Event,\n) -> None:\n    '''Open the async context manager deliver it's value\n",
        "target_code_len": 221,
        "diff_format": "@@ -16,9 +16,7 @@\n async def _enter_and_wait(\n-\n     mngr: AsyncContextManager[T],\n-    to_yield: dict[int, T],\n+    unwrapped: dict[int, T],\n     all_entered: trio.Event,\n     teardown_trigger: trio.Event,\n-\n-) -> T:\n+) -> None:\n     '''Open the async context manager deliver it's value\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "async def _enter_and_wait(\n\n    mngr: AsyncContextManager[T],\n    to_yield: dict[int, T],\n    all_entered: trio.Event,\n    teardown_trigger: trio.Event,\n\n) -> T:\n    <IND>",
        "target_code_with_indent": "async def _enter_and_wait(\n    mngr: AsyncContextManager[T],\n    unwrapped: dict[int, T],\n    all_entered: trio.Event,\n    teardown_trigger: trio.Event,\n) -> None:\n    <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    async with mngr as value:\n        to_yield[id(mngr)] = value\n\n        if all(to_yield.values()):\n            all_entered.set()\n",
        "source_code_len": 131,
        "target_code": "    async with mngr as value:\n        unwrapped[id(mngr)] = value\n\n        if all(unwrapped.values()):\n            all_entered.set()\n",
        "target_code_len": 133,
        "diff_format": "@@ -28,5 +26,5 @@\n     async with mngr as value:\n-        to_yield[id(mngr)] = value\n+        unwrapped[id(mngr)] = value\n \n-        if all(to_yield.values()):\n+        if all(unwrapped.values()):\n             all_entered.set()\n",
        "source_code_with_indent": "    async with mngr as value:\n        <IND>to_yield[id(mngr)] = value\n\n        if all(to_yield.values()):\n            <IND>all_entered.set()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    async with mngr as value:\n        <IND>unwrapped[id(mngr)] = value\n\n        if all(unwrapped.values()):\n            <IND>all_entered.set()\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "async def async_enter_all(\n\n    *mngrs: tuple[AsyncContextManager[T]],\n    teardown_trigger: trio.Event,\n\n) -> tuple[T]:\n\n    to_yield = {}.fromkeys(id(mngr) for mngr in mngrs)\n\n",
        "source_code_len": 178,
        "target_code": "async def async_enter_all(\n    mngrs: Sequence[AsyncContextManager[T]],\n    teardown_trigger: trio.Event,\n) -> AsyncGenerator[tuple[T, ...], None]:\n    \"\"\"This async context manager expects a 'teardown_trigger' from the\n    outside world which will be used internally to gracefully teardown\n    individual context managers.\n    \"\"\"\n    unwrapped = {}.fromkeys(id(mngr) for mngr in mngrs)\n\n",
        "target_code_len": 389,
        "diff_format": "@@ -38,9 +36,10 @@\n async def async_enter_all(\n-\n-    *mngrs: tuple[AsyncContextManager[T]],\n+    mngrs: Sequence[AsyncContextManager[T]],\n     teardown_trigger: trio.Event,\n-\n-) -> tuple[T]:\n-\n-    to_yield = {}.fromkeys(id(mngr) for mngr in mngrs)\n+) -> AsyncGenerator[tuple[T, ...], None]:\n+    \"\"\"This async context manager expects a 'teardown_trigger' from the\n+    outside world which will be used internally to gracefully teardown\n+    individual context managers.\n+    \"\"\"\n+    unwrapped = {}.fromkeys(id(mngr) for mngr in mngrs)\n \n",
        "source_code_with_indent": "async def async_enter_all(\n\n    *mngrs: tuple[AsyncContextManager[T]],\n    teardown_trigger: trio.Event,\n\n) -> tuple[T]:\n\n    <IND>to_yield = {}.fromkeys(id(mngr) for mngr in mngrs)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "async def async_enter_all(\n    mngrs: Sequence[AsyncContextManager[T]],\n    teardown_trigger: trio.Event,\n) -> AsyncGenerator[tuple[T, ...], None]:\n    <IND>\"\"\"This async context manager expects a 'teardown_trigger' from the\n    outside world which will be used internally to gracefully teardown\n    individual context managers.\n    \"\"\"\n    unwrapped = {}.fromkeys(id(mngr) for mngr in mngrs)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                mngr,\n                to_yield,\n                all_entered,\n",
        "source_code_len": 77,
        "target_code": "                mngr,\n                unwrapped,\n                all_entered,\n",
        "target_code_len": 78,
        "diff_format": "@@ -53,3 +52,3 @@\n                 mngr,\n-                to_yield,\n+                unwrapped,\n                 all_entered,\n",
        "source_code_with_indent": "                mngr,\n                to_yield,\n                all_entered,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                mngr,\n                unwrapped,\n                all_entered,\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        await all_entered.wait()\n        yield tuple(to_yield.values())\n",
        "source_code_len": 72,
        "target_code": "        await all_entered.wait()\n\n        yield tuple(unwrapped.values())\n",
        "target_code_len": 74,
        "diff_format": "@@ -60,2 +59,3 @@\n         await all_entered.wait()\n-        yield tuple(to_yield.values())\n+\n+        yield tuple(unwrapped.values())\n",
        "source_code_with_indent": "        <DED>await all_entered.wait()\n        yield tuple(to_yield.values())\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>await all_entered.wait()\n\n        yield tuple(unwrapped.values())\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]