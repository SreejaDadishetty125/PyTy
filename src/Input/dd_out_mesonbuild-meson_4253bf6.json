[
  {
    "project": "mesonbuild/meson",
    "commit": "4253bf62814997bd2c985a2a72e86c260338fb4d",
    "filename": "mesonbuild/build.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mesonbuild-meson/mesonbuild/build.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mesonbuild/build.py:375:39 Invalid type [31]: Expression `T.Union[(bool, type(NotImplemented))]` is not a valid type.",
    "message": " Expression `T.Union[(bool, type(NotImplemented))]` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 375,
    "warning_line": "    def __lt__(self, other: object) -> T.Union[bool, type(NotImplemented)]:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __lt__(self, other: object) -> T.Union[bool, type(NotImplemented)]:\n        if not hasattr(other, 'get_id') and not callable(other.get_id):\n",
        "source_code_len": 149,
        "target_code": "\n    def __lt__(self, other: object) -> bool:\n        if not hasattr(other, 'get_id') and not callable(other.get_id):\n",
        "target_code_len": 118,
        "diff_format": "@@ -374,3 +374,3 @@\n \n-    def __lt__(self, other: object) -> T.Union[bool, type(NotImplemented)]:\n+    def __lt__(self, other: object) -> bool:\n         if not hasattr(other, 'get_id') and not callable(other.get_id):\n",
        "source_code_with_indent": "\n    <DED><DED>def __lt__(self, other: object) -> T.Union[bool, type(NotImplemented)]:\n        <IND>if not hasattr(other, 'get_id') and not callable(other.get_id):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED><DED>def __lt__(self, other: object) -> bool:\n        <IND>if not hasattr(other, 'get_id') and not callable(other.get_id):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "mesonbuild/meson",
    "commit": "4253bf62814997bd2c985a2a72e86c260338fb4d",
    "filename": "mesonbuild/build.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mesonbuild-meson/mesonbuild/build.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mesonbuild/build.py:380:39 Invalid type [31]: Expression `T.Union[(bool, type(NotImplemented))]` is not a valid type.",
    "message": " Expression `T.Union[(bool, type(NotImplemented))]` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 380,
    "warning_line": "    def __le__(self, other: object) -> T.Union[bool, type(NotImplemented)]:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __le__(self, other: object) -> T.Union[bool, type(NotImplemented)]:\n        if not hasattr(other, 'get_id') and not callable(other.get_id):\n",
        "source_code_len": 149,
        "target_code": "\n    def __le__(self, other: object) -> bool:\n        if not hasattr(other, 'get_id') and not callable(other.get_id):\n",
        "target_code_len": 118,
        "diff_format": "@@ -379,3 +379,3 @@\n \n-    def __le__(self, other: object) -> T.Union[bool, type(NotImplemented)]:\n+    def __le__(self, other: object) -> bool:\n         if not hasattr(other, 'get_id') and not callable(other.get_id):\n",
        "source_code_with_indent": "\n    <DED>def __le__(self, other: object) -> T.Union[bool, type(NotImplemented)]:\n        <IND>if not hasattr(other, 'get_id') and not callable(other.get_id):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def __le__(self, other: object) -> bool:\n        <IND>if not hasattr(other, 'get_id') and not callable(other.get_id):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "mesonbuild/meson",
    "commit": "4253bf62814997bd2c985a2a72e86c260338fb4d",
    "filename": "mesonbuild/build.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mesonbuild-meson/mesonbuild/build.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mesonbuild/build.py:385:39 Invalid type [31]: Expression `T.Union[(bool, type(NotImplemented))]` is not a valid type.",
    "message": " Expression `T.Union[(bool, type(NotImplemented))]` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 385,
    "warning_line": "    def __gt__(self, other: object) -> T.Union[bool, type(NotImplemented)]:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __gt__(self, other: object) -> T.Union[bool, type(NotImplemented)]:\n        if not hasattr(other, 'get_id') and not callable(other.get_id):\n",
        "source_code_len": 149,
        "target_code": "\n    def __gt__(self, other: object) -> bool:\n        if not hasattr(other, 'get_id') and not callable(other.get_id):\n",
        "target_code_len": 118,
        "diff_format": "@@ -384,3 +384,3 @@\n \n-    def __gt__(self, other: object) -> T.Union[bool, type(NotImplemented)]:\n+    def __gt__(self, other: object) -> bool:\n         if not hasattr(other, 'get_id') and not callable(other.get_id):\n",
        "source_code_with_indent": "\n    <DED>def __gt__(self, other: object) -> T.Union[bool, type(NotImplemented)]:\n        <IND>if not hasattr(other, 'get_id') and not callable(other.get_id):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def __gt__(self, other: object) -> bool:\n        <IND>if not hasattr(other, 'get_id') and not callable(other.get_id):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "mesonbuild/meson",
    "commit": "4253bf62814997bd2c985a2a72e86c260338fb4d",
    "filename": "mesonbuild/build.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mesonbuild-meson/mesonbuild/build.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mesonbuild/build.py:390:39 Invalid type [31]: Expression `T.Union[(bool, type(NotImplemented))]` is not a valid type.",
    "message": " Expression `T.Union[(bool, type(NotImplemented))]` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 390,
    "warning_line": "    def __ge__(self, other: object) -> T.Union[bool, type(NotImplemented)]:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __ge__(self, other: object) -> T.Union[bool, type(NotImplemented)]:\n        if not hasattr(other, 'get_id') and not callable(other.get_id):\n",
        "source_code_len": 149,
        "target_code": "\n    def __ge__(self, other: object) -> bool:\n        if not hasattr(other, 'get_id') and not callable(other.get_id):\n",
        "target_code_len": 118,
        "diff_format": "@@ -389,3 +389,3 @@\n \n-    def __ge__(self, other: object) -> T.Union[bool, type(NotImplemented)]:\n+    def __ge__(self, other: object) -> bool:\n         if not hasattr(other, 'get_id') and not callable(other.get_id):\n",
        "source_code_with_indent": "\n    <DED>def __ge__(self, other: object) -> T.Union[bool, type(NotImplemented)]:\n        <IND>if not hasattr(other, 'get_id') and not callable(other.get_id):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def __ge__(self, other: object) -> bool:\n        <IND>if not hasattr(other, 'get_id') and not callable(other.get_id):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]