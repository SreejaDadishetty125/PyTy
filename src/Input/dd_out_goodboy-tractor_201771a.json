[
  {
    "project": "goodboy/tractor",
    "commit": "201771a521b409f7665a356a4dfa68bca8b43151",
    "filename": "tractor/_portal.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/goodboy-tractor/tractor/_portal.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tractor/_portal.py:97:8 Incompatible return type [7]: Expected `typing.AsyncGenerator[StreamReceiveChannel, None]` but got `typing.Generator[StreamReceiveChannel, None, None]`.",
    "message": " Expected `typing.AsyncGenerator[StreamReceiveChannel, None]` but got `typing.Generator[StreamReceiveChannel, None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 97,
    "warning_line": "        yield self",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import typing\nfrom typing import Tuple, Any, Dict, Optional, Set\nfrom functools import partial\n",
        "source_code_len": 95,
        "target_code": "import typing\nfrom typing import Tuple, Any, Dict, Optional, Set, Iterator\nfrom functools import partial\n",
        "target_code_len": 105,
        "diff_format": "@@ -6,3 +6,3 @@\n import typing\n-from typing import Tuple, Any, Dict, Optional, Set\n+from typing import Tuple, Any, Dict, Optional, Set, Iterator\n from functools import partial\n",
        "source_code_with_indent": "import typing\nfrom typing import Tuple, Any, Dict, Optional, Set\nfrom functools import partial\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import typing\nfrom typing import Tuple, Any, Dict, Optional, Set, Iterator\nfrom functools import partial\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nclass StreamReceiveChannel(trio.abc.ReceiveChannel):\n    \"\"\"A wrapper around a ``trio._channel.MemoryReceiveChannel`` with\n",
        "source_code_len": 124,
        "target_code": "\nclass ReceiveStream(trio.abc.ReceiveChannel):\n    \"\"\"A wrapper around a ``trio._channel.MemoryReceiveChannel`` with\n",
        "target_code_len": 117,
        "diff_format": "@@ -40,3 +40,3 @@\n \n-class StreamReceiveChannel(trio.abc.ReceiveChannel):\n+class ReceiveStream(trio.abc.ReceiveChannel):\n     \"\"\"A wrapper around a ``trio._channel.MemoryReceiveChannel`` with\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED><DED><DED>class StreamReceiveChannel(trio.abc.ReceiveChannel):\n    <IND>",
        "target_code_with_indent": "\n<DED><DED><DED>class ReceiveStream(trio.abc.ReceiveChannel):\n    <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @contextmanager\n    def shield_channel(\n        self\n    ) -> typing.AsyncGenerator['StreamReceiveChannel', None]:\n        \"\"\"Shield this stream's underlying channel such that a local consumer task\n",
        "source_code_len": 202,
        "target_code": "    @contextmanager\n    def shield(\n        self\n    ) -> Iterator['ReceiveStream']:  # noqa\n        \"\"\"Shield this stream's underlying channel such that a local consumer task\n",
        "target_code_len": 176,
        "diff_format": "@@ -88,5 +88,5 @@\n     @contextmanager\n-    def shield_channel(\n+    def shield(\n         self\n-    ) -> typing.AsyncGenerator['StreamReceiveChannel', None]:\n+    ) -> Iterator['ReceiveStream']:  # noqa\n         \"\"\"Shield this stream's underlying channel such that a local consumer task\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "    <DED><DED>@contextmanager\n    def shield_channel(\n        self\n    ) -> typing.AsyncGenerator['StreamReceiveChannel', None]:\n        <IND>",
        "target_code_with_indent": "    <DED><DED>@contextmanager\n    def shield(\n        self\n    ) -> Iterator['ReceiveStream']:  # noqa\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ] = None\n        self._streams: Set[StreamReceiveChannel] = set()\n        self.actor = current_actor()\n",
        "source_code_len": 111,
        "target_code": "        ] = None\n        self._streams: Set[ReceiveStream] = set()\n        self.actor = current_actor()\n",
        "target_code_len": 104,
        "diff_format": "@@ -158,3 +158,3 @@\n         ] = None\n-        self._streams: Set[StreamReceiveChannel] = set()\n+        self._streams: Set[ReceiveStream] = set()\n         self.actor = current_actor()\n",
        "source_code_with_indent": "        ] = None\n        self._streams: Set[StreamReceiveChannel] = set()\n        self.actor = current_actor()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ] = None\n        self._streams: Set[ReceiveStream] = set()\n        self.actor = current_actor()\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        if resptype == 'yield':  # stream response\n            rchan = StreamReceiveChannel(cid, recv_chan, self)\n            self._streams.add(rchan)\n",
        "source_code_len": 151,
        "target_code": "        if resptype == 'yield':  # stream response\n            rchan = ReceiveStream(cid, recv_chan, self)\n            self._streams.add(rchan)\n",
        "target_code_len": 144,
        "diff_format": "@@ -221,3 +221,3 @@\n         if resptype == 'yield':  # stream response\n-            rchan = StreamReceiveChannel(cid, recv_chan, self)\n+            rchan = ReceiveStream(cid, recv_chan, self)\n             self._streams.add(rchan)\n",
        "source_code_with_indent": "        <IND>if resptype == 'yield':  # stream response\n            <IND>rchan = StreamReceiveChannel(cid, recv_chan, self)\n            self._streams.add(rchan)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>if resptype == 'yield':  # stream response\n            <IND>rchan = ReceiveStream(cid, recv_chan, self)\n            self._streams.add(rchan)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]