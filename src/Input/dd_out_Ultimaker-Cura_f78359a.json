[
  {
    "project": "Ultimaker/Cura",
    "commit": "f78359ae7644751686f66775cd6624445e6165da",
    "filename": "plugins/Toolbox/src/CloudSync/SubscribedPackagesModel.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Ultimaker-Cura/plugins/Toolbox/src/CloudSync/SubscribedPackagesModel.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "plugins/Toolbox/src/CloudSync/SubscribedPackagesModel.py:76:82 Invalid type [31]: Expression `[str]` is not a valid type.",
    "message": " Expression `[str]` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 76,
    "warning_line": "    def _is_any_version_compatible(package_manager: PackageManager, api_versions: [str]) -> bool:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @staticmethod\n    def _is_any_version_compatible(package_manager: PackageManager, api_versions: [str]) -> bool:\n        \"\"\":return: True when any of the provided api versions is compatible\"\"\"\n",
        "source_code_len": 196,
        "target_code": "    @staticmethod\n    def _is_any_version_compatible(package_manager: PackageManager, api_versions: List[str]) -> bool:\n        \"\"\":return: True when any of the provided api versions is compatible\"\"\"\n",
        "target_code_len": 200,
        "diff_format": "@@ -75,3 +75,3 @@\n     @staticmethod\n-    def _is_any_version_compatible(package_manager: PackageManager, api_versions: [str]) -> bool:\n+    def _is_any_version_compatible(package_manager: PackageManager, api_versions: List[str]) -> bool:\n         \"\"\":return: True when any of the provided api versions is compatible\"\"\"\n",
        "source_code_with_indent": "    <DED>@staticmethod\n    def _is_any_version_compatible(package_manager: PackageManager, api_versions: [str]) -> bool:\n        <IND>\"\"\":return: True when any of the provided api versions is compatible\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@staticmethod\n    def _is_any_version_compatible(package_manager: PackageManager, api_versions: List[str]) -> bool:\n        <IND>\"\"\":return: True when any of the provided api versions is compatible\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]