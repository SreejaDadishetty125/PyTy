[
  {
    "project": "spacetx/starfish",
    "commit": "ff0136e61c9b484eb7b3b738028b92bb36faa35e",
    "filename": "starfish/experiment/experiment.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/spacetx-starfish/starfish/experiment/experiment.py",
    "file_hunks_size": 9,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "starfish/experiment/experiment.py:133:12 Incompatible variable type [9]: src_doc is declared to have type `Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "message": " src_doc is declared to have type `Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 133,
    "warning_line": "            src_doc: dict=None,"
  },
  {
    "project": "spacetx/starfish",
    "commit": "ff0136e61c9b484eb7b3b738028b92bb36faa35e",
    "filename": "starfish/experiment/experiment.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/spacetx-starfish/starfish/experiment/experiment.py",
    "file_hunks_size": 9,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "starfish/experiment/experiment.py:162:18 Incompatible variable type [9]: strict is declared to have type `bool` but is used as type `None`.",
    "message": " strict is declared to have type `bool` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 162,
    "warning_line": "                  strict: bool=None,"
  },
  {
    "project": "spacetx/starfish",
    "commit": "ff0136e61c9b484eb7b3b738028b92bb36faa35e",
    "filename": "starfish/experiment/experiment.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/spacetx-starfish/starfish/experiment/experiment.py",
    "file_hunks_size": 9,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "starfish/experiment/experiment.py:199:28 Incompatible parameter type [6]: Expected `Union[Dict[typing.Any, typing.Any], str]` for 1st positional only parameter to call `Config.__init__` but got `Union[None, Dict[typing.Any, typing.Any], str]`.",
    "message": " Expected `Union[Dict[typing.Any, typing.Any], str]` for 1st positional only parameter to call `Config.__init__` but got `Union[None, Dict[typing.Any, typing.Any], str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 199,
    "warning_line": "        config_obj = Config(config)  # STARFISH_CONFIG is assumed"
  },
  {
    "project": "spacetx/starfish",
    "commit": "ff0136e61c9b484eb7b3b738028b92bb36faa35e",
    "filename": "starfish/util/config.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/spacetx-starfish/starfish/util/config.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "starfish/util/config.py:33:12 Incompatible variable type [9]: value is declared to have type `Union[Dict[typing.Any, typing.Any], str]` but is used as type `typing.Optional[str]`.",
    "message": " value is declared to have type `Union[Dict[typing.Any, typing.Any], str]` but is used as type `typing.Optional[str]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 33,
    "warning_line": "            value = os.environ.get(key)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "        self.__value = value\n        self.__key = key\n\n        if value is None:\n            value = os.environ.get(key)\n\n",
        "source_code_len": 122,
        "target_code": "        self.__value = value\n\n",
        "target_code_len": 30,
        "diff_format": "@@ -29,6 +40,2 @@\n         self.__value = value\n-        self.__key = key\n-\n-        if value is None:\n-            value = os.environ.get(key)\n \n",
        "source_code_with_indent": "        self.__value = value\n        self.__key = key\n\n        if value is None:\n            <IND>value = os.environ.get(key)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self.__value = value\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]