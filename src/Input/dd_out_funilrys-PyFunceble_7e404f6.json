[
  {
    "project": "funilrys/PyFunceble",
    "commit": "7e404f6014c8f83e8a38d6b5bdca7b581d66836e",
    "filename": "PyFunceble/dataset/user_agent.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/funilrys-PyFunceble/PyFunceble/dataset/user_agent.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "PyFunceble/dataset/user_agent.py:129:8 Incompatible return type [7]: Expected `bool` but got `typing.Union[List[str], bool]`.",
    "message": " Expected `bool` but got `typing.Union[List[str], bool]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 129,
    "warning_line": "        return browser_short_name.lower() in self and self[browser_short_name.lower()]",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        return browser_short_name.lower() in self and self[browser_short_name.lower()]\n\n",
        "source_code_len": 89,
        "target_code": "\n        return bool(browser_short_name.lower() in self) and bool(\n            self[browser_short_name.lower()]\n        )\n\n",
        "target_code_len": 123,
        "diff_format": "@@ -128,3 +131,5 @@\n \n-        return browser_short_name.lower() in self and self[browser_short_name.lower()]\n+        return bool(browser_short_name.lower() in self) and bool(\n+            self[browser_short_name.lower()]\n+        )\n \n",
        "source_code_with_indent": "\n        <DED>return browser_short_name.lower() in self and self[browser_short_name.lower()]\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        <DED>return bool(browser_short_name.lower() in self) and bool(\n            self[browser_short_name.lower()]\n        )\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "funilrys/PyFunceble",
    "commit": "7e404f6014c8f83e8a38d6b5bdca7b581d66836e",
    "filename": "PyFunceble/dataset/user_agent.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/funilrys-PyFunceble/PyFunceble/dataset/user_agent.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "PyFunceble/dataset/user_agent.py:154:8 Incompatible return type [7]: Expected `bool` but got `typing.Union[bool, str]`.",
    "message": " Expected `bool` but got `typing.Union[bool, str]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 154,
    "warning_line": "        return (",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            self.is_supported_browser(browser_short_name)\n            and platform.lower() in self[browser_short_name.lower()]\n            and self[browser_short_name.lower()][platform.lower()]\n        )\n",
        "source_code_len": 204,
        "target_code": "            self.is_supported_browser(browser_short_name)\n            and bool(platform.lower() in self[browser_short_name.lower()])\n            and bool(self[browser_short_name.lower()][platform.lower()])\n        )\n",
        "target_code_len": 216,
        "diff_format": "@@ -155,4 +160,4 @@\n             self.is_supported_browser(browser_short_name)\n-            and platform.lower() in self[browser_short_name.lower()]\n-            and self[browser_short_name.lower()][platform.lower()]\n+            and bool(platform.lower() in self[browser_short_name.lower()])\n+            and bool(self[browser_short_name.lower()][platform.lower()])\n         )\n",
        "source_code_with_indent": "            self.is_supported_browser(browser_short_name)\n            and platform.lower() in self[browser_short_name.lower()]\n            and self[browser_short_name.lower()][platform.lower()]\n        )\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            self.is_supported_browser(browser_short_name)\n            and bool(platform.lower() in self[browser_short_name.lower()])\n            and bool(self[browser_short_name.lower()][platform.lower()])\n        )\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "funilrys/PyFunceble",
    "commit": "7e404f6014c8f83e8a38d6b5bdca7b581d66836e",
    "filename": "PyFunceble/dataset/user_agent.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/funilrys-PyFunceble/PyFunceble/dataset/user_agent.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "PyFunceble/dataset/user_agent.py:157:49 Incompatible parameter type [6]: Expected `typing_extensions.SupportsIndex` for 1st positional only parameter to call `list.__getitem__` but got `str`.",
    "message": " Expected `typing_extensions.SupportsIndex` for 1st positional only parameter to call `list.__getitem__` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 157,
    "warning_line": "            and self[browser_short_name.lower()][platform.lower()]",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __getattr__(self, value: Any) -> List[str]:\n        if value in self:\n",
        "source_code_len": 79,
        "target_code": "\n    def __getattr__(self, value: Any) -> dict:\n        if value in self:\n",
        "target_code_len": 74,
        "diff_format": "@@ -80,3 +80,3 @@\n \n-    def __getattr__(self, value: Any) -> List[str]:\n+    def __getattr__(self, value: Any) -> dict:\n         if value in self:\n",
        "source_code_with_indent": "\n    <DED>def __getattr__(self, value: Any) -> List[str]:\n        <IND>if value in self:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def __getattr__(self, value: Any) -> dict:\n        <IND>if value in self:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        return []\n\n    def __getitem__(self, value: Any) -> List[str]:\n        return self.__getattr__(value)\n\n    def set_prefered(self, name: str, platform: str) -> \"UserAgentDataset\":\n        \"\"\"\n",
        "source_code_len": 200,
        "target_code": "\n        return dict()\n\n    def __getitem__(self, value: Any) -> dict:\n        return self.__getattr__(value)\n\n    def set_prefered(\n        self, browser_short_name: str, platform: str\n    ) -> \"UserAgentDataset\":\n        \"\"\"\n",
        "target_code_len": 227,
        "diff_format": "@@ -84,8 +84,10 @@\n \n-        return []\n+        return dict()\n \n-    def __getitem__(self, value: Any) -> List[str]:\n+    def __getitem__(self, value: Any) -> dict:\n         return self.__getattr__(value)\n \n-    def set_prefered(self, name: str, platform: str) -> \"UserAgentDataset\":\n+    def set_prefered(\n+        self, browser_short_name: str, platform: str\n+    ) -> \"UserAgentDataset\":\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n        <DED>return []\n\n    <DED>def __getitem__(self, value: Any) -> List[str]:\n        <IND>return self.__getattr__(value)\n\n    <DED>def set_prefered(self, name: str, platform: str) -> \"UserAgentDataset\":\n        <IND>",
        "target_code_with_indent": "\n        <DED>return dict()\n\n    <DED>def __getitem__(self, value: Any) -> dict:\n        <IND>return self.__getattr__(value)\n\n    <DED>def set_prefered(\n        self, browser_short_name: str, platform: str\n    ) -> \"UserAgentDataset\":\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        if not self.is_supported(name, platform):\n            raise ValueError(\n                f\"The given name ({name!r}) or platform ({platform!r} is not supported.\"\n            )\n\n        self.prefered_browser = name.lower()\n        self.prefered_platform = platform.lower()\n",
        "source_code_len": 280,
        "target_code": "\n        if not self.is_supported(browser_short_name, platform):\n            raise ValueError(\n                f\"The given name ({browser_short_name!r}) or platform \"\n                f\"({platform!r}) is not supported.\"\n            )\n\n        self.prefered_browser = browser_short_name.lower()\n        self.prefered_platform = platform.lower()\n",
        "target_code_len": 343,
        "diff_format": "@@ -104,8 +106,9 @@\n \n-        if not self.is_supported(name, platform):\n+        if not self.is_supported(browser_short_name, platform):\n             raise ValueError(\n-                f\"The given name ({name!r}) or platform ({platform!r} is not supported.\"\n+                f\"The given name ({browser_short_name!r}) or platform \"\n+                f\"({platform!r}) is not supported.\"\n             )\n \n-        self.prefered_browser = name.lower()\n+        self.prefered_browser = browser_short_name.lower()\n         self.prefered_platform = platform.lower()\n",
        "source_code_with_indent": "\n        if not self.is_supported(name, platform):\n            <IND>raise ValueError(\n                f\"The given name ({name!r}) or platform ({platform!r} is not supported.\"\n            )\n\n        <DED>self.prefered_browser = name.lower()\n        self.prefered_platform = platform.lower()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        if not self.is_supported(browser_short_name, platform):\n            <IND>raise ValueError(\n                f\"The given name ({browser_short_name!r}) or platform \"\n                f\"({platform!r}) is not supported.\"\n            )\n\n        <DED>self.prefered_browser = browser_short_name.lower()\n        self.prefered_platform = platform.lower()\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        return browser_short_name.lower() in self and self[browser_short_name.lower()]\n\n",
        "source_code_len": 89,
        "target_code": "\n        return bool(browser_short_name.lower() in self) and bool(\n            self[browser_short_name.lower()]\n        )\n\n",
        "target_code_len": 123,
        "diff_format": "@@ -128,3 +131,5 @@\n \n-        return browser_short_name.lower() in self and self[browser_short_name.lower()]\n+        return bool(browser_short_name.lower() in self) and bool(\n+            self[browser_short_name.lower()]\n+        )\n \n",
        "source_code_with_indent": "\n        <DED>return browser_short_name.lower() in self and self[browser_short_name.lower()]\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        <DED>return bool(browser_short_name.lower() in self) and bool(\n            self[browser_short_name.lower()]\n        )\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "funilrys/PyFunceble",
    "commit": "7e404f6014c8f83e8a38d6b5bdca7b581d66836e",
    "filename": "PyFunceble/dataset/user_agent.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/funilrys-PyFunceble/PyFunceble/dataset/user_agent.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "PyFunceble/dataset/user_agent.py:179:43 Incompatible parameter type [6]: Expected `typing_extensions.SupportsIndex` for 1st positional only parameter to call `list.__getitem__` but got `str`.",
    "message": " Expected `typing_extensions.SupportsIndex` for 1st positional only parameter to call `list.__getitem__` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 179,
    "warning_line": "        return self[self.prefered_browser][self.prefered_platform]",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __getattr__(self, value: Any) -> List[str]:\n        if value in self:\n",
        "source_code_len": 79,
        "target_code": "\n    def __getattr__(self, value: Any) -> dict:\n        if value in self:\n",
        "target_code_len": 74,
        "diff_format": "@@ -80,3 +80,3 @@\n \n-    def __getattr__(self, value: Any) -> List[str]:\n+    def __getattr__(self, value: Any) -> dict:\n         if value in self:\n",
        "source_code_with_indent": "\n    <DED>def __getattr__(self, value: Any) -> List[str]:\n        <IND>if value in self:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def __getattr__(self, value: Any) -> dict:\n        <IND>if value in self:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        return []\n\n    def __getitem__(self, value: Any) -> List[str]:\n        return self.__getattr__(value)\n\n    def set_prefered(self, name: str, platform: str) -> \"UserAgentDataset\":\n        \"\"\"\n",
        "source_code_len": 200,
        "target_code": "\n        return dict()\n\n    def __getitem__(self, value: Any) -> dict:\n        return self.__getattr__(value)\n\n    def set_prefered(\n        self, browser_short_name: str, platform: str\n    ) -> \"UserAgentDataset\":\n        \"\"\"\n",
        "target_code_len": 227,
        "diff_format": "@@ -84,8 +84,10 @@\n \n-        return []\n+        return dict()\n \n-    def __getitem__(self, value: Any) -> List[str]:\n+    def __getitem__(self, value: Any) -> dict:\n         return self.__getattr__(value)\n \n-    def set_prefered(self, name: str, platform: str) -> \"UserAgentDataset\":\n+    def set_prefered(\n+        self, browser_short_name: str, platform: str\n+    ) -> \"UserAgentDataset\":\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n        <DED>return []\n\n    <DED>def __getitem__(self, value: Any) -> List[str]:\n        <IND>return self.__getattr__(value)\n\n    <DED>def set_prefered(self, name: str, platform: str) -> \"UserAgentDataset\":\n        <IND>",
        "target_code_with_indent": "\n        <DED>return dict()\n\n    <DED>def __getitem__(self, value: Any) -> dict:\n        <IND>return self.__getattr__(value)\n\n    <DED>def set_prefered(\n        self, browser_short_name: str, platform: str\n    ) -> \"UserAgentDataset\":\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        if not self.is_supported(name, platform):\n            raise ValueError(\n                f\"The given name ({name!r}) or platform ({platform!r} is not supported.\"\n            )\n\n        self.prefered_browser = name.lower()\n        self.prefered_platform = platform.lower()\n",
        "source_code_len": 280,
        "target_code": "\n        if not self.is_supported(browser_short_name, platform):\n            raise ValueError(\n                f\"The given name ({browser_short_name!r}) or platform \"\n                f\"({platform!r}) is not supported.\"\n            )\n\n        self.prefered_browser = browser_short_name.lower()\n        self.prefered_platform = platform.lower()\n",
        "target_code_len": 343,
        "diff_format": "@@ -104,8 +106,9 @@\n \n-        if not self.is_supported(name, platform):\n+        if not self.is_supported(browser_short_name, platform):\n             raise ValueError(\n-                f\"The given name ({name!r}) or platform ({platform!r} is not supported.\"\n+                f\"The given name ({browser_short_name!r}) or platform \"\n+                f\"({platform!r}) is not supported.\"\n             )\n \n-        self.prefered_browser = name.lower()\n+        self.prefered_browser = browser_short_name.lower()\n         self.prefered_platform = platform.lower()\n",
        "source_code_with_indent": "\n        if not self.is_supported(name, platform):\n            <IND>raise ValueError(\n                f\"The given name ({name!r}) or platform ({platform!r} is not supported.\"\n            )\n\n        <DED>self.prefered_browser = name.lower()\n        self.prefered_platform = platform.lower()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        if not self.is_supported(browser_short_name, platform):\n            <IND>raise ValueError(\n                f\"The given name ({browser_short_name!r}) or platform \"\n                f\"({platform!r}) is not supported.\"\n            )\n\n        <DED>self.prefered_browser = browser_short_name.lower()\n        self.prefered_platform = platform.lower()\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        return browser_short_name.lower() in self and self[browser_short_name.lower()]\n\n",
        "source_code_len": 89,
        "target_code": "\n        return bool(browser_short_name.lower() in self) and bool(\n            self[browser_short_name.lower()]\n        )\n\n",
        "target_code_len": 123,
        "diff_format": "@@ -128,3 +131,5 @@\n \n-        return browser_short_name.lower() in self and self[browser_short_name.lower()]\n+        return bool(browser_short_name.lower() in self) and bool(\n+            self[browser_short_name.lower()]\n+        )\n \n",
        "source_code_with_indent": "\n        <DED>return browser_short_name.lower() in self and self[browser_short_name.lower()]\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        <DED>return bool(browser_short_name.lower() in self) and bool(\n            self[browser_short_name.lower()]\n        )\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]