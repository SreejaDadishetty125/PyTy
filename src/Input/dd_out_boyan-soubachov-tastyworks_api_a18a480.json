[
  {
    "project": "boyan-soubachov/tastyworks_api",
    "commit": "a18a4809d410a7d54f9378963ac58b4593806adc",
    "filename": "tastyworks/example.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/boyan-soubachov-tastyworks_api/tastyworks/example.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tastyworks/example.py:40:8 Incompatible parameter type [6]: Expected `decimal.Decimal` for 2nd parameter `price` to call `OrderDetails.__init__` but got `int`.",
    "message": " Expected `decimal.Decimal` for 2nd parameter `price` to call `OrderDetails.__init__` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 40,
    "warning_line": "        price=400,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import asyncio\nimport logging\nfrom datetime import date\n\n",
        "source_code_len": 57,
        "target_code": "import asyncio\nimport calendar\nimport logging\nfrom datetime import date, timedelta\nfrom decimal import Decimal\n\n",
        "target_code_len": 112,
        "diff_format": "@@ -1,4 +1,6 @@\n import asyncio\n+import calendar\n import logging\n-from datetime import date\n+from datetime import date, timedelta\n+from decimal import Decimal\n \n",
        "source_code_with_indent": "import asyncio\nimport logging\nfrom datetime import date\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import asyncio\nimport calendar\nimport logging\nfrom datetime import date, timedelta\nfrom decimal import Decimal\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        type=OrderType.LIMIT,\n        price=400,\n        price_effect=OrderPriceEffect.CREDIT)\n",
        "source_code_len": 95,
        "target_code": "        type=OrderType.LIMIT,\n        price=Decimal(400),\n        price_effect=OrderPriceEffect.CREDIT)\n",
        "target_code_len": 104,
        "diff_format": "@@ -39,3 +41,3 @@\n         type=OrderType.LIMIT,\n-        price=400,\n+        price=Decimal(400),\n         price_effect=OrderPriceEffect.CREDIT)\n",
        "source_code_with_indent": "        type=OrderType.LIMIT,\n        price=400,\n        price_effect=OrderPriceEffect.CREDIT)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        type=OrderType.LIMIT,\n        price=Decimal(400),\n        price_effect=OrderPriceEffect.CREDIT)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        quantity=1,\n        expiry=date(2018, 10, 19),\n        strike=3.0,\n        option_type=OptionType.CALL,\n",
        "source_code_len": 112,
        "target_code": "        quantity=1,\n        expiry=get_third_friday(date.today()),\n        strike=Decimal(3),\n        option_type=OptionType.CALL,\n",
        "target_code_len": 131,
        "diff_format": "@@ -46,4 +48,4 @@\n         quantity=1,\n-        expiry=date(2018, 10, 19),\n-        strike=3.0,\n+        expiry=get_third_friday(date.today()),\n+        strike=Decimal(3),\n         option_type=OptionType.CALL,\n",
        "source_code_with_indent": "        quantity=1,\n        expiry=date(2018, 10, 19),\n        strike=3.0,\n        option_type=OptionType.CALL,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        quantity=1,\n        expiry=get_third_friday(date.today()),\n        strike=Decimal(3),\n        option_type=OptionType.CALL,\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef main():\n",
        "source_code_len": 13,
        "target_code": "\ndef get_third_friday(d):\n    s = date(d.year, d.month, 15)\n    candidate = s + timedelta(days=(calendar.FRIDAY - s.weekday()) % 7)\n\n    # This month's third friday passed\n    if candidate < d:\n        candidate += timedelta(weeks=4)\n        if candidate.day < 15:\n            candidate += timedelta(weeks=1)\n\n    return candidate\n\n\ndef main():\n",
        "target_code_len": 345,
        "diff_format": "@@ -68,2 +70,15 @@\n \n+def get_third_friday(d):\n+    s = date(d.year, d.month, 15)\n+    candidate = s + timedelta(days=(calendar.FRIDAY - s.weekday()) % 7)\n+\n+    # This month's third friday passed\n+    if candidate < d:\n+        candidate += timedelta(weeks=4)\n+        if candidate.day < 15:\n+            candidate += timedelta(weeks=1)\n+\n+    return candidate\n+\n+\n def main():\n",
        "source_code_with_indent": "\n<DED><DED>def main():\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED><DED>def get_third_friday(d):\n    <IND>s = date(d.year, d.month, 15)\n    candidate = s + timedelta(days=(calendar.FRIDAY - s.weekday()) % 7)\n\n    # This month's third friday passed\n    if candidate < d:\n        <IND>candidate += timedelta(weeks=4)\n        if candidate.day < 15:\n            <IND>candidate += timedelta(weeks=1)\n\n    <DED><DED>return candidate\n\n\n<DED>def main():\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "boyan-soubachov/tastyworks_api",
    "commit": "a18a4809d410a7d54f9378963ac58b4593806adc",
    "filename": "tastyworks/example.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/boyan-soubachov-tastyworks_api/tastyworks/example.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tastyworks/example.py:48:8 Incompatible parameter type [6]: Expected `decimal.Decimal` for 4th parameter `strike` to call `Option.__init__` but got `float`.",
    "message": " Expected `decimal.Decimal` for 4th parameter `strike` to call `Option.__init__` but got `float`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 48,
    "warning_line": "        strike=3.0,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import asyncio\nimport logging\nfrom datetime import date\n\n",
        "source_code_len": 57,
        "target_code": "import asyncio\nimport calendar\nimport logging\nfrom datetime import date, timedelta\nfrom decimal import Decimal\n\n",
        "target_code_len": 112,
        "diff_format": "@@ -1,4 +1,6 @@\n import asyncio\n+import calendar\n import logging\n-from datetime import date\n+from datetime import date, timedelta\n+from decimal import Decimal\n \n",
        "source_code_with_indent": "import asyncio\nimport logging\nfrom datetime import date\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import asyncio\nimport calendar\nimport logging\nfrom datetime import date, timedelta\nfrom decimal import Decimal\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        type=OrderType.LIMIT,\n        price=400,\n        price_effect=OrderPriceEffect.CREDIT)\n",
        "source_code_len": 95,
        "target_code": "        type=OrderType.LIMIT,\n        price=Decimal(400),\n        price_effect=OrderPriceEffect.CREDIT)\n",
        "target_code_len": 104,
        "diff_format": "@@ -39,3 +41,3 @@\n         type=OrderType.LIMIT,\n-        price=400,\n+        price=Decimal(400),\n         price_effect=OrderPriceEffect.CREDIT)\n",
        "source_code_with_indent": "        type=OrderType.LIMIT,\n        price=400,\n        price_effect=OrderPriceEffect.CREDIT)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        type=OrderType.LIMIT,\n        price=Decimal(400),\n        price_effect=OrderPriceEffect.CREDIT)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        quantity=1,\n        expiry=date(2018, 10, 19),\n        strike=3.0,\n        option_type=OptionType.CALL,\n",
        "source_code_len": 112,
        "target_code": "        quantity=1,\n        expiry=get_third_friday(date.today()),\n        strike=Decimal(3),\n        option_type=OptionType.CALL,\n",
        "target_code_len": 131,
        "diff_format": "@@ -46,4 +48,4 @@\n         quantity=1,\n-        expiry=date(2018, 10, 19),\n-        strike=3.0,\n+        expiry=get_third_friday(date.today()),\n+        strike=Decimal(3),\n         option_type=OptionType.CALL,\n",
        "source_code_with_indent": "        quantity=1,\n        expiry=date(2018, 10, 19),\n        strike=3.0,\n        option_type=OptionType.CALL,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        quantity=1,\n        expiry=get_third_friday(date.today()),\n        strike=Decimal(3),\n        option_type=OptionType.CALL,\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef main():\n",
        "source_code_len": 13,
        "target_code": "\ndef get_third_friday(d):\n    s = date(d.year, d.month, 15)\n    candidate = s + timedelta(days=(calendar.FRIDAY - s.weekday()) % 7)\n\n    # This month's third friday passed\n    if candidate < d:\n        candidate += timedelta(weeks=4)\n        if candidate.day < 15:\n            candidate += timedelta(weeks=1)\n\n    return candidate\n\n\ndef main():\n",
        "target_code_len": 345,
        "diff_format": "@@ -68,2 +70,15 @@\n \n+def get_third_friday(d):\n+    s = date(d.year, d.month, 15)\n+    candidate = s + timedelta(days=(calendar.FRIDAY - s.weekday()) % 7)\n+\n+    # This month's third friday passed\n+    if candidate < d:\n+        candidate += timedelta(weeks=4)\n+        if candidate.day < 15:\n+            candidate += timedelta(weeks=1)\n+\n+    return candidate\n+\n+\n def main():\n",
        "source_code_with_indent": "\n<DED><DED>def main():\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED><DED>def get_third_friday(d):\n    <IND>s = date(d.year, d.month, 15)\n    candidate = s + timedelta(days=(calendar.FRIDAY - s.weekday()) % 7)\n\n    # This month's third friday passed\n    if candidate < d:\n        <IND>candidate += timedelta(weeks=4)\n        if candidate.day < 15:\n            <IND>candidate += timedelta(weeks=1)\n\n    <DED><DED>return candidate\n\n\n<DED>def main():\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "boyan-soubachov/tastyworks_api",
    "commit": "a18a4809d410a7d54f9378963ac58b4593806adc",
    "filename": "tastyworks/example.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/boyan-soubachov-tastyworks_api/tastyworks/example.py",
    "file_hunks_size": 5,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tastyworks/example.py:52:22 Incompatible parameter type [6]: Expected `tastyworks.models.security.Security` for 1st positional only parameter to call `Order.add_leg` but got `Option`.",
    "message": " Expected `tastyworks.models.security.Security` for 1st positional only parameter to call `Order.add_leg` but got `Option`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 52,
    "warning_line": "    new_order.add_leg(opt)"
  },
  {
    "project": "boyan-soubachov/tastyworks_api",
    "commit": "a18a4809d410a7d54f9378963ac58b4593806adc",
    "filename": "tastyworks/models/option_chain.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/boyan-soubachov-tastyworks_api/tastyworks/models/option_chain.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tastyworks/models/option_chain.py:57:20 Incompatible parameter type [6]: Expected `typing_extensions.SupportsIndex` for 1st positional only parameter to call `list.__getitem__` but got `str`.",
    "message": " Expected `typing_extensions.SupportsIndex` for 1st positional only parameter to call `list.__getitem__` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 57,
    "warning_line": "    for exp in data['expirations']:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nasync def _get_tasty_option_chain_data(session, underlying) -> List[Dict]:\n    async with aiohttp.request(\n",
        "source_code_len": 108,
        "target_code": "\nasync def _get_tasty_option_chain_data(session, underlying) -> Dict:\n    async with aiohttp.request(\n",
        "target_code_len": 102,
        "diff_format": "@@ -76,3 +76,3 @@\n \n-async def _get_tasty_option_chain_data(session, underlying) -> List[Dict]:\n+async def _get_tasty_option_chain_data(session, underlying) -> Dict:\n     async with aiohttp.request(\n",
        "source_code_with_indent": "\n<DED>async def _get_tasty_option_chain_data(session, underlying) -> List[Dict]:\n    <IND>async with aiohttp.request(\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>async def _get_tasty_option_chain_data(session, underlying) -> Dict:\n    <IND>async with aiohttp.request(\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "boyan-soubachov/tastyworks_api",
    "commit": "a18a4809d410a7d54f9378963ac58b4593806adc",
    "filename": "tastyworks/models/option_chain.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/boyan-soubachov-tastyworks_api/tastyworks/models/option_chain.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tastyworks/models/option_chain.py:74:4 Incompatible return type [7]: Expected `List[Option]` but got `OptionChain`.",
    "message": " Expected `List[Option]` but got `OptionChain`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 74,
    "warning_line": "    return OptionChain(res)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nasync def get_option_chain(session, underlying: Underlying, expiration: date = None) -> List[Option]:\n    LOGGER.debug('Getting options chain for ticker: %s', underlying.ticker)\n",
        "source_code_len": 179,
        "target_code": "\nasync def get_option_chain(session, underlying: Underlying, expiration: date = None) -> OptionChain:\n    LOGGER.debug('Getting options chain for ticker: %s', underlying.ticker)\n",
        "target_code_len": 178,
        "diff_format": "@@ -51,3 +51,3 @@\n \n-async def get_option_chain(session, underlying: Underlying, expiration: date = None) -> List[Option]:\n+async def get_option_chain(session, underlying: Underlying, expiration: date = None) -> OptionChain:\n     LOGGER.debug('Getting options chain for ticker: %s', underlying.ticker)\n",
        "source_code_with_indent": "\n<DED><DED>async def get_option_chain(session, underlying: Underlying, expiration: date = None) -> List[Option]:\n    <IND>LOGGER.debug('Getting options chain for ticker: %s', underlying.ticker)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED><DED>async def get_option_chain(session, underlying: Underlying, expiration: date = None) -> OptionChain:\n    <IND>LOGGER.debug('Getting options chain for ticker: %s', underlying.ticker)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]