[
  {
    "project": "ethereum/trinity",
    "commit": "1af8bb2b44320c1194402709a5509c7c27cd06df",
    "filename": "tests-trio/eth1-monitor/test_eth1_monitor.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-trinity/tests-trio/eth1-monitor/test_eth1_monitor.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests-trio/eth1-monitor/test_eth1_monitor.py:57:16 Incompatible parameter type [6]: Expected `eth2.beacon.typing.Gwei` for 3rd parameter `amount` to call `DepositData.__init__` but got `int`.",
    "message": " Expected `eth2.beacon.typing.Gwei` for 3rd parameter `amount` to call `DepositData.__init__` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 57,
    "warning_line": "                amount=amount,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    GetEth1DataRequest,\n    GetEth1DataResponse,\n    GetDepositRequest,\n    GetDepositResponse,\n    Eth1Monitor,\n)\nfrom lahja.trio.endpoint import TrioEndpoint\n\n\nfrom p2p.trio_service import background_service\n\nfrom async_generator import asynccontextmanager\n\nimport random\n\n\nfrom trinity.components.eth2.eth1_monitor.exceptions import Eth1BlockNotFound\n\nfrom lahja import BroadcastConfig\n\n\nMIN_DEPOSIT_AMOUNT = 1000000000  # Gwei\nFULL_DEPOSIT_AMOUNT = 32000000000  # Gwei\n\nSAMPLE_PUBKEY = b\"\\x11\" * 48\nSAMPLE_WITHDRAWAL_CREDENTIALS = b\"\\x22\" * 32\nSAMPLE_VALID_SIGNATURE = b\"\\x33\" * 96\n\n\ndef get_random_valid_deposit_amount() -> int:\n    return random.randint(MIN_DEPOSIT_AMOUNT, FULL_DEPOSIT_AMOUNT)\n\n\ndef deposit(w3, registration_contract) -> int:\n    amount = get_random_valid_deposit_amount()\n    deposit_input = (\n        SAMPLE_PUBKEY,\n        SAMPLE_WITHDRAWAL_CREDENTIALS,\n        SAMPLE_VALID_SIGNATURE,\n        ssz.get_hash_tree_root(\n            DepositData(\n                pubkey=SAMPLE_PUBKEY,\n                withdrawal_credentials=SAMPLE_WITHDRAWAL_CREDENTIALS,\n                amount=amount,\n                signature=SAMPLE_VALID_SIGNATURE,\n            )\n        ),\n    )\n    tx_hash = registration_contract.functions.deposit(*deposit_input).transact(\n        {\"value\": amount * eth_utils.denoms.gwei}\n    )\n    tx_receipt = w3.eth.waitForTransactionReceipt(tx_hash)\n    assert tx_receipt[\"status\"]\n    return amount\n\n\n@asynccontextmanager\nasync def Eth1MonitorFactory(\n    w3, registration_contract, blocks_delayed_to_query_logs, polling_period, event_bus\n):\n    m = Eth1Monitor(\n",
        "source_code_len": 1599,
        "target_code": "    GetEth1DataRequest,\n    GetDepositRequest,\n    Eth1Monitor,\n)\nfrom trinity.components.eth2.eth1_monitor.exceptions import Eth1BlockNotFound\n\n\ndef test_deploy(w3, registration_contract):\n    pass\n\n\n@pytest.mark.trio\nasync def test_logs_handling(\n    w3,\n    registration_contract,\n    tester,\n    blocks_delayed_to_query_logs,\n    polling_period,\n    endpoint_server,\n    func_do_deposit,\n):\n    amount_0 = func_do_deposit()\n    amount_1 = func_do_deposit()\n    m = Eth1Monitor(\n",
        "target_code_len": 482,
        "diff_format": "@@ -14,61 +13,24 @@\n     GetEth1DataRequest,\n-    GetEth1DataResponse,\n     GetDepositRequest,\n-    GetDepositResponse,\n     Eth1Monitor,\n )\n-from lahja.trio.endpoint import TrioEndpoint\n-\n-\n-from p2p.trio_service import background_service\n-\n-from async_generator import asynccontextmanager\n-\n-import random\n-\n-\n from trinity.components.eth2.eth1_monitor.exceptions import Eth1BlockNotFound\n \n-from lahja import BroadcastConfig\n-\n-\n-MIN_DEPOSIT_AMOUNT = 1000000000  # Gwei\n-FULL_DEPOSIT_AMOUNT = 32000000000  # Gwei\n-\n-SAMPLE_PUBKEY = b\"\\x11\" * 48\n-SAMPLE_WITHDRAWAL_CREDENTIALS = b\"\\x22\" * 32\n-SAMPLE_VALID_SIGNATURE = b\"\\x33\" * 96\n-\n-\n-def get_random_valid_deposit_amount() -> int:\n-    return random.randint(MIN_DEPOSIT_AMOUNT, FULL_DEPOSIT_AMOUNT)\n-\n-\n-def deposit(w3, registration_contract) -> int:\n-    amount = get_random_valid_deposit_amount()\n-    deposit_input = (\n-        SAMPLE_PUBKEY,\n-        SAMPLE_WITHDRAWAL_CREDENTIALS,\n-        SAMPLE_VALID_SIGNATURE,\n-        ssz.get_hash_tree_root(\n-            DepositData(\n-                pubkey=SAMPLE_PUBKEY,\n-                withdrawal_credentials=SAMPLE_WITHDRAWAL_CREDENTIALS,\n-                amount=amount,\n-                signature=SAMPLE_VALID_SIGNATURE,\n-            )\n-        ),\n-    )\n-    tx_hash = registration_contract.functions.deposit(*deposit_input).transact(\n-        {\"value\": amount * eth_utils.denoms.gwei}\n-    )\n-    tx_receipt = w3.eth.waitForTransactionReceipt(tx_hash)\n-    assert tx_receipt[\"status\"]\n-    return amount\n-\n-\n-@asynccontextmanager\n-async def Eth1MonitorFactory(\n-    w3, registration_contract, blocks_delayed_to_query_logs, polling_period, event_bus\n-):\n+\n+def test_deploy(w3, registration_contract):\n+    pass\n+\n+\n+@pytest.mark.trio\n+async def test_logs_handling(\n+    w3,\n+    registration_contract,\n+    tester,\n+    blocks_delayed_to_query_logs,\n+    polling_period,\n+    endpoint_server,\n+    func_do_deposit,\n+):\n+    amount_0 = func_do_deposit()\n+    amount_1 = func_do_deposit()\n     m = Eth1Monitor(\n",
        "source_code_with_indent": "    GetEth1DataRequest,\n    GetEth1DataResponse,\n    GetDepositRequest,\n    GetDepositResponse,\n    Eth1Monitor,\n)\nfrom lahja.trio.endpoint import TrioEndpoint\n\n\nfrom p2p.trio_service import background_service\n\nfrom async_generator import asynccontextmanager\n\nimport random\n\n\nfrom trinity.components.eth2.eth1_monitor.exceptions import Eth1BlockNotFound\n\nfrom lahja import BroadcastConfig\n\n\nMIN_DEPOSIT_AMOUNT = 1000000000  # Gwei\nFULL_DEPOSIT_AMOUNT = 32000000000  # Gwei\n\nSAMPLE_PUBKEY = b\"\\x11\" * 48\nSAMPLE_WITHDRAWAL_CREDENTIALS = b\"\\x22\" * 32\nSAMPLE_VALID_SIGNATURE = b\"\\x33\" * 96\n\n\ndef get_random_valid_deposit_amount() -> int:\n    <IND>return random.randint(MIN_DEPOSIT_AMOUNT, FULL_DEPOSIT_AMOUNT)\n\n\n<DED>def deposit(w3, registration_contract) -> int:\n    <IND>amount = get_random_valid_deposit_amount()\n    deposit_input = (\n        SAMPLE_PUBKEY,\n        SAMPLE_WITHDRAWAL_CREDENTIALS,\n        SAMPLE_VALID_SIGNATURE,\n        ssz.get_hash_tree_root(\n            DepositData(\n                pubkey=SAMPLE_PUBKEY,\n                withdrawal_credentials=SAMPLE_WITHDRAWAL_CREDENTIALS,\n                amount=amount,\n                signature=SAMPLE_VALID_SIGNATURE,\n            )\n        ),\n    )\n    tx_hash = registration_contract.functions.deposit(*deposit_input).transact(\n        {\"value\": amount * eth_utils.denoms.gwei}\n    )\n    tx_receipt = w3.eth.waitForTransactionReceipt(tx_hash)\n    assert tx_receipt[\"status\"]\n    return amount\n\n\n<DED>@asynccontextmanager\nasync def Eth1MonitorFactory(\n    w3, registration_contract, blocks_delayed_to_query_logs, polling_period, event_bus\n):\n    <IND>m = Eth1Monitor(\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    GetEth1DataRequest,\n    GetDepositRequest,\n    Eth1Monitor,\n)\nfrom trinity.components.eth2.eth1_monitor.exceptions import Eth1BlockNotFound\n\n\ndef test_deploy(w3, registration_contract):\n    <IND>pass\n\n\n<DED>@pytest.mark.trio\nasync def test_logs_handling(\n    w3,\n    registration_contract,\n    tester,\n    blocks_delayed_to_query_logs,\n    polling_period,\n    endpoint_server,\n    func_do_deposit,\n):\n    <IND>amount_0 = func_do_deposit()\n    amount_1 = func_do_deposit()\n    m = Eth1Monitor(\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        polling_period,\n        event_bus,\n    )\n    async with background_service(m):\n        yield m\n\n\n# Ref: https://github.com/ethereum/lahja/blob/f0b7ead13298de82c02ed92cfb2d32a8bc00b42a/tests/core/trio/conftest.py  # noqa E501\n@asynccontextmanager\nasync def EventbusFactory():\n    async with TrioEndpoint(\"endpoint-for-testing\").run() as client:\n        yield client\n\n\ndef test_deploy(w3, registration_contract):\n    pass\n\n\n@pytest.mark.trio\nasync def test_eth1_monitor_deposit_logs_handling(\n    w3,\n    registration_contract,\n    tester,\n    blocks_delayed_to_query_logs,\n    polling_period,\n    endpoint_server,\n):\n    amount_0 = deposit(w3, registration_contract)\n    amount_1 = deposit(w3, registration_contract)\n    async with Eth1MonitorFactory(\n        w3,\n        registration_contract,\n        blocks_delayed_to_query_logs,\n        polling_period,\n        endpoint_server,\n    ) as m:\n        # Test: previous logs can still be queried after `Eth1Monitor` is run.\n",
        "source_code_len": 980,
        "target_code": "        polling_period,\n        endpoint_server,\n    )\n    async with background_service(m):\n        # Test: previous logs can still be queried after `Eth1Monitor` is run.\n",
        "target_code_len": 172,
        "diff_format": "@@ -79,37 +41,5 @@\n         polling_period,\n-        event_bus,\n+        endpoint_server,\n     )\n     async with background_service(m):\n-        yield m\n-\n-\n-# Ref: https://github.com/ethereum/lahja/blob/f0b7ead13298de82c02ed92cfb2d32a8bc00b42a/tests/core/trio/conftest.py  # noqa E501\n-@asynccontextmanager\n-async def EventbusFactory():\n-    async with TrioEndpoint(\"endpoint-for-testing\").run() as client:\n-        yield client\n-\n-\n-def test_deploy(w3, registration_contract):\n-    pass\n-\n-\n-@pytest.mark.trio\n-async def test_eth1_monitor_deposit_logs_handling(\n-    w3,\n-    registration_contract,\n-    tester,\n-    blocks_delayed_to_query_logs,\n-    polling_period,\n-    endpoint_server,\n-):\n-    amount_0 = deposit(w3, registration_contract)\n-    amount_1 = deposit(w3, registration_contract)\n-    async with Eth1MonitorFactory(\n-        w3,\n-        registration_contract,\n-        blocks_delayed_to_query_logs,\n-        polling_period,\n-        endpoint_server,\n-    ) as m:\n         # Test: previous logs can still be queried after `Eth1Monitor` is run.\n",
        "source_code_with_indent": "        polling_period,\n        event_bus,\n    )\n    async with background_service(m):\n        <IND>yield m\n\n\n# Ref: https://github.com/ethereum/lahja/blob/f0b7ead13298de82c02ed92cfb2d32a8bc00b42a/tests/core/trio/conftest.py  # noqa E501\n<DED><DED>@asynccontextmanager\nasync def EventbusFactory():\n    <IND>async with TrioEndpoint(\"endpoint-for-testing\").run() as client:\n        <IND>yield client\n\n\n<DED><DED>def test_deploy(w3, registration_contract):\n    <IND>pass\n\n\n<DED>@pytest.mark.trio\nasync def test_eth1_monitor_deposit_logs_handling(\n    w3,\n    registration_contract,\n    tester,\n    blocks_delayed_to_query_logs,\n    polling_period,\n    endpoint_server,\n):\n    <IND>amount_0 = deposit(w3, registration_contract)\n    amount_1 = deposit(w3, registration_contract)\n    async with Eth1MonitorFactory(\n        w3,\n        registration_contract,\n        blocks_delayed_to_query_logs,\n        polling_period,\n        endpoint_server,\n    ) as m:\n        # Test: previous logs can still be queried after `Eth1Monitor` is run.\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        polling_period,\n        endpoint_server,\n    )\n    async with background_service(m):\n        # Test: previous logs can still be queried after `Eth1Monitor` is run.\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ethereum/trinity",
    "commit": "1af8bb2b44320c1194402709a5509c7c27cd06df",
    "filename": "trinity/components/eth2/eth1_monitor/eth1_monitor.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-trinity/trinity/components/eth2/eth1_monitor/eth1_monitor.py",
    "file_hunks_size": 13,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "trinity/components/eth2/eth1_monitor/eth1_monitor.py:128:20 Incompatible return type [7]: Expected `None` but got `typing.AsyncGenerator[Tuple[typing.Any, typing.Any], None]`.",
    "message": " Expected `None` but got `typing.AsyncGenerator[Tuple[typing.Any, typing.Any], None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 128,
    "warning_line": "                    yield log, lookback_block[\"hash\"]"
  },
  {
    "project": "ethereum/trinity",
    "commit": "1af8bb2b44320c1194402709a5509c7c27cd06df",
    "filename": "trinity/components/eth2/eth1_monitor/eth1_monitor.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-trinity/trinity/components/eth2/eth1_monitor/eth1_monitor.py",
    "file_hunks_size": 13,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "trinity/components/eth2/eth1_monitor/eth1_monitor.py:195:16 Incompatible parameter type [6]: Expected `eth2.beacon.typing.Gwei` for 3rd parameter `amount` to call `DepositData.__init__` but got `int`.",
    "message": " Expected `eth2.beacon.typing.Gwei` for 3rd parameter `amount` to call `DepositData.__init__` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 195,
    "warning_line": "                amount=int.from_bytes(log_args[\"amount\"], \"little\"),"
  }
]