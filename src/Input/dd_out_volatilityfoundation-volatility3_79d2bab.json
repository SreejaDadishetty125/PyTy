[
  {
    "project": "volatilityfoundation/volatility3",
    "commit": "79d2bab44d0b5e1230f5677f4626eabf33b8276c",
    "filename": "volatility/framework/interfaces/context.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/volatilityfoundation-volatility3/volatility/framework/interfaces/context.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "volatility/framework/interfaces/context.py:136:8 Incompatible return type [7]: Expected `str` but got `hashlib._Hash`.",
    "message": " Expected `str` but got `hashlib._Hash`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 136,
    "warning_line": "        return hashlib.md5(",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        We turn it into JSON to make a common string and use a quick hash, because collissions are unlikely\"\"\"\n        return hashlib.md5(\n            str(list(self._context.memory[self.layer_name].mapping(self.offset, self.size, ignore_errors = True))))\n\n",
        "source_code_len": 256,
        "target_code": "        We turn it into JSON to make a common string and use a quick hash, because collissions are unlikely\"\"\"\n        layer = self._context.memory[self.layer_name]\n        if not isinstance(layer, interfaces.layers.TranslationLayerInterface):\n            raise TypeError(\"Hashing modules on non-TranslationLayers is not allowed\")\n        return hashlib.md5(\n            bytes(str(list(layer.mapping(self.offset, self.size, ignore_errors = True))), 'utf-8')).hexdigest()\n\n",
        "target_code_len": 472,
        "diff_format": "@@ -135,4 +135,7 @@\n         We turn it into JSON to make a common string and use a quick hash, because collissions are unlikely\"\"\"\n+        layer = self._context.memory[self.layer_name]\n+        if not isinstance(layer, interfaces.layers.TranslationLayerInterface):\n+            raise TypeError(\"Hashing modules on non-TranslationLayers is not allowed\")\n         return hashlib.md5(\n-            str(list(self._context.memory[self.layer_name].mapping(self.offset, self.size, ignore_errors = True))))\n+            bytes(str(list(layer.mapping(self.offset, self.size, ignore_errors = True))), 'utf-8')).hexdigest()\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n        return hashlib.md5(\n            str(list(self._context.memory[self.layer_name].mapping(self.offset, self.size, ignore_errors = True))))\n\n",
        "target_code_with_indent": "\n        layer = self._context.memory[self.layer_name]\n        if not isinstance(layer, interfaces.layers.TranslationLayerInterface):\n            <IND>raise TypeError(\"Hashing modules on non-TranslationLayers is not allowed\")\n        <DED>return hashlib.md5(\n            bytes(str(list(layer.mapping(self.offset, self.size, ignore_errors = True))), 'utf-8')).hexdigest()\n\n"
      }
    ]
  },
  {
    "project": "volatilityfoundation/volatility3",
    "commit": "79d2bab44d0b5e1230f5677f4626eabf33b8276c",
    "filename": "volatility/framework/interfaces/context.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/volatilityfoundation-volatility3/volatility/framework/interfaces/context.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "volatility/framework/interfaces/context.py:137:12 Incompatible parameter type [6]: Expected `typing.Union[array.array[typing.Any], bytearray, bytes, memoryview, mmap.mmap]` for 1st positional only parameter to call `hashlib.md5` but got `str`.",
    "message": " Expected `typing.Union[array.array[typing.Any], bytearray, bytes, memoryview, mmap.mmap]` for 1st positional only parameter to call `hashlib.md5` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 137,
    "warning_line": "            str(list(self._context.memory[self.layer_name].mapping(self.offset, self.size, ignore_errors = True))))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        We turn it into JSON to make a common string and use a quick hash, because collissions are unlikely\"\"\"\n        return hashlib.md5(\n            str(list(self._context.memory[self.layer_name].mapping(self.offset, self.size, ignore_errors = True))))\n\n",
        "source_code_len": 256,
        "target_code": "        We turn it into JSON to make a common string and use a quick hash, because collissions are unlikely\"\"\"\n        layer = self._context.memory[self.layer_name]\n        if not isinstance(layer, interfaces.layers.TranslationLayerInterface):\n            raise TypeError(\"Hashing modules on non-TranslationLayers is not allowed\")\n        return hashlib.md5(\n            bytes(str(list(layer.mapping(self.offset, self.size, ignore_errors = True))), 'utf-8')).hexdigest()\n\n",
        "target_code_len": 472,
        "diff_format": "@@ -135,4 +135,7 @@\n         We turn it into JSON to make a common string and use a quick hash, because collissions are unlikely\"\"\"\n+        layer = self._context.memory[self.layer_name]\n+        if not isinstance(layer, interfaces.layers.TranslationLayerInterface):\n+            raise TypeError(\"Hashing modules on non-TranslationLayers is not allowed\")\n         return hashlib.md5(\n-            str(list(self._context.memory[self.layer_name].mapping(self.offset, self.size, ignore_errors = True))))\n+            bytes(str(list(layer.mapping(self.offset, self.size, ignore_errors = True))), 'utf-8')).hexdigest()\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n        return hashlib.md5(\n            str(list(self._context.memory[self.layer_name].mapping(self.offset, self.size, ignore_errors = True))))\n\n",
        "target_code_with_indent": "\n        layer = self._context.memory[self.layer_name]\n        if not isinstance(layer, interfaces.layers.TranslationLayerInterface):\n            <IND>raise TypeError(\"Hashing modules on non-TranslationLayers is not allowed\")\n        <DED>return hashlib.md5(\n            bytes(str(list(layer.mapping(self.offset, self.size, ignore_errors = True))), 'utf-8')).hexdigest()\n\n"
      }
    ]
  }
]