[
  {
    "project": "feature-engine/feature_engine",
    "commit": "9889d46b430af72424af3ee5ad7fa5ec1d5529f2",
    "filename": "feature_engine/transformation/boxcox.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/feature-engine-feature_engine/feature_engine/transformation/boxcox.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "feature_engine/transformation/boxcox.py:44:23 Incompatible variable type [9]: variables is declared to have type `Union[List[str], str]` but is used as type `None`.",
    "message": " variables is declared to have type `Union[List[str], str]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 44,
    "warning_line": "    def __init__(self, variables: Union[List[str], str] = None) -> None:"
  },
  {
    "project": "feature-engine/feature_engine",
    "commit": "9889d46b430af72424af3ee5ad7fa5ec1d5529f2",
    "filename": "feature_engine/transformation/log.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/feature-engine-feature_engine/feature_engine/transformation/log.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "feature_engine/transformation/log.py:37:31 Incompatible variable type [9]: variables is declared to have type `Union[List[str], str]` but is used as type `None`.",
    "message": " variables is declared to have type `Union[List[str], str]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 37,
    "warning_line": "        self, base: str = \"e\", variables: Union[List[str], str] = None"
  },
  {
    "project": "feature-engine/feature_engine",
    "commit": "9889d46b430af72424af3ee5ad7fa5ec1d5529f2",
    "filename": "feature_engine/transformation/power.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/feature-engine-feature_engine/feature_engine/transformation/power.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "feature_engine/transformation/power.py:36:44 Incompatible variable type [9]: variables is declared to have type `Union[List[str], str]` but is used as type `None`.",
    "message": " variables is declared to have type `Union[List[str], str]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 36,
    "warning_line": "        self, exp: Union[float, int] = 0.5, variables: Union[List[str], str] = None"
  },
  {
    "project": "feature-engine/feature_engine",
    "commit": "9889d46b430af72424af3ee5ad7fa5ec1d5529f2",
    "filename": "feature_engine/transformation/reciprocal.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/feature-engine-feature_engine/feature_engine/transformation/reciprocal.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "feature_engine/transformation/reciprocal.py:33:23 Incompatible variable type [9]: variables is declared to have type `Union[List[str], str]` but is used as type `None`.",
    "message": " variables is declared to have type `Union[List[str], str]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 33,
    "warning_line": "    def __init__(self, variables: Union[List[str], str] = None) -> None:"
  },
  {
    "project": "feature-engine/feature_engine",
    "commit": "9889d46b430af72424af3ee5ad7fa5ec1d5529f2",
    "filename": "feature_engine/transformation/yeojohnson.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/feature-engine-feature_engine/feature_engine/transformation/yeojohnson.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "feature_engine/transformation/yeojohnson.py:43:23 Incompatible variable type [9]: variables is declared to have type `Union[List[str], str]` but is used as type `None`.",
    "message": " variables is declared to have type `Union[List[str], str]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 43,
    "warning_line": "    def __init__(self, variables: Union[List[str], str] = None) -> None:"
  },
  {
    "project": "feature-engine/feature_engine",
    "commit": "9889d46b430af72424af3ee5ad7fa5ec1d5529f2",
    "filename": "feature_engine/variable_manipulation.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/feature-engine-feature_engine/feature_engine/variable_manipulation.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "feature_engine/variable_manipulation.py:36:4 Incompatible return type [7]: Expected `Optional[List[str]]` but got `Union[None, List[str], str]`.",
    "message": " Expected `Optional[List[str]]` but got `Union[None, List[str], str]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 36,
    "warning_line": "    return variables",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import List, Optional, Union\n\n",
        "source_code_len": 43,
        "target_code": "\nfrom typing import List, Optional, Union, Any\n\n",
        "target_code_len": 48,
        "diff_format": "@@ -4,3 +4,3 @@\n \n-from typing import List, Optional, Union\n+from typing import List, Optional, Union, Any\n \n",
        "source_code_with_indent": "\nfrom typing import List, Optional, Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import List, Optional, Union, Any\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n\ndef _define_variables(\n    variables: Union[str, Optional[List[str]]]\n) -> Optional[List[str]]:\n    \"\"\"\n    Takes string or list of strings and checks if argument is list of strings.\n    Can take None as argument.\n\n    Args:\n        variables: string or list of strings\n\n    Returns:\n        List of strings\n    \"\"\"\n\n    if not variables or (\n        isinstance(variables, list) and all(isinstance(i, str) for i in variables)\n    ):\n        variables = variables\n\n    else:\n        if isinstance(variables, str):\n            variables = [variables]\n\n        else:\n            raise ValueError(\"Variables should be string or list of strings\")\n\n",
        "source_code_len": 645,
        "target_code": "\nVariables = Union[None, int, str, List[Union[str, int]]]\n\n\n# set return value typehint to Any to avoid issues with the base transformer fit methods\ndef _check_input_parameter_variables(variables: Variables) -> Any:\n    \"\"\"\n    Checks that the input is of the correct type\n\n    Args:\n        variables: string, int, list of strings, list of integers. Default=None\n\n    Returns:\n        Returns the same input\n    \"\"\"\n    if variables:\n        if isinstance(variables, list):\n            if not all(isinstance(i, (str, int)) for i in variables):\n                raise ValueError(\n                    \"Variables should be string, int, list of strings, list of integers\"\n                )\n        else:\n            if not isinstance(variables, (str, int)):\n                raise ValueError(\n                    \"Variables should be string, int, list of strings, list of integers\"\n                )\n\n",
        "target_code_len": 896,
        "diff_format": "@@ -8,28 +8,27 @@\n \n+Variables = Union[None, int, str, List[Union[str, int]]]\n \n-def _define_variables(\n-    variables: Union[str, Optional[List[str]]]\n-) -> Optional[List[str]]:\n+\n+# set return value typehint to Any to avoid issues with the base transformer fit methods\n+def _check_input_parameter_variables(variables: Variables) -> Any:\n     \"\"\"\n-    Takes string or list of strings and checks if argument is list of strings.\n-    Can take None as argument.\n+    Checks that the input is of the correct type\n \n     Args:\n-        variables: string or list of strings\n+        variables: string, int, list of strings, list of integers. Default=None\n \n     Returns:\n-        List of strings\n+        Returns the same input\n     \"\"\"\n-\n-    if not variables or (\n-        isinstance(variables, list) and all(isinstance(i, str) for i in variables)\n-    ):\n-        variables = variables\n-\n-    else:\n-        if isinstance(variables, str):\n-            variables = [variables]\n-\n+    if variables:\n+        if isinstance(variables, list):\n+            if not all(isinstance(i, (str, int)) for i in variables):\n+                raise ValueError(\n+                    \"Variables should be string, int, list of strings, list of integers\"\n+                )\n         else:\n-            raise ValueError(\"Variables should be string or list of strings\")\n+            if not isinstance(variables, (str, int)):\n+                raise ValueError(\n+                    \"Variables should be string, int, list of strings, list of integers\"\n+                )\n \n",
        "source_code_with_indent": "\n\ndef _define_variables(\n    variables: Union[str, Optional[List[str]]]\n) -> Optional[List[str]]:\n    <IND>\"\"\"\n    Takes string or list of strings and checks if argument is list of strings.\n    Can take None as argument.\n\n    Args:\n        variables: string or list of strings\n\n    Returns:\n        List of strings\n    \"\"\"\n\n    if not variables or (\n        isinstance(variables, list) and all(isinstance(i, str) for i in variables)\n    ):\n        <IND>variables = variables\n\n    <DED>else:\n        <IND>if isinstance(variables, str):\n            <IND>variables = [variables]\n\n        <DED>else:\n            <IND>raise ValueError(\"Variables should be string or list of strings\")\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nVariables = Union[None, int, str, List[Union[str, int]]]\n\n\n# set return value typehint to Any to avoid issues with the base transformer fit methods\ndef _check_input_parameter_variables(variables: Variables) -> Any:\n    <IND>\"\"\"\n    Checks that the input is of the correct type\n\n    Args:\n        variables: string, int, list of strings, list of integers. Default=None\n\n    Returns:\n        Returns the same input\n    \"\"\"\n    if variables:\n        <IND>if isinstance(variables, list):\n            <IND>if not all(isinstance(i, (str, int)) for i in variables):\n                <IND>raise ValueError(\n                    \"Variables should be string, int, list of strings, list of integers\"\n                )\n        <DED><DED>else:\n            <IND>if not isinstance(variables, (str, int)):\n                <IND>raise ValueError(\n                    \"Variables should be string, int, list of strings, list of integers\"\n                )\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "feature-engine/feature_engine",
    "commit": "9889d46b430af72424af3ee5ad7fa5ec1d5529f2",
    "filename": "feature_engine/wrappers/wrappers.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/feature-engine-feature_engine/feature_engine/wrappers/wrappers.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "feature_engine/wrappers/wrappers.py:41:23 Incompatible variable type [9]: variables is declared to have type `List[str]` but is used as type `None`.",
    "message": " variables is declared to have type `List[str]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 41,
    "warning_line": "    def __init__(self, variables: List[str] = None, transformer=None) -> None:"
  }
]