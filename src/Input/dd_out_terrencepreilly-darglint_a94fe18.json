[
  {
    "project": "terrencepreilly/darglint",
    "commit": "a94fe180d72c4ecff47611c48761e4a34d2036bd",
    "filename": "darglint/darglint.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/terrencepreilly-darglint/darglint/darglint.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "darglint/darglint.py:138:4 Incompatible return type [7]: Expected `List[str]` but got `Tuple[List[str], List[str]]`.",
    "message": " Expected `List[str]` but got `Tuple[List[str], List[str]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 138,
    "warning_line": "    return args, types",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _get_stripped_method_args(method: ast.FunctionDef) -> List[str]:\n    args, types = _get_arguments(method)\n",
        "source_code_len": 111,
        "target_code": "\ndef _get_stripped_method_args(\n        method: ast.FunctionDef) -> Tuple[List[str], List[str]]:\n    args, types = _get_arguments(method)\n",
        "target_code_len": 138,
        "diff_format": "@@ -129,3 +129,4 @@\n \n-def _get_stripped_method_args(method: ast.FunctionDef) -> List[str]:\n+def _get_stripped_method_args(\n+        method: ast.FunctionDef) -> Tuple[List[str], List[str]]:\n     args, types = _get_arguments(method)\n",
        "source_code_with_indent": "\n<DED>def _get_stripped_method_args(method: ast.FunctionDef) -> List[str]:\n    <IND>args, types = _get_arguments(method)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def _get_stripped_method_args(\n        method: ast.FunctionDef) -> Tuple[List[str], List[str]]:\n    <IND>args, types = _get_arguments(method)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "terrencepreilly/darglint",
    "commit": "a94fe180d72c4ecff47611c48761e4a34d2036bd",
    "filename": "darglint/darglint.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/terrencepreilly-darglint/darglint/darglint.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "darglint/darglint.py:161:8 Incompatible return type [7]: Expected `str` but got implicit return value of `None`.",
    "message": " Expected `str` but got implicit return value of `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 161,
    "warning_line": "        raise Exception('Unexpected type in raises expression: {}'.format(",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ))\n\n",
        "source_code_len": 12,
        "target_code": "        ))\n    return ''\n\n",
        "target_code_len": 26,
        "diff_format": "@@ -163,2 +164,3 @@\n         ))\n+    return ''\n \n",
        "source_code_with_indent": "        ))\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ))\n    <DED>return ''\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "terrencepreilly/darglint",
    "commit": "a94fe180d72c4ecff47611c48761e4a34d2036bd",
    "filename": "darglint/darglint.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/terrencepreilly-darglint/darglint/darglint.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "darglint/darglint.py:167:4 Incompatible variable type [9]: ret is declared to have type `List[str]` but is used as type `Set[Variable[_T]]`.",
    "message": " ret is declared to have type `List[str]` but is used as type `Set[Variable[_T]]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 167,
    "warning_line": "    ret = set()  # type: List[str]",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def _get_exceptions_raised(fn: ast.FunctionDef) -> Set[str]:\n    ret = set()  # type: List[str]\n    for raises in _get_all_raises(fn):\n",
        "source_code_len": 135,
        "target_code": "def _get_exceptions_raised(fn: ast.FunctionDef) -> Set[str]:\n    ret = set()  # type: Set[str]\n    for raises in _get_all_raises(fn):\n",
        "target_code_len": 134,
        "diff_format": "@@ -166,3 +168,3 @@\n def _get_exceptions_raised(fn: ast.FunctionDef) -> Set[str]:\n-    ret = set()  # type: List[str]\n+    ret = set()  # type: Set[str]\n     for raises in _get_all_raises(fn):\n",
        "source_code_with_indent": "<DED><DED>def _get_exceptions_raised(fn: ast.FunctionDef) -> Set[str]:\n    <IND>ret = set()  # type: List[str]\n    for raises in _get_all_raises(fn):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED>def _get_exceptions_raised(fn: ast.FunctionDef) -> Set[str]:\n    <IND>ret = set()  # type: Set[str]\n    for raises in _get_all_raises(fn):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "terrencepreilly/darglint",
    "commit": "a94fe180d72c4ecff47611c48761e4a34d2036bd",
    "filename": "darglint/darglint.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/terrencepreilly-darglint/darglint/darglint.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "darglint/darglint.py:174:4 Incompatible return type [7]: Expected `Set[str]` but got `List[str]`.",
    "message": " Expected `Set[str]` but got `List[str]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 174,
    "warning_line": "    return ret",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def _get_exceptions_raised(fn: ast.FunctionDef) -> Set[str]:\n    ret = set()  # type: List[str]\n    for raises in _get_all_raises(fn):\n",
        "source_code_len": 135,
        "target_code": "def _get_exceptions_raised(fn: ast.FunctionDef) -> Set[str]:\n    ret = set()  # type: Set[str]\n    for raises in _get_all_raises(fn):\n",
        "target_code_len": 134,
        "diff_format": "@@ -166,3 +168,3 @@\n def _get_exceptions_raised(fn: ast.FunctionDef) -> Set[str]:\n-    ret = set()  # type: List[str]\n+    ret = set()  # type: Set[str]\n     for raises in _get_all_raises(fn):\n",
        "source_code_with_indent": "<DED><DED>def _get_exceptions_raised(fn: ast.FunctionDef) -> Set[str]:\n    <IND>ret = set()  # type: List[str]\n    for raises in _get_all_raises(fn):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED>def _get_exceptions_raised(fn: ast.FunctionDef) -> Set[str]:\n    <IND>ret = set()  # type: Set[str]\n    for raises in _get_all_raises(fn):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "terrencepreilly/darglint",
    "commit": "a94fe180d72c4ecff47611c48761e4a34d2036bd",
    "filename": "darglint/integrity_checker.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/terrencepreilly-darglint/darglint/integrity_checker.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "darglint/integrity_checker.py:66:16 Incompatible attribute type [8]: Attribute `docstring` declared in class `IntegrityChecker` has type `str` but is used as type `Docstring`.",
    "message": " Attribute `docstring` declared in class `IntegrityChecker` has type `str` but is used as type `Docstring`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 66,
    "warning_line": "                self.docstring = Docstring(lex(function.docstring))"
  },
  {
    "project": "terrencepreilly/darglint",
    "commit": "a94fe180d72c4ecff47611c48761e4a34d2036bd",
    "filename": "darglint/integrity_checker.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/terrencepreilly-darglint/darglint/integrity_checker.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "darglint/integrity_checker.py:66:43 Incompatible parameter type [6]: Expected `typing.Iterable[darglint.token.Token]` for 1st positional only parameter to call `Docstring.__init__` but got `typing.Iterator[typing.List[darglint.token.Token]]`.",
    "message": " Expected `typing.Iterable[darglint.token.Token]` for 1st positional only parameter to call `Docstring.__init__` but got `typing.Iterator[typing.List[darglint.token.Token]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 66,
    "warning_line": "                self.docstring = Docstring(lex(function.docstring))"
  }
]