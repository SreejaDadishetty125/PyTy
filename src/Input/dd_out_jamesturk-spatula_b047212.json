[
  {
    "project": "jamesturk/spatula",
    "commit": "b0472120ea7f74bcbab02403a0e9bbce94adc619",
    "filename": "src/spatula/cli.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jamesturk-spatula/src/spatula/cli.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/spatula/cli.py:159:33 Incompatible parameter type [6]: Expected `typing.Type[typing.Any]` for 1st positional only parameter to call `_get_fake_input` but got `typing.Union[typing.Type[typing.Any], Workflow]`.",
    "message": " Expected `typing.Type[typing.Any]` for 1st positional only parameter to call `_get_fake_input` but got `typing.Union[typing.Type[typing.Any], Workflow]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 159,
    "warning_line": "    fake_input = _get_fake_input(Cls, data, interactive)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from .utils import _display\nfrom .sources import URL\nfrom .workflow import Workflow\n",
        "source_code_len": 84,
        "target_code": "from .utils import _display\nfrom .sources import URL, Source\nfrom .workflow import Workflow\n",
        "target_code_len": 92,
        "diff_format": "@@ -12,3 +12,3 @@\n from .utils import _display\n-from .sources import URL\n+from .sources import URL, Source\n from .workflow import Workflow\n",
        "source_code_with_indent": "from .utils import _display\nfrom .sources import URL\nfrom .workflow import Workflow\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from .utils import _display\nfrom .sources import URL, Source\nfrom .workflow import Workflow\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    configure_logging(logging.DEBUG)\n    Cls = get_class(class_name)\n    s = Scraper()\n\n",
        "source_code_len": 88,
        "target_code": "    configure_logging(logging.DEBUG)\n    # TODO: remove if workflow goes away\n    Cls = typing.cast(type, get_class(class_name))\n    s = Scraper()\n    source_obj: Source\n\n",
        "target_code_len": 171,
        "diff_format": "@@ -155,4 +158,6 @@\n     configure_logging(logging.DEBUG)\n-    Cls = get_class(class_name)\n+    # TODO: remove if workflow goes away\n+    Cls = typing.cast(type, get_class(class_name))\n     s = Scraper()\n+    source_obj: Source\n \n",
        "source_code_with_indent": "    configure_logging(logging.DEBUG)\n    Cls = get_class(class_name)\n    s = Scraper()\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    configure_logging(logging.DEBUG)\n    # TODO: remove if workflow goes away\n    Cls = typing.cast(type, get_class(class_name))\n    s = Scraper()\n    source_obj: Source\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jamesturk/spatula",
    "commit": "b0472120ea7f74bcbab02403a0e9bbce94adc619",
    "filename": "src/spatula/cli.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jamesturk-spatula/src/spatula/cli.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/spatula/cli.py:163:8 Incompatible variable type [9]: source is declared to have type `str` but is used as type `URL`.",
    "message": " source is declared to have type `str` but is used as type `URL`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 163,
    "warning_line": "        source = URL(source)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from .utils import _display\nfrom .sources import URL\nfrom .workflow import Workflow\n",
        "source_code_len": 84,
        "target_code": "from .utils import _display\nfrom .sources import URL, Source\nfrom .workflow import Workflow\n",
        "target_code_len": 92,
        "diff_format": "@@ -12,3 +12,3 @@\n from .utils import _display\n-from .sources import URL\n+from .sources import URL, Source\n from .workflow import Workflow\n",
        "source_code_with_indent": "from .utils import _display\nfrom .sources import URL\nfrom .workflow import Workflow\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from .utils import _display\nfrom .sources import URL, Source\nfrom .workflow import Workflow\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    configure_logging(logging.DEBUG)\n    Cls = get_class(class_name)\n    s = Scraper()\n\n",
        "source_code_len": 88,
        "target_code": "    configure_logging(logging.DEBUG)\n    # TODO: remove if workflow goes away\n    Cls = typing.cast(type, get_class(class_name))\n    s = Scraper()\n    source_obj: Source\n\n",
        "target_code_len": 171,
        "diff_format": "@@ -155,4 +158,6 @@\n     configure_logging(logging.DEBUG)\n-    Cls = get_class(class_name)\n+    # TODO: remove if workflow goes away\n+    Cls = typing.cast(type, get_class(class_name))\n     s = Scraper()\n+    source_obj: Source\n \n",
        "source_code_with_indent": "    configure_logging(logging.DEBUG)\n    Cls = get_class(class_name)\n    s = Scraper()\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    configure_logging(logging.DEBUG)\n    # TODO: remove if workflow goes away\n    Cls = typing.cast(type, get_class(class_name))\n    s = Scraper()\n    source_obj: Source\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "    if source:\n        source = URL(source)\n    if not source and hasattr(Cls, \"example_source\"):\n        source = Cls.example_source\n\n",
        "source_code_len": 135,
        "target_code": "    if source:\n        source_obj = URL(source)\n    if not source_obj and hasattr(Cls, \"example_source\"):\n        source = Cls.example_source  # type: ignore\n\n",
        "target_code_len": 159,
        "diff_format": "@@ -162,5 +167,5 @@\n     if source:\n-        source = URL(source)\n-    if not source and hasattr(Cls, \"example_source\"):\n-        source = Cls.example_source\n+        source_obj = URL(source)\n+    if not source_obj and hasattr(Cls, \"example_source\"):\n+        source = Cls.example_source  # type: ignore\n \n",
        "source_code_with_indent": "    if source:\n        <IND>source = URL(source)\n    <DED>if not source and hasattr(Cls, \"example_source\"):\n        <IND>source = Cls.example_source\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    if source:\n        <IND>source_obj = URL(source)\n    <DED>if not source_obj and hasattr(Cls, \"example_source\"):\n        <IND>source = Cls.example_source  # type: ignore\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jamesturk/spatula",
    "commit": "b0472120ea7f74bcbab02403a0e9bbce94adc619",
    "filename": "src/spatula/cli.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jamesturk-spatula/src/spatula/cli.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/spatula/cli.py:172:15 Call error [29]: `typing.Union[typing.Type[typing.Any], Workflow]` is not a function.",
    "message": " `typing.Union[typing.Type[typing.Any], Workflow]` is not a function.",
    "rule_id": "Call error [29]",
    "warning_line_no": 172,
    "warning_line": "        page = Cls(fake_input, source=source)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from .utils import _display\nfrom .sources import URL\nfrom .workflow import Workflow\n",
        "source_code_len": 84,
        "target_code": "from .utils import _display\nfrom .sources import URL, Source\nfrom .workflow import Workflow\n",
        "target_code_len": 92,
        "diff_format": "@@ -12,3 +12,3 @@\n from .utils import _display\n-from .sources import URL\n+from .sources import URL, Source\n from .workflow import Workflow\n",
        "source_code_with_indent": "from .utils import _display\nfrom .sources import URL\nfrom .workflow import Workflow\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from .utils import _display\nfrom .sources import URL, Source\nfrom .workflow import Workflow\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    configure_logging(logging.DEBUG)\n    Cls = get_class(class_name)\n    s = Scraper()\n\n",
        "source_code_len": 88,
        "target_code": "    configure_logging(logging.DEBUG)\n    # TODO: remove if workflow goes away\n    Cls = typing.cast(type, get_class(class_name))\n    s = Scraper()\n    source_obj: Source\n\n",
        "target_code_len": 171,
        "diff_format": "@@ -155,4 +158,6 @@\n     configure_logging(logging.DEBUG)\n-    Cls = get_class(class_name)\n+    # TODO: remove if workflow goes away\n+    Cls = typing.cast(type, get_class(class_name))\n     s = Scraper()\n+    source_obj: Source\n \n",
        "source_code_with_indent": "    configure_logging(logging.DEBUG)\n    Cls = get_class(class_name)\n    s = Scraper()\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    configure_logging(logging.DEBUG)\n    # TODO: remove if workflow goes away\n    Cls = typing.cast(type, get_class(class_name))\n    s = Scraper()\n    source_obj: Source\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]