[
  {
    "project": "Ultimaker/Cura",
    "commit": "25b18dee7a02b09a692ce71e853e7e4c32da8e28",
    "filename": "plugins/UM3NetworkPrinting/src/LegacyUM3PrinterOutputController.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Ultimaker-Cura/plugins/UM3NetworkPrinting/src/LegacyUM3PrinterOutputController.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "plugins/UM3NetworkPrinting/src/LegacyUM3PrinterOutputController.py:36:4 Inconsistent override [14]: `plugins.UM3NetworkPrinting.src.LegacyUM3PrinterOutputController.LegacyUM3PrinterOutputController.setTargetBedTemperature` overrides method defined in `PrinterOutputController` inconsistently. Parameter of type `int` is not a supertype of the overridden parameter `float`.",
    "message": " `plugins.UM3NetworkPrinting.src.LegacyUM3PrinterOutputController.LegacyUM3PrinterOutputController.setTargetBedTemperature` overrides method defined in `PrinterOutputController` inconsistently. Parameter of type `int` is not a supertype of the overridden parameter `float`.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 36,
    "warning_line": "    def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: int):",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: int):\n        data = str(temperature)\n        self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)\n\n",
        "source_code_len": 242,
        "target_code": "\n    def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: float):\n        data = str(temperature)\n        self._output_device.put(\"printer/bed/temperature/target\", data, on_finished = self._onPutBedTemperatureCompleted)\n\n",
        "target_code_len": 246,
        "diff_format": "@@ -35,5 +35,5 @@\n \n-    def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: int):\n+    def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: float):\n         data = str(temperature)\n-        self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)\n+        self._output_device.put(\"printer/bed/temperature/target\", data, on_finished = self._onPutBedTemperatureCompleted)\n \n",
        "source_code_with_indent": "\n    <DED>def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: int):\n        <IND>data = str(temperature)\n        self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: float):\n        <IND>data = str(temperature)\n        self._output_device.put(\"printer/bed/temperature/target\", data, on_finished = self._onPutBedTemperatureCompleted)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]