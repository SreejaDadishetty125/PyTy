[
  {
    "project": "hyperledger/indy-plenum",
    "commit": "91d90f0abe3167bec88789344c85c31656355ea8",
    "filename": "plenum/persistence/orientdb_graph_store.py",
    "min_patch_found": false,
    "full_warning_msg": "plenum/persistence/orientdb_graph_store.py:25:48 Incompatible variable type [9]: properties is declared to have type `Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "exception": "[Errno 2] No such file or directory: '/home/chowyi/TypeAnnotation_Study/GitHub/hyperledger-indy-plenum/plenum/persistence/orientdb_graph_store.py'",
    "dd_fail": true
  },
  {
    "project": "hyperledger/indy-plenum",
    "commit": "91d90f0abe3167bec88789344c85c31656355ea8",
    "filename": "plenum/persistence/orientdb_graph_store.py",
    "min_patch_found": false,
    "full_warning_msg": "plenum/persistence/orientdb_graph_store.py:28:46 Incompatible variable type [9]: properties is declared to have type `Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "exception": "[Errno 2] No such file or directory: '/home/chowyi/TypeAnnotation_Study/GitHub/hyperledger-indy-plenum/plenum/persistence/orientdb_graph_store.py'",
    "dd_fail": true
  },
  {
    "project": "hyperledger/indy-plenum",
    "commit": "91d90f0abe3167bec88789344c85c31656355ea8",
    "filename": "plenum/persistence/orientdb_graph_store.py",
    "min_patch_found": false,
    "full_warning_msg": "plenum/persistence/orientdb_graph_store.py:31:59 Incompatible variable type [9]: properties is declared to have type `Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "exception": "[Errno 2] No such file or directory: '/home/chowyi/TypeAnnotation_Study/GitHub/hyperledger-indy-plenum/plenum/persistence/orientdb_graph_store.py'",
    "dd_fail": true
  },
  {
    "project": "hyperledger/indy-plenum",
    "commit": "91d90f0abe3167bec88789344c85c31656355ea8",
    "filename": "plenum/server/monitor.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/hyperledger-indy-plenum/plenum/server/monitor.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "plenum/server/monitor.py:208:43 Incompatible parameter type [6]: Expected `Tuple[int, int]` for 2nd positional only parameter to call `list.__setitem__` but got `Tuple[int, float]`.",
    "message": " Expected `Tuple[int, int]` for 2nd positional only parameter to call `list.__setitem__` but got `Tuple[int, float]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 208,
    "warning_line": "        self.numOrderedRequests[instId] = (reqs + 1, tm + duration)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def requestOrdered(self, identifier: str, reqId: int, instId: int,\n                       byMaster: bool = False) -> Optional[float]:\n        \"\"\"\n",
        "source_code_len": 151,
        "target_code": "\n    def requestOrdered(self, reqIdrs: List[Tuple[str, int]], instId: int,\n                       byMaster: bool = False) -> Dict:\n        \"\"\"\n",
        "target_code_len": 143,
        "diff_format": "@@ -192,4 +192,4 @@\n \n-    def requestOrdered(self, identifier: str, reqId: int, instId: int,\n-                       byMaster: bool = False) -> Optional[float]:\n+    def requestOrdered(self, reqIdrs: List[Tuple[str, int]], instId: int,\n+                       byMaster: bool = False) -> Dict:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def requestOrdered(self, identifier: str, reqId: int, instId: int,\n                       byMaster: bool = False) -> Optional[float]:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def requestOrdered(self, reqIdrs: List[Tuple[str, int]], instId: int,\n                       byMaster: bool = False) -> Dict:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"\"\"\n        if (identifier, reqId) not in self.requestOrderingStarted:\n            logger.debug(\"Got ordered request with identifier {} and reqId {} \"\n                          \"but it was from a previous view\".\n                          format(identifier, reqId))\n            return\n        now = time.perf_counter()\n        duration = now - self.requestOrderingStarted[(identifier, reqId)]\n        reqs, tm = self.numOrderedRequests[instId]\n        self.numOrderedRequests[instId] = (reqs + 1, tm + duration)\n        if byMaster:\n            self.masterReqLatencies[(identifier, reqId)] = duration\n            self.orderedRequestsInLast.append(now)\n            self.latenciesByMasterInLast.append((now, duration))\n        else:\n            if instId not in self.latenciesByBackupsInLast:\n                self.latenciesByBackupsInLast[instId] = []\n            self.latenciesByBackupsInLast[instId].append((now, duration))\n\n        if identifier not in self.clientAvgReqLatencies[instId]:\n            self.clientAvgReqLatencies[instId][identifier] = (0, 0.0)\n        totalReqs, avgTime = self.clientAvgReqLatencies[instId][identifier]\n        # If avg of `n` items is `a`, thus sum of `n` items is `x` where\n        # `x=n*a` then avg of `n+1` items where `y` is the new item is\n        # `((n*a)+y)/n+1`\n        self.clientAvgReqLatencies[instId][identifier] = \\\n            (totalReqs + 1, (totalReqs * avgTime + duration) / (totalReqs + 1))\n\n",
        "source_code_len": 1453,
        "target_code": "        \"\"\"\n        now = time.perf_counter()\n        durations = {}\n        for identifier, reqId in reqIdrs:\n            if (identifier, reqId) not in self.requestOrderingStarted:\n                logger.debug(\n                    \"Got ordered request with identifier {} and reqId {} \"\n                    \"but it was from a previous view\".\n                    format(identifier, reqId))\n                continue\n            duration = now - self.requestOrderingStarted[(identifier, reqId)]\n            if byMaster:\n                self.masterReqLatencies[(identifier, reqId)] = duration\n                self.orderedRequestsInLast.append(now)\n                self.latenciesByMasterInLast.append((now, duration))\n            else:\n                if instId not in self.latenciesByBackupsInLast:\n                    self.latenciesByBackupsInLast[instId] = []\n                self.latenciesByBackupsInLast[instId].append((now, duration))\n\n            if identifier not in self.clientAvgReqLatencies[instId]:\n                self.clientAvgReqLatencies[instId][identifier] = (0, 0.0)\n            totalReqs, avgTime = self.clientAvgReqLatencies[instId][identifier]\n            # If avg of `n` items is `a`, thus sum of `n` items is `x` where\n            # `x=n*a` then avg of `n+1` items where `y` is the new item is\n            # `((n*a)+y)/n+1`\n            self.clientAvgReqLatencies[instId][identifier] = \\\n                (totalReqs + 1, (totalReqs * avgTime + duration) / (totalReqs + 1))\n\n            durations[identifier, reqId] = duration\n\n        reqs, tm = self.numOrderedRequests[instId]\n        orderedNow = len(durations)\n        self.numOrderedRequests[instId] = (reqs + orderedNow,\n                                           tm + sum(durations.values()))\n\n",
        "target_code_len": 1766,
        "diff_format": "@@ -199,28 +199,36 @@\n         \"\"\"\n-        if (identifier, reqId) not in self.requestOrderingStarted:\n-            logger.debug(\"Got ordered request with identifier {} and reqId {} \"\n-                          \"but it was from a previous view\".\n-                          format(identifier, reqId))\n-            return\n         now = time.perf_counter()\n-        duration = now - self.requestOrderingStarted[(identifier, reqId)]\n+        durations = {}\n+        for identifier, reqId in reqIdrs:\n+            if (identifier, reqId) not in self.requestOrderingStarted:\n+                logger.debug(\n+                    \"Got ordered request with identifier {} and reqId {} \"\n+                    \"but it was from a previous view\".\n+                    format(identifier, reqId))\n+                continue\n+            duration = now - self.requestOrderingStarted[(identifier, reqId)]\n+            if byMaster:\n+                self.masterReqLatencies[(identifier, reqId)] = duration\n+                self.orderedRequestsInLast.append(now)\n+                self.latenciesByMasterInLast.append((now, duration))\n+            else:\n+                if instId not in self.latenciesByBackupsInLast:\n+                    self.latenciesByBackupsInLast[instId] = []\n+                self.latenciesByBackupsInLast[instId].append((now, duration))\n+\n+            if identifier not in self.clientAvgReqLatencies[instId]:\n+                self.clientAvgReqLatencies[instId][identifier] = (0, 0.0)\n+            totalReqs, avgTime = self.clientAvgReqLatencies[instId][identifier]\n+            # If avg of `n` items is `a`, thus sum of `n` items is `x` where\n+            # `x=n*a` then avg of `n+1` items where `y` is the new item is\n+            # `((n*a)+y)/n+1`\n+            self.clientAvgReqLatencies[instId][identifier] = \\\n+                (totalReqs + 1, (totalReqs * avgTime + duration) / (totalReqs + 1))\n+\n+            durations[identifier, reqId] = duration\n+\n         reqs, tm = self.numOrderedRequests[instId]\n-        self.numOrderedRequests[instId] = (reqs + 1, tm + duration)\n-        if byMaster:\n-            self.masterReqLatencies[(identifier, reqId)] = duration\n-            self.orderedRequestsInLast.append(now)\n-            self.latenciesByMasterInLast.append((now, duration))\n-        else:\n-            if instId not in self.latenciesByBackupsInLast:\n-                self.latenciesByBackupsInLast[instId] = []\n-            self.latenciesByBackupsInLast[instId].append((now, duration))\n-\n-        if identifier not in self.clientAvgReqLatencies[instId]:\n-            self.clientAvgReqLatencies[instId][identifier] = (0, 0.0)\n-        totalReqs, avgTime = self.clientAvgReqLatencies[instId][identifier]\n-        # If avg of `n` items is `a`, thus sum of `n` items is `x` where\n-        # `x=n*a` then avg of `n+1` items where `y` is the new item is\n-        # `((n*a)+y)/n+1`\n-        self.clientAvgReqLatencies[instId][identifier] = \\\n-            (totalReqs + 1, (totalReqs * avgTime + duration) / (totalReqs + 1))\n+        orderedNow = len(durations)\n+        self.numOrderedRequests[instId] = (reqs + orderedNow,\n+                                           tm + sum(durations.values()))\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n        if (identifier, reqId) not in self.requestOrderingStarted:\n            <IND>logger.debug(\"Got ordered request with identifier {} and reqId {} \"\n                          \"but it was from a previous view\".\n                          format(identifier, reqId))\n            return\n        <DED>now = time.perf_counter()\n        duration = now - self.requestOrderingStarted[(identifier, reqId)]\n        reqs, tm = self.numOrderedRequests[instId]\n        self.numOrderedRequests[instId] = (reqs + 1, tm + duration)\n        if byMaster:\n            <IND>self.masterReqLatencies[(identifier, reqId)] = duration\n            self.orderedRequestsInLast.append(now)\n            self.latenciesByMasterInLast.append((now, duration))\n        <DED>else:\n            <IND>if instId not in self.latenciesByBackupsInLast:\n                <IND>self.latenciesByBackupsInLast[instId] = []\n            <DED>self.latenciesByBackupsInLast[instId].append((now, duration))\n\n        <DED>if identifier not in self.clientAvgReqLatencies[instId]:\n            <IND>self.clientAvgReqLatencies[instId][identifier] = (0, 0.0)\n        <DED>totalReqs, avgTime = self.clientAvgReqLatencies[instId][identifier]\n        # If avg of `n` items is `a`, thus sum of `n` items is `x` where\n        # `x=n*a` then avg of `n+1` items where `y` is the new item is\n        # `((n*a)+y)/n+1`\n        self.clientAvgReqLatencies[instId][identifier] =            (totalReqs + 1, (totalReqs * avgTime + duration) / (totalReqs + 1))\n\n",
        "target_code_with_indent": "\n        now = time.perf_counter()\n        durations = {}\n        for identifier, reqId in reqIdrs:\n            <IND>if (identifier, reqId) not in self.requestOrderingStarted:\n                <IND>logger.debug(\n                    \"Got ordered request with identifier {} and reqId {} \"\n                    \"but it was from a previous view\".\n                    format(identifier, reqId))\n                continue\n            <DED>duration = now - self.requestOrderingStarted[(identifier, reqId)]\n            if byMaster:\n                <IND>self.masterReqLatencies[(identifier, reqId)] = duration\n                self.orderedRequestsInLast.append(now)\n                self.latenciesByMasterInLast.append((now, duration))\n            <DED>else:\n                <IND>if instId not in self.latenciesByBackupsInLast:\n                    <IND>self.latenciesByBackupsInLast[instId] = []\n                <DED>self.latenciesByBackupsInLast[instId].append((now, duration))\n\n            <DED>if identifier not in self.clientAvgReqLatencies[instId]:\n                <IND>self.clientAvgReqLatencies[instId][identifier] = (0, 0.0)\n            <DED>totalReqs, avgTime = self.clientAvgReqLatencies[instId][identifier]\n            # If avg of `n` items is `a`, thus sum of `n` items is `x` where\n            # `x=n*a` then avg of `n+1` items where `y` is the new item is\n            # `((n*a)+y)/n+1`\n            self.clientAvgReqLatencies[instId][identifier] =                (totalReqs + 1, (totalReqs * avgTime + duration) / (totalReqs + 1))\n\n            durations[identifier, reqId] = duration\n\n        <DED>reqs, tm = self.numOrderedRequests[instId]\n        orderedNow = len(durations)\n        self.numOrderedRequests[instId] = (reqs + orderedNow,\n                                           tm + sum(durations.values()))\n\n"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                self.postOnNodeStarted(self.started)\n        return duration\n\n",
        "source_code_len": 78,
        "target_code": "                self.postOnNodeStarted(self.started)\n\n        return durations\n\n",
        "target_code_len": 80,
        "diff_format": "@@ -233,3 +244,4 @@\n                 self.postOnNodeStarted(self.started)\n-        return duration\n+\n+        return durations\n \n",
        "source_code_with_indent": "                <IND>self.postOnNodeStarted(self.started)\n        <DED><DED>return duration\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                <IND>self.postOnNodeStarted(self.started)\n\n        <DED><DED>return durations\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "hyperledger/indy-plenum",
    "commit": "91d90f0abe3167bec88789344c85c31656355ea8",
    "filename": "plenum/server/monitor.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/hyperledger-indy-plenum/plenum/server/monitor.py",
    "file_hunks_size": 8,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "plenum/server/monitor.py:369:12 Incompatible return type [7]: Expected `float` but got `Tuple[typing.Any, typing.Any]`.",
    "message": " Expected `float` but got `Tuple[typing.Any, typing.Any]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 369,
    "warning_line": "            return sum(reqs), sum(tm)"
  },
  {
    "project": "hyperledger/indy-plenum",
    "commit": "91d90f0abe3167bec88789344c85c31656355ea8",
    "filename": "plenum/server/monitor.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/hyperledger-indy-plenum/plenum/server/monitor.py",
    "file_hunks_size": 8,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "plenum/server/monitor.py:371:12 Incompatible return type [7]: Expected `float` but got `Tuple[None, None]`.",
    "message": " Expected `float` but got `Tuple[None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 371,
    "warning_line": "            return None, None"
  },
  {
    "project": "hyperledger/indy-plenum",
    "commit": "91d90f0abe3167bec88789344c85c31656355ea8",
    "filename": "plenum/server/replica.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/hyperledger-indy-plenum/plenum/server/replica.py",
    "file_hunks_size": 46,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "plenum/server/replica.py:397:12 Incompatible return type [7]: Expected `bool` but got implicit return value of `None`.",
    "message": " Expected `bool` but got implicit return value of `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 397,
    "warning_line": "            return self.primaryName == sender if self.isMsgForCurrentView("
  },
  {
    "project": "hyperledger/indy-plenum",
    "commit": "91d90f0abe3167bec88789344c85c31656355ea8",
    "filename": "plenum/test/malicious_behaviors_node.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/hyperledger-indy-plenum/plenum/test/malicious_behaviors_node.py",
    "file_hunks_size": 11,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "plenum/test/malicious_behaviors_node.py:104:8 Incompatible attribute type [8]: Attribute `doPrePrepare` declared in class `plenum.server.replica.Replica` has type `BoundMethod[typing.Callable(plenum.server.replica.Replica.doPrePrepare)[[Named(self, plenum.server.replica.Replica), Named(reqDigest, ReqDigest)], None], TestReplica]` but is used as type `types.MethodType`.",
    "message": " Attribute `doPrePrepare` declared in class `plenum.server.replica.Replica` has type `BoundMethod[typing.Callable(plenum.server.replica.Replica.doPrePrepare)[[Named(self, plenum.server.replica.Replica), Named(reqDigest, ReqDigest)], None], TestReplica]` but is used as type `types.MethodType`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 104,
    "warning_line": "        replica.doPrePrepare = evilMethod"
  },
  {
    "project": "hyperledger/indy-plenum",
    "commit": "91d90f0abe3167bec88789344c85c31656355ea8",
    "filename": "plenum/test/test_node.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/hyperledger-indy-plenum/plenum/test/test_node.py",
    "file_hunks_size": 29,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "plenum/test/test_node.py:485:72 Incompatible parameter type [6]: Expected `typing.Sized` for 1st positional only parameter to call `len` but got `Iterable[Union[TestClient, TestNode]]`.",
    "message": " Expected `typing.Sized` for 1st positional only parameter to call `len` but got `Iterable[Union[TestClient, TestNode]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 485,
    "warning_line": "              (waits.expectedNodeInterconnectionTime(len(stacks)) * len(stacks))"
  },
  {
    "project": "hyperledger/indy-plenum",
    "commit": "91d90f0abe3167bec88789344c85c31656355ea8",
    "filename": "plenum/test/test_node.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/hyperledger-indy-plenum/plenum/test/test_node.py",
    "file_hunks_size": 29,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "plenum/test/test_node.py:627:24 Incompatible variable type [9]: timeout is declared to have type `float` but is used as type `None`.",
    "message": " timeout is declared to have type `float` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 627,
    "warning_line": "                        timeout: float = None) -> Sequence[TestNode]:"
  }
]