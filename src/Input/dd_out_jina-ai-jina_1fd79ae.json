[
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "jina/clients/request/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/clients/request/__init__.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/clients/request/__init__.py:32:4 Incompatible variable type [9]: mime_type is declared to have type `str` but is used as type `None`.",
    "message": " mime_type is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 32,
    "warning_line": "    mime_type: str = None,"
  },
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "jina/clients/request/asyncio.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/clients/request/asyncio.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/clients/request/asyncio.py:20:4 Incompatible variable type [9]: mime_type is declared to have type `str` but is used as type `None`.",
    "message": " mime_type is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 20,
    "warning_line": "    mime_type: str = None,"
  },
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "jina/docker/hubapi/remote.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/docker/hubapi/remote.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/docker/hubapi/remote.py:25:4 Incompatible variable type [9]: image_name is declared to have type `str` but is used as type `None`.",
    "message": " image_name is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 25,
    "warning_line": "    image_name: str = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    logger,\n    image_name: str = None,\n    image_kind: str = None,\n    image_type: str = None,\n    image_keywords: Sequence = (),\n",
        "source_code_len": 131,
        "target_code": "    logger,\n    image_name: Optional[str] = None,\n    image_kind: Optional[str] = None,\n    image_type: Optional[str] = None,\n    image_keywords: Sequence = (),\n",
        "target_code_len": 161,
        "diff_format": "@@ -24,5 +24,5 @@\n     logger,\n-    image_name: str = None,\n-    image_kind: str = None,\n-    image_type: str = None,\n+    image_name: Optional[str] = None,\n+    image_kind: Optional[str] = None,\n+    image_type: Optional[str] = None,\n     image_keywords: Sequence = (),\n",
        "source_code_with_indent": "    logger,\n    image_name: str = None,\n    image_kind: str = None,\n    image_type: str = None,\n    image_keywords: Sequence = (),\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    logger,\n    image_name: Optional[str] = None,\n    image_kind: Optional[str] = None,\n    image_type: Optional[str] = None,\n    image_keywords: Sequence = (),\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "jina/docker/hubapi/remote.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/docker/hubapi/remote.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/docker/hubapi/remote.py:26:4 Incompatible variable type [9]: image_kind is declared to have type `str` but is used as type `None`.",
    "message": " image_kind is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 26,
    "warning_line": "    image_kind: str = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    logger,\n    image_name: str = None,\n    image_kind: str = None,\n    image_type: str = None,\n    image_keywords: Sequence = (),\n",
        "source_code_len": 131,
        "target_code": "    logger,\n    image_name: Optional[str] = None,\n    image_kind: Optional[str] = None,\n    image_type: Optional[str] = None,\n    image_keywords: Sequence = (),\n",
        "target_code_len": 161,
        "diff_format": "@@ -24,5 +24,5 @@\n     logger,\n-    image_name: str = None,\n-    image_kind: str = None,\n-    image_type: str = None,\n+    image_name: Optional[str] = None,\n+    image_kind: Optional[str] = None,\n+    image_type: Optional[str] = None,\n     image_keywords: Sequence = (),\n",
        "source_code_with_indent": "    logger,\n    image_name: str = None,\n    image_kind: str = None,\n    image_type: str = None,\n    image_keywords: Sequence = (),\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    logger,\n    image_name: Optional[str] = None,\n    image_kind: Optional[str] = None,\n    image_type: Optional[str] = None,\n    image_keywords: Sequence = (),\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "jina/docker/hubapi/remote.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/docker/hubapi/remote.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/docker/hubapi/remote.py:27:4 Incompatible variable type [9]: image_type is declared to have type `str` but is used as type `None`.",
    "message": " image_type is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 27,
    "warning_line": "    image_type: str = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    logger,\n    image_name: str = None,\n    image_kind: str = None,\n    image_type: str = None,\n    image_keywords: Sequence = (),\n",
        "source_code_len": 131,
        "target_code": "    logger,\n    image_name: Optional[str] = None,\n    image_kind: Optional[str] = None,\n    image_type: Optional[str] = None,\n    image_keywords: Sequence = (),\n",
        "target_code_len": 161,
        "diff_format": "@@ -24,5 +24,5 @@\n     logger,\n-    image_name: str = None,\n-    image_kind: str = None,\n-    image_type: str = None,\n+    image_name: Optional[str] = None,\n+    image_kind: Optional[str] = None,\n+    image_type: Optional[str] = None,\n     image_keywords: Sequence = (),\n",
        "source_code_with_indent": "    logger,\n    image_name: str = None,\n    image_kind: str = None,\n    image_type: str = None,\n    image_keywords: Sequence = (),\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    logger,\n    image_name: Optional[str] = None,\n    image_kind: Optional[str] = None,\n    image_type: Optional[str] = None,\n    image_keywords: Sequence = (),\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "jina/docker/hubio.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/docker/hubio.py",
    "file_hunks_size": 1,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/docker/hubio.py:254:40 Incompatible parameter type [6]: Expected `str` for 2nd positional only parameter to call `HubIO._push_docker_hub` but got `typing.Optional[str]`.",
    "message": " Expected `str` for 2nd positional only parameter to call `HubIO._push_docker_hub` but got `typing.Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 254,
    "warning_line": "            self._push_docker_hub(name, readme_path)"
  },
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "jina/docker/hubio.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/docker/hubio.py",
    "file_hunks_size": 1,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/docker/hubio.py:287:31 Incompatible variable type [9]: name is declared to have type `str` but is used as type `None`.",
    "message": " name is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 287,
    "warning_line": "    def _push_docker_hub(self, name: str = None, readme_path: str = None) -> None:"
  },
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "jina/docker/hubio.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/docker/hubio.py",
    "file_hunks_size": 1,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/docker/hubio.py:287:49 Incompatible variable type [9]: readme_path is declared to have type `str` but is used as type `None`.",
    "message": " readme_path is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 287,
    "warning_line": "    def _push_docker_hub(self, name: str = None, readme_path: str = None) -> None:"
  },
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "jina/drivers/delete.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/drivers/delete.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/drivers/delete.py:10:23 Incompatible variable type [9]: executor is declared to have type `str` but is used as type `None`.",
    "message": " executor is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 10,
    "warning_line": "    def __init__(self, executor: str = None, method: str = 'delete', *args, **kwargs):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "__license__ = \"Apache-2.0\"\n\n",
        "source_code_len": 28,
        "target_code": "__license__ = \"Apache-2.0\"\n\nfrom typing import Optional\n\n",
        "target_code_len": 57,
        "diff_format": "@@ -2,2 +2,4 @@\n __license__ = \"Apache-2.0\"\n+\n+from typing import Optional\n \n",
        "source_code_with_indent": "__license__ = \"Apache-2.0\"\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "__license__ = \"Apache-2.0\"\n\nfrom typing import Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __init__(self, executor: str = None, method: str = 'delete', *args, **kwargs):\n        super().__init__(executor, method, *args, **kwargs)\n",
        "source_code_len": 148,
        "target_code": "\n    def __init__(\n        self, executor: Optional[str] = None, method: str = 'delete', *args, **kwargs\n    ):\n        super().__init__(executor, method, *args, **kwargs)\n",
        "target_code_len": 172,
        "diff_format": "@@ -9,3 +11,5 @@\n \n-    def __init__(self, executor: str = None, method: str = 'delete', *args, **kwargs):\n+    def __init__(\n+        self, executor: Optional[str] = None, method: str = 'delete', *args, **kwargs\n+    ):\n         super().__init__(executor, method, *args, **kwargs)\n",
        "source_code_with_indent": "\n    def __init__(self, executor: str = None, method: str = 'delete', *args, **kwargs):\n        <IND>super().__init__(executor, method, *args, **kwargs)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    def __init__(\n        self, executor: Optional[str] = None, method: str = 'delete', *args, **kwargs\n    ):\n        <IND>super().__init__(executor, method, *args, **kwargs)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "jina/drivers/encode.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/drivers/encode.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/drivers/encode.py:11:23 Incompatible variable type [9]: executor is declared to have type `str` but is used as type `None`.",
    "message": " executor is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 11,
    "warning_line": "    def __init__(self, executor: str = None, method: str = 'encode', *args, **kwargs):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "__license__ = \"Apache-2.0\"\n\n",
        "source_code_len": 28,
        "target_code": "__license__ = \"Apache-2.0\"\n\nfrom typing import Optional\n\n",
        "target_code_len": 57,
        "diff_format": "@@ -2,2 +2,4 @@\n __license__ = \"Apache-2.0\"\n+\n+from typing import Optional\n \n",
        "source_code_with_indent": "__license__ = \"Apache-2.0\"\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "__license__ = \"Apache-2.0\"\n\nfrom typing import Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __init__(self, executor: str = None, method: str = 'encode', *args, **kwargs):\n        super().__init__(executor, method, *args, **kwargs)\n",
        "source_code_len": 148,
        "target_code": "\n    def __init__(\n        self, executor: Optional[str] = None, method: str = 'encode', *args, **kwargs\n    ):\n        super().__init__(executor, method, *args, **kwargs)\n",
        "target_code_len": 172,
        "diff_format": "@@ -10,3 +12,5 @@\n \n-    def __init__(self, executor: str = None, method: str = 'encode', *args, **kwargs):\n+    def __init__(\n+        self, executor: Optional[str] = None, method: str = 'encode', *args, **kwargs\n+    ):\n         super().__init__(executor, method, *args, **kwargs)\n",
        "source_code_with_indent": "\n    def __init__(self, executor: str = None, method: str = 'encode', *args, **kwargs):\n        <IND>super().__init__(executor, method, *args, **kwargs)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    def __init__(\n        self, executor: Optional[str] = None, method: str = 'encode', *args, **kwargs\n    ):\n        <IND>super().__init__(executor, method, *args, **kwargs)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "jina/drivers/index.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/drivers/index.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/drivers/index.py:17:23 Incompatible variable type [9]: executor is declared to have type `str` but is used as type `None`.",
    "message": " executor is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 17,
    "warning_line": "    def __init__(self, executor: str = None, method: str = 'add', *args, **kwargs):"
  },
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "jina/drivers/predict.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/drivers/predict.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/drivers/predict.py:22:8 Incompatible variable type [9]: executor is declared to have type `str` but is used as type `None`.",
    "message": " executor is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 22,
    "warning_line": "        executor: str = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import List, Any, Union, Tuple\n\n",
        "source_code_len": 44,
        "target_code": "from typing import List, Any, Union, Tuple, Optional\n\n",
        "target_code_len": 54,
        "diff_format": "@@ -1,2 +1,2 @@\n-from typing import List, Any, Union, Tuple\n+from typing import List, Any, Union, Tuple, Optional\n \n",
        "source_code_with_indent": "from typing import List, Any, Union, Tuple\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import List, Any, Union, Tuple, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self,\n        executor: str = None,\n        method: str = 'predict',\n",
        "source_code_len": 77,
        "target_code": "        self,\n        executor: Optional[str] = None,\n        method: str = 'predict',\n",
        "target_code_len": 87,
        "diff_format": "@@ -21,3 +21,3 @@\n         self,\n-        executor: str = None,\n+        executor: Optional[str] = None,\n         method: str = 'predict',\n",
        "source_code_with_indent": "        self,\n        executor: str = None,\n        method: str = 'predict',\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self,\n        executor: Optional[str] = None,\n        method: str = 'predict',\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "jina/drivers/querylang/slice.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/drivers/querylang/slice.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/drivers/querylang/slice.py:35:35 Incompatible variable type [9]: end is declared to have type `int` but is used as type `None`.",
    "message": " end is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 35,
    "warning_line": "    def __init__(self, start: int, end: int = None, *args, **kwargs):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import Iterable\n\n",
        "source_code_len": 30,
        "target_code": "\nfrom typing import Iterable, Optional\n\n",
        "target_code_len": 40,
        "diff_format": "@@ -5,3 +5,3 @@\n \n-from typing import Iterable\n+from typing import Iterable, Optional\n \n",
        "source_code_with_indent": "\nfrom typing import Iterable\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import Iterable, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __init__(self, start: int, end: int = None, *args, **kwargs):\n        \"\"\"\n",
        "source_code_len": 83,
        "target_code": "\n    def __init__(self, start: int, end: Optional[int] = None, *args, **kwargs):\n        \"\"\"\n",
        "target_code_len": 93,
        "diff_format": "@@ -34,3 +34,3 @@\n \n-    def __init__(self, start: int, end: int = None, *args, **kwargs):\n+    def __init__(self, start: int, end: Optional[int] = None, *args, **kwargs):\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    def __init__(self, start: int, end: int = None, *args, **kwargs):\n        <IND>",
        "target_code_with_indent": "\n    def __init__(self, start: int, end: Optional[int] = None, *args, **kwargs):\n        <IND>"
      }
    ]
  },
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "jina/drivers/search.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/drivers/search.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/drivers/search.py:24:8 Incompatible variable type [9]: executor is declared to have type `str` but is used as type `None`.",
    "message": " executor is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 24,
    "warning_line": "        executor: str = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import Iterable, Tuple\n\n",
        "source_code_len": 37,
        "target_code": "\nfrom typing import Iterable, Tuple, Optional\n\n",
        "target_code_len": 47,
        "diff_format": "@@ -3,3 +3,3 @@\n \n-from typing import Iterable, Tuple\n+from typing import Iterable, Tuple, Optional\n \n",
        "source_code_with_indent": "\nfrom typing import Iterable, Tuple\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import Iterable, Tuple, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self,\n        executor: str = None,\n        method: str = 'query',\n",
        "source_code_len": 75,
        "target_code": "        self,\n        executor: Optional[str] = None,\n        method: str = 'query',\n",
        "target_code_len": 85,
        "diff_format": "@@ -23,3 +23,3 @@\n         self,\n-        executor: str = None,\n+        executor: Optional[str] = None,\n         method: str = 'query',\n",
        "source_code_with_indent": "        self,\n        executor: str = None,\n        method: str = 'query',\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self,\n        executor: Optional[str] = None,\n        method: str = 'query',\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "jina/drivers/search.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/drivers/search.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/drivers/search.py:98:14 Incompatible variable type [9]: executor is declared to have type `str` but is used as type `None`.",
    "message": " executor is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 98,
    "warning_line": "        self, executor: str = None, method: str = 'query_by_key', *args, **kwargs",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import Iterable, Tuple\n\n",
        "source_code_len": 37,
        "target_code": "\nfrom typing import Iterable, Tuple, Optional\n\n",
        "target_code_len": 47,
        "diff_format": "@@ -3,3 +3,3 @@\n \n-from typing import Iterable, Tuple\n+from typing import Iterable, Tuple, Optional\n \n",
        "source_code_with_indent": "\nfrom typing import Iterable, Tuple\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import Iterable, Tuple, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def __init__(\n        self, executor: str = None, method: str = 'query_by_key', *args, **kwargs\n    ):\n",
        "source_code_len": 107,
        "target_code": "    def __init__(\n        self,\n        executor: Optional[str] = None,\n        method: str = 'query_by_key',\n        *args,\n        **kwargs,\n    ):\n",
        "target_code_len": 150,
        "diff_format": "@@ -97,3 +97,7 @@\n     def __init__(\n-        self, executor: str = None, method: str = 'query_by_key', *args, **kwargs\n+        self,\n+        executor: Optional[str] = None,\n+        method: str = 'query_by_key',\n+        *args,\n+        **kwargs,\n     ):\n",
        "source_code_with_indent": "    def __init__(\n        self, executor: str = None, method: str = 'query_by_key', *args, **kwargs\n    ):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def __init__(\n        self,\n        executor: Optional[str] = None,\n        method: str = 'query_by_key',\n        *args,\n        **kwargs,\n    ):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "jina/executors/decorators.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/executors/decorators.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/executors/decorators.py:230:4 Incompatible variable type [9]: batch_size is declared to have type `Union[typing.Callable[..., typing.Any], int]` but is used as type `None`.",
    "message": " batch_size is declared to have type `Union[typing.Callable[..., typing.Any], int]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 230,
    "warning_line": "    batch_size: Union[int, Callable] = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def batching(\n    func: Callable[[Any], np.ndarray] = None,\n    batch_size: Union[int, Callable] = None,\n    num_batch: Optional[int] = None,\n",
        "source_code_len": 142,
        "target_code": "def batching(\n    func: Optional[Callable[[Any], np.ndarray]] = None,\n    batch_size: Optional[Union[int, Callable]] = None,\n    num_batch: Optional[int] = None,\n",
        "target_code_len": 162,
        "diff_format": "@@ -228,4 +228,4 @@\n def batching(\n-    func: Callable[[Any], np.ndarray] = None,\n-    batch_size: Union[int, Callable] = None,\n+    func: Optional[Callable[[Any], np.ndarray]] = None,\n+    batch_size: Optional[Union[int, Callable]] = None,\n     num_batch: Optional[int] = None,\n",
        "source_code_with_indent": "<DED><DED>def batching(\n    func: Callable[[Any], np.ndarray] = None,\n    batch_size: Union[int, Callable] = None,\n    num_batch: Optional[int] = None,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED><DED>def batching(\n    func: Optional[Callable[[Any], np.ndarray]] = None,\n    batch_size: Optional[Union[int, Callable]] = None,\n    num_batch: Optional[int] = None,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "jina/executors/decorators.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/executors/decorators.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/executors/decorators.py:345:4 Incompatible variable type [9]: batch_size is declared to have type `Union[typing.Callable[..., typing.Any], int]` but is used as type `None`.",
    "message": " batch_size is declared to have type `Union[typing.Callable[..., typing.Any], int]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 345,
    "warning_line": "    batch_size: Union[int, Callable] = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def batching_multi_input(\n    func: Callable[[Any], np.ndarray] = None,\n    batch_size: Union[int, Callable] = None,\n    num_batch: Optional[int] = None,\n",
        "source_code_len": 154,
        "target_code": "def batching_multi_input(\n    func: Optional[Callable[[Any], np.ndarray]] = None,\n    batch_size: Optional[Union[int, Callable]] = None,\n    num_batch: Optional[int] = None,\n",
        "target_code_len": 174,
        "diff_format": "@@ -343,4 +343,4 @@\n def batching_multi_input(\n-    func: Callable[[Any], np.ndarray] = None,\n-    batch_size: Union[int, Callable] = None,\n+    func: Optional[Callable[[Any], np.ndarray]] = None,\n+    batch_size: Optional[Union[int, Callable]] = None,\n     num_batch: Optional[int] = None,\n",
        "source_code_with_indent": "<DED><DED>def batching_multi_input(\n    func: Callable[[Any], np.ndarray] = None,\n    batch_size: Union[int, Callable] = None,\n    num_batch: Optional[int] = None,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED><DED>def batching_multi_input(\n    func: Optional[Callable[[Any], np.ndarray]] = None,\n    batch_size: Optional[Union[int, Callable]] = None,\n    num_batch: Optional[int] = None,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "jina/executors/encoders/frameworks.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/executors/encoders/frameworks.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/executors/encoders/frameworks.py:24:14 Incompatible variable type [9]: output_feature is declared to have type `str` but is used as type `None`.",
    "message": " output_feature is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 24,
    "warning_line": "        self, output_feature: str = None, model_path: str = None, *args, **kwargs",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import os\n\n",
        "source_code_len": 11,
        "target_code": "import os\nfrom typing import Optional\n\n",
        "target_code_len": 39,
        "diff_format": "@@ -4,2 +4,3 @@\n import os\n+from typing import Optional\n \n",
        "source_code_with_indent": "import os\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import os\nfrom typing import Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def __init__(\n        self, output_feature: str = None, model_path: str = None, *args, **kwargs\n    ):\n",
        "source_code_len": 107,
        "target_code": "    def __init__(\n        self,\n        output_feature: Optional[str] = None,\n        model_path: Optional[str] = None,\n        *args,\n        **kwargs,\n    ):\n",
        "target_code_len": 160,
        "diff_format": "@@ -23,3 +24,7 @@\n     def __init__(\n-        self, output_feature: str = None, model_path: str = None, *args, **kwargs\n+        self,\n+        output_feature: Optional[str] = None,\n+        model_path: Optional[str] = None,\n+        *args,\n+        **kwargs,\n     ):\n",
        "source_code_with_indent": "    def __init__(\n        self, output_feature: str = None, model_path: str = None, *args, **kwargs\n    ):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def __init__(\n        self,\n        output_feature: Optional[str] = None,\n        model_path: Optional[str] = None,\n        *args,\n        **kwargs,\n    ):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "jina/executors/encoders/frameworks.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/executors/encoders/frameworks.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/executors/encoders/frameworks.py:24:42 Incompatible variable type [9]: model_path is declared to have type `str` but is used as type `None`.",
    "message": " model_path is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 24,
    "warning_line": "        self, output_feature: str = None, model_path: str = None, *args, **kwargs",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import os\n\n",
        "source_code_len": 11,
        "target_code": "import os\nfrom typing import Optional\n\n",
        "target_code_len": 39,
        "diff_format": "@@ -4,2 +4,3 @@\n import os\n+from typing import Optional\n \n",
        "source_code_with_indent": "import os\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import os\nfrom typing import Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def __init__(\n        self, output_feature: str = None, model_path: str = None, *args, **kwargs\n    ):\n",
        "source_code_len": 107,
        "target_code": "    def __init__(\n        self,\n        output_feature: Optional[str] = None,\n        model_path: Optional[str] = None,\n        *args,\n        **kwargs,\n    ):\n",
        "target_code_len": 160,
        "diff_format": "@@ -23,3 +24,7 @@\n     def __init__(\n-        self, output_feature: str = None, model_path: str = None, *args, **kwargs\n+        self,\n+        output_feature: Optional[str] = None,\n+        model_path: Optional[str] = None,\n+        *args,\n+        **kwargs,\n     ):\n",
        "source_code_with_indent": "    def __init__(\n        self, output_feature: str = None, model_path: str = None, *args, **kwargs\n    ):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def __init__(\n        self,\n        output_feature: Optional[str] = None,\n        model_path: Optional[str] = None,\n        *args,\n        **kwargs,\n    ):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "jina/executors/encoders/frameworks.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/executors/encoders/frameworks.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/executors/encoders/frameworks.py:122:23 Incompatible variable type [9]: model_path is declared to have type `str` but is used as type `None`.",
    "message": " model_path is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 122,
    "warning_line": "    def __init__(self, model_path: str = None, *args, **kwargs):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import os\n\n",
        "source_code_len": 11,
        "target_code": "import os\nfrom typing import Optional\n\n",
        "target_code_len": 39,
        "diff_format": "@@ -4,2 +4,3 @@\n import os\n+from typing import Optional\n \n",
        "source_code_with_indent": "import os\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import os\nfrom typing import Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __init__(self, model_path: str = None, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n",
        "source_code_len": 108,
        "target_code": "\n    def __init__(self, model_path: Optional[str] = None, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n",
        "target_code_len": 118,
        "diff_format": "@@ -121,3 +126,3 @@\n \n-    def __init__(self, model_path: str = None, *args, **kwargs):\n+    def __init__(self, model_path: Optional[str] = None, *args, **kwargs):\n         super().__init__(*args, **kwargs)\n",
        "source_code_with_indent": "\n    def __init__(self, model_path: str = None, *args, **kwargs):\n        <IND>super().__init__(*args, **kwargs)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    def __init__(self, model_path: Optional[str] = None, *args, **kwargs):\n        <IND>super().__init__(*args, **kwargs)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "jina/executors/indexers/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/executors/indexers/__init__.py",
    "file_hunks_size": 21,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/executors/indexers/__init__.py:43:14 Incompatible variable type [9]: index_filename is declared to have type `str` but is used as type `None`.",
    "message": " index_filename is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 43,
    "warning_line": "        self, index_filename: str = None, key_length: int = 36, *args, **kwargs"
  },
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "jina/executors/indexers/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/executors/indexers/__init__.py",
    "file_hunks_size": 21,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/executors/indexers/__init__.py:267:4 Inconsistent override [14]: `jina.executors.indexers.BaseKVIndexer.query` overrides method defined in `BaseIndexer` inconsistently. Could not find parameter `Variable(unknown)` in overriding signature.",
    "message": " `jina.executors.indexers.BaseKVIndexer.query` overrides method defined in `BaseIndexer` inconsistently. Could not find parameter `Variable(unknown)` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 267,
    "warning_line": "    def query(self, key: str) -> Optional[bytes]:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        :param values: serialized documents\n        \"\"\"\n        raise NotImplementedError\n\n    def query(self, key: str) -> Optional[bytes]:\n        \"\"\"Find the serialized document to the index via document id.\n",
        "source_code_len": 211,
        "target_code": "        :param values: serialized documents\n        :param args:  Additional positional arguments\n        :param kwargs: Additional keyword arguments\n        \"\"\"\n        raise NotImplementedError\n\n    def query(self, key: str, *args, **kwargs) -> Optional[bytes]:\n        \"\"\"Find the serialized document to the index via document id.\n",
        "target_code_len": 334,
        "diff_format": "@@ -263,6 +312,8 @@\n         :param values: serialized documents\n-        \"\"\"\n-        raise NotImplementedError\n-\n-    def query(self, key: str) -> Optional[bytes]:\n+        :param args:  Additional positional arguments\n+        :param kwargs: Additional keyword arguments\n+        \"\"\"\n+        raise NotImplementedError\n+\n+    def query(self, key: str, *args, **kwargs) -> Optional[bytes]:\n         \"\"\"Find the serialized document to the index via document id.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n        raise NotImplementedError\n\n    <DED>def query(self, key: str) -> Optional[bytes]:\n        <IND>",
        "target_code_with_indent": "\n        raise NotImplementedError\n\n    <DED>def query(self, key: str, *args, **kwargs) -> Optional[bytes]:\n        <IND>"
      }
    ]
  },
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "jina/executors/indexers/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/executors/indexers/__init__.py",
    "file_hunks_size": 21,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/executors/indexers/__init__.py:267:4 Inconsistent override [14]: `jina.executors.indexers.BaseKVIndexer.query` overrides method defined in `BaseIndexer` inconsistently. Could not find parameter `Keywords(unknown)` in overriding signature.",
    "message": " `jina.executors.indexers.BaseKVIndexer.query` overrides method defined in `BaseIndexer` inconsistently. Could not find parameter `Keywords(unknown)` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 267,
    "warning_line": "    def query(self, key: str) -> Optional[bytes]:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        :param values: serialized documents\n        \"\"\"\n        raise NotImplementedError\n\n    def query(self, key: str) -> Optional[bytes]:\n        \"\"\"Find the serialized document to the index via document id.\n",
        "source_code_len": 211,
        "target_code": "        :param values: serialized documents\n        :param args:  Additional positional arguments\n        :param kwargs: Additional keyword arguments\n        \"\"\"\n        raise NotImplementedError\n\n    def query(self, key: str, *args, **kwargs) -> Optional[bytes]:\n        \"\"\"Find the serialized document to the index via document id.\n",
        "target_code_len": 334,
        "diff_format": "@@ -263,6 +312,8 @@\n         :param values: serialized documents\n-        \"\"\"\n-        raise NotImplementedError\n-\n-    def query(self, key: str) -> Optional[bytes]:\n+        :param args:  Additional positional arguments\n+        :param kwargs: Additional keyword arguments\n+        \"\"\"\n+        raise NotImplementedError\n+\n+    def query(self, key: str, *args, **kwargs) -> Optional[bytes]:\n         \"\"\"Find the serialized document to the index via document id.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n        raise NotImplementedError\n\n    <DED>def query(self, key: str) -> Optional[bytes]:\n        <IND>",
        "target_code_with_indent": "\n        raise NotImplementedError\n\n    <DED>def query(self, key: str, *args, **kwargs) -> Optional[bytes]:\n        <IND>"
      }
    ]
  },
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "jina/flow/base.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/flow/base.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/flow/base.py:232:8 Incompatible variable type [9]: needs is declared to have type `Union[List[str], Tuple[str], str]` but is used as type `None`.",
    "message": " needs is declared to have type `Union[List[str], Tuple[str], str]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 232,
    "warning_line": "        needs: Union[str, Tuple[str], List[str]] = None,"
  },
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "jina/flow/base.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/flow/base.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/flow/base.py:277:8 Incompatible variable type [9]: needs is declared to have type `Union[List[str], Tuple[str], str]` but is used as type `Set[typing.Any]`.",
    "message": " needs is declared to have type `Union[List[str], Tuple[str], str]` but is used as type `Set[typing.Any]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 277,
    "warning_line": "        needs = op_flow._parse_endpoints("
  },
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "jina/flow/base.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/flow/base.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/flow/base.py:306:53 Incompatible parameter type [6]: Expected `Set[str]` for 2nd parameter `needs` to call `jina.peapods.pods.BasePod.__init__` but got `Union[List[str], Tuple[str], str]`.",
    "message": " Expected `Set[str]` for 2nd parameter `needs` to call `jina.peapods.pods.BasePod.__init__` but got `Union[List[str], Tuple[str], str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 306,
    "warning_line": "        op_flow._pod_nodes[pod_name] = BasePod(args, needs=needs)"
  },
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "jina/flow/base.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/flow/base.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/flow/base.py:706:8 Incompatible variable type [9]: output is declared to have type `str` but is used as type `None`.",
    "message": " output is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 706,
    "warning_line": "        output: str = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self,\n        output: str = None,\n        vertical_layout: bool = False,\n",
        "source_code_len": 81,
        "target_code": "        self,\n        output: Optional[str] = None,\n        vertical_layout: bool = False,\n",
        "target_code_len": 91,
        "diff_format": "@@ -705,3 +705,3 @@\n         self,\n-        output: str = None,\n+        output: Optional[str] = None,\n         vertical_layout: bool = False,\n",
        "source_code_with_indent": "        self,\n        output: str = None,\n        vertical_layout: bool = False,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self,\n        output: Optional[str] = None,\n        vertical_layout: bool = False,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "jina/flow/base.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/flow/base.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/flow/base.py:892:31 Incompatible variable type [9]: port is declared to have type `int` but is used as type `None`.",
    "message": " port is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 892,
    "warning_line": "    def use_grpc_gateway(self, port: int = None):",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def use_grpc_gateway(self, port: int = None):\n        \"\"\"Change to use gRPC gateway for IO\n",
        "source_code_len": 96,
        "target_code": "\n    def use_grpc_gateway(self, port: Optional[int] = None):\n        \"\"\"Change to use gRPC gateway for IO\n",
        "target_code_len": 106,
        "diff_format": "@@ -891,3 +891,3 @@\n \n-    def use_grpc_gateway(self, port: int = None):\n+    def use_grpc_gateway(self, port: Optional[int] = None):\n         \"\"\"Change to use gRPC gateway for IO\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED><DED>def use_grpc_gateway(self, port: int = None):\n        <IND>",
        "target_code_with_indent": "\n    <DED><DED>def use_grpc_gateway(self, port: Optional[int] = None):\n        <IND>"
      }
    ]
  },
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "jina/flow/base.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/flow/base.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/flow/base.py:899:31 Incompatible variable type [9]: port is declared to have type `int` but is used as type `None`.",
    "message": " port is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 899,
    "warning_line": "    def use_rest_gateway(self, port: int = None):",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def use_rest_gateway(self, port: int = None):\n        \"\"\"Change to use REST gateway for IO\n",
        "source_code_len": 96,
        "target_code": "\n    def use_rest_gateway(self, port: Optional[int] = None):\n        \"\"\"Change to use REST gateway for IO\n",
        "target_code_len": 106,
        "diff_format": "@@ -898,3 +898,3 @@\n \n-    def use_rest_gateway(self, port: int = None):\n+    def use_rest_gateway(self, port: Optional[int] = None):\n         \"\"\"Change to use REST gateway for IO\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED><DED>def use_rest_gateway(self, port: int = None):\n        <IND>",
        "target_code_with_indent": "\n    <DED><DED>def use_rest_gateway(self, port: Optional[int] = None):\n        <IND>"
      }
    ]
  },
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "jina/flow/mixin/async_crud.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/flow/mixin/async_crud.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/flow/mixin/async_crud.py:53:8 Incompatible variable type [9]: size is declared to have type `int` but is used as type `None`.",
    "message": " size is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 53,
    "warning_line": "        size: int = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_len": 66,
        "target_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_len": 76,
        "diff_format": "@@ -1,3 +1,3 @@\n import warnings\n-from typing import Union, Iterable, TextIO, Dict\n+from typing import Union, Iterable, TextIO, Dict, Optional\n \n",
        "source_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        axis: int = 0,\n        size: int = None,\n        shuffle: bool = False,\n",
        "source_code_len": 80,
        "target_code": "        axis: int = 0,\n        size: Optional[int] = None,\n        shuffle: bool = False,\n",
        "target_code_len": 90,
        "diff_format": "@@ -52,3 +52,3 @@\n         axis: int = 0,\n-        size: int = None,\n+        size: Optional[int] = None,\n         shuffle: bool = False,\n",
        "source_code_with_indent": "        axis: int = 0,\n        size: int = None,\n        shuffle: bool = False,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        axis: int = 0,\n        size: Optional[int] = None,\n        shuffle: bool = False,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "jina/flow/mixin/async_crud.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/flow/mixin/async_crud.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/flow/mixin/async_crud.py:94:8 Incompatible variable type [9]: size is declared to have type `int` but is used as type `None`.",
    "message": " size is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 94,
    "warning_line": "        size: int = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_len": 66,
        "target_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_len": 76,
        "diff_format": "@@ -1,3 +1,3 @@\n import warnings\n-from typing import Union, Iterable, TextIO, Dict\n+from typing import Union, Iterable, TextIO, Dict, Optional\n \n",
        "source_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        axis: int = 0,\n        size: int = None,\n        shuffle: bool = False,\n",
        "source_code_len": 80,
        "target_code": "        axis: int = 0,\n        size: Optional[int] = None,\n        shuffle: bool = False,\n",
        "target_code_len": 90,
        "diff_format": "@@ -93,3 +93,3 @@\n         axis: int = 0,\n-        size: int = None,\n+        size: Optional[int] = None,\n         shuffle: bool = False,\n",
        "source_code_with_indent": "        axis: int = 0,\n        size: int = None,\n        shuffle: bool = False,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        axis: int = 0,\n        size: Optional[int] = None,\n        shuffle: bool = False,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "jina/flow/mixin/async_crud.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/flow/mixin/async_crud.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/flow/mixin/async_crud.py:133:8 Incompatible variable type [9]: lines is declared to have type `Union[Iterable[str], TextIO]` but is used as type `None`.",
    "message": " lines is declared to have type `Union[Iterable[str], TextIO]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 133,
    "warning_line": "        lines: Union[Iterable[str], TextIO] = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_len": 66,
        "target_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_len": 76,
        "diff_format": "@@ -1,3 +1,3 @@\n import warnings\n-from typing import Union, Iterable, TextIO, Dict\n+from typing import Union, Iterable, TextIO, Dict, Optional\n \n",
        "source_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self,\n        lines: Union[Iterable[str], TextIO] = None,\n        filepath: str = None,\n        size: int = None,\n        sampling_rate: float = None,\n        read_mode: str = 'r',\n        line_format: str = 'json',\n        field_resolver: Dict[str, str] = None,\n        on_done: CallbackFnType = None,\n",
        "source_code_len": 311,
        "target_code": "        self,\n        lines: Optional[Union[Iterable[str], TextIO]] = None,\n        filepath: Optional[str] = None,\n        size: Optional[int] = None,\n        sampling_rate: Optional[float] = None,\n        read_mode: str = 'r',\n        line_format: str = 'json',\n        field_resolver: Optional[Dict[str, str]] = None,\n        on_done: CallbackFnType = None,\n",
        "target_code_len": 361,
        "diff_format": "@@ -132,9 +132,9 @@\n         self,\n-        lines: Union[Iterable[str], TextIO] = None,\n-        filepath: str = None,\n-        size: int = None,\n-        sampling_rate: float = None,\n+        lines: Optional[Union[Iterable[str], TextIO]] = None,\n+        filepath: Optional[str] = None,\n+        size: Optional[int] = None,\n+        sampling_rate: Optional[float] = None,\n         read_mode: str = 'r',\n         line_format: str = 'json',\n-        field_resolver: Dict[str, str] = None,\n+        field_resolver: Optional[Dict[str, str]] = None,\n         on_done: CallbackFnType = None,\n",
        "source_code_with_indent": "        self,\n        lines: Union[Iterable[str], TextIO] = None,\n        filepath: str = None,\n        size: int = None,\n        sampling_rate: float = None,\n        read_mode: str = 'r',\n        line_format: str = 'json',\n        field_resolver: Dict[str, str] = None,\n        on_done: CallbackFnType = None,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self,\n        lines: Optional[Union[Iterable[str], TextIO]] = None,\n        filepath: Optional[str] = None,\n        size: Optional[int] = None,\n        sampling_rate: Optional[float] = None,\n        read_mode: str = 'r',\n        line_format: str = 'json',\n        field_resolver: Optional[Dict[str, str]] = None,\n        on_done: CallbackFnType = None,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "jina/flow/mixin/async_crud.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/flow/mixin/async_crud.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/flow/mixin/async_crud.py:134:8 Incompatible variable type [9]: filepath is declared to have type `str` but is used as type `None`.",
    "message": " filepath is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 134,
    "warning_line": "        filepath: str = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_len": 66,
        "target_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_len": 76,
        "diff_format": "@@ -1,3 +1,3 @@\n import warnings\n-from typing import Union, Iterable, TextIO, Dict\n+from typing import Union, Iterable, TextIO, Dict, Optional\n \n",
        "source_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self,\n        lines: Union[Iterable[str], TextIO] = None,\n        filepath: str = None,\n        size: int = None,\n        sampling_rate: float = None,\n        read_mode: str = 'r',\n        line_format: str = 'json',\n        field_resolver: Dict[str, str] = None,\n        on_done: CallbackFnType = None,\n",
        "source_code_len": 311,
        "target_code": "        self,\n        lines: Optional[Union[Iterable[str], TextIO]] = None,\n        filepath: Optional[str] = None,\n        size: Optional[int] = None,\n        sampling_rate: Optional[float] = None,\n        read_mode: str = 'r',\n        line_format: str = 'json',\n        field_resolver: Optional[Dict[str, str]] = None,\n        on_done: CallbackFnType = None,\n",
        "target_code_len": 361,
        "diff_format": "@@ -132,9 +132,9 @@\n         self,\n-        lines: Union[Iterable[str], TextIO] = None,\n-        filepath: str = None,\n-        size: int = None,\n-        sampling_rate: float = None,\n+        lines: Optional[Union[Iterable[str], TextIO]] = None,\n+        filepath: Optional[str] = None,\n+        size: Optional[int] = None,\n+        sampling_rate: Optional[float] = None,\n         read_mode: str = 'r',\n         line_format: str = 'json',\n-        field_resolver: Dict[str, str] = None,\n+        field_resolver: Optional[Dict[str, str]] = None,\n         on_done: CallbackFnType = None,\n",
        "source_code_with_indent": "        self,\n        lines: Union[Iterable[str], TextIO] = None,\n        filepath: str = None,\n        size: int = None,\n        sampling_rate: float = None,\n        read_mode: str = 'r',\n        line_format: str = 'json',\n        field_resolver: Dict[str, str] = None,\n        on_done: CallbackFnType = None,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self,\n        lines: Optional[Union[Iterable[str], TextIO]] = None,\n        filepath: Optional[str] = None,\n        size: Optional[int] = None,\n        sampling_rate: Optional[float] = None,\n        read_mode: str = 'r',\n        line_format: str = 'json',\n        field_resolver: Optional[Dict[str, str]] = None,\n        on_done: CallbackFnType = None,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "jina/flow/mixin/async_crud.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/flow/mixin/async_crud.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/flow/mixin/async_crud.py:135:8 Incompatible variable type [9]: size is declared to have type `int` but is used as type `None`.",
    "message": " size is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 135,
    "warning_line": "        size: int = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_len": 66,
        "target_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_len": 76,
        "diff_format": "@@ -1,3 +1,3 @@\n import warnings\n-from typing import Union, Iterable, TextIO, Dict\n+from typing import Union, Iterable, TextIO, Dict, Optional\n \n",
        "source_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self,\n        lines: Union[Iterable[str], TextIO] = None,\n        filepath: str = None,\n        size: int = None,\n        sampling_rate: float = None,\n        read_mode: str = 'r',\n        line_format: str = 'json',\n        field_resolver: Dict[str, str] = None,\n        on_done: CallbackFnType = None,\n",
        "source_code_len": 311,
        "target_code": "        self,\n        lines: Optional[Union[Iterable[str], TextIO]] = None,\n        filepath: Optional[str] = None,\n        size: Optional[int] = None,\n        sampling_rate: Optional[float] = None,\n        read_mode: str = 'r',\n        line_format: str = 'json',\n        field_resolver: Optional[Dict[str, str]] = None,\n        on_done: CallbackFnType = None,\n",
        "target_code_len": 361,
        "diff_format": "@@ -132,9 +132,9 @@\n         self,\n-        lines: Union[Iterable[str], TextIO] = None,\n-        filepath: str = None,\n-        size: int = None,\n-        sampling_rate: float = None,\n+        lines: Optional[Union[Iterable[str], TextIO]] = None,\n+        filepath: Optional[str] = None,\n+        size: Optional[int] = None,\n+        sampling_rate: Optional[float] = None,\n         read_mode: str = 'r',\n         line_format: str = 'json',\n-        field_resolver: Dict[str, str] = None,\n+        field_resolver: Optional[Dict[str, str]] = None,\n         on_done: CallbackFnType = None,\n",
        "source_code_with_indent": "        self,\n        lines: Union[Iterable[str], TextIO] = None,\n        filepath: str = None,\n        size: int = None,\n        sampling_rate: float = None,\n        read_mode: str = 'r',\n        line_format: str = 'json',\n        field_resolver: Dict[str, str] = None,\n        on_done: CallbackFnType = None,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self,\n        lines: Optional[Union[Iterable[str], TextIO]] = None,\n        filepath: Optional[str] = None,\n        size: Optional[int] = None,\n        sampling_rate: Optional[float] = None,\n        read_mode: str = 'r',\n        line_format: str = 'json',\n        field_resolver: Optional[Dict[str, str]] = None,\n        on_done: CallbackFnType = None,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "jina/flow/mixin/async_crud.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/flow/mixin/async_crud.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/flow/mixin/async_crud.py:136:8 Incompatible variable type [9]: sampling_rate is declared to have type `float` but is used as type `None`.",
    "message": " sampling_rate is declared to have type `float` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 136,
    "warning_line": "        sampling_rate: float = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_len": 66,
        "target_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_len": 76,
        "diff_format": "@@ -1,3 +1,3 @@\n import warnings\n-from typing import Union, Iterable, TextIO, Dict\n+from typing import Union, Iterable, TextIO, Dict, Optional\n \n",
        "source_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self,\n        lines: Union[Iterable[str], TextIO] = None,\n        filepath: str = None,\n        size: int = None,\n        sampling_rate: float = None,\n        read_mode: str = 'r',\n        line_format: str = 'json',\n        field_resolver: Dict[str, str] = None,\n        on_done: CallbackFnType = None,\n",
        "source_code_len": 311,
        "target_code": "        self,\n        lines: Optional[Union[Iterable[str], TextIO]] = None,\n        filepath: Optional[str] = None,\n        size: Optional[int] = None,\n        sampling_rate: Optional[float] = None,\n        read_mode: str = 'r',\n        line_format: str = 'json',\n        field_resolver: Optional[Dict[str, str]] = None,\n        on_done: CallbackFnType = None,\n",
        "target_code_len": 361,
        "diff_format": "@@ -132,9 +132,9 @@\n         self,\n-        lines: Union[Iterable[str], TextIO] = None,\n-        filepath: str = None,\n-        size: int = None,\n-        sampling_rate: float = None,\n+        lines: Optional[Union[Iterable[str], TextIO]] = None,\n+        filepath: Optional[str] = None,\n+        size: Optional[int] = None,\n+        sampling_rate: Optional[float] = None,\n         read_mode: str = 'r',\n         line_format: str = 'json',\n-        field_resolver: Dict[str, str] = None,\n+        field_resolver: Optional[Dict[str, str]] = None,\n         on_done: CallbackFnType = None,\n",
        "source_code_with_indent": "        self,\n        lines: Union[Iterable[str], TextIO] = None,\n        filepath: str = None,\n        size: int = None,\n        sampling_rate: float = None,\n        read_mode: str = 'r',\n        line_format: str = 'json',\n        field_resolver: Dict[str, str] = None,\n        on_done: CallbackFnType = None,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self,\n        lines: Optional[Union[Iterable[str], TextIO]] = None,\n        filepath: Optional[str] = None,\n        size: Optional[int] = None,\n        sampling_rate: Optional[float] = None,\n        read_mode: str = 'r',\n        line_format: str = 'json',\n        field_resolver: Optional[Dict[str, str]] = None,\n        on_done: CallbackFnType = None,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "jina/flow/mixin/async_crud.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/flow/mixin/async_crud.py",
    "file_hunks_size": 11,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/flow/mixin/async_crud.py:186:8 Incompatible variable type [9]: field_resolver is declared to have type `Dict[str, str]` but is used as type `None`.",
    "message": " field_resolver is declared to have type `Dict[str, str]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 186,
    "warning_line": "        field_resolver: Dict[str, str] = None,"
  },
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "jina/flow/mixin/async_crud.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/flow/mixin/async_crud.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/flow/mixin/async_crud.py:187:8 Incompatible variable type [9]: size is declared to have type `int` but is used as type `None`.",
    "message": " size is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 187,
    "warning_line": "        size: int = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_len": 66,
        "target_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_len": 76,
        "diff_format": "@@ -1,3 +1,3 @@\n import warnings\n-from typing import Union, Iterable, TextIO, Dict\n+from typing import Union, Iterable, TextIO, Dict, Optional\n \n",
        "source_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        field_resolver: Dict[str, str] = None,\n        size: int = None,\n        sampling_rate: float = None,\n        on_done: CallbackFnType = None,\n",
        "source_code_len": 150,
        "target_code": "        field_resolver: Dict[str, str] = None,\n        size: Optional[int] = None,\n        sampling_rate: Optional[float] = None,\n        on_done: CallbackFnType = None,\n",
        "target_code_len": 170,
        "diff_format": "@@ -186,4 +186,4 @@\n         field_resolver: Dict[str, str] = None,\n-        size: int = None,\n-        sampling_rate: float = None,\n+        size: Optional[int] = None,\n+        sampling_rate: Optional[float] = None,\n         on_done: CallbackFnType = None,\n",
        "source_code_with_indent": "        field_resolver: Dict[str, str] = None,\n        size: int = None,\n        sampling_rate: float = None,\n        on_done: CallbackFnType = None,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        field_resolver: Dict[str, str] = None,\n        size: Optional[int] = None,\n        sampling_rate: Optional[float] = None,\n        on_done: CallbackFnType = None,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "jina/flow/mixin/async_crud.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/flow/mixin/async_crud.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/flow/mixin/async_crud.py:188:8 Incompatible variable type [9]: sampling_rate is declared to have type `float` but is used as type `None`.",
    "message": " sampling_rate is declared to have type `float` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 188,
    "warning_line": "        sampling_rate: float = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_len": 66,
        "target_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_len": 76,
        "diff_format": "@@ -1,3 +1,3 @@\n import warnings\n-from typing import Union, Iterable, TextIO, Dict\n+from typing import Union, Iterable, TextIO, Dict, Optional\n \n",
        "source_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        field_resolver: Dict[str, str] = None,\n        size: int = None,\n        sampling_rate: float = None,\n        on_done: CallbackFnType = None,\n",
        "source_code_len": 150,
        "target_code": "        field_resolver: Dict[str, str] = None,\n        size: Optional[int] = None,\n        sampling_rate: Optional[float] = None,\n        on_done: CallbackFnType = None,\n",
        "target_code_len": 170,
        "diff_format": "@@ -186,4 +186,4 @@\n         field_resolver: Dict[str, str] = None,\n-        size: int = None,\n-        sampling_rate: float = None,\n+        size: Optional[int] = None,\n+        sampling_rate: Optional[float] = None,\n         on_done: CallbackFnType = None,\n",
        "source_code_with_indent": "        field_resolver: Dict[str, str] = None,\n        size: int = None,\n        sampling_rate: float = None,\n        on_done: CallbackFnType = None,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        field_resolver: Dict[str, str] = None,\n        size: Optional[int] = None,\n        sampling_rate: Optional[float] = None,\n        on_done: CallbackFnType = None,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "jina/flow/mixin/async_crud.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/flow/mixin/async_crud.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/flow/mixin/async_crud.py:227:8 Incompatible variable type [9]: field_resolver is declared to have type `Dict[str, str]` but is used as type `None`.",
    "message": " field_resolver is declared to have type `Dict[str, str]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 227,
    "warning_line": "        field_resolver: Dict[str, str] = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_len": 66,
        "target_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_len": 76,
        "diff_format": "@@ -1,3 +1,3 @@\n import warnings\n-from typing import Union, Iterable, TextIO, Dict\n+from typing import Union, Iterable, TextIO, Dict, Optional\n \n",
        "source_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        lines: Union[Iterable[str], TextIO],\n        field_resolver: Dict[str, str] = None,\n        size: int = None,\n        sampling_rate: float = None,\n        on_done: CallbackFnType = None,\n",
        "source_code_len": 195,
        "target_code": "        lines: Union[Iterable[str], TextIO],\n        field_resolver: Optional[Dict[str, str]] = None,\n        size: Optional[int] = None,\n        sampling_rate: Optional[float] = None,\n        on_done: CallbackFnType = None,\n",
        "target_code_len": 225,
        "diff_format": "@@ -226,5 +226,5 @@\n         lines: Union[Iterable[str], TextIO],\n-        field_resolver: Dict[str, str] = None,\n-        size: int = None,\n-        sampling_rate: float = None,\n+        field_resolver: Optional[Dict[str, str]] = None,\n+        size: Optional[int] = None,\n+        sampling_rate: Optional[float] = None,\n         on_done: CallbackFnType = None,\n",
        "source_code_with_indent": "        lines: Union[Iterable[str], TextIO],\n        field_resolver: Dict[str, str] = None,\n        size: int = None,\n        sampling_rate: float = None,\n        on_done: CallbackFnType = None,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        lines: Union[Iterable[str], TextIO],\n        field_resolver: Optional[Dict[str, str]] = None,\n        size: Optional[int] = None,\n        sampling_rate: Optional[float] = None,\n        on_done: CallbackFnType = None,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "jina/flow/mixin/async_crud.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/flow/mixin/async_crud.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/flow/mixin/async_crud.py:228:8 Incompatible variable type [9]: size is declared to have type `int` but is used as type `None`.",
    "message": " size is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 228,
    "warning_line": "        size: int = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_len": 66,
        "target_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_len": 76,
        "diff_format": "@@ -1,3 +1,3 @@\n import warnings\n-from typing import Union, Iterable, TextIO, Dict\n+from typing import Union, Iterable, TextIO, Dict, Optional\n \n",
        "source_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        lines: Union[Iterable[str], TextIO],\n        field_resolver: Dict[str, str] = None,\n        size: int = None,\n        sampling_rate: float = None,\n        on_done: CallbackFnType = None,\n",
        "source_code_len": 195,
        "target_code": "        lines: Union[Iterable[str], TextIO],\n        field_resolver: Optional[Dict[str, str]] = None,\n        size: Optional[int] = None,\n        sampling_rate: Optional[float] = None,\n        on_done: CallbackFnType = None,\n",
        "target_code_len": 225,
        "diff_format": "@@ -226,5 +226,5 @@\n         lines: Union[Iterable[str], TextIO],\n-        field_resolver: Dict[str, str] = None,\n-        size: int = None,\n-        sampling_rate: float = None,\n+        field_resolver: Optional[Dict[str, str]] = None,\n+        size: Optional[int] = None,\n+        sampling_rate: Optional[float] = None,\n         on_done: CallbackFnType = None,\n",
        "source_code_with_indent": "        lines: Union[Iterable[str], TextIO],\n        field_resolver: Dict[str, str] = None,\n        size: int = None,\n        sampling_rate: float = None,\n        on_done: CallbackFnType = None,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        lines: Union[Iterable[str], TextIO],\n        field_resolver: Optional[Dict[str, str]] = None,\n        size: Optional[int] = None,\n        sampling_rate: Optional[float] = None,\n        on_done: CallbackFnType = None,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "jina/flow/mixin/async_crud.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/flow/mixin/async_crud.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/flow/mixin/async_crud.py:229:8 Incompatible variable type [9]: sampling_rate is declared to have type `float` but is used as type `None`.",
    "message": " sampling_rate is declared to have type `float` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 229,
    "warning_line": "        sampling_rate: float = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_len": 66,
        "target_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_len": 76,
        "diff_format": "@@ -1,3 +1,3 @@\n import warnings\n-from typing import Union, Iterable, TextIO, Dict\n+from typing import Union, Iterable, TextIO, Dict, Optional\n \n",
        "source_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        lines: Union[Iterable[str], TextIO],\n        field_resolver: Dict[str, str] = None,\n        size: int = None,\n        sampling_rate: float = None,\n        on_done: CallbackFnType = None,\n",
        "source_code_len": 195,
        "target_code": "        lines: Union[Iterable[str], TextIO],\n        field_resolver: Optional[Dict[str, str]] = None,\n        size: Optional[int] = None,\n        sampling_rate: Optional[float] = None,\n        on_done: CallbackFnType = None,\n",
        "target_code_len": 225,
        "diff_format": "@@ -226,5 +226,5 @@\n         lines: Union[Iterable[str], TextIO],\n-        field_resolver: Dict[str, str] = None,\n-        size: int = None,\n-        sampling_rate: float = None,\n+        field_resolver: Optional[Dict[str, str]] = None,\n+        size: Optional[int] = None,\n+        sampling_rate: Optional[float] = None,\n         on_done: CallbackFnType = None,\n",
        "source_code_with_indent": "        lines: Union[Iterable[str], TextIO],\n        field_resolver: Dict[str, str] = None,\n        size: int = None,\n        sampling_rate: float = None,\n        on_done: CallbackFnType = None,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        lines: Union[Iterable[str], TextIO],\n        field_resolver: Optional[Dict[str, str]] = None,\n        size: Optional[int] = None,\n        sampling_rate: Optional[float] = None,\n        on_done: CallbackFnType = None,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "jina/flow/mixin/async_crud.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/flow/mixin/async_crud.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/flow/mixin/async_crud.py:275:8 Incompatible variable type [9]: size is declared to have type `int` but is used as type `None`.",
    "message": " size is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 275,
    "warning_line": "        size: int = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_len": 66,
        "target_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_len": 76,
        "diff_format": "@@ -1,3 +1,3 @@\n import warnings\n-from typing import Union, Iterable, TextIO, Dict\n+from typing import Union, Iterable, TextIO, Dict, Optional\n \n",
        "source_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        recursive: bool = True,\n        size: int = None,\n        sampling_rate: float = None,\n        read_mode: str = None,\n        on_done: CallbackFnType = None,\n",
        "source_code_len": 166,
        "target_code": "        recursive: bool = True,\n        size: Optional[int] = None,\n        sampling_rate: Optional[float] = None,\n        read_mode: Optional[str] = None,\n        on_done: CallbackFnType = None,\n",
        "target_code_len": 196,
        "diff_format": "@@ -274,5 +274,5 @@\n         recursive: bool = True,\n-        size: int = None,\n-        sampling_rate: float = None,\n-        read_mode: str = None,\n+        size: Optional[int] = None,\n+        sampling_rate: Optional[float] = None,\n+        read_mode: Optional[str] = None,\n         on_done: CallbackFnType = None,\n",
        "source_code_with_indent": "        recursive: bool = True,\n        size: int = None,\n        sampling_rate: float = None,\n        read_mode: str = None,\n        on_done: CallbackFnType = None,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        recursive: bool = True,\n        size: Optional[int] = None,\n        sampling_rate: Optional[float] = None,\n        read_mode: Optional[str] = None,\n        on_done: CallbackFnType = None,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "jina/flow/mixin/async_crud.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/flow/mixin/async_crud.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/flow/mixin/async_crud.py:276:8 Incompatible variable type [9]: sampling_rate is declared to have type `float` but is used as type `None`.",
    "message": " sampling_rate is declared to have type `float` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 276,
    "warning_line": "        sampling_rate: float = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_len": 66,
        "target_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_len": 76,
        "diff_format": "@@ -1,3 +1,3 @@\n import warnings\n-from typing import Union, Iterable, TextIO, Dict\n+from typing import Union, Iterable, TextIO, Dict, Optional\n \n",
        "source_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        recursive: bool = True,\n        size: int = None,\n        sampling_rate: float = None,\n        read_mode: str = None,\n        on_done: CallbackFnType = None,\n",
        "source_code_len": 166,
        "target_code": "        recursive: bool = True,\n        size: Optional[int] = None,\n        sampling_rate: Optional[float] = None,\n        read_mode: Optional[str] = None,\n        on_done: CallbackFnType = None,\n",
        "target_code_len": 196,
        "diff_format": "@@ -274,5 +274,5 @@\n         recursive: bool = True,\n-        size: int = None,\n-        sampling_rate: float = None,\n-        read_mode: str = None,\n+        size: Optional[int] = None,\n+        sampling_rate: Optional[float] = None,\n+        read_mode: Optional[str] = None,\n         on_done: CallbackFnType = None,\n",
        "source_code_with_indent": "        recursive: bool = True,\n        size: int = None,\n        sampling_rate: float = None,\n        read_mode: str = None,\n        on_done: CallbackFnType = None,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        recursive: bool = True,\n        size: Optional[int] = None,\n        sampling_rate: Optional[float] = None,\n        read_mode: Optional[str] = None,\n        on_done: CallbackFnType = None,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "jina/flow/mixin/async_crud.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/flow/mixin/async_crud.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/flow/mixin/async_crud.py:277:8 Incompatible variable type [9]: read_mode is declared to have type `str` but is used as type `None`.",
    "message": " read_mode is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 277,
    "warning_line": "        read_mode: str = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_len": 66,
        "target_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_len": 76,
        "diff_format": "@@ -1,3 +1,3 @@\n import warnings\n-from typing import Union, Iterable, TextIO, Dict\n+from typing import Union, Iterable, TextIO, Dict, Optional\n \n",
        "source_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        recursive: bool = True,\n        size: int = None,\n        sampling_rate: float = None,\n        read_mode: str = None,\n        on_done: CallbackFnType = None,\n",
        "source_code_len": 166,
        "target_code": "        recursive: bool = True,\n        size: Optional[int] = None,\n        sampling_rate: Optional[float] = None,\n        read_mode: Optional[str] = None,\n        on_done: CallbackFnType = None,\n",
        "target_code_len": 196,
        "diff_format": "@@ -274,5 +274,5 @@\n         recursive: bool = True,\n-        size: int = None,\n-        sampling_rate: float = None,\n-        read_mode: str = None,\n+        size: Optional[int] = None,\n+        sampling_rate: Optional[float] = None,\n+        read_mode: Optional[str] = None,\n         on_done: CallbackFnType = None,\n",
        "source_code_with_indent": "        recursive: bool = True,\n        size: int = None,\n        sampling_rate: float = None,\n        read_mode: str = None,\n        on_done: CallbackFnType = None,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        recursive: bool = True,\n        size: Optional[int] = None,\n        sampling_rate: Optional[float] = None,\n        read_mode: Optional[str] = None,\n        on_done: CallbackFnType = None,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "jina/flow/mixin/async_crud.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/flow/mixin/async_crud.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/flow/mixin/async_crud.py:320:8 Incompatible variable type [9]: size is declared to have type `int` but is used as type `None`.",
    "message": " size is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 320,
    "warning_line": "        size: int = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_len": 66,
        "target_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_len": 76,
        "diff_format": "@@ -1,3 +1,3 @@\n import warnings\n-from typing import Union, Iterable, TextIO, Dict\n+from typing import Union, Iterable, TextIO, Dict, Optional\n \n",
        "source_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        recursive: bool = True,\n        size: int = None,\n        sampling_rate: float = None,\n        read_mode: str = None,\n        on_done: CallbackFnType = None,\n",
        "source_code_len": 166,
        "target_code": "        recursive: bool = True,\n        size: Optional[int] = None,\n        sampling_rate: Optional[float] = None,\n        read_mode: Optional[str] = None,\n        on_done: CallbackFnType = None,\n",
        "target_code_len": 196,
        "diff_format": "@@ -319,5 +319,5 @@\n         recursive: bool = True,\n-        size: int = None,\n-        sampling_rate: float = None,\n-        read_mode: str = None,\n+        size: Optional[int] = None,\n+        sampling_rate: Optional[float] = None,\n+        read_mode: Optional[str] = None,\n         on_done: CallbackFnType = None,\n",
        "source_code_with_indent": "        recursive: bool = True,\n        size: int = None,\n        sampling_rate: float = None,\n        read_mode: str = None,\n        on_done: CallbackFnType = None,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        recursive: bool = True,\n        size: Optional[int] = None,\n        sampling_rate: Optional[float] = None,\n        read_mode: Optional[str] = None,\n        on_done: CallbackFnType = None,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "jina/flow/mixin/async_crud.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/flow/mixin/async_crud.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/flow/mixin/async_crud.py:321:8 Incompatible variable type [9]: sampling_rate is declared to have type `float` but is used as type `None`.",
    "message": " sampling_rate is declared to have type `float` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 321,
    "warning_line": "        sampling_rate: float = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_len": 66,
        "target_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_len": 76,
        "diff_format": "@@ -1,3 +1,3 @@\n import warnings\n-from typing import Union, Iterable, TextIO, Dict\n+from typing import Union, Iterable, TextIO, Dict, Optional\n \n",
        "source_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        recursive: bool = True,\n        size: int = None,\n        sampling_rate: float = None,\n        read_mode: str = None,\n        on_done: CallbackFnType = None,\n",
        "source_code_len": 166,
        "target_code": "        recursive: bool = True,\n        size: Optional[int] = None,\n        sampling_rate: Optional[float] = None,\n        read_mode: Optional[str] = None,\n        on_done: CallbackFnType = None,\n",
        "target_code_len": 196,
        "diff_format": "@@ -319,5 +319,5 @@\n         recursive: bool = True,\n-        size: int = None,\n-        sampling_rate: float = None,\n-        read_mode: str = None,\n+        size: Optional[int] = None,\n+        sampling_rate: Optional[float] = None,\n+        read_mode: Optional[str] = None,\n         on_done: CallbackFnType = None,\n",
        "source_code_with_indent": "        recursive: bool = True,\n        size: int = None,\n        sampling_rate: float = None,\n        read_mode: str = None,\n        on_done: CallbackFnType = None,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        recursive: bool = True,\n        size: Optional[int] = None,\n        sampling_rate: Optional[float] = None,\n        read_mode: Optional[str] = None,\n        on_done: CallbackFnType = None,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "jina/flow/mixin/async_crud.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/flow/mixin/async_crud.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/flow/mixin/async_crud.py:322:8 Incompatible variable type [9]: read_mode is declared to have type `str` but is used as type `None`.",
    "message": " read_mode is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 322,
    "warning_line": "        read_mode: str = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_len": 66,
        "target_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_len": 76,
        "diff_format": "@@ -1,3 +1,3 @@\n import warnings\n-from typing import Union, Iterable, TextIO, Dict\n+from typing import Union, Iterable, TextIO, Dict, Optional\n \n",
        "source_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        recursive: bool = True,\n        size: int = None,\n        sampling_rate: float = None,\n        read_mode: str = None,\n        on_done: CallbackFnType = None,\n",
        "source_code_len": 166,
        "target_code": "        recursive: bool = True,\n        size: Optional[int] = None,\n        sampling_rate: Optional[float] = None,\n        read_mode: Optional[str] = None,\n        on_done: CallbackFnType = None,\n",
        "target_code_len": 196,
        "diff_format": "@@ -319,5 +319,5 @@\n         recursive: bool = True,\n-        size: int = None,\n-        sampling_rate: float = None,\n-        read_mode: str = None,\n+        size: Optional[int] = None,\n+        sampling_rate: Optional[float] = None,\n+        read_mode: Optional[str] = None,\n         on_done: CallbackFnType = None,\n",
        "source_code_with_indent": "        recursive: bool = True,\n        size: int = None,\n        sampling_rate: float = None,\n        read_mode: str = None,\n        on_done: CallbackFnType = None,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        recursive: bool = True,\n        size: Optional[int] = None,\n        sampling_rate: Optional[float] = None,\n        read_mode: Optional[str] = None,\n        on_done: CallbackFnType = None,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "jina/flow/mixin/async_crud.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/flow/mixin/async_crud.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/flow/mixin/async_crud.py:358:8 Incompatible variable type [9]: field_resolver is declared to have type `Dict[str, str]` but is used as type `None`.",
    "message": " field_resolver is declared to have type `Dict[str, str]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 358,
    "warning_line": "        field_resolver: Dict[str, str] = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_len": 66,
        "target_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_len": 76,
        "diff_format": "@@ -1,3 +1,3 @@\n import warnings\n-from typing import Union, Iterable, TextIO, Dict\n+from typing import Union, Iterable, TextIO, Dict, Optional\n \n",
        "source_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        lines: Union[Iterable[str], TextIO],\n        field_resolver: Dict[str, str] = None,\n        size: int = None,\n        sampling_rate: float = None,\n        on_done: CallbackFnType = None,\n",
        "source_code_len": 195,
        "target_code": "        lines: Union[Iterable[str], TextIO],\n        field_resolver: Optional[Dict[str, str]] = None,\n        size: Optional[int] = None,\n        sampling_rate: Optional[float] = None,\n        on_done: CallbackFnType = None,\n",
        "target_code_len": 225,
        "diff_format": "@@ -357,5 +357,5 @@\n         lines: Union[Iterable[str], TextIO],\n-        field_resolver: Dict[str, str] = None,\n-        size: int = None,\n-        sampling_rate: float = None,\n+        field_resolver: Optional[Dict[str, str]] = None,\n+        size: Optional[int] = None,\n+        sampling_rate: Optional[float] = None,\n         on_done: CallbackFnType = None,\n",
        "source_code_with_indent": "        lines: Union[Iterable[str], TextIO],\n        field_resolver: Dict[str, str] = None,\n        size: int = None,\n        sampling_rate: float = None,\n        on_done: CallbackFnType = None,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        lines: Union[Iterable[str], TextIO],\n        field_resolver: Optional[Dict[str, str]] = None,\n        size: Optional[int] = None,\n        sampling_rate: Optional[float] = None,\n        on_done: CallbackFnType = None,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "jina/flow/mixin/async_crud.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/flow/mixin/async_crud.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/flow/mixin/async_crud.py:359:8 Incompatible variable type [9]: size is declared to have type `int` but is used as type `None`.",
    "message": " size is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 359,
    "warning_line": "        size: int = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_len": 66,
        "target_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_len": 76,
        "diff_format": "@@ -1,3 +1,3 @@\n import warnings\n-from typing import Union, Iterable, TextIO, Dict\n+from typing import Union, Iterable, TextIO, Dict, Optional\n \n",
        "source_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        lines: Union[Iterable[str], TextIO],\n        field_resolver: Dict[str, str] = None,\n        size: int = None,\n        sampling_rate: float = None,\n        on_done: CallbackFnType = None,\n",
        "source_code_len": 195,
        "target_code": "        lines: Union[Iterable[str], TextIO],\n        field_resolver: Optional[Dict[str, str]] = None,\n        size: Optional[int] = None,\n        sampling_rate: Optional[float] = None,\n        on_done: CallbackFnType = None,\n",
        "target_code_len": 225,
        "diff_format": "@@ -357,5 +357,5 @@\n         lines: Union[Iterable[str], TextIO],\n-        field_resolver: Dict[str, str] = None,\n-        size: int = None,\n-        sampling_rate: float = None,\n+        field_resolver: Optional[Dict[str, str]] = None,\n+        size: Optional[int] = None,\n+        sampling_rate: Optional[float] = None,\n         on_done: CallbackFnType = None,\n",
        "source_code_with_indent": "        lines: Union[Iterable[str], TextIO],\n        field_resolver: Dict[str, str] = None,\n        size: int = None,\n        sampling_rate: float = None,\n        on_done: CallbackFnType = None,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        lines: Union[Iterable[str], TextIO],\n        field_resolver: Optional[Dict[str, str]] = None,\n        size: Optional[int] = None,\n        sampling_rate: Optional[float] = None,\n        on_done: CallbackFnType = None,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "jina/flow/mixin/async_crud.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/flow/mixin/async_crud.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/flow/mixin/async_crud.py:360:8 Incompatible variable type [9]: sampling_rate is declared to have type `float` but is used as type `None`.",
    "message": " sampling_rate is declared to have type `float` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 360,
    "warning_line": "        sampling_rate: float = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_len": 66,
        "target_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_len": 76,
        "diff_format": "@@ -1,3 +1,3 @@\n import warnings\n-from typing import Union, Iterable, TextIO, Dict\n+from typing import Union, Iterable, TextIO, Dict, Optional\n \n",
        "source_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        lines: Union[Iterable[str], TextIO],\n        field_resolver: Dict[str, str] = None,\n        size: int = None,\n        sampling_rate: float = None,\n        on_done: CallbackFnType = None,\n",
        "source_code_len": 195,
        "target_code": "        lines: Union[Iterable[str], TextIO],\n        field_resolver: Optional[Dict[str, str]] = None,\n        size: Optional[int] = None,\n        sampling_rate: Optional[float] = None,\n        on_done: CallbackFnType = None,\n",
        "target_code_len": 225,
        "diff_format": "@@ -357,5 +357,5 @@\n         lines: Union[Iterable[str], TextIO],\n-        field_resolver: Dict[str, str] = None,\n-        size: int = None,\n-        sampling_rate: float = None,\n+        field_resolver: Optional[Dict[str, str]] = None,\n+        size: Optional[int] = None,\n+        sampling_rate: Optional[float] = None,\n         on_done: CallbackFnType = None,\n",
        "source_code_with_indent": "        lines: Union[Iterable[str], TextIO],\n        field_resolver: Dict[str, str] = None,\n        size: int = None,\n        sampling_rate: float = None,\n        on_done: CallbackFnType = None,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        lines: Union[Iterable[str], TextIO],\n        field_resolver: Optional[Dict[str, str]] = None,\n        size: Optional[int] = None,\n        sampling_rate: Optional[float] = None,\n        on_done: CallbackFnType = None,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "jina/flow/mixin/async_crud.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/flow/mixin/async_crud.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/flow/mixin/async_crud.py:399:8 Incompatible variable type [9]: field_resolver is declared to have type `Dict[str, str]` but is used as type `None`.",
    "message": " field_resolver is declared to have type `Dict[str, str]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 399,
    "warning_line": "        field_resolver: Dict[str, str] = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_len": 66,
        "target_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_len": 76,
        "diff_format": "@@ -1,3 +1,3 @@\n import warnings\n-from typing import Union, Iterable, TextIO, Dict\n+from typing import Union, Iterable, TextIO, Dict, Optional\n \n",
        "source_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        lines: Union[Iterable[str], TextIO],\n        field_resolver: Dict[str, str] = None,\n        size: int = None,\n        sampling_rate: float = None,\n        on_done: CallbackFnType = None,\n",
        "source_code_len": 195,
        "target_code": "        lines: Union[Iterable[str], TextIO],\n        field_resolver: Optional[Dict[str, str]] = None,\n        size: Optional[int] = None,\n        sampling_rate: Optional[float] = None,\n        on_done: CallbackFnType = None,\n",
        "target_code_len": 225,
        "diff_format": "@@ -398,5 +398,5 @@\n         lines: Union[Iterable[str], TextIO],\n-        field_resolver: Dict[str, str] = None,\n-        size: int = None,\n-        sampling_rate: float = None,\n+        field_resolver: Optional[Dict[str, str]] = None,\n+        size: Optional[int] = None,\n+        sampling_rate: Optional[float] = None,\n         on_done: CallbackFnType = None,\n",
        "source_code_with_indent": "        lines: Union[Iterable[str], TextIO],\n        field_resolver: Dict[str, str] = None,\n        size: int = None,\n        sampling_rate: float = None,\n        on_done: CallbackFnType = None,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        lines: Union[Iterable[str], TextIO],\n        field_resolver: Optional[Dict[str, str]] = None,\n        size: Optional[int] = None,\n        sampling_rate: Optional[float] = None,\n        on_done: CallbackFnType = None,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "jina/flow/mixin/async_crud.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/flow/mixin/async_crud.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/flow/mixin/async_crud.py:400:8 Incompatible variable type [9]: size is declared to have type `int` but is used as type `None`.",
    "message": " size is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 400,
    "warning_line": "        size: int = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_len": 66,
        "target_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_len": 76,
        "diff_format": "@@ -1,3 +1,3 @@\n import warnings\n-from typing import Union, Iterable, TextIO, Dict\n+from typing import Union, Iterable, TextIO, Dict, Optional\n \n",
        "source_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        lines: Union[Iterable[str], TextIO],\n        field_resolver: Dict[str, str] = None,\n        size: int = None,\n        sampling_rate: float = None,\n        on_done: CallbackFnType = None,\n",
        "source_code_len": 195,
        "target_code": "        lines: Union[Iterable[str], TextIO],\n        field_resolver: Optional[Dict[str, str]] = None,\n        size: Optional[int] = None,\n        sampling_rate: Optional[float] = None,\n        on_done: CallbackFnType = None,\n",
        "target_code_len": 225,
        "diff_format": "@@ -398,5 +398,5 @@\n         lines: Union[Iterable[str], TextIO],\n-        field_resolver: Dict[str, str] = None,\n-        size: int = None,\n-        sampling_rate: float = None,\n+        field_resolver: Optional[Dict[str, str]] = None,\n+        size: Optional[int] = None,\n+        sampling_rate: Optional[float] = None,\n         on_done: CallbackFnType = None,\n",
        "source_code_with_indent": "        lines: Union[Iterable[str], TextIO],\n        field_resolver: Dict[str, str] = None,\n        size: int = None,\n        sampling_rate: float = None,\n        on_done: CallbackFnType = None,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        lines: Union[Iterable[str], TextIO],\n        field_resolver: Optional[Dict[str, str]] = None,\n        size: Optional[int] = None,\n        sampling_rate: Optional[float] = None,\n        on_done: CallbackFnType = None,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "jina/flow/mixin/async_crud.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/flow/mixin/async_crud.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/flow/mixin/async_crud.py:401:8 Incompatible variable type [9]: sampling_rate is declared to have type `float` but is used as type `None`.",
    "message": " sampling_rate is declared to have type `float` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 401,
    "warning_line": "        sampling_rate: float = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_len": 66,
        "target_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_len": 76,
        "diff_format": "@@ -1,3 +1,3 @@\n import warnings\n-from typing import Union, Iterable, TextIO, Dict\n+from typing import Union, Iterable, TextIO, Dict, Optional\n \n",
        "source_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        lines: Union[Iterable[str], TextIO],\n        field_resolver: Dict[str, str] = None,\n        size: int = None,\n        sampling_rate: float = None,\n        on_done: CallbackFnType = None,\n",
        "source_code_len": 195,
        "target_code": "        lines: Union[Iterable[str], TextIO],\n        field_resolver: Optional[Dict[str, str]] = None,\n        size: Optional[int] = None,\n        sampling_rate: Optional[float] = None,\n        on_done: CallbackFnType = None,\n",
        "target_code_len": 225,
        "diff_format": "@@ -398,5 +398,5 @@\n         lines: Union[Iterable[str], TextIO],\n-        field_resolver: Dict[str, str] = None,\n-        size: int = None,\n-        sampling_rate: float = None,\n+        field_resolver: Optional[Dict[str, str]] = None,\n+        size: Optional[int] = None,\n+        sampling_rate: Optional[float] = None,\n         on_done: CallbackFnType = None,\n",
        "source_code_with_indent": "        lines: Union[Iterable[str], TextIO],\n        field_resolver: Dict[str, str] = None,\n        size: int = None,\n        sampling_rate: float = None,\n        on_done: CallbackFnType = None,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        lines: Union[Iterable[str], TextIO],\n        field_resolver: Optional[Dict[str, str]] = None,\n        size: Optional[int] = None,\n        sampling_rate: Optional[float] = None,\n        on_done: CallbackFnType = None,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "jina/flow/mixin/async_crud.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/flow/mixin/async_crud.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/flow/mixin/async_crud.py:445:8 Incompatible variable type [9]: lines is declared to have type `Union[Iterable[str], TextIO]` but is used as type `None`.",
    "message": " lines is declared to have type `Union[Iterable[str], TextIO]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 445,
    "warning_line": "        lines: Union[Iterable[str], TextIO] = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_len": 66,
        "target_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_len": 76,
        "diff_format": "@@ -1,3 +1,3 @@\n import warnings\n-from typing import Union, Iterable, TextIO, Dict\n+from typing import Union, Iterable, TextIO, Dict, Optional\n \n",
        "source_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self,\n        lines: Union[Iterable[str], TextIO] = None,\n        filepath: str = None,\n        size: int = None,\n        sampling_rate: float = None,\n        read_mode: str = 'r',\n        line_format: str = 'json',\n        field_resolver: Dict[str, str] = None,\n        on_done: CallbackFnType = None,\n",
        "source_code_len": 311,
        "target_code": "        self,\n        lines: Optional[Union[Iterable[str], TextIO]] = None,\n        filepath: Optional[str] = None,\n        size: Optional[int] = None,\n        sampling_rate: Optional[float] = None,\n        read_mode: str = 'r',\n        line_format: str = 'json',\n        field_resolver: Optional[Dict[str, str]] = None,\n        on_done: CallbackFnType = None,\n",
        "target_code_len": 361,
        "diff_format": "@@ -444,9 +444,9 @@\n         self,\n-        lines: Union[Iterable[str], TextIO] = None,\n-        filepath: str = None,\n-        size: int = None,\n-        sampling_rate: float = None,\n+        lines: Optional[Union[Iterable[str], TextIO]] = None,\n+        filepath: Optional[str] = None,\n+        size: Optional[int] = None,\n+        sampling_rate: Optional[float] = None,\n         read_mode: str = 'r',\n         line_format: str = 'json',\n-        field_resolver: Dict[str, str] = None,\n+        field_resolver: Optional[Dict[str, str]] = None,\n         on_done: CallbackFnType = None,\n",
        "source_code_with_indent": "        self,\n        lines: Union[Iterable[str], TextIO] = None,\n        filepath: str = None,\n        size: int = None,\n        sampling_rate: float = None,\n        read_mode: str = 'r',\n        line_format: str = 'json',\n        field_resolver: Dict[str, str] = None,\n        on_done: CallbackFnType = None,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self,\n        lines: Optional[Union[Iterable[str], TextIO]] = None,\n        filepath: Optional[str] = None,\n        size: Optional[int] = None,\n        sampling_rate: Optional[float] = None,\n        read_mode: str = 'r',\n        line_format: str = 'json',\n        field_resolver: Optional[Dict[str, str]] = None,\n        on_done: CallbackFnType = None,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "jina/flow/mixin/async_crud.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/flow/mixin/async_crud.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/flow/mixin/async_crud.py:446:8 Incompatible variable type [9]: filepath is declared to have type `str` but is used as type `None`.",
    "message": " filepath is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 446,
    "warning_line": "        filepath: str = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_len": 66,
        "target_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_len": 76,
        "diff_format": "@@ -1,3 +1,3 @@\n import warnings\n-from typing import Union, Iterable, TextIO, Dict\n+from typing import Union, Iterable, TextIO, Dict, Optional\n \n",
        "source_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self,\n        lines: Union[Iterable[str], TextIO] = None,\n        filepath: str = None,\n        size: int = None,\n        sampling_rate: float = None,\n        read_mode: str = 'r',\n        line_format: str = 'json',\n        field_resolver: Dict[str, str] = None,\n        on_done: CallbackFnType = None,\n",
        "source_code_len": 311,
        "target_code": "        self,\n        lines: Optional[Union[Iterable[str], TextIO]] = None,\n        filepath: Optional[str] = None,\n        size: Optional[int] = None,\n        sampling_rate: Optional[float] = None,\n        read_mode: str = 'r',\n        line_format: str = 'json',\n        field_resolver: Optional[Dict[str, str]] = None,\n        on_done: CallbackFnType = None,\n",
        "target_code_len": 361,
        "diff_format": "@@ -444,9 +444,9 @@\n         self,\n-        lines: Union[Iterable[str], TextIO] = None,\n-        filepath: str = None,\n-        size: int = None,\n-        sampling_rate: float = None,\n+        lines: Optional[Union[Iterable[str], TextIO]] = None,\n+        filepath: Optional[str] = None,\n+        size: Optional[int] = None,\n+        sampling_rate: Optional[float] = None,\n         read_mode: str = 'r',\n         line_format: str = 'json',\n-        field_resolver: Dict[str, str] = None,\n+        field_resolver: Optional[Dict[str, str]] = None,\n         on_done: CallbackFnType = None,\n",
        "source_code_with_indent": "        self,\n        lines: Union[Iterable[str], TextIO] = None,\n        filepath: str = None,\n        size: int = None,\n        sampling_rate: float = None,\n        read_mode: str = 'r',\n        line_format: str = 'json',\n        field_resolver: Dict[str, str] = None,\n        on_done: CallbackFnType = None,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self,\n        lines: Optional[Union[Iterable[str], TextIO]] = None,\n        filepath: Optional[str] = None,\n        size: Optional[int] = None,\n        sampling_rate: Optional[float] = None,\n        read_mode: str = 'r',\n        line_format: str = 'json',\n        field_resolver: Optional[Dict[str, str]] = None,\n        on_done: CallbackFnType = None,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "jina/flow/mixin/async_crud.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/flow/mixin/async_crud.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/flow/mixin/async_crud.py:447:8 Incompatible variable type [9]: size is declared to have type `int` but is used as type `None`.",
    "message": " size is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 447,
    "warning_line": "        size: int = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_len": 66,
        "target_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_len": 76,
        "diff_format": "@@ -1,3 +1,3 @@\n import warnings\n-from typing import Union, Iterable, TextIO, Dict\n+from typing import Union, Iterable, TextIO, Dict, Optional\n \n",
        "source_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self,\n        lines: Union[Iterable[str], TextIO] = None,\n        filepath: str = None,\n        size: int = None,\n        sampling_rate: float = None,\n        read_mode: str = 'r',\n        line_format: str = 'json',\n        field_resolver: Dict[str, str] = None,\n        on_done: CallbackFnType = None,\n",
        "source_code_len": 311,
        "target_code": "        self,\n        lines: Optional[Union[Iterable[str], TextIO]] = None,\n        filepath: Optional[str] = None,\n        size: Optional[int] = None,\n        sampling_rate: Optional[float] = None,\n        read_mode: str = 'r',\n        line_format: str = 'json',\n        field_resolver: Optional[Dict[str, str]] = None,\n        on_done: CallbackFnType = None,\n",
        "target_code_len": 361,
        "diff_format": "@@ -444,9 +444,9 @@\n         self,\n-        lines: Union[Iterable[str], TextIO] = None,\n-        filepath: str = None,\n-        size: int = None,\n-        sampling_rate: float = None,\n+        lines: Optional[Union[Iterable[str], TextIO]] = None,\n+        filepath: Optional[str] = None,\n+        size: Optional[int] = None,\n+        sampling_rate: Optional[float] = None,\n         read_mode: str = 'r',\n         line_format: str = 'json',\n-        field_resolver: Dict[str, str] = None,\n+        field_resolver: Optional[Dict[str, str]] = None,\n         on_done: CallbackFnType = None,\n",
        "source_code_with_indent": "        self,\n        lines: Union[Iterable[str], TextIO] = None,\n        filepath: str = None,\n        size: int = None,\n        sampling_rate: float = None,\n        read_mode: str = 'r',\n        line_format: str = 'json',\n        field_resolver: Dict[str, str] = None,\n        on_done: CallbackFnType = None,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self,\n        lines: Optional[Union[Iterable[str], TextIO]] = None,\n        filepath: Optional[str] = None,\n        size: Optional[int] = None,\n        sampling_rate: Optional[float] = None,\n        read_mode: str = 'r',\n        line_format: str = 'json',\n        field_resolver: Optional[Dict[str, str]] = None,\n        on_done: CallbackFnType = None,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "jina/flow/mixin/async_crud.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/flow/mixin/async_crud.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/flow/mixin/async_crud.py:448:8 Incompatible variable type [9]: sampling_rate is declared to have type `float` but is used as type `None`.",
    "message": " sampling_rate is declared to have type `float` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 448,
    "warning_line": "        sampling_rate: float = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_len": 66,
        "target_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_len": 76,
        "diff_format": "@@ -1,3 +1,3 @@\n import warnings\n-from typing import Union, Iterable, TextIO, Dict\n+from typing import Union, Iterable, TextIO, Dict, Optional\n \n",
        "source_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self,\n        lines: Union[Iterable[str], TextIO] = None,\n        filepath: str = None,\n        size: int = None,\n        sampling_rate: float = None,\n        read_mode: str = 'r',\n        line_format: str = 'json',\n        field_resolver: Dict[str, str] = None,\n        on_done: CallbackFnType = None,\n",
        "source_code_len": 311,
        "target_code": "        self,\n        lines: Optional[Union[Iterable[str], TextIO]] = None,\n        filepath: Optional[str] = None,\n        size: Optional[int] = None,\n        sampling_rate: Optional[float] = None,\n        read_mode: str = 'r',\n        line_format: str = 'json',\n        field_resolver: Optional[Dict[str, str]] = None,\n        on_done: CallbackFnType = None,\n",
        "target_code_len": 361,
        "diff_format": "@@ -444,9 +444,9 @@\n         self,\n-        lines: Union[Iterable[str], TextIO] = None,\n-        filepath: str = None,\n-        size: int = None,\n-        sampling_rate: float = None,\n+        lines: Optional[Union[Iterable[str], TextIO]] = None,\n+        filepath: Optional[str] = None,\n+        size: Optional[int] = None,\n+        sampling_rate: Optional[float] = None,\n         read_mode: str = 'r',\n         line_format: str = 'json',\n-        field_resolver: Dict[str, str] = None,\n+        field_resolver: Optional[Dict[str, str]] = None,\n         on_done: CallbackFnType = None,\n",
        "source_code_with_indent": "        self,\n        lines: Union[Iterable[str], TextIO] = None,\n        filepath: str = None,\n        size: int = None,\n        sampling_rate: float = None,\n        read_mode: str = 'r',\n        line_format: str = 'json',\n        field_resolver: Dict[str, str] = None,\n        on_done: CallbackFnType = None,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self,\n        lines: Optional[Union[Iterable[str], TextIO]] = None,\n        filepath: Optional[str] = None,\n        size: Optional[int] = None,\n        sampling_rate: Optional[float] = None,\n        read_mode: str = 'r',\n        line_format: str = 'json',\n        field_resolver: Optional[Dict[str, str]] = None,\n        on_done: CallbackFnType = None,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "jina/flow/mixin/async_crud.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/flow/mixin/async_crud.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/flow/mixin/async_crud.py:451:8 Incompatible variable type [9]: field_resolver is declared to have type `Dict[str, str]` but is used as type `None`.",
    "message": " field_resolver is declared to have type `Dict[str, str]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 451,
    "warning_line": "        field_resolver: Dict[str, str] = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_len": 66,
        "target_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_len": 76,
        "diff_format": "@@ -1,3 +1,3 @@\n import warnings\n-from typing import Union, Iterable, TextIO, Dict\n+from typing import Union, Iterable, TextIO, Dict, Optional\n \n",
        "source_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self,\n        lines: Union[Iterable[str], TextIO] = None,\n        filepath: str = None,\n        size: int = None,\n        sampling_rate: float = None,\n        read_mode: str = 'r',\n        line_format: str = 'json',\n        field_resolver: Dict[str, str] = None,\n        on_done: CallbackFnType = None,\n",
        "source_code_len": 311,
        "target_code": "        self,\n        lines: Optional[Union[Iterable[str], TextIO]] = None,\n        filepath: Optional[str] = None,\n        size: Optional[int] = None,\n        sampling_rate: Optional[float] = None,\n        read_mode: str = 'r',\n        line_format: str = 'json',\n        field_resolver: Optional[Dict[str, str]] = None,\n        on_done: CallbackFnType = None,\n",
        "target_code_len": 361,
        "diff_format": "@@ -444,9 +444,9 @@\n         self,\n-        lines: Union[Iterable[str], TextIO] = None,\n-        filepath: str = None,\n-        size: int = None,\n-        sampling_rate: float = None,\n+        lines: Optional[Union[Iterable[str], TextIO]] = None,\n+        filepath: Optional[str] = None,\n+        size: Optional[int] = None,\n+        sampling_rate: Optional[float] = None,\n         read_mode: str = 'r',\n         line_format: str = 'json',\n-        field_resolver: Dict[str, str] = None,\n+        field_resolver: Optional[Dict[str, str]] = None,\n         on_done: CallbackFnType = None,\n",
        "source_code_with_indent": "        self,\n        lines: Union[Iterable[str], TextIO] = None,\n        filepath: str = None,\n        size: int = None,\n        sampling_rate: float = None,\n        read_mode: str = 'r',\n        line_format: str = 'json',\n        field_resolver: Dict[str, str] = None,\n        on_done: CallbackFnType = None,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self,\n        lines: Optional[Union[Iterable[str], TextIO]] = None,\n        filepath: Optional[str] = None,\n        size: Optional[int] = None,\n        sampling_rate: Optional[float] = None,\n        read_mode: str = 'r',\n        line_format: str = 'json',\n        field_resolver: Optional[Dict[str, str]] = None,\n        on_done: CallbackFnType = None,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "jina/flow/mixin/crud.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/flow/mixin/crud.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/flow/mixin/crud.py:47:8 Incompatible variable type [9]: size is declared to have type `int` but is used as type `None`.",
    "message": " size is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 47,
    "warning_line": "        size: int = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_len": 66,
        "target_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_len": 76,
        "diff_format": "@@ -1,3 +1,3 @@\n import warnings\n-from typing import Union, Iterable, TextIO, Dict\n+from typing import Union, Iterable, TextIO, Dict, Optional\n \n",
        "source_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        axis: int = 0,\n        size: int = None,\n        shuffle: bool = False,\n",
        "source_code_len": 80,
        "target_code": "        axis: int = 0,\n        size: Optional[int] = None,\n        shuffle: bool = False,\n",
        "target_code_len": 90,
        "diff_format": "@@ -46,3 +46,3 @@\n         axis: int = 0,\n-        size: int = None,\n+        size: Optional[int] = None,\n         shuffle: bool = False,\n",
        "source_code_with_indent": "        axis: int = 0,\n        size: int = None,\n        shuffle: bool = False,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        axis: int = 0,\n        size: Optional[int] = None,\n        shuffle: bool = False,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "jina/flow/mixin/crud.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/flow/mixin/crud.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/flow/mixin/crud.py:87:8 Incompatible variable type [9]: size is declared to have type `int` but is used as type `None`.",
    "message": " size is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 87,
    "warning_line": "        size: int = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_len": 66,
        "target_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_len": 76,
        "diff_format": "@@ -1,3 +1,3 @@\n import warnings\n-from typing import Union, Iterable, TextIO, Dict\n+from typing import Union, Iterable, TextIO, Dict, Optional\n \n",
        "source_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        axis: int = 0,\n        size: int = None,\n        shuffle: bool = False,\n",
        "source_code_len": 80,
        "target_code": "        axis: int = 0,\n        size: Optional[int] = None,\n        shuffle: bool = False,\n",
        "target_code_len": 90,
        "diff_format": "@@ -86,3 +86,3 @@\n         axis: int = 0,\n-        size: int = None,\n+        size: Optional[int] = None,\n         shuffle: bool = False,\n",
        "source_code_with_indent": "        axis: int = 0,\n        size: int = None,\n        shuffle: bool = False,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        axis: int = 0,\n        size: Optional[int] = None,\n        shuffle: bool = False,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "jina/flow/mixin/crud.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/flow/mixin/crud.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/flow/mixin/crud.py:124:8 Incompatible variable type [9]: lines is declared to have type `Union[Iterable[str], TextIO]` but is used as type `None`.",
    "message": " lines is declared to have type `Union[Iterable[str], TextIO]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 124,
    "warning_line": "        lines: Union[Iterable[str], TextIO] = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_len": 66,
        "target_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_len": 76,
        "diff_format": "@@ -1,3 +1,3 @@\n import warnings\n-from typing import Union, Iterable, TextIO, Dict\n+from typing import Union, Iterable, TextIO, Dict, Optional\n \n",
        "source_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self,\n        lines: Union[Iterable[str], TextIO] = None,\n        filepath: str = None,\n        size: int = None,\n        sampling_rate: float = None,\n        read_mode: str = 'r',\n        line_format: str = 'json',\n        field_resolver: Dict[str, str] = None,\n        on_done: CallbackFnType = None,\n",
        "source_code_len": 311,
        "target_code": "        self,\n        lines: Optional[Union[Iterable[str], TextIO]] = None,\n        filepath: Optional[str] = None,\n        size: Optional[int] = None,\n        sampling_rate: Optional[float] = None,\n        read_mode: str = 'r',\n        line_format: str = 'json',\n        field_resolver: Optional[Dict[str, str]] = None,\n        on_done: CallbackFnType = None,\n",
        "target_code_len": 361,
        "diff_format": "@@ -123,9 +123,9 @@\n         self,\n-        lines: Union[Iterable[str], TextIO] = None,\n-        filepath: str = None,\n-        size: int = None,\n-        sampling_rate: float = None,\n+        lines: Optional[Union[Iterable[str], TextIO]] = None,\n+        filepath: Optional[str] = None,\n+        size: Optional[int] = None,\n+        sampling_rate: Optional[float] = None,\n         read_mode: str = 'r',\n         line_format: str = 'json',\n-        field_resolver: Dict[str, str] = None,\n+        field_resolver: Optional[Dict[str, str]] = None,\n         on_done: CallbackFnType = None,\n",
        "source_code_with_indent": "        self,\n        lines: Union[Iterable[str], TextIO] = None,\n        filepath: str = None,\n        size: int = None,\n        sampling_rate: float = None,\n        read_mode: str = 'r',\n        line_format: str = 'json',\n        field_resolver: Dict[str, str] = None,\n        on_done: CallbackFnType = None,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self,\n        lines: Optional[Union[Iterable[str], TextIO]] = None,\n        filepath: Optional[str] = None,\n        size: Optional[int] = None,\n        sampling_rate: Optional[float] = None,\n        read_mode: str = 'r',\n        line_format: str = 'json',\n        field_resolver: Optional[Dict[str, str]] = None,\n        on_done: CallbackFnType = None,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "jina/flow/mixin/crud.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/flow/mixin/crud.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/flow/mixin/crud.py:125:8 Incompatible variable type [9]: filepath is declared to have type `str` but is used as type `None`.",
    "message": " filepath is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 125,
    "warning_line": "        filepath: str = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_len": 66,
        "target_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_len": 76,
        "diff_format": "@@ -1,3 +1,3 @@\n import warnings\n-from typing import Union, Iterable, TextIO, Dict\n+from typing import Union, Iterable, TextIO, Dict, Optional\n \n",
        "source_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self,\n        lines: Union[Iterable[str], TextIO] = None,\n        filepath: str = None,\n        size: int = None,\n        sampling_rate: float = None,\n        read_mode: str = 'r',\n        line_format: str = 'json',\n        field_resolver: Dict[str, str] = None,\n        on_done: CallbackFnType = None,\n",
        "source_code_len": 311,
        "target_code": "        self,\n        lines: Optional[Union[Iterable[str], TextIO]] = None,\n        filepath: Optional[str] = None,\n        size: Optional[int] = None,\n        sampling_rate: Optional[float] = None,\n        read_mode: str = 'r',\n        line_format: str = 'json',\n        field_resolver: Optional[Dict[str, str]] = None,\n        on_done: CallbackFnType = None,\n",
        "target_code_len": 361,
        "diff_format": "@@ -123,9 +123,9 @@\n         self,\n-        lines: Union[Iterable[str], TextIO] = None,\n-        filepath: str = None,\n-        size: int = None,\n-        sampling_rate: float = None,\n+        lines: Optional[Union[Iterable[str], TextIO]] = None,\n+        filepath: Optional[str] = None,\n+        size: Optional[int] = None,\n+        sampling_rate: Optional[float] = None,\n         read_mode: str = 'r',\n         line_format: str = 'json',\n-        field_resolver: Dict[str, str] = None,\n+        field_resolver: Optional[Dict[str, str]] = None,\n         on_done: CallbackFnType = None,\n",
        "source_code_with_indent": "        self,\n        lines: Union[Iterable[str], TextIO] = None,\n        filepath: str = None,\n        size: int = None,\n        sampling_rate: float = None,\n        read_mode: str = 'r',\n        line_format: str = 'json',\n        field_resolver: Dict[str, str] = None,\n        on_done: CallbackFnType = None,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self,\n        lines: Optional[Union[Iterable[str], TextIO]] = None,\n        filepath: Optional[str] = None,\n        size: Optional[int] = None,\n        sampling_rate: Optional[float] = None,\n        read_mode: str = 'r',\n        line_format: str = 'json',\n        field_resolver: Optional[Dict[str, str]] = None,\n        on_done: CallbackFnType = None,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "jina/flow/mixin/crud.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/flow/mixin/crud.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/flow/mixin/crud.py:126:8 Incompatible variable type [9]: size is declared to have type `int` but is used as type `None`.",
    "message": " size is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 126,
    "warning_line": "        size: int = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_len": 66,
        "target_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_len": 76,
        "diff_format": "@@ -1,3 +1,3 @@\n import warnings\n-from typing import Union, Iterable, TextIO, Dict\n+from typing import Union, Iterable, TextIO, Dict, Optional\n \n",
        "source_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self,\n        lines: Union[Iterable[str], TextIO] = None,\n        filepath: str = None,\n        size: int = None,\n        sampling_rate: float = None,\n        read_mode: str = 'r',\n        line_format: str = 'json',\n        field_resolver: Dict[str, str] = None,\n        on_done: CallbackFnType = None,\n",
        "source_code_len": 311,
        "target_code": "        self,\n        lines: Optional[Union[Iterable[str], TextIO]] = None,\n        filepath: Optional[str] = None,\n        size: Optional[int] = None,\n        sampling_rate: Optional[float] = None,\n        read_mode: str = 'r',\n        line_format: str = 'json',\n        field_resolver: Optional[Dict[str, str]] = None,\n        on_done: CallbackFnType = None,\n",
        "target_code_len": 361,
        "diff_format": "@@ -123,9 +123,9 @@\n         self,\n-        lines: Union[Iterable[str], TextIO] = None,\n-        filepath: str = None,\n-        size: int = None,\n-        sampling_rate: float = None,\n+        lines: Optional[Union[Iterable[str], TextIO]] = None,\n+        filepath: Optional[str] = None,\n+        size: Optional[int] = None,\n+        sampling_rate: Optional[float] = None,\n         read_mode: str = 'r',\n         line_format: str = 'json',\n-        field_resolver: Dict[str, str] = None,\n+        field_resolver: Optional[Dict[str, str]] = None,\n         on_done: CallbackFnType = None,\n",
        "source_code_with_indent": "        self,\n        lines: Union[Iterable[str], TextIO] = None,\n        filepath: str = None,\n        size: int = None,\n        sampling_rate: float = None,\n        read_mode: str = 'r',\n        line_format: str = 'json',\n        field_resolver: Dict[str, str] = None,\n        on_done: CallbackFnType = None,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self,\n        lines: Optional[Union[Iterable[str], TextIO]] = None,\n        filepath: Optional[str] = None,\n        size: Optional[int] = None,\n        sampling_rate: Optional[float] = None,\n        read_mode: str = 'r',\n        line_format: str = 'json',\n        field_resolver: Optional[Dict[str, str]] = None,\n        on_done: CallbackFnType = None,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "jina/flow/mixin/crud.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/flow/mixin/crud.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/flow/mixin/crud.py:127:8 Incompatible variable type [9]: sampling_rate is declared to have type `float` but is used as type `None`.",
    "message": " sampling_rate is declared to have type `float` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 127,
    "warning_line": "        sampling_rate: float = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_len": 66,
        "target_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_len": 76,
        "diff_format": "@@ -1,3 +1,3 @@\n import warnings\n-from typing import Union, Iterable, TextIO, Dict\n+from typing import Union, Iterable, TextIO, Dict, Optional\n \n",
        "source_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self,\n        lines: Union[Iterable[str], TextIO] = None,\n        filepath: str = None,\n        size: int = None,\n        sampling_rate: float = None,\n        read_mode: str = 'r',\n        line_format: str = 'json',\n        field_resolver: Dict[str, str] = None,\n        on_done: CallbackFnType = None,\n",
        "source_code_len": 311,
        "target_code": "        self,\n        lines: Optional[Union[Iterable[str], TextIO]] = None,\n        filepath: Optional[str] = None,\n        size: Optional[int] = None,\n        sampling_rate: Optional[float] = None,\n        read_mode: str = 'r',\n        line_format: str = 'json',\n        field_resolver: Optional[Dict[str, str]] = None,\n        on_done: CallbackFnType = None,\n",
        "target_code_len": 361,
        "diff_format": "@@ -123,9 +123,9 @@\n         self,\n-        lines: Union[Iterable[str], TextIO] = None,\n-        filepath: str = None,\n-        size: int = None,\n-        sampling_rate: float = None,\n+        lines: Optional[Union[Iterable[str], TextIO]] = None,\n+        filepath: Optional[str] = None,\n+        size: Optional[int] = None,\n+        sampling_rate: Optional[float] = None,\n         read_mode: str = 'r',\n         line_format: str = 'json',\n-        field_resolver: Dict[str, str] = None,\n+        field_resolver: Optional[Dict[str, str]] = None,\n         on_done: CallbackFnType = None,\n",
        "source_code_with_indent": "        self,\n        lines: Union[Iterable[str], TextIO] = None,\n        filepath: str = None,\n        size: int = None,\n        sampling_rate: float = None,\n        read_mode: str = 'r',\n        line_format: str = 'json',\n        field_resolver: Dict[str, str] = None,\n        on_done: CallbackFnType = None,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self,\n        lines: Optional[Union[Iterable[str], TextIO]] = None,\n        filepath: Optional[str] = None,\n        size: Optional[int] = None,\n        sampling_rate: Optional[float] = None,\n        read_mode: str = 'r',\n        line_format: str = 'json',\n        field_resolver: Optional[Dict[str, str]] = None,\n        on_done: CallbackFnType = None,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "jina/flow/mixin/crud.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/flow/mixin/crud.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/flow/mixin/crud.py:130:8 Incompatible variable type [9]: field_resolver is declared to have type `Dict[str, str]` but is used as type `None`.",
    "message": " field_resolver is declared to have type `Dict[str, str]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 130,
    "warning_line": "        field_resolver: Dict[str, str] = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_len": 66,
        "target_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_len": 76,
        "diff_format": "@@ -1,3 +1,3 @@\n import warnings\n-from typing import Union, Iterable, TextIO, Dict\n+from typing import Union, Iterable, TextIO, Dict, Optional\n \n",
        "source_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self,\n        lines: Union[Iterable[str], TextIO] = None,\n        filepath: str = None,\n        size: int = None,\n        sampling_rate: float = None,\n        read_mode: str = 'r',\n        line_format: str = 'json',\n        field_resolver: Dict[str, str] = None,\n        on_done: CallbackFnType = None,\n",
        "source_code_len": 311,
        "target_code": "        self,\n        lines: Optional[Union[Iterable[str], TextIO]] = None,\n        filepath: Optional[str] = None,\n        size: Optional[int] = None,\n        sampling_rate: Optional[float] = None,\n        read_mode: str = 'r',\n        line_format: str = 'json',\n        field_resolver: Optional[Dict[str, str]] = None,\n        on_done: CallbackFnType = None,\n",
        "target_code_len": 361,
        "diff_format": "@@ -123,9 +123,9 @@\n         self,\n-        lines: Union[Iterable[str], TextIO] = None,\n-        filepath: str = None,\n-        size: int = None,\n-        sampling_rate: float = None,\n+        lines: Optional[Union[Iterable[str], TextIO]] = None,\n+        filepath: Optional[str] = None,\n+        size: Optional[int] = None,\n+        sampling_rate: Optional[float] = None,\n         read_mode: str = 'r',\n         line_format: str = 'json',\n-        field_resolver: Dict[str, str] = None,\n+        field_resolver: Optional[Dict[str, str]] = None,\n         on_done: CallbackFnType = None,\n",
        "source_code_with_indent": "        self,\n        lines: Union[Iterable[str], TextIO] = None,\n        filepath: str = None,\n        size: int = None,\n        sampling_rate: float = None,\n        read_mode: str = 'r',\n        line_format: str = 'json',\n        field_resolver: Dict[str, str] = None,\n        on_done: CallbackFnType = None,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self,\n        lines: Optional[Union[Iterable[str], TextIO]] = None,\n        filepath: Optional[str] = None,\n        size: Optional[int] = None,\n        sampling_rate: Optional[float] = None,\n        read_mode: str = 'r',\n        line_format: str = 'json',\n        field_resolver: Optional[Dict[str, str]] = None,\n        on_done: CallbackFnType = None,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "jina/flow/mixin/crud.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/flow/mixin/crud.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/flow/mixin/crud.py:175:8 Incompatible variable type [9]: field_resolver is declared to have type `Dict[str, str]` but is used as type `None`.",
    "message": " field_resolver is declared to have type `Dict[str, str]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 175,
    "warning_line": "        field_resolver: Dict[str, str] = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_len": 66,
        "target_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_len": 76,
        "diff_format": "@@ -1,3 +1,3 @@\n import warnings\n-from typing import Union, Iterable, TextIO, Dict\n+from typing import Union, Iterable, TextIO, Dict, Optional\n \n",
        "source_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        lines: Union[Iterable[str], TextIO],\n        field_resolver: Dict[str, str] = None,\n        size: int = None,\n        sampling_rate: float = None,\n        on_done: CallbackFnType = None,\n",
        "source_code_len": 195,
        "target_code": "        lines: Union[Iterable[str], TextIO],\n        field_resolver: Optional[Dict[str, str]] = None,\n        size: Optional[int] = None,\n        sampling_rate: Optional[float] = None,\n        on_done: CallbackFnType = None,\n",
        "target_code_len": 225,
        "diff_format": "@@ -174,5 +174,5 @@\n         lines: Union[Iterable[str], TextIO],\n-        field_resolver: Dict[str, str] = None,\n-        size: int = None,\n-        sampling_rate: float = None,\n+        field_resolver: Optional[Dict[str, str]] = None,\n+        size: Optional[int] = None,\n+        sampling_rate: Optional[float] = None,\n         on_done: CallbackFnType = None,\n",
        "source_code_with_indent": "        lines: Union[Iterable[str], TextIO],\n        field_resolver: Dict[str, str] = None,\n        size: int = None,\n        sampling_rate: float = None,\n        on_done: CallbackFnType = None,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        lines: Union[Iterable[str], TextIO],\n        field_resolver: Optional[Dict[str, str]] = None,\n        size: Optional[int] = None,\n        sampling_rate: Optional[float] = None,\n        on_done: CallbackFnType = None,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "jina/flow/mixin/crud.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/flow/mixin/crud.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/flow/mixin/crud.py:176:8 Incompatible variable type [9]: size is declared to have type `int` but is used as type `None`.",
    "message": " size is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 176,
    "warning_line": "        size: int = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_len": 66,
        "target_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_len": 76,
        "diff_format": "@@ -1,3 +1,3 @@\n import warnings\n-from typing import Union, Iterable, TextIO, Dict\n+from typing import Union, Iterable, TextIO, Dict, Optional\n \n",
        "source_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        lines: Union[Iterable[str], TextIO],\n        field_resolver: Dict[str, str] = None,\n        size: int = None,\n        sampling_rate: float = None,\n        on_done: CallbackFnType = None,\n",
        "source_code_len": 195,
        "target_code": "        lines: Union[Iterable[str], TextIO],\n        field_resolver: Optional[Dict[str, str]] = None,\n        size: Optional[int] = None,\n        sampling_rate: Optional[float] = None,\n        on_done: CallbackFnType = None,\n",
        "target_code_len": 225,
        "diff_format": "@@ -174,5 +174,5 @@\n         lines: Union[Iterable[str], TextIO],\n-        field_resolver: Dict[str, str] = None,\n-        size: int = None,\n-        sampling_rate: float = None,\n+        field_resolver: Optional[Dict[str, str]] = None,\n+        size: Optional[int] = None,\n+        sampling_rate: Optional[float] = None,\n         on_done: CallbackFnType = None,\n",
        "source_code_with_indent": "        lines: Union[Iterable[str], TextIO],\n        field_resolver: Dict[str, str] = None,\n        size: int = None,\n        sampling_rate: float = None,\n        on_done: CallbackFnType = None,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        lines: Union[Iterable[str], TextIO],\n        field_resolver: Optional[Dict[str, str]] = None,\n        size: Optional[int] = None,\n        sampling_rate: Optional[float] = None,\n        on_done: CallbackFnType = None,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "jina/flow/mixin/crud.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/flow/mixin/crud.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/flow/mixin/crud.py:177:8 Incompatible variable type [9]: sampling_rate is declared to have type `float` but is used as type `None`.",
    "message": " sampling_rate is declared to have type `float` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 177,
    "warning_line": "        sampling_rate: float = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_len": 66,
        "target_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_len": 76,
        "diff_format": "@@ -1,3 +1,3 @@\n import warnings\n-from typing import Union, Iterable, TextIO, Dict\n+from typing import Union, Iterable, TextIO, Dict, Optional\n \n",
        "source_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        lines: Union[Iterable[str], TextIO],\n        field_resolver: Dict[str, str] = None,\n        size: int = None,\n        sampling_rate: float = None,\n        on_done: CallbackFnType = None,\n",
        "source_code_len": 195,
        "target_code": "        lines: Union[Iterable[str], TextIO],\n        field_resolver: Optional[Dict[str, str]] = None,\n        size: Optional[int] = None,\n        sampling_rate: Optional[float] = None,\n        on_done: CallbackFnType = None,\n",
        "target_code_len": 225,
        "diff_format": "@@ -174,5 +174,5 @@\n         lines: Union[Iterable[str], TextIO],\n-        field_resolver: Dict[str, str] = None,\n-        size: int = None,\n-        sampling_rate: float = None,\n+        field_resolver: Optional[Dict[str, str]] = None,\n+        size: Optional[int] = None,\n+        sampling_rate: Optional[float] = None,\n         on_done: CallbackFnType = None,\n",
        "source_code_with_indent": "        lines: Union[Iterable[str], TextIO],\n        field_resolver: Dict[str, str] = None,\n        size: int = None,\n        sampling_rate: float = None,\n        on_done: CallbackFnType = None,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        lines: Union[Iterable[str], TextIO],\n        field_resolver: Optional[Dict[str, str]] = None,\n        size: Optional[int] = None,\n        sampling_rate: Optional[float] = None,\n        on_done: CallbackFnType = None,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "jina/flow/mixin/crud.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/flow/mixin/crud.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/flow/mixin/crud.py:215:8 Incompatible variable type [9]: field_resolver is declared to have type `Dict[str, str]` but is used as type `None`.",
    "message": " field_resolver is declared to have type `Dict[str, str]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 215,
    "warning_line": "        field_resolver: Dict[str, str] = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_len": 66,
        "target_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_len": 76,
        "diff_format": "@@ -1,3 +1,3 @@\n import warnings\n-from typing import Union, Iterable, TextIO, Dict\n+from typing import Union, Iterable, TextIO, Dict, Optional\n \n",
        "source_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        lines: Union[Iterable[str], TextIO],\n        field_resolver: Dict[str, str] = None,\n        size: int = None,\n        sampling_rate: float = None,\n        on_done: CallbackFnType = None,\n",
        "source_code_len": 195,
        "target_code": "        lines: Union[Iterable[str], TextIO],\n        field_resolver: Optional[Dict[str, str]] = None,\n        size: Optional[int] = None,\n        sampling_rate: Optional[float] = None,\n        on_done: CallbackFnType = None,\n",
        "target_code_len": 225,
        "diff_format": "@@ -214,5 +214,5 @@\n         lines: Union[Iterable[str], TextIO],\n-        field_resolver: Dict[str, str] = None,\n-        size: int = None,\n-        sampling_rate: float = None,\n+        field_resolver: Optional[Dict[str, str]] = None,\n+        size: Optional[int] = None,\n+        sampling_rate: Optional[float] = None,\n         on_done: CallbackFnType = None,\n",
        "source_code_with_indent": "        lines: Union[Iterable[str], TextIO],\n        field_resolver: Dict[str, str] = None,\n        size: int = None,\n        sampling_rate: float = None,\n        on_done: CallbackFnType = None,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        lines: Union[Iterable[str], TextIO],\n        field_resolver: Optional[Dict[str, str]] = None,\n        size: Optional[int] = None,\n        sampling_rate: Optional[float] = None,\n        on_done: CallbackFnType = None,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "jina/flow/mixin/crud.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/flow/mixin/crud.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/flow/mixin/crud.py:216:8 Incompatible variable type [9]: size is declared to have type `int` but is used as type `None`.",
    "message": " size is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 216,
    "warning_line": "        size: int = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_len": 66,
        "target_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_len": 76,
        "diff_format": "@@ -1,3 +1,3 @@\n import warnings\n-from typing import Union, Iterable, TextIO, Dict\n+from typing import Union, Iterable, TextIO, Dict, Optional\n \n",
        "source_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        lines: Union[Iterable[str], TextIO],\n        field_resolver: Dict[str, str] = None,\n        size: int = None,\n        sampling_rate: float = None,\n        on_done: CallbackFnType = None,\n",
        "source_code_len": 195,
        "target_code": "        lines: Union[Iterable[str], TextIO],\n        field_resolver: Optional[Dict[str, str]] = None,\n        size: Optional[int] = None,\n        sampling_rate: Optional[float] = None,\n        on_done: CallbackFnType = None,\n",
        "target_code_len": 225,
        "diff_format": "@@ -214,5 +214,5 @@\n         lines: Union[Iterable[str], TextIO],\n-        field_resolver: Dict[str, str] = None,\n-        size: int = None,\n-        sampling_rate: float = None,\n+        field_resolver: Optional[Dict[str, str]] = None,\n+        size: Optional[int] = None,\n+        sampling_rate: Optional[float] = None,\n         on_done: CallbackFnType = None,\n",
        "source_code_with_indent": "        lines: Union[Iterable[str], TextIO],\n        field_resolver: Dict[str, str] = None,\n        size: int = None,\n        sampling_rate: float = None,\n        on_done: CallbackFnType = None,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        lines: Union[Iterable[str], TextIO],\n        field_resolver: Optional[Dict[str, str]] = None,\n        size: Optional[int] = None,\n        sampling_rate: Optional[float] = None,\n        on_done: CallbackFnType = None,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "jina/flow/mixin/crud.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/flow/mixin/crud.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/flow/mixin/crud.py:217:8 Incompatible variable type [9]: sampling_rate is declared to have type `float` but is used as type `None`.",
    "message": " sampling_rate is declared to have type `float` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 217,
    "warning_line": "        sampling_rate: float = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_len": 66,
        "target_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_len": 76,
        "diff_format": "@@ -1,3 +1,3 @@\n import warnings\n-from typing import Union, Iterable, TextIO, Dict\n+from typing import Union, Iterable, TextIO, Dict, Optional\n \n",
        "source_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        lines: Union[Iterable[str], TextIO],\n        field_resolver: Dict[str, str] = None,\n        size: int = None,\n        sampling_rate: float = None,\n        on_done: CallbackFnType = None,\n",
        "source_code_len": 195,
        "target_code": "        lines: Union[Iterable[str], TextIO],\n        field_resolver: Optional[Dict[str, str]] = None,\n        size: Optional[int] = None,\n        sampling_rate: Optional[float] = None,\n        on_done: CallbackFnType = None,\n",
        "target_code_len": 225,
        "diff_format": "@@ -214,5 +214,5 @@\n         lines: Union[Iterable[str], TextIO],\n-        field_resolver: Dict[str, str] = None,\n-        size: int = None,\n-        sampling_rate: float = None,\n+        field_resolver: Optional[Dict[str, str]] = None,\n+        size: Optional[int] = None,\n+        sampling_rate: Optional[float] = None,\n         on_done: CallbackFnType = None,\n",
        "source_code_with_indent": "        lines: Union[Iterable[str], TextIO],\n        field_resolver: Dict[str, str] = None,\n        size: int = None,\n        sampling_rate: float = None,\n        on_done: CallbackFnType = None,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        lines: Union[Iterable[str], TextIO],\n        field_resolver: Optional[Dict[str, str]] = None,\n        size: Optional[int] = None,\n        sampling_rate: Optional[float] = None,\n        on_done: CallbackFnType = None,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "jina/flow/mixin/crud.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/flow/mixin/crud.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/flow/mixin/crud.py:255:8 Incompatible variable type [9]: field_resolver is declared to have type `Dict[str, str]` but is used as type `None`.",
    "message": " field_resolver is declared to have type `Dict[str, str]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 255,
    "warning_line": "        field_resolver: Dict[str, str] = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_len": 66,
        "target_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_len": 76,
        "diff_format": "@@ -1,3 +1,3 @@\n import warnings\n-from typing import Union, Iterable, TextIO, Dict\n+from typing import Union, Iterable, TextIO, Dict, Optional\n \n",
        "source_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        lines: Union[Iterable[str], TextIO],\n        field_resolver: Dict[str, str] = None,\n        size: int = None,\n        sampling_rate: float = None,\n        on_done: CallbackFnType = None,\n",
        "source_code_len": 195,
        "target_code": "        lines: Union[Iterable[str], TextIO],\n        field_resolver: Optional[Dict[str, str]] = None,\n        size: Optional[int] = None,\n        sampling_rate: Optional[float] = None,\n        on_done: CallbackFnType = None,\n",
        "target_code_len": 225,
        "diff_format": "@@ -254,5 +254,5 @@\n         lines: Union[Iterable[str], TextIO],\n-        field_resolver: Dict[str, str] = None,\n-        size: int = None,\n-        sampling_rate: float = None,\n+        field_resolver: Optional[Dict[str, str]] = None,\n+        size: Optional[int] = None,\n+        sampling_rate: Optional[float] = None,\n         on_done: CallbackFnType = None,\n",
        "source_code_with_indent": "        lines: Union[Iterable[str], TextIO],\n        field_resolver: Dict[str, str] = None,\n        size: int = None,\n        sampling_rate: float = None,\n        on_done: CallbackFnType = None,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        lines: Union[Iterable[str], TextIO],\n        field_resolver: Optional[Dict[str, str]] = None,\n        size: Optional[int] = None,\n        sampling_rate: Optional[float] = None,\n        on_done: CallbackFnType = None,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "jina/flow/mixin/crud.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/flow/mixin/crud.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/flow/mixin/crud.py:256:8 Incompatible variable type [9]: size is declared to have type `int` but is used as type `None`.",
    "message": " size is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 256,
    "warning_line": "        size: int = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_len": 66,
        "target_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_len": 76,
        "diff_format": "@@ -1,3 +1,3 @@\n import warnings\n-from typing import Union, Iterable, TextIO, Dict\n+from typing import Union, Iterable, TextIO, Dict, Optional\n \n",
        "source_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        lines: Union[Iterable[str], TextIO],\n        field_resolver: Dict[str, str] = None,\n        size: int = None,\n        sampling_rate: float = None,\n        on_done: CallbackFnType = None,\n",
        "source_code_len": 195,
        "target_code": "        lines: Union[Iterable[str], TextIO],\n        field_resolver: Optional[Dict[str, str]] = None,\n        size: Optional[int] = None,\n        sampling_rate: Optional[float] = None,\n        on_done: CallbackFnType = None,\n",
        "target_code_len": 225,
        "diff_format": "@@ -254,5 +254,5 @@\n         lines: Union[Iterable[str], TextIO],\n-        field_resolver: Dict[str, str] = None,\n-        size: int = None,\n-        sampling_rate: float = None,\n+        field_resolver: Optional[Dict[str, str]] = None,\n+        size: Optional[int] = None,\n+        sampling_rate: Optional[float] = None,\n         on_done: CallbackFnType = None,\n",
        "source_code_with_indent": "        lines: Union[Iterable[str], TextIO],\n        field_resolver: Dict[str, str] = None,\n        size: int = None,\n        sampling_rate: float = None,\n        on_done: CallbackFnType = None,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        lines: Union[Iterable[str], TextIO],\n        field_resolver: Optional[Dict[str, str]] = None,\n        size: Optional[int] = None,\n        sampling_rate: Optional[float] = None,\n        on_done: CallbackFnType = None,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "jina/flow/mixin/crud.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/flow/mixin/crud.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/flow/mixin/crud.py:257:8 Incompatible variable type [9]: sampling_rate is declared to have type `float` but is used as type `None`.",
    "message": " sampling_rate is declared to have type `float` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 257,
    "warning_line": "        sampling_rate: float = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_len": 66,
        "target_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_len": 76,
        "diff_format": "@@ -1,3 +1,3 @@\n import warnings\n-from typing import Union, Iterable, TextIO, Dict\n+from typing import Union, Iterable, TextIO, Dict, Optional\n \n",
        "source_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        lines: Union[Iterable[str], TextIO],\n        field_resolver: Dict[str, str] = None,\n        size: int = None,\n        sampling_rate: float = None,\n        on_done: CallbackFnType = None,\n",
        "source_code_len": 195,
        "target_code": "        lines: Union[Iterable[str], TextIO],\n        field_resolver: Optional[Dict[str, str]] = None,\n        size: Optional[int] = None,\n        sampling_rate: Optional[float] = None,\n        on_done: CallbackFnType = None,\n",
        "target_code_len": 225,
        "diff_format": "@@ -254,5 +254,5 @@\n         lines: Union[Iterable[str], TextIO],\n-        field_resolver: Dict[str, str] = None,\n-        size: int = None,\n-        sampling_rate: float = None,\n+        field_resolver: Optional[Dict[str, str]] = None,\n+        size: Optional[int] = None,\n+        sampling_rate: Optional[float] = None,\n         on_done: CallbackFnType = None,\n",
        "source_code_with_indent": "        lines: Union[Iterable[str], TextIO],\n        field_resolver: Dict[str, str] = None,\n        size: int = None,\n        sampling_rate: float = None,\n        on_done: CallbackFnType = None,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        lines: Union[Iterable[str], TextIO],\n        field_resolver: Optional[Dict[str, str]] = None,\n        size: Optional[int] = None,\n        sampling_rate: Optional[float] = None,\n        on_done: CallbackFnType = None,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "jina/flow/mixin/crud.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/flow/mixin/crud.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/flow/mixin/crud.py:302:8 Incompatible variable type [9]: size is declared to have type `int` but is used as type `None`.",
    "message": " size is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 302,
    "warning_line": "        size: int = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_len": 66,
        "target_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_len": 76,
        "diff_format": "@@ -1,3 +1,3 @@\n import warnings\n-from typing import Union, Iterable, TextIO, Dict\n+from typing import Union, Iterable, TextIO, Dict, Optional\n \n",
        "source_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        recursive: bool = True,\n        size: int = None,\n        sampling_rate: float = None,\n        read_mode: str = None,\n        on_done: CallbackFnType = None,\n",
        "source_code_len": 166,
        "target_code": "        recursive: bool = True,\n        size: Optional[int] = None,\n        sampling_rate: Optional[float] = None,\n        read_mode: Optional[str] = None,\n        on_done: CallbackFnType = None,\n",
        "target_code_len": 196,
        "diff_format": "@@ -301,5 +301,5 @@\n         recursive: bool = True,\n-        size: int = None,\n-        sampling_rate: float = None,\n-        read_mode: str = None,\n+        size: Optional[int] = None,\n+        sampling_rate: Optional[float] = None,\n+        read_mode: Optional[str] = None,\n         on_done: CallbackFnType = None,\n",
        "source_code_with_indent": "        recursive: bool = True,\n        size: int = None,\n        sampling_rate: float = None,\n        read_mode: str = None,\n        on_done: CallbackFnType = None,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        recursive: bool = True,\n        size: Optional[int] = None,\n        sampling_rate: Optional[float] = None,\n        read_mode: Optional[str] = None,\n        on_done: CallbackFnType = None,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "jina/flow/mixin/crud.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/flow/mixin/crud.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/flow/mixin/crud.py:303:8 Incompatible variable type [9]: sampling_rate is declared to have type `float` but is used as type `None`.",
    "message": " sampling_rate is declared to have type `float` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 303,
    "warning_line": "        sampling_rate: float = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_len": 66,
        "target_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_len": 76,
        "diff_format": "@@ -1,3 +1,3 @@\n import warnings\n-from typing import Union, Iterable, TextIO, Dict\n+from typing import Union, Iterable, TextIO, Dict, Optional\n \n",
        "source_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        recursive: bool = True,\n        size: int = None,\n        sampling_rate: float = None,\n        read_mode: str = None,\n        on_done: CallbackFnType = None,\n",
        "source_code_len": 166,
        "target_code": "        recursive: bool = True,\n        size: Optional[int] = None,\n        sampling_rate: Optional[float] = None,\n        read_mode: Optional[str] = None,\n        on_done: CallbackFnType = None,\n",
        "target_code_len": 196,
        "diff_format": "@@ -301,5 +301,5 @@\n         recursive: bool = True,\n-        size: int = None,\n-        sampling_rate: float = None,\n-        read_mode: str = None,\n+        size: Optional[int] = None,\n+        sampling_rate: Optional[float] = None,\n+        read_mode: Optional[str] = None,\n         on_done: CallbackFnType = None,\n",
        "source_code_with_indent": "        recursive: bool = True,\n        size: int = None,\n        sampling_rate: float = None,\n        read_mode: str = None,\n        on_done: CallbackFnType = None,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        recursive: bool = True,\n        size: Optional[int] = None,\n        sampling_rate: Optional[float] = None,\n        read_mode: Optional[str] = None,\n        on_done: CallbackFnType = None,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "jina/flow/mixin/crud.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/flow/mixin/crud.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/flow/mixin/crud.py:304:8 Incompatible variable type [9]: read_mode is declared to have type `str` but is used as type `None`.",
    "message": " read_mode is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 304,
    "warning_line": "        read_mode: str = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_len": 66,
        "target_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_len": 76,
        "diff_format": "@@ -1,3 +1,3 @@\n import warnings\n-from typing import Union, Iterable, TextIO, Dict\n+from typing import Union, Iterable, TextIO, Dict, Optional\n \n",
        "source_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        recursive: bool = True,\n        size: int = None,\n        sampling_rate: float = None,\n        read_mode: str = None,\n        on_done: CallbackFnType = None,\n",
        "source_code_len": 166,
        "target_code": "        recursive: bool = True,\n        size: Optional[int] = None,\n        sampling_rate: Optional[float] = None,\n        read_mode: Optional[str] = None,\n        on_done: CallbackFnType = None,\n",
        "target_code_len": 196,
        "diff_format": "@@ -301,5 +301,5 @@\n         recursive: bool = True,\n-        size: int = None,\n-        sampling_rate: float = None,\n-        read_mode: str = None,\n+        size: Optional[int] = None,\n+        sampling_rate: Optional[float] = None,\n+        read_mode: Optional[str] = None,\n         on_done: CallbackFnType = None,\n",
        "source_code_with_indent": "        recursive: bool = True,\n        size: int = None,\n        sampling_rate: float = None,\n        read_mode: str = None,\n        on_done: CallbackFnType = None,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        recursive: bool = True,\n        size: Optional[int] = None,\n        sampling_rate: Optional[float] = None,\n        read_mode: Optional[str] = None,\n        on_done: CallbackFnType = None,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "jina/flow/mixin/crud.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/flow/mixin/crud.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/flow/mixin/crud.py:345:8 Incompatible variable type [9]: size is declared to have type `int` but is used as type `None`.",
    "message": " size is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 345,
    "warning_line": "        size: int = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_len": 66,
        "target_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_len": 76,
        "diff_format": "@@ -1,3 +1,3 @@\n import warnings\n-from typing import Union, Iterable, TextIO, Dict\n+from typing import Union, Iterable, TextIO, Dict, Optional\n \n",
        "source_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        recursive: bool = True,\n        size: int = None,\n        sampling_rate: float = None,\n        read_mode: str = None,\n        on_done: CallbackFnType = None,\n",
        "source_code_len": 166,
        "target_code": "        recursive: bool = True,\n        size: Optional[int] = None,\n        sampling_rate: Optional[float] = None,\n        read_mode: Optional[str] = None,\n        on_done: CallbackFnType = None,\n",
        "target_code_len": 196,
        "diff_format": "@@ -344,5 +344,5 @@\n         recursive: bool = True,\n-        size: int = None,\n-        sampling_rate: float = None,\n-        read_mode: str = None,\n+        size: Optional[int] = None,\n+        sampling_rate: Optional[float] = None,\n+        read_mode: Optional[str] = None,\n         on_done: CallbackFnType = None,\n",
        "source_code_with_indent": "        recursive: bool = True,\n        size: int = None,\n        sampling_rate: float = None,\n        read_mode: str = None,\n        on_done: CallbackFnType = None,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        recursive: bool = True,\n        size: Optional[int] = None,\n        sampling_rate: Optional[float] = None,\n        read_mode: Optional[str] = None,\n        on_done: CallbackFnType = None,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "jina/flow/mixin/crud.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/flow/mixin/crud.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/flow/mixin/crud.py:346:8 Incompatible variable type [9]: sampling_rate is declared to have type `float` but is used as type `None`.",
    "message": " sampling_rate is declared to have type `float` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 346,
    "warning_line": "        sampling_rate: float = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_len": 66,
        "target_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_len": 76,
        "diff_format": "@@ -1,3 +1,3 @@\n import warnings\n-from typing import Union, Iterable, TextIO, Dict\n+from typing import Union, Iterable, TextIO, Dict, Optional\n \n",
        "source_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        recursive: bool = True,\n        size: int = None,\n        sampling_rate: float = None,\n        read_mode: str = None,\n        on_done: CallbackFnType = None,\n",
        "source_code_len": 166,
        "target_code": "        recursive: bool = True,\n        size: Optional[int] = None,\n        sampling_rate: Optional[float] = None,\n        read_mode: Optional[str] = None,\n        on_done: CallbackFnType = None,\n",
        "target_code_len": 196,
        "diff_format": "@@ -344,5 +344,5 @@\n         recursive: bool = True,\n-        size: int = None,\n-        sampling_rate: float = None,\n-        read_mode: str = None,\n+        size: Optional[int] = None,\n+        sampling_rate: Optional[float] = None,\n+        read_mode: Optional[str] = None,\n         on_done: CallbackFnType = None,\n",
        "source_code_with_indent": "        recursive: bool = True,\n        size: int = None,\n        sampling_rate: float = None,\n        read_mode: str = None,\n        on_done: CallbackFnType = None,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        recursive: bool = True,\n        size: Optional[int] = None,\n        sampling_rate: Optional[float] = None,\n        read_mode: Optional[str] = None,\n        on_done: CallbackFnType = None,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "jina/flow/mixin/crud.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/flow/mixin/crud.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/flow/mixin/crud.py:347:8 Incompatible variable type [9]: read_mode is declared to have type `str` but is used as type `None`.",
    "message": " read_mode is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 347,
    "warning_line": "        read_mode: str = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_len": 66,
        "target_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_len": 76,
        "diff_format": "@@ -1,3 +1,3 @@\n import warnings\n-from typing import Union, Iterable, TextIO, Dict\n+from typing import Union, Iterable, TextIO, Dict, Optional\n \n",
        "source_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        recursive: bool = True,\n        size: int = None,\n        sampling_rate: float = None,\n        read_mode: str = None,\n        on_done: CallbackFnType = None,\n",
        "source_code_len": 166,
        "target_code": "        recursive: bool = True,\n        size: Optional[int] = None,\n        sampling_rate: Optional[float] = None,\n        read_mode: Optional[str] = None,\n        on_done: CallbackFnType = None,\n",
        "target_code_len": 196,
        "diff_format": "@@ -344,5 +344,5 @@\n         recursive: bool = True,\n-        size: int = None,\n-        sampling_rate: float = None,\n-        read_mode: str = None,\n+        size: Optional[int] = None,\n+        sampling_rate: Optional[float] = None,\n+        read_mode: Optional[str] = None,\n         on_done: CallbackFnType = None,\n",
        "source_code_with_indent": "        recursive: bool = True,\n        size: int = None,\n        sampling_rate: float = None,\n        read_mode: str = None,\n        on_done: CallbackFnType = None,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        recursive: bool = True,\n        size: Optional[int] = None,\n        sampling_rate: Optional[float] = None,\n        read_mode: Optional[str] = None,\n        on_done: CallbackFnType = None,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "jina/flow/mixin/crud.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/flow/mixin/crud.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/flow/mixin/crud.py:386:8 Incompatible variable type [9]: lines is declared to have type `Union[Iterable[str], TextIO]` but is used as type `None`.",
    "message": " lines is declared to have type `Union[Iterable[str], TextIO]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 386,
    "warning_line": "        lines: Union[Iterable[str], TextIO] = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_len": 66,
        "target_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_len": 76,
        "diff_format": "@@ -1,3 +1,3 @@\n import warnings\n-from typing import Union, Iterable, TextIO, Dict\n+from typing import Union, Iterable, TextIO, Dict, Optional\n \n",
        "source_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self,\n        lines: Union[Iterable[str], TextIO] = None,\n        filepath: str = None,\n        field_resolver: Dict[str, str] = None,\n        size: int = None,\n        sampling_rate: float = None,\n        read_mode: str = 'r',\n",
        "source_code_len": 236,
        "target_code": "        self,\n        lines: Optional[Union[Iterable[str], TextIO]] = None,\n        filepath: Optional[str] = None,\n        field_resolver: Optional[Dict[str, str]] = None,\n        size: Optional[int] = None,\n        sampling_rate: Optional[float] = None,\n        read_mode: str = 'r',\n",
        "target_code_len": 286,
        "diff_format": "@@ -385,7 +385,7 @@\n         self,\n-        lines: Union[Iterable[str], TextIO] = None,\n-        filepath: str = None,\n-        field_resolver: Dict[str, str] = None,\n-        size: int = None,\n-        sampling_rate: float = None,\n+        lines: Optional[Union[Iterable[str], TextIO]] = None,\n+        filepath: Optional[str] = None,\n+        field_resolver: Optional[Dict[str, str]] = None,\n+        size: Optional[int] = None,\n+        sampling_rate: Optional[float] = None,\n         read_mode: str = 'r',\n",
        "source_code_with_indent": "        self,\n        lines: Union[Iterable[str], TextIO] = None,\n        filepath: str = None,\n        field_resolver: Dict[str, str] = None,\n        size: int = None,\n        sampling_rate: float = None,\n        read_mode: str = 'r',\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self,\n        lines: Optional[Union[Iterable[str], TextIO]] = None,\n        filepath: Optional[str] = None,\n        field_resolver: Optional[Dict[str, str]] = None,\n        size: Optional[int] = None,\n        sampling_rate: Optional[float] = None,\n        read_mode: str = 'r',\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "jina/flow/mixin/crud.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/flow/mixin/crud.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/flow/mixin/crud.py:387:8 Incompatible variable type [9]: filepath is declared to have type `str` but is used as type `None`.",
    "message": " filepath is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 387,
    "warning_line": "        filepath: str = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_len": 66,
        "target_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_len": 76,
        "diff_format": "@@ -1,3 +1,3 @@\n import warnings\n-from typing import Union, Iterable, TextIO, Dict\n+from typing import Union, Iterable, TextIO, Dict, Optional\n \n",
        "source_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self,\n        lines: Union[Iterable[str], TextIO] = None,\n        filepath: str = None,\n        field_resolver: Dict[str, str] = None,\n        size: int = None,\n        sampling_rate: float = None,\n        read_mode: str = 'r',\n",
        "source_code_len": 236,
        "target_code": "        self,\n        lines: Optional[Union[Iterable[str], TextIO]] = None,\n        filepath: Optional[str] = None,\n        field_resolver: Optional[Dict[str, str]] = None,\n        size: Optional[int] = None,\n        sampling_rate: Optional[float] = None,\n        read_mode: str = 'r',\n",
        "target_code_len": 286,
        "diff_format": "@@ -385,7 +385,7 @@\n         self,\n-        lines: Union[Iterable[str], TextIO] = None,\n-        filepath: str = None,\n-        field_resolver: Dict[str, str] = None,\n-        size: int = None,\n-        sampling_rate: float = None,\n+        lines: Optional[Union[Iterable[str], TextIO]] = None,\n+        filepath: Optional[str] = None,\n+        field_resolver: Optional[Dict[str, str]] = None,\n+        size: Optional[int] = None,\n+        sampling_rate: Optional[float] = None,\n         read_mode: str = 'r',\n",
        "source_code_with_indent": "        self,\n        lines: Union[Iterable[str], TextIO] = None,\n        filepath: str = None,\n        field_resolver: Dict[str, str] = None,\n        size: int = None,\n        sampling_rate: float = None,\n        read_mode: str = 'r',\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self,\n        lines: Optional[Union[Iterable[str], TextIO]] = None,\n        filepath: Optional[str] = None,\n        field_resolver: Optional[Dict[str, str]] = None,\n        size: Optional[int] = None,\n        sampling_rate: Optional[float] = None,\n        read_mode: str = 'r',\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "jina/flow/mixin/crud.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/flow/mixin/crud.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/flow/mixin/crud.py:388:8 Incompatible variable type [9]: field_resolver is declared to have type `Dict[str, str]` but is used as type `None`.",
    "message": " field_resolver is declared to have type `Dict[str, str]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 388,
    "warning_line": "        field_resolver: Dict[str, str] = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_len": 66,
        "target_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_len": 76,
        "diff_format": "@@ -1,3 +1,3 @@\n import warnings\n-from typing import Union, Iterable, TextIO, Dict\n+from typing import Union, Iterable, TextIO, Dict, Optional\n \n",
        "source_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self,\n        lines: Union[Iterable[str], TextIO] = None,\n        filepath: str = None,\n        field_resolver: Dict[str, str] = None,\n        size: int = None,\n        sampling_rate: float = None,\n        read_mode: str = 'r',\n",
        "source_code_len": 236,
        "target_code": "        self,\n        lines: Optional[Union[Iterable[str], TextIO]] = None,\n        filepath: Optional[str] = None,\n        field_resolver: Optional[Dict[str, str]] = None,\n        size: Optional[int] = None,\n        sampling_rate: Optional[float] = None,\n        read_mode: str = 'r',\n",
        "target_code_len": 286,
        "diff_format": "@@ -385,7 +385,7 @@\n         self,\n-        lines: Union[Iterable[str], TextIO] = None,\n-        filepath: str = None,\n-        field_resolver: Dict[str, str] = None,\n-        size: int = None,\n-        sampling_rate: float = None,\n+        lines: Optional[Union[Iterable[str], TextIO]] = None,\n+        filepath: Optional[str] = None,\n+        field_resolver: Optional[Dict[str, str]] = None,\n+        size: Optional[int] = None,\n+        sampling_rate: Optional[float] = None,\n         read_mode: str = 'r',\n",
        "source_code_with_indent": "        self,\n        lines: Union[Iterable[str], TextIO] = None,\n        filepath: str = None,\n        field_resolver: Dict[str, str] = None,\n        size: int = None,\n        sampling_rate: float = None,\n        read_mode: str = 'r',\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self,\n        lines: Optional[Union[Iterable[str], TextIO]] = None,\n        filepath: Optional[str] = None,\n        field_resolver: Optional[Dict[str, str]] = None,\n        size: Optional[int] = None,\n        sampling_rate: Optional[float] = None,\n        read_mode: str = 'r',\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "jina/flow/mixin/crud.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/flow/mixin/crud.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/flow/mixin/crud.py:389:8 Incompatible variable type [9]: size is declared to have type `int` but is used as type `None`.",
    "message": " size is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 389,
    "warning_line": "        size: int = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_len": 66,
        "target_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_len": 76,
        "diff_format": "@@ -1,3 +1,3 @@\n import warnings\n-from typing import Union, Iterable, TextIO, Dict\n+from typing import Union, Iterable, TextIO, Dict, Optional\n \n",
        "source_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self,\n        lines: Union[Iterable[str], TextIO] = None,\n        filepath: str = None,\n        field_resolver: Dict[str, str] = None,\n        size: int = None,\n        sampling_rate: float = None,\n        read_mode: str = 'r',\n",
        "source_code_len": 236,
        "target_code": "        self,\n        lines: Optional[Union[Iterable[str], TextIO]] = None,\n        filepath: Optional[str] = None,\n        field_resolver: Optional[Dict[str, str]] = None,\n        size: Optional[int] = None,\n        sampling_rate: Optional[float] = None,\n        read_mode: str = 'r',\n",
        "target_code_len": 286,
        "diff_format": "@@ -385,7 +385,7 @@\n         self,\n-        lines: Union[Iterable[str], TextIO] = None,\n-        filepath: str = None,\n-        field_resolver: Dict[str, str] = None,\n-        size: int = None,\n-        sampling_rate: float = None,\n+        lines: Optional[Union[Iterable[str], TextIO]] = None,\n+        filepath: Optional[str] = None,\n+        field_resolver: Optional[Dict[str, str]] = None,\n+        size: Optional[int] = None,\n+        sampling_rate: Optional[float] = None,\n         read_mode: str = 'r',\n",
        "source_code_with_indent": "        self,\n        lines: Union[Iterable[str], TextIO] = None,\n        filepath: str = None,\n        field_resolver: Dict[str, str] = None,\n        size: int = None,\n        sampling_rate: float = None,\n        read_mode: str = 'r',\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self,\n        lines: Optional[Union[Iterable[str], TextIO]] = None,\n        filepath: Optional[str] = None,\n        field_resolver: Optional[Dict[str, str]] = None,\n        size: Optional[int] = None,\n        sampling_rate: Optional[float] = None,\n        read_mode: str = 'r',\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "jina/flow/mixin/crud.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/flow/mixin/crud.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/flow/mixin/crud.py:390:8 Incompatible variable type [9]: sampling_rate is declared to have type `float` but is used as type `None`.",
    "message": " sampling_rate is declared to have type `float` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 390,
    "warning_line": "        sampling_rate: float = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_len": 66,
        "target_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_len": 76,
        "diff_format": "@@ -1,3 +1,3 @@\n import warnings\n-from typing import Union, Iterable, TextIO, Dict\n+from typing import Union, Iterable, TextIO, Dict, Optional\n \n",
        "source_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self,\n        lines: Union[Iterable[str], TextIO] = None,\n        filepath: str = None,\n        field_resolver: Dict[str, str] = None,\n        size: int = None,\n        sampling_rate: float = None,\n        read_mode: str = 'r',\n",
        "source_code_len": 236,
        "target_code": "        self,\n        lines: Optional[Union[Iterable[str], TextIO]] = None,\n        filepath: Optional[str] = None,\n        field_resolver: Optional[Dict[str, str]] = None,\n        size: Optional[int] = None,\n        sampling_rate: Optional[float] = None,\n        read_mode: str = 'r',\n",
        "target_code_len": 286,
        "diff_format": "@@ -385,7 +385,7 @@\n         self,\n-        lines: Union[Iterable[str], TextIO] = None,\n-        filepath: str = None,\n-        field_resolver: Dict[str, str] = None,\n-        size: int = None,\n-        sampling_rate: float = None,\n+        lines: Optional[Union[Iterable[str], TextIO]] = None,\n+        filepath: Optional[str] = None,\n+        field_resolver: Optional[Dict[str, str]] = None,\n+        size: Optional[int] = None,\n+        sampling_rate: Optional[float] = None,\n         read_mode: str = 'r',\n",
        "source_code_with_indent": "        self,\n        lines: Union[Iterable[str], TextIO] = None,\n        filepath: str = None,\n        field_resolver: Dict[str, str] = None,\n        size: int = None,\n        sampling_rate: float = None,\n        read_mode: str = 'r',\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self,\n        lines: Optional[Union[Iterable[str], TextIO]] = None,\n        filepath: Optional[str] = None,\n        field_resolver: Optional[Dict[str, str]] = None,\n        size: Optional[int] = None,\n        sampling_rate: Optional[float] = None,\n        read_mode: str = 'r',\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "jina/flow/mixin/crud.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/flow/mixin/crud.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/flow/mixin/crud.py:437:8 Incompatible variable type [9]: field_resolver is declared to have type `Dict[str, str]` but is used as type `None`.",
    "message": " field_resolver is declared to have type `Dict[str, str]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 437,
    "warning_line": "        field_resolver: Dict[str, str] = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_len": 66,
        "target_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_len": 76,
        "diff_format": "@@ -1,3 +1,3 @@\n import warnings\n-from typing import Union, Iterable, TextIO, Dict\n+from typing import Union, Iterable, TextIO, Dict, Optional\n \n",
        "source_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        lines: Union[Iterable[str], TextIO],\n        field_resolver: Dict[str, str] = None,\n        size: int = None,\n        sampling_rate: float = None,\n        on_done: CallbackFnType = None,\n",
        "source_code_len": 195,
        "target_code": "        lines: Union[Iterable[str], TextIO],\n        field_resolver: Optional[Dict[str, str]] = None,\n        size: Optional[int] = None,\n        sampling_rate: Optional[float] = None,\n        on_done: CallbackFnType = None,\n",
        "target_code_len": 225,
        "diff_format": "@@ -436,5 +436,5 @@\n         lines: Union[Iterable[str], TextIO],\n-        field_resolver: Dict[str, str] = None,\n-        size: int = None,\n-        sampling_rate: float = None,\n+        field_resolver: Optional[Dict[str, str]] = None,\n+        size: Optional[int] = None,\n+        sampling_rate: Optional[float] = None,\n         on_done: CallbackFnType = None,\n",
        "source_code_with_indent": "        lines: Union[Iterable[str], TextIO],\n        field_resolver: Dict[str, str] = None,\n        size: int = None,\n        sampling_rate: float = None,\n        on_done: CallbackFnType = None,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        lines: Union[Iterable[str], TextIO],\n        field_resolver: Optional[Dict[str, str]] = None,\n        size: Optional[int] = None,\n        sampling_rate: Optional[float] = None,\n        on_done: CallbackFnType = None,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "jina/flow/mixin/crud.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/flow/mixin/crud.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/flow/mixin/crud.py:438:8 Incompatible variable type [9]: size is declared to have type `int` but is used as type `None`.",
    "message": " size is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 438,
    "warning_line": "        size: int = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_len": 66,
        "target_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_len": 76,
        "diff_format": "@@ -1,3 +1,3 @@\n import warnings\n-from typing import Union, Iterable, TextIO, Dict\n+from typing import Union, Iterable, TextIO, Dict, Optional\n \n",
        "source_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        lines: Union[Iterable[str], TextIO],\n        field_resolver: Dict[str, str] = None,\n        size: int = None,\n        sampling_rate: float = None,\n        on_done: CallbackFnType = None,\n",
        "source_code_len": 195,
        "target_code": "        lines: Union[Iterable[str], TextIO],\n        field_resolver: Optional[Dict[str, str]] = None,\n        size: Optional[int] = None,\n        sampling_rate: Optional[float] = None,\n        on_done: CallbackFnType = None,\n",
        "target_code_len": 225,
        "diff_format": "@@ -436,5 +436,5 @@\n         lines: Union[Iterable[str], TextIO],\n-        field_resolver: Dict[str, str] = None,\n-        size: int = None,\n-        sampling_rate: float = None,\n+        field_resolver: Optional[Dict[str, str]] = None,\n+        size: Optional[int] = None,\n+        sampling_rate: Optional[float] = None,\n         on_done: CallbackFnType = None,\n",
        "source_code_with_indent": "        lines: Union[Iterable[str], TextIO],\n        field_resolver: Dict[str, str] = None,\n        size: int = None,\n        sampling_rate: float = None,\n        on_done: CallbackFnType = None,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        lines: Union[Iterable[str], TextIO],\n        field_resolver: Optional[Dict[str, str]] = None,\n        size: Optional[int] = None,\n        sampling_rate: Optional[float] = None,\n        on_done: CallbackFnType = None,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "jina/flow/mixin/crud.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/flow/mixin/crud.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/flow/mixin/crud.py:439:8 Incompatible variable type [9]: sampling_rate is declared to have type `float` but is used as type `None`.",
    "message": " sampling_rate is declared to have type `float` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 439,
    "warning_line": "        sampling_rate: float = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_len": 66,
        "target_code": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_len": 76,
        "diff_format": "@@ -1,3 +1,3 @@\n import warnings\n-from typing import Union, Iterable, TextIO, Dict\n+from typing import Union, Iterable, TextIO, Dict, Optional\n \n",
        "source_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import warnings\nfrom typing import Union, Iterable, TextIO, Dict, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        lines: Union[Iterable[str], TextIO],\n        field_resolver: Dict[str, str] = None,\n        size: int = None,\n        sampling_rate: float = None,\n        on_done: CallbackFnType = None,\n",
        "source_code_len": 195,
        "target_code": "        lines: Union[Iterable[str], TextIO],\n        field_resolver: Optional[Dict[str, str]] = None,\n        size: Optional[int] = None,\n        sampling_rate: Optional[float] = None,\n        on_done: CallbackFnType = None,\n",
        "target_code_len": 225,
        "diff_format": "@@ -436,5 +436,5 @@\n         lines: Union[Iterable[str], TextIO],\n-        field_resolver: Dict[str, str] = None,\n-        size: int = None,\n-        sampling_rate: float = None,\n+        field_resolver: Optional[Dict[str, str]] = None,\n+        size: Optional[int] = None,\n+        sampling_rate: Optional[float] = None,\n         on_done: CallbackFnType = None,\n",
        "source_code_with_indent": "        lines: Union[Iterable[str], TextIO],\n        field_resolver: Dict[str, str] = None,\n        size: int = None,\n        sampling_rate: float = None,\n        on_done: CallbackFnType = None,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        lines: Union[Iterable[str], TextIO],\n        field_resolver: Optional[Dict[str, str]] = None,\n        size: Optional[int] = None,\n        sampling_rate: Optional[float] = None,\n        on_done: CallbackFnType = None,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "jina/helper.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/helper.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/helper.py:793:49 Incompatible variable type [9]: taboo is declared to have type `Set[Optional[str]]` but is used as type `None`.",
    "message": " taboo is declared to have type `Set[Optional[str]]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 793,
    "warning_line": "        args: Namespace, parser: ArgumentParser, taboo: Set[Optional[str]] = None",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def get_non_defaults_args(\n        args: Namespace, parser: ArgumentParser, taboo: Set[Optional[str]] = None\n    ) -> Dict:\n",
        "source_code_len": 128,
        "target_code": "    def get_non_defaults_args(\n        args: Namespace, parser: ArgumentParser, taboo: Optional[Set[str]] = None\n    ) -> Dict:\n",
        "target_code_len": 128,
        "diff_format": "@@ -792,3 +792,3 @@\n     def get_non_defaults_args(\n-        args: Namespace, parser: ArgumentParser, taboo: Set[Optional[str]] = None\n+        args: Namespace, parser: ArgumentParser, taboo: Optional[Set[str]] = None\n     ) -> Dict:\n",
        "source_code_with_indent": "    def get_non_defaults_args(\n        args: Namespace, parser: ArgumentParser, taboo: Set[Optional[str]] = None\n    ) -> Dict:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def get_non_defaults_args(\n        args: Namespace, parser: ArgumentParser, taboo: Optional[Set[str]] = None\n    ) -> Dict:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "jina/importer.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/importer.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/importer.py:88:8 Incompatible variable type [9]: help_text is declared to have type `str` but is used as type `None`.",
    "message": " help_text is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 88,
    "warning_line": "        help_text: str = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        logger=None,\n        help_text: str = None,\n        pkg_name: str = None,\n        verbose: bool = True,\n",
        "source_code_len": 112,
        "target_code": "        logger=None,\n        help_text: Optional[str] = None,\n        pkg_name: Optional[str] = None,\n        verbose: bool = True,\n",
        "target_code_len": 132,
        "diff_format": "@@ -87,4 +87,4 @@\n         logger=None,\n-        help_text: str = None,\n-        pkg_name: str = None,\n+        help_text: Optional[str] = None,\n+        pkg_name: Optional[str] = None,\n         verbose: bool = True,\n",
        "source_code_with_indent": "        logger=None,\n        help_text: str = None,\n        pkg_name: str = None,\n        verbose: bool = True,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        logger=None,\n        help_text: Optional[str] = None,\n        pkg_name: Optional[str] = None,\n        verbose: bool = True,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "jina/importer.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/importer.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/importer.py:89:8 Incompatible variable type [9]: pkg_name is declared to have type `str` but is used as type `None`.",
    "message": " pkg_name is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 89,
    "warning_line": "        pkg_name: str = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        logger=None,\n        help_text: str = None,\n        pkg_name: str = None,\n        verbose: bool = True,\n",
        "source_code_len": 112,
        "target_code": "        logger=None,\n        help_text: Optional[str] = None,\n        pkg_name: Optional[str] = None,\n        verbose: bool = True,\n",
        "target_code_len": 132,
        "diff_format": "@@ -87,4 +87,4 @@\n         logger=None,\n-        help_text: str = None,\n-        pkg_name: str = None,\n+        help_text: Optional[str] = None,\n+        pkg_name: Optional[str] = None,\n         verbose: bool = True,\n",
        "source_code_with_indent": "        logger=None,\n        help_text: str = None,\n        pkg_name: str = None,\n        verbose: bool = True,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        logger=None,\n        help_text: Optional[str] = None,\n        pkg_name: Optional[str] = None,\n        verbose: bool = True,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "jina/logging/profile.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/logging/profile.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/logging/profile.py:243:21 Incompatible variable type [9]: progress is declared to have type `int` but is used as type `None`.",
    "message": " progress is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 243,
    "warning_line": "    def update(self, progress: int = None, *args, **kwargs) -> None:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from functools import wraps\n\n",
        "source_code_len": 29,
        "target_code": "from functools import wraps\nfrom typing import Optional\n\n",
        "target_code_len": 57,
        "diff_format": "@@ -7,2 +7,3 @@\n from functools import wraps\n+from typing import Optional\n \n",
        "source_code_with_indent": "from functools import wraps\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from functools import wraps\nfrom typing import Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def update(self, progress: int = None, *args, **kwargs) -> None:\n        \"\"\"\n",
        "source_code_len": 82,
        "target_code": "\n    def update(self, progress: Optional[int] = None, *args, **kwargs) -> None:\n        \"\"\"\n",
        "target_code_len": 92,
        "diff_format": "@@ -242,3 +243,3 @@\n \n-    def update(self, progress: int = None, *args, **kwargs) -> None:\n+    def update(self, progress: Optional[int] = None, *args, **kwargs) -> None:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED><DED>def update(self, progress: int = None, *args, **kwargs) -> None:\n        <IND>",
        "target_code_with_indent": "\n    <DED><DED>def update(self, progress: Optional[int] = None, *args, **kwargs) -> None:\n        <IND>"
      }
    ]
  },
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "jina/parsers/optimizer.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/parsers/optimizer.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/parsers/optimizer.py:10:25 Incompatible variable type [9]: parser is declared to have type `ArgumentParser` but is used as type `None`.",
    "message": " parser is declared to have type `ArgumentParser` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 10,
    "warning_line": "def set_optimizer_parser(parser: 'ArgumentParser' = None):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from .peapods.base import mixin_base_ppr_parser\n\n",
        "source_code_len": 49,
        "target_code": "from .peapods.base import mixin_base_ppr_parser\nfrom typing import Optional\n\n",
        "target_code_len": 77,
        "diff_format": "@@ -3,2 +3,3 @@\n from .peapods.base import mixin_base_ppr_parser\n+from typing import Optional\n \n",
        "source_code_with_indent": "from .peapods.base import mixin_base_ppr_parser\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from .peapods.base import mixin_base_ppr_parser\nfrom typing import Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef set_optimizer_parser(parser: 'ArgumentParser' = None):\n    \"\"\"Set the parser for the optimizer\n",
        "source_code_len": 100,
        "target_code": "\ndef set_optimizer_parser(parser: Optional['ArgumentParser'] = None):\n    \"\"\"Set the parser for the optimizer\n",
        "target_code_len": 110,
        "diff_format": "@@ -9,3 +10,3 @@\n \n-def set_optimizer_parser(parser: 'ArgumentParser' = None):\n+def set_optimizer_parser(parser: Optional['ArgumentParser'] = None):\n     \"\"\"Set the parser for the optimizer\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>def set_optimizer_parser(parser: 'ArgumentParser' = None):\n    <IND>",
        "target_code_with_indent": "\n<DED>def set_optimizer_parser(parser: Optional['ArgumentParser'] = None):\n    <IND>"
      }
    ]
  },
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "jina/peapods/pods/helper.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/peapods/pods/helper.py",
    "file_hunks_size": 6,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/peapods/pods/helper.py:12:21 Incompatible variable type [9]: head_args is declared to have type `Namespace` but is used as type `None`.",
    "message": " head_args is declared to have type `Namespace` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 12,
    "warning_line": "    args: Namespace, head_args: Namespace = None, tail_args: Namespace = None"
  },
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "jina/peapods/runtimes/jinad/client.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/peapods/runtimes/jinad/client.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/peapods/runtimes/jinad/client.py:95:50 Incompatible variable type [9]: workspace_id is declared to have type `str` but is used as type `None`.",
    "message": " workspace_id is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 95,
    "warning_line": "    def upload(self, dependencies: Sequence[str], workspace_id: str = None) -> str:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def upload(self, dependencies: Sequence[str], workspace_id: str = None) -> str:\n        \"\"\"Upload local file dependencies to remote server by extracting from the pea_args\n",
        "source_code_len": 176,
        "target_code": "\n    def upload(\n        self, dependencies: Sequence[str], workspace_id: Optional[str] = None\n    ) -> str:\n        \"\"\"Upload local file dependencies to remote server by extracting from the pea_args\n",
        "target_code_len": 200,
        "diff_format": "@@ -94,3 +94,5 @@\n \n-    def upload(self, dependencies: Sequence[str], workspace_id: str = None) -> str:\n+    def upload(\n+        self, dependencies: Sequence[str], workspace_id: Optional[str] = None\n+    ) -> str:\n         \"\"\"Upload local file dependencies to remote server by extracting from the pea_args\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED><DED>def upload(self, dependencies: Sequence[str], workspace_id: str = None) -> str:\n        <IND>",
        "target_code_with_indent": "\n    <DED><DED>def upload(\n        self, dependencies: Sequence[str], workspace_id: Optional[str] = None\n    ) -> str:\n        <IND>"
      }
    ]
  },
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "jina/peapods/zmq/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/peapods/zmq/__init__.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/peapods/zmq/__init__.py:41:8 Incompatible variable type [9]: logger is declared to have type `jina.logging.logger.JinaLogger` but is used as type `None`.",
    "message": " logger is declared to have type `jina.logging.logger.JinaLogger` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 41,
    "warning_line": "        logger: 'JinaLogger' = None,"
  },
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "jina/peapods/zmq/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/peapods/zmq/__init__.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/peapods/zmq/__init__.py:42:8 Incompatible variable type [9]: ctrl_addr is declared to have type `str` but is used as type `None`.",
    "message": " ctrl_addr is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 42,
    "warning_line": "        ctrl_addr: str = None,"
  },
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "jina/peapods/zmq/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/peapods/zmq/__init__.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/peapods/zmq/__init__.py:639:4 Incompatible variable type [9]: identity is declared to have type `str` but is used as type `None`.",
    "message": " identity is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 639,
    "warning_line": "    identity: str = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    socket_type: 'SocketType',\n    identity: str = None,\n    use_ipc: bool = False,\n    ssh_server: str = None,\n    ssh_keyfile: str = None,\n    ssh_password: str = None,\n) -> Tuple['zmq.Socket', str]:\n",
        "source_code_len": 202,
        "target_code": "    socket_type: 'SocketType',\n    identity: Optional[str] = None,\n    use_ipc: bool = False,\n    ssh_server: Optional[str] = None,\n    ssh_keyfile: Optional[str] = None,\n    ssh_password: Optional[str] = None,\n) -> Tuple['zmq.Socket', str]:\n",
        "target_code_len": 242,
        "diff_format": "@@ -638,7 +638,7 @@\n     socket_type: 'SocketType',\n-    identity: str = None,\n+    identity: Optional[str] = None,\n     use_ipc: bool = False,\n-    ssh_server: str = None,\n-    ssh_keyfile: str = None,\n-    ssh_password: str = None,\n+    ssh_server: Optional[str] = None,\n+    ssh_keyfile: Optional[str] = None,\n+    ssh_password: Optional[str] = None,\n ) -> Tuple['zmq.Socket', str]:\n",
        "source_code_with_indent": "    socket_type: 'SocketType',\n    identity: str = None,\n    use_ipc: bool = False,\n    ssh_server: str = None,\n    ssh_keyfile: str = None,\n    ssh_password: str = None,\n) -> Tuple['zmq.Socket', str]:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    socket_type: 'SocketType',\n    identity: Optional[str] = None,\n    use_ipc: bool = False,\n    ssh_server: Optional[str] = None,\n    ssh_keyfile: Optional[str] = None,\n    ssh_password: Optional[str] = None,\n) -> Tuple['zmq.Socket', str]:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "jina/peapods/zmq/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/peapods/zmq/__init__.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/peapods/zmq/__init__.py:641:4 Incompatible variable type [9]: ssh_server is declared to have type `str` but is used as type `None`.",
    "message": " ssh_server is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 641,
    "warning_line": "    ssh_server: str = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    socket_type: 'SocketType',\n    identity: str = None,\n    use_ipc: bool = False,\n    ssh_server: str = None,\n    ssh_keyfile: str = None,\n    ssh_password: str = None,\n) -> Tuple['zmq.Socket', str]:\n",
        "source_code_len": 202,
        "target_code": "    socket_type: 'SocketType',\n    identity: Optional[str] = None,\n    use_ipc: bool = False,\n    ssh_server: Optional[str] = None,\n    ssh_keyfile: Optional[str] = None,\n    ssh_password: Optional[str] = None,\n) -> Tuple['zmq.Socket', str]:\n",
        "target_code_len": 242,
        "diff_format": "@@ -638,7 +638,7 @@\n     socket_type: 'SocketType',\n-    identity: str = None,\n+    identity: Optional[str] = None,\n     use_ipc: bool = False,\n-    ssh_server: str = None,\n-    ssh_keyfile: str = None,\n-    ssh_password: str = None,\n+    ssh_server: Optional[str] = None,\n+    ssh_keyfile: Optional[str] = None,\n+    ssh_password: Optional[str] = None,\n ) -> Tuple['zmq.Socket', str]:\n",
        "source_code_with_indent": "    socket_type: 'SocketType',\n    identity: str = None,\n    use_ipc: bool = False,\n    ssh_server: str = None,\n    ssh_keyfile: str = None,\n    ssh_password: str = None,\n) -> Tuple['zmq.Socket', str]:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    socket_type: 'SocketType',\n    identity: Optional[str] = None,\n    use_ipc: bool = False,\n    ssh_server: Optional[str] = None,\n    ssh_keyfile: Optional[str] = None,\n    ssh_password: Optional[str] = None,\n) -> Tuple['zmq.Socket', str]:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "jina/peapods/zmq/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/peapods/zmq/__init__.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/peapods/zmq/__init__.py:642:4 Incompatible variable type [9]: ssh_keyfile is declared to have type `str` but is used as type `None`.",
    "message": " ssh_keyfile is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 642,
    "warning_line": "    ssh_keyfile: str = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    socket_type: 'SocketType',\n    identity: str = None,\n    use_ipc: bool = False,\n    ssh_server: str = None,\n    ssh_keyfile: str = None,\n    ssh_password: str = None,\n) -> Tuple['zmq.Socket', str]:\n",
        "source_code_len": 202,
        "target_code": "    socket_type: 'SocketType',\n    identity: Optional[str] = None,\n    use_ipc: bool = False,\n    ssh_server: Optional[str] = None,\n    ssh_keyfile: Optional[str] = None,\n    ssh_password: Optional[str] = None,\n) -> Tuple['zmq.Socket', str]:\n",
        "target_code_len": 242,
        "diff_format": "@@ -638,7 +638,7 @@\n     socket_type: 'SocketType',\n-    identity: str = None,\n+    identity: Optional[str] = None,\n     use_ipc: bool = False,\n-    ssh_server: str = None,\n-    ssh_keyfile: str = None,\n-    ssh_password: str = None,\n+    ssh_server: Optional[str] = None,\n+    ssh_keyfile: Optional[str] = None,\n+    ssh_password: Optional[str] = None,\n ) -> Tuple['zmq.Socket', str]:\n",
        "source_code_with_indent": "    socket_type: 'SocketType',\n    identity: str = None,\n    use_ipc: bool = False,\n    ssh_server: str = None,\n    ssh_keyfile: str = None,\n    ssh_password: str = None,\n) -> Tuple['zmq.Socket', str]:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    socket_type: 'SocketType',\n    identity: Optional[str] = None,\n    use_ipc: bool = False,\n    ssh_server: Optional[str] = None,\n    ssh_keyfile: Optional[str] = None,\n    ssh_password: Optional[str] = None,\n) -> Tuple['zmq.Socket', str]:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "jina/peapods/zmq/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/peapods/zmq/__init__.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/peapods/zmq/__init__.py:643:4 Incompatible variable type [9]: ssh_password is declared to have type `str` but is used as type `None`.",
    "message": " ssh_password is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 643,
    "warning_line": "    ssh_password: str = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    socket_type: 'SocketType',\n    identity: str = None,\n    use_ipc: bool = False,\n    ssh_server: str = None,\n    ssh_keyfile: str = None,\n    ssh_password: str = None,\n) -> Tuple['zmq.Socket', str]:\n",
        "source_code_len": 202,
        "target_code": "    socket_type: 'SocketType',\n    identity: Optional[str] = None,\n    use_ipc: bool = False,\n    ssh_server: Optional[str] = None,\n    ssh_keyfile: Optional[str] = None,\n    ssh_password: Optional[str] = None,\n) -> Tuple['zmq.Socket', str]:\n",
        "target_code_len": 242,
        "diff_format": "@@ -638,7 +638,7 @@\n     socket_type: 'SocketType',\n-    identity: str = None,\n+    identity: Optional[str] = None,\n     use_ipc: bool = False,\n-    ssh_server: str = None,\n-    ssh_keyfile: str = None,\n-    ssh_password: str = None,\n+    ssh_server: Optional[str] = None,\n+    ssh_keyfile: Optional[str] = None,\n+    ssh_password: Optional[str] = None,\n ) -> Tuple['zmq.Socket', str]:\n",
        "source_code_with_indent": "    socket_type: 'SocketType',\n    identity: str = None,\n    use_ipc: bool = False,\n    ssh_server: str = None,\n    ssh_keyfile: str = None,\n    ssh_password: str = None,\n) -> Tuple['zmq.Socket', str]:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    socket_type: 'SocketType',\n    identity: Optional[str] = None,\n    use_ipc: bool = False,\n    ssh_server: Optional[str] = None,\n    ssh_keyfile: Optional[str] = None,\n    ssh_password: Optional[str] = None,\n) -> Tuple['zmq.Socket', str]:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "jina/types/document/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/types/document/__init__.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/types/document/__init__.py:1069:19 Incompatible variable type [9]: output is declared to have type `str` but is used as type `None`.",
    "message": " output is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 1069,
    "warning_line": "    def plot(self, output: str = None, inline_display: bool = False) -> None:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def plot(self, output: str = None, inline_display: bool = False) -> None:\n        \"\"\"\n",
        "source_code_len": 91,
        "target_code": "\n    def plot(self, output: Optional[str] = None, inline_display: bool = False) -> None:\n        \"\"\"\n",
        "target_code_len": 101,
        "diff_format": "@@ -1068,3 +1068,3 @@\n \n-    def plot(self, output: str = None, inline_display: bool = False) -> None:\n+    def plot(self, output: Optional[str] = None, inline_display: bool = False) -> None:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def plot(self, output: str = None, inline_display: bool = False) -> None:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def plot(self, output: Optional[str] = None, inline_display: bool = False) -> None:\n        <IND>"
      }
    ]
  },
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "jina/types/message/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/types/message/__init__.py",
    "file_hunks_size": 16,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/types/message/__init__.py:123:8 Incompatible variable type [9]: request_id is declared to have type `str` but is used as type `None`.",
    "message": " request_id is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 123,
    "warning_line": "        request_id: str = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        check_version=False,\n        request_id: str = None,\n        request_type: str = None,\n        compress: str = 'NONE',\n",
        "source_code_len": 127,
        "target_code": "        check_version=False,\n        request_id: Optional[str] = None,\n        request_type: Optional[str] = None,\n        compress: str = 'NONE',\n",
        "target_code_len": 147,
        "diff_format": "@@ -122,4 +135,4 @@\n         check_version=False,\n-        request_id: str = None,\n-        request_type: str = None,\n+        request_id: Optional[str] = None,\n+        request_type: Optional[str] = None,\n         compress: str = 'NONE',\n",
        "source_code_with_indent": "        check_version=False,\n        request_id: str = None,\n        request_type: str = None,\n        compress: str = 'NONE',\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        check_version=False,\n        request_id: Optional[str] = None,\n        request_type: Optional[str] = None,\n        compress: str = 'NONE',\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "jina/types/message/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/types/message/__init__.py",
    "file_hunks_size": 16,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/types/message/__init__.py:124:8 Incompatible variable type [9]: request_type is declared to have type `str` but is used as type `None`.",
    "message": " request_type is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 124,
    "warning_line": "        request_type: str = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        check_version=False,\n        request_id: str = None,\n        request_type: str = None,\n        compress: str = 'NONE',\n",
        "source_code_len": 127,
        "target_code": "        check_version=False,\n        request_id: Optional[str] = None,\n        request_type: Optional[str] = None,\n        compress: str = 'NONE',\n",
        "target_code_len": 147,
        "diff_format": "@@ -122,4 +135,4 @@\n         check_version=False,\n-        request_id: str = None,\n-        request_type: str = None,\n+        request_id: Optional[str] = None,\n+        request_type: Optional[str] = None,\n         compress: str = 'NONE',\n",
        "source_code_with_indent": "        check_version=False,\n        request_id: str = None,\n        request_type: str = None,\n        compress: str = 'NONE',\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        check_version=False,\n        request_id: Optional[str] = None,\n        request_type: Optional[str] = None,\n        compress: str = 'NONE',\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "jina/types/ndarray/dense/numpy.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/jina/types/ndarray/dense/numpy.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jina/types/ndarray/dense/numpy.py:36:8 Incompatible variable type [9]: quantize is declared to have type `str` but is used as type `None`.",
    "message": " quantize is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 36,
    "warning_line": "        quantize: str = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import os\n\n",
        "source_code_len": 11,
        "target_code": "import os\nfrom typing import Optional\n\n",
        "target_code_len": 39,
        "diff_format": "@@ -1,2 +1,3 @@\n import os\n+from typing import Optional\n \n",
        "source_code_with_indent": "import os\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import os\nfrom typing import Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        proto: 'jina_pb2.NdArrayProto' = None,\n        quantize: str = None,\n        *args,\n",
        "source_code_len": 92,
        "target_code": "        proto: 'jina_pb2.NdArrayProto' = None,\n        quantize: Optional[str] = None,\n        *args,\n",
        "target_code_len": 102,
        "diff_format": "@@ -35,3 +38,3 @@\n         proto: 'jina_pb2.NdArrayProto' = None,\n-        quantize: str = None,\n+        quantize: Optional[str] = None,\n         *args,\n",
        "source_code_with_indent": "        proto: 'jina_pb2.NdArrayProto' = None,\n        quantize: str = None,\n        *args,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        proto: 'jina_pb2.NdArrayProto' = None,\n        quantize: Optional[str] = None,\n        *args,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "tests/distributed/helpers.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/tests/distributed/helpers.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/distributed/helpers.py:51:20 Incompatible variable type [9]: workspace_id is declared to have type `str` but is used as type `None`.",
    "message": " workspace_id is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 51,
    "warning_line": "    flow_yaml: str, workspace_id: str = None, url: str = 'http://localhost:8000/flows'",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def create_flow_2(\n    flow_yaml: str, workspace_id: str = None, url: str = 'http://localhost:8000/flows'\n) -> str:\n",
        "source_code_len": 116,
        "target_code": "def create_flow_2(\n    flow_yaml: str,\n    workspace_id: Optional[str] = None,\n    url: str = 'http://localhost:8000/flows',\n) -> str:\n",
        "target_code_len": 135,
        "diff_format": "@@ -50,3 +50,5 @@\n def create_flow_2(\n-    flow_yaml: str, workspace_id: str = None, url: str = 'http://localhost:8000/flows'\n+    flow_yaml: str,\n+    workspace_id: Optional[str] = None,\n+    url: str = 'http://localhost:8000/flows',\n ) -> str:\n",
        "source_code_with_indent": "<DED><DED>def create_flow_2(\n    flow_yaml: str, workspace_id: str = None, url: str = 'http://localhost:8000/flows'\n) -> str:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED><DED>def create_flow_2(\n    flow_yaml: str,\n    workspace_id: Optional[str] = None,\n    url: str = 'http://localhost:8000/flows',\n) -> str:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "tests/distributed/helpers.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/tests/distributed/helpers.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/distributed/helpers.py:64:4 Incompatible variable type [9]: workspace_id is declared to have type `str` but is used as type `None`.",
    "message": " workspace_id is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 64,
    "warning_line": "    workspace_id: str = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    url: str = 'http://localhost:8000',\n    workspace_id: str = None,\n) -> str:\n",
        "source_code_len": 80,
        "target_code": "    url: str = 'http://localhost:8000',\n    workspace_id: Optional[str] = None,\n) -> str:\n",
        "target_code_len": 90,
        "diff_format": "@@ -63,3 +65,3 @@\n     url: str = 'http://localhost:8000',\n-    workspace_id: str = None,\n+    workspace_id: Optional[str] = None,\n ) -> str:\n",
        "source_code_with_indent": "    url: str = 'http://localhost:8000',\n    workspace_id: str = None,\n) -> str:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    url: str = 'http://localhost:8000',\n    workspace_id: Optional[str] = None,\n) -> str:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "tests/integration/gateway_non_blocking/yaml/fast_slow_driver.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/tests/integration/gateway_non_blocking/yaml/fast_slow_driver.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/integration/gateway_non_blocking/yaml/fast_slow_driver.py:12:23 Incompatible variable type [9]: executor is declared to have type `str` but is used as type `None`.",
    "message": " executor is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 12,
    "warning_line": "    def __init__(self, executor: str = None, method: str = 'craft', *args, **kwargs):"
  },
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "tests/integration/issues/github_1546/good3/helper.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/tests/integration/issues/github_1546/good3/helper.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/integration/issues/github_1546/good3/helper.py:34:4 Incompatible variable type [9]: top is declared to have type `int` but is used as type `None`.",
    "message": " top is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 34,
    "warning_line": "    top: int = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import Tuple, Union\n\n",
        "source_code_len": 34,
        "target_code": "\nfrom typing import Tuple, Union, Optional\n\n",
        "target_code_len": 44,
        "diff_format": "@@ -3,3 +3,3 @@\n \n-from typing import Tuple, Union\n+from typing import Tuple, Union, Optional\n \n",
        "source_code_with_indent": "\nfrom typing import Tuple, Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import Tuple, Union, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    target_size: Union[Tuple[int, int], int],\n    top: int = None,\n    left: int = None,\n    how: str = 'precise',\n",
        "source_code_len": 115,
        "target_code": "    target_size: Union[Tuple[int, int], int],\n    top: Optional[int] = None,\n    left: Optional[int] = None,\n    how: str = 'precise',\n",
        "target_code_len": 135,
        "diff_format": "@@ -33,4 +33,4 @@\n     target_size: Union[Tuple[int, int], int],\n-    top: int = None,\n-    left: int = None,\n+    top: Optional[int] = None,\n+    left: Optional[int] = None,\n     how: str = 'precise',\n",
        "source_code_with_indent": "    target_size: Union[Tuple[int, int], int],\n    top: int = None,\n    left: int = None,\n    how: str = 'precise',\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    target_size: Union[Tuple[int, int], int],\n    top: Optional[int] = None,\n    left: Optional[int] = None,\n    how: str = 'precise',\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jina-ai/jina",
    "commit": "1fd79ae88068dcba2e8d27718c6d7917019e474f",
    "filename": "tests/integration/issues/github_1546/good3/helper.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jina-ai-jina/tests/integration/issues/github_1546/good3/helper.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/integration/issues/github_1546/good3/helper.py:35:4 Incompatible variable type [9]: left is declared to have type `int` but is used as type `None`.",
    "message": " left is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 35,
    "warning_line": "    left: int = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import Tuple, Union\n\n",
        "source_code_len": 34,
        "target_code": "\nfrom typing import Tuple, Union, Optional\n\n",
        "target_code_len": 44,
        "diff_format": "@@ -3,3 +3,3 @@\n \n-from typing import Tuple, Union\n+from typing import Tuple, Union, Optional\n \n",
        "source_code_with_indent": "\nfrom typing import Tuple, Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import Tuple, Union, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    target_size: Union[Tuple[int, int], int],\n    top: int = None,\n    left: int = None,\n    how: str = 'precise',\n",
        "source_code_len": 115,
        "target_code": "    target_size: Union[Tuple[int, int], int],\n    top: Optional[int] = None,\n    left: Optional[int] = None,\n    how: str = 'precise',\n",
        "target_code_len": 135,
        "diff_format": "@@ -33,4 +33,4 @@\n     target_size: Union[Tuple[int, int], int],\n-    top: int = None,\n-    left: int = None,\n+    top: Optional[int] = None,\n+    left: Optional[int] = None,\n     how: str = 'precise',\n",
        "source_code_with_indent": "    target_size: Union[Tuple[int, int], int],\n    top: int = None,\n    left: int = None,\n    how: str = 'precise',\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    target_size: Union[Tuple[int, int], int],\n    top: Optional[int] = None,\n    left: Optional[int] = None,\n    how: str = 'precise',\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]