[
  {
    "project": "Adapter-Hub/adapter-transformers",
    "commit": "cafbd70a9c8eaaebf3dea24becb535ed67ab67e7",
    "filename": "src/transformers/adapter_config.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Adapter-Hub-adapter-transformers/src/transformers/adapter_config.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/transformers/adapter_config.py:254:12 Incompatible return type [7]: Expected `typing.Dict[typing.Any, typing.Any]` but got `Union[HoulsbyConfig, PfeifferConfig]`.",
    "message": " Expected `typing.Dict[typing.Any, typing.Any]` but got `Union[HoulsbyConfig, PfeifferConfig]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 254,
    "warning_line": "            return ADAPTER_CONFIG_MAP[config]",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            self.config_map[config_name] = config\n        self.adapters[adapter_name] = (adapter_type, config_name)\n        logger.info(f\"Adding adapter '{adapter_name}' of type '{adapter_type}'.\")\n\n    def get_config(self, adapter_type: AdapterType) -> dict:\n        config = self.config_map.get(adapter_type, None)\n        if isinstance(config, str) and config in ADAPTER_CONFIG_MAP:\n            return ADAPTER_CONFIG_MAP[config]\n        return config\n\n    def set_config(self, adapter_type: AdapterType, config: Union[dict, str, AdapterConfig]):\n        \"\"\"Sets the default adapter configuration of the specified adapter type.\n\n        Args:\n            config (str or dict or AdapterConfig): adapter configuration, can be either:\n                - a string identifying a pre-defined adapter configuration\n                - a dictionary representing the adapter configuration\n                - the path to a file containing the adapter configuration\n        \"\"\"\n        assert len(self.adapter_list(adapter_type)) < 1, \"Can only set new config if no adapters have been added.\"\n\n        if isinstance(config, Mapping) or config in ADAPTER_CONFIG_MAP:\n            self.config_map[adapter_type] = config\n        elif isfile(config):\n            with open(config, \"r\", encoding=\"utf-8\") as f:\n                self.config_map[adapter_type] = json.load(f)\n        else:\n            raise ValueError(\"Unable to identify {} as a valid adapter config.\".format(config))\n\n",
        "source_code_len": 1464,
        "target_code": "            self.config_map[config_name] = config\n        else:\n            raise ValueError(\"Invalid adapter config: {}\".format(config))\n        self.adapters[adapter_name] = (adapter_type, config_name)\n        logger.info(f\"Adding adapter '{adapter_name}' of type '{adapter_type}'.\")\n\n",
        "target_code_len": 287,
        "diff_format": "@@ -247,29 +247,6 @@\n             self.config_map[config_name] = config\n+        else:\n+            raise ValueError(\"Invalid adapter config: {}\".format(config))\n         self.adapters[adapter_name] = (adapter_type, config_name)\n         logger.info(f\"Adding adapter '{adapter_name}' of type '{adapter_type}'.\")\n-\n-    def get_config(self, adapter_type: AdapterType) -> dict:\n-        config = self.config_map.get(adapter_type, None)\n-        if isinstance(config, str) and config in ADAPTER_CONFIG_MAP:\n-            return ADAPTER_CONFIG_MAP[config]\n-        return config\n-\n-    def set_config(self, adapter_type: AdapterType, config: Union[dict, str, AdapterConfig]):\n-        \"\"\"Sets the default adapter configuration of the specified adapter type.\n-\n-        Args:\n-            config (str or dict or AdapterConfig): adapter configuration, can be either:\n-                - a string identifying a pre-defined adapter configuration\n-                - a dictionary representing the adapter configuration\n-                - the path to a file containing the adapter configuration\n-        \"\"\"\n-        assert len(self.adapter_list(adapter_type)) < 1, \"Can only set new config if no adapters have been added.\"\n-\n-        if isinstance(config, Mapping) or config in ADAPTER_CONFIG_MAP:\n-            self.config_map[adapter_type] = config\n-        elif isfile(config):\n-            with open(config, \"r\", encoding=\"utf-8\") as f:\n-                self.config_map[adapter_type] = json.load(f)\n-        else:\n-            raise ValueError(\"Unable to identify {} as a valid adapter config.\".format(config))\n \n",
        "source_code_with_indent": "            self.config_map[config_name] = config\n        <DED>self.adapters[adapter_name] = (adapter_type, config_name)\n        logger.info(f\"Adding adapter '{adapter_name}' of type '{adapter_type}'.\")\n\n    <DED>def get_config(self, adapter_type: AdapterType) -> dict:\n        <IND>config = self.config_map.get(adapter_type, None)\n        if isinstance(config, str) and config in ADAPTER_CONFIG_MAP:\n            <IND>return ADAPTER_CONFIG_MAP[config]\n        <DED>return config\n\n    <DED>def set_config(self, adapter_type: AdapterType, config: Union[dict, str, AdapterConfig]):\n        <IND>\"\"\"Sets the default adapter configuration of the specified adapter type.\n\n        Args:\n            config (str or dict or AdapterConfig): adapter configuration, can be either:\n                - a string identifying a pre-defined adapter configuration\n                - a dictionary representing the adapter configuration\n                - the path to a file containing the adapter configuration\n        \"\"\"\n        assert len(self.adapter_list(adapter_type)) < 1, \"Can only set new config if no adapters have been added.\"\n\n        if isinstance(config, Mapping) or config in ADAPTER_CONFIG_MAP:\n            <IND>self.config_map[adapter_type] = config\n        <DED>elif isfile(config):\n            <IND>with open(config, \"r\", encoding=\"utf-8\") as f:\n                <IND>self.config_map[adapter_type] = json.load(f)\n        <DED><DED>else:\n            <IND>raise ValueError(\"Unable to identify {} as a valid adapter config.\".format(config))\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            self.config_map[config_name] = config\n        <DED>else:\n            <IND>raise ValueError(\"Invalid adapter config: {}\".format(config))\n        <DED>self.adapters[adapter_name] = (adapter_type, config_name)\n        logger.info(f\"Adding adapter '{adapter_name}' of type '{adapter_type}'.\")\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]