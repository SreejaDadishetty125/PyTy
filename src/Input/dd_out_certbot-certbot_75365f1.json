[
  {
    "project": "certbot/certbot",
    "commit": "75365f1d4e92c552f8ec69b97c0534adbd51f1d6",
    "filename": "acme/acme/magic_typing.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/certbot-certbot/acme/acme/magic_typing.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "acme/acme/magic_typing.py:15:28 Incompatible parameter type [6]: Expected `types.ModuleType` for 2nd positional only parameter to call `dict.__setitem__` but got `TypingClass`.",
    "message": " Expected `types.ModuleType` for 2nd positional only parameter to call `dict.__setitem__` but got `TypingClass`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 15,
    "warning_line": "    sys.modules[__name__] = TypingClass()",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "except ImportError:\n    sys.modules[__name__] = TypingClass()\n",
        "source_code_len": 62,
        "target_code": "except ImportError:\n    # mypy complains because TypingClass is not a module\n    sys.modules[__name__] = TypingClass()  # type: ignore\n",
        "target_code_len": 135,
        "diff_format": "@@ -14,2 +14,3 @@\n except ImportError:\n-    sys.modules[__name__] = TypingClass()\n+    # mypy complains because TypingClass is not a module\n+    sys.modules[__name__] = TypingClass()  # type: ignore\n",
        "source_code_with_indent": "<DED>except ImportError:\n    <IND>sys.modules[__name__] = TypingClass()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED>except ImportError:\n    # mypy complains because TypingClass is not a module\n    <IND>sys.modules[__name__] = TypingClass()  # type: ignore\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "certbot/certbot",
    "commit": "75365f1d4e92c552f8ec69b97c0534adbd51f1d6",
    "filename": "certbot/certbot/plugins/common.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/certbot-certbot/certbot/certbot/plugins/common.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "certbot/certbot/plugins/common.py:452:24 Incompatible parameter type [6]: Expected `types.ModuleType` for 2nd positional only parameter to call `dict.__setitem__` but got `_TLSSNI01DeprecationModule`.",
    "message": " Expected `types.ModuleType` for 2nd positional only parameter to call `dict.__setitem__` but got `_TLSSNI01DeprecationModule`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 452,
    "warning_line": "sys.modules[__name__] = _TLSSNI01DeprecationModule(sys.modules[__name__])",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "    return temp_dir, config_dir, work_dir\n\n\n# This class takes a similar approach to the cryptography project to deprecate attributes\n# in public modules. See the _ModuleWithDeprecation class here:\n# https://github.com/pyca/cryptography/blob/91105952739442a74582d3e62b3d2111365b0dc7/src/cryptography/utils.py#L129\nclass _TLSSNI01DeprecationModule(object):\n    \"\"\"\n    Internal class delegating to a module, and displaying warnings when\n    attributes related to TLS-SNI-01 are accessed.\n    \"\"\"\n    def __init__(self, module):\n        self.__dict__['_module'] = module\n\n    def __getattr__(self, attr):\n        if attr == 'TLSSNI01':\n            warnings.warn('TLSSNI01 is deprecated and will be removed soon.',\n                          DeprecationWarning, stacklevel=2)\n        return getattr(self._module, attr)\n\n    def __setattr__(self, attr, value):  # pragma: no cover\n        setattr(self._module, attr, value)\n\n    def __delattr__(self, attr):  # pragma: no cover\n        delattr(self._module, attr)\n\n    def __dir__(self):  # pragma: no cover\n        return ['_module'] + dir(self._module)\n\n\n# Patching ourselves to warn about TLS-SNI challenge deprecation and removal.\nsys.modules[__name__] = _TLSSNI01DeprecationModule(sys.modules[__name__])\n",
        "source_code_len": 1254,
        "target_code": "    return temp_dir, config_dir, work_dir\n",
        "target_code_len": 42,
        "diff_format": "@@ -421,32 +419,1 @@\n     return temp_dir, config_dir, work_dir\n-\n-\n-# This class takes a similar approach to the cryptography project to deprecate attributes\n-# in public modules. See the _ModuleWithDeprecation class here:\n-# https://github.com/pyca/cryptography/blob/91105952739442a74582d3e62b3d2111365b0dc7/src/cryptography/utils.py#L129\n-class _TLSSNI01DeprecationModule(object):\n-    \"\"\"\n-    Internal class delegating to a module, and displaying warnings when\n-    attributes related to TLS-SNI-01 are accessed.\n-    \"\"\"\n-    def __init__(self, module):\n-        self.__dict__['_module'] = module\n-\n-    def __getattr__(self, attr):\n-        if attr == 'TLSSNI01':\n-            warnings.warn('TLSSNI01 is deprecated and will be removed soon.',\n-                          DeprecationWarning, stacklevel=2)\n-        return getattr(self._module, attr)\n-\n-    def __setattr__(self, attr, value):  # pragma: no cover\n-        setattr(self._module, attr, value)\n-\n-    def __delattr__(self, attr):  # pragma: no cover\n-        delattr(self._module, attr)\n-\n-    def __dir__(self):  # pragma: no cover\n-        return ['_module'] + dir(self._module)\n-\n-\n-# Patching ourselves to warn about TLS-SNI challenge deprecation and removal.\n-sys.modules[__name__] = _TLSSNI01DeprecationModule(sys.modules[__name__])\n",
        "source_code_with_indent": "    return temp_dir, config_dir, work_dir\n\n\n# This class takes a similar approach to the cryptography project to deprecate attributes\n# in public modules. See the _ModuleWithDeprecation class here:\n# https://github.com/pyca/cryptography/blob/91105952739442a74582d3e62b3d2111365b0dc7/src/cryptography/utils.py#L129\n<DED>class _TLSSNI01DeprecationModule(object):\n    <IND>\"\"\"\n    Internal class delegating to a module, and displaying warnings when\n    attributes related to TLS-SNI-01 are accessed.\n    \"\"\"\n    def __init__(self, module):\n        <IND>self.__dict__['_module'] = module\n\n    <DED>def __getattr__(self, attr):\n        <IND>if attr == 'TLSSNI01':\n            <IND>warnings.warn('TLSSNI01 is deprecated and will be removed soon.',\n                          DeprecationWarning, stacklevel=2)\n        <DED>return getattr(self._module, attr)\n\n    <DED>def __setattr__(self, attr, value):  # pragma: no cover\n        <IND>setattr(self._module, attr, value)\n\n    <DED>def __delattr__(self, attr):  # pragma: no cover\n        <IND>delattr(self._module, attr)\n\n    <DED>def __dir__(self):  # pragma: no cover\n        <IND>return ['_module'] + dir(self._module)\n\n\n# Patching ourselves to warn about TLS-SNI challenge deprecation and removal.\n<DED><DED>sys.modules[__name__] = _TLSSNI01DeprecationModule(sys.modules[__name__])\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    return temp_dir, config_dir, work_dir\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]