[
  {
    "project": "zhu327/doge",
    "commit": "2469908b2e3a2a1a2bd585fc3245f3021289c350",
    "filename": "doge/cluster/lb.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/zhu327-doge/doge/cluster/lb.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "doge/cluster/lb.py:31:12 Incompatible return type [7]: Expected `List[EndPoint]` but got `EndPoint`.",
    "message": " Expected `List[EndPoint]` but got `EndPoint`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 31,
    "warning_line": "            return ep",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        if not ep:\n            return ep\n        return select_list_from_index(self.endpoints, index)\n",
        "source_code_len": 102,
        "target_code": "        if not ep:\n            return []\n        return select_list_from_index(self.endpoints, index)\n",
        "target_code_len": 102,
        "diff_format": "@@ -30,3 +30,3 @@\n         if not ep:\n-            return ep\n+            return []\n         return select_list_from_index(self.endpoints, index)\n",
        "source_code_with_indent": "        if not ep:\n            <IND>return ep\n        <DED>return select_list_from_index(self.endpoints, index)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        if not ep:\n            <IND>return []\n        <DED>return select_list_from_index(self.endpoints, index)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "zhu327/doge",
    "commit": "2469908b2e3a2a1a2bd585fc3245f3021289c350",
    "filename": "doge/cluster/lb.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/zhu327-doge/doge/cluster/lb.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "doge/cluster/lb.py:74:8 Incompatible return type [7]: Expected `Tuple[int, EndPoint]` but got `Tuple[int, None]`.",
    "message": " Expected `Tuple[int, EndPoint]` but got `Tuple[int, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 74,
    "warning_line": "        return -1, None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def select(self, request: Request) -> EndPoint:\n        _, ep = select_one_random(self.endpoints)\n",
        "source_code_len": 103,
        "target_code": "\n    def select(self, request: Request) -> Optional[EndPoint]:\n        _, ep = select_one_random(self.endpoints)\n",
        "target_code_len": 113,
        "diff_format": "@@ -23,3 +23,3 @@\n \n-    def select(self, request: Request) -> EndPoint:\n+    def select(self, request: Request) -> Optional[EndPoint]:\n         _, ep = select_one_random(self.endpoints)\n",
        "source_code_with_indent": "\n    <DED>def select(self, request: Request) -> EndPoint:\n        <IND>_, ep = select_one_random(self.endpoints)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def select(self, request: Request) -> Optional[EndPoint]:\n        <IND>_, ep = select_one_random(self.endpoints)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        if not ep:\n            return ep\n        return select_list_from_index(self.endpoints, index)\n",
        "source_code_len": 102,
        "target_code": "        if not ep:\n            return []\n        return select_list_from_index(self.endpoints, index)\n",
        "target_code_len": 102,
        "diff_format": "@@ -30,3 +30,3 @@\n         if not ep:\n-            return ep\n+            return []\n         return select_list_from_index(self.endpoints, index)\n",
        "source_code_with_indent": "        if not ep:\n            <IND>return ep\n        <DED>return select_list_from_index(self.endpoints, index)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        if not ep:\n            <IND>return []\n        <DED>return select_list_from_index(self.endpoints, index)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def roundrobin_select(\n        self,\n    ) -> Union[Tuple[int, EndPoint], Tuple[int, None]]:\n        eps = self.endpoints\n",
        "source_code_len": 127,
        "target_code": "\n    def roundrobin_select(self,) -> Tuple[int, Optional[EndPoint]]:\n        eps = self.endpoints\n",
        "target_code_len": 98,
        "diff_format": "@@ -55,5 +55,3 @@\n \n-    def roundrobin_select(\n-        self,\n-    ) -> Union[Tuple[int, EndPoint], Tuple[int, None]]:\n+    def roundrobin_select(self,) -> Tuple[int, Optional[EndPoint]]:\n         eps = self.endpoints\n",
        "source_code_with_indent": "\n    <DED>def roundrobin_select(\n        self,\n    ) -> Union[Tuple[int, EndPoint], Tuple[int, None]]:\n        <IND>eps = self.endpoints\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def roundrobin_select(self,) -> Tuple[int, Optional[EndPoint]]:\n        <IND>eps = self.endpoints\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef select_one_random(eps: List[EndPoint]) -> Tuple[int, EndPoint]:\n    eps_len = len(eps)\n",
        "source_code_len": 92,
        "target_code": "\ndef select_one_random(eps: List[EndPoint]) -> Tuple[int, Optional[EndPoint]]:\n    eps_len = len(eps)\n",
        "target_code_len": 102,
        "diff_format": "@@ -70,3 +68,3 @@\n \n-def select_one_random(eps: List[EndPoint]) -> Tuple[int, EndPoint]:\n+def select_one_random(eps: List[EndPoint]) -> Tuple[int, Optional[EndPoint]]:\n     eps_len = len(eps)\n",
        "source_code_with_indent": "\n<DED><DED>def select_one_random(eps: List[EndPoint]) -> Tuple[int, EndPoint]:\n    <IND>eps_len = len(eps)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED><DED>def select_one_random(eps: List[EndPoint]) -> Tuple[int, Optional[EndPoint]]:\n    <IND>eps_len = len(eps)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "zhu327/doge",
    "commit": "2469908b2e3a2a1a2bd585fc3245f3021289c350",
    "filename": "doge/cluster/lb.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/zhu327-doge/doge/cluster/lb.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "doge/cluster/lb.py:86:4 Incompatible return type [7]: Expected `Tuple[int, EndPoint]` but got `Tuple[int, None]`.",
    "message": " Expected `Tuple[int, EndPoint]` but got `Tuple[int, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 86,
    "warning_line": "    return -1, None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def select(self, request: Request) -> EndPoint:\n        _, ep = select_one_random(self.endpoints)\n",
        "source_code_len": 103,
        "target_code": "\n    def select(self, request: Request) -> Optional[EndPoint]:\n        _, ep = select_one_random(self.endpoints)\n",
        "target_code_len": 113,
        "diff_format": "@@ -23,3 +23,3 @@\n \n-    def select(self, request: Request) -> EndPoint:\n+    def select(self, request: Request) -> Optional[EndPoint]:\n         _, ep = select_one_random(self.endpoints)\n",
        "source_code_with_indent": "\n    <DED>def select(self, request: Request) -> EndPoint:\n        <IND>_, ep = select_one_random(self.endpoints)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def select(self, request: Request) -> Optional[EndPoint]:\n        <IND>_, ep = select_one_random(self.endpoints)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        if not ep:\n            return ep\n        return select_list_from_index(self.endpoints, index)\n",
        "source_code_len": 102,
        "target_code": "        if not ep:\n            return []\n        return select_list_from_index(self.endpoints, index)\n",
        "target_code_len": 102,
        "diff_format": "@@ -30,3 +30,3 @@\n         if not ep:\n-            return ep\n+            return []\n         return select_list_from_index(self.endpoints, index)\n",
        "source_code_with_indent": "        if not ep:\n            <IND>return ep\n        <DED>return select_list_from_index(self.endpoints, index)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        if not ep:\n            <IND>return []\n        <DED>return select_list_from_index(self.endpoints, index)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def roundrobin_select(\n        self,\n    ) -> Union[Tuple[int, EndPoint], Tuple[int, None]]:\n        eps = self.endpoints\n",
        "source_code_len": 127,
        "target_code": "\n    def roundrobin_select(self,) -> Tuple[int, Optional[EndPoint]]:\n        eps = self.endpoints\n",
        "target_code_len": 98,
        "diff_format": "@@ -55,5 +55,3 @@\n \n-    def roundrobin_select(\n-        self,\n-    ) -> Union[Tuple[int, EndPoint], Tuple[int, None]]:\n+    def roundrobin_select(self,) -> Tuple[int, Optional[EndPoint]]:\n         eps = self.endpoints\n",
        "source_code_with_indent": "\n    <DED>def roundrobin_select(\n        self,\n    ) -> Union[Tuple[int, EndPoint], Tuple[int, None]]:\n        <IND>eps = self.endpoints\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def roundrobin_select(self,) -> Tuple[int, Optional[EndPoint]]:\n        <IND>eps = self.endpoints\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef select_one_random(eps: List[EndPoint]) -> Tuple[int, EndPoint]:\n    eps_len = len(eps)\n",
        "source_code_len": 92,
        "target_code": "\ndef select_one_random(eps: List[EndPoint]) -> Tuple[int, Optional[EndPoint]]:\n    eps_len = len(eps)\n",
        "target_code_len": 102,
        "diff_format": "@@ -70,3 +68,3 @@\n \n-def select_one_random(eps: List[EndPoint]) -> Tuple[int, EndPoint]:\n+def select_one_random(eps: List[EndPoint]) -> Tuple[int, Optional[EndPoint]]:\n     eps_len = len(eps)\n",
        "source_code_with_indent": "\n<DED><DED>def select_one_random(eps: List[EndPoint]) -> Tuple[int, EndPoint]:\n    <IND>eps_len = len(eps)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED><DED>def select_one_random(eps: List[EndPoint]) -> Tuple[int, Optional[EndPoint]]:\n    <IND>eps_len = len(eps)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "zhu327/doge",
    "commit": "2469908b2e3a2a1a2bd585fc3245f3021289c350",
    "filename": "doge/registry/registry.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/zhu327-doge/doge/registry/registry.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "doge/registry/registry.py:33:40 Incompatible parameter type [6]: Expected `str` for 2nd positional only parameter to call `EtcdRegistry._node_key` but got `Union[None, typing.List[str], int, str]`.",
    "message": " Expected `str` for 2nd positional only parameter to call `EtcdRegistry._node_key` but got `Union[None, typing.List[str], int, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 33,
    "warning_line": "        n_key = self._node_key(service, url.get_param(\"node\"))"
  },
  {
    "project": "zhu327/doge",
    "commit": "2469908b2e3a2a1a2bd585fc3245f3021289c350",
    "filename": "doge/registry/registry.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/zhu327-doge/doge/registry/registry.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "doge/registry/registry.py:39:37 Incompatible parameter type [6]: Expected `int` for 3rd parameter `ttl` to call `EtcdRegistry.heartbeat` but got `Union[None, typing.List[str], int, str]`.",
    "message": " Expected `int` for 3rd parameter `ttl` to call `EtcdRegistry.heartbeat` but got `Union[None, typing.List[str], int, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 39,
    "warning_line": "        self.heartbeat(n_key, value, ttl=ttl)"
  },
  {
    "project": "zhu327/doge",
    "commit": "2469908b2e3a2a1a2bd585fc3245f3021289c350",
    "filename": "doge/registry/registry.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/zhu327-doge/doge/registry/registry.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "doge/registry/registry.py:42:40 Incompatible parameter type [6]: Expected `str` for 2nd positional only parameter to call `EtcdRegistry._node_key` but got `Union[None, typing.List[str], int, str]`.",
    "message": " Expected `str` for 2nd positional only parameter to call `EtcdRegistry._node_key` but got `Union[None, typing.List[str], int, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 42,
    "warning_line": "        n_key = self._node_key(service, url.get_param(\"node\"))"
  },
  {
    "project": "zhu327/doge",
    "commit": "2469908b2e3a2a1a2bd585fc3245f3021289c350",
    "filename": "doge/rpc/context.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/zhu327-doge/doge/rpc/context.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "doge/rpc/context.py:38:12 Incompatible return type [7]: Expected `Union[BackupRequestHA, FailOverHA]` but got implicit return value of `None`.",
    "message": " Expected `Union[BackupRequestHA, FailOverHA]` but got implicit return value of `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 38,
    "warning_line": "            return BackupRequestHA(self.url)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from doge.registry.registry import DirectRegistry, EtcdRegistry\n\n",
        "source_code_len": 65,
        "target_code": "from doge.registry.registry import DirectRegistry, EtcdRegistry\nfrom doge.common.exceptions import ReferCfgError\n\n",
        "target_code_len": 114,
        "diff_format": "@@ -10,2 +10,3 @@\n from doge.registry.registry import DirectRegistry, EtcdRegistry\n+from doge.common.exceptions import ReferCfgError\n \n",
        "source_code_with_indent": "from doge.registry.registry import DirectRegistry, EtcdRegistry\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from doge.registry.registry import DirectRegistry, EtcdRegistry\nfrom doge.common.exceptions import ReferCfgError\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            return BackupRequestHA(self.url)\n\n",
        "source_code_len": 46,
        "target_code": "            return BackupRequestHA(self.url)\n        raise ReferCfgError\n\n",
        "target_code_len": 74,
        "diff_format": "@@ -38,2 +39,3 @@\n             return BackupRequestHA(self.url)\n+        raise ReferCfgError\n \n",
        "source_code_with_indent": "            <IND>return BackupRequestHA(self.url)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <IND>return BackupRequestHA(self.url)\n        <DED>raise ReferCfgError\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "zhu327/doge",
    "commit": "2469908b2e3a2a1a2bd585fc3245f3021289c350",
    "filename": "doge/rpc/context.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/zhu327-doge/doge/rpc/context.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "doge/rpc/context.py:45:12 Incompatible return type [7]: Expected `Union[RandomLB, RoundrobinLB]` but got implicit return value of `None`.",
    "message": " Expected `Union[RandomLB, RoundrobinLB]` but got implicit return value of `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 45,
    "warning_line": "            return RoundrobinLB(self.url, eps)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from doge.registry.registry import DirectRegistry, EtcdRegistry\n\n",
        "source_code_len": 65,
        "target_code": "from doge.registry.registry import DirectRegistry, EtcdRegistry\nfrom doge.common.exceptions import ReferCfgError\n\n",
        "target_code_len": 114,
        "diff_format": "@@ -10,2 +10,3 @@\n from doge.registry.registry import DirectRegistry, EtcdRegistry\n+from doge.common.exceptions import ReferCfgError\n \n",
        "source_code_with_indent": "from doge.registry.registry import DirectRegistry, EtcdRegistry\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from doge.registry.registry import DirectRegistry, EtcdRegistry\nfrom doge.common.exceptions import ReferCfgError\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            return RoundrobinLB(self.url, eps)\n\n",
        "source_code_len": 48,
        "target_code": "            return RoundrobinLB(self.url, eps)\n        raise ReferCfgError\n\n",
        "target_code_len": 76,
        "diff_format": "@@ -45,2 +47,3 @@\n             return RoundrobinLB(self.url, eps)\n+        raise ReferCfgError\n \n",
        "source_code_with_indent": "            <IND>return RoundrobinLB(self.url, eps)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <IND>return RoundrobinLB(self.url, eps)\n        <DED>raise ReferCfgError\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "zhu327/doge",
    "commit": "2469908b2e3a2a1a2bd585fc3245f3021289c350",
    "filename": "doge/rpc/server.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/zhu327-doge/doge/rpc/server.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "doge/rpc/server.py:45:28 Incompatible parameter type [6]: Expected `typing.Optional[doge.common.exceptions.DogeError]` for 1st parameter `exception` to call `Response.__init__` but got `Exception`.",
    "message": " Expected `typing.Optional[doge.common.exceptions.DogeError]` for 1st parameter `exception` to call `Response.__init__` but got `Exception`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 45,
    "warning_line": "            return Response(exception=e)"
  }
]