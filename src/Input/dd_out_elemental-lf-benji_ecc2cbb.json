[
  {
    "project": "elemental-lf/benji",
    "commit": "ecc2cbb6d7ccb44ab68ec0d5ff978866ef85c0a3",
    "filename": "src/benji/database.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/elemental-lf-benji/src/benji/database.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/benji/database.py:185:30 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `VersionUid.__init__` but got `int`.",
    "message": " Expected `str` for 1st positional only parameter to call `VersionUid.__init__` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 185,
    "warning_line": "            return VersionUid(value)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def process_result_value(self, value: Optional[int], dialect) -> Optional[VersionUid]:\n        if value is not None:\n",
        "source_code_len": 122,
        "target_code": "\n    def process_result_value(self, value: Optional[str], dialect) -> Optional[VersionUid]:\n        if value is not None:\n",
        "target_code_len": 122,
        "diff_format": "@@ -182,3 +182,3 @@\n \n-    def process_result_value(self, value: Optional[int], dialect) -> Optional[VersionUid]:\n+    def process_result_value(self, value: Optional[str], dialect) -> Optional[VersionUid]:\n         if value is not None:\n",
        "source_code_with_indent": "\n    <DED><DED>def process_result_value(self, value: Optional[int], dialect) -> Optional[VersionUid]:\n        <IND>if value is not None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED><DED>def process_result_value(self, value: Optional[str], dialect) -> Optional[VersionUid]:\n        <IND>if value is not None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "elemental-lf/benji",
    "commit": "ecc2cbb6d7ccb44ab68ec0d5ff978866ef85c0a3",
    "filename": "src/benji/database.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/elemental-lf-benji/src/benji/database.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/benji/database.py:888:16 Incompatible return type [7]: Expected `Iterator[Dict[str, Set[BlockUid]]]` but got `typing.Generator[Dict[int, Set[BlockUid]], None, None]`.",
    "message": " Expected `Iterator[Dict[str, Set[BlockUid]]]` but got `typing.Generator[Dict[int, Set[BlockUid]], None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 888,
    "warning_line": "                yield hit_list",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            false_positives = set()\n            hit_list: Dict[int, Set[BlockUid]] = {}\n            for candidate in delete_candidates:\n",
        "source_code_len": 136,
        "target_code": "            false_positives = set()\n            hit_list: Dict[str, Set[BlockUid]] = {}\n            for candidate in delete_candidates:\n",
        "target_code_len": 136,
        "diff_format": "@@ -856,3 +861,3 @@\n             false_positives = set()\n-            hit_list: Dict[int, Set[BlockUid]] = {}\n+            hit_list: Dict[str, Set[BlockUid]] = {}\n             for candidate in delete_candidates:\n",
        "source_code_with_indent": "            <DED>false_positives = set()\n            hit_list: Dict[int, Set[BlockUid]] = {}\n            for candidate in delete_candidates:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <DED>false_positives = set()\n            hit_list: Dict[str, Set[BlockUid]] = {}\n            for candidate in delete_candidates:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "elemental-lf/benji",
    "commit": "ecc2cbb6d7ccb44ab68ec0d5ff978866ef85c0a3",
    "filename": "src/benji/restapi.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/elemental-lf-benji/src/benji/restapi.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/benji/restapi.py:222:12 Incompatible return type [7]: Expected `None` but got `StringIO`.",
    "message": " Expected `None` but got `StringIO`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 222,
    "warning_line": "            return result",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def _rm(self, version_uid: str, force: fields.Bool(missing=False), keep_metadata_backup: fields.Bool(missing=False),\n            override_lock: fields.Bool(missing=False)) -> None:\n        version_uid_obj = VersionUid(version_uid)\n",
        "source_code_len": 235,
        "target_code": "    def _rm(self, version_uid: str, force: fields.Bool(missing=False), keep_metadata_backup: fields.Bool(missing=False),\n            override_lock: fields.Bool(missing=False)) -> StringIO:\n        version_uid_obj = VersionUid(version_uid)\n",
        "target_code_len": 239,
        "diff_format": "@@ -202,3 +202,3 @@\n     def _rm(self, version_uid: str, force: fields.Bool(missing=False), keep_metadata_backup: fields.Bool(missing=False),\n-            override_lock: fields.Bool(missing=False)) -> None:\n+            override_lock: fields.Bool(missing=False)) -> StringIO:\n         version_uid_obj = VersionUid(version_uid)\n",
        "source_code_with_indent": "    def _rm(self, version_uid: str, force: fields.Bool(missing=False), keep_metadata_backup: fields.Bool(missing=False),\n            override_lock: fields.Bool(missing=False)) -> None:\n        <IND>version_uid_obj = VersionUid(version_uid)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def _rm(self, version_uid: str, force: fields.Bool(missing=False), keep_metadata_backup: fields.Bool(missing=False),\n            override_lock: fields.Bool(missing=False)) -> StringIO:\n        <IND>version_uid_obj = VersionUid(version_uid)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "elemental-lf/benji",
    "commit": "ecc2cbb6d7ccb44ab68ec0d5ff978866ef85c0a3",
    "filename": "src/benji/restapi.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/elemental-lf-benji/src/benji/restapi.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/benji/restapi.py:423:12 Incompatible return type [7]: Expected `None` but got `StringIO`.",
    "message": " Expected `None` but got `StringIO`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 423,
    "warning_line": "            return result",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                                  keep_metadata_backup: fields.Bool(missing=False),\n                                  group_label: fields.Str(missing=None)) -> None:\n        benji_obj = None\n",
        "source_code_len": 191,
        "target_code": "                                  keep_metadata_backup: fields.Bool(missing=False),\n                                  group_label: fields.Str(missing=None)) -> StringIO:\n        benji_obj = None\n",
        "target_code_len": 195,
        "diff_format": "@@ -405,3 +405,3 @@\n                                   keep_metadata_backup: fields.Bool(missing=False),\n-                                  group_label: fields.Str(missing=None)) -> None:\n+                                  group_label: fields.Str(missing=None)) -> StringIO:\n         benji_obj = None\n",
        "source_code_with_indent": "                                  keep_metadata_backup: fields.Bool(missing=False),\n                                  group_label: fields.Str(missing=None)) -> None:\n        <IND>benji_obj = None\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                                  keep_metadata_backup: fields.Bool(missing=False),\n                                  group_label: fields.Str(missing=None)) -> StringIO:\n        <IND>benji_obj = None\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "elemental-lf/benji",
    "commit": "ecc2cbb6d7ccb44ab68ec0d5ff978866ef85c0a3",
    "filename": "src/benji/restapi.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/elemental-lf-benji/src/benji/restapi.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/benji/restapi.py:460:12 Incompatible return type [7]: Expected `str` but got `typing.Dict[str, typing.Any]`.",
    "message": " Expected `str` but got `typing.Dict[str, typing.Any]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 460,
    "warning_line": "            return result",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from io import StringIO\nfrom typing import List, Optional\n\n",
        "source_code_len": 59,
        "target_code": "from io import StringIO\nfrom typing import List, Optional, Dict\n\n",
        "target_code_len": 65,
        "diff_format": "@@ -3,3 +3,3 @@\n from io import StringIO\n-from typing import List, Optional\n+from typing import List, Optional, Dict\n \n",
        "source_code_with_indent": "from io import StringIO\nfrom typing import List, Optional\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from io import StringIO\nfrom typing import List, Optional, Dict\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @route('/api/v1/storages/<storage_name>/stats', method='GET')\n    def _storage_stats(self, storage_name: str) -> str:\n        benji_obj = None\n",
        "source_code_len": 147,
        "target_code": "    @route('/api/v1/storages/<storage_name>/stats', method='GET')\n    def _storage_stats(self, storage_name: str) -> Dict:\n        benji_obj = None\n",
        "target_code_len": 148,
        "diff_format": "@@ -448,3 +448,3 @@\n     @route('/api/v1/storages/<storage_name>/stats', method='GET')\n-    def _storage_stats(self, storage_name: str) -> str:\n+    def _storage_stats(self, storage_name: str) -> Dict:\n         benji_obj = None\n",
        "source_code_with_indent": "    <DED>@route('/api/v1/storages/<storage_name>/stats', method='GET')\n    def _storage_stats(self, storage_name: str) -> str:\n        <IND>benji_obj = None\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@route('/api/v1/storages/<storage_name>/stats', method='GET')\n    def _storage_stats(self, storage_name: str) -> Dict:\n        <IND>benji_obj = None\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]