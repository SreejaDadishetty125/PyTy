[
  {
    "project": "libp2p/py-libp2p",
    "commit": "28f6de37ee22d9ca6b9b97a990c0d1cb3b0019ac",
    "filename": "libp2p/network/swarm.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/libp2p-py-libp2p/libp2p/network/swarm.py",
    "file_hunks_size": 7,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "libp2p/network/swarm.py:77:37 Incompatible parameter type [6]: Expected `libp2p.typing.TProtocol` for 1st positional only parameter to call `Multiselect.add_handler` but got `str`.",
    "message": " Expected `libp2p.typing.TProtocol` for 1st positional only parameter to call `Multiselect.add_handler` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 77,
    "warning_line": "        self.multiselect.add_handler(protocol_id, stream_handler)"
  },
  {
    "project": "libp2p/py-libp2p",
    "commit": "28f6de37ee22d9ca6b9b97a990c0d1cb3b0019ac",
    "filename": "libp2p/network/swarm.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/libp2p-py-libp2p/libp2p/network/swarm.py",
    "file_hunks_size": 7,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "libp2p/network/swarm.py:112:16 Incompatible parameter type [6]: Expected `libp2p.network.connection.raw_connection_interface.IRawConnection` for 1st positional only parameter to call `TransportUpgrader.upgrade_connection` but got `libp2p.security.secure_conn_interface.ISecureConn`.",
    "message": " Expected `libp2p.network.connection.raw_connection_interface.IRawConnection` for 1st positional only parameter to call `TransportUpgrader.upgrade_connection` but got `libp2p.security.secure_conn_interface.ISecureConn`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 112,
    "warning_line": "                secured_conn, self.generic_protocol_handler, peer_id"
  },
  {
    "project": "libp2p/py-libp2p",
    "commit": "28f6de37ee22d9ca6b9b97a990c0d1cb3b0019ac",
    "filename": "libp2p/network/swarm.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/libp2p-py-libp2p/libp2p/network/swarm.py",
    "file_hunks_size": 7,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "libp2p/network/swarm.py:147:12 Incompatible parameter type [6]: Expected `Sequence[libp2p.typing.TProtocol]` for 1st positional only parameter to call `MultiselectClient.select_one_of` but got `List[str]`.",
    "message": " Expected `Sequence[libp2p.typing.TProtocol]` for 1st positional only parameter to call `MultiselectClient.select_one_of` but got `List[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 147,
    "warning_line": "            list(protocol_ids), muxed_stream"
  },
  {
    "project": "libp2p/py-libp2p",
    "commit": "28f6de37ee22d9ca6b9b97a990c0d1cb3b0019ac",
    "filename": "libp2p/network/swarm.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/libp2p-py-libp2p/libp2p/network/swarm.py",
    "file_hunks_size": 7,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "libp2p/network/swarm.py:201:20 Incompatible parameter type [6]: Expected `libp2p.network.connection.raw_connection_interface.IRawConnection` for 1st positional only parameter to call `TransportUpgrader.upgrade_connection` but got `libp2p.security.secure_conn_interface.ISecureConn`.",
    "message": " Expected `libp2p.network.connection.raw_connection_interface.IRawConnection` for 1st positional only parameter to call `TransportUpgrader.upgrade_connection` but got `libp2p.security.secure_conn_interface.ISecureConn`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 201,
    "warning_line": "                    secured_conn, self.generic_protocol_handler, peer_id"
  },
  {
    "project": "libp2p/py-libp2p",
    "commit": "28f6de37ee22d9ca6b9b97a990c0d1cb3b0019ac",
    "filename": "libp2p/network/swarm.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/libp2p-py-libp2p/libp2p/network/swarm.py",
    "file_hunks_size": 7,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "libp2p/network/swarm.py:213:58 Incompatible parameter type [6]: Expected `typing.Callable[[asyncio.streams.StreamReader, asyncio.streams.StreamWriter], None]` for 1st positional only parameter to call `ITransport.create_listener` but got `typing.Callable[[Named(reader, asyncio.streams.StreamReader), Named(writer, asyncio.streams.StreamWriter)], typing.Coroutine[typing.Any, typing.Any, None]]`.",
    "message": " Expected `typing.Callable[[asyncio.streams.StreamReader, asyncio.streams.StreamWriter], None]` for 1st positional only parameter to call `ITransport.create_listener` but got `typing.Callable[[Named(reader, asyncio.streams.StreamReader), Named(writer, asyncio.streams.StreamWriter)], typing.Coroutine[typing.Any, typing.Any, None]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 213,
    "warning_line": "                listener = self.transport.create_listener(conn_handler)"
  },
  {
    "project": "libp2p/py-libp2p",
    "commit": "28f6de37ee22d9ca6b9b97a990c0d1cb3b0019ac",
    "filename": "libp2p/pubsub/pb/rpc_pb2.py",
    "min_patch_found": false,
    "full_warning_msg": "libp2p/pubsub/pb/rpc_pb2.py:6:3 Unsupported operand [58]: `<` is not supported for operand types `typing.Union[int, str]` and `int`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "libp2p/py-libp2p",
    "commit": "28f6de37ee22d9ca6b9b97a990c0d1cb3b0019ac",
    "filename": "libp2p/pubsub/pb/rpc_pb2.py",
    "min_patch_found": false,
    "full_warning_msg": "libp2p/pubsub/pb/rpc_pb2.py:23:16 Call error [29]: `typing.Union[typing.Callable[[Named(x, typing.Any)], typing.Any], bool]` is not a function.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "libp2p/py-libp2p",
    "commit": "28f6de37ee22d9ca6b9b97a990c0d1cb3b0019ac",
    "filename": "libp2p/pubsub/pb/rpc_pb2.py",
    "min_patch_found": false,
    "full_warning_msg": "libp2p/pubsub/pb/rpc_pb2.py:98:45 Call error [29]: `typing.Union[typing.Callable[[Named(x, typing.Any)], typing.Any], bool]` is not a function.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "libp2p/py-libp2p",
    "commit": "28f6de37ee22d9ca6b9b97a990c0d1cb3b0019ac",
    "filename": "libp2p/pubsub/pb/rpc_pb2.py",
    "min_patch_found": false,
    "full_warning_msg": "libp2p/pubsub/pb/rpc_pb2.py:173:45 Call error [29]: `typing.Union[typing.Callable[[Named(x, typing.Any)], typing.Any], bool]` is not a function.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "libp2p/py-libp2p",
    "commit": "28f6de37ee22d9ca6b9b97a990c0d1cb3b0019ac",
    "filename": "libp2p/pubsub/pb/rpc_pb2.py",
    "min_patch_found": false,
    "full_warning_msg": "libp2p/pubsub/pb/rpc_pb2.py:180:45 Call error [29]: `typing.Union[typing.Callable[[Named(x, typing.Any)], typing.Any], bool]` is not a function.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "libp2p/py-libp2p",
    "commit": "28f6de37ee22d9ca6b9b97a990c0d1cb3b0019ac",
    "filename": "libp2p/pubsub/pb/rpc_pb2.py",
    "min_patch_found": false,
    "full_warning_msg": "libp2p/pubsub/pb/rpc_pb2.py:187:45 Call error [29]: `typing.Union[typing.Callable[[Named(x, typing.Any)], typing.Any], bool]` is not a function.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "libp2p/py-libp2p",
    "commit": "28f6de37ee22d9ca6b9b97a990c0d1cb3b0019ac",
    "filename": "libp2p/pubsub/pb/rpc_pb2.py",
    "min_patch_found": false,
    "full_warning_msg": "libp2p/pubsub/pb/rpc_pb2.py:201:45 Call error [29]: `typing.Union[typing.Callable[[Named(x, typing.Any)], typing.Any], bool]` is not a function.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "libp2p/py-libp2p",
    "commit": "28f6de37ee22d9ca6b9b97a990c0d1cb3b0019ac",
    "filename": "libp2p/pubsub/pb/rpc_pb2.py",
    "min_patch_found": false,
    "full_warning_msg": "libp2p/pubsub/pb/rpc_pb2.py:208:45 Call error [29]: `typing.Union[typing.Callable[[Named(x, typing.Any)], typing.Any], bool]` is not a function.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "libp2p/py-libp2p",
    "commit": "28f6de37ee22d9ca6b9b97a990c0d1cb3b0019ac",
    "filename": "libp2p/pubsub/pb/rpc_pb2.py",
    "min_patch_found": false,
    "full_warning_msg": "libp2p/pubsub/pb/rpc_pb2.py:291:45 Call error [29]: `typing.Union[typing.Callable[[Named(x, typing.Any)], typing.Any], bool]` is not a function.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "libp2p/py-libp2p",
    "commit": "28f6de37ee22d9ca6b9b97a990c0d1cb3b0019ac",
    "filename": "libp2p/pubsub/pb/rpc_pb2.py",
    "min_patch_found": false,
    "full_warning_msg": "libp2p/pubsub/pb/rpc_pb2.py:360:45 Call error [29]: `typing.Union[typing.Callable[[Named(x, typing.Any)], typing.Any], bool]` is not a function.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "libp2p/py-libp2p",
    "commit": "28f6de37ee22d9ca6b9b97a990c0d1cb3b0019ac",
    "filename": "libp2p/pubsub/pb/rpc_pb2.py",
    "min_patch_found": false,
    "full_warning_msg": "libp2p/pubsub/pb/rpc_pb2.py:391:45 Call error [29]: `typing.Union[typing.Callable[[Named(x, typing.Any)], typing.Any], bool]` is not a function.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "libp2p/py-libp2p",
    "commit": "28f6de37ee22d9ca6b9b97a990c0d1cb3b0019ac",
    "filename": "libp2p/pubsub/pb/rpc_pb2.py",
    "min_patch_found": false,
    "full_warning_msg": "libp2p/pubsub/pb/rpc_pb2.py:498:45 Call error [29]: `typing.Union[typing.Callable[[Named(x, typing.Any)], typing.Any], bool]` is not a function.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "libp2p/py-libp2p",
    "commit": "28f6de37ee22d9ca6b9b97a990c0d1cb3b0019ac",
    "filename": "libp2p/pubsub/pubsub.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/libp2p-py-libp2p/libp2p/pubsub/pubsub.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "libp2p/pubsub/pubsub.py:195:8 Incompatible return type [7]: Expected `typing.Tuple[TopicValidator, ...]` but got `typing.Generator[TopicValidator, None, None]`.",
    "message": " Expected `typing.Tuple[TopicValidator, ...]` but got `typing.Generator[TopicValidator, None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 195,
    "warning_line": "        return (",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"\"\"\n        return (\n            self.topic_validators[topic] for topic in msg.topicIDs if topic in self.topic_validators\n",
        "source_code_len": 130,
        "target_code": "        \"\"\"\n        return tuple(\n            self.topic_validators[topic] for topic in msg.topicIDs if topic in self.topic_validators\n",
        "target_code_len": 135,
        "diff_format": "@@ -194,3 +208,3 @@\n         \"\"\"\n-        return (\n+        return tuple(\n             self.topic_validators[topic] for topic in msg.topicIDs if topic in self.topic_validators\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n        return (\n            self.topic_validators[topic] for topic in msg.topicIDs if topic in self.topic_validators\n",
        "target_code_with_indent": "\n        return tuple(\n            self.topic_validators[topic] for topic in msg.topicIDs if topic in self.topic_validators\n"
      }
    ]
  },
  {
    "project": "libp2p/py-libp2p",
    "commit": "28f6de37ee22d9ca6b9b97a990c0d1cb3b0019ac",
    "filename": "libp2p/transport/tcp/tcp.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/libp2p-py-libp2p/libp2p/transport/tcp/tcp.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "libp2p/transport/tcp/tcp.py:20:23 Incompatible variable type [9]: handler_function is declared to have type `typing.Callable[[asyncio.streams.StreamReader, asyncio.streams.StreamWriter], None]` but is used as type `None`.",
    "message": " handler_function is declared to have type `typing.Callable[[asyncio.streams.StreamReader, asyncio.streams.StreamWriter], None]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 20,
    "warning_line": "    def __init__(self, handler_function: THandler = None) -> None:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    server = None\n    handler = None\n\n    def __init__(self, handler_function: THandler = None) -> None:\n        self.multiaddrs = []\n",
        "source_code_len": 134,
        "target_code": "    server = None\n\n    def __init__(self, handler_function: THandler) -> None:\n        self.multiaddrs = []\n",
        "target_code_len": 108,
        "diff_format": "@@ -17,5 +17,4 @@\n     server = None\n-    handler = None\n \n-    def __init__(self, handler_function: THandler = None) -> None:\n+    def __init__(self, handler_function: THandler) -> None:\n         self.multiaddrs = []\n",
        "source_code_with_indent": "    server = None\n    handler = None\n\n    def __init__(self, handler_function: THandler = None) -> None:\n        <IND>self.multiaddrs = []\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    server = None\n\n    def __init__(self, handler_function: THandler) -> None:\n        <IND>self.multiaddrs = []\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "libp2p/py-libp2p",
    "commit": "28f6de37ee22d9ca6b9b97a990c0d1cb3b0019ac",
    "filename": "libp2p/transport/upgrader.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/libp2p-py-libp2p/libp2p/transport/upgrader.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "libp2p/transport/upgrader.py:56:21 Incompatible parameter type [6]: Expected `ISecureConn` for 1st positional only parameter to call `Mplex.__init__` but got `IRawConnection`.",
    "message": " Expected `ISecureConn` for 1st positional only parameter to call `Mplex.__init__` but got `IRawConnection`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 56,
    "warning_line": "        return Mplex(conn, generic_protocol_handler, peer_id)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def upgrade_connection(\n        conn: IRawConnection, generic_protocol_handler: GenericProtocolHandlerFn, peer_id: ID\n    ) -> Mplex:\n",
        "source_code_len": 138,
        "target_code": "    def upgrade_connection(\n        conn: ISecureConn, generic_protocol_handler: GenericProtocolHandlerFn, peer_id: ID\n    ) -> Mplex:\n",
        "target_code_len": 135,
        "diff_format": "@@ -47,3 +49,3 @@\n     def upgrade_connection(\n-        conn: IRawConnection, generic_protocol_handler: GenericProtocolHandlerFn, peer_id: ID\n+        conn: ISecureConn, generic_protocol_handler: GenericProtocolHandlerFn, peer_id: ID\n     ) -> Mplex:\n",
        "source_code_with_indent": "    def upgrade_connection(\n        conn: IRawConnection, generic_protocol_handler: GenericProtocolHandlerFn, peer_id: ID\n    ) -> Mplex:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def upgrade_connection(\n        conn: ISecureConn, generic_protocol_handler: GenericProtocolHandlerFn, peer_id: ID\n    ) -> Mplex:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]