[
  {
    "project": "StellarCN/py-stellar-base",
    "commit": "fb330563ff2269540bfbfd662fa535080d1cc1f6",
    "filename": "stellar_sdk/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/StellarCN-py-stellar-base/stellar_sdk/__init__.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stellar_sdk/__init__.py:64:6 Unbound name [10]: Name `helpers` is used but not defined in the current scope.",
    "message": " Name `helpers` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 64,
    "warning_line": "    + helpers.__all__",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from .fee_bump_transaction_envelope import FeeBumpTransactionEnvelope\nfrom .helpers import *\nfrom .keypair import Keypair\n",
        "source_code_len": 122,
        "target_code": "from .fee_bump_transaction_envelope import FeeBumpTransactionEnvelope\nfrom .helpers import __all__ as helpers_all\nfrom .keypair import Keypair\n",
        "target_code_len": 143,
        "diff_format": "@@ -15,3 +15,3 @@\n from .fee_bump_transaction_envelope import FeeBumpTransactionEnvelope\n-from .helpers import *\n+from .helpers import __all__ as helpers_all\n from .keypair import Keypair\n",
        "source_code_with_indent": "from .fee_bump_transaction_envelope import FeeBumpTransactionEnvelope\nfrom .helpers import *\nfrom .keypair import Keypair\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from .fee_bump_transaction_envelope import FeeBumpTransactionEnvelope\nfrom .helpers import __all__ as helpers_all\nfrom .keypair import Keypair\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    ]\n    + operation_all\n    + helpers.__all__\n)\n",
        "source_code_len": 50,
        "target_code": "    ]\n    + operation_all + helpers_all\n)\n",
        "target_code_len": 42,
        "diff_format": "@@ -62,4 +62,3 @@\n     ]\n-    + operation_all\n-    + helpers.__all__\n+    + operation_all + helpers_all\n )\n",
        "source_code_with_indent": "    ]\n    + operation_all\n    + helpers.__all__\n)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    ]\n    + operation_all + helpers_all\n)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "StellarCN/py-stellar-base",
    "commit": "fb330563ff2269540bfbfd662fa535080d1cc1f6",
    "filename": "stellar_sdk/asset.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/StellarCN-py-stellar-base/stellar_sdk/asset.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stellar_sdk/asset.py:87:27 Incompatible parameter type [6]: Expected `str` for 2nd positional only parameter to call `dict.__setitem__` but got `Optional[str]`.",
    "message": " Expected `str` for 2nd positional only parameter to call `dict.__setitem__` but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 87,
    "warning_line": "            rv[\"issuer\"] = self.issuer",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"\"\"\n        rv: Dict[str, str] = {\"type\": self.type}\n        if not self.is_native():\n",
        "source_code_len": 94,
        "target_code": "        \"\"\"\n        rv: Dict[str, Optional[str]] = {\"type\": self.type}\n        if not self.is_native():\n",
        "target_code_len": 104,
        "diff_format": "@@ -83,3 +83,3 @@\n         \"\"\"\n-        rv: Dict[str, str] = {\"type\": self.type}\n+        rv: Dict[str, Optional[str]] = {\"type\": self.type}\n         if not self.is_native():\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n        rv: Dict[str, str] = {\"type\": self.type}\n        if not self.is_native():\n",
        "target_code_with_indent": "\n        rv: Dict[str, Optional[str]] = {\"type\": self.type}\n        if not self.is_native():\n"
      }
    ]
  },
  {
    "project": "StellarCN/py-stellar-base",
    "commit": "fb330563ff2269540bfbfd662fa535080d1cc1f6",
    "filename": "stellar_sdk/call_builder/base_call_builder.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/StellarCN-py-stellar-base/stellar_sdk/call_builder/base_call_builder.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stellar_sdk/call_builder/base_call_builder.py:68:32 Incompatible parameter type [6]: Expected `stellar_sdk.client.response.Response` for 1st positional only parameter to call `raise_request_exception` but got `Union[Coroutine[typing.Any, typing.Any, stellar_sdk.client.response.Response], stellar_sdk.client.response.Response]`.",
    "message": " Expected `stellar_sdk.client.response.Response` for 1st positional only parameter to call `raise_request_exception` but got `Union[Coroutine[typing.Any, typing.Any, stellar_sdk.client.response.Response], stellar_sdk.client.response.Response]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 68,
    "warning_line": "        raise_request_exception(raw_resp)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from ..client.base_sync_client import BaseSyncClient\nfrom ..exceptions import raise_request_exception, NotPageableError\n",
        "source_code_len": 120,
        "target_code": "from ..client.base_sync_client import BaseSyncClient\nfrom ..client.response import Response\nfrom ..exceptions import raise_request_exception, NotPageableError\n",
        "target_code_len": 159,
        "diff_format": "@@ -13,2 +13,3 @@\n from ..client.base_sync_client import BaseSyncClient\n+from ..client.response import Response\n from ..exceptions import raise_request_exception, NotPageableError\n",
        "source_code_with_indent": "from ..client.base_sync_client import BaseSyncClient\nfrom ..exceptions import raise_request_exception, NotPageableError\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from ..client.base_sync_client import BaseSyncClient\nfrom ..client.response import Response\nfrom ..exceptions import raise_request_exception, NotPageableError\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        raw_resp = self.client.get(url, params)\n        raise_request_exception(raw_resp)\n",
        "source_code_len": 90,
        "target_code": "        raw_resp = self.client.get(url, params)\n        assert isinstance(raw_resp, Response)\n        raise_request_exception(raw_resp)\n",
        "target_code_len": 136,
        "diff_format": "@@ -67,2 +68,3 @@\n         raw_resp = self.client.get(url, params)\n+        assert isinstance(raw_resp, Response)\n         raise_request_exception(raw_resp)\n",
        "source_code_with_indent": "        <IND>raw_resp = self.client.get(url, params)\n        raise_request_exception(raw_resp)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>raw_resp = self.client.get(url, params)\n        assert isinstance(raw_resp, Response)\n        raise_request_exception(raw_resp)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "    async def __call_async(self, url: str, params: dict = None) -> Dict[str, Any]:\n        raw_resp = await self.client.get(url, params)\n        raise_request_exception(raw_resp)\n",
        "source_code_len": 179,
        "target_code": "    async def __call_async(self, url: str, params: dict = None) -> Dict[str, Any]:\n        raw_resp = await self.client.get(url, params)  # type: ignore[misc]\n        assert isinstance(raw_resp, Response)\n        raise_request_exception(raw_resp)\n",
        "target_code_len": 247,
        "diff_format": "@@ -73,3 +75,4 @@\n     async def __call_async(self, url: str, params: dict = None) -> Dict[str, Any]:\n-        raw_resp = await self.client.get(url, params)\n+        raw_resp = await self.client.get(url, params)  # type: ignore[misc]\n+        assert isinstance(raw_resp, Response)\n         raise_request_exception(raw_resp)\n",
        "source_code_with_indent": "    <DED>async def __call_async(self, url: str, params: dict = None) -> Dict[str, Any]:\n        <IND>raw_resp = await self.client.get(url, params)\n        raise_request_exception(raw_resp)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>async def __call_async(self, url: str, params: dict = None) -> Dict[str, Any]:\n        <IND>raw_resp = await self.client.get(url, params)  # type: ignore[misc]\n        assert isinstance(raw_resp, Response)\n        raise_request_exception(raw_resp)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "StellarCN/py-stellar-base",
    "commit": "fb330563ff2269540bfbfd662fa535080d1cc1f6",
    "filename": "stellar_sdk/call_builder/base_call_builder.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/StellarCN-py-stellar-base/stellar_sdk/call_builder/base_call_builder.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "stellar_sdk/call_builder/base_call_builder.py:109:8 Incompatible return type [7]: Expected `Generator[Dict[str, typing.Any], None, None]` but got `Union[Coroutine[typing.Any, typing.Any, AsyncGenerator[Dict[str, typing.Any], None]], Generator[Dict[str, typing.Any], None, None]]`.",
    "message": " Expected `Generator[Dict[str, typing.Any], None, None]` but got `Union[Coroutine[typing.Any, typing.Any, AsyncGenerator[Dict[str, typing.Any], None]], Generator[Dict[str, typing.Any], None, None]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 109,
    "warning_line": "        return self.client.stream(url, self.params)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        url = urljoin_with_query(self.horizon_url, self.endpoint)\n        return self.client.stream(url, self.params)\n\n",
        "source_code_len": 119,
        "target_code": "        url = urljoin_with_query(self.horizon_url, self.endpoint)\n        return self.client.stream(url, self.params)  # type: ignore[return-value]\n\n",
        "target_code_len": 149,
        "diff_format": "@@ -108,3 +111,3 @@\n         url = urljoin_with_query(self.horizon_url, self.endpoint)\n-        return self.client.stream(url, self.params)\n+        return self.client.stream(url, self.params)  # type: ignore[return-value]\n \n",
        "source_code_with_indent": "        <IND>url = urljoin_with_query(self.horizon_url, self.endpoint)\n        return self.client.stream(url, self.params)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>url = urljoin_with_query(self.horizon_url, self.endpoint)\n        return self.client.stream(url, self.params)  # type: ignore[return-value]\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "StellarCN/py-stellar-base",
    "commit": "fb330563ff2269540bfbfd662fa535080d1cc1f6",
    "filename": "stellar_sdk/client/aiohttp_client.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/StellarCN-py-stellar-base/stellar_sdk/client/aiohttp_client.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stellar_sdk/client/aiohttp_client.py:93:8 Incompatible attribute type [8]: Attribute `user_agent` declared in class `AiohttpClient` has type `Dict[typing.Any, typing.Any]` but is used as type `str`.",
    "message": " Attribute `user_agent` declared in class `AiohttpClient` has type `Dict[typing.Any, typing.Any]` but is used as type `str`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 93,
    "warning_line": "        self.user_agent: dict = USER_AGENT",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        self.user_agent: dict = USER_AGENT\n        if user_agent:\n",
        "source_code_len": 67,
        "target_code": "\n        self.user_agent: Optional[str] = USER_AGENT\n        if user_agent:\n",
        "target_code_len": 76,
        "diff_format": "@@ -92,3 +92,3 @@\n \n-        self.user_agent: dict = USER_AGENT\n+        self.user_agent: Optional[str] = USER_AGENT\n         if user_agent:\n",
        "source_code_with_indent": "\n        <DED>self.user_agent: dict = USER_AGENT\n        if user_agent:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        <DED>self.user_agent: Optional[str] = USER_AGENT\n        if user_agent:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "StellarCN/py-stellar-base",
    "commit": "fb330563ff2269540bfbfd662fa535080d1cc1f6",
    "filename": "stellar_sdk/client/aiohttp_client.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/StellarCN-py-stellar-base/stellar_sdk/client/aiohttp_client.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stellar_sdk/client/aiohttp_client.py:95:12 Incompatible attribute type [8]: Attribute `user_agent` declared in class `AiohttpClient` has type `Dict[typing.Any, typing.Any]` but is used as type `str`.",
    "message": " Attribute `user_agent` declared in class `AiohttpClient` has type `Dict[typing.Any, typing.Any]` but is used as type `str`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 95,
    "warning_line": "            self.user_agent = user_agent",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        self.user_agent: dict = USER_AGENT\n        if user_agent:\n",
        "source_code_len": 67,
        "target_code": "\n        self.user_agent: Optional[str] = USER_AGENT\n        if user_agent:\n",
        "target_code_len": 76,
        "diff_format": "@@ -92,3 +92,3 @@\n \n-        self.user_agent: dict = USER_AGENT\n+        self.user_agent: Optional[str] = USER_AGENT\n         if user_agent:\n",
        "source_code_with_indent": "\n        <DED>self.user_agent: dict = USER_AGENT\n        if user_agent:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        <DED>self.user_agent: Optional[str] = USER_AGENT\n        if user_agent:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "StellarCN/py-stellar-base",
    "commit": "fb330563ff2269540bfbfd662fa535080d1cc1f6",
    "filename": "stellar_sdk/client/aiohttp_client.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/StellarCN-py-stellar-base/stellar_sdk/client/aiohttp_client.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "stellar_sdk/client/aiohttp_client.py:152:4 Inconsistent override [15]: `stellar_sdk.client.aiohttp_client.AiohttpClient.stream` overrides method defined in `BaseAsyncClient` inconsistently. Returned type `AsyncGenerator[Dict[str, typing.Any], None]` is not a subtype of the overridden return `typing.Coroutine[typing.Any, typing.Any, AsyncGenerator[Dict[str, typing.Any], None]]`.",
    "message": " `stellar_sdk.client.aiohttp_client.AiohttpClient.stream` overrides method defined in `BaseAsyncClient` inconsistently. Returned type `AsyncGenerator[Dict[str, typing.Any], None]` is not a subtype of the overridden return `typing.Coroutine[typing.Any, typing.Any, AsyncGenerator[Dict[str, typing.Any], None]]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 152,
    "warning_line": "    async def stream(",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n    async def stream(\n        self, url: str, params: Dict[str, str] = None\n",
        "source_code_len": 77,
        "target_code": "\n    async def stream(  # type: ignore[override]\n        self, url: str, params: Dict[str, str] = None\n",
        "target_code_len": 103,
        "diff_format": "@@ -151,3 +151,3 @@\n \n-    async def stream(\n+    async def stream(  # type: ignore[override]\n         self, url: str, params: Dict[str, str] = None\n",
        "source_code_with_indent": "\n    <DED><DED>async def stream(\n        self, url: str, params: Dict[str, str] = None\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED><DED>async def stream(  # type: ignore[override]\n        self, url: str, params: Dict[str, str] = None\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "StellarCN/py-stellar-base",
    "commit": "fb330563ff2269540bfbfd662fa535080d1cc1f6",
    "filename": "stellar_sdk/client/simple_requests_client.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/StellarCN-py-stellar-base/stellar_sdk/client/simple_requests_client.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stellar_sdk/client/simple_requests_client.py:67:4 Inconsistent override [15]: `stellar_sdk.client.simple_requests_client.SimpleRequestsClient.stream` overrides method defined in `BaseSyncClient` inconsistently. Returned type `None` is not a subtype of the overridden return `typing.Generator[Dict[str, typing.Any], None, None]`.",
    "message": " `stellar_sdk.client.simple_requests_client.SimpleRequestsClient.stream` overrides method defined in `BaseSyncClient` inconsistently. Returned type `None` is not a subtype of the overridden return `typing.Generator[Dict[str, typing.Any], None, None]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 67,
    "warning_line": "    def stream(",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import Union, Dict\n\n",
        "source_code_len": 32,
        "target_code": "from typing import Union, Dict, Generator, Any\n\n",
        "target_code_len": 48,
        "diff_format": "@@ -1,2 +1,2 @@\n-from typing import Union, Dict\n+from typing import Union, Dict, Generator, Any\n \n",
        "source_code_with_indent": "from typing import Union, Dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Union, Dict, Generator, Any\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self, url: str, params: Dict[str, str] = None\n    ) -> None:  # Here should return NoReturn, but it has not been implemented in PyPy.\n        \"\"\"\n",
        "source_code_len": 154,
        "target_code": "        self, url: str, params: Dict[str, str] = None\n    ) -> Generator[Dict[str, Any], None, None]:\n        \"\"\"\n",
        "target_code_len": 114,
        "diff_format": "@@ -68,3 +68,3 @@\n         self, url: str, params: Dict[str, str] = None\n-    ) -> None:  # Here should return NoReturn, but it has not been implemented in PyPy.\n+    ) -> Generator[Dict[str, Any], None, None]:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "        self, url: str, params: Dict[str, str] = None\n    ) -> None:  # Here should return NoReturn, but it has not been implemented in PyPy.\n        <IND>",
        "target_code_with_indent": "        self, url: str, params: Dict[str, str] = None\n    ) -> Generator[Dict[str, Any], None, None]:\n        <IND>"
      }
    ]
  },
  {
    "project": "StellarCN/py-stellar-base",
    "commit": "fb330563ff2269540bfbfd662fa535080d1cc1f6",
    "filename": "stellar_sdk/memo.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/StellarCN-py-stellar-base/stellar_sdk/memo.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stellar_sdk/memo.py:99:8 Incompatible attribute type [8]: Attribute `memo_text` declared in class `TextMemo` has type `bytes` but is used as type `Union[bytes, str]`.",
    "message": " Attribute `memo_text` declared in class `TextMemo` has type `bytes` but is used as type `Union[bytes, str]`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 99,
    "warning_line": "        self.memo_text: bytes = text",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        self.memo_text: bytes = text\n        if not isinstance(text, bytes):\n            self.memo_text = bytes(text, encoding=\"utf-8\")\n\n",
        "source_code_len": 138,
        "target_code": "\n        if not isinstance(text, bytes):\n            text = bytes(text, encoding=\"utf-8\")\n        self.memo_text: bytes = text\n\n",
        "target_code_len": 128,
        "diff_format": "@@ -98,5 +98,5 @@\n \n+        if not isinstance(text, bytes):\n+            text = bytes(text, encoding=\"utf-8\")\n         self.memo_text: bytes = text\n-        if not isinstance(text, bytes):\n-            self.memo_text = bytes(text, encoding=\"utf-8\")\n \n",
        "source_code_with_indent": "\n        <DED>self.memo_text: bytes = text\n        if not isinstance(text, bytes):\n            <IND>self.memo_text = bytes(text, encoding=\"utf-8\")\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        <DED>if not isinstance(text, bytes):\n            <IND>text = bytes(text, encoding=\"utf-8\")\n        <DED>self.memo_text: bytes = text\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "StellarCN/py-stellar-base",
    "commit": "fb330563ff2269540bfbfd662fa535080d1cc1f6",
    "filename": "stellar_sdk/operation/create_claimable_balance.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/StellarCN-py-stellar-base/stellar_sdk/operation/create_claimable_balance.py",
    "file_hunks_size": 13,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stellar_sdk/operation/create_claimable_balance.py:199:45 Incompatible parameter type [6]: Expected `int` for 1st positional only parameter to call `stellar_xdr.int64.Int64.__init__` but got `Optional[int]`.",
    "message": " Expected `int` for 1st positional only parameter to call `stellar_xdr.int64.Int64.__init__` but got `Optional[int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 199,
    "warning_line": "                abs_before=stellar_xdr.Int64(self.abs_before),",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ):\n            return stellar_xdr.ClaimPredicate(\n",
        "source_code_len": 58,
        "target_code": "        ):\n            assert self.abs_before is not None\n            return stellar_xdr.ClaimPredicate(\n",
        "target_code_len": 105,
        "diff_format": "@@ -196,2 +196,3 @@\n         ):\n+            assert self.abs_before is not None\n             return stellar_xdr.ClaimPredicate(\n",
        "source_code_with_indent": "        ):\n            <IND>return stellar_xdr.ClaimPredicate(\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ):\n            <IND>assert self.abs_before is not None\n            return stellar_xdr.ClaimPredicate(\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "StellarCN/py-stellar-base",
    "commit": "fb330563ff2269540bfbfd662fa535080d1cc1f6",
    "filename": "stellar_sdk/operation/create_claimable_balance.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/StellarCN-py-stellar-base/stellar_sdk/operation/create_claimable_balance.py",
    "file_hunks_size": 13,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stellar_sdk/operation/create_claimable_balance.py:207:45 Incompatible parameter type [6]: Expected `int` for 1st positional only parameter to call `stellar_xdr.int64.Int64.__init__` but got `Optional[int]`.",
    "message": " Expected `int` for 1st positional only parameter to call `stellar_xdr.int64.Int64.__init__` but got `Optional[int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 207,
    "warning_line": "                rel_before=stellar_xdr.Int64(self.rel_before),",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ):\n            return stellar_xdr.ClaimPredicate(\n",
        "source_code_len": 58,
        "target_code": "        ):\n            assert self.rel_before is not None\n            return stellar_xdr.ClaimPredicate(\n",
        "target_code_len": 105,
        "diff_format": "@@ -204,2 +205,3 @@\n         ):\n+            assert self.rel_before is not None\n             return stellar_xdr.ClaimPredicate(\n",
        "source_code_with_indent": "        ):\n            <IND>return stellar_xdr.ClaimPredicate(\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ):\n            <IND>assert self.rel_before is not None\n            return stellar_xdr.ClaimPredicate(\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "StellarCN/py-stellar-base",
    "commit": "fb330563ff2269540bfbfd662fa535080d1cc1f6",
    "filename": "stellar_sdk/operation/create_claimable_balance.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/StellarCN-py-stellar-base/stellar_sdk/operation/create_claimable_balance.py",
    "file_hunks_size": 13,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stellar_sdk/operation/create_claimable_balance.py:261:44 Incompatible parameter type [6]: Expected `stellar_xdr.claim_predicate.ClaimPredicate` for 1st positional only parameter to call `ClaimPredicate.from_xdr_object` but got `Optional[stellar_xdr.claim_predicate.ClaimPredicate]`.",
    "message": " Expected `stellar_xdr.claim_predicate.ClaimPredicate` for 1st positional only parameter to call `ClaimPredicate.from_xdr_object` but got `Optional[stellar_xdr.claim_predicate.ClaimPredicate]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 261,
    "warning_line": "            predicate = cls.from_xdr_object(not_predicate)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            not_predicate = xdr_object.not_predicate\n            predicate = cls.from_xdr_object(not_predicate)\n",
        "source_code_len": 112,
        "target_code": "            not_predicate = xdr_object.not_predicate\n            assert not_predicate is not None\n            predicate = cls.from_xdr_object(not_predicate)\n",
        "target_code_len": 157,
        "diff_format": "@@ -260,2 +267,3 @@\n             not_predicate = xdr_object.not_predicate\n+            assert not_predicate is not None\n             predicate = cls.from_xdr_object(not_predicate)\n",
        "source_code_with_indent": "            <IND>not_predicate = xdr_object.not_predicate\n            predicate = cls.from_xdr_object(not_predicate)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <IND>not_predicate = xdr_object.not_predicate\n            assert not_predicate is not None\n            predicate = cls.from_xdr_object(not_predicate)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "StellarCN/py-stellar-base",
    "commit": "fb330563ff2269540bfbfd662fa535080d1cc1f6",
    "filename": "stellar_sdk/operation/manage_data.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/StellarCN-py-stellar-base/stellar_sdk/operation/manage_data.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stellar_sdk/operation/manage_data.py:50:47 Incompatible parameter type [6]: Expected `bytes` for 1st positional only parameter to call `stellar_xdr.data_value.DataValue.__init__` but got `Union[bytes, str]`.",
    "message": " Expected `bytes` for 1st positional only parameter to call `stellar_xdr.data_value.DataValue.__init__` but got `Union[bytes, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 50,
    "warning_line": "            data_value = stellar_xdr.DataValue(self.data_value)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            data_value = data_value.encode()\n        self.data_value: Union[str, bytes, None] = data_value\n\n",
        "source_code_len": 108,
        "target_code": "            data_value = data_value.encode()\n        self.data_value: Union[bytes, None] = data_value\n\n",
        "target_code_len": 103,
        "diff_format": "@@ -36,3 +36,3 @@\n             data_value = data_value.encode()\n-        self.data_value: Union[str, bytes, None] = data_value\n+        self.data_value: Union[bytes, None] = data_value\n \n",
        "source_code_with_indent": "            <IND>data_value = data_value.encode()\n        <DED>self.data_value: Union[str, bytes, None] = data_value\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <IND>data_value = data_value.encode()\n        <DED>self.data_value: Union[bytes, None] = data_value\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "StellarCN/py-stellar-base",
    "commit": "fb330563ff2269540bfbfd662fa535080d1cc1f6",
    "filename": "stellar_sdk/operation/operation.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/StellarCN-py-stellar-base/stellar_sdk/operation/operation.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stellar_sdk/operation/operation.py:51:8 Incompatible return type [7]: Expected `str` but got `Optional[str]`.",
    "message": " Expected `str` but got `Optional[str]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 51,
    "warning_line": "        return self._source",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @property\n    def source(self) -> str:\n        return self._source\n",
        "source_code_len": 71,
        "target_code": "    @property\n    @abstractmethod\n    def TYPE_CODE(self) -> stellar_xdr.OperationType:\n        pass\n\n    @property\n    def source(self) -> Optional[str]:\n        return self._source\n",
        "target_code_len": 183,
        "diff_format": "@@ -49,3 +47,8 @@\n     @property\n-    def source(self) -> str:\n+    @abstractmethod\n+    def TYPE_CODE(self) -> stellar_xdr.OperationType:\n+        pass\n+\n+    @property\n+    def source(self) -> Optional[str]:\n         return self._source\n",
        "source_code_with_indent": "    <DED>@property\n    def source(self) -> str:\n        <IND>return self._source\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@property\n    @abstractmethod\n    def TYPE_CODE(self) -> stellar_xdr.OperationType:\n        <IND>pass\n\n    <DED>@property\n    def source(self) -> Optional[str]:\n        <IND>return self._source\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "StellarCN/py-stellar-base",
    "commit": "fb330563ff2269540bfbfd662fa535080d1cc1f6",
    "filename": "stellar_sdk/operation/revoke_sponsorship.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/StellarCN-py-stellar-base/stellar_sdk/operation/revoke_sponsorship.py",
    "file_hunks_size": 12,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stellar_sdk/operation/revoke_sponsorship.py:273:40 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `Keypair.from_public_key` but got `Optional[str]`.",
    "message": " Expected `str` for 1st positional only parameter to call `Keypair.from_public_key` but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 273,
    "warning_line": "                Keypair.from_public_key(self.account_id).xdr_account_id()",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        if self.revoke_sponsorship_type == RevokeSponsorshipType.ACCOUNT:\n            account = stellar_xdr.LedgerKeyAccount(\n",
        "source_code_len": 126,
        "target_code": "        if self.revoke_sponsorship_type == RevokeSponsorshipType.ACCOUNT:\n            assert self.account_id is not None\n            account = stellar_xdr.LedgerKeyAccount(\n",
        "target_code_len": 173,
        "diff_format": "@@ -271,2 +271,3 @@\n         if self.revoke_sponsorship_type == RevokeSponsorshipType.ACCOUNT:\n+            assert self.account_id is not None\n             account = stellar_xdr.LedgerKeyAccount(\n",
        "source_code_with_indent": "        <IND>if self.revoke_sponsorship_type == RevokeSponsorshipType.ACCOUNT:\n            <IND>account = stellar_xdr.LedgerKeyAccount(\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>if self.revoke_sponsorship_type == RevokeSponsorshipType.ACCOUNT:\n            <IND>assert self.account_id is not None\n            account = stellar_xdr.LedgerKeyAccount(\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "StellarCN/py-stellar-base",
    "commit": "fb330563ff2269540bfbfd662fa535080d1cc1f6",
    "filename": "stellar_sdk/operation/revoke_sponsorship.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/StellarCN-py-stellar-base/stellar_sdk/operation/revoke_sponsorship.py",
    "file_hunks_size": 12,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stellar_sdk/operation/revoke_sponsorship.py:319:57 Incompatible parameter type [6]: Expected `typing.Union[bytes, str]` for 1st positional only parameter to call `binascii.unhexlify` but got `Optional[str]`.",
    "message": " Expected `typing.Union[bytes, str]` for 1st positional only parameter to call `binascii.unhexlify` but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 319,
    "warning_line": "            claimable_balance_bytes = binascii.unhexlify(self.claimable_balance_id)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        elif self.revoke_sponsorship_type == RevokeSponsorshipType.CLAIMABLE_BALANCE:\n            claimable_balance_bytes = binascii.unhexlify(self.claimable_balance_id)\n",
        "source_code_len": 170,
        "target_code": "        elif self.revoke_sponsorship_type == RevokeSponsorshipType.CLAIMABLE_BALANCE:\n            assert self.claimable_balance_id is not None\n            claimable_balance_bytes = binascii.unhexlify(self.claimable_balance_id)\n",
        "target_code_len": 227,
        "diff_format": "@@ -318,2 +322,3 @@\n         elif self.revoke_sponsorship_type == RevokeSponsorshipType.CLAIMABLE_BALANCE:\n+            assert self.claimable_balance_id is not None\n             claimable_balance_bytes = binascii.unhexlify(self.claimable_balance_id)\n",
        "source_code_with_indent": "        <DED>elif self.revoke_sponsorship_type == RevokeSponsorshipType.CLAIMABLE_BALANCE:\n            <IND>claimable_balance_bytes = binascii.unhexlify(self.claimable_balance_id)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>elif self.revoke_sponsorship_type == RevokeSponsorshipType.CLAIMABLE_BALANCE:\n            <IND>assert self.claimable_balance_id is not None\n            claimable_balance_bytes = binascii.unhexlify(self.claimable_balance_id)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "StellarCN/py-stellar-base",
    "commit": "fb330563ff2269540bfbfd662fa535080d1cc1f6",
    "filename": "stellar_sdk/operation/set_options.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/StellarCN-py-stellar-base/stellar_sdk/operation/set_options.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "stellar_sdk/operation/set_options.py:96:8 Incompatible attribute type [8]: Attribute `clear_flags` declared in class `SetOptions` has type `int` but is used as type `Union[enum.Flag, int]`.",
    "message": " Attribute `clear_flags` declared in class `SetOptions` has type `int` but is used as type `Union[enum.Flag, int]`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 96,
    "warning_line": "        self.clear_flags: int = clear_flags",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n        self.inflation_dest: str = inflation_dest\n        self.clear_flags: int = clear_flags\n        self.set_flags: int = set_flags\n        self.master_weight: int = master_weight\n        self.low_threshold: int = low_threshold\n        self.med_threshold: int = med_threshold\n        self.high_threshold: int = high_threshold\n        self.home_domain: str = home_domain\n        self.signer: Optional[Signer] = signer\n",
        "source_code_len": 420,
        "target_code": "\n        self.inflation_dest = inflation_dest\n        self.clear_flags: int = clear_flags  # type: ignore[assignment]\n        self.set_flags: int = set_flags  # type: ignore[assignment]\n        self.master_weight = master_weight\n        self.low_threshold = low_threshold\n        self.med_threshold = med_threshold\n        self.high_threshold = high_threshold\n        self.home_domain = home_domain\n        self.signer: Optional[Signer] = signer\n",
        "target_code_len": 446,
        "diff_format": "@@ -94,10 +94,10 @@\n \n-        self.inflation_dest: str = inflation_dest\n-        self.clear_flags: int = clear_flags\n-        self.set_flags: int = set_flags\n-        self.master_weight: int = master_weight\n-        self.low_threshold: int = low_threshold\n-        self.med_threshold: int = med_threshold\n-        self.high_threshold: int = high_threshold\n-        self.home_domain: str = home_domain\n+        self.inflation_dest = inflation_dest\n+        self.clear_flags: int = clear_flags  # type: ignore[assignment]\n+        self.set_flags: int = set_flags  # type: ignore[assignment]\n+        self.master_weight = master_weight\n+        self.low_threshold = low_threshold\n+        self.med_threshold = med_threshold\n+        self.high_threshold = high_threshold\n+        self.home_domain = home_domain\n         self.signer: Optional[Signer] = signer\n",
        "source_code_with_indent": "\n        <DED>self.inflation_dest: str = inflation_dest\n        self.clear_flags: int = clear_flags\n        self.set_flags: int = set_flags\n        self.master_weight: int = master_weight\n        self.low_threshold: int = low_threshold\n        self.med_threshold: int = med_threshold\n        self.high_threshold: int = high_threshold\n        self.home_domain: str = home_domain\n        self.signer: Optional[Signer] = signer\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        <DED>self.inflation_dest = inflation_dest\n        self.clear_flags: int = clear_flags  # type: ignore[assignment]\n        self.set_flags: int = set_flags  # type: ignore[assignment]\n        self.master_weight = master_weight\n        self.low_threshold = low_threshold\n        self.med_threshold = med_threshold\n        self.high_threshold = high_threshold\n        self.home_domain = home_domain\n        self.signer: Optional[Signer] = signer\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "StellarCN/py-stellar-base",
    "commit": "fb330563ff2269540bfbfd662fa535080d1cc1f6",
    "filename": "stellar_sdk/operation/set_options.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/StellarCN-py-stellar-base/stellar_sdk/operation/set_options.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "stellar_sdk/operation/set_options.py:97:8 Incompatible attribute type [8]: Attribute `set_flags` declared in class `SetOptions` has type `int` but is used as type `Union[enum.Flag, int]`.",
    "message": " Attribute `set_flags` declared in class `SetOptions` has type `int` but is used as type `Union[enum.Flag, int]`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 97,
    "warning_line": "        self.set_flags: int = set_flags",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n        self.inflation_dest: str = inflation_dest\n        self.clear_flags: int = clear_flags\n        self.set_flags: int = set_flags\n        self.master_weight: int = master_weight\n        self.low_threshold: int = low_threshold\n        self.med_threshold: int = med_threshold\n        self.high_threshold: int = high_threshold\n        self.home_domain: str = home_domain\n        self.signer: Optional[Signer] = signer\n",
        "source_code_len": 420,
        "target_code": "\n        self.inflation_dest = inflation_dest\n        self.clear_flags: int = clear_flags  # type: ignore[assignment]\n        self.set_flags: int = set_flags  # type: ignore[assignment]\n        self.master_weight = master_weight\n        self.low_threshold = low_threshold\n        self.med_threshold = med_threshold\n        self.high_threshold = high_threshold\n        self.home_domain = home_domain\n        self.signer: Optional[Signer] = signer\n",
        "target_code_len": 446,
        "diff_format": "@@ -94,10 +94,10 @@\n \n-        self.inflation_dest: str = inflation_dest\n-        self.clear_flags: int = clear_flags\n-        self.set_flags: int = set_flags\n-        self.master_weight: int = master_weight\n-        self.low_threshold: int = low_threshold\n-        self.med_threshold: int = med_threshold\n-        self.high_threshold: int = high_threshold\n-        self.home_domain: str = home_domain\n+        self.inflation_dest = inflation_dest\n+        self.clear_flags: int = clear_flags  # type: ignore[assignment]\n+        self.set_flags: int = set_flags  # type: ignore[assignment]\n+        self.master_weight = master_weight\n+        self.low_threshold = low_threshold\n+        self.med_threshold = med_threshold\n+        self.high_threshold = high_threshold\n+        self.home_domain = home_domain\n         self.signer: Optional[Signer] = signer\n",
        "source_code_with_indent": "\n        <DED>self.inflation_dest: str = inflation_dest\n        self.clear_flags: int = clear_flags\n        self.set_flags: int = set_flags\n        self.master_weight: int = master_weight\n        self.low_threshold: int = low_threshold\n        self.med_threshold: int = med_threshold\n        self.high_threshold: int = high_threshold\n        self.home_domain: str = home_domain\n        self.signer: Optional[Signer] = signer\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        <DED>self.inflation_dest = inflation_dest\n        self.clear_flags: int = clear_flags  # type: ignore[assignment]\n        self.set_flags: int = set_flags  # type: ignore[assignment]\n        self.master_weight = master_weight\n        self.low_threshold = low_threshold\n        self.med_threshold = med_threshold\n        self.high_threshold = high_threshold\n        self.home_domain = home_domain\n        self.signer: Optional[Signer] = signer\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "StellarCN/py-stellar-base",
    "commit": "fb330563ff2269540bfbfd662fa535080d1cc1f6",
    "filename": "stellar_sdk/sep/mnemonic.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/StellarCN-py-stellar-base/stellar_sdk/sep/mnemonic.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stellar_sdk/sep/mnemonic.py:55:8 Incompatible variable type [9]: passphrase is declared to have type `str` but is used as type `bytes`.",
    "message": " passphrase is declared to have type `str` but is used as type `bytes`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 55,
    "warning_line": "        passphrase = passphrase.encode(\"utf-8\")",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        passphrase = \"mnemonic\" + passphrase\n        mnemonic = mnemonic.encode(\"utf-8\")\n        passphrase = passphrase.encode(\"utf-8\")\n        stretched = hashlib.pbkdf2_hmac(\"sha512\", mnemonic, passphrase, PBKDF2_ROUNDS)\n        return cls.derive(stretched[:64], index)\n",
        "source_code_len": 273,
        "target_code": "        passphrase = \"mnemonic\" + passphrase\n        mnemonic_bytes = mnemonic.encode(\"utf-8\")\n        passphrase_bytes = passphrase.encode(\"utf-8\")\n        stretched = hashlib.pbkdf2_hmac(\"sha512\", mnemonic_bytes, passphrase_bytes, PBKDF2_ROUNDS)\n        return cls.derive(stretched[:64], index)\n",
        "target_code_len": 297,
        "diff_format": "@@ -53,5 +53,5 @@\n         passphrase = \"mnemonic\" + passphrase\n-        mnemonic = mnemonic.encode(\"utf-8\")\n-        passphrase = passphrase.encode(\"utf-8\")\n-        stretched = hashlib.pbkdf2_hmac(\"sha512\", mnemonic, passphrase, PBKDF2_ROUNDS)\n+        mnemonic_bytes = mnemonic.encode(\"utf-8\")\n+        passphrase_bytes = passphrase.encode(\"utf-8\")\n+        stretched = hashlib.pbkdf2_hmac(\"sha512\", mnemonic_bytes, passphrase_bytes, PBKDF2_ROUNDS)\n         return cls.derive(stretched[:64], index)\n",
        "source_code_with_indent": "        passphrase = \"mnemonic\" + passphrase\n        mnemonic = mnemonic.encode(\"utf-8\")\n        passphrase = passphrase.encode(\"utf-8\")\n        stretched = hashlib.pbkdf2_hmac(\"sha512\", mnemonic, passphrase, PBKDF2_ROUNDS)\n        return cls.derive(stretched[:64], index)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        passphrase = \"mnemonic\" + passphrase\n        mnemonic_bytes = mnemonic.encode(\"utf-8\")\n        passphrase_bytes = passphrase.encode(\"utf-8\")\n        stretched = hashlib.pbkdf2_hmac(\"sha512\", mnemonic_bytes, passphrase_bytes, PBKDF2_ROUNDS)\n        return cls.derive(stretched[:64], index)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "StellarCN/py-stellar-base",
    "commit": "fb330563ff2269540bfbfd662fa535080d1cc1f6",
    "filename": "stellar_sdk/sep/mnemonic.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/StellarCN-py-stellar-base/stellar_sdk/sep/mnemonic.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stellar_sdk/sep/mnemonic.py:56:60 Incompatible parameter type [6]: Expected `Union[array.array[typing.Any], bytearray, bytes, memoryview, mmap.mmap]` for 3rd positional only parameter to call `hashlib.pbkdf2_hmac` but got `str`.",
    "message": " Expected `Union[array.array[typing.Any], bytearray, bytes, memoryview, mmap.mmap]` for 3rd positional only parameter to call `hashlib.pbkdf2_hmac` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 56,
    "warning_line": "        stretched = hashlib.pbkdf2_hmac(\"sha512\", mnemonic, passphrase, PBKDF2_ROUNDS)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        passphrase = \"mnemonic\" + passphrase\n        mnemonic = mnemonic.encode(\"utf-8\")\n        passphrase = passphrase.encode(\"utf-8\")\n        stretched = hashlib.pbkdf2_hmac(\"sha512\", mnemonic, passphrase, PBKDF2_ROUNDS)\n        return cls.derive(stretched[:64], index)\n",
        "source_code_len": 273,
        "target_code": "        passphrase = \"mnemonic\" + passphrase\n        mnemonic_bytes = mnemonic.encode(\"utf-8\")\n        passphrase_bytes = passphrase.encode(\"utf-8\")\n        stretched = hashlib.pbkdf2_hmac(\"sha512\", mnemonic_bytes, passphrase_bytes, PBKDF2_ROUNDS)\n        return cls.derive(stretched[:64], index)\n",
        "target_code_len": 297,
        "diff_format": "@@ -53,5 +53,5 @@\n         passphrase = \"mnemonic\" + passphrase\n-        mnemonic = mnemonic.encode(\"utf-8\")\n-        passphrase = passphrase.encode(\"utf-8\")\n-        stretched = hashlib.pbkdf2_hmac(\"sha512\", mnemonic, passphrase, PBKDF2_ROUNDS)\n+        mnemonic_bytes = mnemonic.encode(\"utf-8\")\n+        passphrase_bytes = passphrase.encode(\"utf-8\")\n+        stretched = hashlib.pbkdf2_hmac(\"sha512\", mnemonic_bytes, passphrase_bytes, PBKDF2_ROUNDS)\n         return cls.derive(stretched[:64], index)\n",
        "source_code_with_indent": "        passphrase = \"mnemonic\" + passphrase\n        mnemonic = mnemonic.encode(\"utf-8\")\n        passphrase = passphrase.encode(\"utf-8\")\n        stretched = hashlib.pbkdf2_hmac(\"sha512\", mnemonic, passphrase, PBKDF2_ROUNDS)\n        return cls.derive(stretched[:64], index)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        passphrase = \"mnemonic\" + passphrase\n        mnemonic_bytes = mnemonic.encode(\"utf-8\")\n        passphrase_bytes = passphrase.encode(\"utf-8\")\n        stretched = hashlib.pbkdf2_hmac(\"sha512\", mnemonic_bytes, passphrase_bytes, PBKDF2_ROUNDS)\n        return cls.derive(stretched[:64], index)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "StellarCN/py-stellar-base",
    "commit": "fb330563ff2269540bfbfd662fa535080d1cc1f6",
    "filename": "stellar_sdk/sep/stellar_toml.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/StellarCN-py-stellar-base/stellar_sdk/sep/stellar_toml.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "stellar_sdk/sep/stellar_toml.py:75:4 Incompatible return type [7]: Expected `Dict[str, typing.Any]` but got `typing.MutableMapping[str, typing.Any]`.",
    "message": " Expected `Dict[str, typing.Any]` but got `typing.MutableMapping[str, typing.Any]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 75,
    "warning_line": "    return toml.loads(resp)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "    resp = raw_resp.text\n    return toml.loads(resp)\n",
        "source_code_len": 53,
        "target_code": "    resp = raw_resp.text\n    return toml.loads(resp)  # type: ignore[return-value]\n",
        "target_code_len": 83,
        "diff_format": "@@ -74,2 +74,2 @@\n     resp = raw_resp.text\n-    return toml.loads(resp)\n+    return toml.loads(resp)  # type: ignore[return-value]\n",
        "source_code_with_indent": "    <DED>resp = raw_resp.text\n    return toml.loads(resp)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>resp = raw_resp.text\n    return toml.loads(resp)  # type: ignore[return-value]\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "StellarCN/py-stellar-base",
    "commit": "fb330563ff2269540bfbfd662fa535080d1cc1f6",
    "filename": "stellar_sdk/sep/stellar_uri.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/StellarCN-py-stellar-base/stellar_sdk/sep/stellar_uri.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stellar_sdk/sep/stellar_uri.py:137:12 Incompatible return type [7]: Expected `Union[Tuple[None, None], Tuple[str, str]]` but got `Tuple[str, Union[bytes, int, str]]`.",
    "message": " Expected `Union[Tuple[None, None], Tuple[str, str]]` but got `Tuple[str, Union[bytes, int, str]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 137,
    "warning_line": "            return memo_type, memo_value",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @staticmethod\n    def _encode_memo(memo) -> Union[Tuple[str, str], Tuple[None, None]]:\n        if memo and not isinstance(memo, NoneMemo):\n            if isinstance(memo, TextMemo):\n                memo_value = memo.memo_text\n                memo_type = \"MEMO_TEXT\"\n            elif isinstance(memo, IdMemo):\n                memo_value = memo.memo_id\n                memo_type = \"MEMO_ID\"\n            elif isinstance(memo, HashMemo):\n                memo_value = base64.b64encode(memo.memo_hash).decode()\n                memo_type = \"MEMO_HASH\"\n            elif isinstance(memo, ReturnHashMemo):\n                memo_value = base64.b64encode(memo.memo_return).decode()\n                memo_type = \"MEMO_RETURN\"\n            else:\n                raise ValueError(\"Invalid memo.\")\n            return memo_type, memo_value\n        return None, None\n",
        "source_code_len": 850,
        "target_code": "    @staticmethod\n    def _encode_memo(memo) -> Union[Tuple[str, Union[str, int]], Tuple[None, None]]:\n        if memo and not isinstance(memo, NoneMemo):\n            if isinstance(memo, TextMemo):\n                memo_text = memo.memo_text.decode()  # memo text cant decode?\n                memo_type = \"MEMO_TEXT\"\n                return memo_type, memo_text\n            elif isinstance(memo, IdMemo):\n                memo_id = memo.memo_id\n                memo_type = \"MEMO_ID\"\n                return memo_type, memo_id\n            elif isinstance(memo, HashMemo):\n                memo_hash = base64.b64encode(memo.memo_hash).decode()\n                memo_type = \"MEMO_HASH\"\n                return memo_type, memo_hash\n            elif isinstance(memo, ReturnHashMemo):\n                memo_return = base64.b64encode(memo.memo_return).decode()\n                memo_type = \"MEMO_RETURN\"\n                return memo_type, memo_return\n            else:\n                raise ValueError(\"Invalid memo.\")\n        return None, None\n",
        "target_code_len": 1028,
        "diff_format": "@@ -120,19 +120,22 @@\n     @staticmethod\n-    def _encode_memo(memo) -> Union[Tuple[str, str], Tuple[None, None]]:\n+    def _encode_memo(memo) -> Union[Tuple[str, Union[str, int]], Tuple[None, None]]:\n         if memo and not isinstance(memo, NoneMemo):\n             if isinstance(memo, TextMemo):\n-                memo_value = memo.memo_text\n+                memo_text = memo.memo_text.decode()  # memo text cant decode?\n                 memo_type = \"MEMO_TEXT\"\n+                return memo_type, memo_text\n             elif isinstance(memo, IdMemo):\n-                memo_value = memo.memo_id\n+                memo_id = memo.memo_id\n                 memo_type = \"MEMO_ID\"\n+                return memo_type, memo_id\n             elif isinstance(memo, HashMemo):\n-                memo_value = base64.b64encode(memo.memo_hash).decode()\n+                memo_hash = base64.b64encode(memo.memo_hash).decode()\n                 memo_type = \"MEMO_HASH\"\n+                return memo_type, memo_hash\n             elif isinstance(memo, ReturnHashMemo):\n-                memo_value = base64.b64encode(memo.memo_return).decode()\n+                memo_return = base64.b64encode(memo.memo_return).decode()\n                 memo_type = \"MEMO_RETURN\"\n+                return memo_type, memo_return\n             else:\n                 raise ValueError(\"Invalid memo.\")\n-            return memo_type, memo_value\n         return None, None\n",
        "source_code_with_indent": "    <DED>@staticmethod\n    def _encode_memo(memo) -> Union[Tuple[str, str], Tuple[None, None]]:\n        <IND>if memo and not isinstance(memo, NoneMemo):\n            <IND>if isinstance(memo, TextMemo):\n                <IND>memo_value = memo.memo_text\n                memo_type = \"MEMO_TEXT\"\n            <DED>elif isinstance(memo, IdMemo):\n                <IND>memo_value = memo.memo_id\n                memo_type = \"MEMO_ID\"\n            <DED>elif isinstance(memo, HashMemo):\n                <IND>memo_value = base64.b64encode(memo.memo_hash).decode()\n                memo_type = \"MEMO_HASH\"\n            <DED>elif isinstance(memo, ReturnHashMemo):\n                <IND>memo_value = base64.b64encode(memo.memo_return).decode()\n                memo_type = \"MEMO_RETURN\"\n            <DED>else:\n                <IND>raise ValueError(\"Invalid memo.\")\n            <DED>return memo_type, memo_value\n        <DED>return None, None\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@staticmethod\n    def _encode_memo(memo) -> Union[Tuple[str, Union[str, int]], Tuple[None, None]]:\n        <IND>if memo and not isinstance(memo, NoneMemo):\n            <IND>if isinstance(memo, TextMemo):\n                <IND>memo_text = memo.memo_text.decode()  # memo text cant decode?\n                memo_type = \"MEMO_TEXT\"\n                return memo_type, memo_text\n            <DED>elif isinstance(memo, IdMemo):\n                <IND>memo_id = memo.memo_id\n                memo_type = \"MEMO_ID\"\n                return memo_type, memo_id\n            <DED>elif isinstance(memo, HashMemo):\n                <IND>memo_hash = base64.b64encode(memo.memo_hash).decode()\n                memo_type = \"MEMO_HASH\"\n                return memo_type, memo_hash\n            <DED>elif isinstance(memo, ReturnHashMemo):\n                <IND>memo_return = base64.b64encode(memo.memo_return).decode()\n                memo_type = \"MEMO_RETURN\"\n                return memo_type, memo_return\n            <DED>else:\n                <IND>raise ValueError(\"Invalid memo.\")\n        <DED><DED>return None, None\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "StellarCN/py-stellar-base",
    "commit": "fb330563ff2269540bfbfd662fa535080d1cc1f6",
    "filename": "stellar_sdk/sep/stellar_uri.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/StellarCN-py-stellar-base/stellar_sdk/sep/stellar_uri.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stellar_sdk/sep/stellar_uri.py:211:39 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `StellarUri._parse_callback` but got `Optional[str]`.",
    "message": " Expected `str` for 1st positional only parameter to call `StellarUri._parse_callback` but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 211,
    "warning_line": "        callback = cls._parse_callback(query.get(\"callback\"))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @staticmethod\n    def _parse_callback(callback: str) -> Optional[str]:\n        if callback is None:\n",
        "source_code_len": 104,
        "target_code": "    @staticmethod\n    def _parse_callback(callback: Optional[str]) -> Optional[str]:\n        if callback is None:\n",
        "target_code_len": 114,
        "diff_format": "@@ -61,3 +61,3 @@\n     @staticmethod\n-    def _parse_callback(callback: str) -> Optional[str]:\n+    def _parse_callback(callback: Optional[str]) -> Optional[str]:\n         if callback is None:\n",
        "source_code_with_indent": "    <DED>@staticmethod\n    def _parse_callback(callback: str) -> Optional[str]:\n        <IND>if callback is None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@staticmethod\n    def _parse_callback(callback: Optional[str]) -> Optional[str]:\n        <IND>if callback is None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "StellarCN/py-stellar-base",
    "commit": "fb330563ff2269540bfbfd662fa535080d1cc1f6",
    "filename": "stellar_sdk/sep/stellar_uri.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/StellarCN-py-stellar-base/stellar_sdk/sep/stellar_uri.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stellar_sdk/sep/stellar_uri.py:219:32 Incompatible parameter type [6]: Expected `str` for 1st parameter `memo_type` to call `PayStellarUri._decode_memo` but got `Optional[str]`.",
    "message": " Expected `str` for 1st parameter `memo_type` to call `PayStellarUri._decode_memo` but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 219,
    "warning_line": "        memo = cls._decode_memo(memo_type=memo_type, memo_value=memo_value)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @staticmethod\n    def _decode_memo(memo_type: str, memo_value: str) -> Optional[Memo]:\n        if memo_type is None:\n",
        "source_code_len": 121,
        "target_code": "    @staticmethod\n    def _decode_memo(memo_type: Optional[str], memo_value: Optional[str]) -> Optional[Memo]:\n        if memo_type is None:\n",
        "target_code_len": 141,
        "diff_format": "@@ -140,3 +143,3 @@\n     @staticmethod\n-    def _decode_memo(memo_type: str, memo_value: str) -> Optional[Memo]:\n+    def _decode_memo(memo_type: Optional[str], memo_value: Optional[str]) -> Optional[Memo]:\n         if memo_type is None:\n",
        "source_code_with_indent": "    <DED>@staticmethod\n    def _decode_memo(memo_type: str, memo_value: str) -> Optional[Memo]:\n        <IND>if memo_type is None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@staticmethod\n    def _decode_memo(memo_type: Optional[str], memo_value: Optional[str]) -> Optional[Memo]:\n        <IND>if memo_type is None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "StellarCN/py-stellar-base",
    "commit": "fb330563ff2269540bfbfd662fa535080d1cc1f6",
    "filename": "stellar_sdk/sep/stellar_uri.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/StellarCN-py-stellar-base/stellar_sdk/sep/stellar_uri.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stellar_sdk/sep/stellar_uri.py:219:53 Incompatible parameter type [6]: Expected `str` for 2nd parameter `memo_value` to call `PayStellarUri._decode_memo` but got `Optional[str]`.",
    "message": " Expected `str` for 2nd parameter `memo_value` to call `PayStellarUri._decode_memo` but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 219,
    "warning_line": "        memo = cls._decode_memo(memo_type=memo_type, memo_value=memo_value)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @staticmethod\n    def _decode_memo(memo_type: str, memo_value: str) -> Optional[Memo]:\n        if memo_type is None:\n",
        "source_code_len": 121,
        "target_code": "    @staticmethod\n    def _decode_memo(memo_type: Optional[str], memo_value: Optional[str]) -> Optional[Memo]:\n        if memo_type is None:\n",
        "target_code_len": 141,
        "diff_format": "@@ -140,3 +143,3 @@\n     @staticmethod\n-    def _decode_memo(memo_type: str, memo_value: str) -> Optional[Memo]:\n+    def _decode_memo(memo_type: Optional[str], memo_value: Optional[str]) -> Optional[Memo]:\n         if memo_type is None:\n",
        "source_code_with_indent": "    <DED>@staticmethod\n    def _decode_memo(memo_type: str, memo_value: str) -> Optional[Memo]:\n        <IND>if memo_type is None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@staticmethod\n    def _decode_memo(memo_type: Optional[str], memo_value: Optional[str]) -> Optional[Memo]:\n        <IND>if memo_type is None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "StellarCN/py-stellar-base",
    "commit": "fb330563ff2269540bfbfd662fa535080d1cc1f6",
    "filename": "stellar_sdk/sep/stellar_uri.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/StellarCN-py-stellar-base/stellar_sdk/sep/stellar_uri.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stellar_sdk/sep/stellar_uri.py:414:39 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `StellarUri._parse_callback` but got `Optional[str]`.",
    "message": " Expected `str` for 1st positional only parameter to call `StellarUri._parse_callback` but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 414,
    "warning_line": "        callback = cls._parse_callback(query.get(\"callback\"))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @staticmethod\n    def _parse_callback(callback: str) -> Optional[str]:\n        if callback is None:\n",
        "source_code_len": 104,
        "target_code": "    @staticmethod\n    def _parse_callback(callback: Optional[str]) -> Optional[str]:\n        if callback is None:\n",
        "target_code_len": 114,
        "diff_format": "@@ -61,3 +61,3 @@\n     @staticmethod\n-    def _parse_callback(callback: str) -> Optional[str]:\n+    def _parse_callback(callback: Optional[str]) -> Optional[str]:\n         if callback is None:\n",
        "source_code_with_indent": "    <DED>@staticmethod\n    def _parse_callback(callback: str) -> Optional[str]:\n        <IND>if callback is None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@staticmethod\n    def _parse_callback(callback: Optional[str]) -> Optional[str]:\n        <IND>if callback is None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "StellarCN/py-stellar-base",
    "commit": "fb330563ff2269540bfbfd662fa535080d1cc1f6",
    "filename": "stellar_sdk/sep/stellar_uri.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/StellarCN-py-stellar-base/stellar_sdk/sep/stellar_uri.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stellar_sdk/sep/stellar_uri.py:422:58 Incompatible parameter type [6]: Expected `str` for 2nd positional only parameter to call `stellar_sdk.base_transaction_envelope.BaseTransactionEnvelope.from_xdr` but got `Optional[str]`.",
    "message": " Expected `str` for 2nd positional only parameter to call `stellar_sdk.base_transaction_envelope.BaseTransactionEnvelope.from_xdr` but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 422,
    "warning_line": "            tx = FeeBumpTransactionEnvelope.from_xdr(xdr, network_passphrase)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        network_passphrase = network_passphrase or uri_network_passphrase\n\n",
        "source_code_len": 75,
        "target_code": "        network_passphrase = network_passphrase or uri_network_passphrase\n        assert network_passphrase is not None\n\n",
        "target_code_len": 121,
        "diff_format": "@@ -411,2 +416,3 @@\n         network_passphrase = network_passphrase or uri_network_passphrase\n+        assert network_passphrase is not None\n \n",
        "source_code_with_indent": "        <DED>network_passphrase = network_passphrase or uri_network_passphrase\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>network_passphrase = network_passphrase or uri_network_passphrase\n        assert network_passphrase is not None\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "StellarCN/py-stellar-base",
    "commit": "fb330563ff2269540bfbfd662fa535080d1cc1f6",
    "filename": "stellar_sdk/sep/stellar_uri.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/StellarCN-py-stellar-base/stellar_sdk/sep/stellar_uri.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stellar_sdk/sep/stellar_uri.py:424:51 Incompatible parameter type [6]: Expected `str` for 2nd positional only parameter to call `stellar_sdk.base_transaction_envelope.BaseTransactionEnvelope.from_xdr` but got `Optional[str]`.",
    "message": " Expected `str` for 2nd positional only parameter to call `stellar_sdk.base_transaction_envelope.BaseTransactionEnvelope.from_xdr` but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 424,
    "warning_line": "            tx = TransactionEnvelope.from_xdr(xdr, network_passphrase)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        network_passphrase = network_passphrase or uri_network_passphrase\n\n",
        "source_code_len": 75,
        "target_code": "        network_passphrase = network_passphrase or uri_network_passphrase\n        assert network_passphrase is not None\n\n",
        "target_code_len": 121,
        "diff_format": "@@ -411,2 +416,3 @@\n         network_passphrase = network_passphrase or uri_network_passphrase\n+        assert network_passphrase is not None\n \n",
        "source_code_with_indent": "        <DED>network_passphrase = network_passphrase or uri_network_passphrase\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>network_passphrase = network_passphrase or uri_network_passphrase\n        assert network_passphrase is not None\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "StellarCN/py-stellar-base",
    "commit": "fb330563ff2269540bfbfd662fa535080d1cc1f6",
    "filename": "stellar_sdk/sep/stellar_uri.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/StellarCN-py-stellar-base/stellar_sdk/sep/stellar_uri.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stellar_sdk/sep/stellar_uri.py:441:12 Incompatible parameter type [6]: Expected `TransactionEnvelope` for 1st parameter `transaction_envelope` to call `TransactionStellarUri.__init__` but got `Union[FeeBumpTransactionEnvelope, TransactionEnvelope]`.",
    "message": " Expected `TransactionEnvelope` for 1st parameter `transaction_envelope` to call `TransactionStellarUri.__init__` but got `Union[FeeBumpTransactionEnvelope, TransactionEnvelope]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 441,
    "warning_line": "            transaction_envelope=tx,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self,\n        transaction_envelope: TransactionEnvelope,\n        replace: Optional[List[Replacement]] = None,\n",
        "source_code_len": 118,
        "target_code": "        self,\n        transaction_envelope: Union[TransactionEnvelope, FeeBumpTransactionEnvelope],\n        replace: Optional[List[Replacement]] = None,\n",
        "target_code_len": 153,
        "diff_format": "@@ -318,3 +323,3 @@\n         self,\n-        transaction_envelope: TransactionEnvelope,\n+        transaction_envelope: Union[TransactionEnvelope, FeeBumpTransactionEnvelope],\n         replace: Optional[List[Replacement]] = None,\n",
        "source_code_with_indent": "        self,\n        transaction_envelope: TransactionEnvelope,\n        replace: Optional[List[Replacement]] = None,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self,\n        transaction_envelope: Union[TransactionEnvelope, FeeBumpTransactionEnvelope],\n        replace: Optional[List[Replacement]] = None,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "StellarCN/py-stellar-base",
    "commit": "fb330563ff2269540bfbfd662fa535080d1cc1f6",
    "filename": "stellar_sdk/sep/txrep.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/StellarCN-py-stellar-base/stellar_sdk/sep/txrep.py",
    "file_hunks_size": 18,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stellar_sdk/sep/txrep.py:712:40 Incompatible parameter type [6]: Expected `Union[int, str]` for 2nd positional only parameter to anonymous call but got `Union[None, int, str]`.",
    "message": " Expected `Union[int, str]` for 2nd positional only parameter to anonymous call but got `Union[None, int, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 712,
    "warning_line": "                add_operation_line(key, value)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            if present:\n                add_operation_line(key, value)\n        else:\n            add_operation_line(key, value)\n\n    def add_signer(signer: Signer) -> None:\n        add_body_line(\"signer._present\", _false if signer is None else _true)\n",
        "source_code_len": 251,
        "target_code": "            if present:\n                assert value is not None\n                add_operation_line(key, value)\n        else:\n            assert value is not None\n            add_operation_line(key, value)\n\n    def add_signer(signer: Optional[Signer]) -> None:\n        add_body_line(\"signer._present\", _false if signer is None else _true)\n",
        "target_code_len": 339,
        "diff_format": "@@ -711,7 +714,9 @@\n             if present:\n+                assert value is not None\n                 add_operation_line(key, value)\n         else:\n+            assert value is not None\n             add_operation_line(key, value)\n \n-    def add_signer(signer: Signer) -> None:\n+    def add_signer(signer: Optional[Signer]) -> None:\n         add_body_line(\"signer._present\", _false if signer is None else _true)\n",
        "source_code_with_indent": "            if present:\n                <IND>add_operation_line(key, value)\n        <DED><DED>else:\n            <IND>add_operation_line(key, value)\n\n    <DED><DED>def add_signer(signer: Signer) -> None:\n        <IND>add_body_line(\"signer._present\", _false if signer is None else _true)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            if present:\n                <IND>assert value is not None\n                add_operation_line(key, value)\n        <DED><DED>else:\n            <IND>assert value is not None\n            add_operation_line(key, value)\n\n    <DED><DED>def add_signer(signer: Optional[Signer]) -> None:\n        <IND>add_body_line(\"signer._present\", _false if signer is None else _true)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "StellarCN/py-stellar-base",
    "commit": "fb330563ff2269540bfbfd662fa535080d1cc1f6",
    "filename": "stellar_sdk/sep/txrep.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/StellarCN-py-stellar-base/stellar_sdk/sep/txrep.py",
    "file_hunks_size": 18,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stellar_sdk/sep/txrep.py:714:36 Incompatible parameter type [6]: Expected `Union[int, str]` for 2nd positional only parameter to anonymous call but got `Union[None, int, str]`.",
    "message": " Expected `Union[int, str]` for 2nd positional only parameter to anonymous call but got `Union[None, int, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 714,
    "warning_line": "            add_operation_line(key, value)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            if present:\n                add_operation_line(key, value)\n        else:\n            add_operation_line(key, value)\n\n    def add_signer(signer: Signer) -> None:\n        add_body_line(\"signer._present\", _false if signer is None else _true)\n",
        "source_code_len": 251,
        "target_code": "            if present:\n                assert value is not None\n                add_operation_line(key, value)\n        else:\n            assert value is not None\n            add_operation_line(key, value)\n\n    def add_signer(signer: Optional[Signer]) -> None:\n        add_body_line(\"signer._present\", _false if signer is None else _true)\n",
        "target_code_len": 339,
        "diff_format": "@@ -711,7 +714,9 @@\n             if present:\n+                assert value is not None\n                 add_operation_line(key, value)\n         else:\n+            assert value is not None\n             add_operation_line(key, value)\n \n-    def add_signer(signer: Signer) -> None:\n+    def add_signer(signer: Optional[Signer]) -> None:\n         add_body_line(\"signer._present\", _false if signer is None else _true)\n",
        "source_code_with_indent": "            if present:\n                <IND>add_operation_line(key, value)\n        <DED><DED>else:\n            <IND>add_operation_line(key, value)\n\n    <DED><DED>def add_signer(signer: Signer) -> None:\n        <IND>add_body_line(\"signer._present\", _false if signer is None else _true)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            if present:\n                <IND>assert value is not None\n                add_operation_line(key, value)\n        <DED><DED>else:\n            <IND>assert value is not None\n            add_operation_line(key, value)\n\n    <DED><DED>def add_signer(signer: Optional[Signer]) -> None:\n        <IND>add_body_line(\"signer._present\", _false if signer is None else _true)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "StellarCN/py-stellar-base",
    "commit": "fb330563ff2269540bfbfd662fa535080d1cc1f6",
    "filename": "stellar_sdk/sep/txrep.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/StellarCN-py-stellar-base/stellar_sdk/sep/txrep.py",
    "file_hunks_size": 18,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stellar_sdk/sep/txrep.py:751:26 Incompatible parameter type [6]: Expected `Union[Decimal, Price, str]` for 1st positional only parameter to call `_to_price` but got `Union[None, Price, str]`.",
    "message": " Expected `Union[Decimal, Price, str]` for 1st positional only parameter to call `_to_price` but got `Union[None, Price, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 751,
    "warning_line": "        price = _to_price(price)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def add_price(price: Union[Price, str, None]) -> None:\n        price = _to_price(price)\n",
        "source_code_len": 93,
        "target_code": "\n    def add_price(price: Union[Price, str, Decimal]) -> None:\n        price = _to_price(price)\n",
        "target_code_len": 96,
        "diff_format": "@@ -749,3 +757,3 @@\n \n-    def add_price(price: Union[Price, str, None]) -> None:\n+    def add_price(price: Union[Price, str, Decimal]) -> None:\n         price = _to_price(price)\n",
        "source_code_with_indent": "\n    <DED>def add_price(price: Union[Price, str, None]) -> None:\n        <IND>price = _to_price(price)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def add_price(price: Union[Price, str, Decimal]) -> None:\n        <IND>price = _to_price(price)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "StellarCN/py-stellar-base",
    "commit": "fb330563ff2269540bfbfd662fa535080d1cc1f6",
    "filename": "stellar_sdk/sep/txrep.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/StellarCN-py-stellar-base/stellar_sdk/sep/txrep.py",
    "file_hunks_size": 18,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stellar_sdk/sep/txrep.py:781:18 Incompatible parameter type [6]: Expected `Union[None, Price, str]` for 1st positional only parameter to anonymous call but got `Union[Decimal, Price, str]`.",
    "message": " Expected `Union[None, Price, str]` for 1st positional only parameter to anonymous call but got `Union[Decimal, Price, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 781,
    "warning_line": "        add_price(operation.price)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def add_price(price: Union[Price, str, None]) -> None:\n        price = _to_price(price)\n",
        "source_code_len": 93,
        "target_code": "\n    def add_price(price: Union[Price, str, Decimal]) -> None:\n        price = _to_price(price)\n",
        "target_code_len": 96,
        "diff_format": "@@ -749,3 +757,3 @@\n \n-    def add_price(price: Union[Price, str, None]) -> None:\n+    def add_price(price: Union[Price, str, Decimal]) -> None:\n         price = _to_price(price)\n",
        "source_code_with_indent": "\n    <DED>def add_price(price: Union[Price, str, None]) -> None:\n        <IND>price = _to_price(price)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def add_price(price: Union[Price, str, Decimal]) -> None:\n        <IND>price = _to_price(price)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "StellarCN/py-stellar-base",
    "commit": "fb330563ff2269540bfbfd662fa535080d1cc1f6",
    "filename": "stellar_sdk/sep/txrep.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/StellarCN-py-stellar-base/stellar_sdk/sep/txrep.py",
    "file_hunks_size": 18,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stellar_sdk/sep/txrep.py:787:18 Incompatible parameter type [6]: Expected `Union[None, Price, str]` for 1st positional only parameter to anonymous call but got `Union[Decimal, Price, str]`.",
    "message": " Expected `Union[None, Price, str]` for 1st positional only parameter to anonymous call but got `Union[Decimal, Price, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 787,
    "warning_line": "        add_price(operation.price)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def add_price(price: Union[Price, str, None]) -> None:\n        price = _to_price(price)\n",
        "source_code_len": 93,
        "target_code": "\n    def add_price(price: Union[Price, str, Decimal]) -> None:\n        price = _to_price(price)\n",
        "target_code_len": 96,
        "diff_format": "@@ -749,3 +757,3 @@\n \n-    def add_price(price: Union[Price, str, None]) -> None:\n+    def add_price(price: Union[Price, str, Decimal]) -> None:\n         price = _to_price(price)\n",
        "source_code_with_indent": "\n    <DED>def add_price(price: Union[Price, str, None]) -> None:\n        <IND>price = _to_price(price)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def add_price(price: Union[Price, str, Decimal]) -> None:\n        <IND>price = _to_price(price)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "StellarCN/py-stellar-base",
    "commit": "fb330563ff2269540bfbfd662fa535080d1cc1f6",
    "filename": "stellar_sdk/sep/txrep.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/StellarCN-py-stellar-base/stellar_sdk/sep/txrep.py",
    "file_hunks_size": 18,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stellar_sdk/sep/txrep.py:797:19 Incompatible parameter type [6]: Expected `Signer` for 1st positional only parameter to anonymous call but got `Optional[Signer]`.",
    "message": " Expected `Signer` for 1st positional only parameter to anonymous call but got `Optional[Signer]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 797,
    "warning_line": "        add_signer(operation.signer)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            if present:\n                add_operation_line(key, value)\n        else:\n            add_operation_line(key, value)\n\n    def add_signer(signer: Signer) -> None:\n        add_body_line(\"signer._present\", _false if signer is None else _true)\n",
        "source_code_len": 251,
        "target_code": "            if present:\n                assert value is not None\n                add_operation_line(key, value)\n        else:\n            assert value is not None\n            add_operation_line(key, value)\n\n    def add_signer(signer: Optional[Signer]) -> None:\n        add_body_line(\"signer._present\", _false if signer is None else _true)\n",
        "target_code_len": 339,
        "diff_format": "@@ -711,7 +714,9 @@\n             if present:\n+                assert value is not None\n                 add_operation_line(key, value)\n         else:\n+            assert value is not None\n             add_operation_line(key, value)\n \n-    def add_signer(signer: Signer) -> None:\n+    def add_signer(signer: Optional[Signer]) -> None:\n         add_body_line(\"signer._present\", _false if signer is None else _true)\n",
        "source_code_with_indent": "            if present:\n                <IND>add_operation_line(key, value)\n        <DED><DED>else:\n            <IND>add_operation_line(key, value)\n\n    <DED><DED>def add_signer(signer: Signer) -> None:\n        <IND>add_body_line(\"signer._present\", _false if signer is None else _true)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            if present:\n                <IND>assert value is not None\n                add_operation_line(key, value)\n        <DED><DED>else:\n            <IND>assert value is not None\n            add_operation_line(key, value)\n\n    <DED><DED>def add_signer(signer: Optional[Signer]) -> None:\n        <IND>add_body_line(\"signer._present\", _false if signer is None else _true)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "StellarCN/py-stellar-base",
    "commit": "fb330563ff2269540bfbfd662fa535080d1cc1f6",
    "filename": "stellar_sdk/sep/txrep.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/StellarCN-py-stellar-base/stellar_sdk/sep/txrep.py",
    "file_hunks_size": 18,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stellar_sdk/sep/txrep.py:815:50 Incompatible parameter type [6]: Expected `bytes` for 1st positional only parameter to call `_to_opaque` but got `Union[None, bytes, str]`.",
    "message": " Expected `bytes` for 1st positional only parameter to call `_to_opaque` but got `Union[None, bytes, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 815,
    "warning_line": "            add_body_line(\"dataValue\", _to_opaque(operation.data_value))"
  },
  {
    "project": "StellarCN/py-stellar-base",
    "commit": "fb330563ff2269540bfbfd662fa535080d1cc1f6",
    "filename": "stellar_sdk/sep/txrep.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/StellarCN-py-stellar-base/stellar_sdk/sep/txrep.py",
    "file_hunks_size": 18,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stellar_sdk/sep/txrep.py:822:18 Incompatible parameter type [6]: Expected `Union[None, Price, str]` for 1st positional only parameter to anonymous call but got `Union[Decimal, Price, str]`.",
    "message": " Expected `Union[None, Price, str]` for 1st positional only parameter to anonymous call but got `Union[Decimal, Price, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 822,
    "warning_line": "        add_price(operation.price)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def add_price(price: Union[Price, str, None]) -> None:\n        price = _to_price(price)\n",
        "source_code_len": 93,
        "target_code": "\n    def add_price(price: Union[Price, str, Decimal]) -> None:\n        price = _to_price(price)\n",
        "target_code_len": 96,
        "diff_format": "@@ -749,3 +757,3 @@\n \n-    def add_price(price: Union[Price, str, None]) -> None:\n+    def add_price(price: Union[Price, str, Decimal]) -> None:\n         price = _to_price(price)\n",
        "source_code_with_indent": "\n    <DED>def add_price(price: Union[Price, str, None]) -> None:\n        <IND>price = _to_price(price)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def add_price(price: Union[Price, str, Decimal]) -> None:\n        <IND>price = _to_price(price)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "StellarCN/py-stellar-base",
    "commit": "fb330563ff2269540bfbfd662fa535080d1cc1f6",
    "filename": "stellar_sdk/sep/txrep.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/StellarCN-py-stellar-base/stellar_sdk/sep/txrep.py",
    "file_hunks_size": 18,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stellar_sdk/sep/txrep.py:872:46 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `Price.from_raw_price` but got `Union[Decimal, str]`.",
    "message": " Expected `str` for 1st positional only parameter to call `Price.from_raw_price` but got `Union[Decimal, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 872,
    "warning_line": "        price_fraction = Price.from_raw_price(price)"
  },
  {
    "project": "StellarCN/py-stellar-base",
    "commit": "fb330563ff2269540bfbfd662fa535080d1cc1f6",
    "filename": "stellar_sdk/server.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/StellarCN-py-stellar-base/stellar_sdk/server.py",
    "file_hunks_size": 15,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stellar_sdk/server.py:123:44 Incompatible parameter type [6]: Expected `Transaction` for 1st positional only parameter to call `Server._Server__check_memo_required_sync` but got `Union[FeeBumpTransaction, Transaction]`.",
    "message": " Expected `Transaction` for 1st positional only parameter to call `Server._Server__check_memo_required_sync` but got `Union[FeeBumpTransaction, Transaction]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 123,
    "warning_line": "            self.__check_memo_required_sync(tx)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __check_memo_required_sync(self, transaction: Transaction) -> None:\n        if isinstance(transaction, FeeBumpTransaction):\n",
        "source_code_len": 133,
        "target_code": "\n    def __check_memo_required_sync(self, transaction: Union[Transaction, FeeBumpTransaction]) -> None:\n        if isinstance(transaction, FeeBumpTransaction):\n",
        "target_code_len": 160,
        "diff_format": "@@ -395,3 +401,3 @@\n \n-    def __check_memo_required_sync(self, transaction: Transaction) -> None:\n+    def __check_memo_required_sync(self, transaction: Union[Transaction, FeeBumpTransaction]) -> None:\n         if isinstance(transaction, FeeBumpTransaction):\n",
        "source_code_with_indent": "\n    <DED>def __check_memo_required_sync(self, transaction: Transaction) -> None:\n        <IND>if isinstance(transaction, FeeBumpTransaction):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def __check_memo_required_sync(self, transaction: Union[Transaction, FeeBumpTransaction]) -> None:\n        <IND>if isinstance(transaction, FeeBumpTransaction):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "StellarCN/py-stellar-base",
    "commit": "fb330563ff2269540bfbfd662fa535080d1cc1f6",
    "filename": "stellar_sdk/server.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/StellarCN-py-stellar-base/stellar_sdk/server.py",
    "file_hunks_size": 15,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stellar_sdk/server.py:126:32 Incompatible parameter type [6]: Expected `stellar_sdk.client.response.Response` for 1st positional only parameter to call `raise_request_exception` but got `Union[Coroutine[typing.Any, typing.Any, stellar_sdk.client.response.Response], stellar_sdk.client.response.Response]`.",
    "message": " Expected `stellar_sdk.client.response.Response` for 1st positional only parameter to call `raise_request_exception` but got `Union[Coroutine[typing.Any, typing.Any, stellar_sdk.client.response.Response], stellar_sdk.client.response.Response]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 126,
    "warning_line": "        raise_request_exception(resp)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from .client.requests_client import RequestsClient\nfrom .exceptions import TypeError, NotFoundError, raise_request_exception\n",
        "source_code_len": 125,
        "target_code": "from .client.requests_client import RequestsClient\nfrom .client.response import Response\nfrom .exceptions import TypeError, NotFoundError, raise_request_exception\n",
        "target_code_len": 163,
        "diff_format": "@@ -27,2 +27,3 @@\n from .client.requests_client import RequestsClient\n+from .client.response import Response\n from .exceptions import TypeError, NotFoundError, raise_request_exception\n",
        "source_code_with_indent": "from .client.requests_client import RequestsClient\nfrom .exceptions import TypeError, NotFoundError, raise_request_exception\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from .client.requests_client import RequestsClient\nfrom .client.response import Response\nfrom .exceptions import TypeError, NotFoundError, raise_request_exception\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        resp = self._client.post(url=url, data=data)\n        raise_request_exception(resp)\n",
        "source_code_len": 91,
        "target_code": "        resp = self._client.post(url=url, data=data)\n        assert isinstance(resp, Response)\n        raise_request_exception(resp)\n",
        "target_code_len": 133,
        "diff_format": "@@ -125,2 +127,3 @@\n         resp = self._client.post(url=url, data=data)\n+        assert isinstance(resp, Response)\n         raise_request_exception(resp)\n",
        "source_code_with_indent": "        resp = self._client.post(url=url, data=data)\n        raise_request_exception(resp)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        resp = self._client.post(url=url, data=data)\n        assert isinstance(resp, Response)\n        raise_request_exception(resp)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        data = {\"tx\": xdr}\n        resp = await self._client.post(url=url, data=data)\n        raise_request_exception(resp)\n",
        "source_code_len": 124,
        "target_code": "        data = {\"tx\": xdr}\n        resp = await self._client.post(url=url, data=data)  # type: ignore[misc]\n        assert isinstance(resp, Response)\n        raise_request_exception(resp)\n",
        "target_code_len": 188,
        "diff_format": "@@ -142,3 +145,4 @@\n         data = {\"tx\": xdr}\n-        resp = await self._client.post(url=url, data=data)\n+        resp = await self._client.post(url=url, data=data)  # type: ignore[misc]\n+        assert isinstance(resp, Response)\n         raise_request_exception(resp)\n",
        "source_code_with_indent": "        <DED>data = {\"tx\": xdr}\n        resp = await self._client.post(url=url, data=data)\n        raise_request_exception(resp)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>data = {\"tx\": xdr}\n        resp = await self._client.post(url=url, data=data)  # type: ignore[misc]\n        assert isinstance(resp, Response)\n        raise_request_exception(resp)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "StellarCN/py-stellar-base",
    "commit": "fb330563ff2269540bfbfd662fa535080d1cc1f6",
    "filename": "stellar_sdk/server.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/StellarCN-py-stellar-base/stellar_sdk/server.py",
    "file_hunks_size": 15,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stellar_sdk/server.py:410:42 Incompatible parameter type [6]: Expected `Dict[typing.Any, typing.Any]` for 1st positional only parameter to call `Server._Server__check_destination_memo` but got `Union[Coroutine[typing.Any, typing.Any, Dict[str, typing.Any]], Dict[str, typing.Any]]`.",
    "message": " Expected `Dict[typing.Any, typing.Any]` for 1st positional only parameter to call `Server._Server__check_destination_memo` but got `Union[Coroutine[typing.Any, typing.Any, Dict[str, typing.Any]], Dict[str, typing.Any]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 410,
    "warning_line": "            self.__check_destination_memo(account_resp, index, destination)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                continue\n            self.__check_destination_memo(account_resp, index, destination)\n",
        "source_code_len": 101,
        "target_code": "                continue\n            assert isinstance(account_resp, dict)\n            self.__check_destination_memo(account_resp, index, destination)\n",
        "target_code_len": 151,
        "diff_format": "@@ -409,2 +415,3 @@\n                 continue\n+            assert isinstance(account_resp, dict)\n             self.__check_destination_memo(account_resp, index, destination)\n",
        "source_code_with_indent": "                <IND>continue\n            <DED>self.__check_destination_memo(account_resp, index, destination)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                <IND>continue\n            <DED>assert isinstance(account_resp, dict)\n            self.__check_destination_memo(account_resp, index, destination)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "StellarCN/py-stellar-base",
    "commit": "fb330563ff2269540bfbfd662fa535080d1cc1f6",
    "filename": "stellar_sdk/server.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/StellarCN-py-stellar-base/stellar_sdk/server.py",
    "file_hunks_size": 15,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stellar_sdk/server.py:481:42 Incompatible parameter type [6]: Expected `Dict[typing.Any, typing.Any]` for 1st positional only parameter to call `Server._Server__handle_base_fee` but got `Union[Coroutine[typing.Any, typing.Any, Dict[str, typing.Any]], Dict[str, typing.Any]]`.",
    "message": " Expected `Dict[typing.Any, typing.Any]` for 1st positional only parameter to call `Server._Server__handle_base_fee` but got `Union[Coroutine[typing.Any, typing.Any, Dict[str, typing.Any]], Dict[str, typing.Any]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 481,
    "warning_line": "        base_fee = self.__handle_base_fee(latest_ledger)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        latest_ledger = self.ledgers().order(desc=True).limit(1).call()\n        base_fee = self.__handle_base_fee(latest_ledger)\n",
        "source_code_len": 129,
        "target_code": "        latest_ledger = self.ledgers().order(desc=True).limit(1).call()\n        assert isinstance(latest_ledger, dict)\n        base_fee = self.__handle_base_fee(latest_ledger)\n",
        "target_code_len": 176,
        "diff_format": "@@ -480,2 +481,3 @@\n         latest_ledger = self.ledgers().order(desc=True).limit(1).call()\n+        assert isinstance(latest_ledger, dict)\n         base_fee = self.__handle_base_fee(latest_ledger)\n",
        "source_code_with_indent": "        <IND>latest_ledger = self.ledgers().order(desc=True).limit(1).call()\n        base_fee = self.__handle_base_fee(latest_ledger)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>latest_ledger = self.ledgers().order(desc=True).limit(1).call()\n        assert isinstance(latest_ledger, dict)\n        base_fee = self.__handle_base_fee(latest_ledger)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "StellarCN/py-stellar-base",
    "commit": "fb330563ff2269540bfbfd662fa535080d1cc1f6",
    "filename": "stellar_sdk/transaction_builder.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/StellarCN-py-stellar-base/stellar_sdk/transaction_builder.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stellar_sdk/transaction_builder.py:912:8 Incompatible variable type [9]: signer_key is declared to have type `str` but is used as type `SignerKey`.",
    "message": " signer_key is declared to have type `str` but is used as type `SignerKey`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 912,
    "warning_line": "        signer_key = SignerKey.ed25519_public_key(signer_key)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"\"\"\n        signer_key = SignerKey.ed25519_public_key(signer_key)\n        op = RevokeSponsorship.revoke_signer_sponsorship(account_id, signer_key, source)\n        return self.append_operation(op)\n",
        "source_code_len": 204,
        "target_code": "        \"\"\"\n        key = SignerKey.ed25519_public_key(signer_key)\n        op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key, source)\n        return self.append_operation(op)\n",
        "target_code_len": 190,
        "diff_format": "@@ -911,4 +911,4 @@\n         \"\"\"\n-        signer_key = SignerKey.ed25519_public_key(signer_key)\n-        op = RevokeSponsorship.revoke_signer_sponsorship(account_id, signer_key, source)\n+        key = SignerKey.ed25519_public_key(signer_key)\n+        op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key, source)\n         return self.append_operation(op)\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n        signer_key = SignerKey.ed25519_public_key(signer_key)\n        op = RevokeSponsorship.revoke_signer_sponsorship(account_id, signer_key, source)\n        return self.append_operation(op)\n",
        "target_code_with_indent": "\n        key = SignerKey.ed25519_public_key(signer_key)\n        op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key, source)\n        return self.append_operation(op)\n"
      }
    ]
  },
  {
    "project": "StellarCN/py-stellar-base",
    "commit": "fb330563ff2269540bfbfd662fa535080d1cc1f6",
    "filename": "stellar_sdk/transaction_builder.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/StellarCN-py-stellar-base/stellar_sdk/transaction_builder.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stellar_sdk/transaction_builder.py:913:69 Incompatible parameter type [6]: Expected `SignerKey` for 2nd positional only parameter to call `stellar_sdk.operation.revoke_sponsorship.RevokeSponsorship.revoke_signer_sponsorship` but got `str`.",
    "message": " Expected `SignerKey` for 2nd positional only parameter to call `stellar_sdk.operation.revoke_sponsorship.RevokeSponsorship.revoke_signer_sponsorship` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 913,
    "warning_line": "        op = RevokeSponsorship.revoke_signer_sponsorship(account_id, signer_key, source)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"\"\"\n        signer_key = SignerKey.ed25519_public_key(signer_key)\n        op = RevokeSponsorship.revoke_signer_sponsorship(account_id, signer_key, source)\n        return self.append_operation(op)\n",
        "source_code_len": 204,
        "target_code": "        \"\"\"\n        key = SignerKey.ed25519_public_key(signer_key)\n        op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key, source)\n        return self.append_operation(op)\n",
        "target_code_len": 190,
        "diff_format": "@@ -911,4 +911,4 @@\n         \"\"\"\n-        signer_key = SignerKey.ed25519_public_key(signer_key)\n-        op = RevokeSponsorship.revoke_signer_sponsorship(account_id, signer_key, source)\n+        key = SignerKey.ed25519_public_key(signer_key)\n+        op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key, source)\n         return self.append_operation(op)\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n        signer_key = SignerKey.ed25519_public_key(signer_key)\n        op = RevokeSponsorship.revoke_signer_sponsorship(account_id, signer_key, source)\n        return self.append_operation(op)\n",
        "target_code_with_indent": "\n        key = SignerKey.ed25519_public_key(signer_key)\n        op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key, source)\n        return self.append_operation(op)\n"
      }
    ]
  },
  {
    "project": "StellarCN/py-stellar-base",
    "commit": "fb330563ff2269540bfbfd662fa535080d1cc1f6",
    "filename": "stellar_sdk/transaction_builder.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/StellarCN-py-stellar-base/stellar_sdk/transaction_builder.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stellar_sdk/transaction_builder.py:927:8 Incompatible variable type [9]: signer_key is declared to have type `Union[bytes, str]` but is used as type `SignerKey`.",
    "message": " signer_key is declared to have type `Union[bytes, str]` but is used as type `SignerKey`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 927,
    "warning_line": "        signer_key = SignerKey.sha256_hash(hex_to_bytes(signer_key))",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"\"\"\n        signer_key = SignerKey.sha256_hash(hex_to_bytes(signer_key))\n        op = RevokeSponsorship.revoke_signer_sponsorship(account_id, signer_key, source)\n        return self.append_operation(op)\n",
        "source_code_len": 211,
        "target_code": "        \"\"\"\n        key = SignerKey.sha256_hash(hex_to_bytes(signer_key))\n        op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key, source)\n        return self.append_operation(op)\n",
        "target_code_len": 197,
        "diff_format": "@@ -926,4 +926,4 @@\n         \"\"\"\n-        signer_key = SignerKey.sha256_hash(hex_to_bytes(signer_key))\n-        op = RevokeSponsorship.revoke_signer_sponsorship(account_id, signer_key, source)\n+        key = SignerKey.sha256_hash(hex_to_bytes(signer_key))\n+        op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key, source)\n         return self.append_operation(op)\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n        signer_key = SignerKey.sha256_hash(hex_to_bytes(signer_key))\n        op = RevokeSponsorship.revoke_signer_sponsorship(account_id, signer_key, source)\n        return self.append_operation(op)\n",
        "target_code_with_indent": "\n        key = SignerKey.sha256_hash(hex_to_bytes(signer_key))\n        op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key, source)\n        return self.append_operation(op)\n"
      }
    ]
  },
  {
    "project": "StellarCN/py-stellar-base",
    "commit": "fb330563ff2269540bfbfd662fa535080d1cc1f6",
    "filename": "stellar_sdk/transaction_builder.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/StellarCN-py-stellar-base/stellar_sdk/transaction_builder.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stellar_sdk/transaction_builder.py:928:69 Incompatible parameter type [6]: Expected `SignerKey` for 2nd positional only parameter to call `stellar_sdk.operation.revoke_sponsorship.RevokeSponsorship.revoke_signer_sponsorship` but got `Union[bytes, str]`.",
    "message": " Expected `SignerKey` for 2nd positional only parameter to call `stellar_sdk.operation.revoke_sponsorship.RevokeSponsorship.revoke_signer_sponsorship` but got `Union[bytes, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 928,
    "warning_line": "        op = RevokeSponsorship.revoke_signer_sponsorship(account_id, signer_key, source)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"\"\"\n        signer_key = SignerKey.sha256_hash(hex_to_bytes(signer_key))\n        op = RevokeSponsorship.revoke_signer_sponsorship(account_id, signer_key, source)\n        return self.append_operation(op)\n",
        "source_code_len": 211,
        "target_code": "        \"\"\"\n        key = SignerKey.sha256_hash(hex_to_bytes(signer_key))\n        op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key, source)\n        return self.append_operation(op)\n",
        "target_code_len": 197,
        "diff_format": "@@ -926,4 +926,4 @@\n         \"\"\"\n-        signer_key = SignerKey.sha256_hash(hex_to_bytes(signer_key))\n-        op = RevokeSponsorship.revoke_signer_sponsorship(account_id, signer_key, source)\n+        key = SignerKey.sha256_hash(hex_to_bytes(signer_key))\n+        op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key, source)\n         return self.append_operation(op)\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n        signer_key = SignerKey.sha256_hash(hex_to_bytes(signer_key))\n        op = RevokeSponsorship.revoke_signer_sponsorship(account_id, signer_key, source)\n        return self.append_operation(op)\n",
        "target_code_with_indent": "\n        key = SignerKey.sha256_hash(hex_to_bytes(signer_key))\n        op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key, source)\n        return self.append_operation(op)\n"
      }
    ]
  },
  {
    "project": "StellarCN/py-stellar-base",
    "commit": "fb330563ff2269540bfbfd662fa535080d1cc1f6",
    "filename": "stellar_sdk/transaction_builder.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/StellarCN-py-stellar-base/stellar_sdk/transaction_builder.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stellar_sdk/transaction_builder.py:942:8 Incompatible variable type [9]: signer_key is declared to have type `Union[bytes, str]` but is used as type `SignerKey`.",
    "message": " signer_key is declared to have type `Union[bytes, str]` but is used as type `SignerKey`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 942,
    "warning_line": "        signer_key = SignerKey.pre_auth_tx(hex_to_bytes(signer_key))",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"\"\"\n        signer_key = SignerKey.pre_auth_tx(hex_to_bytes(signer_key))\n        op = RevokeSponsorship.revoke_signer_sponsorship(account_id, signer_key, source)\n        return self.append_operation(op)\n",
        "source_code_len": 211,
        "target_code": "        \"\"\"\n        key = SignerKey.pre_auth_tx(hex_to_bytes(signer_key))\n        op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key, source)\n        return self.append_operation(op)\n",
        "target_code_len": 197,
        "diff_format": "@@ -941,4 +941,4 @@\n         \"\"\"\n-        signer_key = SignerKey.pre_auth_tx(hex_to_bytes(signer_key))\n-        op = RevokeSponsorship.revoke_signer_sponsorship(account_id, signer_key, source)\n+        key = SignerKey.pre_auth_tx(hex_to_bytes(signer_key))\n+        op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key, source)\n         return self.append_operation(op)\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n        signer_key = SignerKey.pre_auth_tx(hex_to_bytes(signer_key))\n        op = RevokeSponsorship.revoke_signer_sponsorship(account_id, signer_key, source)\n        return self.append_operation(op)\n",
        "target_code_with_indent": "\n        key = SignerKey.pre_auth_tx(hex_to_bytes(signer_key))\n        op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key, source)\n        return self.append_operation(op)\n"
      }
    ]
  },
  {
    "project": "StellarCN/py-stellar-base",
    "commit": "fb330563ff2269540bfbfd662fa535080d1cc1f6",
    "filename": "stellar_sdk/transaction_builder.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/StellarCN-py-stellar-base/stellar_sdk/transaction_builder.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stellar_sdk/transaction_builder.py:943:69 Incompatible parameter type [6]: Expected `SignerKey` for 2nd positional only parameter to call `stellar_sdk.operation.revoke_sponsorship.RevokeSponsorship.revoke_signer_sponsorship` but got `Union[bytes, str]`.",
    "message": " Expected `SignerKey` for 2nd positional only parameter to call `stellar_sdk.operation.revoke_sponsorship.RevokeSponsorship.revoke_signer_sponsorship` but got `Union[bytes, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 943,
    "warning_line": "        op = RevokeSponsorship.revoke_signer_sponsorship(account_id, signer_key, source)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"\"\"\n        signer_key = SignerKey.pre_auth_tx(hex_to_bytes(signer_key))\n        op = RevokeSponsorship.revoke_signer_sponsorship(account_id, signer_key, source)\n        return self.append_operation(op)\n",
        "source_code_len": 211,
        "target_code": "        \"\"\"\n        key = SignerKey.pre_auth_tx(hex_to_bytes(signer_key))\n        op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key, source)\n        return self.append_operation(op)\n",
        "target_code_len": 197,
        "diff_format": "@@ -941,4 +941,4 @@\n         \"\"\"\n-        signer_key = SignerKey.pre_auth_tx(hex_to_bytes(signer_key))\n-        op = RevokeSponsorship.revoke_signer_sponsorship(account_id, signer_key, source)\n+        key = SignerKey.pre_auth_tx(hex_to_bytes(signer_key))\n+        op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key, source)\n         return self.append_operation(op)\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n        signer_key = SignerKey.pre_auth_tx(hex_to_bytes(signer_key))\n        op = RevokeSponsorship.revoke_signer_sponsorship(account_id, signer_key, source)\n        return self.append_operation(op)\n",
        "target_code_with_indent": "\n        key = SignerKey.pre_auth_tx(hex_to_bytes(signer_key))\n        op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key, source)\n        return self.append_operation(op)\n"
      }
    ]
  },
  {
    "project": "StellarCN/py-stellar-base",
    "commit": "fb330563ff2269540bfbfd662fa535080d1cc1f6",
    "filename": "stellar_sdk/transaction_envelope.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/StellarCN-py-stellar-base/stellar_sdk/transaction_envelope.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stellar_sdk/transaction_envelope.py:68:60 Incompatible parameter type [6]: Expected `stellar_xdr.transaction.Transaction` for 1st positional only parameter to call `stellar_xdr.transaction_v1_envelope.TransactionV1Envelope.__init__` but got `typing.Union[stellar_xdr.transaction.Transaction, stellar_xdr.transaction_v0.TransactionV0]`.",
    "message": " Expected `stellar_xdr.transaction.Transaction` for 1st positional only parameter to call `stellar_xdr.transaction_v1_envelope.TransactionV1Envelope.__init__` but got `typing.Union[stellar_xdr.transaction.Transaction, stellar_xdr.transaction_v0.TransactionV0]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 68,
    "warning_line": "            tx_envelope = stellar_xdr.TransactionV1Envelope(tx, self.signatures)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        if self.transaction.v1:\n            te_type = stellar_xdr.EnvelopeType.ENVELOPE_TYPE_TX\n            tx_envelope = stellar_xdr.TransactionV1Envelope(tx, self.signatures)\n            return stellar_xdr.TransactionEnvelope(type=te_type, v1=tx_envelope)\n        else:\n            te_type = stellar_xdr.EnvelopeType.ENVELOPE_TYPE_TX_V0\n            tx_envelope = stellar_xdr.TransactionV0Envelope(tx, self.signatures)\n            return stellar_xdr.TransactionEnvelope(type=te_type, v0=tx_envelope)\n\n",
        "source_code_len": 502,
        "target_code": "        if self.transaction.v1:\n            assert isinstance(tx, stellar_xdr.Transaction)\n            te_type = stellar_xdr.EnvelopeType.ENVELOPE_TYPE_TX\n            tx_v1_envelope = stellar_xdr.TransactionV1Envelope(tx, self.signatures)\n            return stellar_xdr.TransactionEnvelope(type=te_type, v1=tx_v1_envelope)\n        else:\n            assert isinstance(tx, stellar_xdr.TransactionV0)\n            te_type = stellar_xdr.EnvelopeType.ENVELOPE_TYPE_TX_V0\n            tx_v0_envelope = stellar_xdr.TransactionV0Envelope(tx, self.signatures)\n            return stellar_xdr.TransactionEnvelope(type=te_type, v0=tx_v0_envelope)\n\n",
        "target_code_len": 634,
        "diff_format": "@@ -66,9 +66,11 @@\n         if self.transaction.v1:\n+            assert isinstance(tx, stellar_xdr.Transaction)\n             te_type = stellar_xdr.EnvelopeType.ENVELOPE_TYPE_TX\n-            tx_envelope = stellar_xdr.TransactionV1Envelope(tx, self.signatures)\n-            return stellar_xdr.TransactionEnvelope(type=te_type, v1=tx_envelope)\n+            tx_v1_envelope = stellar_xdr.TransactionV1Envelope(tx, self.signatures)\n+            return stellar_xdr.TransactionEnvelope(type=te_type, v1=tx_v1_envelope)\n         else:\n+            assert isinstance(tx, stellar_xdr.TransactionV0)\n             te_type = stellar_xdr.EnvelopeType.ENVELOPE_TYPE_TX_V0\n-            tx_envelope = stellar_xdr.TransactionV0Envelope(tx, self.signatures)\n-            return stellar_xdr.TransactionEnvelope(type=te_type, v0=tx_envelope)\n+            tx_v0_envelope = stellar_xdr.TransactionV0Envelope(tx, self.signatures)\n+            return stellar_xdr.TransactionEnvelope(type=te_type, v0=tx_v0_envelope)\n \n",
        "source_code_with_indent": "        if self.transaction.v1:\n            <IND>te_type = stellar_xdr.EnvelopeType.ENVELOPE_TYPE_TX\n            tx_envelope = stellar_xdr.TransactionV1Envelope(tx, self.signatures)\n            return stellar_xdr.TransactionEnvelope(type=te_type, v1=tx_envelope)\n        <DED>else:\n            <IND>te_type = stellar_xdr.EnvelopeType.ENVELOPE_TYPE_TX_V0\n            tx_envelope = stellar_xdr.TransactionV0Envelope(tx, self.signatures)\n            return stellar_xdr.TransactionEnvelope(type=te_type, v0=tx_envelope)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        if self.transaction.v1:\n            <IND>assert isinstance(tx, stellar_xdr.Transaction)\n            te_type = stellar_xdr.EnvelopeType.ENVELOPE_TYPE_TX\n            tx_v1_envelope = stellar_xdr.TransactionV1Envelope(tx, self.signatures)\n            return stellar_xdr.TransactionEnvelope(type=te_type, v1=tx_v1_envelope)\n        <DED>else:\n            <IND>assert isinstance(tx, stellar_xdr.TransactionV0)\n            te_type = stellar_xdr.EnvelopeType.ENVELOPE_TYPE_TX_V0\n            tx_v0_envelope = stellar_xdr.TransactionV0Envelope(tx, self.signatures)\n            return stellar_xdr.TransactionEnvelope(type=te_type, v0=tx_v0_envelope)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "StellarCN/py-stellar-base",
    "commit": "fb330563ff2269540bfbfd662fa535080d1cc1f6",
    "filename": "stellar_sdk/transaction_envelope.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/StellarCN-py-stellar-base/stellar_sdk/transaction_envelope.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "stellar_sdk/transaction_envelope.py:72:60 Incompatible parameter type [6]: Expected `stellar_xdr.transaction_v0.TransactionV0` for 1st positional only parameter to call `stellar_xdr.transaction_v0_envelope.TransactionV0Envelope.__init__` but got `typing.Union[stellar_xdr.transaction.Transaction, stellar_xdr.transaction_v0.TransactionV0]`.",
    "message": " Expected `stellar_xdr.transaction_v0.TransactionV0` for 1st positional only parameter to call `stellar_xdr.transaction_v0_envelope.TransactionV0Envelope.__init__` but got `typing.Union[stellar_xdr.transaction.Transaction, stellar_xdr.transaction_v0.TransactionV0]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 72,
    "warning_line": "            tx_envelope = stellar_xdr.TransactionV0Envelope(tx, self.signatures)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        if self.transaction.v1:\n            te_type = stellar_xdr.EnvelopeType.ENVELOPE_TYPE_TX\n            tx_envelope = stellar_xdr.TransactionV1Envelope(tx, self.signatures)\n            return stellar_xdr.TransactionEnvelope(type=te_type, v1=tx_envelope)\n        else:\n            te_type = stellar_xdr.EnvelopeType.ENVELOPE_TYPE_TX_V0\n            tx_envelope = stellar_xdr.TransactionV0Envelope(tx, self.signatures)\n            return stellar_xdr.TransactionEnvelope(type=te_type, v0=tx_envelope)\n\n",
        "source_code_len": 502,
        "target_code": "        if self.transaction.v1:\n            assert isinstance(tx, stellar_xdr.Transaction)\n            te_type = stellar_xdr.EnvelopeType.ENVELOPE_TYPE_TX\n            tx_v1_envelope = stellar_xdr.TransactionV1Envelope(tx, self.signatures)\n            return stellar_xdr.TransactionEnvelope(type=te_type, v1=tx_v1_envelope)\n        else:\n            assert isinstance(tx, stellar_xdr.TransactionV0)\n            te_type = stellar_xdr.EnvelopeType.ENVELOPE_TYPE_TX_V0\n            tx_v0_envelope = stellar_xdr.TransactionV0Envelope(tx, self.signatures)\n            return stellar_xdr.TransactionEnvelope(type=te_type, v0=tx_v0_envelope)\n\n",
        "target_code_len": 634,
        "diff_format": "@@ -66,9 +66,11 @@\n         if self.transaction.v1:\n+            assert isinstance(tx, stellar_xdr.Transaction)\n             te_type = stellar_xdr.EnvelopeType.ENVELOPE_TYPE_TX\n-            tx_envelope = stellar_xdr.TransactionV1Envelope(tx, self.signatures)\n-            return stellar_xdr.TransactionEnvelope(type=te_type, v1=tx_envelope)\n+            tx_v1_envelope = stellar_xdr.TransactionV1Envelope(tx, self.signatures)\n+            return stellar_xdr.TransactionEnvelope(type=te_type, v1=tx_v1_envelope)\n         else:\n+            assert isinstance(tx, stellar_xdr.TransactionV0)\n             te_type = stellar_xdr.EnvelopeType.ENVELOPE_TYPE_TX_V0\n-            tx_envelope = stellar_xdr.TransactionV0Envelope(tx, self.signatures)\n-            return stellar_xdr.TransactionEnvelope(type=te_type, v0=tx_envelope)\n+            tx_v0_envelope = stellar_xdr.TransactionV0Envelope(tx, self.signatures)\n+            return stellar_xdr.TransactionEnvelope(type=te_type, v0=tx_v0_envelope)\n \n",
        "source_code_with_indent": "        if self.transaction.v1:\n            <IND>te_type = stellar_xdr.EnvelopeType.ENVELOPE_TYPE_TX\n            tx_envelope = stellar_xdr.TransactionV1Envelope(tx, self.signatures)\n            return stellar_xdr.TransactionEnvelope(type=te_type, v1=tx_envelope)\n        <DED>else:\n            <IND>te_type = stellar_xdr.EnvelopeType.ENVELOPE_TYPE_TX_V0\n            tx_envelope = stellar_xdr.TransactionV0Envelope(tx, self.signatures)\n            return stellar_xdr.TransactionEnvelope(type=te_type, v0=tx_envelope)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        if self.transaction.v1:\n            <IND>assert isinstance(tx, stellar_xdr.Transaction)\n            te_type = stellar_xdr.EnvelopeType.ENVELOPE_TYPE_TX\n            tx_v1_envelope = stellar_xdr.TransactionV1Envelope(tx, self.signatures)\n            return stellar_xdr.TransactionEnvelope(type=te_type, v1=tx_v1_envelope)\n        <DED>else:\n            <IND>assert isinstance(tx, stellar_xdr.TransactionV0)\n            te_type = stellar_xdr.EnvelopeType.ENVELOPE_TYPE_TX_V0\n            tx_v0_envelope = stellar_xdr.TransactionV0Envelope(tx, self.signatures)\n            return stellar_xdr.TransactionEnvelope(type=te_type, v0=tx_v0_envelope)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]