[
  {
    "project": "qutebrowser/qutebrowser",
    "commit": "70f006a1b00d68bb04ef1f9c5a3d4d1edf9c6784",
    "filename": "qutebrowser/utils/objreg.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/qutebrowser-qutebrowser/qutebrowser/utils/objreg.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "qutebrowser/utils/objreg.py:83:35 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `ObjectRegistry._disconnect_destroyed` but got `typing.Union[int, str]`.",
    "message": " Expected `str` for 1st positional only parameter to call `ObjectRegistry._disconnect_destroyed` but got `typing.Union[int, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 83,
    "warning_line": "        self._disconnect_destroyed(name)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nclass ObjectRegistry(collections.UserDict):\n",
        "source_code_len": 45,
        "target_code": "\n_IndexType = typing.Union[str, int]\n\n\nclass ObjectRegistry(collections.UserDict):\n",
        "target_code_len": 83,
        "diff_format": "@@ -53,2 +53,5 @@\n \n+_IndexType = typing.Union[str, int]\n+\n+\n class ObjectRegistry(collections.UserDict):\n",
        "source_code_with_indent": "\n<DED>class ObjectRegistry(collections.UserDict):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>_IndexType = typing.Union[str, int]\n\n\nclass ObjectRegistry(collections.UserDict):\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _disconnect_destroyed(self, name: str) -> None:\n        \"\"\"Disconnect the destroyed slot if it was connected.\"\"\"\n",
        "source_code_len": 122,
        "target_code": "\n    def _disconnect_destroyed(self, name: _IndexType) -> None:\n        \"\"\"Disconnect the destroyed slot if it was connected.\"\"\"\n",
        "target_code_len": 129,
        "diff_format": "@@ -96,3 +98,3 @@\n \n-    def _disconnect_destroyed(self, name: str) -> None:\n+    def _disconnect_destroyed(self, name: _IndexType) -> None:\n         \"\"\"Disconnect the destroyed slot if it was connected.\"\"\"\n",
        "source_code_with_indent": "\n    <DED>def _disconnect_destroyed(self, name: str) -> None:\n        <IND>\"\"\"Disconnect the destroyed slot if it was connected.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def _disconnect_destroyed(self, name: _IndexType) -> None:\n        <IND>\"\"\"Disconnect the destroyed slot if it was connected.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "qutebrowser/qutebrowser",
    "commit": "70f006a1b00d68bb04ef1f9c5a3d4d1edf9c6784",
    "filename": "qutebrowser/utils/objreg.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/qutebrowser-qutebrowser/qutebrowser/utils/objreg.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "qutebrowser/utils/objreg.py:88:31 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `typing.MutableMapping.__setitem__` but got `typing.Union[int, str]`.",
    "message": " Expected `str` for 1st positional only parameter to call `typing.MutableMapping.__setitem__` but got `typing.Union[int, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 88,
    "warning_line": "            self._partial_objs[name] = func",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nclass ObjectRegistry(collections.UserDict):\n",
        "source_code_len": 45,
        "target_code": "\n_IndexType = typing.Union[str, int]\n\n\nclass ObjectRegistry(collections.UserDict):\n",
        "target_code_len": 83,
        "diff_format": "@@ -53,2 +53,5 @@\n \n+_IndexType = typing.Union[str, int]\n+\n+\n class ObjectRegistry(collections.UserDict):\n",
        "source_code_with_indent": "\n<DED>class ObjectRegistry(collections.UserDict):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>_IndexType = typing.Union[str, int]\n\n\nclass ObjectRegistry(collections.UserDict):\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self._partial_objs = {\n        }  # type: typing.MutableMapping[str, typing.Callable[[], None]]\n        self.command_only = []  # type: typing.MutableSequence[str]\n\n    def __setitem__(self, name: typing.Union[int, str],\n                    obj: typing.Any) -> None:\n        \"\"\"Register an object in the object registry.\n",
        "source_code_len": 329,
        "target_code": "        self._partial_objs = {\n        }  # type: typing.MutableMapping[_IndexType, typing.Callable[[], None]]\n        self.command_only = []  # type: typing.MutableSequence[str]\n\n    def __setitem__(self, name: _IndexType, obj: typing.Any) -> None:\n        \"\"\"Register an object in the object registry.\n",
        "target_code_len": 304,
        "diff_format": "@@ -67,7 +70,6 @@\n         self._partial_objs = {\n-        }  # type: typing.MutableMapping[str, typing.Callable[[], None]]\n+        }  # type: typing.MutableMapping[_IndexType, typing.Callable[[], None]]\n         self.command_only = []  # type: typing.MutableSequence[str]\n \n-    def __setitem__(self, name: typing.Union[int, str],\n-                    obj: typing.Any) -> None:\n+    def __setitem__(self, name: _IndexType, obj: typing.Any) -> None:\n         \"\"\"Register an object in the object registry.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "        self._partial_objs = {\n        }  # type: typing.MutableMapping[str, typing.Callable[[], None]]\n        self.command_only = []  # type: typing.MutableSequence[str]\n\n    <DED>def __setitem__(self, name: typing.Union[int, str],\n                    obj: typing.Any) -> None:\n        <IND>",
        "target_code_with_indent": "        self._partial_objs = {\n        }  # type: typing.MutableMapping[_IndexType, typing.Callable[[], None]]\n        self.command_only = []  # type: typing.MutableSequence[str]\n\n    <DED>def __setitem__(self, name: _IndexType, obj: typing.Any) -> None:\n        <IND>"
      }
    ]
  }
]