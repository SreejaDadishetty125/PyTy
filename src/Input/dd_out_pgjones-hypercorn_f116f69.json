[
  {
    "project": "pgjones/hypercorn",
    "commit": "f116f69eb1184ca47243044d85e633334d3d5cd2",
    "filename": "hypercorn/logging.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pgjones-hypercorn/hypercorn/logging.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "hypercorn/logging.py:90:16 Incompatible parameter type [6]: Expected `Union[os.PathLike[str], typing.IO[str], configparser.RawConfigParser, str]` for 1st positional only parameter to call `fileConfig` but got `typing.Optional[str]`.",
    "message": " Expected `Union[os.PathLike[str], typing.IO[str], configparser.RawConfigParser, str]` for 1st positional only parameter to call `fileConfig` but got `typing.Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 90,
    "warning_line": "                config.logconfig, defaults=defaults, disable_existing_loggers=False",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "            defaults[\"here\"] = os.path.dirname(config.logconfig)\n            fileConfig(  # type: ignore\n                config.logconfig, defaults=defaults, disable_existing_loggers=False\n            )\n",
        "source_code_len": 203,
        "target_code": "            defaults[\"here\"] = os.path.dirname(config.logconfig)\n            fileConfig(\n                config.logconfig, defaults=defaults, disable_existing_loggers=False  # type: ignore\n            )\n",
        "target_code_len": 203,
        "diff_format": "@@ -88,4 +88,4 @@\n             defaults[\"here\"] = os.path.dirname(config.logconfig)\n-            fileConfig(  # type: ignore\n-                config.logconfig, defaults=defaults, disable_existing_loggers=False\n+            fileConfig(\n+                config.logconfig, defaults=defaults, disable_existing_loggers=False  # type: ignore\n             )\n",
        "source_code_with_indent": "            defaults[\"here\"] = os.path.dirname(config.logconfig)\n            fileConfig(  # type: ignore\n                config.logconfig, defaults=defaults, disable_existing_loggers=False\n            )\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            defaults[\"here\"] = os.path.dirname(config.logconfig)\n            fileConfig(\n                config.logconfig, defaults=defaults, disable_existing_loggers=False  # type: ignore\n            )\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pgjones/hypercorn",
    "commit": "f116f69eb1184ca47243044d85e633334d3d5cd2",
    "filename": "hypercorn/logging.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pgjones-hypercorn/hypercorn/logging.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "hypercorn/logging.py:90:34 Incompatible parameter type [6]: Expected `typing.Optional[typing.Dict[str, str]]` for 2nd parameter `defaults` to call `fileConfig` but got `typing.Dict[str, Union[typing.Dict[str, Union[typing.List[str], str]], typing.Dict[str, typing.Dict[str, Union[typing.List[str], bool, str]]], typing.Dict[str, typing.Dict[str, str]], int]]`.",
    "message": " Expected `typing.Optional[typing.Dict[str, str]]` for 2nd parameter `defaults` to call `fileConfig` but got `typing.Dict[str, Union[typing.Dict[str, Union[typing.List[str], str]], typing.Dict[str, typing.Dict[str, Union[typing.List[str], bool, str]]], typing.Dict[str, typing.Dict[str, str]], int]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 90,
    "warning_line": "                config.logconfig, defaults=defaults, disable_existing_loggers=False",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "            defaults[\"here\"] = os.path.dirname(config.logconfig)\n            fileConfig(  # type: ignore\n                config.logconfig, defaults=defaults, disable_existing_loggers=False\n            )\n",
        "source_code_len": 203,
        "target_code": "            defaults[\"here\"] = os.path.dirname(config.logconfig)\n            fileConfig(\n                config.logconfig, defaults=defaults, disable_existing_loggers=False  # type: ignore\n            )\n",
        "target_code_len": 203,
        "diff_format": "@@ -88,4 +88,4 @@\n             defaults[\"here\"] = os.path.dirname(config.logconfig)\n-            fileConfig(  # type: ignore\n-                config.logconfig, defaults=defaults, disable_existing_loggers=False\n+            fileConfig(\n+                config.logconfig, defaults=defaults, disable_existing_loggers=False  # type: ignore\n             )\n",
        "source_code_with_indent": "            defaults[\"here\"] = os.path.dirname(config.logconfig)\n            fileConfig(  # type: ignore\n                config.logconfig, defaults=defaults, disable_existing_loggers=False\n            )\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            defaults[\"here\"] = os.path.dirname(config.logconfig)\n            fileConfig(\n                config.logconfig, defaults=defaults, disable_existing_loggers=False  # type: ignore\n            )\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pgjones/hypercorn",
    "commit": "f116f69eb1184ca47243044d85e633334d3d5cd2",
    "filename": "tests/asyncio/test_keep_alive.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pgjones-hypercorn/tests/asyncio/test_keep_alive.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "tests/asyncio/test_keep_alive.py:42:44 Incompatible parameter type [6]: Expected `asyncio.streams.StreamReader` for 4th positional only parameter to call `TCPServer.__init__` but got `MemoryReader`.",
    "message": " Expected `asyncio.streams.StreamReader` for 4th positional only parameter to call `TCPServer.__init__` but got `MemoryReader`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 42,
    "warning_line": "        slow_framework, event_loop, config, MemoryReader(), MemoryWriter()",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "    config.keep_alive_timeout = KEEP_ALIVE_TIMEOUT\n    server = TCPServer(  # type: ignore\n        slow_framework, event_loop, config, MemoryReader(), MemoryWriter()\n    )\n",
        "source_code_len": 172,
        "target_code": "    config.keep_alive_timeout = KEEP_ALIVE_TIMEOUT\n    server = TCPServer(\n        slow_framework, event_loop, config, MemoryReader(), MemoryWriter()  # type: ignore\n    )\n",
        "target_code_len": 172,
        "diff_format": "@@ -40,4 +40,4 @@\n     config.keep_alive_timeout = KEEP_ALIVE_TIMEOUT\n-    server = TCPServer(  # type: ignore\n-        slow_framework, event_loop, config, MemoryReader(), MemoryWriter()\n+    server = TCPServer(\n+        slow_framework, event_loop, config, MemoryReader(), MemoryWriter()  # type: ignore\n     )\n",
        "source_code_with_indent": "    config.keep_alive_timeout = KEEP_ALIVE_TIMEOUT\n    server = TCPServer(  # type: ignore\n        slow_framework, event_loop, config, MemoryReader(), MemoryWriter()\n    )\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    config.keep_alive_timeout = KEEP_ALIVE_TIMEOUT\n    server = TCPServer(\n        slow_framework, event_loop, config, MemoryReader(), MemoryWriter()  # type: ignore\n    )\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pgjones/hypercorn",
    "commit": "f116f69eb1184ca47243044d85e633334d3d5cd2",
    "filename": "tests/asyncio/test_keep_alive.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pgjones-hypercorn/tests/asyncio/test_keep_alive.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "tests/asyncio/test_keep_alive.py:42:60 Incompatible parameter type [6]: Expected `asyncio.streams.StreamWriter` for 5th positional only parameter to call `TCPServer.__init__` but got `MemoryWriter`.",
    "message": " Expected `asyncio.streams.StreamWriter` for 5th positional only parameter to call `TCPServer.__init__` but got `MemoryWriter`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 42,
    "warning_line": "        slow_framework, event_loop, config, MemoryReader(), MemoryWriter()",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "    config.keep_alive_timeout = KEEP_ALIVE_TIMEOUT\n    server = TCPServer(  # type: ignore\n        slow_framework, event_loop, config, MemoryReader(), MemoryWriter()\n    )\n",
        "source_code_len": 172,
        "target_code": "    config.keep_alive_timeout = KEEP_ALIVE_TIMEOUT\n    server = TCPServer(\n        slow_framework, event_loop, config, MemoryReader(), MemoryWriter()  # type: ignore\n    )\n",
        "target_code_len": 172,
        "diff_format": "@@ -40,4 +40,4 @@\n     config.keep_alive_timeout = KEEP_ALIVE_TIMEOUT\n-    server = TCPServer(  # type: ignore\n-        slow_framework, event_loop, config, MemoryReader(), MemoryWriter()\n+    server = TCPServer(\n+        slow_framework, event_loop, config, MemoryReader(), MemoryWriter()  # type: ignore\n     )\n",
        "source_code_with_indent": "    config.keep_alive_timeout = KEEP_ALIVE_TIMEOUT\n    server = TCPServer(  # type: ignore\n        slow_framework, event_loop, config, MemoryReader(), MemoryWriter()\n    )\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    config.keep_alive_timeout = KEEP_ALIVE_TIMEOUT\n    server = TCPServer(\n        slow_framework, event_loop, config, MemoryReader(), MemoryWriter()  # type: ignore\n    )\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pgjones/hypercorn",
    "commit": "f116f69eb1184ca47243044d85e633334d3d5cd2",
    "filename": "tests/asyncio/test_sanity.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pgjones-hypercorn/tests/asyncio/test_sanity.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "tests/asyncio/test_sanity.py:17:48 Incompatible parameter type [6]: Expected `asyncio.streams.StreamReader` for 4th positional only parameter to call `TCPServer.__init__` but got `MemoryReader`.",
    "message": " Expected `asyncio.streams.StreamReader` for 4th positional only parameter to call `TCPServer.__init__` but got `MemoryReader`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 17,
    "warning_line": "        sanity_framework, event_loop, Config(), MemoryReader(), MemoryWriter()",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "async def test_http1_request(event_loop: asyncio.AbstractEventLoop) -> None:\n    server = TCPServer(  # type: ignore\n        sanity_framework, event_loop, Config(), MemoryReader(), MemoryWriter()\n    )\n",
        "source_code_len": 202,
        "target_code": "async def test_http1_request(event_loop: asyncio.AbstractEventLoop) -> None:\n    server = TCPServer(\n        sanity_framework, event_loop, Config(), MemoryReader(), MemoryWriter()  # type: ignore\n    )\n",
        "target_code_len": 202,
        "diff_format": "@@ -15,4 +15,4 @@\n async def test_http1_request(event_loop: asyncio.AbstractEventLoop) -> None:\n-    server = TCPServer(  # type: ignore\n-        sanity_framework, event_loop, Config(), MemoryReader(), MemoryWriter()\n+    server = TCPServer(\n+        sanity_framework, event_loop, Config(), MemoryReader(), MemoryWriter()  # type: ignore\n     )\n",
        "source_code_with_indent": "async def test_http1_request(event_loop: asyncio.AbstractEventLoop) -> None:\n    <IND>server = TCPServer(  # type: ignore\n        sanity_framework, event_loop, Config(), MemoryReader(), MemoryWriter()\n    )\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "async def test_http1_request(event_loop: asyncio.AbstractEventLoop) -> None:\n    <IND>server = TCPServer(\n        sanity_framework, event_loop, Config(), MemoryReader(), MemoryWriter()  # type: ignore\n    )\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pgjones/hypercorn",
    "commit": "f116f69eb1184ca47243044d85e633334d3d5cd2",
    "filename": "tests/asyncio/test_sanity.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pgjones-hypercorn/tests/asyncio/test_sanity.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "tests/asyncio/test_sanity.py:17:64 Incompatible parameter type [6]: Expected `asyncio.streams.StreamWriter` for 5th positional only parameter to call `TCPServer.__init__` but got `MemoryWriter`.",
    "message": " Expected `asyncio.streams.StreamWriter` for 5th positional only parameter to call `TCPServer.__init__` but got `MemoryWriter`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 17,
    "warning_line": "        sanity_framework, event_loop, Config(), MemoryReader(), MemoryWriter()",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "async def test_http1_request(event_loop: asyncio.AbstractEventLoop) -> None:\n    server = TCPServer(  # type: ignore\n        sanity_framework, event_loop, Config(), MemoryReader(), MemoryWriter()\n    )\n",
        "source_code_len": 202,
        "target_code": "async def test_http1_request(event_loop: asyncio.AbstractEventLoop) -> None:\n    server = TCPServer(\n        sanity_framework, event_loop, Config(), MemoryReader(), MemoryWriter()  # type: ignore\n    )\n",
        "target_code_len": 202,
        "diff_format": "@@ -15,4 +15,4 @@\n async def test_http1_request(event_loop: asyncio.AbstractEventLoop) -> None:\n-    server = TCPServer(  # type: ignore\n-        sanity_framework, event_loop, Config(), MemoryReader(), MemoryWriter()\n+    server = TCPServer(\n+        sanity_framework, event_loop, Config(), MemoryReader(), MemoryWriter()  # type: ignore\n     )\n",
        "source_code_with_indent": "async def test_http1_request(event_loop: asyncio.AbstractEventLoop) -> None:\n    <IND>server = TCPServer(  # type: ignore\n        sanity_framework, event_loop, Config(), MemoryReader(), MemoryWriter()\n    )\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "async def test_http1_request(event_loop: asyncio.AbstractEventLoop) -> None:\n    <IND>server = TCPServer(\n        sanity_framework, event_loop, Config(), MemoryReader(), MemoryWriter()  # type: ignore\n    )\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pgjones/hypercorn",
    "commit": "f116f69eb1184ca47243044d85e633334d3d5cd2",
    "filename": "tests/asyncio/test_sanity.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pgjones-hypercorn/tests/asyncio/test_sanity.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "tests/asyncio/test_sanity.py:67:48 Incompatible parameter type [6]: Expected `asyncio.streams.StreamReader` for 4th positional only parameter to call `TCPServer.__init__` but got `MemoryReader`.",
    "message": " Expected `asyncio.streams.StreamReader` for 4th positional only parameter to call `TCPServer.__init__` but got `MemoryReader`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 67,
    "warning_line": "        sanity_framework, event_loop, Config(), MemoryReader(), MemoryWriter()",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "async def test_http1_websocket(event_loop: asyncio.AbstractEventLoop) -> None:\n    server = TCPServer(  # type: ignore\n        sanity_framework, event_loop, Config(), MemoryReader(), MemoryWriter()\n    )\n",
        "source_code_len": 204,
        "target_code": "async def test_http1_websocket(event_loop: asyncio.AbstractEventLoop) -> None:\n    server = TCPServer(\n        sanity_framework, event_loop, Config(), MemoryReader(), MemoryWriter()  # type: ignore\n    )\n",
        "target_code_len": 204,
        "diff_format": "@@ -65,4 +65,4 @@\n async def test_http1_websocket(event_loop: asyncio.AbstractEventLoop) -> None:\n-    server = TCPServer(  # type: ignore\n-        sanity_framework, event_loop, Config(), MemoryReader(), MemoryWriter()\n+    server = TCPServer(\n+        sanity_framework, event_loop, Config(), MemoryReader(), MemoryWriter()  # type: ignore\n     )\n",
        "source_code_with_indent": "async def test_http1_websocket(event_loop: asyncio.AbstractEventLoop) -> None:\n    <IND>server = TCPServer(  # type: ignore\n        sanity_framework, event_loop, Config(), MemoryReader(), MemoryWriter()\n    )\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "async def test_http1_websocket(event_loop: asyncio.AbstractEventLoop) -> None:\n    <IND>server = TCPServer(\n        sanity_framework, event_loop, Config(), MemoryReader(), MemoryWriter()  # type: ignore\n    )\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pgjones/hypercorn",
    "commit": "f116f69eb1184ca47243044d85e633334d3d5cd2",
    "filename": "tests/asyncio/test_sanity.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pgjones-hypercorn/tests/asyncio/test_sanity.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "tests/asyncio/test_sanity.py:67:64 Incompatible parameter type [6]: Expected `asyncio.streams.StreamWriter` for 5th positional only parameter to call `TCPServer.__init__` but got `MemoryWriter`.",
    "message": " Expected `asyncio.streams.StreamWriter` for 5th positional only parameter to call `TCPServer.__init__` but got `MemoryWriter`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 67,
    "warning_line": "        sanity_framework, event_loop, Config(), MemoryReader(), MemoryWriter()",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "async def test_http1_websocket(event_loop: asyncio.AbstractEventLoop) -> None:\n    server = TCPServer(  # type: ignore\n        sanity_framework, event_loop, Config(), MemoryReader(), MemoryWriter()\n    )\n",
        "source_code_len": 204,
        "target_code": "async def test_http1_websocket(event_loop: asyncio.AbstractEventLoop) -> None:\n    server = TCPServer(\n        sanity_framework, event_loop, Config(), MemoryReader(), MemoryWriter()  # type: ignore\n    )\n",
        "target_code_len": 204,
        "diff_format": "@@ -65,4 +65,4 @@\n async def test_http1_websocket(event_loop: asyncio.AbstractEventLoop) -> None:\n-    server = TCPServer(  # type: ignore\n-        sanity_framework, event_loop, Config(), MemoryReader(), MemoryWriter()\n+    server = TCPServer(\n+        sanity_framework, event_loop, Config(), MemoryReader(), MemoryWriter()  # type: ignore\n     )\n",
        "source_code_with_indent": "async def test_http1_websocket(event_loop: asyncio.AbstractEventLoop) -> None:\n    <IND>server = TCPServer(  # type: ignore\n        sanity_framework, event_loop, Config(), MemoryReader(), MemoryWriter()\n    )\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "async def test_http1_websocket(event_loop: asyncio.AbstractEventLoop) -> None:\n    <IND>server = TCPServer(\n        sanity_framework, event_loop, Config(), MemoryReader(), MemoryWriter()  # type: ignore\n    )\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pgjones/hypercorn",
    "commit": "f116f69eb1184ca47243044d85e633334d3d5cd2",
    "filename": "tests/asyncio/test_sanity.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pgjones-hypercorn/tests/asyncio/test_sanity.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "tests/asyncio/test_sanity.py:99:48 Incompatible parameter type [6]: Expected `asyncio.streams.StreamReader` for 4th positional only parameter to call `TCPServer.__init__` but got `MemoryReader`.",
    "message": " Expected `asyncio.streams.StreamReader` for 4th positional only parameter to call `TCPServer.__init__` but got `MemoryReader`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 99,
    "warning_line": "        sanity_framework, event_loop, Config(), MemoryReader(), MemoryWriter(http2=True)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "async def test_http2_request(event_loop: asyncio.AbstractEventLoop) -> None:\n    server = TCPServer(  # type: ignore\n        sanity_framework, event_loop, Config(), MemoryReader(), MemoryWriter(http2=True)\n    )\n",
        "source_code_len": 212,
        "target_code": "async def test_http2_request(event_loop: asyncio.AbstractEventLoop) -> None:\n    server = TCPServer(\n        sanity_framework,\n        event_loop,\n        Config(),\n        MemoryReader(),  # type: ignore\n        MemoryWriter(http2=True),  # type: ignore\n    )\n",
        "target_code_len": 261,
        "diff_format": "@@ -97,4 +97,8 @@\n async def test_http2_request(event_loop: asyncio.AbstractEventLoop) -> None:\n-    server = TCPServer(  # type: ignore\n-        sanity_framework, event_loop, Config(), MemoryReader(), MemoryWriter(http2=True)\n+    server = TCPServer(\n+        sanity_framework,\n+        event_loop,\n+        Config(),\n+        MemoryReader(),  # type: ignore\n+        MemoryWriter(http2=True),  # type: ignore\n     )\n",
        "source_code_with_indent": "async def test_http2_request(event_loop: asyncio.AbstractEventLoop) -> None:\n    <IND>server = TCPServer(  # type: ignore\n        sanity_framework, event_loop, Config(), MemoryReader(), MemoryWriter(http2=True)\n    )\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "async def test_http2_request(event_loop: asyncio.AbstractEventLoop) -> None:\n    <IND>server = TCPServer(\n        sanity_framework,\n        event_loop,\n        Config(),\n        MemoryReader(),  # type: ignore\n        MemoryWriter(http2=True),  # type: ignore\n    )\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pgjones/hypercorn",
    "commit": "f116f69eb1184ca47243044d85e633334d3d5cd2",
    "filename": "tests/asyncio/test_sanity.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pgjones-hypercorn/tests/asyncio/test_sanity.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "tests/asyncio/test_sanity.py:99:64 Incompatible parameter type [6]: Expected `asyncio.streams.StreamWriter` for 5th positional only parameter to call `TCPServer.__init__` but got `MemoryWriter`.",
    "message": " Expected `asyncio.streams.StreamWriter` for 5th positional only parameter to call `TCPServer.__init__` but got `MemoryWriter`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 99,
    "warning_line": "        sanity_framework, event_loop, Config(), MemoryReader(), MemoryWriter(http2=True)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "async def test_http2_request(event_loop: asyncio.AbstractEventLoop) -> None:\n    server = TCPServer(  # type: ignore\n        sanity_framework, event_loop, Config(), MemoryReader(), MemoryWriter(http2=True)\n    )\n",
        "source_code_len": 212,
        "target_code": "async def test_http2_request(event_loop: asyncio.AbstractEventLoop) -> None:\n    server = TCPServer(\n        sanity_framework,\n        event_loop,\n        Config(),\n        MemoryReader(),  # type: ignore\n        MemoryWriter(http2=True),  # type: ignore\n    )\n",
        "target_code_len": 261,
        "diff_format": "@@ -97,4 +97,8 @@\n async def test_http2_request(event_loop: asyncio.AbstractEventLoop) -> None:\n-    server = TCPServer(  # type: ignore\n-        sanity_framework, event_loop, Config(), MemoryReader(), MemoryWriter(http2=True)\n+    server = TCPServer(\n+        sanity_framework,\n+        event_loop,\n+        Config(),\n+        MemoryReader(),  # type: ignore\n+        MemoryWriter(http2=True),  # type: ignore\n     )\n",
        "source_code_with_indent": "async def test_http2_request(event_loop: asyncio.AbstractEventLoop) -> None:\n    <IND>server = TCPServer(  # type: ignore\n        sanity_framework, event_loop, Config(), MemoryReader(), MemoryWriter(http2=True)\n    )\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "async def test_http2_request(event_loop: asyncio.AbstractEventLoop) -> None:\n    <IND>server = TCPServer(\n        sanity_framework,\n        event_loop,\n        Config(),\n        MemoryReader(),  # type: ignore\n        MemoryWriter(http2=True),  # type: ignore\n    )\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pgjones/hypercorn",
    "commit": "f116f69eb1184ca47243044d85e633334d3d5cd2",
    "filename": "tests/asyncio/test_sanity.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pgjones-hypercorn/tests/asyncio/test_sanity.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "tests/asyncio/test_sanity.py:151:48 Incompatible parameter type [6]: Expected `asyncio.streams.StreamReader` for 4th positional only parameter to call `TCPServer.__init__` but got `MemoryReader`.",
    "message": " Expected `asyncio.streams.StreamReader` for 4th positional only parameter to call `TCPServer.__init__` but got `MemoryReader`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 151,
    "warning_line": "        sanity_framework, event_loop, Config(), MemoryReader(), MemoryWriter(http2=True)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "async def test_http2_websocket(event_loop: asyncio.AbstractEventLoop) -> None:\n    server = TCPServer(  # type: ignore\n        sanity_framework, event_loop, Config(), MemoryReader(), MemoryWriter(http2=True)\n    )\n",
        "source_code_len": 214,
        "target_code": "async def test_http2_websocket(event_loop: asyncio.AbstractEventLoop) -> None:\n    server = TCPServer(\n        sanity_framework,\n        event_loop,\n        Config(),\n        MemoryReader(),  # type: ignore\n        MemoryWriter(http2=True),  # type: ignore\n    )\n",
        "target_code_len": 263,
        "diff_format": "@@ -149,4 +153,8 @@\n async def test_http2_websocket(event_loop: asyncio.AbstractEventLoop) -> None:\n-    server = TCPServer(  # type: ignore\n-        sanity_framework, event_loop, Config(), MemoryReader(), MemoryWriter(http2=True)\n+    server = TCPServer(\n+        sanity_framework,\n+        event_loop,\n+        Config(),\n+        MemoryReader(),  # type: ignore\n+        MemoryWriter(http2=True),  # type: ignore\n     )\n",
        "source_code_with_indent": "async def test_http2_websocket(event_loop: asyncio.AbstractEventLoop) -> None:\n    <IND>server = TCPServer(  # type: ignore\n        sanity_framework, event_loop, Config(), MemoryReader(), MemoryWriter(http2=True)\n    )\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "async def test_http2_websocket(event_loop: asyncio.AbstractEventLoop) -> None:\n    <IND>server = TCPServer(\n        sanity_framework,\n        event_loop,\n        Config(),\n        MemoryReader(),  # type: ignore\n        MemoryWriter(http2=True),  # type: ignore\n    )\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pgjones/hypercorn",
    "commit": "f116f69eb1184ca47243044d85e633334d3d5cd2",
    "filename": "tests/asyncio/test_sanity.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pgjones-hypercorn/tests/asyncio/test_sanity.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "tests/asyncio/test_sanity.py:151:64 Incompatible parameter type [6]: Expected `asyncio.streams.StreamWriter` for 5th positional only parameter to call `TCPServer.__init__` but got `MemoryWriter`.",
    "message": " Expected `asyncio.streams.StreamWriter` for 5th positional only parameter to call `TCPServer.__init__` but got `MemoryWriter`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 151,
    "warning_line": "        sanity_framework, event_loop, Config(), MemoryReader(), MemoryWriter(http2=True)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "async def test_http2_websocket(event_loop: asyncio.AbstractEventLoop) -> None:\n    server = TCPServer(  # type: ignore\n        sanity_framework, event_loop, Config(), MemoryReader(), MemoryWriter(http2=True)\n    )\n",
        "source_code_len": 214,
        "target_code": "async def test_http2_websocket(event_loop: asyncio.AbstractEventLoop) -> None:\n    server = TCPServer(\n        sanity_framework,\n        event_loop,\n        Config(),\n        MemoryReader(),  # type: ignore\n        MemoryWriter(http2=True),  # type: ignore\n    )\n",
        "target_code_len": 263,
        "diff_format": "@@ -149,4 +153,8 @@\n async def test_http2_websocket(event_loop: asyncio.AbstractEventLoop) -> None:\n-    server = TCPServer(  # type: ignore\n-        sanity_framework, event_loop, Config(), MemoryReader(), MemoryWriter(http2=True)\n+    server = TCPServer(\n+        sanity_framework,\n+        event_loop,\n+        Config(),\n+        MemoryReader(),  # type: ignore\n+        MemoryWriter(http2=True),  # type: ignore\n     )\n",
        "source_code_with_indent": "async def test_http2_websocket(event_loop: asyncio.AbstractEventLoop) -> None:\n    <IND>server = TCPServer(  # type: ignore\n        sanity_framework, event_loop, Config(), MemoryReader(), MemoryWriter(http2=True)\n    )\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "async def test_http2_websocket(event_loop: asyncio.AbstractEventLoop) -> None:\n    <IND>server = TCPServer(\n        sanity_framework,\n        event_loop,\n        Config(),\n        MemoryReader(),  # type: ignore\n        MemoryWriter(http2=True),  # type: ignore\n    )\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pgjones/hypercorn",
    "commit": "f116f69eb1184ca47243044d85e633334d3d5cd2",
    "filename": "tests/asyncio/test_tcp_server.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pgjones-hypercorn/tests/asyncio/test_tcp_server.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "tests/asyncio/test_tcp_server.py:52:46 Incompatible parameter type [6]: Expected `asyncio.streams.StreamReader` for 4th positional only parameter to call `TCPServer.__init__` but got `MemoryReader`.",
    "message": " Expected `asyncio.streams.StreamReader` for 4th positional only parameter to call `TCPServer.__init__` but got `MemoryReader`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 52,
    "warning_line": "        echo_framework, event_loop, Config(), MemoryReader(), MemoryWriter()",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "async def test_completes_on_closed(event_loop: asyncio.AbstractEventLoop) -> None:\n    server = TCPServer(  # type: ignore\n        echo_framework, event_loop, Config(), MemoryReader(), MemoryWriter()\n    )\n",
        "source_code_len": 206,
        "target_code": "async def test_completes_on_closed(event_loop: asyncio.AbstractEventLoop) -> None:\n    server = TCPServer(\n        echo_framework, event_loop, Config(), MemoryReader(), MemoryWriter()  # type: ignore\n    )\n",
        "target_code_len": 206,
        "diff_format": "@@ -50,4 +50,4 @@\n async def test_completes_on_closed(event_loop: asyncio.AbstractEventLoop) -> None:\n-    server = TCPServer(  # type: ignore\n-        echo_framework, event_loop, Config(), MemoryReader(), MemoryWriter()\n+    server = TCPServer(\n+        echo_framework, event_loop, Config(), MemoryReader(), MemoryWriter()  # type: ignore\n     )\n",
        "source_code_with_indent": "async def test_completes_on_closed(event_loop: asyncio.AbstractEventLoop) -> None:\n    <IND>server = TCPServer(  # type: ignore\n        echo_framework, event_loop, Config(), MemoryReader(), MemoryWriter()\n    )\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "async def test_completes_on_closed(event_loop: asyncio.AbstractEventLoop) -> None:\n    <IND>server = TCPServer(\n        echo_framework, event_loop, Config(), MemoryReader(), MemoryWriter()  # type: ignore\n    )\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pgjones/hypercorn",
    "commit": "f116f69eb1184ca47243044d85e633334d3d5cd2",
    "filename": "tests/asyncio/test_tcp_server.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pgjones-hypercorn/tests/asyncio/test_tcp_server.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "tests/asyncio/test_tcp_server.py:52:62 Incompatible parameter type [6]: Expected `asyncio.streams.StreamWriter` for 5th positional only parameter to call `TCPServer.__init__` but got `MemoryWriter`.",
    "message": " Expected `asyncio.streams.StreamWriter` for 5th positional only parameter to call `TCPServer.__init__` but got `MemoryWriter`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 52,
    "warning_line": "        echo_framework, event_loop, Config(), MemoryReader(), MemoryWriter()",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "async def test_completes_on_closed(event_loop: asyncio.AbstractEventLoop) -> None:\n    server = TCPServer(  # type: ignore\n        echo_framework, event_loop, Config(), MemoryReader(), MemoryWriter()\n    )\n",
        "source_code_len": 206,
        "target_code": "async def test_completes_on_closed(event_loop: asyncio.AbstractEventLoop) -> None:\n    server = TCPServer(\n        echo_framework, event_loop, Config(), MemoryReader(), MemoryWriter()  # type: ignore\n    )\n",
        "target_code_len": 206,
        "diff_format": "@@ -50,4 +50,4 @@\n async def test_completes_on_closed(event_loop: asyncio.AbstractEventLoop) -> None:\n-    server = TCPServer(  # type: ignore\n-        echo_framework, event_loop, Config(), MemoryReader(), MemoryWriter()\n+    server = TCPServer(\n+        echo_framework, event_loop, Config(), MemoryReader(), MemoryWriter()  # type: ignore\n     )\n",
        "source_code_with_indent": "async def test_completes_on_closed(event_loop: asyncio.AbstractEventLoop) -> None:\n    <IND>server = TCPServer(  # type: ignore\n        echo_framework, event_loop, Config(), MemoryReader(), MemoryWriter()\n    )\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "async def test_completes_on_closed(event_loop: asyncio.AbstractEventLoop) -> None:\n    <IND>server = TCPServer(\n        echo_framework, event_loop, Config(), MemoryReader(), MemoryWriter()  # type: ignore\n    )\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]