[
  {
    "project": "python-microservices/pyms",
    "commit": "aefb690659ff9a6529a3249e50ad150e3589f066",
    "filename": "pyms/crypt/fernet.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-microservices-pyms/pyms/crypt/fernet.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pyms/crypt/fernet.py:22:8 Incompatible variable type [9]: password is declared to have type `str` but is used as type `bytes`.",
    "message": " password is declared to have type `str` but is used as type `bytes`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 22,
    "warning_line": "        password = password.encode()  # Convert to type bytes",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def generate_key(self, password: Text, write_to_file: bool = False):\n        password = password.encode()  # Convert to type bytes\n        salt = os.urandom(16)\n",
        "source_code_len": 166,
        "target_code": "\n    def generate_key(self, password: Text, write_to_file: bool = False) -> bytes:\n        byte_password = password.encode()  # Convert to type bytes\n        salt = os.urandom(16)\n",
        "target_code_len": 180,
        "diff_format": "@@ -20,4 +20,4 @@\n \n-    def generate_key(self, password: Text, write_to_file: bool = False):\n-        password = password.encode()  # Convert to type bytes\n+    def generate_key(self, password: Text, write_to_file: bool = False) -> bytes:\n+        byte_password = password.encode()  # Convert to type bytes\n         salt = os.urandom(16)\n",
        "source_code_with_indent": "\n    <DED>def generate_key(self, password: Text, write_to_file: bool = False):\n        <IND>password = password.encode()  # Convert to type bytes\n        salt = os.urandom(16)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def generate_key(self, password: Text, write_to_file: bool = False) -> bytes:\n        <IND>byte_password = password.encode()  # Convert to type bytes\n        salt = os.urandom(16)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "python-microservices/pyms",
    "commit": "aefb690659ff9a6529a3249e50ad150e3589f066",
    "filename": "pyms/crypt/fernet.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-microservices-pyms/pyms/crypt/fernet.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pyms/crypt/fernet.py:31:50 Incompatible parameter type [6]: Expected `bytes` for 1st positional only parameter to call `PBKDF2HMAC.derive` but got `str`.",
    "message": " Expected `bytes` for 1st positional only parameter to call `PBKDF2HMAC.derive` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 31,
    "warning_line": "        key = base64.urlsafe_b64encode(kdf.derive(password))  # Can only use kdf once",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def generate_key(self, password: Text, write_to_file: bool = False):\n        password = password.encode()  # Convert to type bytes\n        salt = os.urandom(16)\n",
        "source_code_len": 166,
        "target_code": "\n    def generate_key(self, password: Text, write_to_file: bool = False) -> bytes:\n        byte_password = password.encode()  # Convert to type bytes\n        salt = os.urandom(16)\n",
        "target_code_len": 180,
        "diff_format": "@@ -20,4 +20,4 @@\n \n-    def generate_key(self, password: Text, write_to_file: bool = False):\n-        password = password.encode()  # Convert to type bytes\n+    def generate_key(self, password: Text, write_to_file: bool = False) -> bytes:\n+        byte_password = password.encode()  # Convert to type bytes\n         salt = os.urandom(16)\n",
        "source_code_with_indent": "\n    <DED>def generate_key(self, password: Text, write_to_file: bool = False):\n        <IND>password = password.encode()  # Convert to type bytes\n        salt = os.urandom(16)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def generate_key(self, password: Text, write_to_file: bool = False) -> bytes:\n        <IND>byte_password = password.encode()  # Convert to type bytes\n        salt = os.urandom(16)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        )\n        key = base64.urlsafe_b64encode(kdf.derive(password))  # Can only use kdf once\n        if write_to_file:\n",
        "source_code_len": 122,
        "target_code": "        )\n        key = base64.urlsafe_b64encode(kdf.derive(byte_password))  # Can only use kdf once\n        if write_to_file:\n",
        "target_code_len": 127,
        "diff_format": "@@ -30,3 +30,3 @@\n         )\n-        key = base64.urlsafe_b64encode(kdf.derive(password))  # Can only use kdf once\n+        key = base64.urlsafe_b64encode(kdf.derive(byte_password))  # Can only use kdf once\n         if write_to_file:\n",
        "source_code_with_indent": "        )\n        key = base64.urlsafe_b64encode(kdf.derive(password))  # Can only use kdf once\n        if write_to_file:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        )\n        key = base64.urlsafe_b64encode(kdf.derive(byte_password))  # Can only use kdf once\n        if write_to_file:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "python-microservices/pyms",
    "commit": "aefb690659ff9a6529a3249e50ad150e3589f066",
    "filename": "pyms/flask/app/create_app.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-microservices-pyms/pyms/flask/app/create_app.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pyms/flask/app/create_app.py:78:4 Incompatible attribute type [8]: Attribute `swagger` declared in class `Microservice` has type `DriverService` but is used as type `None`.",
    "message": " Attribute `swagger` declared in class `Microservice` has type `DriverService` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 78,
    "warning_line": "    swagger: DriverService = None"
  },
  {
    "project": "python-microservices/pyms",
    "commit": "aefb690659ff9a6529a3249e50ad150e3589f066",
    "filename": "pyms/flask/app/create_app.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-microservices-pyms/pyms/flask/app/create_app.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pyms/flask/app/create_app.py:79:4 Incompatible attribute type [8]: Attribute `request` declared in class `Microservice` has type `DriverService` but is used as type `None`.",
    "message": " Attribute `request` declared in class `Microservice` has type `DriverService` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 79,
    "warning_line": "    request: DriverService = None"
  },
  {
    "project": "python-microservices/pyms",
    "commit": "aefb690659ff9a6529a3249e50ad150e3589f066",
    "filename": "pyms/flask/app/create_app.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-microservices-pyms/pyms/flask/app/create_app.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pyms/flask/app/create_app.py:80:4 Incompatible attribute type [8]: Attribute `tracer` declared in class `Microservice` has type `DriverService` but is used as type `None`.",
    "message": " Attribute `tracer` declared in class `Microservice` has type `DriverService` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 80,
    "warning_line": "    tracer: DriverService = None"
  },
  {
    "project": "python-microservices/pyms",
    "commit": "aefb690659ff9a6529a3249e50ad150e3589f066",
    "filename": "pyms/flask/app/create_app.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-microservices-pyms/pyms/flask/app/create_app.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pyms/flask/app/create_app.py:81:4 Incompatible attribute type [8]: Attribute `metrics` declared in class `Microservice` has type `DriverService` but is used as type `None`.",
    "message": " Attribute `metrics` declared in class `Microservice` has type `DriverService` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 81,
    "warning_line": "    metrics: DriverService = None"
  },
  {
    "project": "python-microservices/pyms",
    "commit": "aefb690659ff9a6529a3249e50ad150e3589f066",
    "filename": "pyms/flask/app/create_app.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-microservices-pyms/pyms/flask/app/create_app.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pyms/flask/app/create_app.py:109:37 Incompatible parameter type [6]: Expected `DriverService` for 1st positional only parameter to call `list.append` but got `str`.",
    "message": " Expected `DriverService` for 1st positional only parameter to call `list.append` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 109,
    "warning_line": "                self.services.append(service_name)"
  },
  {
    "project": "python-microservices/pyms",
    "commit": "aefb690659ff9a6529a3249e50ad150e3589f066",
    "filename": "pyms/flask/app/create_app.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-microservices-pyms/pyms/flask/app/create_app.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pyms/flask/app/create_app.py:127:30 Incompatible parameter type [6]: Expected `str` for 2nd positional only parameter to call `delattr` but got `DriverService`.",
    "message": " Expected `str` for 2nd positional only parameter to call `delattr` but got `DriverService`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 127,
    "warning_line": "                delattr(self, service_name)"
  },
  {
    "project": "python-microservices/pyms",
    "commit": "aefb690659ff9a6529a3249e50ad150e3589f066",
    "filename": "pyms/flask/app/create_app.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-microservices-pyms/pyms/flask/app/create_app.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pyms/flask/app/create_app.py:158:33 Incompatible parameter type [6]: Expected `typing.Optional[logging.Formatter]` for 1st positional only parameter to call `logging.Handler.setFormatter` but got `pyms.logger.logger.CustomJsonFormatter`.",
    "message": " Expected `typing.Optional[logging.Formatter]` for 1st positional only parameter to call `logging.Handler.setFormatter` but got `pyms.logger.logger.CustomJsonFormatter`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 158,
    "warning_line": "        log_handler.setFormatter(formatter)"
  }
]