[
  {
    "project": "bridgecrewio/checkov",
    "commit": "889f451d25ebb76300ca9255642e24727cc81fd9",
    "filename": "checkov/terraform/parser_utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/bridgecrewio-checkov/checkov/terraform/parser_utils.py",
    "file_hunks_size": 19,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "checkov/terraform/parser_utils.py:88:48 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `ParserMode.is_string` but got `typing.Union[ParserMode, str]`.",
    "message": " Expected `str` for 1st positional only parameter to call `ParserMode.is_string` but got `typing.Union[ParserMode, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 88,
    "warning_line": "        elif c == \"\\\\\" and ParserMode.is_string(current_mode):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    ARRAY = \"[\"\n\n    @staticmethod\n    def is_string(mode: str) -> bool:\n        return mode == ParserMode.STRING_SINGLE_QUOTE or mode == ParserMode.STRING_DOUBLE_QUOTE\n\n    def __repr__(self):\n        return str(self.value)\n\n    def __str__(self):\n        return str(self.value)\n",
        "source_code_len": 280,
        "target_code": "    ARRAY = \"[\"\n    BLANK = \" \"\n\n    @staticmethod\n    def is_string(mode: \"ParserMode\") -> bool:\n        return mode == ParserMode.STRING_SINGLE_QUOTE or mode == ParserMode.STRING_DOUBLE_QUOTE\n\n    def __repr__(self) -> str:\n        return str(self.value)\n\n    def __str__(self) -> str:\n        return str(self.value)\n",
        "target_code_len": 319,
        "diff_format": "@@ -38,11 +39,12 @@\n     ARRAY = \"[\"\n+    BLANK = \" \"\n \n     @staticmethod\n-    def is_string(mode: str) -> bool:\n+    def is_string(mode: \"ParserMode\") -> bool:\n         return mode == ParserMode.STRING_SINGLE_QUOTE or mode == ParserMode.STRING_DOUBLE_QUOTE\n \n-    def __repr__(self):\n+    def __repr__(self) -> str:\n         return str(self.value)\n \n-    def __str__(self):\n+    def __str__(self) -> str:\n         return str(self.value)\n",
        "source_code_with_indent": "    ARRAY = \"[\"\n\n    @staticmethod\n    def is_string(mode: str) -> bool:\n        <IND>return mode == ParserMode.STRING_SINGLE_QUOTE or mode == ParserMode.STRING_DOUBLE_QUOTE\n\n    <DED>def __repr__(self):\n        <IND>return str(self.value)\n\n    <DED>def __str__(self):\n        <IND>return str(self.value)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    ARRAY = \"[\"\n    BLANK = \" \"\n\n    @staticmethod\n    def is_string(mode: \"ParserMode\") -> bool:\n        <IND>return mode == ParserMode.STRING_SINGLE_QUOTE or mode == ParserMode.STRING_DOUBLE_QUOTE\n\n    <DED>def __repr__(self) -> str:\n        <IND>return str(self.value)\n\n    <DED>def __str__(self) -> str:\n        <IND>return str(self.value)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    for index, c in enumerate(value):\n        current_mode = \"  \" if not mode_stack else mode_stack[-1]\n\n",
        "source_code_len": 105,
        "target_code": "    for index, c in enumerate(value):\n        current_mode = ParserMode.BLANK if not mode_stack else mode_stack[-1]\n\n",
        "target_code_len": 117,
        "diff_format": "@@ -67,3 +69,3 @@\n     for index, c in enumerate(value):\n-        current_mode = \"  \" if not mode_stack else mode_stack[-1]\n+        current_mode = ParserMode.BLANK if not mode_stack else mode_stack[-1]\n \n",
        "source_code_with_indent": "    for index, c in enumerate(value):\n        <IND>current_mode = \"  \" if not mode_stack else mode_stack[-1]\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    for index, c in enumerate(value):\n        <IND>current_mode = ParserMode.BLANK if not mode_stack else mode_stack[-1]\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "bridgecrewio/checkov",
    "commit": "889f451d25ebb76300ca9255642e24727cc81fd9",
    "filename": "checkov/terraform/parser_utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/bridgecrewio-checkov/checkov/terraform/parser_utils.py",
    "file_hunks_size": 19,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "checkov/terraform/parser_utils.py:148:40 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `ParserMode.is_string` but got `typing.Union[ParserMode, str]`.",
    "message": " Expected `str` for 1st positional only parameter to call `ParserMode.is_string` but got `typing.Union[ParserMode, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 148,
    "warning_line": "            if not ParserMode.is_string(current_mode):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    ARRAY = \"[\"\n\n    @staticmethod\n    def is_string(mode: str) -> bool:\n        return mode == ParserMode.STRING_SINGLE_QUOTE or mode == ParserMode.STRING_DOUBLE_QUOTE\n\n    def __repr__(self):\n        return str(self.value)\n\n    def __str__(self):\n        return str(self.value)\n",
        "source_code_len": 280,
        "target_code": "    ARRAY = \"[\"\n    BLANK = \" \"\n\n    @staticmethod\n    def is_string(mode: \"ParserMode\") -> bool:\n        return mode == ParserMode.STRING_SINGLE_QUOTE or mode == ParserMode.STRING_DOUBLE_QUOTE\n\n    def __repr__(self) -> str:\n        return str(self.value)\n\n    def __str__(self) -> str:\n        return str(self.value)\n",
        "target_code_len": 319,
        "diff_format": "@@ -38,11 +39,12 @@\n     ARRAY = \"[\"\n+    BLANK = \" \"\n \n     @staticmethod\n-    def is_string(mode: str) -> bool:\n+    def is_string(mode: \"ParserMode\") -> bool:\n         return mode == ParserMode.STRING_SINGLE_QUOTE or mode == ParserMode.STRING_DOUBLE_QUOTE\n \n-    def __repr__(self):\n+    def __repr__(self) -> str:\n         return str(self.value)\n \n-    def __str__(self):\n+    def __str__(self) -> str:\n         return str(self.value)\n",
        "source_code_with_indent": "    ARRAY = \"[\"\n\n    @staticmethod\n    def is_string(mode: str) -> bool:\n        <IND>return mode == ParserMode.STRING_SINGLE_QUOTE or mode == ParserMode.STRING_DOUBLE_QUOTE\n\n    <DED>def __repr__(self):\n        <IND>return str(self.value)\n\n    <DED>def __str__(self):\n        <IND>return str(self.value)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    ARRAY = \"[\"\n    BLANK = \" \"\n\n    @staticmethod\n    def is_string(mode: \"ParserMode\") -> bool:\n        <IND>return mode == ParserMode.STRING_SINGLE_QUOTE or mode == ParserMode.STRING_DOUBLE_QUOTE\n\n    <DED>def __repr__(self) -> str:\n        <IND>return str(self.value)\n\n    <DED>def __str__(self) -> str:\n        <IND>return str(self.value)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    for index, c in enumerate(value):\n        current_mode = \"  \" if not mode_stack else mode_stack[-1]\n\n",
        "source_code_len": 105,
        "target_code": "    for index, c in enumerate(value):\n        current_mode = ParserMode.BLANK if not mode_stack else mode_stack[-1]\n\n",
        "target_code_len": 117,
        "diff_format": "@@ -67,3 +69,3 @@\n     for index, c in enumerate(value):\n-        current_mode = \"  \" if not mode_stack else mode_stack[-1]\n+        current_mode = ParserMode.BLANK if not mode_stack else mode_stack[-1]\n \n",
        "source_code_with_indent": "    for index, c in enumerate(value):\n        <IND>current_mode = \"  \" if not mode_stack else mode_stack[-1]\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    for index, c in enumerate(value):\n        <IND>current_mode = ParserMode.BLANK if not mode_stack else mode_stack[-1]\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "bridgecrewio/checkov",
    "commit": "889f451d25ebb76300ca9255642e24727cc81fd9",
    "filename": "checkov/terraform/parser_utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/bridgecrewio-checkov/checkov/terraform/parser_utils.py",
    "file_hunks_size": 19,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "checkov/terraform/parser_utils.py:151:40 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `ParserMode.is_string` but got `typing.Union[ParserMode, str]`.",
    "message": " Expected `str` for 1st positional only parameter to call `ParserMode.is_string` but got `typing.Union[ParserMode, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 151,
    "warning_line": "            if not ParserMode.is_string(current_mode):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    ARRAY = \"[\"\n\n    @staticmethod\n    def is_string(mode: str) -> bool:\n        return mode == ParserMode.STRING_SINGLE_QUOTE or mode == ParserMode.STRING_DOUBLE_QUOTE\n\n    def __repr__(self):\n        return str(self.value)\n\n    def __str__(self):\n        return str(self.value)\n",
        "source_code_len": 280,
        "target_code": "    ARRAY = \"[\"\n    BLANK = \" \"\n\n    @staticmethod\n    def is_string(mode: \"ParserMode\") -> bool:\n        return mode == ParserMode.STRING_SINGLE_QUOTE or mode == ParserMode.STRING_DOUBLE_QUOTE\n\n    def __repr__(self) -> str:\n        return str(self.value)\n\n    def __str__(self) -> str:\n        return str(self.value)\n",
        "target_code_len": 319,
        "diff_format": "@@ -38,11 +39,12 @@\n     ARRAY = \"[\"\n+    BLANK = \" \"\n \n     @staticmethod\n-    def is_string(mode: str) -> bool:\n+    def is_string(mode: \"ParserMode\") -> bool:\n         return mode == ParserMode.STRING_SINGLE_QUOTE or mode == ParserMode.STRING_DOUBLE_QUOTE\n \n-    def __repr__(self):\n+    def __repr__(self) -> str:\n         return str(self.value)\n \n-    def __str__(self):\n+    def __str__(self) -> str:\n         return str(self.value)\n",
        "source_code_with_indent": "    ARRAY = \"[\"\n\n    @staticmethod\n    def is_string(mode: str) -> bool:\n        <IND>return mode == ParserMode.STRING_SINGLE_QUOTE or mode == ParserMode.STRING_DOUBLE_QUOTE\n\n    <DED>def __repr__(self):\n        <IND>return str(self.value)\n\n    <DED>def __str__(self):\n        <IND>return str(self.value)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    ARRAY = \"[\"\n    BLANK = \" \"\n\n    @staticmethod\n    def is_string(mode: \"ParserMode\") -> bool:\n        <IND>return mode == ParserMode.STRING_SINGLE_QUOTE or mode == ParserMode.STRING_DOUBLE_QUOTE\n\n    <DED>def __repr__(self) -> str:\n        <IND>return str(self.value)\n\n    <DED>def __str__(self) -> str:\n        <IND>return str(self.value)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    for index, c in enumerate(value):\n        current_mode = \"  \" if not mode_stack else mode_stack[-1]\n\n",
        "source_code_len": 105,
        "target_code": "    for index, c in enumerate(value):\n        current_mode = ParserMode.BLANK if not mode_stack else mode_stack[-1]\n\n",
        "target_code_len": 117,
        "diff_format": "@@ -67,3 +69,3 @@\n     for index, c in enumerate(value):\n-        current_mode = \"  \" if not mode_stack else mode_stack[-1]\n+        current_mode = ParserMode.BLANK if not mode_stack else mode_stack[-1]\n \n",
        "source_code_with_indent": "    for index, c in enumerate(value):\n        <IND>current_mode = \"  \" if not mode_stack else mode_stack[-1]\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    for index, c in enumerate(value):\n        <IND>current_mode = ParserMode.BLANK if not mode_stack else mode_stack[-1]\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "bridgecrewio/checkov",
    "commit": "889f451d25ebb76300ca9255642e24727cc81fd9",
    "filename": "checkov/terraform/parser_utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/bridgecrewio-checkov/checkov/terraform/parser_utils.py",
    "file_hunks_size": 19,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "checkov/terraform/parser_utils.py:154:40 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `ParserMode.is_string` but got `typing.Union[ParserMode, str]`.",
    "message": " Expected `str` for 1st positional only parameter to call `ParserMode.is_string` but got `typing.Union[ParserMode, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 154,
    "warning_line": "            if not ParserMode.is_string(current_mode):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    ARRAY = \"[\"\n\n    @staticmethod\n    def is_string(mode: str) -> bool:\n        return mode == ParserMode.STRING_SINGLE_QUOTE or mode == ParserMode.STRING_DOUBLE_QUOTE\n\n    def __repr__(self):\n        return str(self.value)\n\n    def __str__(self):\n        return str(self.value)\n",
        "source_code_len": 280,
        "target_code": "    ARRAY = \"[\"\n    BLANK = \" \"\n\n    @staticmethod\n    def is_string(mode: \"ParserMode\") -> bool:\n        return mode == ParserMode.STRING_SINGLE_QUOTE or mode == ParserMode.STRING_DOUBLE_QUOTE\n\n    def __repr__(self) -> str:\n        return str(self.value)\n\n    def __str__(self) -> str:\n        return str(self.value)\n",
        "target_code_len": 319,
        "diff_format": "@@ -38,11 +39,12 @@\n     ARRAY = \"[\"\n+    BLANK = \" \"\n \n     @staticmethod\n-    def is_string(mode: str) -> bool:\n+    def is_string(mode: \"ParserMode\") -> bool:\n         return mode == ParserMode.STRING_SINGLE_QUOTE or mode == ParserMode.STRING_DOUBLE_QUOTE\n \n-    def __repr__(self):\n+    def __repr__(self) -> str:\n         return str(self.value)\n \n-    def __str__(self):\n+    def __str__(self) -> str:\n         return str(self.value)\n",
        "source_code_with_indent": "    ARRAY = \"[\"\n\n    @staticmethod\n    def is_string(mode: str) -> bool:\n        <IND>return mode == ParserMode.STRING_SINGLE_QUOTE or mode == ParserMode.STRING_DOUBLE_QUOTE\n\n    <DED>def __repr__(self):\n        <IND>return str(self.value)\n\n    <DED>def __str__(self):\n        <IND>return str(self.value)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    ARRAY = \"[\"\n    BLANK = \" \"\n\n    @staticmethod\n    def is_string(mode: \"ParserMode\") -> bool:\n        <IND>return mode == ParserMode.STRING_SINGLE_QUOTE or mode == ParserMode.STRING_DOUBLE_QUOTE\n\n    <DED>def __repr__(self) -> str:\n        <IND>return str(self.value)\n\n    <DED>def __str__(self) -> str:\n        <IND>return str(self.value)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    for index, c in enumerate(value):\n        current_mode = \"  \" if not mode_stack else mode_stack[-1]\n\n",
        "source_code_len": 105,
        "target_code": "    for index, c in enumerate(value):\n        current_mode = ParserMode.BLANK if not mode_stack else mode_stack[-1]\n\n",
        "target_code_len": 117,
        "diff_format": "@@ -67,3 +69,3 @@\n     for index, c in enumerate(value):\n-        current_mode = \"  \" if not mode_stack else mode_stack[-1]\n+        current_mode = ParserMode.BLANK if not mode_stack else mode_stack[-1]\n \n",
        "source_code_with_indent": "    for index, c in enumerate(value):\n        <IND>current_mode = \"  \" if not mode_stack else mode_stack[-1]\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    for index, c in enumerate(value):\n        <IND>current_mode = ParserMode.BLANK if not mode_stack else mode_stack[-1]\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]