[
  {
    "project": "mitmproxy/mitmproxy",
    "commit": "58e086a2b0c5e423b059cd0ad8aea7be08569428",
    "filename": "mitmproxy/net/tls.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mitmproxy-mitmproxy/mitmproxy/net/tls.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mitmproxy/net/tls.py:236:53 Incompatible parameter type [6]: Expected `Optional[typing.Callable[[SSL.Connection, crypto.X509, int, int, int], bool]]` for 2nd positional only parameter to call `SSL.Context.set_verify` but got `typing.Callable(accept_all)[[Named(conn_, SSL.Connection), Named(x509, crypto.X509), Named(errno, int), Named(err_depth, int), Named(is_cert_verified, bool)], bool]`.",
    "message": " Expected `Optional[typing.Callable[[SSL.Connection, crypto.X509, int, int, int], bool]]` for 2nd positional only parameter to call `SSL.Context.set_verify` but got `typing.Callable(accept_all)[[Named(conn_, SSL.Connection), Named(x509, crypto.X509), Named(errno, int), Named(err_depth, int), Named(is_cert_verified, bool)], bool]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 236,
    "warning_line": "        context.set_verify(Verify.VERIFY_PEER.value, accept_all)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import certifi\nfrom cryptography.hazmat.primitives.asymmetric import rsa\n",
        "source_code_len": 73,
        "target_code": "import certifi\n\nfrom OpenSSL.crypto import X509\nfrom cryptography.hazmat.primitives.asymmetric import rsa\n",
        "target_code_len": 106,
        "diff_format": "@@ -9,2 +9,4 @@\n import certifi\n+\n+from OpenSSL.crypto import X509\n from cryptography.hazmat.primitives.asymmetric import rsa\n",
        "source_code_with_indent": "import certifi\nfrom cryptography.hazmat.primitives.asymmetric import rsa\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import certifi\n\nfrom OpenSSL.crypto import X509\nfrom cryptography.hazmat.primitives.asymmetric import rsa\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "    for i in extra_chain_certs:\n        context.add_extra_chain_cert(i._cert)\n\n    if dhparams:\n        SSL._lib.SSL_CTX_set_tmp_dh(context._context, dhparams)\n\n",
        "source_code_len": 161,
        "target_code": "    for i in extra_chain_certs:\n        context.add_extra_chain_cert(i.to_pyopenssl())\n\n    if dhparams:\n        SSL._lib.SSL_CTX_set_tmp_dh(context._context, dhparams)  # type: ignore\n\n",
        "target_code_len": 186,
        "diff_format": "@@ -240,6 +242,6 @@\n     for i in extra_chain_certs:\n-        context.add_extra_chain_cert(i._cert)\n+        context.add_extra_chain_cert(i.to_pyopenssl())\n \n     if dhparams:\n-        SSL._lib.SSL_CTX_set_tmp_dh(context._context, dhparams)\n+        SSL._lib.SSL_CTX_set_tmp_dh(context._context, dhparams)  # type: ignore\n \n",
        "source_code_with_indent": "    <DED>for i in extra_chain_certs:\n        <IND>context.add_extra_chain_cert(i._cert)\n\n    <DED>if dhparams:\n        <IND>SSL._lib.SSL_CTX_set_tmp_dh(context._context, dhparams)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>for i in extra_chain_certs:\n        <IND>context.add_extra_chain_cert(i.to_pyopenssl())\n\n    <DED>if dhparams:\n        <IND>SSL._lib.SSL_CTX_set_tmp_dh(context._context, dhparams)  # type: ignore\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        conn_: SSL.Connection,\n        x509: SSL.X509,\n        errno: int,\n        err_depth: int,\n        is_cert_verified: bool,\n) -> bool:\n",
        "source_code_len": 142,
        "target_code": "        conn_: SSL.Connection,\n        x509: X509,\n        errno: int,\n        err_depth: int,\n        is_cert_verified: int,\n) -> bool:\n",
        "target_code_len": 137,
        "diff_format": "@@ -250,6 +252,6 @@\n         conn_: SSL.Connection,\n-        x509: SSL.X509,\n+        x509: X509,\n         errno: int,\n         err_depth: int,\n-        is_cert_verified: bool,\n+        is_cert_verified: int,\n ) -> bool:\n",
        "source_code_with_indent": "        conn_: SSL.Connection,\n        x509: SSL.X509,\n        errno: int,\n        err_depth: int,\n        is_cert_verified: bool,\n) -> bool:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        conn_: SSL.Connection,\n        x509: X509,\n        errno: int,\n        err_depth: int,\n        is_cert_verified: int,\n) -> bool:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "mitmproxy/mitmproxy",
    "commit": "58e086a2b0c5e423b059cd0ad8aea7be08569428",
    "filename": "mitmproxy/net/tls.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mitmproxy-mitmproxy/mitmproxy/net/tls.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "mitmproxy/net/tls.py:241:37 Incompatible parameter type [6]: Expected `crypto.X509` for 1st positional only parameter to call `SSL.Context.add_extra_chain_cert` but got `cryptography.x509.Certificate`.",
    "message": " Expected `crypto.X509` for 1st positional only parameter to call `SSL.Context.add_extra_chain_cert` but got `cryptography.x509.Certificate`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 241,
    "warning_line": "        context.add_extra_chain_cert(i._cert)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "    for i in extra_chain_certs:\n        context.add_extra_chain_cert(i._cert)\n\n    if dhparams:\n        SSL._lib.SSL_CTX_set_tmp_dh(context._context, dhparams)\n\n",
        "source_code_len": 161,
        "target_code": "    for i in extra_chain_certs:\n        context.add_extra_chain_cert(i.to_pyopenssl())\n\n    if dhparams:\n        SSL._lib.SSL_CTX_set_tmp_dh(context._context, dhparams)  # type: ignore\n\n",
        "target_code_len": 186,
        "diff_format": "@@ -240,6 +242,6 @@\n     for i in extra_chain_certs:\n-        context.add_extra_chain_cert(i._cert)\n+        context.add_extra_chain_cert(i.to_pyopenssl())\n \n     if dhparams:\n-        SSL._lib.SSL_CTX_set_tmp_dh(context._context, dhparams)\n+        SSL._lib.SSL_CTX_set_tmp_dh(context._context, dhparams)  # type: ignore\n \n",
        "source_code_with_indent": "    <DED>for i in extra_chain_certs:\n        <IND>context.add_extra_chain_cert(i._cert)\n\n    <DED>if dhparams:\n        <IND>SSL._lib.SSL_CTX_set_tmp_dh(context._context, dhparams)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>for i in extra_chain_certs:\n        <IND>context.add_extra_chain_cert(i.to_pyopenssl())\n\n    <DED>if dhparams:\n        <IND>SSL._lib.SSL_CTX_set_tmp_dh(context._context, dhparams)  # type: ignore\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "mitmproxy/mitmproxy",
    "commit": "58e086a2b0c5e423b059cd0ad8aea7be08569428",
    "filename": "mitmproxy/proxy/layers/tls.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mitmproxy-mitmproxy/mitmproxy/proxy/layers/tls.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "mitmproxy/proxy/layers/tls.py:136:4 Incompatible attribute type [8]: Attribute `tls` declared in class `_TLSLayer` has type `SSL.Connection` but is used as type `None`.",
    "message": " Attribute `tls` declared in class `_TLSLayer` has type `SSL.Connection` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 136,
    "warning_line": "    tls: SSL.Connection = None",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "class _TLSLayer(tunnel.TunnelLayer):\n    tls: SSL.Connection = None\n    \"\"\"The OpenSSL connection object\"\"\"\n",
        "source_code_len": 108,
        "target_code": "class _TLSLayer(tunnel.TunnelLayer):\n    tls: SSL.Connection = None  # type: ignore\n    \"\"\"The OpenSSL connection object\"\"\"\n",
        "target_code_len": 124,
        "diff_format": "@@ -135,3 +135,3 @@\n class _TLSLayer(tunnel.TunnelLayer):\n-    tls: SSL.Connection = None\n+    tls: SSL.Connection = None  # type: ignore\n     \"\"\"The OpenSSL connection object\"\"\"\n",
        "source_code_with_indent": "<DED>class _TLSLayer(tunnel.TunnelLayer):\n    <IND>tls: SSL.Connection = None\n    \"\"\"The OpenSSL connection object\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED>class _TLSLayer(tunnel.TunnelLayer):\n    <IND>tls: SSL.Connection = None  # type: ignore\n    \"\"\"The OpenSSL connection object\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]