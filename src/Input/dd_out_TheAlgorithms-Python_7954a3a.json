[
  {
    "project": "TheAlgorithms/Python",
    "commit": "7954a3ae166db66ae6a43043c76417dda688a8e5",
    "filename": "other/davisb_putnamb_logemannb_loveland.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/other/davisb_putnamb_logemannb_loveland.py",
    "file_hunks_size": 14,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "other/davisb_putnamb_logemannb_loveland.py:88:16 Incompatible return type [7]: Expected `bool` but got `typing.Optional[bool]`.",
    "message": " Expected `bool` but got `typing.Optional[bool]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 88,
    "warning_line": "                return value",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def assign(self, model: dict[str, bool]) -> None:\n        \"\"\"\n",
        "source_code_len": 67,
        "target_code": "\n    def assign(self, model: dict[str, bool | None]) -> None:\n        \"\"\"\n",
        "target_code_len": 74,
        "diff_format": "@@ -54,3 +55,3 @@\n \n-    def assign(self, model: dict[str, bool]) -> None:\n+    def assign(self, model: dict[str, bool | None]) -> None:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def assign(self, model: dict[str, bool]) -> None:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def assign(self, model: dict[str, bool | None]) -> None:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def evaluate(self, model: dict[str, bool]) -> bool:\n        \"\"\"\n",
        "source_code_len": 69,
        "target_code": "\n    def evaluate(self, model: dict[str, bool | None]) -> bool | None:\n        \"\"\"\n",
        "target_code_len": 83,
        "diff_format": "@@ -70,3 +71,3 @@\n \n-    def evaluate(self, model: dict[str, bool]) -> bool:\n+    def evaluate(self, model: dict[str, bool | None]) -> bool | None:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED><DED>def evaluate(self, model: dict[str, bool]) -> bool:\n        <IND>",
        "target_code_with_indent": "\n    <DED><DED>def evaluate(self, model: dict[str, bool | None]) -> bool | None:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def find_pure_symbols(\n    clauses: list[Clause], symbols: list[str], model: dict[str, bool]\n) -> (list[str], dict[str, bool]):\n    \"\"\"\n",
        "source_code_len": 136,
        "target_code": "def find_pure_symbols(\n    clauses: list[Clause], symbols: list[str], model: dict[str, bool | None]\n) -> tuple[list[str], dict[str, bool | None]]:\n    \"\"\"\n",
        "target_code_len": 155,
        "diff_format": "@@ -175,4 +176,4 @@\n def find_pure_symbols(\n-    clauses: list[Clause], symbols: list[str], model: dict[str, bool]\n-) -> (list[str], dict[str, bool]):\n+    clauses: list[Clause], symbols: list[str], model: dict[str, bool | None]\n+) -> tuple[list[str], dict[str, bool | None]]:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "<DED>def find_pure_symbols(\n    clauses: list[Clause], symbols: list[str], model: dict[str, bool]\n) -> (list[str], dict[str, bool]):\n    <IND>",
        "target_code_with_indent": "<DED>def find_pure_symbols(\n    clauses: list[Clause], symbols: list[str], model: dict[str, bool | None]\n) -> tuple[list[str], dict[str, bool | None]]:\n    <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def find_unit_clauses(\n    clauses: list[Clause], model: dict[str, bool]\n) -> (list[str], dict[str, bool]):\n    \"\"\"\n",
        "source_code_len": 116,
        "target_code": "def find_unit_clauses(\n    clauses: list[Clause], model: dict[str, bool | None]\n) -> tuple[list[str], dict[str, bool | None]]:\n    \"\"\"\n",
        "target_code_len": 135,
        "diff_format": "@@ -227,4 +228,4 @@\n def find_unit_clauses(\n-    clauses: list[Clause], model: dict[str, bool]\n-) -> (list[str], dict[str, bool]):\n+    clauses: list[Clause], model: dict[str, bool | None]\n+) -> tuple[list[str], dict[str, bool | None]]:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "<DED>def find_unit_clauses(\n    clauses: list[Clause], model: dict[str, bool]\n) -> (list[str], dict[str, bool]):\n    <IND>",
        "target_code_with_indent": "<DED>def find_unit_clauses(\n    clauses: list[Clause], model: dict[str, bool | None]\n) -> tuple[list[str], dict[str, bool | None]]:\n    <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def dpll_algorithm(\n    clauses: list[Clause], symbols: list[str], model: dict[str, bool]\n) -> (bool, dict[str, bool]):\n    \"\"\"\n",
        "source_code_len": 128,
        "target_code": "def dpll_algorithm(\n    clauses: list[Clause], symbols: list[str], model: dict[str, bool | None]\n) -> tuple[bool | None, dict[str, bool | None] | None]:\n    \"\"\"\n",
        "target_code_len": 161,
        "diff_format": "@@ -275,4 +276,4 @@\n def dpll_algorithm(\n-    clauses: list[Clause], symbols: list[str], model: dict[str, bool]\n-) -> (bool, dict[str, bool]):\n+    clauses: list[Clause], symbols: list[str], model: dict[str, bool | None]\n+) -> tuple[bool | None, dict[str, bool | None] | None]:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "<DED>def dpll_algorithm(\n    clauses: list[Clause], symbols: list[str], model: dict[str, bool]\n) -> (bool, dict[str, bool]):\n    <IND>",
        "target_code_with_indent": "<DED>def dpll_algorithm(\n    clauses: list[Clause], symbols: list[str], model: dict[str, bool | None]\n) -> tuple[bool | None, dict[str, bool | None] | None]:\n    <IND>"
      }
    ]
  },
  {
    "project": "TheAlgorithms/Python",
    "commit": "7954a3ae166db66ae6a43043c76417dda688a8e5",
    "filename": "other/davisb_putnamb_logemannb_loveland.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/other/davisb_putnamb_logemannb_loveland.py",
    "file_hunks_size": 14,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "other/davisb_putnamb_logemannb_loveland.py:146:19 Incompatible parameter type [6]: Expected `typing.List[Clause]` for 1st positional only parameter to call `Formula.__init__` but got `typing.Set[typing.Any]`.",
    "message": " Expected `typing.List[Clause]` for 1st positional only parameter to call `Formula.__init__` but got `typing.Set[typing.Any]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 146,
    "warning_line": "    return Formula(set(clauses))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import random\n\n",
        "source_code_len": 15,
        "target_code": "import random\nfrom typing import Iterable\n\n",
        "target_code_len": 43,
        "diff_format": "@@ -13,2 +13,3 @@\n import random\n+from typing import Iterable\n \n",
        "source_code_with_indent": "import random\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import random\nfrom typing import Iterable\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def assign(self, model: dict[str, bool]) -> None:\n        \"\"\"\n",
        "source_code_len": 67,
        "target_code": "\n    def assign(self, model: dict[str, bool | None]) -> None:\n        \"\"\"\n",
        "target_code_len": 74,
        "diff_format": "@@ -54,3 +55,3 @@\n \n-    def assign(self, model: dict[str, bool]) -> None:\n+    def assign(self, model: dict[str, bool | None]) -> None:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def assign(self, model: dict[str, bool]) -> None:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def assign(self, model: dict[str, bool | None]) -> None:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def evaluate(self, model: dict[str, bool]) -> bool:\n        \"\"\"\n",
        "source_code_len": 69,
        "target_code": "\n    def evaluate(self, model: dict[str, bool | None]) -> bool | None:\n        \"\"\"\n",
        "target_code_len": 83,
        "diff_format": "@@ -70,3 +71,3 @@\n \n-    def evaluate(self, model: dict[str, bool]) -> bool:\n+    def evaluate(self, model: dict[str, bool | None]) -> bool | None:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED><DED>def evaluate(self, model: dict[str, bool]) -> bool:\n        <IND>",
        "target_code_with_indent": "\n    <DED><DED>def evaluate(self, model: dict[str, bool | None]) -> bool | None:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __init__(self, clauses: list[Clause]) -> None:\n        \"\"\"\n",
        "source_code_len": 68,
        "target_code": "\n    def __init__(self, clauses: Iterable[Clause]) -> None:\n        \"\"\"\n",
        "target_code_len": 72,
        "diff_format": "@@ -99,3 +100,3 @@\n \n-    def __init__(self, clauses: list[Clause]) -> None:\n+    def __init__(self, clauses: Iterable[Clause]) -> None:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    def __init__(self, clauses: list[Clause]) -> None:\n        <IND>",
        "target_code_with_indent": "\n    def __init__(self, clauses: Iterable[Clause]) -> None:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def find_pure_symbols(\n    clauses: list[Clause], symbols: list[str], model: dict[str, bool]\n) -> (list[str], dict[str, bool]):\n    \"\"\"\n",
        "source_code_len": 136,
        "target_code": "def find_pure_symbols(\n    clauses: list[Clause], symbols: list[str], model: dict[str, bool | None]\n) -> tuple[list[str], dict[str, bool | None]]:\n    \"\"\"\n",
        "target_code_len": 155,
        "diff_format": "@@ -175,4 +176,4 @@\n def find_pure_symbols(\n-    clauses: list[Clause], symbols: list[str], model: dict[str, bool]\n-) -> (list[str], dict[str, bool]):\n+    clauses: list[Clause], symbols: list[str], model: dict[str, bool | None]\n+) -> tuple[list[str], dict[str, bool | None]]:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "<DED>def find_pure_symbols(\n    clauses: list[Clause], symbols: list[str], model: dict[str, bool]\n) -> (list[str], dict[str, bool]):\n    <IND>",
        "target_code_with_indent": "<DED>def find_pure_symbols(\n    clauses: list[Clause], symbols: list[str], model: dict[str, bool | None]\n) -> tuple[list[str], dict[str, bool | None]]:\n    <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def find_unit_clauses(\n    clauses: list[Clause], model: dict[str, bool]\n) -> (list[str], dict[str, bool]):\n    \"\"\"\n",
        "source_code_len": 116,
        "target_code": "def find_unit_clauses(\n    clauses: list[Clause], model: dict[str, bool | None]\n) -> tuple[list[str], dict[str, bool | None]]:\n    \"\"\"\n",
        "target_code_len": 135,
        "diff_format": "@@ -227,4 +228,4 @@\n def find_unit_clauses(\n-    clauses: list[Clause], model: dict[str, bool]\n-) -> (list[str], dict[str, bool]):\n+    clauses: list[Clause], model: dict[str, bool | None]\n+) -> tuple[list[str], dict[str, bool | None]]:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "<DED>def find_unit_clauses(\n    clauses: list[Clause], model: dict[str, bool]\n) -> (list[str], dict[str, bool]):\n    <IND>",
        "target_code_with_indent": "<DED>def find_unit_clauses(\n    clauses: list[Clause], model: dict[str, bool | None]\n) -> tuple[list[str], dict[str, bool | None]]:\n    <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def dpll_algorithm(\n    clauses: list[Clause], symbols: list[str], model: dict[str, bool]\n) -> (bool, dict[str, bool]):\n    \"\"\"\n",
        "source_code_len": 128,
        "target_code": "def dpll_algorithm(\n    clauses: list[Clause], symbols: list[str], model: dict[str, bool | None]\n) -> tuple[bool | None, dict[str, bool | None] | None]:\n    \"\"\"\n",
        "target_code_len": 161,
        "diff_format": "@@ -275,4 +276,4 @@\n def dpll_algorithm(\n-    clauses: list[Clause], symbols: list[str], model: dict[str, bool]\n-) -> (bool, dict[str, bool]):\n+    clauses: list[Clause], symbols: list[str], model: dict[str, bool | None]\n+) -> tuple[bool | None, dict[str, bool | None] | None]:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "<DED>def dpll_algorithm(\n    clauses: list[Clause], symbols: list[str], model: dict[str, bool]\n) -> (bool, dict[str, bool]):\n    <IND>",
        "target_code_with_indent": "<DED>def dpll_algorithm(\n    clauses: list[Clause], symbols: list[str], model: dict[str, bool | None]\n) -> tuple[bool | None, dict[str, bool | None] | None]:\n    <IND>"
      }
    ]
  },
  {
    "project": "TheAlgorithms/Python",
    "commit": "7954a3ae166db66ae6a43043c76417dda688a8e5",
    "filename": "other/davisb_putnamb_logemannb_loveland.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/other/davisb_putnamb_logemannb_loveland.py",
    "file_hunks_size": 14,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "other/davisb_putnamb_logemannb_loveland.py:149:46 Invalid type [31]: Expression `(list[other.davisb_putnamb_logemannb_loveland.Clause], list[str])` is not a valid type.",
    "message": " Expression `(list[other.davisb_putnamb_logemannb_loveland.Clause], list[str])` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 149,
    "warning_line": "def generate_parameters(formula: Formula) -> (list[Clause], list[str]):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        clauses.add(generate_clause())\n    return Formula(set(clauses))\n\n\ndef generate_parameters(formula: Formula) -> (list[Clause], list[str]):\n    \"\"\"\n",
        "source_code_len": 154,
        "target_code": "        clauses.add(generate_clause())\n    return Formula(clauses)\n\n\ndef generate_parameters(formula: Formula) -> tuple[list[Clause], list[str]]:\n    \"\"\"\n",
        "target_code_len": 154,
        "diff_format": "@@ -145,6 +146,6 @@\n         clauses.add(generate_clause())\n-    return Formula(set(clauses))\n-\n-\n-def generate_parameters(formula: Formula) -> (list[Clause], list[str]):\n+    return Formula(clauses)\n+\n+\n+def generate_parameters(formula: Formula) -> tuple[list[Clause], list[str]]:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "        <IND>clauses.add(generate_clause())\n    <DED>return Formula(set(clauses))\n\n\n<DED>def generate_parameters(formula: Formula) -> (list[Clause], list[str]):\n    <IND>",
        "target_code_with_indent": "        <IND>clauses.add(generate_clause())\n    <DED>return Formula(clauses)\n\n\n<DED>def generate_parameters(formula: Formula) -> tuple[list[Clause], list[str]]:\n    <IND>"
      }
    ]
  },
  {
    "project": "TheAlgorithms/Python",
    "commit": "7954a3ae166db66ae6a43043c76417dda688a8e5",
    "filename": "other/davisb_putnamb_logemannb_loveland.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/other/davisb_putnamb_logemannb_loveland.py",
    "file_hunks_size": 14,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "other/davisb_putnamb_logemannb_loveland.py:177:6 Invalid type [31]: Expression `(list[str], dict[(str, bool)])` is not a valid type.",
    "message": " Expression `(list[str], dict[(str, bool)])` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 177,
    "warning_line": ") -> (list[str], dict[str, bool]):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def assign(self, model: dict[str, bool]) -> None:\n        \"\"\"\n",
        "source_code_len": 67,
        "target_code": "\n    def assign(self, model: dict[str, bool | None]) -> None:\n        \"\"\"\n",
        "target_code_len": 74,
        "diff_format": "@@ -54,3 +55,3 @@\n \n-    def assign(self, model: dict[str, bool]) -> None:\n+    def assign(self, model: dict[str, bool | None]) -> None:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def assign(self, model: dict[str, bool]) -> None:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def assign(self, model: dict[str, bool | None]) -> None:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def evaluate(self, model: dict[str, bool]) -> bool:\n        \"\"\"\n",
        "source_code_len": 69,
        "target_code": "\n    def evaluate(self, model: dict[str, bool | None]) -> bool | None:\n        \"\"\"\n",
        "target_code_len": 83,
        "diff_format": "@@ -70,3 +71,3 @@\n \n-    def evaluate(self, model: dict[str, bool]) -> bool:\n+    def evaluate(self, model: dict[str, bool | None]) -> bool | None:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED><DED>def evaluate(self, model: dict[str, bool]) -> bool:\n        <IND>",
        "target_code_with_indent": "\n    <DED><DED>def evaluate(self, model: dict[str, bool | None]) -> bool | None:\n        <IND>"
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def find_pure_symbols(\n    clauses: list[Clause], symbols: list[str], model: dict[str, bool]\n) -> (list[str], dict[str, bool]):\n    \"\"\"\n",
        "source_code_len": 136,
        "target_code": "def find_pure_symbols(\n    clauses: list[Clause], symbols: list[str], model: dict[str, bool | None]\n) -> tuple[list[str], dict[str, bool | None]]:\n    \"\"\"\n",
        "target_code_len": 155,
        "diff_format": "@@ -175,4 +176,4 @@\n def find_pure_symbols(\n-    clauses: list[Clause], symbols: list[str], model: dict[str, bool]\n-) -> (list[str], dict[str, bool]):\n+    clauses: list[Clause], symbols: list[str], model: dict[str, bool | None]\n+) -> tuple[list[str], dict[str, bool | None]]:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "<DED>def find_pure_symbols(\n    clauses: list[Clause], symbols: list[str], model: dict[str, bool]\n) -> (list[str], dict[str, bool]):\n    <IND>",
        "target_code_with_indent": "<DED>def find_pure_symbols(\n    clauses: list[Clause], symbols: list[str], model: dict[str, bool | None]\n) -> tuple[list[str], dict[str, bool | None]]:\n    <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def find_unit_clauses(\n    clauses: list[Clause], model: dict[str, bool]\n) -> (list[str], dict[str, bool]):\n    \"\"\"\n",
        "source_code_len": 116,
        "target_code": "def find_unit_clauses(\n    clauses: list[Clause], model: dict[str, bool | None]\n) -> tuple[list[str], dict[str, bool | None]]:\n    \"\"\"\n",
        "target_code_len": 135,
        "diff_format": "@@ -227,4 +228,4 @@\n def find_unit_clauses(\n-    clauses: list[Clause], model: dict[str, bool]\n-) -> (list[str], dict[str, bool]):\n+    clauses: list[Clause], model: dict[str, bool | None]\n+) -> tuple[list[str], dict[str, bool | None]]:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "<DED>def find_unit_clauses(\n    clauses: list[Clause], model: dict[str, bool]\n) -> (list[str], dict[str, bool]):\n    <IND>",
        "target_code_with_indent": "<DED>def find_unit_clauses(\n    clauses: list[Clause], model: dict[str, bool | None]\n) -> tuple[list[str], dict[str, bool | None]]:\n    <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def dpll_algorithm(\n    clauses: list[Clause], symbols: list[str], model: dict[str, bool]\n) -> (bool, dict[str, bool]):\n    \"\"\"\n",
        "source_code_len": 128,
        "target_code": "def dpll_algorithm(\n    clauses: list[Clause], symbols: list[str], model: dict[str, bool | None]\n) -> tuple[bool | None, dict[str, bool | None] | None]:\n    \"\"\"\n",
        "target_code_len": 161,
        "diff_format": "@@ -275,4 +276,4 @@\n def dpll_algorithm(\n-    clauses: list[Clause], symbols: list[str], model: dict[str, bool]\n-) -> (bool, dict[str, bool]):\n+    clauses: list[Clause], symbols: list[str], model: dict[str, bool | None]\n+) -> tuple[bool | None, dict[str, bool | None] | None]:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "<DED>def dpll_algorithm(\n    clauses: list[Clause], symbols: list[str], model: dict[str, bool]\n) -> (bool, dict[str, bool]):\n    <IND>",
        "target_code_with_indent": "<DED>def dpll_algorithm(\n    clauses: list[Clause], symbols: list[str], model: dict[str, bool | None]\n) -> tuple[bool | None, dict[str, bool | None] | None]:\n    <IND>"
      }
    ]
  },
  {
    "project": "TheAlgorithms/Python",
    "commit": "7954a3ae166db66ae6a43043c76417dda688a8e5",
    "filename": "other/davisb_putnamb_logemannb_loveland.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/other/davisb_putnamb_logemannb_loveland.py",
    "file_hunks_size": 14,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "other/davisb_putnamb_logemannb_loveland.py:229:6 Invalid type [31]: Expression `(list[str], dict[(str, bool)])` is not a valid type.",
    "message": " Expression `(list[str], dict[(str, bool)])` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 229,
    "warning_line": ") -> (list[str], dict[str, bool]):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def assign(self, model: dict[str, bool]) -> None:\n        \"\"\"\n",
        "source_code_len": 67,
        "target_code": "\n    def assign(self, model: dict[str, bool | None]) -> None:\n        \"\"\"\n",
        "target_code_len": 74,
        "diff_format": "@@ -54,3 +55,3 @@\n \n-    def assign(self, model: dict[str, bool]) -> None:\n+    def assign(self, model: dict[str, bool | None]) -> None:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def assign(self, model: dict[str, bool]) -> None:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def assign(self, model: dict[str, bool | None]) -> None:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def evaluate(self, model: dict[str, bool]) -> bool:\n        \"\"\"\n",
        "source_code_len": 69,
        "target_code": "\n    def evaluate(self, model: dict[str, bool | None]) -> bool | None:\n        \"\"\"\n",
        "target_code_len": 83,
        "diff_format": "@@ -70,3 +71,3 @@\n \n-    def evaluate(self, model: dict[str, bool]) -> bool:\n+    def evaluate(self, model: dict[str, bool | None]) -> bool | None:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED><DED>def evaluate(self, model: dict[str, bool]) -> bool:\n        <IND>",
        "target_code_with_indent": "\n    <DED><DED>def evaluate(self, model: dict[str, bool | None]) -> bool | None:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def find_pure_symbols(\n    clauses: list[Clause], symbols: list[str], model: dict[str, bool]\n) -> (list[str], dict[str, bool]):\n    \"\"\"\n",
        "source_code_len": 136,
        "target_code": "def find_pure_symbols(\n    clauses: list[Clause], symbols: list[str], model: dict[str, bool | None]\n) -> tuple[list[str], dict[str, bool | None]]:\n    \"\"\"\n",
        "target_code_len": 155,
        "diff_format": "@@ -175,4 +176,4 @@\n def find_pure_symbols(\n-    clauses: list[Clause], symbols: list[str], model: dict[str, bool]\n-) -> (list[str], dict[str, bool]):\n+    clauses: list[Clause], symbols: list[str], model: dict[str, bool | None]\n+) -> tuple[list[str], dict[str, bool | None]]:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "<DED>def find_pure_symbols(\n    clauses: list[Clause], symbols: list[str], model: dict[str, bool]\n) -> (list[str], dict[str, bool]):\n    <IND>",
        "target_code_with_indent": "<DED>def find_pure_symbols(\n    clauses: list[Clause], symbols: list[str], model: dict[str, bool | None]\n) -> tuple[list[str], dict[str, bool | None]]:\n    <IND>"
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def find_unit_clauses(\n    clauses: list[Clause], model: dict[str, bool]\n) -> (list[str], dict[str, bool]):\n    \"\"\"\n",
        "source_code_len": 116,
        "target_code": "def find_unit_clauses(\n    clauses: list[Clause], model: dict[str, bool | None]\n) -> tuple[list[str], dict[str, bool | None]]:\n    \"\"\"\n",
        "target_code_len": 135,
        "diff_format": "@@ -227,4 +228,4 @@\n def find_unit_clauses(\n-    clauses: list[Clause], model: dict[str, bool]\n-) -> (list[str], dict[str, bool]):\n+    clauses: list[Clause], model: dict[str, bool | None]\n+) -> tuple[list[str], dict[str, bool | None]]:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "<DED>def find_unit_clauses(\n    clauses: list[Clause], model: dict[str, bool]\n) -> (list[str], dict[str, bool]):\n    <IND>",
        "target_code_with_indent": "<DED>def find_unit_clauses(\n    clauses: list[Clause], model: dict[str, bool | None]\n) -> tuple[list[str], dict[str, bool | None]]:\n    <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def dpll_algorithm(\n    clauses: list[Clause], symbols: list[str], model: dict[str, bool]\n) -> (bool, dict[str, bool]):\n    \"\"\"\n",
        "source_code_len": 128,
        "target_code": "def dpll_algorithm(\n    clauses: list[Clause], symbols: list[str], model: dict[str, bool | None]\n) -> tuple[bool | None, dict[str, bool | None] | None]:\n    \"\"\"\n",
        "target_code_len": 161,
        "diff_format": "@@ -275,4 +276,4 @@\n def dpll_algorithm(\n-    clauses: list[Clause], symbols: list[str], model: dict[str, bool]\n-) -> (bool, dict[str, bool]):\n+    clauses: list[Clause], symbols: list[str], model: dict[str, bool | None]\n+) -> tuple[bool | None, dict[str, bool | None] | None]:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "<DED>def dpll_algorithm(\n    clauses: list[Clause], symbols: list[str], model: dict[str, bool]\n) -> (bool, dict[str, bool]):\n    <IND>",
        "target_code_with_indent": "<DED>def dpll_algorithm(\n    clauses: list[Clause], symbols: list[str], model: dict[str, bool | None]\n) -> tuple[bool | None, dict[str, bool | None] | None]:\n    <IND>"
      }
    ]
  },
  {
    "project": "TheAlgorithms/Python",
    "commit": "7954a3ae166db66ae6a43043c76417dda688a8e5",
    "filename": "other/davisb_putnamb_logemannb_loveland.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/other/davisb_putnamb_logemannb_loveland.py",
    "file_hunks_size": 14,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "other/davisb_putnamb_logemannb_loveland.py:277:6 Invalid type [31]: Expression `(bool, dict[(str, bool)])` is not a valid type.",
    "message": " Expression `(bool, dict[(str, bool)])` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 277,
    "warning_line": ") -> (bool, dict[str, bool]):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def assign(self, model: dict[str, bool]) -> None:\n        \"\"\"\n",
        "source_code_len": 67,
        "target_code": "\n    def assign(self, model: dict[str, bool | None]) -> None:\n        \"\"\"\n",
        "target_code_len": 74,
        "diff_format": "@@ -54,3 +55,3 @@\n \n-    def assign(self, model: dict[str, bool]) -> None:\n+    def assign(self, model: dict[str, bool | None]) -> None:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def assign(self, model: dict[str, bool]) -> None:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def assign(self, model: dict[str, bool | None]) -> None:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def evaluate(self, model: dict[str, bool]) -> bool:\n        \"\"\"\n",
        "source_code_len": 69,
        "target_code": "\n    def evaluate(self, model: dict[str, bool | None]) -> bool | None:\n        \"\"\"\n",
        "target_code_len": 83,
        "diff_format": "@@ -70,3 +71,3 @@\n \n-    def evaluate(self, model: dict[str, bool]) -> bool:\n+    def evaluate(self, model: dict[str, bool | None]) -> bool | None:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED><DED>def evaluate(self, model: dict[str, bool]) -> bool:\n        <IND>",
        "target_code_with_indent": "\n    <DED><DED>def evaluate(self, model: dict[str, bool | None]) -> bool | None:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def find_pure_symbols(\n    clauses: list[Clause], symbols: list[str], model: dict[str, bool]\n) -> (list[str], dict[str, bool]):\n    \"\"\"\n",
        "source_code_len": 136,
        "target_code": "def find_pure_symbols(\n    clauses: list[Clause], symbols: list[str], model: dict[str, bool | None]\n) -> tuple[list[str], dict[str, bool | None]]:\n    \"\"\"\n",
        "target_code_len": 155,
        "diff_format": "@@ -175,4 +176,4 @@\n def find_pure_symbols(\n-    clauses: list[Clause], symbols: list[str], model: dict[str, bool]\n-) -> (list[str], dict[str, bool]):\n+    clauses: list[Clause], symbols: list[str], model: dict[str, bool | None]\n+) -> tuple[list[str], dict[str, bool | None]]:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "<DED>def find_pure_symbols(\n    clauses: list[Clause], symbols: list[str], model: dict[str, bool]\n) -> (list[str], dict[str, bool]):\n    <IND>",
        "target_code_with_indent": "<DED>def find_pure_symbols(\n    clauses: list[Clause], symbols: list[str], model: dict[str, bool | None]\n) -> tuple[list[str], dict[str, bool | None]]:\n    <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def find_unit_clauses(\n    clauses: list[Clause], model: dict[str, bool]\n) -> (list[str], dict[str, bool]):\n    \"\"\"\n",
        "source_code_len": 116,
        "target_code": "def find_unit_clauses(\n    clauses: list[Clause], model: dict[str, bool | None]\n) -> tuple[list[str], dict[str, bool | None]]:\n    \"\"\"\n",
        "target_code_len": 135,
        "diff_format": "@@ -227,4 +228,4 @@\n def find_unit_clauses(\n-    clauses: list[Clause], model: dict[str, bool]\n-) -> (list[str], dict[str, bool]):\n+    clauses: list[Clause], model: dict[str, bool | None]\n+) -> tuple[list[str], dict[str, bool | None]]:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "<DED>def find_unit_clauses(\n    clauses: list[Clause], model: dict[str, bool]\n) -> (list[str], dict[str, bool]):\n    <IND>",
        "target_code_with_indent": "<DED>def find_unit_clauses(\n    clauses: list[Clause], model: dict[str, bool | None]\n) -> tuple[list[str], dict[str, bool | None]]:\n    <IND>"
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def dpll_algorithm(\n    clauses: list[Clause], symbols: list[str], model: dict[str, bool]\n) -> (bool, dict[str, bool]):\n    \"\"\"\n",
        "source_code_len": 128,
        "target_code": "def dpll_algorithm(\n    clauses: list[Clause], symbols: list[str], model: dict[str, bool | None]\n) -> tuple[bool | None, dict[str, bool | None] | None]:\n    \"\"\"\n",
        "target_code_len": 161,
        "diff_format": "@@ -275,4 +276,4 @@\n def dpll_algorithm(\n-    clauses: list[Clause], symbols: list[str], model: dict[str, bool]\n-) -> (bool, dict[str, bool]):\n+    clauses: list[Clause], symbols: list[str], model: dict[str, bool | None]\n+) -> tuple[bool | None, dict[str, bool | None] | None]:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "<DED>def dpll_algorithm(\n    clauses: list[Clause], symbols: list[str], model: dict[str, bool]\n) -> (bool, dict[str, bool]):\n    <IND>",
        "target_code_with_indent": "<DED>def dpll_algorithm(\n    clauses: list[Clause], symbols: list[str], model: dict[str, bool | None]\n) -> tuple[bool | None, dict[str, bool | None] | None]:\n    <IND>"
      }
    ]
  }
]