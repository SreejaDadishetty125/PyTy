[
  {
    "project": "asyml/forte",
    "commit": "dc94891546e30cae67d52ca3f6387c57c5da4614",
    "filename": "forte/data/data_pack.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/asyml-forte/forte/data/data_pack.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "forte/data/data_pack.py:691:37 Incompatible parameter type [6]: Expected `Type[Annotation]` for 1st positional only parameter to call `dict.__setitem__` but got `Type[Entry[typing.Any]]`.",
    "message": " Expected `Type[Annotation]` for 1st positional only parameter to call `dict.__setitem__` but got `Type[Entry[typing.Any]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 691,
    "warning_line": "                    annotation_types[key] = value",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            self.info = info\n\n",
        "source_code_len": 30,
        "target_code": "            self.info = info\n\n\ndef as_entry_type(entry_type: Union[str, Type[EntryType]]):\n    entry_type_: Type[EntryType]\n    if isinstance(entry_type, str):\n        entry_type_ = get_class(entry_type)\n        if not issubclass(entry_type_, Entry):\n            raise ValueError(\n                f\"The specified entry type [{entry_type}] \"\n                f\"does not correspond to a \"\n                f\"`forte.data.ontology.core.Entry` class\"\n            )\n    else:\n        entry_type_ = entry_type\n    return entry_type_\n\n",
        "target_code_len": 525,
        "diff_format": "@@ -96,2 +96,17 @@\n             self.info = info\n+\n+\n+def as_entry_type(entry_type: Union[str, Type[EntryType]]):\n+    entry_type_: Type[EntryType]\n+    if isinstance(entry_type, str):\n+        entry_type_ = get_class(entry_type)\n+        if not issubclass(entry_type_, Entry):\n+            raise ValueError(\n+                f\"The specified entry type [{entry_type}] \"\n+                f\"does not correspond to a \"\n+                f\"`forte.data.ontology.core.Entry` class\"\n+            )\n+    else:\n+        entry_type_ = entry_type\n+    return entry_type_\n \n",
        "source_code_with_indent": "            <IND>self.info = info\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <IND>self.info = info\n\n\n<DED><DED><DED>def as_entry_type(entry_type: Union[str, Type[EntryType]]):\n    <IND>entry_type_: Type[EntryType]\n    if isinstance(entry_type, str):\n        <IND>entry_type_ = get_class(entry_type)\n        if not issubclass(entry_type_, Entry):\n            <IND>raise ValueError(\n                f\"The specified entry type [{entry_type}] \"\n                f\"does not correspond to a \"\n                f\"`forte.data.ontology.core.Entry` class\"\n            )\n    <DED><DED>else:\n        <IND>entry_type_ = entry_type\n    <DED>return entry_type_\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        if request is not None:\n            for key, value in request.items():\n                if issubclass(key, Annotation):\n",
        "source_code_len": 127,
        "target_code": "        if request is not None:\n            for key_, value in request.items():\n                key = as_entry_type(key_)\n                if issubclass(key, Annotation):\n",
        "target_code_len": 170,
        "diff_format": "@@ -688,3 +715,4 @@\n         if request is not None:\n-            for key, value in request.items():\n+            for key_, value in request.items():\n+                key = as_entry_type(key_)\n                 if issubclass(key, Annotation):\n",
        "source_code_with_indent": "        if request is not None:\n            <IND>for key, value in request.items():\n                <IND>if issubclass(key, Annotation):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        if request is not None:\n            <IND>for key_, value in request.items():\n                <IND>key = as_entry_type(key_)\n                if issubclass(key, Annotation):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "asyml/forte",
    "commit": "dc94891546e30cae67d52ca3f6387c57c5da4614",
    "filename": "forte/data/data_pack.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/asyml-forte/forte/data/data_pack.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "forte/data/data_pack.py:693:31 Incompatible parameter type [6]: Expected `Type[Link]` for 1st positional only parameter to call `dict.__setitem__` but got `Type[Entry[typing.Any]]`.",
    "message": " Expected `Type[Link]` for 1st positional only parameter to call `dict.__setitem__` but got `Type[Entry[typing.Any]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 693,
    "warning_line": "                    link_types[key] = value",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            self.info = info\n\n",
        "source_code_len": 30,
        "target_code": "            self.info = info\n\n\ndef as_entry_type(entry_type: Union[str, Type[EntryType]]):\n    entry_type_: Type[EntryType]\n    if isinstance(entry_type, str):\n        entry_type_ = get_class(entry_type)\n        if not issubclass(entry_type_, Entry):\n            raise ValueError(\n                f\"The specified entry type [{entry_type}] \"\n                f\"does not correspond to a \"\n                f\"`forte.data.ontology.core.Entry` class\"\n            )\n    else:\n        entry_type_ = entry_type\n    return entry_type_\n\n",
        "target_code_len": 525,
        "diff_format": "@@ -96,2 +96,17 @@\n             self.info = info\n+\n+\n+def as_entry_type(entry_type: Union[str, Type[EntryType]]):\n+    entry_type_: Type[EntryType]\n+    if isinstance(entry_type, str):\n+        entry_type_ = get_class(entry_type)\n+        if not issubclass(entry_type_, Entry):\n+            raise ValueError(\n+                f\"The specified entry type [{entry_type}] \"\n+                f\"does not correspond to a \"\n+                f\"`forte.data.ontology.core.Entry` class\"\n+            )\n+    else:\n+        entry_type_ = entry_type\n+    return entry_type_\n \n",
        "source_code_with_indent": "            <IND>self.info = info\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <IND>self.info = info\n\n\n<DED><DED><DED>def as_entry_type(entry_type: Union[str, Type[EntryType]]):\n    <IND>entry_type_: Type[EntryType]\n    if isinstance(entry_type, str):\n        <IND>entry_type_ = get_class(entry_type)\n        if not issubclass(entry_type_, Entry):\n            <IND>raise ValueError(\n                f\"The specified entry type [{entry_type}] \"\n                f\"does not correspond to a \"\n                f\"`forte.data.ontology.core.Entry` class\"\n            )\n    <DED><DED>else:\n        <IND>entry_type_ = entry_type\n    <DED>return entry_type_\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        if request is not None:\n            for key, value in request.items():\n                if issubclass(key, Annotation):\n",
        "source_code_len": 127,
        "target_code": "        if request is not None:\n            for key_, value in request.items():\n                key = as_entry_type(key_)\n                if issubclass(key, Annotation):\n",
        "target_code_len": 170,
        "diff_format": "@@ -688,3 +715,4 @@\n         if request is not None:\n-            for key, value in request.items():\n+            for key_, value in request.items():\n+                key = as_entry_type(key_)\n                 if issubclass(key, Annotation):\n",
        "source_code_with_indent": "        if request is not None:\n            <IND>for key, value in request.items():\n                <IND>if issubclass(key, Annotation):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        if request is not None:\n            <IND>for key_, value in request.items():\n                <IND>key = as_entry_type(key_)\n                if issubclass(key, Annotation):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "asyml/forte",
    "commit": "dc94891546e30cae67d52ca3f6387c57c5da4614",
    "filename": "forte/data/data_pack.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/asyml-forte/forte/data/data_pack.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "forte/data/data_pack.py:695:32 Incompatible parameter type [6]: Expected `Type[Group]` for 1st positional only parameter to call `dict.__setitem__` but got `Type[Entry[typing.Any]]`.",
    "message": " Expected `Type[Group]` for 1st positional only parameter to call `dict.__setitem__` but got `Type[Entry[typing.Any]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 695,
    "warning_line": "                    group_types[key] = value",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            self.info = info\n\n",
        "source_code_len": 30,
        "target_code": "            self.info = info\n\n\ndef as_entry_type(entry_type: Union[str, Type[EntryType]]):\n    entry_type_: Type[EntryType]\n    if isinstance(entry_type, str):\n        entry_type_ = get_class(entry_type)\n        if not issubclass(entry_type_, Entry):\n            raise ValueError(\n                f\"The specified entry type [{entry_type}] \"\n                f\"does not correspond to a \"\n                f\"`forte.data.ontology.core.Entry` class\"\n            )\n    else:\n        entry_type_ = entry_type\n    return entry_type_\n\n",
        "target_code_len": 525,
        "diff_format": "@@ -96,2 +96,17 @@\n             self.info = info\n+\n+\n+def as_entry_type(entry_type: Union[str, Type[EntryType]]):\n+    entry_type_: Type[EntryType]\n+    if isinstance(entry_type, str):\n+        entry_type_ = get_class(entry_type)\n+        if not issubclass(entry_type_, Entry):\n+            raise ValueError(\n+                f\"The specified entry type [{entry_type}] \"\n+                f\"does not correspond to a \"\n+                f\"`forte.data.ontology.core.Entry` class\"\n+            )\n+    else:\n+        entry_type_ = entry_type\n+    return entry_type_\n \n",
        "source_code_with_indent": "            <IND>self.info = info\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <IND>self.info = info\n\n\n<DED><DED><DED>def as_entry_type(entry_type: Union[str, Type[EntryType]]):\n    <IND>entry_type_: Type[EntryType]\n    if isinstance(entry_type, str):\n        <IND>entry_type_ = get_class(entry_type)\n        if not issubclass(entry_type_, Entry):\n            <IND>raise ValueError(\n                f\"The specified entry type [{entry_type}] \"\n                f\"does not correspond to a \"\n                f\"`forte.data.ontology.core.Entry` class\"\n            )\n    <DED><DED>else:\n        <IND>entry_type_ = entry_type\n    <DED>return entry_type_\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        if request is not None:\n            for key, value in request.items():\n                if issubclass(key, Annotation):\n",
        "source_code_len": 127,
        "target_code": "        if request is not None:\n            for key_, value in request.items():\n                key = as_entry_type(key_)\n                if issubclass(key, Annotation):\n",
        "target_code_len": 170,
        "diff_format": "@@ -688,3 +715,4 @@\n         if request is not None:\n-            for key, value in request.items():\n+            for key_, value in request.items():\n+                key = as_entry_type(key_)\n                 if issubclass(key, Annotation):\n",
        "source_code_with_indent": "        if request is not None:\n            <IND>for key, value in request.items():\n                <IND>if issubclass(key, Annotation):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        if request is not None:\n            <IND>for key_, value in request.items():\n                <IND>key = as_entry_type(key_)\n                if issubclass(key, Annotation):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "asyml/forte",
    "commit": "dc94891546e30cae67d52ca3f6387c57c5da4614",
    "filename": "forte/data/data_pack.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/asyml-forte/forte/data/data_pack.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "forte/data/data_pack.py:697:35 Incompatible parameter type [6]: Expected `Type[Generics]` for 1st positional only parameter to call `dict.__setitem__` but got `Type[Entry[typing.Any]]`.",
    "message": " Expected `Type[Generics]` for 1st positional only parameter to call `dict.__setitem__` but got `Type[Entry[typing.Any]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 697,
    "warning_line": "                    generics_types[key] = value",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            self.info = info\n\n",
        "source_code_len": 30,
        "target_code": "            self.info = info\n\n\ndef as_entry_type(entry_type: Union[str, Type[EntryType]]):\n    entry_type_: Type[EntryType]\n    if isinstance(entry_type, str):\n        entry_type_ = get_class(entry_type)\n        if not issubclass(entry_type_, Entry):\n            raise ValueError(\n                f\"The specified entry type [{entry_type}] \"\n                f\"does not correspond to a \"\n                f\"`forte.data.ontology.core.Entry` class\"\n            )\n    else:\n        entry_type_ = entry_type\n    return entry_type_\n\n",
        "target_code_len": 525,
        "diff_format": "@@ -96,2 +96,17 @@\n             self.info = info\n+\n+\n+def as_entry_type(entry_type: Union[str, Type[EntryType]]):\n+    entry_type_: Type[EntryType]\n+    if isinstance(entry_type, str):\n+        entry_type_ = get_class(entry_type)\n+        if not issubclass(entry_type_, Entry):\n+            raise ValueError(\n+                f\"The specified entry type [{entry_type}] \"\n+                f\"does not correspond to a \"\n+                f\"`forte.data.ontology.core.Entry` class\"\n+            )\n+    else:\n+        entry_type_ = entry_type\n+    return entry_type_\n \n",
        "source_code_with_indent": "            <IND>self.info = info\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <IND>self.info = info\n\n\n<DED><DED><DED>def as_entry_type(entry_type: Union[str, Type[EntryType]]):\n    <IND>entry_type_: Type[EntryType]\n    if isinstance(entry_type, str):\n        <IND>entry_type_ = get_class(entry_type)\n        if not issubclass(entry_type_, Entry):\n            <IND>raise ValueError(\n                f\"The specified entry type [{entry_type}] \"\n                f\"does not correspond to a \"\n                f\"`forte.data.ontology.core.Entry` class\"\n            )\n    <DED><DED>else:\n        <IND>entry_type_ = entry_type\n    <DED>return entry_type_\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        if request is not None:\n            for key, value in request.items():\n                if issubclass(key, Annotation):\n",
        "source_code_len": 127,
        "target_code": "        if request is not None:\n            for key_, value in request.items():\n                key = as_entry_type(key_)\n                if issubclass(key, Annotation):\n",
        "target_code_len": 170,
        "diff_format": "@@ -688,3 +715,4 @@\n         if request is not None:\n-            for key, value in request.items():\n+            for key_, value in request.items():\n+                key = as_entry_type(key_)\n                 if issubclass(key, Annotation):\n",
        "source_code_with_indent": "        if request is not None:\n            <IND>for key, value in request.items():\n                <IND>if issubclass(key, Annotation):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        if request is not None:\n            <IND>for key_, value in request.items():\n                <IND>key = as_entry_type(key_)\n                if issubclass(key, Annotation):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]