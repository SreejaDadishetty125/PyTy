[
  {
    "project": "hikari-py/hikari",
    "commit": "f3f7bbab2d57949ea575220a6bde320666ce2d1d",
    "filename": "hikari/models/presences.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/hikari-py-hikari/hikari/models/presences.py",
    "file_hunks_size": 10,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "hikari/models/presences.py:257:4 Inconsistent override [15]: `discriminator` overrides attribute defined in `users.User` inconsistently. Type `typing.Union[str, undefined.Undefined]` is not a subtype of the overridden attribute `str`.",
    "message": " `discriminator` overrides attribute defined in `users.User` inconsistently. Type `typing.Union[str, undefined.Undefined]` is not a subtype of the overridden attribute `str`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 257,
    "warning_line": "    discriminator: typing.Union[str, undefined.Undefined] = attr.ib(eq=False, hash=False, repr=True)"
  },
  {
    "project": "hikari-py/hikari",
    "commit": "f3f7bbab2d57949ea575220a6bde320666ce2d1d",
    "filename": "hikari/models/presences.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/hikari-py-hikari/hikari/models/presences.py",
    "file_hunks_size": 10,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "hikari/models/presences.py:260:4 Inconsistent override [15]: `username` overrides attribute defined in `users.User` inconsistently. Type `typing.Union[str, undefined.Undefined]` is not a subtype of the overridden attribute `str`.",
    "message": " `username` overrides attribute defined in `users.User` inconsistently. Type `typing.Union[str, undefined.Undefined]` is not a subtype of the overridden attribute `str`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 260,
    "warning_line": "    username: typing.Union[str, undefined.Undefined] = attr.ib(eq=False, hash=False, repr=True)"
  },
  {
    "project": "hikari-py/hikari",
    "commit": "f3f7bbab2d57949ea575220a6bde320666ce2d1d",
    "filename": "hikari/models/presences.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/hikari-py-hikari/hikari/models/presences.py",
    "file_hunks_size": 10,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "hikari/models/presences.py:263:4 Inconsistent override [15]: `avatar_hash` overrides attribute defined in `users.User` inconsistently. Type `typing.Union[None, str, undefined.Undefined]` is not a subtype of the overridden attribute `typing.Optional[str]`.",
    "message": " `avatar_hash` overrides attribute defined in `users.User` inconsistently. Type `typing.Union[None, str, undefined.Undefined]` is not a subtype of the overridden attribute `typing.Optional[str]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 263,
    "warning_line": "    avatar_hash: typing.Union[None, str, undefined.Undefined] = attr.ib(eq=False, hash=False, repr=True)"
  },
  {
    "project": "hikari-py/hikari",
    "commit": "f3f7bbab2d57949ea575220a6bde320666ce2d1d",
    "filename": "hikari/models/presences.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/hikari-py-hikari/hikari/models/presences.py",
    "file_hunks_size": 10,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "hikari/models/presences.py:266:4 Inconsistent override [15]: `is_bot` overrides attribute defined in `users.User` inconsistently. Type `typing.Union[bool, undefined.Undefined]` is not a subtype of the overridden attribute `bool`.",
    "message": " `is_bot` overrides attribute defined in `users.User` inconsistently. Type `typing.Union[bool, undefined.Undefined]` is not a subtype of the overridden attribute `bool`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 266,
    "warning_line": "    is_bot: typing.Union[bool, undefined.Undefined] = attr.ib(eq=False, hash=False, repr=True)"
  },
  {
    "project": "hikari-py/hikari",
    "commit": "f3f7bbab2d57949ea575220a6bde320666ce2d1d",
    "filename": "hikari/models/presences.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/hikari-py-hikari/hikari/models/presences.py",
    "file_hunks_size": 10,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "hikari/models/presences.py:269:4 Inconsistent override [15]: `is_system` overrides attribute defined in `users.User` inconsistently. Type `typing.Union[bool, undefined.Undefined]` is not a subtype of the overridden attribute `bool`.",
    "message": " `is_system` overrides attribute defined in `users.User` inconsistently. Type `typing.Union[bool, undefined.Undefined]` is not a subtype of the overridden attribute `bool`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 269,
    "warning_line": "    is_system: typing.Union[bool, undefined.Undefined] = attr.ib(eq=False, hash=False, repr=False)"
  },
  {
    "project": "hikari-py/hikari",
    "commit": "f3f7bbab2d57949ea575220a6bde320666ce2d1d",
    "filename": "hikari/models/presences.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/hikari-py-hikari/hikari/models/presences.py",
    "file_hunks_size": 10,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "hikari/models/presences.py:272:4 Inconsistent override [15]: `flags` overrides attribute defined in `users.User` inconsistently. Type `typing.Union[undefined.Undefined, users.UserFlag]` is not a subtype of the overridden attribute `users.UserFlag`.",
    "message": " `flags` overrides attribute defined in `users.User` inconsistently. Type `typing.Union[undefined.Undefined, users.UserFlag]` is not a subtype of the overridden attribute `users.UserFlag`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 272,
    "warning_line": "    flags: typing.Union[users.UserFlag, undefined.Undefined] = attr.ib(eq=False, hash=False, repr=False)"
  },
  {
    "project": "hikari-py/hikari",
    "commit": "f3f7bbab2d57949ea575220a6bde320666ce2d1d",
    "filename": "hikari/models/presences.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/hikari-py-hikari/hikari/models/presences.py",
    "file_hunks_size": 10,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "hikari/models/presences.py:285:4 Inconsistent override [15]: `hikari.models.presences.PresenceUser.format_avatar_url` overrides method defined in `users.User` inconsistently. Returned type `typing.Union[str, undefined.Undefined]` is not a subtype of the overridden return `str`.",
    "message": " `hikari.models.presences.PresenceUser.format_avatar_url` overrides method defined in `users.User` inconsistently. Returned type `typing.Union[str, undefined.Undefined]` is not a subtype of the overridden return `str`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 285,
    "warning_line": "    def format_avatar_url("
  },
  {
    "project": "hikari-py/hikari",
    "commit": "f3f7bbab2d57949ea575220a6bde320666ce2d1d",
    "filename": "hikari/models/users.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/hikari-py-hikari/hikari/models/users.py",
    "file_hunks_size": 11,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "hikari/models/users.py:169:61 Incompatible parameter type [6]: Expected `str` for 3rd positional only parameter to call `cdn.generate_cdn_url` but got `typing.Optional[str]`.",
    "message": " Expected `str` for 3rd positional only parameter to call `cdn.generate_cdn_url` but got `typing.Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 169,
    "warning_line": "        return cdn.generate_cdn_url(\"avatars\", str(self.id), self.avatar_hash, format_=format_, size=size)"
  },
  {
    "project": "hikari-py/hikari",
    "commit": "f3f7bbab2d57949ea575220a6bde320666ce2d1d",
    "filename": "hikari/net/buckets.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/hikari-py-hikari/hikari/net/buckets.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "hikari/net/buckets.py:557:54 Incompatible parameter type [6]: Expected `str` for 2nd positional only parameter to call `typing.MutableMapping.__setitem__` but got `typing.Optional[str]`.",
    "message": " Expected `str` for 2nd positional only parameter to call `typing.MutableMapping.__setitem__` but got `typing.Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 557,
    "warning_line": "        self.routes_to_hashes[compiled_route.route] = bucket_header",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        compiled_route: routes.CompiledRoute,\n        bucket_header: typing.Optional[str],\n        remaining_header: int,\n",
        "source_code_len": 122,
        "target_code": "        compiled_route: routes.CompiledRoute,\n        bucket_header: str,\n        remaining_header: int,\n",
        "target_code_len": 105,
        "diff_format": "@@ -532,3 +532,3 @@\n         compiled_route: routes.CompiledRoute,\n-        bucket_header: typing.Optional[str],\n+        bucket_header: str,\n         remaining_header: int,\n",
        "source_code_with_indent": "        compiled_route: routes.CompiledRoute,\n        bucket_header: typing.Optional[str],\n        remaining_header: int,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        compiled_route: routes.CompiledRoute,\n        bucket_header: str,\n        remaining_header: int,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "hikari-py/hikari",
    "commit": "f3f7bbab2d57949ea575220a6bde320666ce2d1d",
    "filename": "hikari/net/buckets.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/hikari-py-hikari/hikari/net/buckets.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "hikari/net/buckets.py:559:66 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `routes.CompiledRoute.create_real_bucket_hash` but got `typing.Optional[str]`.",
    "message": " Expected `str` for 1st positional only parameter to call `routes.CompiledRoute.create_real_bucket_hash` but got `typing.Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 559,
    "warning_line": "        real_bucket_hash = compiled_route.create_real_bucket_hash(bucket_header)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        compiled_route: routes.CompiledRoute,\n        bucket_header: typing.Optional[str],\n        remaining_header: int,\n",
        "source_code_len": 122,
        "target_code": "        compiled_route: routes.CompiledRoute,\n        bucket_header: str,\n        remaining_header: int,\n",
        "target_code_len": 105,
        "diff_format": "@@ -532,3 +532,3 @@\n         compiled_route: routes.CompiledRoute,\n-        bucket_header: typing.Optional[str],\n+        bucket_header: str,\n         remaining_header: int,\n",
        "source_code_with_indent": "        compiled_route: routes.CompiledRoute,\n        bucket_header: typing.Optional[str],\n        remaining_header: int,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        compiled_route: routes.CompiledRoute,\n        bucket_header: str,\n        remaining_header: int,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "hikari-py/hikari",
    "commit": "f3f7bbab2d57949ea575220a6bde320666ce2d1d",
    "filename": "hikari/net/gateway.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/hikari-py-hikari/hikari/net/gateway.py",
    "file_hunks_size": 17,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "hikari/net/gateway.py:396:67 Incompatible parameter type [6]: Expected `typing.Union[presences.PresenceStatus, undefined.Undefined]` for 3rd positional only parameter to call `Gateway._build_presence_payload` but got `typing.Union[None, presences.OwnActivity, undefined.Undefined]`.",
    "message": " Expected `typing.Union[presences.PresenceStatus, undefined.Undefined]` for 3rd positional only parameter to call `Gateway._build_presence_payload` but got `typing.Union[None, presences.OwnActivity, undefined.Undefined]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 396,
    "warning_line": "        payload = self._build_presence_payload(idle_since, is_afk, activity, status)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            as being active. If undefined, this will not be changed.\n        activity : hikari.models.presences.OwnActivity or None or hikari.utilities.undefined.Undefined\n            The activity to appear to be playing. If undefined, this will not be\n            changed.\n        status : hikari.models.presences.PresenceStatus or hikari.utilities.undefined.Undefined\n            The web status to show. If undefined, this will not be changed.\n        \"\"\"\n        payload = self._build_presence_payload(idle_since, is_afk, activity, status)\n        await self._send_json({\"op\": self._GatewayOpcode.PRESENCE_UPDATE, \"d\": payload})\n        self._idle_since = idle_since if not isinstance(idle_since, undefined.Undefined) else self._idle_since\n",
        "source_code_len": 743,
        "target_code": "            as being active. If undefined, this will not be changed.\n        activity : hikari.models.presences.Activity or None or hikari.utilities.undefined.Undefined\n            The activity to appear to be playing. If undefined, this will not be\n            changed.\n        status : hikari.models.presences.Status or hikari.utilities.undefined.Undefined\n            The web status to show. If undefined, this will not be changed.\n        \"\"\"\n        presence = self._build_presence_payload(idle_since=idle_since, is_afk=is_afk, status=status, activity=activity)\n        payload: data_binding.JSONObject = {\"op\": self._GatewayOpcode.PRESENCE_UPDATE, \"d\": presence}\n        await self._send_json(payload)\n        self._idle_since = idle_since if not isinstance(idle_since, undefined.Undefined) else self._idle_since\n",
        "target_code_len": 819,
        "diff_format": "@@ -389,10 +390,11 @@\n             as being active. If undefined, this will not be changed.\n-        activity : hikari.models.presences.OwnActivity or None or hikari.utilities.undefined.Undefined\n+        activity : hikari.models.presences.Activity or None or hikari.utilities.undefined.Undefined\n             The activity to appear to be playing. If undefined, this will not be\n             changed.\n-        status : hikari.models.presences.PresenceStatus or hikari.utilities.undefined.Undefined\n+        status : hikari.models.presences.Status or hikari.utilities.undefined.Undefined\n             The web status to show. If undefined, this will not be changed.\n         \"\"\"\n-        payload = self._build_presence_payload(idle_since, is_afk, activity, status)\n-        await self._send_json({\"op\": self._GatewayOpcode.PRESENCE_UPDATE, \"d\": payload})\n+        presence = self._build_presence_payload(idle_since=idle_since, is_afk=is_afk, status=status, activity=activity)\n+        payload: data_binding.JSONObject = {\"op\": self._GatewayOpcode.PRESENCE_UPDATE, \"d\": presence}\n+        await self._send_json(payload)\n         self._idle_since = idle_since if not isinstance(idle_since, undefined.Undefined) else self._idle_since\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n        payload = self._build_presence_payload(idle_since, is_afk, activity, status)\n        await self._send_json({\"op\": self._GatewayOpcode.PRESENCE_UPDATE, \"d\": payload})\n        self._idle_since = idle_since if not isinstance(idle_since, undefined.Undefined) else self._idle_since\n",
        "target_code_with_indent": "\n        presence = self._build_presence_payload(idle_since=idle_since, is_afk=is_afk, status=status, activity=activity)\n        payload: data_binding.JSONObject = {\"op\": self._GatewayOpcode.PRESENCE_UPDATE, \"d\": presence}\n        await self._send_json(payload)\n        self._idle_since = idle_since if not isinstance(idle_since, undefined.Undefined) else self._idle_since\n"
      }
    ]
  },
  {
    "project": "hikari-py/hikari",
    "commit": "f3f7bbab2d57949ea575220a6bde320666ce2d1d",
    "filename": "hikari/net/gateway.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/hikari-py-hikari/hikari/net/gateway.py",
    "file_hunks_size": 17,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "hikari/net/gateway.py:396:77 Incompatible parameter type [6]: Expected `typing.Union[None, presences.OwnActivity, undefined.Undefined]` for 4th positional only parameter to call `Gateway._build_presence_payload` but got `typing.Union[presences.PresenceStatus, undefined.Undefined]`.",
    "message": " Expected `typing.Union[None, presences.OwnActivity, undefined.Undefined]` for 4th positional only parameter to call `Gateway._build_presence_payload` but got `typing.Union[presences.PresenceStatus, undefined.Undefined]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 396,
    "warning_line": "        payload = self._build_presence_payload(idle_since, is_afk, activity, status)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            as being active. If undefined, this will not be changed.\n        activity : hikari.models.presences.OwnActivity or None or hikari.utilities.undefined.Undefined\n            The activity to appear to be playing. If undefined, this will not be\n            changed.\n        status : hikari.models.presences.PresenceStatus or hikari.utilities.undefined.Undefined\n            The web status to show. If undefined, this will not be changed.\n        \"\"\"\n        payload = self._build_presence_payload(idle_since, is_afk, activity, status)\n        await self._send_json({\"op\": self._GatewayOpcode.PRESENCE_UPDATE, \"d\": payload})\n        self._idle_since = idle_since if not isinstance(idle_since, undefined.Undefined) else self._idle_since\n",
        "source_code_len": 743,
        "target_code": "            as being active. If undefined, this will not be changed.\n        activity : hikari.models.presences.Activity or None or hikari.utilities.undefined.Undefined\n            The activity to appear to be playing. If undefined, this will not be\n            changed.\n        status : hikari.models.presences.Status or hikari.utilities.undefined.Undefined\n            The web status to show. If undefined, this will not be changed.\n        \"\"\"\n        presence = self._build_presence_payload(idle_since=idle_since, is_afk=is_afk, status=status, activity=activity)\n        payload: data_binding.JSONObject = {\"op\": self._GatewayOpcode.PRESENCE_UPDATE, \"d\": presence}\n        await self._send_json(payload)\n        self._idle_since = idle_since if not isinstance(idle_since, undefined.Undefined) else self._idle_since\n",
        "target_code_len": 819,
        "diff_format": "@@ -389,10 +390,11 @@\n             as being active. If undefined, this will not be changed.\n-        activity : hikari.models.presences.OwnActivity or None or hikari.utilities.undefined.Undefined\n+        activity : hikari.models.presences.Activity or None or hikari.utilities.undefined.Undefined\n             The activity to appear to be playing. If undefined, this will not be\n             changed.\n-        status : hikari.models.presences.PresenceStatus or hikari.utilities.undefined.Undefined\n+        status : hikari.models.presences.Status or hikari.utilities.undefined.Undefined\n             The web status to show. If undefined, this will not be changed.\n         \"\"\"\n-        payload = self._build_presence_payload(idle_since, is_afk, activity, status)\n-        await self._send_json({\"op\": self._GatewayOpcode.PRESENCE_UPDATE, \"d\": payload})\n+        presence = self._build_presence_payload(idle_since=idle_since, is_afk=is_afk, status=status, activity=activity)\n+        payload: data_binding.JSONObject = {\"op\": self._GatewayOpcode.PRESENCE_UPDATE, \"d\": presence}\n+        await self._send_json(payload)\n         self._idle_since = idle_since if not isinstance(idle_since, undefined.Undefined) else self._idle_since\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n        payload = self._build_presence_payload(idle_since, is_afk, activity, status)\n        await self._send_json({\"op\": self._GatewayOpcode.PRESENCE_UPDATE, \"d\": payload})\n        self._idle_since = idle_since if not isinstance(idle_since, undefined.Undefined) else self._idle_since\n",
        "target_code_with_indent": "\n        presence = self._build_presence_payload(idle_since=idle_since, is_afk=is_afk, status=status, activity=activity)\n        payload: data_binding.JSONObject = {\"op\": self._GatewayOpcode.PRESENCE_UPDATE, \"d\": presence}\n        await self._send_json(payload)\n        self._idle_since = idle_since if not isinstance(idle_since, undefined.Undefined) else self._idle_since\n"
      }
    ]
  },
  {
    "project": "hikari-py/hikari",
    "commit": "f3f7bbab2d57949ea575220a6bde320666ce2d1d",
    "filename": "hikari/net/gateway.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/hikari-py-hikari/hikari/net/gateway.py",
    "file_hunks_size": 17,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "hikari/net/gateway.py:596:8 Incompatible return type [7]: Expected `typing.Dict[str, typing.Any]` but got `typing.Union[typing.Dict[str, typing.Any], typing.List[typing.Any]]`.",
    "message": " Expected `typing.Dict[str, typing.Any]` but got `typing.Union[typing.Dict[str, typing.Any], typing.List[typing.Any]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 596,
    "warning_line": "        return data_binding.load_json(string)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n        return data_binding.load_json(string)\n\n    async def _receive_zlib_message(self, first_packet: bytes) -> typing.Tuple[int, str]:\n        buff = bytearray(first_packet)\n",
        "source_code_len": 177,
        "target_code": "\n        # We assume this is always a JSON object, I'd rather not cast here and waste\n        # CPU time as this is somewhat performance critical for large bots.\n        return data_binding.load_json(string)  # type: ignore\n\n    async def _receive_zlib_message(self, first_packet: bytes) -> typing.Tuple[int, str]:\n        # Alloc new array each time; this prevents consuming a large amount of\n        # unused memory because of Discord sending massive payloads on connect\n        # initially before the payloads shrink in size. Python may not shrink\n        # this dynamically if not...\n        buff = bytearray(first_packet)\n",
        "target_code_len": 627,
        "diff_format": "@@ -595,5 +597,11 @@\n \n-        return data_binding.load_json(string)\n+        # We assume this is always a JSON object, I'd rather not cast here and waste\n+        # CPU time as this is somewhat performance critical for large bots.\n+        return data_binding.load_json(string)  # type: ignore\n \n     async def _receive_zlib_message(self, first_packet: bytes) -> typing.Tuple[int, str]:\n+        # Alloc new array each time; this prevents consuming a large amount of\n+        # unused memory because of Discord sending massive payloads on connect\n+        # initially before the payloads shrink in size. Python may not shrink\n+        # this dynamically if not...\n         buff = bytearray(first_packet)\n",
        "source_code_with_indent": "\n        <DED>return data_binding.load_json(string)\n\n    <DED>async def _receive_zlib_message(self, first_packet: bytes) -> typing.Tuple[int, str]:\n        <IND>buff = bytearray(first_packet)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        # We assume this is always a JSON object, I'd rather not cast here and waste\n        # CPU time as this is somewhat performance critical for large bots.\n        <DED>return data_binding.load_json(string)  # type: ignore\n\n    <DED>async def _receive_zlib_message(self, first_packet: bytes) -> typing.Tuple[int, str]:\n        # Alloc new array each time; this prevents consuming a large amount of\n        # unused memory because of Discord sending massive payloads on connect\n        # initially before the payloads shrink in size. Python may not shrink\n        # this dynamically if not...\n        <IND>buff = bytearray(first_packet)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "hikari-py/hikari",
    "commit": "f3f7bbab2d57949ea575220a6bde320666ce2d1d",
    "filename": "hikari/net/iterators.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/hikari-py-hikari/hikari/net/iterators.py",
    "file_hunks_size": 16,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "hikari/net/iterators.py:239:28 Incompatible parameter type [6]: Expected `typing.Iterator[Variable[_T]]` for 1st positional only parameter to call `next` but got `typing.Optional[typing.Generator[typing.Any, None, Variable[_T]]]`.",
    "message": " Expected `typing.Iterator[Variable[_T]]` for 1st positional only parameter to call `next` but got `typing.Optional[typing.Generator[typing.Any, None, Variable[_T]]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 239,
    "warning_line": "                return next(self._buffer)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        try:\n            return next(self._buffer)\n        except StopIteration:\n            self._buffer = await self._next_chunk()\n            if self._buffer is None:\n                self._complete()\n            else:\n                return next(self._buffer)\n\n",
        "source_code_len": 264,
        "target_code": "        try:\n            if self._buffer is not None:\n                return next(self._buffer)\n        except StopIteration:\n            self._buffer = await self._next_chunk()\n            if self._buffer is not None:\n                return next(self._buffer)\n        self._complete()\n\n",
        "target_code_len": 287,
        "diff_format": "@@ -232,9 +226,9 @@\n         try:\n-            return next(self._buffer)\n+            if self._buffer is not None:\n+                return next(self._buffer)\n         except StopIteration:\n             self._buffer = await self._next_chunk()\n-            if self._buffer is None:\n-                self._complete()\n-            else:\n+            if self._buffer is not None:\n                 return next(self._buffer)\n+        self._complete()\n \n",
        "source_code_with_indent": "        <IND>try:\n            <IND>return next(self._buffer)\n        <DED>except StopIteration:\n            <IND>self._buffer = await self._next_chunk()\n            if self._buffer is None:\n                <IND>self._complete()\n            <DED>else:\n                <IND>return next(self._buffer)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>try:\n            <IND>if self._buffer is not None:\n                <IND>return next(self._buffer)\n        <DED><DED>except StopIteration:\n            <IND>self._buffer = await self._next_chunk()\n            if self._buffer is not None:\n                <IND>return next(self._buffer)\n        <DED><DED>self._complete()\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "hikari-py/hikari",
    "commit": "f3f7bbab2d57949ea575220a6bde320666ce2d1d",
    "filename": "hikari/net/iterators.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/hikari-py-hikari/hikari/net/iterators.py",
    "file_hunks_size": 16,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "hikari/net/iterators.py:265:4 Inconsistent override [15]: `hikari.net.iterators.MessageIterator._next_chunk` overrides method defined in `_BufferedLazyIterator` inconsistently. Returned type `typing.Coroutine[typing.Any, typing.Any, typing.Optional[typing.Generator[messages.Message, typing.Any, None]]]` is not a subtype of the overridden return `typing.Coroutine[typing.Any, typing.Any, typing.Optional[typing.Generator[typing.Any, None, messages.Message]]]`.",
    "message": " `hikari.net.iterators.MessageIterator._next_chunk` overrides method defined in `_BufferedLazyIterator` inconsistently. Returned type `typing.Coroutine[typing.Any, typing.Any, typing.Optional[typing.Generator[messages.Message, typing.Any, None]]]` is not a subtype of the overridden return `typing.Coroutine[typing.Any, typing.Any, typing.Optional[typing.Generator[typing.Any, None, messages.Message]]]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 265,
    "warning_line": "    async def _next_chunk(self) -> typing.Optional[typing.Generator[messages.Message, typing.Any, None]]:"
  },
  {
    "project": "hikari-py/hikari",
    "commit": "f3f7bbab2d57949ea575220a6bde320666ce2d1d",
    "filename": "hikari/net/iterators.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/hikari-py-hikari/hikari/net/iterators.py",
    "file_hunks_size": 16,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "hikari/net/iterators.py:302:4 Inconsistent override [15]: `hikari.net.iterators.ReactorIterator._next_chunk` overrides method defined in `_BufferedLazyIterator` inconsistently. Returned type `typing.Coroutine[typing.Any, typing.Any, typing.Optional[typing.Generator[users.User, typing.Any, None]]]` is not a subtype of the overridden return `typing.Coroutine[typing.Any, typing.Any, typing.Optional[typing.Generator[typing.Any, None, users.User]]]`.",
    "message": " `hikari.net.iterators.ReactorIterator._next_chunk` overrides method defined in `_BufferedLazyIterator` inconsistently. Returned type `typing.Coroutine[typing.Any, typing.Any, typing.Optional[typing.Generator[users.User, typing.Any, None]]]` is not a subtype of the overridden return `typing.Coroutine[typing.Any, typing.Any, typing.Optional[typing.Generator[typing.Any, None, users.User]]]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 302,
    "warning_line": "    async def _next_chunk(self) -> typing.Optional[typing.Generator[users.User, typing.Any, None]]:"
  },
  {
    "project": "hikari-py/hikari",
    "commit": "f3f7bbab2d57949ea575220a6bde320666ce2d1d",
    "filename": "hikari/net/iterators.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/hikari-py-hikari/hikari/net/iterators.py",
    "file_hunks_size": 16,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "hikari/net/iterators.py:337:4 Inconsistent override [15]: `hikari.net.iterators.OwnGuildIterator._next_chunk` overrides method defined in `_BufferedLazyIterator` inconsistently. Returned type `typing.Coroutine[typing.Any, typing.Any, typing.Optional[typing.Generator[applications.OwnGuild, typing.Any, None]]]` is not a subtype of the overridden return `typing.Coroutine[typing.Any, typing.Any, typing.Optional[typing.Generator[typing.Any, None, applications.OwnGuild]]]`.",
    "message": " `hikari.net.iterators.OwnGuildIterator._next_chunk` overrides method defined in `_BufferedLazyIterator` inconsistently. Returned type `typing.Coroutine[typing.Any, typing.Any, typing.Optional[typing.Generator[applications.OwnGuild, typing.Any, None]]]` is not a subtype of the overridden return `typing.Coroutine[typing.Any, typing.Any, typing.Optional[typing.Generator[typing.Any, None, applications.OwnGuild]]]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 337,
    "warning_line": "    async def _next_chunk(self) -> typing.Optional[typing.Generator[applications.OwnGuild, typing.Any, None]]:"
  },
  {
    "project": "hikari-py/hikari",
    "commit": "f3f7bbab2d57949ea575220a6bde320666ce2d1d",
    "filename": "hikari/net/iterators.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/hikari-py-hikari/hikari/net/iterators.py",
    "file_hunks_size": 16,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "hikari/net/iterators.py:371:4 Inconsistent override [15]: `hikari.net.iterators.MemberIterator._next_chunk` overrides method defined in `_BufferedLazyIterator` inconsistently. Returned type `typing.Coroutine[typing.Any, typing.Any, typing.Optional[typing.Generator[guilds.Member, typing.Any, None]]]` is not a subtype of the overridden return `typing.Coroutine[typing.Any, typing.Any, typing.Optional[typing.Generator[typing.Any, None, guilds.Member]]]`.",
    "message": " `hikari.net.iterators.MemberIterator._next_chunk` overrides method defined in `_BufferedLazyIterator` inconsistently. Returned type `typing.Coroutine[typing.Any, typing.Any, typing.Optional[typing.Generator[guilds.Member, typing.Any, None]]]` is not a subtype of the overridden return `typing.Coroutine[typing.Any, typing.Any, typing.Optional[typing.Generator[typing.Any, None, guilds.Member]]]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 371,
    "warning_line": "    async def _next_chunk(self) -> typing.Optional[typing.Generator[guilds.Member, typing.Any, None]]:"
  },
  {
    "project": "hikari-py/hikari",
    "commit": "f3f7bbab2d57949ea575220a6bde320666ce2d1d",
    "filename": "hikari/net/iterators.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/hikari-py-hikari/hikari/net/iterators.py",
    "file_hunks_size": 16,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "hikari/net/iterators.py:419:8 Incompatible attribute type [8]: Attribute `_first_id` declared in class `AuditLogIterator` has type `typing.Union[int, typing.SupportsInt]` but is used as type `str`.",
    "message": " Attribute `_first_id` declared in class `AuditLogIterator` has type `typing.Union[int, typing.SupportsInt]` but is used as type `str`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 419,
    "warning_line": "        self._first_id = str(min(log.entries.keys()))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self._app = app\n        self._first_id = before\n        self._request_call = request_call\n",
        "source_code_len": 98,
        "target_code": "        self._app = app\n        self._first_id = str(before)\n        self._request_call = request_call\n",
        "target_code_len": 103,
        "diff_format": "@@ -402,3 +413,3 @@\n         self._app = app\n-        self._first_id = before\n+        self._first_id = str(before)\n         self._request_call = request_call\n",
        "source_code_with_indent": "        self._app = app\n        self._first_id = before\n        self._request_call = request_call\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self._app = app\n        self._first_id = str(before)\n        self._request_call = request_call\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "hikari-py/hikari",
    "commit": "f3f7bbab2d57949ea575220a6bde320666ce2d1d",
    "filename": "hikari/net/rest_utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/hikari-py-hikari/hikari/net/rest_utils.py",
    "file_hunks_size": 15,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "hikari/net/rest_utils.py:117:8 Incompatible return type [7]: Expected `str` but got `typing.Union[str, undefined.Undefined]`.",
    "message": " Expected `str` but got `typing.Union[str, undefined.Undefined]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 117,
    "warning_line": "        return self._name",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            while True:\n                await asyncio.gather(self, asyncio.sleep(9.9), return_exceptions=True)\n\n\n# TODO: document!\n@attr.s(auto_attribs=True, kw_only=True, slots=True)\nclass GuildBuilder:\n    _app: app_.IRESTApp\n    _channels: typing.MutableSequence[data_binding.JSONObject] = attr.ib(factory=list)\n    _counter: int = 0\n    _name: typing.Union[undefined.Undefined, str]\n    _request_call: typing.Callable[..., typing.Coroutine[None, typing.Any, data_binding.JSONObject]]\n    _roles: typing.MutableSequence[data_binding.JSONObject] = attr.ib(factory=list)\n    default_message_notifications: typing.Union[\n",
        "source_code_len": 621,
        "target_code": "            while True:\n                # Use slightly less than 10s to ensure latency does not\n                # cause the typing indicator to stop showing for a split\n                # second if the request is slow to execute.\n                await asyncio.gather(self, asyncio.sleep(9))\n\n\n@attr.s(auto_attribs=True, kw_only=True, slots=True)\nclass GuildBuilder:\n    \"\"\"A helper class used to construct a prototype for a guild.\n\n    This is used to create a guild in a tidy way using the REST API, since\n    the logic behind creating a guild on an API level is somewhat confusing\n    and detailed.\n\n    !!! note\n        This is a helper class that is used by `hikari.net.rest.REST`.\n        You should only ever need to use instances of this class that are\n        produced by that API, thus, any details about the constructor are\n        omitted from the following examples for brevity.\n\n    Examples\n    --------\n    Creating an empty guild.\n\n    ```py\n    guild = await rest.guild_builder(\"My Server!\").create()\n    ```\n\n    Creating a guild with an icon\n\n    ```py\n    from hikari.models.files import WebResourceStream\n\n    guild_builder = rest.guild_builder(\"My Server!\")\n    guild_builder.icon = WebResourceStream(\"cat.png\", \"http://...\")\n    guild = await guild_builder.create()\n    ```\n\n    Adding roles to your guild.\n\n    ```py\n    from hikari.models.permissions import Permission\n\n    guild_builder = rest.guild_builder(\"My Server!\")\n\n    everyone_role_id = guild_builder.add_role(\"@everyone\")\n    admin_role_id = guild_builder.add_role(\"Admins\", permissions=Permission.ADMINISTRATOR)\n\n    await guild_builder.create()\n    ```\n\n    !!! warning\n        The first role must always be the `@everyone` role.\n\n    !!! note\n        Functions that return a `hikari.utilities.snowflake.Snowflake` do\n        **not** provide the final ID that the object will have once the\n        API call is made. The returned IDs are only able to be used to\n        re-reference particular objects while building the guild format.\n\n        This is provided to allow creation of channels within categories,\n        and to provide permission overwrites.\n\n    Adding a text channel to your guild.\n\n    ```py\n    guild_builder = rest.guild_builder(\"My Server!\")\n\n    category_id = guild_builder.add_category(\"My safe place\")\n    channel_id = guild_builder.add_text_channel(\"general\", parent_id=category_id)\n\n    await guild_builder.create()\n    ```\n    \"\"\"\n\n    # Required arguments.\n    _app: app_.IRESTApp\n    _name: str\n\n    # Optional args that we kept hidden.\n    _channels: typing.MutableSequence[data_binding.JSONObject] = attr.ib(factory=list)\n    _counter: int = 0\n    _request_call: typing.Callable[\n        ..., typing.Coroutine[None, None, typing.Union[None, data_binding.JSONObject, data_binding.JSONArray]]\n    ]\n    _roles: typing.MutableSequence[data_binding.JSONObject] = attr.ib(factory=list)\n\n    default_message_notifications: typing.Union[\n",
        "target_code_len": 2947,
        "diff_format": "@@ -91,14 +94,89 @@\n             while True:\n-                await asyncio.gather(self, asyncio.sleep(9.9), return_exceptions=True)\n-\n-\n-# TODO: document!\n+                # Use slightly less than 10s to ensure latency does not\n+                # cause the typing indicator to stop showing for a split\n+                # second if the request is slow to execute.\n+                await asyncio.gather(self, asyncio.sleep(9))\n+\n+\n @attr.s(auto_attribs=True, kw_only=True, slots=True)\n class GuildBuilder:\n+    \"\"\"A helper class used to construct a prototype for a guild.\n+\n+    This is used to create a guild in a tidy way using the REST API, since\n+    the logic behind creating a guild on an API level is somewhat confusing\n+    and detailed.\n+\n+    !!! note\n+        This is a helper class that is used by `hikari.net.rest.REST`.\n+        You should only ever need to use instances of this class that are\n+        produced by that API, thus, any details about the constructor are\n+        omitted from the following examples for brevity.\n+\n+    Examples\n+    --------\n+    Creating an empty guild.\n+\n+    ```py\n+    guild = await rest.guild_builder(\"My Server!\").create()\n+    ```\n+\n+    Creating a guild with an icon\n+\n+    ```py\n+    from hikari.models.files import WebResourceStream\n+\n+    guild_builder = rest.guild_builder(\"My Server!\")\n+    guild_builder.icon = WebResourceStream(\"cat.png\", \"http://...\")\n+    guild = await guild_builder.create()\n+    ```\n+\n+    Adding roles to your guild.\n+\n+    ```py\n+    from hikari.models.permissions import Permission\n+\n+    guild_builder = rest.guild_builder(\"My Server!\")\n+\n+    everyone_role_id = guild_builder.add_role(\"@everyone\")\n+    admin_role_id = guild_builder.add_role(\"Admins\", permissions=Permission.ADMINISTRATOR)\n+\n+    await guild_builder.create()\n+    ```\n+\n+    !!! warning\n+        The first role must always be the `@everyone` role.\n+\n+    !!! note\n+        Functions that return a `hikari.utilities.snowflake.Snowflake` do\n+        **not** provide the final ID that the object will have once the\n+        API call is made. The returned IDs are only able to be used to\n+        re-reference particular objects while building the guild format.\n+\n+        This is provided to allow creation of channels within categories,\n+        and to provide permission overwrites.\n+\n+    Adding a text channel to your guild.\n+\n+    ```py\n+    guild_builder = rest.guild_builder(\"My Server!\")\n+\n+    category_id = guild_builder.add_category(\"My safe place\")\n+    channel_id = guild_builder.add_text_channel(\"general\", parent_id=category_id)\n+\n+    await guild_builder.create()\n+    ```\n+    \"\"\"\n+\n+    # Required arguments.\n     _app: app_.IRESTApp\n+    _name: str\n+\n+    # Optional args that we kept hidden.\n     _channels: typing.MutableSequence[data_binding.JSONObject] = attr.ib(factory=list)\n     _counter: int = 0\n-    _name: typing.Union[undefined.Undefined, str]\n-    _request_call: typing.Callable[..., typing.Coroutine[None, typing.Any, data_binding.JSONObject]]\n+    _request_call: typing.Callable[\n+        ..., typing.Coroutine[None, None, typing.Union[None, data_binding.JSONObject, data_binding.JSONArray]]\n+    ]\n     _roles: typing.MutableSequence[data_binding.JSONObject] = attr.ib(factory=list)\n+\n     default_message_notifications: typing.Union[\n",
        "source_code_with_indent": "            <IND>while True:\n                <IND>await asyncio.gather(self, asyncio.sleep(9.9), return_exceptions=True)\n\n\n# TODO: document!\n<DED><DED><DED><DED>@attr.s(auto_attribs=True, kw_only=True, slots=True)\nclass GuildBuilder:\n    <IND>_app: app_.IRESTApp\n    _channels: typing.MutableSequence[data_binding.JSONObject] = attr.ib(factory=list)\n    _counter: int = 0\n    _name: typing.Union[undefined.Undefined, str]\n    _request_call: typing.Callable[..., typing.Coroutine[None, typing.Any, data_binding.JSONObject]]\n    _roles: typing.MutableSequence[data_binding.JSONObject] = attr.ib(factory=list)\n    default_message_notifications: typing.Union[\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <IND>while True:\n                # Use slightly less than 10s to ensure latency does not\n                # cause the typing indicator to stop showing for a split\n                # second if the request is slow to execute.\n                <IND>await asyncio.gather(self, asyncio.sleep(9))\n\n\n<DED><DED><DED><DED>@attr.s(auto_attribs=True, kw_only=True, slots=True)\nclass GuildBuilder:\n    <IND>\"\"\"A helper class used to construct a prototype for a guild.\n\n    This is used to create a guild in a tidy way using the REST API, since\n    the logic behind creating a guild on an API level is somewhat confusing\n    and detailed.\n\n    !!! note\n        This is a helper class that is used by `hikari.net.rest.REST`.\n        You should only ever need to use instances of this class that are\n        produced by that API, thus, any details about the constructor are\n        omitted from the following examples for brevity.\n\n    Examples\n    --------\n    Creating an empty guild.\n\n    ```py\n    guild = await rest.guild_builder(\"My Server!\").create()\n    ```\n\n    Creating a guild with an icon\n\n    ```py\n    from hikari.models.files import WebResourceStream\n\n    guild_builder = rest.guild_builder(\"My Server!\")\n    guild_builder.icon = WebResourceStream(\"cat.png\", \"http://...\")\n    guild = await guild_builder.create()\n    ```\n\n    Adding roles to your guild.\n\n    ```py\n    from hikari.models.permissions import Permission\n\n    guild_builder = rest.guild_builder(\"My Server!\")\n\n    everyone_role_id = guild_builder.add_role(\"@everyone\")\n    admin_role_id = guild_builder.add_role(\"Admins\", permissions=Permission.ADMINISTRATOR)\n\n    await guild_builder.create()\n    ```\n\n    !!! warning\n        The first role must always be the `@everyone` role.\n\n    !!! note\n        Functions that return a `hikari.utilities.snowflake.Snowflake` do\n        **not** provide the final ID that the object will have once the\n        API call is made. The returned IDs are only able to be used to\n        re-reference particular objects while building the guild format.\n\n        This is provided to allow creation of channels within categories,\n        and to provide permission overwrites.\n\n    Adding a text channel to your guild.\n\n    ```py\n    guild_builder = rest.guild_builder(\"My Server!\")\n\n    category_id = guild_builder.add_category(\"My safe place\")\n    channel_id = guild_builder.add_text_channel(\"general\", parent_id=category_id)\n\n    await guild_builder.create()\n    ```\n    \"\"\"\n\n    # Required arguments.\n    _app: app_.IRESTApp\n    _name: str\n\n    # Optional args that we kept hidden.\n    _channels: typing.MutableSequence[data_binding.JSONObject] = attr.ib(factory=list)\n    _counter: int = 0\n    _request_call: typing.Callable[\n        ..., typing.Coroutine[None, None, typing.Union[None, data_binding.JSONObject, data_binding.JSONArray]]\n    ]\n    _roles: typing.MutableSequence[data_binding.JSONObject] = attr.ib(factory=list)\n\n    default_message_notifications: typing.Union[\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        response = await self._request_call(route, body=payload)\n        return self._app.entity_factory.deserialize_guild(response)\n",
        "source_code_len": 134,
        "target_code": "\n        raw_response = await self._request_call(route, body=payload)\n        response = typing.cast(data_binding.JSONObject, raw_response)\n        return self._app.entity_factory.deserialize_guild(response)\n",
        "target_code_len": 208,
        "diff_format": "@@ -135,3 +257,4 @@\n \n-        response = await self._request_call(route, body=payload)\n+        raw_response = await self._request_call(route, body=payload)\n+        response = typing.cast(data_binding.JSONObject, raw_response)\n         return self._app.entity_factory.deserialize_guild(response)\n",
        "source_code_with_indent": "\n        <DED>response = await self._request_call(route, body=payload)\n        return self._app.entity_factory.deserialize_guild(response)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        <DED>raw_response = await self._request_call(route, body=payload)\n        response = typing.cast(data_binding.JSONObject, raw_response)\n        return self._app.entity_factory.deserialize_guild(response)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]