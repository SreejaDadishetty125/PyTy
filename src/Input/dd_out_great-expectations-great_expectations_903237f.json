[
  {
    "project": "great-expectations/great_expectations",
    "commit": "903237f009cd98f93f4607b676568e72b72ade4c",
    "filename": "great_expectations/data_context/data_context.py",
    "min_patch_found": false,
    "full_warning_msg": "great_expectations/data_context/data_context.py:720:8 Incompatible return type [7]: Expected `Dict[str, Union[BaseDatasource, great_expectations.datasource.datasource.LegacyDatasource]]` but got `Dict[typing.Any, Union[None, BaseDatasource, great_expectations.datasource.datasource.LegacyDatasource]]`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "great-expectations/great_expectations",
    "commit": "903237f009cd98f93f4607b676568e72b72ade4c",
    "filename": "great_expectations/data_context/data_context.py",
    "min_patch_found": false,
    "full_warning_msg": "great_expectations/data_context/data_context.py:1085:8 Incompatible variable type [9]: datasource_name is declared to have type `str` but is used as type `None`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "great-expectations/great_expectations",
    "commit": "903237f009cd98f93f4607b676568e72b72ade4c",
    "filename": "great_expectations/data_context/data_context.py",
    "min_patch_found": false,
    "full_warning_msg": "great_expectations/data_context/data_context.py:1086:8 Incompatible variable type [9]: data_connector_name is declared to have type `str` but is used as type `None`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "great-expectations/great_expectations",
    "commit": "903237f009cd98f93f4607b676568e72b72ade4c",
    "filename": "great_expectations/data_context/data_context.py",
    "min_patch_found": false,
    "full_warning_msg": "great_expectations/data_context/data_context.py:1087:8 Incompatible variable type [9]: data_asset_name is declared to have type `str` but is used as type `None`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "great-expectations/great_expectations",
    "commit": "903237f009cd98f93f4607b676568e72b72ade4c",
    "filename": "great_expectations/data_context/data_context.py",
    "min_patch_found": false,
    "full_warning_msg": "great_expectations/data_context/data_context.py:1089:8 Incompatible variable type [9]: batch_request is declared to have type `BatchRequest` but is used as type `None`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "great-expectations/great_expectations",
    "commit": "903237f009cd98f93f4607b676568e72b72ade4c",
    "filename": "great_expectations/data_context/data_context.py",
    "min_patch_found": false,
    "full_warning_msg": "great_expectations/data_context/data_context.py:1091:8 Incompatible variable type [9]: partition_request is declared to have type `Union[Dict[typing.Any, typing.Any], great_expectations.core.id_dict.PartitionRequest]` but is used as type `None`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "great-expectations/great_expectations",
    "commit": "903237f009cd98f93f4607b676568e72b72ade4c",
    "filename": "great_expectations/data_context/data_context.py",
    "min_patch_found": false,
    "full_warning_msg": "great_expectations/data_context/data_context.py:1092:8 Incompatible variable type [9]: partition_identifiers is declared to have type `Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "great-expectations/great_expectations",
    "commit": "903237f009cd98f93f4607b676568e72b72ade4c",
    "filename": "great_expectations/data_context/data_context.py",
    "min_patch_found": false,
    "full_warning_msg": "great_expectations/data_context/data_context.py:1093:8 Incompatible variable type [9]: limit is declared to have type `int` but is used as type `None`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "great-expectations/great_expectations",
    "commit": "903237f009cd98f93f4607b676568e72b72ade4c",
    "filename": "great_expectations/data_context/data_context.py",
    "min_patch_found": false,
    "full_warning_msg": "great_expectations/data_context/data_context.py:1095:8 Incompatible variable type [9]: custom_filter_function is declared to have type `typing.Callable[..., typing.Any]` but is used as type `None`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "great-expectations/great_expectations",
    "commit": "903237f009cd98f93f4607b676568e72b72ade4c",
    "filename": "great_expectations/data_context/data_context.py",
    "min_patch_found": false,
    "full_warning_msg": "great_expectations/data_context/data_context.py:1097:8 Incompatible variable type [9]: sampling_method is declared to have type `str` but is used as type `None`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "great-expectations/great_expectations",
    "commit": "903237f009cd98f93f4607b676568e72b72ade4c",
    "filename": "great_expectations/data_context/data_context.py",
    "min_patch_found": false,
    "full_warning_msg": "great_expectations/data_context/data_context.py:1098:8 Incompatible variable type [9]: sampling_kwargs is declared to have type `Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "great-expectations/great_expectations",
    "commit": "903237f009cd98f93f4607b676568e72b72ade4c",
    "filename": "great_expectations/data_context/data_context.py",
    "min_patch_found": false,
    "full_warning_msg": "great_expectations/data_context/data_context.py:1099:8 Incompatible variable type [9]: splitter_method is declared to have type `str` but is used as type `None`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "great-expectations/great_expectations",
    "commit": "903237f009cd98f93f4607b676568e72b72ade4c",
    "filename": "great_expectations/data_context/data_context.py",
    "min_patch_found": false,
    "full_warning_msg": "great_expectations/data_context/data_context.py:1100:8 Incompatible variable type [9]: splitter_kwargs is declared to have type `Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "great-expectations/great_expectations",
    "commit": "903237f009cd98f93f4607b676568e72b72ade4c",
    "filename": "great_expectations/data_context/data_context.py",
    "min_patch_found": false,
    "full_warning_msg": "great_expectations/data_context/data_context.py:1359:8 Incompatible variable type [9]: datasource_name is declared to have type `str` but is used as type `None`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "great-expectations/great_expectations",
    "commit": "903237f009cd98f93f4607b676568e72b72ade4c",
    "filename": "great_expectations/data_context/data_context.py",
    "min_patch_found": false,
    "full_warning_msg": "great_expectations/data_context/data_context.py:1360:8 Incompatible variable type [9]: data_connector_name is declared to have type `str` but is used as type `None`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "great-expectations/great_expectations",
    "commit": "903237f009cd98f93f4607b676568e72b72ade4c",
    "filename": "great_expectations/data_context/data_context.py",
    "min_patch_found": false,
    "full_warning_msg": "great_expectations/data_context/data_context.py:1361:8 Incompatible variable type [9]: data_asset_name is declared to have type `str` but is used as type `None`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "great-expectations/great_expectations",
    "commit": "903237f009cd98f93f4607b676568e72b72ade4c",
    "filename": "great_expectations/data_context/data_context.py",
    "min_patch_found": false,
    "full_warning_msg": "great_expectations/data_context/data_context.py:1363:8 Incompatible variable type [9]: batch_request is declared to have type `BatchRequest` but is used as type `None`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "great-expectations/great_expectations",
    "commit": "903237f009cd98f93f4607b676568e72b72ade4c",
    "filename": "great_expectations/data_context/data_context.py",
    "min_patch_found": false,
    "full_warning_msg": "great_expectations/data_context/data_context.py:1365:8 Incompatible variable type [9]: partition_request is declared to have type `Union[Dict[typing.Any, typing.Any], great_expectations.core.id_dict.PartitionRequest]` but is used as type `None`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "great-expectations/great_expectations",
    "commit": "903237f009cd98f93f4607b676568e72b72ade4c",
    "filename": "great_expectations/data_context/data_context.py",
    "min_patch_found": false,
    "full_warning_msg": "great_expectations/data_context/data_context.py:1366:8 Incompatible variable type [9]: partition_identifiers is declared to have type `Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "great-expectations/great_expectations",
    "commit": "903237f009cd98f93f4607b676568e72b72ade4c",
    "filename": "great_expectations/data_context/data_context.py",
    "min_patch_found": false,
    "full_warning_msg": "great_expectations/data_context/data_context.py:1367:8 Incompatible variable type [9]: limit is declared to have type `int` but is used as type `None`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "great-expectations/great_expectations",
    "commit": "903237f009cd98f93f4607b676568e72b72ade4c",
    "filename": "great_expectations/data_context/data_context.py",
    "min_patch_found": false,
    "full_warning_msg": "great_expectations/data_context/data_context.py:1369:8 Incompatible variable type [9]: custom_filter_function is declared to have type `typing.Callable[..., typing.Any]` but is used as type `None`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "great-expectations/great_expectations",
    "commit": "903237f009cd98f93f4607b676568e72b72ade4c",
    "filename": "great_expectations/data_context/data_context.py",
    "min_patch_found": false,
    "full_warning_msg": "great_expectations/data_context/data_context.py:1371:8 Incompatible variable type [9]: sampling_method is declared to have type `str` but is used as type `None`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "great-expectations/great_expectations",
    "commit": "903237f009cd98f93f4607b676568e72b72ade4c",
    "filename": "great_expectations/data_context/data_context.py",
    "min_patch_found": false,
    "full_warning_msg": "great_expectations/data_context/data_context.py:1372:8 Incompatible variable type [9]: sampling_kwargs is declared to have type `Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "great-expectations/great_expectations",
    "commit": "903237f009cd98f93f4607b676568e72b72ade4c",
    "filename": "great_expectations/data_context/data_context.py",
    "min_patch_found": false,
    "full_warning_msg": "great_expectations/data_context/data_context.py:1373:8 Incompatible variable type [9]: splitter_method is declared to have type `str` but is used as type `None`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "great-expectations/great_expectations",
    "commit": "903237f009cd98f93f4607b676568e72b72ade4c",
    "filename": "great_expectations/data_context/data_context.py",
    "min_patch_found": false,
    "full_warning_msg": "great_expectations/data_context/data_context.py:1374:8 Incompatible variable type [9]: splitter_kwargs is declared to have type `Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "great-expectations/great_expectations",
    "commit": "903237f009cd98f93f4607b676568e72b72ade4c",
    "filename": "great_expectations/data_context/data_context.py",
    "min_patch_found": false,
    "full_warning_msg": "great_expectations/data_context/data_context.py:1489:8 Incompatible variable type [9]: datasource_name is declared to have type `str` but is used as type `None`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "great-expectations/great_expectations",
    "commit": "903237f009cd98f93f4607b676568e72b72ade4c",
    "filename": "great_expectations/data_context/data_context.py",
    "min_patch_found": false,
    "full_warning_msg": "great_expectations/data_context/data_context.py:1490:8 Incompatible variable type [9]: data_connector_name is declared to have type `str` but is used as type `None`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "great-expectations/great_expectations",
    "commit": "903237f009cd98f93f4607b676568e72b72ade4c",
    "filename": "great_expectations/data_context/data_context.py",
    "min_patch_found": false,
    "full_warning_msg": "great_expectations/data_context/data_context.py:1491:8 Incompatible variable type [9]: data_asset_name is declared to have type `str` but is used as type `None`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "great-expectations/great_expectations",
    "commit": "903237f009cd98f93f4607b676568e72b72ade4c",
    "filename": "great_expectations/data_context/data_context.py",
    "min_patch_found": false,
    "full_warning_msg": "great_expectations/data_context/data_context.py:1493:8 Incompatible variable type [9]: batch_request is declared to have type `BatchRequest` but is used as type `None`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "great-expectations/great_expectations",
    "commit": "903237f009cd98f93f4607b676568e72b72ade4c",
    "filename": "great_expectations/data_context/data_context.py",
    "min_patch_found": false,
    "full_warning_msg": "great_expectations/data_context/data_context.py:1495:8 Incompatible variable type [9]: partition_request is declared to have type `Union[Dict[typing.Any, typing.Any], great_expectations.core.id_dict.PartitionRequest]` but is used as type `None`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "great-expectations/great_expectations",
    "commit": "903237f009cd98f93f4607b676568e72b72ade4c",
    "filename": "great_expectations/data_context/data_context.py",
    "min_patch_found": false,
    "full_warning_msg": "great_expectations/data_context/data_context.py:1496:8 Incompatible variable type [9]: partition_identifiers is declared to have type `Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "great-expectations/great_expectations",
    "commit": "903237f009cd98f93f4607b676568e72b72ade4c",
    "filename": "great_expectations/data_context/data_context.py",
    "min_patch_found": false,
    "full_warning_msg": "great_expectations/data_context/data_context.py:1497:8 Incompatible variable type [9]: limit is declared to have type `int` but is used as type `None`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "great-expectations/great_expectations",
    "commit": "903237f009cd98f93f4607b676568e72b72ade4c",
    "filename": "great_expectations/data_context/data_context.py",
    "min_patch_found": false,
    "full_warning_msg": "great_expectations/data_context/data_context.py:1499:8 Incompatible variable type [9]: custom_filter_function is declared to have type `typing.Callable[..., typing.Any]` but is used as type `None`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "great-expectations/great_expectations",
    "commit": "903237f009cd98f93f4607b676568e72b72ade4c",
    "filename": "great_expectations/data_context/data_context.py",
    "min_patch_found": false,
    "full_warning_msg": "great_expectations/data_context/data_context.py:1500:8 Incompatible variable type [9]: expectation_suite_name is declared to have type `str` but is used as type `None`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "great-expectations/great_expectations",
    "commit": "903237f009cd98f93f4607b676568e72b72ade4c",
    "filename": "great_expectations/data_context/data_context.py",
    "min_patch_found": false,
    "full_warning_msg": "great_expectations/data_context/data_context.py:1501:8 Incompatible variable type [9]: expectation_suite is declared to have type `ExpectationSuite` but is used as type `None`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "great-expectations/great_expectations",
    "commit": "903237f009cd98f93f4607b676568e72b72ade4c",
    "filename": "great_expectations/data_context/data_context.py",
    "min_patch_found": false,
    "full_warning_msg": "great_expectations/data_context/data_context.py:1502:8 Incompatible variable type [9]: create_expectation_suite_with_name is declared to have type `str` but is used as type `None`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "great-expectations/great_expectations",
    "commit": "903237f009cd98f93f4607b676568e72b72ade4c",
    "filename": "great_expectations/data_context/data_context.py",
    "min_patch_found": false,
    "full_warning_msg": "great_expectations/data_context/data_context.py:1504:8 Incompatible variable type [9]: sampling_method is declared to have type `str` but is used as type `None`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "great-expectations/great_expectations",
    "commit": "903237f009cd98f93f4607b676568e72b72ade4c",
    "filename": "great_expectations/data_context/data_context.py",
    "min_patch_found": false,
    "full_warning_msg": "great_expectations/data_context/data_context.py:1505:8 Incompatible variable type [9]: sampling_kwargs is declared to have type `Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "great-expectations/great_expectations",
    "commit": "903237f009cd98f93f4607b676568e72b72ade4c",
    "filename": "great_expectations/data_context/data_context.py",
    "min_patch_found": false,
    "full_warning_msg": "great_expectations/data_context/data_context.py:1506:8 Incompatible variable type [9]: splitter_method is declared to have type `str` but is used as type `None`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "great-expectations/great_expectations",
    "commit": "903237f009cd98f93f4607b676568e72b72ade4c",
    "filename": "great_expectations/data_context/data_context.py",
    "min_patch_found": false,
    "full_warning_msg": "great_expectations/data_context/data_context.py:1507:8 Incompatible variable type [9]: splitter_kwargs is declared to have type `Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "exception": "Cannot have more than 64 hunks in a file",
    "dd_fail": true
  },
  {
    "project": "great-expectations/great_expectations",
    "commit": "903237f009cd98f93f4607b676568e72b72ade4c",
    "filename": "great_expectations/datasource/data_connector/util.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/great-expectations-great_expectations/great_expectations/datasource/data_connector/util.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "great_expectations/datasource/data_connector/util.py:84:4 Incompatible variable type [9]: batch_request is declared to have type `BatchRequest` but is used as type `Optional[BatchRequest]`.",
    "message": " batch_request is declared to have type `BatchRequest` but is used as type `Optional[BatchRequest]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 84,
    "warning_line": "    batch_request: BatchRequest = (",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from pathlib import Path\nfrom typing import Any, Dict, List, Optional\n\n",
        "source_code_len": 71,
        "target_code": "from pathlib import Path\nfrom typing import Any, Dict, List, Optional, Tuple\n\n",
        "target_code_len": 78,
        "diff_format": "@@ -9,3 +9,3 @@\n from pathlib import Path\n-from typing import Any, Dict, List, Optional\n+from typing import Any, Dict, List, Optional, Tuple\n \n",
        "source_code_with_indent": "from pathlib import Path\nfrom typing import Any, Dict, List, Optional\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from pathlib import Path\nfrom typing import Any, Dict, List, Optional, Tuple\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    group_names: List[str],\n) -> Optional[List[BatchDefinition]]:\n    batch_request: BatchRequest = (\n        convert_data_reference_string_to_batch_request_using_regex(\n            data_reference=data_reference,\n            regex_pattern=regex_pattern,\n            group_names=group_names,\n        )\n    )\n    if batch_request is None:\n        return None\n\n    if data_asset_name is None:\n        data_asset_name = batch_request.data_asset_name\n\n",
        "source_code_len": 447,
        "target_code": "    group_names: List[str],\n    data_asset_name: Optional[str] = None,\n) -> Optional[List[BatchDefinition]]:\n    processed_data_reference: Optional[\n        Tuple[str, PartitionDefinitionSubset]\n    ] = convert_data_reference_string_to_partition_definition_using_regex(\n        data_reference=data_reference,\n        regex_pattern=regex_pattern,\n        group_names=group_names,\n    )\n    if processed_data_reference is None:\n        return None\n    data_asset_name_from_partition_definition: str = processed_data_reference[0]\n    partition_definition: PartitionDefinitionSubset = processed_data_reference[1]\n    if data_asset_name is None:\n        data_asset_name = data_asset_name_from_partition_definition\n\n",
        "target_code_len": 710,
        "diff_format": "@@ -82,15 +81,17 @@\n     group_names: List[str],\n+    data_asset_name: Optional[str] = None,\n ) -> Optional[List[BatchDefinition]]:\n-    batch_request: BatchRequest = (\n-        convert_data_reference_string_to_batch_request_using_regex(\n-            data_reference=data_reference,\n-            regex_pattern=regex_pattern,\n-            group_names=group_names,\n-        )\n-    )\n-    if batch_request is None:\n+    processed_data_reference: Optional[\n+        Tuple[str, PartitionDefinitionSubset]\n+    ] = convert_data_reference_string_to_partition_definition_using_regex(\n+        data_reference=data_reference,\n+        regex_pattern=regex_pattern,\n+        group_names=group_names,\n+    )\n+    if processed_data_reference is None:\n         return None\n-\n+    data_asset_name_from_partition_definition: str = processed_data_reference[0]\n+    partition_definition: PartitionDefinitionSubset = processed_data_reference[1]\n     if data_asset_name is None:\n-        data_asset_name = batch_request.data_asset_name\n+        data_asset_name = data_asset_name_from_partition_definition\n \n",
        "source_code_with_indent": "    group_names: List[str],\n) -> Optional[List[BatchDefinition]]:\n    <IND>batch_request: BatchRequest = (\n        convert_data_reference_string_to_batch_request_using_regex(\n            data_reference=data_reference,\n            regex_pattern=regex_pattern,\n            group_names=group_names,\n        )\n    )\n    if batch_request is None:\n        <IND>return None\n\n    <DED>if data_asset_name is None:\n        <IND>data_asset_name = batch_request.data_asset_name\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    group_names: List[str],\n    data_asset_name: Optional[str] = None,\n) -> Optional[List[BatchDefinition]]:\n    <IND>processed_data_reference: Optional[\n        Tuple[str, PartitionDefinitionSubset]\n    ] = convert_data_reference_string_to_partition_definition_using_regex(\n        data_reference=data_reference,\n        regex_pattern=regex_pattern,\n        group_names=group_names,\n    )\n    if processed_data_reference is None:\n        <IND>return None\n    <DED>data_asset_name_from_partition_definition: str = processed_data_reference[0]\n    partition_definition: PartitionDefinitionSubset = processed_data_reference[1]\n    if data_asset_name is None:\n        <IND>data_asset_name = data_asset_name_from_partition_definition\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            data_asset_name=data_asset_name,\n            partition_definition=PartitionDefinition(batch_request.partition_request),\n        )\n",
        "source_code_len": 142,
        "target_code": "            data_asset_name=data_asset_name,\n            partition_definition=PartitionDefinition(partition_definition),\n        )\n",
        "target_code_len": 131,
        "diff_format": "@@ -101,3 +102,3 @@\n             data_asset_name=data_asset_name,\n-            partition_definition=PartitionDefinition(batch_request.partition_request),\n+            partition_definition=PartitionDefinition(partition_definition),\n         )\n",
        "source_code_with_indent": "            data_asset_name=data_asset_name,\n            partition_definition=PartitionDefinition(batch_request.partition_request),\n        )\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            data_asset_name=data_asset_name,\n            partition_definition=PartitionDefinition(partition_definition),\n        )\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef convert_data_reference_string_to_batch_request_using_regex(\n    data_reference: str,\n",
        "source_code_len": 90,
        "target_code": "\ndef convert_data_reference_string_to_partition_definition_using_regex(\n    data_reference: str,\n",
        "target_code_len": 97,
        "diff_format": "@@ -106,3 +107,3 @@\n \n-def convert_data_reference_string_to_batch_request_using_regex(\n+def convert_data_reference_string_to_partition_definition_using_regex(\n     data_reference: str,\n",
        "source_code_with_indent": "\n<DED>def convert_data_reference_string_to_batch_request_using_regex(\n    data_reference: str,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def convert_data_reference_string_to_partition_definition_using_regex(\n    data_reference: str,\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    group_names: List[str],\n) -> Optional[BatchRequest]:\n    # noinspection PyUnresolvedReferences\n",
        "source_code_len": 99,
        "target_code": "    group_names: List[str],\n) -> Optional[Tuple[str, PartitionDefinitionSubset]]:\n    # noinspection PyUnresolvedReferences\n",
        "target_code_len": 124,
        "diff_format": "@@ -110,3 +111,3 @@\n     group_names: List[str],\n-) -> Optional[BatchRequest]:\n+) -> Optional[Tuple[str, PartitionDefinitionSubset]]:\n     # noinspection PyUnresolvedReferences\n",
        "source_code_with_indent": "    group_names: List[str],\n) -> Optional[BatchRequest]:\n    # noinspection PyUnresolvedReferences\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    group_names: List[str],\n) -> Optional[Tuple[str, PartitionDefinitionSubset]]:\n    # noinspection PyUnresolvedReferences\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        data_asset_name = partition_definition.pop(\"data_asset_name\")\n    batch_request: BatchRequest = BatchRequest(\n        data_asset_name=data_asset_name,\n        partition_request=partition_definition,\n    )\n    return batch_request\n\n",
        "source_code_len": 239,
        "target_code": "        data_asset_name = partition_definition.pop(\"data_asset_name\")\n    return data_asset_name, partition_definition\n\n",
        "target_code_len": 120,
        "diff_format": "@@ -125,7 +126,3 @@\n         data_asset_name = partition_definition.pop(\"data_asset_name\")\n-    batch_request: BatchRequest = BatchRequest(\n-        data_asset_name=data_asset_name,\n-        partition_request=partition_definition,\n-    )\n-    return batch_request\n+    return data_asset_name, partition_definition\n \n",
        "source_code_with_indent": "        <IND>data_asset_name = partition_definition.pop(\"data_asset_name\")\n    <DED>batch_request: BatchRequest = BatchRequest(\n        data_asset_name=data_asset_name,\n        partition_request=partition_definition,\n    )\n    return batch_request\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>data_asset_name = partition_definition.pop(\"data_asset_name\")\n    <DED>return data_asset_name, partition_definition\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "great-expectations/great_expectations",
    "commit": "903237f009cd98f93f4607b676568e72b72ade4c",
    "filename": "great_expectations/validation_operators/types/validation_operator_result.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/great-expectations-great_expectations/great_expectations/validation_operators/types/validation_operator_result.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "great_expectations/validation_operators/types/validation_operator_result.py:46:8 Incompatible variable type [9]: success is declared to have type `bool` but is used as type `None`.",
    "message": " success is declared to have type `bool` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 46,
    "warning_line": "        success: bool = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from copy import deepcopy\nfrom typing import Dict, List, Union\n\n",
        "source_code_len": 64,
        "target_code": "from copy import deepcopy\nfrom typing import Dict, List, Optional, Union\n\n",
        "target_code_len": 74,
        "diff_format": "@@ -2,3 +2,3 @@\n from copy import deepcopy\n-from typing import Dict, List, Union\n+from typing import Dict, List, Optional, Union\n \n",
        "source_code_with_indent": "from copy import deepcopy\nfrom typing import Dict, List, Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from copy import deepcopy\nfrom typing import Dict, List, Optional, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ],\n        validation_operator_config,\n        evaluation_parameters: dict = None,\n        success: bool = None,\n    ) -> None:\n",
        "source_code_len": 136,
        "target_code": "        ],\n        validation_operator_config: dict,\n        evaluation_parameters: dict = None,\n        success: Optional[bool] = None,\n    ) -> None:\n",
        "target_code_len": 152,
        "diff_format": "@@ -43,5 +43,5 @@\n         ],\n-        validation_operator_config,\n+        validation_operator_config: dict,\n         evaluation_parameters: dict = None,\n-        success: bool = None,\n+        success: Optional[bool] = None,\n     ) -> None:\n",
        "source_code_with_indent": "        ],\n        validation_operator_config,\n        evaluation_parameters: dict = None,\n        success: bool = None,\n    ) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ],\n        validation_operator_config: dict,\n        evaluation_parameters: dict = None,\n        success: Optional[bool] = None,\n    ) -> None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]