[
  {
    "project": "google/jax",
    "commit": "0080c89548ff032cd1cc00e9fbc647028c1ec8fc",
    "filename": "jax/api.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/google-jax/jax/api.py",
    "file_hunks_size": 21,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jax/api.py:84:23 Incompatible variable type [9]: static_argnums is declared to have type `Tuple[int]` but is used as type `Tuple[]`.",
    "message": " static_argnums is declared to have type `Tuple[int]` but is used as type `Tuple[]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 84,
    "warning_line": "def jit(fun: Callable, static_argnums: Tuple[int] = (), device=None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import threading\nfrom typing import Any, Callable, List, Optional, Tuple, Union\nfrom warnings import warn\n",
        "source_code_len": 106,
        "target_code": "import threading\nfrom typing import Any, Callable, Collection, Optional, Sequence, Tuple, Union\nfrom warnings import warn\n",
        "target_code_len": 122,
        "diff_format": "@@ -32,3 +32,3 @@\n import threading\n-from typing import Any, Callable, List, Optional, Tuple, Union\n+from typing import Any, Callable, Collection, Optional, Sequence, Tuple, Union\n from warnings import warn\n",
        "source_code_with_indent": "import threading\nfrom typing import Any, Callable, List, Optional, Tuple, Union\nfrom warnings import warn\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import threading\nfrom typing import Any, Callable, Collection, Optional, Sequence, Tuple, Union\nfrom warnings import warn\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nmap = safe_map\n",
        "source_code_len": 16,
        "target_code": "\nAxisName = Any\n\nmap = safe_map\n",
        "target_code_len": 32,
        "diff_format": "@@ -64,2 +64,4 @@\n \n+AxisName = Any\n+\n map = safe_map\n",
        "source_code_with_indent": "\nmap = safe_map\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nAxisName = Any\n\nmap = safe_map\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef jit(fun: Callable, static_argnums: Tuple[int] = (), device=None,\n        backend: Optional[str] = None):\n  \"\"\"Sets up `fun` for just-in-time compilation with XLA.\n",
        "source_code_len": 168,
        "target_code": "\ndef jit(fun: Callable, static_argnums: Union[int, Collection[int]] = (),\n        device=None, backend: Optional[str] = None):\n  \"\"\"Sets up `fun` for just-in-time compilation with XLA.\n",
        "target_code_len": 185,
        "diff_format": "@@ -83,4 +85,4 @@\n \n-def jit(fun: Callable, static_argnums: Tuple[int] = (), device=None,\n-        backend: Optional[str] = None):\n+def jit(fun: Callable, static_argnums: Union[int, Collection[int]] = (),\n+        device=None, backend: Optional[str] = None):\n   \"\"\"Sets up `fun` for just-in-time compilation with XLA.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\ndef jit(fun: Callable, static_argnums: Tuple[int] = (), device=None,\n        backend: Optional[str] = None):\n  <IND>",
        "target_code_with_indent": "\ndef jit(fun: Callable, static_argnums: Union[int, Collection[int]] = (),\n        device=None, backend: Optional[str] = None):\n  <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef xla_computation(fun: Callable, static_argnums: Tuple[int] = (),\n                    axis_env: Optional[List[Tuple[Any, int]]] = None,\n                    backend: Optional[str] = None,\n",
        "source_code_len": 190,
        "target_code": "\ndef xla_computation(fun: Callable,\n                    static_argnums: Union[int, Collection[int]] = (),\n                    axis_env: Optional[Sequence[Tuple[AxisName, int]]] = None,\n                    backend: Optional[str] = None,\n",
        "target_code_len": 236,
        "diff_format": "@@ -197,4 +200,5 @@\n \n-def xla_computation(fun: Callable, static_argnums: Tuple[int] = (),\n-                    axis_env: Optional[List[Tuple[Any, int]]] = None,\n+def xla_computation(fun: Callable,\n+                    static_argnums: Union[int, Collection[int]] = (),\n+                    axis_env: Optional[Sequence[Tuple[AxisName, int]]] = None,\n                     backend: Optional[str] = None,\n",
        "source_code_with_indent": "\n<DED><DED>def xla_computation(fun: Callable, static_argnums: Tuple[int] = (),\n                    axis_env: Optional[List[Tuple[Any, int]]] = None,\n                    backend: Optional[str] = None,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED><DED>def xla_computation(fun: Callable,\n                    static_argnums: Union[int, Collection[int]] = (),\n                    axis_env: Optional[Sequence[Tuple[AxisName, int]]] = None,\n                    backend: Optional[str] = None,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "google/jax",
    "commit": "0080c89548ff032cd1cc00e9fbc647028c1ec8fc",
    "filename": "jax/api.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/google-jax/jax/api.py",
    "file_hunks_size": 21,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jax/api.py:198:35 Incompatible variable type [9]: static_argnums is declared to have type `Tuple[int]` but is used as type `Tuple[]`.",
    "message": " static_argnums is declared to have type `Tuple[int]` but is used as type `Tuple[]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 198,
    "warning_line": "def xla_computation(fun: Callable, static_argnums: Tuple[int] = (),",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import threading\nfrom typing import Any, Callable, List, Optional, Tuple, Union\nfrom warnings import warn\n",
        "source_code_len": 106,
        "target_code": "import threading\nfrom typing import Any, Callable, Collection, Optional, Sequence, Tuple, Union\nfrom warnings import warn\n",
        "target_code_len": 122,
        "diff_format": "@@ -32,3 +32,3 @@\n import threading\n-from typing import Any, Callable, List, Optional, Tuple, Union\n+from typing import Any, Callable, Collection, Optional, Sequence, Tuple, Union\n from warnings import warn\n",
        "source_code_with_indent": "import threading\nfrom typing import Any, Callable, List, Optional, Tuple, Union\nfrom warnings import warn\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import threading\nfrom typing import Any, Callable, Collection, Optional, Sequence, Tuple, Union\nfrom warnings import warn\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nmap = safe_map\n",
        "source_code_len": 16,
        "target_code": "\nAxisName = Any\n\nmap = safe_map\n",
        "target_code_len": 32,
        "diff_format": "@@ -64,2 +64,4 @@\n \n+AxisName = Any\n+\n map = safe_map\n",
        "source_code_with_indent": "\nmap = safe_map\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nAxisName = Any\n\nmap = safe_map\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef xla_computation(fun: Callable, static_argnums: Tuple[int] = (),\n                    axis_env: Optional[List[Tuple[Any, int]]] = None,\n                    backend: Optional[str] = None,\n",
        "source_code_len": 190,
        "target_code": "\ndef xla_computation(fun: Callable,\n                    static_argnums: Union[int, Collection[int]] = (),\n                    axis_env: Optional[Sequence[Tuple[AxisName, int]]] = None,\n                    backend: Optional[str] = None,\n",
        "target_code_len": 236,
        "diff_format": "@@ -197,4 +200,5 @@\n \n-def xla_computation(fun: Callable, static_argnums: Tuple[int] = (),\n-                    axis_env: Optional[List[Tuple[Any, int]]] = None,\n+def xla_computation(fun: Callable,\n+                    static_argnums: Union[int, Collection[int]] = (),\n+                    axis_env: Optional[Sequence[Tuple[AxisName, int]]] = None,\n                     backend: Optional[str] = None,\n",
        "source_code_with_indent": "\n<DED><DED>def xla_computation(fun: Callable, static_argnums: Tuple[int] = (),\n                    axis_env: Optional[List[Tuple[Any, int]]] = None,\n                    backend: Optional[str] = None,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED><DED>def xla_computation(fun: Callable,\n                    static_argnums: Union[int, Collection[int]] = (),\n                    axis_env: Optional[Sequence[Tuple[AxisName, int]]] = None,\n                    backend: Optional[str] = None,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "google/jax",
    "commit": "0080c89548ff032cd1cc00e9fbc647028c1ec8fc",
    "filename": "jax/api.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/google-jax/jax/api.py",
    "file_hunks_size": 21,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jax/api.py:729:9 Incompatible variable type [9]: static_broadcasted_argnums is declared to have type `Tuple[int]` but is used as type `Tuple[]`.",
    "message": " static_broadcasted_argnums is declared to have type `Tuple[int]` but is used as type `Tuple[]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 729,
    "warning_line": "         static_broadcasted_argnums: Tuple[int] = (),",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import threading\nfrom typing import Any, Callable, List, Optional, Tuple, Union\nfrom warnings import warn\n",
        "source_code_len": 106,
        "target_code": "import threading\nfrom typing import Any, Callable, Collection, Optional, Sequence, Tuple, Union\nfrom warnings import warn\n",
        "target_code_len": 122,
        "diff_format": "@@ -32,3 +32,3 @@\n import threading\n-from typing import Any, Callable, List, Optional, Tuple, Union\n+from typing import Any, Callable, Collection, Optional, Sequence, Tuple, Union\n from warnings import warn\n",
        "source_code_with_indent": "import threading\nfrom typing import Any, Callable, List, Optional, Tuple, Union\nfrom warnings import warn\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import threading\nfrom typing import Any, Callable, Collection, Optional, Sequence, Tuple, Union\nfrom warnings import warn\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nmap = safe_map\n",
        "source_code_len": 16,
        "target_code": "\nAxisName = Any\n\nmap = safe_map\n",
        "target_code_len": 32,
        "diff_format": "@@ -64,2 +64,4 @@\n \n+AxisName = Any\n+\n map = safe_map\n",
        "source_code_with_indent": "\nmap = safe_map\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nAxisName = Any\n\nmap = safe_map\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef xla_computation(fun: Callable, static_argnums: Tuple[int] = (),\n                    axis_env: Optional[List[Tuple[Any, int]]] = None,\n                    backend: Optional[str] = None,\n",
        "source_code_len": 190,
        "target_code": "\ndef xla_computation(fun: Callable,\n                    static_argnums: Union[int, Collection[int]] = (),\n                    axis_env: Optional[Sequence[Tuple[AxisName, int]]] = None,\n                    backend: Optional[str] = None,\n",
        "target_code_len": 236,
        "diff_format": "@@ -197,4 +200,5 @@\n \n-def xla_computation(fun: Callable, static_argnums: Tuple[int] = (),\n-                    axis_env: Optional[List[Tuple[Any, int]]] = None,\n+def xla_computation(fun: Callable,\n+                    static_argnums: Union[int, Collection[int]] = (),\n+                    axis_env: Optional[Sequence[Tuple[AxisName, int]]] = None,\n                     backend: Optional[str] = None,\n",
        "source_code_with_indent": "\n<DED><DED>def xla_computation(fun: Callable, static_argnums: Tuple[int] = (),\n                    axis_env: Optional[List[Tuple[Any, int]]] = None,\n                    backend: Optional[str] = None,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED><DED>def xla_computation(fun: Callable,\n                    static_argnums: Union[int, Collection[int]] = (),\n                    axis_env: Optional[Sequence[Tuple[AxisName, int]]] = None,\n                    backend: Optional[str] = None,\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef pmap(fun: Callable, axis_name: Any = None,\n         static_broadcasted_argnums: Tuple[int] = (),\n         devices=None, backend: Optional[str] = None,\n",
        "source_code_len": 156,
        "target_code": "\ndef pmap(fun: Callable, axis_name: Optional[AxisName] = None,\n         static_broadcasted_argnums: Union[int, Collection[int]] = (),\n         devices=None, backend: Optional[str] = None,\n",
        "target_code_len": 188,
        "diff_format": "@@ -727,4 +732,4 @@\n \n-def pmap(fun: Callable, axis_name: Any = None,\n-         static_broadcasted_argnums: Tuple[int] = (),\n+def pmap(fun: Callable, axis_name: Optional[AxisName] = None,\n+         static_broadcasted_argnums: Union[int, Collection[int]] = (),\n          devices=None, backend: Optional[str] = None,\n",
        "source_code_with_indent": "\n<DED>def pmap(fun: Callable, axis_name: Any = None,\n         static_broadcasted_argnums: Tuple[int] = (),\n         devices=None, backend: Optional[str] = None,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def pmap(fun: Callable, axis_name: Optional[AxisName] = None,\n         static_broadcasted_argnums: Union[int, Collection[int]] = (),\n         devices=None, backend: Optional[str] = None,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]