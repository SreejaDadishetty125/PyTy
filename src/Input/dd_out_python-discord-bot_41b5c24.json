[
  {
    "project": "python-discord/bot",
    "commit": "41b5c2409fff548545e463759f22500e9244b375",
    "filename": "bot/exts/info/code_snippets.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-discord-bot/bot/exts/info/code_snippets.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bot/exts/info/code_snippets.py:48:8 Incompatible return type [7]: Expected `str` but got implicit return value of `None`.",
    "message": " Expected `str` but got implicit return value of `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 48,
    "warning_line": "        async with self.bot.http_session.get(url, raise_for_status=True, **kwargs) as response:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import textwrap\nfrom urllib.parse import quote_plus\n",
        "source_code_len": 52,
        "target_code": "import textwrap\nfrom typing import Any\nfrom urllib.parse import quote_plus\n",
        "target_code_len": 75,
        "diff_format": "@@ -3,2 +3,3 @@\n import textwrap\n+from typing import Any\n from urllib.parse import quote_plus\n",
        "source_code_with_indent": "import textwrap\nfrom urllib.parse import quote_plus\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import textwrap\nfrom typing import Any\nfrom urllib.parse import quote_plus\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    async def _fetch_response(self, url: str, response_format: str, **kwargs) -> str:\n        \"\"\"Makes http requests using aiohttp.\"\"\"\n",
        "source_code_len": 136,
        "target_code": "\n    async def _fetch_response(self, url: str, response_format: str, **kwargs) -> Any:\n        \"\"\"Makes http requests using aiohttp.\"\"\"\n",
        "target_code_len": 136,
        "diff_format": "@@ -45,3 +46,3 @@\n \n-    async def _fetch_response(self, url: str, response_format: str, **kwargs) -> str:\n+    async def _fetch_response(self, url: str, response_format: str, **kwargs) -> Any:\n         \"\"\"Makes http requests using aiohttp.\"\"\"\n",
        "source_code_with_indent": "\n    async def _fetch_response(self, url: str, response_format: str, **kwargs) -> str:\n        <IND>\"\"\"Makes http requests using aiohttp.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    async def _fetch_response(self, url: str, response_format: str, **kwargs) -> Any:\n        <IND>\"\"\"Makes http requests using aiohttp.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "python-discord/bot",
    "commit": "41b5c2409fff548545e463759f22500e9244b375",
    "filename": "bot/exts/info/code_snippets.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-discord-bot/bot/exts/info/code_snippets.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bot/exts/info/code_snippets.py:82:46 Incompatible parameter type [6]: Expected `typing.Tuple[typing.Any, ...]` for 2nd positional only parameter to call `CodeSnippets._find_ref` but got `str`.",
    "message": " Expected `typing.Tuple[typing.Any, ...]` for 2nd positional only parameter to call `CodeSnippets._find_ref` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 82,
    "warning_line": "        ref, file_path = self._find_ref(path, refs)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import textwrap\nfrom urllib.parse import quote_plus\n",
        "source_code_len": 52,
        "target_code": "import textwrap\nfrom typing import Any\nfrom urllib.parse import quote_plus\n",
        "target_code_len": 75,
        "diff_format": "@@ -3,2 +3,3 @@\n import textwrap\n+from typing import Any\n from urllib.parse import quote_plus\n",
        "source_code_with_indent": "import textwrap\nfrom urllib.parse import quote_plus\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import textwrap\nfrom typing import Any\nfrom urllib.parse import quote_plus\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    async def _fetch_response(self, url: str, response_format: str, **kwargs) -> str:\n        \"\"\"Makes http requests using aiohttp.\"\"\"\n",
        "source_code_len": 136,
        "target_code": "\n    async def _fetch_response(self, url: str, response_format: str, **kwargs) -> Any:\n        \"\"\"Makes http requests using aiohttp.\"\"\"\n",
        "target_code_len": 136,
        "diff_format": "@@ -45,3 +46,3 @@\n \n-    async def _fetch_response(self, url: str, response_format: str, **kwargs) -> str:\n+    async def _fetch_response(self, url: str, response_format: str, **kwargs) -> Any:\n         \"\"\"Makes http requests using aiohttp.\"\"\"\n",
        "source_code_with_indent": "\n    async def _fetch_response(self, url: str, response_format: str, **kwargs) -> str:\n        <IND>\"\"\"Makes http requests using aiohttp.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    async def _fetch_response(self, url: str, response_format: str, **kwargs) -> Any:\n        <IND>\"\"\"Makes http requests using aiohttp.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "python-discord/bot",
    "commit": "41b5c2409fff548545e463759f22500e9244b375",
    "filename": "bot/exts/info/code_snippets.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-discord-bot/bot/exts/info/code_snippets.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bot/exts/info/code_snippets.py:107:35 Incompatible parameter type [6]: Expected `typing.Union[int, slice]` for 1st positional only parameter to call `str.__getitem__` but got `str`.",
    "message": " Expected `typing.Union[int, slice]` for 1st positional only parameter to call `str.__getitem__` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 107,
    "warning_line": "        for gist_file in gist_json['files']:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import textwrap\nfrom urllib.parse import quote_plus\n",
        "source_code_len": 52,
        "target_code": "import textwrap\nfrom typing import Any\nfrom urllib.parse import quote_plus\n",
        "target_code_len": 75,
        "diff_format": "@@ -3,2 +3,3 @@\n import textwrap\n+from typing import Any\n from urllib.parse import quote_plus\n",
        "source_code_with_indent": "import textwrap\nfrom urllib.parse import quote_plus\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import textwrap\nfrom typing import Any\nfrom urllib.parse import quote_plus\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    async def _fetch_response(self, url: str, response_format: str, **kwargs) -> str:\n        \"\"\"Makes http requests using aiohttp.\"\"\"\n",
        "source_code_len": 136,
        "target_code": "\n    async def _fetch_response(self, url: str, response_format: str, **kwargs) -> Any:\n        \"\"\"Makes http requests using aiohttp.\"\"\"\n",
        "target_code_len": 136,
        "diff_format": "@@ -45,3 +46,3 @@\n \n-    async def _fetch_response(self, url: str, response_format: str, **kwargs) -> str:\n+    async def _fetch_response(self, url: str, response_format: str, **kwargs) -> Any:\n         \"\"\"Makes http requests using aiohttp.\"\"\"\n",
        "source_code_with_indent": "\n    async def _fetch_response(self, url: str, response_format: str, **kwargs) -> str:\n        <IND>\"\"\"Makes http requests using aiohttp.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    async def _fetch_response(self, url: str, response_format: str, **kwargs) -> Any:\n        <IND>\"\"\"Makes http requests using aiohttp.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "python-discord/bot",
    "commit": "41b5c2409fff548545e463759f22500e9244b375",
    "filename": "bot/exts/info/code_snippets.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-discord-bot/bot/exts/info/code_snippets.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bot/exts/info/code_snippets.py:110:30 Incompatible parameter type [6]: Expected `typing.Union[int, slice]` for 1st positional only parameter to call `str.__getitem__` but got `str`.",
    "message": " Expected `typing.Union[int, slice]` for 1st positional only parameter to call `str.__getitem__` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 110,
    "warning_line": "                    gist_json['files'][gist_file]['raw_url'],",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import textwrap\nfrom urllib.parse import quote_plus\n",
        "source_code_len": 52,
        "target_code": "import textwrap\nfrom typing import Any\nfrom urllib.parse import quote_plus\n",
        "target_code_len": 75,
        "diff_format": "@@ -3,2 +3,3 @@\n import textwrap\n+from typing import Any\n from urllib.parse import quote_plus\n",
        "source_code_with_indent": "import textwrap\nfrom urllib.parse import quote_plus\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import textwrap\nfrom typing import Any\nfrom urllib.parse import quote_plus\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    async def _fetch_response(self, url: str, response_format: str, **kwargs) -> str:\n        \"\"\"Makes http requests using aiohttp.\"\"\"\n",
        "source_code_len": 136,
        "target_code": "\n    async def _fetch_response(self, url: str, response_format: str, **kwargs) -> Any:\n        \"\"\"Makes http requests using aiohttp.\"\"\"\n",
        "target_code_len": 136,
        "diff_format": "@@ -45,3 +46,3 @@\n \n-    async def _fetch_response(self, url: str, response_format: str, **kwargs) -> str:\n+    async def _fetch_response(self, url: str, response_format: str, **kwargs) -> Any:\n         \"\"\"Makes http requests using aiohttp.\"\"\"\n",
        "source_code_with_indent": "\n    async def _fetch_response(self, url: str, response_format: str, **kwargs) -> str:\n        <IND>\"\"\"Makes http requests using aiohttp.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    async def _fetch_response(self, url: str, response_format: str, **kwargs) -> Any:\n        <IND>\"\"\"Makes http requests using aiohttp.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "python-discord/bot",
    "commit": "41b5c2409fff548545e463759f22500e9244b375",
    "filename": "bot/exts/info/code_snippets.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-discord-bot/bot/exts/info/code_snippets.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bot/exts/info/code_snippets.py:110:39 Incompatible parameter type [6]: Expected `typing.Union[int, slice]` for 1st positional only parameter to call `str.__getitem__` but got `str`.",
    "message": " Expected `typing.Union[int, slice]` for 1st positional only parameter to call `str.__getitem__` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 110,
    "warning_line": "                    gist_json['files'][gist_file]['raw_url'],",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import textwrap\nfrom urllib.parse import quote_plus\n",
        "source_code_len": 52,
        "target_code": "import textwrap\nfrom typing import Any\nfrom urllib.parse import quote_plus\n",
        "target_code_len": 75,
        "diff_format": "@@ -3,2 +3,3 @@\n import textwrap\n+from typing import Any\n from urllib.parse import quote_plus\n",
        "source_code_with_indent": "import textwrap\nfrom urllib.parse import quote_plus\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import textwrap\nfrom typing import Any\nfrom urllib.parse import quote_plus\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    async def _fetch_response(self, url: str, response_format: str, **kwargs) -> str:\n        \"\"\"Makes http requests using aiohttp.\"\"\"\n",
        "source_code_len": 136,
        "target_code": "\n    async def _fetch_response(self, url: str, response_format: str, **kwargs) -> Any:\n        \"\"\"Makes http requests using aiohttp.\"\"\"\n",
        "target_code_len": 136,
        "diff_format": "@@ -45,3 +46,3 @@\n \n-    async def _fetch_response(self, url: str, response_format: str, **kwargs) -> str:\n+    async def _fetch_response(self, url: str, response_format: str, **kwargs) -> Any:\n         \"\"\"Makes http requests using aiohttp.\"\"\"\n",
        "source_code_with_indent": "\n    async def _fetch_response(self, url: str, response_format: str, **kwargs) -> str:\n        <IND>\"\"\"Makes http requests using aiohttp.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    async def _fetch_response(self, url: str, response_format: str, **kwargs) -> Any:\n        <IND>\"\"\"Makes http requests using aiohttp.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "python-discord/bot",
    "commit": "41b5c2409fff548545e463759f22500e9244b375",
    "filename": "bot/exts/info/code_snippets.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-discord-bot/bot/exts/info/code_snippets.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bot/exts/info/code_snippets.py:110:50 Incompatible parameter type [6]: Expected `typing.Union[int, slice]` for 1st positional only parameter to call `str.__getitem__` but got `str`.",
    "message": " Expected `typing.Union[int, slice]` for 1st positional only parameter to call `str.__getitem__` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 110,
    "warning_line": "                    gist_json['files'][gist_file]['raw_url'],",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import textwrap\nfrom urllib.parse import quote_plus\n",
        "source_code_len": 52,
        "target_code": "import textwrap\nfrom typing import Any\nfrom urllib.parse import quote_plus\n",
        "target_code_len": 75,
        "diff_format": "@@ -3,2 +3,3 @@\n import textwrap\n+from typing import Any\n from urllib.parse import quote_plus\n",
        "source_code_with_indent": "import textwrap\nfrom urllib.parse import quote_plus\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import textwrap\nfrom typing import Any\nfrom urllib.parse import quote_plus\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    async def _fetch_response(self, url: str, response_format: str, **kwargs) -> str:\n        \"\"\"Makes http requests using aiohttp.\"\"\"\n",
        "source_code_len": 136,
        "target_code": "\n    async def _fetch_response(self, url: str, response_format: str, **kwargs) -> Any:\n        \"\"\"Makes http requests using aiohttp.\"\"\"\n",
        "target_code_len": 136,
        "diff_format": "@@ -45,3 +46,3 @@\n \n-    async def _fetch_response(self, url: str, response_format: str, **kwargs) -> str:\n+    async def _fetch_response(self, url: str, response_format: str, **kwargs) -> Any:\n         \"\"\"Makes http requests using aiohttp.\"\"\"\n",
        "source_code_with_indent": "\n    async def _fetch_response(self, url: str, response_format: str, **kwargs) -> str:\n        <IND>\"\"\"Makes http requests using aiohttp.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    async def _fetch_response(self, url: str, response_format: str, **kwargs) -> Any:\n        <IND>\"\"\"Makes http requests using aiohttp.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "python-discord/bot",
    "commit": "41b5c2409fff548545e463759f22500e9244b375",
    "filename": "bot/exts/info/code_snippets.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-discord-bot/bot/exts/info/code_snippets.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bot/exts/info/code_snippets.py:133:46 Incompatible parameter type [6]: Expected `typing.Tuple[typing.Any, ...]` for 2nd positional only parameter to call `CodeSnippets._find_ref` but got `str`.",
    "message": " Expected `typing.Tuple[typing.Any, ...]` for 2nd positional only parameter to call `CodeSnippets._find_ref` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 133,
    "warning_line": "        ref, file_path = self._find_ref(path, refs)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import textwrap\nfrom urllib.parse import quote_plus\n",
        "source_code_len": 52,
        "target_code": "import textwrap\nfrom typing import Any\nfrom urllib.parse import quote_plus\n",
        "target_code_len": 75,
        "diff_format": "@@ -3,2 +3,3 @@\n import textwrap\n+from typing import Any\n from urllib.parse import quote_plus\n",
        "source_code_with_indent": "import textwrap\nfrom urllib.parse import quote_plus\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import textwrap\nfrom typing import Any\nfrom urllib.parse import quote_plus\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    async def _fetch_response(self, url: str, response_format: str, **kwargs) -> str:\n        \"\"\"Makes http requests using aiohttp.\"\"\"\n",
        "source_code_len": 136,
        "target_code": "\n    async def _fetch_response(self, url: str, response_format: str, **kwargs) -> Any:\n        \"\"\"Makes http requests using aiohttp.\"\"\"\n",
        "target_code_len": 136,
        "diff_format": "@@ -45,3 +46,3 @@\n \n-    async def _fetch_response(self, url: str, response_format: str, **kwargs) -> str:\n+    async def _fetch_response(self, url: str, response_format: str, **kwargs) -> Any:\n         \"\"\"Makes http requests using aiohttp.\"\"\"\n",
        "source_code_with_indent": "\n    async def _fetch_response(self, url: str, response_format: str, **kwargs) -> str:\n        <IND>\"\"\"Makes http requests using aiohttp.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    async def _fetch_response(self, url: str, response_format: str, **kwargs) -> Any:\n        <IND>\"\"\"Makes http requests using aiohttp.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "python-discord/bot",
    "commit": "41b5c2409fff548545e463759f22500e9244b375",
    "filename": "bot/exts/info/code_snippets.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-discord-bot/bot/exts/info/code_snippets.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bot/exts/info/code_snippets.py:156:68 Incompatible parameter type [6]: Expected `str` for 3rd positional only parameter to call `CodeSnippets._snippet_to_codeblock` but got `int`.",
    "message": " Expected `str` for 3rd positional only parameter to call `CodeSnippets._snippet_to_codeblock` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 156,
    "warning_line": "        return self._snippet_to_codeblock(file_contents, file_path, start_line, end_line)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        file_path: str,\n        start_line: int,\n        end_line: int\n    ) -> str:\n",
        "source_code_len": 85,
        "target_code": "        file_path: str,\n        start_line: str,\n        end_line: str\n    ) -> str:\n",
        "target_code_len": 85,
        "diff_format": "@@ -147,4 +148,4 @@\n         file_path: str,\n-        start_line: int,\n-        end_line: int\n+        start_line: str,\n+        end_line: str\n     ) -> str:\n",
        "source_code_with_indent": "        file_path: str,\n        start_line: int,\n        end_line: int\n    ) -> str:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        file_path: str,\n        start_line: str,\n        end_line: str\n    ) -> str:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "python-discord/bot",
    "commit": "41b5c2409fff548545e463759f22500e9244b375",
    "filename": "bot/exts/info/code_snippets.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-discord-bot/bot/exts/info/code_snippets.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bot/exts/info/code_snippets.py:156:80 Incompatible parameter type [6]: Expected `str` for 4th positional only parameter to call `CodeSnippets._snippet_to_codeblock` but got `int`.",
    "message": " Expected `str` for 4th positional only parameter to call `CodeSnippets._snippet_to_codeblock` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 156,
    "warning_line": "        return self._snippet_to_codeblock(file_contents, file_path, start_line, end_line)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        file_path: str,\n        start_line: int,\n        end_line: int\n    ) -> str:\n",
        "source_code_len": 85,
        "target_code": "        file_path: str,\n        start_line: str,\n        end_line: str\n    ) -> str:\n",
        "target_code_len": 85,
        "diff_format": "@@ -147,4 +148,4 @@\n         file_path: str,\n-        start_line: int,\n-        end_line: int\n+        start_line: str,\n+        end_line: str\n     ) -> str:\n",
        "source_code_with_indent": "        file_path: str,\n        start_line: int,\n        end_line: int\n    ) -> str:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        file_path: str,\n        start_line: str,\n        end_line: str\n    ) -> str:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]