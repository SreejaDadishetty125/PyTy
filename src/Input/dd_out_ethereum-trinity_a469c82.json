[
  {
    "project": "ethereum/trinity",
    "commit": "a469c8211e94a131503fb40df714b093ccad6391",
    "filename": "eth2/beacon/attestation_helpers.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-trinity/eth2/beacon/attestation_helpers.py",
    "file_hunks_size": 7,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "eth2/beacon/attestation_helpers.py:74:8 Unbound name [10]: Name `AttestationDataAndCustodyBit` is used but not defined in the current scope.",
    "message": " Name `AttestationDataAndCustodyBit` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 74,
    "warning_line": "        AttestationDataAndCustodyBit("
  },
  {
    "project": "ethereum/trinity",
    "commit": "a469c8211e94a131503fb40df714b093ccad6391",
    "filename": "eth2/beacon/attestation_helpers.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-trinity/eth2/beacon/attestation_helpers.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "eth2/beacon/attestation_helpers.py:84:13 Unbound name [10]: Name `get_domain` is used but not defined in the current scope.",
    "message": " Name `get_domain` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 84,
    "warning_line": "    domain = get_domain(",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom eth2.beacon.committee_helpers import (\n",
        "source_code_len": 45,
        "target_code": "\nfrom eth2.beacon.helpers import (\n    get_active_validator_indices,\n    get_domain,\n    get_epoch_start_slot,\n)\nfrom eth2.beacon.committee_helpers import (\n",
        "target_code_len": 157,
        "diff_format": "@@ -5,2 +5,7 @@\n \n+from eth2.beacon.helpers import (\n+    get_active_validator_indices,\n+    get_domain,\n+    get_epoch_start_slot,\n+)\n from eth2.beacon.committee_helpers import (\n",
        "source_code_with_indent": "\nfrom eth2.beacon.committee_helpers import (\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom eth2.beacon.helpers import (\n    get_active_validator_indices,\n    get_domain,\n    get_epoch_start_slot,\n)\nfrom eth2.beacon.committee_helpers import (\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ethereum/trinity",
    "commit": "a469c8211e94a131503fb40df714b093ccad6391",
    "filename": "eth2/beacon/attestation_helpers.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-trinity/eth2/beacon/attestation_helpers.py",
    "file_hunks_size": 7,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "eth2/beacon/attestation_helpers.py:86:8 Unbound name [10]: Name `SignatureDomain` is used but not defined in the current scope.",
    "message": " Name `SignatureDomain` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 86,
    "warning_line": "        SignatureDomain.DOMAIN_ATTESTATION,"
  },
  {
    "project": "ethereum/trinity",
    "commit": "a469c8211e94a131503fb40df714b093ccad6391",
    "filename": "eth2/beacon/committee_helpers.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-trinity/eth2/beacon/committee_helpers.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "eth2/beacon/committee_helpers.py:180:17 Incompatible parameter type [6]: Expected `typing.Sized` for 1st positional only parameter to call `len` but got `int`.",
    "message": " Expected `typing.Sized` for 1st positional only parameter to call `len` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 180,
    "warning_line": "    start = (len(index) * index) // count",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                       index: int,\n                       count: int) -> Iterable[ValidatorIndex]:\n    start = (len(index) * index) // count\n    end = (len(index) * (index + 1)) // count\n    for i in range(start, end):\n        shuffled_index = _get_shuffled_index(i, len(indices), seed)\n        yield indices[shuffled_index]\n",
        "source_code_len": 325,
        "target_code": "                       index: int,\n                       count: int,\n                       shuffle_round_count: int) -> Iterable[ValidatorIndex]:\n    start = (len(indices) * index) // count\n    end = (len(indices) * (index + 1)) // count\n    for i in range(start, end):\n        shuffled_index = _get_shuffled_index(i, len(indices), seed, shuffle_round_count)\n        yield indices[shuffled_index]\n",
        "target_code_len": 399,
        "diff_format": "@@ -178,7 +178,8 @@\n                        index: int,\n-                       count: int) -> Iterable[ValidatorIndex]:\n-    start = (len(index) * index) // count\n-    end = (len(index) * (index + 1)) // count\n+                       count: int,\n+                       shuffle_round_count: int) -> Iterable[ValidatorIndex]:\n+    start = (len(indices) * index) // count\n+    end = (len(indices) * (index + 1)) // count\n     for i in range(start, end):\n-        shuffled_index = _get_shuffled_index(i, len(indices), seed)\n+        shuffled_index = _get_shuffled_index(i, len(indices), seed, shuffle_round_count)\n         yield indices[shuffled_index]\n",
        "source_code_with_indent": "                       index: int,\n                       count: int) -> Iterable[ValidatorIndex]:\n    <IND>start = (len(index) * index) // count\n    end = (len(index) * (index + 1)) // count\n    for i in range(start, end):\n        <IND>shuffled_index = _get_shuffled_index(i, len(indices), seed)\n        yield indices[shuffled_index]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                       index: int,\n                       count: int,\n                       shuffle_round_count: int) -> Iterable[ValidatorIndex]:\n    <IND>start = (len(indices) * index) // count\n    end = (len(indices) * (index + 1)) // count\n    for i in range(start, end):\n        <IND>shuffled_index = _get_shuffled_index(i, len(indices), seed, shuffle_round_count)\n        yield indices[shuffled_index]\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    target_shard = (\n        shard + config.SHARD_COUNT - get_epoch_start_shard(state, epoch)\n    ) % config.SHARD_COUNT\n\n",
        "source_code_len": 122,
        "target_code": "    target_shard = (\n        shard + config.SHARD_COUNT - get_epoch_start_shard(state, epoch, config)\n    ) % config.SHARD_COUNT\n\n    active_validator_indices = get_active_validator_indices(\n        state,\n        epoch,\n    )\n\n",
        "target_code_len": 228,
        "diff_format": "@@ -192,4 +193,9 @@\n     target_shard = (\n-        shard + config.SHARD_COUNT - get_epoch_start_shard(state, epoch)\n+        shard + config.SHARD_COUNT - get_epoch_start_shard(state, epoch, config)\n     ) % config.SHARD_COUNT\n+\n+    active_validator_indices = get_active_validator_indices(\n+        state,\n+        epoch,\n+    )\n \n",
        "source_code_with_indent": "    <IND>target_shard = (\n        shard + config.SHARD_COUNT - get_epoch_start_shard(state, epoch)\n    ) % config.SHARD_COUNT\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <IND>target_shard = (\n        shard + config.SHARD_COUNT - get_epoch_start_shard(state, epoch, config)\n    ) % config.SHARD_COUNT\n\n    active_validator_indices = get_active_validator_indices(\n        state,\n        epoch,\n    )\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        indices=get_active_validator_indices(state, epoch),\n        seed=generate_seed(state, epoch),\n        index=target_shard,\n        count=get_epoch_committee_count(state, epoch),\n    )\n",
        "source_code_len": 191,
        "target_code": "        indices=get_active_validator_indices(state, epoch),\n        seed=generate_seed(state, epoch, config),\n        index=target_shard,\n        count=get_epoch_committee_count(\n            len(active_validator_indices),\n            config.SHARD_COUNT,\n            config.SLOTS_PER_EPOCH,\n            config.TARGET_COMMITTEE_SIZE,\n        ),\n        shuffle_round_count=config.SHUFFLE_ROUND_COUNT,\n    )\n",
        "target_code_len": 405,
        "diff_format": "@@ -197,5 +203,11 @@\n         indices=get_active_validator_indices(state, epoch),\n-        seed=generate_seed(state, epoch),\n+        seed=generate_seed(state, epoch, config),\n         index=target_shard,\n-        count=get_epoch_committee_count(state, epoch),\n-    )\n+        count=get_epoch_committee_count(\n+            len(active_validator_indices),\n+            config.SHARD_COUNT,\n+            config.SLOTS_PER_EPOCH,\n+            config.TARGET_COMMITTEE_SIZE,\n+        ),\n+        shuffle_round_count=config.SHUFFLE_ROUND_COUNT,\n+    )\n",
        "source_code_with_indent": "        indices=get_active_validator_indices(state, epoch),\n        seed=generate_seed(state, epoch),\n        index=target_shard,\n        count=get_epoch_committee_count(state, epoch),\n    )\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        indices=get_active_validator_indices(state, epoch),\n        seed=generate_seed(state, epoch, config),\n        index=target_shard,\n        count=get_epoch_committee_count(\n            len(active_validator_indices),\n            config.SHARD_COUNT,\n            config.SLOTS_PER_EPOCH,\n            config.TARGET_COMMITTEE_SIZE,\n        ),\n        shuffle_round_count=config.SHUFFLE_ROUND_COUNT,\n    )\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ethereum/trinity",
    "commit": "a469c8211e94a131503fb40df714b093ccad6391",
    "filename": "eth2/beacon/committee_helpers.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-trinity/eth2/beacon/committee_helpers.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "eth2/beacon/committee_helpers.py:181:15 Incompatible parameter type [6]: Expected `typing.Sized` for 1st positional only parameter to call `len` but got `int`.",
    "message": " Expected `typing.Sized` for 1st positional only parameter to call `len` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 181,
    "warning_line": "    end = (len(index) * (index + 1)) // count",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                       index: int,\n                       count: int) -> Iterable[ValidatorIndex]:\n    start = (len(index) * index) // count\n    end = (len(index) * (index + 1)) // count\n    for i in range(start, end):\n        shuffled_index = _get_shuffled_index(i, len(indices), seed)\n        yield indices[shuffled_index]\n",
        "source_code_len": 325,
        "target_code": "                       index: int,\n                       count: int,\n                       shuffle_round_count: int) -> Iterable[ValidatorIndex]:\n    start = (len(indices) * index) // count\n    end = (len(indices) * (index + 1)) // count\n    for i in range(start, end):\n        shuffled_index = _get_shuffled_index(i, len(indices), seed, shuffle_round_count)\n        yield indices[shuffled_index]\n",
        "target_code_len": 399,
        "diff_format": "@@ -178,7 +178,8 @@\n                        index: int,\n-                       count: int) -> Iterable[ValidatorIndex]:\n-    start = (len(index) * index) // count\n-    end = (len(index) * (index + 1)) // count\n+                       count: int,\n+                       shuffle_round_count: int) -> Iterable[ValidatorIndex]:\n+    start = (len(indices) * index) // count\n+    end = (len(indices) * (index + 1)) // count\n     for i in range(start, end):\n-        shuffled_index = _get_shuffled_index(i, len(indices), seed)\n+        shuffled_index = _get_shuffled_index(i, len(indices), seed, shuffle_round_count)\n         yield indices[shuffled_index]\n",
        "source_code_with_indent": "                       index: int,\n                       count: int) -> Iterable[ValidatorIndex]:\n    <IND>start = (len(index) * index) // count\n    end = (len(index) * (index + 1)) // count\n    for i in range(start, end):\n        <IND>shuffled_index = _get_shuffled_index(i, len(indices), seed)\n        yield indices[shuffled_index]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                       index: int,\n                       count: int,\n                       shuffle_round_count: int) -> Iterable[ValidatorIndex]:\n    <IND>start = (len(indices) * index) // count\n    end = (len(indices) * (index + 1)) // count\n    for i in range(start, end):\n        <IND>shuffled_index = _get_shuffled_index(i, len(indices), seed, shuffle_round_count)\n        yield indices[shuffled_index]\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    target_shard = (\n        shard + config.SHARD_COUNT - get_epoch_start_shard(state, epoch)\n    ) % config.SHARD_COUNT\n\n",
        "source_code_len": 122,
        "target_code": "    target_shard = (\n        shard + config.SHARD_COUNT - get_epoch_start_shard(state, epoch, config)\n    ) % config.SHARD_COUNT\n\n    active_validator_indices = get_active_validator_indices(\n        state,\n        epoch,\n    )\n\n",
        "target_code_len": 228,
        "diff_format": "@@ -192,4 +193,9 @@\n     target_shard = (\n-        shard + config.SHARD_COUNT - get_epoch_start_shard(state, epoch)\n+        shard + config.SHARD_COUNT - get_epoch_start_shard(state, epoch, config)\n     ) % config.SHARD_COUNT\n+\n+    active_validator_indices = get_active_validator_indices(\n+        state,\n+        epoch,\n+    )\n \n",
        "source_code_with_indent": "    <IND>target_shard = (\n        shard + config.SHARD_COUNT - get_epoch_start_shard(state, epoch)\n    ) % config.SHARD_COUNT\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <IND>target_shard = (\n        shard + config.SHARD_COUNT - get_epoch_start_shard(state, epoch, config)\n    ) % config.SHARD_COUNT\n\n    active_validator_indices = get_active_validator_indices(\n        state,\n        epoch,\n    )\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        indices=get_active_validator_indices(state, epoch),\n        seed=generate_seed(state, epoch),\n        index=target_shard,\n        count=get_epoch_committee_count(state, epoch),\n    )\n",
        "source_code_len": 191,
        "target_code": "        indices=get_active_validator_indices(state, epoch),\n        seed=generate_seed(state, epoch, config),\n        index=target_shard,\n        count=get_epoch_committee_count(\n            len(active_validator_indices),\n            config.SHARD_COUNT,\n            config.SLOTS_PER_EPOCH,\n            config.TARGET_COMMITTEE_SIZE,\n        ),\n        shuffle_round_count=config.SHUFFLE_ROUND_COUNT,\n    )\n",
        "target_code_len": 405,
        "diff_format": "@@ -197,5 +203,11 @@\n         indices=get_active_validator_indices(state, epoch),\n-        seed=generate_seed(state, epoch),\n+        seed=generate_seed(state, epoch, config),\n         index=target_shard,\n-        count=get_epoch_committee_count(state, epoch),\n-    )\n+        count=get_epoch_committee_count(\n+            len(active_validator_indices),\n+            config.SHARD_COUNT,\n+            config.SLOTS_PER_EPOCH,\n+            config.TARGET_COMMITTEE_SIZE,\n+        ),\n+        shuffle_round_count=config.SHUFFLE_ROUND_COUNT,\n+    )\n",
        "source_code_with_indent": "        indices=get_active_validator_indices(state, epoch),\n        seed=generate_seed(state, epoch),\n        index=target_shard,\n        count=get_epoch_committee_count(state, epoch),\n    )\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        indices=get_active_validator_indices(state, epoch),\n        seed=generate_seed(state, epoch, config),\n        index=target_shard,\n        count=get_epoch_committee_count(\n            len(active_validator_indices),\n            config.SHARD_COUNT,\n            config.SLOTS_PER_EPOCH,\n            config.TARGET_COMMITTEE_SIZE,\n        ),\n        shuffle_round_count=config.SHUFFLE_ROUND_COUNT,\n    )\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ethereum/trinity",
    "commit": "a469c8211e94a131503fb40df714b093ccad6391",
    "filename": "eth2/beacon/epoch_processing_helpers.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-trinity/eth2/beacon/epoch_processing_helpers.py",
    "file_hunks_size": 12,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "eth2/beacon/epoch_processing_helpers.py:75:12 Incompatible parameter type [6]: Expected `Sequence[typing.Any]` for 4th positional only parameter to call `update_tuple_item_with_fn` but got `Gwei`.",
    "message": " Expected `Sequence[typing.Any]` for 4th positional only parameter to call `update_tuple_item_with_fn` but got `Gwei`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 75,
    "warning_line": "            delta,"
  },
  {
    "project": "ethereum/trinity",
    "commit": "a469c8211e94a131503fb40df714b093ccad6391",
    "filename": "eth2/beacon/epoch_processing_helpers.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-trinity/eth2/beacon/epoch_processing_helpers.py",
    "file_hunks_size": 12,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "eth2/beacon/epoch_processing_helpers.py:85:12 Incompatible parameter type [6]: Expected `typing.Callable[[Variable[eth2._utils.tuple.VType], typing.Any], Variable[eth2._utils.tuple.VType]]` for 3rd positional only parameter to call `update_tuple_item_with_fn` but got `typing.Callable[[Named(balance, typing.Any)], typing.Any]`.",
    "message": " Expected `typing.Callable[[Variable[eth2._utils.tuple.VType], typing.Any], Variable[eth2._utils.tuple.VType]]` for 3rd positional only parameter to call `update_tuple_item_with_fn` but got `typing.Callable[[Named(balance, typing.Any)], typing.Any]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 85,
    "warning_line": "            lambda balance: 0 if delta > balance else balance - delta",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            index,\n            lambda balance: 0 if delta > balance else balance - delta\n        ),\n",
        "source_code_len": 100,
        "target_code": "            index,\n            lambda balance, *_: 0 if delta > balance else balance - delta\n        ),\n",
        "target_code_len": 104,
        "diff_format": "@@ -84,3 +84,3 @@\n             index,\n-            lambda balance: 0 if delta > balance else balance - delta\n+            lambda balance, *_: 0 if delta > balance else balance - delta\n         ),\n",
        "source_code_with_indent": "            index,\n            lambda balance: 0 if delta > balance else balance - delta\n        ),\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            index,\n            lambda balance, *_: 0 if delta > balance else balance - delta\n        ),\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ethereum/trinity",
    "commit": "a469c8211e94a131503fb40df714b093ccad6391",
    "filename": "eth2/beacon/epoch_processing_helpers.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-trinity/eth2/beacon/epoch_processing_helpers.py",
    "file_hunks_size": 12,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "eth2/beacon/epoch_processing_helpers.py:235:8 Incompatible parameter type [6]: Expected `Eth2Config` for 3rd positional only parameter to call `get_matching_source_attestations` but got `CommitteeConfig`.",
    "message": " Expected `Eth2Config` for 3rd positional only parameter to call `get_matching_source_attestations` but got `CommitteeConfig`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 235,
    "warning_line": "        committee_config,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        shard: Shard,\n        committee_config: CommitteeConfig) -> Tuple[Hash32, Tuple[ValidatorIndex, ...]]:\n    matching_attestations = get_matching_source_attestations(\n",
        "source_code_len": 173,
        "target_code": "        shard: Shard,\n        config: Eth2Config) -> Tuple[Hash32, Tuple[ValidatorIndex, ...]]:\n    matching_attestations = get_matching_source_attestations(\n",
        "target_code_len": 158,
        "diff_format": "@@ -230,3 +231,3 @@\n         shard: Shard,\n-        committee_config: CommitteeConfig) -> Tuple[Hash32, Tuple[ValidatorIndex, ...]]:\n+        config: Eth2Config) -> Tuple[Hash32, Tuple[ValidatorIndex, ...]]:\n     matching_attestations = get_matching_source_attestations(\n",
        "source_code_with_indent": "        shard: Shard,\n        committee_config: CommitteeConfig) -> Tuple[Hash32, Tuple[ValidatorIndex, ...]]:\n    <IND>matching_attestations = get_matching_source_attestations(\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        shard: Shard,\n        config: Eth2Config) -> Tuple[Hash32, Tuple[ValidatorIndex, ...]]:\n    <IND>matching_attestations = get_matching_source_attestations(\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        epoch,\n        committee_config,\n    )\n",
        "source_code_len": 47,
        "target_code": "        epoch,\n        config,\n    )\n",
        "target_code_len": 37,
        "diff_format": "@@ -234,3 +235,3 @@\n         epoch,\n-        committee_config,\n+        config,\n     )\n",
        "source_code_with_indent": "        epoch,\n        committee_config,\n    )\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        epoch,\n        config,\n    )\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            candidate_attestations,\n            committee_config,\n        ),\n",
        "source_code_len": 77,
        "target_code": "            candidate_attestations,\n            config,\n        ),\n",
        "target_code_len": 67,
        "diff_format": "@@ -251,3 +252,3 @@\n             candidate_attestations,\n-            committee_config,\n+            config,\n         ),\n",
        "source_code_with_indent": "            candidate_attestations,\n            committee_config,\n        ),\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            candidate_attestations,\n            config,\n        ),\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "            winning_attestations,\n            committee_config,\n        )\n",
        "source_code_len": 74,
        "target_code": "            winning_attestations,\n        )\n",
        "target_code_len": 44,
        "diff_format": "@@ -265,3 +266,2 @@\n             winning_attestations,\n-            committee_config,\n         )\n",
        "source_code_with_indent": "            winning_attestations,\n            committee_config,\n        )\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            winning_attestations,\n        )\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ethereum/trinity",
    "commit": "a469c8211e94a131503fb40df714b093ccad6391",
    "filename": "eth2/beacon/state_machines/forks/serenity/epoch_processing.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-trinity/eth2/beacon/state_machines/forks/serenity/epoch_processing.py",
    "file_hunks_size": 25,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "eth2/beacon/state_machines/forks/serenity/epoch_processing.py:95:12 Unsupported operand [58]: `>>` is not supported for operand types `eth2.beacon.typing.Bitfield` and `int`.",
    "message": " `>>` is not supported for operand types `eth2.beacon.typing.Bitfield` and `int`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 95,
    "warning_line": "    return (bitfield >> offset) % modulus == pattern",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _bitfield_matches(bitfield: Bitfield,\n                      offset: int,\n",
        "source_code_len": 78,
        "target_code": "\n# NOTE: the type of bitfield here is an ``int``, to facilitate bitwise operations;\n# we do not use the ``Bitfield`` type seen elsewhere.\ndef _bitfield_matches(bitfield: int,\n                      offset: int,\n",
        "target_code_len": 210,
        "diff_format": "@@ -90,3 +91,5 @@\n \n-def _bitfield_matches(bitfield: Bitfield,\n+# NOTE: the type of bitfield here is an ``int``, to facilitate bitwise operations;\n+# we do not use the ``Bitfield`` type seen elsewhere.\n+def _bitfield_matches(bitfield: int,\n                       offset: int,\n",
        "source_code_with_indent": "\n<DED>def _bitfield_matches(bitfield: Bitfield,\n                      offset: int,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n# NOTE: the type of bitfield here is an ``int``, to facilitate bitwise operations;\n# we do not use the ``Bitfield`` type seen elsewhere.\n<DED>def _bitfield_matches(bitfield: int,\n                      offset: int,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ethereum/trinity",
    "commit": "a469c8211e94a131503fb40df714b093ccad6391",
    "filename": "eth2/beacon/state_machines/forks/serenity/epoch_processing.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-trinity/eth2/beacon/state_machines/forks/serenity/epoch_processing.py",
    "file_hunks_size": 25,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "eth2/beacon/state_machines/forks/serenity/epoch_processing.py:150:12 Incompatible parameter type [6]: Expected `eth2.beacon.typing.Bitfield` for 1st positional only parameter to call `_bitfield_matches` but got `int`.",
    "message": " Expected `eth2.beacon.typing.Bitfield` for 1st positional only parameter to call `_bitfield_matches` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 150,
    "warning_line": "            justification_bitfield,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _bitfield_matches(bitfield: Bitfield,\n                      offset: int,\n",
        "source_code_len": 78,
        "target_code": "\n# NOTE: the type of bitfield here is an ``int``, to facilitate bitwise operations;\n# we do not use the ``Bitfield`` type seen elsewhere.\ndef _bitfield_matches(bitfield: int,\n                      offset: int,\n",
        "target_code_len": 210,
        "diff_format": "@@ -90,3 +91,5 @@\n \n-def _bitfield_matches(bitfield: Bitfield,\n+# NOTE: the type of bitfield here is an ``int``, to facilitate bitwise operations;\n+# we do not use the ``Bitfield`` type seen elsewhere.\n+def _bitfield_matches(bitfield: int,\n                       offset: int,\n",
        "source_code_with_indent": "\n<DED>def _bitfield_matches(bitfield: Bitfield,\n                      offset: int,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n# NOTE: the type of bitfield here is an ``int``, to facilitate bitwise operations;\n# we do not use the ``Bitfield`` type seen elsewhere.\n<DED>def _bitfield_matches(bitfield: int,\n                      offset: int,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ethereum/trinity",
    "commit": "a469c8211e94a131503fb40df714b093ccad6391",
    "filename": "eth2/beacon/state_machines/forks/serenity/epoch_processing.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-trinity/eth2/beacon/state_machines/forks/serenity/epoch_processing.py",
    "file_hunks_size": 25,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "eth2/beacon/state_machines/forks/serenity/epoch_processing.py:158:12 Incompatible parameter type [6]: Expected `eth2.beacon.typing.Bitfield` for 1st positional only parameter to call `_bitfield_matches` but got `int`.",
    "message": " Expected `eth2.beacon.typing.Bitfield` for 1st positional only parameter to call `_bitfield_matches` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 158,
    "warning_line": "            justification_bitfield,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _bitfield_matches(bitfield: Bitfield,\n                      offset: int,\n",
        "source_code_len": 78,
        "target_code": "\n# NOTE: the type of bitfield here is an ``int``, to facilitate bitwise operations;\n# we do not use the ``Bitfield`` type seen elsewhere.\ndef _bitfield_matches(bitfield: int,\n                      offset: int,\n",
        "target_code_len": 210,
        "diff_format": "@@ -90,3 +91,5 @@\n \n-def _bitfield_matches(bitfield: Bitfield,\n+# NOTE: the type of bitfield here is an ``int``, to facilitate bitwise operations;\n+# we do not use the ``Bitfield`` type seen elsewhere.\n+def _bitfield_matches(bitfield: int,\n                       offset: int,\n",
        "source_code_with_indent": "\n<DED>def _bitfield_matches(bitfield: Bitfield,\n                      offset: int,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n# NOTE: the type of bitfield here is an ``int``, to facilitate bitwise operations;\n# we do not use the ``Bitfield`` type seen elsewhere.\n<DED>def _bitfield_matches(bitfield: int,\n                      offset: int,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ethereum/trinity",
    "commit": "a469c8211e94a131503fb40df714b093ccad6391",
    "filename": "eth2/beacon/state_machines/forks/serenity/epoch_processing.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-trinity/eth2/beacon/state_machines/forks/serenity/epoch_processing.py",
    "file_hunks_size": 25,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "eth2/beacon/state_machines/forks/serenity/epoch_processing.py:166:12 Incompatible parameter type [6]: Expected `eth2.beacon.typing.Bitfield` for 1st positional only parameter to call `_bitfield_matches` but got `int`.",
    "message": " Expected `eth2.beacon.typing.Bitfield` for 1st positional only parameter to call `_bitfield_matches` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 166,
    "warning_line": "            justification_bitfield,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _bitfield_matches(bitfield: Bitfield,\n                      offset: int,\n",
        "source_code_len": 78,
        "target_code": "\n# NOTE: the type of bitfield here is an ``int``, to facilitate bitwise operations;\n# we do not use the ``Bitfield`` type seen elsewhere.\ndef _bitfield_matches(bitfield: int,\n                      offset: int,\n",
        "target_code_len": 210,
        "diff_format": "@@ -90,3 +91,5 @@\n \n-def _bitfield_matches(bitfield: Bitfield,\n+# NOTE: the type of bitfield here is an ``int``, to facilitate bitwise operations;\n+# we do not use the ``Bitfield`` type seen elsewhere.\n+def _bitfield_matches(bitfield: int,\n                       offset: int,\n",
        "source_code_with_indent": "\n<DED>def _bitfield_matches(bitfield: Bitfield,\n                      offset: int,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n# NOTE: the type of bitfield here is an ``int``, to facilitate bitwise operations;\n# we do not use the ``Bitfield`` type seen elsewhere.\n<DED>def _bitfield_matches(bitfield: int,\n                      offset: int,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ethereum/trinity",
    "commit": "a469c8211e94a131503fb40df714b093ccad6391",
    "filename": "eth2/beacon/state_machines/forks/serenity/epoch_processing.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-trinity/eth2/beacon/state_machines/forks/serenity/epoch_processing.py",
    "file_hunks_size": 25,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "eth2/beacon/state_machines/forks/serenity/epoch_processing.py:174:12 Incompatible parameter type [6]: Expected `eth2.beacon.typing.Bitfield` for 1st positional only parameter to call `_bitfield_matches` but got `int`.",
    "message": " Expected `eth2.beacon.typing.Bitfield` for 1st positional only parameter to call `_bitfield_matches` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 174,
    "warning_line": "            justification_bitfield,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _bitfield_matches(bitfield: Bitfield,\n                      offset: int,\n",
        "source_code_len": 78,
        "target_code": "\n# NOTE: the type of bitfield here is an ``int``, to facilitate bitwise operations;\n# we do not use the ``Bitfield`` type seen elsewhere.\ndef _bitfield_matches(bitfield: int,\n                      offset: int,\n",
        "target_code_len": 210,
        "diff_format": "@@ -90,3 +91,5 @@\n \n-def _bitfield_matches(bitfield: Bitfield,\n+# NOTE: the type of bitfield here is an ``int``, to facilitate bitwise operations;\n+# we do not use the ``Bitfield`` type seen elsewhere.\n+def _bitfield_matches(bitfield: int,\n                       offset: int,\n",
        "source_code_with_indent": "\n<DED>def _bitfield_matches(bitfield: Bitfield,\n                      offset: int,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n# NOTE: the type of bitfield here is an ``int``, to facilitate bitwise operations;\n# we do not use the ``Bitfield`` type seen elsewhere.\n<DED>def _bitfield_matches(bitfield: int,\n                      offset: int,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ethereum/trinity",
    "commit": "a469c8211e94a131503fb40df714b093ccad6391",
    "filename": "eth2/beacon/state_machines/forks/serenity/epoch_processing.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-trinity/eth2/beacon/state_machines/forks/serenity/epoch_processing.py",
    "file_hunks_size": 25,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "eth2/beacon/state_machines/forks/serenity/epoch_processing.py:300:43 Incompatible parameter type [6]: Expected `ValidatorIndex` for 2nd positional only parameter to call `get_base_reward` but got `int`.",
    "message": " Expected `ValidatorIndex` for 2nd positional only parameter to call `get_base_reward` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 300,
    "warning_line": "                    get_base_reward(state, index, config) * attesting_balance // total_balance,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    eligible_validator_indices = tuple(\n        index for index, v in enumerate(state.validators)\n        if v.is_active(previous_epoch) or (\n",
        "source_code_len": 142,
        "target_code": "    eligible_validator_indices = tuple(\n        ValidatorIndex(index) for index, v in enumerate(state.validators)\n        if v.is_active(previous_epoch) or (\n",
        "target_code_len": 158,
        "diff_format": "@@ -264,3 +267,3 @@\n     eligible_validator_indices = tuple(\n-        index for index, v in enumerate(state.validators)\n+        ValidatorIndex(index) for index, v in enumerate(state.validators)\n         if v.is_active(previous_epoch) or (\n",
        "source_code_with_indent": "    eligible_validator_indices = tuple(\n        index for index, v in enumerate(state.validators)\n        if v.is_active(previous_epoch) or (\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    eligible_validator_indices = tuple(\n        ValidatorIndex(index) for index, v in enumerate(state.validators)\n        if v.is_active(previous_epoch) or (\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ethereum/trinity",
    "commit": "a469c8211e94a131503fb40df714b093ccad6391",
    "filename": "eth2/beacon/state_machines/forks/serenity/epoch_processing.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-trinity/eth2/beacon/state_machines/forks/serenity/epoch_processing.py",
    "file_hunks_size": 25,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "eth2/beacon/state_machines/forks/serenity/epoch_processing.py:307:20 Incompatible parameter type [6]: Expected `Sequence[typing.Any]` for 4th positional only parameter to call `update_tuple_item_with_fn` but got `Gwei`.",
    "message": " Expected `Sequence[typing.Any]` for 4th positional only parameter to call `update_tuple_item_with_fn` but got `Gwei`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 307,
    "warning_line": "                    get_base_reward(state, index, config),"
  },
  {
    "project": "ethereum/trinity",
    "commit": "a469c8211e94a131503fb40df714b093ccad6391",
    "filename": "eth2/beacon/state_machines/forks/serenity/epoch_processing.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-trinity/eth2/beacon/state_machines/forks/serenity/epoch_processing.py",
    "file_hunks_size": 25,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "eth2/beacon/state_machines/forks/serenity/epoch_processing.py:307:43 Incompatible parameter type [6]: Expected `ValidatorIndex` for 2nd positional only parameter to call `get_base_reward` but got `int`.",
    "message": " Expected `ValidatorIndex` for 2nd positional only parameter to call `get_base_reward` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 307,
    "warning_line": "                    get_base_reward(state, index, config),",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    eligible_validator_indices = tuple(\n        index for index, v in enumerate(state.validators)\n        if v.is_active(previous_epoch) or (\n",
        "source_code_len": 142,
        "target_code": "    eligible_validator_indices = tuple(\n        ValidatorIndex(index) for index, v in enumerate(state.validators)\n        if v.is_active(previous_epoch) or (\n",
        "target_code_len": 158,
        "diff_format": "@@ -264,3 +267,3 @@\n     eligible_validator_indices = tuple(\n-        index for index, v in enumerate(state.validators)\n+        ValidatorIndex(index) for index, v in enumerate(state.validators)\n         if v.is_active(previous_epoch) or (\n",
        "source_code_with_indent": "    eligible_validator_indices = tuple(\n        index for index, v in enumerate(state.validators)\n        if v.is_active(previous_epoch) or (\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    eligible_validator_indices = tuple(\n        ValidatorIndex(index) for index, v in enumerate(state.validators)\n        if v.is_active(previous_epoch) or (\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ethereum/trinity",
    "commit": "a469c8211e94a131503fb40df714b093ccad6391",
    "filename": "eth2/beacon/state_machines/forks/serenity/epoch_processing.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-trinity/eth2/beacon/state_machines/forks/serenity/epoch_processing.py",
    "file_hunks_size": 25,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "eth2/beacon/state_machines/forks/serenity/epoch_processing.py:328:12 Incompatible parameter type [6]: Expected `Sequence[typing.Any]` for 4th positional only parameter to call `update_tuple_item_with_fn` but got `int`.",
    "message": " Expected `Sequence[typing.Any]` for 4th positional only parameter to call `update_tuple_item_with_fn` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 328,
    "warning_line": "            proposer_reward,"
  },
  {
    "project": "ethereum/trinity",
    "commit": "a469c8211e94a131503fb40df714b093ccad6391",
    "filename": "eth2/beacon/state_machines/forks/serenity/epoch_processing.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-trinity/eth2/beacon/state_machines/forks/serenity/epoch_processing.py",
    "file_hunks_size": 25,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "eth2/beacon/state_machines/forks/serenity/epoch_processing.py:353:64 Incompatible parameter type [6]: Expected `ValidatorIndex` for 2nd positional only parameter to call `get_base_reward` but got `int`.",
    "message": " Expected `ValidatorIndex` for 2nd positional only parameter to call `get_base_reward` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 353,
    "warning_line": "                BASE_REWARDS_PER_EPOCH * get_base_reward(state, index, config),",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    eligible_validator_indices = tuple(\n        index for index, v in enumerate(state.validators)\n        if v.is_active(previous_epoch) or (\n",
        "source_code_len": 142,
        "target_code": "    eligible_validator_indices = tuple(\n        ValidatorIndex(index) for index, v in enumerate(state.validators)\n        if v.is_active(previous_epoch) or (\n",
        "target_code_len": 158,
        "diff_format": "@@ -264,3 +267,3 @@\n     eligible_validator_indices = tuple(\n-        index for index, v in enumerate(state.validators)\n+        ValidatorIndex(index) for index, v in enumerate(state.validators)\n         if v.is_active(previous_epoch) or (\n",
        "source_code_with_indent": "    eligible_validator_indices = tuple(\n        index for index, v in enumerate(state.validators)\n        if v.is_active(previous_epoch) or (\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    eligible_validator_indices = tuple(\n        ValidatorIndex(index) for index, v in enumerate(state.validators)\n        if v.is_active(previous_epoch) or (\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ethereum/trinity",
    "commit": "a469c8211e94a131503fb40df714b093ccad6391",
    "filename": "eth2/beacon/state_machines/forks/serenity/epoch_processing.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-trinity/eth2/beacon/state_machines/forks/serenity/epoch_processing.py",
    "file_hunks_size": 25,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "eth2/beacon/state_machines/forks/serenity/epoch_processing.py:356:66 Incompatible parameter type [6]: Expected `ValidatorIndex` for 2nd positional only parameter to call `_get_effective_balance` but got `int`.",
    "message": " Expected `ValidatorIndex` for 2nd positional only parameter to call `_get_effective_balance` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 356,
    "warning_line": "                effective_balance = _get_effective_balance(state, index)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    eligible_validator_indices = tuple(\n        index for index, v in enumerate(state.validators)\n        if v.is_active(previous_epoch) or (\n",
        "source_code_len": 142,
        "target_code": "    eligible_validator_indices = tuple(\n        ValidatorIndex(index) for index, v in enumerate(state.validators)\n        if v.is_active(previous_epoch) or (\n",
        "target_code_len": 158,
        "diff_format": "@@ -264,3 +267,3 @@\n     eligible_validator_indices = tuple(\n-        index for index, v in enumerate(state.validators)\n+        ValidatorIndex(index) for index, v in enumerate(state.validators)\n         if v.is_active(previous_epoch) or (\n",
        "source_code_with_indent": "    eligible_validator_indices = tuple(\n        index for index, v in enumerate(state.validators)\n        if v.is_active(previous_epoch) or (\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    eligible_validator_indices = tuple(\n        ValidatorIndex(index) for index, v in enumerate(state.validators)\n        if v.is_active(previous_epoch) or (\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ethereum/trinity",
    "commit": "a469c8211e94a131503fb40df714b093ccad6391",
    "filename": "eth2/beacon/state_machines/forks/serenity/epoch_processing.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-trinity/eth2/beacon/state_machines/forks/serenity/epoch_processing.py",
    "file_hunks_size": 25,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "eth2/beacon/state_machines/forks/serenity/epoch_processing.py:363:4 Incompatible return type [7]: Expected `Tuple[Sequence[Gwei], Sequence[Gwei]]` but got `Tuple[typing.Tuple[int, ...], typing.Tuple[int, ...]]`.",
    "message": " Expected `Tuple[Sequence[Gwei], Sequence[Gwei]]` but got `Tuple[typing.Tuple[int, ...], typing.Tuple[int, ...]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 363,
    "warning_line": "    return rewards, penalties",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                    index,\n                    sum,\n                    effective_balance * finality_delay // config.INACTIVITY_PENALTY_QUOTIENT,\n                )\n    return rewards, penalties\n\n",
        "source_code_len": 195,
        "target_code": "                    index,\n                    lambda balance, delta: balance + delta,\n                    effective_balance * finality_delay // config.INACTIVITY_PENALTY_QUOTIENT,\n                )\n    return tuple(\n        Gwei(reward) for reward in rewards\n    ), tuple(\n        Gwei(penalty) for penalty in penalties\n    )\n\n",
        "target_code_len": 328,
        "diff_format": "@@ -359,6 +374,10 @@\n                     index,\n-                    sum,\n+                    lambda balance, delta: balance + delta,\n                     effective_balance * finality_delay // config.INACTIVITY_PENALTY_QUOTIENT,\n                 )\n-    return rewards, penalties\n+    return tuple(\n+        Gwei(reward) for reward in rewards\n+    ), tuple(\n+        Gwei(penalty) for penalty in penalties\n+    )\n \n",
        "source_code_with_indent": "                    index,\n                    sum,\n                    effective_balance * finality_delay // config.INACTIVITY_PENALTY_QUOTIENT,\n                )\n    <DED><DED><DED>return rewards, penalties\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                    index,\n                    lambda balance, delta: balance + delta,\n                    effective_balance * finality_delay // config.INACTIVITY_PENALTY_QUOTIENT,\n                )\n    <DED><DED><DED>return tuple(\n        Gwei(reward) for reward in rewards\n    ), tuple(\n        Gwei(penalty) for penalty in penalties\n    )\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ethereum/trinity",
    "commit": "a469c8211e94a131503fb40df714b093ccad6391",
    "filename": "eth2/beacon/state_machines/forks/serenity/epoch_processing.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-trinity/eth2/beacon/state_machines/forks/serenity/epoch_processing.py",
    "file_hunks_size": 25,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "eth2/beacon/state_machines/forks/serenity/epoch_processing.py:423:20 Incompatible parameter type [6]: Expected `Sequence[typing.Any]` for 4th positional only parameter to call `update_tuple_item_with_fn` but got `Gwei`.",
    "message": " Expected `Sequence[typing.Any]` for 4th positional only parameter to call `update_tuple_item_with_fn` but got `Gwei`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 423,
    "warning_line": "                    base_reward,"
  },
  {
    "project": "ethereum/trinity",
    "commit": "a469c8211e94a131503fb40df714b093ccad6391",
    "filename": "eth2/beacon/state_machines/forks/serenity/epoch_processing.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-trinity/eth2/beacon/state_machines/forks/serenity/epoch_processing.py",
    "file_hunks_size": 25,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "eth2/beacon/state_machines/forks/serenity/epoch_processing.py:425:4 Incompatible return type [7]: Expected `Tuple[Sequence[Gwei], Sequence[Gwei]]` but got `Tuple[typing.Tuple[int, ...], typing.Tuple[int, ...]]`.",
    "message": " Expected `Tuple[Sequence[Gwei], Sequence[Gwei]]` but got `Tuple[typing.Tuple[int, ...], typing.Tuple[int, ...]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 425,
    "warning_line": "    return rewards, penalties"
  },
  {
    "project": "ethereum/trinity",
    "commit": "a469c8211e94a131503fb40df714b093ccad6391",
    "filename": "eth2/beacon/state_machines/forks/serenity/epoch_processing.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-trinity/eth2/beacon/state_machines/forks/serenity/epoch_processing.py",
    "file_hunks_size": 25,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "eth2/beacon/state_machines/forks/serenity/epoch_processing.py:437:40 Incompatible parameter type [6]: Expected `ValidatorIndex` for 2nd positional only parameter to call `increase_balance` but got `int`.",
    "message": " Expected `ValidatorIndex` for 2nd positional only parameter to call `increase_balance` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 437,
    "warning_line": "        state = increase_balance(state, index, ("
  },
  {
    "project": "ethereum/trinity",
    "commit": "a469c8211e94a131503fb40df714b093ccad6391",
    "filename": "eth2/beacon/state_machines/forks/serenity/epoch_processing.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-trinity/eth2/beacon/state_machines/forks/serenity/epoch_processing.py",
    "file_hunks_size": 25,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "eth2/beacon/state_machines/forks/serenity/epoch_processing.py:440:40 Incompatible parameter type [6]: Expected `ValidatorIndex` for 2nd positional only parameter to call `decrease_balance` but got `int`.",
    "message": " Expected `ValidatorIndex` for 2nd positional only parameter to call `decrease_balance` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 440,
    "warning_line": "        state = decrease_balance(state, index, ("
  },
  {
    "project": "ethereum/trinity",
    "commit": "a469c8211e94a131503fb40df714b093ccad6391",
    "filename": "eth2/beacon/state_machines/forks/serenity/epoch_processing.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-trinity/eth2/beacon/state_machines/forks/serenity/epoch_processing.py",
    "file_hunks_size": 25,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "eth2/beacon/state_machines/forks/serenity/epoch_processing.py:551:44 Incompatible parameter type [6]: Expected `ValidatorIndex` for 2nd positional only parameter to call `decrease_balance` but got `int`.",
    "message": " Expected `ValidatorIndex` for 2nd positional only parameter to call `decrease_balance` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 551,
    "warning_line": "            state = decrease_balance(state, index, penalty)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    for index, validator in enumerate(state.validators):\n        if validator.slashed and current_epoch == validator.withdrawable_epoch - slashing_period:\n",
        "source_code_len": 155,
        "target_code": "    for index, validator in enumerate(state.validators):\n        index = ValidatorIndex(index)\n        if validator.slashed and current_epoch == validator.withdrawable_epoch - slashing_period:\n",
        "target_code_len": 193,
        "diff_format": "@@ -544,2 +568,3 @@\n     for index, validator in enumerate(state.validators):\n+        index = ValidatorIndex(index)\n         if validator.slashed and current_epoch == validator.withdrawable_epoch - slashing_period:\n",
        "source_code_with_indent": "    for index, validator in enumerate(state.validators):\n        <IND>if validator.slashed and current_epoch == validator.withdrawable_epoch - slashing_period:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    for index, validator in enumerate(state.validators):\n        <IND>index = ValidatorIndex(index)\n        if validator.slashed and current_epoch == validator.withdrawable_epoch - slashing_period:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ethereum/trinity",
    "commit": "a469c8211e94a131503fb40df714b093ccad6391",
    "filename": "eth2/beacon/state_machines/forks/serenity/epoch_processing.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-trinity/eth2/beacon/state_machines/forks/serenity/epoch_processing.py",
    "file_hunks_size": 25,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "eth2/beacon/state_machines/forks/serenity/epoch_processing.py:557:8 Incompatible return type [7]: Expected `BeaconState` but got `typing.Tuple[Variable[_T_co](covariant), ...]`.",
    "message": " Expected `BeaconState` but got `typing.Tuple[Variable[_T_co](covariant), ...]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 557,
    "warning_line": "        return tuple()"
  },
  {
    "project": "ethereum/trinity",
    "commit": "a469c8211e94a131503fb40df714b093ccad6391",
    "filename": "eth2/beacon/tools/builder/validator.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-trinity/eth2/beacon/tools/builder/validator.py",
    "file_hunks_size": 41,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "eth2/beacon/tools/builder/validator.py:153:8 Incompatible parameter type [6]: Expected `BeaconState` for 1st positional only parameter to call `get_domain` but got `Fork`.",
    "message": " Expected `BeaconState` for 1st positional only parameter to call `get_domain` but got `Fork`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 153,
    "warning_line": "        fork,"
  },
  {
    "project": "ethereum/trinity",
    "commit": "a469c8211e94a131503fb40df714b093ccad6391",
    "filename": "eth2/beacon/tools/builder/validator.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-trinity/eth2/beacon/tools/builder/validator.py",
    "file_hunks_size": 41,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "eth2/beacon/tools/builder/validator.py:154:8 Incompatible parameter type [6]: Expected `SignatureDomain` for 2nd positional only parameter to call `get_domain` but got `Epoch`.",
    "message": " Expected `SignatureDomain` for 2nd positional only parameter to call `get_domain` but got `Epoch`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 154,
    "warning_line": "        slot_to_epoch(slot, slots_per_epoch),"
  },
  {
    "project": "ethereum/trinity",
    "commit": "a469c8211e94a131503fb40df714b093ccad6391",
    "filename": "eth2/beacon/tools/builder/validator.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-trinity/eth2/beacon/tools/builder/validator.py",
    "file_hunks_size": 41,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "eth2/beacon/tools/builder/validator.py:172:8 Incompatible parameter type [6]: Expected `BeaconState` for 1st positional only parameter to call `get_domain` but got `Fork`.",
    "message": " Expected `BeaconState` for 1st positional only parameter to call `get_domain` but got `Fork`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 172,
    "warning_line": "        fork,"
  },
  {
    "project": "ethereum/trinity",
    "commit": "a469c8211e94a131503fb40df714b093ccad6391",
    "filename": "eth2/beacon/tools/builder/validator.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-trinity/eth2/beacon/tools/builder/validator.py",
    "file_hunks_size": 41,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "eth2/beacon/tools/builder/validator.py:173:8 Incompatible parameter type [6]: Expected `SignatureDomain` for 2nd positional only parameter to call `get_domain` but got `Epoch`.",
    "message": " Expected `SignatureDomain` for 2nd positional only parameter to call `get_domain` but got `Epoch`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 173,
    "warning_line": "        slot_to_epoch(slot, slots_per_epoch),"
  },
  {
    "project": "ethereum/trinity",
    "commit": "a469c8211e94a131503fb40df714b093ccad6391",
    "filename": "eth2/beacon/tools/builder/validator.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-trinity/eth2/beacon/tools/builder/validator.py",
    "file_hunks_size": 41,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "eth2/beacon/tools/builder/validator.py:401:15 Unbound name [10]: Name `get_block_root` is used but not defined in the current scope.",
    "message": " Name `get_block_root` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 401,
    "warning_line": "        return get_block_root("
  },
  {
    "project": "ethereum/trinity",
    "commit": "a469c8211e94a131503fb40df714b093ccad6391",
    "filename": "eth2/beacon/validator_status_helpers.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-trinity/eth2/beacon/validator_status_helpers.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "eth2/beacon/validator_status_helpers.py:127:50 Incompatible parameter type [6]: Expected `Eth2Config` for 3rd positional only parameter to call `initiate_validator_exit` but got `int`.",
    "message": " Expected `Eth2Config` for 3rd positional only parameter to call `initiate_validator_exit` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 127,
    "warning_line": "    state = initiate_validator_exit(state, index, min_validator_withdrawability_delay)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                    whistleblower_index: ValidatorIndex=None,\n                    epochs_per_slashed_balances_vector: int,\n                    whistleblower_reward_quotient: int,\n                    proposer_reward_quotient: int,\n                    max_effective_balance: Gwei,\n                    min_validator_withdrawability_delay: int,\n                    committee_config: CommitteeConfig) -> BeaconState:\n    \"\"\"\n",
        "source_code_len": 420,
        "target_code": "                    whistleblower_index: ValidatorIndex=None,\n                    config: Eth2Config) -> BeaconState:\n    \"\"\"\n",
        "target_code_len": 126,
        "diff_format": "@@ -111,8 +110,3 @@\n                     whistleblower_index: ValidatorIndex=None,\n-                    epochs_per_slashed_balances_vector: int,\n-                    whistleblower_reward_quotient: int,\n-                    proposer_reward_quotient: int,\n-                    max_effective_balance: Gwei,\n-                    min_validator_withdrawability_delay: int,\n-                    committee_config: CommitteeConfig) -> BeaconState:\n+                    config: Eth2Config) -> BeaconState:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "                    whistleblower_index: ValidatorIndex=None,\n                    epochs_per_slashed_balances_vector: int,\n                    whistleblower_reward_quotient: int,\n                    proposer_reward_quotient: int,\n                    max_effective_balance: Gwei,\n                    min_validator_withdrawability_delay: int,\n                    committee_config: CommitteeConfig) -> BeaconState:\n    <IND>",
        "target_code_with_indent": "                    whistleblower_index: ValidatorIndex=None,\n                    config: Eth2Config) -> BeaconState:\n    <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    \"\"\"\n    slots_per_epoch = committee_config.SLOTS_PER_EPOCH\n\n",
        "source_code_len": 64,
        "target_code": "    \"\"\"\n    # NOTE: remove in phase 1\n    assert whistleblower_index == None\n\n    slots_per_epoch = config.SLOTS_PER_EPOCH\n\n",
        "target_code_len": 124,
        "diff_format": "@@ -122,3 +116,6 @@\n     \"\"\"\n-    slots_per_epoch = committee_config.SLOTS_PER_EPOCH\n+    # NOTE: remove in phase 1\n+    assert whistleblower_index == None\n+\n+    slots_per_epoch = config.SLOTS_PER_EPOCH\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    slots_per_epoch = committee_config.SLOTS_PER_EPOCH\n\n",
        "target_code_with_indent": "\n    # NOTE: remove in phase 1\n    assert whistleblower_index == None\n\n    slots_per_epoch = config.SLOTS_PER_EPOCH\n\n"
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    state = initiate_validator_exit(state, index, min_validator_withdrawability_delay)\n    state = state.update_validators_with_fn(\n",
        "source_code_len": 133,
        "target_code": "\n    state = initiate_validator_exit(state, index, config)\n    state = state.update_validators_with_fn(\n",
        "target_code_len": 104,
        "diff_format": "@@ -126,3 +123,3 @@\n \n-    state = initiate_validator_exit(state, index, min_validator_withdrawability_delay)\n+    state = initiate_validator_exit(state, index, config)\n     state = state.update_validators_with_fn(\n",
        "source_code_with_indent": "\n    state = initiate_validator_exit(state, index, min_validator_withdrawability_delay)\n    state = state.update_validators_with_fn(\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    state = initiate_validator_exit(state, index, config)\n    state = state.update_validators_with_fn(\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        _set_validator_slashed(\n            current_epoch + epochs_per_slashed_balances_vector,\n        ),\n",
        "source_code_len": 107,
        "target_code": "        _set_validator_slashed(\n            current_epoch + config.EPOCHS_PER_SLASHED_BALANCES_VECTOR,\n        ),\n",
        "target_code_len": 114,
        "diff_format": "@@ -130,3 +127,3 @@\n         _set_validator_slashed(\n-            current_epoch + epochs_per_slashed_balances_vector,\n+            current_epoch + config.EPOCHS_PER_SLASHED_BALANCES_VECTOR,\n         ),\n",
        "source_code_with_indent": "        _set_validator_slashed(\n            current_epoch + epochs_per_slashed_balances_vector,\n        ),\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        _set_validator_slashed(\n            current_epoch + config.EPOCHS_PER_SLASHED_BALANCES_VECTOR,\n        ),\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    slashed_balance = state.validators[index].effective_balance\n    slashed_epoch = current_epoch % epochs_per_slashed_balances_vector\n    state = state.copy(\n",
        "source_code_len": 159,
        "target_code": "    slashed_balance = state.validators[index].effective_balance\n    slashed_epoch = current_epoch % config.EPOCHS_PER_SLASHED_BALANCES_VECTOR\n    state = state.copy(\n",
        "target_code_len": 166,
        "diff_format": "@@ -135,3 +132,3 @@\n     slashed_balance = state.validators[index].effective_balance\n-    slashed_epoch = current_epoch % epochs_per_slashed_balances_vector\n+    slashed_epoch = current_epoch % config.EPOCHS_PER_SLASHED_BALANCES_VECTOR\n     state = state.copy(\n",
        "source_code_with_indent": "    slashed_balance = state.validators[index].effective_balance\n    slashed_epoch = current_epoch % epochs_per_slashed_balances_vector\n    state = state.copy(\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    slashed_balance = state.validators[index].effective_balance\n    slashed_epoch = current_epoch % config.EPOCHS_PER_SLASHED_BALANCES_VECTOR\n    state = state.copy(\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    proposer_index = get_beacon_proposer_index(state, committee_config)\n    if whistleblower_index is None:\n        whistleblower_index = proposer_index\n    whistleblowing_reward = slashed_balance // whistleblower_reward_quotient\n    proposer_reward = whistleblowing_reward // proposer_reward_quotient\n    state = increase_balance(state, proposer_index, proposer_reward)\n",
        "source_code_len": 372,
        "target_code": "\n    proposer_index = get_beacon_proposer_index(state, CommitteeConfig(config))\n    if whistleblower_index is None:\n        whistleblower_index = proposer_index\n    whistleblowing_reward = slashed_balance // config.WHISTLEBLOWING_REWARD_QUOTIENT\n    proposer_reward = whistleblowing_reward // config.PROPOSER_REWARD_QUOTIENT\n    state = increase_balance(state, proposer_index, proposer_reward)\n",
        "target_code_len": 394,
        "diff_format": "@@ -145,7 +142,7 @@\n \n-    proposer_index = get_beacon_proposer_index(state, committee_config)\n+    proposer_index = get_beacon_proposer_index(state, CommitteeConfig(config))\n     if whistleblower_index is None:\n         whistleblower_index = proposer_index\n-    whistleblowing_reward = slashed_balance // whistleblower_reward_quotient\n-    proposer_reward = whistleblowing_reward // proposer_reward_quotient\n+    whistleblowing_reward = slashed_balance // config.WHISTLEBLOWING_REWARD_QUOTIENT\n+    proposer_reward = whistleblowing_reward // config.PROPOSER_REWARD_QUOTIENT\n     state = increase_balance(state, proposer_index, proposer_reward)\n",
        "source_code_with_indent": "\n    proposer_index = get_beacon_proposer_index(state, committee_config)\n    if whistleblower_index is None:\n        <IND>whistleblower_index = proposer_index\n    <DED>whistleblowing_reward = slashed_balance // whistleblower_reward_quotient\n    proposer_reward = whistleblowing_reward // proposer_reward_quotient\n    state = increase_balance(state, proposer_index, proposer_reward)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    proposer_index = get_beacon_proposer_index(state, CommitteeConfig(config))\n    if whistleblower_index is None:\n        <IND>whistleblower_index = proposer_index\n    <DED>whistleblowing_reward = slashed_balance // config.WHISTLEBLOWING_REWARD_QUOTIENT\n    proposer_reward = whistleblowing_reward // config.PROPOSER_REWARD_QUOTIENT\n    state = increase_balance(state, proposer_index, proposer_reward)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]