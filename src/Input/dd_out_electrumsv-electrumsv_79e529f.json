[
  {
    "project": "electrumsv/electrumsv",
    "commit": "79e529fcac0a5ef5132e0957c602670ada44f797",
    "filename": "electrumsv/gui/qt/main_window.py",
    "min_patch_found": false,
    "full_warning_msg": "electrumsv/gui/qt/main_window.py:1724:25 Incompatible parameter type [6]: Expected `TxFlags` for 2nd positional only parameter to call `AbstractAccount.set_transaction_state` but got `int`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "79e529fcac0a5ef5132e0957c602670ada44f797",
    "filename": "electrumsv/wallet_database/cache.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/wallet_database/cache.py",
    "file_hunks_size": 33,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/wallet_database/cache.py:52:41 Incompatible parameter type [6]: Expected `bytes` for 1st positional only parameter to call `LRUCache.set` but got `Optional[bytes]`.",
    "message": " Expected `bytes` for 1st positional only parameter to call `LRUCache.set` but got `Optional[bytes]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 52,
    "warning_line": "                self._bytedata_cache.set(row[0], row[1])"
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "79e529fcac0a5ef5132e0957c602670ada44f797",
    "filename": "electrumsv/wallet_database/cache.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/wallet_database/cache.py",
    "file_hunks_size": 33,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/wallet_database/cache.py:52:49 Incompatible parameter type [6]: Expected `Optional[bytes]` for 2nd positional only parameter to call `LRUCache.set` but got `int`.",
    "message": " Expected `Optional[bytes]` for 2nd positional only parameter to call `LRUCache.set` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 52,
    "warning_line": "                self._bytedata_cache.set(row[0], row[1])"
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "79e529fcac0a5ef5132e0957c602670ada44f797",
    "filename": "electrumsv/wallet_database/cache.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/wallet_database/cache.py",
    "file_hunks_size": 33,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/wallet_database/cache.py:87:8 Incompatible variable type [9]: flags is declared to have type `TxFlags` but is used as type `int`.",
    "message": " flags is declared to have type `TxFlags` but is used as type `int`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 87,
    "warning_line": "        flags &= ~TxFlags.METADATA_FIELD_MASK"
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "79e529fcac0a5ef5132e0957c602670ada44f797",
    "filename": "electrumsv/wallet_database/cache.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/wallet_database/cache.py",
    "file_hunks_size": 33,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/wallet_database/cache.py:88:8 Incompatible variable type [9]: flags is declared to have type `TxFlags` but is used as type `int`.",
    "message": " flags is declared to have type `TxFlags` but is used as type `int`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 88,
    "warning_line": "        flags |= TxFlags.HasFee if data.fee is not None else 0"
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "79e529fcac0a5ef5132e0957c602670ada44f797",
    "filename": "electrumsv/wallet_database/cache.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/wallet_database/cache.py",
    "file_hunks_size": 33,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/wallet_database/cache.py:89:8 Incompatible variable type [9]: flags is declared to have type `TxFlags` but is used as type `int`.",
    "message": " flags is declared to have type `TxFlags` but is used as type `int`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 89,
    "warning_line": "        flags |= TxFlags.HasHeight if data.height is not None else 0"
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "79e529fcac0a5ef5132e0957c602670ada44f797",
    "filename": "electrumsv/wallet_database/cache.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/wallet_database/cache.py",
    "file_hunks_size": 33,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/wallet_database/cache.py:90:8 Incompatible variable type [9]: flags is declared to have type `TxFlags` but is used as type `int`.",
    "message": " flags is declared to have type `TxFlags` but is used as type `int`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 90,
    "warning_line": "        flags |= TxFlags.HasPosition if data.position is not None else 0"
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "79e529fcac0a5ef5132e0957c602670ada44f797",
    "filename": "electrumsv/wallet_database/cache.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/wallet_database/cache.py",
    "file_hunks_size": 33,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/wallet_database/cache.py:109:24 Incompatible parameter type [6]: Expected `List[Tuple[str, TxData, Optional[bytes], int]]` for 1st positional only parameter to call `TransactionCache.update` but got `List[Tuple[bytes, TxData, Optional[bytes], int]]`.",
    "message": " Expected `List[Tuple[str, TxData, Optional[bytes], int]]` for 1st positional only parameter to call `TransactionCache.update` but got `List[Tuple[bytes, TxData, Optional[bytes], int]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 109,
    "warning_line": "            self.update([ (tx_hash, TxData(date_added=date_updated, date_updated=date_updated),"
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "79e529fcac0a5ef5132e0957c602670ada44f797",
    "filename": "electrumsv/wallet_database/cache.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/wallet_database/cache.py",
    "file_hunks_size": 33,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/wallet_database/cache.py:110:26 Unsupported operand [58]: `|` is not supported for operand types `Optional[TxFlags]` and `TxFlags`.",
    "message": " `|` is not supported for operand types `Optional[TxFlags]` and `TxFlags`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 110,
    "warning_line": "                bytedata, flags | TxFlags.HasByteData) ], completion_callback=completion_callback)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def add_transaction(self, tx: Transaction, flags: Optional[TxFlags]=TxFlags.Unset,\n            completion_callback: Optional[CompletionCallbackType]=None) -> None:\n",
        "source_code_len": 169,
        "target_code": "\n    def add_transaction(self, tx: Transaction, flags: TxFlags=TxFlags.Unset,\n            completion_callback: Optional[CompletionCallbackType]=None) -> None:\n",
        "target_code_len": 159,
        "diff_format": "@@ -101,3 +101,3 @@\n \n-    def add_transaction(self, tx: Transaction, flags: Optional[TxFlags]=TxFlags.Unset,\n+    def add_transaction(self, tx: Transaction, flags: TxFlags=TxFlags.Unset,\n             completion_callback: Optional[CompletionCallbackType]=None) -> None:\n",
        "source_code_with_indent": "\n    <DED>def add_transaction(self, tx: Transaction, flags: Optional[TxFlags]=TxFlags.Unset,\n            completion_callback: Optional[CompletionCallbackType]=None) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def add_transaction(self, tx: Transaction, flags: TxFlags=TxFlags.Unset,\n            completion_callback: Optional[CompletionCallbackType]=None) -> None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "79e529fcac0a5ef5132e0957c602670ada44f797",
    "filename": "electrumsv/wallet_database/cache.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/wallet_database/cache.py",
    "file_hunks_size": 33,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/wallet_database/cache.py:113:26 Unsupported operand [58]: `|` is not supported for operand types `Optional[TxFlags]` and `TxFlags`.",
    "message": " `|` is not supported for operand types `Optional[TxFlags]` and `TxFlags`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 113,
    "warning_line": "                bytedata, flags | TxFlags.HasByteData) ], completion_callback=completion_callback)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def add_transaction(self, tx: Transaction, flags: Optional[TxFlags]=TxFlags.Unset,\n            completion_callback: Optional[CompletionCallbackType]=None) -> None:\n",
        "source_code_len": 169,
        "target_code": "\n    def add_transaction(self, tx: Transaction, flags: TxFlags=TxFlags.Unset,\n            completion_callback: Optional[CompletionCallbackType]=None) -> None:\n",
        "target_code_len": 159,
        "diff_format": "@@ -101,3 +101,3 @@\n \n-    def add_transaction(self, tx: Transaction, flags: Optional[TxFlags]=TxFlags.Unset,\n+    def add_transaction(self, tx: Transaction, flags: TxFlags=TxFlags.Unset,\n             completion_callback: Optional[CompletionCallbackType]=None) -> None:\n",
        "source_code_with_indent": "\n    <DED>def add_transaction(self, tx: Transaction, flags: Optional[TxFlags]=TxFlags.Unset,\n            completion_callback: Optional[CompletionCallbackType]=None) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def add_transaction(self, tx: Transaction, flags: TxFlags=TxFlags.Unset,\n            completion_callback: Optional[CompletionCallbackType]=None) -> None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "79e529fcac0a5ef5132e0957c602670ada44f797",
    "filename": "electrumsv/wallet_database/cache.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/wallet_database/cache.py",
    "file_hunks_size": 33,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/wallet_database/cache.py:118:29 Incompatible parameter type [6]: Expected `List[Tuple[bytes, TxData, Optional[bytes], int]]` for 1st positional only parameter to call `TransactionCache._add` but got `List[Tuple[str, TxData, Optional[bytes], int]]`.",
    "message": " Expected `List[Tuple[bytes, TxData, Optional[bytes], int]]` for 1st positional only parameter to call `TransactionCache._add` but got `List[Tuple[str, TxData, Optional[bytes], int]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 118,
    "warning_line": "            return self._add(inserts, completion_callback=completion_callback)"
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "79e529fcac0a5ef5132e0957c602670ada44f797",
    "filename": "electrumsv/wallet_database/cache.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/wallet_database/cache.py",
    "file_hunks_size": 33,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/wallet_database/cache.py:125:58 Incompatible parameter type [6]: Expected `TxFlags` for 2nd positional only parameter to call `TransactionCache._adjust_metadata_flags` but got `int`.",
    "message": " Expected `TxFlags` for 2nd positional only parameter to call `TransactionCache._adjust_metadata_flags` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 125,
    "warning_line": "            flags = self._adjust_metadata_flags(metadata, add_flags)"
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "79e529fcac0a5ef5132e0957c602670ada44f797",
    "filename": "electrumsv/wallet_database/cache.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/wallet_database/cache.py",
    "file_hunks_size": 33,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/wallet_database/cache.py:130:46 Incompatible parameter type [6]: Expected `TxFlags` for 2nd positional only parameter to call `TransactionCache._validate_new_flags` but got `int`.",
    "message": " Expected `TxFlags` for 2nd positional only parameter to call `TransactionCache._validate_new_flags` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 130,
    "warning_line": "            self._validate_new_flags(tx_hash, flags)"
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "79e529fcac0a5ef5132e0957c602670ada44f797",
    "filename": "electrumsv/wallet_database/cache.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/wallet_database/cache.py",
    "file_hunks_size": 33,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/wallet_database/cache.py:136:26 Incompatible parameter type [6]: Expected `Tuple[bytes, TxData, Optional[bytes], int]` for 2nd positional only parameter to call `list.__setitem__` but got `Tuple[bytes, TxData, Optional[bytes], int, None]`.",
    "message": " Expected `Tuple[bytes, TxData, Optional[bytes], int]` for 2nd positional only parameter to call `list.__setitem__` but got `Tuple[bytes, TxData, Optional[bytes], int, None]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 136,
    "warning_line": "            inserts[i] = (tx_hash, metadata, bytedata, flags, None)"
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "79e529fcac0a5ef5132e0957c602670ada44f797",
    "filename": "electrumsv/wallet_database/cache.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/wallet_database/cache.py",
    "file_hunks_size": 33,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/wallet_database/cache.py:137:27 Incompatible parameter type [6]: Expected `List[electrumsv.wallet_database.tables.TransactionRow]` for 1st positional only parameter to call `TransactionTable.create` but got `List[Tuple[bytes, TxData, Optional[bytes], int]]`.",
    "message": " Expected `List[electrumsv.wallet_database.tables.TransactionRow]` for 1st positional only parameter to call `TransactionTable.create` but got `List[Tuple[bytes, TxData, Optional[bytes], int]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 137,
    "warning_line": "        self._store.create(inserts, completion_callback=completion_callback)"
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "79e529fcac0a5ef5132e0957c602670ada44f797",
    "filename": "electrumsv/wallet_database/cache.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/wallet_database/cache.py",
    "file_hunks_size": 33,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/wallet_database/cache.py:142:25 Incompatible parameter type [6]: Expected `List[Tuple[str, TxData, Optional[bytes], TxFlags]]` for 1st positional only parameter to call `TransactionCache._update` but got `List[Tuple[str, TxData, Optional[bytes], int]]`.",
    "message": " Expected `List[Tuple[str, TxData, Optional[bytes], TxFlags]]` for 1st positional only parameter to call `TransactionCache._update` but got `List[Tuple[str, TxData, Optional[bytes], int]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 142,
    "warning_line": "            self._update(updates, completion_callback=completion_callback)"
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "79e529fcac0a5ef5132e0957c602670ada44f797",
    "filename": "electrumsv/wallet_database/cache.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/wallet_database/cache.py",
    "file_hunks_size": 33,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/wallet_database/cache.py:153:48 Incompatible parameter type [6]: Expected `Optional[Iterable[bytes]]` for 1st parameter `tx_hashes` to call `TransactionCache._get_entries` but got `typing.Set[str]`.",
    "message": " Expected `Optional[Iterable[bytes]]` for 1st parameter `tx_hashes` to call `TransactionCache._get_entries` but got `typing.Set[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 153,
    "warning_line": "        for tx_hash, entry in self._get_entries(tx_hashes=desired_update_hashes,"
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "79e529fcac0a5ef5132e0957c602670ada44f797",
    "filename": "electrumsv/wallet_database/cache.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/wallet_database/cache.py",
    "file_hunks_size": 33,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/wallet_database/cache.py:163:62 Incompatible parameter type [6]: Expected `TxFlags` for 2nd positional only parameter to call `TransactionCache._adjust_metadata_flags` but got `int`.",
    "message": " Expected `TxFlags` for 2nd positional only parameter to call `TransactionCache._adjust_metadata_flags` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 163,
    "warning_line": "            flags = self._adjust_metadata_flags(new_metadata, entry.flags & ~TxFlags.STATE_MASK)"
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "79e529fcac0a5ef5132e0957c602670ada44f797",
    "filename": "electrumsv/wallet_database/cache.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/wallet_database/cache.py",
    "file_hunks_size": 33,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/wallet_database/cache.py:181:37 Incompatible parameter type [6]: Expected `bytes` for 1st positional only parameter to call `TransactionCache._validate_new_flags` but got `str`.",
    "message": " Expected `bytes` for 1st positional only parameter to call `TransactionCache._validate_new_flags` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 181,
    "warning_line": "            self._validate_new_flags(tx_hash, flags)"
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "79e529fcac0a5ef5132e0957c602670ada44f797",
    "filename": "electrumsv/wallet_database/cache.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/wallet_database/cache.py",
    "file_hunks_size": 33,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/wallet_database/cache.py:181:46 Incompatible parameter type [6]: Expected `TxFlags` for 2nd positional only parameter to call `TransactionCache._validate_new_flags` but got `int`.",
    "message": " Expected `TxFlags` for 2nd positional only parameter to call `TransactionCache._validate_new_flags` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 181,
    "warning_line": "            self._validate_new_flags(tx_hash, flags)"
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "79e529fcac0a5ef5132e0957c602670ada44f797",
    "filename": "electrumsv/wallet_database/cache.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/wallet_database/cache.py",
    "file_hunks_size": 33,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/wallet_database/cache.py:186:24 Incompatible parameter type [6]: Expected `bytes` for 1st positional only parameter to call `dict.__setitem__` but got `str`.",
    "message": " Expected `bytes` for 1st positional only parameter to call `dict.__setitem__` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 186,
    "warning_line": "            self._cache[tx_hash] = new_entry"
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "79e529fcac0a5ef5132e0957c602670ada44f797",
    "filename": "electrumsv/wallet_database/cache.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/wallet_database/cache.py",
    "file_hunks_size": 33,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/wallet_database/cache.py:188:41 Incompatible parameter type [6]: Expected `bytes` for 1st positional only parameter to call `LRUCache.set` but got `str`.",
    "message": " Expected `bytes` for 1st positional only parameter to call `LRUCache.set` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 188,
    "warning_line": "                self._bytedata_cache.set(tx_hash, incoming_bytedata)"
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "79e529fcac0a5ef5132e0957c602670ada44f797",
    "filename": "electrumsv/wallet_database/cache.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/wallet_database/cache.py",
    "file_hunks_size": 33,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/wallet_database/cache.py:189:36 Incompatible parameter type [6]: Expected `Tuple[bytes, TxData, Optional[bytes], TxFlags]` for 1st positional only parameter to call `list.append` but got `Tuple[str, TxData, Optional[bytes], int]`.",
    "message": " Expected `Tuple[bytes, TxData, Optional[bytes], TxFlags]` for 1st positional only parameter to call `list.append` but got `Tuple[str, TxData, Optional[bytes], int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 189,
    "warning_line": "            updated_entries.append((tx_hash, new_metadata, incoming_bytedata, flags))"
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "79e529fcac0a5ef5132e0957c602670ada44f797",
    "filename": "electrumsv/wallet_database/cache.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/wallet_database/cache.py",
    "file_hunks_size": 33,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/wallet_database/cache.py:192:31 Incompatible parameter type [6]: Expected `List[Tuple[bytes, TxData, bytes, int]]` for 1st positional only parameter to call `TransactionTable.update` but got `List[Tuple[bytes, TxData, Optional[bytes], TxFlags]]`.",
    "message": " Expected `List[Tuple[bytes, TxData, bytes, int]]` for 1st positional only parameter to call `TransactionTable.update` but got `List[Tuple[bytes, TxData, Optional[bytes], TxFlags]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 192,
    "warning_line": "            self._store.update(updated_entries, completion_callback=completion_callback)"
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "79e529fcac0a5ef5132e0957c602670ada44f797",
    "filename": "electrumsv/wallet_database/cache.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/wallet_database/cache.py",
    "file_hunks_size": 33,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/wallet_database/cache.py:207:46 Incompatible parameter type [6]: Expected `TxFlags` for 2nd positional only parameter to call `TransactionCache._validate_new_flags` but got `int`.",
    "message": " Expected `TxFlags` for 2nd positional only parameter to call `TransactionCache._validate_new_flags` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 207,
    "warning_line": "            self._validate_new_flags(tx_hash, entry.flags)"
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "79e529fcac0a5ef5132e0957c602670ada44f797",
    "filename": "electrumsv/wallet_database/cache.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/wallet_database/cache.py",
    "file_hunks_size": 33,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/wallet_database/cache.py:214:8 Incompatible return type [7]: Expected `TxFlags` but got `int`.",
    "message": " Expected `TxFlags` but got `int`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 214,
    "warning_line": "        return entry.flags"
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "79e529fcac0a5ef5132e0957c602670ada44f797",
    "filename": "electrumsv/wallet_database/cache.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/wallet_database/cache.py",
    "file_hunks_size": 33,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/wallet_database/cache.py:275:77 Incompatible parameter type [6]: Expected `Optional[bytes]` for 2nd positional only parameter to call `TransactionCache._validate_transaction_bytes` but got `int`.",
    "message": " Expected `Optional[bytes]` for 2nd positional only parameter to call `TransactionCache._validate_transaction_bytes` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 275,
    "warning_line": "            if bytedata is None or self._validate_transaction_bytes(tx_hash, bytedata):"
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "79e529fcac0a5ef5132e0957c602670ada44f797",
    "filename": "electrumsv/wallet_database/cache.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/wallet_database/cache.py",
    "file_hunks_size": 33,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/wallet_database/cache.py:281:54 Incompatible parameter type [6]: Expected `Optional[bytes]` for 2nd positional only parameter to call `LRUCache.set` but got `int`.",
    "message": " Expected `Optional[bytes]` for 2nd positional only parameter to call `LRUCache.set` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 281,
    "warning_line": "                    self._bytedata_cache.set(tx_hash, bytedata)"
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "79e529fcac0a5ef5132e0957c602670ada44f797",
    "filename": "electrumsv/wallet_database/cache.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/wallet_database/cache.py",
    "file_hunks_size": 33,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/wallet_database/cache.py:283:43 Incompatible parameter type [6]: Expected `int` for 1st positional only parameter to call `TxFlags.to_repr` but got `Optional[int]`.",
    "message": " Expected `int` for 1st positional only parameter to call `TxFlags.to_repr` but got `Optional[int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 283,
    "warning_line": "                    entry, TxFlags.to_repr(flags), TxFlags.to_repr(mask)))"
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "79e529fcac0a5ef5132e0957c602670ada44f797",
    "filename": "electrumsv/wallet_database/cache.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/wallet_database/cache.py",
    "file_hunks_size": 33,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/wallet_database/cache.py:283:67 Incompatible parameter type [6]: Expected `int` for 1st positional only parameter to call `TxFlags.to_repr` but got `Optional[int]`.",
    "message": " Expected `int` for 1st positional only parameter to call `TxFlags.to_repr` but got `Optional[int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 283,
    "warning_line": "                    entry, TxFlags.to_repr(flags), TxFlags.to_repr(mask)))"
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "79e529fcac0a5ef5132e0957c602670ada44f797",
    "filename": "electrumsv/wallet_database/cache.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/wallet_database/cache.py",
    "file_hunks_size": 33,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/wallet_database/cache.py:299:12 Incompatible return type [7]: Expected `Optional[TxData]` but got `Optional[TransactionCacheEntry]`.",
    "message": " Expected `Optional[TxData]` but got `Optional[TransactionCacheEntry]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 299,
    "warning_line": "            return self._get_metadata(tx_hash, flags, mask)"
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "79e529fcac0a5ef5132e0957c602670ada44f797",
    "filename": "electrumsv/wallet_database/cache.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/wallet_database/cache.py",
    "file_hunks_size": 33,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/wallet_database/cache.py:305:12 Incompatible return type [7]: Expected `Optional[TransactionCacheEntry]` but got `Optional[TxData]`.",
    "message": " Expected `Optional[TransactionCacheEntry]` but got `Optional[TxData]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 305,
    "warning_line": "            return entry.metadata if self._entry_visible(entry.flags, flags, mask) else None"
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "79e529fcac0a5ef5132e0957c602670ada44f797",
    "filename": "electrumsv/wallet_database/cache.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/wallet_database/cache.py",
    "file_hunks_size": 33,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/wallet_database/cache.py:335:12 Incompatible return type [7]: Expected `Optional[Transaction]` but got `bytes`.",
    "message": " Expected `Optional[Transaction]` but got `bytes`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 335,
    "warning_line": "            return results[0][1]",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def get_transaction_data(self, tx_hash: bytes, flags: Optional[int]=None,\n            mask: Optional[int]=None) -> Optional[Transaction]:\n        assert mask is None or (mask & TxFlags.HasByteData) != 0, \"filter excludes transaction\"\n",
        "source_code_len": 239,
        "target_code": "\n    def get_transaction_data(self, tx_hash: bytes, flags: Optional[TxFlags]=None,\n            mask: Optional[TxFlags]=None) -> Optional[bytes]:\n        assert mask is None or (mask & TxFlags.HasByteData) != 0, \"filter excludes transaction\"\n",
        "target_code_len": 241,
        "diff_format": "@@ -329,4 +336,4 @@\n \n-    def get_transaction_data(self, tx_hash: bytes, flags: Optional[int]=None,\n-            mask: Optional[int]=None) -> Optional[Transaction]:\n+    def get_transaction_data(self, tx_hash: bytes, flags: Optional[TxFlags]=None,\n+            mask: Optional[TxFlags]=None) -> Optional[bytes]:\n         assert mask is None or (mask & TxFlags.HasByteData) != 0, \"filter excludes transaction\"\n",
        "source_code_with_indent": "\n    <DED><DED>def get_transaction_data(self, tx_hash: bytes, flags: Optional[int]=None,\n            mask: Optional[int]=None) -> Optional[Transaction]:\n        <IND>assert mask is None or (mask & TxFlags.HasByteData) != 0, \"filter excludes transaction\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED><DED>def get_transaction_data(self, tx_hash: bytes, flags: Optional[TxFlags]=None,\n            mask: Optional[TxFlags]=None) -> Optional[bytes]:\n        <IND>assert mask is None or (mask & TxFlags.HasByteData) != 0, \"filter excludes transaction\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "79e529fcac0a5ef5132e0957c602670ada44f797",
    "filename": "electrumsv/wallet_database/cache.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/wallet_database/cache.py",
    "file_hunks_size": 33,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/wallet_database/cache.py:345:52 Incompatible parameter type [6]: Expected `bytes` for 1st positional only parameter to call `LRUCache.get` but got `str`.",
    "message": " Expected `bytes` for 1st positional only parameter to call `LRUCache.get` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 345,
    "warning_line": "                bytedata = self._bytedata_cache.get(tx_hash)"
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "79e529fcac0a5ef5132e0957c602670ada44f797",
    "filename": "electrumsv/wallet_database/cache.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/wallet_database/cache.py",
    "file_hunks_size": 33,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/wallet_database/cache.py:362:12 Incompatible return type [7]: Expected `List[Tuple[bytes, TransactionCacheEntry]]` but got `List[Tuple[str, TransactionCacheEntry]]`.",
    "message": " Expected `List[Tuple[bytes, TransactionCacheEntry]]` but got `List[Tuple[str, TransactionCacheEntry]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 362,
    "warning_line": "            return self._get_entries(flags, mask, tx_hashes, require_all)"
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "79e529fcac0a5ef5132e0957c602670ada44f797",
    "filename": "electrumsv/wallet_database/cache.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/wallet_database/cache.py",
    "file_hunks_size": 33,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/wallet_database/cache.py:383:32 Incompatible parameter type [6]: Expected `Iterable[Variable[_T]]` for 1st positional only parameter to call `set.__init__` but got `Optional[Iterable[bytes]]`.",
    "message": " Expected `Iterable[Variable[_T]]` for 1st positional only parameter to call `set.__init__` but got `Optional[Iterable[bytes]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 383,
    "warning_line": "            wanted_hashes = set(tx_hashes)"
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "79e529fcac0a5ef5132e0957c602670ada44f797",
    "filename": "electrumsv/wallet_database/cache.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/wallet_database/cache.py",
    "file_hunks_size": 33,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/wallet_database/cache.py:420:36 Incompatible parameter type [6]: Expected `typing.Sized` for 1st positional only parameter to call `len` but got `Optional[List[bytes]]`.",
    "message": " Expected `typing.Sized` for 1st positional only parameter to call `len` but got `Optional[List[bytes]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 420,
    "warning_line": "        if tx_hashes is None or len(store_tx_hashes):"
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "79e529fcac0a5ef5132e0957c602670ada44f797",
    "filename": "electrumsv/wallet_database/cache.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/wallet_database/cache.py",
    "file_hunks_size": 33,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/wallet_database/cache.py:463:8 Incompatible return type [7]: Expected `Dict[bytes, int]` but got `List[Tuple[bytes, TransactionCacheEntry]]`.",
    "message": " Expected `Dict[bytes, int]` but got `List[Tuple[bytes, TransactionCacheEntry]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 463,
    "warning_line": "        return [ (tx_hash, self._cache[tx_hash]) for (tx_hash, metadata) in results"
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "79e529fcac0a5ef5132e0957c602670ada44f797",
    "filename": "electrumsv/wallet_database/cache.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/wallet_database/cache.py",
    "file_hunks_size": 33,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/wallet_database/cache.py:490:12 Incompatible return type [7]: Expected `None` but got `int`.",
    "message": " Expected `None` but got `int`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 490,
    "warning_line": "            return len(store_updates)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "                    completion_callback=completion_callback)\n            return len(store_updates)\n\n",
        "source_code_len": 100,
        "target_code": "                    completion_callback=completion_callback)\n",
        "target_code_len": 61,
        "diff_format": "@@ -489,3 +500,1 @@\n                     completion_callback=completion_callback)\n-            return len(store_updates)\n-\n",
        "source_code_with_indent": "                    completion_callback=completion_callback)\n            <DED>return len(store_updates)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                    completion_callback=completion_callback)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "79e529fcac0a5ef5132e0957c602670ada44f797",
    "filename": "electrumsv/wallet_database/sqlite_support.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/wallet_database/sqlite_support.py",
    "file_hunks_size": 18,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/wallet_database/sqlite_support.py:139:57 Incompatible parameter type [6]: Expected `Tuple[typing.Callable[[bool], None], bool]` for 1st positional only parameter to call `list.append` but got `Tuple[typing.Callable[[bool], None], None]`.",
    "message": " Expected `Tuple[typing.Callable[[bool], None], bool]` for 1st positional only parameter to call `list.append` but got `Tuple[typing.Callable[[bool], None], None]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 139,
    "warning_line": "                            completion_callbacks.append((completion_callback, None))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n\n",
        "source_code_len": 2,
        "target_code": "\nCompletionEntryType = Tuple[CompletionCallbackType, Optional[Exception]]\n\n",
        "target_code_len": 75,
        "diff_format": "@@ -68,2 +69,3 @@\n \n+CompletionEntryType = Tuple[CompletionCallbackType, Optional[Exception]]\n \n",
        "source_code_with_indent": "\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>CompletionEntryType = Tuple[CompletionCallbackType, Optional[Exception]]\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            time_start = time.time()\n            completion_callbacks: List[Tuple[CompletionCallbackType, bool]] = []\n            total_size_hint = 0\n",
        "source_code_len": 150,
        "target_code": "            time_start = time.time()\n            completion_callbacks: List[CompletionEntryType] = []\n            total_size_hint = 0\n",
        "target_code_len": 134,
        "diff_format": "@@ -129,3 +132,3 @@\n             time_start = time.time()\n-            completion_callbacks: List[Tuple[CompletionCallbackType, bool]] = []\n+            completion_callbacks: List[CompletionEntryType] = []\n             total_size_hint = 0\n",
        "source_code_with_indent": "            <DED>time_start = time.time()\n            completion_callbacks: List[Tuple[CompletionCallbackType, bool]] = []\n            total_size_hint = 0\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <DED>time_start = time.time()\n            completion_callbacks: List[CompletionEntryType] = []\n            total_size_hint = 0\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "79e529fcac0a5ef5132e0957c602670ada44f797",
    "filename": "electrumsv/wallet_database/sqlite_support.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/wallet_database/sqlite_support.py",
    "file_hunks_size": 18,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/wallet_database/sqlite_support.py:156:49 Incompatible parameter type [6]: Expected `Tuple[typing.Callable[[bool], None], bool]` for 1st positional only parameter to call `list.append` but got `Tuple[typing.Any, Exception]`.",
    "message": " Expected `Tuple[typing.Callable[[bool], None], bool]` for 1st positional only parameter to call `list.append` but got `Tuple[typing.Any, Exception]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 156,
    "warning_line": "                    completion_callbacks.append((write_entries[0][1], e))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n\n",
        "source_code_len": 2,
        "target_code": "\nCompletionEntryType = Tuple[CompletionCallbackType, Optional[Exception]]\n\n",
        "target_code_len": 75,
        "diff_format": "@@ -68,2 +69,3 @@\n \n+CompletionEntryType = Tuple[CompletionCallbackType, Optional[Exception]]\n \n",
        "source_code_with_indent": "\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>CompletionEntryType = Tuple[CompletionCallbackType, Optional[Exception]]\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            time_start = time.time()\n            completion_callbacks: List[Tuple[CompletionCallbackType, bool]] = []\n            total_size_hint = 0\n",
        "source_code_len": 150,
        "target_code": "            time_start = time.time()\n            completion_callbacks: List[CompletionEntryType] = []\n            total_size_hint = 0\n",
        "target_code_len": 134,
        "diff_format": "@@ -129,3 +132,3 @@\n             time_start = time.time()\n-            completion_callbacks: List[Tuple[CompletionCallbackType, bool]] = []\n+            completion_callbacks: List[CompletionEntryType] = []\n             total_size_hint = 0\n",
        "source_code_with_indent": "            <DED>time_start = time.time()\n            completion_callbacks: List[Tuple[CompletionCallbackType, bool]] = []\n            total_size_hint = 0\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <DED>time_start = time.time()\n            completion_callbacks: List[CompletionEntryType] = []\n            total_size_hint = 0\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "79e529fcac0a5ef5132e0957c602670ada44f797",
    "filename": "electrumsv/wallet_database/sqlite_support.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/wallet_database/sqlite_support.py",
    "file_hunks_size": 18,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/wallet_database/sqlite_support.py:346:8 Incompatible return type [7]: Expected `None` but got `typing.Callable[[Named(exc_value, typing.Any)], None]`.",
    "message": " Expected `None` but got `typing.Callable[[Named(exc_value, typing.Any)], None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 346,
    "warning_line": "        return callback",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "WriteCallbackType = Callable[[sqlite3.Connection], None]\nCompletionCallbackType = Callable[[bool], None]\nclass WriteEntryType(NamedTuple):\n",
        "source_code_len": 139,
        "target_code": "WriteCallbackType = Callable[[sqlite3.Connection], None]\nCompletionCallbackType = Callable[[Optional[Exception]], None]\nclass WriteEntryType(NamedTuple):\n",
        "target_code_len": 154,
        "diff_format": "@@ -62,3 +63,3 @@\n WriteCallbackType = Callable[[sqlite3.Connection], None]\n-CompletionCallbackType = Callable[[bool], None]\n+CompletionCallbackType = Callable[[Optional[Exception]], None]\n class WriteEntryType(NamedTuple):\n",
        "source_code_with_indent": "<DED>WriteCallbackType = Callable[[sqlite3.Connection], None]\nCompletionCallbackType = Callable[[bool], None]\nclass WriteEntryType(NamedTuple):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED>WriteCallbackType = Callable[[sqlite3.Connection], None]\nCompletionCallbackType = Callable[[Optional[Exception]], None]\nclass WriteEntryType(NamedTuple):\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n\n",
        "source_code_len": 2,
        "target_code": "\nCompletionEntryType = Tuple[CompletionCallbackType, Optional[Exception]]\n\n",
        "target_code_len": 75,
        "diff_format": "@@ -68,2 +69,3 @@\n \n+CompletionEntryType = Tuple[CompletionCallbackType, Optional[Exception]]\n \n",
        "source_code_with_indent": "\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>CompletionEntryType = Tuple[CompletionCallbackType, Optional[Exception]]\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            time_start = time.time()\n            completion_callbacks: List[Tuple[CompletionCallbackType, bool]] = []\n            total_size_hint = 0\n",
        "source_code_len": 150,
        "target_code": "            time_start = time.time()\n            completion_callbacks: List[CompletionEntryType] = []\n            total_size_hint = 0\n",
        "target_code_len": 134,
        "diff_format": "@@ -129,3 +132,3 @@\n             time_start = time.time()\n-            completion_callbacks: List[Tuple[CompletionCallbackType, bool]] = []\n+            completion_callbacks: List[CompletionEntryType] = []\n             total_size_hint = 0\n",
        "source_code_with_indent": "            <DED>time_start = time.time()\n            completion_callbacks: List[Tuple[CompletionCallbackType, bool]] = []\n            total_size_hint = 0\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <DED>time_start = time.time()\n            completion_callbacks: List[CompletionEntryType] = []\n            total_size_hint = 0\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def get_callback(self) -> None:\n        assert not self._gave_callback, \"Query completer cannot be reused\"\n        def callback(exc_value: Any) -> None:\n            self._have_result = True\n",
        "source_code_len": 195,
        "target_code": "\n    def get_callback(self) -> CompletionCallbackType:\n        assert not self._gave_callback, \"Query completer cannot be reused\"\n        def callback(exc_value: Optional[Exception]) -> None:\n            self._have_result = True\n",
        "target_code_len": 229,
        "diff_format": "@@ -338,5 +341,5 @@\n \n-    def get_callback(self) -> None:\n+    def get_callback(self) -> CompletionCallbackType:\n         assert not self._gave_callback, \"Query completer cannot be reused\"\n-        def callback(exc_value: Any) -> None:\n+        def callback(exc_value: Optional[Exception]) -> None:\n             self._have_result = True\n",
        "source_code_with_indent": "\n    <DED>def get_callback(self) -> None:\n        <IND>assert not self._gave_callback, \"Query completer cannot be reused\"\n        def callback(exc_value: Any) -> None:\n            <IND>self._have_result = True\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def get_callback(self) -> CompletionCallbackType:\n        <IND>assert not self._gave_callback, \"Query completer cannot be reused\"\n        def callback(exc_value: Optional[Exception]) -> None:\n            <IND>self._have_result = True\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "79e529fcac0a5ef5132e0957c602670ada44f797",
    "filename": "electrumsv/wallet_database/tables.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/wallet_database/tables.py",
    "file_hunks_size": 28,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/wallet_database/tables.py:264:8 Incompatible variable type [9]: flags is declared to have type `TxFlags` but is used as type `int`.",
    "message": " flags is declared to have type `TxFlags` but is used as type `int`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 264,
    "warning_line": "        flags &= ~TxFlags.METADATA_FIELD_MASK"
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "79e529fcac0a5ef5132e0957c602670ada44f797",
    "filename": "electrumsv/wallet_database/tables.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/wallet_database/tables.py",
    "file_hunks_size": 28,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/wallet_database/tables.py:266:12 Incompatible variable type [9]: flags is declared to have type `TxFlags` but is used as type `int`.",
    "message": " flags is declared to have type `TxFlags` but is used as type `int`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 266,
    "warning_line": "            flags |= TxFlags.HasHeight"
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "79e529fcac0a5ef5132e0957c602670ada44f797",
    "filename": "electrumsv/wallet_database/tables.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/wallet_database/tables.py",
    "file_hunks_size": 28,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/wallet_database/tables.py:268:12 Incompatible variable type [9]: flags is declared to have type `TxFlags` but is used as type `int`.",
    "message": " flags is declared to have type `TxFlags` but is used as type `int`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 268,
    "warning_line": "            flags |= TxFlags.HasFee"
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "79e529fcac0a5ef5132e0957c602670ada44f797",
    "filename": "electrumsv/wallet_database/tables.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/wallet_database/tables.py",
    "file_hunks_size": 28,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/wallet_database/tables.py:270:12 Incompatible variable type [9]: flags is declared to have type `TxFlags` but is used as type `int`.",
    "message": " flags is declared to have type `TxFlags` but is used as type `int`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 270,
    "warning_line": "            flags |= TxFlags.HasPosition"
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "79e529fcac0a5ef5132e0957c602670ada44f797",
    "filename": "electrumsv/wallet_database/tables.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/wallet_database/tables.py",
    "file_hunks_size": 28,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/wallet_database/tables.py:271:8 Incompatible return type [7]: Expected `bytes` but got `TxFlags`.",
    "message": " Expected `bytes` but got `TxFlags`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 271,
    "warning_line": "        return flags",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @staticmethod\n    def _apply_flags(data: TxData, flags: TxFlags) -> bytes:\n        flags &= ~TxFlags.METADATA_FIELD_MASK\n",
        "source_code_len": 125,
        "target_code": "    @staticmethod\n    def _apply_flags(data: TxData, flags: TxFlags) -> TxFlags:\n        flags &= ~TxFlags.METADATA_FIELD_MASK\n",
        "target_code_len": 127,
        "diff_format": "@@ -262,3 +269,3 @@\n     @staticmethod\n-    def _apply_flags(data: TxData, flags: TxFlags) -> bytes:\n+    def _apply_flags(data: TxData, flags: TxFlags) -> TxFlags:\n         flags &= ~TxFlags.METADATA_FIELD_MASK\n",
        "source_code_with_indent": "    @staticmethod\n    def _apply_flags(data: TxData, flags: TxFlags) -> bytes:\n        <IND>flags &= ~TxFlags.METADATA_FIELD_MASK\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    @staticmethod\n    def _apply_flags(data: TxData, flags: TxFlags) -> TxFlags:\n        <IND>flags &= ~TxFlags.METADATA_FIELD_MASK\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "79e529fcac0a5ef5132e0957c602670ada44f797",
    "filename": "electrumsv/wallet_database/tables.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/wallet_database/tables.py",
    "file_hunks_size": 28,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/wallet_database/tables.py:297:16 Incompatible return type [7]: Expected `Tuple[str, typing.Tuple[typing.Any, ...]]` but got `Tuple[str, List[Variable[_T]]]`.",
    "message": " Expected `Tuple[str, typing.Tuple[typing.Any, ...]]` but got `Tuple[str, List[Variable[_T]]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 297,
    "warning_line": "                return \"\", []",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @staticmethod\n    def _flag_clause(flags: Optional[int], mask: Optional[int]) -> Tuple[str, Tuple]:\n        if flags is None:\n",
        "source_code_len": 130,
        "target_code": "    @staticmethod\n    def _flag_clause(flags: Optional[int], mask: Optional[int]) -> Tuple[str, List[int]]:\n        if flags is None:\n",
        "target_code_len": 134,
        "diff_format": "@@ -293,3 +300,3 @@\n     @staticmethod\n-    def _flag_clause(flags: Optional[int], mask: Optional[int]) -> Tuple[str, Tuple]:\n+    def _flag_clause(flags: Optional[int], mask: Optional[int]) -> Tuple[str, List[int]]:\n         if flags is None:\n",
        "source_code_with_indent": "    <DED>@staticmethod\n    def _flag_clause(flags: Optional[int], mask: Optional[int]) -> Tuple[str, Tuple]:\n        <IND>if flags is None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@staticmethod\n    def _flag_clause(flags: Optional[int], mask: Optional[int]) -> Tuple[str, List[int]]:\n        <IND>if flags is None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "79e529fcac0a5ef5132e0957c602670ada44f797",
    "filename": "electrumsv/wallet_database/tables.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/wallet_database/tables.py",
    "file_hunks_size": 28,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/wallet_database/tables.py:298:12 Incompatible return type [7]: Expected `Tuple[str, typing.Tuple[typing.Any, ...]]` but got `Tuple[str, List[int]]`.",
    "message": " Expected `Tuple[str, typing.Tuple[typing.Any, ...]]` but got `Tuple[str, List[int]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 298,
    "warning_line": "            return \"(flags & ?) != 0\", [mask]",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @staticmethod\n    def _flag_clause(flags: Optional[int], mask: Optional[int]) -> Tuple[str, Tuple]:\n        if flags is None:\n",
        "source_code_len": 130,
        "target_code": "    @staticmethod\n    def _flag_clause(flags: Optional[int], mask: Optional[int]) -> Tuple[str, List[int]]:\n        if flags is None:\n",
        "target_code_len": 134,
        "diff_format": "@@ -293,3 +300,3 @@\n     @staticmethod\n-    def _flag_clause(flags: Optional[int], mask: Optional[int]) -> Tuple[str, Tuple]:\n+    def _flag_clause(flags: Optional[int], mask: Optional[int]) -> Tuple[str, List[int]]:\n         if flags is None:\n",
        "source_code_with_indent": "    <DED>@staticmethod\n    def _flag_clause(flags: Optional[int], mask: Optional[int]) -> Tuple[str, Tuple]:\n        <IND>if flags is None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@staticmethod\n    def _flag_clause(flags: Optional[int], mask: Optional[int]) -> Tuple[str, List[int]]:\n        <IND>if flags is None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "79e529fcac0a5ef5132e0957c602670ada44f797",
    "filename": "electrumsv/wallet_database/tables.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/wallet_database/tables.py",
    "file_hunks_size": 28,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/wallet_database/tables.py:301:12 Incompatible return type [7]: Expected `Tuple[str, typing.Tuple[typing.Any, ...]]` but got `Tuple[str, List[int]]`.",
    "message": " Expected `Tuple[str, typing.Tuple[typing.Any, ...]]` but got `Tuple[str, List[int]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 301,
    "warning_line": "            return \"(flags & ?) != 0\", [flags]",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @staticmethod\n    def _flag_clause(flags: Optional[int], mask: Optional[int]) -> Tuple[str, Tuple]:\n        if flags is None:\n",
        "source_code_len": 130,
        "target_code": "    @staticmethod\n    def _flag_clause(flags: Optional[int], mask: Optional[int]) -> Tuple[str, List[int]]:\n        if flags is None:\n",
        "target_code_len": 134,
        "diff_format": "@@ -293,3 +300,3 @@\n     @staticmethod\n-    def _flag_clause(flags: Optional[int], mask: Optional[int]) -> Tuple[str, Tuple]:\n+    def _flag_clause(flags: Optional[int], mask: Optional[int]) -> Tuple[str, List[int]]:\n         if flags is None:\n",
        "source_code_with_indent": "    <DED>@staticmethod\n    def _flag_clause(flags: Optional[int], mask: Optional[int]) -> Tuple[str, Tuple]:\n        <IND>if flags is None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@staticmethod\n    def _flag_clause(flags: Optional[int], mask: Optional[int]) -> Tuple[str, List[int]]:\n        <IND>if flags is None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "79e529fcac0a5ef5132e0957c602670ada44f797",
    "filename": "electrumsv/wallet_database/tables.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/wallet_database/tables.py",
    "file_hunks_size": 28,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/wallet_database/tables.py:303:8 Incompatible return type [7]: Expected `Tuple[str, typing.Tuple[typing.Any, ...]]` but got `Tuple[str, List[int]]`.",
    "message": " Expected `Tuple[str, typing.Tuple[typing.Any, ...]]` but got `Tuple[str, List[int]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 303,
    "warning_line": "        return \"(flags & ?) == ?\", [mask, flags]",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @staticmethod\n    def _flag_clause(flags: Optional[int], mask: Optional[int]) -> Tuple[str, Tuple]:\n        if flags is None:\n",
        "source_code_len": 130,
        "target_code": "    @staticmethod\n    def _flag_clause(flags: Optional[int], mask: Optional[int]) -> Tuple[str, List[int]]:\n        if flags is None:\n",
        "target_code_len": 134,
        "diff_format": "@@ -293,3 +300,3 @@\n     @staticmethod\n-    def _flag_clause(flags: Optional[int], mask: Optional[int]) -> Tuple[str, Tuple]:\n+    def _flag_clause(flags: Optional[int], mask: Optional[int]) -> Tuple[str, List[int]]:\n         if flags is None:\n",
        "source_code_with_indent": "    <DED>@staticmethod\n    def _flag_clause(flags: Optional[int], mask: Optional[int]) -> Tuple[str, Tuple]:\n        <IND>if flags is None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@staticmethod\n    def _flag_clause(flags: Optional[int], mask: Optional[int]) -> Tuple[str, List[int]]:\n        <IND>if flags is None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "79e529fcac0a5ef5132e0957c602670ada44f797",
    "filename": "electrumsv/wallet_database/tables.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/wallet_database/tables.py",
    "file_hunks_size": 28,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/wallet_database/tables.py:319:40 Incompatible parameter type [6]: Expected `typing.Sized` for 1st positional only parameter to call `len` but got `Iterable[str]`.",
    "message": " Expected `typing.Sized` for 1st positional only parameter to call `len` but got `Iterable[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 319,
    "warning_line": "        if tx_hashes is None or not len(tx_hashes):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import time\nfrom typing import Any, Dict, Iterable, NamedTuple, Optional, List, Tuple\n\n",
        "source_code_len": 87,
        "target_code": "import time\nfrom typing import Any, Dict, Iterable, NamedTuple, Optional, List, Sequence, Tuple\n\n",
        "target_code_len": 97,
        "diff_format": "@@ -5,3 +4,3 @@\n import time\n-from typing import Any, Dict, Iterable, NamedTuple, Optional, List, Tuple\n+from typing import Any, Dict, Iterable, NamedTuple, Optional, List, Sequence, Tuple\n \n",
        "source_code_with_indent": "import time\nfrom typing import Any, Dict, Iterable, NamedTuple, Optional, List, Tuple\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import time\nfrom typing import Any, Dict, Iterable, NamedTuple, Optional, List, Sequence, Tuple\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def _get_many_common(self, query: str, flags: Optional[int]=None, mask: Optional[int]=None,\n            tx_hashes: Optional[Iterable[str]]=None) -> List[Tuple[Any]]:\n        params = []\n",
        "source_code_len": 190,
        "target_code": "    def _get_many_common(self, query: str, flags: Optional[int]=None, mask: Optional[int]=None,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Any]:\n        params = []\n",
        "target_code_len": 185,
        "diff_format": "@@ -305,3 +312,3 @@\n     def _get_many_common(self, query: str, flags: Optional[int]=None, mask: Optional[int]=None,\n-            tx_hashes: Optional[Iterable[str]]=None) -> List[Tuple[Any]]:\n+            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Any]:\n         params = []\n",
        "source_code_with_indent": "    <DED>def _get_many_common(self, query: str, flags: Optional[int]=None, mask: Optional[int]=None,\n            tx_hashes: Optional[Iterable[str]]=None) -> List[Tuple[Any]]:\n        <IND>params = []\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def _get_many_common(self, query: str, flags: Optional[int]=None, mask: Optional[int]=None,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Any]:\n        <IND>params = []\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "                \"tx_hash IN ({0})\".format(\",\".join(\"?\" for k in batch_tx_hashes)))\n            cursor = self._db.execute(batch_query, params + batch_tx_hashes)\n            rows = cursor.fetchall()\n",
        "source_code_len": 197,
        "target_code": "                \"tx_hash IN ({0})\".format(\",\".join(\"?\" for k in batch_tx_hashes)))\n            cursor = self._db.execute(batch_query, params + batch_tx_hashes) # type: ignore\n            rows = cursor.fetchall()\n",
        "target_code_len": 212,
        "diff_format": "@@ -330,3 +337,3 @@\n                 \"tx_hash IN ({0})\".format(\",\".join(\"?\" for k in batch_tx_hashes)))\n-            cursor = self._db.execute(batch_query, params + batch_tx_hashes)\n+            cursor = self._db.execute(batch_query, params + batch_tx_hashes) # type: ignore\n             rows = cursor.fetchall()\n",
        "source_code_with_indent": "                \"tx_hash IN ({0})\".format(\",\".join(\"?\" for k in batch_tx_hashes)))\n            cursor = self._db.execute(batch_query, params + batch_tx_hashes)\n            rows = cursor.fetchall()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                \"tx_hash IN ({0})\".format(\",\".join(\"?\" for k in batch_tx_hashes)))\n            cursor = self._db.execute(batch_query, params + batch_tx_hashes) # type: ignore\n            rows = cursor.fetchall()\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def read(self, flags: Optional[int]=None, mask: Optional[int]=None,\n            tx_hashes: Optional[Iterable[bytes]]=None) -> List[Tuple[Optional[bytes],\n                int, int, TxData]]:\n        query = self.READ_MANY_BASE_SQL\n",
        "source_code_len": 235,
        "target_code": "\n    def read(self, flags: Optional[TxFlags]=None, mask: Optional[TxFlags]=None,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes,\n                Optional[bytes], TxFlags, TxData]]:\n        query = self.READ_MANY_BASE_SQL\n",
        "target_code_len": 249,
        "diff_format": "@@ -357,5 +364,5 @@\n \n-    def read(self, flags: Optional[int]=None, mask: Optional[int]=None,\n-            tx_hashes: Optional[Iterable[bytes]]=None) -> List[Tuple[Optional[bytes],\n-                int, int, TxData]]:\n+    def read(self, flags: Optional[TxFlags]=None, mask: Optional[TxFlags]=None,\n+            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes,\n+                Optional[bytes], TxFlags, TxData]]:\n         query = self.READ_MANY_BASE_SQL\n",
        "source_code_with_indent": "\n    <DED>def read(self, flags: Optional[int]=None, mask: Optional[int]=None,\n            tx_hashes: Optional[Iterable[bytes]]=None) -> List[Tuple[Optional[bytes],\n                int, int, TxData]]:\n        <IND>query = self.READ_MANY_BASE_SQL\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def read(self, flags: Optional[TxFlags]=None, mask: Optional[TxFlags]=None,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes,\n                Optional[bytes], TxFlags, TxData]]:\n        <IND>query = self.READ_MANY_BASE_SQL\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def read_metadata(self, flags: Optional[int]=None, mask: Optional[int]=None,\n            tx_hashes: Optional[Iterable[bytes]]=None) -> List[Tuple[bytes, int, TxData]]:\n        query = self.READ_METADATA_MANY_BASE_SQL\n",
        "source_code_len": 222,
        "target_code": "\n    def read_metadata(self, flags: Optional[TxFlags]=None, mask: Optional[TxFlags]=None,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes, TxFlags, TxData]]:\n        query = self.READ_METADATA_MANY_BASE_SQL\n",
        "target_code_len": 234,
        "diff_format": "@@ -364,4 +371,4 @@\n \n-    def read_metadata(self, flags: Optional[int]=None, mask: Optional[int]=None,\n-            tx_hashes: Optional[Iterable[bytes]]=None) -> List[Tuple[bytes, int, TxData]]:\n+    def read_metadata(self, flags: Optional[TxFlags]=None, mask: Optional[TxFlags]=None,\n+            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes, TxFlags, TxData]]:\n         query = self.READ_METADATA_MANY_BASE_SQL\n",
        "source_code_with_indent": "\n    <DED>def read_metadata(self, flags: Optional[int]=None, mask: Optional[int]=None,\n            tx_hashes: Optional[Iterable[bytes]]=None) -> List[Tuple[bytes, int, TxData]]:\n        <IND>query = self.READ_METADATA_MANY_BASE_SQL\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def read_metadata(self, flags: Optional[TxFlags]=None, mask: Optional[TxFlags]=None,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes, TxFlags, TxData]]:\n        <IND>query = self.READ_METADATA_MANY_BASE_SQL\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def read_descriptions(self,\n            tx_hashes: Optional[Iterable[bytes]]=None) -> Optional[Tuple[bytes, str]]:\n        query = self.READ_DESCRIPTION_SQL\n",
        "source_code_len": 161,
        "target_code": "    def read_descriptions(self,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes, str]]:\n        query = self.READ_DESCRIPTION_SQL\n",
        "target_code_len": 157,
        "diff_format": "@@ -371,3 +378,3 @@\n     def read_descriptions(self,\n-            tx_hashes: Optional[Iterable[bytes]]=None) -> Optional[Tuple[bytes, str]]:\n+            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes, str]]:\n         query = self.READ_DESCRIPTION_SQL\n",
        "source_code_with_indent": "    <DED>def read_descriptions(self,\n            tx_hashes: Optional[Iterable[bytes]]=None) -> Optional[Tuple[bytes, str]]:\n        <IND>query = self.READ_DESCRIPTION_SQL\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def read_descriptions(self,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes, str]]:\n        <IND>query = self.READ_DESCRIPTION_SQL\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def read_proof(self, tx_hashes: Iterable[bytes]) -> Optional[TxProof]:\n        query = self.READ_PROOF_SQL\n",
        "source_code_len": 112,
        "target_code": "\n    def read_proof(self, tx_hashes: Sequence[bytes]) -> List[Tuple[bytes, Optional[TxProof]]]:\n        query = self.READ_PROOF_SQL\n",
        "target_code_len": 132,
        "diff_format": "@@ -376,3 +383,3 @@\n \n-    def read_proof(self, tx_hashes: Iterable[bytes]) -> Optional[TxProof]:\n+    def read_proof(self, tx_hashes: Sequence[bytes]) -> List[Tuple[bytes, Optional[TxProof]]]:\n         query = self.READ_PROOF_SQL\n",
        "source_code_with_indent": "\n    <DED>def read_proof(self, tx_hashes: Iterable[bytes]) -> Optional[TxProof]:\n        <IND>query = self.READ_PROOF_SQL\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def read_proof(self, tx_hashes: Sequence[bytes]) -> List[Tuple[bytes, Optional[TxProof]]]:\n        <IND>query = self.READ_PROOF_SQL\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "79e529fcac0a5ef5132e0957c602670ada44f797",
    "filename": "electrumsv/wallet_database/tables.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/wallet_database/tables.py",
    "file_hunks_size": 28,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/wallet_database/tables.py:348:48 Incompatible parameter type [6]: Expected `TxFlags` for 2nd positional only parameter to call `TransactionTable._apply_flags` but got `int`.",
    "message": " Expected `TxFlags` for 2nd positional only parameter to call `TransactionTable._apply_flags` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 348,
    "warning_line": "            flags = self._apply_flags(metadata, flags)"
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "79e529fcac0a5ef5132e0957c602670ada44f797",
    "filename": "electrumsv/wallet_database/tables.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/wallet_database/tables.py",
    "file_hunks_size": 28,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/wallet_database/tables.py:363:65 Incompatible parameter type [6]: Expected `Optional[Iterable[str]]` for 4th positional only parameter to call `TransactionTable._get_many_common` but got `Optional[Iterable[bytes]]`.",
    "message": " Expected `Optional[Iterable[str]]` for 4th positional only parameter to call `TransactionTable._get_many_common` but got `Optional[Iterable[bytes]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 363,
    "warning_line": "            for row in self._get_many_common(query, flags, mask, tx_hashes) ]",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import time\nfrom typing import Any, Dict, Iterable, NamedTuple, Optional, List, Tuple\n\n",
        "source_code_len": 87,
        "target_code": "import time\nfrom typing import Any, Dict, Iterable, NamedTuple, Optional, List, Sequence, Tuple\n\n",
        "target_code_len": 97,
        "diff_format": "@@ -5,3 +4,3 @@\n import time\n-from typing import Any, Dict, Iterable, NamedTuple, Optional, List, Tuple\n+from typing import Any, Dict, Iterable, NamedTuple, Optional, List, Sequence, Tuple\n \n",
        "source_code_with_indent": "import time\nfrom typing import Any, Dict, Iterable, NamedTuple, Optional, List, Tuple\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import time\nfrom typing import Any, Dict, Iterable, NamedTuple, Optional, List, Sequence, Tuple\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def _get_many_common(self, query: str, flags: Optional[int]=None, mask: Optional[int]=None,\n            tx_hashes: Optional[Iterable[str]]=None) -> List[Tuple[Any]]:\n        params = []\n",
        "source_code_len": 190,
        "target_code": "    def _get_many_common(self, query: str, flags: Optional[int]=None, mask: Optional[int]=None,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Any]:\n        params = []\n",
        "target_code_len": 185,
        "diff_format": "@@ -305,3 +312,3 @@\n     def _get_many_common(self, query: str, flags: Optional[int]=None, mask: Optional[int]=None,\n-            tx_hashes: Optional[Iterable[str]]=None) -> List[Tuple[Any]]:\n+            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Any]:\n         params = []\n",
        "source_code_with_indent": "    <DED>def _get_many_common(self, query: str, flags: Optional[int]=None, mask: Optional[int]=None,\n            tx_hashes: Optional[Iterable[str]]=None) -> List[Tuple[Any]]:\n        <IND>params = []\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def _get_many_common(self, query: str, flags: Optional[int]=None, mask: Optional[int]=None,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Any]:\n        <IND>params = []\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "                \"tx_hash IN ({0})\".format(\",\".join(\"?\" for k in batch_tx_hashes)))\n            cursor = self._db.execute(batch_query, params + batch_tx_hashes)\n            rows = cursor.fetchall()\n",
        "source_code_len": 197,
        "target_code": "                \"tx_hash IN ({0})\".format(\",\".join(\"?\" for k in batch_tx_hashes)))\n            cursor = self._db.execute(batch_query, params + batch_tx_hashes) # type: ignore\n            rows = cursor.fetchall()\n",
        "target_code_len": 212,
        "diff_format": "@@ -330,3 +337,3 @@\n                 \"tx_hash IN ({0})\".format(\",\".join(\"?\" for k in batch_tx_hashes)))\n-            cursor = self._db.execute(batch_query, params + batch_tx_hashes)\n+            cursor = self._db.execute(batch_query, params + batch_tx_hashes) # type: ignore\n             rows = cursor.fetchall()\n",
        "source_code_with_indent": "                \"tx_hash IN ({0})\".format(\",\".join(\"?\" for k in batch_tx_hashes)))\n            cursor = self._db.execute(batch_query, params + batch_tx_hashes)\n            rows = cursor.fetchall()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                \"tx_hash IN ({0})\".format(\",\".join(\"?\" for k in batch_tx_hashes)))\n            cursor = self._db.execute(batch_query, params + batch_tx_hashes) # type: ignore\n            rows = cursor.fetchall()\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def read(self, flags: Optional[int]=None, mask: Optional[int]=None,\n            tx_hashes: Optional[Iterable[bytes]]=None) -> List[Tuple[Optional[bytes],\n                int, int, TxData]]:\n        query = self.READ_MANY_BASE_SQL\n",
        "source_code_len": 235,
        "target_code": "\n    def read(self, flags: Optional[TxFlags]=None, mask: Optional[TxFlags]=None,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes,\n                Optional[bytes], TxFlags, TxData]]:\n        query = self.READ_MANY_BASE_SQL\n",
        "target_code_len": 249,
        "diff_format": "@@ -357,5 +364,5 @@\n \n-    def read(self, flags: Optional[int]=None, mask: Optional[int]=None,\n-            tx_hashes: Optional[Iterable[bytes]]=None) -> List[Tuple[Optional[bytes],\n-                int, int, TxData]]:\n+    def read(self, flags: Optional[TxFlags]=None, mask: Optional[TxFlags]=None,\n+            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes,\n+                Optional[bytes], TxFlags, TxData]]:\n         query = self.READ_MANY_BASE_SQL\n",
        "source_code_with_indent": "\n    <DED>def read(self, flags: Optional[int]=None, mask: Optional[int]=None,\n            tx_hashes: Optional[Iterable[bytes]]=None) -> List[Tuple[Optional[bytes],\n                int, int, TxData]]:\n        <IND>query = self.READ_MANY_BASE_SQL\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def read(self, flags: Optional[TxFlags]=None, mask: Optional[TxFlags]=None,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes,\n                Optional[bytes], TxFlags, TxData]]:\n        <IND>query = self.READ_MANY_BASE_SQL\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def read_metadata(self, flags: Optional[int]=None, mask: Optional[int]=None,\n            tx_hashes: Optional[Iterable[bytes]]=None) -> List[Tuple[bytes, int, TxData]]:\n        query = self.READ_METADATA_MANY_BASE_SQL\n",
        "source_code_len": 222,
        "target_code": "\n    def read_metadata(self, flags: Optional[TxFlags]=None, mask: Optional[TxFlags]=None,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes, TxFlags, TxData]]:\n        query = self.READ_METADATA_MANY_BASE_SQL\n",
        "target_code_len": 234,
        "diff_format": "@@ -364,4 +371,4 @@\n \n-    def read_metadata(self, flags: Optional[int]=None, mask: Optional[int]=None,\n-            tx_hashes: Optional[Iterable[bytes]]=None) -> List[Tuple[bytes, int, TxData]]:\n+    def read_metadata(self, flags: Optional[TxFlags]=None, mask: Optional[TxFlags]=None,\n+            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes, TxFlags, TxData]]:\n         query = self.READ_METADATA_MANY_BASE_SQL\n",
        "source_code_with_indent": "\n    <DED>def read_metadata(self, flags: Optional[int]=None, mask: Optional[int]=None,\n            tx_hashes: Optional[Iterable[bytes]]=None) -> List[Tuple[bytes, int, TxData]]:\n        <IND>query = self.READ_METADATA_MANY_BASE_SQL\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def read_metadata(self, flags: Optional[TxFlags]=None, mask: Optional[TxFlags]=None,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes, TxFlags, TxData]]:\n        <IND>query = self.READ_METADATA_MANY_BASE_SQL\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def read_descriptions(self,\n            tx_hashes: Optional[Iterable[bytes]]=None) -> Optional[Tuple[bytes, str]]:\n        query = self.READ_DESCRIPTION_SQL\n",
        "source_code_len": 161,
        "target_code": "    def read_descriptions(self,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes, str]]:\n        query = self.READ_DESCRIPTION_SQL\n",
        "target_code_len": 157,
        "diff_format": "@@ -371,3 +378,3 @@\n     def read_descriptions(self,\n-            tx_hashes: Optional[Iterable[bytes]]=None) -> Optional[Tuple[bytes, str]]:\n+            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes, str]]:\n         query = self.READ_DESCRIPTION_SQL\n",
        "source_code_with_indent": "    <DED>def read_descriptions(self,\n            tx_hashes: Optional[Iterable[bytes]]=None) -> Optional[Tuple[bytes, str]]:\n        <IND>query = self.READ_DESCRIPTION_SQL\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def read_descriptions(self,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes, str]]:\n        <IND>query = self.READ_DESCRIPTION_SQL\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def read_proof(self, tx_hashes: Iterable[bytes]) -> Optional[TxProof]:\n        query = self.READ_PROOF_SQL\n",
        "source_code_len": 112,
        "target_code": "\n    def read_proof(self, tx_hashes: Sequence[bytes]) -> List[Tuple[bytes, Optional[TxProof]]]:\n        query = self.READ_PROOF_SQL\n",
        "target_code_len": 132,
        "diff_format": "@@ -376,3 +383,3 @@\n \n-    def read_proof(self, tx_hashes: Iterable[bytes]) -> Optional[TxProof]:\n+    def read_proof(self, tx_hashes: Sequence[bytes]) -> List[Tuple[bytes, Optional[TxProof]]]:\n         query = self.READ_PROOF_SQL\n",
        "source_code_with_indent": "\n    <DED>def read_proof(self, tx_hashes: Iterable[bytes]) -> Optional[TxProof]:\n        <IND>query = self.READ_PROOF_SQL\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def read_proof(self, tx_hashes: Sequence[bytes]) -> List[Tuple[bytes, Optional[TxProof]]]:\n        <IND>query = self.READ_PROOF_SQL\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "79e529fcac0a5ef5132e0957c602670ada44f797",
    "filename": "electrumsv/wallet_database/tables.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/wallet_database/tables.py",
    "file_hunks_size": 28,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/wallet_database/tables.py:369:65 Incompatible parameter type [6]: Expected `Optional[Iterable[str]]` for 4th positional only parameter to call `TransactionTable._get_many_common` but got `Optional[Iterable[bytes]]`.",
    "message": " Expected `Optional[Iterable[str]]` for 4th positional only parameter to call `TransactionTable._get_many_common` but got `Optional[Iterable[bytes]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 369,
    "warning_line": "            for row in self._get_many_common(query, flags, mask, tx_hashes) ]",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import time\nfrom typing import Any, Dict, Iterable, NamedTuple, Optional, List, Tuple\n\n",
        "source_code_len": 87,
        "target_code": "import time\nfrom typing import Any, Dict, Iterable, NamedTuple, Optional, List, Sequence, Tuple\n\n",
        "target_code_len": 97,
        "diff_format": "@@ -5,3 +4,3 @@\n import time\n-from typing import Any, Dict, Iterable, NamedTuple, Optional, List, Tuple\n+from typing import Any, Dict, Iterable, NamedTuple, Optional, List, Sequence, Tuple\n \n",
        "source_code_with_indent": "import time\nfrom typing import Any, Dict, Iterable, NamedTuple, Optional, List, Tuple\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import time\nfrom typing import Any, Dict, Iterable, NamedTuple, Optional, List, Sequence, Tuple\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def _get_many_common(self, query: str, flags: Optional[int]=None, mask: Optional[int]=None,\n            tx_hashes: Optional[Iterable[str]]=None) -> List[Tuple[Any]]:\n        params = []\n",
        "source_code_len": 190,
        "target_code": "    def _get_many_common(self, query: str, flags: Optional[int]=None, mask: Optional[int]=None,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Any]:\n        params = []\n",
        "target_code_len": 185,
        "diff_format": "@@ -305,3 +312,3 @@\n     def _get_many_common(self, query: str, flags: Optional[int]=None, mask: Optional[int]=None,\n-            tx_hashes: Optional[Iterable[str]]=None) -> List[Tuple[Any]]:\n+            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Any]:\n         params = []\n",
        "source_code_with_indent": "    <DED>def _get_many_common(self, query: str, flags: Optional[int]=None, mask: Optional[int]=None,\n            tx_hashes: Optional[Iterable[str]]=None) -> List[Tuple[Any]]:\n        <IND>params = []\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def _get_many_common(self, query: str, flags: Optional[int]=None, mask: Optional[int]=None,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Any]:\n        <IND>params = []\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "                \"tx_hash IN ({0})\".format(\",\".join(\"?\" for k in batch_tx_hashes)))\n            cursor = self._db.execute(batch_query, params + batch_tx_hashes)\n            rows = cursor.fetchall()\n",
        "source_code_len": 197,
        "target_code": "                \"tx_hash IN ({0})\".format(\",\".join(\"?\" for k in batch_tx_hashes)))\n            cursor = self._db.execute(batch_query, params + batch_tx_hashes) # type: ignore\n            rows = cursor.fetchall()\n",
        "target_code_len": 212,
        "diff_format": "@@ -330,3 +337,3 @@\n                 \"tx_hash IN ({0})\".format(\",\".join(\"?\" for k in batch_tx_hashes)))\n-            cursor = self._db.execute(batch_query, params + batch_tx_hashes)\n+            cursor = self._db.execute(batch_query, params + batch_tx_hashes) # type: ignore\n             rows = cursor.fetchall()\n",
        "source_code_with_indent": "                \"tx_hash IN ({0})\".format(\",\".join(\"?\" for k in batch_tx_hashes)))\n            cursor = self._db.execute(batch_query, params + batch_tx_hashes)\n            rows = cursor.fetchall()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                \"tx_hash IN ({0})\".format(\",\".join(\"?\" for k in batch_tx_hashes)))\n            cursor = self._db.execute(batch_query, params + batch_tx_hashes) # type: ignore\n            rows = cursor.fetchall()\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def read(self, flags: Optional[int]=None, mask: Optional[int]=None,\n            tx_hashes: Optional[Iterable[bytes]]=None) -> List[Tuple[Optional[bytes],\n                int, int, TxData]]:\n        query = self.READ_MANY_BASE_SQL\n",
        "source_code_len": 235,
        "target_code": "\n    def read(self, flags: Optional[TxFlags]=None, mask: Optional[TxFlags]=None,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes,\n                Optional[bytes], TxFlags, TxData]]:\n        query = self.READ_MANY_BASE_SQL\n",
        "target_code_len": 249,
        "diff_format": "@@ -357,5 +364,5 @@\n \n-    def read(self, flags: Optional[int]=None, mask: Optional[int]=None,\n-            tx_hashes: Optional[Iterable[bytes]]=None) -> List[Tuple[Optional[bytes],\n-                int, int, TxData]]:\n+    def read(self, flags: Optional[TxFlags]=None, mask: Optional[TxFlags]=None,\n+            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes,\n+                Optional[bytes], TxFlags, TxData]]:\n         query = self.READ_MANY_BASE_SQL\n",
        "source_code_with_indent": "\n    <DED>def read(self, flags: Optional[int]=None, mask: Optional[int]=None,\n            tx_hashes: Optional[Iterable[bytes]]=None) -> List[Tuple[Optional[bytes],\n                int, int, TxData]]:\n        <IND>query = self.READ_MANY_BASE_SQL\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def read(self, flags: Optional[TxFlags]=None, mask: Optional[TxFlags]=None,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes,\n                Optional[bytes], TxFlags, TxData]]:\n        <IND>query = self.READ_MANY_BASE_SQL\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def read_metadata(self, flags: Optional[int]=None, mask: Optional[int]=None,\n            tx_hashes: Optional[Iterable[bytes]]=None) -> List[Tuple[bytes, int, TxData]]:\n        query = self.READ_METADATA_MANY_BASE_SQL\n",
        "source_code_len": 222,
        "target_code": "\n    def read_metadata(self, flags: Optional[TxFlags]=None, mask: Optional[TxFlags]=None,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes, TxFlags, TxData]]:\n        query = self.READ_METADATA_MANY_BASE_SQL\n",
        "target_code_len": 234,
        "diff_format": "@@ -364,4 +371,4 @@\n \n-    def read_metadata(self, flags: Optional[int]=None, mask: Optional[int]=None,\n-            tx_hashes: Optional[Iterable[bytes]]=None) -> List[Tuple[bytes, int, TxData]]:\n+    def read_metadata(self, flags: Optional[TxFlags]=None, mask: Optional[TxFlags]=None,\n+            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes, TxFlags, TxData]]:\n         query = self.READ_METADATA_MANY_BASE_SQL\n",
        "source_code_with_indent": "\n    <DED>def read_metadata(self, flags: Optional[int]=None, mask: Optional[int]=None,\n            tx_hashes: Optional[Iterable[bytes]]=None) -> List[Tuple[bytes, int, TxData]]:\n        <IND>query = self.READ_METADATA_MANY_BASE_SQL\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def read_metadata(self, flags: Optional[TxFlags]=None, mask: Optional[TxFlags]=None,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes, TxFlags, TxData]]:\n        <IND>query = self.READ_METADATA_MANY_BASE_SQL\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def read_descriptions(self,\n            tx_hashes: Optional[Iterable[bytes]]=None) -> Optional[Tuple[bytes, str]]:\n        query = self.READ_DESCRIPTION_SQL\n",
        "source_code_len": 161,
        "target_code": "    def read_descriptions(self,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes, str]]:\n        query = self.READ_DESCRIPTION_SQL\n",
        "target_code_len": 157,
        "diff_format": "@@ -371,3 +378,3 @@\n     def read_descriptions(self,\n-            tx_hashes: Optional[Iterable[bytes]]=None) -> Optional[Tuple[bytes, str]]:\n+            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes, str]]:\n         query = self.READ_DESCRIPTION_SQL\n",
        "source_code_with_indent": "    <DED>def read_descriptions(self,\n            tx_hashes: Optional[Iterable[bytes]]=None) -> Optional[Tuple[bytes, str]]:\n        <IND>query = self.READ_DESCRIPTION_SQL\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def read_descriptions(self,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes, str]]:\n        <IND>query = self.READ_DESCRIPTION_SQL\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def read_proof(self, tx_hashes: Iterable[bytes]) -> Optional[TxProof]:\n        query = self.READ_PROOF_SQL\n",
        "source_code_len": 112,
        "target_code": "\n    def read_proof(self, tx_hashes: Sequence[bytes]) -> List[Tuple[bytes, Optional[TxProof]]]:\n        query = self.READ_PROOF_SQL\n",
        "target_code_len": 132,
        "diff_format": "@@ -376,3 +383,3 @@\n \n-    def read_proof(self, tx_hashes: Iterable[bytes]) -> Optional[TxProof]:\n+    def read_proof(self, tx_hashes: Sequence[bytes]) -> List[Tuple[bytes, Optional[TxProof]]]:\n         query = self.READ_PROOF_SQL\n",
        "source_code_with_indent": "\n    <DED>def read_proof(self, tx_hashes: Iterable[bytes]) -> Optional[TxProof]:\n        <IND>query = self.READ_PROOF_SQL\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def read_proof(self, tx_hashes: Sequence[bytes]) -> List[Tuple[bytes, Optional[TxProof]]]:\n        <IND>query = self.READ_PROOF_SQL\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "79e529fcac0a5ef5132e0957c602670ada44f797",
    "filename": "electrumsv/wallet_database/tables.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/wallet_database/tables.py",
    "file_hunks_size": 28,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/wallet_database/tables.py:375:8 Incompatible return type [7]: Expected `Optional[Tuple[bytes, str]]` but got `List[Tuple[typing.Any]]`.",
    "message": " Expected `Optional[Tuple[bytes, str]]` but got `List[Tuple[typing.Any]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 375,
    "warning_line": "        return self._get_many_common(query, None, None, tx_hashes)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import time\nfrom typing import Any, Dict, Iterable, NamedTuple, Optional, List, Tuple\n\n",
        "source_code_len": 87,
        "target_code": "import time\nfrom typing import Any, Dict, Iterable, NamedTuple, Optional, List, Sequence, Tuple\n\n",
        "target_code_len": 97,
        "diff_format": "@@ -5,3 +4,3 @@\n import time\n-from typing import Any, Dict, Iterable, NamedTuple, Optional, List, Tuple\n+from typing import Any, Dict, Iterable, NamedTuple, Optional, List, Sequence, Tuple\n \n",
        "source_code_with_indent": "import time\nfrom typing import Any, Dict, Iterable, NamedTuple, Optional, List, Tuple\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import time\nfrom typing import Any, Dict, Iterable, NamedTuple, Optional, List, Sequence, Tuple\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def _get_many_common(self, query: str, flags: Optional[int]=None, mask: Optional[int]=None,\n            tx_hashes: Optional[Iterable[str]]=None) -> List[Tuple[Any]]:\n        params = []\n",
        "source_code_len": 190,
        "target_code": "    def _get_many_common(self, query: str, flags: Optional[int]=None, mask: Optional[int]=None,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Any]:\n        params = []\n",
        "target_code_len": 185,
        "diff_format": "@@ -305,3 +312,3 @@\n     def _get_many_common(self, query: str, flags: Optional[int]=None, mask: Optional[int]=None,\n-            tx_hashes: Optional[Iterable[str]]=None) -> List[Tuple[Any]]:\n+            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Any]:\n         params = []\n",
        "source_code_with_indent": "    <DED>def _get_many_common(self, query: str, flags: Optional[int]=None, mask: Optional[int]=None,\n            tx_hashes: Optional[Iterable[str]]=None) -> List[Tuple[Any]]:\n        <IND>params = []\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def _get_many_common(self, query: str, flags: Optional[int]=None, mask: Optional[int]=None,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Any]:\n        <IND>params = []\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "                \"tx_hash IN ({0})\".format(\",\".join(\"?\" for k in batch_tx_hashes)))\n            cursor = self._db.execute(batch_query, params + batch_tx_hashes)\n            rows = cursor.fetchall()\n",
        "source_code_len": 197,
        "target_code": "                \"tx_hash IN ({0})\".format(\",\".join(\"?\" for k in batch_tx_hashes)))\n            cursor = self._db.execute(batch_query, params + batch_tx_hashes) # type: ignore\n            rows = cursor.fetchall()\n",
        "target_code_len": 212,
        "diff_format": "@@ -330,3 +337,3 @@\n                 \"tx_hash IN ({0})\".format(\",\".join(\"?\" for k in batch_tx_hashes)))\n-            cursor = self._db.execute(batch_query, params + batch_tx_hashes)\n+            cursor = self._db.execute(batch_query, params + batch_tx_hashes) # type: ignore\n             rows = cursor.fetchall()\n",
        "source_code_with_indent": "                \"tx_hash IN ({0})\".format(\",\".join(\"?\" for k in batch_tx_hashes)))\n            cursor = self._db.execute(batch_query, params + batch_tx_hashes)\n            rows = cursor.fetchall()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                \"tx_hash IN ({0})\".format(\",\".join(\"?\" for k in batch_tx_hashes)))\n            cursor = self._db.execute(batch_query, params + batch_tx_hashes) # type: ignore\n            rows = cursor.fetchall()\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def read(self, flags: Optional[int]=None, mask: Optional[int]=None,\n            tx_hashes: Optional[Iterable[bytes]]=None) -> List[Tuple[Optional[bytes],\n                int, int, TxData]]:\n        query = self.READ_MANY_BASE_SQL\n",
        "source_code_len": 235,
        "target_code": "\n    def read(self, flags: Optional[TxFlags]=None, mask: Optional[TxFlags]=None,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes,\n                Optional[bytes], TxFlags, TxData]]:\n        query = self.READ_MANY_BASE_SQL\n",
        "target_code_len": 249,
        "diff_format": "@@ -357,5 +364,5 @@\n \n-    def read(self, flags: Optional[int]=None, mask: Optional[int]=None,\n-            tx_hashes: Optional[Iterable[bytes]]=None) -> List[Tuple[Optional[bytes],\n-                int, int, TxData]]:\n+    def read(self, flags: Optional[TxFlags]=None, mask: Optional[TxFlags]=None,\n+            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes,\n+                Optional[bytes], TxFlags, TxData]]:\n         query = self.READ_MANY_BASE_SQL\n",
        "source_code_with_indent": "\n    <DED>def read(self, flags: Optional[int]=None, mask: Optional[int]=None,\n            tx_hashes: Optional[Iterable[bytes]]=None) -> List[Tuple[Optional[bytes],\n                int, int, TxData]]:\n        <IND>query = self.READ_MANY_BASE_SQL\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def read(self, flags: Optional[TxFlags]=None, mask: Optional[TxFlags]=None,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes,\n                Optional[bytes], TxFlags, TxData]]:\n        <IND>query = self.READ_MANY_BASE_SQL\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def read_metadata(self, flags: Optional[int]=None, mask: Optional[int]=None,\n            tx_hashes: Optional[Iterable[bytes]]=None) -> List[Tuple[bytes, int, TxData]]:\n        query = self.READ_METADATA_MANY_BASE_SQL\n",
        "source_code_len": 222,
        "target_code": "\n    def read_metadata(self, flags: Optional[TxFlags]=None, mask: Optional[TxFlags]=None,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes, TxFlags, TxData]]:\n        query = self.READ_METADATA_MANY_BASE_SQL\n",
        "target_code_len": 234,
        "diff_format": "@@ -364,4 +371,4 @@\n \n-    def read_metadata(self, flags: Optional[int]=None, mask: Optional[int]=None,\n-            tx_hashes: Optional[Iterable[bytes]]=None) -> List[Tuple[bytes, int, TxData]]:\n+    def read_metadata(self, flags: Optional[TxFlags]=None, mask: Optional[TxFlags]=None,\n+            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes, TxFlags, TxData]]:\n         query = self.READ_METADATA_MANY_BASE_SQL\n",
        "source_code_with_indent": "\n    <DED>def read_metadata(self, flags: Optional[int]=None, mask: Optional[int]=None,\n            tx_hashes: Optional[Iterable[bytes]]=None) -> List[Tuple[bytes, int, TxData]]:\n        <IND>query = self.READ_METADATA_MANY_BASE_SQL\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def read_metadata(self, flags: Optional[TxFlags]=None, mask: Optional[TxFlags]=None,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes, TxFlags, TxData]]:\n        <IND>query = self.READ_METADATA_MANY_BASE_SQL\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def read_descriptions(self,\n            tx_hashes: Optional[Iterable[bytes]]=None) -> Optional[Tuple[bytes, str]]:\n        query = self.READ_DESCRIPTION_SQL\n",
        "source_code_len": 161,
        "target_code": "    def read_descriptions(self,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes, str]]:\n        query = self.READ_DESCRIPTION_SQL\n",
        "target_code_len": 157,
        "diff_format": "@@ -371,3 +378,3 @@\n     def read_descriptions(self,\n-            tx_hashes: Optional[Iterable[bytes]]=None) -> Optional[Tuple[bytes, str]]:\n+            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes, str]]:\n         query = self.READ_DESCRIPTION_SQL\n",
        "source_code_with_indent": "    <DED>def read_descriptions(self,\n            tx_hashes: Optional[Iterable[bytes]]=None) -> Optional[Tuple[bytes, str]]:\n        <IND>query = self.READ_DESCRIPTION_SQL\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def read_descriptions(self,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes, str]]:\n        <IND>query = self.READ_DESCRIPTION_SQL\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def read_proof(self, tx_hashes: Iterable[bytes]) -> Optional[TxProof]:\n        query = self.READ_PROOF_SQL\n",
        "source_code_len": 112,
        "target_code": "\n    def read_proof(self, tx_hashes: Sequence[bytes]) -> List[Tuple[bytes, Optional[TxProof]]]:\n        query = self.READ_PROOF_SQL\n",
        "target_code_len": 132,
        "diff_format": "@@ -376,3 +383,3 @@\n \n-    def read_proof(self, tx_hashes: Iterable[bytes]) -> Optional[TxProof]:\n+    def read_proof(self, tx_hashes: Sequence[bytes]) -> List[Tuple[bytes, Optional[TxProof]]]:\n         query = self.READ_PROOF_SQL\n",
        "source_code_with_indent": "\n    <DED>def read_proof(self, tx_hashes: Iterable[bytes]) -> Optional[TxProof]:\n        <IND>query = self.READ_PROOF_SQL\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def read_proof(self, tx_hashes: Sequence[bytes]) -> List[Tuple[bytes, Optional[TxProof]]]:\n        <IND>query = self.READ_PROOF_SQL\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "79e529fcac0a5ef5132e0957c602670ada44f797",
    "filename": "electrumsv/wallet_database/tables.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/wallet_database/tables.py",
    "file_hunks_size": 28,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/wallet_database/tables.py:375:56 Incompatible parameter type [6]: Expected `Optional[Iterable[str]]` for 4th positional only parameter to call `TransactionTable._get_many_common` but got `Optional[Iterable[bytes]]`.",
    "message": " Expected `Optional[Iterable[str]]` for 4th positional only parameter to call `TransactionTable._get_many_common` but got `Optional[Iterable[bytes]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 375,
    "warning_line": "        return self._get_many_common(query, None, None, tx_hashes)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import time\nfrom typing import Any, Dict, Iterable, NamedTuple, Optional, List, Tuple\n\n",
        "source_code_len": 87,
        "target_code": "import time\nfrom typing import Any, Dict, Iterable, NamedTuple, Optional, List, Sequence, Tuple\n\n",
        "target_code_len": 97,
        "diff_format": "@@ -5,3 +4,3 @@\n import time\n-from typing import Any, Dict, Iterable, NamedTuple, Optional, List, Tuple\n+from typing import Any, Dict, Iterable, NamedTuple, Optional, List, Sequence, Tuple\n \n",
        "source_code_with_indent": "import time\nfrom typing import Any, Dict, Iterable, NamedTuple, Optional, List, Tuple\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import time\nfrom typing import Any, Dict, Iterable, NamedTuple, Optional, List, Sequence, Tuple\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def _get_many_common(self, query: str, flags: Optional[int]=None, mask: Optional[int]=None,\n            tx_hashes: Optional[Iterable[str]]=None) -> List[Tuple[Any]]:\n        params = []\n",
        "source_code_len": 190,
        "target_code": "    def _get_many_common(self, query: str, flags: Optional[int]=None, mask: Optional[int]=None,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Any]:\n        params = []\n",
        "target_code_len": 185,
        "diff_format": "@@ -305,3 +312,3 @@\n     def _get_many_common(self, query: str, flags: Optional[int]=None, mask: Optional[int]=None,\n-            tx_hashes: Optional[Iterable[str]]=None) -> List[Tuple[Any]]:\n+            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Any]:\n         params = []\n",
        "source_code_with_indent": "    <DED>def _get_many_common(self, query: str, flags: Optional[int]=None, mask: Optional[int]=None,\n            tx_hashes: Optional[Iterable[str]]=None) -> List[Tuple[Any]]:\n        <IND>params = []\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def _get_many_common(self, query: str, flags: Optional[int]=None, mask: Optional[int]=None,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Any]:\n        <IND>params = []\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "                \"tx_hash IN ({0})\".format(\",\".join(\"?\" for k in batch_tx_hashes)))\n            cursor = self._db.execute(batch_query, params + batch_tx_hashes)\n            rows = cursor.fetchall()\n",
        "source_code_len": 197,
        "target_code": "                \"tx_hash IN ({0})\".format(\",\".join(\"?\" for k in batch_tx_hashes)))\n            cursor = self._db.execute(batch_query, params + batch_tx_hashes) # type: ignore\n            rows = cursor.fetchall()\n",
        "target_code_len": 212,
        "diff_format": "@@ -330,3 +337,3 @@\n                 \"tx_hash IN ({0})\".format(\",\".join(\"?\" for k in batch_tx_hashes)))\n-            cursor = self._db.execute(batch_query, params + batch_tx_hashes)\n+            cursor = self._db.execute(batch_query, params + batch_tx_hashes) # type: ignore\n             rows = cursor.fetchall()\n",
        "source_code_with_indent": "                \"tx_hash IN ({0})\".format(\",\".join(\"?\" for k in batch_tx_hashes)))\n            cursor = self._db.execute(batch_query, params + batch_tx_hashes)\n            rows = cursor.fetchall()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                \"tx_hash IN ({0})\".format(\",\".join(\"?\" for k in batch_tx_hashes)))\n            cursor = self._db.execute(batch_query, params + batch_tx_hashes) # type: ignore\n            rows = cursor.fetchall()\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def read(self, flags: Optional[int]=None, mask: Optional[int]=None,\n            tx_hashes: Optional[Iterable[bytes]]=None) -> List[Tuple[Optional[bytes],\n                int, int, TxData]]:\n        query = self.READ_MANY_BASE_SQL\n",
        "source_code_len": 235,
        "target_code": "\n    def read(self, flags: Optional[TxFlags]=None, mask: Optional[TxFlags]=None,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes,\n                Optional[bytes], TxFlags, TxData]]:\n        query = self.READ_MANY_BASE_SQL\n",
        "target_code_len": 249,
        "diff_format": "@@ -357,5 +364,5 @@\n \n-    def read(self, flags: Optional[int]=None, mask: Optional[int]=None,\n-            tx_hashes: Optional[Iterable[bytes]]=None) -> List[Tuple[Optional[bytes],\n-                int, int, TxData]]:\n+    def read(self, flags: Optional[TxFlags]=None, mask: Optional[TxFlags]=None,\n+            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes,\n+                Optional[bytes], TxFlags, TxData]]:\n         query = self.READ_MANY_BASE_SQL\n",
        "source_code_with_indent": "\n    <DED>def read(self, flags: Optional[int]=None, mask: Optional[int]=None,\n            tx_hashes: Optional[Iterable[bytes]]=None) -> List[Tuple[Optional[bytes],\n                int, int, TxData]]:\n        <IND>query = self.READ_MANY_BASE_SQL\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def read(self, flags: Optional[TxFlags]=None, mask: Optional[TxFlags]=None,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes,\n                Optional[bytes], TxFlags, TxData]]:\n        <IND>query = self.READ_MANY_BASE_SQL\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def read_metadata(self, flags: Optional[int]=None, mask: Optional[int]=None,\n            tx_hashes: Optional[Iterable[bytes]]=None) -> List[Tuple[bytes, int, TxData]]:\n        query = self.READ_METADATA_MANY_BASE_SQL\n",
        "source_code_len": 222,
        "target_code": "\n    def read_metadata(self, flags: Optional[TxFlags]=None, mask: Optional[TxFlags]=None,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes, TxFlags, TxData]]:\n        query = self.READ_METADATA_MANY_BASE_SQL\n",
        "target_code_len": 234,
        "diff_format": "@@ -364,4 +371,4 @@\n \n-    def read_metadata(self, flags: Optional[int]=None, mask: Optional[int]=None,\n-            tx_hashes: Optional[Iterable[bytes]]=None) -> List[Tuple[bytes, int, TxData]]:\n+    def read_metadata(self, flags: Optional[TxFlags]=None, mask: Optional[TxFlags]=None,\n+            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes, TxFlags, TxData]]:\n         query = self.READ_METADATA_MANY_BASE_SQL\n",
        "source_code_with_indent": "\n    <DED>def read_metadata(self, flags: Optional[int]=None, mask: Optional[int]=None,\n            tx_hashes: Optional[Iterable[bytes]]=None) -> List[Tuple[bytes, int, TxData]]:\n        <IND>query = self.READ_METADATA_MANY_BASE_SQL\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def read_metadata(self, flags: Optional[TxFlags]=None, mask: Optional[TxFlags]=None,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes, TxFlags, TxData]]:\n        <IND>query = self.READ_METADATA_MANY_BASE_SQL\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def read_descriptions(self,\n            tx_hashes: Optional[Iterable[bytes]]=None) -> Optional[Tuple[bytes, str]]:\n        query = self.READ_DESCRIPTION_SQL\n",
        "source_code_len": 161,
        "target_code": "    def read_descriptions(self,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes, str]]:\n        query = self.READ_DESCRIPTION_SQL\n",
        "target_code_len": 157,
        "diff_format": "@@ -371,3 +378,3 @@\n     def read_descriptions(self,\n-            tx_hashes: Optional[Iterable[bytes]]=None) -> Optional[Tuple[bytes, str]]:\n+            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes, str]]:\n         query = self.READ_DESCRIPTION_SQL\n",
        "source_code_with_indent": "    <DED>def read_descriptions(self,\n            tx_hashes: Optional[Iterable[bytes]]=None) -> Optional[Tuple[bytes, str]]:\n        <IND>query = self.READ_DESCRIPTION_SQL\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def read_descriptions(self,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes, str]]:\n        <IND>query = self.READ_DESCRIPTION_SQL\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def read_proof(self, tx_hashes: Iterable[bytes]) -> Optional[TxProof]:\n        query = self.READ_PROOF_SQL\n",
        "source_code_len": 112,
        "target_code": "\n    def read_proof(self, tx_hashes: Sequence[bytes]) -> List[Tuple[bytes, Optional[TxProof]]]:\n        query = self.READ_PROOF_SQL\n",
        "target_code_len": 132,
        "diff_format": "@@ -376,3 +383,3 @@\n \n-    def read_proof(self, tx_hashes: Iterable[bytes]) -> Optional[TxProof]:\n+    def read_proof(self, tx_hashes: Sequence[bytes]) -> List[Tuple[bytes, Optional[TxProof]]]:\n         query = self.READ_PROOF_SQL\n",
        "source_code_with_indent": "\n    <DED>def read_proof(self, tx_hashes: Iterable[bytes]) -> Optional[TxProof]:\n        <IND>query = self.READ_PROOF_SQL\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def read_proof(self, tx_hashes: Sequence[bytes]) -> List[Tuple[bytes, Optional[TxProof]]]:\n        <IND>query = self.READ_PROOF_SQL\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "79e529fcac0a5ef5132e0957c602670ada44f797",
    "filename": "electrumsv/wallet_database/tables.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/wallet_database/tables.py",
    "file_hunks_size": 28,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/wallet_database/tables.py:379:8 Incompatible return type [7]: Expected `Optional[TxProof]` but got `List[Tuple[typing.Any, Optional[TxProof]]]`.",
    "message": " Expected `Optional[TxProof]` but got `List[Tuple[typing.Any, Optional[TxProof]]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 379,
    "warning_line": "        return [ (row[0], self._unpack_proof(row[1]) if row[1] is not None else None)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import time\nfrom typing import Any, Dict, Iterable, NamedTuple, Optional, List, Tuple\n\n",
        "source_code_len": 87,
        "target_code": "import time\nfrom typing import Any, Dict, Iterable, NamedTuple, Optional, List, Sequence, Tuple\n\n",
        "target_code_len": 97,
        "diff_format": "@@ -5,3 +4,3 @@\n import time\n-from typing import Any, Dict, Iterable, NamedTuple, Optional, List, Tuple\n+from typing import Any, Dict, Iterable, NamedTuple, Optional, List, Sequence, Tuple\n \n",
        "source_code_with_indent": "import time\nfrom typing import Any, Dict, Iterable, NamedTuple, Optional, List, Tuple\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import time\nfrom typing import Any, Dict, Iterable, NamedTuple, Optional, List, Sequence, Tuple\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def _get_many_common(self, query: str, flags: Optional[int]=None, mask: Optional[int]=None,\n            tx_hashes: Optional[Iterable[str]]=None) -> List[Tuple[Any]]:\n        params = []\n",
        "source_code_len": 190,
        "target_code": "    def _get_many_common(self, query: str, flags: Optional[int]=None, mask: Optional[int]=None,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Any]:\n        params = []\n",
        "target_code_len": 185,
        "diff_format": "@@ -305,3 +312,3 @@\n     def _get_many_common(self, query: str, flags: Optional[int]=None, mask: Optional[int]=None,\n-            tx_hashes: Optional[Iterable[str]]=None) -> List[Tuple[Any]]:\n+            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Any]:\n         params = []\n",
        "source_code_with_indent": "    <DED>def _get_many_common(self, query: str, flags: Optional[int]=None, mask: Optional[int]=None,\n            tx_hashes: Optional[Iterable[str]]=None) -> List[Tuple[Any]]:\n        <IND>params = []\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def _get_many_common(self, query: str, flags: Optional[int]=None, mask: Optional[int]=None,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Any]:\n        <IND>params = []\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "                \"tx_hash IN ({0})\".format(\",\".join(\"?\" for k in batch_tx_hashes)))\n            cursor = self._db.execute(batch_query, params + batch_tx_hashes)\n            rows = cursor.fetchall()\n",
        "source_code_len": 197,
        "target_code": "                \"tx_hash IN ({0})\".format(\",\".join(\"?\" for k in batch_tx_hashes)))\n            cursor = self._db.execute(batch_query, params + batch_tx_hashes) # type: ignore\n            rows = cursor.fetchall()\n",
        "target_code_len": 212,
        "diff_format": "@@ -330,3 +337,3 @@\n                 \"tx_hash IN ({0})\".format(\",\".join(\"?\" for k in batch_tx_hashes)))\n-            cursor = self._db.execute(batch_query, params + batch_tx_hashes)\n+            cursor = self._db.execute(batch_query, params + batch_tx_hashes) # type: ignore\n             rows = cursor.fetchall()\n",
        "source_code_with_indent": "                \"tx_hash IN ({0})\".format(\",\".join(\"?\" for k in batch_tx_hashes)))\n            cursor = self._db.execute(batch_query, params + batch_tx_hashes)\n            rows = cursor.fetchall()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                \"tx_hash IN ({0})\".format(\",\".join(\"?\" for k in batch_tx_hashes)))\n            cursor = self._db.execute(batch_query, params + batch_tx_hashes) # type: ignore\n            rows = cursor.fetchall()\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def read(self, flags: Optional[int]=None, mask: Optional[int]=None,\n            tx_hashes: Optional[Iterable[bytes]]=None) -> List[Tuple[Optional[bytes],\n                int, int, TxData]]:\n        query = self.READ_MANY_BASE_SQL\n",
        "source_code_len": 235,
        "target_code": "\n    def read(self, flags: Optional[TxFlags]=None, mask: Optional[TxFlags]=None,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes,\n                Optional[bytes], TxFlags, TxData]]:\n        query = self.READ_MANY_BASE_SQL\n",
        "target_code_len": 249,
        "diff_format": "@@ -357,5 +364,5 @@\n \n-    def read(self, flags: Optional[int]=None, mask: Optional[int]=None,\n-            tx_hashes: Optional[Iterable[bytes]]=None) -> List[Tuple[Optional[bytes],\n-                int, int, TxData]]:\n+    def read(self, flags: Optional[TxFlags]=None, mask: Optional[TxFlags]=None,\n+            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes,\n+                Optional[bytes], TxFlags, TxData]]:\n         query = self.READ_MANY_BASE_SQL\n",
        "source_code_with_indent": "\n    <DED>def read(self, flags: Optional[int]=None, mask: Optional[int]=None,\n            tx_hashes: Optional[Iterable[bytes]]=None) -> List[Tuple[Optional[bytes],\n                int, int, TxData]]:\n        <IND>query = self.READ_MANY_BASE_SQL\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def read(self, flags: Optional[TxFlags]=None, mask: Optional[TxFlags]=None,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes,\n                Optional[bytes], TxFlags, TxData]]:\n        <IND>query = self.READ_MANY_BASE_SQL\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def read_metadata(self, flags: Optional[int]=None, mask: Optional[int]=None,\n            tx_hashes: Optional[Iterable[bytes]]=None) -> List[Tuple[bytes, int, TxData]]:\n        query = self.READ_METADATA_MANY_BASE_SQL\n",
        "source_code_len": 222,
        "target_code": "\n    def read_metadata(self, flags: Optional[TxFlags]=None, mask: Optional[TxFlags]=None,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes, TxFlags, TxData]]:\n        query = self.READ_METADATA_MANY_BASE_SQL\n",
        "target_code_len": 234,
        "diff_format": "@@ -364,4 +371,4 @@\n \n-    def read_metadata(self, flags: Optional[int]=None, mask: Optional[int]=None,\n-            tx_hashes: Optional[Iterable[bytes]]=None) -> List[Tuple[bytes, int, TxData]]:\n+    def read_metadata(self, flags: Optional[TxFlags]=None, mask: Optional[TxFlags]=None,\n+            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes, TxFlags, TxData]]:\n         query = self.READ_METADATA_MANY_BASE_SQL\n",
        "source_code_with_indent": "\n    <DED>def read_metadata(self, flags: Optional[int]=None, mask: Optional[int]=None,\n            tx_hashes: Optional[Iterable[bytes]]=None) -> List[Tuple[bytes, int, TxData]]:\n        <IND>query = self.READ_METADATA_MANY_BASE_SQL\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def read_metadata(self, flags: Optional[TxFlags]=None, mask: Optional[TxFlags]=None,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes, TxFlags, TxData]]:\n        <IND>query = self.READ_METADATA_MANY_BASE_SQL\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def read_descriptions(self,\n            tx_hashes: Optional[Iterable[bytes]]=None) -> Optional[Tuple[bytes, str]]:\n        query = self.READ_DESCRIPTION_SQL\n",
        "source_code_len": 161,
        "target_code": "    def read_descriptions(self,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes, str]]:\n        query = self.READ_DESCRIPTION_SQL\n",
        "target_code_len": 157,
        "diff_format": "@@ -371,3 +378,3 @@\n     def read_descriptions(self,\n-            tx_hashes: Optional[Iterable[bytes]]=None) -> Optional[Tuple[bytes, str]]:\n+            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes, str]]:\n         query = self.READ_DESCRIPTION_SQL\n",
        "source_code_with_indent": "    <DED>def read_descriptions(self,\n            tx_hashes: Optional[Iterable[bytes]]=None) -> Optional[Tuple[bytes, str]]:\n        <IND>query = self.READ_DESCRIPTION_SQL\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def read_descriptions(self,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes, str]]:\n        <IND>query = self.READ_DESCRIPTION_SQL\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def read_proof(self, tx_hashes: Iterable[bytes]) -> Optional[TxProof]:\n        query = self.READ_PROOF_SQL\n",
        "source_code_len": 112,
        "target_code": "\n    def read_proof(self, tx_hashes: Sequence[bytes]) -> List[Tuple[bytes, Optional[TxProof]]]:\n        query = self.READ_PROOF_SQL\n",
        "target_code_len": 132,
        "diff_format": "@@ -376,3 +383,3 @@\n \n-    def read_proof(self, tx_hashes: Iterable[bytes]) -> Optional[TxProof]:\n+    def read_proof(self, tx_hashes: Sequence[bytes]) -> List[Tuple[bytes, Optional[TxProof]]]:\n         query = self.READ_PROOF_SQL\n",
        "source_code_with_indent": "\n    <DED>def read_proof(self, tx_hashes: Iterable[bytes]) -> Optional[TxProof]:\n        <IND>query = self.READ_PROOF_SQL\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def read_proof(self, tx_hashes: Sequence[bytes]) -> List[Tuple[bytes, Optional[TxProof]]]:\n        <IND>query = self.READ_PROOF_SQL\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "79e529fcac0a5ef5132e0957c602670ada44f797",
    "filename": "electrumsv/wallet_database/tables.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/wallet_database/tables.py",
    "file_hunks_size": 28,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/wallet_database/tables.py:380:64 Incompatible parameter type [6]: Expected `Optional[Iterable[str]]` for 4th positional only parameter to call `TransactionTable._get_many_common` but got `Iterable[bytes]`.",
    "message": " Expected `Optional[Iterable[str]]` for 4th positional only parameter to call `TransactionTable._get_many_common` but got `Iterable[bytes]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 380,
    "warning_line": "            for row in self._get_many_common(query, None, None, tx_hashes) ]",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import time\nfrom typing import Any, Dict, Iterable, NamedTuple, Optional, List, Tuple\n\n",
        "source_code_len": 87,
        "target_code": "import time\nfrom typing import Any, Dict, Iterable, NamedTuple, Optional, List, Sequence, Tuple\n\n",
        "target_code_len": 97,
        "diff_format": "@@ -5,3 +4,3 @@\n import time\n-from typing import Any, Dict, Iterable, NamedTuple, Optional, List, Tuple\n+from typing import Any, Dict, Iterable, NamedTuple, Optional, List, Sequence, Tuple\n \n",
        "source_code_with_indent": "import time\nfrom typing import Any, Dict, Iterable, NamedTuple, Optional, List, Tuple\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import time\nfrom typing import Any, Dict, Iterable, NamedTuple, Optional, List, Sequence, Tuple\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def _get_many_common(self, query: str, flags: Optional[int]=None, mask: Optional[int]=None,\n            tx_hashes: Optional[Iterable[str]]=None) -> List[Tuple[Any]]:\n        params = []\n",
        "source_code_len": 190,
        "target_code": "    def _get_many_common(self, query: str, flags: Optional[int]=None, mask: Optional[int]=None,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Any]:\n        params = []\n",
        "target_code_len": 185,
        "diff_format": "@@ -305,3 +312,3 @@\n     def _get_many_common(self, query: str, flags: Optional[int]=None, mask: Optional[int]=None,\n-            tx_hashes: Optional[Iterable[str]]=None) -> List[Tuple[Any]]:\n+            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Any]:\n         params = []\n",
        "source_code_with_indent": "    <DED>def _get_many_common(self, query: str, flags: Optional[int]=None, mask: Optional[int]=None,\n            tx_hashes: Optional[Iterable[str]]=None) -> List[Tuple[Any]]:\n        <IND>params = []\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def _get_many_common(self, query: str, flags: Optional[int]=None, mask: Optional[int]=None,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Any]:\n        <IND>params = []\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "                \"tx_hash IN ({0})\".format(\",\".join(\"?\" for k in batch_tx_hashes)))\n            cursor = self._db.execute(batch_query, params + batch_tx_hashes)\n            rows = cursor.fetchall()\n",
        "source_code_len": 197,
        "target_code": "                \"tx_hash IN ({0})\".format(\",\".join(\"?\" for k in batch_tx_hashes)))\n            cursor = self._db.execute(batch_query, params + batch_tx_hashes) # type: ignore\n            rows = cursor.fetchall()\n",
        "target_code_len": 212,
        "diff_format": "@@ -330,3 +337,3 @@\n                 \"tx_hash IN ({0})\".format(\",\".join(\"?\" for k in batch_tx_hashes)))\n-            cursor = self._db.execute(batch_query, params + batch_tx_hashes)\n+            cursor = self._db.execute(batch_query, params + batch_tx_hashes) # type: ignore\n             rows = cursor.fetchall()\n",
        "source_code_with_indent": "                \"tx_hash IN ({0})\".format(\",\".join(\"?\" for k in batch_tx_hashes)))\n            cursor = self._db.execute(batch_query, params + batch_tx_hashes)\n            rows = cursor.fetchall()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                \"tx_hash IN ({0})\".format(\",\".join(\"?\" for k in batch_tx_hashes)))\n            cursor = self._db.execute(batch_query, params + batch_tx_hashes) # type: ignore\n            rows = cursor.fetchall()\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def read(self, flags: Optional[int]=None, mask: Optional[int]=None,\n            tx_hashes: Optional[Iterable[bytes]]=None) -> List[Tuple[Optional[bytes],\n                int, int, TxData]]:\n        query = self.READ_MANY_BASE_SQL\n",
        "source_code_len": 235,
        "target_code": "\n    def read(self, flags: Optional[TxFlags]=None, mask: Optional[TxFlags]=None,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes,\n                Optional[bytes], TxFlags, TxData]]:\n        query = self.READ_MANY_BASE_SQL\n",
        "target_code_len": 249,
        "diff_format": "@@ -357,5 +364,5 @@\n \n-    def read(self, flags: Optional[int]=None, mask: Optional[int]=None,\n-            tx_hashes: Optional[Iterable[bytes]]=None) -> List[Tuple[Optional[bytes],\n-                int, int, TxData]]:\n+    def read(self, flags: Optional[TxFlags]=None, mask: Optional[TxFlags]=None,\n+            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes,\n+                Optional[bytes], TxFlags, TxData]]:\n         query = self.READ_MANY_BASE_SQL\n",
        "source_code_with_indent": "\n    <DED>def read(self, flags: Optional[int]=None, mask: Optional[int]=None,\n            tx_hashes: Optional[Iterable[bytes]]=None) -> List[Tuple[Optional[bytes],\n                int, int, TxData]]:\n        <IND>query = self.READ_MANY_BASE_SQL\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def read(self, flags: Optional[TxFlags]=None, mask: Optional[TxFlags]=None,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes,\n                Optional[bytes], TxFlags, TxData]]:\n        <IND>query = self.READ_MANY_BASE_SQL\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def read_metadata(self, flags: Optional[int]=None, mask: Optional[int]=None,\n            tx_hashes: Optional[Iterable[bytes]]=None) -> List[Tuple[bytes, int, TxData]]:\n        query = self.READ_METADATA_MANY_BASE_SQL\n",
        "source_code_len": 222,
        "target_code": "\n    def read_metadata(self, flags: Optional[TxFlags]=None, mask: Optional[TxFlags]=None,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes, TxFlags, TxData]]:\n        query = self.READ_METADATA_MANY_BASE_SQL\n",
        "target_code_len": 234,
        "diff_format": "@@ -364,4 +371,4 @@\n \n-    def read_metadata(self, flags: Optional[int]=None, mask: Optional[int]=None,\n-            tx_hashes: Optional[Iterable[bytes]]=None) -> List[Tuple[bytes, int, TxData]]:\n+    def read_metadata(self, flags: Optional[TxFlags]=None, mask: Optional[TxFlags]=None,\n+            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes, TxFlags, TxData]]:\n         query = self.READ_METADATA_MANY_BASE_SQL\n",
        "source_code_with_indent": "\n    <DED>def read_metadata(self, flags: Optional[int]=None, mask: Optional[int]=None,\n            tx_hashes: Optional[Iterable[bytes]]=None) -> List[Tuple[bytes, int, TxData]]:\n        <IND>query = self.READ_METADATA_MANY_BASE_SQL\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def read_metadata(self, flags: Optional[TxFlags]=None, mask: Optional[TxFlags]=None,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes, TxFlags, TxData]]:\n        <IND>query = self.READ_METADATA_MANY_BASE_SQL\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def read_descriptions(self,\n            tx_hashes: Optional[Iterable[bytes]]=None) -> Optional[Tuple[bytes, str]]:\n        query = self.READ_DESCRIPTION_SQL\n",
        "source_code_len": 161,
        "target_code": "    def read_descriptions(self,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes, str]]:\n        query = self.READ_DESCRIPTION_SQL\n",
        "target_code_len": 157,
        "diff_format": "@@ -371,3 +378,3 @@\n     def read_descriptions(self,\n-            tx_hashes: Optional[Iterable[bytes]]=None) -> Optional[Tuple[bytes, str]]:\n+            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes, str]]:\n         query = self.READ_DESCRIPTION_SQL\n",
        "source_code_with_indent": "    <DED>def read_descriptions(self,\n            tx_hashes: Optional[Iterable[bytes]]=None) -> Optional[Tuple[bytes, str]]:\n        <IND>query = self.READ_DESCRIPTION_SQL\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def read_descriptions(self,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes, str]]:\n        <IND>query = self.READ_DESCRIPTION_SQL\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def read_proof(self, tx_hashes: Iterable[bytes]) -> Optional[TxProof]:\n        query = self.READ_PROOF_SQL\n",
        "source_code_len": 112,
        "target_code": "\n    def read_proof(self, tx_hashes: Sequence[bytes]) -> List[Tuple[bytes, Optional[TxProof]]]:\n        query = self.READ_PROOF_SQL\n",
        "target_code_len": 132,
        "diff_format": "@@ -376,3 +383,3 @@\n \n-    def read_proof(self, tx_hashes: Iterable[bytes]) -> Optional[TxProof]:\n+    def read_proof(self, tx_hashes: Sequence[bytes]) -> List[Tuple[bytes, Optional[TxProof]]]:\n         query = self.READ_PROOF_SQL\n",
        "source_code_with_indent": "\n    <DED>def read_proof(self, tx_hashes: Iterable[bytes]) -> Optional[TxProof]:\n        <IND>query = self.READ_PROOF_SQL\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def read_proof(self, tx_hashes: Sequence[bytes]) -> List[Tuple[bytes, Optional[TxProof]]]:\n        <IND>query = self.READ_PROOF_SQL\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "79e529fcac0a5ef5132e0957c602670ada44f797",
    "filename": "electrumsv/wallet_database/tables.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/wallet_database/tables.py",
    "file_hunks_size": 28,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/wallet_database/tables.py:389:48 Incompatible parameter type [6]: Expected `TxFlags` for 2nd positional only parameter to call `TransactionTable._apply_flags` but got `int`.",
    "message": " Expected `TxFlags` for 2nd positional only parameter to call `TransactionTable._apply_flags` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 389,
    "warning_line": "            flags = self._apply_flags(metadata, flags)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def update(self, entries: List[Tuple[bytes, TxData, bytes, int]],\n            completion_callback: Optional[CompletionCallbackType]=None) -> None:\n",
        "source_code_len": 152,
        "target_code": "\n    def update(self, entries: List[Tuple[bytes, TxData, Optional[bytes], TxFlags]],\n            completion_callback: Optional[CompletionCallbackType]=None) -> None:\n",
        "target_code_len": 166,
        "diff_format": "@@ -381,3 +388,3 @@\n \n-    def update(self, entries: List[Tuple[bytes, TxData, bytes, int]],\n+    def update(self, entries: List[Tuple[bytes, TxData, Optional[bytes], TxFlags]],\n             completion_callback: Optional[CompletionCallbackType]=None) -> None:\n",
        "source_code_with_indent": "\n    <DED>def update(self, entries: List[Tuple[bytes, TxData, bytes, int]],\n            completion_callback: Optional[CompletionCallbackType]=None) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def update(self, entries: List[Tuple[bytes, TxData, Optional[bytes], TxFlags]],\n            completion_callback: Optional[CompletionCallbackType]=None) -> None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "79e529fcac0a5ef5132e0957c602670ada44f797",
    "filename": "electrumsv/wallet_database/tables.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/wallet_database/tables.py",
    "file_hunks_size": 28,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/wallet_database/tables.py:390:15 Unsupported operand [58]: `&` is not supported for operand types `bytes` and `TxFlags`.",
    "message": " `&` is not supported for operand types `bytes` and `TxFlags`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 390,
    "warning_line": "            if flags & TxFlags.HasByteData:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @staticmethod\n    def _apply_flags(data: TxData, flags: TxFlags) -> bytes:\n        flags &= ~TxFlags.METADATA_FIELD_MASK\n",
        "source_code_len": 125,
        "target_code": "    @staticmethod\n    def _apply_flags(data: TxData, flags: TxFlags) -> TxFlags:\n        flags &= ~TxFlags.METADATA_FIELD_MASK\n",
        "target_code_len": 127,
        "diff_format": "@@ -262,3 +269,3 @@\n     @staticmethod\n-    def _apply_flags(data: TxData, flags: TxFlags) -> bytes:\n+    def _apply_flags(data: TxData, flags: TxFlags) -> TxFlags:\n         flags &= ~TxFlags.METADATA_FIELD_MASK\n",
        "source_code_with_indent": "    @staticmethod\n    def _apply_flags(data: TxData, flags: TxFlags) -> bytes:\n        <IND>flags &= ~TxFlags.METADATA_FIELD_MASK\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    @staticmethod\n    def _apply_flags(data: TxData, flags: TxFlags) -> TxFlags:\n        <IND>flags &= ~TxFlags.METADATA_FIELD_MASK\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "79e529fcac0a5ef5132e0957c602670ada44f797",
    "filename": "electrumsv/wallet_database/tables.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/wallet_database/tables.py",
    "file_hunks_size": 28,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/wallet_database/tables.py:420:54 Incompatible parameter type [6]: Expected `TxFlags` for 2nd positional only parameter to call `TransactionTable._apply_flags` but got `int`.",
    "message": " Expected `TxFlags` for 2nd positional only parameter to call `TransactionTable._apply_flags` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 420,
    "warning_line": "            datas.append((self._apply_flags(metadata, flags), metadata.height, metadata.position,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def update_metadata(self, entries: List[Tuple[bytes, TxData, int]],\n            completion_callback: Optional[CompletionCallbackType]=None) -> None:\n",
        "source_code_len": 154,
        "target_code": "\n    def update_metadata(self, entries: List[Tuple[bytes, TxData, TxFlags]],\n            completion_callback: Optional[CompletionCallbackType]=None) -> None:\n",
        "target_code_len": 158,
        "diff_format": "@@ -414,3 +421,3 @@\n \n-    def update_metadata(self, entries: List[Tuple[bytes, TxData, int]],\n+    def update_metadata(self, entries: List[Tuple[bytes, TxData, TxFlags]],\n             completion_callback: Optional[CompletionCallbackType]=None) -> None:\n",
        "source_code_with_indent": "\n    <DED>def update_metadata(self, entries: List[Tuple[bytes, TxData, int]],\n            completion_callback: Optional[CompletionCallbackType]=None) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def update_metadata(self, entries: List[Tuple[bytes, TxData, TxFlags]],\n            completion_callback: Optional[CompletionCallbackType]=None) -> None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "79e529fcac0a5ef5132e0957c602670ada44f797",
    "filename": "electrumsv/wallet_database/tables.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/wallet_database/tables.py",
    "file_hunks_size": 28,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/wallet_database/tables.py:804:40 Incompatible parameter type [6]: Expected `typing.Sized` for 1st positional only parameter to call `len` but got `Iterable[str]`.",
    "message": " Expected `typing.Sized` for 1st positional only parameter to call `len` but got `Iterable[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 804,
    "warning_line": "        if tx_hashes is None or not len(tx_hashes):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import time\nfrom typing import Any, Dict, Iterable, NamedTuple, Optional, List, Tuple\n\n",
        "source_code_len": 87,
        "target_code": "import time\nfrom typing import Any, Dict, Iterable, NamedTuple, Optional, List, Sequence, Tuple\n\n",
        "target_code_len": 97,
        "diff_format": "@@ -5,3 +4,3 @@\n import time\n-from typing import Any, Dict, Iterable, NamedTuple, Optional, List, Tuple\n+from typing import Any, Dict, Iterable, NamedTuple, Optional, List, Sequence, Tuple\n \n",
        "source_code_with_indent": "import time\nfrom typing import Any, Dict, Iterable, NamedTuple, Optional, List, Tuple\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import time\nfrom typing import Any, Dict, Iterable, NamedTuple, Optional, List, Sequence, Tuple\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def _get_many_common(self, query: str, flags: Optional[int]=None, mask: Optional[int]=None,\n            tx_hashes: Optional[Iterable[str]]=None) -> List[Tuple[Any]]:\n        params = []\n",
        "source_code_len": 190,
        "target_code": "    def _get_many_common(self, query: str, flags: Optional[int]=None, mask: Optional[int]=None,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Any]:\n        params = []\n",
        "target_code_len": 185,
        "diff_format": "@@ -305,3 +312,3 @@\n     def _get_many_common(self, query: str, flags: Optional[int]=None, mask: Optional[int]=None,\n-            tx_hashes: Optional[Iterable[str]]=None) -> List[Tuple[Any]]:\n+            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Any]:\n         params = []\n",
        "source_code_with_indent": "    <DED>def _get_many_common(self, query: str, flags: Optional[int]=None, mask: Optional[int]=None,\n            tx_hashes: Optional[Iterable[str]]=None) -> List[Tuple[Any]]:\n        <IND>params = []\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def _get_many_common(self, query: str, flags: Optional[int]=None, mask: Optional[int]=None,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Any]:\n        <IND>params = []\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "                \"tx_hash IN ({0})\".format(\",\".join(\"?\" for k in batch_tx_hashes)))\n            cursor = self._db.execute(batch_query, params + batch_tx_hashes)\n            rows = cursor.fetchall()\n",
        "source_code_len": 197,
        "target_code": "                \"tx_hash IN ({0})\".format(\",\".join(\"?\" for k in batch_tx_hashes)))\n            cursor = self._db.execute(batch_query, params + batch_tx_hashes) # type: ignore\n            rows = cursor.fetchall()\n",
        "target_code_len": 212,
        "diff_format": "@@ -330,3 +337,3 @@\n                 \"tx_hash IN ({0})\".format(\",\".join(\"?\" for k in batch_tx_hashes)))\n-            cursor = self._db.execute(batch_query, params + batch_tx_hashes)\n+            cursor = self._db.execute(batch_query, params + batch_tx_hashes) # type: ignore\n             rows = cursor.fetchall()\n",
        "source_code_with_indent": "                \"tx_hash IN ({0})\".format(\",\".join(\"?\" for k in batch_tx_hashes)))\n            cursor = self._db.execute(batch_query, params + batch_tx_hashes)\n            rows = cursor.fetchall()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                \"tx_hash IN ({0})\".format(\",\".join(\"?\" for k in batch_tx_hashes)))\n            cursor = self._db.execute(batch_query, params + batch_tx_hashes) # type: ignore\n            rows = cursor.fetchall()\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def read(self, flags: Optional[int]=None, mask: Optional[int]=None,\n            tx_hashes: Optional[Iterable[bytes]]=None) -> List[Tuple[Optional[bytes],\n                int, int, TxData]]:\n        query = self.READ_MANY_BASE_SQL\n",
        "source_code_len": 235,
        "target_code": "\n    def read(self, flags: Optional[TxFlags]=None, mask: Optional[TxFlags]=None,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes,\n                Optional[bytes], TxFlags, TxData]]:\n        query = self.READ_MANY_BASE_SQL\n",
        "target_code_len": 249,
        "diff_format": "@@ -357,5 +364,5 @@\n \n-    def read(self, flags: Optional[int]=None, mask: Optional[int]=None,\n-            tx_hashes: Optional[Iterable[bytes]]=None) -> List[Tuple[Optional[bytes],\n-                int, int, TxData]]:\n+    def read(self, flags: Optional[TxFlags]=None, mask: Optional[TxFlags]=None,\n+            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes,\n+                Optional[bytes], TxFlags, TxData]]:\n         query = self.READ_MANY_BASE_SQL\n",
        "source_code_with_indent": "\n    <DED>def read(self, flags: Optional[int]=None, mask: Optional[int]=None,\n            tx_hashes: Optional[Iterable[bytes]]=None) -> List[Tuple[Optional[bytes],\n                int, int, TxData]]:\n        <IND>query = self.READ_MANY_BASE_SQL\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def read(self, flags: Optional[TxFlags]=None, mask: Optional[TxFlags]=None,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes,\n                Optional[bytes], TxFlags, TxData]]:\n        <IND>query = self.READ_MANY_BASE_SQL\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def read_metadata(self, flags: Optional[int]=None, mask: Optional[int]=None,\n            tx_hashes: Optional[Iterable[bytes]]=None) -> List[Tuple[bytes, int, TxData]]:\n        query = self.READ_METADATA_MANY_BASE_SQL\n",
        "source_code_len": 222,
        "target_code": "\n    def read_metadata(self, flags: Optional[TxFlags]=None, mask: Optional[TxFlags]=None,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes, TxFlags, TxData]]:\n        query = self.READ_METADATA_MANY_BASE_SQL\n",
        "target_code_len": 234,
        "diff_format": "@@ -364,4 +371,4 @@\n \n-    def read_metadata(self, flags: Optional[int]=None, mask: Optional[int]=None,\n-            tx_hashes: Optional[Iterable[bytes]]=None) -> List[Tuple[bytes, int, TxData]]:\n+    def read_metadata(self, flags: Optional[TxFlags]=None, mask: Optional[TxFlags]=None,\n+            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes, TxFlags, TxData]]:\n         query = self.READ_METADATA_MANY_BASE_SQL\n",
        "source_code_with_indent": "\n    <DED>def read_metadata(self, flags: Optional[int]=None, mask: Optional[int]=None,\n            tx_hashes: Optional[Iterable[bytes]]=None) -> List[Tuple[bytes, int, TxData]]:\n        <IND>query = self.READ_METADATA_MANY_BASE_SQL\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def read_metadata(self, flags: Optional[TxFlags]=None, mask: Optional[TxFlags]=None,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes, TxFlags, TxData]]:\n        <IND>query = self.READ_METADATA_MANY_BASE_SQL\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def read_descriptions(self,\n            tx_hashes: Optional[Iterable[bytes]]=None) -> Optional[Tuple[bytes, str]]:\n        query = self.READ_DESCRIPTION_SQL\n",
        "source_code_len": 161,
        "target_code": "    def read_descriptions(self,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes, str]]:\n        query = self.READ_DESCRIPTION_SQL\n",
        "target_code_len": 157,
        "diff_format": "@@ -371,3 +378,3 @@\n     def read_descriptions(self,\n-            tx_hashes: Optional[Iterable[bytes]]=None) -> Optional[Tuple[bytes, str]]:\n+            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes, str]]:\n         query = self.READ_DESCRIPTION_SQL\n",
        "source_code_with_indent": "    <DED>def read_descriptions(self,\n            tx_hashes: Optional[Iterable[bytes]]=None) -> Optional[Tuple[bytes, str]]:\n        <IND>query = self.READ_DESCRIPTION_SQL\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def read_descriptions(self,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes, str]]:\n        <IND>query = self.READ_DESCRIPTION_SQL\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def read_proof(self, tx_hashes: Iterable[bytes]) -> Optional[TxProof]:\n        query = self.READ_PROOF_SQL\n",
        "source_code_len": 112,
        "target_code": "\n    def read_proof(self, tx_hashes: Sequence[bytes]) -> List[Tuple[bytes, Optional[TxProof]]]:\n        query = self.READ_PROOF_SQL\n",
        "target_code_len": 132,
        "diff_format": "@@ -376,3 +383,3 @@\n \n-    def read_proof(self, tx_hashes: Iterable[bytes]) -> Optional[TxProof]:\n+    def read_proof(self, tx_hashes: Sequence[bytes]) -> List[Tuple[bytes, Optional[TxProof]]]:\n         query = self.READ_PROOF_SQL\n",
        "source_code_with_indent": "\n    <DED>def read_proof(self, tx_hashes: Iterable[bytes]) -> Optional[TxProof]:\n        <IND>query = self.READ_PROOF_SQL\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def read_proof(self, tx_hashes: Sequence[bytes]) -> List[Tuple[bytes, Optional[TxProof]]]:\n        <IND>query = self.READ_PROOF_SQL\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def _get_many_common(self, query: str, base_params: Optional[List[Any]]=None,\n            tx_hashes: Optional[Iterable[str]]=None) -> List[Tuple[Any]]:\n        params = base_params[:] if base_params is not None else []\n",
        "source_code_len": 223,
        "target_code": "    def _get_many_common(self, query: str, base_params: Optional[List[Any]]=None,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Any]:\n        params = base_params[:] if base_params is not None else []\n",
        "target_code_len": 218,
        "diff_format": "@@ -800,3 +807,3 @@\n     def _get_many_common(self, query: str, base_params: Optional[List[Any]]=None,\n-            tx_hashes: Optional[Iterable[str]]=None) -> List[Tuple[Any]]:\n+            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Any]:\n         params = base_params[:] if base_params is not None else []\n",
        "source_code_with_indent": "    def _get_many_common(self, query: str, base_params: Optional[List[Any]]=None,\n            tx_hashes: Optional[Iterable[str]]=None) -> List[Tuple[Any]]:\n        <IND>params = base_params[:] if base_params is not None else []\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def _get_many_common(self, query: str, base_params: Optional[List[Any]]=None,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Any]:\n        <IND>params = base_params[:] if base_params is not None else []\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "                \"tx_hash IN ({0})\".format(\",\".join(\"?\" for k in batch_tx_hashes)))\n            cursor = self._db.execute(batch_query, params + batch_tx_hashes)\n            rows = cursor.fetchall()\n",
        "source_code_len": 197,
        "target_code": "                \"tx_hash IN ({0})\".format(\",\".join(\"?\" for k in batch_tx_hashes)))\n            cursor = self._db.execute(batch_query, params + batch_tx_hashes) # type: ignore\n            rows = cursor.fetchall()\n",
        "target_code_len": 212,
        "diff_format": "@@ -819,3 +826,3 @@\n                 \"tx_hash IN ({0})\".format(\",\".join(\"?\" for k in batch_tx_hashes)))\n-            cursor = self._db.execute(batch_query, params + batch_tx_hashes)\n+            cursor = self._db.execute(batch_query, params + batch_tx_hashes) # type: ignore\n             rows = cursor.fetchall()\n",
        "source_code_with_indent": "                \"tx_hash IN ({0})\".format(\",\".join(\"?\" for k in batch_tx_hashes)))\n            cursor = self._db.execute(batch_query, params + batch_tx_hashes)\n            rows = cursor.fetchall()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                \"tx_hash IN ({0})\".format(\",\".join(\"?\" for k in batch_tx_hashes)))\n            cursor = self._db.execute(batch_query, params + batch_tx_hashes) # type: ignore\n            rows = cursor.fetchall()\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def read_history(self, account_id: int,\n            tx_hashes: Optional[Iterable[bytes]]=None) -> List[Tuple[bytes, int, int]]:\n        return self._get_many_common(self.READ_HISTORY_SQL, [ account_id ], tx_hashes)\n",
        "source_code_len": 219,
        "target_code": "    def read_history(self, account_id: int,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes, int, int]]:\n        return self._get_many_common(self.READ_HISTORY_SQL, [ account_id ], tx_hashes)\n",
        "target_code_len": 219,
        "diff_format": "@@ -851,3 +858,3 @@\n     def read_history(self, account_id: int,\n-            tx_hashes: Optional[Iterable[bytes]]=None) -> List[Tuple[bytes, int, int]]:\n+            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes, int, int]]:\n         return self._get_many_common(self.READ_HISTORY_SQL, [ account_id ], tx_hashes)\n",
        "source_code_with_indent": "    <DED>def read_history(self, account_id: int,\n            tx_hashes: Optional[Iterable[bytes]]=None) -> List[Tuple[bytes, int, int]]:\n        <IND>return self._get_many_common(self.READ_HISTORY_SQL, [ account_id ], tx_hashes)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def read_history(self, account_id: int,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes, int, int]]:\n        <IND>return self._get_many_common(self.READ_HISTORY_SQL, [ account_id ], tx_hashes)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "79e529fcac0a5ef5132e0957c602670ada44f797",
    "filename": "electrumsv/wallet_database/tables.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/wallet_database/tables.py",
    "file_hunks_size": 28,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/wallet_database/tables.py:853:8 Incompatible return type [7]: Expected `List[Tuple[bytes, int, int]]` but got `List[Tuple[typing.Any]]`.",
    "message": " Expected `List[Tuple[bytes, int, int]]` but got `List[Tuple[typing.Any]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 853,
    "warning_line": "        return self._get_many_common(self.READ_HISTORY_SQL, [ account_id ], tx_hashes)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import time\nfrom typing import Any, Dict, Iterable, NamedTuple, Optional, List, Tuple\n\n",
        "source_code_len": 87,
        "target_code": "import time\nfrom typing import Any, Dict, Iterable, NamedTuple, Optional, List, Sequence, Tuple\n\n",
        "target_code_len": 97,
        "diff_format": "@@ -5,3 +4,3 @@\n import time\n-from typing import Any, Dict, Iterable, NamedTuple, Optional, List, Tuple\n+from typing import Any, Dict, Iterable, NamedTuple, Optional, List, Sequence, Tuple\n \n",
        "source_code_with_indent": "import time\nfrom typing import Any, Dict, Iterable, NamedTuple, Optional, List, Tuple\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import time\nfrom typing import Any, Dict, Iterable, NamedTuple, Optional, List, Sequence, Tuple\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def _get_many_common(self, query: str, flags: Optional[int]=None, mask: Optional[int]=None,\n            tx_hashes: Optional[Iterable[str]]=None) -> List[Tuple[Any]]:\n        params = []\n",
        "source_code_len": 190,
        "target_code": "    def _get_many_common(self, query: str, flags: Optional[int]=None, mask: Optional[int]=None,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Any]:\n        params = []\n",
        "target_code_len": 185,
        "diff_format": "@@ -305,3 +312,3 @@\n     def _get_many_common(self, query: str, flags: Optional[int]=None, mask: Optional[int]=None,\n-            tx_hashes: Optional[Iterable[str]]=None) -> List[Tuple[Any]]:\n+            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Any]:\n         params = []\n",
        "source_code_with_indent": "    <DED>def _get_many_common(self, query: str, flags: Optional[int]=None, mask: Optional[int]=None,\n            tx_hashes: Optional[Iterable[str]]=None) -> List[Tuple[Any]]:\n        <IND>params = []\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def _get_many_common(self, query: str, flags: Optional[int]=None, mask: Optional[int]=None,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Any]:\n        <IND>params = []\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "                \"tx_hash IN ({0})\".format(\",\".join(\"?\" for k in batch_tx_hashes)))\n            cursor = self._db.execute(batch_query, params + batch_tx_hashes)\n            rows = cursor.fetchall()\n",
        "source_code_len": 197,
        "target_code": "                \"tx_hash IN ({0})\".format(\",\".join(\"?\" for k in batch_tx_hashes)))\n            cursor = self._db.execute(batch_query, params + batch_tx_hashes) # type: ignore\n            rows = cursor.fetchall()\n",
        "target_code_len": 212,
        "diff_format": "@@ -330,3 +337,3 @@\n                 \"tx_hash IN ({0})\".format(\",\".join(\"?\" for k in batch_tx_hashes)))\n-            cursor = self._db.execute(batch_query, params + batch_tx_hashes)\n+            cursor = self._db.execute(batch_query, params + batch_tx_hashes) # type: ignore\n             rows = cursor.fetchall()\n",
        "source_code_with_indent": "                \"tx_hash IN ({0})\".format(\",\".join(\"?\" for k in batch_tx_hashes)))\n            cursor = self._db.execute(batch_query, params + batch_tx_hashes)\n            rows = cursor.fetchall()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                \"tx_hash IN ({0})\".format(\",\".join(\"?\" for k in batch_tx_hashes)))\n            cursor = self._db.execute(batch_query, params + batch_tx_hashes) # type: ignore\n            rows = cursor.fetchall()\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def read(self, flags: Optional[int]=None, mask: Optional[int]=None,\n            tx_hashes: Optional[Iterable[bytes]]=None) -> List[Tuple[Optional[bytes],\n                int, int, TxData]]:\n        query = self.READ_MANY_BASE_SQL\n",
        "source_code_len": 235,
        "target_code": "\n    def read(self, flags: Optional[TxFlags]=None, mask: Optional[TxFlags]=None,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes,\n                Optional[bytes], TxFlags, TxData]]:\n        query = self.READ_MANY_BASE_SQL\n",
        "target_code_len": 249,
        "diff_format": "@@ -357,5 +364,5 @@\n \n-    def read(self, flags: Optional[int]=None, mask: Optional[int]=None,\n-            tx_hashes: Optional[Iterable[bytes]]=None) -> List[Tuple[Optional[bytes],\n-                int, int, TxData]]:\n+    def read(self, flags: Optional[TxFlags]=None, mask: Optional[TxFlags]=None,\n+            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes,\n+                Optional[bytes], TxFlags, TxData]]:\n         query = self.READ_MANY_BASE_SQL\n",
        "source_code_with_indent": "\n    <DED>def read(self, flags: Optional[int]=None, mask: Optional[int]=None,\n            tx_hashes: Optional[Iterable[bytes]]=None) -> List[Tuple[Optional[bytes],\n                int, int, TxData]]:\n        <IND>query = self.READ_MANY_BASE_SQL\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def read(self, flags: Optional[TxFlags]=None, mask: Optional[TxFlags]=None,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes,\n                Optional[bytes], TxFlags, TxData]]:\n        <IND>query = self.READ_MANY_BASE_SQL\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def read_metadata(self, flags: Optional[int]=None, mask: Optional[int]=None,\n            tx_hashes: Optional[Iterable[bytes]]=None) -> List[Tuple[bytes, int, TxData]]:\n        query = self.READ_METADATA_MANY_BASE_SQL\n",
        "source_code_len": 222,
        "target_code": "\n    def read_metadata(self, flags: Optional[TxFlags]=None, mask: Optional[TxFlags]=None,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes, TxFlags, TxData]]:\n        query = self.READ_METADATA_MANY_BASE_SQL\n",
        "target_code_len": 234,
        "diff_format": "@@ -364,4 +371,4 @@\n \n-    def read_metadata(self, flags: Optional[int]=None, mask: Optional[int]=None,\n-            tx_hashes: Optional[Iterable[bytes]]=None) -> List[Tuple[bytes, int, TxData]]:\n+    def read_metadata(self, flags: Optional[TxFlags]=None, mask: Optional[TxFlags]=None,\n+            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes, TxFlags, TxData]]:\n         query = self.READ_METADATA_MANY_BASE_SQL\n",
        "source_code_with_indent": "\n    <DED>def read_metadata(self, flags: Optional[int]=None, mask: Optional[int]=None,\n            tx_hashes: Optional[Iterable[bytes]]=None) -> List[Tuple[bytes, int, TxData]]:\n        <IND>query = self.READ_METADATA_MANY_BASE_SQL\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def read_metadata(self, flags: Optional[TxFlags]=None, mask: Optional[TxFlags]=None,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes, TxFlags, TxData]]:\n        <IND>query = self.READ_METADATA_MANY_BASE_SQL\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def read_descriptions(self,\n            tx_hashes: Optional[Iterable[bytes]]=None) -> Optional[Tuple[bytes, str]]:\n        query = self.READ_DESCRIPTION_SQL\n",
        "source_code_len": 161,
        "target_code": "    def read_descriptions(self,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes, str]]:\n        query = self.READ_DESCRIPTION_SQL\n",
        "target_code_len": 157,
        "diff_format": "@@ -371,3 +378,3 @@\n     def read_descriptions(self,\n-            tx_hashes: Optional[Iterable[bytes]]=None) -> Optional[Tuple[bytes, str]]:\n+            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes, str]]:\n         query = self.READ_DESCRIPTION_SQL\n",
        "source_code_with_indent": "    <DED>def read_descriptions(self,\n            tx_hashes: Optional[Iterable[bytes]]=None) -> Optional[Tuple[bytes, str]]:\n        <IND>query = self.READ_DESCRIPTION_SQL\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def read_descriptions(self,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes, str]]:\n        <IND>query = self.READ_DESCRIPTION_SQL\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def read_proof(self, tx_hashes: Iterable[bytes]) -> Optional[TxProof]:\n        query = self.READ_PROOF_SQL\n",
        "source_code_len": 112,
        "target_code": "\n    def read_proof(self, tx_hashes: Sequence[bytes]) -> List[Tuple[bytes, Optional[TxProof]]]:\n        query = self.READ_PROOF_SQL\n",
        "target_code_len": 132,
        "diff_format": "@@ -376,3 +383,3 @@\n \n-    def read_proof(self, tx_hashes: Iterable[bytes]) -> Optional[TxProof]:\n+    def read_proof(self, tx_hashes: Sequence[bytes]) -> List[Tuple[bytes, Optional[TxProof]]]:\n         query = self.READ_PROOF_SQL\n",
        "source_code_with_indent": "\n    <DED>def read_proof(self, tx_hashes: Iterable[bytes]) -> Optional[TxProof]:\n        <IND>query = self.READ_PROOF_SQL\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def read_proof(self, tx_hashes: Sequence[bytes]) -> List[Tuple[bytes, Optional[TxProof]]]:\n        <IND>query = self.READ_PROOF_SQL\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def _get_many_common(self, query: str, base_params: Optional[List[Any]]=None,\n            tx_hashes: Optional[Iterable[str]]=None) -> List[Tuple[Any]]:\n        params = base_params[:] if base_params is not None else []\n",
        "source_code_len": 223,
        "target_code": "    def _get_many_common(self, query: str, base_params: Optional[List[Any]]=None,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Any]:\n        params = base_params[:] if base_params is not None else []\n",
        "target_code_len": 218,
        "diff_format": "@@ -800,3 +807,3 @@\n     def _get_many_common(self, query: str, base_params: Optional[List[Any]]=None,\n-            tx_hashes: Optional[Iterable[str]]=None) -> List[Tuple[Any]]:\n+            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Any]:\n         params = base_params[:] if base_params is not None else []\n",
        "source_code_with_indent": "    def _get_many_common(self, query: str, base_params: Optional[List[Any]]=None,\n            tx_hashes: Optional[Iterable[str]]=None) -> List[Tuple[Any]]:\n        <IND>params = base_params[:] if base_params is not None else []\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def _get_many_common(self, query: str, base_params: Optional[List[Any]]=None,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Any]:\n        <IND>params = base_params[:] if base_params is not None else []\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "                \"tx_hash IN ({0})\".format(\",\".join(\"?\" for k in batch_tx_hashes)))\n            cursor = self._db.execute(batch_query, params + batch_tx_hashes)\n            rows = cursor.fetchall()\n",
        "source_code_len": 197,
        "target_code": "                \"tx_hash IN ({0})\".format(\",\".join(\"?\" for k in batch_tx_hashes)))\n            cursor = self._db.execute(batch_query, params + batch_tx_hashes) # type: ignore\n            rows = cursor.fetchall()\n",
        "target_code_len": 212,
        "diff_format": "@@ -819,3 +826,3 @@\n                 \"tx_hash IN ({0})\".format(\",\".join(\"?\" for k in batch_tx_hashes)))\n-            cursor = self._db.execute(batch_query, params + batch_tx_hashes)\n+            cursor = self._db.execute(batch_query, params + batch_tx_hashes) # type: ignore\n             rows = cursor.fetchall()\n",
        "source_code_with_indent": "                \"tx_hash IN ({0})\".format(\",\".join(\"?\" for k in batch_tx_hashes)))\n            cursor = self._db.execute(batch_query, params + batch_tx_hashes)\n            rows = cursor.fetchall()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                \"tx_hash IN ({0})\".format(\",\".join(\"?\" for k in batch_tx_hashes)))\n            cursor = self._db.execute(batch_query, params + batch_tx_hashes) # type: ignore\n            rows = cursor.fetchall()\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def read_history(self, account_id: int,\n            tx_hashes: Optional[Iterable[bytes]]=None) -> List[Tuple[bytes, int, int]]:\n        return self._get_many_common(self.READ_HISTORY_SQL, [ account_id ], tx_hashes)\n",
        "source_code_len": 219,
        "target_code": "    def read_history(self, account_id: int,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes, int, int]]:\n        return self._get_many_common(self.READ_HISTORY_SQL, [ account_id ], tx_hashes)\n",
        "target_code_len": 219,
        "diff_format": "@@ -851,3 +858,3 @@\n     def read_history(self, account_id: int,\n-            tx_hashes: Optional[Iterable[bytes]]=None) -> List[Tuple[bytes, int, int]]:\n+            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes, int, int]]:\n         return self._get_many_common(self.READ_HISTORY_SQL, [ account_id ], tx_hashes)\n",
        "source_code_with_indent": "    <DED>def read_history(self, account_id: int,\n            tx_hashes: Optional[Iterable[bytes]]=None) -> List[Tuple[bytes, int, int]]:\n        <IND>return self._get_many_common(self.READ_HISTORY_SQL, [ account_id ], tx_hashes)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def read_history(self, account_id: int,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes, int, int]]:\n        <IND>return self._get_many_common(self.READ_HISTORY_SQL, [ account_id ], tx_hashes)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "79e529fcac0a5ef5132e0957c602670ada44f797",
    "filename": "electrumsv/wallet_database/tables.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/wallet_database/tables.py",
    "file_hunks_size": 28,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/wallet_database/tables.py:853:76 Incompatible parameter type [6]: Expected `Optional[Iterable[str]]` for 3rd positional only parameter to call `TransactionDeltaTable._get_many_common` but got `Optional[Iterable[bytes]]`.",
    "message": " Expected `Optional[Iterable[str]]` for 3rd positional only parameter to call `TransactionDeltaTable._get_many_common` but got `Optional[Iterable[bytes]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 853,
    "warning_line": "        return self._get_many_common(self.READ_HISTORY_SQL, [ account_id ], tx_hashes)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import time\nfrom typing import Any, Dict, Iterable, NamedTuple, Optional, List, Tuple\n\n",
        "source_code_len": 87,
        "target_code": "import time\nfrom typing import Any, Dict, Iterable, NamedTuple, Optional, List, Sequence, Tuple\n\n",
        "target_code_len": 97,
        "diff_format": "@@ -5,3 +4,3 @@\n import time\n-from typing import Any, Dict, Iterable, NamedTuple, Optional, List, Tuple\n+from typing import Any, Dict, Iterable, NamedTuple, Optional, List, Sequence, Tuple\n \n",
        "source_code_with_indent": "import time\nfrom typing import Any, Dict, Iterable, NamedTuple, Optional, List, Tuple\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import time\nfrom typing import Any, Dict, Iterable, NamedTuple, Optional, List, Sequence, Tuple\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def _get_many_common(self, query: str, flags: Optional[int]=None, mask: Optional[int]=None,\n            tx_hashes: Optional[Iterable[str]]=None) -> List[Tuple[Any]]:\n        params = []\n",
        "source_code_len": 190,
        "target_code": "    def _get_many_common(self, query: str, flags: Optional[int]=None, mask: Optional[int]=None,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Any]:\n        params = []\n",
        "target_code_len": 185,
        "diff_format": "@@ -305,3 +312,3 @@\n     def _get_many_common(self, query: str, flags: Optional[int]=None, mask: Optional[int]=None,\n-            tx_hashes: Optional[Iterable[str]]=None) -> List[Tuple[Any]]:\n+            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Any]:\n         params = []\n",
        "source_code_with_indent": "    <DED>def _get_many_common(self, query: str, flags: Optional[int]=None, mask: Optional[int]=None,\n            tx_hashes: Optional[Iterable[str]]=None) -> List[Tuple[Any]]:\n        <IND>params = []\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def _get_many_common(self, query: str, flags: Optional[int]=None, mask: Optional[int]=None,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Any]:\n        <IND>params = []\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "                \"tx_hash IN ({0})\".format(\",\".join(\"?\" for k in batch_tx_hashes)))\n            cursor = self._db.execute(batch_query, params + batch_tx_hashes)\n            rows = cursor.fetchall()\n",
        "source_code_len": 197,
        "target_code": "                \"tx_hash IN ({0})\".format(\",\".join(\"?\" for k in batch_tx_hashes)))\n            cursor = self._db.execute(batch_query, params + batch_tx_hashes) # type: ignore\n            rows = cursor.fetchall()\n",
        "target_code_len": 212,
        "diff_format": "@@ -330,3 +337,3 @@\n                 \"tx_hash IN ({0})\".format(\",\".join(\"?\" for k in batch_tx_hashes)))\n-            cursor = self._db.execute(batch_query, params + batch_tx_hashes)\n+            cursor = self._db.execute(batch_query, params + batch_tx_hashes) # type: ignore\n             rows = cursor.fetchall()\n",
        "source_code_with_indent": "                \"tx_hash IN ({0})\".format(\",\".join(\"?\" for k in batch_tx_hashes)))\n            cursor = self._db.execute(batch_query, params + batch_tx_hashes)\n            rows = cursor.fetchall()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                \"tx_hash IN ({0})\".format(\",\".join(\"?\" for k in batch_tx_hashes)))\n            cursor = self._db.execute(batch_query, params + batch_tx_hashes) # type: ignore\n            rows = cursor.fetchall()\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def read(self, flags: Optional[int]=None, mask: Optional[int]=None,\n            tx_hashes: Optional[Iterable[bytes]]=None) -> List[Tuple[Optional[bytes],\n                int, int, TxData]]:\n        query = self.READ_MANY_BASE_SQL\n",
        "source_code_len": 235,
        "target_code": "\n    def read(self, flags: Optional[TxFlags]=None, mask: Optional[TxFlags]=None,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes,\n                Optional[bytes], TxFlags, TxData]]:\n        query = self.READ_MANY_BASE_SQL\n",
        "target_code_len": 249,
        "diff_format": "@@ -357,5 +364,5 @@\n \n-    def read(self, flags: Optional[int]=None, mask: Optional[int]=None,\n-            tx_hashes: Optional[Iterable[bytes]]=None) -> List[Tuple[Optional[bytes],\n-                int, int, TxData]]:\n+    def read(self, flags: Optional[TxFlags]=None, mask: Optional[TxFlags]=None,\n+            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes,\n+                Optional[bytes], TxFlags, TxData]]:\n         query = self.READ_MANY_BASE_SQL\n",
        "source_code_with_indent": "\n    <DED>def read(self, flags: Optional[int]=None, mask: Optional[int]=None,\n            tx_hashes: Optional[Iterable[bytes]]=None) -> List[Tuple[Optional[bytes],\n                int, int, TxData]]:\n        <IND>query = self.READ_MANY_BASE_SQL\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def read(self, flags: Optional[TxFlags]=None, mask: Optional[TxFlags]=None,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes,\n                Optional[bytes], TxFlags, TxData]]:\n        <IND>query = self.READ_MANY_BASE_SQL\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def read_metadata(self, flags: Optional[int]=None, mask: Optional[int]=None,\n            tx_hashes: Optional[Iterable[bytes]]=None) -> List[Tuple[bytes, int, TxData]]:\n        query = self.READ_METADATA_MANY_BASE_SQL\n",
        "source_code_len": 222,
        "target_code": "\n    def read_metadata(self, flags: Optional[TxFlags]=None, mask: Optional[TxFlags]=None,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes, TxFlags, TxData]]:\n        query = self.READ_METADATA_MANY_BASE_SQL\n",
        "target_code_len": 234,
        "diff_format": "@@ -364,4 +371,4 @@\n \n-    def read_metadata(self, flags: Optional[int]=None, mask: Optional[int]=None,\n-            tx_hashes: Optional[Iterable[bytes]]=None) -> List[Tuple[bytes, int, TxData]]:\n+    def read_metadata(self, flags: Optional[TxFlags]=None, mask: Optional[TxFlags]=None,\n+            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes, TxFlags, TxData]]:\n         query = self.READ_METADATA_MANY_BASE_SQL\n",
        "source_code_with_indent": "\n    <DED>def read_metadata(self, flags: Optional[int]=None, mask: Optional[int]=None,\n            tx_hashes: Optional[Iterable[bytes]]=None) -> List[Tuple[bytes, int, TxData]]:\n        <IND>query = self.READ_METADATA_MANY_BASE_SQL\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def read_metadata(self, flags: Optional[TxFlags]=None, mask: Optional[TxFlags]=None,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes, TxFlags, TxData]]:\n        <IND>query = self.READ_METADATA_MANY_BASE_SQL\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def read_descriptions(self,\n            tx_hashes: Optional[Iterable[bytes]]=None) -> Optional[Tuple[bytes, str]]:\n        query = self.READ_DESCRIPTION_SQL\n",
        "source_code_len": 161,
        "target_code": "    def read_descriptions(self,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes, str]]:\n        query = self.READ_DESCRIPTION_SQL\n",
        "target_code_len": 157,
        "diff_format": "@@ -371,3 +378,3 @@\n     def read_descriptions(self,\n-            tx_hashes: Optional[Iterable[bytes]]=None) -> Optional[Tuple[bytes, str]]:\n+            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes, str]]:\n         query = self.READ_DESCRIPTION_SQL\n",
        "source_code_with_indent": "    <DED>def read_descriptions(self,\n            tx_hashes: Optional[Iterable[bytes]]=None) -> Optional[Tuple[bytes, str]]:\n        <IND>query = self.READ_DESCRIPTION_SQL\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def read_descriptions(self,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes, str]]:\n        <IND>query = self.READ_DESCRIPTION_SQL\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def read_proof(self, tx_hashes: Iterable[bytes]) -> Optional[TxProof]:\n        query = self.READ_PROOF_SQL\n",
        "source_code_len": 112,
        "target_code": "\n    def read_proof(self, tx_hashes: Sequence[bytes]) -> List[Tuple[bytes, Optional[TxProof]]]:\n        query = self.READ_PROOF_SQL\n",
        "target_code_len": 132,
        "diff_format": "@@ -376,3 +383,3 @@\n \n-    def read_proof(self, tx_hashes: Iterable[bytes]) -> Optional[TxProof]:\n+    def read_proof(self, tx_hashes: Sequence[bytes]) -> List[Tuple[bytes, Optional[TxProof]]]:\n         query = self.READ_PROOF_SQL\n",
        "source_code_with_indent": "\n    <DED>def read_proof(self, tx_hashes: Iterable[bytes]) -> Optional[TxProof]:\n        <IND>query = self.READ_PROOF_SQL\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def read_proof(self, tx_hashes: Sequence[bytes]) -> List[Tuple[bytes, Optional[TxProof]]]:\n        <IND>query = self.READ_PROOF_SQL\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def _get_many_common(self, query: str, base_params: Optional[List[Any]]=None,\n            tx_hashes: Optional[Iterable[str]]=None) -> List[Tuple[Any]]:\n        params = base_params[:] if base_params is not None else []\n",
        "source_code_len": 223,
        "target_code": "    def _get_many_common(self, query: str, base_params: Optional[List[Any]]=None,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Any]:\n        params = base_params[:] if base_params is not None else []\n",
        "target_code_len": 218,
        "diff_format": "@@ -800,3 +807,3 @@\n     def _get_many_common(self, query: str, base_params: Optional[List[Any]]=None,\n-            tx_hashes: Optional[Iterable[str]]=None) -> List[Tuple[Any]]:\n+            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Any]:\n         params = base_params[:] if base_params is not None else []\n",
        "source_code_with_indent": "    def _get_many_common(self, query: str, base_params: Optional[List[Any]]=None,\n            tx_hashes: Optional[Iterable[str]]=None) -> List[Tuple[Any]]:\n        <IND>params = base_params[:] if base_params is not None else []\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def _get_many_common(self, query: str, base_params: Optional[List[Any]]=None,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Any]:\n        <IND>params = base_params[:] if base_params is not None else []\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "                \"tx_hash IN ({0})\".format(\",\".join(\"?\" for k in batch_tx_hashes)))\n            cursor = self._db.execute(batch_query, params + batch_tx_hashes)\n            rows = cursor.fetchall()\n",
        "source_code_len": 197,
        "target_code": "                \"tx_hash IN ({0})\".format(\",\".join(\"?\" for k in batch_tx_hashes)))\n            cursor = self._db.execute(batch_query, params + batch_tx_hashes) # type: ignore\n            rows = cursor.fetchall()\n",
        "target_code_len": 212,
        "diff_format": "@@ -819,3 +826,3 @@\n                 \"tx_hash IN ({0})\".format(\",\".join(\"?\" for k in batch_tx_hashes)))\n-            cursor = self._db.execute(batch_query, params + batch_tx_hashes)\n+            cursor = self._db.execute(batch_query, params + batch_tx_hashes) # type: ignore\n             rows = cursor.fetchall()\n",
        "source_code_with_indent": "                \"tx_hash IN ({0})\".format(\",\".join(\"?\" for k in batch_tx_hashes)))\n            cursor = self._db.execute(batch_query, params + batch_tx_hashes)\n            rows = cursor.fetchall()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                \"tx_hash IN ({0})\".format(\",\".join(\"?\" for k in batch_tx_hashes)))\n            cursor = self._db.execute(batch_query, params + batch_tx_hashes) # type: ignore\n            rows = cursor.fetchall()\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def read_history(self, account_id: int,\n            tx_hashes: Optional[Iterable[bytes]]=None) -> List[Tuple[bytes, int, int]]:\n        return self._get_many_common(self.READ_HISTORY_SQL, [ account_id ], tx_hashes)\n",
        "source_code_len": 219,
        "target_code": "    def read_history(self, account_id: int,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes, int, int]]:\n        return self._get_many_common(self.READ_HISTORY_SQL, [ account_id ], tx_hashes)\n",
        "target_code_len": 219,
        "diff_format": "@@ -851,3 +858,3 @@\n     def read_history(self, account_id: int,\n-            tx_hashes: Optional[Iterable[bytes]]=None) -> List[Tuple[bytes, int, int]]:\n+            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes, int, int]]:\n         return self._get_many_common(self.READ_HISTORY_SQL, [ account_id ], tx_hashes)\n",
        "source_code_with_indent": "    <DED>def read_history(self, account_id: int,\n            tx_hashes: Optional[Iterable[bytes]]=None) -> List[Tuple[bytes, int, int]]:\n        <IND>return self._get_many_common(self.READ_HISTORY_SQL, [ account_id ], tx_hashes)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def read_history(self, account_id: int,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes, int, int]]:\n        <IND>return self._get_many_common(self.READ_HISTORY_SQL, [ account_id ], tx_hashes)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "79e529fcac0a5ef5132e0957c602670ada44f797",
    "filename": "electrumsv/wallet_database/tables.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/wallet_database/tables.py",
    "file_hunks_size": 28,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/wallet_database/tables.py:856:8 Incompatible return type [7]: Expected `List[Tuple[bytes, str]]` but got `List[Tuple[typing.Any]]`.",
    "message": " Expected `List[Tuple[bytes, str]]` but got `List[Tuple[typing.Any]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 856,
    "warning_line": "        return self._get_many_common(self.READ_DESCRIPTIONS_SQL, [ account_id ])",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import time\nfrom typing import Any, Dict, Iterable, NamedTuple, Optional, List, Tuple\n\n",
        "source_code_len": 87,
        "target_code": "import time\nfrom typing import Any, Dict, Iterable, NamedTuple, Optional, List, Sequence, Tuple\n\n",
        "target_code_len": 97,
        "diff_format": "@@ -5,3 +4,3 @@\n import time\n-from typing import Any, Dict, Iterable, NamedTuple, Optional, List, Tuple\n+from typing import Any, Dict, Iterable, NamedTuple, Optional, List, Sequence, Tuple\n \n",
        "source_code_with_indent": "import time\nfrom typing import Any, Dict, Iterable, NamedTuple, Optional, List, Tuple\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import time\nfrom typing import Any, Dict, Iterable, NamedTuple, Optional, List, Sequence, Tuple\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def _get_many_common(self, query: str, flags: Optional[int]=None, mask: Optional[int]=None,\n            tx_hashes: Optional[Iterable[str]]=None) -> List[Tuple[Any]]:\n        params = []\n",
        "source_code_len": 190,
        "target_code": "    def _get_many_common(self, query: str, flags: Optional[int]=None, mask: Optional[int]=None,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Any]:\n        params = []\n",
        "target_code_len": 185,
        "diff_format": "@@ -305,3 +312,3 @@\n     def _get_many_common(self, query: str, flags: Optional[int]=None, mask: Optional[int]=None,\n-            tx_hashes: Optional[Iterable[str]]=None) -> List[Tuple[Any]]:\n+            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Any]:\n         params = []\n",
        "source_code_with_indent": "    <DED>def _get_many_common(self, query: str, flags: Optional[int]=None, mask: Optional[int]=None,\n            tx_hashes: Optional[Iterable[str]]=None) -> List[Tuple[Any]]:\n        <IND>params = []\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def _get_many_common(self, query: str, flags: Optional[int]=None, mask: Optional[int]=None,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Any]:\n        <IND>params = []\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "                \"tx_hash IN ({0})\".format(\",\".join(\"?\" for k in batch_tx_hashes)))\n            cursor = self._db.execute(batch_query, params + batch_tx_hashes)\n            rows = cursor.fetchall()\n",
        "source_code_len": 197,
        "target_code": "                \"tx_hash IN ({0})\".format(\",\".join(\"?\" for k in batch_tx_hashes)))\n            cursor = self._db.execute(batch_query, params + batch_tx_hashes) # type: ignore\n            rows = cursor.fetchall()\n",
        "target_code_len": 212,
        "diff_format": "@@ -330,3 +337,3 @@\n                 \"tx_hash IN ({0})\".format(\",\".join(\"?\" for k in batch_tx_hashes)))\n-            cursor = self._db.execute(batch_query, params + batch_tx_hashes)\n+            cursor = self._db.execute(batch_query, params + batch_tx_hashes) # type: ignore\n             rows = cursor.fetchall()\n",
        "source_code_with_indent": "                \"tx_hash IN ({0})\".format(\",\".join(\"?\" for k in batch_tx_hashes)))\n            cursor = self._db.execute(batch_query, params + batch_tx_hashes)\n            rows = cursor.fetchall()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                \"tx_hash IN ({0})\".format(\",\".join(\"?\" for k in batch_tx_hashes)))\n            cursor = self._db.execute(batch_query, params + batch_tx_hashes) # type: ignore\n            rows = cursor.fetchall()\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def read(self, flags: Optional[int]=None, mask: Optional[int]=None,\n            tx_hashes: Optional[Iterable[bytes]]=None) -> List[Tuple[Optional[bytes],\n                int, int, TxData]]:\n        query = self.READ_MANY_BASE_SQL\n",
        "source_code_len": 235,
        "target_code": "\n    def read(self, flags: Optional[TxFlags]=None, mask: Optional[TxFlags]=None,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes,\n                Optional[bytes], TxFlags, TxData]]:\n        query = self.READ_MANY_BASE_SQL\n",
        "target_code_len": 249,
        "diff_format": "@@ -357,5 +364,5 @@\n \n-    def read(self, flags: Optional[int]=None, mask: Optional[int]=None,\n-            tx_hashes: Optional[Iterable[bytes]]=None) -> List[Tuple[Optional[bytes],\n-                int, int, TxData]]:\n+    def read(self, flags: Optional[TxFlags]=None, mask: Optional[TxFlags]=None,\n+            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes,\n+                Optional[bytes], TxFlags, TxData]]:\n         query = self.READ_MANY_BASE_SQL\n",
        "source_code_with_indent": "\n    <DED>def read(self, flags: Optional[int]=None, mask: Optional[int]=None,\n            tx_hashes: Optional[Iterable[bytes]]=None) -> List[Tuple[Optional[bytes],\n                int, int, TxData]]:\n        <IND>query = self.READ_MANY_BASE_SQL\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def read(self, flags: Optional[TxFlags]=None, mask: Optional[TxFlags]=None,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes,\n                Optional[bytes], TxFlags, TxData]]:\n        <IND>query = self.READ_MANY_BASE_SQL\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def read_metadata(self, flags: Optional[int]=None, mask: Optional[int]=None,\n            tx_hashes: Optional[Iterable[bytes]]=None) -> List[Tuple[bytes, int, TxData]]:\n        query = self.READ_METADATA_MANY_BASE_SQL\n",
        "source_code_len": 222,
        "target_code": "\n    def read_metadata(self, flags: Optional[TxFlags]=None, mask: Optional[TxFlags]=None,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes, TxFlags, TxData]]:\n        query = self.READ_METADATA_MANY_BASE_SQL\n",
        "target_code_len": 234,
        "diff_format": "@@ -364,4 +371,4 @@\n \n-    def read_metadata(self, flags: Optional[int]=None, mask: Optional[int]=None,\n-            tx_hashes: Optional[Iterable[bytes]]=None) -> List[Tuple[bytes, int, TxData]]:\n+    def read_metadata(self, flags: Optional[TxFlags]=None, mask: Optional[TxFlags]=None,\n+            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes, TxFlags, TxData]]:\n         query = self.READ_METADATA_MANY_BASE_SQL\n",
        "source_code_with_indent": "\n    <DED>def read_metadata(self, flags: Optional[int]=None, mask: Optional[int]=None,\n            tx_hashes: Optional[Iterable[bytes]]=None) -> List[Tuple[bytes, int, TxData]]:\n        <IND>query = self.READ_METADATA_MANY_BASE_SQL\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def read_metadata(self, flags: Optional[TxFlags]=None, mask: Optional[TxFlags]=None,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes, TxFlags, TxData]]:\n        <IND>query = self.READ_METADATA_MANY_BASE_SQL\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def read_descriptions(self,\n            tx_hashes: Optional[Iterable[bytes]]=None) -> Optional[Tuple[bytes, str]]:\n        query = self.READ_DESCRIPTION_SQL\n",
        "source_code_len": 161,
        "target_code": "    def read_descriptions(self,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes, str]]:\n        query = self.READ_DESCRIPTION_SQL\n",
        "target_code_len": 157,
        "diff_format": "@@ -371,3 +378,3 @@\n     def read_descriptions(self,\n-            tx_hashes: Optional[Iterable[bytes]]=None) -> Optional[Tuple[bytes, str]]:\n+            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes, str]]:\n         query = self.READ_DESCRIPTION_SQL\n",
        "source_code_with_indent": "    <DED>def read_descriptions(self,\n            tx_hashes: Optional[Iterable[bytes]]=None) -> Optional[Tuple[bytes, str]]:\n        <IND>query = self.READ_DESCRIPTION_SQL\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def read_descriptions(self,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes, str]]:\n        <IND>query = self.READ_DESCRIPTION_SQL\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def read_proof(self, tx_hashes: Iterable[bytes]) -> Optional[TxProof]:\n        query = self.READ_PROOF_SQL\n",
        "source_code_len": 112,
        "target_code": "\n    def read_proof(self, tx_hashes: Sequence[bytes]) -> List[Tuple[bytes, Optional[TxProof]]]:\n        query = self.READ_PROOF_SQL\n",
        "target_code_len": 132,
        "diff_format": "@@ -376,3 +383,3 @@\n \n-    def read_proof(self, tx_hashes: Iterable[bytes]) -> Optional[TxProof]:\n+    def read_proof(self, tx_hashes: Sequence[bytes]) -> List[Tuple[bytes, Optional[TxProof]]]:\n         query = self.READ_PROOF_SQL\n",
        "source_code_with_indent": "\n    <DED>def read_proof(self, tx_hashes: Iterable[bytes]) -> Optional[TxProof]:\n        <IND>query = self.READ_PROOF_SQL\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def read_proof(self, tx_hashes: Sequence[bytes]) -> List[Tuple[bytes, Optional[TxProof]]]:\n        <IND>query = self.READ_PROOF_SQL\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def _get_many_common(self, query: str, base_params: Optional[List[Any]]=None,\n            tx_hashes: Optional[Iterable[str]]=None) -> List[Tuple[Any]]:\n        params = base_params[:] if base_params is not None else []\n",
        "source_code_len": 223,
        "target_code": "    def _get_many_common(self, query: str, base_params: Optional[List[Any]]=None,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Any]:\n        params = base_params[:] if base_params is not None else []\n",
        "target_code_len": 218,
        "diff_format": "@@ -800,3 +807,3 @@\n     def _get_many_common(self, query: str, base_params: Optional[List[Any]]=None,\n-            tx_hashes: Optional[Iterable[str]]=None) -> List[Tuple[Any]]:\n+            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Any]:\n         params = base_params[:] if base_params is not None else []\n",
        "source_code_with_indent": "    def _get_many_common(self, query: str, base_params: Optional[List[Any]]=None,\n            tx_hashes: Optional[Iterable[str]]=None) -> List[Tuple[Any]]:\n        <IND>params = base_params[:] if base_params is not None else []\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def _get_many_common(self, query: str, base_params: Optional[List[Any]]=None,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Any]:\n        <IND>params = base_params[:] if base_params is not None else []\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "                \"tx_hash IN ({0})\".format(\",\".join(\"?\" for k in batch_tx_hashes)))\n            cursor = self._db.execute(batch_query, params + batch_tx_hashes)\n            rows = cursor.fetchall()\n",
        "source_code_len": 197,
        "target_code": "                \"tx_hash IN ({0})\".format(\",\".join(\"?\" for k in batch_tx_hashes)))\n            cursor = self._db.execute(batch_query, params + batch_tx_hashes) # type: ignore\n            rows = cursor.fetchall()\n",
        "target_code_len": 212,
        "diff_format": "@@ -819,3 +826,3 @@\n                 \"tx_hash IN ({0})\".format(\",\".join(\"?\" for k in batch_tx_hashes)))\n-            cursor = self._db.execute(batch_query, params + batch_tx_hashes)\n+            cursor = self._db.execute(batch_query, params + batch_tx_hashes) # type: ignore\n             rows = cursor.fetchall()\n",
        "source_code_with_indent": "                \"tx_hash IN ({0})\".format(\",\".join(\"?\" for k in batch_tx_hashes)))\n            cursor = self._db.execute(batch_query, params + batch_tx_hashes)\n            rows = cursor.fetchall()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                \"tx_hash IN ({0})\".format(\",\".join(\"?\" for k in batch_tx_hashes)))\n            cursor = self._db.execute(batch_query, params + batch_tx_hashes) # type: ignore\n            rows = cursor.fetchall()\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def read_history(self, account_id: int,\n            tx_hashes: Optional[Iterable[bytes]]=None) -> List[Tuple[bytes, int, int]]:\n        return self._get_many_common(self.READ_HISTORY_SQL, [ account_id ], tx_hashes)\n",
        "source_code_len": 219,
        "target_code": "    def read_history(self, account_id: int,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes, int, int]]:\n        return self._get_many_common(self.READ_HISTORY_SQL, [ account_id ], tx_hashes)\n",
        "target_code_len": 219,
        "diff_format": "@@ -851,3 +858,3 @@\n     def read_history(self, account_id: int,\n-            tx_hashes: Optional[Iterable[bytes]]=None) -> List[Tuple[bytes, int, int]]:\n+            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes, int, int]]:\n         return self._get_many_common(self.READ_HISTORY_SQL, [ account_id ], tx_hashes)\n",
        "source_code_with_indent": "    <DED>def read_history(self, account_id: int,\n            tx_hashes: Optional[Iterable[bytes]]=None) -> List[Tuple[bytes, int, int]]:\n        <IND>return self._get_many_common(self.READ_HISTORY_SQL, [ account_id ], tx_hashes)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def read_history(self, account_id: int,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes, int, int]]:\n        <IND>return self._get_many_common(self.READ_HISTORY_SQL, [ account_id ], tx_hashes)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "79e529fcac0a5ef5132e0957c602670ada44f797",
    "filename": "electrumsv/wallet_database/tables.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/wallet_database/tables.py",
    "file_hunks_size": 28,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/wallet_database/tables.py:911:38 Incompatible parameter type [6]: Expected `typing.Sized` for 1st positional only parameter to call `len` but got `Iterable[str]`.",
    "message": " Expected `typing.Sized` for 1st positional only parameter to call `len` but got `Iterable[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 911,
    "warning_line": "        if row_ids is None or not len(row_ids):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import time\nfrom typing import Any, Dict, Iterable, NamedTuple, Optional, List, Tuple\n\n",
        "source_code_len": 87,
        "target_code": "import time\nfrom typing import Any, Dict, Iterable, NamedTuple, Optional, List, Sequence, Tuple\n\n",
        "target_code_len": 97,
        "diff_format": "@@ -5,3 +4,3 @@\n import time\n-from typing import Any, Dict, Iterable, NamedTuple, Optional, List, Tuple\n+from typing import Any, Dict, Iterable, NamedTuple, Optional, List, Sequence, Tuple\n \n",
        "source_code_with_indent": "import time\nfrom typing import Any, Dict, Iterable, NamedTuple, Optional, List, Tuple\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import time\nfrom typing import Any, Dict, Iterable, NamedTuple, Optional, List, Sequence, Tuple\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def _get_many_common(self, query: str, flags: Optional[int]=None, mask: Optional[int]=None,\n            tx_hashes: Optional[Iterable[str]]=None) -> List[Tuple[Any]]:\n        params = []\n",
        "source_code_len": 190,
        "target_code": "    def _get_many_common(self, query: str, flags: Optional[int]=None, mask: Optional[int]=None,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Any]:\n        params = []\n",
        "target_code_len": 185,
        "diff_format": "@@ -305,3 +312,3 @@\n     def _get_many_common(self, query: str, flags: Optional[int]=None, mask: Optional[int]=None,\n-            tx_hashes: Optional[Iterable[str]]=None) -> List[Tuple[Any]]:\n+            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Any]:\n         params = []\n",
        "source_code_with_indent": "    <DED>def _get_many_common(self, query: str, flags: Optional[int]=None, mask: Optional[int]=None,\n            tx_hashes: Optional[Iterable[str]]=None) -> List[Tuple[Any]]:\n        <IND>params = []\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def _get_many_common(self, query: str, flags: Optional[int]=None, mask: Optional[int]=None,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Any]:\n        <IND>params = []\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "                \"tx_hash IN ({0})\".format(\",\".join(\"?\" for k in batch_tx_hashes)))\n            cursor = self._db.execute(batch_query, params + batch_tx_hashes)\n            rows = cursor.fetchall()\n",
        "source_code_len": 197,
        "target_code": "                \"tx_hash IN ({0})\".format(\",\".join(\"?\" for k in batch_tx_hashes)))\n            cursor = self._db.execute(batch_query, params + batch_tx_hashes) # type: ignore\n            rows = cursor.fetchall()\n",
        "target_code_len": 212,
        "diff_format": "@@ -330,3 +337,3 @@\n                 \"tx_hash IN ({0})\".format(\",\".join(\"?\" for k in batch_tx_hashes)))\n-            cursor = self._db.execute(batch_query, params + batch_tx_hashes)\n+            cursor = self._db.execute(batch_query, params + batch_tx_hashes) # type: ignore\n             rows = cursor.fetchall()\n",
        "source_code_with_indent": "                \"tx_hash IN ({0})\".format(\",\".join(\"?\" for k in batch_tx_hashes)))\n            cursor = self._db.execute(batch_query, params + batch_tx_hashes)\n            rows = cursor.fetchall()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                \"tx_hash IN ({0})\".format(\",\".join(\"?\" for k in batch_tx_hashes)))\n            cursor = self._db.execute(batch_query, params + batch_tx_hashes) # type: ignore\n            rows = cursor.fetchall()\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def read(self, flags: Optional[int]=None, mask: Optional[int]=None,\n            tx_hashes: Optional[Iterable[bytes]]=None) -> List[Tuple[Optional[bytes],\n                int, int, TxData]]:\n        query = self.READ_MANY_BASE_SQL\n",
        "source_code_len": 235,
        "target_code": "\n    def read(self, flags: Optional[TxFlags]=None, mask: Optional[TxFlags]=None,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes,\n                Optional[bytes], TxFlags, TxData]]:\n        query = self.READ_MANY_BASE_SQL\n",
        "target_code_len": 249,
        "diff_format": "@@ -357,5 +364,5 @@\n \n-    def read(self, flags: Optional[int]=None, mask: Optional[int]=None,\n-            tx_hashes: Optional[Iterable[bytes]]=None) -> List[Tuple[Optional[bytes],\n-                int, int, TxData]]:\n+    def read(self, flags: Optional[TxFlags]=None, mask: Optional[TxFlags]=None,\n+            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes,\n+                Optional[bytes], TxFlags, TxData]]:\n         query = self.READ_MANY_BASE_SQL\n",
        "source_code_with_indent": "\n    <DED>def read(self, flags: Optional[int]=None, mask: Optional[int]=None,\n            tx_hashes: Optional[Iterable[bytes]]=None) -> List[Tuple[Optional[bytes],\n                int, int, TxData]]:\n        <IND>query = self.READ_MANY_BASE_SQL\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def read(self, flags: Optional[TxFlags]=None, mask: Optional[TxFlags]=None,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes,\n                Optional[bytes], TxFlags, TxData]]:\n        <IND>query = self.READ_MANY_BASE_SQL\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def read_metadata(self, flags: Optional[int]=None, mask: Optional[int]=None,\n            tx_hashes: Optional[Iterable[bytes]]=None) -> List[Tuple[bytes, int, TxData]]:\n        query = self.READ_METADATA_MANY_BASE_SQL\n",
        "source_code_len": 222,
        "target_code": "\n    def read_metadata(self, flags: Optional[TxFlags]=None, mask: Optional[TxFlags]=None,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes, TxFlags, TxData]]:\n        query = self.READ_METADATA_MANY_BASE_SQL\n",
        "target_code_len": 234,
        "diff_format": "@@ -364,4 +371,4 @@\n \n-    def read_metadata(self, flags: Optional[int]=None, mask: Optional[int]=None,\n-            tx_hashes: Optional[Iterable[bytes]]=None) -> List[Tuple[bytes, int, TxData]]:\n+    def read_metadata(self, flags: Optional[TxFlags]=None, mask: Optional[TxFlags]=None,\n+            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes, TxFlags, TxData]]:\n         query = self.READ_METADATA_MANY_BASE_SQL\n",
        "source_code_with_indent": "\n    <DED>def read_metadata(self, flags: Optional[int]=None, mask: Optional[int]=None,\n            tx_hashes: Optional[Iterable[bytes]]=None) -> List[Tuple[bytes, int, TxData]]:\n        <IND>query = self.READ_METADATA_MANY_BASE_SQL\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def read_metadata(self, flags: Optional[TxFlags]=None, mask: Optional[TxFlags]=None,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes, TxFlags, TxData]]:\n        <IND>query = self.READ_METADATA_MANY_BASE_SQL\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def read_descriptions(self,\n            tx_hashes: Optional[Iterable[bytes]]=None) -> Optional[Tuple[bytes, str]]:\n        query = self.READ_DESCRIPTION_SQL\n",
        "source_code_len": 161,
        "target_code": "    def read_descriptions(self,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes, str]]:\n        query = self.READ_DESCRIPTION_SQL\n",
        "target_code_len": 157,
        "diff_format": "@@ -371,3 +378,3 @@\n     def read_descriptions(self,\n-            tx_hashes: Optional[Iterable[bytes]]=None) -> Optional[Tuple[bytes, str]]:\n+            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes, str]]:\n         query = self.READ_DESCRIPTION_SQL\n",
        "source_code_with_indent": "    <DED>def read_descriptions(self,\n            tx_hashes: Optional[Iterable[bytes]]=None) -> Optional[Tuple[bytes, str]]:\n        <IND>query = self.READ_DESCRIPTION_SQL\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def read_descriptions(self,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes, str]]:\n        <IND>query = self.READ_DESCRIPTION_SQL\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def read_proof(self, tx_hashes: Iterable[bytes]) -> Optional[TxProof]:\n        query = self.READ_PROOF_SQL\n",
        "source_code_len": 112,
        "target_code": "\n    def read_proof(self, tx_hashes: Sequence[bytes]) -> List[Tuple[bytes, Optional[TxProof]]]:\n        query = self.READ_PROOF_SQL\n",
        "target_code_len": 132,
        "diff_format": "@@ -376,3 +383,3 @@\n \n-    def read_proof(self, tx_hashes: Iterable[bytes]) -> Optional[TxProof]:\n+    def read_proof(self, tx_hashes: Sequence[bytes]) -> List[Tuple[bytes, Optional[TxProof]]]:\n         query = self.READ_PROOF_SQL\n",
        "source_code_with_indent": "\n    <DED>def read_proof(self, tx_hashes: Iterable[bytes]) -> Optional[TxProof]:\n        <IND>query = self.READ_PROOF_SQL\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def read_proof(self, tx_hashes: Sequence[bytes]) -> List[Tuple[bytes, Optional[TxProof]]]:\n        <IND>query = self.READ_PROOF_SQL\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def _get_many_common(self, query: str, base_params: Optional[List[Any]]=None,\n            tx_hashes: Optional[Iterable[str]]=None) -> List[Tuple[Any]]:\n        params = base_params[:] if base_params is not None else []\n",
        "source_code_len": 223,
        "target_code": "    def _get_many_common(self, query: str, base_params: Optional[List[Any]]=None,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Any]:\n        params = base_params[:] if base_params is not None else []\n",
        "target_code_len": 218,
        "diff_format": "@@ -800,3 +807,3 @@\n     def _get_many_common(self, query: str, base_params: Optional[List[Any]]=None,\n-            tx_hashes: Optional[Iterable[str]]=None) -> List[Tuple[Any]]:\n+            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Any]:\n         params = base_params[:] if base_params is not None else []\n",
        "source_code_with_indent": "    def _get_many_common(self, query: str, base_params: Optional[List[Any]]=None,\n            tx_hashes: Optional[Iterable[str]]=None) -> List[Tuple[Any]]:\n        <IND>params = base_params[:] if base_params is not None else []\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def _get_many_common(self, query: str, base_params: Optional[List[Any]]=None,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Any]:\n        <IND>params = base_params[:] if base_params is not None else []\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "                \"tx_hash IN ({0})\".format(\",\".join(\"?\" for k in batch_tx_hashes)))\n            cursor = self._db.execute(batch_query, params + batch_tx_hashes)\n            rows = cursor.fetchall()\n",
        "source_code_len": 197,
        "target_code": "                \"tx_hash IN ({0})\".format(\",\".join(\"?\" for k in batch_tx_hashes)))\n            cursor = self._db.execute(batch_query, params + batch_tx_hashes) # type: ignore\n            rows = cursor.fetchall()\n",
        "target_code_len": 212,
        "diff_format": "@@ -819,3 +826,3 @@\n                 \"tx_hash IN ({0})\".format(\",\".join(\"?\" for k in batch_tx_hashes)))\n-            cursor = self._db.execute(batch_query, params + batch_tx_hashes)\n+            cursor = self._db.execute(batch_query, params + batch_tx_hashes) # type: ignore\n             rows = cursor.fetchall()\n",
        "source_code_with_indent": "                \"tx_hash IN ({0})\".format(\",\".join(\"?\" for k in batch_tx_hashes)))\n            cursor = self._db.execute(batch_query, params + batch_tx_hashes)\n            rows = cursor.fetchall()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                \"tx_hash IN ({0})\".format(\",\".join(\"?\" for k in batch_tx_hashes)))\n            cursor = self._db.execute(batch_query, params + batch_tx_hashes) # type: ignore\n            rows = cursor.fetchall()\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def read_history(self, account_id: int,\n            tx_hashes: Optional[Iterable[bytes]]=None) -> List[Tuple[bytes, int, int]]:\n        return self._get_many_common(self.READ_HISTORY_SQL, [ account_id ], tx_hashes)\n",
        "source_code_len": 219,
        "target_code": "    def read_history(self, account_id: int,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes, int, int]]:\n        return self._get_many_common(self.READ_HISTORY_SQL, [ account_id ], tx_hashes)\n",
        "target_code_len": 219,
        "diff_format": "@@ -851,3 +858,3 @@\n     def read_history(self, account_id: int,\n-            tx_hashes: Optional[Iterable[bytes]]=None) -> List[Tuple[bytes, int, int]]:\n+            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes, int, int]]:\n         return self._get_many_common(self.READ_HISTORY_SQL, [ account_id ], tx_hashes)\n",
        "source_code_with_indent": "    <DED>def read_history(self, account_id: int,\n            tx_hashes: Optional[Iterable[bytes]]=None) -> List[Tuple[bytes, int, int]]:\n        <IND>return self._get_many_common(self.READ_HISTORY_SQL, [ account_id ], tx_hashes)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def read_history(self, account_id: int,\n            tx_hashes: Optional[Sequence[bytes]]=None) -> List[Tuple[bytes, int, int]]:\n        <IND>return self._get_many_common(self.READ_HISTORY_SQL, [ account_id ], tx_hashes)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def _get_many_common(self, query: str, base_params: Optional[List[Any]]=None,\n            row_ids: Optional[Iterable[str]]=None) -> List[Tuple[Any]]:\n        params = base_params[:] if base_params is not None else []\n",
        "source_code_len": 221,
        "target_code": "    def _get_many_common(self, query: str, base_params: Optional[List[Any]]=None,\n            row_ids: Optional[Sequence[str]]=None) -> List[Tuple[Any]]:\n        params = base_params[:] if base_params is not None else []\n",
        "target_code_len": 221,
        "diff_format": "@@ -907,3 +914,3 @@\n     def _get_many_common(self, query: str, base_params: Optional[List[Any]]=None,\n-            row_ids: Optional[Iterable[str]]=None) -> List[Tuple[Any]]:\n+            row_ids: Optional[Sequence[str]]=None) -> List[Tuple[Any]]:\n         params = base_params[:] if base_params is not None else []\n",
        "source_code_with_indent": "    def _get_many_common(self, query: str, base_params: Optional[List[Any]]=None,\n            row_ids: Optional[Iterable[str]]=None) -> List[Tuple[Any]]:\n        <IND>params = base_params[:] if base_params is not None else []\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def _get_many_common(self, query: str, base_params: Optional[List[Any]]=None,\n            row_ids: Optional[Sequence[str]]=None) -> List[Tuple[Any]]:\n        <IND>params = base_params[:] if base_params is not None else []\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "                \"tx_hash IN ({0})\".format(\",\".join(\"?\" for k in batch_row_ids)))\n            cursor = self._db.execute(batch_query, params + batch_row_ids)\n            rows = cursor.fetchall()\n",
        "source_code_len": 193,
        "target_code": "                \"tx_hash IN ({0})\".format(\",\".join(\"?\" for k in batch_row_ids)))\n            cursor = self._db.execute(batch_query, params + batch_row_ids) # type: ignore\n            rows = cursor.fetchall()\n",
        "target_code_len": 208,
        "diff_format": "@@ -926,3 +933,3 @@\n                 \"tx_hash IN ({0})\".format(\",\".join(\"?\" for k in batch_row_ids)))\n-            cursor = self._db.execute(batch_query, params + batch_row_ids)\n+            cursor = self._db.execute(batch_query, params + batch_row_ids) # type: ignore\n             rows = cursor.fetchall()\n",
        "source_code_with_indent": "                \"tx_hash IN ({0})\".format(\",\".join(\"?\" for k in batch_row_ids)))\n            cursor = self._db.execute(batch_query, params + batch_row_ids)\n            rows = cursor.fetchall()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                \"tx_hash IN ({0})\".format(\",\".join(\"?\" for k in batch_row_ids)))\n            cursor = self._db.execute(batch_query, params + batch_row_ids) # type: ignore\n            rows = cursor.fetchall()\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "79e529fcac0a5ef5132e0957c602670ada44f797",
    "filename": "examples/applications/restapi/handler_utils.py",
    "min_patch_found": false,
    "full_warning_msg": "examples/applications/restapi/handler_utils.py:447:38 Incompatible parameter type [6]: Expected `TxFlags` for 2nd parameter `flags` to call `AbstractAccount.set_transaction_state` but got `int`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  }
]