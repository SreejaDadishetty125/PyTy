[
  {
    "project": "DragonMinded/bemaniutils",
    "commit": "4a1579b099cc9b0423b59380491079446a3d3134",
    "filename": "bemani/protocol/binary.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DragonMinded-bemaniutils/bemani/protocol/binary.py",
    "file_hunks_size": 12,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bemani/protocol/binary.py:58:30 Incompatible parameter type [6]: Expected `int` for 1st positional only parameter to call `list.append` but got `None`.",
    "message": " Expected `int` for 1st positional only parameter to call `list.append` but got `None`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 58,
    "warning_line": "            self.order.append(None)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"\"\"\n        self.order: List[int] = []\n        self.expand = allow_expansion\n",
        "source_code_len": 85,
        "target_code": "        \"\"\"\n        self.order: List[Optional[int]] = []\n        self.expand = allow_expansion\n",
        "target_code_len": 95,
        "diff_format": "@@ -53,3 +53,3 @@\n         \"\"\"\n-        self.order: List[int] = []\n+        self.order: List[Optional[int]] = []\n         self.expand = allow_expansion\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n        self.order: List[int] = []\n        self.expand = allow_expansion\n",
        "target_code_with_indent": "\n        self.order: List[Optional[int]] = []\n        self.expand = allow_expansion\n"
      }
    ]
  },
  {
    "project": "DragonMinded/bemaniutils",
    "commit": "4a1579b099cc9b0423b59380491079446a3d3134",
    "filename": "bemani/protocol/binary.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DragonMinded-bemaniutils/bemani/protocol/binary.py",
    "file_hunks_size": 12,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bemani/protocol/binary.py:65:26 Incompatible parameter type [6]: Expected `int` for 1st positional only parameter to call `list.append` but got `None`.",
    "message": " Expected `int` for 1st positional only parameter to call `list.append` but got `None`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 65,
    "warning_line": "        self.order.append(None)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"\"\"\n        self.order: List[int] = []\n        self.expand = allow_expansion\n",
        "source_code_len": 85,
        "target_code": "        \"\"\"\n        self.order: List[Optional[int]] = []\n        self.expand = allow_expansion\n",
        "target_code_len": 95,
        "diff_format": "@@ -53,3 +53,3 @@\n         \"\"\"\n-        self.order: List[int] = []\n+        self.order: List[Optional[int]] = []\n         self.expand = allow_expansion\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n        self.order: List[int] = []\n        self.expand = allow_expansion\n",
        "target_code_with_indent": "\n        self.order: List[Optional[int]] = []\n        self.expand = allow_expansion\n"
      }
    ]
  },
  {
    "project": "DragonMinded/bemaniutils",
    "commit": "4a1579b099cc9b0423b59380491079446a3d3134",
    "filename": "bemani/protocol/binary.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DragonMinded-bemaniutils/bemani/protocol/binary.py",
    "file_hunks_size": 12,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bemani/protocol/binary.py:384:61 Unsupported operand [58]: `+` is not supported for operand types `Optional[int]` and `int`.",
    "message": " `+` is not supported for operand types `Optional[int]` and `int`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 384,
    "warning_line": "                        size = struct.unpack('>I', body[loc:(loc + 4)])[0]",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                        loc = ordering.get_next_int()\n\n",
        "source_code_len": 55,
        "target_code": "                        loc = ordering.get_next_int()\n                    if loc is None:\n                        raise BinaryEncodingException(\"Ran out of data when attempting to read node data location!\")\n\n",
        "target_code_len": 208,
        "diff_format": "@@ -380,2 +392,4 @@\n                         loc = ordering.get_next_int()\n+                    if loc is None:\n+                        raise BinaryEncodingException(\"Ran out of data when attempting to read node data location!\")\n \n",
        "source_code_with_indent": "                        <IND>loc = ordering.get_next_int()\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                        <IND>loc = ordering.get_next_int()\n                    <DED>if loc is None:\n                        <IND>raise BinaryEncodingException(\"Ran out of data when attempting to read node data location!\")\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "DragonMinded/bemaniutils",
    "commit": "4a1579b099cc9b0423b59380491079446a3d3134",
    "filename": "bemani/protocol/binary.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DragonMinded-bemaniutils/bemani/protocol/binary.py",
    "file_hunks_size": 12,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bemani/protocol/binary.py:385:53 Incompatible parameter type [6]: Expected `int` for 2nd positional only parameter to call `PackedOrdering.mark_used` but got `Optional[int]`.",
    "message": " Expected `int` for 2nd positional only parameter to call `PackedOrdering.mark_used` but got `Optional[int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 385,
    "warning_line": "                        ordering.mark_used(size + 4, loc, round_to=4)"
  },
  {
    "project": "DragonMinded/bemaniutils",
    "commit": "4a1579b099cc9b0423b59380491079446a3d3134",
    "filename": "bemani/protocol/binary.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DragonMinded-bemaniutils/bemani/protocol/binary.py",
    "file_hunks_size": 12,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bemani/protocol/binary.py:386:30 Unsupported operand [58]: `+` is not supported for operand types `Optional[int]` and `int`.",
    "message": " `+` is not supported for operand types `Optional[int]` and `int`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 386,
    "warning_line": "                        loc = loc + 4",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                        loc = ordering.get_next_int()\n\n",
        "source_code_len": 55,
        "target_code": "                        loc = ordering.get_next_int()\n                    if loc is None:\n                        raise BinaryEncodingException(\"Ran out of data when attempting to read node data location!\")\n\n",
        "target_code_len": 208,
        "diff_format": "@@ -380,2 +392,4 @@\n                         loc = ordering.get_next_int()\n+                    if loc is None:\n+                        raise BinaryEncodingException(\"Ran out of data when attempting to read node data location!\")\n \n",
        "source_code_with_indent": "                        <IND>loc = ordering.get_next_int()\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                        <IND>loc = ordering.get_next_int()\n                    <DED>if loc is None:\n                        <IND>raise BinaryEncodingException(\"Ran out of data when attempting to read node data location!\")\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "DragonMinded/bemaniutils",
    "commit": "4a1579b099cc9b0423b59380491079446a3d3134",
    "filename": "bemani/protocol/binary.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DragonMinded-bemaniutils/bemani/protocol/binary.py",
    "file_hunks_size": 12,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bemani/protocol/binary.py:392:49 Incompatible parameter type [6]: Expected `int` for 2nd positional only parameter to call `PackedOrdering.mark_used` but got `Optional[int]`.",
    "message": " Expected `int` for 2nd positional only parameter to call `PackedOrdering.mark_used` but got `Optional[int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 392,
    "warning_line": "                        ordering.mark_used(size, loc)"
  },
  {
    "project": "DragonMinded/bemaniutils",
    "commit": "4a1579b099cc9b0423b59380491079446a3d3134",
    "filename": "bemani/protocol/binary.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DragonMinded-bemaniutils/bemani/protocol/binary.py",
    "file_hunks_size": 12,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bemani/protocol/binary.py:424:59 Unsupported operand [58]: `+` is not supported for operand types `Optional[int]` and `int`.",
    "message": " `+` is not supported for operand types `Optional[int]` and `int`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 424,
    "warning_line": "                    length = struct.unpack('>I', body[loc:(loc + 4)])[0]",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                    loc = ordering.get_next_int()\n\n",
        "source_code_len": 51,
        "target_code": "                    loc = ordering.get_next_int()\n                    if loc is None:\n                        raise BinaryEncodingException(\"Ran out of data when attempting to read array length location!\")\n\n",
        "target_code_len": 207,
        "diff_format": "@@ -421,2 +435,4 @@\n                     loc = ordering.get_next_int()\n+                    if loc is None:\n+                        raise BinaryEncodingException(\"Ran out of data when attempting to read array length location!\")\n \n",
        "source_code_with_indent": "                    <IND>loc = ordering.get_next_int()\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                    <IND>loc = ordering.get_next_int()\n                    if loc is None:\n                        <IND>raise BinaryEncodingException(\"Ran out of data when attempting to read array length location!\")\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "DragonMinded/bemaniutils",
    "commit": "4a1579b099cc9b0423b59380491079446a3d3134",
    "filename": "bemani/protocol/binary.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DragonMinded-bemaniutils/bemani/protocol/binary.py",
    "file_hunks_size": 12,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bemani/protocol/binary.py:427:51 Incompatible parameter type [6]: Expected `int` for 2nd positional only parameter to call `PackedOrdering.mark_used` but got `Optional[int]`.",
    "message": " Expected `int` for 2nd positional only parameter to call `PackedOrdering.mark_used` but got `Optional[int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 427,
    "warning_line": "                    ordering.mark_used(length + 4, loc, round_to=4)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                    loc = ordering.get_next_int()\n\n",
        "source_code_len": 51,
        "target_code": "                    loc = ordering.get_next_int()\n                    if loc is None:\n                        raise BinaryEncodingException(\"Ran out of data when attempting to read array length location!\")\n\n",
        "target_code_len": 207,
        "diff_format": "@@ -421,2 +435,4 @@\n                     loc = ordering.get_next_int()\n+                    if loc is None:\n+                        raise BinaryEncodingException(\"Ran out of data when attempting to read array length location!\")\n \n",
        "source_code_with_indent": "                    <IND>loc = ordering.get_next_int()\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                    <IND>loc = ordering.get_next_int()\n                    if loc is None:\n                        <IND>raise BinaryEncodingException(\"Ran out of data when attempting to read array length location!\")\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "DragonMinded/bemaniutils",
    "commit": "4a1579b099cc9b0423b59380491079446a3d3134",
    "filename": "bemani/protocol/binary.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DragonMinded-bemaniutils/bemani/protocol/binary.py",
    "file_hunks_size": 12,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bemani/protocol/binary.py:428:26 Unsupported operand [58]: `+` is not supported for operand types `Optional[int]` and `int`.",
    "message": " `+` is not supported for operand types `Optional[int]` and `int`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 428,
    "warning_line": "                    loc = loc + 4",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                    loc = ordering.get_next_int()\n\n",
        "source_code_len": 51,
        "target_code": "                    loc = ordering.get_next_int()\n                    if loc is None:\n                        raise BinaryEncodingException(\"Ran out of data when attempting to read array length location!\")\n\n",
        "target_code_len": 207,
        "diff_format": "@@ -421,2 +435,4 @@\n                     loc = ordering.get_next_int()\n+                    if loc is None:\n+                        raise BinaryEncodingException(\"Ran out of data when attempting to read array length location!\")\n \n",
        "source_code_with_indent": "                    <IND>loc = ordering.get_next_int()\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                    <IND>loc = ordering.get_next_int()\n                    if loc is None:\n                        <IND>raise BinaryEncodingException(\"Ran out of data when attempting to read array length location!\")\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "DragonMinded/bemaniutils",
    "commit": "4a1579b099cc9b0423b59380491079446a3d3134",
    "filename": "bemani/protocol/binary.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DragonMinded-bemaniutils/bemani/protocol/binary.py",
    "file_hunks_size": 12,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bemani/protocol/binary.py:621:86 Incompatible parameter type [6]: Expected `int` for 3rd positional only parameter to call `BinaryEncoder._BinaryEncoder__add_data` but got `Optional[int]`.",
    "message": " Expected `int` for 3rd positional only parameter to call `BinaryEncoder._BinaryEncoder__add_data` but got `Optional[int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 621,
    "warning_line": "                        self.__add_data(struct.pack('>I', size) + valbytes, size + 4, loc)"
  },
  {
    "project": "DragonMinded/bemaniutils",
    "commit": "4a1579b099cc9b0423b59380491079446a3d3134",
    "filename": "bemani/protocol/binary.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DragonMinded-bemaniutils/bemani/protocol/binary.py",
    "file_hunks_size": 12,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bemani/protocol/binary.py:622:53 Incompatible parameter type [6]: Expected `int` for 2nd positional only parameter to call `PackedOrdering.mark_used` but got `Optional[int]`.",
    "message": " Expected `int` for 2nd positional only parameter to call `PackedOrdering.mark_used` but got `Optional[int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 622,
    "warning_line": "                        ordering.mark_used(size + 4, loc, round_to=4)"
  },
  {
    "project": "DragonMinded/bemaniutils",
    "commit": "4a1579b099cc9b0423b59380491079446a3d3134",
    "filename": "bemani/protocol/binary.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DragonMinded-bemaniutils/bemani/protocol/binary.py",
    "file_hunks_size": 12,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bemani/protocol/binary.py:629:81 Incompatible parameter type [6]: Expected `int` for 3rd positional only parameter to call `BinaryEncoder._BinaryEncoder__add_data` but got `Optional[int]`.",
    "message": " Expected `int` for 3rd positional only parameter to call `BinaryEncoder._BinaryEncoder__add_data` but got `Optional[int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 629,
    "warning_line": "                        self.__add_data(struct.pack('>I', size) + val, size + 4, loc)"
  },
  {
    "project": "DragonMinded/bemaniutils",
    "commit": "4a1579b099cc9b0423b59380491079446a3d3134",
    "filename": "bemani/protocol/binary.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DragonMinded-bemaniutils/bemani/protocol/binary.py",
    "file_hunks_size": 12,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bemani/protocol/binary.py:630:53 Incompatible parameter type [6]: Expected `int` for 2nd positional only parameter to call `PackedOrdering.mark_used` but got `Optional[int]`.",
    "message": " Expected `int` for 2nd positional only parameter to call `PackedOrdering.mark_used` but got `Optional[int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 630,
    "warning_line": "                        ordering.mark_used(size + 4, loc, round_to=4)"
  },
  {
    "project": "DragonMinded/bemaniutils",
    "commit": "4a1579b099cc9b0423b59380491079446a3d3134",
    "filename": "bemani/protocol/binary.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DragonMinded-bemaniutils/bemani/protocol/binary.py",
    "file_hunks_size": 12,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bemani/protocol/binary.py:637:79 Incompatible parameter type [6]: Expected `int` for 3rd positional only parameter to call `BinaryEncoder._BinaryEncoder__add_data` but got `Optional[int]`.",
    "message": " Expected `int` for 3rd positional only parameter to call `BinaryEncoder._BinaryEncoder__add_data` but got `Optional[int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 637,
    "warning_line": "                        self.__add_data(struct.pack(encode_value, *val), size, loc)"
  },
  {
    "project": "DragonMinded/bemaniutils",
    "commit": "4a1579b099cc9b0423b59380491079446a3d3134",
    "filename": "bemani/protocol/binary.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DragonMinded-bemaniutils/bemani/protocol/binary.py",
    "file_hunks_size": 12,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bemani/protocol/binary.py:638:49 Incompatible parameter type [6]: Expected `int` for 2nd positional only parameter to call `PackedOrdering.mark_used` but got `Optional[int]`.",
    "message": " Expected `int` for 2nd positional only parameter to call `PackedOrdering.mark_used` but got `Optional[int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 638,
    "warning_line": "                        ordering.mark_used(size, loc)"
  },
  {
    "project": "DragonMinded/bemaniutils",
    "commit": "4a1579b099cc9b0423b59380491079446a3d3134",
    "filename": "bemani/protocol/binary.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DragonMinded-bemaniutils/bemani/protocol/binary.py",
    "file_hunks_size": 12,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bemani/protocol/binary.py:647:74 Incompatible parameter type [6]: Expected `int` for 3rd positional only parameter to call `BinaryEncoder._BinaryEncoder__add_data` but got `Optional[int]`.",
    "message": " Expected `int` for 3rd positional only parameter to call `BinaryEncoder._BinaryEncoder__add_data` but got `Optional[int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 647,
    "warning_line": "                    self.__add_data(struct.pack(encode_value, val), size, loc)"
  },
  {
    "project": "DragonMinded/bemaniutils",
    "commit": "4a1579b099cc9b0423b59380491079446a3d3134",
    "filename": "bemani/protocol/binary.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DragonMinded-bemaniutils/bemani/protocol/binary.py",
    "file_hunks_size": 12,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bemani/protocol/binary.py:648:45 Incompatible parameter type [6]: Expected `int` for 2nd positional only parameter to call `PackedOrdering.mark_used` but got `Optional[int]`.",
    "message": " Expected `int` for 2nd positional only parameter to call `PackedOrdering.mark_used` but got `Optional[int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 648,
    "warning_line": "                    ordering.mark_used(size, loc)"
  },
  {
    "project": "DragonMinded/bemaniutils",
    "commit": "4a1579b099cc9b0423b59380491079446a3d3134",
    "filename": "bemani/protocol/binary.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DragonMinded-bemaniutils/bemani/protocol/binary.py",
    "file_hunks_size": 12,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bemani/protocol/binary.py:668:54 Incompatible parameter type [6]: Expected `int` for 3rd positional only parameter to call `BinaryEncoder._BinaryEncoder__add_data` but got `Optional[int]`.",
    "message": " Expected `int` for 3rd positional only parameter to call `BinaryEncoder._BinaryEncoder__add_data` but got `Optional[int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 668,
    "warning_line": "                    self.__add_data(data, length + 4, loc)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                    loc = ordering.get_next_int()\n\n",
        "source_code_len": 51,
        "target_code": "                    loc = ordering.get_next_int()\n                    if loc is None:\n                        raise BinaryEncodingException(\"Ran out of data when attempting allocate array location!\")\n                    if size is None:\n                        raise Exception(\"Logic error, node size not set yet this is not an attribute!\")\n\n",
        "target_code_len": 342,
        "diff_format": "@@ -651,2 +675,6 @@\n                     loc = ordering.get_next_int()\n+                    if loc is None:\n+                        raise BinaryEncodingException(\"Ran out of data when attempting allocate array location!\")\n+                    if size is None:\n+                        raise Exception(\"Logic error, node size not set yet this is not an attribute!\")\n \n",
        "source_code_with_indent": "                    <IND>loc = ordering.get_next_int()\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                    <IND>loc = ordering.get_next_int()\n                    if loc is None:\n                        <IND>raise BinaryEncodingException(\"Ran out of data when attempting allocate array location!\")\n                    <DED>if size is None:\n                        <IND>raise Exception(\"Logic error, node size not set yet this is not an attribute!\")\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "DragonMinded/bemaniutils",
    "commit": "4a1579b099cc9b0423b59380491079446a3d3134",
    "filename": "bemani/protocol/binary.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DragonMinded-bemaniutils/bemani/protocol/binary.py",
    "file_hunks_size": 12,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bemani/protocol/binary.py:669:51 Incompatible parameter type [6]: Expected `int` for 2nd positional only parameter to call `PackedOrdering.mark_used` but got `Optional[int]`.",
    "message": " Expected `int` for 2nd positional only parameter to call `PackedOrdering.mark_used` but got `Optional[int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 669,
    "warning_line": "                    ordering.mark_used(length + 4, loc, round_to=4)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                    loc = ordering.get_next_int()\n\n",
        "source_code_len": 51,
        "target_code": "                    loc = ordering.get_next_int()\n                    if loc is None:\n                        raise BinaryEncodingException(\"Ran out of data when attempting allocate array location!\")\n                    if size is None:\n                        raise Exception(\"Logic error, node size not set yet this is not an attribute!\")\n\n",
        "target_code_len": 342,
        "diff_format": "@@ -651,2 +675,6 @@\n                     loc = ordering.get_next_int()\n+                    if loc is None:\n+                        raise BinaryEncodingException(\"Ran out of data when attempting allocate array location!\")\n+                    if size is None:\n+                        raise Exception(\"Logic error, node size not set yet this is not an attribute!\")\n \n",
        "source_code_with_indent": "                    <IND>loc = ordering.get_next_int()\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                    <IND>loc = ordering.get_next_int()\n                    if loc is None:\n                        <IND>raise BinaryEncodingException(\"Ran out of data when attempting allocate array location!\")\n                    <DED>if size is None:\n                        <IND>raise Exception(\"Logic error, node size not set yet this is not an attribute!\")\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "DragonMinded/bemaniutils",
    "commit": "4a1579b099cc9b0423b59380491079446a3d3134",
    "filename": "bemani/protocol/protocol.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DragonMinded-bemaniutils/bemani/protocol/protocol.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bemani/protocol/protocol.py:255:30 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `EAmuseProtocol._EAmuseProtocol__decrypt` but got `Optional[str]`.",
    "message": " Expected `str` for 1st positional only parameter to call `EAmuseProtocol._EAmuseProtocol__decrypt` but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 255,
    "warning_line": "        data = self.__decrypt(encryption, data)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __decrypt(self, encryption_key: str, data: bytes) -> bytes:\n        \"\"\"\n",
        "source_code_len": 81,
        "target_code": "\n    def __decrypt(self, encryption_key: Optional[str], data: bytes) -> bytes:\n        \"\"\"\n",
        "target_code_len": 91,
        "diff_format": "@@ -68,3 +68,3 @@\n \n-    def __decrypt(self, encryption_key: str, data: bytes) -> bytes:\n+    def __decrypt(self, encryption_key: Optional[str], data: bytes) -> bytes:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def __decrypt(self, encryption_key: str, data: bytes) -> bytes:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def __decrypt(self, encryption_key: Optional[str], data: bytes) -> bytes:\n        <IND>"
      }
    ]
  },
  {
    "project": "DragonMinded/bemaniutils",
    "commit": "4a1579b099cc9b0423b59380491079446a3d3134",
    "filename": "bemani/protocol/protocol.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DragonMinded-bemaniutils/bemani/protocol/protocol.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bemani/protocol/protocol.py:256:33 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `EAmuseProtocol._EAmuseProtocol__decompress` but got `Optional[str]`.",
    "message": " Expected `str` for 1st positional only parameter to call `EAmuseProtocol._EAmuseProtocol__decompress` but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 256,
    "warning_line": "        data = self.__decompress(compression, data)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __decompress(self, compression: str, data: bytes) -> bytes:\n        \"\"\"\n",
        "source_code_len": 81,
        "target_code": "\n    def __decompress(self, compression: Optional[str], data: bytes) -> bytes:\n        \"\"\"\n",
        "target_code_len": 91,
        "diff_format": "@@ -119,3 +118,3 @@\n \n-    def __decompress(self, compression: str, data: bytes) -> bytes:\n+    def __decompress(self, compression: Optional[str], data: bytes) -> bytes:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def __decompress(self, compression: str, data: bytes) -> bytes:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def __decompress(self, compression: Optional[str], data: bytes) -> bytes:\n        <IND>"
      }
    ]
  },
  {
    "project": "DragonMinded/bemaniutils",
    "commit": "4a1579b099cc9b0423b59380491079446a3d3134",
    "filename": "bemani/protocol/protocol.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DragonMinded-bemaniutils/bemani/protocol/protocol.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bemani/protocol/protocol.py:300:31 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `EAmuseProtocol._EAmuseProtocol__compress` but got `Optional[str]`.",
    "message": " Expected `str` for 1st positional only parameter to call `EAmuseProtocol._EAmuseProtocol__compress` but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 300,
    "warning_line": "        data = self.__compress(compression, data)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        if compression:\n            if compression is None or compression == 'none':\n                # This isn't compressed\n                return data\n            elif compression == 'lz77':\n                # This is a compressed new-style packet\n                lz = Lz77()\n                return lz.decompress(data)\n            else:\n                raise EAmuseException(f'Unknown compression {compression}')\n\n        # No compression\n        return data\n\n    def __compress(self, compression: str, data: bytes) -> bytes:\n        \"\"\"\n",
        "source_code_len": 540,
        "target_code": "\n        if compression is None or compression == 'none':\n            # This isn't compressed\n            return data\n        elif compression == 'lz77':\n            # This is a compressed new-style packet\n            lz = Lz77()\n            return lz.decompress(data)\n        else:\n            raise EAmuseException(f'Unknown compression {compression}')\n\n    def __compress(self, compression: Optional[str], data: bytes) -> bytes:\n        \"\"\"\n",
        "target_code_len": 444,
        "diff_format": "@@ -135,17 +134,13 @@\n \n-        if compression:\n-            if compression is None or compression == 'none':\n-                # This isn't compressed\n-                return data\n-            elif compression == 'lz77':\n-                # This is a compressed new-style packet\n-                lz = Lz77()\n-                return lz.decompress(data)\n-            else:\n-                raise EAmuseException(f'Unknown compression {compression}')\n-\n-        # No compression\n-        return data\n-\n-    def __compress(self, compression: str, data: bytes) -> bytes:\n+        if compression is None or compression == 'none':\n+            # This isn't compressed\n+            return data\n+        elif compression == 'lz77':\n+            # This is a compressed new-style packet\n+            lz = Lz77()\n+            return lz.decompress(data)\n+        else:\n+            raise EAmuseException(f'Unknown compression {compression}')\n+\n+    def __compress(self, compression: Optional[str], data: bytes) -> bytes:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n        <DED>if compression:\n            <IND>if compression is None or compression == 'none':\n                # This isn't compressed\n                <IND>return data\n            <DED>elif compression == 'lz77':\n                # This is a compressed new-style packet\n                <IND>lz = Lz77()\n                return lz.decompress(data)\n            <DED>else:\n                <IND>raise EAmuseException(f'Unknown compression {compression}')\n\n        # No compression\n        <DED><DED>return data\n\n    <DED>def __compress(self, compression: str, data: bytes) -> bytes:\n        <IND>",
        "target_code_with_indent": "\n        <DED>if compression is None or compression == 'none':\n            # This isn't compressed\n            <IND>return data\n        <DED>elif compression == 'lz77':\n            # This is a compressed new-style packet\n            <IND>lz = Lz77()\n            return lz.decompress(data)\n        <DED>else:\n            <IND>raise EAmuseException(f'Unknown compression {compression}')\n\n    <DED><DED>def __compress(self, compression: Optional[str], data: bytes) -> bytes:\n        <IND>"
      }
    ]
  },
  {
    "project": "DragonMinded/bemaniutils",
    "commit": "4a1579b099cc9b0423b59380491079446a3d3134",
    "filename": "bemani/protocol/protocol.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DragonMinded-bemaniutils/bemani/protocol/protocol.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bemani/protocol/protocol.py:301:30 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `EAmuseProtocol._EAmuseProtocol__encrypt` but got `Optional[str]`.",
    "message": " Expected `str` for 1st positional only parameter to call `EAmuseProtocol._EAmuseProtocol__encrypt` but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 301,
    "warning_line": "        return self.__encrypt(encryption, data)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __encrypt(self, encryption_key: str, data: bytes) -> bytes:\n        \"\"\"\n",
        "source_code_len": 81,
        "target_code": "\n    def __encrypt(self, encryption_key: Optional[str], data: bytes) -> bytes:\n        \"\"\"\n",
        "target_code_len": 91,
        "diff_format": "@@ -103,3 +102,3 @@\n \n-    def __encrypt(self, encryption_key: str, data: bytes) -> bytes:\n+    def __encrypt(self, encryption_key: Optional[str], data: bytes) -> bytes:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def __encrypt(self, encryption_key: str, data: bytes) -> bytes:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def __encrypt(self, encryption_key: Optional[str], data: bytes) -> bytes:\n        <IND>"
      }
    ]
  },
  {
    "project": "DragonMinded/bemaniutils",
    "commit": "4a1579b099cc9b0423b59380491079446a3d3134",
    "filename": "bemani/protocol/stream.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DragonMinded-bemaniutils/bemani/protocol/stream.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bemani/protocol/stream.py:59:8 Incompatible return type [7]: Expected `bytes` but got `Optional[bytes]`.",
    "message": " Expected `bytes` but got `Optional[bytes]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 59,
    "warning_line": "        return self.read_blob(1)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def read_byte(self) -> bytes:\n        \"\"\"\n",
        "source_code_len": 47,
        "target_code": "\n    def read_byte(self) -> Optional[bytes]:\n        \"\"\"\n",
        "target_code_len": 57,
        "diff_format": "@@ -50,3 +50,3 @@\n \n-    def read_byte(self) -> bytes:\n+    def read_byte(self) -> Optional[bytes]:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def read_byte(self) -> bytes:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def read_byte(self) -> Optional[bytes]:\n        <IND>"
      }
    ]
  },
  {
    "project": "DragonMinded/bemaniutils",
    "commit": "4a1579b099cc9b0423b59380491079446a3d3134",
    "filename": "bemani/protocol/stream.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DragonMinded-bemaniutils/bemani/protocol/stream.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bemani/protocol/stream.py:79:16 Incompatible return type [7]: Expected `int` but got `None`.",
    "message": " Expected `int` but got `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 79,
    "warning_line": "                return None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def read_int(self, size: int=1, is_unsigned: bool=True) -> int:\n        \"\"\"\n",
        "source_code_len": 81,
        "target_code": "\n    def read_int(self, size: int=1, is_unsigned: bool=True) -> Optional[int]:\n        \"\"\"\n",
        "target_code_len": 91,
        "diff_format": "@@ -60,3 +60,3 @@\n \n-    def read_int(self, size: int=1, is_unsigned: bool=True) -> int:\n+    def read_int(self, size: int=1, is_unsigned: bool=True) -> Optional[int]:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def read_int(self, size: int=1, is_unsigned: bool=True) -> int:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def read_int(self, size: int=1, is_unsigned: bool=True) -> Optional[int]:\n        <IND>"
      }
    ]
  },
  {
    "project": "DragonMinded/bemaniutils",
    "commit": "4a1579b099cc9b0423b59380491079446a3d3134",
    "filename": "bemani/protocol/stream.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DragonMinded-bemaniutils/bemani/protocol/stream.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bemani/protocol/stream.py:89:16 Incompatible return type [7]: Expected `int` but got `None`.",
    "message": " Expected `int` but got `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 89,
    "warning_line": "                return None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def read_int(self, size: int=1, is_unsigned: bool=True) -> int:\n        \"\"\"\n",
        "source_code_len": 81,
        "target_code": "\n    def read_int(self, size: int=1, is_unsigned: bool=True) -> Optional[int]:\n        \"\"\"\n",
        "target_code_len": 91,
        "diff_format": "@@ -60,3 +60,3 @@\n \n-    def read_int(self, size: int=1, is_unsigned: bool=True) -> int:\n+    def read_int(self, size: int=1, is_unsigned: bool=True) -> Optional[int]:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def read_int(self, size: int=1, is_unsigned: bool=True) -> int:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def read_int(self, size: int=1, is_unsigned: bool=True) -> Optional[int]:\n        <IND>"
      }
    ]
  },
  {
    "project": "DragonMinded/bemaniutils",
    "commit": "4a1579b099cc9b0423b59380491079446a3d3134",
    "filename": "bemani/protocol/stream.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DragonMinded-bemaniutils/bemani/protocol/stream.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bemani/protocol/stream.py:98:16 Incompatible return type [7]: Expected `int` but got `None`.",
    "message": " Expected `int` but got `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 98,
    "warning_line": "                return None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def read_int(self, size: int=1, is_unsigned: bool=True) -> int:\n        \"\"\"\n",
        "source_code_len": 81,
        "target_code": "\n    def read_int(self, size: int=1, is_unsigned: bool=True) -> Optional[int]:\n        \"\"\"\n",
        "target_code_len": 91,
        "diff_format": "@@ -60,3 +60,3 @@\n \n-    def read_int(self, size: int=1, is_unsigned: bool=True) -> int:\n+    def read_int(self, size: int=1, is_unsigned: bool=True) -> Optional[int]:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def read_int(self, size: int=1, is_unsigned: bool=True) -> int:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def read_int(self, size: int=1, is_unsigned: bool=True) -> Optional[int]:\n        <IND>"
      }
    ]
  },
  {
    "project": "DragonMinded/bemaniutils",
    "commit": "4a1579b099cc9b0423b59380491079446a3d3134",
    "filename": "bemani/protocol/xml.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DragonMinded-bemaniutils/bemani/protocol/xml.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bemani/protocol/xml.py:72:41 Incompatible parameter type [6]: Expected `str` for 2nd positional only parameter to call `Node.set_attribute` but got `Optional[str]`.",
    "message": " Expected `str` for 2nd positional only parameter to call `Node.set_attribute` but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 72,
    "warning_line": "                node.set_attribute(attr, attributes.get(attr))",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            else:\n                node.set_attribute(attr, attributes.get(attr))\n\n",
        "source_code_len": 82,
        "target_code": "            else:\n                node.set_attribute(attr, attributes[attr])\n\n",
        "target_code_len": 78,
        "diff_format": "@@ -71,3 +71,3 @@\n             else:\n-                node.set_attribute(attr, attributes.get(attr))\n+                node.set_attribute(attr, attributes[attr])\n \n",
        "source_code_with_indent": "            <DED>else:\n                <IND>node.set_attribute(attr, attributes.get(attr))\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <DED>else:\n                <IND>node.set_attribute(attr, attributes[attr])\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "DragonMinded/bemaniutils",
    "commit": "4a1579b099cc9b0423b59380491079446a3d3134",
    "filename": "bemani/protocol/xml.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DragonMinded-bemaniutils/bemani/protocol/xml.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bemani/protocol/xml.py:316:16 Incompatible return type [7]: Expected `Node` but got `Optional[Node]`.",
    "message": " Expected `Node` but got `Optional[Node]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 316,
    "warning_line": "                return self.root",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def get_tree(self) -> Node:\n        \"\"\"\n",
        "source_code_len": 45,
        "target_code": "\n    def get_tree(self) -> Optional[Node]:\n        \"\"\"\n",
        "target_code_len": 55,
        "diff_format": "@@ -300,3 +300,3 @@\n \n-    def get_tree(self) -> Node:\n+    def get_tree(self) -> Optional[Node]:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED><DED><DED>def get_tree(self) -> Node:\n        <IND>",
        "target_code_with_indent": "\n    <DED><DED><DED>def get_tree(self) -> Optional[Node]:\n        <IND>"
      }
    ]
  }
]