[
  {
    "project": "kovidgoyal/kitty",
    "commit": "1da8ad38399854affde48331e83bed5088f82aaa",
    "filename": "kitty/config.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/kovidgoyal-kitty/kitty/config.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "kitty/config.py:100:60 Incompatible parameter type [6]: Expected `Dict[str, List[ActionAlias]]` for 2nd positional only parameter to call `KeyDefinition.resolve_and_copy` but got `Dict[str, ActionAlias]`.",
    "message": " Expected `Dict[str, List[ActionAlias]]` for 2nd positional only parameter to call `KeyDefinition.resolve_and_copy` but got `Dict[str, ActionAlias]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 100,
    "warning_line": "            defns.append(d.resolve_and_copy(opts.kitty_mod, alias_map))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef finalize_keys(opts: Options, alias_map: Dict[str, ActionAlias]) -> None:\n    defns: List[KeyDefinition] = []\n",
        "source_code_len": 114,
        "target_code": "\ndef finalize_keys(opts: Options, alias_map: Dict[str, List[ActionAlias]]) -> None:\n    defns: List[KeyDefinition] = []\n",
        "target_code_len": 120,
        "diff_format": "@@ -93,3 +93,3 @@\n \n-def finalize_keys(opts: Options, alias_map: Dict[str, ActionAlias]) -> None:\n+def finalize_keys(opts: Options, alias_map: Dict[str, List[ActionAlias]]) -> None:\n     defns: List[KeyDefinition] = []\n",
        "source_code_with_indent": "\n<DED>def finalize_keys(opts: Options, alias_map: Dict[str, ActionAlias]) -> None:\n    <IND>defns: List[KeyDefinition] = []\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def finalize_keys(opts: Options, alias_map: Dict[str, List[ActionAlias]]) -> None:\n    <IND>defns: List[KeyDefinition] = []\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "kovidgoyal/kitty",
    "commit": "1da8ad38399854affde48331e83bed5088f82aaa",
    "filename": "kitty/config.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/kovidgoyal-kitty/kitty/config.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "kitty/config.py:131:60 Incompatible parameter type [6]: Expected `Dict[str, List[ActionAlias]]` for 2nd positional only parameter to call `MouseMapping.resolve_and_copy` but got `Dict[str, ActionAlias]`.",
    "message": " Expected `Dict[str, List[ActionAlias]]` for 2nd positional only parameter to call `MouseMapping.resolve_and_copy` but got `Dict[str, ActionAlias]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 131,
    "warning_line": "            defns.append(d.resolve_and_copy(opts.kitty_mod, alias_map))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef finalize_mouse_mappings(opts: Options, alias_map: Dict[str, ActionAlias]) -> None:\n    defns: List[MouseMapping] = []\n",
        "source_code_len": 123,
        "target_code": "\ndef finalize_mouse_mappings(opts: Options, alias_map: Dict[str, List[ActionAlias]]) -> None:\n    defns: List[MouseMapping] = []\n",
        "target_code_len": 129,
        "diff_format": "@@ -124,3 +124,3 @@\n \n-def finalize_mouse_mappings(opts: Options, alias_map: Dict[str, ActionAlias]) -> None:\n+def finalize_mouse_mappings(opts: Options, alias_map: Dict[str, List[ActionAlias]]) -> None:\n     defns: List[MouseMapping] = []\n",
        "source_code_with_indent": "\n<DED>def finalize_mouse_mappings(opts: Options, alias_map: Dict[str, ActionAlias]) -> None:\n    <IND>defns: List[MouseMapping] = []\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def finalize_mouse_mappings(opts: Options, alias_map: Dict[str, List[ActionAlias]]) -> None:\n    <IND>defns: List[MouseMapping] = []\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "kovidgoyal/kitty",
    "commit": "1da8ad38399854affde48331e83bed5088f82aaa",
    "filename": "kitty/config.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/kovidgoyal-kitty/kitty/config.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "kitty/config.py:164:24 Incompatible parameter type [6]: Expected `Dict[str, ActionAlias]` for 2nd positional only parameter to call `finalize_keys` but got `Dict[str, List[ActionAlias]]`.",
    "message": " Expected `Dict[str, ActionAlias]` for 2nd positional only parameter to call `finalize_keys` but got `Dict[str, List[ActionAlias]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 164,
    "warning_line": "    finalize_keys(opts, alias_map)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef finalize_keys(opts: Options, alias_map: Dict[str, ActionAlias]) -> None:\n    defns: List[KeyDefinition] = []\n",
        "source_code_len": 114,
        "target_code": "\ndef finalize_keys(opts: Options, alias_map: Dict[str, List[ActionAlias]]) -> None:\n    defns: List[KeyDefinition] = []\n",
        "target_code_len": 120,
        "diff_format": "@@ -93,3 +93,3 @@\n \n-def finalize_keys(opts: Options, alias_map: Dict[str, ActionAlias]) -> None:\n+def finalize_keys(opts: Options, alias_map: Dict[str, List[ActionAlias]]) -> None:\n     defns: List[KeyDefinition] = []\n",
        "source_code_with_indent": "\n<DED>def finalize_keys(opts: Options, alias_map: Dict[str, ActionAlias]) -> None:\n    <IND>defns: List[KeyDefinition] = []\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def finalize_keys(opts: Options, alias_map: Dict[str, List[ActionAlias]]) -> None:\n    <IND>defns: List[KeyDefinition] = []\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "kovidgoyal/kitty",
    "commit": "1da8ad38399854affde48331e83bed5088f82aaa",
    "filename": "kitty/config.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/kovidgoyal-kitty/kitty/config.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "kitty/config.py:165:34 Incompatible parameter type [6]: Expected `Dict[str, ActionAlias]` for 2nd positional only parameter to call `finalize_mouse_mappings` but got `Dict[str, List[ActionAlias]]`.",
    "message": " Expected `Dict[str, ActionAlias]` for 2nd positional only parameter to call `finalize_mouse_mappings` but got `Dict[str, List[ActionAlias]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 165,
    "warning_line": "    finalize_mouse_mappings(opts, alias_map)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef finalize_mouse_mappings(opts: Options, alias_map: Dict[str, ActionAlias]) -> None:\n    defns: List[MouseMapping] = []\n",
        "source_code_len": 123,
        "target_code": "\ndef finalize_mouse_mappings(opts: Options, alias_map: Dict[str, List[ActionAlias]]) -> None:\n    defns: List[MouseMapping] = []\n",
        "target_code_len": 129,
        "diff_format": "@@ -124,3 +124,3 @@\n \n-def finalize_mouse_mappings(opts: Options, alias_map: Dict[str, ActionAlias]) -> None:\n+def finalize_mouse_mappings(opts: Options, alias_map: Dict[str, List[ActionAlias]]) -> None:\n     defns: List[MouseMapping] = []\n",
        "source_code_with_indent": "\n<DED>def finalize_mouse_mappings(opts: Options, alias_map: Dict[str, ActionAlias]) -> None:\n    <IND>defns: List[MouseMapping] = []\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def finalize_mouse_mappings(opts: Options, alias_map: Dict[str, List[ActionAlias]]) -> None:\n    <IND>defns: List[MouseMapping] = []\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "kovidgoyal/kitty",
    "commit": "1da8ad38399854affde48331e83bed5088f82aaa",
    "filename": "kitty/open_actions.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/kovidgoyal-kitty/kitty/open_actions.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "kitty/open_actions.py:70:64 Incompatible parameter type [6]: Expected `Dict[str, List[ActionAlias]]` for 2nd positional only parameter to call `resolve_aliases_in_action` but got `Dict[str, ActionAlias]`.",
    "message": " Expected `Dict[str, List[ActionAlias]]` for 2nd positional only parameter to call `resolve_aliases_in_action` but got `Dict[str, ActionAlias]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 70,
    "warning_line": "        yield OpenAction(mc, tuple(resolve_aliases_in_action(a, alias_map) for a in ac))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    actions: List[KeyAction] = []\n    alias_map: Dict[str, ActionAlias] = {}\n    entries = []\n",
        "source_code_len": 94,
        "target_code": "    actions: List[KeyAction] = []\n    alias_map: Dict[str, List[ActionAlias]] = {}\n    entries = []\n",
        "target_code_len": 100,
        "diff_format": "@@ -36,3 +36,3 @@\n     actions: List[KeyAction] = []\n-    alias_map: Dict[str, ActionAlias] = {}\n+    alias_map: Dict[str, List[ActionAlias]] = {}\n     entries = []\n",
        "source_code_with_indent": "    actions: List[KeyAction] = []\n    alias_map: Dict[str, ActionAlias] = {}\n    entries = []\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    actions: List[KeyAction] = []\n    alias_map: Dict[str, List[ActionAlias]] = {}\n    entries = []\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            for (alias_name, args) in action_alias(rest):\n                alias_map[alias_name] = ActionAlias(args[0], args=tuple(args[1:]))\n        else:\n",
        "source_code_len": 155,
        "target_code": "            for (alias_name, args) in action_alias(rest):\n                alias_map[alias_name] = [ActionAlias(args[0], args=tuple(args[1:]))]\n        else:\n",
        "target_code_len": 157,
        "diff_format": "@@ -64,3 +64,3 @@\n             for (alias_name, args) in action_alias(rest):\n-                alias_map[alias_name] = ActionAlias(args[0], args=tuple(args[1:]))\n+                alias_map[alias_name] = [ActionAlias(args[0], args=tuple(args[1:]))]\n         else:\n",
        "source_code_with_indent": "            <IND>for (alias_name, args) in action_alias(rest):\n                <IND>alias_map[alias_name] = ActionAlias(args[0], args=tuple(args[1:]))\n        <DED><DED>else:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <IND>for (alias_name, args) in action_alias(rest):\n                <IND>alias_map[alias_name] = [ActionAlias(args[0], args=tuple(args[1:]))]\n        <DED><DED>else:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "kovidgoyal/kitty",
    "commit": "1da8ad38399854affde48331e83bed5088f82aaa",
    "filename": "kitty/open_actions.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/kovidgoyal-kitty/kitty/open_actions.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "kitty/open_actions.py:72:83 Incompatible parameter type [6]: Expected `Dict[str, List[ActionAlias]]` for 2nd positional only parameter to call `resolve_aliases_in_action` but got `Dict[str, ActionAlias]`.",
    "message": " Expected `Dict[str, List[ActionAlias]]` for 2nd positional only parameter to call `resolve_aliases_in_action` but got `Dict[str, ActionAlias]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 72,
    "warning_line": "        yield OpenAction(tuple(match_criteria), tuple(resolve_aliases_in_action(a, alias_map) for a in actions))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    actions: List[KeyAction] = []\n    alias_map: Dict[str, ActionAlias] = {}\n    entries = []\n",
        "source_code_len": 94,
        "target_code": "    actions: List[KeyAction] = []\n    alias_map: Dict[str, List[ActionAlias]] = {}\n    entries = []\n",
        "target_code_len": 100,
        "diff_format": "@@ -36,3 +36,3 @@\n     actions: List[KeyAction] = []\n-    alias_map: Dict[str, ActionAlias] = {}\n+    alias_map: Dict[str, List[ActionAlias]] = {}\n     entries = []\n",
        "source_code_with_indent": "    actions: List[KeyAction] = []\n    alias_map: Dict[str, ActionAlias] = {}\n    entries = []\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    actions: List[KeyAction] = []\n    alias_map: Dict[str, List[ActionAlias]] = {}\n    entries = []\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            for (alias_name, args) in action_alias(rest):\n                alias_map[alias_name] = ActionAlias(args[0], args=tuple(args[1:]))\n        else:\n",
        "source_code_len": 155,
        "target_code": "            for (alias_name, args) in action_alias(rest):\n                alias_map[alias_name] = [ActionAlias(args[0], args=tuple(args[1:]))]\n        else:\n",
        "target_code_len": 157,
        "diff_format": "@@ -64,3 +64,3 @@\n             for (alias_name, args) in action_alias(rest):\n-                alias_map[alias_name] = ActionAlias(args[0], args=tuple(args[1:]))\n+                alias_map[alias_name] = [ActionAlias(args[0], args=tuple(args[1:]))]\n         else:\n",
        "source_code_with_indent": "            <IND>for (alias_name, args) in action_alias(rest):\n                <IND>alias_map[alias_name] = ActionAlias(args[0], args=tuple(args[1:]))\n        <DED><DED>else:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <IND>for (alias_name, args) in action_alias(rest):\n                <IND>alias_map[alias_name] = [ActionAlias(args[0], args=tuple(args[1:]))]\n        <DED><DED>else:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]