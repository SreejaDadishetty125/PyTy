[
  {
    "project": "algolia/algoliasearch-client-python",
    "commit": "3178aab6a5fc643bf05d473b3f5e19f3e2bce395",
    "filename": "algoliasearch/http/transporter_async.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/algolia-algoliasearch-client-python/algoliasearch/http/transporter_async.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "algoliasearch/http/transporter_async.py:16:4 Inconsistent override [15]: `algoliasearch.http.transporter_async.TransporterAsync.retry` overrides method defined in `Transporter` inconsistently. Returned type `Generator[typing.Any, typing.Any, typing.Any]` is not a subtype of the overridden return `typing.Dict[typing.Any, typing.Any]`.",
    "message": " `algoliasearch.http.transporter_async.TransporterAsync.retry` overrides method defined in `Transporter` inconsistently. Returned type `Generator[typing.Any, typing.Any, typing.Any]` is not a subtype of the overridden return `typing.Dict[typing.Any, typing.Any]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 16,
    "warning_line": "    def retry(self, hosts, request, relative_url):",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n    @asyncio.coroutine\n    def retry(self, hosts, request, relative_url):\n        # type: (HostsCollection, Request, str) -> Generator[dict]\n\n",
        "source_code_len": 143,
        "target_code": "\n    @asyncio.coroutine  # type: ignore\n    def retry(self, hosts, request, relative_url):  # type: ignore\n        # type: (HostsCollection, Request, str) -> dict\n\n",
        "target_code_len": 164,
        "diff_format": "@@ -14,5 +15,5 @@\n \n-    @asyncio.coroutine\n-    def retry(self, hosts, request, relative_url):\n-        # type: (HostsCollection, Request, str) -> Generator[dict]\n+    @asyncio.coroutine  # type: ignore\n+    def retry(self, hosts, request, relative_url):  # type: ignore\n+        # type: (HostsCollection, Request, str) -> dict\n \n",
        "source_code_with_indent": "\n    <IND>@asyncio.coroutine\n    def retry(self, hosts, request, relative_url):\n        # type: (HostsCollection, Request, str) -> Generator[dict]\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <IND>@asyncio.coroutine  # type: ignore\n    def retry(self, hosts, request, relative_url):  # type: ignore\n        # type: (HostsCollection, Request, str) -> dict\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "algolia/algoliasearch-client-python",
    "commit": "3178aab6a5fc643bf05d473b3f5e19f3e2bce395",
    "filename": "algoliasearch/http/transporter_async.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/algolia-algoliasearch-client-python/algoliasearch/http/transporter_async.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "algoliasearch/http/transporter_async.py:26:57 Incompatible parameter type [6]: Expected `algoliasearch.http.transporter.Response` for 2nd positional only parameter to call `algoliasearch.http.transporter.RetryStrategy.decide` but got `Generator[typing.Any, None, None]`.",
    "message": " Expected `algoliasearch.http.transporter.Response` for 2nd positional only parameter to call `algoliasearch.http.transporter.RetryStrategy.decide` but got `Generator[typing.Any, None, None]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 26,
    "warning_line": "            decision = self._retry_strategy.decide(host, response)"
  },
  {
    "project": "algolia/algoliasearch-client-python",
    "commit": "3178aab6a5fc643bf05d473b3f5e19f3e2bce395",
    "filename": "algoliasearch/insights_client_async.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/algolia-algoliasearch-client-python/algoliasearch/insights_client_async.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "algoliasearch/insights_client_async.py:22:39 Incompatible parameter type [6]: Expected `Transporter` for 1st positional only parameter to call `UserInsightsClientAsync.__init__` but got `InsightsClientAsync`.",
    "message": " Expected `Transporter` for 1st positional only parameter to call `UserInsightsClientAsync.__init__` but got `InsightsClientAsync`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 22,
    "warning_line": "        return UserInsightsClientAsync(self, user_token)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def __init__(self, insights_client, user_token):\n        # type: (InsightsClient, Transporter, InsightsConfig) -> None\n\n        super(UserInsightsClientAsync, self).__init__(\n            insights_client._transporter,\n            user_token\n",
        "source_code_len": 244,
        "target_code": "    def __init__(self, insights_client, user_token):\n        # type: (InsightsClient, str) -> None\n\n        super(UserInsightsClientAsync, self).__init__(\n            insights_client,\n            user_token\n",
        "target_code_len": 207,
        "diff_format": "@@ -27,6 +25,6 @@\n     def __init__(self, insights_client, user_token):\n-        # type: (InsightsClient, Transporter, InsightsConfig) -> None\n+        # type: (InsightsClient, str) -> None\n \n         super(UserInsightsClientAsync, self).__init__(\n-            insights_client._transporter,\n+            insights_client,\n             user_token\n",
        "source_code_with_indent": "    <IND>def __init__(self, insights_client, user_token):\n        # type: (InsightsClient, Transporter, InsightsConfig) -> None\n\n        <IND>super(UserInsightsClientAsync, self).__init__(\n            insights_client._transporter,\n            user_token\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <IND>def __init__(self, insights_client, user_token):\n        # type: (InsightsClient, str) -> None\n\n        <IND>super(UserInsightsClientAsync, self).__init__(\n            insights_client,\n            user_token\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "algolia/algoliasearch-client-python",
    "commit": "3178aab6a5fc643bf05d473b3f5e19f3e2bce395",
    "filename": "algoliasearch/insights_client_async.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/algolia-algoliasearch-client-python/algoliasearch/insights_client_async.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "algoliasearch/insights_client_async.py:22:45 Incompatible parameter type [6]: Expected `InsightsConfig` for 2nd positional only parameter to call `UserInsightsClientAsync.__init__` but got `str`.",
    "message": " Expected `InsightsConfig` for 2nd positional only parameter to call `UserInsightsClientAsync.__init__` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 22,
    "warning_line": "        return UserInsightsClientAsync(self, user_token)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def __init__(self, insights_client, user_token):\n        # type: (InsightsClient, Transporter, InsightsConfig) -> None\n\n        super(UserInsightsClientAsync, self).__init__(\n            insights_client._transporter,\n            user_token\n",
        "source_code_len": 244,
        "target_code": "    def __init__(self, insights_client, user_token):\n        # type: (InsightsClient, str) -> None\n\n        super(UserInsightsClientAsync, self).__init__(\n            insights_client,\n            user_token\n",
        "target_code_len": 207,
        "diff_format": "@@ -27,6 +25,6 @@\n     def __init__(self, insights_client, user_token):\n-        # type: (InsightsClient, Transporter, InsightsConfig) -> None\n+        # type: (InsightsClient, str) -> None\n \n         super(UserInsightsClientAsync, self).__init__(\n-            insights_client._transporter,\n+            insights_client,\n             user_token\n",
        "source_code_with_indent": "    <IND>def __init__(self, insights_client, user_token):\n        # type: (InsightsClient, Transporter, InsightsConfig) -> None\n\n        <IND>super(UserInsightsClientAsync, self).__init__(\n            insights_client._transporter,\n            user_token\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <IND>def __init__(self, insights_client, user_token):\n        # type: (InsightsClient, str) -> None\n\n        <IND>super(UserInsightsClientAsync, self).__init__(\n            insights_client,\n            user_token\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "algolia/algoliasearch-client-python",
    "commit": "3178aab6a5fc643bf05d473b3f5e19f3e2bce395",
    "filename": "algoliasearch/insights_client_async.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/algolia-algoliasearch-client-python/algoliasearch/insights_client_async.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "algoliasearch/insights_client_async.py:32:12 Incompatible parameter type [6]: Expected `str` for 2nd positional only parameter to call `UserInsightsClient.__init__` but got `InsightsConfig`.",
    "message": " Expected `str` for 2nd positional only parameter to call `UserInsightsClient.__init__` but got `InsightsConfig`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 32,
    "warning_line": "            user_token",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def __init__(self, insights_client, user_token):\n        # type: (InsightsClient, Transporter, InsightsConfig) -> None\n\n        super(UserInsightsClientAsync, self).__init__(\n            insights_client._transporter,\n            user_token\n",
        "source_code_len": 244,
        "target_code": "    def __init__(self, insights_client, user_token):\n        # type: (InsightsClient, str) -> None\n\n        super(UserInsightsClientAsync, self).__init__(\n            insights_client,\n            user_token\n",
        "target_code_len": 207,
        "diff_format": "@@ -27,6 +25,6 @@\n     def __init__(self, insights_client, user_token):\n-        # type: (InsightsClient, Transporter, InsightsConfig) -> None\n+        # type: (InsightsClient, str) -> None\n \n         super(UserInsightsClientAsync, self).__init__(\n-            insights_client._transporter,\n+            insights_client,\n             user_token\n",
        "source_code_with_indent": "    <IND>def __init__(self, insights_client, user_token):\n        # type: (InsightsClient, Transporter, InsightsConfig) -> None\n\n        <IND>super(UserInsightsClientAsync, self).__init__(\n            insights_client._transporter,\n            user_token\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <IND>def __init__(self, insights_client, user_token):\n        # type: (InsightsClient, str) -> None\n\n        <IND>super(UserInsightsClientAsync, self).__init__(\n            insights_client,\n            user_token\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "algolia/algoliasearch-client-python",
    "commit": "3178aab6a5fc643bf05d473b3f5e19f3e2bce395",
    "filename": "algoliasearch/insights_client_async.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/algolia-algoliasearch-client-python/algoliasearch/insights_client_async.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "algoliasearch/insights_client_async.py:35:36 Incompatible parameter type [6]: Expected `InsightsClient` for 1st positional only parameter to call `UserInsightsClient.__init__` but got `Transporter`.",
    "message": " Expected `InsightsClient` for 1st positional only parameter to call `UserInsightsClient.__init__` but got `Transporter`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 35,
    "warning_line": "        client = UserInsightsClient(insights_client, user_token)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def __init__(self, insights_client, user_token):\n        # type: (InsightsClient, Transporter, InsightsConfig) -> None\n\n        super(UserInsightsClientAsync, self).__init__(\n            insights_client._transporter,\n            user_token\n",
        "source_code_len": 244,
        "target_code": "    def __init__(self, insights_client, user_token):\n        # type: (InsightsClient, str) -> None\n\n        super(UserInsightsClientAsync, self).__init__(\n            insights_client,\n            user_token\n",
        "target_code_len": 207,
        "diff_format": "@@ -27,6 +25,6 @@\n     def __init__(self, insights_client, user_token):\n-        # type: (InsightsClient, Transporter, InsightsConfig) -> None\n+        # type: (InsightsClient, str) -> None\n \n         super(UserInsightsClientAsync, self).__init__(\n-            insights_client._transporter,\n+            insights_client,\n             user_token\n",
        "source_code_with_indent": "    <IND>def __init__(self, insights_client, user_token):\n        # type: (InsightsClient, Transporter, InsightsConfig) -> None\n\n        <IND>super(UserInsightsClientAsync, self).__init__(\n            insights_client._transporter,\n            user_token\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <IND>def __init__(self, insights_client, user_token):\n        # type: (InsightsClient, str) -> None\n\n        <IND>super(UserInsightsClientAsync, self).__init__(\n            insights_client,\n            user_token\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "algolia/algoliasearch-client-python",
    "commit": "3178aab6a5fc643bf05d473b3f5e19f3e2bce395",
    "filename": "algoliasearch/insights_client_async.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/algolia-algoliasearch-client-python/algoliasearch/insights_client_async.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "algoliasearch/insights_client_async.py:35:53 Incompatible parameter type [6]: Expected `str` for 2nd positional only parameter to call `UserInsightsClient.__init__` but got `InsightsConfig`.",
    "message": " Expected `str` for 2nd positional only parameter to call `UserInsightsClient.__init__` but got `InsightsConfig`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 35,
    "warning_line": "        client = UserInsightsClient(insights_client, user_token)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def __init__(self, insights_client, user_token):\n        # type: (InsightsClient, Transporter, InsightsConfig) -> None\n\n        super(UserInsightsClientAsync, self).__init__(\n            insights_client._transporter,\n            user_token\n",
        "source_code_len": 244,
        "target_code": "    def __init__(self, insights_client, user_token):\n        # type: (InsightsClient, str) -> None\n\n        super(UserInsightsClientAsync, self).__init__(\n            insights_client,\n            user_token\n",
        "target_code_len": 207,
        "diff_format": "@@ -27,6 +25,6 @@\n     def __init__(self, insights_client, user_token):\n-        # type: (InsightsClient, Transporter, InsightsConfig) -> None\n+        # type: (InsightsClient, str) -> None\n \n         super(UserInsightsClientAsync, self).__init__(\n-            insights_client._transporter,\n+            insights_client,\n             user_token\n",
        "source_code_with_indent": "    <IND>def __init__(self, insights_client, user_token):\n        # type: (InsightsClient, Transporter, InsightsConfig) -> None\n\n        <IND>super(UserInsightsClientAsync, self).__init__(\n            insights_client._transporter,\n            user_token\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <IND>def __init__(self, insights_client, user_token):\n        # type: (InsightsClient, str) -> None\n\n        <IND>super(UserInsightsClientAsync, self).__init__(\n            insights_client,\n            user_token\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]