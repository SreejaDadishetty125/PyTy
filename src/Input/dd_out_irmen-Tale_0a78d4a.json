[
  {
    "project": "irmen/Tale",
    "commit": "0a78d4a821d7da405bf5335ba3741757f0b593fe",
    "filename": "tale/accounts.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale/tale/accounts.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tale/accounts.py:166:27 Incompatible variable type [9]: having_privilege is declared to have type `str` but is used as type `None`.",
    "message": " having_privilege is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 166,
    "warning_line": "    def all_accounts(self, having_privilege: str=None) -> List[Account]:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def all_accounts(self, having_privilege: str=None) -> List[Account]:\n        with self._sqlite_connect() as conn:\n",
        "source_code_len": 119,
        "target_code": "\n    def all_accounts(self, having_privilege: str=\"\") -> List[Account]:\n        with self._sqlite_connect() as conn:\n",
        "target_code_len": 117,
        "diff_format": "@@ -165,3 +165,3 @@\n \n-    def all_accounts(self, having_privilege: str=None) -> List[Account]:\n+    def all_accounts(self, having_privilege: str=\"\") -> List[Account]:\n         with self._sqlite_connect() as conn:\n",
        "source_code_with_indent": "\n    <DED>def all_accounts(self, having_privilege: str=None) -> List[Account]:\n        <IND>with self._sqlite_connect() as conn:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def all_accounts(self, having_privilege: str=\"\") -> List[Account]:\n        <IND>with self._sqlite_connect() as conn:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "irmen/Tale",
    "commit": "0a78d4a821d7da405bf5335ba3741757f0b593fe",
    "filename": "tale/accounts.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale/tale/accounts.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tale/accounts.py:193:31 Incompatible variable type [9]: salt is declared to have type `str` but is used as type `None`.",
    "message": " salt is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 193,
    "warning_line": "    def _pwhash(password: str, salt: str=None) -> Tuple[str, str]:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @staticmethod\n    def _pwhash(password: str, salt: str=None) -> Tuple[str, str]:\n        if not salt:\n",
        "source_code_len": 106,
        "target_code": "    @staticmethod\n    def _pwhash(password: str, salt: str=\"\") -> Tuple[str, str]:\n        if not salt:\n",
        "target_code_len": 104,
        "diff_format": "@@ -192,3 +192,3 @@\n     @staticmethod\n-    def _pwhash(password: str, salt: str=None) -> Tuple[str, str]:\n+    def _pwhash(password: str, salt: str=\"\") -> Tuple[str, str]:\n         if not salt:\n",
        "source_code_with_indent": "    <DED>@staticmethod\n    def _pwhash(password: str, salt: str=None) -> Tuple[str, str]:\n        <IND>if not salt:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@staticmethod\n    def _pwhash(password: str, salt: str=\"\") -> Tuple[str, str]:\n        <IND>if not salt:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "irmen/Tale",
    "commit": "0a78d4a821d7da405bf5335ba3741757f0b593fe",
    "filename": "tale/accounts.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale/tale/accounts.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tale/accounts.py:249:71 Incompatible parameter type [6]: Expected `datetime.datetime` for 7th positional only parameter to call `Account.__init__` but got `None`.",
    "message": " Expected `datetime.datetime` for 7th positional only parameter to call `Account.__init__` but got `None`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 249,
    "warning_line": "        return Account(name, email, pwhash, salt, privileges, created, None, False, stats, {})",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import json\nfrom typing import Set, Tuple, List, Dict, Any\nimport serpent\n",
        "source_code_len": 74,
        "target_code": "import json\nfrom typing import Set, Tuple, List, Dict, Any, Optional\nimport serpent\n",
        "target_code_len": 84,
        "diff_format": "@@ -14,3 +14,3 @@\n import json\n-from typing import Set, Tuple, List, Dict, Any\n+from typing import Set, Tuple, List, Dict, Any, Optional\n import serpent\n",
        "source_code_with_indent": "import json\nfrom typing import Set, Tuple, List, Dict, Any\nimport serpent\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import json\nfrom typing import Set, Tuple, List, Dict, Any, Optional\nimport serpent\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def __init__(self, name: str, email: str, pw_hash: str, pw_salt: str, privileges: Set[str],\n                 created: datetime.datetime, logged_in: datetime.datetime, banned: bool,\n                 stats: base.Stats, story_data: Dict[Any, Any]) -> None:\n",
        "source_code_len": 258,
        "target_code": "    def __init__(self, name: str, email: str, pw_hash: str, pw_salt: str, privileges: Set[str],\n                 created: datetime.datetime, logged_in: Optional[datetime.datetime], banned: bool,\n                 stats: base.Stats, story_data: Dict[Any, Any]) -> None:\n",
        "target_code_len": 268,
        "diff_format": "@@ -28,3 +28,3 @@\n     def __init__(self, name: str, email: str, pw_hash: str, pw_salt: str, privileges: Set[str],\n-                 created: datetime.datetime, logged_in: datetime.datetime, banned: bool,\n+                 created: datetime.datetime, logged_in: Optional[datetime.datetime], banned: bool,\n                  stats: base.Stats, story_data: Dict[Any, Any]) -> None:\n",
        "source_code_with_indent": "    <IND>def __init__(self, name: str, email: str, pw_hash: str, pw_salt: str, privileges: Set[str],\n                 created: datetime.datetime, logged_in: datetime.datetime, banned: bool,\n                 stats: base.Stats, story_data: Dict[Any, Any]) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <IND>def __init__(self, name: str, email: str, pw_hash: str, pw_salt: str, privileges: Set[str],\n                 created: datetime.datetime, logged_in: Optional[datetime.datetime], banned: bool,\n                 stats: base.Stats, story_data: Dict[Any, Any]) -> None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def change_password_email(self, name: str, old_password: str, new_password: str=None, new_email: str=None) -> None:\n        self.valid_password(name, old_password)\n        new_email = new_email.strip() if new_email else None\n        if new_password:\n",
        "source_code_len": 255,
        "target_code": "\n    def change_password_email(self, name: str, old_password: str, new_password: str=\"\", new_email: str=\"\") -> None:\n        self.valid_password(name, old_password)\n        new_email = new_email.strip() if new_email else \"\"\n        if new_password:\n",
        "target_code_len": 249,
        "diff_format": "@@ -262,5 +262,5 @@\n \n-    def change_password_email(self, name: str, old_password: str, new_password: str=None, new_email: str=None) -> None:\n+    def change_password_email(self, name: str, old_password: str, new_password: str=\"\", new_email: str=\"\") -> None:\n         self.valid_password(name, old_password)\n-        new_email = new_email.strip() if new_email else None\n+        new_email = new_email.strip() if new_email else \"\"\n         if new_password:\n",
        "source_code_with_indent": "\n    <DED>def change_password_email(self, name: str, old_password: str, new_password: str=None, new_email: str=None) -> None:\n        <IND>self.valid_password(name, old_password)\n        new_email = new_email.strip() if new_email else None\n        if new_password:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def change_password_email(self, name: str, old_password: str, new_password: str=\"\", new_email: str=\"\") -> None:\n        <IND>self.valid_password(name, old_password)\n        new_email = new_email.strip() if new_email else \"\"\n        if new_password:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "irmen/Tale",
    "commit": "0a78d4a821d7da405bf5335ba3741757f0b593fe",
    "filename": "tale/accounts.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale/tale/accounts.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tale/accounts.py:263:66 Incompatible variable type [9]: new_password is declared to have type `str` but is used as type `None`.",
    "message": " new_password is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 263,
    "warning_line": "    def change_password_email(self, name: str, old_password: str, new_password: str=None, new_email: str=None) -> None:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def change_password_email(self, name: str, old_password: str, new_password: str=None, new_email: str=None) -> None:\n        self.valid_password(name, old_password)\n        new_email = new_email.strip() if new_email else None\n        if new_password:\n",
        "source_code_len": 255,
        "target_code": "\n    def change_password_email(self, name: str, old_password: str, new_password: str=\"\", new_email: str=\"\") -> None:\n        self.valid_password(name, old_password)\n        new_email = new_email.strip() if new_email else \"\"\n        if new_password:\n",
        "target_code_len": 249,
        "diff_format": "@@ -262,5 +262,5 @@\n \n-    def change_password_email(self, name: str, old_password: str, new_password: str=None, new_email: str=None) -> None:\n+    def change_password_email(self, name: str, old_password: str, new_password: str=\"\", new_email: str=\"\") -> None:\n         self.valid_password(name, old_password)\n-        new_email = new_email.strip() if new_email else None\n+        new_email = new_email.strip() if new_email else \"\"\n         if new_password:\n",
        "source_code_with_indent": "\n    <DED>def change_password_email(self, name: str, old_password: str, new_password: str=None, new_email: str=None) -> None:\n        <IND>self.valid_password(name, old_password)\n        new_email = new_email.strip() if new_email else None\n        if new_password:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def change_password_email(self, name: str, old_password: str, new_password: str=\"\", new_email: str=\"\") -> None:\n        <IND>self.valid_password(name, old_password)\n        new_email = new_email.strip() if new_email else \"\"\n        if new_password:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "irmen/Tale",
    "commit": "0a78d4a821d7da405bf5335ba3741757f0b593fe",
    "filename": "tale/accounts.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale/tale/accounts.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tale/accounts.py:263:90 Incompatible variable type [9]: new_email is declared to have type `str` but is used as type `None`.",
    "message": " new_email is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 263,
    "warning_line": "    def change_password_email(self, name: str, old_password: str, new_password: str=None, new_email: str=None) -> None:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def change_password_email(self, name: str, old_password: str, new_password: str=None, new_email: str=None) -> None:\n        self.valid_password(name, old_password)\n        new_email = new_email.strip() if new_email else None\n        if new_password:\n",
        "source_code_len": 255,
        "target_code": "\n    def change_password_email(self, name: str, old_password: str, new_password: str=\"\", new_email: str=\"\") -> None:\n        self.valid_password(name, old_password)\n        new_email = new_email.strip() if new_email else \"\"\n        if new_password:\n",
        "target_code_len": 249,
        "diff_format": "@@ -262,5 +262,5 @@\n \n-    def change_password_email(self, name: str, old_password: str, new_password: str=None, new_email: str=None) -> None:\n+    def change_password_email(self, name: str, old_password: str, new_password: str=\"\", new_email: str=\"\") -> None:\n         self.valid_password(name, old_password)\n-        new_email = new_email.strip() if new_email else None\n+        new_email = new_email.strip() if new_email else \"\"\n         if new_password:\n",
        "source_code_with_indent": "\n    <DED>def change_password_email(self, name: str, old_password: str, new_password: str=None, new_email: str=None) -> None:\n        <IND>self.valid_password(name, old_password)\n        new_email = new_email.strip() if new_email else None\n        if new_password:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def change_password_email(self, name: str, old_password: str, new_password: str=\"\", new_email: str=\"\") -> None:\n        <IND>self.valid_password(name, old_password)\n        new_email = new_email.strip() if new_email else \"\"\n        if new_password:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "irmen/Tale",
    "commit": "0a78d4a821d7da405bf5335ba3741757f0b593fe",
    "filename": "tale/accounts.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale/tale/accounts.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tale/accounts.py:265:8 Incompatible variable type [9]: new_email is declared to have type `str` but is used as type `typing.Optional[str]`.",
    "message": " new_email is declared to have type `str` but is used as type `typing.Optional[str]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 265,
    "warning_line": "        new_email = new_email.strip() if new_email else None",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def change_password_email(self, name: str, old_password: str, new_password: str=None, new_email: str=None) -> None:\n        self.valid_password(name, old_password)\n        new_email = new_email.strip() if new_email else None\n        if new_password:\n",
        "source_code_len": 255,
        "target_code": "\n    def change_password_email(self, name: str, old_password: str, new_password: str=\"\", new_email: str=\"\") -> None:\n        self.valid_password(name, old_password)\n        new_email = new_email.strip() if new_email else \"\"\n        if new_password:\n",
        "target_code_len": 249,
        "diff_format": "@@ -262,5 +262,5 @@\n \n-    def change_password_email(self, name: str, old_password: str, new_password: str=None, new_email: str=None) -> None:\n+    def change_password_email(self, name: str, old_password: str, new_password: str=\"\", new_email: str=\"\") -> None:\n         self.valid_password(name, old_password)\n-        new_email = new_email.strip() if new_email else None\n+        new_email = new_email.strip() if new_email else \"\"\n         if new_password:\n",
        "source_code_with_indent": "\n    <DED>def change_password_email(self, name: str, old_password: str, new_password: str=None, new_email: str=None) -> None:\n        <IND>self.valid_password(name, old_password)\n        new_email = new_email.strip() if new_email else None\n        if new_password:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def change_password_email(self, name: str, old_password: str, new_password: str=\"\", new_email: str=\"\") -> None:\n        <IND>self.valid_password(name, old_password)\n        new_email = new_email.strip() if new_email else \"\"\n        if new_password:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "irmen/Tale",
    "commit": "0a78d4a821d7da405bf5335ba3741757f0b593fe",
    "filename": "tale/base.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale/tale/base.py",
    "file_hunks_size": 30,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tale/base.py:1375:19 Incompatible variable type [9]: short is declared to have type `bool` but is used as type `None`.",
    "message": " short is declared to have type `bool` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 1375,
    "warning_line": "    def look(self, short: bool=None) -> None:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def look(self, short: bool=None) -> None:\n        \"\"\"look around in your surroundings. Dummy for base livings (they don't perform 'look' nor react to it).\"\"\"\n",
        "source_code_len": 163,
        "target_code": "\n    def look(self, short: Optional[bool]=None) -> None:\n        \"\"\"look around in your surroundings. Dummy for base livings (they don't perform 'look' nor react to it).\"\"\"\n",
        "target_code_len": 173,
        "diff_format": "@@ -1374,3 +1374,3 @@\n \n-    def look(self, short: bool=None) -> None:\n+    def look(self, short: Optional[bool]=None) -> None:\n         \"\"\"look around in your surroundings. Dummy for base livings (they don't perform 'look' nor react to it).\"\"\"\n",
        "source_code_with_indent": "\n    <DED>def look(self, short: bool=None) -> None:\n        <IND>\"\"\"look around in your surroundings. Dummy for base livings (they don't perform 'look' nor react to it).\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def look(self, short: Optional[bool]=None) -> None:\n        <IND>\"\"\"look around in your surroundings. Dummy for base livings (they don't perform 'look' nor react to it).\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "irmen/Tale",
    "commit": "0a78d4a821d7da405bf5335ba3741757f0b593fe",
    "filename": "tale/base.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale/tale/base.py",
    "file_hunks_size": 30,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tale/base.py:1471:35 Incompatible variable type [9]: long_descr is declared to have type `str` but is used as type `None`.",
    "message": " long_descr is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 1471,
    "warning_line": "                 short_descr: str, long_descr: str=None, *, enter_msg: str=None) -> None:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def __init__(self, directions: Union[str, Sequence[str]], target_location: Union[str, Location],\n                 short_descr: str, long_descr: str=None, *, enter_msg: str=None) -> None:\n        assert isinstance(target_location, (Location, str)), \"target must be a Location or a string\"\n",
        "source_code_len": 292,
        "target_code": "    def __init__(self, directions: Union[str, Sequence[str]], target_location: Union[str, Location],\n                 short_descr: str, long_descr: str=\"\", *, enter_msg: str=\"\") -> None:\n        assert isinstance(target_location, (Location, str)), \"target must be a Location or a string\"\n",
        "target_code_len": 288,
        "diff_format": "@@ -1470,3 +1470,3 @@\n     def __init__(self, directions: Union[str, Sequence[str]], target_location: Union[str, Location],\n-                 short_descr: str, long_descr: str=None, *, enter_msg: str=None) -> None:\n+                 short_descr: str, long_descr: str=\"\", *, enter_msg: str=\"\") -> None:\n         assert isinstance(target_location, (Location, str)), \"target must be a Location or a string\"\n",
        "source_code_with_indent": "    def __init__(self, directions: Union[str, Sequence[str]], target_location: Union[str, Location],\n                 short_descr: str, long_descr: str=None, *, enter_msg: str=None) -> None:\n        <IND>assert isinstance(target_location, (Location, str)), \"target must be a Location or a string\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def __init__(self, directions: Union[str, Sequence[str]], target_location: Union[str, Location],\n                 short_descr: str, long_descr: str=\"\", *, enter_msg: str=\"\") -> None:\n        <IND>assert isinstance(target_location, (Location, str)), \"target must be a Location or a string\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "irmen/Tale",
    "commit": "0a78d4a821d7da405bf5335ba3741757f0b593fe",
    "filename": "tale/base.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale/tale/base.py",
    "file_hunks_size": 30,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tale/base.py:1471:60 Incompatible variable type [9]: enter_msg is declared to have type `str` but is used as type `None`.",
    "message": " enter_msg is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 1471,
    "warning_line": "                 short_descr: str, long_descr: str=None, *, enter_msg: str=None) -> None:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def __init__(self, directions: Union[str, Sequence[str]], target_location: Union[str, Location],\n                 short_descr: str, long_descr: str=None, *, enter_msg: str=None) -> None:\n        assert isinstance(target_location, (Location, str)), \"target must be a Location or a string\"\n",
        "source_code_len": 292,
        "target_code": "    def __init__(self, directions: Union[str, Sequence[str]], target_location: Union[str, Location],\n                 short_descr: str, long_descr: str=\"\", *, enter_msg: str=\"\") -> None:\n        assert isinstance(target_location, (Location, str)), \"target must be a Location or a string\"\n",
        "target_code_len": 288,
        "diff_format": "@@ -1470,3 +1470,3 @@\n     def __init__(self, directions: Union[str, Sequence[str]], target_location: Union[str, Location],\n-                 short_descr: str, long_descr: str=None, *, enter_msg: str=None) -> None:\n+                 short_descr: str, long_descr: str=\"\", *, enter_msg: str=\"\") -> None:\n         assert isinstance(target_location, (Location, str)), \"target must be a Location or a string\"\n",
        "source_code_with_indent": "    def __init__(self, directions: Union[str, Sequence[str]], target_location: Union[str, Location],\n                 short_descr: str, long_descr: str=None, *, enter_msg: str=None) -> None:\n        <IND>assert isinstance(target_location, (Location, str)), \"target must be a Location or a string\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def __init__(self, directions: Union[str, Sequence[str]], target_location: Union[str, Location],\n                 short_descr: str, long_descr: str=\"\", *, enter_msg: str=\"\") -> None:\n        <IND>assert isinstance(target_location, (Location, str)), \"target must be a Location or a string\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "irmen/Tale",
    "commit": "0a78d4a821d7da405bf5335ba3741757f0b593fe",
    "filename": "tale/base.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale/tale/base.py",
    "file_hunks_size": 30,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tale/base.py:1515:50 Incompatible parameter type [6]: Expected `str` for 4th positional only parameter to call `Exit.__init__` but got `Optional[str]`.",
    "message": " Expected `str` for 4th positional only parameter to call `Exit.__init__` but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1515,
    "warning_line": "        e1 = cls(directions, to_loc, short_descr, long_descr)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @classmethod\n    def connect(cls, from_loc: Location, directions: Union[str, Sequence[str]], short_descr: str, long_descr: Optional[str],\n                to_loc: Location, return_directions: Union[str, Sequence[str]],\n                return_short_descr: str, return_long_descr: Optional[str]) -> Tuple['Exit', 'Exit']:\n        \"\"\"\n",
        "source_code_len": 335,
        "target_code": "    @classmethod\n    def connect(cls, from_loc: Location, directions: Union[str, Sequence[str]], short_descr: str, long_descr: str,\n                to_loc: Location, return_directions: Union[str, Sequence[str]],\n                return_short_descr: str, return_long_descr: str) -> Tuple['Exit', 'Exit']:\n        \"\"\"\n",
        "target_code_len": 315,
        "diff_format": "@@ -1507,5 +1507,5 @@\n     @classmethod\n-    def connect(cls, from_loc: Location, directions: Union[str, Sequence[str]], short_descr: str, long_descr: Optional[str],\n+    def connect(cls, from_loc: Location, directions: Union[str, Sequence[str]], short_descr: str, long_descr: str,\n                 to_loc: Location, return_directions: Union[str, Sequence[str]],\n-                return_short_descr: str, return_long_descr: Optional[str]) -> Tuple['Exit', 'Exit']:\n+                return_short_descr: str, return_long_descr: str) -> Tuple['Exit', 'Exit']:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "    <DED>@classmethod\n    def connect(cls, from_loc: Location, directions: Union[str, Sequence[str]], short_descr: str, long_descr: Optional[str],\n                to_loc: Location, return_directions: Union[str, Sequence[str]],\n                return_short_descr: str, return_long_descr: Optional[str]) -> Tuple['Exit', 'Exit']:\n        <IND>",
        "target_code_with_indent": "    <DED>@classmethod\n    def connect(cls, from_loc: Location, directions: Union[str, Sequence[str]], short_descr: str, long_descr: str,\n                to_loc: Location, return_directions: Union[str, Sequence[str]],\n                return_short_descr: str, return_long_descr: str) -> Tuple['Exit', 'Exit']:\n        <IND>"
      }
    ]
  },
  {
    "project": "irmen/Tale",
    "commit": "0a78d4a821d7da405bf5335ba3741757f0b593fe",
    "filename": "tale/base.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale/tale/base.py",
    "file_hunks_size": 30,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tale/base.py:1516:66 Incompatible parameter type [6]: Expected `str` for 4th positional only parameter to call `Exit.__init__` but got `Optional[str]`.",
    "message": " Expected `str` for 4th positional only parameter to call `Exit.__init__` but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1516,
    "warning_line": "        e2 = cls(return_directions, from_loc, return_short_descr, return_long_descr)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @classmethod\n    def connect(cls, from_loc: Location, directions: Union[str, Sequence[str]], short_descr: str, long_descr: Optional[str],\n                to_loc: Location, return_directions: Union[str, Sequence[str]],\n                return_short_descr: str, return_long_descr: Optional[str]) -> Tuple['Exit', 'Exit']:\n        \"\"\"\n",
        "source_code_len": 335,
        "target_code": "    @classmethod\n    def connect(cls, from_loc: Location, directions: Union[str, Sequence[str]], short_descr: str, long_descr: str,\n                to_loc: Location, return_directions: Union[str, Sequence[str]],\n                return_short_descr: str, return_long_descr: str) -> Tuple['Exit', 'Exit']:\n        \"\"\"\n",
        "target_code_len": 315,
        "diff_format": "@@ -1507,5 +1507,5 @@\n     @classmethod\n-    def connect(cls, from_loc: Location, directions: Union[str, Sequence[str]], short_descr: str, long_descr: Optional[str],\n+    def connect(cls, from_loc: Location, directions: Union[str, Sequence[str]], short_descr: str, long_descr: str,\n                 to_loc: Location, return_directions: Union[str, Sequence[str]],\n-                return_short_descr: str, return_long_descr: Optional[str]) -> Tuple['Exit', 'Exit']:\n+                return_short_descr: str, return_long_descr: str) -> Tuple['Exit', 'Exit']:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "    <DED>@classmethod\n    def connect(cls, from_loc: Location, directions: Union[str, Sequence[str]], short_descr: str, long_descr: Optional[str],\n                to_loc: Location, return_directions: Union[str, Sequence[str]],\n                return_short_descr: str, return_long_descr: Optional[str]) -> Tuple['Exit', 'Exit']:\n        <IND>",
        "target_code_with_indent": "    <DED>@classmethod\n    def connect(cls, from_loc: Location, directions: Union[str, Sequence[str]], short_descr: str, long_descr: str,\n                to_loc: Location, return_directions: Union[str, Sequence[str]],\n                return_short_descr: str, return_long_descr: str) -> Tuple['Exit', 'Exit']:\n        <IND>"
      }
    ]
  },
  {
    "project": "irmen/Tale",
    "commit": "0a78d4a821d7da405bf5335ba3741757f0b593fe",
    "filename": "tale/base.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale/tale/base.py",
    "file_hunks_size": 30,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tale/base.py:1580:35 Incompatible variable type [9]: long_descr is declared to have type `str` but is used as type `None`.",
    "message": " long_descr is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 1580,
    "warning_line": "                 short_descr: str, long_descr: str=None, *, enter_msg: str=None,",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def __init__(self, directions: Union[str, Sequence[str]], target_location: Union[str, Location],\n                 short_descr: str, long_descr: str=None, *, enter_msg: str=None,\n                 locked: bool=False, opened: bool=False, key_code: str=\"\") -> None:\n",
        "source_code_len": 266,
        "target_code": "    def __init__(self, directions: Union[str, Sequence[str]], target_location: Union[str, Location],\n                 short_descr: str, long_descr: str=\"\", *, enter_msg: str=\"\",\n                 locked: bool=False, opened: bool=False, key_code: str=\"\") -> None:\n",
        "target_code_len": 262,
        "diff_format": "@@ -1579,3 +1579,3 @@\n     def __init__(self, directions: Union[str, Sequence[str]], target_location: Union[str, Location],\n-                 short_descr: str, long_descr: str=None, *, enter_msg: str=None,\n+                 short_descr: str, long_descr: str=\"\", *, enter_msg: str=\"\",\n                  locked: bool=False, opened: bool=False, key_code: str=\"\") -> None:\n",
        "source_code_with_indent": "    def __init__(self, directions: Union[str, Sequence[str]], target_location: Union[str, Location],\n                 short_descr: str, long_descr: str=None, *, enter_msg: str=None,\n                 locked: bool=False, opened: bool=False, key_code: str=\"\") -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def __init__(self, directions: Union[str, Sequence[str]], target_location: Union[str, Location],\n                 short_descr: str, long_descr: str=\"\", *, enter_msg: str=\"\",\n                 locked: bool=False, opened: bool=False, key_code: str=\"\") -> None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "irmen/Tale",
    "commit": "0a78d4a821d7da405bf5335ba3741757f0b593fe",
    "filename": "tale/base.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale/tale/base.py",
    "file_hunks_size": 30,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tale/base.py:1580:60 Incompatible variable type [9]: enter_msg is declared to have type `str` but is used as type `None`.",
    "message": " enter_msg is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 1580,
    "warning_line": "                 short_descr: str, long_descr: str=None, *, enter_msg: str=None,",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def __init__(self, directions: Union[str, Sequence[str]], target_location: Union[str, Location],\n                 short_descr: str, long_descr: str=None, *, enter_msg: str=None,\n                 locked: bool=False, opened: bool=False, key_code: str=\"\") -> None:\n",
        "source_code_len": 266,
        "target_code": "    def __init__(self, directions: Union[str, Sequence[str]], target_location: Union[str, Location],\n                 short_descr: str, long_descr: str=\"\", *, enter_msg: str=\"\",\n                 locked: bool=False, opened: bool=False, key_code: str=\"\") -> None:\n",
        "target_code_len": 262,
        "diff_format": "@@ -1579,3 +1579,3 @@\n     def __init__(self, directions: Union[str, Sequence[str]], target_location: Union[str, Location],\n-                 short_descr: str, long_descr: str=None, *, enter_msg: str=None,\n+                 short_descr: str, long_descr: str=\"\", *, enter_msg: str=\"\",\n                  locked: bool=False, opened: bool=False, key_code: str=\"\") -> None:\n",
        "source_code_with_indent": "    def __init__(self, directions: Union[str, Sequence[str]], target_location: Union[str, Location],\n                 short_descr: str, long_descr: str=None, *, enter_msg: str=None,\n                 locked: bool=False, opened: bool=False, key_code: str=\"\") -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def __init__(self, directions: Union[str, Sequence[str]], target_location: Union[str, Location],\n                 short_descr: str, long_descr: str=\"\", *, enter_msg: str=\"\",\n                 locked: bool=False, opened: bool=False, key_code: str=\"\") -> None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "irmen/Tale",
    "commit": "0a78d4a821d7da405bf5335ba3741757f0b593fe",
    "filename": "tale/base.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale/tale/base.py",
    "file_hunks_size": 30,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tale/base.py:1599:50 Incompatible parameter type [6]: Expected `str` for 4th positional only parameter to call `Door.__init__` but got `Optional[str]`.",
    "message": " Expected `str` for 4th positional only parameter to call `Door.__init__` but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1599,
    "warning_line": "        d1 = cls(directions, to_loc, short_descr, long_descr, locked=locked, opened=opened, key_code=key_code)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def destroy(self, ctx: util.Context) -> None:\n        \"\"\"Common cleanup code that needs to be called when the object is destroyed\"\"\"\n        assert isinstance(ctx, util.Context)\n        mud_context.driver.remove_deferreds(self)\n",
        "source_code_len": 233,
        "target_code": "\n    def destroy(self, ctx: Optional[util.Context]) -> None:\n        \"\"\"Common cleanup code that needs to be called when the object is destroyed\"\"\"\n        mud_context.driver.remove_deferreds(self)\n",
        "target_code_len": 198,
        "diff_format": "@@ -345,5 +346,4 @@\n \n-    def destroy(self, ctx: util.Context) -> None:\n+    def destroy(self, ctx: Optional[util.Context]) -> None:\n         \"\"\"Common cleanup code that needs to be called when the object is destroyed\"\"\"\n-        assert isinstance(ctx, util.Context)\n         mud_context.driver.remove_deferreds(self)\n",
        "source_code_with_indent": "\n    <DED>def destroy(self, ctx: util.Context) -> None:\n        <IND>\"\"\"Common cleanup code that needs to be called when the object is destroyed\"\"\"\n        assert isinstance(ctx, util.Context)\n        mud_context.driver.remove_deferreds(self)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def destroy(self, ctx: Optional[util.Context]) -> None:\n        <IND>\"\"\"Common cleanup code that needs to be called when the object is destroyed\"\"\"\n        mud_context.driver.remove_deferreds(self)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def destroy(self, ctx: util.Context) -> None:\n        super().destroy(ctx)\n",
        "source_code_len": 80,
        "target_code": "\n    def destroy(self, ctx: Optional[util.Context]) -> None:\n        super().destroy(ctx)\n",
        "target_code_len": 90,
        "diff_format": "@@ -612,3 +612,3 @@\n \n-    def destroy(self, ctx: util.Context) -> None:\n+    def destroy(self, ctx: Optional[util.Context]) -> None:\n         super().destroy(ctx)\n",
        "source_code_with_indent": "\n    <DED><DED>def destroy(self, ctx: util.Context) -> None:\n        <IND>super().destroy(ctx)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED><DED>def destroy(self, ctx: Optional[util.Context]) -> None:\n        <IND>super().destroy(ctx)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def destroy(self, ctx: util.Context) -> None:\n        super().destroy(ctx)\n",
        "source_code_len": 80,
        "target_code": "\n    def destroy(self, ctx: Optional[util.Context]) -> None:\n        super().destroy(ctx)\n",
        "target_code_len": 90,
        "diff_format": "@@ -1003,3 +1003,3 @@\n \n-    def destroy(self, ctx: util.Context) -> None:\n+    def destroy(self, ctx: Optional[util.Context]) -> None:\n         super().destroy(ctx)\n",
        "source_code_with_indent": "\n    <DED><DED>def destroy(self, ctx: util.Context) -> None:\n        <IND>super().destroy(ctx)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED><DED>def destroy(self, ctx: Optional[util.Context]) -> None:\n        <IND>super().destroy(ctx)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def destroy(self, ctx: util.Context) -> None:\n        for item in self.__inventory:\n",
        "source_code_len": 89,
        "target_code": "\n    def destroy(self, ctx: Optional[util.Context]) -> None:\n        for item in self.__inventory:\n",
        "target_code_len": 99,
        "diff_format": "@@ -1435,3 +1435,3 @@\n \n-    def destroy(self, ctx: util.Context) -> None:\n+    def destroy(self, ctx: Optional[util.Context]) -> None:\n         for item in self.__inventory:\n",
        "source_code_with_indent": "\n    <DED>def destroy(self, ctx: util.Context) -> None:\n        <IND>for item in self.__inventory:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def destroy(self, ctx: Optional[util.Context]) -> None:\n        <IND>for item in self.__inventory:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @classmethod\n    def connect(cls, from_loc: Location, directions: Union[str, Sequence[str]], short_descr: str, long_descr: Optional[str],\n                to_loc: Location, return_directions: Union[str, Sequence[str]],\n                return_short_descr: str, return_long_descr: Optional[str]) -> Tuple['Exit', 'Exit']:\n        \"\"\"\n",
        "source_code_len": 335,
        "target_code": "    @classmethod\n    def connect(cls, from_loc: Location, directions: Union[str, Sequence[str]], short_descr: str, long_descr: str,\n                to_loc: Location, return_directions: Union[str, Sequence[str]],\n                return_short_descr: str, return_long_descr: str) -> Tuple['Exit', 'Exit']:\n        \"\"\"\n",
        "target_code_len": 315,
        "diff_format": "@@ -1507,5 +1507,5 @@\n     @classmethod\n-    def connect(cls, from_loc: Location, directions: Union[str, Sequence[str]], short_descr: str, long_descr: Optional[str],\n+    def connect(cls, from_loc: Location, directions: Union[str, Sequence[str]], short_descr: str, long_descr: str,\n                 to_loc: Location, return_directions: Union[str, Sequence[str]],\n-                return_short_descr: str, return_long_descr: Optional[str]) -> Tuple['Exit', 'Exit']:\n+                return_short_descr: str, return_long_descr: str) -> Tuple['Exit', 'Exit']:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "    <DED>@classmethod\n    def connect(cls, from_loc: Location, directions: Union[str, Sequence[str]], short_descr: str, long_descr: Optional[str],\n                to_loc: Location, return_directions: Union[str, Sequence[str]],\n                return_short_descr: str, return_long_descr: Optional[str]) -> Tuple['Exit', 'Exit']:\n        <IND>",
        "target_code_with_indent": "    <DED>@classmethod\n    def connect(cls, from_loc: Location, directions: Union[str, Sequence[str]], short_descr: str, long_descr: str,\n                to_loc: Location, return_directions: Union[str, Sequence[str]],\n                return_short_descr: str, return_long_descr: str) -> Tuple['Exit', 'Exit']:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @classmethod\n    def connect(cls, from_loc: Location, directions: Union[str, Sequence[str]], short_descr: str, long_descr: Optional[str],\n                to_loc: Location, return_directions: Union[str, Sequence[str]], return_short_descr: str, return_long_descr: Optional[str],\n                locked: bool=False, opened: bool=False, key_code: str=\"\") -> Tuple['Door', 'Door']:\n",
        "source_code_len": 381,
        "target_code": "    @classmethod\n    def connect(cls, from_loc: Location, directions: Union[str, Sequence[str]], short_descr: str, long_descr: str,\n                to_loc: Location, return_directions: Union[str, Sequence[str]], return_short_descr: str, return_long_descr: str,\n                locked: bool=False, opened: bool=False, key_code: str=\"\") -> Tuple['Door', 'Door']:\n",
        "target_code_len": 361,
        "diff_format": "@@ -1591,4 +1591,4 @@\n     @classmethod\n-    def connect(cls, from_loc: Location, directions: Union[str, Sequence[str]], short_descr: str, long_descr: Optional[str],\n-                to_loc: Location, return_directions: Union[str, Sequence[str]], return_short_descr: str, return_long_descr: Optional[str],\n+    def connect(cls, from_loc: Location, directions: Union[str, Sequence[str]], short_descr: str, long_descr: str,\n+                to_loc: Location, return_directions: Union[str, Sequence[str]], return_short_descr: str, return_long_descr: str,\n                 locked: bool=False, opened: bool=False, key_code: str=\"\") -> Tuple['Door', 'Door']:\n",
        "source_code_with_indent": "    <DED>@classmethod\n    def connect(cls, from_loc: Location, directions: Union[str, Sequence[str]], short_descr: str, long_descr: Optional[str],\n                to_loc: Location, return_directions: Union[str, Sequence[str]], return_short_descr: str, return_long_descr: Optional[str],\n                locked: bool=False, opened: bool=False, key_code: str=\"\") -> Tuple['Door', 'Door']:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@classmethod\n    def connect(cls, from_loc: Location, directions: Union[str, Sequence[str]], short_descr: str, long_descr: str,\n                to_loc: Location, return_directions: Union[str, Sequence[str]], return_short_descr: str, return_long_descr: str,\n                locked: bool=False, opened: bool=False, key_code: str=\"\") -> Tuple['Door', 'Door']:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "irmen/Tale",
    "commit": "0a78d4a821d7da405bf5335ba3741757f0b593fe",
    "filename": "tale/base.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale/tale/base.py",
    "file_hunks_size": 30,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tale/base.py:1600:78 Incompatible parameter type [6]: Expected `str` for 4th positional only parameter to call `Door.reverse_door` but got `Optional[str]`.",
    "message": " Expected `str` for 4th positional only parameter to call `Door.reverse_door` but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1600,
    "warning_line": "        d2 = d1.reverse_door(return_directions, from_loc, return_short_descr, return_long_descr)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def destroy(self, ctx: util.Context) -> None:\n        \"\"\"Common cleanup code that needs to be called when the object is destroyed\"\"\"\n        assert isinstance(ctx, util.Context)\n        mud_context.driver.remove_deferreds(self)\n",
        "source_code_len": 233,
        "target_code": "\n    def destroy(self, ctx: Optional[util.Context]) -> None:\n        \"\"\"Common cleanup code that needs to be called when the object is destroyed\"\"\"\n        mud_context.driver.remove_deferreds(self)\n",
        "target_code_len": 198,
        "diff_format": "@@ -345,5 +346,4 @@\n \n-    def destroy(self, ctx: util.Context) -> None:\n+    def destroy(self, ctx: Optional[util.Context]) -> None:\n         \"\"\"Common cleanup code that needs to be called when the object is destroyed\"\"\"\n-        assert isinstance(ctx, util.Context)\n         mud_context.driver.remove_deferreds(self)\n",
        "source_code_with_indent": "\n    <DED>def destroy(self, ctx: util.Context) -> None:\n        <IND>\"\"\"Common cleanup code that needs to be called when the object is destroyed\"\"\"\n        assert isinstance(ctx, util.Context)\n        mud_context.driver.remove_deferreds(self)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def destroy(self, ctx: Optional[util.Context]) -> None:\n        <IND>\"\"\"Common cleanup code that needs to be called when the object is destroyed\"\"\"\n        mud_context.driver.remove_deferreds(self)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def destroy(self, ctx: util.Context) -> None:\n        super().destroy(ctx)\n",
        "source_code_len": 80,
        "target_code": "\n    def destroy(self, ctx: Optional[util.Context]) -> None:\n        super().destroy(ctx)\n",
        "target_code_len": 90,
        "diff_format": "@@ -612,3 +612,3 @@\n \n-    def destroy(self, ctx: util.Context) -> None:\n+    def destroy(self, ctx: Optional[util.Context]) -> None:\n         super().destroy(ctx)\n",
        "source_code_with_indent": "\n    <DED><DED>def destroy(self, ctx: util.Context) -> None:\n        <IND>super().destroy(ctx)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED><DED>def destroy(self, ctx: Optional[util.Context]) -> None:\n        <IND>super().destroy(ctx)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def destroy(self, ctx: util.Context) -> None:\n        super().destroy(ctx)\n",
        "source_code_len": 80,
        "target_code": "\n    def destroy(self, ctx: Optional[util.Context]) -> None:\n        super().destroy(ctx)\n",
        "target_code_len": 90,
        "diff_format": "@@ -1003,3 +1003,3 @@\n \n-    def destroy(self, ctx: util.Context) -> None:\n+    def destroy(self, ctx: Optional[util.Context]) -> None:\n         super().destroy(ctx)\n",
        "source_code_with_indent": "\n    <DED><DED>def destroy(self, ctx: util.Context) -> None:\n        <IND>super().destroy(ctx)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED><DED>def destroy(self, ctx: Optional[util.Context]) -> None:\n        <IND>super().destroy(ctx)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def destroy(self, ctx: util.Context) -> None:\n        for item in self.__inventory:\n",
        "source_code_len": 89,
        "target_code": "\n    def destroy(self, ctx: Optional[util.Context]) -> None:\n        for item in self.__inventory:\n",
        "target_code_len": 99,
        "diff_format": "@@ -1435,3 +1435,3 @@\n \n-    def destroy(self, ctx: util.Context) -> None:\n+    def destroy(self, ctx: Optional[util.Context]) -> None:\n         for item in self.__inventory:\n",
        "source_code_with_indent": "\n    <DED>def destroy(self, ctx: util.Context) -> None:\n        <IND>for item in self.__inventory:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def destroy(self, ctx: Optional[util.Context]) -> None:\n        <IND>for item in self.__inventory:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @classmethod\n    def connect(cls, from_loc: Location, directions: Union[str, Sequence[str]], short_descr: str, long_descr: Optional[str],\n                to_loc: Location, return_directions: Union[str, Sequence[str]],\n                return_short_descr: str, return_long_descr: Optional[str]) -> Tuple['Exit', 'Exit']:\n        \"\"\"\n",
        "source_code_len": 335,
        "target_code": "    @classmethod\n    def connect(cls, from_loc: Location, directions: Union[str, Sequence[str]], short_descr: str, long_descr: str,\n                to_loc: Location, return_directions: Union[str, Sequence[str]],\n                return_short_descr: str, return_long_descr: str) -> Tuple['Exit', 'Exit']:\n        \"\"\"\n",
        "target_code_len": 315,
        "diff_format": "@@ -1507,5 +1507,5 @@\n     @classmethod\n-    def connect(cls, from_loc: Location, directions: Union[str, Sequence[str]], short_descr: str, long_descr: Optional[str],\n+    def connect(cls, from_loc: Location, directions: Union[str, Sequence[str]], short_descr: str, long_descr: str,\n                 to_loc: Location, return_directions: Union[str, Sequence[str]],\n-                return_short_descr: str, return_long_descr: Optional[str]) -> Tuple['Exit', 'Exit']:\n+                return_short_descr: str, return_long_descr: str) -> Tuple['Exit', 'Exit']:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "    <DED>@classmethod\n    def connect(cls, from_loc: Location, directions: Union[str, Sequence[str]], short_descr: str, long_descr: Optional[str],\n                to_loc: Location, return_directions: Union[str, Sequence[str]],\n                return_short_descr: str, return_long_descr: Optional[str]) -> Tuple['Exit', 'Exit']:\n        <IND>",
        "target_code_with_indent": "    <DED>@classmethod\n    def connect(cls, from_loc: Location, directions: Union[str, Sequence[str]], short_descr: str, long_descr: str,\n                to_loc: Location, return_directions: Union[str, Sequence[str]],\n                return_short_descr: str, return_long_descr: str) -> Tuple['Exit', 'Exit']:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @classmethod\n    def connect(cls, from_loc: Location, directions: Union[str, Sequence[str]], short_descr: str, long_descr: Optional[str],\n                to_loc: Location, return_directions: Union[str, Sequence[str]], return_short_descr: str, return_long_descr: Optional[str],\n                locked: bool=False, opened: bool=False, key_code: str=\"\") -> Tuple['Door', 'Door']:\n",
        "source_code_len": 381,
        "target_code": "    @classmethod\n    def connect(cls, from_loc: Location, directions: Union[str, Sequence[str]], short_descr: str, long_descr: str,\n                to_loc: Location, return_directions: Union[str, Sequence[str]], return_short_descr: str, return_long_descr: str,\n                locked: bool=False, opened: bool=False, key_code: str=\"\") -> Tuple['Door', 'Door']:\n",
        "target_code_len": 361,
        "diff_format": "@@ -1591,4 +1591,4 @@\n     @classmethod\n-    def connect(cls, from_loc: Location, directions: Union[str, Sequence[str]], short_descr: str, long_descr: Optional[str],\n-                to_loc: Location, return_directions: Union[str, Sequence[str]], return_short_descr: str, return_long_descr: Optional[str],\n+    def connect(cls, from_loc: Location, directions: Union[str, Sequence[str]], short_descr: str, long_descr: str,\n+                to_loc: Location, return_directions: Union[str, Sequence[str]], return_short_descr: str, return_long_descr: str,\n                 locked: bool=False, opened: bool=False, key_code: str=\"\") -> Tuple['Door', 'Door']:\n",
        "source_code_with_indent": "    <DED>@classmethod\n    def connect(cls, from_loc: Location, directions: Union[str, Sequence[str]], short_descr: str, long_descr: Optional[str],\n                to_loc: Location, return_directions: Union[str, Sequence[str]], return_short_descr: str, return_long_descr: Optional[str],\n                locked: bool=False, opened: bool=False, key_code: str=\"\") -> Tuple['Door', 'Door']:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@classmethod\n    def connect(cls, from_loc: Location, directions: Union[str, Sequence[str]], short_descr: str, long_descr: str,\n                to_loc: Location, return_directions: Union[str, Sequence[str]], return_short_descr: str, return_long_descr: str,\n                locked: bool=False, opened: bool=False, key_code: str=\"\") -> Tuple['Door', 'Door']:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "irmen/Tale",
    "commit": "0a78d4a821d7da405bf5335ba3741757f0b593fe",
    "filename": "tale/base.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale/tale/base.py",
    "file_hunks_size": 30,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tale/base.py:1606:45 Incompatible variable type [9]: long_description is declared to have type `str` but is used as type `None`.",
    "message": " long_description is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 1606,
    "warning_line": "                     short_description: str, long_description: str=None) -> 'Door':",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def reverse_door(self, directions: Union[str, Sequence[str]], returning_location: Location,\n                     short_description: str, long_description: str=None) -> 'Door':\n        \"\"\"\n",
        "source_code_len": 192,
        "target_code": "    def reverse_door(self, directions: Union[str, Sequence[str]], returning_location: Location,\n                     short_description: str, long_description: str=\"\") -> 'Door':\n        \"\"\"\n",
        "target_code_len": 190,
        "diff_format": "@@ -1605,3 +1605,3 @@\n     def reverse_door(self, directions: Union[str, Sequence[str]], returning_location: Location,\n-                     short_description: str, long_description: str=None) -> 'Door':\n+                     short_description: str, long_description: str=\"\") -> 'Door':\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "    <DED>def reverse_door(self, directions: Union[str, Sequence[str]], returning_location: Location,\n                     short_description: str, long_description: str=None) -> 'Door':\n        <IND>",
        "target_code_with_indent": "    <DED>def reverse_door(self, directions: Union[str, Sequence[str]], returning_location: Location,\n                     short_description: str, long_description: str=\"\") -> 'Door':\n        <IND>"
      }
    ]
  },
  {
    "project": "irmen/Tale",
    "commit": "0a78d4a821d7da405bf5335ba3741757f0b593fe",
    "filename": "tale/base.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale/tale/base.py",
    "file_hunks_size": 30,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tale/base.py:1758:39 Incompatible variable type [9]: code is declared to have type `str` but is used as type `None`.",
    "message": " code is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 1758,
    "warning_line": "    def key_for(self, door: Door=None, code: str=None) -> None:"
  },
  {
    "project": "irmen/Tale",
    "commit": "0a78d4a821d7da405bf5335ba3741757f0b593fe",
    "filename": "tale/charbuilder.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale/tale/charbuilder.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tale/charbuilder.py:20:8 Incompatible attribute type [8]: Attribute `_name` declared in class `PlayerNaming` has type `str` but is used as type `None`.",
    "message": " Attribute `_name` declared in class `PlayerNaming` has type `str` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 20,
    "warning_line": "        self._name = self.title = self.gender = self.description = self.short_description = None  # type: str",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def __init__(self) -> None:\n        self._name = self.title = self.gender = self.description = self.short_description = None  # type: str\n        self.money = mud_context.config.player_money\n",
        "source_code_len": 195,
        "target_code": "    def __init__(self) -> None:\n        self._name = self.title = self.gender = self.description = self.short_description = \"\"\n        self.money = mud_context.config.player_money\n",
        "target_code_len": 180,
        "diff_format": "@@ -19,3 +19,3 @@\n     def __init__(self) -> None:\n-        self._name = self.title = self.gender = self.description = self.short_description = None  # type: str\n+        self._name = self.title = self.gender = self.description = self.short_description = \"\"\n         self.money = mud_context.config.player_money\n",
        "source_code_with_indent": "    <IND>def __init__(self) -> None:\n        <IND>self._name = self.title = self.gender = self.description = self.short_description = None  # type: str\n        self.money = mud_context.config.player_money\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <IND>def __init__(self) -> None:\n        <IND>self._name = self.title = self.gender = self.description = self.short_description = \"\"\n        self.money = mud_context.config.player_money\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "irmen/Tale",
    "commit": "0a78d4a821d7da405bf5335ba3741757f0b593fe",
    "filename": "tale/charbuilder.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale/tale/charbuilder.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tale/charbuilder.py:20:21 Incompatible attribute type [8]: Attribute `title` declared in class `PlayerNaming` has type `str` but is used as type `None`.",
    "message": " Attribute `title` declared in class `PlayerNaming` has type `str` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 20,
    "warning_line": "        self._name = self.title = self.gender = self.description = self.short_description = None  # type: str",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def __init__(self) -> None:\n        self._name = self.title = self.gender = self.description = self.short_description = None  # type: str\n        self.money = mud_context.config.player_money\n",
        "source_code_len": 195,
        "target_code": "    def __init__(self) -> None:\n        self._name = self.title = self.gender = self.description = self.short_description = \"\"\n        self.money = mud_context.config.player_money\n",
        "target_code_len": 180,
        "diff_format": "@@ -19,3 +19,3 @@\n     def __init__(self) -> None:\n-        self._name = self.title = self.gender = self.description = self.short_description = None  # type: str\n+        self._name = self.title = self.gender = self.description = self.short_description = \"\"\n         self.money = mud_context.config.player_money\n",
        "source_code_with_indent": "    <IND>def __init__(self) -> None:\n        <IND>self._name = self.title = self.gender = self.description = self.short_description = None  # type: str\n        self.money = mud_context.config.player_money\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <IND>def __init__(self) -> None:\n        <IND>self._name = self.title = self.gender = self.description = self.short_description = \"\"\n        self.money = mud_context.config.player_money\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "irmen/Tale",
    "commit": "0a78d4a821d7da405bf5335ba3741757f0b593fe",
    "filename": "tale/charbuilder.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale/tale/charbuilder.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tale/charbuilder.py:20:34 Incompatible attribute type [8]: Attribute `gender` declared in class `PlayerNaming` has type `str` but is used as type `None`.",
    "message": " Attribute `gender` declared in class `PlayerNaming` has type `str` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 20,
    "warning_line": "        self._name = self.title = self.gender = self.description = self.short_description = None  # type: str",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def __init__(self) -> None:\n        self._name = self.title = self.gender = self.description = self.short_description = None  # type: str\n        self.money = mud_context.config.player_money\n",
        "source_code_len": 195,
        "target_code": "    def __init__(self) -> None:\n        self._name = self.title = self.gender = self.description = self.short_description = \"\"\n        self.money = mud_context.config.player_money\n",
        "target_code_len": 180,
        "diff_format": "@@ -19,3 +19,3 @@\n     def __init__(self) -> None:\n-        self._name = self.title = self.gender = self.description = self.short_description = None  # type: str\n+        self._name = self.title = self.gender = self.description = self.short_description = \"\"\n         self.money = mud_context.config.player_money\n",
        "source_code_with_indent": "    <IND>def __init__(self) -> None:\n        <IND>self._name = self.title = self.gender = self.description = self.short_description = None  # type: str\n        self.money = mud_context.config.player_money\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <IND>def __init__(self) -> None:\n        <IND>self._name = self.title = self.gender = self.description = self.short_description = \"\"\n        self.money = mud_context.config.player_money\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "irmen/Tale",
    "commit": "0a78d4a821d7da405bf5335ba3741757f0b593fe",
    "filename": "tale/charbuilder.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale/tale/charbuilder.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tale/charbuilder.py:20:48 Incompatible attribute type [8]: Attribute `description` declared in class `PlayerNaming` has type `str` but is used as type `None`.",
    "message": " Attribute `description` declared in class `PlayerNaming` has type `str` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 20,
    "warning_line": "        self._name = self.title = self.gender = self.description = self.short_description = None  # type: str",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def __init__(self) -> None:\n        self._name = self.title = self.gender = self.description = self.short_description = None  # type: str\n        self.money = mud_context.config.player_money\n",
        "source_code_len": 195,
        "target_code": "    def __init__(self) -> None:\n        self._name = self.title = self.gender = self.description = self.short_description = \"\"\n        self.money = mud_context.config.player_money\n",
        "target_code_len": 180,
        "diff_format": "@@ -19,3 +19,3 @@\n     def __init__(self) -> None:\n-        self._name = self.title = self.gender = self.description = self.short_description = None  # type: str\n+        self._name = self.title = self.gender = self.description = self.short_description = \"\"\n         self.money = mud_context.config.player_money\n",
        "source_code_with_indent": "    <IND>def __init__(self) -> None:\n        <IND>self._name = self.title = self.gender = self.description = self.short_description = None  # type: str\n        self.money = mud_context.config.player_money\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <IND>def __init__(self) -> None:\n        <IND>self._name = self.title = self.gender = self.description = self.short_description = \"\"\n        self.money = mud_context.config.player_money\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "irmen/Tale",
    "commit": "0a78d4a821d7da405bf5335ba3741757f0b593fe",
    "filename": "tale/charbuilder.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale/tale/charbuilder.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tale/charbuilder.py:20:67 Incompatible attribute type [8]: Attribute `short_description` declared in class `PlayerNaming` has type `str` but is used as type `None`.",
    "message": " Attribute `short_description` declared in class `PlayerNaming` has type `str` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 20,
    "warning_line": "        self._name = self.title = self.gender = self.description = self.short_description = None  # type: str",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def __init__(self) -> None:\n        self._name = self.title = self.gender = self.description = self.short_description = None  # type: str\n        self.money = mud_context.config.player_money\n",
        "source_code_len": 195,
        "target_code": "    def __init__(self) -> None:\n        self._name = self.title = self.gender = self.description = self.short_description = \"\"\n        self.money = mud_context.config.player_money\n",
        "target_code_len": 180,
        "diff_format": "@@ -19,3 +19,3 @@\n     def __init__(self) -> None:\n-        self._name = self.title = self.gender = self.description = self.short_description = None  # type: str\n+        self._name = self.title = self.gender = self.description = self.short_description = \"\"\n         self.money = mud_context.config.player_money\n",
        "source_code_with_indent": "    <IND>def __init__(self) -> None:\n        <IND>self._name = self.title = self.gender = self.description = self.short_description = None  # type: str\n        self.money = mud_context.config.player_money\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <IND>def __init__(self) -> None:\n        <IND>self._name = self.title = self.gender = self.description = self.short_description = \"\"\n        self.money = mud_context.config.player_money\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "irmen/Tale",
    "commit": "0a78d4a821d7da405bf5335ba3741757f0b593fe",
    "filename": "tale/charbuilder.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale/tale/charbuilder.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tale/charbuilder.py:33:38 Incompatible parameter type [6]: Expected `str` for 2nd positional only parameter to call `Player.init_names` but got `typing.Optional[str]`.",
    "message": " Expected `str` for 2nd positional only parameter to call `Player.init_names` but got `typing.Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 33,
    "warning_line": "        player.init_names(self._name, title, self.description, self.short_description)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        player.init_gender(self.gender)\n        title = None if self.title == self._name else self.title\n        player.init_names(self._name, title, self.description, self.short_description)\n",
        "source_code_len": 192,
        "target_code": "        player.init_gender(self.gender)\n        title = \"\" if self.title == self._name else self.title\n        player.init_names(self._name, title, self.description, self.short_description)\n",
        "target_code_len": 190,
        "diff_format": "@@ -31,3 +31,3 @@\n         player.init_gender(self.gender)\n-        title = None if self.title == self._name else self.title\n+        title = \"\" if self.title == self._name else self.title\n         player.init_names(self._name, title, self.description, self.short_description)\n",
        "source_code_with_indent": "        player.init_gender(self.gender)\n        title = None if self.title == self._name else self.title\n        player.init_names(self._name, title, self.description, self.short_description)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        player.init_gender(self.gender)\n        title = \"\" if self.title == self._name else self.title\n        player.init_names(self._name, title, self.description, self.short_description)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "irmen/Tale",
    "commit": "0a78d4a821d7da405bf5335ba3741757f0b593fe",
    "filename": "tale/cmds/normal.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale/tale/cmds/normal.py",
    "file_hunks_size": 12,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tale/cmds/normal.py:63:11 Incompatible parameter type [6]: Expected `Union[base.Item, base.Living]` for 1st positional only parameter to call `base.Location.__contains__` but got `Union[None, base.Exit, base.Item, base.Living]`.",
    "message": " Expected `Union[base.Item, base.Living]` for 1st positional only parameter to call `base.Location.__contains__` but got `Union[None, base.Exit, base.Item, base.Living]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 63,
    "warning_line": "        if thing in player.location:"
  },
  {
    "project": "irmen/Tale",
    "commit": "0a78d4a821d7da405bf5335ba3741757f0b593fe",
    "filename": "tale/cmds/normal.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale/tale/cmds/normal.py",
    "file_hunks_size": 12,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tale/cmds/normal.py:67:44 Incompatible parameter type [6]: Expected `base.MudObject` for 1st positional only parameter to call `Player.tell_object_location` but got `Union[None, base.Exit, base.Item]`.",
    "message": " Expected `base.MudObject` for 1st positional only parameter to call `Player.tell_object_location` but got `Union[None, base.Exit, base.Item]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 67,
    "warning_line": "                player.tell_object_location(thing, player.location, False)"
  },
  {
    "project": "irmen/Tale",
    "commit": "0a78d4a821d7da405bf5335ba3741757f0b593fe",
    "filename": "tale/cmds/normal.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale/tale/cmds/normal.py",
    "file_hunks_size": 12,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tale/cmds/normal.py:68:13 Incompatible parameter type [6]: Expected `Union[base.Item, base.Living, base.Location]` for 1st positional only parameter to call `base.Living.__contains__` but got `Union[None, base.Exit, base.Item, base.Living]`.",
    "message": " Expected `Union[base.Item, base.Living, base.Location]` for 1st positional only parameter to call `base.Living.__contains__` but got `Union[None, base.Exit, base.Item, base.Living]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 68,
    "warning_line": "        elif thing in player:"
  },
  {
    "project": "irmen/Tale",
    "commit": "0a78d4a821d7da405bf5335ba3741757f0b593fe",
    "filename": "tale/cmds/normal.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale/tale/cmds/normal.py",
    "file_hunks_size": 12,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tale/cmds/normal.py:69:40 Incompatible parameter type [6]: Expected `base.MudObject` for 1st positional only parameter to call `Player.tell_object_location` but got `Union[None, base.Exit, base.Item, base.Living]`.",
    "message": " Expected `base.MudObject` for 1st positional only parameter to call `Player.tell_object_location` but got `Union[None, base.Exit, base.Item, base.Living]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 69,
    "warning_line": "            player.tell_object_location(thing, player, False)"
  },
  {
    "project": "irmen/Tale",
    "commit": "0a78d4a821d7da405bf5335ba3741757f0b593fe",
    "filename": "tale/cmds/normal.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale/tale/cmds/normal.py",
    "file_hunks_size": 12,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tale/cmds/normal.py:77:46 Incompatible parameter type [6]: Expected `Union[base.Item, base.Living, base.Location]` for 2nd positional only parameter to call `Player.tell_object_location` but got `Union[None, base.Container, base.Living, base.Location]`.",
    "message": " Expected `Union[base.Item, base.Living, base.Location]` for 2nd positional only parameter to call `Player.tell_object_location` but got `Union[None, base.Container, base.Living, base.Location]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 77,
    "warning_line": "            player.tell_object_location(item, container, False)"
  },
  {
    "project": "irmen/Tale",
    "commit": "0a78d4a821d7da405bf5335ba3741757f0b593fe",
    "filename": "tale/cmds/normal.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale/tale/cmds/normal.py",
    "file_hunks_size": 12,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tale/cmds/normal.py:126:15 Incompatible parameter type [6]: Expected `Union[base.Item, base.Living, base.Location]` for 1st positional only parameter to call `base.Living.__contains__` but got `Union[None, base.Exit, base.Item, base.Living]`.",
    "message": " Expected `Union[base.Item, base.Living, base.Location]` for 1st positional only parameter to call `base.Living.__contains__` but got `Union[None, base.Exit, base.Item, base.Living]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 126,
    "warning_line": "            if item in player:"
  },
  {
    "project": "irmen/Tale",
    "commit": "0a78d4a821d7da405bf5335ba3741757f0b593fe",
    "filename": "tale/cmds/normal.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale/tale/cmds/normal.py",
    "file_hunks_size": 12,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tale/cmds/normal.py:134:54 Incompatible parameter type [6]: Expected `Union[base.Item, base.Living, base.Location]` for 2nd positional only parameter to call `Player.tell_object_location` but got `Union[None, base.Container, base.Living, base.Location]`.",
    "message": " Expected `Union[base.Item, base.Living, base.Location]` for 2nd positional only parameter to call `Player.tell_object_location` but got `Union[None, base.Container, base.Living, base.Location]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 134,
    "warning_line": "                    player.tell_object_location(item, container)"
  },
  {
    "project": "irmen/Tale",
    "commit": "0a78d4a821d7da405bf5335ba3741757f0b593fe",
    "filename": "tale/cmds/normal.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale/tale/cmds/normal.py",
    "file_hunks_size": 12,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tale/cmds/normal.py:450:86 Incompatible variable type [9]: where_str is declared to have type `str` but is used as type `None`.",
    "message": " where_str is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 450,
    "warning_line": "def take_stuff(player: Player, items: Iterable[base.Item], container: base.MudObject, where_str: str=None) -> int:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef take_stuff(player: Player, items: Iterable[base.Item], container: base.MudObject, where_str: str=None) -> int:\n    \"\"\"Takes stuff and returns the number of items taken\"\"\"\n",
        "source_code_len": 176,
        "target_code": "\ndef take_stuff(player: Player, items: Iterable[base.Item], container: base.MudObject, where_str: str=\"\") -> int:\n    \"\"\"Takes stuff and returns the number of items taken\"\"\"\n",
        "target_code_len": 174,
        "diff_format": "@@ -449,3 +450,3 @@\n \n-def take_stuff(player: Player, items: Iterable[base.Item], container: base.MudObject, where_str: str=None) -> int:\n+def take_stuff(player: Player, items: Iterable[base.Item], container: base.MudObject, where_str: str=\"\") -> int:\n     \"\"\"Takes stuff and returns the number of items taken\"\"\"\n",
        "source_code_with_indent": "\n<DED><DED><DED>def take_stuff(player: Player, items: Iterable[base.Item], container: base.MudObject, where_str: str=None) -> int:\n    <IND>\"\"\"Takes stuff and returns the number of items taken\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED><DED><DED>def take_stuff(player: Player, items: Iterable[base.Item], container: base.MudObject, where_str: str=\"\") -> int:\n    <IND>\"\"\"Takes stuff and returns the number of items taken\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "irmen/Tale",
    "commit": "0a78d4a821d7da405bf5335ba3741757f0b593fe",
    "filename": "tale/cmds/normal.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale/tale/cmds/normal.py",
    "file_hunks_size": 12,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tale/cmds/normal.py:498:7 Incompatible parameter type [6]: Expected `Union[base.Item, base.Living]` for 1st positional only parameter to call `base.Location.__contains__` but got `Union[None, base.Exit, base.Item]`.",
    "message": " Expected `Union[base.Item, base.Living]` for 1st positional only parameter to call `base.Location.__contains__` but got `Union[None, base.Exit, base.Item]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 498,
    "warning_line": "    if item in player.location:"
  },
  {
    "project": "irmen/Tale",
    "commit": "0a78d4a821d7da405bf5335ba3741757f0b593fe",
    "filename": "tale/cmds/normal.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale/tale/cmds/normal.py",
    "file_hunks_size": 12,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tale/cmds/normal.py:537:47 Incompatible parameter type [6]: Expected `float` for 1st positional only parameter to call `base.Living.allow_give_money` but got `Player`.",
    "message": " Expected `float` for 1st positional only parameter to call `base.Living.allow_give_money` but got `Player`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 537,
    "warning_line": "                    recipient.allow_give_money(player, amount)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                else:\n                    recipient.allow_give_money(player, amount)\n                    if (yield \"input\", (\"Are you sure you want to give %s away?\" % ctx.driver.moneyfmt.display(amount), lang.yesno)):\n",
        "source_code_len": 219,
        "target_code": "                else:\n                    recipient.allow_give_money(amount, player)\n                    if (yield \"input\", (\"Are you sure you want to give %s away?\" % ctx.driver.moneyfmt.display(amount), lang.yesno)):\n",
        "target_code_len": 219,
        "diff_format": "@@ -536,3 +537,3 @@\n                 else:\n-                    recipient.allow_give_money(player, amount)\n+                    recipient.allow_give_money(amount, player)\n                     if (yield \"input\", (\"Are you sure you want to give %s away?\" % ctx.driver.moneyfmt.display(amount), lang.yesno)):\n",
        "source_code_with_indent": "                <DED>else:\n                    <IND>recipient.allow_give_money(player, amount)\n                    if (yield \"input\", (\"Are you sure you want to give %s away?\" % ctx.driver.moneyfmt.display(amount), lang.yesno)):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                <DED>else:\n                    <IND>recipient.allow_give_money(amount, player)\n                    if (yield \"input\", (\"Are you sure you want to give %s away?\" % ctx.driver.moneyfmt.display(amount), lang.yesno)):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "irmen/Tale",
    "commit": "0a78d4a821d7da405bf5335ba3741757f0b593fe",
    "filename": "tale/cmds/normal.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale/tale/cmds/normal.py",
    "file_hunks_size": 12,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tale/cmds/normal.py:579:35 Incompatible parameter type [6]: Expected `str` for 3rd positional only parameter to call `give_stuff` but got `None`.",
    "message": " Expected `str` for 3rd positional only parameter to call `give_stuff` but got `None`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 579,
    "warning_line": "        give_stuff(player, things, None, target=parsed.who_1)"
  },
  {
    "project": "irmen/Tale",
    "commit": "0a78d4a821d7da405bf5335ba3741757f0b593fe",
    "filename": "tale/cmds/normal.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale/tale/cmds/normal.py",
    "file_hunks_size": 12,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tale/cmds/normal.py:584:35 Incompatible parameter type [6]: Expected `str` for 3rd positional only parameter to call `give_stuff` but got `None`.",
    "message": " Expected `str` for 3rd positional only parameter to call `give_stuff` but got `None`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 584,
    "warning_line": "        give_stuff(player, things, None, target=parsed.who_last)"
  },
  {
    "project": "irmen/Tale",
    "commit": "0a78d4a821d7da405bf5335ba3741757f0b593fe",
    "filename": "tale/cmds/normal.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale/tale/cmds/normal.py",
    "file_hunks_size": 12,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tale/cmds/normal.py:584:41 Incompatible parameter type [6]: Expected `Union[base.Exit, base.Item, base.Living]` for 4th parameter `target` to call `give_stuff` but got `Union[None, base.Exit, base.Item, base.Living]`.",
    "message": " Expected `Union[base.Exit, base.Item, base.Living]` for 4th parameter `target` to call `give_stuff` but got `Union[None, base.Exit, base.Item, base.Living]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 584,
    "warning_line": "        give_stuff(player, things, None, target=parsed.who_last)"
  },
  {
    "project": "irmen/Tale",
    "commit": "0a78d4a821d7da405bf5335ba3741757f0b593fe",
    "filename": "tale/cmds/normal.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale/tale/cmds/normal.py",
    "file_hunks_size": 12,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tale/cmds/normal.py:593:8 Incompatible variable type [9]: target is declared to have type `Union[base.Exit, base.Item, base.Living]` but is used as type `typing.Optional[base.Living]`.",
    "message": " target is declared to have type `Union[base.Exit, base.Item, base.Living]` but is used as type `typing.Optional[base.Living]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 593,
    "warning_line": "        target = player.location.search_living(target_name)"
  },
  {
    "project": "irmen/Tale",
    "commit": "0a78d4a821d7da405bf5335ba3741757f0b593fe",
    "filename": "tale/cmds/normal.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale/tale/cmds/normal.py",
    "file_hunks_size": 12,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tale/cmds/normal.py:1014:4 Incompatible variable type [9]: what is declared to have type `base.MudObject` but is used as type `None`.",
    "message": " what is declared to have type `base.MudObject` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 1014,
    "warning_line": "    what = None  # type: base.MudObject"
  },
  {
    "project": "irmen/Tale",
    "commit": "0a78d4a821d7da405bf5335ba3741757f0b593fe",
    "filename": "tale/cmds/normal.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale/tale/cmds/normal.py",
    "file_hunks_size": 12,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tale/cmds/normal.py:1017:4 Incompatible variable type [9]: what is declared to have type `base.MudObject` but is used as type `typing.Optional[base.Item]`.",
    "message": " what is declared to have type `base.MudObject` but is used as type `typing.Optional[base.Item]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 1017,
    "warning_line": "    what = player.search_item(what_name, include_inventory=True, include_location=True, include_containers_in_inventory=False)"
  },
  {
    "project": "irmen/Tale",
    "commit": "0a78d4a821d7da405bf5335ba3741757f0b593fe",
    "filename": "tale/cmds/normal.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale/tale/cmds/normal.py",
    "file_hunks_size": 12,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tale/cmds/normal.py:1314:27 Incompatible parameter type [6]: Expected `base.Exit` for 2nd positional only parameter to call `list.insert` but got `typing.Optional[base.Exit]`.",
    "message": " Expected `base.Exit` for 2nd positional only parameter to call `list.insert` but got `typing.Optional[base.Exit]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1314,
    "warning_line": "    exits_to_try.insert(0, exit)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    exits_to_try = list(player.location.exits.values())\n    exits_to_try.insert(0, exit)\n    for exit in exits_to_try:\n",
        "source_code_len": 119,
        "target_code": "    exits_to_try = list(player.location.exits.values())\n    if isinstance(exit, base.Exit):\n        exits_to_try.insert(0, exit)\n    for exit in exits_to_try:\n",
        "target_code_len": 159,
        "diff_format": "@@ -1313,3 +1314,4 @@\n     exits_to_try = list(player.location.exits.values())\n-    exits_to_try.insert(0, exit)\n+    if isinstance(exit, base.Exit):\n+        exits_to_try.insert(0, exit)\n     for exit in exits_to_try:\n",
        "source_code_with_indent": "    <DED>exits_to_try = list(player.location.exits.values())\n    exits_to_try.insert(0, exit)\n    for exit in exits_to_try:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>exits_to_try = list(player.location.exits.values())\n    if isinstance(exit, base.Exit):\n        <IND>exits_to_try.insert(0, exit)\n    <DED>for exit in exits_to_try:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "irmen/Tale",
    "commit": "0a78d4a821d7da405bf5335ba3741757f0b593fe",
    "filename": "tale/cmds/normal.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale/tale/cmds/normal.py",
    "file_hunks_size": 12,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tale/cmds/normal.py:1363:35 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `Player.activate_transcript` but got `None`.",
    "message": " Expected `str` for 1st positional only parameter to call `Player.activate_transcript` but got `None`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1363,
    "warning_line": "        player.activate_transcript(None, None)"
  },
  {
    "project": "irmen/Tale",
    "commit": "0a78d4a821d7da405bf5335ba3741757f0b593fe",
    "filename": "tale/cmds/normal.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale/tale/cmds/normal.py",
    "file_hunks_size": 12,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tale/cmds/normal.py:1363:41 Incompatible parameter type [6]: Expected `tale.vfs.VirtualFileSystem` for 2nd positional only parameter to call `Player.activate_transcript` but got `None`.",
    "message": " Expected `tale.vfs.VirtualFileSystem` for 2nd positional only parameter to call `Player.activate_transcript` but got `None`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1363,
    "warning_line": "        player.activate_transcript(None, None)"
  },
  {
    "project": "irmen/Tale",
    "commit": "0a78d4a821d7da405bf5335ba3741757f0b593fe",
    "filename": "tale/cmds/normal.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale/tale/cmds/normal.py",
    "file_hunks_size": 12,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tale/cmds/normal.py:1376:7 Incompatible parameter type [6]: Expected `Union[base.Item, base.Living, base.Location]` for 1st positional only parameter to call `base.Living.__contains__` but got `Union[None, base.Exit, base.Item, base.Living]`.",
    "message": " Expected `Union[base.Item, base.Living, base.Location]` for 1st positional only parameter to call `base.Living.__contains__` but got `Union[None, base.Exit, base.Item, base.Living]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1376,
    "warning_line": "    if shown not in player:"
  },
  {
    "project": "irmen/Tale",
    "commit": "0a78d4a821d7da405bf5335ba3741757f0b593fe",
    "filename": "tale/cmds/normal.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale/tale/cmds/normal.py",
    "file_hunks_size": 12,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tale/cmds/normal.py:1384:90 Incompatible parameter type [6]: Expected `typing.Set[Union[base.Exit, base.Item, base.Living]]` for 4th parameter `specific_targets` to call `base.Location.tell` but got `typing.Set[Union[None, base.Exit, base.Item, base.Living]]`.",
    "message": " Expected `typing.Set[Union[base.Exit, base.Item, base.Living]]` for 4th parameter `specific_targets` to call `base.Location.tell` but got `typing.Set[Union[None, base.Exit, base.Item, base.Living]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1384,
    "warning_line": "    player.location.tell(room_msg, exclude_living=player, specific_target_msg=target_msg, specific_targets={target})"
  },
  {
    "project": "irmen/Tale",
    "commit": "0a78d4a821d7da405bf5335ba3741757f0b593fe",
    "filename": "tale/cmds/normal.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale/tale/cmds/normal.py",
    "file_hunks_size": 12,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tale/cmds/normal.py:1666:66 Incompatible parameter type [6]: Expected `str` for 2nd positional only parameter to call `lang.join` but got `None`.",
    "message": " Expected `str` for 2nd positional only parameter to call `lang.join` but got `None`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1666,
    "warning_line": "    player.tell(\"privileges: %s\" % (lang.join(account.privileges, None) or \"-\"), end=True)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    player.tell(\"email: %s\" % account.email, end=True)\n    player.tell(\"privileges: %s\" % (lang.join(account.privileges, None) or \"-\"), end=True)\n    gender = lang.GENDERS[account.stats.gender]\n",
        "source_code_len": 194,
        "target_code": "    player.tell(\"email: %s\" % account.email, end=True)\n    player.tell(\"privileges: %s\" % (lang.join(account.privileges, \"\") or \"-\"), end=True)\n    gender = lang.GENDERS[account.stats.gender]\n",
        "target_code_len": 192,
        "diff_format": "@@ -1665,3 +1667,3 @@\n     player.tell(\"email: %s\" % account.email, end=True)\n-    player.tell(\"privileges: %s\" % (lang.join(account.privileges, None) or \"-\"), end=True)\n+    player.tell(\"privileges: %s\" % (lang.join(account.privileges, \"\") or \"-\"), end=True)\n     gender = lang.GENDERS[account.stats.gender]\n",
        "source_code_with_indent": "    player.tell(\"email: %s\" % account.email, end=True)\n    player.tell(\"privileges: %s\" % (lang.join(account.privileges, None) or \"-\"), end=True)\n    gender = lang.GENDERS[account.stats.gender]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    player.tell(\"email: %s\" % account.email, end=True)\n    player.tell(\"privileges: %s\" % (lang.join(account.privileges, \"\") or \"-\"), end=True)\n    gender = lang.GENDERS[account.stats.gender]\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "irmen/Tale",
    "commit": "0a78d4a821d7da405bf5335ba3741757f0b593fe",
    "filename": "tale/cmds/wizard.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale/tale/cmds/wizard.py",
    "file_hunks_size": 14,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tale/cmds/wizard.py:358:7 Incompatible parameter type [6]: Expected `typing.Union[base.Item, base.Living, base.Location]` for 1st positional only parameter to call `base.Living.__contains__` but got `typing.Union[None, base.Exit, base.Item]`.",
    "message": " Expected `typing.Union[base.Item, base.Living, base.Location]` for 1st positional only parameter to call `base.Living.__contains__` but got `typing.Union[None, base.Exit, base.Item]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 358,
    "warning_line": "    if thing in player:"
  },
  {
    "project": "irmen/Tale",
    "commit": "0a78d4a821d7da405bf5335ba3741757f0b593fe",
    "filename": "tale/cmds/wizard.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale/tale/cmds/wizard.py",
    "file_hunks_size": 14,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tale/cmds/wizard.py:360:9 Incompatible parameter type [6]: Expected `typing.Union[base.Item, base.Living]` for 1st positional only parameter to call `base.Location.__contains__` but got `typing.Union[None, base.Exit, base.Item]`.",
    "message": " Expected `typing.Union[base.Item, base.Living]` for 1st positional only parameter to call `base.Location.__contains__` but got `typing.Union[None, base.Exit, base.Item]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 360,
    "warning_line": "    elif thing in player.location:"
  },
  {
    "project": "irmen/Tale",
    "commit": "0a78d4a821d7da405bf5335ba3741757f0b593fe",
    "filename": "tale/cmds/wizard.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale/tale/cmds/wizard.py",
    "file_hunks_size": 14,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tale/cmds/wizard.py:564:130 Incompatible parameter type [6]: Expected `str` for 2nd positional only parameter to call `lang.join` but got `None`.",
    "message": " Expected `str` for 2nd positional only parameter to call `lang.join` but got `None`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 564,
    "warning_line": "                   (account.name, account.logged_in, account.email, \"*\" if account.banned else \" \", lang.join(account.privileges, None)))",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        txt.append(\" %-12s <dim>|</> %19s <dim>|</> %-20s <dim>|</> %s <dim>|</> %s\" %\n                   (account.name, account.logged_in, account.email, \"*\" if account.banned else \" \", lang.join(account.privileges, None)))\n    txt.append(\"\\nWizards: \" + lang.join(wizards))\n",
        "source_code_len": 276,
        "target_code": "        txt.append(\" %-12s <dim>|</> %19s <dim>|</> %-20s <dim>|</> %s <dim>|</> %s\" %\n                   (account.name, account.logged_in, account.email, \"*\" if account.banned else \" \", lang.join(account.privileges, \"\")))\n    txt.append(\"\\nWizards: \" + lang.join(wizards))\n",
        "target_code_len": 274,
        "diff_format": "@@ -563,3 +566,3 @@\n         txt.append(\" %-12s <dim>|</> %19s <dim>|</> %-20s <dim>|</> %s <dim>|</> %s\" %\n-                   (account.name, account.logged_in, account.email, \"*\" if account.banned else \" \", lang.join(account.privileges, None)))\n+                   (account.name, account.logged_in, account.email, \"*\" if account.banned else \" \", lang.join(account.privileges, \"\")))\n     txt.append(\"\\nWizards: \" + lang.join(wizards))\n",
        "source_code_with_indent": "        <DED>txt.append(\" %-12s <dim>|</> %19s <dim>|</> %-20s <dim>|</> %s <dim>|</> %s\" %\n                   (account.name, account.logged_in, account.email, \"*\" if account.banned else \" \", lang.join(account.privileges, None)))\n    <DED>txt.append(\"\\nWizards: \" + lang.join(wizards))\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>txt.append(\" %-12s <dim>|</> %19s <dim>|</> %-20s <dim>|</> %s <dim>|</> %s\" %\n                   (account.name, account.logged_in, account.email, \"*\" if account.banned else \" \", lang.join(account.privileges, \"\")))\n    <DED>txt.append(\"\\nWizards: \" + lang.join(wizards))\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "irmen/Tale",
    "commit": "0a78d4a821d7da405bf5335ba3741757f0b593fe",
    "filename": "tale/driver.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale/tale/driver.py",
    "file_hunks_size": 14,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tale/driver.py:44:8 Incompatible attribute type [8]: Attribute `commands_per_priv` declared in class `Commands` has type `Dict[str, Dict[str, typing.Callable[..., typing.Any]]]` but is used as type `Dict[None, Dict[str, typing.Callable[..., typing.Any]]]`.",
    "message": " Attribute `commands_per_priv` declared in class `Commands` has type `Dict[str, Dict[str, typing.Callable[..., typing.Any]]]` but is used as type `Dict[None, Dict[str, typing.Callable[..., typing.Any]]]`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 44,
    "warning_line": "        self.commands_per_priv = {None: {}}    # type: Dict[str, Dict[str, Callable]]",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def __init__(self) -> None:\n        self.commands_per_priv = {None: {}}    # type: Dict[str, Dict[str, Callable]]\n        self.no_soul_parsing = set()   # type: Set[str]\n\n    def add(self, verb: str, func: Callable, privilege: str=None) -> None:\n        self.validatefunc(func)\n",
        "source_code_len": 282,
        "target_code": "    def __init__(self) -> None:\n        self.commands_per_priv = {\"\": {}}    # type: Dict[str, Dict[str, Callable]]\n        self.no_soul_parsing = set()   # type: Set[str]\n\n    def add(self, verb: str, func: Callable, privilege: str=\"\") -> None:\n        self.validatefunc(func)\n",
        "target_code_len": 278,
        "diff_format": "@@ -43,6 +43,6 @@\n     def __init__(self) -> None:\n-        self.commands_per_priv = {None: {}}    # type: Dict[str, Dict[str, Callable]]\n+        self.commands_per_priv = {\"\": {}}    # type: Dict[str, Dict[str, Callable]]\n         self.no_soul_parsing = set()   # type: Set[str]\n \n-    def add(self, verb: str, func: Callable, privilege: str=None) -> None:\n+    def add(self, verb: str, func: Callable, privilege: str=\"\") -> None:\n         self.validatefunc(func)\n",
        "source_code_with_indent": "    def __init__(self) -> None:\n        <IND>self.commands_per_priv = {None: {}}    # type: Dict[str, Dict[str, Callable]]\n        self.no_soul_parsing = set()   # type: Set[str]\n\n    <DED>def add(self, verb: str, func: Callable, privilege: str=None) -> None:\n        <IND>self.validatefunc(func)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def __init__(self) -> None:\n        <IND>self.commands_per_priv = {\"\": {}}    # type: Dict[str, Dict[str, Callable]]\n        self.no_soul_parsing = set()   # type: Set[str]\n\n    <DED>def add(self, verb: str, func: Callable, privilege: str=\"\") -> None:\n        <IND>self.validatefunc(func)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "irmen/Tale",
    "commit": "0a78d4a821d7da405bf5335ba3741757f0b593fe",
    "filename": "tale/driver.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale/tale/driver.py",
    "file_hunks_size": 14,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tale/driver.py:47:45 Incompatible variable type [9]: privilege is declared to have type `str` but is used as type `None`.",
    "message": " privilege is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 47,
    "warning_line": "    def add(self, verb: str, func: Callable, privilege: str=None) -> None:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def __init__(self) -> None:\n        self.commands_per_priv = {None: {}}    # type: Dict[str, Dict[str, Callable]]\n        self.no_soul_parsing = set()   # type: Set[str]\n\n    def add(self, verb: str, func: Callable, privilege: str=None) -> None:\n        self.validatefunc(func)\n",
        "source_code_len": 282,
        "target_code": "    def __init__(self) -> None:\n        self.commands_per_priv = {\"\": {}}    # type: Dict[str, Dict[str, Callable]]\n        self.no_soul_parsing = set()   # type: Set[str]\n\n    def add(self, verb: str, func: Callable, privilege: str=\"\") -> None:\n        self.validatefunc(func)\n",
        "target_code_len": 278,
        "diff_format": "@@ -43,6 +43,6 @@\n     def __init__(self) -> None:\n-        self.commands_per_priv = {None: {}}    # type: Dict[str, Dict[str, Callable]]\n+        self.commands_per_priv = {\"\": {}}    # type: Dict[str, Dict[str, Callable]]\n         self.no_soul_parsing = set()   # type: Set[str]\n \n-    def add(self, verb: str, func: Callable, privilege: str=None) -> None:\n+    def add(self, verb: str, func: Callable, privilege: str=\"\") -> None:\n         self.validatefunc(func)\n",
        "source_code_with_indent": "    def __init__(self) -> None:\n        <IND>self.commands_per_priv = {None: {}}    # type: Dict[str, Dict[str, Callable]]\n        self.no_soul_parsing = set()   # type: Set[str]\n\n    <DED>def add(self, verb: str, func: Callable, privilege: str=None) -> None:\n        <IND>self.validatefunc(func)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def __init__(self) -> None:\n        <IND>self.commands_per_priv = {\"\": {}}    # type: Dict[str, Dict[str, Callable]]\n        self.no_soul_parsing = set()   # type: Set[str]\n\n    <DED>def add(self, verb: str, func: Callable, privilege: str=\"\") -> None:\n        <IND>self.validatefunc(func)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "irmen/Tale",
    "commit": "0a78d4a821d7da405bf5335ba3741757f0b593fe",
    "filename": "tale/driver.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale/tale/driver.py",
    "file_hunks_size": 14,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tale/driver.py:54:50 Incompatible variable type [9]: privilege is declared to have type `str` but is used as type `None`.",
    "message": " privilege is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 54,
    "warning_line": "    def override(self, verb: str, func: Callable, privilege: str=None) -> Callable:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def override(self, verb: str, func: Callable, privilege: str=None) -> Callable:\n        self.validatefunc(func)\n",
        "source_code_len": 117,
        "target_code": "\n    def override(self, verb: str, func: Callable, privilege: str=\"\") -> Callable:\n        self.validatefunc(func)\n",
        "target_code_len": 115,
        "diff_format": "@@ -53,3 +53,3 @@\n \n-    def override(self, verb: str, func: Callable, privilege: str=None) -> Callable:\n+    def override(self, verb: str, func: Callable, privilege: str=\"\") -> Callable:\n         self.validatefunc(func)\n",
        "source_code_with_indent": "\n    <DED>def override(self, verb: str, func: Callable, privilege: str=None) -> Callable:\n        <IND>self.validatefunc(func)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def override(self, verb: str, func: Callable, privilege: str=\"\") -> Callable:\n        <IND>self.validatefunc(func)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "irmen/Tale",
    "commit": "0a78d4a821d7da405bf5335ba3741757f0b593fe",
    "filename": "tale/driver.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale/tale/driver.py",
    "file_hunks_size": 14,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tale/driver.py:67:45 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `dict.__getitem__` but got `None`.",
    "message": " Expected `str` for 1st positional only parameter to call `dict.__getitem__` but got `None`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 67,
    "warning_line": "        result = dict(self.commands_per_priv[None])  # always include the cmds for None",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def get(self, privileges: Iterable[str]) -> Dict[str, Callable]:\n        result = dict(self.commands_per_priv[None])  # always include the cmds for None\n        for priv in privileges:\n",
        "source_code_len": 189,
        "target_code": "    def get(self, privileges: Iterable[str]) -> Dict[str, Callable]:\n        result = dict(self.commands_per_priv[\"\"])  # always include the cmds for empty privilege\n        for priv in privileges:\n",
        "target_code_len": 198,
        "diff_format": "@@ -66,3 +66,3 @@\n     def get(self, privileges: Iterable[str]) -> Dict[str, Callable]:\n-        result = dict(self.commands_per_priv[None])  # always include the cmds for None\n+        result = dict(self.commands_per_priv[\"\"])  # always include the cmds for empty privilege\n         for priv in privileges:\n",
        "source_code_with_indent": "    <DED><DED>def get(self, privileges: Iterable[str]) -> Dict[str, Callable]:\n        <IND>result = dict(self.commands_per_priv[None])  # always include the cmds for None\n        for priv in privileges:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED><DED>def get(self, privileges: Iterable[str]) -> Dict[str, Callable]:\n        <IND>result = dict(self.commands_per_priv[\"\"])  # always include the cmds for empty privilege\n        for priv in privileges:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "irmen/Tale",
    "commit": "0a78d4a821d7da405bf5335ba3741757f0b593fe",
    "filename": "tale/driver.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale/tale/driver.py",
    "file_hunks_size": 14,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tale/driver.py:203:8 Incompatible attribute type [8]: Attribute `moneyfmt` declared in class `Driver` has type `util.MoneyFormatter` but is used as type `None`.",
    "message": " Attribute `moneyfmt` declared in class `Driver` has type `util.MoneyFormatter` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 203,
    "warning_line": "        self.moneyfmt = None    # type: util.MoneyFormatter",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self.zones = None       # type: ModuleType\n        self.moneyfmt = None    # type: util.MoneyFormatter\n        self.resources = None   # type: vfs.VirtualFileSystem\n        self.user_resources = None  # type: vfs.VirtualFileSystem\n        self.story = None   # type: StoryBase\n        self.game_clock = None    # type: util.GameDateTime\n",
        "source_code_len": 345,
        "target_code": "        self.zones = None       # type: ModuleType\n        self.moneyfmt = None    # type: Optional[util.MoneyFormatter]\n        self.resources = None   # type: vfs.VirtualFileSystem\n        self.user_resources = None  # type: vfs.VirtualFileSystem\n        self.story = None       # type: StoryBase\n        self.game_clock = None    # type: util.GameDateTime\n",
        "target_code_len": 359,
        "diff_format": "@@ -202,6 +202,6 @@\n         self.zones = None       # type: ModuleType\n-        self.moneyfmt = None    # type: util.MoneyFormatter\n+        self.moneyfmt = None    # type: Optional[util.MoneyFormatter]\n         self.resources = None   # type: vfs.VirtualFileSystem\n         self.user_resources = None  # type: vfs.VirtualFileSystem\n-        self.story = None   # type: StoryBase\n+        self.story = None       # type: StoryBase\n         self.game_clock = None    # type: util.GameDateTime\n",
        "source_code_with_indent": "        self.zones = None       # type: ModuleType\n        self.moneyfmt = None    # type: util.MoneyFormatter\n        self.resources = None   # type: vfs.VirtualFileSystem\n        self.user_resources = None  # type: vfs.VirtualFileSystem\n        self.story = None   # type: StoryBase\n        self.game_clock = None    # type: util.GameDateTime\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self.zones = None       # type: ModuleType\n        self.moneyfmt = None    # type: Optional[util.MoneyFormatter]\n        self.resources = None   # type: vfs.VirtualFileSystem\n        self.user_resources = None  # type: vfs.VirtualFileSystem\n        self.story = None       # type: StoryBase\n        self.game_clock = None    # type: util.GameDateTime\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "irmen/Tale",
    "commit": "0a78d4a821d7da405bf5335ba3741757f0b593fe",
    "filename": "tale/driver.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale/tale/driver.py",
    "file_hunks_size": 14,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tale/driver.py:214:42 Incompatible parameter type [6]: Expected `str` for 3rd positional only parameter to call `Commands.add` but got `Optional[str]`.",
    "message": " Expected `str` for 3rd positional only parameter to call `Commands.add` but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 214,
    "warning_line": "            self.commands.add(verb, func, privilege)"
  },
  {
    "project": "irmen/Tale",
    "commit": "0a78d4a821d7da405bf5335ba3741757f0b593fe",
    "filename": "tale/driver.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale/tale/driver.py",
    "file_hunks_size": 14,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tale/driver.py:265:54 Incompatible parameter type [6]: Expected `str` for 3rd positional only parameter to call `Commands.add` but got `Optional[str]`.",
    "message": " Expected `str` for 3rd positional only parameter to call `Commands.add` but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 265,
    "warning_line": "                        self.commands.add(verb, func, privilege)"
  },
  {
    "project": "irmen/Tale",
    "commit": "0a78d4a821d7da405bf5335ba3741757f0b593fe",
    "filename": "tale/driver.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale/tale/driver.py",
    "file_hunks_size": 14,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tale/driver.py:267:59 Incompatible parameter type [6]: Expected `str` for 3rd positional only parameter to call `Commands.override` but got `Optional[str]`.",
    "message": " Expected `str` for 3rd positional only parameter to call `Commands.override` but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 267,
    "warning_line": "                        self.commands.override(verb, func, privilege)"
  },
  {
    "project": "irmen/Tale",
    "commit": "0a78d4a821d7da405bf5335ba3741757f0b593fe",
    "filename": "tale/driver.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale/tale/driver.py",
    "file_hunks_size": 14,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tale/driver.py:271:8 Incompatible attribute type [8]: Attribute `moneyfmt` declared in class `Driver` has type `util.MoneyFormatter` but is used as type `None`.",
    "message": " Attribute `moneyfmt` declared in class `Driver` has type `util.MoneyFormatter` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 271,
    "warning_line": "        self.moneyfmt = None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self.zones = None       # type: ModuleType\n        self.moneyfmt = None    # type: util.MoneyFormatter\n        self.resources = None   # type: vfs.VirtualFileSystem\n        self.user_resources = None  # type: vfs.VirtualFileSystem\n        self.story = None   # type: StoryBase\n        self.game_clock = None    # type: util.GameDateTime\n",
        "source_code_len": 345,
        "target_code": "        self.zones = None       # type: ModuleType\n        self.moneyfmt = None    # type: Optional[util.MoneyFormatter]\n        self.resources = None   # type: vfs.VirtualFileSystem\n        self.user_resources = None  # type: vfs.VirtualFileSystem\n        self.story = None       # type: StoryBase\n        self.game_clock = None    # type: util.GameDateTime\n",
        "target_code_len": 359,
        "diff_format": "@@ -202,6 +202,6 @@\n         self.zones = None       # type: ModuleType\n-        self.moneyfmt = None    # type: util.MoneyFormatter\n+        self.moneyfmt = None    # type: Optional[util.MoneyFormatter]\n         self.resources = None   # type: vfs.VirtualFileSystem\n         self.user_resources = None  # type: vfs.VirtualFileSystem\n-        self.story = None   # type: StoryBase\n+        self.story = None       # type: StoryBase\n         self.game_clock = None    # type: util.GameDateTime\n",
        "source_code_with_indent": "        self.zones = None       # type: ModuleType\n        self.moneyfmt = None    # type: util.MoneyFormatter\n        self.resources = None   # type: vfs.VirtualFileSystem\n        self.user_resources = None  # type: vfs.VirtualFileSystem\n        self.story = None   # type: StoryBase\n        self.game_clock = None    # type: util.GameDateTime\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self.zones = None       # type: ModuleType\n        self.moneyfmt = None    # type: Optional[util.MoneyFormatter]\n        self.resources = None   # type: vfs.VirtualFileSystem\n        self.user_resources = None  # type: vfs.VirtualFileSystem\n        self.story = None       # type: StoryBase\n        self.game_clock = None    # type: util.GameDateTime\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "irmen/Tale",
    "commit": "0a78d4a821d7da405bf5335ba3741757f0b593fe",
    "filename": "tale/driver.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale/tale/driver.py",
    "file_hunks_size": 14,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "tale/driver.py:763:48 Incompatible parameter type [6]: Expected `str` for 3rd positional only parameter to call `Driver._continue_dialog` but got `None`.",
    "message": " Expected `str` for 3rd positional only parameter to call `Driver._continue_dialog` but got `None`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 763,
    "warning_line": "            self._continue_dialog(conn, dialog, None)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        elif topicname == \"driver-async-dialogs\":\n            assert type(event) is tuple\n            conn, dialog = event  # type: ignore\n            assert type(conn) is player.PlayerConnection\n            assert inspect.isgenerator(dialog)\n            self._continue_dialog(conn, dialog, None)\n        else:\n",
        "source_code_len": 311,
        "target_code": "        elif topicname == \"driver-async-dialogs\":\n            if isinstance(event, tuple):\n                conn, dialog = event\n            else:\n                raise TypeError(\"event must be tuple here\")\n            assert type(conn) is player.PlayerConnection\n            assert inspect.isgenerator(dialog)\n            self._continue_dialog(conn, dialog, \"\")     # type: ignore\n        else:\n",
        "target_code_len": 395,
        "diff_format": "@@ -758,7 +758,9 @@\n         elif topicname == \"driver-async-dialogs\":\n-            assert type(event) is tuple\n-            conn, dialog = event  # type: ignore\n+            if isinstance(event, tuple):\n+                conn, dialog = event\n+            else:\n+                raise TypeError(\"event must be tuple here\")\n             assert type(conn) is player.PlayerConnection\n             assert inspect.isgenerator(dialog)\n-            self._continue_dialog(conn, dialog, None)\n+            self._continue_dialog(conn, dialog, \"\")     # type: ignore\n         else:\n",
        "source_code_with_indent": "        <DED>elif topicname == \"driver-async-dialogs\":\n            <IND>assert type(event) is tuple\n            conn, dialog = event  # type: ignore\n            assert type(conn) is player.PlayerConnection\n            assert inspect.isgenerator(dialog)\n            self._continue_dialog(conn, dialog, None)\n        <DED>else:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>elif topicname == \"driver-async-dialogs\":\n            <IND>if isinstance(event, tuple):\n                <IND>conn, dialog = event\n            <DED>else:\n                <IND>raise TypeError(\"event must be tuple here\")\n            <DED>assert type(conn) is player.PlayerConnection\n            assert inspect.isgenerator(dialog)\n            self._continue_dialog(conn, dialog, \"\")     # type: ignore\n        <DED>else:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "irmen/Tale",
    "commit": "0a78d4a821d7da405bf5335ba3741757f0b593fe",
    "filename": "tale/driver_if.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale/tale/driver_if.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tale/driver_if.py:98:8 Incompatible variable type [9]: io is declared to have type `iobase.IoAdapterBase` but is used as type `None`.",
    "message": " io is declared to have type `iobase.IoAdapterBase` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 98,
    "warning_line": "        io = None  # type: iobase.IoAdapterBase",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        new_player = Player(connect_name, \"n\", race=\"elemental\", descr=\"This player is still connecting to the game.\")\n        io = None  # type: iobase.IoAdapterBase\n        if player_io_type == \"gui\":\n            from .tio.tkinter_io import TkinterIo\n            io = TkinterIo(self.story.config, connection)\n        elif player_io_type == \"web\":\n",
        "source_code_len": 349,
        "target_code": "        new_player = Player(connect_name, \"n\", race=\"elemental\", descr=\"This player is still connecting to the game.\")\n        if player_io_type == \"gui\":\n            from .tio.tkinter_io import TkinterIo\n            io = TkinterIo(self.story.config, connection)  # type: iobase.IoAdapterBase\n        elif player_io_type == \"web\":\n",
        "target_code_len": 331,
        "diff_format": "@@ -97,6 +97,5 @@\n         new_player = Player(connect_name, \"n\", race=\"elemental\", descr=\"This player is still connecting to the game.\")\n-        io = None  # type: iobase.IoAdapterBase\n         if player_io_type == \"gui\":\n             from .tio.tkinter_io import TkinterIo\n-            io = TkinterIo(self.story.config, connection)\n+            io = TkinterIo(self.story.config, connection)  # type: iobase.IoAdapterBase\n         elif player_io_type == \"web\":\n",
        "source_code_with_indent": "        new_player = Player(connect_name, \"n\", race=\"elemental\", descr=\"This player is still connecting to the game.\")\n        io = None  # type: iobase.IoAdapterBase\n        if player_io_type == \"gui\":\n            <IND>from .tio.tkinter_io import TkinterIo\n            io = TkinterIo(self.story.config, connection)\n        <DED>elif player_io_type == \"web\":\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        new_player = Player(connect_name, \"n\", race=\"elemental\", descr=\"This player is still connecting to the game.\")\n        if player_io_type == \"gui\":\n            <IND>from .tio.tkinter_io import TkinterIo\n            io = TkinterIo(self.story.config, connection)  # type: iobase.IoAdapterBase\n        <DED>elif player_io_type == \"web\":\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "irmen/Tale",
    "commit": "0a78d4a821d7da405bf5335ba3741757f0b593fe",
    "filename": "tale/driver_if.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale/tale/driver_if.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tale/driver_if.py:201:4 Inconsistent override [14]: `tale.driver_if.IFDriver.main_loop` overrides method defined in `driver.Driver` inconsistently. Parameter of type `PlayerConnection` is not a supertype of the overridden parameter `Optional[PlayerConnection]`.",
    "message": " `tale.driver_if.IFDriver.main_loop` overrides method defined in `driver.Driver` inconsistently. Parameter of type `PlayerConnection` is not a supertype of the overridden parameter `Optional[PlayerConnection]`.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 201,
    "warning_line": "    def main_loop(self, conn: PlayerConnection) -> None:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def main_loop(self, conn: PlayerConnection) -> None:\n        \"\"\"\n",
        "source_code_len": 70,
        "target_code": "\n    def main_loop(self, conn: Optional[PlayerConnection]) -> None:\n        \"\"\"\n",
        "target_code_len": 80,
        "diff_format": "@@ -200,3 +199,3 @@\n \n-    def main_loop(self, conn: PlayerConnection) -> None:\n+    def main_loop(self, conn: Optional[PlayerConnection]) -> None:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def main_loop(self, conn: PlayerConnection) -> None:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def main_loop(self, conn: Optional[PlayerConnection]) -> None:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"\"\"\n        conn.write_output()\n",
        "source_code_len": 40,
        "target_code": "        \"\"\"\n        assert conn\n        conn.write_output()\n",
        "target_code_len": 60,
        "diff_format": "@@ -205,2 +204,3 @@\n         \"\"\"\n+        assert conn\n         conn.write_output()\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n        conn.write_output()\n",
        "target_code_with_indent": "\n        assert conn\n        conn.write_output()\n"
      }
    ]
  },
  {
    "project": "irmen/Tale",
    "commit": "0a78d4a821d7da405bf5335ba3741757f0b593fe",
    "filename": "tale/items/bank.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale/tale/items/bank.py",
    "file_hunks_size": 1,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tale/items/bank.py:27:8 Incompatible attribute type [8]: Attribute `storage_file` declared in class `Bank` has type `str` but is used as type `None`.",
    "message": " Attribute `storage_file` declared in class `Bank` has type `str` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 27,
    "warning_line": "        self.storage_file = None  # type: str"
  },
  {
    "project": "irmen/Tale",
    "commit": "0a78d4a821d7da405bf5335ba3741757f0b593fe",
    "filename": "tale/items/board.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale/tale/items/board.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tale/items/board.py:32:8 Incompatible attribute type [8]: Attribute `storage_file` declared in class `BulletinBoard` has type `str` but is used as type `None`.",
    "message": " Attribute `storage_file` declared in class `BulletinBoard` has type `str` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 32,
    "warning_line": "        self.storage_file = None  # type: str"
  },
  {
    "project": "irmen/Tale",
    "commit": "0a78d4a821d7da405bf5335ba3741757f0b593fe",
    "filename": "tale/player.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale/tale/player.py",
    "file_hunks_size": 11,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tale/player.py:51:8 Incompatible attribute type [8]: Attribute `transcript` declared in class `Player` has type `IO[typing.Any]` but is used as type `None`.",
    "message": " Attribute `transcript` declared in class `Player` has type `IO[typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 51,
    "warning_line": "        self.transcript = None  # type: IO[Any]"
  },
  {
    "project": "irmen/Tale",
    "commit": "0a78d4a821d7da405bf5335ba3741757f0b593fe",
    "filename": "tale/player.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale/tale/player.py",
    "file_hunks_size": 11,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tale/player.py:94:19 Incompatible variable type [9]: short is declared to have type `bool` but is used as type `None`.",
    "message": " short is declared to have type `bool` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 94,
    "warning_line": "    def look(self, short: bool=None) -> None:"
  },
  {
    "project": "irmen/Tale",
    "commit": "0a78d4a821d7da405bf5335ba3741757f0b593fe",
    "filename": "tale/player.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale/tale/player.py",
    "file_hunks_size": 11,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tale/player.py:133:33 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `Player.activate_transcript` but got `None`.",
    "message": " Expected `str` for 1st positional only parameter to call `Player.activate_transcript` but got `None`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 133,
    "warning_line": "        self.activate_transcript(None, None)"
  },
  {
    "project": "irmen/Tale",
    "commit": "0a78d4a821d7da405bf5335ba3741757f0b593fe",
    "filename": "tale/player.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale/tale/player.py",
    "file_hunks_size": 11,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tale/player.py:133:39 Incompatible parameter type [6]: Expected `VirtualFileSystem` for 2nd positional only parameter to call `Player.activate_transcript` but got `None`.",
    "message": " Expected `VirtualFileSystem` for 2nd positional only parameter to call `Player.activate_transcript` but got `None`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 133,
    "warning_line": "        self.activate_transcript(None, None)"
  },
  {
    "project": "irmen/Tale",
    "commit": "0a78d4a821d7da405bf5335ba3741757f0b593fe",
    "filename": "tale/player.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale/tale/player.py",
    "file_hunks_size": 11,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tale/player.py:208:16 Incompatible attribute type [8]: Attribute `transcript` declared in class `Player` has type `IO[typing.Any]` but is used as type `None`.",
    "message": " Attribute `transcript` declared in class `Player` has type `IO[typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 208,
    "warning_line": "                self.transcript = None"
  },
  {
    "project": "irmen/Tale",
    "commit": "0a78d4a821d7da405bf5335ba3741757f0b593fe",
    "filename": "tale/player.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale/tale/player.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tale/player.py:245:8 Incompatible return type [7]: Expected `str` but got `None`.",
    "message": " Expected `str` but got `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 245,
    "warning_line": "        return None",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                            return desc\n        return None\n\n",
        "source_code_len": 61,
        "target_code": "                            return desc\n        return \"\"\n\n",
        "target_code_len": 59,
        "diff_format": "@@ -244,3 +246,3 @@\n                             return desc\n-        return None\n+        return \"\"\n \n",
        "source_code_with_indent": "                            <IND>return desc\n        <DED><DED><DED><DED><DED>return None\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                            <IND>return desc\n        <DED><DED><DED><DED><DED>return \"\"\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "irmen/Tale",
    "commit": "0a78d4a821d7da405bf5335ba3741757f0b593fe",
    "filename": "tale/player.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale/tale/player.py",
    "file_hunks_size": 11,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tale/player.py:356:8 Incompatible return type [7]: Expected `str` but got `Optional[str]`.",
    "message": " Expected `str` but got `Optional[str]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 356,
    "warning_line": "        return self.io.last_output_line"
  },
  {
    "project": "irmen/Tale",
    "commit": "0a78d4a821d7da405bf5335ba3741757f0b593fe",
    "filename": "tale/player.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale/tale/player.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tale/player.py:392:27 Incompatible variable type [9]: prompt is declared to have type `str` but is used as type `None`.",
    "message": " prompt is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 392,
    "warning_line": "    def input_direct(self, prompt: str=None) -> str:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def input_direct(self, prompt: str=None) -> str:\n        \"\"\"\n",
        "source_code_len": 66,
        "target_code": "\n    def input_direct(self, prompt: str) -> str:\n        \"\"\"\n",
        "target_code_len": 61,
        "diff_format": "@@ -391,3 +393,3 @@\n \n-    def input_direct(self, prompt: str=None) -> str:\n+    def input_direct(self, prompt: str) -> str:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def input_direct(self, prompt: str=None) -> str:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def input_direct(self, prompt: str) -> str:\n        <IND>"
      }
    ]
  },
  {
    "project": "irmen/Tale",
    "commit": "0a78d4a821d7da405bf5335ba3741757f0b593fe",
    "filename": "tale/player.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale/tale/player.py",
    "file_hunks_size": 11,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tale/player.py:437:36 Incompatible parameter type [6]: Expected `util.Context` for 1st positional only parameter to call `Player.destroy` but got `Optional[util.Context]`.",
    "message": " Expected `util.Context` for 1st positional only parameter to call `Player.destroy` but got `Optional[util.Context]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 437,
    "warning_line": "                self.player.destroy(ctx)"
  },
  {
    "project": "irmen/Tale",
    "commit": "0a78d4a821d7da405bf5335ba3741757f0b593fe",
    "filename": "tale/player.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale/tale/player.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "tale/player.py:439:16 Incompatible attribute type [8]: Attribute `player` declared in class `PlayerConnection` has type `Player` but is used as type `None`.",
    "message": " Attribute `player` declared in class `PlayerConnection` has type `Player` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 439,
    "warning_line": "                self.player = None",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "                self.io.abort_all_input(self.player)\n                self.player = None\n            self.io = None\n        if self.player:\n            self.player.destroy(ctx)\n            self.player = None\n",
        "source_code_len": 207,
        "target_code": "                self.io.abort_all_input(self.player)\n                self.player = None      # type: ignore\n            self.io = None              # type: ignore\n        if self.player:\n            self.player.destroy(ctx)\n            self.player = None          # type: ignore\n",
        "target_code_len": 279,
        "diff_format": "@@ -438,6 +440,6 @@\n                 self.io.abort_all_input(self.player)\n-                self.player = None\n-            self.io = None\n+                self.player = None      # type: ignore\n+            self.io = None              # type: ignore\n         if self.player:\n             self.player.destroy(ctx)\n-            self.player = None\n+            self.player = None          # type: ignore\n",
        "source_code_with_indent": "                self.io.abort_all_input(self.player)\n                self.player = None\n            <DED>self.io = None\n        <DED>if self.player:\n            <IND>self.player.destroy(ctx)\n            self.player = None\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                self.io.abort_all_input(self.player)\n                self.player = None      # type: ignore\n            <DED>self.io = None              # type: ignore\n        <DED>if self.player:\n            <IND>self.player.destroy(ctx)\n            self.player = None          # type: ignore\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "irmen/Tale",
    "commit": "0a78d4a821d7da405bf5335ba3741757f0b593fe",
    "filename": "tale/player.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale/tale/player.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "tale/player.py:440:12 Incompatible attribute type [8]: Attribute `io` declared in class `PlayerConnection` has type `IoAdapterBase` but is used as type `None`.",
    "message": " Attribute `io` declared in class `PlayerConnection` has type `IoAdapterBase` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 440,
    "warning_line": "            self.io = None",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "                self.io.abort_all_input(self.player)\n                self.player = None\n            self.io = None\n        if self.player:\n            self.player.destroy(ctx)\n            self.player = None\n",
        "source_code_len": 207,
        "target_code": "                self.io.abort_all_input(self.player)\n                self.player = None      # type: ignore\n            self.io = None              # type: ignore\n        if self.player:\n            self.player.destroy(ctx)\n            self.player = None          # type: ignore\n",
        "target_code_len": 279,
        "diff_format": "@@ -438,6 +440,6 @@\n                 self.io.abort_all_input(self.player)\n-                self.player = None\n-            self.io = None\n+                self.player = None      # type: ignore\n+            self.io = None              # type: ignore\n         if self.player:\n             self.player.destroy(ctx)\n-            self.player = None\n+            self.player = None          # type: ignore\n",
        "source_code_with_indent": "                self.io.abort_all_input(self.player)\n                self.player = None\n            <DED>self.io = None\n        <DED>if self.player:\n            <IND>self.player.destroy(ctx)\n            self.player = None\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                self.io.abort_all_input(self.player)\n                self.player = None      # type: ignore\n            <DED>self.io = None              # type: ignore\n        <DED>if self.player:\n            <IND>self.player.destroy(ctx)\n            self.player = None          # type: ignore\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "irmen/Tale",
    "commit": "0a78d4a821d7da405bf5335ba3741757f0b593fe",
    "filename": "tale/player.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale/tale/player.py",
    "file_hunks_size": 11,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tale/player.py:442:32 Incompatible parameter type [6]: Expected `util.Context` for 1st positional only parameter to call `Player.destroy` but got `Optional[util.Context]`.",
    "message": " Expected `util.Context` for 1st positional only parameter to call `Player.destroy` but got `Optional[util.Context]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 442,
    "warning_line": "            self.player.destroy(ctx)"
  },
  {
    "project": "irmen/Tale",
    "commit": "0a78d4a821d7da405bf5335ba3741757f0b593fe",
    "filename": "tale/player.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale/tale/player.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "tale/player.py:443:12 Incompatible attribute type [8]: Attribute `player` declared in class `PlayerConnection` has type `Player` but is used as type `None`.",
    "message": " Attribute `player` declared in class `PlayerConnection` has type `Player` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 443,
    "warning_line": "            self.player = None",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "                self.io.abort_all_input(self.player)\n                self.player = None\n            self.io = None\n        if self.player:\n            self.player.destroy(ctx)\n            self.player = None\n",
        "source_code_len": 207,
        "target_code": "                self.io.abort_all_input(self.player)\n                self.player = None      # type: ignore\n            self.io = None              # type: ignore\n        if self.player:\n            self.player.destroy(ctx)\n            self.player = None          # type: ignore\n",
        "target_code_len": 279,
        "diff_format": "@@ -438,6 +440,6 @@\n                 self.io.abort_all_input(self.player)\n-                self.player = None\n-            self.io = None\n+                self.player = None      # type: ignore\n+            self.io = None              # type: ignore\n         if self.player:\n             self.player.destroy(ctx)\n-            self.player = None\n+            self.player = None          # type: ignore\n",
        "source_code_with_indent": "                self.io.abort_all_input(self.player)\n                self.player = None\n            <DED>self.io = None\n        <DED>if self.player:\n            <IND>self.player.destroy(ctx)\n            self.player = None\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                self.io.abort_all_input(self.player)\n                self.player = None      # type: ignore\n            <DED>self.io = None              # type: ignore\n        <DED>if self.player:\n            <IND>self.player.destroy(ctx)\n            self.player = None          # type: ignore\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "irmen/Tale",
    "commit": "0a78d4a821d7da405bf5335ba3741757f0b593fe",
    "filename": "tale/shop.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale/tale/shop.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tale/shop.py:42:8 Incompatible attribute type [8]: Attribute `shopkeeper_vnum` declared in class `ShopBehavior` has type `int` but is used as type `None`.",
    "message": " Attribute `shopkeeper_vnum` declared in class `ShopBehavior` has type `int` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 42,
    "warning_line": "        self.shopkeeper_vnum = None   # type: int   # used for circle data to designate the shopkeeper belonging to this shop",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def __init__(self) -> None:\n        self.shopkeeper_vnum = None   # type: int   # used for circle data to designate the shopkeeper belonging to this shop\n        self.banks_money = False\n",
        "source_code_len": 191,
        "target_code": "    def __init__(self) -> None:\n        self.shopkeeper_vnum = -1   # used for circle data to designate the shopkeeper belonging to this shop\n        self.banks_money = False\n",
        "target_code_len": 175,
        "diff_format": "@@ -41,3 +41,3 @@\n     def __init__(self) -> None:\n-        self.shopkeeper_vnum = None   # type: int   # used for circle data to designate the shopkeeper belonging to this shop\n+        self.shopkeeper_vnum = -1   # used for circle data to designate the shopkeeper belonging to this shop\n         self.banks_money = False\n",
        "source_code_with_indent": "    def __init__(self) -> None:\n        <IND>self.shopkeeper_vnum = None   # type: int   # used for circle data to designate the shopkeeper belonging to this shop\n        self.banks_money = False\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def __init__(self) -> None:\n        <IND>self.shopkeeper_vnum = -1   # used for circle data to designate the shopkeeper belonging to this shop\n        self.banks_money = False\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "irmen/Tale",
    "commit": "0a78d4a821d7da405bf5335ba3741757f0b593fe",
    "filename": "tale/tio/if_browser_io.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale/tale/tio/if_browser_io.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "tale/tio/if_browser_io.py:439:19 Unsupported operand [58]: `>=` is not supported for operand types `None` and `Optional[Tuple[int, int, int, int, int, int, int, int, int]]`.",
    "message": " `>=` is not supported for operand types `None` and `Optional[Tuple[int, int, int, int, int, int, int, int, int]]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 439,
    "warning_line": "                if parsedate(if_modified) >= parsedate(mtime_formatted):",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "            if if_modified:\n                if parsedate(if_modified) >= parsedate(mtime_formatted):\n                    # the resource wasn't modified since last requested\n",
        "source_code_len": 173,
        "target_code": "            if if_modified:\n                if parsedate(if_modified) >= parsedate(mtime_formatted):        # type: ignore\n                    # the resource wasn't modified since last requested\n",
        "target_code_len": 195,
        "diff_format": "@@ -438,3 +438,3 @@\n             if if_modified:\n-                if parsedate(if_modified) >= parsedate(mtime_formatted):\n+                if parsedate(if_modified) >= parsedate(mtime_formatted):        # type: ignore\n                     # the resource wasn't modified since last requested\n",
        "source_code_with_indent": "            if if_modified:\n                <IND>if parsedate(if_modified) >= parsedate(mtime_formatted):\n                    # the resource wasn't modified since last requested\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            if if_modified:\n                <IND>if parsedate(if_modified) >= parsedate(mtime_formatted):        # type: ignore\n                    # the resource wasn't modified since last requested\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "irmen/Tale",
    "commit": "0a78d4a821d7da405bf5335ba3741757f0b593fe",
    "filename": "tale/tio/mud_browser_io.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale/tale/tio/mud_browser_io.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tale/tio/mud_browser_io.py:208:52 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `MemorySessionFactory.load` but got `typing.Optional[str]`.",
    "message": " Expected `str` for 1st positional only parameter to call `MemorySessionFactory.load` but got `typing.Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 208,
    "warning_line": "        environ[\"wsgi.session\"] = self.factory.load(sid)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        cookies = Cookies.from_env(environ)\n        sid = None\n        session_is_new = True\n",
        "source_code_len": 93,
        "target_code": "        cookies = Cookies.from_env(environ)\n        sid = \"\"\n        session_is_new = True\n",
        "target_code_len": 91,
        "diff_format": "@@ -202,3 +202,3 @@\n         cookies = Cookies.from_env(environ)\n-        sid = None\n+        sid = \"\"\n         session_is_new = True\n",
        "source_code_with_indent": "        <DED>cookies = Cookies.from_env(environ)\n        sid = None\n        session_is_new = True\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>cookies = Cookies.from_env(environ)\n        sid = \"\"\n        session_is_new = True\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "irmen/Tale",
    "commit": "0a78d4a821d7da405bf5335ba3741757f0b593fe",
    "filename": "tale/tio/mud_browser_io.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale/tale/tio/mud_browser_io.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tale/tio/mud_browser_io.py:229:32 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `MemorySessionFactory.delete` but got `typing.Optional[str]`.",
    "message": " Expected `str` for 1st positional only parameter to call `MemorySessionFactory.delete` but got `typing.Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 229,
    "warning_line": "            self.factory.delete(sid)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        cookies = Cookies.from_env(environ)\n        sid = None\n        session_is_new = True\n",
        "source_code_len": 93,
        "target_code": "        cookies = Cookies.from_env(environ)\n        sid = \"\"\n        session_is_new = True\n",
        "target_code_len": 91,
        "diff_format": "@@ -202,3 +202,3 @@\n         cookies = Cookies.from_env(environ)\n-        sid = None\n+        sid = \"\"\n         session_is_new = True\n",
        "source_code_with_indent": "        <DED>cookies = Cookies.from_env(environ)\n        sid = None\n        session_is_new = True\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>cookies = Cookies.from_env(environ)\n        sid = \"\"\n        session_is_new = True\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "irmen/Tale",
    "commit": "0a78d4a821d7da405bf5335ba3741757f0b593fe",
    "filename": "tale/tio/mud_browser_io.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale/tale/tio/mud_browser_io.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tale/tio/mud_browser_io.py:253:39 Incompatible variable type [9]: path is declared to have type `str` but is used as type `None`.",
    "message": " path is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 253,
    "warning_line": "    def delete_cookie(self, name: str, path: str=None) -> None:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def delete_cookie(self, name: str, path: str=None) -> None:\n        self[name] = \"deleted\"\n",
        "source_code_len": 96,
        "target_code": "\n    def delete_cookie(self, name: str, path: str=\"\") -> None:\n        self[name] = \"deleted\"\n",
        "target_code_len": 94,
        "diff_format": "@@ -252,3 +252,3 @@\n \n-    def delete_cookie(self, name: str, path: str=None) -> None:\n+    def delete_cookie(self, name: str, path: str=\"\") -> None:\n         self[name] = \"deleted\"\n",
        "source_code_with_indent": "\n    <DED>def delete_cookie(self, name: str, path: str=None) -> None:\n        <IND>self[name] = \"deleted\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def delete_cookie(self, name: str, path: str=\"\") -> None:\n        <IND>self[name] = \"deleted\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "irmen/Tale",
    "commit": "0a78d4a821d7da405bf5335ba3741757f0b593fe",
    "filename": "tale/tio/tkinter_io.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale/tale/tio/tkinter_io.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "tale/tio/tkinter_io.py:61:8 Incompatible attribute type [8]: Attribute `gui` declared in class `TkinterIo` has type `TaleGUI` but is used as type `None`.",
    "message": " Attribute `gui` declared in class `TkinterIo` has type `TaleGUI` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 61,
    "warning_line": "        self.gui = None",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "    def gui_terminated(self) -> None:\n        self.gui = None\n\n",
        "source_code_len": 63,
        "target_code": "    def gui_terminated(self) -> None:\n        self.gui = None     # type: ignore\n\n",
        "target_code_len": 82,
        "diff_format": "@@ -60,3 +60,3 @@\n     def gui_terminated(self) -> None:\n-        self.gui = None\n+        self.gui = None     # type: ignore\n \n",
        "source_code_with_indent": "    <DED>def gui_terminated(self) -> None:\n        <IND>self.gui = None\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def gui_terminated(self) -> None:\n        <IND>self.gui = None     # type: ignore\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "irmen/Tale",
    "commit": "0a78d4a821d7da405bf5335ba3741757f0b593fe",
    "filename": "tale/vfs.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale/tale/vfs.py",
    "file_hunks_size": 9,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tale/vfs.py:88:23 Incompatible variable type [9]: root_package is declared to have type `str` but is used as type `None`.",
    "message": " root_package is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 88,
    "warning_line": "    def __init__(self, root_package: str=None, root_path: Union[str, pathlib.Path]=None,"
  },
  {
    "project": "irmen/Tale",
    "commit": "0a78d4a821d7da405bf5335ba3741757f0b593fe",
    "filename": "tale/vfs.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-Tale/tale/vfs.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tale/vfs.py:223:36 Incompatible variable type [9]: mimetype is declared to have type `str` but is used as type `None`.",
    "message": " mimetype is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 223,
    "warning_line": "    def open_write(self, name: str, mimetype: str=None, append: bool=False) -> IO[Any]:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def open_write(self, name: str, mimetype: str=None, append: bool=False) -> IO[Any]:\n        \"\"\"returns a writable file io stream\"\"\"\n",
        "source_code_len": 137,
        "target_code": "\n    def open_write(self, name: str, mimetype: str=\"\", append: bool=False) -> IO[Any]:\n        \"\"\"returns a writable file io stream\"\"\"\n",
        "target_code_len": 135,
        "diff_format": "@@ -222,3 +223,3 @@\n \n-    def open_write(self, name: str, mimetype: str=None, append: bool=False) -> IO[Any]:\n+    def open_write(self, name: str, mimetype: str=\"\", append: bool=False) -> IO[Any]:\n         \"\"\"returns a writable file io stream\"\"\"\n",
        "source_code_with_indent": "\n    <DED><DED>def open_write(self, name: str, mimetype: str=None, append: bool=False) -> IO[Any]:\n        <IND>\"\"\"returns a writable file io stream\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED><DED>def open_write(self, name: str, mimetype: str=\"\", append: bool=False) -> IO[Any]:\n        <IND>\"\"\"returns a writable file io stream\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]