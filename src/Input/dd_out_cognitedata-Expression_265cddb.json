[
  {
    "project": "cognitedata/Expression",
    "commit": "265cddb3566b74acdd4d20e27541cf07f484c47a",
    "filename": "expression/collections/frozenlist.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/cognitedata-Expression/expression/collections/frozenlist.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "expression/collections/frozenlist.py:340:12 Incompatible return type [7]: Expected `FrozenList[Variable[TSource]]` but got implicit return value of `None`.",
    "message": " Expected `FrozenList[Variable[TSource]]` but got implicit return value of `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 340,
    "warning_line": "            return empty",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        result = generator(state)\n        for (item, state_) in result.to_list():\n            return FrozenList.unfold(generator, state_).cons(item)\n        else:\n            return empty\n\n",
        "source_code_len": 190,
        "target_code": "\n        return unfold(generator, state)\n\n",
        "target_code_len": 42,
        "diff_format": "@@ -335,7 +335,3 @@\n \n-        result = generator(state)\n-        for (item, state_) in result.to_list():\n-            return FrozenList.unfold(generator, state_).cons(item)\n-        else:\n-            return empty\n+        return unfold(generator, state)\n \n",
        "source_code_with_indent": "\n        result = generator(state)\n        for (item, state_) in result.to_list():\n            <IND>return FrozenList.unfold(generator, state_).cons(item)\n        <DED>else:\n            <IND>return empty\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        return unfold(generator, state)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "cognitedata/Expression",
    "commit": "265cddb3566b74acdd4d20e27541cf07f484c47a",
    "filename": "expression/collections/seq.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/cognitedata-Expression/expression/collections/seq.py",
    "file_hunks_size": 9,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "expression/collections/seq.py:406:24 Incompatible parameter type [6]: Expected `Iterable[Variable[_typeshed.SupportsLessThanT (bound to _typeshed.SupportsLessThan)]]` for 1st positional only parameter to call `max` but got `Iterable[Variable[TSource]]`.",
    "message": " Expected `Iterable[Variable[_typeshed.SupportsLessThanT (bound to _typeshed.SupportsLessThan)]]` for 1st positional only parameter to call `max` but got `Iterable[Variable[TSource]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 406,
    "warning_line": "    return builtins.max(source)"
  },
  {
    "project": "cognitedata/Expression",
    "commit": "265cddb3566b74acdd4d20e27541cf07f484c47a",
    "filename": "expression/collections/seq.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/cognitedata-Expression/expression/collections/seq.py",
    "file_hunks_size": 9,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "expression/collections/seq.py:411:28 Incompatible parameter type [6]: Expected `Iterable[Variable[_typeshed.SupportsLessThanT (bound to _typeshed.SupportsLessThan)]]` for 1st positional only parameter to call `max` but got `typing.Generator[Variable[TResult], None, None]`.",
    "message": " Expected `Iterable[Variable[_typeshed.SupportsLessThanT (bound to _typeshed.SupportsLessThan)]]` for 1st positional only parameter to call `max` but got `typing.Generator[Variable[TResult], None, None]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 411,
    "warning_line": "        return builtins.max(projection(x) for x in source)"
  },
  {
    "project": "cognitedata/Expression",
    "commit": "265cddb3566b74acdd4d20e27541cf07f484c47a",
    "filename": "expression/collections/seq.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/cognitedata-Expression/expression/collections/seq.py",
    "file_hunks_size": 9,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "expression/collections/seq.py:420:24 Incompatible parameter type [6]: Expected `Iterable[Variable[_typeshed.SupportsLessThanT (bound to _typeshed.SupportsLessThan)]]` for 1st positional only parameter to call `min` but got `Iterable[Variable[TSource]]`.",
    "message": " Expected `Iterable[Variable[_typeshed.SupportsLessThanT (bound to _typeshed.SupportsLessThan)]]` for 1st positional only parameter to call `min` but got `Iterable[Variable[TSource]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 420,
    "warning_line": "    return builtins.min(source)"
  },
  {
    "project": "cognitedata/Expression",
    "commit": "265cddb3566b74acdd4d20e27541cf07f484c47a",
    "filename": "expression/collections/seq.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/cognitedata-Expression/expression/collections/seq.py",
    "file_hunks_size": 9,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "expression/collections/seq.py:425:28 Incompatible parameter type [6]: Expected `Iterable[Variable[_typeshed.SupportsLessThanT (bound to _typeshed.SupportsLessThan)]]` for 1st positional only parameter to call `min` but got `typing.Generator[Variable[TResult], None, None]`.",
    "message": " Expected `Iterable[Variable[_typeshed.SupportsLessThanT (bound to _typeshed.SupportsLessThan)]]` for 1st positional only parameter to call `min` but got `typing.Generator[Variable[TResult], None, None]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 425,
    "warning_line": "        return builtins.min(projection(x) for x in source)"
  }
]