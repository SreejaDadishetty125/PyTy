[
  {
    "project": "volatilityfoundation/volatility3",
    "commit": "7efe19224e81525a7b11d4ef886243ee1bf74183",
    "filename": "volatility/cli/text_renderer.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/volatilityfoundation-volatility3/volatility/cli/text_renderer.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "volatility/cli/text_renderer.py:267:65 Incompatible parameter type [6]: Expected `typing_extensions.SupportsIndex` for 1st positional only parameter to call `list.__getitem__` but got `interfaces.renderers.Column`.",
    "message": " Expected `typing_extensions.SupportsIndex` for 1st positional only parameter to call `list.__getitem__` but got `interfaces.renderers.Column`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 267,
    "warning_line": "            outfd.write(format_string.format(\"*\" * depth, *[line[column] for column in grid.columns]))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from functools import wraps\nfrom typing import Any, List, Tuple\n\nfrom volatility.framework.renderers import format_hints\n",
        "source_code_len": 121,
        "target_code": "from functools import wraps\nfrom typing import Any, List, Tuple, Dict\n\nfrom volatility.framework.interfaces.renderers import Column\nfrom volatility.framework.renderers import format_hints\n",
        "target_code_len": 188,
        "diff_format": "@@ -10,4 +10,5 @@\n from functools import wraps\n-from typing import Any, List, Tuple\n-\n+from typing import Any, List, Tuple, Dict\n+\n+from volatility.framework.interfaces.renderers import Column\n from volatility.framework.renderers import format_hints\n",
        "source_code_with_indent": "from functools import wraps\nfrom typing import Any, List, Tuple\n\nfrom volatility.framework.renderers import format_hints\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from functools import wraps\nfrom typing import Any, List, Tuple, Dict\n\nfrom volatility.framework.interfaces.renderers import Column\nfrom volatility.framework.renderers import format_hints\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        final_output = []  # type: List[Tuple[int, List]]\n        grid.populate(visitor, final_output)\n",
        "source_code_len": 104,
        "target_code": "\n        final_output = []  # type: List[Tuple[int, Dict[Column, bytes]]]\n        grid.populate(visitor, final_output)\n",
        "target_code_len": 119,
        "diff_format": "@@ -251,3 +252,3 @@\n \n-        final_output = []  # type: List[Tuple[int, List]]\n+        final_output = []  # type: List[Tuple[int, Dict[Column, bytes]]]\n         grid.populate(visitor, final_output)\n",
        "source_code_with_indent": "\n        <DED>final_output = []  # type: List[Tuple[int, List]]\n        grid.populate(visitor, final_output)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        <DED>final_output = []  # type: List[Tuple[int, Dict[Column, bytes]]]\n        grid.populate(visitor, final_output)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "volatilityfoundation/volatility3",
    "commit": "7efe19224e81525a7b11d4ef886243ee1bf74183",
    "filename": "volatility/framework/plugins/windows/registry/printkey.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/volatilityfoundation-volatility3/volatility/framework/plugins/windows/registry/printkey.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "volatility/framework/plugins/windows/registry/printkey.py:66:12 Incompatible return type [7]: Expected `Iterable[Tuple[int, bool, datetime.datetime, str, bool, bytes]]` but got `typing.Generator[Tuple[int, bool, typing.Union[datetime.datetime, interfaces.renderers.BaseAbsentValue], typing.Any, typing.Any, typing.Any], None, None]`.",
    "message": " Expected `Iterable[Tuple[int, bool, datetime.datetime, str, bool, bytes]]` but got `typing.Generator[Tuple[int, bool, typing.Union[datetime.datetime, interfaces.renderers.BaseAbsentValue], typing.Any, typing.Any, typing.Any], None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 66,
    "warning_line": "            yield result"
  },
  {
    "project": "volatilityfoundation/volatility3",
    "commit": "7efe19224e81525a7b11d4ef886243ee1bf74183",
    "filename": "volatility/framework/plugins/windows/registry/printkey.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/volatilityfoundation-volatility3/volatility/framework/plugins/windows/registry/printkey.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "volatility/framework/plugins/windows/registry/printkey.py:80:12 Incompatible return type [7]: Expected `Iterable[Tuple[int, bool, datetime.datetime, str, bool, bytes]]` but got `typing.Generator[Tuple[int, bool, typing.Union[datetime.datetime, interfaces.renderers.BaseAbsentValue], typing.Any, typing.Any, typing.Any], None, None]`.",
    "message": " Expected `Iterable[Tuple[int, bool, datetime.datetime, str, bool, bytes]]` but got `typing.Generator[Tuple[int, bool, typing.Union[datetime.datetime, interfaces.renderers.BaseAbsentValue], typing.Any, typing.Any, typing.Any], None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 80,
    "warning_line": "            yield result"
  },
  {
    "project": "volatilityfoundation/volatility3",
    "commit": "7efe19224e81525a7b11d4ef886243ee1bf74183",
    "filename": "volatility/framework/plugins/windows/svcscan.py",
    "min_patch_found": false,
    "full_warning_msg": "volatility/framework/plugins/windows/svcscan.py:108:12 Incompatible parameter type [6]: Expected `typing.Optional[typing.Dict[str, typing.Type[interfaces.objects.ObjectInterface]]]` for 5th parameter `class_types` to call `intermed.IntermediateSymbolTable.create` but got `typing.Dict[str, typing.Type[typing.Union[services._SERVICE_HEADER, services._SERVICE_RECORD]]]`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "volatilityfoundation/volatility3",
    "commit": "7efe19224e81525a7b11d4ef886243ee1bf74183",
    "filename": "volatility/framework/plugins/windows/verinfo.py",
    "min_patch_found": false,
    "full_warning_msg": "volatility/framework/plugins/windows/verinfo.py:98:61 Incompatible parameter type [6]: Expected `typing.Optional[typing.Dict[str, typing.Type[interfaces.objects.ObjectInterface]]]` for 5th parameter `class_types` to call `intermed.IntermediateSymbolTable.create` but got `typing.Dict[str, typing.Type[Union[extensions.pe._IMAGE_DOS_HEADER, extensions.pe._IMAGE_NT_HEADERS]]]`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "volatilityfoundation/volatility3",
    "commit": "7efe19224e81525a7b11d4ef886243ee1bf74183",
    "filename": "volatility/framework/symbols/windows/extensions/registry.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/volatilityfoundation-volatility3/volatility/framework/symbols/windows/extensions/registry.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "volatility/framework/symbols/windows/extensions/registry.py:216:12 Incompatible return type [7]: Expected `interfaces.objects.ObjectInterface` but got `str`.",
    "message": " Expected `interfaces.objects.ObjectInterface` but got `str`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 216,
    "warning_line": "            return reg.get_name().split('\\\\')[-1]",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def get_key_path(self) -> interfaces.objects.ObjectInterface:\n        reg = self._context.layers[self.vol.layer_name]\n",
        "source_code_len": 123,
        "target_code": "\n    def get_key_path(self) -> str:\n        reg = self._context.layers[self.vol.layer_name]\n",
        "target_code_len": 92,
        "diff_format": "@@ -207,3 +208,3 @@\n \n-    def get_key_path(self) -> interfaces.objects.ObjectInterface:\n+    def get_key_path(self) -> str:\n         reg = self._context.layers[self.vol.layer_name]\n",
        "source_code_with_indent": "\n    <DED>def get_key_path(self) -> interfaces.objects.ObjectInterface:\n        <IND>reg = self._context.layers[self.vol.layer_name]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def get_key_path(self) -> str:\n        <IND>reg = self._context.layers[self.vol.layer_name]\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]