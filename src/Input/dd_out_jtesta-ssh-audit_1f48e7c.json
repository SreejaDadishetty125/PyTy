[
  {
    "project": "jtesta/ssh-audit",
    "commit": "1f48e7c92b425a597b026a0625cf286b20666048",
    "filename": "ssh-audit.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jtesta-ssh-audit/ssh-audit.py",
    "file_hunks_size": 35,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ssh-audit.py:2766:42 Invalid type [31]: Expression `\"(str, str)\"` is not a valid type.",
    "message": " Expression `\"(str, str)\"` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 2766,
    "warning_line": "        vfrom, vtill = line[0:2]  # type: str, str",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def output_security_sub(sub, software, client_audit, padlen):\n    # type: (str, Optional[SSH.Software], int) -> None\n    secdb = SSH.Security.CVE if sub == 'cve' else SSH.Security.TXT\n",
        "source_code_len": 184,
        "target_code": "def output_security_sub(sub, software, client_audit, padlen):\n    # type: (str, Optional[SSH.Software], bool, int) -> None\n    secdb = SSH.Security.CVE if sub == 'cve' else SSH.Security.TXT\n",
        "target_code_len": 190,
        "diff_format": "@@ -2760,3 +2760,3 @@\n def output_security_sub(sub, software, client_audit, padlen):\n-    # type: (str, Optional[SSH.Software], int) -> None\n+    # type: (str, Optional[SSH.Software], bool, int) -> None\n     secdb = SSH.Security.CVE if sub == 'cve' else SSH.Security.TXT\n",
        "source_code_with_indent": "<DED><DED>def output_security_sub(sub, software, client_audit, padlen):\n    # type: (str, Optional[SSH.Software], int) -> None\n    <IND>secdb = SSH.Security.CVE if sub == 'cve' else SSH.Security.TXT\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED><DED>def output_security_sub(sub, software, client_audit, padlen):\n    # type: (str, Optional[SSH.Software], bool, int) -> None\n    <IND>secdb = SSH.Security.CVE if sub == 'cve' else SSH.Security.TXT\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    for line in secdb[software.product]:\n        vfrom, vtill = line[0:2]  # type: str, str\n        if not software.between_versions(vfrom, vtill):\n            continue\n        target, name = line[2:4]  # type: int, str\n        is_server = target & 1 == 1\n",
        "source_code_len": 256,
        "target_code": "    for line in secdb[software.product]:\n        vfrom = ''  # type: str\n        vtill = ''  # type: str\n        vfrom, vtill = line[0:2]\n        if not software.between_versions(vfrom, vtill):\n            continue\n        target = 0  # type: int\n        name = ''  # type: str\n        target, name = line[2:4]\n        is_server = target & 1 == 1\n",
        "target_code_len": 347,
        "diff_format": "@@ -2765,6 +2765,10 @@\n     for line in secdb[software.product]:\n-        vfrom, vtill = line[0:2]  # type: str, str\n+        vfrom = ''  # type: str\n+        vtill = ''  # type: str\n+        vfrom, vtill = line[0:2]\n         if not software.between_versions(vfrom, vtill):\n             continue\n-        target, name = line[2:4]  # type: int, str\n+        target = 0  # type: int\n+        name = ''  # type: str\n+        target, name = line[2:4]\n         is_server = target & 1 == 1\n",
        "source_code_with_indent": "    <DED>for line in secdb[software.product]:\n        <IND>vfrom, vtill = line[0:2]  # type: str, str\n        if not software.between_versions(vfrom, vtill):\n            <IND>continue\n        <DED>target, name = line[2:4]  # type: int, str\n        is_server = target & 1 == 1\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>for line in secdb[software.product]:\n        <IND>vfrom = ''  # type: str\n        vtill = ''  # type: str\n        vfrom, vtill = line[0:2]\n        if not software.between_versions(vfrom, vtill):\n            <IND>continue\n        <DED>target = 0  # type: int\n        name = ''  # type: str\n        target, name = line[2:4]\n        is_server = target & 1 == 1\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jtesta/ssh-audit",
    "commit": "1f48e7c92b425a597b026a0625cf286b20666048",
    "filename": "ssh-audit.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jtesta-ssh-audit/ssh-audit.py",
    "file_hunks_size": 35,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ssh-audit.py:2769:42 Invalid type [31]: Expression `\"(int, str)\"` is not a valid type.",
    "message": " Expression `\"(int, str)\"` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 2769,
    "warning_line": "        target, name = line[2:4]  # type: int, str",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def output_security_sub(sub, software, client_audit, padlen):\n    # type: (str, Optional[SSH.Software], int) -> None\n    secdb = SSH.Security.CVE if sub == 'cve' else SSH.Security.TXT\n",
        "source_code_len": 184,
        "target_code": "def output_security_sub(sub, software, client_audit, padlen):\n    # type: (str, Optional[SSH.Software], bool, int) -> None\n    secdb = SSH.Security.CVE if sub == 'cve' else SSH.Security.TXT\n",
        "target_code_len": 190,
        "diff_format": "@@ -2760,3 +2760,3 @@\n def output_security_sub(sub, software, client_audit, padlen):\n-    # type: (str, Optional[SSH.Software], int) -> None\n+    # type: (str, Optional[SSH.Software], bool, int) -> None\n     secdb = SSH.Security.CVE if sub == 'cve' else SSH.Security.TXT\n",
        "source_code_with_indent": "<DED><DED>def output_security_sub(sub, software, client_audit, padlen):\n    # type: (str, Optional[SSH.Software], int) -> None\n    <IND>secdb = SSH.Security.CVE if sub == 'cve' else SSH.Security.TXT\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED><DED>def output_security_sub(sub, software, client_audit, padlen):\n    # type: (str, Optional[SSH.Software], bool, int) -> None\n    <IND>secdb = SSH.Security.CVE if sub == 'cve' else SSH.Security.TXT\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    for line in secdb[software.product]:\n        vfrom, vtill = line[0:2]  # type: str, str\n        if not software.between_versions(vfrom, vtill):\n            continue\n        target, name = line[2:4]  # type: int, str\n        is_server = target & 1 == 1\n",
        "source_code_len": 256,
        "target_code": "    for line in secdb[software.product]:\n        vfrom = ''  # type: str\n        vtill = ''  # type: str\n        vfrom, vtill = line[0:2]\n        if not software.between_versions(vfrom, vtill):\n            continue\n        target = 0  # type: int\n        name = ''  # type: str\n        target, name = line[2:4]\n        is_server = target & 1 == 1\n",
        "target_code_len": 347,
        "diff_format": "@@ -2765,6 +2765,10 @@\n     for line in secdb[software.product]:\n-        vfrom, vtill = line[0:2]  # type: str, str\n+        vfrom = ''  # type: str\n+        vtill = ''  # type: str\n+        vfrom, vtill = line[0:2]\n         if not software.between_versions(vfrom, vtill):\n             continue\n-        target, name = line[2:4]  # type: int, str\n+        target = 0  # type: int\n+        name = ''  # type: str\n+        target, name = line[2:4]\n         is_server = target & 1 == 1\n",
        "source_code_with_indent": "    <DED>for line in secdb[software.product]:\n        <IND>vfrom, vtill = line[0:2]  # type: str, str\n        if not software.between_versions(vfrom, vtill):\n            <IND>continue\n        <DED>target, name = line[2:4]  # type: int, str\n        is_server = target & 1 == 1\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>for line in secdb[software.product]:\n        <IND>vfrom = ''  # type: str\n        vtill = ''  # type: str\n        vfrom, vtill = line[0:2]\n        if not software.between_versions(vfrom, vtill):\n            <IND>continue\n        <DED>target = 0  # type: int\n        name = ''  # type: str\n        target, name = line[2:4]\n        is_server = target & 1 == 1\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jtesta/ssh-audit",
    "commit": "1f48e7c92b425a597b026a0625cf286b20666048",
    "filename": "ssh-audit.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jtesta-ssh-audit/ssh-audit.py",
    "file_hunks_size": 35,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ssh-audit.py:2779:45 Invalid type [31]: Expression `\"(float, str)\"` is not a valid type.",
    "message": " Expression `\"(float, str)\"` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 2779,
    "warning_line": "            cvss, descr = line[4:6]  # type: float, str",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        if sub == 'cve':\n            cvss, descr = line[4:6]  # type: float, str\n\n",
        "source_code_len": 82,
        "target_code": "        if sub == 'cve':\n            cvss = 0.0  # type: float\n            descr = ''  # type: str\n            cvss, descr = line[4:6]\n\n",
        "target_code_len": 136,
        "diff_format": "@@ -2778,3 +2782,5 @@\n         if sub == 'cve':\n-            cvss, descr = line[4:6]  # type: float, str\n+            cvss = 0.0  # type: float\n+            descr = ''  # type: str\n+            cvss, descr = line[4:6]\n \n",
        "source_code_with_indent": "        if sub == 'cve':\n            <IND>cvss, descr = line[4:6]  # type: float, str\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        if sub == 'cve':\n            <IND>cvss = 0.0  # type: float\n            descr = ''  # type: str\n            cvss, descr = line[4:6]\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jtesta/ssh-audit",
    "commit": "1f48e7c92b425a597b026a0625cf286b20666048",
    "filename": "ssh-audit.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jtesta-ssh-audit/ssh-audit.py",
    "file_hunks_size": 35,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ssh-audit.py:2873:8 Incompatible return type [7]: Expected `None` but got `bool`.",
    "message": " Expected `None` but got `bool`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 2873,
    "warning_line": "        return ret",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def output_recommendations(algs, software, padlen=0):\n    # type: (SSH.Algorithms, Optional[SSH.Software], int) -> None\n\n",
        "source_code_len": 121,
        "target_code": "def output_recommendations(algs, software, padlen=0):\n    # type: (SSH.Algorithms, Optional[SSH.Software], int) -> bool\n\n",
        "target_code_len": 121,
        "diff_format": "@@ -2843,3 +2849,3 @@\n def output_recommendations(algs, software, padlen=0):\n-    # type: (SSH.Algorithms, Optional[SSH.Software], int) -> None\n+    # type: (SSH.Algorithms, Optional[SSH.Software], int) -> bool\n \n",
        "source_code_with_indent": "<DED><DED>def output_recommendations(algs, software, padlen=0):\n    # type: (SSH.Algorithms, Optional[SSH.Software], int) -> None\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED><DED>def output_recommendations(algs, software, padlen=0):\n    # type: (SSH.Algorithms, Optional[SSH.Software], int) -> bool\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jtesta/ssh-audit",
    "commit": "1f48e7c92b425a597b026a0625cf286b20666048",
    "filename": "ssh-audit.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jtesta-ssh-audit/ssh-audit.py",
    "file_hunks_size": 35,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ssh-audit.py:2912:4 Incompatible return type [7]: Expected `None` but got `bool`.",
    "message": " Expected `None` but got `bool`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 2912,
    "warning_line": "    return ret",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def output_recommendations(algs, software, padlen=0):\n    # type: (SSH.Algorithms, Optional[SSH.Software], int) -> None\n\n",
        "source_code_len": 121,
        "target_code": "def output_recommendations(algs, software, padlen=0):\n    # type: (SSH.Algorithms, Optional[SSH.Software], int) -> bool\n\n",
        "target_code_len": 121,
        "diff_format": "@@ -2843,3 +2849,3 @@\n def output_recommendations(algs, software, padlen=0):\n-    # type: (SSH.Algorithms, Optional[SSH.Software], int) -> None\n+    # type: (SSH.Algorithms, Optional[SSH.Software], int) -> bool\n \n",
        "source_code_with_indent": "<DED><DED>def output_recommendations(algs, software, padlen=0):\n    # type: (SSH.Algorithms, Optional[SSH.Software], int) -> None\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED><DED>def output_recommendations(algs, software, padlen=0):\n    # type: (SSH.Algorithms, Optional[SSH.Software], int) -> bool\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jtesta/ssh-audit",
    "commit": "1f48e7c92b425a597b026a0625cf286b20666048",
    "filename": "ssh-audit.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jtesta-ssh-audit/ssh-audit.py",
    "file_hunks_size": 35,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ssh-audit.py:2932:27 Incompatible variable type [9]: client_host is declared to have type `List[str]` but is used as type `None`.",
    "message": " client_host is declared to have type `List[str]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 2932,
    "warning_line": "def output(banner, header, client_host=None, kex=None, pkm=None):"
  }
]