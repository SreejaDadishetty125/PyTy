[
  {
    "project": "Qiskit/qiskit-ibmq-provider",
    "commit": "bdafcc81ca5b088e31ff295c2a49b18128baa0a1",
    "filename": "qiskit/providers/ibmq/accountprovider.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Qiskit-qiskit-ibmq-provider/qiskit/providers/ibmq/accountprovider.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "qiskit/providers/ibmq/accountprovider.py:65:8 Incompatible attribute type [8]: Attribute `backends` declared in class `AccountProvider` has type `BoundMethod[typing.Callable(AccountProvider.backends)[[Named(self, AccountProvider), Named(name, Optional[str], default), Keywords(typing.Any)], List[IBMQBackend]], AccountProvider]` but is used as type `IBMQBackendService`.",
    "message": " Attribute `backends` declared in class `AccountProvider` has type `BoundMethod[typing.Callable(AccountProvider.backends)[[Named(self, AccountProvider), Named(name, Optional[str], default), Keywords(typing.Any)], List[IBMQBackend]], AccountProvider]` but is used as type `IBMQBackendService`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 65,
    "warning_line": "        self.backends = IBMQBackendService(self)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        self._backends = self._discover_remote_backends()\n        self.backends = IBMQBackendService(self)\n\n",
        "source_code_len": 108,
        "target_code": "        self._backends = self._discover_remote_backends()\n        self.backends = IBMQBackendService(self)  # type: ignore[assignment]\n\n",
        "target_code_len": 136,
        "diff_format": "@@ -64,3 +64,3 @@\n         self._backends = self._discover_remote_backends()\n-        self.backends = IBMQBackendService(self)\n+        self.backends = IBMQBackendService(self)  # type: ignore[assignment]\n \n",
        "source_code_with_indent": "        self._backends = self._discover_remote_backends()\n        self.backends = IBMQBackendService(self)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self._backends = self._discover_remote_backends()\n        self.backends = IBMQBackendService(self)  # type: ignore[assignment]\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Qiskit/qiskit-ibmq-provider",
    "commit": "bdafcc81ca5b088e31ff295c2a49b18128baa0a1",
    "filename": "qiskit/providers/ibmq/api/rest/backend.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Qiskit-qiskit-ibmq-provider/qiskit/providers/ibmq/api/rest/backend.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "qiskit/providers/ibmq/api/rest/backend.py:64:31 Incompatible parameter type [6]: Expected `int` for 2nd positional only parameter to call `dict.__setitem__` but got `str`.",
    "message": " Expected `int` for 2nd positional only parameter to call `dict.__setitem__` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 64,
    "warning_line": "            params['filter'] = json.dumps(query)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "            query['where'] = extra_filter\n            params['filter'] = json.dumps(query)\n\n",
        "source_code_len": 92,
        "target_code": "            query['where'] = extra_filter\n            params['filter'] = json.dumps(query)  # type: ignore[assignment]\n\n",
        "target_code_len": 120,
        "diff_format": "@@ -63,3 +63,3 @@\n             query['where'] = extra_filter\n-            params['filter'] = json.dumps(query)\n+            params['filter'] = json.dumps(query)  # type: ignore[assignment]\n \n",
        "source_code_with_indent": "            query['where'] = extra_filter\n            params['filter'] = json.dumps(query)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            query['where'] = extra_filter\n            params['filter'] = json.dumps(query)  # type: ignore[assignment]\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Qiskit/qiskit-ibmq-provider",
    "commit": "bdafcc81ca5b088e31ff295c2a49b18128baa0a1",
    "filename": "qiskit/providers/ibmq/api/session.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Qiskit-qiskit-ibmq-provider/qiskit/providers/ibmq/api/session.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "qiskit/providers/ibmq/api/session.py:135:4 Inconsistent override [14]: `qiskit.providers.ibmq.api.session.RetrySession.request` overrides method defined in `requests.sessions.Session` inconsistently. Parameter of type `str` is not a supertype of the overridden parameter `typing.Union[bytes, str]`.",
    "message": " `qiskit.providers.ibmq.api.session.RetrySession.request` overrides method defined in `requests.sessions.Session` inconsistently. Parameter of type `str` is not a supertype of the overridden parameter `typing.Union[bytes, str]`.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 135,
    "warning_line": "    def request(self, method: str, url: str, bare: bool = False, **kwargs: Any) -> Response:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n    def request(self, method: str, url: str, bare: bool = False, **kwargs: Any) -> Response:\n        \"\"\"Constructs a Request, prepending the base url.\n",
        "source_code_len": 152,
        "target_code": "\n    def request(  # type: ignore[override]\n            self,\n            method: str,\n            url: str,\n            bare: bool = False,\n            **kwargs: Any\n    ) -> Response:\n        \"\"\"Constructs a Request, prepending the base url.\n",
        "target_code_len": 244,
        "diff_format": "@@ -134,3 +134,9 @@\n \n-    def request(self, method: str, url: str, bare: bool = False, **kwargs: Any) -> Response:\n+    def request(  # type: ignore[override]\n+            self,\n+            method: str,\n+            url: str,\n+            bare: bool = False,\n+            **kwargs: Any\n+    ) -> Response:\n         \"\"\"Constructs a Request, prepending the base url.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def request(self, method: str, url: str, bare: bool = False, **kwargs: Any) -> Response:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def request(  # type: ignore[override]\n            self,\n            method: str,\n            url: str,\n            bare: bool = False,\n            **kwargs: Any\n    ) -> Response:\n        <IND>"
      }
    ]
  },
  {
    "project": "Qiskit/qiskit-ibmq-provider",
    "commit": "bdafcc81ca5b088e31ff295c2a49b18128baa0a1",
    "filename": "qiskit/providers/ibmq/api/session.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Qiskit-qiskit-ibmq-provider/qiskit/providers/ibmq/api/session.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "qiskit/providers/ibmq/api/session.py:135:4 Inconsistent override [14]: `qiskit.providers.ibmq.api.session.RetrySession.request` overrides method defined in `requests.sessions.Session` inconsistently. Could not find parameter `allow_redirects` in overriding signature.",
    "message": " `qiskit.providers.ibmq.api.session.RetrySession.request` overrides method defined in `requests.sessions.Session` inconsistently. Could not find parameter `allow_redirects` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 135,
    "warning_line": "    def request(self, method: str, url: str, bare: bool = False, **kwargs: Any) -> Response:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n    def request(self, method: str, url: str, bare: bool = False, **kwargs: Any) -> Response:\n        \"\"\"Constructs a Request, prepending the base url.\n",
        "source_code_len": 152,
        "target_code": "\n    def request(  # type: ignore[override]\n            self,\n            method: str,\n            url: str,\n            bare: bool = False,\n            **kwargs: Any\n    ) -> Response:\n        \"\"\"Constructs a Request, prepending the base url.\n",
        "target_code_len": 244,
        "diff_format": "@@ -134,3 +134,9 @@\n \n-    def request(self, method: str, url: str, bare: bool = False, **kwargs: Any) -> Response:\n+    def request(  # type: ignore[override]\n+            self,\n+            method: str,\n+            url: str,\n+            bare: bool = False,\n+            **kwargs: Any\n+    ) -> Response:\n         \"\"\"Constructs a Request, prepending the base url.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def request(self, method: str, url: str, bare: bool = False, **kwargs: Any) -> Response:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def request(  # type: ignore[override]\n            self,\n            method: str,\n            url: str,\n            bare: bool = False,\n            **kwargs: Any\n    ) -> Response:\n        <IND>"
      }
    ]
  },
  {
    "project": "Qiskit/qiskit-ibmq-provider",
    "commit": "bdafcc81ca5b088e31ff295c2a49b18128baa0a1",
    "filename": "qiskit/providers/ibmq/api/session.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Qiskit-qiskit-ibmq-provider/qiskit/providers/ibmq/api/session.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "qiskit/providers/ibmq/api/session.py:135:4 Inconsistent override [14]: `qiskit.providers.ibmq.api.session.RetrySession.request` overrides method defined in `requests.sessions.Session` inconsistently. Could not find parameter `auth` in overriding signature.",
    "message": " `qiskit.providers.ibmq.api.session.RetrySession.request` overrides method defined in `requests.sessions.Session` inconsistently. Could not find parameter `auth` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 135,
    "warning_line": "    def request(self, method: str, url: str, bare: bool = False, **kwargs: Any) -> Response:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n    def request(self, method: str, url: str, bare: bool = False, **kwargs: Any) -> Response:\n        \"\"\"Constructs a Request, prepending the base url.\n",
        "source_code_len": 152,
        "target_code": "\n    def request(  # type: ignore[override]\n            self,\n            method: str,\n            url: str,\n            bare: bool = False,\n            **kwargs: Any\n    ) -> Response:\n        \"\"\"Constructs a Request, prepending the base url.\n",
        "target_code_len": 244,
        "diff_format": "@@ -134,3 +134,9 @@\n \n-    def request(self, method: str, url: str, bare: bool = False, **kwargs: Any) -> Response:\n+    def request(  # type: ignore[override]\n+            self,\n+            method: str,\n+            url: str,\n+            bare: bool = False,\n+            **kwargs: Any\n+    ) -> Response:\n         \"\"\"Constructs a Request, prepending the base url.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def request(self, method: str, url: str, bare: bool = False, **kwargs: Any) -> Response:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def request(  # type: ignore[override]\n            self,\n            method: str,\n            url: str,\n            bare: bool = False,\n            **kwargs: Any\n    ) -> Response:\n        <IND>"
      }
    ]
  },
  {
    "project": "Qiskit/qiskit-ibmq-provider",
    "commit": "bdafcc81ca5b088e31ff295c2a49b18128baa0a1",
    "filename": "qiskit/providers/ibmq/api/session.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Qiskit-qiskit-ibmq-provider/qiskit/providers/ibmq/api/session.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "qiskit/providers/ibmq/api/session.py:135:4 Inconsistent override [14]: `qiskit.providers.ibmq.api.session.RetrySession.request` overrides method defined in `requests.sessions.Session` inconsistently. Could not find parameter `cert` in overriding signature.",
    "message": " `qiskit.providers.ibmq.api.session.RetrySession.request` overrides method defined in `requests.sessions.Session` inconsistently. Could not find parameter `cert` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 135,
    "warning_line": "    def request(self, method: str, url: str, bare: bool = False, **kwargs: Any) -> Response:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n    def request(self, method: str, url: str, bare: bool = False, **kwargs: Any) -> Response:\n        \"\"\"Constructs a Request, prepending the base url.\n",
        "source_code_len": 152,
        "target_code": "\n    def request(  # type: ignore[override]\n            self,\n            method: str,\n            url: str,\n            bare: bool = False,\n            **kwargs: Any\n    ) -> Response:\n        \"\"\"Constructs a Request, prepending the base url.\n",
        "target_code_len": 244,
        "diff_format": "@@ -134,3 +134,9 @@\n \n-    def request(self, method: str, url: str, bare: bool = False, **kwargs: Any) -> Response:\n+    def request(  # type: ignore[override]\n+            self,\n+            method: str,\n+            url: str,\n+            bare: bool = False,\n+            **kwargs: Any\n+    ) -> Response:\n         \"\"\"Constructs a Request, prepending the base url.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def request(self, method: str, url: str, bare: bool = False, **kwargs: Any) -> Response:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def request(  # type: ignore[override]\n            self,\n            method: str,\n            url: str,\n            bare: bool = False,\n            **kwargs: Any\n    ) -> Response:\n        <IND>"
      }
    ]
  },
  {
    "project": "Qiskit/qiskit-ibmq-provider",
    "commit": "bdafcc81ca5b088e31ff295c2a49b18128baa0a1",
    "filename": "qiskit/providers/ibmq/api/session.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Qiskit-qiskit-ibmq-provider/qiskit/providers/ibmq/api/session.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "qiskit/providers/ibmq/api/session.py:135:4 Inconsistent override [14]: `qiskit.providers.ibmq.api.session.RetrySession.request` overrides method defined in `requests.sessions.Session` inconsistently. Could not find parameter `cookies` in overriding signature.",
    "message": " `qiskit.providers.ibmq.api.session.RetrySession.request` overrides method defined in `requests.sessions.Session` inconsistently. Could not find parameter `cookies` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 135,
    "warning_line": "    def request(self, method: str, url: str, bare: bool = False, **kwargs: Any) -> Response:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n    def request(self, method: str, url: str, bare: bool = False, **kwargs: Any) -> Response:\n        \"\"\"Constructs a Request, prepending the base url.\n",
        "source_code_len": 152,
        "target_code": "\n    def request(  # type: ignore[override]\n            self,\n            method: str,\n            url: str,\n            bare: bool = False,\n            **kwargs: Any\n    ) -> Response:\n        \"\"\"Constructs a Request, prepending the base url.\n",
        "target_code_len": 244,
        "diff_format": "@@ -134,3 +134,9 @@\n \n-    def request(self, method: str, url: str, bare: bool = False, **kwargs: Any) -> Response:\n+    def request(  # type: ignore[override]\n+            self,\n+            method: str,\n+            url: str,\n+            bare: bool = False,\n+            **kwargs: Any\n+    ) -> Response:\n         \"\"\"Constructs a Request, prepending the base url.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def request(self, method: str, url: str, bare: bool = False, **kwargs: Any) -> Response:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def request(  # type: ignore[override]\n            self,\n            method: str,\n            url: str,\n            bare: bool = False,\n            **kwargs: Any\n    ) -> Response:\n        <IND>"
      }
    ]
  },
  {
    "project": "Qiskit/qiskit-ibmq-provider",
    "commit": "bdafcc81ca5b088e31ff295c2a49b18128baa0a1",
    "filename": "qiskit/providers/ibmq/api/session.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Qiskit-qiskit-ibmq-provider/qiskit/providers/ibmq/api/session.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "qiskit/providers/ibmq/api/session.py:135:4 Inconsistent override [14]: `qiskit.providers.ibmq.api.session.RetrySession.request` overrides method defined in `requests.sessions.Session` inconsistently. Could not find parameter `data` in overriding signature.",
    "message": " `qiskit.providers.ibmq.api.session.RetrySession.request` overrides method defined in `requests.sessions.Session` inconsistently. Could not find parameter `data` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 135,
    "warning_line": "    def request(self, method: str, url: str, bare: bool = False, **kwargs: Any) -> Response:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n    def request(self, method: str, url: str, bare: bool = False, **kwargs: Any) -> Response:\n        \"\"\"Constructs a Request, prepending the base url.\n",
        "source_code_len": 152,
        "target_code": "\n    def request(  # type: ignore[override]\n            self,\n            method: str,\n            url: str,\n            bare: bool = False,\n            **kwargs: Any\n    ) -> Response:\n        \"\"\"Constructs a Request, prepending the base url.\n",
        "target_code_len": 244,
        "diff_format": "@@ -134,3 +134,9 @@\n \n-    def request(self, method: str, url: str, bare: bool = False, **kwargs: Any) -> Response:\n+    def request(  # type: ignore[override]\n+            self,\n+            method: str,\n+            url: str,\n+            bare: bool = False,\n+            **kwargs: Any\n+    ) -> Response:\n         \"\"\"Constructs a Request, prepending the base url.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def request(self, method: str, url: str, bare: bool = False, **kwargs: Any) -> Response:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def request(  # type: ignore[override]\n            self,\n            method: str,\n            url: str,\n            bare: bool = False,\n            **kwargs: Any\n    ) -> Response:\n        <IND>"
      }
    ]
  },
  {
    "project": "Qiskit/qiskit-ibmq-provider",
    "commit": "bdafcc81ca5b088e31ff295c2a49b18128baa0a1",
    "filename": "qiskit/providers/ibmq/api/session.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Qiskit-qiskit-ibmq-provider/qiskit/providers/ibmq/api/session.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "qiskit/providers/ibmq/api/session.py:135:4 Inconsistent override [14]: `qiskit.providers.ibmq.api.session.RetrySession.request` overrides method defined in `requests.sessions.Session` inconsistently. Could not find parameter `files` in overriding signature.",
    "message": " `qiskit.providers.ibmq.api.session.RetrySession.request` overrides method defined in `requests.sessions.Session` inconsistently. Could not find parameter `files` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 135,
    "warning_line": "    def request(self, method: str, url: str, bare: bool = False, **kwargs: Any) -> Response:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n    def request(self, method: str, url: str, bare: bool = False, **kwargs: Any) -> Response:\n        \"\"\"Constructs a Request, prepending the base url.\n",
        "source_code_len": 152,
        "target_code": "\n    def request(  # type: ignore[override]\n            self,\n            method: str,\n            url: str,\n            bare: bool = False,\n            **kwargs: Any\n    ) -> Response:\n        \"\"\"Constructs a Request, prepending the base url.\n",
        "target_code_len": 244,
        "diff_format": "@@ -134,3 +134,9 @@\n \n-    def request(self, method: str, url: str, bare: bool = False, **kwargs: Any) -> Response:\n+    def request(  # type: ignore[override]\n+            self,\n+            method: str,\n+            url: str,\n+            bare: bool = False,\n+            **kwargs: Any\n+    ) -> Response:\n         \"\"\"Constructs a Request, prepending the base url.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def request(self, method: str, url: str, bare: bool = False, **kwargs: Any) -> Response:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def request(  # type: ignore[override]\n            self,\n            method: str,\n            url: str,\n            bare: bool = False,\n            **kwargs: Any\n    ) -> Response:\n        <IND>"
      }
    ]
  },
  {
    "project": "Qiskit/qiskit-ibmq-provider",
    "commit": "bdafcc81ca5b088e31ff295c2a49b18128baa0a1",
    "filename": "qiskit/providers/ibmq/api/session.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Qiskit-qiskit-ibmq-provider/qiskit/providers/ibmq/api/session.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "qiskit/providers/ibmq/api/session.py:135:4 Inconsistent override [14]: `qiskit.providers.ibmq.api.session.RetrySession.request` overrides method defined in `requests.sessions.Session` inconsistently. Could not find parameter `headers` in overriding signature.",
    "message": " `qiskit.providers.ibmq.api.session.RetrySession.request` overrides method defined in `requests.sessions.Session` inconsistently. Could not find parameter `headers` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 135,
    "warning_line": "    def request(self, method: str, url: str, bare: bool = False, **kwargs: Any) -> Response:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n    def request(self, method: str, url: str, bare: bool = False, **kwargs: Any) -> Response:\n        \"\"\"Constructs a Request, prepending the base url.\n",
        "source_code_len": 152,
        "target_code": "\n    def request(  # type: ignore[override]\n            self,\n            method: str,\n            url: str,\n            bare: bool = False,\n            **kwargs: Any\n    ) -> Response:\n        \"\"\"Constructs a Request, prepending the base url.\n",
        "target_code_len": 244,
        "diff_format": "@@ -134,3 +134,9 @@\n \n-    def request(self, method: str, url: str, bare: bool = False, **kwargs: Any) -> Response:\n+    def request(  # type: ignore[override]\n+            self,\n+            method: str,\n+            url: str,\n+            bare: bool = False,\n+            **kwargs: Any\n+    ) -> Response:\n         \"\"\"Constructs a Request, prepending the base url.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def request(self, method: str, url: str, bare: bool = False, **kwargs: Any) -> Response:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def request(  # type: ignore[override]\n            self,\n            method: str,\n            url: str,\n            bare: bool = False,\n            **kwargs: Any\n    ) -> Response:\n        <IND>"
      }
    ]
  },
  {
    "project": "Qiskit/qiskit-ibmq-provider",
    "commit": "bdafcc81ca5b088e31ff295c2a49b18128baa0a1",
    "filename": "qiskit/providers/ibmq/api/session.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Qiskit-qiskit-ibmq-provider/qiskit/providers/ibmq/api/session.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "qiskit/providers/ibmq/api/session.py:135:4 Inconsistent override [14]: `qiskit.providers.ibmq.api.session.RetrySession.request` overrides method defined in `requests.sessions.Session` inconsistently. Could not find parameter `hooks` in overriding signature.",
    "message": " `qiskit.providers.ibmq.api.session.RetrySession.request` overrides method defined in `requests.sessions.Session` inconsistently. Could not find parameter `hooks` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 135,
    "warning_line": "    def request(self, method: str, url: str, bare: bool = False, **kwargs: Any) -> Response:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n    def request(self, method: str, url: str, bare: bool = False, **kwargs: Any) -> Response:\n        \"\"\"Constructs a Request, prepending the base url.\n",
        "source_code_len": 152,
        "target_code": "\n    def request(  # type: ignore[override]\n            self,\n            method: str,\n            url: str,\n            bare: bool = False,\n            **kwargs: Any\n    ) -> Response:\n        \"\"\"Constructs a Request, prepending the base url.\n",
        "target_code_len": 244,
        "diff_format": "@@ -134,3 +134,9 @@\n \n-    def request(self, method: str, url: str, bare: bool = False, **kwargs: Any) -> Response:\n+    def request(  # type: ignore[override]\n+            self,\n+            method: str,\n+            url: str,\n+            bare: bool = False,\n+            **kwargs: Any\n+    ) -> Response:\n         \"\"\"Constructs a Request, prepending the base url.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def request(self, method: str, url: str, bare: bool = False, **kwargs: Any) -> Response:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def request(  # type: ignore[override]\n            self,\n            method: str,\n            url: str,\n            bare: bool = False,\n            **kwargs: Any\n    ) -> Response:\n        <IND>"
      }
    ]
  },
  {
    "project": "Qiskit/qiskit-ibmq-provider",
    "commit": "bdafcc81ca5b088e31ff295c2a49b18128baa0a1",
    "filename": "qiskit/providers/ibmq/api/session.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Qiskit-qiskit-ibmq-provider/qiskit/providers/ibmq/api/session.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "qiskit/providers/ibmq/api/session.py:135:4 Inconsistent override [14]: `qiskit.providers.ibmq.api.session.RetrySession.request` overrides method defined in `requests.sessions.Session` inconsistently. Could not find parameter `json` in overriding signature.",
    "message": " `qiskit.providers.ibmq.api.session.RetrySession.request` overrides method defined in `requests.sessions.Session` inconsistently. Could not find parameter `json` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 135,
    "warning_line": "    def request(self, method: str, url: str, bare: bool = False, **kwargs: Any) -> Response:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n    def request(self, method: str, url: str, bare: bool = False, **kwargs: Any) -> Response:\n        \"\"\"Constructs a Request, prepending the base url.\n",
        "source_code_len": 152,
        "target_code": "\n    def request(  # type: ignore[override]\n            self,\n            method: str,\n            url: str,\n            bare: bool = False,\n            **kwargs: Any\n    ) -> Response:\n        \"\"\"Constructs a Request, prepending the base url.\n",
        "target_code_len": 244,
        "diff_format": "@@ -134,3 +134,9 @@\n \n-    def request(self, method: str, url: str, bare: bool = False, **kwargs: Any) -> Response:\n+    def request(  # type: ignore[override]\n+            self,\n+            method: str,\n+            url: str,\n+            bare: bool = False,\n+            **kwargs: Any\n+    ) -> Response:\n         \"\"\"Constructs a Request, prepending the base url.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def request(self, method: str, url: str, bare: bool = False, **kwargs: Any) -> Response:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def request(  # type: ignore[override]\n            self,\n            method: str,\n            url: str,\n            bare: bool = False,\n            **kwargs: Any\n    ) -> Response:\n        <IND>"
      }
    ]
  },
  {
    "project": "Qiskit/qiskit-ibmq-provider",
    "commit": "bdafcc81ca5b088e31ff295c2a49b18128baa0a1",
    "filename": "qiskit/providers/ibmq/api/session.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Qiskit-qiskit-ibmq-provider/qiskit/providers/ibmq/api/session.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "qiskit/providers/ibmq/api/session.py:135:4 Inconsistent override [14]: `qiskit.providers.ibmq.api.session.RetrySession.request` overrides method defined in `requests.sessions.Session` inconsistently. Could not find parameter `params` in overriding signature.",
    "message": " `qiskit.providers.ibmq.api.session.RetrySession.request` overrides method defined in `requests.sessions.Session` inconsistently. Could not find parameter `params` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 135,
    "warning_line": "    def request(self, method: str, url: str, bare: bool = False, **kwargs: Any) -> Response:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n    def request(self, method: str, url: str, bare: bool = False, **kwargs: Any) -> Response:\n        \"\"\"Constructs a Request, prepending the base url.\n",
        "source_code_len": 152,
        "target_code": "\n    def request(  # type: ignore[override]\n            self,\n            method: str,\n            url: str,\n            bare: bool = False,\n            **kwargs: Any\n    ) -> Response:\n        \"\"\"Constructs a Request, prepending the base url.\n",
        "target_code_len": 244,
        "diff_format": "@@ -134,3 +134,9 @@\n \n-    def request(self, method: str, url: str, bare: bool = False, **kwargs: Any) -> Response:\n+    def request(  # type: ignore[override]\n+            self,\n+            method: str,\n+            url: str,\n+            bare: bool = False,\n+            **kwargs: Any\n+    ) -> Response:\n         \"\"\"Constructs a Request, prepending the base url.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def request(self, method: str, url: str, bare: bool = False, **kwargs: Any) -> Response:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def request(  # type: ignore[override]\n            self,\n            method: str,\n            url: str,\n            bare: bool = False,\n            **kwargs: Any\n    ) -> Response:\n        <IND>"
      }
    ]
  },
  {
    "project": "Qiskit/qiskit-ibmq-provider",
    "commit": "bdafcc81ca5b088e31ff295c2a49b18128baa0a1",
    "filename": "qiskit/providers/ibmq/api/session.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Qiskit-qiskit-ibmq-provider/qiskit/providers/ibmq/api/session.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "qiskit/providers/ibmq/api/session.py:135:4 Inconsistent override [14]: `qiskit.providers.ibmq.api.session.RetrySession.request` overrides method defined in `requests.sessions.Session` inconsistently. Could not find parameter `proxies` in overriding signature.",
    "message": " `qiskit.providers.ibmq.api.session.RetrySession.request` overrides method defined in `requests.sessions.Session` inconsistently. Could not find parameter `proxies` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 135,
    "warning_line": "    def request(self, method: str, url: str, bare: bool = False, **kwargs: Any) -> Response:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n    def request(self, method: str, url: str, bare: bool = False, **kwargs: Any) -> Response:\n        \"\"\"Constructs a Request, prepending the base url.\n",
        "source_code_len": 152,
        "target_code": "\n    def request(  # type: ignore[override]\n            self,\n            method: str,\n            url: str,\n            bare: bool = False,\n            **kwargs: Any\n    ) -> Response:\n        \"\"\"Constructs a Request, prepending the base url.\n",
        "target_code_len": 244,
        "diff_format": "@@ -134,3 +134,9 @@\n \n-    def request(self, method: str, url: str, bare: bool = False, **kwargs: Any) -> Response:\n+    def request(  # type: ignore[override]\n+            self,\n+            method: str,\n+            url: str,\n+            bare: bool = False,\n+            **kwargs: Any\n+    ) -> Response:\n         \"\"\"Constructs a Request, prepending the base url.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def request(self, method: str, url: str, bare: bool = False, **kwargs: Any) -> Response:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def request(  # type: ignore[override]\n            self,\n            method: str,\n            url: str,\n            bare: bool = False,\n            **kwargs: Any\n    ) -> Response:\n        <IND>"
      }
    ]
  },
  {
    "project": "Qiskit/qiskit-ibmq-provider",
    "commit": "bdafcc81ca5b088e31ff295c2a49b18128baa0a1",
    "filename": "qiskit/providers/ibmq/api/session.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Qiskit-qiskit-ibmq-provider/qiskit/providers/ibmq/api/session.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "qiskit/providers/ibmq/api/session.py:135:4 Inconsistent override [14]: `qiskit.providers.ibmq.api.session.RetrySession.request` overrides method defined in `requests.sessions.Session` inconsistently. Could not find parameter `stream` in overriding signature.",
    "message": " `qiskit.providers.ibmq.api.session.RetrySession.request` overrides method defined in `requests.sessions.Session` inconsistently. Could not find parameter `stream` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 135,
    "warning_line": "    def request(self, method: str, url: str, bare: bool = False, **kwargs: Any) -> Response:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n    def request(self, method: str, url: str, bare: bool = False, **kwargs: Any) -> Response:\n        \"\"\"Constructs a Request, prepending the base url.\n",
        "source_code_len": 152,
        "target_code": "\n    def request(  # type: ignore[override]\n            self,\n            method: str,\n            url: str,\n            bare: bool = False,\n            **kwargs: Any\n    ) -> Response:\n        \"\"\"Constructs a Request, prepending the base url.\n",
        "target_code_len": 244,
        "diff_format": "@@ -134,3 +134,9 @@\n \n-    def request(self, method: str, url: str, bare: bool = False, **kwargs: Any) -> Response:\n+    def request(  # type: ignore[override]\n+            self,\n+            method: str,\n+            url: str,\n+            bare: bool = False,\n+            **kwargs: Any\n+    ) -> Response:\n         \"\"\"Constructs a Request, prepending the base url.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def request(self, method: str, url: str, bare: bool = False, **kwargs: Any) -> Response:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def request(  # type: ignore[override]\n            self,\n            method: str,\n            url: str,\n            bare: bool = False,\n            **kwargs: Any\n    ) -> Response:\n        <IND>"
      }
    ]
  },
  {
    "project": "Qiskit/qiskit-ibmq-provider",
    "commit": "bdafcc81ca5b088e31ff295c2a49b18128baa0a1",
    "filename": "qiskit/providers/ibmq/api/session.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Qiskit-qiskit-ibmq-provider/qiskit/providers/ibmq/api/session.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "qiskit/providers/ibmq/api/session.py:135:4 Inconsistent override [14]: `qiskit.providers.ibmq.api.session.RetrySession.request` overrides method defined in `requests.sessions.Session` inconsistently. Could not find parameter `timeout` in overriding signature.",
    "message": " `qiskit.providers.ibmq.api.session.RetrySession.request` overrides method defined in `requests.sessions.Session` inconsistently. Could not find parameter `timeout` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 135,
    "warning_line": "    def request(self, method: str, url: str, bare: bool = False, **kwargs: Any) -> Response:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n    def request(self, method: str, url: str, bare: bool = False, **kwargs: Any) -> Response:\n        \"\"\"Constructs a Request, prepending the base url.\n",
        "source_code_len": 152,
        "target_code": "\n    def request(  # type: ignore[override]\n            self,\n            method: str,\n            url: str,\n            bare: bool = False,\n            **kwargs: Any\n    ) -> Response:\n        \"\"\"Constructs a Request, prepending the base url.\n",
        "target_code_len": 244,
        "diff_format": "@@ -134,3 +134,9 @@\n \n-    def request(self, method: str, url: str, bare: bool = False, **kwargs: Any) -> Response:\n+    def request(  # type: ignore[override]\n+            self,\n+            method: str,\n+            url: str,\n+            bare: bool = False,\n+            **kwargs: Any\n+    ) -> Response:\n         \"\"\"Constructs a Request, prepending the base url.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def request(self, method: str, url: str, bare: bool = False, **kwargs: Any) -> Response:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def request(  # type: ignore[override]\n            self,\n            method: str,\n            url: str,\n            bare: bool = False,\n            **kwargs: Any\n    ) -> Response:\n        <IND>"
      }
    ]
  },
  {
    "project": "Qiskit/qiskit-ibmq-provider",
    "commit": "bdafcc81ca5b088e31ff295c2a49b18128baa0a1",
    "filename": "qiskit/providers/ibmq/api/session.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Qiskit-qiskit-ibmq-provider/qiskit/providers/ibmq/api/session.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "qiskit/providers/ibmq/api/session.py:135:4 Inconsistent override [14]: `qiskit.providers.ibmq.api.session.RetrySession.request` overrides method defined in `requests.sessions.Session` inconsistently. Could not find parameter `verify` in overriding signature.",
    "message": " `qiskit.providers.ibmq.api.session.RetrySession.request` overrides method defined in `requests.sessions.Session` inconsistently. Could not find parameter `verify` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 135,
    "warning_line": "    def request(self, method: str, url: str, bare: bool = False, **kwargs: Any) -> Response:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n    def request(self, method: str, url: str, bare: bool = False, **kwargs: Any) -> Response:\n        \"\"\"Constructs a Request, prepending the base url.\n",
        "source_code_len": 152,
        "target_code": "\n    def request(  # type: ignore[override]\n            self,\n            method: str,\n            url: str,\n            bare: bool = False,\n            **kwargs: Any\n    ) -> Response:\n        \"\"\"Constructs a Request, prepending the base url.\n",
        "target_code_len": 244,
        "diff_format": "@@ -134,3 +134,9 @@\n \n-    def request(self, method: str, url: str, bare: bool = False, **kwargs: Any) -> Response:\n+    def request(  # type: ignore[override]\n+            self,\n+            method: str,\n+            url: str,\n+            bare: bool = False,\n+            **kwargs: Any\n+    ) -> Response:\n         \"\"\"Constructs a Request, prepending the base url.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def request(self, method: str, url: str, bare: bool = False, **kwargs: Any) -> Response:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def request(  # type: ignore[override]\n            self,\n            method: str,\n            url: str,\n            bare: bool = False,\n            **kwargs: Any\n    ) -> Response:\n        <IND>"
      }
    ]
  },
  {
    "project": "Qiskit/qiskit-ibmq-provider",
    "commit": "bdafcc81ca5b088e31ff295c2a49b18128baa0a1",
    "filename": "qiskit/providers/ibmq/credentials/configrc.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Qiskit-qiskit-ibmq-provider/qiskit/providers/ibmq/credentials/configrc.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "qiskit/providers/ibmq/credentials/configrc.py:69:43 Incompatible parameter type [6]: Expected `str` for 2nd positional only parameter to call `dict.__setitem__` but got `bool`.",
    "message": " Expected `str` for 2nd positional only parameter to call `dict.__setitem__` but got `bool`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 69,
    "warning_line": "            single_credentials['verify'] = bool(single_credentials['verify'])",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        if 'verify' in single_credentials.keys():\n            single_credentials['verify'] = bool(single_credentials['verify'])\n        new_credentials = Credentials(**single_credentials)\n        credentials_dict[new_credentials.unique_id()] = new_credentials\n",
        "source_code_len": 260,
        "target_code": "        if 'verify' in single_credentials.keys():\n            single_credentials['verify'] = bool(  # type: ignore[assignment]\n                single_credentials['verify'])\n        new_credentials = Credentials(**single_credentials)  # type: ignore[arg-type]\n        credentials_dict[new_credentials.unique_id()] = new_credentials\n",
        "target_code_len": 331,
        "diff_format": "@@ -68,4 +68,5 @@\n         if 'verify' in single_credentials.keys():\n-            single_credentials['verify'] = bool(single_credentials['verify'])\n-        new_credentials = Credentials(**single_credentials)\n+            single_credentials['verify'] = bool(  # type: ignore[assignment]\n+                single_credentials['verify'])\n+        new_credentials = Credentials(**single_credentials)  # type: ignore[arg-type]\n         credentials_dict[new_credentials.unique_id()] = new_credentials\n",
        "source_code_with_indent": "        <DED>if 'verify' in single_credentials.keys():\n            <IND>single_credentials['verify'] = bool(single_credentials['verify'])\n        <DED>new_credentials = Credentials(**single_credentials)\n        credentials_dict[new_credentials.unique_id()] = new_credentials\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>if 'verify' in single_credentials.keys():\n            <IND>single_credentials['verify'] = bool(  # type: ignore[assignment]\n                single_credentials['verify'])\n        <DED>new_credentials = Credentials(**single_credentials)  # type: ignore[arg-type]\n        credentials_dict[new_credentials.unique_id()] = new_credentials\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Qiskit/qiskit-ibmq-provider",
    "commit": "bdafcc81ca5b088e31ff295c2a49b18128baa0a1",
    "filename": "qiskit/providers/ibmq/credentials/configrc.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Qiskit-qiskit-ibmq-provider/qiskit/providers/ibmq/credentials/configrc.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "qiskit/providers/ibmq/credentials/configrc.py:70:40 Incompatible parameter type [6]: Expected `Optional[Dict[typing.Any, typing.Any]]` for 1st positional only parameter to call `Credentials.__init__` but got `str`.",
    "message": " Expected `Optional[Dict[typing.Any, typing.Any]]` for 1st positional only parameter to call `Credentials.__init__` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 70,
    "warning_line": "        new_credentials = Credentials(**single_credentials)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        if 'verify' in single_credentials.keys():\n            single_credentials['verify'] = bool(single_credentials['verify'])\n        new_credentials = Credentials(**single_credentials)\n        credentials_dict[new_credentials.unique_id()] = new_credentials\n",
        "source_code_len": 260,
        "target_code": "        if 'verify' in single_credentials.keys():\n            single_credentials['verify'] = bool(  # type: ignore[assignment]\n                single_credentials['verify'])\n        new_credentials = Credentials(**single_credentials)  # type: ignore[arg-type]\n        credentials_dict[new_credentials.unique_id()] = new_credentials\n",
        "target_code_len": 331,
        "diff_format": "@@ -68,4 +68,5 @@\n         if 'verify' in single_credentials.keys():\n-            single_credentials['verify'] = bool(single_credentials['verify'])\n-        new_credentials = Credentials(**single_credentials)\n+            single_credentials['verify'] = bool(  # type: ignore[assignment]\n+                single_credentials['verify'])\n+        new_credentials = Credentials(**single_credentials)  # type: ignore[arg-type]\n         credentials_dict[new_credentials.unique_id()] = new_credentials\n",
        "source_code_with_indent": "        <DED>if 'verify' in single_credentials.keys():\n            <IND>single_credentials['verify'] = bool(single_credentials['verify'])\n        <DED>new_credentials = Credentials(**single_credentials)\n        credentials_dict[new_credentials.unique_id()] = new_credentials\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>if 'verify' in single_credentials.keys():\n            <IND>single_credentials['verify'] = bool(  # type: ignore[assignment]\n                single_credentials['verify'])\n        <DED>new_credentials = Credentials(**single_credentials)  # type: ignore[arg-type]\n        credentials_dict[new_credentials.unique_id()] = new_credentials\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Qiskit/qiskit-ibmq-provider",
    "commit": "bdafcc81ca5b088e31ff295c2a49b18128baa0a1",
    "filename": "qiskit/providers/ibmq/credentials/configrc.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Qiskit-qiskit-ibmq-provider/qiskit/providers/ibmq/credentials/configrc.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "qiskit/providers/ibmq/credentials/configrc.py:70:40 Incompatible parameter type [6]: Expected `bool` for 1st positional only parameter to call `Credentials.__init__` but got `str`.",
    "message": " Expected `bool` for 1st positional only parameter to call `Credentials.__init__` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 70,
    "warning_line": "        new_credentials = Credentials(**single_credentials)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        if 'verify' in single_credentials.keys():\n            single_credentials['verify'] = bool(single_credentials['verify'])\n        new_credentials = Credentials(**single_credentials)\n        credentials_dict[new_credentials.unique_id()] = new_credentials\n",
        "source_code_len": 260,
        "target_code": "        if 'verify' in single_credentials.keys():\n            single_credentials['verify'] = bool(  # type: ignore[assignment]\n                single_credentials['verify'])\n        new_credentials = Credentials(**single_credentials)  # type: ignore[arg-type]\n        credentials_dict[new_credentials.unique_id()] = new_credentials\n",
        "target_code_len": 331,
        "diff_format": "@@ -68,4 +68,5 @@\n         if 'verify' in single_credentials.keys():\n-            single_credentials['verify'] = bool(single_credentials['verify'])\n-        new_credentials = Credentials(**single_credentials)\n+            single_credentials['verify'] = bool(  # type: ignore[assignment]\n+                single_credentials['verify'])\n+        new_credentials = Credentials(**single_credentials)  # type: ignore[arg-type]\n         credentials_dict[new_credentials.unique_id()] = new_credentials\n",
        "source_code_with_indent": "        <DED>if 'verify' in single_credentials.keys():\n            <IND>single_credentials['verify'] = bool(single_credentials['verify'])\n        <DED>new_credentials = Credentials(**single_credentials)\n        credentials_dict[new_credentials.unique_id()] = new_credentials\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>if 'verify' in single_credentials.keys():\n            <IND>single_credentials['verify'] = bool(  # type: ignore[assignment]\n                single_credentials['verify'])\n        <DED>new_credentials = Credentials(**single_credentials)  # type: ignore[arg-type]\n        credentials_dict[new_credentials.unique_id()] = new_credentials\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]