[
  {
    "project": "dbt-labs/dbt-core",
    "commit": "1d298ea5cfe63e56335b3bc0f401ce17c5f5f36f",
    "filename": "core/dbt/graph/selector.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/dbt-labs-dbt-core/core/dbt/graph/selector.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "core/dbt/graph/selector.py:341:32 Incompatible variable type [9]: max_depth is declared to have type `int` but is used as type `None`.",
    "message": " max_depth is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 341,
    "warning_line": "    def descendants(self, node, max_depth: int = None):",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def descendants(self, node, max_depth: int = None):\n        \"\"\"Returns all nodes reachable from `node` in `graph`\"\"\"\n        if not self.graph.has_node(node):\n            raise nx.NetworkXError(f\"The node {node} is not in the graph.\")\n        des = nx.single_source_shortest_path_length(G=self.graph,\n",
        "source_code_len": 306,
        "target_code": "\n    def descendants(self, node, max_depth: Optional[int] = None) -> Set[str]:\n        \"\"\"Returns all nodes reachable from `node` in `graph`\"\"\"\n        if not self.graph.has_node(node):\n            raise InternalException(f'Node {node} not found in the graph!')\n        des = nx.single_source_shortest_path_length(G=self.graph,\n",
        "target_code_len": 328,
        "diff_format": "@@ -340,6 +340,6 @@\n \n-    def descendants(self, node, max_depth: int = None):\n+    def descendants(self, node, max_depth: Optional[int] = None) -> Set[str]:\n         \"\"\"Returns all nodes reachable from `node` in `graph`\"\"\"\n         if not self.graph.has_node(node):\n-            raise nx.NetworkXError(f\"The node {node} is not in the graph.\")\n+            raise InternalException(f'Node {node} not found in the graph!')\n         des = nx.single_source_shortest_path_length(G=self.graph,\n",
        "source_code_with_indent": "\n    <DED>def descendants(self, node, max_depth: int = None):\n        <IND>\"\"\"Returns all nodes reachable from `node` in `graph`\"\"\"\n        if not self.graph.has_node(node):\n            <IND>raise nx.NetworkXError(f\"The node {node} is not in the graph.\")\n        <DED>des = nx.single_source_shortest_path_length(G=self.graph,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def descendants(self, node, max_depth: Optional[int] = None) -> Set[str]:\n        <IND>\"\"\"Returns all nodes reachable from `node` in `graph`\"\"\"\n        if not self.graph.has_node(node):\n            <IND>raise InternalException(f'Node {node} not found in the graph!')\n        <DED>des = nx.single_source_shortest_path_length(G=self.graph,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "dbt-labs/dbt-core",
    "commit": "1d298ea5cfe63e56335b3bc0f401ce17c5f5f36f",
    "filename": "core/dbt/graph/selector.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/dbt-labs-dbt-core/core/dbt/graph/selector.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "core/dbt/graph/selector.py:351:30 Incompatible variable type [9]: max_depth is declared to have type `int` but is used as type `None`.",
    "message": " max_depth is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 351,
    "warning_line": "    def ancestors(self, node, max_depth: int = None):",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def ancestors(self, node, max_depth: int = None):\n        \"\"\"Returns all nodes having a path to `node` in `graph`\"\"\"\n        if not self.graph.has_node(node):\n            raise nx.NetworkXError(f\"The node {node} is not in the graph.\")\n        with nx.utils.reversed(self.graph):\n",
        "source_code_len": 284,
        "target_code": "\n    def ancestors(self, node, max_depth: Optional[int] = None) -> Set[str]:\n        \"\"\"Returns all nodes having a path to `node` in `graph`\"\"\"\n        if not self.graph.has_node(node):\n            raise InternalException(f'Node {node} not found in the graph!')\n        with nx.utils.reversed(self.graph):\n",
        "target_code_len": 306,
        "diff_format": "@@ -350,6 +350,6 @@\n \n-    def ancestors(self, node, max_depth: int = None):\n+    def ancestors(self, node, max_depth: Optional[int] = None) -> Set[str]:\n         \"\"\"Returns all nodes having a path to `node` in `graph`\"\"\"\n         if not self.graph.has_node(node):\n-            raise nx.NetworkXError(f\"The node {node} is not in the graph.\")\n+            raise InternalException(f'Node {node} not found in the graph!')\n         with nx.utils.reversed(self.graph):\n",
        "source_code_with_indent": "\n    <DED>def ancestors(self, node, max_depth: int = None):\n        <IND>\"\"\"Returns all nodes having a path to `node` in `graph`\"\"\"\n        if not self.graph.has_node(node):\n            <IND>raise nx.NetworkXError(f\"The node {node} is not in the graph.\")\n        <DED>with nx.utils.reversed(self.graph):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def ancestors(self, node, max_depth: Optional[int] = None) -> Set[str]:\n        <IND>\"\"\"Returns all nodes having a path to `node` in `graph`\"\"\"\n        if not self.graph.has_node(node):\n            <IND>raise InternalException(f'Node {node} not found in the graph!')\n        <DED>with nx.utils.reversed(self.graph):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "dbt-labs/dbt-core",
    "commit": "1d298ea5cfe63e56335b3bc0f401ce17c5f5f36f",
    "filename": "core/dbt/graph/selector.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/dbt-labs-dbt-core/core/dbt/graph/selector.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "core/dbt/graph/selector.py:364:24 Incompatible variable type [9]: max_depth is declared to have type `int` but is used as type `None`.",
    "message": " max_depth is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 364,
    "warning_line": "                        max_depth: int = None) -> Set[str]:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def descendants(self, node, max_depth: int = None):\n        \"\"\"Returns all nodes reachable from `node` in `graph`\"\"\"\n        if not self.graph.has_node(node):\n            raise nx.NetworkXError(f\"The node {node} is not in the graph.\")\n        des = nx.single_source_shortest_path_length(G=self.graph,\n",
        "source_code_len": 306,
        "target_code": "\n    def descendants(self, node, max_depth: Optional[int] = None) -> Set[str]:\n        \"\"\"Returns all nodes reachable from `node` in `graph`\"\"\"\n        if not self.graph.has_node(node):\n            raise InternalException(f'Node {node} not found in the graph!')\n        des = nx.single_source_shortest_path_length(G=self.graph,\n",
        "target_code_len": 328,
        "diff_format": "@@ -340,6 +340,6 @@\n \n-    def descendants(self, node, max_depth: int = None):\n+    def descendants(self, node, max_depth: Optional[int] = None) -> Set[str]:\n         \"\"\"Returns all nodes reachable from `node` in `graph`\"\"\"\n         if not self.graph.has_node(node):\n-            raise nx.NetworkXError(f\"The node {node} is not in the graph.\")\n+            raise InternalException(f'Node {node} not found in the graph!')\n         des = nx.single_source_shortest_path_length(G=self.graph,\n",
        "source_code_with_indent": "\n    <DED>def descendants(self, node, max_depth: int = None):\n        <IND>\"\"\"Returns all nodes reachable from `node` in `graph`\"\"\"\n        if not self.graph.has_node(node):\n            <IND>raise nx.NetworkXError(f\"The node {node} is not in the graph.\")\n        <DED>des = nx.single_source_shortest_path_length(G=self.graph,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def descendants(self, node, max_depth: Optional[int] = None) -> Set[str]:\n        <IND>\"\"\"Returns all nodes reachable from `node` in `graph`\"\"\"\n        if not self.graph.has_node(node):\n            <IND>raise InternalException(f'Node {node} not found in the graph!')\n        <DED>des = nx.single_source_shortest_path_length(G=self.graph,\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                        selected: Set[str],\n                        max_depth: int = None) -> Set[str]:\n        descendants: Set[str] = set()\n",
        "source_code_len": 142,
        "target_code": "                        selected: Set[str],\n                        max_depth: Optional[int] = None) -> Set[str]:\n        descendants: Set[str] = set()\n",
        "target_code_len": 152,
        "diff_format": "@@ -363,3 +363,3 @@\n                         selected: Set[str],\n-                        max_depth: int = None) -> Set[str]:\n+                        max_depth: Optional[int] = None) -> Set[str]:\n         descendants: Set[str] = set()\n",
        "source_code_with_indent": "                        selected: Set[str],\n                        max_depth: int = None) -> Set[str]:\n        <IND>descendants: Set[str] = set()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                        selected: Set[str],\n                        max_depth: Optional[int] = None) -> Set[str]:\n        <IND>descendants: Set[str] = set()\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "dbt-labs/dbt-core",
    "commit": "1d298ea5cfe63e56335b3bc0f401ce17c5f5f36f",
    "filename": "core/dbt/graph/selector.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/dbt-labs-dbt-core/core/dbt/graph/selector.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "core/dbt/graph/selector.py:372:23 Incompatible variable type [9]: max_depth is declared to have type `int` but is used as type `None`.",
    "message": " max_depth is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 372,
    "warning_line": "                       max_depth: int = None) -> Set[str]:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def ancestors(self, node, max_depth: int = None):\n        \"\"\"Returns all nodes having a path to `node` in `graph`\"\"\"\n        if not self.graph.has_node(node):\n            raise nx.NetworkXError(f\"The node {node} is not in the graph.\")\n        with nx.utils.reversed(self.graph):\n",
        "source_code_len": 284,
        "target_code": "\n    def ancestors(self, node, max_depth: Optional[int] = None) -> Set[str]:\n        \"\"\"Returns all nodes having a path to `node` in `graph`\"\"\"\n        if not self.graph.has_node(node):\n            raise InternalException(f'Node {node} not found in the graph!')\n        with nx.utils.reversed(self.graph):\n",
        "target_code_len": 306,
        "diff_format": "@@ -350,6 +350,6 @@\n \n-    def ancestors(self, node, max_depth: int = None):\n+    def ancestors(self, node, max_depth: Optional[int] = None) -> Set[str]:\n         \"\"\"Returns all nodes having a path to `node` in `graph`\"\"\"\n         if not self.graph.has_node(node):\n-            raise nx.NetworkXError(f\"The node {node} is not in the graph.\")\n+            raise InternalException(f'Node {node} not found in the graph!')\n         with nx.utils.reversed(self.graph):\n",
        "source_code_with_indent": "\n    <DED>def ancestors(self, node, max_depth: int = None):\n        <IND>\"\"\"Returns all nodes having a path to `node` in `graph`\"\"\"\n        if not self.graph.has_node(node):\n            <IND>raise nx.NetworkXError(f\"The node {node} is not in the graph.\")\n        <DED>with nx.utils.reversed(self.graph):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def ancestors(self, node, max_depth: Optional[int] = None) -> Set[str]:\n        <IND>\"\"\"Returns all nodes having a path to `node` in `graph`\"\"\"\n        if not self.graph.has_node(node):\n            <IND>raise InternalException(f'Node {node} not found in the graph!')\n        <DED>with nx.utils.reversed(self.graph):\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                       selected: Set[str],\n                       max_depth: int = None) -> Set[str]:\n        ancestors: Set[str] = set()\n",
        "source_code_len": 138,
        "target_code": "                       selected: Set[str],\n                       max_depth: Optional[int] = None) -> Set[str]:\n        ancestors: Set[str] = set()\n",
        "target_code_len": 148,
        "diff_format": "@@ -371,3 +371,3 @@\n                        selected: Set[str],\n-                       max_depth: int = None) -> Set[str]:\n+                       max_depth: Optional[int] = None) -> Set[str]:\n         ancestors: Set[str] = set()\n",
        "source_code_with_indent": "                       selected: Set[str],\n                       max_depth: int = None) -> Set[str]:\n        <IND>ancestors: Set[str] = set()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                       selected: Set[str],\n                       max_depth: Optional[int] = None) -> Set[str]:\n        <IND>ancestors: Set[str] = set()\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]