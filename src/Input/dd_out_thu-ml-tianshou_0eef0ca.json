[
  {
    "project": "thu-ml/tianshou",
    "commit": "0eef0ca1985b4659e7e57aadaa7902613ff35001",
    "filename": "tianshou/data/buffer.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/thu-ml-tianshou/tianshou/data/buffer.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tianshou/data/buffer.py:393:11 Unsupported operand [58]: `>` is not supported for operand types `Optional[int]` and `int`.",
    "message": " `>` is not supported for operand types `Optional[int]` and `int`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 393,
    "warning_line": "        if batch_size > 0 and batch_size <= self._size:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def sample(self, batch_size: Optional[int] = 0,\n               importance_sample: Optional[bool] = True\n               ) -> Tuple[Batch, np.ndarray]:\n",
        "source_code_len": 155,
        "target_code": "\n    def sample(self, batch_size: int,\n               importance_sample: bool = True\n               ) -> Tuple[Batch, np.ndarray]:\n",
        "target_code_len": 131,
        "diff_format": "@@ -384,4 +384,4 @@\n \n-    def sample(self, batch_size: Optional[int] = 0,\n-               importance_sample: Optional[bool] = True\n+    def sample(self, batch_size: int,\n+               importance_sample: bool = True\n                ) -> Tuple[Batch, np.ndarray]:\n",
        "source_code_with_indent": "\n    <DED>def sample(self, batch_size: Optional[int] = 0,\n               importance_sample: Optional[bool] = True\n               ) -> Tuple[Batch, np.ndarray]:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def sample(self, batch_size: int,\n               importance_sample: bool = True\n               ) -> Tuple[Batch, np.ndarray]:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "thu-ml/tianshou",
    "commit": "0eef0ca1985b4659e7e57aadaa7902613ff35001",
    "filename": "tianshou/exploration/random.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/thu-ml-tianshou/tianshou/exploration/random.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tianshou/exploration/random.py:27:21 Unsupported operand [58]: `*` is not supported for operand types `Optional[float]` and `Optional[float]`.",
    "message": " `*` is not supported for operand types `Optional[float]` and `Optional[float]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 27,
    "warning_line": "        self.alpha = theta * dt",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def __init__(self,\n                 sigma: Optional[float] = 0.3,\n                 theta: Optional[float] = 0.15,\n                 dt: Optional[float] = 1e-2,\n                 x0: Optional[Union[float, np.ndarray]] = None\n",
        "source_code_len": 226,
        "target_code": "    def __init__(self,\n                 sigma: float = 0.3,\n                 theta: float = 0.15,\n                 dt: float = 1e-2,\n                 x0: Optional[Union[float, np.ndarray]] = None\n",
        "target_code_len": 196,
        "diff_format": "@@ -21,5 +21,5 @@\n     def __init__(self,\n-                 sigma: Optional[float] = 0.3,\n-                 theta: Optional[float] = 0.15,\n-                 dt: Optional[float] = 1e-2,\n+                 sigma: float = 0.3,\n+                 theta: float = 0.15,\n+                 dt: float = 1e-2,\n                  x0: Optional[Union[float, np.ndarray]] = None\n",
        "source_code_with_indent": "    def __init__(self,\n                 sigma: Optional[float] = 0.3,\n                 theta: Optional[float] = 0.15,\n                 dt: Optional[float] = 1e-2,\n                 x0: Optional[Union[float, np.ndarray]] = None\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def __init__(self,\n                 sigma: float = 0.3,\n                 theta: float = 0.15,\n                 dt: float = 1e-2,\n                 x0: Optional[Union[float, np.ndarray]] = None\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "thu-ml/tianshou",
    "commit": "0eef0ca1985b4659e7e57aadaa7902613ff35001",
    "filename": "tianshou/exploration/random.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/thu-ml-tianshou/tianshou/exploration/random.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tianshou/exploration/random.py:28:20 Unsupported operand [58]: `*` is not supported for operand types `Optional[float]` and `typing.Any`.",
    "message": " `*` is not supported for operand types `Optional[float]` and `typing.Any`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 28,
    "warning_line": "        self.beta = sigma * np.sqrt(dt)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def __init__(self,\n                 sigma: Optional[float] = 0.3,\n                 theta: Optional[float] = 0.15,\n                 dt: Optional[float] = 1e-2,\n                 x0: Optional[Union[float, np.ndarray]] = None\n",
        "source_code_len": 226,
        "target_code": "    def __init__(self,\n                 sigma: float = 0.3,\n                 theta: float = 0.15,\n                 dt: float = 1e-2,\n                 x0: Optional[Union[float, np.ndarray]] = None\n",
        "target_code_len": 196,
        "diff_format": "@@ -21,5 +21,5 @@\n     def __init__(self,\n-                 sigma: Optional[float] = 0.3,\n-                 theta: Optional[float] = 0.15,\n-                 dt: Optional[float] = 1e-2,\n+                 sigma: float = 0.3,\n+                 theta: float = 0.15,\n+                 dt: float = 1e-2,\n                  x0: Optional[Union[float, np.ndarray]] = None\n",
        "source_code_with_indent": "    def __init__(self,\n                 sigma: Optional[float] = 0.3,\n                 theta: Optional[float] = 0.15,\n                 dt: Optional[float] = 1e-2,\n                 x0: Optional[Union[float, np.ndarray]] = None\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def __init__(self,\n                 sigma: float = 0.3,\n                 theta: float = 0.15,\n                 dt: float = 1e-2,\n                 x0: Optional[Union[float, np.ndarray]] = None\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "thu-ml/tianshou",
    "commit": "0eef0ca1985b4659e7e57aadaa7902613ff35001",
    "filename": "tianshou/policy/base.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/thu-ml-tianshou/tianshou/policy/base.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tianshou/policy/base.py:124:32 Unsupported operand [58]: `*` is not supported for operand types `float` and `Optional[float]`.",
    "message": " `*` is not supported for operand types `float` and `Optional[float]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 124,
    "warning_line": "        m = (1. - batch.done) * gamma",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            v_s_: Optional[Union[np.ndarray, torch.Tensor]] = None,\n            gamma: Optional[float] = 0.99,\n            gae_lambda: Optional[float] = 0.95) -> Batch:\n        \"\"\"Compute returns over given full-length episodes, including the\n",
        "source_code_len": 243,
        "target_code": "            v_s_: Optional[Union[np.ndarray, torch.Tensor]] = None,\n            gamma: float = 0.99,\n            gae_lambda: float = 0.95) -> Batch:\n        \"\"\"Compute returns over given full-length episodes, including the\n",
        "target_code_len": 223,
        "diff_format": "@@ -101,4 +101,4 @@\n             v_s_: Optional[Union[np.ndarray, torch.Tensor]] = None,\n-            gamma: Optional[float] = 0.99,\n-            gae_lambda: Optional[float] = 0.95) -> Batch:\n+            gamma: float = 0.99,\n+            gae_lambda: float = 0.95) -> Batch:\n         \"\"\"Compute returns over given full-length episodes, including the\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "            v_s_: Optional[Union[np.ndarray, torch.Tensor]] = None,\n            gamma: Optional[float] = 0.99,\n            gae_lambda: Optional[float] = 0.95) -> Batch:\n        <IND>",
        "target_code_with_indent": "            v_s_: Optional[Union[np.ndarray, torch.Tensor]] = None,\n            gamma: float = 0.99,\n            gae_lambda: float = 0.95) -> Batch:\n        <IND>"
      }
    ]
  },
  {
    "project": "thu-ml/tianshou",
    "commit": "0eef0ca1985b4659e7e57aadaa7902613ff35001",
    "filename": "tianshou/policy/base.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/thu-ml-tianshou/tianshou/policy/base.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tianshou/policy/base.py:126:13 Unsupported operand [58]: `*` is not supported for operand types `float` and `Optional[float]`.",
    "message": " `*` is not supported for operand types `float` and `Optional[float]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 126,
    "warning_line": "        m *= gae_lambda",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            v_s_: Optional[Union[np.ndarray, torch.Tensor]] = None,\n            gamma: Optional[float] = 0.99,\n            gae_lambda: Optional[float] = 0.95) -> Batch:\n        \"\"\"Compute returns over given full-length episodes, including the\n",
        "source_code_len": 243,
        "target_code": "            v_s_: Optional[Union[np.ndarray, torch.Tensor]] = None,\n            gamma: float = 0.99,\n            gae_lambda: float = 0.95) -> Batch:\n        \"\"\"Compute returns over given full-length episodes, including the\n",
        "target_code_len": 223,
        "diff_format": "@@ -101,4 +101,4 @@\n             v_s_: Optional[Union[np.ndarray, torch.Tensor]] = None,\n-            gamma: Optional[float] = 0.99,\n-            gae_lambda: Optional[float] = 0.95) -> Batch:\n+            gamma: float = 0.99,\n+            gae_lambda: float = 0.95) -> Batch:\n         \"\"\"Compute returns over given full-length episodes, including the\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "            v_s_: Optional[Union[np.ndarray, torch.Tensor]] = None,\n            gamma: Optional[float] = 0.99,\n            gae_lambda: Optional[float] = 0.95) -> Batch:\n        <IND>",
        "target_code_with_indent": "            v_s_: Optional[Union[np.ndarray, torch.Tensor]] = None,\n            gamma: float = 0.99,\n            gae_lambda: float = 0.95) -> Batch:\n        <IND>"
      }
    ]
  },
  {
    "project": "thu-ml/tianshou",
    "commit": "0eef0ca1985b4659e7e57aadaa7902613ff35001",
    "filename": "tianshou/policy/modelfree/a2c.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/thu-ml-tianshou/tianshou/policy/modelfree/a2c.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tianshou/policy/modelfree/a2c.py:51:20 Unsupported operand [58]: `<=` is not supported for operand types `int` and `Optional[float]`.",
    "message": " `<=` is not supported for operand types `int` and `Optional[float]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 51,
    "warning_line": "        assert 0 <= gae_lambda <= 1, 'GAE lambda should be in [0, 1].'",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                 optim: torch.optim.Optimizer,\n                 dist_fn: Optional[torch.distributions.Distribution]\n                 = torch.distributions.Categorical,\n                 discount_factor: Optional[float] = 0.99,\n                 vf_coef: Optional[float] = .5,\n                 ent_coef: Optional[float] = .01,\n                 max_grad_norm: Optional[float] = None,\n                 gae_lambda: Optional[float] = 0.95,\n                 reward_normalization: Optional[bool] = False,\n                 **kwargs) -> None:\n",
        "source_code_len": 532,
        "target_code": "                 optim: torch.optim.Optimizer,\n                 dist_fn: torch.distributions.Distribution\n                 = torch.distributions.Categorical,\n                 discount_factor: float = 0.99,\n                 vf_coef: float = .5,\n                 ent_coef: float = .01,\n                 max_grad_norm: Optional[float] = None,\n                 gae_lambda: float = 0.95,\n                 reward_normalization: bool = False,\n                 **kwargs) -> None:\n",
        "target_code_len": 472,
        "diff_format": "@@ -38,10 +38,10 @@\n                  optim: torch.optim.Optimizer,\n-                 dist_fn: Optional[torch.distributions.Distribution]\n+                 dist_fn: torch.distributions.Distribution\n                  = torch.distributions.Categorical,\n-                 discount_factor: Optional[float] = 0.99,\n-                 vf_coef: Optional[float] = .5,\n-                 ent_coef: Optional[float] = .01,\n+                 discount_factor: float = 0.99,\n+                 vf_coef: float = .5,\n+                 ent_coef: float = .01,\n                  max_grad_norm: Optional[float] = None,\n-                 gae_lambda: Optional[float] = 0.95,\n-                 reward_normalization: Optional[bool] = False,\n+                 gae_lambda: float = 0.95,\n+                 reward_normalization: bool = False,\n                  **kwargs) -> None:\n",
        "source_code_with_indent": "                 optim: torch.optim.Optimizer,\n                 dist_fn: Optional[torch.distributions.Distribution]\n                 = torch.distributions.Categorical,\n                 discount_factor: Optional[float] = 0.99,\n                 vf_coef: Optional[float] = .5,\n                 ent_coef: Optional[float] = .01,\n                 max_grad_norm: Optional[float] = None,\n                 gae_lambda: Optional[float] = 0.95,\n                 reward_normalization: Optional[bool] = False,\n                 **kwargs) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                 optim: torch.optim.Optimizer,\n                 dist_fn: torch.distributions.Distribution\n                 = torch.distributions.Categorical,\n                 discount_factor: float = 0.99,\n                 vf_coef: float = .5,\n                 ent_coef: float = .01,\n                 max_grad_norm: Optional[float] = None,\n                 gae_lambda: float = 0.95,\n                 reward_normalization: bool = False,\n                 **kwargs) -> None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "thu-ml/tianshou",
    "commit": "0eef0ca1985b4659e7e57aadaa7902613ff35001",
    "filename": "tianshou/policy/modelfree/a2c.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/thu-ml-tianshou/tianshou/policy/modelfree/a2c.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tianshou/policy/modelfree/a2c.py:51:20 Unsupported operand [58]: `<=` is not supported for operand types `Optional[float]` and `int`.",
    "message": " `<=` is not supported for operand types `Optional[float]` and `int`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 51,
    "warning_line": "        assert 0 <= gae_lambda <= 1, 'GAE lambda should be in [0, 1].'",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                 optim: torch.optim.Optimizer,\n                 dist_fn: Optional[torch.distributions.Distribution]\n                 = torch.distributions.Categorical,\n                 discount_factor: Optional[float] = 0.99,\n                 vf_coef: Optional[float] = .5,\n                 ent_coef: Optional[float] = .01,\n                 max_grad_norm: Optional[float] = None,\n                 gae_lambda: Optional[float] = 0.95,\n                 reward_normalization: Optional[bool] = False,\n                 **kwargs) -> None:\n",
        "source_code_len": 532,
        "target_code": "                 optim: torch.optim.Optimizer,\n                 dist_fn: torch.distributions.Distribution\n                 = torch.distributions.Categorical,\n                 discount_factor: float = 0.99,\n                 vf_coef: float = .5,\n                 ent_coef: float = .01,\n                 max_grad_norm: Optional[float] = None,\n                 gae_lambda: float = 0.95,\n                 reward_normalization: bool = False,\n                 **kwargs) -> None:\n",
        "target_code_len": 472,
        "diff_format": "@@ -38,10 +38,10 @@\n                  optim: torch.optim.Optimizer,\n-                 dist_fn: Optional[torch.distributions.Distribution]\n+                 dist_fn: torch.distributions.Distribution\n                  = torch.distributions.Categorical,\n-                 discount_factor: Optional[float] = 0.99,\n-                 vf_coef: Optional[float] = .5,\n-                 ent_coef: Optional[float] = .01,\n+                 discount_factor: float = 0.99,\n+                 vf_coef: float = .5,\n+                 ent_coef: float = .01,\n                  max_grad_norm: Optional[float] = None,\n-                 gae_lambda: Optional[float] = 0.95,\n-                 reward_normalization: Optional[bool] = False,\n+                 gae_lambda: float = 0.95,\n+                 reward_normalization: bool = False,\n                  **kwargs) -> None:\n",
        "source_code_with_indent": "                 optim: torch.optim.Optimizer,\n                 dist_fn: Optional[torch.distributions.Distribution]\n                 = torch.distributions.Categorical,\n                 discount_factor: Optional[float] = 0.99,\n                 vf_coef: Optional[float] = .5,\n                 ent_coef: Optional[float] = .01,\n                 max_grad_norm: Optional[float] = None,\n                 gae_lambda: Optional[float] = 0.95,\n                 reward_normalization: Optional[bool] = False,\n                 **kwargs) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                 optim: torch.optim.Optimizer,\n                 dist_fn: torch.distributions.Distribution\n                 = torch.distributions.Categorical,\n                 discount_factor: float = 0.99,\n                 vf_coef: float = .5,\n                 ent_coef: float = .01,\n                 max_grad_norm: Optional[float] = None,\n                 gae_lambda: float = 0.95,\n                 reward_normalization: bool = False,\n                 **kwargs) -> None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "thu-ml/tianshou",
    "commit": "0eef0ca1985b4659e7e57aadaa7902613ff35001",
    "filename": "tianshou/policy/modelfree/a2c.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/thu-ml-tianshou/tianshou/policy/modelfree/a2c.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tianshou/policy/modelfree/a2c.py:115:32 Unsupported operand [58]: `*` is not supported for operand types `Optional[float]` and `typing.Any`.",
    "message": " `*` is not supported for operand types `Optional[float]` and `typing.Any`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 115,
    "warning_line": "                loss = a_loss + self._w_vf * vf_loss - self._w_ent * ent_loss",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                 optim: torch.optim.Optimizer,\n                 dist_fn: Optional[torch.distributions.Distribution]\n                 = torch.distributions.Categorical,\n                 discount_factor: Optional[float] = 0.99,\n                 vf_coef: Optional[float] = .5,\n                 ent_coef: Optional[float] = .01,\n                 max_grad_norm: Optional[float] = None,\n                 gae_lambda: Optional[float] = 0.95,\n                 reward_normalization: Optional[bool] = False,\n                 **kwargs) -> None:\n",
        "source_code_len": 532,
        "target_code": "                 optim: torch.optim.Optimizer,\n                 dist_fn: torch.distributions.Distribution\n                 = torch.distributions.Categorical,\n                 discount_factor: float = 0.99,\n                 vf_coef: float = .5,\n                 ent_coef: float = .01,\n                 max_grad_norm: Optional[float] = None,\n                 gae_lambda: float = 0.95,\n                 reward_normalization: bool = False,\n                 **kwargs) -> None:\n",
        "target_code_len": 472,
        "diff_format": "@@ -38,10 +38,10 @@\n                  optim: torch.optim.Optimizer,\n-                 dist_fn: Optional[torch.distributions.Distribution]\n+                 dist_fn: torch.distributions.Distribution\n                  = torch.distributions.Categorical,\n-                 discount_factor: Optional[float] = 0.99,\n-                 vf_coef: Optional[float] = .5,\n-                 ent_coef: Optional[float] = .01,\n+                 discount_factor: float = 0.99,\n+                 vf_coef: float = .5,\n+                 ent_coef: float = .01,\n                  max_grad_norm: Optional[float] = None,\n-                 gae_lambda: Optional[float] = 0.95,\n-                 reward_normalization: Optional[bool] = False,\n+                 gae_lambda: float = 0.95,\n+                 reward_normalization: bool = False,\n                  **kwargs) -> None:\n",
        "source_code_with_indent": "                 optim: torch.optim.Optimizer,\n                 dist_fn: Optional[torch.distributions.Distribution]\n                 = torch.distributions.Categorical,\n                 discount_factor: Optional[float] = 0.99,\n                 vf_coef: Optional[float] = .5,\n                 ent_coef: Optional[float] = .01,\n                 max_grad_norm: Optional[float] = None,\n                 gae_lambda: Optional[float] = 0.95,\n                 reward_normalization: Optional[bool] = False,\n                 **kwargs) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                 optim: torch.optim.Optimizer,\n                 dist_fn: torch.distributions.Distribution\n                 = torch.distributions.Categorical,\n                 discount_factor: float = 0.99,\n                 vf_coef: float = .5,\n                 ent_coef: float = .01,\n                 max_grad_norm: Optional[float] = None,\n                 gae_lambda: float = 0.95,\n                 reward_normalization: bool = False,\n                 **kwargs) -> None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "thu-ml/tianshou",
    "commit": "0eef0ca1985b4659e7e57aadaa7902613ff35001",
    "filename": "tianshou/policy/modelfree/a2c.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/thu-ml-tianshou/tianshou/policy/modelfree/a2c.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tianshou/policy/modelfree/a2c.py:115:55 Unsupported operand [58]: `*` is not supported for operand types `Optional[float]` and `typing.Any`.",
    "message": " `*` is not supported for operand types `Optional[float]` and `typing.Any`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 115,
    "warning_line": "                loss = a_loss + self._w_vf * vf_loss - self._w_ent * ent_loss",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                 optim: torch.optim.Optimizer,\n                 dist_fn: Optional[torch.distributions.Distribution]\n                 = torch.distributions.Categorical,\n                 discount_factor: Optional[float] = 0.99,\n                 vf_coef: Optional[float] = .5,\n                 ent_coef: Optional[float] = .01,\n                 max_grad_norm: Optional[float] = None,\n                 gae_lambda: Optional[float] = 0.95,\n                 reward_normalization: Optional[bool] = False,\n                 **kwargs) -> None:\n",
        "source_code_len": 532,
        "target_code": "                 optim: torch.optim.Optimizer,\n                 dist_fn: torch.distributions.Distribution\n                 = torch.distributions.Categorical,\n                 discount_factor: float = 0.99,\n                 vf_coef: float = .5,\n                 ent_coef: float = .01,\n                 max_grad_norm: Optional[float] = None,\n                 gae_lambda: float = 0.95,\n                 reward_normalization: bool = False,\n                 **kwargs) -> None:\n",
        "target_code_len": 472,
        "diff_format": "@@ -38,10 +38,10 @@\n                  optim: torch.optim.Optimizer,\n-                 dist_fn: Optional[torch.distributions.Distribution]\n+                 dist_fn: torch.distributions.Distribution\n                  = torch.distributions.Categorical,\n-                 discount_factor: Optional[float] = 0.99,\n-                 vf_coef: Optional[float] = .5,\n-                 ent_coef: Optional[float] = .01,\n+                 discount_factor: float = 0.99,\n+                 vf_coef: float = .5,\n+                 ent_coef: float = .01,\n                  max_grad_norm: Optional[float] = None,\n-                 gae_lambda: Optional[float] = 0.95,\n-                 reward_normalization: Optional[bool] = False,\n+                 gae_lambda: float = 0.95,\n+                 reward_normalization: bool = False,\n                  **kwargs) -> None:\n",
        "source_code_with_indent": "                 optim: torch.optim.Optimizer,\n                 dist_fn: Optional[torch.distributions.Distribution]\n                 = torch.distributions.Categorical,\n                 discount_factor: Optional[float] = 0.99,\n                 vf_coef: Optional[float] = .5,\n                 ent_coef: Optional[float] = .01,\n                 max_grad_norm: Optional[float] = None,\n                 gae_lambda: Optional[float] = 0.95,\n                 reward_normalization: Optional[bool] = False,\n                 **kwargs) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                 optim: torch.optim.Optimizer,\n                 dist_fn: torch.distributions.Distribution\n                 = torch.distributions.Categorical,\n                 discount_factor: float = 0.99,\n                 vf_coef: float = .5,\n                 ent_coef: float = .01,\n                 max_grad_norm: Optional[float] = None,\n                 gae_lambda: float = 0.95,\n                 reward_normalization: bool = False,\n                 **kwargs) -> None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "thu-ml/tianshou",
    "commit": "0eef0ca1985b4659e7e57aadaa7902613ff35001",
    "filename": "tianshou/policy/modelfree/ddpg.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/thu-ml-tianshou/tianshou/policy/modelfree/ddpg.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tianshou/policy/modelfree/ddpg.py:60:20 Unsupported operand [58]: `<=` is not supported for operand types `int` and `Optional[float]`.",
    "message": " `<=` is not supported for operand types `int` and `Optional[float]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 60,
    "warning_line": "        assert 0 <= tau <= 1, 'tau should in [0, 1]'",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                 critic_optim: torch.optim.Optimizer,\n                 tau: Optional[float] = 0.005,\n                 gamma: Optional[float] = 0.99,\n                 exploration_noise: Optional[float] = 0.1,\n                 action_range: Optional[Tuple[float, float]] = None,\n                 reward_normalization: Optional[bool] = False,\n                 ignore_done: Optional[bool] = False,\n                 **kwargs) -> None:\n",
        "source_code_len": 430,
        "target_code": "                 critic_optim: torch.optim.Optimizer,\n                 tau: float = 0.005,\n                 gamma: float = 0.99,\n                 exploration_noise: float = 0.1,\n                 action_range: Optional[Tuple[float, float]] = None,\n                 reward_normalization: bool = False,\n                 ignore_done: bool = False,\n                 **kwargs) -> None:\n",
        "target_code_len": 380,
        "diff_format": "@@ -43,8 +43,8 @@\n                  critic_optim: torch.optim.Optimizer,\n-                 tau: Optional[float] = 0.005,\n-                 gamma: Optional[float] = 0.99,\n-                 exploration_noise: Optional[float] = 0.1,\n+                 tau: float = 0.005,\n+                 gamma: float = 0.99,\n+                 exploration_noise: float = 0.1,\n                  action_range: Optional[Tuple[float, float]] = None,\n-                 reward_normalization: Optional[bool] = False,\n-                 ignore_done: Optional[bool] = False,\n+                 reward_normalization: bool = False,\n+                 ignore_done: bool = False,\n                  **kwargs) -> None:\n",
        "source_code_with_indent": "                 critic_optim: torch.optim.Optimizer,\n                 tau: Optional[float] = 0.005,\n                 gamma: Optional[float] = 0.99,\n                 exploration_noise: Optional[float] = 0.1,\n                 action_range: Optional[Tuple[float, float]] = None,\n                 reward_normalization: Optional[bool] = False,\n                 ignore_done: Optional[bool] = False,\n                 **kwargs) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                 critic_optim: torch.optim.Optimizer,\n                 tau: float = 0.005,\n                 gamma: float = 0.99,\n                 exploration_noise: float = 0.1,\n                 action_range: Optional[Tuple[float, float]] = None,\n                 reward_normalization: bool = False,\n                 ignore_done: bool = False,\n                 **kwargs) -> None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "thu-ml/tianshou",
    "commit": "0eef0ca1985b4659e7e57aadaa7902613ff35001",
    "filename": "tianshou/policy/modelfree/ddpg.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/thu-ml-tianshou/tianshou/policy/modelfree/ddpg.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tianshou/policy/modelfree/ddpg.py:60:20 Unsupported operand [58]: `<=` is not supported for operand types `Optional[float]` and `int`.",
    "message": " `<=` is not supported for operand types `Optional[float]` and `int`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 60,
    "warning_line": "        assert 0 <= tau <= 1, 'tau should in [0, 1]'",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                 critic_optim: torch.optim.Optimizer,\n                 tau: Optional[float] = 0.005,\n                 gamma: Optional[float] = 0.99,\n                 exploration_noise: Optional[float] = 0.1,\n                 action_range: Optional[Tuple[float, float]] = None,\n                 reward_normalization: Optional[bool] = False,\n                 ignore_done: Optional[bool] = False,\n                 **kwargs) -> None:\n",
        "source_code_len": 430,
        "target_code": "                 critic_optim: torch.optim.Optimizer,\n                 tau: float = 0.005,\n                 gamma: float = 0.99,\n                 exploration_noise: float = 0.1,\n                 action_range: Optional[Tuple[float, float]] = None,\n                 reward_normalization: bool = False,\n                 ignore_done: bool = False,\n                 **kwargs) -> None:\n",
        "target_code_len": 380,
        "diff_format": "@@ -43,8 +43,8 @@\n                  critic_optim: torch.optim.Optimizer,\n-                 tau: Optional[float] = 0.005,\n-                 gamma: Optional[float] = 0.99,\n-                 exploration_noise: Optional[float] = 0.1,\n+                 tau: float = 0.005,\n+                 gamma: float = 0.99,\n+                 exploration_noise: float = 0.1,\n                  action_range: Optional[Tuple[float, float]] = None,\n-                 reward_normalization: Optional[bool] = False,\n-                 ignore_done: Optional[bool] = False,\n+                 reward_normalization: bool = False,\n+                 ignore_done: bool = False,\n                  **kwargs) -> None:\n",
        "source_code_with_indent": "                 critic_optim: torch.optim.Optimizer,\n                 tau: Optional[float] = 0.005,\n                 gamma: Optional[float] = 0.99,\n                 exploration_noise: Optional[float] = 0.1,\n                 action_range: Optional[Tuple[float, float]] = None,\n                 reward_normalization: Optional[bool] = False,\n                 ignore_done: Optional[bool] = False,\n                 **kwargs) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                 critic_optim: torch.optim.Optimizer,\n                 tau: float = 0.005,\n                 gamma: float = 0.99,\n                 exploration_noise: float = 0.1,\n                 action_range: Optional[Tuple[float, float]] = None,\n                 reward_normalization: bool = False,\n                 ignore_done: bool = False,\n                 **kwargs) -> None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "thu-ml/tianshou",
    "commit": "0eef0ca1985b4659e7e57aadaa7902613ff35001",
    "filename": "tianshou/policy/modelfree/ddpg.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/thu-ml-tianshou/tianshou/policy/modelfree/ddpg.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tianshou/policy/modelfree/ddpg.py:62:20 Unsupported operand [58]: `<=` is not supported for operand types `int` and `Optional[float]`.",
    "message": " `<=` is not supported for operand types `int` and `Optional[float]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 62,
    "warning_line": "        assert 0 <= gamma <= 1, 'gamma should in [0, 1]'",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                 critic_optim: torch.optim.Optimizer,\n                 tau: Optional[float] = 0.005,\n                 gamma: Optional[float] = 0.99,\n                 exploration_noise: Optional[float] = 0.1,\n                 action_range: Optional[Tuple[float, float]] = None,\n                 reward_normalization: Optional[bool] = False,\n                 ignore_done: Optional[bool] = False,\n                 **kwargs) -> None:\n",
        "source_code_len": 430,
        "target_code": "                 critic_optim: torch.optim.Optimizer,\n                 tau: float = 0.005,\n                 gamma: float = 0.99,\n                 exploration_noise: float = 0.1,\n                 action_range: Optional[Tuple[float, float]] = None,\n                 reward_normalization: bool = False,\n                 ignore_done: bool = False,\n                 **kwargs) -> None:\n",
        "target_code_len": 380,
        "diff_format": "@@ -43,8 +43,8 @@\n                  critic_optim: torch.optim.Optimizer,\n-                 tau: Optional[float] = 0.005,\n-                 gamma: Optional[float] = 0.99,\n-                 exploration_noise: Optional[float] = 0.1,\n+                 tau: float = 0.005,\n+                 gamma: float = 0.99,\n+                 exploration_noise: float = 0.1,\n                  action_range: Optional[Tuple[float, float]] = None,\n-                 reward_normalization: Optional[bool] = False,\n-                 ignore_done: Optional[bool] = False,\n+                 reward_normalization: bool = False,\n+                 ignore_done: bool = False,\n                  **kwargs) -> None:\n",
        "source_code_with_indent": "                 critic_optim: torch.optim.Optimizer,\n                 tau: Optional[float] = 0.005,\n                 gamma: Optional[float] = 0.99,\n                 exploration_noise: Optional[float] = 0.1,\n                 action_range: Optional[Tuple[float, float]] = None,\n                 reward_normalization: Optional[bool] = False,\n                 ignore_done: Optional[bool] = False,\n                 **kwargs) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                 critic_optim: torch.optim.Optimizer,\n                 tau: float = 0.005,\n                 gamma: float = 0.99,\n                 exploration_noise: float = 0.1,\n                 action_range: Optional[Tuple[float, float]] = None,\n                 reward_normalization: bool = False,\n                 ignore_done: bool = False,\n                 **kwargs) -> None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "thu-ml/tianshou",
    "commit": "0eef0ca1985b4659e7e57aadaa7902613ff35001",
    "filename": "tianshou/policy/modelfree/ddpg.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/thu-ml-tianshou/tianshou/policy/modelfree/ddpg.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tianshou/policy/modelfree/ddpg.py:62:20 Unsupported operand [58]: `<=` is not supported for operand types `Optional[float]` and `int`.",
    "message": " `<=` is not supported for operand types `Optional[float]` and `int`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 62,
    "warning_line": "        assert 0 <= gamma <= 1, 'gamma should in [0, 1]'",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                 critic_optim: torch.optim.Optimizer,\n                 tau: Optional[float] = 0.005,\n                 gamma: Optional[float] = 0.99,\n                 exploration_noise: Optional[float] = 0.1,\n                 action_range: Optional[Tuple[float, float]] = None,\n                 reward_normalization: Optional[bool] = False,\n                 ignore_done: Optional[bool] = False,\n                 **kwargs) -> None:\n",
        "source_code_len": 430,
        "target_code": "                 critic_optim: torch.optim.Optimizer,\n                 tau: float = 0.005,\n                 gamma: float = 0.99,\n                 exploration_noise: float = 0.1,\n                 action_range: Optional[Tuple[float, float]] = None,\n                 reward_normalization: bool = False,\n                 ignore_done: bool = False,\n                 **kwargs) -> None:\n",
        "target_code_len": 380,
        "diff_format": "@@ -43,8 +43,8 @@\n                  critic_optim: torch.optim.Optimizer,\n-                 tau: Optional[float] = 0.005,\n-                 gamma: Optional[float] = 0.99,\n-                 exploration_noise: Optional[float] = 0.1,\n+                 tau: float = 0.005,\n+                 gamma: float = 0.99,\n+                 exploration_noise: float = 0.1,\n                  action_range: Optional[Tuple[float, float]] = None,\n-                 reward_normalization: Optional[bool] = False,\n-                 ignore_done: Optional[bool] = False,\n+                 reward_normalization: bool = False,\n+                 ignore_done: bool = False,\n                  **kwargs) -> None:\n",
        "source_code_with_indent": "                 critic_optim: torch.optim.Optimizer,\n                 tau: Optional[float] = 0.005,\n                 gamma: Optional[float] = 0.99,\n                 exploration_noise: Optional[float] = 0.1,\n                 action_range: Optional[Tuple[float, float]] = None,\n                 reward_normalization: Optional[bool] = False,\n                 ignore_done: Optional[bool] = False,\n                 **kwargs) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                 critic_optim: torch.optim.Optimizer,\n                 tau: float = 0.005,\n                 gamma: float = 0.99,\n                 exploration_noise: float = 0.1,\n                 action_range: Optional[Tuple[float, float]] = None,\n                 reward_normalization: bool = False,\n                 ignore_done: bool = False,\n                 **kwargs) -> None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "thu-ml/tianshou",
    "commit": "0eef0ca1985b4659e7e57aadaa7902613ff35001",
    "filename": "tianshou/policy/modelfree/ddpg.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/thu-ml-tianshou/tianshou/policy/modelfree/ddpg.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tianshou/policy/modelfree/ddpg.py:64:20 Unsupported operand [58]: `<=` is not supported for operand types `int` and `Optional[float]`.",
    "message": " `<=` is not supported for operand types `int` and `Optional[float]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 64,
    "warning_line": "        assert 0 <= exploration_noise, 'noise should not be negative'",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                 critic_optim: torch.optim.Optimizer,\n                 tau: Optional[float] = 0.005,\n                 gamma: Optional[float] = 0.99,\n                 exploration_noise: Optional[float] = 0.1,\n                 action_range: Optional[Tuple[float, float]] = None,\n                 reward_normalization: Optional[bool] = False,\n                 ignore_done: Optional[bool] = False,\n                 **kwargs) -> None:\n",
        "source_code_len": 430,
        "target_code": "                 critic_optim: torch.optim.Optimizer,\n                 tau: float = 0.005,\n                 gamma: float = 0.99,\n                 exploration_noise: float = 0.1,\n                 action_range: Optional[Tuple[float, float]] = None,\n                 reward_normalization: bool = False,\n                 ignore_done: bool = False,\n                 **kwargs) -> None:\n",
        "target_code_len": 380,
        "diff_format": "@@ -43,8 +43,8 @@\n                  critic_optim: torch.optim.Optimizer,\n-                 tau: Optional[float] = 0.005,\n-                 gamma: Optional[float] = 0.99,\n-                 exploration_noise: Optional[float] = 0.1,\n+                 tau: float = 0.005,\n+                 gamma: float = 0.99,\n+                 exploration_noise: float = 0.1,\n                  action_range: Optional[Tuple[float, float]] = None,\n-                 reward_normalization: Optional[bool] = False,\n-                 ignore_done: Optional[bool] = False,\n+                 reward_normalization: bool = False,\n+                 ignore_done: bool = False,\n                  **kwargs) -> None:\n",
        "source_code_with_indent": "                 critic_optim: torch.optim.Optimizer,\n                 tau: Optional[float] = 0.005,\n                 gamma: Optional[float] = 0.99,\n                 exploration_noise: Optional[float] = 0.1,\n                 action_range: Optional[Tuple[float, float]] = None,\n                 reward_normalization: Optional[bool] = False,\n                 ignore_done: Optional[bool] = False,\n                 **kwargs) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                 critic_optim: torch.optim.Optimizer,\n                 tau: float = 0.005,\n                 gamma: float = 0.99,\n                 exploration_noise: float = 0.1,\n                 action_range: Optional[Tuple[float, float]] = None,\n                 reward_normalization: bool = False,\n                 ignore_done: bool = False,\n                 **kwargs) -> None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "thu-ml/tianshou",
    "commit": "0eef0ca1985b4659e7e57aadaa7902613ff35001",
    "filename": "tianshou/policy/modelfree/ddpg.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/thu-ml-tianshou/tianshou/policy/modelfree/ddpg.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tianshou/policy/modelfree/ddpg.py:95:39 Unsupported operand [58]: `-` is not supported for operand types `int` and `Optional[float]`.",
    "message": " `-` is not supported for operand types `int` and `Optional[float]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 95,
    "warning_line": "            o.data.copy_(o.data * (1 - self._tau) + n.data * self._tau)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                 critic_optim: torch.optim.Optimizer,\n                 tau: Optional[float] = 0.005,\n                 gamma: Optional[float] = 0.99,\n                 exploration_noise: Optional[float] = 0.1,\n                 action_range: Optional[Tuple[float, float]] = None,\n                 reward_normalization: Optional[bool] = False,\n                 ignore_done: Optional[bool] = False,\n                 **kwargs) -> None:\n",
        "source_code_len": 430,
        "target_code": "                 critic_optim: torch.optim.Optimizer,\n                 tau: float = 0.005,\n                 gamma: float = 0.99,\n                 exploration_noise: float = 0.1,\n                 action_range: Optional[Tuple[float, float]] = None,\n                 reward_normalization: bool = False,\n                 ignore_done: bool = False,\n                 **kwargs) -> None:\n",
        "target_code_len": 380,
        "diff_format": "@@ -43,8 +43,8 @@\n                  critic_optim: torch.optim.Optimizer,\n-                 tau: Optional[float] = 0.005,\n-                 gamma: Optional[float] = 0.99,\n-                 exploration_noise: Optional[float] = 0.1,\n+                 tau: float = 0.005,\n+                 gamma: float = 0.99,\n+                 exploration_noise: float = 0.1,\n                  action_range: Optional[Tuple[float, float]] = None,\n-                 reward_normalization: Optional[bool] = False,\n-                 ignore_done: Optional[bool] = False,\n+                 reward_normalization: bool = False,\n+                 ignore_done: bool = False,\n                  **kwargs) -> None:\n",
        "source_code_with_indent": "                 critic_optim: torch.optim.Optimizer,\n                 tau: Optional[float] = 0.005,\n                 gamma: Optional[float] = 0.99,\n                 exploration_noise: Optional[float] = 0.1,\n                 action_range: Optional[Tuple[float, float]] = None,\n                 reward_normalization: Optional[bool] = False,\n                 ignore_done: Optional[bool] = False,\n                 **kwargs) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                 critic_optim: torch.optim.Optimizer,\n                 tau: float = 0.005,\n                 gamma: float = 0.99,\n                 exploration_noise: float = 0.1,\n                 action_range: Optional[Tuple[float, float]] = None,\n                 reward_normalization: bool = False,\n                 ignore_done: bool = False,\n                 **kwargs) -> None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "thu-ml/tianshou",
    "commit": "0eef0ca1985b4659e7e57aadaa7902613ff35001",
    "filename": "tianshou/policy/modelfree/ddpg.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/thu-ml-tianshou/tianshou/policy/modelfree/ddpg.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tianshou/policy/modelfree/ddpg.py:98:39 Unsupported operand [58]: `-` is not supported for operand types `int` and `Optional[float]`.",
    "message": " `-` is not supported for operand types `int` and `Optional[float]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 98,
    "warning_line": "            o.data.copy_(o.data * (1 - self._tau) + n.data * self._tau)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                 critic_optim: torch.optim.Optimizer,\n                 tau: Optional[float] = 0.005,\n                 gamma: Optional[float] = 0.99,\n                 exploration_noise: Optional[float] = 0.1,\n                 action_range: Optional[Tuple[float, float]] = None,\n                 reward_normalization: Optional[bool] = False,\n                 ignore_done: Optional[bool] = False,\n                 **kwargs) -> None:\n",
        "source_code_len": 430,
        "target_code": "                 critic_optim: torch.optim.Optimizer,\n                 tau: float = 0.005,\n                 gamma: float = 0.99,\n                 exploration_noise: float = 0.1,\n                 action_range: Optional[Tuple[float, float]] = None,\n                 reward_normalization: bool = False,\n                 ignore_done: bool = False,\n                 **kwargs) -> None:\n",
        "target_code_len": 380,
        "diff_format": "@@ -43,8 +43,8 @@\n                  critic_optim: torch.optim.Optimizer,\n-                 tau: Optional[float] = 0.005,\n-                 gamma: Optional[float] = 0.99,\n-                 exploration_noise: Optional[float] = 0.1,\n+                 tau: float = 0.005,\n+                 gamma: float = 0.99,\n+                 exploration_noise: float = 0.1,\n                  action_range: Optional[Tuple[float, float]] = None,\n-                 reward_normalization: Optional[bool] = False,\n-                 ignore_done: Optional[bool] = False,\n+                 reward_normalization: bool = False,\n+                 ignore_done: bool = False,\n                  **kwargs) -> None:\n",
        "source_code_with_indent": "                 critic_optim: torch.optim.Optimizer,\n                 tau: Optional[float] = 0.005,\n                 gamma: Optional[float] = 0.99,\n                 exploration_noise: Optional[float] = 0.1,\n                 action_range: Optional[Tuple[float, float]] = None,\n                 reward_normalization: Optional[bool] = False,\n                 ignore_done: Optional[bool] = False,\n                 **kwargs) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                 critic_optim: torch.optim.Optimizer,\n                 tau: float = 0.005,\n                 gamma: float = 0.99,\n                 exploration_noise: float = 0.1,\n                 action_range: Optional[Tuple[float, float]] = None,\n                 reward_normalization: bool = False,\n                 ignore_done: bool = False,\n                 **kwargs) -> None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "thu-ml/tianshou",
    "commit": "0eef0ca1985b4659e7e57aadaa7902613ff35001",
    "filename": "tianshou/policy/modelfree/ddpg.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/thu-ml-tianshou/tianshou/policy/modelfree/ddpg.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tianshou/policy/modelfree/ddpg.py:131:30 Incompatible parameter type [6]: Expected `str` for 2nd positional only parameter to call `getattr` but got `Optional[str]`.",
    "message": " Expected `str` for 2nd positional only parameter to call `getattr` but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 131,
    "warning_line": "        model = getattr(self, model)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                state: Optional[Union[dict, Batch, np.ndarray]] = None,\n                model: Optional[str] = 'actor',\n                input: Optional[str] = 'obs',\n                eps: Optional[float] = None,\n",
        "source_code_len": 211,
        "target_code": "                state: Optional[Union[dict, Batch, np.ndarray]] = None,\n                model: str = 'actor',\n                input: str = 'obs',\n                eps: Optional[float] = None,\n",
        "target_code_len": 191,
        "diff_format": "@@ -112,4 +112,4 @@\n                 state: Optional[Union[dict, Batch, np.ndarray]] = None,\n-                model: Optional[str] = 'actor',\n-                input: Optional[str] = 'obs',\n+                model: str = 'actor',\n+                input: str = 'obs',\n                 eps: Optional[float] = None,\n",
        "source_code_with_indent": "                state: Optional[Union[dict, Batch, np.ndarray]] = None,\n                model: Optional[str] = 'actor',\n                input: Optional[str] = 'obs',\n                eps: Optional[float] = None,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                state: Optional[Union[dict, Batch, np.ndarray]] = None,\n                model: str = 'actor',\n                input: str = 'obs',\n                eps: Optional[float] = None,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "thu-ml/tianshou",
    "commit": "0eef0ca1985b4659e7e57aadaa7902613ff35001",
    "filename": "tianshou/policy/modelfree/ddpg.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/thu-ml-tianshou/tianshou/policy/modelfree/ddpg.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tianshou/policy/modelfree/ddpg.py:132:29 Incompatible parameter type [6]: Expected `str` for 2nd positional only parameter to call `getattr` but got `Optional[str]`.",
    "message": " Expected `str` for 2nd positional only parameter to call `getattr` but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 132,
    "warning_line": "        obs = getattr(batch, input)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                state: Optional[Union[dict, Batch, np.ndarray]] = None,\n                model: Optional[str] = 'actor',\n                input: Optional[str] = 'obs',\n                eps: Optional[float] = None,\n",
        "source_code_len": 211,
        "target_code": "                state: Optional[Union[dict, Batch, np.ndarray]] = None,\n                model: str = 'actor',\n                input: str = 'obs',\n                eps: Optional[float] = None,\n",
        "target_code_len": 191,
        "diff_format": "@@ -112,4 +112,4 @@\n                 state: Optional[Union[dict, Batch, np.ndarray]] = None,\n-                model: Optional[str] = 'actor',\n-                input: Optional[str] = 'obs',\n+                model: str = 'actor',\n+                input: str = 'obs',\n                 eps: Optional[float] = None,\n",
        "source_code_with_indent": "                state: Optional[Union[dict, Batch, np.ndarray]] = None,\n                model: Optional[str] = 'actor',\n                input: Optional[str] = 'obs',\n                eps: Optional[float] = None,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                state: Optional[Union[dict, Batch, np.ndarray]] = None,\n                model: str = 'actor',\n                input: str = 'obs',\n                eps: Optional[float] = None,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "thu-ml/tianshou",
    "commit": "0eef0ca1985b4659e7e57aadaa7902613ff35001",
    "filename": "tianshou/policy/modelfree/ddpg.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/thu-ml-tianshou/tianshou/policy/modelfree/ddpg.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tianshou/policy/modelfree/ddpg.py:137:11 Unsupported operand [58]: `>` is not supported for operand types `Optional[float]` and `int`.",
    "message": " `>` is not supported for operand types `Optional[float]` and `int`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 137,
    "warning_line": "        if eps > 0:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                 critic_optim: torch.optim.Optimizer,\n                 tau: Optional[float] = 0.005,\n                 gamma: Optional[float] = 0.99,\n                 exploration_noise: Optional[float] = 0.1,\n                 action_range: Optional[Tuple[float, float]] = None,\n                 reward_normalization: Optional[bool] = False,\n                 ignore_done: Optional[bool] = False,\n                 **kwargs) -> None:\n",
        "source_code_len": 430,
        "target_code": "                 critic_optim: torch.optim.Optimizer,\n                 tau: float = 0.005,\n                 gamma: float = 0.99,\n                 exploration_noise: float = 0.1,\n                 action_range: Optional[Tuple[float, float]] = None,\n                 reward_normalization: bool = False,\n                 ignore_done: bool = False,\n                 **kwargs) -> None:\n",
        "target_code_len": 380,
        "diff_format": "@@ -43,8 +43,8 @@\n                  critic_optim: torch.optim.Optimizer,\n-                 tau: Optional[float] = 0.005,\n-                 gamma: Optional[float] = 0.99,\n-                 exploration_noise: Optional[float] = 0.1,\n+                 tau: float = 0.005,\n+                 gamma: float = 0.99,\n+                 exploration_noise: float = 0.1,\n                  action_range: Optional[Tuple[float, float]] = None,\n-                 reward_normalization: Optional[bool] = False,\n-                 ignore_done: Optional[bool] = False,\n+                 reward_normalization: bool = False,\n+                 ignore_done: bool = False,\n                  **kwargs) -> None:\n",
        "source_code_with_indent": "                 critic_optim: torch.optim.Optimizer,\n                 tau: Optional[float] = 0.005,\n                 gamma: Optional[float] = 0.99,\n                 exploration_noise: Optional[float] = 0.1,\n                 action_range: Optional[Tuple[float, float]] = None,\n                 reward_normalization: Optional[bool] = False,\n                 ignore_done: Optional[bool] = False,\n                 **kwargs) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                 critic_optim: torch.optim.Optimizer,\n                 tau: float = 0.005,\n                 gamma: float = 0.99,\n                 exploration_noise: float = 0.1,\n                 action_range: Optional[Tuple[float, float]] = None,\n                 reward_normalization: bool = False,\n                 ignore_done: bool = False,\n                 **kwargs) -> None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "thu-ml/tianshou",
    "commit": "0eef0ca1985b4659e7e57aadaa7902613ff35001",
    "filename": "tianshou/policy/modelfree/ddpg.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/thu-ml-tianshou/tianshou/policy/modelfree/ddpg.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tianshou/policy/modelfree/ddpg.py:155:44 Unsupported operand [58]: `*` is not supported for operand types `float` and `Optional[float]`.",
    "message": " `*` is not supported for operand types `float` and `Optional[float]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 155,
    "warning_line": "            target_q = (rew + (1. - done) * self._gamma * target_q)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                 critic_optim: torch.optim.Optimizer,\n                 tau: Optional[float] = 0.005,\n                 gamma: Optional[float] = 0.99,\n                 exploration_noise: Optional[float] = 0.1,\n                 action_range: Optional[Tuple[float, float]] = None,\n                 reward_normalization: Optional[bool] = False,\n                 ignore_done: Optional[bool] = False,\n                 **kwargs) -> None:\n",
        "source_code_len": 430,
        "target_code": "                 critic_optim: torch.optim.Optimizer,\n                 tau: float = 0.005,\n                 gamma: float = 0.99,\n                 exploration_noise: float = 0.1,\n                 action_range: Optional[Tuple[float, float]] = None,\n                 reward_normalization: bool = False,\n                 ignore_done: bool = False,\n                 **kwargs) -> None:\n",
        "target_code_len": 380,
        "diff_format": "@@ -43,8 +43,8 @@\n                  critic_optim: torch.optim.Optimizer,\n-                 tau: Optional[float] = 0.005,\n-                 gamma: Optional[float] = 0.99,\n-                 exploration_noise: Optional[float] = 0.1,\n+                 tau: float = 0.005,\n+                 gamma: float = 0.99,\n+                 exploration_noise: float = 0.1,\n                  action_range: Optional[Tuple[float, float]] = None,\n-                 reward_normalization: Optional[bool] = False,\n-                 ignore_done: Optional[bool] = False,\n+                 reward_normalization: bool = False,\n+                 ignore_done: bool = False,\n                  **kwargs) -> None:\n",
        "source_code_with_indent": "                 critic_optim: torch.optim.Optimizer,\n                 tau: Optional[float] = 0.005,\n                 gamma: Optional[float] = 0.99,\n                 exploration_noise: Optional[float] = 0.1,\n                 action_range: Optional[Tuple[float, float]] = None,\n                 reward_normalization: Optional[bool] = False,\n                 ignore_done: Optional[bool] = False,\n                 **kwargs) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                 critic_optim: torch.optim.Optimizer,\n                 tau: float = 0.005,\n                 gamma: float = 0.99,\n                 exploration_noise: float = 0.1,\n                 action_range: Optional[Tuple[float, float]] = None,\n                 reward_normalization: bool = False,\n                 ignore_done: bool = False,\n                 **kwargs) -> None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "thu-ml/tianshou",
    "commit": "0eef0ca1985b4659e7e57aadaa7902613ff35001",
    "filename": "tianshou/policy/modelfree/dqn.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/thu-ml-tianshou/tianshou/policy/modelfree/dqn.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tianshou/policy/modelfree/dqn.py:40:20 Unsupported operand [58]: `<=` is not supported for operand types `int` and `Optional[float]`.",
    "message": " `<=` is not supported for operand types `int` and `Optional[float]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 40,
    "warning_line": "        assert 0 <= discount_factor <= 1, 'discount_factor should in [0, 1]'",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                 optim: torch.optim.Optimizer,\n                 discount_factor: Optional[float] = 0.99,\n                 estimation_step: Optional[int] = 1,\n                 target_update_freq: Optional[int] = 0,\n",
        "source_code_len": 214,
        "target_code": "                 optim: torch.optim.Optimizer,\n                 discount_factor: float = 0.99,\n                 estimation_step: int = 1,\n                 target_update_freq: Optional[int] = 0,\n",
        "target_code_len": 194,
        "diff_format": "@@ -31,4 +31,4 @@\n                  optim: torch.optim.Optimizer,\n-                 discount_factor: Optional[float] = 0.99,\n-                 estimation_step: Optional[int] = 1,\n+                 discount_factor: float = 0.99,\n+                 estimation_step: int = 1,\n                  target_update_freq: Optional[int] = 0,\n",
        "source_code_with_indent": "                 optim: torch.optim.Optimizer,\n                 discount_factor: Optional[float] = 0.99,\n                 estimation_step: Optional[int] = 1,\n                 target_update_freq: Optional[int] = 0,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                 optim: torch.optim.Optimizer,\n                 discount_factor: float = 0.99,\n                 estimation_step: int = 1,\n                 target_update_freq: Optional[int] = 0,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "thu-ml/tianshou",
    "commit": "0eef0ca1985b4659e7e57aadaa7902613ff35001",
    "filename": "tianshou/policy/modelfree/dqn.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/thu-ml-tianshou/tianshou/policy/modelfree/dqn.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tianshou/policy/modelfree/dqn.py:40:20 Unsupported operand [58]: `<=` is not supported for operand types `Optional[float]` and `int`.",
    "message": " `<=` is not supported for operand types `Optional[float]` and `int`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 40,
    "warning_line": "        assert 0 <= discount_factor <= 1, 'discount_factor should in [0, 1]'",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                 optim: torch.optim.Optimizer,\n                 discount_factor: Optional[float] = 0.99,\n                 estimation_step: Optional[int] = 1,\n                 target_update_freq: Optional[int] = 0,\n",
        "source_code_len": 214,
        "target_code": "                 optim: torch.optim.Optimizer,\n                 discount_factor: float = 0.99,\n                 estimation_step: int = 1,\n                 target_update_freq: Optional[int] = 0,\n",
        "target_code_len": 194,
        "diff_format": "@@ -31,4 +31,4 @@\n                  optim: torch.optim.Optimizer,\n-                 discount_factor: Optional[float] = 0.99,\n-                 estimation_step: Optional[int] = 1,\n+                 discount_factor: float = 0.99,\n+                 estimation_step: int = 1,\n                  target_update_freq: Optional[int] = 0,\n",
        "source_code_with_indent": "                 optim: torch.optim.Optimizer,\n                 discount_factor: Optional[float] = 0.99,\n                 estimation_step: Optional[int] = 1,\n                 target_update_freq: Optional[int] = 0,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                 optim: torch.optim.Optimizer,\n                 discount_factor: float = 0.99,\n                 estimation_step: int = 1,\n                 target_update_freq: Optional[int] = 0,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "thu-ml/tianshou",
    "commit": "0eef0ca1985b4659e7e57aadaa7902613ff35001",
    "filename": "tianshou/policy/modelfree/dqn.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/thu-ml-tianshou/tianshou/policy/modelfree/dqn.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tianshou/policy/modelfree/dqn.py:44:23 Unsupported operand [58]: `>` is not supported for operand types `Optional[int]` and `int`.",
    "message": " `>` is not supported for operand types `Optional[int]` and `int`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 44,
    "warning_line": "        self._target = target_update_freq > 0"
  },
  {
    "project": "thu-ml/tianshou",
    "commit": "0eef0ca1985b4659e7e57aadaa7902613ff35001",
    "filename": "tianshou/policy/modelfree/dqn.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/thu-ml-tianshou/tianshou/policy/modelfree/dqn.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tianshou/policy/modelfree/dqn.py:85:23 Unsupported operand [58]: `-` is not supported for operand types `Optional[int]` and `int`.",
    "message": " `-` is not supported for operand types `Optional[int]` and `int`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 85,
    "warning_line": "        for n in range(self._n_step - 1, -1, -1):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                 optim: torch.optim.Optimizer,\n                 discount_factor: Optional[float] = 0.99,\n                 estimation_step: Optional[int] = 1,\n                 target_update_freq: Optional[int] = 0,\n",
        "source_code_len": 214,
        "target_code": "                 optim: torch.optim.Optimizer,\n                 discount_factor: float = 0.99,\n                 estimation_step: int = 1,\n                 target_update_freq: Optional[int] = 0,\n",
        "target_code_len": 194,
        "diff_format": "@@ -31,4 +31,4 @@\n                  optim: torch.optim.Optimizer,\n-                 discount_factor: Optional[float] = 0.99,\n-                 estimation_step: Optional[int] = 1,\n+                 discount_factor: float = 0.99,\n+                 estimation_step: int = 1,\n                  target_update_freq: Optional[int] = 0,\n",
        "source_code_with_indent": "                 optim: torch.optim.Optimizer,\n                 discount_factor: Optional[float] = 0.99,\n                 estimation_step: Optional[int] = 1,\n                 target_update_freq: Optional[int] = 0,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                 optim: torch.optim.Optimizer,\n                 discount_factor: float = 0.99,\n                 estimation_step: int = 1,\n                 target_update_freq: Optional[int] = 0,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "thu-ml/tianshou",
    "commit": "0eef0ca1985b4659e7e57aadaa7902613ff35001",
    "filename": "tianshou/policy/modelfree/dqn.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/thu-ml-tianshou/tianshou/policy/modelfree/dqn.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tianshou/policy/modelfree/dqn.py:89:40 Unsupported operand [58]: `*` is not supported for operand types `Optional[float]` and `typing.Any`.",
    "message": " `*` is not supported for operand types `Optional[float]` and `typing.Any`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 89,
    "warning_line": "            returns = buffer.rew[now] + self._gamma * returns",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                 optim: torch.optim.Optimizer,\n                 discount_factor: Optional[float] = 0.99,\n                 estimation_step: Optional[int] = 1,\n                 target_update_freq: Optional[int] = 0,\n",
        "source_code_len": 214,
        "target_code": "                 optim: torch.optim.Optimizer,\n                 discount_factor: float = 0.99,\n                 estimation_step: int = 1,\n                 target_update_freq: Optional[int] = 0,\n",
        "target_code_len": 194,
        "diff_format": "@@ -31,4 +31,4 @@\n                  optim: torch.optim.Optimizer,\n-                 discount_factor: Optional[float] = 0.99,\n-                 estimation_step: Optional[int] = 1,\n+                 discount_factor: float = 0.99,\n+                 estimation_step: int = 1,\n                  target_update_freq: Optional[int] = 0,\n",
        "source_code_with_indent": "                 optim: torch.optim.Optimizer,\n                 discount_factor: Optional[float] = 0.99,\n                 estimation_step: Optional[int] = 1,\n                 target_update_freq: Optional[int] = 0,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                 optim: torch.optim.Optimizer,\n                 discount_factor: float = 0.99,\n                 estimation_step: int = 1,\n                 target_update_freq: Optional[int] = 0,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "thu-ml/tianshou",
    "commit": "0eef0ca1985b4659e7e57aadaa7902613ff35001",
    "filename": "tianshou/policy/modelfree/dqn.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/thu-ml-tianshou/tianshou/policy/modelfree/dqn.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tianshou/policy/modelfree/dqn.py:106:20 Unsupported operand [58]: `**` is not supported for operand types `Optional[float]` and `typing.Any`.",
    "message": " `**` is not supported for operand types `Optional[float]` and `typing.Any`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 106,
    "warning_line": "        returns += (self._gamma ** gammas) * target_q",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                 optim: torch.optim.Optimizer,\n                 discount_factor: Optional[float] = 0.99,\n                 estimation_step: Optional[int] = 1,\n                 target_update_freq: Optional[int] = 0,\n",
        "source_code_len": 214,
        "target_code": "                 optim: torch.optim.Optimizer,\n                 discount_factor: float = 0.99,\n                 estimation_step: int = 1,\n                 target_update_freq: Optional[int] = 0,\n",
        "target_code_len": 194,
        "diff_format": "@@ -31,4 +31,4 @@\n                  optim: torch.optim.Optimizer,\n-                 discount_factor: Optional[float] = 0.99,\n-                 estimation_step: Optional[int] = 1,\n+                 discount_factor: float = 0.99,\n+                 estimation_step: int = 1,\n                  target_update_freq: Optional[int] = 0,\n",
        "source_code_with_indent": "                 optim: torch.optim.Optimizer,\n                 discount_factor: Optional[float] = 0.99,\n                 estimation_step: Optional[int] = 1,\n                 target_update_freq: Optional[int] = 0,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                 optim: torch.optim.Optimizer,\n                 discount_factor: float = 0.99,\n                 estimation_step: int = 1,\n                 target_update_freq: Optional[int] = 0,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "thu-ml/tianshou",
    "commit": "0eef0ca1985b4659e7e57aadaa7902613ff35001",
    "filename": "tianshou/policy/modelfree/dqn.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/thu-ml-tianshou/tianshou/policy/modelfree/dqn.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tianshou/policy/modelfree/dqn.py:146:30 Incompatible parameter type [6]: Expected `str` for 2nd positional only parameter to call `getattr` but got `Optional[str]`.",
    "message": " Expected `str` for 2nd positional only parameter to call `getattr` but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 146,
    "warning_line": "        model = getattr(self, model)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                state: Optional[Union[dict, Batch, np.ndarray]] = None,\n                model: Optional[str] = 'model',\n                input: Optional[str] = 'obs',\n                eps: Optional[float] = None,\n",
        "source_code_len": 211,
        "target_code": "                state: Optional[Union[dict, Batch, np.ndarray]] = None,\n                model: str = 'model',\n                input: str = 'obs',\n                eps: Optional[float] = None,\n",
        "target_code_len": 191,
        "diff_format": "@@ -126,4 +126,4 @@\n                 state: Optional[Union[dict, Batch, np.ndarray]] = None,\n-                model: Optional[str] = 'model',\n-                input: Optional[str] = 'obs',\n+                model: str = 'model',\n+                input: str = 'obs',\n                 eps: Optional[float] = None,\n",
        "source_code_with_indent": "                state: Optional[Union[dict, Batch, np.ndarray]] = None,\n                model: Optional[str] = 'model',\n                input: Optional[str] = 'obs',\n                eps: Optional[float] = None,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                state: Optional[Union[dict, Batch, np.ndarray]] = None,\n                model: str = 'model',\n                input: str = 'obs',\n                eps: Optional[float] = None,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "thu-ml/tianshou",
    "commit": "0eef0ca1985b4659e7e57aadaa7902613ff35001",
    "filename": "tianshou/policy/modelfree/dqn.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/thu-ml-tianshou/tianshou/policy/modelfree/dqn.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tianshou/policy/modelfree/dqn.py:147:29 Incompatible parameter type [6]: Expected `str` for 2nd positional only parameter to call `getattr` but got `Optional[str]`.",
    "message": " Expected `str` for 2nd positional only parameter to call `getattr` but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 147,
    "warning_line": "        obs = getattr(batch, input)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                state: Optional[Union[dict, Batch, np.ndarray]] = None,\n                model: Optional[str] = 'model',\n                input: Optional[str] = 'obs',\n                eps: Optional[float] = None,\n",
        "source_code_len": 211,
        "target_code": "                state: Optional[Union[dict, Batch, np.ndarray]] = None,\n                model: str = 'model',\n                input: str = 'obs',\n                eps: Optional[float] = None,\n",
        "target_code_len": 191,
        "diff_format": "@@ -126,4 +126,4 @@\n                 state: Optional[Union[dict, Batch, np.ndarray]] = None,\n-                model: Optional[str] = 'model',\n-                input: Optional[str] = 'obs',\n+                model: str = 'model',\n+                input: str = 'obs',\n                 eps: Optional[float] = None,\n",
        "source_code_with_indent": "                state: Optional[Union[dict, Batch, np.ndarray]] = None,\n                model: Optional[str] = 'model',\n                input: Optional[str] = 'obs',\n                eps: Optional[float] = None,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                state: Optional[Union[dict, Batch, np.ndarray]] = None,\n                model: str = 'model',\n                input: str = 'obs',\n                eps: Optional[float] = None,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "thu-ml/tianshou",
    "commit": "0eef0ca1985b4659e7e57aadaa7902613ff35001",
    "filename": "tianshou/policy/modelfree/pg.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/thu-ml-tianshou/tianshou/policy/modelfree/pg.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tianshou/policy/modelfree/pg.py:36:20 Unsupported operand [58]: `<=` is not supported for operand types `int` and `Optional[float]`.",
    "message": " `<=` is not supported for operand types `int` and `Optional[float]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 36,
    "warning_line": "        assert 0 <= discount_factor <= 1, 'discount factor should in [0, 1]'",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                 optim: torch.optim.Optimizer,\n                 dist_fn: Optional[torch.distributions.Distribution]\n                 = torch.distributions.Categorical,\n                 discount_factor: Optional[float] = 0.99,\n                 reward_normalization: Optional[bool] = False,\n                 **kwargs) -> None:\n",
        "source_code_len": 325,
        "target_code": "                 optim: torch.optim.Optimizer,\n                 dist_fn: torch.distributions.Distribution\n                 = torch.distributions.Categorical,\n                 discount_factor: float = 0.99,\n                 reward_normalization: bool = False,\n                 **kwargs) -> None:\n",
        "target_code_len": 295,
        "diff_format": "@@ -26,6 +26,6 @@\n                  optim: torch.optim.Optimizer,\n-                 dist_fn: Optional[torch.distributions.Distribution]\n+                 dist_fn: torch.distributions.Distribution\n                  = torch.distributions.Categorical,\n-                 discount_factor: Optional[float] = 0.99,\n-                 reward_normalization: Optional[bool] = False,\n+                 discount_factor: float = 0.99,\n+                 reward_normalization: bool = False,\n                  **kwargs) -> None:\n",
        "source_code_with_indent": "                 optim: torch.optim.Optimizer,\n                 dist_fn: Optional[torch.distributions.Distribution]\n                 = torch.distributions.Categorical,\n                 discount_factor: Optional[float] = 0.99,\n                 reward_normalization: Optional[bool] = False,\n                 **kwargs) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                 optim: torch.optim.Optimizer,\n                 dist_fn: torch.distributions.Distribution\n                 = torch.distributions.Categorical,\n                 discount_factor: float = 0.99,\n                 reward_normalization: bool = False,\n                 **kwargs) -> None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "thu-ml/tianshou",
    "commit": "0eef0ca1985b4659e7e57aadaa7902613ff35001",
    "filename": "tianshou/policy/modelfree/pg.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/thu-ml-tianshou/tianshou/policy/modelfree/pg.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tianshou/policy/modelfree/pg.py:36:20 Unsupported operand [58]: `<=` is not supported for operand types `Optional[float]` and `int`.",
    "message": " `<=` is not supported for operand types `Optional[float]` and `int`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 36,
    "warning_line": "        assert 0 <= discount_factor <= 1, 'discount factor should in [0, 1]'",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                 optim: torch.optim.Optimizer,\n                 dist_fn: Optional[torch.distributions.Distribution]\n                 = torch.distributions.Categorical,\n                 discount_factor: Optional[float] = 0.99,\n                 reward_normalization: Optional[bool] = False,\n                 **kwargs) -> None:\n",
        "source_code_len": 325,
        "target_code": "                 optim: torch.optim.Optimizer,\n                 dist_fn: torch.distributions.Distribution\n                 = torch.distributions.Categorical,\n                 discount_factor: float = 0.99,\n                 reward_normalization: bool = False,\n                 **kwargs) -> None:\n",
        "target_code_len": 295,
        "diff_format": "@@ -26,6 +26,6 @@\n                  optim: torch.optim.Optimizer,\n-                 dist_fn: Optional[torch.distributions.Distribution]\n+                 dist_fn: torch.distributions.Distribution\n                  = torch.distributions.Categorical,\n-                 discount_factor: Optional[float] = 0.99,\n-                 reward_normalization: Optional[bool] = False,\n+                 discount_factor: float = 0.99,\n+                 reward_normalization: bool = False,\n                  **kwargs) -> None:\n",
        "source_code_with_indent": "                 optim: torch.optim.Optimizer,\n                 dist_fn: Optional[torch.distributions.Distribution]\n                 = torch.distributions.Categorical,\n                 discount_factor: Optional[float] = 0.99,\n                 reward_normalization: Optional[bool] = False,\n                 **kwargs) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                 optim: torch.optim.Optimizer,\n                 dist_fn: torch.distributions.Distribution\n                 = torch.distributions.Categorical,\n                 discount_factor: float = 0.99,\n                 reward_normalization: bool = False,\n                 **kwargs) -> None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "thu-ml/tianshou",
    "commit": "0eef0ca1985b4659e7e57aadaa7902613ff35001",
    "filename": "tianshou/policy/modelfree/ppo.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/thu-ml-tianshou/tianshou/policy/modelfree/ppo.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tianshou/policy/modelfree/ppo.py:70:20 Unsupported operand [58]: `<=` is not supported for operand types `int` and `Optional[float]`.",
    "message": " `<=` is not supported for operand types `int` and `Optional[float]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 70,
    "warning_line": "        assert 0 <= gae_lambda <= 1, 'GAE lambda should be in [0, 1].'",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                 dist_fn: torch.distributions.Distribution,\n                 discount_factor: Optional[float] = 0.99,\n                 max_grad_norm: Optional[float] = None,\n                 eps_clip: Optional[float] = .2,\n                 vf_coef: Optional[float] = .5,\n                 ent_coef: Optional[float] = .01,\n                 action_range: Optional[Tuple[float, float]] = None,\n                 gae_lambda: Optional[float] = 0.95,\n                 dual_clip: Optional[float] = 5.,\n                 value_clip: Optional[bool] = True,\n                 reward_normalization: Optional[bool] = True,\n                 **kwargs) -> None:\n",
        "source_code_len": 643,
        "target_code": "                 dist_fn: torch.distributions.Distribution,\n                 discount_factor: float = 0.99,\n                 max_grad_norm: Optional[float] = None,\n                 eps_clip: float = .2,\n                 vf_coef: float = .5,\n                 ent_coef: float = .01,\n                 action_range: Optional[Tuple[float, float]] = None,\n                 gae_lambda: float = 0.95,\n                 dual_clip: float = 5.,\n                 value_clip: bool = True,\n                 reward_normalization: bool = True,\n                 **kwargs) -> None:\n",
        "target_code_len": 563,
        "diff_format": "@@ -48,12 +48,12 @@\n                  dist_fn: torch.distributions.Distribution,\n-                 discount_factor: Optional[float] = 0.99,\n+                 discount_factor: float = 0.99,\n                  max_grad_norm: Optional[float] = None,\n-                 eps_clip: Optional[float] = .2,\n-                 vf_coef: Optional[float] = .5,\n-                 ent_coef: Optional[float] = .01,\n+                 eps_clip: float = .2,\n+                 vf_coef: float = .5,\n+                 ent_coef: float = .01,\n                  action_range: Optional[Tuple[float, float]] = None,\n-                 gae_lambda: Optional[float] = 0.95,\n-                 dual_clip: Optional[float] = 5.,\n-                 value_clip: Optional[bool] = True,\n-                 reward_normalization: Optional[bool] = True,\n+                 gae_lambda: float = 0.95,\n+                 dual_clip: float = 5.,\n+                 value_clip: bool = True,\n+                 reward_normalization: bool = True,\n                  **kwargs) -> None:\n",
        "source_code_with_indent": "                 dist_fn: torch.distributions.Distribution,\n                 discount_factor: Optional[float] = 0.99,\n                 max_grad_norm: Optional[float] = None,\n                 eps_clip: Optional[float] = .2,\n                 vf_coef: Optional[float] = .5,\n                 ent_coef: Optional[float] = .01,\n                 action_range: Optional[Tuple[float, float]] = None,\n                 gae_lambda: Optional[float] = 0.95,\n                 dual_clip: Optional[float] = 5.,\n                 value_clip: Optional[bool] = True,\n                 reward_normalization: Optional[bool] = True,\n                 **kwargs) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                 dist_fn: torch.distributions.Distribution,\n                 discount_factor: float = 0.99,\n                 max_grad_norm: Optional[float] = None,\n                 eps_clip: float = .2,\n                 vf_coef: float = .5,\n                 ent_coef: float = .01,\n                 action_range: Optional[Tuple[float, float]] = None,\n                 gae_lambda: float = 0.95,\n                 dual_clip: float = 5.,\n                 value_clip: bool = True,\n                 reward_normalization: bool = True,\n                 **kwargs) -> None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "thu-ml/tianshou",
    "commit": "0eef0ca1985b4659e7e57aadaa7902613ff35001",
    "filename": "tianshou/policy/modelfree/ppo.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/thu-ml-tianshou/tianshou/policy/modelfree/ppo.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tianshou/policy/modelfree/ppo.py:70:20 Unsupported operand [58]: `<=` is not supported for operand types `Optional[float]` and `int`.",
    "message": " `<=` is not supported for operand types `Optional[float]` and `int`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 70,
    "warning_line": "        assert 0 <= gae_lambda <= 1, 'GAE lambda should be in [0, 1].'",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                 dist_fn: torch.distributions.Distribution,\n                 discount_factor: Optional[float] = 0.99,\n                 max_grad_norm: Optional[float] = None,\n                 eps_clip: Optional[float] = .2,\n                 vf_coef: Optional[float] = .5,\n                 ent_coef: Optional[float] = .01,\n                 action_range: Optional[Tuple[float, float]] = None,\n                 gae_lambda: Optional[float] = 0.95,\n                 dual_clip: Optional[float] = 5.,\n                 value_clip: Optional[bool] = True,\n                 reward_normalization: Optional[bool] = True,\n                 **kwargs) -> None:\n",
        "source_code_len": 643,
        "target_code": "                 dist_fn: torch.distributions.Distribution,\n                 discount_factor: float = 0.99,\n                 max_grad_norm: Optional[float] = None,\n                 eps_clip: float = .2,\n                 vf_coef: float = .5,\n                 ent_coef: float = .01,\n                 action_range: Optional[Tuple[float, float]] = None,\n                 gae_lambda: float = 0.95,\n                 dual_clip: float = 5.,\n                 value_clip: bool = True,\n                 reward_normalization: bool = True,\n                 **kwargs) -> None:\n",
        "target_code_len": 563,
        "diff_format": "@@ -48,12 +48,12 @@\n                  dist_fn: torch.distributions.Distribution,\n-                 discount_factor: Optional[float] = 0.99,\n+                 discount_factor: float = 0.99,\n                  max_grad_norm: Optional[float] = None,\n-                 eps_clip: Optional[float] = .2,\n-                 vf_coef: Optional[float] = .5,\n-                 ent_coef: Optional[float] = .01,\n+                 eps_clip: float = .2,\n+                 vf_coef: float = .5,\n+                 ent_coef: float = .01,\n                  action_range: Optional[Tuple[float, float]] = None,\n-                 gae_lambda: Optional[float] = 0.95,\n-                 dual_clip: Optional[float] = 5.,\n-                 value_clip: Optional[bool] = True,\n-                 reward_normalization: Optional[bool] = True,\n+                 gae_lambda: float = 0.95,\n+                 dual_clip: float = 5.,\n+                 value_clip: bool = True,\n+                 reward_normalization: bool = True,\n                  **kwargs) -> None:\n",
        "source_code_with_indent": "                 dist_fn: torch.distributions.Distribution,\n                 discount_factor: Optional[float] = 0.99,\n                 max_grad_norm: Optional[float] = None,\n                 eps_clip: Optional[float] = .2,\n                 vf_coef: Optional[float] = .5,\n                 ent_coef: Optional[float] = .01,\n                 action_range: Optional[Tuple[float, float]] = None,\n                 gae_lambda: Optional[float] = 0.95,\n                 dual_clip: Optional[float] = 5.,\n                 value_clip: Optional[bool] = True,\n                 reward_normalization: Optional[bool] = True,\n                 **kwargs) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                 dist_fn: torch.distributions.Distribution,\n                 discount_factor: float = 0.99,\n                 max_grad_norm: Optional[float] = None,\n                 eps_clip: float = .2,\n                 vf_coef: float = .5,\n                 ent_coef: float = .01,\n                 action_range: Optional[Tuple[float, float]] = None,\n                 gae_lambda: float = 0.95,\n                 dual_clip: float = 5.,\n                 value_clip: bool = True,\n                 reward_normalization: bool = True,\n                 **kwargs) -> None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "thu-ml/tianshou",
    "commit": "0eef0ca1985b4659e7e57aadaa7902613ff35001",
    "filename": "tianshou/policy/modelfree/ppo.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/thu-ml-tianshou/tianshou/policy/modelfree/ppo.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tianshou/policy/modelfree/ppo.py:157:25 Unsupported operand [58]: `-` is not supported for operand types `float` and `Optional[float]`.",
    "message": " `-` is not supported for operand types `float` and `Optional[float]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 157,
    "warning_line": "                    1. - self._eps_clip, 1. + self._eps_clip) * b.adv",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                 dist_fn: torch.distributions.Distribution,\n                 discount_factor: Optional[float] = 0.99,\n                 max_grad_norm: Optional[float] = None,\n                 eps_clip: Optional[float] = .2,\n                 vf_coef: Optional[float] = .5,\n                 ent_coef: Optional[float] = .01,\n                 action_range: Optional[Tuple[float, float]] = None,\n                 gae_lambda: Optional[float] = 0.95,\n                 dual_clip: Optional[float] = 5.,\n                 value_clip: Optional[bool] = True,\n                 reward_normalization: Optional[bool] = True,\n                 **kwargs) -> None:\n",
        "source_code_len": 643,
        "target_code": "                 dist_fn: torch.distributions.Distribution,\n                 discount_factor: float = 0.99,\n                 max_grad_norm: Optional[float] = None,\n                 eps_clip: float = .2,\n                 vf_coef: float = .5,\n                 ent_coef: float = .01,\n                 action_range: Optional[Tuple[float, float]] = None,\n                 gae_lambda: float = 0.95,\n                 dual_clip: float = 5.,\n                 value_clip: bool = True,\n                 reward_normalization: bool = True,\n                 **kwargs) -> None:\n",
        "target_code_len": 563,
        "diff_format": "@@ -48,12 +48,12 @@\n                  dist_fn: torch.distributions.Distribution,\n-                 discount_factor: Optional[float] = 0.99,\n+                 discount_factor: float = 0.99,\n                  max_grad_norm: Optional[float] = None,\n-                 eps_clip: Optional[float] = .2,\n-                 vf_coef: Optional[float] = .5,\n-                 ent_coef: Optional[float] = .01,\n+                 eps_clip: float = .2,\n+                 vf_coef: float = .5,\n+                 ent_coef: float = .01,\n                  action_range: Optional[Tuple[float, float]] = None,\n-                 gae_lambda: Optional[float] = 0.95,\n-                 dual_clip: Optional[float] = 5.,\n-                 value_clip: Optional[bool] = True,\n-                 reward_normalization: Optional[bool] = True,\n+                 gae_lambda: float = 0.95,\n+                 dual_clip: float = 5.,\n+                 value_clip: bool = True,\n+                 reward_normalization: bool = True,\n                  **kwargs) -> None:\n",
        "source_code_with_indent": "                 dist_fn: torch.distributions.Distribution,\n                 discount_factor: Optional[float] = 0.99,\n                 max_grad_norm: Optional[float] = None,\n                 eps_clip: Optional[float] = .2,\n                 vf_coef: Optional[float] = .5,\n                 ent_coef: Optional[float] = .01,\n                 action_range: Optional[Tuple[float, float]] = None,\n                 gae_lambda: Optional[float] = 0.95,\n                 dual_clip: Optional[float] = 5.,\n                 value_clip: Optional[bool] = True,\n                 reward_normalization: Optional[bool] = True,\n                 **kwargs) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                 dist_fn: torch.distributions.Distribution,\n                 discount_factor: float = 0.99,\n                 max_grad_norm: Optional[float] = None,\n                 eps_clip: float = .2,\n                 vf_coef: float = .5,\n                 ent_coef: float = .01,\n                 action_range: Optional[Tuple[float, float]] = None,\n                 gae_lambda: float = 0.95,\n                 dual_clip: float = 5.,\n                 value_clip: bool = True,\n                 reward_normalization: bool = True,\n                 **kwargs) -> None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "thu-ml/tianshou",
    "commit": "0eef0ca1985b4659e7e57aadaa7902613ff35001",
    "filename": "tianshou/policy/modelfree/ppo.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/thu-ml-tianshou/tianshou/policy/modelfree/ppo.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tianshou/policy/modelfree/ppo.py:157:46 Unsupported operand [58]: `+` is not supported for operand types `float` and `Optional[float]`.",
    "message": " `+` is not supported for operand types `float` and `Optional[float]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 157,
    "warning_line": "                    1. - self._eps_clip, 1. + self._eps_clip) * b.adv",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                 dist_fn: torch.distributions.Distribution,\n                 discount_factor: Optional[float] = 0.99,\n                 max_grad_norm: Optional[float] = None,\n                 eps_clip: Optional[float] = .2,\n                 vf_coef: Optional[float] = .5,\n                 ent_coef: Optional[float] = .01,\n                 action_range: Optional[Tuple[float, float]] = None,\n                 gae_lambda: Optional[float] = 0.95,\n                 dual_clip: Optional[float] = 5.,\n                 value_clip: Optional[bool] = True,\n                 reward_normalization: Optional[bool] = True,\n                 **kwargs) -> None:\n",
        "source_code_len": 643,
        "target_code": "                 dist_fn: torch.distributions.Distribution,\n                 discount_factor: float = 0.99,\n                 max_grad_norm: Optional[float] = None,\n                 eps_clip: float = .2,\n                 vf_coef: float = .5,\n                 ent_coef: float = .01,\n                 action_range: Optional[Tuple[float, float]] = None,\n                 gae_lambda: float = 0.95,\n                 dual_clip: float = 5.,\n                 value_clip: bool = True,\n                 reward_normalization: bool = True,\n                 **kwargs) -> None:\n",
        "target_code_len": 563,
        "diff_format": "@@ -48,12 +48,12 @@\n                  dist_fn: torch.distributions.Distribution,\n-                 discount_factor: Optional[float] = 0.99,\n+                 discount_factor: float = 0.99,\n                  max_grad_norm: Optional[float] = None,\n-                 eps_clip: Optional[float] = .2,\n-                 vf_coef: Optional[float] = .5,\n-                 ent_coef: Optional[float] = .01,\n+                 eps_clip: float = .2,\n+                 vf_coef: float = .5,\n+                 ent_coef: float = .01,\n                  action_range: Optional[Tuple[float, float]] = None,\n-                 gae_lambda: Optional[float] = 0.95,\n-                 dual_clip: Optional[float] = 5.,\n-                 value_clip: Optional[bool] = True,\n-                 reward_normalization: Optional[bool] = True,\n+                 gae_lambda: float = 0.95,\n+                 dual_clip: float = 5.,\n+                 value_clip: bool = True,\n+                 reward_normalization: bool = True,\n                  **kwargs) -> None:\n",
        "source_code_with_indent": "                 dist_fn: torch.distributions.Distribution,\n                 discount_factor: Optional[float] = 0.99,\n                 max_grad_norm: Optional[float] = None,\n                 eps_clip: Optional[float] = .2,\n                 vf_coef: Optional[float] = .5,\n                 ent_coef: Optional[float] = .01,\n                 action_range: Optional[Tuple[float, float]] = None,\n                 gae_lambda: Optional[float] = 0.95,\n                 dual_clip: Optional[float] = 5.,\n                 value_clip: Optional[bool] = True,\n                 reward_normalization: Optional[bool] = True,\n                 **kwargs) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                 dist_fn: torch.distributions.Distribution,\n                 discount_factor: float = 0.99,\n                 max_grad_norm: Optional[float] = None,\n                 eps_clip: float = .2,\n                 vf_coef: float = .5,\n                 ent_coef: float = .01,\n                 action_range: Optional[Tuple[float, float]] = None,\n                 gae_lambda: float = 0.95,\n                 dual_clip: float = 5.,\n                 value_clip: bool = True,\n                 reward_normalization: bool = True,\n                 **kwargs) -> None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "thu-ml/tianshou",
    "commit": "0eef0ca1985b4659e7e57aadaa7902613ff35001",
    "filename": "tianshou/policy/modelfree/ppo.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/thu-ml-tianshou/tianshou/policy/modelfree/ppo.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tianshou/policy/modelfree/ppo.py:160:43 Unsupported operand [58]: `*` is not supported for operand types `Optional[float]` and `typing.Any`.",
    "message": " `*` is not supported for operand types `Optional[float]` and `typing.Any`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 160,
    "warning_line": "                                           self._dual_clip * b.adv).mean()",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                 dist_fn: torch.distributions.Distribution,\n                 discount_factor: Optional[float] = 0.99,\n                 max_grad_norm: Optional[float] = None,\n                 eps_clip: Optional[float] = .2,\n                 vf_coef: Optional[float] = .5,\n                 ent_coef: Optional[float] = .01,\n                 action_range: Optional[Tuple[float, float]] = None,\n                 gae_lambda: Optional[float] = 0.95,\n                 dual_clip: Optional[float] = 5.,\n                 value_clip: Optional[bool] = True,\n                 reward_normalization: Optional[bool] = True,\n                 **kwargs) -> None:\n",
        "source_code_len": 643,
        "target_code": "                 dist_fn: torch.distributions.Distribution,\n                 discount_factor: float = 0.99,\n                 max_grad_norm: Optional[float] = None,\n                 eps_clip: float = .2,\n                 vf_coef: float = .5,\n                 ent_coef: float = .01,\n                 action_range: Optional[Tuple[float, float]] = None,\n                 gae_lambda: float = 0.95,\n                 dual_clip: float = 5.,\n                 value_clip: bool = True,\n                 reward_normalization: bool = True,\n                 **kwargs) -> None:\n",
        "target_code_len": 563,
        "diff_format": "@@ -48,12 +48,12 @@\n                  dist_fn: torch.distributions.Distribution,\n-                 discount_factor: Optional[float] = 0.99,\n+                 discount_factor: float = 0.99,\n                  max_grad_norm: Optional[float] = None,\n-                 eps_clip: Optional[float] = .2,\n-                 vf_coef: Optional[float] = .5,\n-                 ent_coef: Optional[float] = .01,\n+                 eps_clip: float = .2,\n+                 vf_coef: float = .5,\n+                 ent_coef: float = .01,\n                  action_range: Optional[Tuple[float, float]] = None,\n-                 gae_lambda: Optional[float] = 0.95,\n-                 dual_clip: Optional[float] = 5.,\n-                 value_clip: Optional[bool] = True,\n-                 reward_normalization: Optional[bool] = True,\n+                 gae_lambda: float = 0.95,\n+                 dual_clip: float = 5.,\n+                 value_clip: bool = True,\n+                 reward_normalization: bool = True,\n                  **kwargs) -> None:\n",
        "source_code_with_indent": "                 dist_fn: torch.distributions.Distribution,\n                 discount_factor: Optional[float] = 0.99,\n                 max_grad_norm: Optional[float] = None,\n                 eps_clip: Optional[float] = .2,\n                 vf_coef: Optional[float] = .5,\n                 ent_coef: Optional[float] = .01,\n                 action_range: Optional[Tuple[float, float]] = None,\n                 gae_lambda: Optional[float] = 0.95,\n                 dual_clip: Optional[float] = 5.,\n                 value_clip: Optional[bool] = True,\n                 reward_normalization: Optional[bool] = True,\n                 **kwargs) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                 dist_fn: torch.distributions.Distribution,\n                 discount_factor: float = 0.99,\n                 max_grad_norm: Optional[float] = None,\n                 eps_clip: float = .2,\n                 vf_coef: float = .5,\n                 ent_coef: float = .01,\n                 action_range: Optional[Tuple[float, float]] = None,\n                 gae_lambda: float = 0.95,\n                 dual_clip: float = 5.,\n                 value_clip: bool = True,\n                 reward_normalization: bool = True,\n                 **kwargs) -> None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "thu-ml/tianshou",
    "commit": "0eef0ca1985b4659e7e57aadaa7902613ff35001",
    "filename": "tianshou/policy/modelfree/ppo.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/thu-ml-tianshou/tianshou/policy/modelfree/ppo.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tianshou/policy/modelfree/ppo.py:175:35 Unsupported operand [58]: `*` is not supported for operand types `Optional[float]` and `float`.",
    "message": " `*` is not supported for operand types `Optional[float]` and `float`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 175,
    "warning_line": "                loss = clip_loss + self._w_vf * vf_loss - self._w_ent * e_loss",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                 dist_fn: torch.distributions.Distribution,\n                 discount_factor: Optional[float] = 0.99,\n                 max_grad_norm: Optional[float] = None,\n                 eps_clip: Optional[float] = .2,\n                 vf_coef: Optional[float] = .5,\n                 ent_coef: Optional[float] = .01,\n                 action_range: Optional[Tuple[float, float]] = None,\n                 gae_lambda: Optional[float] = 0.95,\n                 dual_clip: Optional[float] = 5.,\n                 value_clip: Optional[bool] = True,\n                 reward_normalization: Optional[bool] = True,\n                 **kwargs) -> None:\n",
        "source_code_len": 643,
        "target_code": "                 dist_fn: torch.distributions.Distribution,\n                 discount_factor: float = 0.99,\n                 max_grad_norm: Optional[float] = None,\n                 eps_clip: float = .2,\n                 vf_coef: float = .5,\n                 ent_coef: float = .01,\n                 action_range: Optional[Tuple[float, float]] = None,\n                 gae_lambda: float = 0.95,\n                 dual_clip: float = 5.,\n                 value_clip: bool = True,\n                 reward_normalization: bool = True,\n                 **kwargs) -> None:\n",
        "target_code_len": 563,
        "diff_format": "@@ -48,12 +48,12 @@\n                  dist_fn: torch.distributions.Distribution,\n-                 discount_factor: Optional[float] = 0.99,\n+                 discount_factor: float = 0.99,\n                  max_grad_norm: Optional[float] = None,\n-                 eps_clip: Optional[float] = .2,\n-                 vf_coef: Optional[float] = .5,\n-                 ent_coef: Optional[float] = .01,\n+                 eps_clip: float = .2,\n+                 vf_coef: float = .5,\n+                 ent_coef: float = .01,\n                  action_range: Optional[Tuple[float, float]] = None,\n-                 gae_lambda: Optional[float] = 0.95,\n-                 dual_clip: Optional[float] = 5.,\n-                 value_clip: Optional[bool] = True,\n-                 reward_normalization: Optional[bool] = True,\n+                 gae_lambda: float = 0.95,\n+                 dual_clip: float = 5.,\n+                 value_clip: bool = True,\n+                 reward_normalization: bool = True,\n                  **kwargs) -> None:\n",
        "source_code_with_indent": "                 dist_fn: torch.distributions.Distribution,\n                 discount_factor: Optional[float] = 0.99,\n                 max_grad_norm: Optional[float] = None,\n                 eps_clip: Optional[float] = .2,\n                 vf_coef: Optional[float] = .5,\n                 ent_coef: Optional[float] = .01,\n                 action_range: Optional[Tuple[float, float]] = None,\n                 gae_lambda: Optional[float] = 0.95,\n                 dual_clip: Optional[float] = 5.,\n                 value_clip: Optional[bool] = True,\n                 reward_normalization: Optional[bool] = True,\n                 **kwargs) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                 dist_fn: torch.distributions.Distribution,\n                 discount_factor: float = 0.99,\n                 max_grad_norm: Optional[float] = None,\n                 eps_clip: float = .2,\n                 vf_coef: float = .5,\n                 ent_coef: float = .01,\n                 action_range: Optional[Tuple[float, float]] = None,\n                 gae_lambda: float = 0.95,\n                 dual_clip: float = 5.,\n                 value_clip: bool = True,\n                 reward_normalization: bool = True,\n                 **kwargs) -> None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "thu-ml/tianshou",
    "commit": "0eef0ca1985b4659e7e57aadaa7902613ff35001",
    "filename": "tianshou/policy/modelfree/ppo.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/thu-ml-tianshou/tianshou/policy/modelfree/ppo.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tianshou/policy/modelfree/ppo.py:175:58 Unsupported operand [58]: `*` is not supported for operand types `Optional[float]` and `typing.Any`.",
    "message": " `*` is not supported for operand types `Optional[float]` and `typing.Any`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 175,
    "warning_line": "                loss = clip_loss + self._w_vf * vf_loss - self._w_ent * e_loss",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                 dist_fn: torch.distributions.Distribution,\n                 discount_factor: Optional[float] = 0.99,\n                 max_grad_norm: Optional[float] = None,\n                 eps_clip: Optional[float] = .2,\n                 vf_coef: Optional[float] = .5,\n                 ent_coef: Optional[float] = .01,\n                 action_range: Optional[Tuple[float, float]] = None,\n                 gae_lambda: Optional[float] = 0.95,\n                 dual_clip: Optional[float] = 5.,\n                 value_clip: Optional[bool] = True,\n                 reward_normalization: Optional[bool] = True,\n                 **kwargs) -> None:\n",
        "source_code_len": 643,
        "target_code": "                 dist_fn: torch.distributions.Distribution,\n                 discount_factor: float = 0.99,\n                 max_grad_norm: Optional[float] = None,\n                 eps_clip: float = .2,\n                 vf_coef: float = .5,\n                 ent_coef: float = .01,\n                 action_range: Optional[Tuple[float, float]] = None,\n                 gae_lambda: float = 0.95,\n                 dual_clip: float = 5.,\n                 value_clip: bool = True,\n                 reward_normalization: bool = True,\n                 **kwargs) -> None:\n",
        "target_code_len": 563,
        "diff_format": "@@ -48,12 +48,12 @@\n                  dist_fn: torch.distributions.Distribution,\n-                 discount_factor: Optional[float] = 0.99,\n+                 discount_factor: float = 0.99,\n                  max_grad_norm: Optional[float] = None,\n-                 eps_clip: Optional[float] = .2,\n-                 vf_coef: Optional[float] = .5,\n-                 ent_coef: Optional[float] = .01,\n+                 eps_clip: float = .2,\n+                 vf_coef: float = .5,\n+                 ent_coef: float = .01,\n                  action_range: Optional[Tuple[float, float]] = None,\n-                 gae_lambda: Optional[float] = 0.95,\n-                 dual_clip: Optional[float] = 5.,\n-                 value_clip: Optional[bool] = True,\n-                 reward_normalization: Optional[bool] = True,\n+                 gae_lambda: float = 0.95,\n+                 dual_clip: float = 5.,\n+                 value_clip: bool = True,\n+                 reward_normalization: bool = True,\n                  **kwargs) -> None:\n",
        "source_code_with_indent": "                 dist_fn: torch.distributions.Distribution,\n                 discount_factor: Optional[float] = 0.99,\n                 max_grad_norm: Optional[float] = None,\n                 eps_clip: Optional[float] = .2,\n                 vf_coef: Optional[float] = .5,\n                 ent_coef: Optional[float] = .01,\n                 action_range: Optional[Tuple[float, float]] = None,\n                 gae_lambda: Optional[float] = 0.95,\n                 dual_clip: Optional[float] = 5.,\n                 value_clip: Optional[bool] = True,\n                 reward_normalization: Optional[bool] = True,\n                 **kwargs) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                 dist_fn: torch.distributions.Distribution,\n                 discount_factor: float = 0.99,\n                 max_grad_norm: Optional[float] = None,\n                 eps_clip: float = .2,\n                 vf_coef: float = .5,\n                 ent_coef: float = .01,\n                 action_range: Optional[Tuple[float, float]] = None,\n                 gae_lambda: float = 0.95,\n                 dual_clip: float = 5.,\n                 value_clip: bool = True,\n                 reward_normalization: bool = True,\n                 **kwargs) -> None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "thu-ml/tianshou",
    "commit": "0eef0ca1985b4659e7e57aadaa7902613ff35001",
    "filename": "tianshou/policy/modelfree/sac.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/thu-ml-tianshou/tianshou/policy/modelfree/sac.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tianshou/policy/modelfree/sac.py:86:39 Unsupported operand [58]: `-` is not supported for operand types `int` and `Optional[float]`.",
    "message": " `-` is not supported for operand types `int` and `Optional[float]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 86,
    "warning_line": "            o.data.copy_(o.data * (1 - self._tau) + n.data * self._tau)"
  },
  {
    "project": "thu-ml/tianshou",
    "commit": "0eef0ca1985b4659e7e57aadaa7902613ff35001",
    "filename": "tianshou/policy/modelfree/sac.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/thu-ml-tianshou/tianshou/policy/modelfree/sac.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tianshou/policy/modelfree/sac.py:89:39 Unsupported operand [58]: `-` is not supported for operand types `int` and `Optional[float]`.",
    "message": " `-` is not supported for operand types `int` and `Optional[float]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 89,
    "warning_line": "            o.data.copy_(o.data * (1 - self._tau) + n.data * self._tau)"
  },
  {
    "project": "thu-ml/tianshou",
    "commit": "0eef0ca1985b4659e7e57aadaa7902613ff35001",
    "filename": "tianshou/policy/modelfree/sac.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/thu-ml-tianshou/tianshou/policy/modelfree/sac.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tianshou/policy/modelfree/sac.py:94:29 Incompatible parameter type [6]: Expected `str` for 2nd positional only parameter to call `getattr` but got `Optional[str]`.",
    "message": " Expected `str` for 2nd positional only parameter to call `getattr` but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 94,
    "warning_line": "        obs = getattr(batch, input)"
  },
  {
    "project": "thu-ml/tianshou",
    "commit": "0eef0ca1985b4659e7e57aadaa7902613ff35001",
    "filename": "tianshou/policy/modelfree/sac.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/thu-ml-tianshou/tianshou/policy/modelfree/sac.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tianshou/policy/modelfree/sac.py:122:44 Unsupported operand [58]: `*` is not supported for operand types `float` and `Optional[float]`.",
    "message": " `*` is not supported for operand types `float` and `Optional[float]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 122,
    "warning_line": "            target_q = (rew + (1. - done) * self._gamma * target_q)"
  },
  {
    "project": "thu-ml/tianshou",
    "commit": "0eef0ca1985b4659e7e57aadaa7902613ff35001",
    "filename": "tianshou/policy/modelfree/td3.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/thu-ml-tianshou/tianshou/policy/modelfree/td3.py",
    "file_hunks_size": 1,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tianshou/policy/modelfree/td3.py:95:39 Unsupported operand [58]: `-` is not supported for operand types `int` and `Optional[float]`.",
    "message": " `-` is not supported for operand types `int` and `Optional[float]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 95,
    "warning_line": "            o.data.copy_(o.data * (1 - self._tau) + n.data * self._tau)"
  },
  {
    "project": "thu-ml/tianshou",
    "commit": "0eef0ca1985b4659e7e57aadaa7902613ff35001",
    "filename": "tianshou/policy/modelfree/td3.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/thu-ml-tianshou/tianshou/policy/modelfree/td3.py",
    "file_hunks_size": 1,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tianshou/policy/modelfree/td3.py:98:39 Unsupported operand [58]: `-` is not supported for operand types `int` and `Optional[float]`.",
    "message": " `-` is not supported for operand types `int` and `Optional[float]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 98,
    "warning_line": "            o.data.copy_(o.data * (1 - self._tau) + n.data * self._tau)"
  },
  {
    "project": "thu-ml/tianshou",
    "commit": "0eef0ca1985b4659e7e57aadaa7902613ff35001",
    "filename": "tianshou/policy/modelfree/td3.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/thu-ml-tianshou/tianshou/policy/modelfree/td3.py",
    "file_hunks_size": 1,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tianshou/policy/modelfree/td3.py:101:39 Unsupported operand [58]: `-` is not supported for operand types `int` and `Optional[float]`.",
    "message": " `-` is not supported for operand types `int` and `Optional[float]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 101,
    "warning_line": "            o.data.copy_(o.data * (1 - self._tau) + n.data * self._tau)"
  },
  {
    "project": "thu-ml/tianshou",
    "commit": "0eef0ca1985b4659e7e57aadaa7902613ff35001",
    "filename": "tianshou/policy/modelfree/td3.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/thu-ml-tianshou/tianshou/policy/modelfree/td3.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tianshou/policy/modelfree/td3.py:108:15 Unsupported operand [58]: `>=` is not supported for operand types `Optional[float]` and `int`.",
    "message": " `>=` is not supported for operand types `Optional[float]` and `int`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 108,
    "warning_line": "            if self._noise_clip >= 0:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                 critic2_optim: torch.optim.Optimizer,\n                 tau: Optional[float] = 0.005,\n                 gamma: Optional[float] = 0.99,\n                 exploration_noise: Optional[float] = 0.1,\n                 policy_noise: Optional[float] = 0.2,\n                 update_actor_freq: Optional[int] = 2,\n                 noise_clip: Optional[float] = 0.5,\n                 action_range: Optional[Tuple[float, float]] = None,\n                 reward_normalization: Optional[bool] = False,\n                 ignore_done: Optional[bool] = False,\n                 **kwargs) -> None:\n",
        "source_code_len": 592,
        "target_code": "                 critic2_optim: torch.optim.Optimizer,\n                 tau: float = 0.005,\n                 gamma: float = 0.99,\n                 exploration_noise: float = 0.1,\n                 policy_noise: float = 0.2,\n                 update_actor_freq: int = 2,\n                 noise_clip: float = 0.5,\n                 action_range: Optional[Tuple[float, float]] = None,\n                 reward_normalization: bool = False,\n                 ignore_done: bool = False,\n                 **kwargs) -> None:\n",
        "target_code_len": 512,
        "diff_format": "@@ -55,11 +55,11 @@\n                  critic2_optim: torch.optim.Optimizer,\n-                 tau: Optional[float] = 0.005,\n-                 gamma: Optional[float] = 0.99,\n-                 exploration_noise: Optional[float] = 0.1,\n-                 policy_noise: Optional[float] = 0.2,\n-                 update_actor_freq: Optional[int] = 2,\n-                 noise_clip: Optional[float] = 0.5,\n+                 tau: float = 0.005,\n+                 gamma: float = 0.99,\n+                 exploration_noise: float = 0.1,\n+                 policy_noise: float = 0.2,\n+                 update_actor_freq: int = 2,\n+                 noise_clip: float = 0.5,\n                  action_range: Optional[Tuple[float, float]] = None,\n-                 reward_normalization: Optional[bool] = False,\n-                 ignore_done: Optional[bool] = False,\n+                 reward_normalization: bool = False,\n+                 ignore_done: bool = False,\n                  **kwargs) -> None:\n",
        "source_code_with_indent": "                 critic2_optim: torch.optim.Optimizer,\n                 tau: Optional[float] = 0.005,\n                 gamma: Optional[float] = 0.99,\n                 exploration_noise: Optional[float] = 0.1,\n                 policy_noise: Optional[float] = 0.2,\n                 update_actor_freq: Optional[int] = 2,\n                 noise_clip: Optional[float] = 0.5,\n                 action_range: Optional[Tuple[float, float]] = None,\n                 reward_normalization: Optional[bool] = False,\n                 ignore_done: Optional[bool] = False,\n                 **kwargs) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                 critic2_optim: torch.optim.Optimizer,\n                 tau: float = 0.005,\n                 gamma: float = 0.99,\n                 exploration_noise: float = 0.1,\n                 policy_noise: float = 0.2,\n                 update_actor_freq: int = 2,\n                 noise_clip: float = 0.5,\n                 action_range: Optional[Tuple[float, float]] = None,\n                 reward_normalization: bool = False,\n                 ignore_done: bool = False,\n                 **kwargs) -> None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "thu-ml/tianshou",
    "commit": "0eef0ca1985b4659e7e57aadaa7902613ff35001",
    "filename": "tianshou/policy/modelfree/td3.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/thu-ml-tianshou/tianshou/policy/modelfree/td3.py",
    "file_hunks_size": 1,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tianshou/policy/modelfree/td3.py:119:44 Unsupported operand [58]: `*` is not supported for operand types `float` and `Optional[float]`.",
    "message": " `*` is not supported for operand types `float` and `Optional[float]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 119,
    "warning_line": "            target_q = (rew + (1. - done) * self._gamma * target_q)"
  },
  {
    "project": "thu-ml/tianshou",
    "commit": "0eef0ca1985b4659e7e57aadaa7902613ff35001",
    "filename": "tianshou/policy/modelfree/td3.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/thu-ml-tianshou/tianshou/policy/modelfree/td3.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tianshou/policy/modelfree/td3.py:132:23 Unsupported operand [58]: `%` is not supported for operand types `int` and `Optional[int]`.",
    "message": " `%` is not supported for operand types `int` and `Optional[int]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 132,
    "warning_line": "        if self._cnt % self._freq == 0:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                 critic2_optim: torch.optim.Optimizer,\n                 tau: Optional[float] = 0.005,\n                 gamma: Optional[float] = 0.99,\n                 exploration_noise: Optional[float] = 0.1,\n                 policy_noise: Optional[float] = 0.2,\n                 update_actor_freq: Optional[int] = 2,\n                 noise_clip: Optional[float] = 0.5,\n                 action_range: Optional[Tuple[float, float]] = None,\n                 reward_normalization: Optional[bool] = False,\n                 ignore_done: Optional[bool] = False,\n                 **kwargs) -> None:\n",
        "source_code_len": 592,
        "target_code": "                 critic2_optim: torch.optim.Optimizer,\n                 tau: float = 0.005,\n                 gamma: float = 0.99,\n                 exploration_noise: float = 0.1,\n                 policy_noise: float = 0.2,\n                 update_actor_freq: int = 2,\n                 noise_clip: float = 0.5,\n                 action_range: Optional[Tuple[float, float]] = None,\n                 reward_normalization: bool = False,\n                 ignore_done: bool = False,\n                 **kwargs) -> None:\n",
        "target_code_len": 512,
        "diff_format": "@@ -55,11 +55,11 @@\n                  critic2_optim: torch.optim.Optimizer,\n-                 tau: Optional[float] = 0.005,\n-                 gamma: Optional[float] = 0.99,\n-                 exploration_noise: Optional[float] = 0.1,\n-                 policy_noise: Optional[float] = 0.2,\n-                 update_actor_freq: Optional[int] = 2,\n-                 noise_clip: Optional[float] = 0.5,\n+                 tau: float = 0.005,\n+                 gamma: float = 0.99,\n+                 exploration_noise: float = 0.1,\n+                 policy_noise: float = 0.2,\n+                 update_actor_freq: int = 2,\n+                 noise_clip: float = 0.5,\n                  action_range: Optional[Tuple[float, float]] = None,\n-                 reward_normalization: Optional[bool] = False,\n-                 ignore_done: Optional[bool] = False,\n+                 reward_normalization: bool = False,\n+                 ignore_done: bool = False,\n                  **kwargs) -> None:\n",
        "source_code_with_indent": "                 critic2_optim: torch.optim.Optimizer,\n                 tau: Optional[float] = 0.005,\n                 gamma: Optional[float] = 0.99,\n                 exploration_noise: Optional[float] = 0.1,\n                 policy_noise: Optional[float] = 0.2,\n                 update_actor_freq: Optional[int] = 2,\n                 noise_clip: Optional[float] = 0.5,\n                 action_range: Optional[Tuple[float, float]] = None,\n                 reward_normalization: Optional[bool] = False,\n                 ignore_done: Optional[bool] = False,\n                 **kwargs) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                 critic2_optim: torch.optim.Optimizer,\n                 tau: float = 0.005,\n                 gamma: float = 0.99,\n                 exploration_noise: float = 0.1,\n                 policy_noise: float = 0.2,\n                 update_actor_freq: int = 2,\n                 noise_clip: float = 0.5,\n                 action_range: Optional[Tuple[float, float]] = None,\n                 reward_normalization: bool = False,\n                 ignore_done: bool = False,\n                 **kwargs) -> None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "thu-ml/tianshou",
    "commit": "0eef0ca1985b4659e7e57aadaa7902613ff35001",
    "filename": "tianshou/trainer/offpolicy.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/thu-ml-tianshou/tianshou/trainer/offpolicy.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tianshou/trainer/offpolicy.py:107:52 Unsupported operand [58]: `%` is not supported for operand types `int` and `Optional[int]`.",
    "message": " `%` is not supported for operand types `int` and `Optional[int]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 107,
    "warning_line": "                        if writer and global_step % log_interval == 0:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        writer: Optional[SummaryWriter] = None,\n        log_interval: Optional[int] = 1,\n        verbose: Optional[bool] = True,\n        **kwargs\n",
        "source_code_len": 146,
        "target_code": "        writer: Optional[SummaryWriter] = None,\n        log_interval: int = 1,\n        verbose: bool = True,\n        **kwargs\n",
        "target_code_len": 126,
        "diff_format": "@@ -26,4 +26,4 @@\n         writer: Optional[SummaryWriter] = None,\n-        log_interval: Optional[int] = 1,\n-        verbose: Optional[bool] = True,\n+        log_interval: int = 1,\n+        verbose: bool = True,\n         **kwargs\n",
        "source_code_with_indent": "        writer: Optional[SummaryWriter] = None,\n        log_interval: Optional[int] = 1,\n        verbose: Optional[bool] = True,\n        **kwargs\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        writer: Optional[SummaryWriter] = None,\n        log_interval: int = 1,\n        verbose: bool = True,\n        **kwargs\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "thu-ml/tianshou",
    "commit": "0eef0ca1985b4659e7e57aadaa7902613ff35001",
    "filename": "tianshou/trainer/offpolicy.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/thu-ml-tianshou/tianshou/trainer/offpolicy.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tianshou/trainer/offpolicy.py:115:52 Unsupported operand [58]: `%` is not supported for operand types `int` and `Optional[int]`.",
    "message": " `%` is not supported for operand types `int` and `Optional[int]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 115,
    "warning_line": "                        if writer and global_step % log_interval == 0:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        writer: Optional[SummaryWriter] = None,\n        log_interval: Optional[int] = 1,\n        verbose: Optional[bool] = True,\n        **kwargs\n",
        "source_code_len": 146,
        "target_code": "        writer: Optional[SummaryWriter] = None,\n        log_interval: int = 1,\n        verbose: bool = True,\n        **kwargs\n",
        "target_code_len": 126,
        "diff_format": "@@ -26,4 +26,4 @@\n         writer: Optional[SummaryWriter] = None,\n-        log_interval: Optional[int] = 1,\n-        verbose: Optional[bool] = True,\n+        log_interval: int = 1,\n+        verbose: bool = True,\n         **kwargs\n",
        "source_code_with_indent": "        writer: Optional[SummaryWriter] = None,\n        log_interval: Optional[int] = 1,\n        verbose: Optional[bool] = True,\n        **kwargs\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        writer: Optional[SummaryWriter] = None,\n        log_interval: int = 1,\n        verbose: bool = True,\n        **kwargs\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "thu-ml/tianshou",
    "commit": "0eef0ca1985b4659e7e57aadaa7902613ff35001",
    "filename": "tianshou/trainer/onpolicy.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/thu-ml-tianshou/tianshou/trainer/onpolicy.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tianshou/trainer/onpolicy.py:116:48 Unsupported operand [58]: `%` is not supported for operand types `int` and `Optional[int]`.",
    "message": " `%` is not supported for operand types `int` and `Optional[int]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 116,
    "warning_line": "                    if writer and global_step % log_interval == 0:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        writer: Optional[SummaryWriter] = None,\n        log_interval: Optional[int] = 1,\n        verbose: Optional[bool] = True,\n        **kwargs\n",
        "source_code_len": 146,
        "target_code": "        writer: Optional[SummaryWriter] = None,\n        log_interval: int = 1,\n        verbose: bool = True,\n        **kwargs\n",
        "target_code_len": 126,
        "diff_format": "@@ -27,4 +27,4 @@\n         writer: Optional[SummaryWriter] = None,\n-        log_interval: Optional[int] = 1,\n-        verbose: Optional[bool] = True,\n+        log_interval: int = 1,\n+        verbose: bool = True,\n         **kwargs\n",
        "source_code_with_indent": "        writer: Optional[SummaryWriter] = None,\n        log_interval: Optional[int] = 1,\n        verbose: Optional[bool] = True,\n        **kwargs\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        writer: Optional[SummaryWriter] = None,\n        log_interval: int = 1,\n        verbose: bool = True,\n        **kwargs\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "thu-ml/tianshou",
    "commit": "0eef0ca1985b4659e7e57aadaa7902613ff35001",
    "filename": "tianshou/trainer/onpolicy.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/thu-ml-tianshou/tianshou/trainer/onpolicy.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tianshou/trainer/onpolicy.py:124:48 Unsupported operand [58]: `%` is not supported for operand types `int` and `Optional[int]`.",
    "message": " `%` is not supported for operand types `int` and `Optional[int]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 124,
    "warning_line": "                    if writer and global_step % log_interval == 0:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        writer: Optional[SummaryWriter] = None,\n        log_interval: Optional[int] = 1,\n        verbose: Optional[bool] = True,\n        **kwargs\n",
        "source_code_len": 146,
        "target_code": "        writer: Optional[SummaryWriter] = None,\n        log_interval: int = 1,\n        verbose: bool = True,\n        **kwargs\n",
        "target_code_len": 126,
        "diff_format": "@@ -27,4 +27,4 @@\n         writer: Optional[SummaryWriter] = None,\n-        log_interval: Optional[int] = 1,\n-        verbose: Optional[bool] = True,\n+        log_interval: int = 1,\n+        verbose: bool = True,\n         **kwargs\n",
        "source_code_with_indent": "        writer: Optional[SummaryWriter] = None,\n        log_interval: Optional[int] = 1,\n        verbose: Optional[bool] = True,\n        **kwargs\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        writer: Optional[SummaryWriter] = None,\n        log_interval: int = 1,\n        verbose: bool = True,\n        **kwargs\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "thu-ml/tianshou",
    "commit": "0eef0ca1985b4659e7e57aadaa7902613ff35001",
    "filename": "tianshou/utils/moving_average.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/thu-ml-tianshou/tianshou/utils/moving_average.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tianshou/utils/moving_average.py:42:11 Unsupported operand [58]: `>` is not supported for operand types `Optional[int]` and `int`.",
    "message": " `>` is not supported for operand types `Optional[int]` and `int`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 42,
    "warning_line": "        if self.size > 0 and len(self.cache) > self.size:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __init__(self, size: Optional[int] = 100) -> None:\n        super().__init__()\n",
        "source_code_len": 87,
        "target_code": "\n    def __init__(self, size: int = 100) -> None:\n        super().__init__()\n",
        "target_code_len": 77,
        "diff_format": "@@ -23,3 +23,3 @@\n \n-    def __init__(self, size: Optional[int] = 100) -> None:\n+    def __init__(self, size: int = 100) -> None:\n         super().__init__()\n",
        "source_code_with_indent": "\n    def __init__(self, size: Optional[int] = 100) -> None:\n        <IND>super().__init__()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    def __init__(self, size: int = 100) -> None:\n        <IND>super().__init__()\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "thu-ml/tianshou",
    "commit": "0eef0ca1985b4659e7e57aadaa7902613ff35001",
    "filename": "tianshou/utils/moving_average.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/thu-ml-tianshou/tianshou/utils/moving_average.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tianshou/utils/moving_average.py:42:47 Unsupported operand [58]: `>` is not supported for operand types `int` and `Optional[int]`.",
    "message": " `>` is not supported for operand types `int` and `Optional[int]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 42,
    "warning_line": "        if self.size > 0 and len(self.cache) > self.size:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __init__(self, size: Optional[int] = 100) -> None:\n        super().__init__()\n",
        "source_code_len": 87,
        "target_code": "\n    def __init__(self, size: int = 100) -> None:\n        super().__init__()\n",
        "target_code_len": 77,
        "diff_format": "@@ -23,3 +23,3 @@\n \n-    def __init__(self, size: Optional[int] = 100) -> None:\n+    def __init__(self, size: int = 100) -> None:\n         super().__init__()\n",
        "source_code_with_indent": "\n    def __init__(self, size: Optional[int] = 100) -> None:\n        <IND>super().__init__()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    def __init__(self, size: int = 100) -> None:\n        <IND>super().__init__()\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]