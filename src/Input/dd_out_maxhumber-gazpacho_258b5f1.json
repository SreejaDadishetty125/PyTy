[
  {
    "project": "maxhumber/gazpacho",
    "commit": "258b5f1095bc001d3d920e362d7f17b9652c48ca",
    "filename": "gazpacho/soup.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/maxhumber-gazpacho/gazpacho/soup.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "gazpacho/soup.py:77:19 Incompatible parameter type [6]: Expected `Optional[str]` for 1st positional only parameter to call `Soup.__init__` but got `Union[Dict[typing.Any, typing.Any], str]`.",
    "message": " Expected `Optional[str]` for 1st positional only parameter to call `Soup.__init__` but got `Union[Dict[typing.Any, typing.Any], str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 77,
    "warning_line": "        return cls(html)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        html = get(url, params, headers)\n        return cls(html)\n",
        "source_code_len": 66,
        "target_code": "        html = get(url, params, headers)\n        if not isinstance(html, str):\n            raise Exception(f\"Unable to retrieve contents from {url}\")\n        return cls(html)\n",
        "target_code_len": 175,
        "diff_format": "@@ -76,2 +75,4 @@\n         html = get(url, params, headers)\n+        if not isinstance(html, str):\n+            raise Exception(f\"Unable to retrieve contents from {url}\")\n         return cls(html)\n",
        "source_code_with_indent": "        html = get(url, params, headers)\n        return cls(html)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        html = get(url, params, headers)\n        if not isinstance(html, str):\n            <IND>raise Exception(f\"Unable to retrieve contents from {url}\")\n        <DED>return cls(html)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "maxhumber/gazpacho",
    "commit": "258b5f1095bc001d3d920e362d7f17b9652c48ca",
    "filename": "gazpacho/soup.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/maxhumber-gazpacho/gazpacho/soup.py",
    "file_hunks_size": 9,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "gazpacho/soup.py:104:14 Incompatible variable type [9]: attrs is declared to have type `List[Tuple[str, str]]` but is used as type `Dict[str, str]`.",
    "message": " attrs is declared to have type `List[Tuple[str, str]]` but is used as type `Dict[str, str]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 104,
    "warning_line": "        html, attrs = recover_html_and_attrs(tag, attrs)"
  },
  {
    "project": "maxhumber/gazpacho",
    "commit": "258b5f1095bc001d3d920e362d7f17b9652c48ca",
    "filename": "gazpacho/soup.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/maxhumber-gazpacho/gazpacho/soup.py",
    "file_hunks_size": 9,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "gazpacho/soup.py:105:37 Incompatible parameter type [6]: Expected `Dict[typing.Any, typing.Any]` for 2nd positional only parameter to call `match` but got `List[Tuple[str, str]]`.",
    "message": " Expected `Dict[typing.Any, typing.Any]` for 2nd positional only parameter to call `match` but got `List[Tuple[str, str]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 105,
    "warning_line": "        matching = match(self.attrs, attrs, partial=self.partial)"
  },
  {
    "project": "maxhumber/gazpacho",
    "commit": "258b5f1095bc001d3d920e362d7f17b9652c48ca",
    "filename": "gazpacho/soup.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/maxhumber-gazpacho/gazpacho/soup.py",
    "file_hunks_size": 9,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "gazpacho/soup.py:119:4 Inconsistent override [14]: `gazpacho.soup.Soup.handle_starttag` overrides method defined in `HTMLParser` inconsistently. Parameter of type `List[Tuple[str, str]]` is not a supertype of the overridden parameter `List[Tuple[str, Optional[str]]]`.",
    "message": " `gazpacho.soup.Soup.handle_starttag` overrides method defined in `HTMLParser` inconsistently. Parameter of type `List[Tuple[str, str]]` is not a supertype of the overridden parameter `List[Tuple[str, Optional[str]]]`.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 119,
    "warning_line": "    def handle_starttag(self, tag: str, attrs: List[Tuple[str, str]]) -> None:"
  },
  {
    "project": "maxhumber/gazpacho",
    "commit": "258b5f1095bc001d3d920e362d7f17b9652c48ca",
    "filename": "gazpacho/soup.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/maxhumber-gazpacho/gazpacho/soup.py",
    "file_hunks_size": 9,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "gazpacho/soup.py:125:4 Inconsistent override [14]: `gazpacho.soup.Soup.handle_startendtag` overrides method defined in `HTMLParser` inconsistently. Parameter of type `List[Tuple[str, str]]` is not a supertype of the overridden parameter `List[Tuple[str, Optional[str]]]`.",
    "message": " `gazpacho.soup.Soup.handle_startendtag` overrides method defined in `HTMLParser` inconsistently. Parameter of type `List[Tuple[str, str]]` is not a supertype of the overridden parameter `List[Tuple[str, Optional[str]]]`.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 125,
    "warning_line": "    def handle_startendtag(self, tag: str, attrs: List[Tuple[str, str]]) -> None:"
  },
  {
    "project": "maxhumber/gazpacho",
    "commit": "258b5f1095bc001d3d920e362d7f17b9652c48ca",
    "filename": "gazpacho/utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/maxhumber-gazpacho/gazpacho/utils.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "gazpacho/utils.py:76:8 Incompatible variable type [9]: attrs is declared to have type `List[Tuple[str, str]]` but is used as type `Dict[str, str]`.",
    "message": " attrs is declared to have type `List[Tuple[str, str]]` but is used as type `Dict[str, str]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 76,
    "warning_line": "        attrs = dict(attrs)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    if attrs:\n        attrs = dict(attrs)\n        af = [f'{key}=\"{value}\"' for key, value in attrs.items()]\n        af = f' {\" \".join(af)}'\n    else:\n        attrs = {}\n        af = \"\"\n    if startendtag:\n        html = f\"<{tag}{af} />\"\n    else:\n        html = f\"<{tag}{af}>\"\n    return html, attrs\n\n",
        "source_code_len": 301,
        "target_code": "    if attrs:\n        attrs_dict = dict(attrs)\n        attrs_list = [f'{key}=\"{value}\"' for key, value in attrs_dict.items()]\n        attrs_str = f' {\" \".join(attrs_list)}'\n    else:\n        attrs_dict = {}\n        attrs_str = \"\"\n    if startendtag:\n        html = f\"<{tag}{attrs_str} />\"\n    else:\n        html = f\"<{tag}{attrs_str}>\"\n    return html, attrs_dict\n\n",
        "target_code_len": 365,
        "diff_format": "@@ -75,13 +76,13 @@\n     if attrs:\n-        attrs = dict(attrs)\n-        af = [f'{key}=\"{value}\"' for key, value in attrs.items()]\n-        af = f' {\" \".join(af)}'\n+        attrs_dict = dict(attrs)\n+        attrs_list = [f'{key}=\"{value}\"' for key, value in attrs_dict.items()]\n+        attrs_str = f' {\" \".join(attrs_list)}'\n     else:\n-        attrs = {}\n-        af = \"\"\n+        attrs_dict = {}\n+        attrs_str = \"\"\n     if startendtag:\n-        html = f\"<{tag}{af} />\"\n+        html = f\"<{tag}{attrs_str} />\"\n     else:\n-        html = f\"<{tag}{af}>\"\n-    return html, attrs\n+        html = f\"<{tag}{attrs_str}>\"\n+    return html, attrs_dict\n \n",
        "source_code_with_indent": "    if attrs:\n        <IND>attrs = dict(attrs)\n        af = [f'{key}=\"{value}\"' for key, value in attrs.items()]\n        af = f' {\" \".join(af)}'\n    <DED>else:\n        <IND>attrs = {}\n        af = \"\"\n    <DED>if startendtag:\n        <IND>html = f\"<{tag}{af} />\"\n    <DED>else:\n        <IND>html = f\"<{tag}{af}>\"\n    <DED>return html, attrs\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    if attrs:\n        <IND>attrs_dict = dict(attrs)\n        attrs_list = [f'{key}=\"{value}\"' for key, value in attrs_dict.items()]\n        attrs_str = f' {\" \".join(attrs_list)}'\n    <DED>else:\n        <IND>attrs_dict = {}\n        attrs_str = \"\"\n    <DED>if startendtag:\n        <IND>html = f\"<{tag}{attrs_str} />\"\n    <DED>else:\n        <IND>html = f\"<{tag}{attrs_str}>\"\n    <DED>return html, attrs_dict\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "maxhumber/gazpacho",
    "commit": "258b5f1095bc001d3d920e362d7f17b9652c48ca",
    "filename": "gazpacho/utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/maxhumber-gazpacho/gazpacho/utils.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "gazpacho/utils.py:80:8 Incompatible variable type [9]: attrs is declared to have type `List[Tuple[str, str]]` but is used as type `Dict[Variable[_KT], Variable[_VT]]`.",
    "message": " attrs is declared to have type `List[Tuple[str, str]]` but is used as type `Dict[Variable[_KT], Variable[_VT]]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 80,
    "warning_line": "        attrs = {}",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    if attrs:\n        attrs = dict(attrs)\n        af = [f'{key}=\"{value}\"' for key, value in attrs.items()]\n        af = f' {\" \".join(af)}'\n    else:\n        attrs = {}\n        af = \"\"\n    if startendtag:\n        html = f\"<{tag}{af} />\"\n    else:\n        html = f\"<{tag}{af}>\"\n    return html, attrs\n\n",
        "source_code_len": 301,
        "target_code": "    if attrs:\n        attrs_dict = dict(attrs)\n        attrs_list = [f'{key}=\"{value}\"' for key, value in attrs_dict.items()]\n        attrs_str = f' {\" \".join(attrs_list)}'\n    else:\n        attrs_dict = {}\n        attrs_str = \"\"\n    if startendtag:\n        html = f\"<{tag}{attrs_str} />\"\n    else:\n        html = f\"<{tag}{attrs_str}>\"\n    return html, attrs_dict\n\n",
        "target_code_len": 365,
        "diff_format": "@@ -75,13 +76,13 @@\n     if attrs:\n-        attrs = dict(attrs)\n-        af = [f'{key}=\"{value}\"' for key, value in attrs.items()]\n-        af = f' {\" \".join(af)}'\n+        attrs_dict = dict(attrs)\n+        attrs_list = [f'{key}=\"{value}\"' for key, value in attrs_dict.items()]\n+        attrs_str = f' {\" \".join(attrs_list)}'\n     else:\n-        attrs = {}\n-        af = \"\"\n+        attrs_dict = {}\n+        attrs_str = \"\"\n     if startendtag:\n-        html = f\"<{tag}{af} />\"\n+        html = f\"<{tag}{attrs_str} />\"\n     else:\n-        html = f\"<{tag}{af}>\"\n-    return html, attrs\n+        html = f\"<{tag}{attrs_str}>\"\n+    return html, attrs_dict\n \n",
        "source_code_with_indent": "    if attrs:\n        <IND>attrs = dict(attrs)\n        af = [f'{key}=\"{value}\"' for key, value in attrs.items()]\n        af = f' {\" \".join(af)}'\n    <DED>else:\n        <IND>attrs = {}\n        af = \"\"\n    <DED>if startendtag:\n        <IND>html = f\"<{tag}{af} />\"\n    <DED>else:\n        <IND>html = f\"<{tag}{af}>\"\n    <DED>return html, attrs\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    if attrs:\n        <IND>attrs_dict = dict(attrs)\n        attrs_list = [f'{key}=\"{value}\"' for key, value in attrs_dict.items()]\n        attrs_str = f' {\" \".join(attrs_list)}'\n    <DED>else:\n        <IND>attrs_dict = {}\n        attrs_str = \"\"\n    <DED>if startendtag:\n        <IND>html = f\"<{tag}{attrs_str} />\"\n    <DED>else:\n        <IND>html = f\"<{tag}{attrs_str}>\"\n    <DED>return html, attrs_dict\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "maxhumber/gazpacho",
    "commit": "258b5f1095bc001d3d920e362d7f17b9652c48ca",
    "filename": "gazpacho/utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/maxhumber-gazpacho/gazpacho/utils.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "gazpacho/utils.py:86:4 Incompatible return type [7]: Expected `Tuple[str, Dict[str, str]]` but got `Tuple[str, List[Tuple[str, str]]]`.",
    "message": " Expected `Tuple[str, Dict[str, str]]` but got `Tuple[str, List[Tuple[str, str]]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 86,
    "warning_line": "    return html, attrs",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    if attrs:\n        attrs = dict(attrs)\n        af = [f'{key}=\"{value}\"' for key, value in attrs.items()]\n        af = f' {\" \".join(af)}'\n    else:\n        attrs = {}\n        af = \"\"\n    if startendtag:\n        html = f\"<{tag}{af} />\"\n    else:\n        html = f\"<{tag}{af}>\"\n    return html, attrs\n\n",
        "source_code_len": 301,
        "target_code": "    if attrs:\n        attrs_dict = dict(attrs)\n        attrs_list = [f'{key}=\"{value}\"' for key, value in attrs_dict.items()]\n        attrs_str = f' {\" \".join(attrs_list)}'\n    else:\n        attrs_dict = {}\n        attrs_str = \"\"\n    if startendtag:\n        html = f\"<{tag}{attrs_str} />\"\n    else:\n        html = f\"<{tag}{attrs_str}>\"\n    return html, attrs_dict\n\n",
        "target_code_len": 365,
        "diff_format": "@@ -75,13 +76,13 @@\n     if attrs:\n-        attrs = dict(attrs)\n-        af = [f'{key}=\"{value}\"' for key, value in attrs.items()]\n-        af = f' {\" \".join(af)}'\n+        attrs_dict = dict(attrs)\n+        attrs_list = [f'{key}=\"{value}\"' for key, value in attrs_dict.items()]\n+        attrs_str = f' {\" \".join(attrs_list)}'\n     else:\n-        attrs = {}\n-        af = \"\"\n+        attrs_dict = {}\n+        attrs_str = \"\"\n     if startendtag:\n-        html = f\"<{tag}{af} />\"\n+        html = f\"<{tag}{attrs_str} />\"\n     else:\n-        html = f\"<{tag}{af}>\"\n-    return html, attrs\n+        html = f\"<{tag}{attrs_str}>\"\n+    return html, attrs_dict\n \n",
        "source_code_with_indent": "    if attrs:\n        <IND>attrs = dict(attrs)\n        af = [f'{key}=\"{value}\"' for key, value in attrs.items()]\n        af = f' {\" \".join(af)}'\n    <DED>else:\n        <IND>attrs = {}\n        af = \"\"\n    <DED>if startendtag:\n        <IND>html = f\"<{tag}{af} />\"\n    <DED>else:\n        <IND>html = f\"<{tag}{af}>\"\n    <DED>return html, attrs\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    if attrs:\n        <IND>attrs_dict = dict(attrs)\n        attrs_list = [f'{key}=\"{value}\"' for key, value in attrs_dict.items()]\n        attrs_str = f' {\" \".join(attrs_list)}'\n    <DED>else:\n        <IND>attrs_dict = {}\n        attrs_str = \"\"\n    <DED>if startendtag:\n        <IND>html = f\"<{tag}{attrs_str} />\"\n    <DED>else:\n        <IND>html = f\"<{tag}{attrs_str}>\"\n    <DED>return html, attrs_dict\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]