[
  {
    "project": "spectacles-ci/spectacles",
    "commit": "8fb0632a54338d534a3f5ab3fe3f483cc744549e",
    "filename": "fonz/validators.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/spectacles-ci-spectacles/fonz/validators.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "fonz/validators.py:188:59 Incompatible parameter type [6]: Expected `List[str]` for 1st positional only parameter to call `SqlValidator._get_query_results` but got `typing.Tuple[typing.Any]`.",
    "message": " Expected `List[str]` for 1st positional only parameter to call `SqlValidator._get_query_results` but got `typing.Tuple[typing.Any]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 188,
    "warning_line": "        running_task_ids, errors = self._get_query_results(query_task_ids)"
  },
  {
    "project": "spectacles-ci/spectacles",
    "commit": "8fb0632a54338d534a3f5ab3fe3f483cc744549e",
    "filename": "fonz/validators.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/spectacles-ci-spectacles/fonz/validators.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "fonz/validators.py:190:68 Incompatible parameter type [6]: Expected `List[str]` for 1st positional only parameter to call `SqlValidator._get_query_results` but got `SqlError`.",
    "message": " Expected `List[str]` for 1st positional only parameter to call `SqlValidator._get_query_results` but got `SqlError`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 190,
    "warning_line": "            running_task_ids, more_errors = self._get_query_results(running_task_ids)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import List, Optional, Sequence, DefaultDict\nimport asyncio\n",
        "source_code_len": 72,
        "target_code": "from typing import List, Sequence, DefaultDict, Tuple\nimport asyncio\n",
        "target_code_len": 69,
        "diff_format": "@@ -1,2 +1,2 @@\n-from typing import List, Optional, Sequence, DefaultDict\n+from typing import List, Sequence, DefaultDict, Tuple\n import asyncio\n",
        "source_code_with_indent": "from typing import List, Optional, Sequence, DefaultDict\nimport asyncio\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import List, Sequence, DefaultDict, Tuple\nimport asyncio\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        query_task_ids = loop.run_until_complete(asyncio.gather(*tasks))\n\n",
        "source_code_len": 75,
        "target_code": "\n        query_task_ids = list(loop.run_until_complete(asyncio.gather(*tasks)))\n\n",
        "target_code_len": 81,
        "diff_format": "@@ -185,3 +185,3 @@\n \n-        query_task_ids = loop.run_until_complete(asyncio.gather(*tasks))\n+        query_task_ids = list(loop.run_until_complete(asyncio.gather(*tasks)))\n \n",
        "source_code_with_indent": "\n        <DED><DED><DED><DED>query_task_ids = loop.run_until_complete(asyncio.gather(*tasks))\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        <DED><DED><DED><DED>query_task_ids = list(loop.run_until_complete(asyncio.gather(*tasks)))\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _get_query_results(self, query_task_ids: List[str]) -> List[SqlError]:\n        results = self.client.get_query_task_multi_results(query_task_ids)\n",
        "source_code_len": 155,
        "target_code": "\n    def _get_query_results(\n        self, query_task_ids: List[str]\n    ) -> Tuple[List[str], List[SqlError]]:\n        results = self.client.get_query_task_multi_results(query_task_ids)\n",
        "target_code_len": 187,
        "diff_format": "@@ -207,3 +207,5 @@\n \n-    def _get_query_results(self, query_task_ids: List[str]) -> List[SqlError]:\n+    def _get_query_results(\n+        self, query_task_ids: List[str]\n+    ) -> Tuple[List[str], List[SqlError]]:\n         results = self.client.get_query_task_multi_results(query_task_ids)\n",
        "source_code_with_indent": "\n    <DED>def _get_query_results(self, query_task_ids: List[str]) -> List[SqlError]:\n        <IND>results = self.client.get_query_task_multi_results(query_task_ids)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def _get_query_results(\n        self, query_task_ids: List[str]\n    ) -> Tuple[List[str], List[SqlError]]:\n        <IND>results = self.client.get_query_task_multi_results(query_task_ids)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "spectacles-ci/spectacles",
    "commit": "8fb0632a54338d534a3f5ab3fe3f483cc744549e",
    "filename": "fonz/validators.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/spectacles-ci-spectacles/fonz/validators.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "fonz/validators.py:206:8 Incompatible return type [7]: Expected `List[SqlError]` but got `SqlError`.",
    "message": " Expected `List[SqlError]` but got `SqlError`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 206,
    "warning_line": "        return errors",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import List, Optional, Sequence, DefaultDict\nimport asyncio\n",
        "source_code_len": 72,
        "target_code": "from typing import List, Sequence, DefaultDict, Tuple\nimport asyncio\n",
        "target_code_len": 69,
        "diff_format": "@@ -1,2 +1,2 @@\n-from typing import List, Optional, Sequence, DefaultDict\n+from typing import List, Sequence, DefaultDict, Tuple\n import asyncio\n",
        "source_code_with_indent": "from typing import List, Optional, Sequence, DefaultDict\nimport asyncio\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import List, Sequence, DefaultDict, Tuple\nimport asyncio\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        query_task_ids = loop.run_until_complete(asyncio.gather(*tasks))\n\n",
        "source_code_len": 75,
        "target_code": "\n        query_task_ids = list(loop.run_until_complete(asyncio.gather(*tasks)))\n\n",
        "target_code_len": 81,
        "diff_format": "@@ -185,3 +185,3 @@\n \n-        query_task_ids = loop.run_until_complete(asyncio.gather(*tasks))\n+        query_task_ids = list(loop.run_until_complete(asyncio.gather(*tasks)))\n \n",
        "source_code_with_indent": "\n        <DED><DED><DED><DED>query_task_ids = loop.run_until_complete(asyncio.gather(*tasks))\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        <DED><DED><DED><DED>query_task_ids = list(loop.run_until_complete(asyncio.gather(*tasks)))\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _get_query_results(self, query_task_ids: List[str]) -> List[SqlError]:\n        results = self.client.get_query_task_multi_results(query_task_ids)\n",
        "source_code_len": 155,
        "target_code": "\n    def _get_query_results(\n        self, query_task_ids: List[str]\n    ) -> Tuple[List[str], List[SqlError]]:\n        results = self.client.get_query_task_multi_results(query_task_ids)\n",
        "target_code_len": 187,
        "diff_format": "@@ -207,3 +207,5 @@\n \n-    def _get_query_results(self, query_task_ids: List[str]) -> List[SqlError]:\n+    def _get_query_results(\n+        self, query_task_ids: List[str]\n+    ) -> Tuple[List[str], List[SqlError]]:\n         results = self.client.get_query_task_multi_results(query_task_ids)\n",
        "source_code_with_indent": "\n    <DED>def _get_query_results(self, query_task_ids: List[str]) -> List[SqlError]:\n        <IND>results = self.client.get_query_task_multi_results(query_task_ids)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def _get_query_results(\n        self, query_task_ids: List[str]\n    ) -> Tuple[List[str], List[SqlError]]:\n        <IND>results = self.client.get_query_task_multi_results(query_task_ids)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "spectacles-ci/spectacles",
    "commit": "8fb0632a54338d534a3f5ab3fe3f483cc744549e",
    "filename": "fonz/validators.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/spectacles-ci-spectacles/fonz/validators.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "fonz/validators.py:240:8 Incompatible return type [7]: Expected `List[SqlError]` but got `typing.Tuple[List[typing.Any], List[typing.Any]]`.",
    "message": " Expected `List[SqlError]` but got `typing.Tuple[List[typing.Any], List[typing.Any]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 240,
    "warning_line": "        return still_running, errors",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import List, Optional, Sequence, DefaultDict\nimport asyncio\n",
        "source_code_len": 72,
        "target_code": "from typing import List, Sequence, DefaultDict, Tuple\nimport asyncio\n",
        "target_code_len": 69,
        "diff_format": "@@ -1,2 +1,2 @@\n-from typing import List, Optional, Sequence, DefaultDict\n+from typing import List, Sequence, DefaultDict, Tuple\n import asyncio\n",
        "source_code_with_indent": "from typing import List, Optional, Sequence, DefaultDict\nimport asyncio\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import List, Sequence, DefaultDict, Tuple\nimport asyncio\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        query_task_ids = loop.run_until_complete(asyncio.gather(*tasks))\n\n",
        "source_code_len": 75,
        "target_code": "\n        query_task_ids = list(loop.run_until_complete(asyncio.gather(*tasks)))\n\n",
        "target_code_len": 81,
        "diff_format": "@@ -185,3 +185,3 @@\n \n-        query_task_ids = loop.run_until_complete(asyncio.gather(*tasks))\n+        query_task_ids = list(loop.run_until_complete(asyncio.gather(*tasks)))\n \n",
        "source_code_with_indent": "\n        <DED><DED><DED><DED>query_task_ids = loop.run_until_complete(asyncio.gather(*tasks))\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        <DED><DED><DED><DED>query_task_ids = list(loop.run_until_complete(asyncio.gather(*tasks)))\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _get_query_results(self, query_task_ids: List[str]) -> List[SqlError]:\n        results = self.client.get_query_task_multi_results(query_task_ids)\n",
        "source_code_len": 155,
        "target_code": "\n    def _get_query_results(\n        self, query_task_ids: List[str]\n    ) -> Tuple[List[str], List[SqlError]]:\n        results = self.client.get_query_task_multi_results(query_task_ids)\n",
        "target_code_len": 187,
        "diff_format": "@@ -207,3 +207,5 @@\n \n-    def _get_query_results(self, query_task_ids: List[str]) -> List[SqlError]:\n+    def _get_query_results(\n+        self, query_task_ids: List[str]\n+    ) -> Tuple[List[str], List[SqlError]]:\n         results = self.client.get_query_task_multi_results(query_task_ids)\n",
        "source_code_with_indent": "\n    <DED>def _get_query_results(self, query_task_ids: List[str]) -> List[SqlError]:\n        <IND>results = self.client.get_query_task_multi_results(query_task_ids)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def _get_query_results(\n        self, query_task_ids: List[str]\n    ) -> Tuple[List[str], List[SqlError]]:\n        <IND>results = self.client.get_query_task_multi_results(query_task_ids)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]