[
  {
    "project": "tribe29/checkmk",
    "commit": "ba8be4ea9b9232e49d0fdb248113f391e159f8ee",
    "filename": "cmk/base/plugins/agent_based/logwatch_ec.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/tribe29-checkmk/cmk/base/plugins/agent_based/logwatch_ec.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cmk/base/plugins/agent_based/logwatch_ec.py:419:8 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `io.TextIOBase.write` but got `bytes`.",
    "message": " Expected `str` for 1st positional only parameter to call `io.TextIOBase.write` but got `bytes`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 419,
    "warning_line": "        ('\\n'.join(messages) + '\\n').encode(\"utf-8\"))",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    io.open('%s/%s' % (spool_path, file_name), 'w', encoding=\"utf-8\").write(\n        ('\\n'.join(messages) + '\\n').encode(\"utf-8\"))\n    os.rename('%s/%s' % (spool_path, file_name), '%s/%s' % (spool_path, file_name[1:]))\n",
        "source_code_len": 220,
        "target_code": "\n    with open('%s/%s' % (spool_path, file_name), 'w', encoding=\"utf-8\") as f:\n        f.write('\\n'.join(messages) + '\\n')\n    os.rename('%s/%s' % (spool_path, file_name), '%s/%s' % (spool_path, file_name[1:]))\n",
        "target_code_len": 211,
        "diff_format": "@@ -417,4 +416,4 @@\n \n-    io.open('%s/%s' % (spool_path, file_name), 'w', encoding=\"utf-8\").write(\n-        ('\\n'.join(messages) + '\\n').encode(\"utf-8\"))\n+    with open('%s/%s' % (spool_path, file_name), 'w', encoding=\"utf-8\") as f:\n+        f.write('\\n'.join(messages) + '\\n')\n     os.rename('%s/%s' % (spool_path, file_name), '%s/%s' % (spool_path, file_name[1:]))\n",
        "source_code_with_indent": "\n    io.open('%s/%s' % (spool_path, file_name), 'w', encoding=\"utf-8\").write(\n        ('\\n'.join(messages) + '\\n').encode(\"utf-8\"))\n    os.rename('%s/%s' % (spool_path, file_name), '%s/%s' % (spool_path, file_name[1:]))\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    with open('%s/%s' % (spool_path, file_name), 'w', encoding=\"utf-8\") as f:\n        <IND>f.write('\\n'.join(messages) + '\\n')\n    <DED>os.rename('%s/%s' % (spool_path, file_name), '%s/%s' % (spool_path, file_name[1:]))\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "tribe29/checkmk",
    "commit": "ba8be4ea9b9232e49d0fdb248113f391e159f8ee",
    "filename": "cmk/base/plugins/agent_based/utils/size_trend.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/tribe29-checkmk/cmk/base/plugins/agent_based/utils/size_trend.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cmk/base/plugins/agent_based/utils/size_trend.py:140:21 Incompatible parameter type [6]: Expected `Variable[_typeshed.SupportsLessThanT (bound to _typeshed.SupportsLessThan)]` for 1st positional only parameter to call `min` but got `Optional[float]`.",
    "message": " Expected `Variable[_typeshed.SupportsLessThanT (bound to _typeshed.SupportsLessThan)]` for 1st positional only parameter to call `min` but got `Optional[float]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 140,
    "warning_line": "        return ((min(levels1[0], levels2[0]),",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def mins(levels1: Optional[Levels], levels2: Optional[Levels]) -> Levels:\n        return ((min(levels1[0], levels2[0]),\n                 min(levels1[1], levels2[1])) if levels1 and levels2 else  #\n                levels1 or levels2 or (None, None))\n",
        "source_code_len": 254,
        "target_code": "\n    def minn(a: Optional[float], b: Optional[float]) -> Optional[float]:\n        if a is None:\n            return b\n        if b is None:\n            return a\n        return min(a, b)\n\n    def mins(levels1: Optional[Levels], levels2: Optional[Levels]) -> Levels:\n        return ((minn(levels1[0], levels2[0]),\n                 minn(levels1[1], levels2[1])) if levels1 and levels2 else  #\n                levels1 or levels2 or (None, None))\n",
        "target_code_len": 441,
        "diff_format": "@@ -138,5 +138,12 @@\n \n+    def minn(a: Optional[float], b: Optional[float]) -> Optional[float]:\n+        if a is None:\n+            return b\n+        if b is None:\n+            return a\n+        return min(a, b)\n+\n     def mins(levels1: Optional[Levels], levels2: Optional[Levels]) -> Levels:\n-        return ((min(levels1[0], levels2[0]),\n-                 min(levels1[1], levels2[1])) if levels1 and levels2 else  #\n+        return ((minn(levels1[0], levels2[0]),\n+                 minn(levels1[1], levels2[1])) if levels1 and levels2 else  #\n                 levels1 or levels2 or (None, None))\n",
        "source_code_with_indent": "\n    <DED>def mins(levels1: Optional[Levels], levels2: Optional[Levels]) -> Levels:\n        <IND>return ((min(levels1[0], levels2[0]),\n                 min(levels1[1], levels2[1])) if levels1 and levels2 else  #\n                levels1 or levels2 or (None, None))\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def minn(a: Optional[float], b: Optional[float]) -> Optional[float]:\n        <IND>if a is None:\n            <IND>return b\n        <DED>if b is None:\n            <IND>return a\n        <DED>return min(a, b)\n\n    <DED>def mins(levels1: Optional[Levels], levels2: Optional[Levels]) -> Levels:\n        <IND>return ((minn(levels1[0], levels2[0]),\n                 minn(levels1[1], levels2[1])) if levels1 and levels2 else  #\n                levels1 or levels2 or (None, None))\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "tribe29/checkmk",
    "commit": "ba8be4ea9b9232e49d0fdb248113f391e159f8ee",
    "filename": "cmk/base/plugins/agent_based/utils/size_trend.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/tribe29-checkmk/cmk/base/plugins/agent_based/utils/size_trend.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cmk/base/plugins/agent_based/utils/size_trend.py:140:33 Incompatible parameter type [6]: Expected `Variable[_typeshed.SupportsLessThanT (bound to _typeshed.SupportsLessThan)]` for 2nd positional only parameter to call `min` but got `Optional[float]`.",
    "message": " Expected `Variable[_typeshed.SupportsLessThanT (bound to _typeshed.SupportsLessThan)]` for 2nd positional only parameter to call `min` but got `Optional[float]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 140,
    "warning_line": "        return ((min(levels1[0], levels2[0]),",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def mins(levels1: Optional[Levels], levels2: Optional[Levels]) -> Levels:\n        return ((min(levels1[0], levels2[0]),\n                 min(levels1[1], levels2[1])) if levels1 and levels2 else  #\n                levels1 or levels2 or (None, None))\n",
        "source_code_len": 254,
        "target_code": "\n    def minn(a: Optional[float], b: Optional[float]) -> Optional[float]:\n        if a is None:\n            return b\n        if b is None:\n            return a\n        return min(a, b)\n\n    def mins(levels1: Optional[Levels], levels2: Optional[Levels]) -> Levels:\n        return ((minn(levels1[0], levels2[0]),\n                 minn(levels1[1], levels2[1])) if levels1 and levels2 else  #\n                levels1 or levels2 or (None, None))\n",
        "target_code_len": 441,
        "diff_format": "@@ -138,5 +138,12 @@\n \n+    def minn(a: Optional[float], b: Optional[float]) -> Optional[float]:\n+        if a is None:\n+            return b\n+        if b is None:\n+            return a\n+        return min(a, b)\n+\n     def mins(levels1: Optional[Levels], levels2: Optional[Levels]) -> Levels:\n-        return ((min(levels1[0], levels2[0]),\n-                 min(levels1[1], levels2[1])) if levels1 and levels2 else  #\n+        return ((minn(levels1[0], levels2[0]),\n+                 minn(levels1[1], levels2[1])) if levels1 and levels2 else  #\n                 levels1 or levels2 or (None, None))\n",
        "source_code_with_indent": "\n    <DED>def mins(levels1: Optional[Levels], levels2: Optional[Levels]) -> Levels:\n        <IND>return ((min(levels1[0], levels2[0]),\n                 min(levels1[1], levels2[1])) if levels1 and levels2 else  #\n                levels1 or levels2 or (None, None))\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def minn(a: Optional[float], b: Optional[float]) -> Optional[float]:\n        <IND>if a is None:\n            <IND>return b\n        <DED>if b is None:\n            <IND>return a\n        <DED>return min(a, b)\n\n    <DED>def mins(levels1: Optional[Levels], levels2: Optional[Levels]) -> Levels:\n        <IND>return ((minn(levels1[0], levels2[0]),\n                 minn(levels1[1], levels2[1])) if levels1 and levels2 else  #\n                levels1 or levels2 or (None, None))\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "tribe29/checkmk",
    "commit": "ba8be4ea9b9232e49d0fdb248113f391e159f8ee",
    "filename": "cmk/base/plugins/agent_based/utils/size_trend.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/tribe29-checkmk/cmk/base/plugins/agent_based/utils/size_trend.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cmk/base/plugins/agent_based/utils/size_trend.py:141:21 Incompatible parameter type [6]: Expected `Variable[_typeshed.SupportsLessThanT (bound to _typeshed.SupportsLessThan)]` for 1st positional only parameter to call `min` but got `Optional[float]`.",
    "message": " Expected `Variable[_typeshed.SupportsLessThanT (bound to _typeshed.SupportsLessThan)]` for 1st positional only parameter to call `min` but got `Optional[float]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 141,
    "warning_line": "                 min(levels1[1], levels2[1])) if levels1 and levels2 else  #",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def mins(levels1: Optional[Levels], levels2: Optional[Levels]) -> Levels:\n        return ((min(levels1[0], levels2[0]),\n                 min(levels1[1], levels2[1])) if levels1 and levels2 else  #\n                levels1 or levels2 or (None, None))\n",
        "source_code_len": 254,
        "target_code": "\n    def minn(a: Optional[float], b: Optional[float]) -> Optional[float]:\n        if a is None:\n            return b\n        if b is None:\n            return a\n        return min(a, b)\n\n    def mins(levels1: Optional[Levels], levels2: Optional[Levels]) -> Levels:\n        return ((minn(levels1[0], levels2[0]),\n                 minn(levels1[1], levels2[1])) if levels1 and levels2 else  #\n                levels1 or levels2 or (None, None))\n",
        "target_code_len": 441,
        "diff_format": "@@ -138,5 +138,12 @@\n \n+    def minn(a: Optional[float], b: Optional[float]) -> Optional[float]:\n+        if a is None:\n+            return b\n+        if b is None:\n+            return a\n+        return min(a, b)\n+\n     def mins(levels1: Optional[Levels], levels2: Optional[Levels]) -> Levels:\n-        return ((min(levels1[0], levels2[0]),\n-                 min(levels1[1], levels2[1])) if levels1 and levels2 else  #\n+        return ((minn(levels1[0], levels2[0]),\n+                 minn(levels1[1], levels2[1])) if levels1 and levels2 else  #\n                 levels1 or levels2 or (None, None))\n",
        "source_code_with_indent": "\n    <DED>def mins(levels1: Optional[Levels], levels2: Optional[Levels]) -> Levels:\n        <IND>return ((min(levels1[0], levels2[0]),\n                 min(levels1[1], levels2[1])) if levels1 and levels2 else  #\n                levels1 or levels2 or (None, None))\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def minn(a: Optional[float], b: Optional[float]) -> Optional[float]:\n        <IND>if a is None:\n            <IND>return b\n        <DED>if b is None:\n            <IND>return a\n        <DED>return min(a, b)\n\n    <DED>def mins(levels1: Optional[Levels], levels2: Optional[Levels]) -> Levels:\n        <IND>return ((minn(levels1[0], levels2[0]),\n                 minn(levels1[1], levels2[1])) if levels1 and levels2 else  #\n                levels1 or levels2 or (None, None))\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "tribe29/checkmk",
    "commit": "ba8be4ea9b9232e49d0fdb248113f391e159f8ee",
    "filename": "cmk/base/plugins/agent_based/utils/size_trend.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/tribe29-checkmk/cmk/base/plugins/agent_based/utils/size_trend.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cmk/base/plugins/agent_based/utils/size_trend.py:141:33 Incompatible parameter type [6]: Expected `Variable[_typeshed.SupportsLessThanT (bound to _typeshed.SupportsLessThan)]` for 2nd positional only parameter to call `min` but got `Optional[float]`.",
    "message": " Expected `Variable[_typeshed.SupportsLessThanT (bound to _typeshed.SupportsLessThan)]` for 2nd positional only parameter to call `min` but got `Optional[float]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 141,
    "warning_line": "                 min(levels1[1], levels2[1])) if levels1 and levels2 else  #",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def mins(levels1: Optional[Levels], levels2: Optional[Levels]) -> Levels:\n        return ((min(levels1[0], levels2[0]),\n                 min(levels1[1], levels2[1])) if levels1 and levels2 else  #\n                levels1 or levels2 or (None, None))\n",
        "source_code_len": 254,
        "target_code": "\n    def minn(a: Optional[float], b: Optional[float]) -> Optional[float]:\n        if a is None:\n            return b\n        if b is None:\n            return a\n        return min(a, b)\n\n    def mins(levels1: Optional[Levels], levels2: Optional[Levels]) -> Levels:\n        return ((minn(levels1[0], levels2[0]),\n                 minn(levels1[1], levels2[1])) if levels1 and levels2 else  #\n                levels1 or levels2 or (None, None))\n",
        "target_code_len": 441,
        "diff_format": "@@ -138,5 +138,12 @@\n \n+    def minn(a: Optional[float], b: Optional[float]) -> Optional[float]:\n+        if a is None:\n+            return b\n+        if b is None:\n+            return a\n+        return min(a, b)\n+\n     def mins(levels1: Optional[Levels], levels2: Optional[Levels]) -> Levels:\n-        return ((min(levels1[0], levels2[0]),\n-                 min(levels1[1], levels2[1])) if levels1 and levels2 else  #\n+        return ((minn(levels1[0], levels2[0]),\n+                 minn(levels1[1], levels2[1])) if levels1 and levels2 else  #\n                 levels1 or levels2 or (None, None))\n",
        "source_code_with_indent": "\n    <DED>def mins(levels1: Optional[Levels], levels2: Optional[Levels]) -> Levels:\n        <IND>return ((min(levels1[0], levels2[0]),\n                 min(levels1[1], levels2[1])) if levels1 and levels2 else  #\n                levels1 or levels2 or (None, None))\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def minn(a: Optional[float], b: Optional[float]) -> Optional[float]:\n        <IND>if a is None:\n            <IND>return b\n        <DED>if b is None:\n            <IND>return a\n        <DED>return min(a, b)\n\n    <DED>def mins(levels1: Optional[Levels], levels2: Optional[Levels]) -> Levels:\n        <IND>return ((minn(levels1[0], levels2[0]),\n                 minn(levels1[1], levels2[1])) if levels1 and levels2 else  #\n                levels1 or levels2 or (None, None))\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "tribe29/checkmk",
    "commit": "ba8be4ea9b9232e49d0fdb248113f391e159f8ee",
    "filename": "cmk/gui/watolib/activate_changes.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/tribe29-checkmk/cmk/gui/watolib/activate_changes.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "cmk/gui/watolib/activate_changes.py:160:76 Incompatible parameter type [6]: Expected `List[str]` for 4th positional only parameter to call `ReplicationPath.__new__` but got `Union[List[typing.Any], List[str], str]`.",
    "message": " Expected `List[str]` for 4th positional only parameter to call `ReplicationPath.__new__` but got `Union[List[typing.Any], List[str], str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 160,
    "warning_line": "            clean_paths.append(ReplicationPath(path[0], path[1], site_path, excludes))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n            # mypy does not understand this\n            excludes = path[3] if len(path) == 4 else []  # type: ignore[misc]\n            clean_paths.append(ReplicationPath(path[0], path[1], site_path, excludes))\n",
        "source_code_len": 211,
        "target_code": "\n            excludes: List[str] = []\n            # mypy does not understand this\n            if len(path) == 4:\n                excludes = path[3]  # type: ignore[misc]\n\n            clean_paths.append(ReplicationPath(path[0], path[1], site_path, excludes))\n",
        "target_code_len": 258,
        "diff_format": "@@ -157,4 +157,7 @@\n \n+            excludes: List[str] = []\n             # mypy does not understand this\n-            excludes = path[3] if len(path) == 4 else []  # type: ignore[misc]\n+            if len(path) == 4:\n+                excludes = path[3]  # type: ignore[misc]\n+\n             clean_paths.append(ReplicationPath(path[0], path[1], site_path, excludes))\n",
        "source_code_with_indent": "\n            # mypy does not understand this\n            excludes = path[3] if len(path) == 4 else []  # type: ignore[misc]\n            clean_paths.append(ReplicationPath(path[0], path[1], site_path, excludes))\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n            excludes: List[str] = []\n            # mypy does not understand this\n            if len(path) == 4:\n                <IND>excludes = path[3]  # type: ignore[misc]\n\n            <DED>clean_paths.append(ReplicationPath(path[0], path[1], site_path, excludes))\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]