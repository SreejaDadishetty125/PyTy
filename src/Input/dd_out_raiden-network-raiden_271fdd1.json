[
  {
    "project": "raiden-network/raiden",
    "commit": "271fdd132a8dab8915b92f5413a7b97373265220",
    "filename": "raiden/transfer/channel.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/raiden-network-raiden/raiden/transfer/channel.py",
    "file_hunks_size": 6,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "raiden/transfer/channel.py:1188:8 Incompatible parameter type [6]: Expected `typing.TokenAmount` for 2nd parameter `transferred_amount` to call `BalanceProofUnsignedState.__init__` but got `typing.PaymentAmount`.",
    "message": " Expected `typing.TokenAmount` for 2nd parameter `transferred_amount` to call `BalanceProofUnsignedState.__init__` but got `typing.PaymentAmount`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1188,
    "warning_line": "        transferred_amount=transferred_amount,"
  },
  {
    "project": "raiden-network/raiden",
    "commit": "271fdd132a8dab8915b92f5413a7b97373265220",
    "filename": "raiden/transfer/channel.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/raiden-network-raiden/raiden/transfer/channel.py",
    "file_hunks_size": 6,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "raiden/transfer/channel.py:1317:12 Incompatible parameter type [6]: Expected `BalanceProofSignedState` for 4th positional only parameter to call `ContractSendChannelClose.__init__` but got `typing.Union[None, BalanceProofSignedState, BalanceProofUnsignedState]`.",
    "message": " Expected `BalanceProofSignedState` for 4th positional only parameter to call `ContractSendChannelClose.__init__` but got `typing.Union[None, BalanceProofSignedState, BalanceProofUnsignedState]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1317,
    "warning_line": "            channel_state.partner_state.balance_proof,"
  },
  {
    "project": "raiden-network/raiden",
    "commit": "271fdd132a8dab8915b92f5413a7b97373265220",
    "filename": "raiden/transfer/channel.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/raiden-network-raiden/raiden/transfer/channel.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "raiden/transfer/channel.py:1714:16 Incompatible parameter type [6]: Expected `BalanceProofSignedState` for 4th positional only parameter to call `ContractSendChannelUpdateTransfer.__init__` but got `typing.Union[None, BalanceProofSignedState, BalanceProofUnsignedState]`.",
    "message": " Expected `BalanceProofSignedState` for 4th positional only parameter to call `ContractSendChannelUpdateTransfer.__init__` but got `typing.Union[None, BalanceProofSignedState, BalanceProofUnsignedState]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1714,
    "warning_line": "                balance_proof,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            expiration = state_change.block_number + channel_state.settle_timeout\n            # The channel was closed by our partner, if there is a balance\n",
        "source_code_len": 157,
        "target_code": "            expiration = state_change.block_number + channel_state.settle_timeout\n            # silence mypy: checked above already\n            assert balance_proof is not None\n            # silence mypy: partner's balance proof is always signed\n            assert not isinstance(balance_proof, BalanceProofUnsignedState)\n            # The channel was closed by our partner, if there is a balance\n",
        "target_code_len": 397,
        "diff_format": "@@ -1707,2 +1715,6 @@\n             expiration = state_change.block_number + channel_state.settle_timeout\n+            # silence mypy: checked above already\n+            assert balance_proof is not None\n+            # silence mypy: partner's balance proof is always signed\n+            assert not isinstance(balance_proof, BalanceProofUnsignedState)\n             # The channel was closed by our partner, if there is a balance\n",
        "source_code_with_indent": "            <IND>expiration = state_change.block_number + channel_state.settle_timeout\n            # The channel was closed by our partner, if there is a balance\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <IND>expiration = state_change.block_number + channel_state.settle_timeout\n            # silence mypy: checked above already\n            assert balance_proof is not None\n            # silence mypy: partner's balance proof is always signed\n            assert not isinstance(balance_proof, BalanceProofUnsignedState)\n            # The channel was closed by our partner, if there is a balance\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "raiden-network/raiden",
    "commit": "271fdd132a8dab8915b92f5413a7b97373265220",
    "filename": "raiden/transfer/mediated_transfer/events.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/raiden-network-raiden/raiden/transfer/mediated_transfer/events.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "raiden/transfer/mediated_transfer/events.py:308:12 Incompatible parameter type [6]: Expected `typing.MessageID` for 3rd parameter `message_identifier` to call `SendBalanceProof.__init__` but got `int`.",
    "message": " Expected `typing.MessageID` for 3rd parameter `message_identifier` to call `SendBalanceProof.__init__` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 308,
    "warning_line": "            message_identifier=int(data['message_identifier']),",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            channel_identifier=typing.ChannelID(int(data['channel_identifier'])),\n            message_identifier=int(data['message_identifier']),\n            payment_identifier=int(data['payment_identifier']),\n            token_address=to_canonical_address(data['token_address']),\n            secret=serialization.deserialize_bytes(data['secret']),\n            balance_proof=data['balance_proof'],\n",
        "source_code_len": 398,
        "target_code": "            channel_identifier=typing.ChannelID(int(data['channel_identifier'])),\n            message_identifier=typing.MessageID(int(data['message_identifier'])),\n            payment_identifier=typing.PaymentID(int(data['payment_identifier'])),\n            token_address=to_canonical_address(data['token_address']),\n            secret=typing.Secret(serialization.deserialize_bytes(data['secret'])),\n            balance_proof=data['balance_proof'],\n",
        "target_code_len": 449,
        "diff_format": "@@ -307,6 +307,6 @@\n             channel_identifier=typing.ChannelID(int(data['channel_identifier'])),\n-            message_identifier=int(data['message_identifier']),\n-            payment_identifier=int(data['payment_identifier']),\n+            message_identifier=typing.MessageID(int(data['message_identifier'])),\n+            payment_identifier=typing.PaymentID(int(data['payment_identifier'])),\n             token_address=to_canonical_address(data['token_address']),\n-            secret=serialization.deserialize_bytes(data['secret']),\n+            secret=typing.Secret(serialization.deserialize_bytes(data['secret'])),\n             balance_proof=data['balance_proof'],\n",
        "source_code_with_indent": "            channel_identifier=typing.ChannelID(int(data['channel_identifier'])),\n            message_identifier=int(data['message_identifier']),\n            payment_identifier=int(data['payment_identifier']),\n            token_address=to_canonical_address(data['token_address']),\n            secret=serialization.deserialize_bytes(data['secret']),\n            balance_proof=data['balance_proof'],\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            channel_identifier=typing.ChannelID(int(data['channel_identifier'])),\n            message_identifier=typing.MessageID(int(data['message_identifier'])),\n            payment_identifier=typing.PaymentID(int(data['payment_identifier'])),\n            token_address=to_canonical_address(data['token_address']),\n            secret=typing.Secret(serialization.deserialize_bytes(data['secret'])),\n            balance_proof=data['balance_proof'],\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "raiden-network/raiden",
    "commit": "271fdd132a8dab8915b92f5413a7b97373265220",
    "filename": "raiden/transfer/mediated_transfer/events.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/raiden-network-raiden/raiden/transfer/mediated_transfer/events.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "raiden/transfer/mediated_transfer/events.py:309:12 Incompatible parameter type [6]: Expected `typing.PaymentID` for 4th parameter `payment_identifier` to call `SendBalanceProof.__init__` but got `int`.",
    "message": " Expected `typing.PaymentID` for 4th parameter `payment_identifier` to call `SendBalanceProof.__init__` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 309,
    "warning_line": "            payment_identifier=int(data['payment_identifier']),",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            channel_identifier=typing.ChannelID(int(data['channel_identifier'])),\n            message_identifier=int(data['message_identifier']),\n            payment_identifier=int(data['payment_identifier']),\n            token_address=to_canonical_address(data['token_address']),\n            secret=serialization.deserialize_bytes(data['secret']),\n            balance_proof=data['balance_proof'],\n",
        "source_code_len": 398,
        "target_code": "            channel_identifier=typing.ChannelID(int(data['channel_identifier'])),\n            message_identifier=typing.MessageID(int(data['message_identifier'])),\n            payment_identifier=typing.PaymentID(int(data['payment_identifier'])),\n            token_address=to_canonical_address(data['token_address']),\n            secret=typing.Secret(serialization.deserialize_bytes(data['secret'])),\n            balance_proof=data['balance_proof'],\n",
        "target_code_len": 449,
        "diff_format": "@@ -307,6 +307,6 @@\n             channel_identifier=typing.ChannelID(int(data['channel_identifier'])),\n-            message_identifier=int(data['message_identifier']),\n-            payment_identifier=int(data['payment_identifier']),\n+            message_identifier=typing.MessageID(int(data['message_identifier'])),\n+            payment_identifier=typing.PaymentID(int(data['payment_identifier'])),\n             token_address=to_canonical_address(data['token_address']),\n-            secret=serialization.deserialize_bytes(data['secret']),\n+            secret=typing.Secret(serialization.deserialize_bytes(data['secret'])),\n             balance_proof=data['balance_proof'],\n",
        "source_code_with_indent": "            channel_identifier=typing.ChannelID(int(data['channel_identifier'])),\n            message_identifier=int(data['message_identifier']),\n            payment_identifier=int(data['payment_identifier']),\n            token_address=to_canonical_address(data['token_address']),\n            secret=serialization.deserialize_bytes(data['secret']),\n            balance_proof=data['balance_proof'],\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            channel_identifier=typing.ChannelID(int(data['channel_identifier'])),\n            message_identifier=typing.MessageID(int(data['message_identifier'])),\n            payment_identifier=typing.PaymentID(int(data['payment_identifier'])),\n            token_address=to_canonical_address(data['token_address']),\n            secret=typing.Secret(serialization.deserialize_bytes(data['secret'])),\n            balance_proof=data['balance_proof'],\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "raiden-network/raiden",
    "commit": "271fdd132a8dab8915b92f5413a7b97373265220",
    "filename": "raiden/transfer/mediated_transfer/events.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/raiden-network-raiden/raiden/transfer/mediated_transfer/events.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "raiden/transfer/mediated_transfer/events.py:311:12 Incompatible parameter type [6]: Expected `typing.Secret` for 6th parameter `secret` to call `SendBalanceProof.__init__` but got `bytes`.",
    "message": " Expected `typing.Secret` for 6th parameter `secret` to call `SendBalanceProof.__init__` but got `bytes`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 311,
    "warning_line": "            secret=serialization.deserialize_bytes(data['secret']),",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            channel_identifier=typing.ChannelID(int(data['channel_identifier'])),\n            message_identifier=int(data['message_identifier']),\n            payment_identifier=int(data['payment_identifier']),\n            token_address=to_canonical_address(data['token_address']),\n            secret=serialization.deserialize_bytes(data['secret']),\n            balance_proof=data['balance_proof'],\n",
        "source_code_len": 398,
        "target_code": "            channel_identifier=typing.ChannelID(int(data['channel_identifier'])),\n            message_identifier=typing.MessageID(int(data['message_identifier'])),\n            payment_identifier=typing.PaymentID(int(data['payment_identifier'])),\n            token_address=to_canonical_address(data['token_address']),\n            secret=typing.Secret(serialization.deserialize_bytes(data['secret'])),\n            balance_proof=data['balance_proof'],\n",
        "target_code_len": 449,
        "diff_format": "@@ -307,6 +307,6 @@\n             channel_identifier=typing.ChannelID(int(data['channel_identifier'])),\n-            message_identifier=int(data['message_identifier']),\n-            payment_identifier=int(data['payment_identifier']),\n+            message_identifier=typing.MessageID(int(data['message_identifier'])),\n+            payment_identifier=typing.PaymentID(int(data['payment_identifier'])),\n             token_address=to_canonical_address(data['token_address']),\n-            secret=serialization.deserialize_bytes(data['secret']),\n+            secret=typing.Secret(serialization.deserialize_bytes(data['secret'])),\n             balance_proof=data['balance_proof'],\n",
        "source_code_with_indent": "            channel_identifier=typing.ChannelID(int(data['channel_identifier'])),\n            message_identifier=int(data['message_identifier']),\n            payment_identifier=int(data['payment_identifier']),\n            token_address=to_canonical_address(data['token_address']),\n            secret=serialization.deserialize_bytes(data['secret']),\n            balance_proof=data['balance_proof'],\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            channel_identifier=typing.ChannelID(int(data['channel_identifier'])),\n            message_identifier=typing.MessageID(int(data['message_identifier'])),\n            payment_identifier=typing.PaymentID(int(data['payment_identifier'])),\n            token_address=to_canonical_address(data['token_address']),\n            secret=typing.Secret(serialization.deserialize_bytes(data['secret'])),\n            balance_proof=data['balance_proof'],\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "raiden-network/raiden",
    "commit": "271fdd132a8dab8915b92f5413a7b97373265220",
    "filename": "raiden/transfer/state.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/raiden-network-raiden/raiden/transfer/state.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "raiden/transfer/state.py:808:12 Incompatible parameter type [6]: Expected `typing.TokenAmount` for 2nd parameter `transferred_amount` to call `BalanceProofUnsignedState.__init__` but got `int`.",
    "message": " Expected `typing.TokenAmount` for 2nd parameter `transferred_amount` to call `BalanceProofUnsignedState.__init__` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 808,
    "warning_line": "            transferred_amount=int(data['transferred_amount']),",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            nonce=data['nonce'],\n            transferred_amount=int(data['transferred_amount']),\n            locked_amount=int(data['locked_amount']),\n            locksroot=serialization.deserialize_bytes(data['locksroot']),\n            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n",
        "source_code_len": 318,
        "target_code": "            nonce=data['nonce'],\n            transferred_amount=typing.TokenAmount(int(data['transferred_amount'])),\n            locked_amount=typing.TokenAmount(int(data['locked_amount'])),\n            locksroot=typing.Locksroot(serialization.deserialize_bytes(data['locksroot'])),\n            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n",
        "target_code_len": 376,
        "diff_format": "@@ -807,5 +807,5 @@\n             nonce=data['nonce'],\n-            transferred_amount=int(data['transferred_amount']),\n-            locked_amount=int(data['locked_amount']),\n-            locksroot=serialization.deserialize_bytes(data['locksroot']),\n+            transferred_amount=typing.TokenAmount(int(data['transferred_amount'])),\n+            locked_amount=typing.TokenAmount(int(data['locked_amount'])),\n+            locksroot=typing.Locksroot(serialization.deserialize_bytes(data['locksroot'])),\n             token_network_identifier=to_canonical_address(data['token_network_identifier']),\n",
        "source_code_with_indent": "            nonce=data['nonce'],\n            transferred_amount=int(data['transferred_amount']),\n            locked_amount=int(data['locked_amount']),\n            locksroot=serialization.deserialize_bytes(data['locksroot']),\n            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            nonce=data['nonce'],\n            transferred_amount=typing.TokenAmount(int(data['transferred_amount'])),\n            locked_amount=typing.TokenAmount(int(data['locked_amount'])),\n            locksroot=typing.Locksroot(serialization.deserialize_bytes(data['locksroot'])),\n            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "raiden-network/raiden",
    "commit": "271fdd132a8dab8915b92f5413a7b97373265220",
    "filename": "raiden/transfer/state.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/raiden-network-raiden/raiden/transfer/state.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "raiden/transfer/state.py:809:12 Incompatible parameter type [6]: Expected `typing.TokenAmount` for 3rd parameter `locked_amount` to call `BalanceProofUnsignedState.__init__` but got `int`.",
    "message": " Expected `typing.TokenAmount` for 3rd parameter `locked_amount` to call `BalanceProofUnsignedState.__init__` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 809,
    "warning_line": "            locked_amount=int(data['locked_amount']),",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            nonce=data['nonce'],\n            transferred_amount=int(data['transferred_amount']),\n            locked_amount=int(data['locked_amount']),\n            locksroot=serialization.deserialize_bytes(data['locksroot']),\n            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n",
        "source_code_len": 318,
        "target_code": "            nonce=data['nonce'],\n            transferred_amount=typing.TokenAmount(int(data['transferred_amount'])),\n            locked_amount=typing.TokenAmount(int(data['locked_amount'])),\n            locksroot=typing.Locksroot(serialization.deserialize_bytes(data['locksroot'])),\n            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n",
        "target_code_len": 376,
        "diff_format": "@@ -807,5 +807,5 @@\n             nonce=data['nonce'],\n-            transferred_amount=int(data['transferred_amount']),\n-            locked_amount=int(data['locked_amount']),\n-            locksroot=serialization.deserialize_bytes(data['locksroot']),\n+            transferred_amount=typing.TokenAmount(int(data['transferred_amount'])),\n+            locked_amount=typing.TokenAmount(int(data['locked_amount'])),\n+            locksroot=typing.Locksroot(serialization.deserialize_bytes(data['locksroot'])),\n             token_network_identifier=to_canonical_address(data['token_network_identifier']),\n",
        "source_code_with_indent": "            nonce=data['nonce'],\n            transferred_amount=int(data['transferred_amount']),\n            locked_amount=int(data['locked_amount']),\n            locksroot=serialization.deserialize_bytes(data['locksroot']),\n            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            nonce=data['nonce'],\n            transferred_amount=typing.TokenAmount(int(data['transferred_amount'])),\n            locked_amount=typing.TokenAmount(int(data['locked_amount'])),\n            locksroot=typing.Locksroot(serialization.deserialize_bytes(data['locksroot'])),\n            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "raiden-network/raiden",
    "commit": "271fdd132a8dab8915b92f5413a7b97373265220",
    "filename": "raiden/transfer/state.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/raiden-network-raiden/raiden/transfer/state.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "raiden/transfer/state.py:810:12 Incompatible parameter type [6]: Expected `typing.Locksroot` for 4th parameter `locksroot` to call `BalanceProofUnsignedState.__init__` but got `bytes`.",
    "message": " Expected `typing.Locksroot` for 4th parameter `locksroot` to call `BalanceProofUnsignedState.__init__` but got `bytes`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 810,
    "warning_line": "            locksroot=serialization.deserialize_bytes(data['locksroot']),",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            nonce=data['nonce'],\n            transferred_amount=int(data['transferred_amount']),\n            locked_amount=int(data['locked_amount']),\n            locksroot=serialization.deserialize_bytes(data['locksroot']),\n            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n",
        "source_code_len": 318,
        "target_code": "            nonce=data['nonce'],\n            transferred_amount=typing.TokenAmount(int(data['transferred_amount'])),\n            locked_amount=typing.TokenAmount(int(data['locked_amount'])),\n            locksroot=typing.Locksroot(serialization.deserialize_bytes(data['locksroot'])),\n            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n",
        "target_code_len": 376,
        "diff_format": "@@ -807,5 +807,5 @@\n             nonce=data['nonce'],\n-            transferred_amount=int(data['transferred_amount']),\n-            locked_amount=int(data['locked_amount']),\n-            locksroot=serialization.deserialize_bytes(data['locksroot']),\n+            transferred_amount=typing.TokenAmount(int(data['transferred_amount'])),\n+            locked_amount=typing.TokenAmount(int(data['locked_amount'])),\n+            locksroot=typing.Locksroot(serialization.deserialize_bytes(data['locksroot'])),\n             token_network_identifier=to_canonical_address(data['token_network_identifier']),\n",
        "source_code_with_indent": "            nonce=data['nonce'],\n            transferred_amount=int(data['transferred_amount']),\n            locked_amount=int(data['locked_amount']),\n            locksroot=serialization.deserialize_bytes(data['locksroot']),\n            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            nonce=data['nonce'],\n            transferred_amount=typing.TokenAmount(int(data['transferred_amount'])),\n            locked_amount=typing.TokenAmount(int(data['locked_amount'])),\n            locksroot=typing.Locksroot(serialization.deserialize_bytes(data['locksroot'])),\n            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "raiden-network/raiden",
    "commit": "271fdd132a8dab8915b92f5413a7b97373265220",
    "filename": "raiden/transfer/state.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/raiden-network-raiden/raiden/transfer/state.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "raiden/transfer/state.py:981:12 Incompatible parameter type [6]: Expected `typing.TokenAmount` for 2nd parameter `transferred_amount` to call `BalanceProofSignedState.__init__` but got `int`.",
    "message": " Expected `typing.TokenAmount` for 2nd parameter `transferred_amount` to call `BalanceProofSignedState.__init__` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 981,
    "warning_line": "            transferred_amount=int(data['transferred_amount']),",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            nonce=data['nonce'],\n            transferred_amount=int(data['transferred_amount']),\n            locked_amount=int(data['locked_amount']),\n            locksroot=serialization.deserialize_bytes(data['locksroot']),\n            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            channel_identifier=typing.ChannelID(int(data['channel_identifier'])),\n            message_hash=serialization.deserialize_bytes(data['message_hash']),\n            signature=serialization.deserialize_bytes(data['signature']),\n            sender=to_canonical_address(data['sender']),\n",
        "source_code_len": 611,
        "target_code": "            nonce=data['nonce'],\n            transferred_amount=typing.TokenAmount(int(data['transferred_amount'])),\n            locked_amount=typing.TokenAmount(int(data['locked_amount'])),\n            locksroot=typing.Locksroot(serialization.deserialize_bytes(data['locksroot'])),\n            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            channel_identifier=typing.ChannelID(int(data['channel_identifier'])),\n            message_hash=typing.Keccak256(serialization.deserialize_bytes(data['message_hash'])),\n            signature=typing.Signature(serialization.deserialize_bytes(data['signature'])),\n            sender=to_canonical_address(data['sender']),\n",
        "target_code_len": 705,
        "diff_format": "@@ -980,9 +980,9 @@\n             nonce=data['nonce'],\n-            transferred_amount=int(data['transferred_amount']),\n-            locked_amount=int(data['locked_amount']),\n-            locksroot=serialization.deserialize_bytes(data['locksroot']),\n+            transferred_amount=typing.TokenAmount(int(data['transferred_amount'])),\n+            locked_amount=typing.TokenAmount(int(data['locked_amount'])),\n+            locksroot=typing.Locksroot(serialization.deserialize_bytes(data['locksroot'])),\n             token_network_identifier=to_canonical_address(data['token_network_identifier']),\n             channel_identifier=typing.ChannelID(int(data['channel_identifier'])),\n-            message_hash=serialization.deserialize_bytes(data['message_hash']),\n-            signature=serialization.deserialize_bytes(data['signature']),\n+            message_hash=typing.Keccak256(serialization.deserialize_bytes(data['message_hash'])),\n+            signature=typing.Signature(serialization.deserialize_bytes(data['signature'])),\n             sender=to_canonical_address(data['sender']),\n",
        "source_code_with_indent": "            nonce=data['nonce'],\n            transferred_amount=int(data['transferred_amount']),\n            locked_amount=int(data['locked_amount']),\n            locksroot=serialization.deserialize_bytes(data['locksroot']),\n            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            channel_identifier=typing.ChannelID(int(data['channel_identifier'])),\n            message_hash=serialization.deserialize_bytes(data['message_hash']),\n            signature=serialization.deserialize_bytes(data['signature']),\n            sender=to_canonical_address(data['sender']),\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            nonce=data['nonce'],\n            transferred_amount=typing.TokenAmount(int(data['transferred_amount'])),\n            locked_amount=typing.TokenAmount(int(data['locked_amount'])),\n            locksroot=typing.Locksroot(serialization.deserialize_bytes(data['locksroot'])),\n            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            channel_identifier=typing.ChannelID(int(data['channel_identifier'])),\n            message_hash=typing.Keccak256(serialization.deserialize_bytes(data['message_hash'])),\n            signature=typing.Signature(serialization.deserialize_bytes(data['signature'])),\n            sender=to_canonical_address(data['sender']),\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "raiden-network/raiden",
    "commit": "271fdd132a8dab8915b92f5413a7b97373265220",
    "filename": "raiden/transfer/state.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/raiden-network-raiden/raiden/transfer/state.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "raiden/transfer/state.py:982:12 Incompatible parameter type [6]: Expected `typing.TokenAmount` for 3rd parameter `locked_amount` to call `BalanceProofSignedState.__init__` but got `int`.",
    "message": " Expected `typing.TokenAmount` for 3rd parameter `locked_amount` to call `BalanceProofSignedState.__init__` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 982,
    "warning_line": "            locked_amount=int(data['locked_amount']),",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            nonce=data['nonce'],\n            transferred_amount=int(data['transferred_amount']),\n            locked_amount=int(data['locked_amount']),\n            locksroot=serialization.deserialize_bytes(data['locksroot']),\n            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            channel_identifier=typing.ChannelID(int(data['channel_identifier'])),\n            message_hash=serialization.deserialize_bytes(data['message_hash']),\n            signature=serialization.deserialize_bytes(data['signature']),\n            sender=to_canonical_address(data['sender']),\n",
        "source_code_len": 611,
        "target_code": "            nonce=data['nonce'],\n            transferred_amount=typing.TokenAmount(int(data['transferred_amount'])),\n            locked_amount=typing.TokenAmount(int(data['locked_amount'])),\n            locksroot=typing.Locksroot(serialization.deserialize_bytes(data['locksroot'])),\n            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            channel_identifier=typing.ChannelID(int(data['channel_identifier'])),\n            message_hash=typing.Keccak256(serialization.deserialize_bytes(data['message_hash'])),\n            signature=typing.Signature(serialization.deserialize_bytes(data['signature'])),\n            sender=to_canonical_address(data['sender']),\n",
        "target_code_len": 705,
        "diff_format": "@@ -980,9 +980,9 @@\n             nonce=data['nonce'],\n-            transferred_amount=int(data['transferred_amount']),\n-            locked_amount=int(data['locked_amount']),\n-            locksroot=serialization.deserialize_bytes(data['locksroot']),\n+            transferred_amount=typing.TokenAmount(int(data['transferred_amount'])),\n+            locked_amount=typing.TokenAmount(int(data['locked_amount'])),\n+            locksroot=typing.Locksroot(serialization.deserialize_bytes(data['locksroot'])),\n             token_network_identifier=to_canonical_address(data['token_network_identifier']),\n             channel_identifier=typing.ChannelID(int(data['channel_identifier'])),\n-            message_hash=serialization.deserialize_bytes(data['message_hash']),\n-            signature=serialization.deserialize_bytes(data['signature']),\n+            message_hash=typing.Keccak256(serialization.deserialize_bytes(data['message_hash'])),\n+            signature=typing.Signature(serialization.deserialize_bytes(data['signature'])),\n             sender=to_canonical_address(data['sender']),\n",
        "source_code_with_indent": "            nonce=data['nonce'],\n            transferred_amount=int(data['transferred_amount']),\n            locked_amount=int(data['locked_amount']),\n            locksroot=serialization.deserialize_bytes(data['locksroot']),\n            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            channel_identifier=typing.ChannelID(int(data['channel_identifier'])),\n            message_hash=serialization.deserialize_bytes(data['message_hash']),\n            signature=serialization.deserialize_bytes(data['signature']),\n            sender=to_canonical_address(data['sender']),\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            nonce=data['nonce'],\n            transferred_amount=typing.TokenAmount(int(data['transferred_amount'])),\n            locked_amount=typing.TokenAmount(int(data['locked_amount'])),\n            locksroot=typing.Locksroot(serialization.deserialize_bytes(data['locksroot'])),\n            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            channel_identifier=typing.ChannelID(int(data['channel_identifier'])),\n            message_hash=typing.Keccak256(serialization.deserialize_bytes(data['message_hash'])),\n            signature=typing.Signature(serialization.deserialize_bytes(data['signature'])),\n            sender=to_canonical_address(data['sender']),\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "raiden-network/raiden",
    "commit": "271fdd132a8dab8915b92f5413a7b97373265220",
    "filename": "raiden/transfer/state.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/raiden-network-raiden/raiden/transfer/state.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "raiden/transfer/state.py:983:12 Incompatible parameter type [6]: Expected `typing.Locksroot` for 4th parameter `locksroot` to call `BalanceProofSignedState.__init__` but got `bytes`.",
    "message": " Expected `typing.Locksroot` for 4th parameter `locksroot` to call `BalanceProofSignedState.__init__` but got `bytes`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 983,
    "warning_line": "            locksroot=serialization.deserialize_bytes(data['locksroot']),",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            nonce=data['nonce'],\n            transferred_amount=int(data['transferred_amount']),\n            locked_amount=int(data['locked_amount']),\n            locksroot=serialization.deserialize_bytes(data['locksroot']),\n            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            channel_identifier=typing.ChannelID(int(data['channel_identifier'])),\n            message_hash=serialization.deserialize_bytes(data['message_hash']),\n            signature=serialization.deserialize_bytes(data['signature']),\n            sender=to_canonical_address(data['sender']),\n",
        "source_code_len": 611,
        "target_code": "            nonce=data['nonce'],\n            transferred_amount=typing.TokenAmount(int(data['transferred_amount'])),\n            locked_amount=typing.TokenAmount(int(data['locked_amount'])),\n            locksroot=typing.Locksroot(serialization.deserialize_bytes(data['locksroot'])),\n            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            channel_identifier=typing.ChannelID(int(data['channel_identifier'])),\n            message_hash=typing.Keccak256(serialization.deserialize_bytes(data['message_hash'])),\n            signature=typing.Signature(serialization.deserialize_bytes(data['signature'])),\n            sender=to_canonical_address(data['sender']),\n",
        "target_code_len": 705,
        "diff_format": "@@ -980,9 +980,9 @@\n             nonce=data['nonce'],\n-            transferred_amount=int(data['transferred_amount']),\n-            locked_amount=int(data['locked_amount']),\n-            locksroot=serialization.deserialize_bytes(data['locksroot']),\n+            transferred_amount=typing.TokenAmount(int(data['transferred_amount'])),\n+            locked_amount=typing.TokenAmount(int(data['locked_amount'])),\n+            locksroot=typing.Locksroot(serialization.deserialize_bytes(data['locksroot'])),\n             token_network_identifier=to_canonical_address(data['token_network_identifier']),\n             channel_identifier=typing.ChannelID(int(data['channel_identifier'])),\n-            message_hash=serialization.deserialize_bytes(data['message_hash']),\n-            signature=serialization.deserialize_bytes(data['signature']),\n+            message_hash=typing.Keccak256(serialization.deserialize_bytes(data['message_hash'])),\n+            signature=typing.Signature(serialization.deserialize_bytes(data['signature'])),\n             sender=to_canonical_address(data['sender']),\n",
        "source_code_with_indent": "            nonce=data['nonce'],\n            transferred_amount=int(data['transferred_amount']),\n            locked_amount=int(data['locked_amount']),\n            locksroot=serialization.deserialize_bytes(data['locksroot']),\n            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            channel_identifier=typing.ChannelID(int(data['channel_identifier'])),\n            message_hash=serialization.deserialize_bytes(data['message_hash']),\n            signature=serialization.deserialize_bytes(data['signature']),\n            sender=to_canonical_address(data['sender']),\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            nonce=data['nonce'],\n            transferred_amount=typing.TokenAmount(int(data['transferred_amount'])),\n            locked_amount=typing.TokenAmount(int(data['locked_amount'])),\n            locksroot=typing.Locksroot(serialization.deserialize_bytes(data['locksroot'])),\n            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            channel_identifier=typing.ChannelID(int(data['channel_identifier'])),\n            message_hash=typing.Keccak256(serialization.deserialize_bytes(data['message_hash'])),\n            signature=typing.Signature(serialization.deserialize_bytes(data['signature'])),\n            sender=to_canonical_address(data['sender']),\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "raiden-network/raiden",
    "commit": "271fdd132a8dab8915b92f5413a7b97373265220",
    "filename": "raiden/transfer/state.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/raiden-network-raiden/raiden/transfer/state.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "raiden/transfer/state.py:986:12 Incompatible parameter type [6]: Expected `typing.Keccak256` for 7th parameter `message_hash` to call `BalanceProofSignedState.__init__` but got `bytes`.",
    "message": " Expected `typing.Keccak256` for 7th parameter `message_hash` to call `BalanceProofSignedState.__init__` but got `bytes`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 986,
    "warning_line": "            message_hash=serialization.deserialize_bytes(data['message_hash']),",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            nonce=data['nonce'],\n            transferred_amount=int(data['transferred_amount']),\n            locked_amount=int(data['locked_amount']),\n            locksroot=serialization.deserialize_bytes(data['locksroot']),\n            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            channel_identifier=typing.ChannelID(int(data['channel_identifier'])),\n            message_hash=serialization.deserialize_bytes(data['message_hash']),\n            signature=serialization.deserialize_bytes(data['signature']),\n            sender=to_canonical_address(data['sender']),\n",
        "source_code_len": 611,
        "target_code": "            nonce=data['nonce'],\n            transferred_amount=typing.TokenAmount(int(data['transferred_amount'])),\n            locked_amount=typing.TokenAmount(int(data['locked_amount'])),\n            locksroot=typing.Locksroot(serialization.deserialize_bytes(data['locksroot'])),\n            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            channel_identifier=typing.ChannelID(int(data['channel_identifier'])),\n            message_hash=typing.Keccak256(serialization.deserialize_bytes(data['message_hash'])),\n            signature=typing.Signature(serialization.deserialize_bytes(data['signature'])),\n            sender=to_canonical_address(data['sender']),\n",
        "target_code_len": 705,
        "diff_format": "@@ -980,9 +980,9 @@\n             nonce=data['nonce'],\n-            transferred_amount=int(data['transferred_amount']),\n-            locked_amount=int(data['locked_amount']),\n-            locksroot=serialization.deserialize_bytes(data['locksroot']),\n+            transferred_amount=typing.TokenAmount(int(data['transferred_amount'])),\n+            locked_amount=typing.TokenAmount(int(data['locked_amount'])),\n+            locksroot=typing.Locksroot(serialization.deserialize_bytes(data['locksroot'])),\n             token_network_identifier=to_canonical_address(data['token_network_identifier']),\n             channel_identifier=typing.ChannelID(int(data['channel_identifier'])),\n-            message_hash=serialization.deserialize_bytes(data['message_hash']),\n-            signature=serialization.deserialize_bytes(data['signature']),\n+            message_hash=typing.Keccak256(serialization.deserialize_bytes(data['message_hash'])),\n+            signature=typing.Signature(serialization.deserialize_bytes(data['signature'])),\n             sender=to_canonical_address(data['sender']),\n",
        "source_code_with_indent": "            nonce=data['nonce'],\n            transferred_amount=int(data['transferred_amount']),\n            locked_amount=int(data['locked_amount']),\n            locksroot=serialization.deserialize_bytes(data['locksroot']),\n            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            channel_identifier=typing.ChannelID(int(data['channel_identifier'])),\n            message_hash=serialization.deserialize_bytes(data['message_hash']),\n            signature=serialization.deserialize_bytes(data['signature']),\n            sender=to_canonical_address(data['sender']),\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            nonce=data['nonce'],\n            transferred_amount=typing.TokenAmount(int(data['transferred_amount'])),\n            locked_amount=typing.TokenAmount(int(data['locked_amount'])),\n            locksroot=typing.Locksroot(serialization.deserialize_bytes(data['locksroot'])),\n            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            channel_identifier=typing.ChannelID(int(data['channel_identifier'])),\n            message_hash=typing.Keccak256(serialization.deserialize_bytes(data['message_hash'])),\n            signature=typing.Signature(serialization.deserialize_bytes(data['signature'])),\n            sender=to_canonical_address(data['sender']),\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "raiden-network/raiden",
    "commit": "271fdd132a8dab8915b92f5413a7b97373265220",
    "filename": "raiden/transfer/state.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/raiden-network-raiden/raiden/transfer/state.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "raiden/transfer/state.py:987:12 Incompatible parameter type [6]: Expected `typing.Signature` for 8th parameter `signature` to call `BalanceProofSignedState.__init__` but got `bytes`.",
    "message": " Expected `typing.Signature` for 8th parameter `signature` to call `BalanceProofSignedState.__init__` but got `bytes`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 987,
    "warning_line": "            signature=serialization.deserialize_bytes(data['signature']),",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            nonce=data['nonce'],\n            transferred_amount=int(data['transferred_amount']),\n            locked_amount=int(data['locked_amount']),\n            locksroot=serialization.deserialize_bytes(data['locksroot']),\n            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            channel_identifier=typing.ChannelID(int(data['channel_identifier'])),\n            message_hash=serialization.deserialize_bytes(data['message_hash']),\n            signature=serialization.deserialize_bytes(data['signature']),\n            sender=to_canonical_address(data['sender']),\n",
        "source_code_len": 611,
        "target_code": "            nonce=data['nonce'],\n            transferred_amount=typing.TokenAmount(int(data['transferred_amount'])),\n            locked_amount=typing.TokenAmount(int(data['locked_amount'])),\n            locksroot=typing.Locksroot(serialization.deserialize_bytes(data['locksroot'])),\n            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            channel_identifier=typing.ChannelID(int(data['channel_identifier'])),\n            message_hash=typing.Keccak256(serialization.deserialize_bytes(data['message_hash'])),\n            signature=typing.Signature(serialization.deserialize_bytes(data['signature'])),\n            sender=to_canonical_address(data['sender']),\n",
        "target_code_len": 705,
        "diff_format": "@@ -980,9 +980,9 @@\n             nonce=data['nonce'],\n-            transferred_amount=int(data['transferred_amount']),\n-            locked_amount=int(data['locked_amount']),\n-            locksroot=serialization.deserialize_bytes(data['locksroot']),\n+            transferred_amount=typing.TokenAmount(int(data['transferred_amount'])),\n+            locked_amount=typing.TokenAmount(int(data['locked_amount'])),\n+            locksroot=typing.Locksroot(serialization.deserialize_bytes(data['locksroot'])),\n             token_network_identifier=to_canonical_address(data['token_network_identifier']),\n             channel_identifier=typing.ChannelID(int(data['channel_identifier'])),\n-            message_hash=serialization.deserialize_bytes(data['message_hash']),\n-            signature=serialization.deserialize_bytes(data['signature']),\n+            message_hash=typing.Keccak256(serialization.deserialize_bytes(data['message_hash'])),\n+            signature=typing.Signature(serialization.deserialize_bytes(data['signature'])),\n             sender=to_canonical_address(data['sender']),\n",
        "source_code_with_indent": "            nonce=data['nonce'],\n            transferred_amount=int(data['transferred_amount']),\n            locked_amount=int(data['locked_amount']),\n            locksroot=serialization.deserialize_bytes(data['locksroot']),\n            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            channel_identifier=typing.ChannelID(int(data['channel_identifier'])),\n            message_hash=serialization.deserialize_bytes(data['message_hash']),\n            signature=serialization.deserialize_bytes(data['signature']),\n            sender=to_canonical_address(data['sender']),\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            nonce=data['nonce'],\n            transferred_amount=typing.TokenAmount(int(data['transferred_amount'])),\n            locked_amount=typing.TokenAmount(int(data['locked_amount'])),\n            locksroot=typing.Locksroot(serialization.deserialize_bytes(data['locksroot'])),\n            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            channel_identifier=typing.ChannelID(int(data['channel_identifier'])),\n            message_hash=typing.Keccak256(serialization.deserialize_bytes(data['message_hash'])),\n            signature=typing.Signature(serialization.deserialize_bytes(data['signature'])),\n            sender=to_canonical_address(data['sender']),\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]