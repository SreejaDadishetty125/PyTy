[
  {
    "project": "oppia/oppia",
    "commit": "72937725a323b0cc1ccec150c81b041abeacb575",
    "filename": "appengine_config.py",
    "min_patch_found": false,
    "full_warning_msg": "appengine_config.py:66:0 Unbound name [10]: Name `reload` is used but not defined in the current scope.",
    "exception": "[Errno 2] No such file or directory: '/home/chowyi/TypeAnnotation_Study/GitHub/oppia-oppia/appengine_config.py'",
    "dd_fail": true
  },
  {
    "project": "oppia/oppia",
    "commit": "72937725a323b0cc1ccec150c81b041abeacb575",
    "filename": "appengine_config.py",
    "min_patch_found": false,
    "full_warning_msg": "appengine_config.py:130:0 Incompatible variable type [9]: pkg_resources.get_distribution is declared to have type `typing.Callable(pkg_resources.get_distribution)[[Named(dist, typing.Union[pkg_resources.Distribution, pkg_resources.Requirement, str])], pkg_resources.Distribution]` but is used as type `typing.Callable(monkeypatched_get_distribution)[[Named(distribution_name, str)], typing.Any]`.",
    "exception": "[Errno 2] No such file or directory: '/home/chowyi/TypeAnnotation_Study/GitHub/oppia-oppia/appengine_config.py'",
    "dd_fail": true
  },
  {
    "project": "oppia/oppia",
    "commit": "72937725a323b0cc1ccec150c81b041abeacb575",
    "filename": "main.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/oppia-oppia/main.py",
    "file_hunks_size": 16,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "main.py:857:42 Incompatible parameter type [6]: Expected `Type[base.BaseHandler]` for 2nd positional only parameter to call `get_redirect_route` but got `Type[base.SessionBeginHandler]`.",
    "message": " Expected `Type[base.BaseHandler]` for 2nd positional only parameter to call `get_redirect_route` but got `Type[base.SessionBeginHandler]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 857,
    "warning_line": "    get_redirect_route(r'/session_begin', base.SessionBeginHandler),"
  },
  {
    "project": "oppia/oppia",
    "commit": "72937725a323b0cc1ccec150c81b041abeacb575",
    "filename": "main.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/oppia-oppia/main.py",
    "file_hunks_size": 16,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "main.py:858:40 Incompatible parameter type [6]: Expected `Type[base.BaseHandler]` for 2nd positional only parameter to call `get_redirect_route` but got `Type[base.SessionEndHandler]`.",
    "message": " Expected `Type[base.BaseHandler]` for 2nd positional only parameter to call `get_redirect_route` but got `Type[base.SessionEndHandler]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 858,
    "warning_line": "    get_redirect_route(r'/session_end', base.SessionEndHandler),"
  },
  {
    "project": "oppia/oppia",
    "commit": "72937725a323b0cc1ccec150c81b041abeacb575",
    "filename": "utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/oppia-oppia/utils.py",
    "file_hunks_size": 20,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "utils.py:213:4 Incompatible return type [7]: Expected `str` but got `bytes`.",
    "message": " Expected `str` but got `bytes`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 213,
    "warning_line": "    return unicodedata.normalize(",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    \"\"\"\n    return unicodedata.normalize(\n        'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore')\n\n",
        "source_code_len": 121,
        "target_code": "    \"\"\"\n    normalized_string = unicodedata.normalize(\n        'NFKD', python_utils.UNICODE(input_string))\n    return normalized_string.encode('ascii', 'ignore').decode('ascii')\n\n",
        "target_code_len": 179,
        "diff_format": "@@ -212,4 +212,5 @@\n     \"\"\"\n-    return unicodedata.normalize(\n-        'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore')\n+    normalized_string = unicodedata.normalize(\n+        'NFKD', python_utils.UNICODE(input_string))\n+    return normalized_string.encode('ascii', 'ignore').decode('ascii')\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    return unicodedata.normalize(\n        'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore')\n\n",
        "target_code_with_indent": "\n    normalized_string = unicodedata.normalize(\n        'NFKD', python_utils.UNICODE(input_string))\n    return normalized_string.encode('ascii', 'ignore').decode('ascii')\n\n"
      }
    ]
  },
  {
    "project": "oppia/oppia",
    "commit": "72937725a323b0cc1ccec150c81b041abeacb575",
    "filename": "utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/oppia-oppia/utils.py",
    "file_hunks_size": 20,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "utils.py:310:8 Incompatible return type [7]: Expected `str` but got `bytes`.",
    "message": " Expected `str` but got `bytes`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 310,
    "warning_line": "        return base64.b64decode(",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def convert_png_data_url_to_binary(image_data_url):\n    # type: (Text) -> Text\n    \"\"\"Converts a PNG base64 data URL to a PNG binary data.\n",
        "source_code_len": 139,
        "target_code": "def convert_png_data_url_to_binary(image_data_url):\n    # type: (Text) -> bytes\n    \"\"\"Converts a PNG base64 data URL to a PNG binary data.\n",
        "target_code_len": 140,
        "diff_format": "@@ -295,3 +296,3 @@\n def convert_png_data_url_to_binary(image_data_url):\n-    # type: (Text) -> Text\n+    # type: (Text) -> bytes\n     \"\"\"Converts a PNG base64 data URL to a PNG binary data.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "<DED>def convert_png_data_url_to_binary(image_data_url):\n    # type: (Text) -> Text\n    <IND>",
        "target_code_with_indent": "<DED>def convert_png_data_url_to_binary(image_data_url):\n    # type: (Text) -> bytes\n    <IND>"
      }
    ]
  },
  {
    "project": "oppia/oppia",
    "commit": "72937725a323b0cc1ccec150c81b041abeacb575",
    "filename": "utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/oppia-oppia/utils.py",
    "file_hunks_size": 20,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "utils.py:333:25 Incompatible parameter type [6]: Expected `bytes` for 2nd parameter `h` to call `imghdr.what` but got `str`.",
    "message": " Expected `bytes` for 2nd parameter `h` to call `imghdr.what` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 333,
    "warning_line": "    if imghdr.what(None, h=content) == 'png':",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    \"\"\"\n    # We accept unicode but imghdr.what(file, h) accept 'h' of type str.\n    # So we have casted content to be str.\n    content = cast(str, content)\n    if imghdr.what(None, h=content) == 'png':\n",
        "source_code_len": 203,
        "target_code": "    \"\"\"\n    # We accept unicode but imghdr.what(file, h) accepts 'h' of type bytes.\n    # So we have casted content to be bytes.\n    content = python_utils.convert_to_bytes(content)\n    if imghdr.what(None, h=content) == 'png':\n",
        "target_code_len": 228,
        "diff_format": "@@ -329,5 +330,5 @@\n     \"\"\"\n-    # We accept unicode but imghdr.what(file, h) accept 'h' of type str.\n-    # So we have casted content to be str.\n-    content = cast(str, content)\n+    # We accept unicode but imghdr.what(file, h) accepts 'h' of type bytes.\n+    # So we have casted content to be bytes.\n+    content = python_utils.convert_to_bytes(content)\n     if imghdr.what(None, h=content) == 'png':\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    # We accept unicode but imghdr.what(file, h) accept 'h' of type str.\n    # So we have casted content to be str.\n    content = cast(str, content)\n    if imghdr.what(None, h=content) == 'png':\n",
        "target_code_with_indent": "\n    # We accept unicode but imghdr.what(file, h) accepts 'h' of type bytes.\n    # So we have casted content to be bytes.\n    content = python_utils.convert_to_bytes(content)\n    if imghdr.what(None, h=content) == 'png':\n"
      }
    ]
  },
  {
    "project": "oppia/oppia",
    "commit": "72937725a323b0cc1ccec150c81b041abeacb575",
    "filename": "utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/oppia-oppia/utils.py",
    "file_hunks_size": 20,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "utils.py:462:14 Incompatible parameter type [6]: Expected `bytes` for 1st positional only parameter to call `bytes.replace` but got `str`.",
    "message": " Expected `bytes` for 1st positional only parameter to call `bytes.replace` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 462,
    "warning_line": "    ).replace('=', 'c')",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        hashlib.sha1(\n            python_utils.convert_to_bytes(input_string)).digest(), # type: ignore[no-untyped-call]\n        altchars=b'ab'\n    ).replace('=', 'c')\n\n    return encoded_string[:max_length]\n\n",
        "source_code_len": 209,
        "target_code": "        hashlib.sha1(\n            python_utils.convert_to_bytes(input_string)).digest(),\n        altchars=b'ab'\n    ).replace(b'=', b'c')\n\n    return encoded_string[:max_length].decode('utf-8')\n\n",
        "target_code_len": 195,
        "diff_format": "@@ -459,7 +460,7 @@\n         hashlib.sha1(\n-            python_utils.convert_to_bytes(input_string)).digest(), # type: ignore[no-untyped-call]\n+            python_utils.convert_to_bytes(input_string)).digest(),\n         altchars=b'ab'\n-    ).replace('=', 'c')\n-\n-    return encoded_string[:max_length]\n+    ).replace(b'=', b'c')\n+\n+    return encoded_string[:max_length].decode('utf-8')\n \n",
        "source_code_with_indent": "        hashlib.sha1(\n            python_utils.convert_to_bytes(input_string)).digest(), # type: ignore[no-untyped-call]\n        altchars=b'ab'\n    ).replace('=', 'c')\n\n    return encoded_string[:max_length]\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        hashlib.sha1(\n            python_utils.convert_to_bytes(input_string)).digest(),\n        altchars=b'ab'\n    ).replace(b'=', b'c')\n\n    return encoded_string[:max_length].decode('utf-8')\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "oppia/oppia",
    "commit": "72937725a323b0cc1ccec150c81b041abeacb575",
    "filename": "utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/oppia-oppia/utils.py",
    "file_hunks_size": 20,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "utils.py:462:19 Incompatible parameter type [6]: Expected `bytes` for 2nd positional only parameter to call `bytes.replace` but got `str`.",
    "message": " Expected `bytes` for 2nd positional only parameter to call `bytes.replace` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 462,
    "warning_line": "    ).replace('=', 'c')",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        hashlib.sha1(\n            python_utils.convert_to_bytes(input_string)).digest(), # type: ignore[no-untyped-call]\n        altchars=b'ab'\n    ).replace('=', 'c')\n\n    return encoded_string[:max_length]\n\n",
        "source_code_len": 209,
        "target_code": "        hashlib.sha1(\n            python_utils.convert_to_bytes(input_string)).digest(),\n        altchars=b'ab'\n    ).replace(b'=', b'c')\n\n    return encoded_string[:max_length].decode('utf-8')\n\n",
        "target_code_len": 195,
        "diff_format": "@@ -459,7 +460,7 @@\n         hashlib.sha1(\n-            python_utils.convert_to_bytes(input_string)).digest(), # type: ignore[no-untyped-call]\n+            python_utils.convert_to_bytes(input_string)).digest(),\n         altchars=b'ab'\n-    ).replace('=', 'c')\n-\n-    return encoded_string[:max_length]\n+    ).replace(b'=', b'c')\n+\n+    return encoded_string[:max_length].decode('utf-8')\n \n",
        "source_code_with_indent": "        hashlib.sha1(\n            python_utils.convert_to_bytes(input_string)).digest(), # type: ignore[no-untyped-call]\n        altchars=b'ab'\n    ).replace('=', 'c')\n\n    return encoded_string[:max_length]\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        hashlib.sha1(\n            python_utils.convert_to_bytes(input_string)).digest(),\n        altchars=b'ab'\n    ).replace(b'=', b'c')\n\n    return encoded_string[:max_length].decode('utf-8')\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "oppia/oppia",
    "commit": "72937725a323b0cc1ccec150c81b041abeacb575",
    "filename": "utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/oppia-oppia/utils.py",
    "file_hunks_size": 20,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "utils.py:464:4 Incompatible return type [7]: Expected `str` but got `bytes`.",
    "message": " Expected `str` but got `bytes`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 464,
    "warning_line": "    return encoded_string[:max_length]",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        hashlib.sha1(\n            python_utils.convert_to_bytes(input_string)).digest(), # type: ignore[no-untyped-call]\n        altchars=b'ab'\n    ).replace('=', 'c')\n\n    return encoded_string[:max_length]\n\n",
        "source_code_len": 209,
        "target_code": "        hashlib.sha1(\n            python_utils.convert_to_bytes(input_string)).digest(),\n        altchars=b'ab'\n    ).replace(b'=', b'c')\n\n    return encoded_string[:max_length].decode('utf-8')\n\n",
        "target_code_len": 195,
        "diff_format": "@@ -459,7 +460,7 @@\n         hashlib.sha1(\n-            python_utils.convert_to_bytes(input_string)).digest(), # type: ignore[no-untyped-call]\n+            python_utils.convert_to_bytes(input_string)).digest(),\n         altchars=b'ab'\n-    ).replace('=', 'c')\n-\n-    return encoded_string[:max_length]\n+    ).replace(b'=', b'c')\n+\n+    return encoded_string[:max_length].decode('utf-8')\n \n",
        "source_code_with_indent": "        hashlib.sha1(\n            python_utils.convert_to_bytes(input_string)).digest(), # type: ignore[no-untyped-call]\n        altchars=b'ab'\n    ).replace('=', 'c')\n\n    return encoded_string[:max_length]\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        hashlib.sha1(\n            python_utils.convert_to_bytes(input_string)).digest(),\n        altchars=b'ab'\n    ).replace(b'=', b'c')\n\n    return encoded_string[:max_length].decode('utf-8')\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "oppia/oppia",
    "commit": "72937725a323b0cc1ccec150c81b041abeacb575",
    "filename": "utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/oppia-oppia/utils.py",
    "file_hunks_size": 20,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "utils.py:478:4 Incompatible return type [7]: Expected `str` but got `bytes`.",
    "message": " Expected `str` but got `bytes`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 478,
    "warning_line": "    return base64.b64encode(byte_value)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    Returns:\n        *. Returns the base64 representation of the number passed.\n    \"\"\"\n    byte_value = b'[' + python_utils.convert_to_bytes(value) + b']' # type: ignore[no-untyped-call]\n    return base64.b64encode(byte_value)\n\n",
        "source_code_len": 229,
        "target_code": "    Returns:\n        str. Returns the base64 representation of the number passed.\n    \"\"\"\n    byte_value = (\n        b'[' + python_utils.UNICODE(value).encode('utf-8') + b']')\n    return base64.b64encode(byte_value).decode('utf-8')\n\n",
        "target_code_len": 233,
        "diff_format": "@@ -474,6 +475,7 @@\n     Returns:\n-        *. Returns the base64 representation of the number passed.\n-    \"\"\"\n-    byte_value = b'[' + python_utils.convert_to_bytes(value) + b']' # type: ignore[no-untyped-call]\n-    return base64.b64encode(byte_value)\n+        str. Returns the base64 representation of the number passed.\n+    \"\"\"\n+    byte_value = (\n+        b'[' + python_utils.UNICODE(value).encode('utf-8') + b']')\n+    return base64.b64encode(byte_value).decode('utf-8')\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    byte_value = b'[' + python_utils.convert_to_bytes(value) + b']' # type: ignore[no-untyped-call]\n    return base64.b64encode(byte_value)\n\n",
        "target_code_with_indent": "\n    byte_value = (\n        b'[' + python_utils.UNICODE(value).encode('utf-8') + b']')\n    return base64.b64encode(byte_value).decode('utf-8')\n\n"
      }
    ]
  },
  {
    "project": "oppia/oppia",
    "commit": "72937725a323b0cc1ccec150c81b041abeacb575",
    "filename": "utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/oppia-oppia/utils.py",
    "file_hunks_size": 20,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "utils.py:619:4 Incompatible return type [7]: Expected `str` but got `bytes`.",
    "message": " Expected `str` but got `bytes`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 619,
    "warning_line": "    return base64.urlsafe_b64encode(os.urandom(length))[:length]",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    \"\"\"\n    return base64.urlsafe_b64encode(os.urandom(length))[:length]\n\n",
        "source_code_len": 74,
        "target_code": "    \"\"\"\n    return base64.urlsafe_b64encode(os.urandom(length))[:length].decode('utf-8')\n\n",
        "target_code_len": 90,
        "diff_format": "@@ -618,3 +620,3 @@\n     \"\"\"\n-    return base64.urlsafe_b64encode(os.urandom(length))[:length]\n+    return base64.urlsafe_b64encode(os.urandom(length))[:length].decode('utf-8')\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    return base64.urlsafe_b64encode(os.urandom(length))[:length]\n\n",
        "target_code_with_indent": "\n    return base64.urlsafe_b64encode(os.urandom(length))[:length].decode('utf-8')\n\n"
      }
    ]
  },
  {
    "project": "oppia/oppia",
    "commit": "72937725a323b0cc1ccec150c81b041abeacb575",
    "filename": "utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/oppia-oppia/utils.py",
    "file_hunks_size": 20,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "utils.py:213:4 Incompatible return type [7]: Expected `str` but got `bytes`.",
    "message": " Expected `str` but got `bytes`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 213,
    "warning_line": "    return unicodedata.normalize(",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    \"\"\"\n    return unicodedata.normalize(\n        'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore')\n\n",
        "source_code_len": 121,
        "target_code": "    \"\"\"\n    normalized_string = unicodedata.normalize(\n        'NFKD', python_utils.UNICODE(input_string))\n    return normalized_string.encode('ascii', 'ignore').decode('ascii')\n\n",
        "target_code_len": 179,
        "diff_format": "@@ -212,4 +212,5 @@\n     \"\"\"\n-    return unicodedata.normalize(\n-        'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore')\n+    normalized_string = unicodedata.normalize(\n+        'NFKD', python_utils.UNICODE(input_string))\n+    return normalized_string.encode('ascii', 'ignore').decode('ascii')\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    return unicodedata.normalize(\n        'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore')\n\n",
        "target_code_with_indent": "\n    normalized_string = unicodedata.normalize(\n        'NFKD', python_utils.UNICODE(input_string))\n    return normalized_string.encode('ascii', 'ignore').decode('ascii')\n\n"
      }
    ]
  },
  {
    "project": "oppia/oppia",
    "commit": "72937725a323b0cc1ccec150c81b041abeacb575",
    "filename": "utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/oppia-oppia/utils.py",
    "file_hunks_size": 20,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "utils.py:310:8 Incompatible return type [7]: Expected `str` but got `bytes`.",
    "message": " Expected `str` but got `bytes`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 310,
    "warning_line": "        return base64.b64decode(",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def convert_png_data_url_to_binary(image_data_url):\n    # type: (Text) -> Text\n    \"\"\"Converts a PNG base64 data URL to a PNG binary data.\n",
        "source_code_len": 139,
        "target_code": "def convert_png_data_url_to_binary(image_data_url):\n    # type: (Text) -> bytes\n    \"\"\"Converts a PNG base64 data URL to a PNG binary data.\n",
        "target_code_len": 140,
        "diff_format": "@@ -295,3 +296,3 @@\n def convert_png_data_url_to_binary(image_data_url):\n-    # type: (Text) -> Text\n+    # type: (Text) -> bytes\n     \"\"\"Converts a PNG base64 data URL to a PNG binary data.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "<DED>def convert_png_data_url_to_binary(image_data_url):\n    # type: (Text) -> Text\n    <IND>",
        "target_code_with_indent": "<DED>def convert_png_data_url_to_binary(image_data_url):\n    # type: (Text) -> bytes\n    <IND>"
      }
    ]
  },
  {
    "project": "oppia/oppia",
    "commit": "72937725a323b0cc1ccec150c81b041abeacb575",
    "filename": "utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/oppia-oppia/utils.py",
    "file_hunks_size": 20,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "utils.py:333:25 Incompatible parameter type [6]: Expected `bytes` for 2nd parameter `h` to call `imghdr.what` but got `str`.",
    "message": " Expected `bytes` for 2nd parameter `h` to call `imghdr.what` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 333,
    "warning_line": "    if imghdr.what(None, h=content) == 'png':",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    \"\"\"\n    # We accept unicode but imghdr.what(file, h) accept 'h' of type str.\n    # So we have casted content to be str.\n    content = cast(str, content)\n    if imghdr.what(None, h=content) == 'png':\n",
        "source_code_len": 203,
        "target_code": "    \"\"\"\n    # We accept unicode but imghdr.what(file, h) accepts 'h' of type bytes.\n    # So we have casted content to be bytes.\n    content = python_utils.convert_to_bytes(content)\n    if imghdr.what(None, h=content) == 'png':\n",
        "target_code_len": 228,
        "diff_format": "@@ -329,5 +330,5 @@\n     \"\"\"\n-    # We accept unicode but imghdr.what(file, h) accept 'h' of type str.\n-    # So we have casted content to be str.\n-    content = cast(str, content)\n+    # We accept unicode but imghdr.what(file, h) accepts 'h' of type bytes.\n+    # So we have casted content to be bytes.\n+    content = python_utils.convert_to_bytes(content)\n     if imghdr.what(None, h=content) == 'png':\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    # We accept unicode but imghdr.what(file, h) accept 'h' of type str.\n    # So we have casted content to be str.\n    content = cast(str, content)\n    if imghdr.what(None, h=content) == 'png':\n",
        "target_code_with_indent": "\n    # We accept unicode but imghdr.what(file, h) accepts 'h' of type bytes.\n    # So we have casted content to be bytes.\n    content = python_utils.convert_to_bytes(content)\n    if imghdr.what(None, h=content) == 'png':\n"
      }
    ]
  },
  {
    "project": "oppia/oppia",
    "commit": "72937725a323b0cc1ccec150c81b041abeacb575",
    "filename": "utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/oppia-oppia/utils.py",
    "file_hunks_size": 20,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "utils.py:462:14 Incompatible parameter type [6]: Expected `bytes` for 1st positional only parameter to call `bytes.replace` but got `str`.",
    "message": " Expected `bytes` for 1st positional only parameter to call `bytes.replace` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 462,
    "warning_line": "    ).replace('=', 'c')",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        hashlib.sha1(\n            python_utils.convert_to_bytes(input_string)).digest(), # type: ignore[no-untyped-call]\n        altchars=b'ab'\n    ).replace('=', 'c')\n\n    return encoded_string[:max_length]\n\n",
        "source_code_len": 209,
        "target_code": "        hashlib.sha1(\n            python_utils.convert_to_bytes(input_string)).digest(),\n        altchars=b'ab'\n    ).replace(b'=', b'c')\n\n    return encoded_string[:max_length].decode('utf-8')\n\n",
        "target_code_len": 195,
        "diff_format": "@@ -459,7 +460,7 @@\n         hashlib.sha1(\n-            python_utils.convert_to_bytes(input_string)).digest(), # type: ignore[no-untyped-call]\n+            python_utils.convert_to_bytes(input_string)).digest(),\n         altchars=b'ab'\n-    ).replace('=', 'c')\n-\n-    return encoded_string[:max_length]\n+    ).replace(b'=', b'c')\n+\n+    return encoded_string[:max_length].decode('utf-8')\n \n",
        "source_code_with_indent": "        hashlib.sha1(\n            python_utils.convert_to_bytes(input_string)).digest(), # type: ignore[no-untyped-call]\n        altchars=b'ab'\n    ).replace('=', 'c')\n\n    return encoded_string[:max_length]\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        hashlib.sha1(\n            python_utils.convert_to_bytes(input_string)).digest(),\n        altchars=b'ab'\n    ).replace(b'=', b'c')\n\n    return encoded_string[:max_length].decode('utf-8')\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "oppia/oppia",
    "commit": "72937725a323b0cc1ccec150c81b041abeacb575",
    "filename": "utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/oppia-oppia/utils.py",
    "file_hunks_size": 20,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "utils.py:462:19 Incompatible parameter type [6]: Expected `bytes` for 2nd positional only parameter to call `bytes.replace` but got `str`.",
    "message": " Expected `bytes` for 2nd positional only parameter to call `bytes.replace` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 462,
    "warning_line": "    ).replace('=', 'c')",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        hashlib.sha1(\n            python_utils.convert_to_bytes(input_string)).digest(), # type: ignore[no-untyped-call]\n        altchars=b'ab'\n    ).replace('=', 'c')\n\n    return encoded_string[:max_length]\n\n",
        "source_code_len": 209,
        "target_code": "        hashlib.sha1(\n            python_utils.convert_to_bytes(input_string)).digest(),\n        altchars=b'ab'\n    ).replace(b'=', b'c')\n\n    return encoded_string[:max_length].decode('utf-8')\n\n",
        "target_code_len": 195,
        "diff_format": "@@ -459,7 +460,7 @@\n         hashlib.sha1(\n-            python_utils.convert_to_bytes(input_string)).digest(), # type: ignore[no-untyped-call]\n+            python_utils.convert_to_bytes(input_string)).digest(),\n         altchars=b'ab'\n-    ).replace('=', 'c')\n-\n-    return encoded_string[:max_length]\n+    ).replace(b'=', b'c')\n+\n+    return encoded_string[:max_length].decode('utf-8')\n \n",
        "source_code_with_indent": "        hashlib.sha1(\n            python_utils.convert_to_bytes(input_string)).digest(), # type: ignore[no-untyped-call]\n        altchars=b'ab'\n    ).replace('=', 'c')\n\n    return encoded_string[:max_length]\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        hashlib.sha1(\n            python_utils.convert_to_bytes(input_string)).digest(),\n        altchars=b'ab'\n    ).replace(b'=', b'c')\n\n    return encoded_string[:max_length].decode('utf-8')\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "oppia/oppia",
    "commit": "72937725a323b0cc1ccec150c81b041abeacb575",
    "filename": "utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/oppia-oppia/utils.py",
    "file_hunks_size": 20,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "utils.py:464:4 Incompatible return type [7]: Expected `str` but got `bytes`.",
    "message": " Expected `str` but got `bytes`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 464,
    "warning_line": "    return encoded_string[:max_length]",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        hashlib.sha1(\n            python_utils.convert_to_bytes(input_string)).digest(), # type: ignore[no-untyped-call]\n        altchars=b'ab'\n    ).replace('=', 'c')\n\n    return encoded_string[:max_length]\n\n",
        "source_code_len": 209,
        "target_code": "        hashlib.sha1(\n            python_utils.convert_to_bytes(input_string)).digest(),\n        altchars=b'ab'\n    ).replace(b'=', b'c')\n\n    return encoded_string[:max_length].decode('utf-8')\n\n",
        "target_code_len": 195,
        "diff_format": "@@ -459,7 +460,7 @@\n         hashlib.sha1(\n-            python_utils.convert_to_bytes(input_string)).digest(), # type: ignore[no-untyped-call]\n+            python_utils.convert_to_bytes(input_string)).digest(),\n         altchars=b'ab'\n-    ).replace('=', 'c')\n-\n-    return encoded_string[:max_length]\n+    ).replace(b'=', b'c')\n+\n+    return encoded_string[:max_length].decode('utf-8')\n \n",
        "source_code_with_indent": "        hashlib.sha1(\n            python_utils.convert_to_bytes(input_string)).digest(), # type: ignore[no-untyped-call]\n        altchars=b'ab'\n    ).replace('=', 'c')\n\n    return encoded_string[:max_length]\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        hashlib.sha1(\n            python_utils.convert_to_bytes(input_string)).digest(),\n        altchars=b'ab'\n    ).replace(b'=', b'c')\n\n    return encoded_string[:max_length].decode('utf-8')\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "oppia/oppia",
    "commit": "72937725a323b0cc1ccec150c81b041abeacb575",
    "filename": "utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/oppia-oppia/utils.py",
    "file_hunks_size": 20,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "utils.py:478:4 Incompatible return type [7]: Expected `str` but got `bytes`.",
    "message": " Expected `str` but got `bytes`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 478,
    "warning_line": "    return base64.b64encode(byte_value)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    Returns:\n        *. Returns the base64 representation of the number passed.\n    \"\"\"\n    byte_value = b'[' + python_utils.convert_to_bytes(value) + b']' # type: ignore[no-untyped-call]\n    return base64.b64encode(byte_value)\n\n",
        "source_code_len": 229,
        "target_code": "    Returns:\n        str. Returns the base64 representation of the number passed.\n    \"\"\"\n    byte_value = (\n        b'[' + python_utils.UNICODE(value).encode('utf-8') + b']')\n    return base64.b64encode(byte_value).decode('utf-8')\n\n",
        "target_code_len": 233,
        "diff_format": "@@ -474,6 +475,7 @@\n     Returns:\n-        *. Returns the base64 representation of the number passed.\n-    \"\"\"\n-    byte_value = b'[' + python_utils.convert_to_bytes(value) + b']' # type: ignore[no-untyped-call]\n-    return base64.b64encode(byte_value)\n+        str. Returns the base64 representation of the number passed.\n+    \"\"\"\n+    byte_value = (\n+        b'[' + python_utils.UNICODE(value).encode('utf-8') + b']')\n+    return base64.b64encode(byte_value).decode('utf-8')\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    byte_value = b'[' + python_utils.convert_to_bytes(value) + b']' # type: ignore[no-untyped-call]\n    return base64.b64encode(byte_value)\n\n",
        "target_code_with_indent": "\n    byte_value = (\n        b'[' + python_utils.UNICODE(value).encode('utf-8') + b']')\n    return base64.b64encode(byte_value).decode('utf-8')\n\n"
      }
    ]
  },
  {
    "project": "oppia/oppia",
    "commit": "72937725a323b0cc1ccec150c81b041abeacb575",
    "filename": "utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/oppia-oppia/utils.py",
    "file_hunks_size": 20,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "utils.py:619:4 Incompatible return type [7]: Expected `str` but got `bytes`.",
    "message": " Expected `str` but got `bytes`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 619,
    "warning_line": "    return base64.urlsafe_b64encode(os.urandom(length))[:length]",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    \"\"\"\n    return base64.urlsafe_b64encode(os.urandom(length))[:length]\n\n",
        "source_code_len": 74,
        "target_code": "    \"\"\"\n    return base64.urlsafe_b64encode(os.urandom(length))[:length].decode('utf-8')\n\n",
        "target_code_len": 90,
        "diff_format": "@@ -618,3 +620,3 @@\n     \"\"\"\n-    return base64.urlsafe_b64encode(os.urandom(length))[:length]\n+    return base64.urlsafe_b64encode(os.urandom(length))[:length].decode('utf-8')\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    return base64.urlsafe_b64encode(os.urandom(length))[:length]\n\n",
        "target_code_with_indent": "\n    return base64.urlsafe_b64encode(os.urandom(length))[:length].decode('utf-8')\n\n"
      }
    ]
  },
  {
    "project": "oppia/oppia",
    "commit": "72937725a323b0cc1ccec150c81b041abeacb575",
    "filename": "jobs/transforms/blog_validation.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/oppia-oppia/jobs/transforms/blog_validation.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jobs/transforms/blog_validation.py:72:4 Inconsistent override [14]: `jobs.transforms.blog_validation.ValidateBlogPostModelDomainObjectsInstances._get_domain_object_validation_type` overrides method defined in `base_validation.ValidateModelDomainObjectInstances` inconsistently. Could not find parameter `unused_item` in overriding signature.",
    "message": " `jobs.transforms.blog_validation.ValidateBlogPostModelDomainObjectsInstances._get_domain_object_validation_type` overrides method defined in `base_validation.ValidateModelDomainObjectInstances` inconsistently. Could not find parameter `unused_item` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 72,
    "warning_line": "    def _get_domain_object_validation_type(self, item):",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _get_domain_object_validation_type(self, item):\n        # type: (Any) -> Any\n",
        "source_code_len": 86,
        "target_code": "\n    def _get_domain_object_validation_type(self, unused_item):\n        # type: (Any) -> Any\n",
        "target_code_len": 93,
        "diff_format": "@@ -71,3 +71,3 @@\n \n-    def _get_domain_object_validation_type(self, item):\n+    def _get_domain_object_validation_type(self, unused_item):\n         # type: (Any) -> Any\n",
        "source_code_with_indent": "\n    <DED>def _get_domain_object_validation_type(self, item):\n        # type: (Any) -> Any\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def _get_domain_object_validation_type(self, unused_item):\n        # type: (Any) -> Any\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"\"\"\n        blog_post_rights = (\n            blog_services.get_blog_post_rights( # type: ignore[no-untyped-call]\n                item.id, strict=True))\n\n        if blog_post_rights.blog_post_is_published:\n            return base_validation.VALIDATION_MODES.strict\n\n        return base_validation.VALIDATION_MODES.non_strict\n\n",
        "source_code_len": 333,
        "target_code": "        \"\"\"\n        # TODO(#13397): Write a custom job to avoid applying strict validation\n        # to private blog posts. We can't determine public/private without\n        # performing an NDB get() operation, which are forbidden in Apache Beam\n        # jobs.\n        return base_validation.VALIDATION_MODES.strict\n\n",
        "target_code_len": 318,
        "diff_format": "@@ -81,10 +81,7 @@\n         \"\"\"\n-        blog_post_rights = (\n-            blog_services.get_blog_post_rights( # type: ignore[no-untyped-call]\n-                item.id, strict=True))\n-\n-        if blog_post_rights.blog_post_is_published:\n-            return base_validation.VALIDATION_MODES.strict\n-\n-        return base_validation.VALIDATION_MODES.non_strict\n+        # TODO(#13397): Write a custom job to avoid applying strict validation\n+        # to private blog posts. We can't determine public/private without\n+        # performing an NDB get() operation, which are forbidden in Apache Beam\n+        # jobs.\n+        return base_validation.VALIDATION_MODES.strict\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n        blog_post_rights = (\n            blog_services.get_blog_post_rights( # type: ignore[no-untyped-call]\n                item.id, strict=True))\n\n        if blog_post_rights.blog_post_is_published:\n            <IND>return base_validation.VALIDATION_MODES.strict\n\n        <DED>return base_validation.VALIDATION_MODES.non_strict\n\n",
        "target_code_with_indent": "\n        # TODO(#13397): Write a custom job to avoid applying strict validation\n        # to private blog posts. We can't determine public/private without\n        # performing an NDB get() operation, which are forbidden in Apache Beam\n        # jobs.\n        return base_validation.VALIDATION_MODES.strict\n\n"
      }
    ]
  },
  {
    "project": "oppia/oppia",
    "commit": "72937725a323b0cc1ccec150c81b041abeacb575",
    "filename": "jobs/transforms/blog_validation.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/oppia-oppia/jobs/transforms/blog_validation.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jobs/transforms/blog_validation.py:162:4 Inconsistent override [14]: `jobs.transforms.blog_validation.ValidateBlogSummaryModelDomainObjectsInstances._get_domain_object_validation_type` overrides method defined in `base_validation.ValidateModelDomainObjectInstances` inconsistently. Could not find parameter `unused_item` in overriding signature.",
    "message": " `jobs.transforms.blog_validation.ValidateBlogSummaryModelDomainObjectsInstances._get_domain_object_validation_type` overrides method defined in `base_validation.ValidateModelDomainObjectInstances` inconsistently. Could not find parameter `unused_item` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 162,
    "warning_line": "    def _get_domain_object_validation_type(self, item):",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _get_domain_object_validation_type(self, item):\n        # type: (Any) -> Any\n",
        "source_code_len": 86,
        "target_code": "\n    def _get_domain_object_validation_type(self, unused_item):\n        # type: (Any) -> Any\n",
        "target_code_len": 93,
        "diff_format": "@@ -161,3 +158,3 @@\n \n-    def _get_domain_object_validation_type(self, item):\n+    def _get_domain_object_validation_type(self, unused_item):\n         # type: (Any) -> Any\n",
        "source_code_with_indent": "\n    <DED>def _get_domain_object_validation_type(self, item):\n        # type: (Any) -> Any\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def _get_domain_object_validation_type(self, unused_item):\n        # type: (Any) -> Any\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"\"\"\n        blog_post_rights = (\n            blog_services.get_blog_post_rights( # type: ignore[no-untyped-call]\n                item.id, strict=True))\n\n        if blog_post_rights.blog_post_is_published:\n            return base_validation.VALIDATION_MODES.strict\n\n        return base_validation.VALIDATION_MODES.non_strict\n\n",
        "source_code_len": 333,
        "target_code": "        \"\"\"\n        # TODO(#13397): Write a custom job to avoid applying strict validation\n        # to private blog posts. We can't determine public/private without\n        # performing an NDB get() operation, which are forbidden in Apache Beam\n        # jobs.\n        return base_validation.VALIDATION_MODES.strict\n\n",
        "target_code_len": 318,
        "diff_format": "@@ -171,10 +168,7 @@\n         \"\"\"\n-        blog_post_rights = (\n-            blog_services.get_blog_post_rights( # type: ignore[no-untyped-call]\n-                item.id, strict=True))\n-\n-        if blog_post_rights.blog_post_is_published:\n-            return base_validation.VALIDATION_MODES.strict\n-\n-        return base_validation.VALIDATION_MODES.non_strict\n+        # TODO(#13397): Write a custom job to avoid applying strict validation\n+        # to private blog posts. We can't determine public/private without\n+        # performing an NDB get() operation, which are forbidden in Apache Beam\n+        # jobs.\n+        return base_validation.VALIDATION_MODES.strict\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n        blog_post_rights = (\n            blog_services.get_blog_post_rights( # type: ignore[no-untyped-call]\n                item.id, strict=True))\n\n        if blog_post_rights.blog_post_is_published:\n            <IND>return base_validation.VALIDATION_MODES.strict\n\n        <DED>return base_validation.VALIDATION_MODES.non_strict\n\n",
        "target_code_with_indent": "\n        # TODO(#13397): Write a custom job to avoid applying strict validation\n        # to private blog posts. We can't determine public/private without\n        # performing an NDB get() operation, which are forbidden in Apache Beam\n        # jobs.\n        return base_validation.VALIDATION_MODES.strict\n\n"
      }
    ]
  },
  {
    "project": "oppia/oppia",
    "commit": "72937725a323b0cc1ccec150c81b041abeacb575",
    "filename": "utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/oppia-oppia/utils.py",
    "file_hunks_size": 20,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "utils.py:213:4 Incompatible return type [7]: Expected `str` but got `bytes`.",
    "message": " Expected `str` but got `bytes`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 213,
    "warning_line": "    return unicodedata.normalize(",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    \"\"\"\n    return unicodedata.normalize(\n        'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore')\n\n",
        "source_code_len": 121,
        "target_code": "    \"\"\"\n    normalized_string = unicodedata.normalize(\n        'NFKD', python_utils.UNICODE(input_string))\n    return normalized_string.encode('ascii', 'ignore').decode('ascii')\n\n",
        "target_code_len": 179,
        "diff_format": "@@ -212,4 +212,5 @@\n     \"\"\"\n-    return unicodedata.normalize(\n-        'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore')\n+    normalized_string = unicodedata.normalize(\n+        'NFKD', python_utils.UNICODE(input_string))\n+    return normalized_string.encode('ascii', 'ignore').decode('ascii')\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    return unicodedata.normalize(\n        'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore')\n\n",
        "target_code_with_indent": "\n    normalized_string = unicodedata.normalize(\n        'NFKD', python_utils.UNICODE(input_string))\n    return normalized_string.encode('ascii', 'ignore').decode('ascii')\n\n"
      }
    ]
  },
  {
    "project": "oppia/oppia",
    "commit": "72937725a323b0cc1ccec150c81b041abeacb575",
    "filename": "utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/oppia-oppia/utils.py",
    "file_hunks_size": 20,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "utils.py:310:8 Incompatible return type [7]: Expected `str` but got `bytes`.",
    "message": " Expected `str` but got `bytes`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 310,
    "warning_line": "        return base64.b64decode(",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def convert_png_data_url_to_binary(image_data_url):\n    # type: (Text) -> Text\n    \"\"\"Converts a PNG base64 data URL to a PNG binary data.\n",
        "source_code_len": 139,
        "target_code": "def convert_png_data_url_to_binary(image_data_url):\n    # type: (Text) -> bytes\n    \"\"\"Converts a PNG base64 data URL to a PNG binary data.\n",
        "target_code_len": 140,
        "diff_format": "@@ -295,3 +296,3 @@\n def convert_png_data_url_to_binary(image_data_url):\n-    # type: (Text) -> Text\n+    # type: (Text) -> bytes\n     \"\"\"Converts a PNG base64 data URL to a PNG binary data.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "<DED>def convert_png_data_url_to_binary(image_data_url):\n    # type: (Text) -> Text\n    <IND>",
        "target_code_with_indent": "<DED>def convert_png_data_url_to_binary(image_data_url):\n    # type: (Text) -> bytes\n    <IND>"
      }
    ]
  },
  {
    "project": "oppia/oppia",
    "commit": "72937725a323b0cc1ccec150c81b041abeacb575",
    "filename": "utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/oppia-oppia/utils.py",
    "file_hunks_size": 20,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "utils.py:333:25 Incompatible parameter type [6]: Expected `bytes` for 2nd parameter `h` to call `imghdr.what` but got `str`.",
    "message": " Expected `bytes` for 2nd parameter `h` to call `imghdr.what` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 333,
    "warning_line": "    if imghdr.what(None, h=content) == 'png':",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    \"\"\"\n    # We accept unicode but imghdr.what(file, h) accept 'h' of type str.\n    # So we have casted content to be str.\n    content = cast(str, content)\n    if imghdr.what(None, h=content) == 'png':\n",
        "source_code_len": 203,
        "target_code": "    \"\"\"\n    # We accept unicode but imghdr.what(file, h) accepts 'h' of type bytes.\n    # So we have casted content to be bytes.\n    content = python_utils.convert_to_bytes(content)\n    if imghdr.what(None, h=content) == 'png':\n",
        "target_code_len": 228,
        "diff_format": "@@ -329,5 +330,5 @@\n     \"\"\"\n-    # We accept unicode but imghdr.what(file, h) accept 'h' of type str.\n-    # So we have casted content to be str.\n-    content = cast(str, content)\n+    # We accept unicode but imghdr.what(file, h) accepts 'h' of type bytes.\n+    # So we have casted content to be bytes.\n+    content = python_utils.convert_to_bytes(content)\n     if imghdr.what(None, h=content) == 'png':\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    # We accept unicode but imghdr.what(file, h) accept 'h' of type str.\n    # So we have casted content to be str.\n    content = cast(str, content)\n    if imghdr.what(None, h=content) == 'png':\n",
        "target_code_with_indent": "\n    # We accept unicode but imghdr.what(file, h) accepts 'h' of type bytes.\n    # So we have casted content to be bytes.\n    content = python_utils.convert_to_bytes(content)\n    if imghdr.what(None, h=content) == 'png':\n"
      }
    ]
  },
  {
    "project": "oppia/oppia",
    "commit": "72937725a323b0cc1ccec150c81b041abeacb575",
    "filename": "utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/oppia-oppia/utils.py",
    "file_hunks_size": 20,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "utils.py:462:14 Incompatible parameter type [6]: Expected `bytes` for 1st positional only parameter to call `bytes.replace` but got `str`.",
    "message": " Expected `bytes` for 1st positional only parameter to call `bytes.replace` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 462,
    "warning_line": "    ).replace('=', 'c')",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        hashlib.sha1(\n            python_utils.convert_to_bytes(input_string)).digest(), # type: ignore[no-untyped-call]\n        altchars=b'ab'\n    ).replace('=', 'c')\n\n    return encoded_string[:max_length]\n\n",
        "source_code_len": 209,
        "target_code": "        hashlib.sha1(\n            python_utils.convert_to_bytes(input_string)).digest(),\n        altchars=b'ab'\n    ).replace(b'=', b'c')\n\n    return encoded_string[:max_length].decode('utf-8')\n\n",
        "target_code_len": 195,
        "diff_format": "@@ -459,7 +460,7 @@\n         hashlib.sha1(\n-            python_utils.convert_to_bytes(input_string)).digest(), # type: ignore[no-untyped-call]\n+            python_utils.convert_to_bytes(input_string)).digest(),\n         altchars=b'ab'\n-    ).replace('=', 'c')\n-\n-    return encoded_string[:max_length]\n+    ).replace(b'=', b'c')\n+\n+    return encoded_string[:max_length].decode('utf-8')\n \n",
        "source_code_with_indent": "        hashlib.sha1(\n            python_utils.convert_to_bytes(input_string)).digest(), # type: ignore[no-untyped-call]\n        altchars=b'ab'\n    ).replace('=', 'c')\n\n    return encoded_string[:max_length]\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        hashlib.sha1(\n            python_utils.convert_to_bytes(input_string)).digest(),\n        altchars=b'ab'\n    ).replace(b'=', b'c')\n\n    return encoded_string[:max_length].decode('utf-8')\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "oppia/oppia",
    "commit": "72937725a323b0cc1ccec150c81b041abeacb575",
    "filename": "utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/oppia-oppia/utils.py",
    "file_hunks_size": 20,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "utils.py:462:19 Incompatible parameter type [6]: Expected `bytes` for 2nd positional only parameter to call `bytes.replace` but got `str`.",
    "message": " Expected `bytes` for 2nd positional only parameter to call `bytes.replace` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 462,
    "warning_line": "    ).replace('=', 'c')",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        hashlib.sha1(\n            python_utils.convert_to_bytes(input_string)).digest(), # type: ignore[no-untyped-call]\n        altchars=b'ab'\n    ).replace('=', 'c')\n\n    return encoded_string[:max_length]\n\n",
        "source_code_len": 209,
        "target_code": "        hashlib.sha1(\n            python_utils.convert_to_bytes(input_string)).digest(),\n        altchars=b'ab'\n    ).replace(b'=', b'c')\n\n    return encoded_string[:max_length].decode('utf-8')\n\n",
        "target_code_len": 195,
        "diff_format": "@@ -459,7 +460,7 @@\n         hashlib.sha1(\n-            python_utils.convert_to_bytes(input_string)).digest(), # type: ignore[no-untyped-call]\n+            python_utils.convert_to_bytes(input_string)).digest(),\n         altchars=b'ab'\n-    ).replace('=', 'c')\n-\n-    return encoded_string[:max_length]\n+    ).replace(b'=', b'c')\n+\n+    return encoded_string[:max_length].decode('utf-8')\n \n",
        "source_code_with_indent": "        hashlib.sha1(\n            python_utils.convert_to_bytes(input_string)).digest(), # type: ignore[no-untyped-call]\n        altchars=b'ab'\n    ).replace('=', 'c')\n\n    return encoded_string[:max_length]\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        hashlib.sha1(\n            python_utils.convert_to_bytes(input_string)).digest(),\n        altchars=b'ab'\n    ).replace(b'=', b'c')\n\n    return encoded_string[:max_length].decode('utf-8')\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "oppia/oppia",
    "commit": "72937725a323b0cc1ccec150c81b041abeacb575",
    "filename": "utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/oppia-oppia/utils.py",
    "file_hunks_size": 20,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "utils.py:464:4 Incompatible return type [7]: Expected `str` but got `bytes`.",
    "message": " Expected `str` but got `bytes`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 464,
    "warning_line": "    return encoded_string[:max_length]",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        hashlib.sha1(\n            python_utils.convert_to_bytes(input_string)).digest(), # type: ignore[no-untyped-call]\n        altchars=b'ab'\n    ).replace('=', 'c')\n\n    return encoded_string[:max_length]\n\n",
        "source_code_len": 209,
        "target_code": "        hashlib.sha1(\n            python_utils.convert_to_bytes(input_string)).digest(),\n        altchars=b'ab'\n    ).replace(b'=', b'c')\n\n    return encoded_string[:max_length].decode('utf-8')\n\n",
        "target_code_len": 195,
        "diff_format": "@@ -459,7 +460,7 @@\n         hashlib.sha1(\n-            python_utils.convert_to_bytes(input_string)).digest(), # type: ignore[no-untyped-call]\n+            python_utils.convert_to_bytes(input_string)).digest(),\n         altchars=b'ab'\n-    ).replace('=', 'c')\n-\n-    return encoded_string[:max_length]\n+    ).replace(b'=', b'c')\n+\n+    return encoded_string[:max_length].decode('utf-8')\n \n",
        "source_code_with_indent": "        hashlib.sha1(\n            python_utils.convert_to_bytes(input_string)).digest(), # type: ignore[no-untyped-call]\n        altchars=b'ab'\n    ).replace('=', 'c')\n\n    return encoded_string[:max_length]\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        hashlib.sha1(\n            python_utils.convert_to_bytes(input_string)).digest(),\n        altchars=b'ab'\n    ).replace(b'=', b'c')\n\n    return encoded_string[:max_length].decode('utf-8')\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "oppia/oppia",
    "commit": "72937725a323b0cc1ccec150c81b041abeacb575",
    "filename": "utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/oppia-oppia/utils.py",
    "file_hunks_size": 20,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "utils.py:478:4 Incompatible return type [7]: Expected `str` but got `bytes`.",
    "message": " Expected `str` but got `bytes`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 478,
    "warning_line": "    return base64.b64encode(byte_value)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    Returns:\n        *. Returns the base64 representation of the number passed.\n    \"\"\"\n    byte_value = b'[' + python_utils.convert_to_bytes(value) + b']' # type: ignore[no-untyped-call]\n    return base64.b64encode(byte_value)\n\n",
        "source_code_len": 229,
        "target_code": "    Returns:\n        str. Returns the base64 representation of the number passed.\n    \"\"\"\n    byte_value = (\n        b'[' + python_utils.UNICODE(value).encode('utf-8') + b']')\n    return base64.b64encode(byte_value).decode('utf-8')\n\n",
        "target_code_len": 233,
        "diff_format": "@@ -474,6 +475,7 @@\n     Returns:\n-        *. Returns the base64 representation of the number passed.\n-    \"\"\"\n-    byte_value = b'[' + python_utils.convert_to_bytes(value) + b']' # type: ignore[no-untyped-call]\n-    return base64.b64encode(byte_value)\n+        str. Returns the base64 representation of the number passed.\n+    \"\"\"\n+    byte_value = (\n+        b'[' + python_utils.UNICODE(value).encode('utf-8') + b']')\n+    return base64.b64encode(byte_value).decode('utf-8')\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    byte_value = b'[' + python_utils.convert_to_bytes(value) + b']' # type: ignore[no-untyped-call]\n    return base64.b64encode(byte_value)\n\n",
        "target_code_with_indent": "\n    byte_value = (\n        b'[' + python_utils.UNICODE(value).encode('utf-8') + b']')\n    return base64.b64encode(byte_value).decode('utf-8')\n\n"
      }
    ]
  },
  {
    "project": "oppia/oppia",
    "commit": "72937725a323b0cc1ccec150c81b041abeacb575",
    "filename": "utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/oppia-oppia/utils.py",
    "file_hunks_size": 20,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "utils.py:619:4 Incompatible return type [7]: Expected `str` but got `bytes`.",
    "message": " Expected `str` but got `bytes`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 619,
    "warning_line": "    return base64.urlsafe_b64encode(os.urandom(length))[:length]",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    \"\"\"\n    return base64.urlsafe_b64encode(os.urandom(length))[:length]\n\n",
        "source_code_len": 74,
        "target_code": "    \"\"\"\n    return base64.urlsafe_b64encode(os.urandom(length))[:length].decode('utf-8')\n\n",
        "target_code_len": 90,
        "diff_format": "@@ -618,3 +620,3 @@\n     \"\"\"\n-    return base64.urlsafe_b64encode(os.urandom(length))[:length]\n+    return base64.urlsafe_b64encode(os.urandom(length))[:length].decode('utf-8')\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    return base64.urlsafe_b64encode(os.urandom(length))[:length]\n\n",
        "target_code_with_indent": "\n    return base64.urlsafe_b64encode(os.urandom(length))[:length].decode('utf-8')\n\n"
      }
    ]
  }
]