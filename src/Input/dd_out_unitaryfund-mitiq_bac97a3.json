[
  {
    "project": "unitaryfund/mitiq",
    "commit": "bac97a396e5570f4884b62ba9094466a3bb881cc",
    "filename": "mitiq/zne/inference.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/unitaryfund-mitiq/mitiq/zne/inference.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mitiq/zne/inference.py:34:4 Incompatible return type [7]: Expected `List[float]` but got `Dict[typing.Any, typing.Any]`.",
    "message": " Expected `List[float]` but got `Dict[typing.Any, typing.Any]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 34,
    "warning_line": "    return instack",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _instack_to_scale_factors(instack: dict) -> List[float]:\n    \"\"\"Extracts a list of scale factors from a list of dictionaries.\"\"\"\n    if all([isinstance(params, dict) for params in instack]):\n        return [params[\"scale_factor\"] for params in instack]\n    return instack\n\n",
        "source_code_len": 278,
        "target_code": "\ndef _instack_to_scale_factors(instack: List[Dict[str, float]]) -> List[float]:\n    \"\"\"Extracts a list of scale factors from a list of dictionaries.\"\"\"\n    if not all(isinstance(params, dict) for params in instack):\n        raise ValueError(\"instack must be a list of dictionaries\")\n    return [params[\"scale_factor\"] for params in instack]\n\n",
        "target_code_len": 342,
        "diff_format": "@@ -29,7 +29,7 @@\n \n-def _instack_to_scale_factors(instack: dict) -> List[float]:\n+def _instack_to_scale_factors(instack: List[Dict[str, float]]) -> List[float]:\n     \"\"\"Extracts a list of scale factors from a list of dictionaries.\"\"\"\n-    if all([isinstance(params, dict) for params in instack]):\n-        return [params[\"scale_factor\"] for params in instack]\n-    return instack\n+    if not all(isinstance(params, dict) for params in instack):\n+        raise ValueError(\"instack must be a list of dictionaries\")\n+    return [params[\"scale_factor\"] for params in instack]\n \n",
        "source_code_with_indent": "\ndef _instack_to_scale_factors(instack: dict) -> List[float]:\n    <IND>\"\"\"Extracts a list of scale factors from a list of dictionaries.\"\"\"\n    if all([isinstance(params, dict) for params in instack]):\n        <IND>return [params[\"scale_factor\"] for params in instack]\n    <DED>return instack\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\ndef _instack_to_scale_factors(instack: List[Dict[str, float]]) -> List[float]:\n    <IND>\"\"\"Extracts a list of scale factors from a list of dictionaries.\"\"\"\n    if not all(isinstance(params, dict) for params in instack):\n        <IND>raise ValueError(\"instack must be a list of dictionaries\")\n    <DED>return [params[\"scale_factor\"] for params in instack]\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "unitaryfund/mitiq",
    "commit": "bac97a396e5570f4884b62ba9094466a3bb881cc",
    "filename": "mitiq/zne/inference.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/unitaryfund-mitiq/mitiq/zne/inference.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mitiq/zne/inference.py:252:22 Incompatible parameter type [6]: Expected `Dict[typing.Any, typing.Any]` for 1st positional only parameter to call `Factory.push` but got `float`.",
    "message": " Expected `Dict[typing.Any, typing.Any]` for 1st positional only parameter to call `Factory.push` but got `float`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 252,
    "warning_line": "            self.push(next_in_params, next_expval)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @abstractmethod\n    def next(self) -> float:\n        \"\"\"Returns a dictionary of parameters to execute a circuit at.\"\"\"\n",
        "source_code_len": 123,
        "target_code": "    @abstractmethod\n    def next(self) -> Dict[str, float]:\n        \"\"\"Returns a dictionary of parameters to execute a circuit at.\"\"\"\n",
        "target_code_len": 134,
        "diff_format": "@@ -198,3 +198,3 @@\n     @abstractmethod\n-    def next(self) -> float:\n+    def next(self) -> Dict[str, float]:\n         \"\"\"Returns a dictionary of parameters to execute a circuit at.\"\"\"\n",
        "source_code_with_indent": "    <DED>@abstractmethod\n    def next(self) -> float:\n        <IND>\"\"\"Returns a dictionary of parameters to execute a circuit at.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@abstractmethod\n    def next(self) -> Dict[str, float]:\n        <IND>\"\"\"Returns a dictionary of parameters to execute a circuit at.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "unitaryfund/mitiq",
    "commit": "bac97a396e5570f4884b62ba9094466a3bb881cc",
    "filename": "mitiq/zne/inference.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/unitaryfund-mitiq/mitiq/zne/inference.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mitiq/zne/inference.py:366:4 Inconsistent override [15]: `mitiq.zne.inference.BatchedFactory.next` overrides method defined in `Factory` inconsistently. Returned type `Dict[str, float]` is not a subtype of the overridden return `float`.",
    "message": " `mitiq.zne.inference.BatchedFactory.next` overrides method defined in `Factory` inconsistently. Returned type `Dict[str, float]` is not a subtype of the overridden return `float`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 366,
    "warning_line": "    def next(self) -> Dict[str, float]:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @abstractmethod\n    def next(self) -> float:\n        \"\"\"Returns a dictionary of parameters to execute a circuit at.\"\"\"\n",
        "source_code_len": 123,
        "target_code": "    @abstractmethod\n    def next(self) -> Dict[str, float]:\n        \"\"\"Returns a dictionary of parameters to execute a circuit at.\"\"\"\n",
        "target_code_len": 134,
        "diff_format": "@@ -198,3 +198,3 @@\n     @abstractmethod\n-    def next(self) -> float:\n+    def next(self) -> Dict[str, float]:\n         \"\"\"Returns a dictionary of parameters to execute a circuit at.\"\"\"\n",
        "source_code_with_indent": "    <DED>@abstractmethod\n    def next(self) -> float:\n        <IND>\"\"\"Returns a dictionary of parameters to execute a circuit at.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@abstractmethod\n    def next(self) -> Dict[str, float]:\n        <IND>\"\"\"Returns a dictionary of parameters to execute a circuit at.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "unitaryfund/mitiq",
    "commit": "bac97a396e5570f4884b62ba9094466a3bb881cc",
    "filename": "mitiq/zne/inference.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/unitaryfund-mitiq/mitiq/zne/inference.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mitiq/zne/inference.py:732:50 Incompatible parameter type [6]: Expected `Dict[typing.Any, typing.Any]` for 1st positional only parameter to call `_instack_to_scale_factors` but got `List[Dict[typing.Any, typing.Any]]`.",
    "message": " Expected `Dict[typing.Any, typing.Any]` for 1st positional only parameter to call `_instack_to_scale_factors` but got `List[Dict[typing.Any, typing.Any]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 732,
    "warning_line": "        scale_factors = _instack_to_scale_factors(instack)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _instack_to_scale_factors(instack: dict) -> List[float]:\n    \"\"\"Extracts a list of scale factors from a list of dictionaries.\"\"\"\n    if all([isinstance(params, dict) for params in instack]):\n        return [params[\"scale_factor\"] for params in instack]\n    return instack\n\n",
        "source_code_len": 278,
        "target_code": "\ndef _instack_to_scale_factors(instack: List[Dict[str, float]]) -> List[float]:\n    \"\"\"Extracts a list of scale factors from a list of dictionaries.\"\"\"\n    if not all(isinstance(params, dict) for params in instack):\n        raise ValueError(\"instack must be a list of dictionaries\")\n    return [params[\"scale_factor\"] for params in instack]\n\n",
        "target_code_len": 342,
        "diff_format": "@@ -29,7 +29,7 @@\n \n-def _instack_to_scale_factors(instack: dict) -> List[float]:\n+def _instack_to_scale_factors(instack: List[Dict[str, float]]) -> List[float]:\n     \"\"\"Extracts a list of scale factors from a list of dictionaries.\"\"\"\n-    if all([isinstance(params, dict) for params in instack]):\n-        return [params[\"scale_factor\"] for params in instack]\n-    return instack\n+    if not all(isinstance(params, dict) for params in instack):\n+        raise ValueError(\"instack must be a list of dictionaries\")\n+    return [params[\"scale_factor\"] for params in instack]\n \n",
        "source_code_with_indent": "\ndef _instack_to_scale_factors(instack: dict) -> List[float]:\n    <IND>\"\"\"Extracts a list of scale factors from a list of dictionaries.\"\"\"\n    if all([isinstance(params, dict) for params in instack]):\n        <IND>return [params[\"scale_factor\"] for params in instack]\n    <DED>return instack\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\ndef _instack_to_scale_factors(instack: List[Dict[str, float]]) -> List[float]:\n    <IND>\"\"\"Extracts a list of scale factors from a list of dictionaries.\"\"\"\n    if not all(isinstance(params, dict) for params in instack):\n        <IND>raise ValueError(\"instack must be a list of dictionaries\")\n    <DED>return [params[\"scale_factor\"] for params in instack]\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "unitaryfund/mitiq",
    "commit": "bac97a396e5570f4884b62ba9094466a3bb881cc",
    "filename": "mitiq/zne/inference.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/unitaryfund-mitiq/mitiq/zne/inference.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mitiq/zne/inference.py:891:4 Inconsistent override [15]: `mitiq.zne.inference.AdaExpFactory.next` overrides method defined in `Factory` inconsistently. Returned type `Dict[str, float]` is not a subtype of the overridden return `float`.",
    "message": " `mitiq.zne.inference.AdaExpFactory.next` overrides method defined in `Factory` inconsistently. Returned type `Dict[str, float]` is not a subtype of the overridden return `float`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 891,
    "warning_line": "    def next(self) -> Dict[str, float]:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @abstractmethod\n    def next(self) -> float:\n        \"\"\"Returns a dictionary of parameters to execute a circuit at.\"\"\"\n",
        "source_code_len": 123,
        "target_code": "    @abstractmethod\n    def next(self) -> Dict[str, float]:\n        \"\"\"Returns a dictionary of parameters to execute a circuit at.\"\"\"\n",
        "target_code_len": 134,
        "diff_format": "@@ -198,3 +198,3 @@\n     @abstractmethod\n-    def next(self) -> float:\n+    def next(self) -> Dict[str, float]:\n         \"\"\"Returns a dictionary of parameters to execute a circuit at.\"\"\"\n",
        "source_code_with_indent": "    <DED>@abstractmethod\n    def next(self) -> float:\n        <IND>\"\"\"Returns a dictionary of parameters to execute a circuit at.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@abstractmethod\n    def next(self) -> Dict[str, float]:\n        <IND>\"\"\"Returns a dictionary of parameters to execute a circuit at.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "unitaryfund/mitiq",
    "commit": "bac97a396e5570f4884b62ba9094466a3bb881cc",
    "filename": "mitiq/zne/scaling.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/unitaryfund-mitiq/mitiq/zne/scaling.py",
    "file_hunks_size": 14,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mitiq/zne/scaling.py:316:12 Incompatible parameter type [6]: Expected `typing.Sized` for 1st positional only parameter to call `len` but got `Iterable[int]`.",
    "message": " Expected `typing.Sized` for 1st positional only parameter to call `len` but got `Iterable[int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 316,
    "warning_line": "            gate_indices[i]",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from copy import deepcopy\nfrom typing import Any, Callable, Dict, Iterable, List, Optional, Tuple, Union\nfrom functools import wraps\n",
        "source_code_len": 133,
        "target_code": "from copy import deepcopy\nfrom typing import (\n    Any,\n    Callable,\n    Collection,\n    Dict,\n    Iterable,\n    List,\n    Optional,\n    Tuple,\n    Union,\n)\nfrom functools import wraps\n",
        "target_code_len": 186,
        "diff_format": "@@ -17,3 +17,13 @@\n from copy import deepcopy\n-from typing import Any, Callable, Dict, Iterable, List, Optional, Tuple, Union\n+from typing import (\n+    Any,\n+    Callable,\n+    Collection,\n+    Dict,\n+    Iterable,\n+    List,\n+    Optional,\n+    Tuple,\n+    Union,\n+)\n from functools import wraps\n",
        "source_code_with_indent": "from copy import deepcopy\nfrom typing import Any, Callable, Dict, Iterable, List, Optional, Tuple, Union\nfrom functools import wraps\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from copy import deepcopy\nfrom typing import (\n    Any,\n    Callable,\n    Collection,\n    Dict,\n    Iterable,\n    List,\n    Optional,\n    Tuple,\n    Union,\n)\nfrom functools import wraps\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    moment_indices: Iterable[int],\n    gate_indices: List[Iterable[int]],\n) -> Circuit:\n",
        "source_code_len": 88,
        "target_code": "    moment_indices: Iterable[int],\n    gate_indices: List[Collection[int]],\n) -> Circuit:\n",
        "target_code_len": 90,
        "diff_format": "@@ -286,3 +293,3 @@\n     moment_indices: Iterable[int],\n-    gate_indices: List[Iterable[int]],\n+    gate_indices: List[Collection[int]],\n ) -> Circuit:\n",
        "source_code_with_indent": "    moment_indices: Iterable[int],\n    gate_indices: List[Iterable[int]],\n) -> Circuit:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    moment_indices: Iterable[int],\n    gate_indices: List[Collection[int]],\n) -> Circuit:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "unitaryfund/mitiq",
    "commit": "bac97a396e5570f4884b62ba9094466a3bb881cc",
    "filename": "mitiq/zne/scaling.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/unitaryfund-mitiq/mitiq/zne/scaling.py",
    "file_hunks_size": 14,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mitiq/zne/scaling.py:789:4 Incompatible variable type [9]: fold_method_args is declared to have type `Tuple[typing.Any]` but is used as type `Tuple[]`.",
    "message": " fold_method_args is declared to have type `Tuple[typing.Any]` but is used as type `Tuple[]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 789,
    "warning_line": "    fold_method_args: Tuple[Any] = (),",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    scale_factor: float,\n    fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit],\n    fold_method_args: Tuple[Any] = (),\n    **kwargs,\n",
        "source_code_len": 144,
        "target_code": "    scale_factor: float,\n    fold_method: Callable[..., Circuit],\n    fold_method_args: Optional[Tuple[Any]] = None,\n    **kwargs,\n",
        "target_code_len": 131,
        "diff_format": "@@ -787,4 +798,4 @@\n     scale_factor: float,\n-    fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit],\n-    fold_method_args: Tuple[Any] = (),\n+    fold_method: Callable[..., Circuit],\n+    fold_method_args: Optional[Tuple[Any]] = None,\n     **kwargs,\n",
        "source_code_with_indent": "    scale_factor: float,\n    fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit],\n    fold_method_args: Tuple[Any] = (),\n    **kwargs,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    scale_factor: float,\n    fold_method: Callable[..., Circuit],\n    fold_method_args: Optional[Tuple[Any]] = None,\n    **kwargs,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]