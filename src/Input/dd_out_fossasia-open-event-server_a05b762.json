[
  {
    "project": "fossasia/open-event-server",
    "commit": "a05b762e4d1dfab7436b58d4ae2480a3b60dbe35",
    "filename": "app/api/chat/rocket_chat.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/fossasia-open-event-server/app/api/chat/rocket_chat.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "app/api/chat/rocket_chat.py:39:32 Incompatible variable type [9]: event is declared to have type `Event` but is used as type `None`.",
    "message": " event is declared to have type `Event` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 39,
    "warning_line": "    def login(self, user: User, event: Event = None, method: str = 'login'):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from app.settings import get_settings\n\n",
        "source_code_len": 39,
        "target_code": "from app.settings import get_settings\nfrom typing import Optional\n\n",
        "target_code_len": 67,
        "diff_format": "@@ -12,2 +12,3 @@\n from app.settings import get_settings\n+from typing import Optional\n \n",
        "source_code_with_indent": "from app.settings import get_settings\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from app.settings import get_settings\nfrom typing import Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def login(self, user: User, event: Event = None, method: str = 'login'):\n        def save_token(token):\n",
        "source_code_len": 109,
        "target_code": "\n    def login(self, user: User, event: Optional[Event] = None, method: str = 'login'):\n        def save_token(token):\n",
        "target_code_len": 119,
        "diff_format": "@@ -38,3 +39,3 @@\n \n-    def login(self, user: User, event: Event = None, method: str = 'login'):\n+    def login(self, user: User, event: Optional[Event] = None, method: str = 'login'):\n         def save_token(token):\n",
        "source_code_with_indent": "\n    <DED>def login(self, user: User, event: Event = None, method: str = 'login'):\n        <IND>def save_token(token):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def login(self, user: User, event: Optional[Event] = None, method: str = 'login'):\n        <IND>def save_token(token):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "fossasia/open-event-server",
    "commit": "a05b762e4d1dfab7436b58d4ae2480a3b60dbe35",
    "filename": "app/api/chat/rocket_chat.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/fossasia-open-event-server/app/api/chat/rocket_chat.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "app/api/chat/rocket_chat.py:64:8 Incompatible variable type [9]: event is declared to have type `Event` but is used as type `None`.",
    "message": " event is declared to have type `Event` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 64,
    "warning_line": "        event: Event = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from app.settings import get_settings\n\n",
        "source_code_len": 39,
        "target_code": "from app.settings import get_settings\nfrom typing import Optional\n\n",
        "target_code_len": 67,
        "diff_format": "@@ -12,2 +12,3 @@\n from app.settings import get_settings\n+from typing import Optional\n \n",
        "source_code_with_indent": "from app.settings import get_settings\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from app.settings import get_settings\nfrom typing import Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def login(self, user: User, event: Event = None, method: str = 'login'):\n        def save_token(token):\n",
        "source_code_len": 109,
        "target_code": "\n    def login(self, user: User, event: Optional[Event] = None, method: str = 'login'):\n        def save_token(token):\n",
        "target_code_len": 119,
        "diff_format": "@@ -38,3 +39,3 @@\n \n-    def login(self, user: User, event: Event = None, method: str = 'login'):\n+    def login(self, user: User, event: Optional[Event] = None, method: str = 'login'):\n         def save_token(token):\n",
        "source_code_with_indent": "\n    <DED>def login(self, user: User, event: Event = None, method: str = 'login'):\n        <IND>def save_token(token):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def login(self, user: User, event: Optional[Event] = None, method: str = 'login'):\n        <IND>def save_token(token):\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        user: User,\n        event: Event = None,\n        username_suffix='',\n",
        "source_code_len": 77,
        "target_code": "        user: User,\n        event: Optional[Event] = None,\n        username_suffix='',\n",
        "target_code_len": 87,
        "diff_format": "@@ -63,3 +64,3 @@\n         user: User,\n-        event: Event = None,\n+        event: Optional[Event] = None,\n         username_suffix='',\n",
        "source_code_with_indent": "        user: User,\n        event: Event = None,\n        username_suffix='',\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        user: User,\n        event: Optional[Event] = None,\n        username_suffix='',\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "fossasia/open-event-server",
    "commit": "a05b762e4d1dfab7436b58d4ae2480a3b60dbe35",
    "filename": "app/api/chat/rocket_chat.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/fossasia-open-event-server/app/api/chat/rocket_chat.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "app/api/chat/rocket_chat.py:98:36 Incompatible variable type [9]: event is declared to have type `Event` but is used as type `None`.",
    "message": " event is declared to have type `Event` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 98,
    "warning_line": "    def get_token(self, user: User, event: Event = None, retried=False):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from app.settings import get_settings\n\n",
        "source_code_len": 39,
        "target_code": "from app.settings import get_settings\nfrom typing import Optional\n\n",
        "target_code_len": 67,
        "diff_format": "@@ -12,2 +12,3 @@\n from app.settings import get_settings\n+from typing import Optional\n \n",
        "source_code_with_indent": "from app.settings import get_settings\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from app.settings import get_settings\nfrom typing import Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def login(self, user: User, event: Event = None, method: str = 'login'):\n        def save_token(token):\n",
        "source_code_len": 109,
        "target_code": "\n    def login(self, user: User, event: Optional[Event] = None, method: str = 'login'):\n        def save_token(token):\n",
        "target_code_len": 119,
        "diff_format": "@@ -38,3 +39,3 @@\n \n-    def login(self, user: User, event: Event = None, method: str = 'login'):\n+    def login(self, user: User, event: Optional[Event] = None, method: str = 'login'):\n         def save_token(token):\n",
        "source_code_with_indent": "\n    <DED>def login(self, user: User, event: Event = None, method: str = 'login'):\n        <IND>def save_token(token):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def login(self, user: User, event: Optional[Event] = None, method: str = 'login'):\n        <IND>def save_token(token):\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        user: User,\n        event: Event = None,\n        username_suffix='',\n",
        "source_code_len": 77,
        "target_code": "        user: User,\n        event: Optional[Event] = None,\n        username_suffix='',\n",
        "target_code_len": 87,
        "diff_format": "@@ -63,3 +64,3 @@\n         user: User,\n-        event: Event = None,\n+        event: Optional[Event] = None,\n         username_suffix='',\n",
        "source_code_with_indent": "        user: User,\n        event: Event = None,\n        username_suffix='',\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        user: User,\n        event: Optional[Event] = None,\n        username_suffix='',\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def get_token(self, user: User, event: Event = None, retried=False):\n        if user.rocket_chat_token:\n",
        "source_code_len": 109,
        "target_code": "\n    def get_token(self, user: User, event: Optional[Event] = None, retried=False):\n        if user.rocket_chat_token:\n",
        "target_code_len": 119,
        "diff_format": "@@ -97,3 +98,3 @@\n \n-    def get_token(self, user: User, event: Event = None, retried=False):\n+    def get_token(self, user: User, event: Optional[Event] = None, retried=False):\n         if user.rocket_chat_token:\n",
        "source_code_with_indent": "\n    <DED><DED>def get_token(self, user: User, event: Event = None, retried=False):\n        <IND>if user.rocket_chat_token:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED><DED>def get_token(self, user: User, event: Optional[Event] = None, retried=False):\n        <IND>if user.rocket_chat_token:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "fossasia/open-event-server",
    "commit": "a05b762e4d1dfab7436b58d4ae2480a3b60dbe35",
    "filename": "app/api/chat/rocket_chat.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/fossasia-open-event-server/app/api/chat/rocket_chat.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "app/api/chat/rocket_chat.py:200:38 Incompatible variable type [9]: event is declared to have type `Event` but is used as type `None`.",
    "message": " event is declared to have type `Event` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 200,
    "warning_line": "def get_rocket_chat_token(user: User, event: Event = None):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from app.settings import get_settings\n\n",
        "source_code_len": 39,
        "target_code": "from app.settings import get_settings\nfrom typing import Optional\n\n",
        "target_code_len": 67,
        "diff_format": "@@ -12,2 +12,3 @@\n from app.settings import get_settings\n+from typing import Optional\n \n",
        "source_code_with_indent": "from app.settings import get_settings\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from app.settings import get_settings\nfrom typing import Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def login(self, user: User, event: Event = None, method: str = 'login'):\n        def save_token(token):\n",
        "source_code_len": 109,
        "target_code": "\n    def login(self, user: User, event: Optional[Event] = None, method: str = 'login'):\n        def save_token(token):\n",
        "target_code_len": 119,
        "diff_format": "@@ -38,3 +39,3 @@\n \n-    def login(self, user: User, event: Event = None, method: str = 'login'):\n+    def login(self, user: User, event: Optional[Event] = None, method: str = 'login'):\n         def save_token(token):\n",
        "source_code_with_indent": "\n    <DED>def login(self, user: User, event: Event = None, method: str = 'login'):\n        <IND>def save_token(token):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def login(self, user: User, event: Optional[Event] = None, method: str = 'login'):\n        <IND>def save_token(token):\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        user: User,\n        event: Event = None,\n        username_suffix='',\n",
        "source_code_len": 77,
        "target_code": "        user: User,\n        event: Optional[Event] = None,\n        username_suffix='',\n",
        "target_code_len": 87,
        "diff_format": "@@ -63,3 +64,3 @@\n         user: User,\n-        event: Event = None,\n+        event: Optional[Event] = None,\n         username_suffix='',\n",
        "source_code_with_indent": "        user: User,\n        event: Event = None,\n        username_suffix='',\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        user: User,\n        event: Optional[Event] = None,\n        username_suffix='',\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def get_token(self, user: User, event: Event = None, retried=False):\n        if user.rocket_chat_token:\n",
        "source_code_len": 109,
        "target_code": "\n    def get_token(self, user: User, event: Optional[Event] = None, retried=False):\n        if user.rocket_chat_token:\n",
        "target_code_len": 119,
        "diff_format": "@@ -97,3 +98,3 @@\n \n-    def get_token(self, user: User, event: Event = None, retried=False):\n+    def get_token(self, user: User, event: Optional[Event] = None, retried=False):\n         if user.rocket_chat_token:\n",
        "source_code_with_indent": "\n    <DED><DED>def get_token(self, user: User, event: Event = None, retried=False):\n        <IND>if user.rocket_chat_token:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED><DED>def get_token(self, user: User, event: Optional[Event] = None, retried=False):\n        <IND>if user.rocket_chat_token:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef get_rocket_chat_token(user: User, event: Event = None):\n    settings = get_settings()\n",
        "source_code_len": 91,
        "target_code": "\ndef get_rocket_chat_token(user: User, event: Optional[Event] = None):\n    settings = get_settings()\n",
        "target_code_len": 101,
        "diff_format": "@@ -199,3 +200,3 @@\n \n-def get_rocket_chat_token(user: User, event: Event = None):\n+def get_rocket_chat_token(user: User, event: Optional[Event] = None):\n     settings = get_settings()\n",
        "source_code_with_indent": "\n<DED>def get_rocket_chat_token(user: User, event: Event = None):\n    <IND>settings = get_settings()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def get_rocket_chat_token(user: User, event: Optional[Event] = None):\n    <IND>settings = get_settings()\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "fossasia/open-event-server",
    "commit": "a05b762e4d1dfab7436b58d4ae2480a3b60dbe35",
    "filename": "app/api/helpers/mail.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/fossasia-open-event-server/app/api/helpers/mail.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "app/api/helpers/mail.py:263:52 Incompatible variable type [9]: mail_override is declared to have type `Dict[str, str]` but is used as type `None`.",
    "message": " mail_override is declared to have type `Dict[str, str]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 263,
    "warning_line": "def send_email_session_state_change(email, session, mail_override: Dict[str, str] = None):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from itertools import groupby\nfrom typing import Dict\n\n",
        "source_code_len": 55,
        "target_code": "from itertools import groupby\nfrom typing import Dict, Optional\n\n",
        "target_code_len": 65,
        "diff_format": "@@ -5,3 +5,3 @@\n from itertools import groupby\n-from typing import Dict\n+from typing import Dict, Optional\n \n",
        "source_code_with_indent": "from itertools import groupby\nfrom typing import Dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from itertools import groupby\nfrom typing import Dict, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef send_email_session_state_change(email, session, mail_override: Dict[str, str] = None):\n    \"\"\"email for new session\"\"\"\n",
        "source_code_len": 124,
        "target_code": "\ndef send_email_session_state_change(email, session, mail_override: Optional[Dict[str, str]] = None):\n    \"\"\"email for new session\"\"\"\n",
        "target_code_len": 134,
        "diff_format": "@@ -262,3 +262,3 @@\n \n-def send_email_session_state_change(email, session, mail_override: Dict[str, str] = None):\n+def send_email_session_state_change(email, session, mail_override: Optional[Dict[str, str]] = None):\n     \"\"\"email for new session\"\"\"\n",
        "source_code_with_indent": "\n<DED><DED>def send_email_session_state_change(email, session, mail_override: Dict[str, str] = None):\n    <IND>\"\"\"email for new session\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED><DED>def send_email_session_state_change(email, session, mail_override: Optional[Dict[str, str]] = None):\n    <IND>\"\"\"email for new session\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "fossasia/open-event-server",
    "commit": "a05b762e4d1dfab7436b58d4ae2480a3b60dbe35",
    "filename": "app/api/sessions.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/fossasia-open-event-server/app/api/sessions.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "app/api/sessions.py:385:32 Incompatible variable type [9]: mail_override is declared to have type `Dict[str, str]` but is used as type `None`.",
    "message": " mail_override is declared to have type `Dict[str, str]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 385,
    "warning_line": "def notify_for_session(session, mail_override: Dict[str, str] = None):"
  },
  {
    "project": "fossasia/open-event-server",
    "commit": "a05b762e4d1dfab7436b58d4ae2480a3b60dbe35",
    "filename": "app/api/video_channels/bbb.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/fossasia-open-event-server/app/api/video_channels/bbb.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "app/api/video_channels/bbb.py:32:37 Incompatible variable type [9]: params is declared to have type `Dict[str, str]` but is used as type `None`.",
    "message": " params is declared to have type `Dict[str, str]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 32,
    "warning_line": "    def build_url(self, action: str, params: Dict[str, str] = None) -> str:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from hashlib import sha1\nfrom typing import Any, Dict, Union\n\n",
        "source_code_len": 62,
        "target_code": "from hashlib import sha1\nfrom typing import Any, Dict, Union, Optional\n\n",
        "target_code_len": 72,
        "diff_format": "@@ -2,3 +2,3 @@\n from hashlib import sha1\n-from typing import Any, Dict, Union\n+from typing import Any, Dict, Union, Optional\n \n",
        "source_code_with_indent": "from hashlib import sha1\nfrom typing import Any, Dict, Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from hashlib import sha1\nfrom typing import Any, Dict, Union, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def build_url(self, action: str, params: Dict[str, str] = None) -> str:\n        url = self.api_url + '/' + action + '?'\n",
        "source_code_len": 125,
        "target_code": "\n    def build_url(self, action: str, params: Optional[Dict[str, str]] = None) -> str:\n        url = self.api_url + '/' + action + '?'\n",
        "target_code_len": 135,
        "diff_format": "@@ -31,3 +31,3 @@\n \n-    def build_url(self, action: str, params: Dict[str, str] = None) -> str:\n+    def build_url(self, action: str, params: Optional[Dict[str, str]] = None) -> str:\n         url = self.api_url + '/' + action + '?'\n",
        "source_code_with_indent": "\n    def build_url(self, action: str, params: Dict[str, str] = None) -> str:\n        <IND>url = self.api_url + '/' + action + '?'\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    def build_url(self, action: str, params: Optional[Dict[str, str]] = None) -> str:\n        <IND>url = self.api_url + '/' + action + '?'\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "fossasia/open-event-server",
    "commit": "a05b762e4d1dfab7436b58d4ae2480a3b60dbe35",
    "filename": "app/api/video_channels/bbb.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/fossasia-open-event-server/app/api/video_channels/bbb.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "app/api/video_channels/bbb.py:47:35 Incompatible variable type [9]: params is declared to have type `Dict[str, str]` but is used as type `None`.",
    "message": " params is declared to have type `Dict[str, str]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 47,
    "warning_line": "    def request(self, action: str, params: Dict[str, str] = None) -> Result:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from hashlib import sha1\nfrom typing import Any, Dict, Union\n\n",
        "source_code_len": 62,
        "target_code": "from hashlib import sha1\nfrom typing import Any, Dict, Union, Optional\n\n",
        "target_code_len": 72,
        "diff_format": "@@ -2,3 +2,3 @@\n from hashlib import sha1\n-from typing import Any, Dict, Union\n+from typing import Any, Dict, Union, Optional\n \n",
        "source_code_with_indent": "from hashlib import sha1\nfrom typing import Any, Dict, Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from hashlib import sha1\nfrom typing import Any, Dict, Union, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def build_url(self, action: str, params: Dict[str, str] = None) -> str:\n        url = self.api_url + '/' + action + '?'\n",
        "source_code_len": 125,
        "target_code": "\n    def build_url(self, action: str, params: Optional[Dict[str, str]] = None) -> str:\n        url = self.api_url + '/' + action + '?'\n",
        "target_code_len": 135,
        "diff_format": "@@ -31,3 +31,3 @@\n \n-    def build_url(self, action: str, params: Dict[str, str] = None) -> str:\n+    def build_url(self, action: str, params: Optional[Dict[str, str]] = None) -> str:\n         url = self.api_url + '/' + action + '?'\n",
        "source_code_with_indent": "\n    def build_url(self, action: str, params: Dict[str, str] = None) -> str:\n        <IND>url = self.api_url + '/' + action + '?'\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    def build_url(self, action: str, params: Optional[Dict[str, str]] = None) -> str:\n        <IND>url = self.api_url + '/' + action + '?'\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def request(self, action: str, params: Dict[str, str] = None) -> Result:\n        return Result.create(requests.get(self.build_url(action, params)))\n",
        "source_code_len": 153,
        "target_code": "\n    def request(self, action: str, params: Optional[Dict[str, str]] = None) -> Result:\n        return Result.create(requests.get(self.build_url(action, params)))\n",
        "target_code_len": 163,
        "diff_format": "@@ -46,3 +46,3 @@\n \n-    def request(self, action: str, params: Dict[str, str] = None) -> Result:\n+    def request(self, action: str, params: Optional[Dict[str, str]] = None) -> Result:\n         return Result.create(requests.get(self.build_url(action, params)))\n",
        "source_code_with_indent": "\n    <DED>def request(self, action: str, params: Dict[str, str] = None) -> Result:\n        <IND>return Result.create(requests.get(self.build_url(action, params)))\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def request(self, action: str, params: Optional[Dict[str, str]] = None) -> Result:\n        <IND>return Result.create(requests.get(self.build_url(action, params)))\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]