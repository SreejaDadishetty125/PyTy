[
  {
    "project": "DeepRegNet/DeepReg",
    "commit": "8ce52504574ad8e6f26ef354984f89bf70ab6863",
    "filename": "deepreg/callback.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DeepRegNet-DeepReg/deepreg/callback.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "deepreg/callback.py:67:6 Invalid type [31]: Expression `(deepreg.callback.CheckpointManagerCallback, int)` is not a valid type.",
    "message": " Expression `(deepreg.callback.CheckpointManagerCallback, int)` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 67,
    "warning_line": ") -> (CheckpointManagerCallback, int):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import tensorflow as tf\n",
        "source_code_len": 24,
        "target_code": "from typing import Tuple\n\nimport tensorflow as tf\n",
        "target_code_len": 50,
        "diff_format": "@@ -1,1 +1,3 @@\n+from typing import Tuple\n+\n import tensorflow as tf\n",
        "source_code_with_indent": "import tensorflow as tf\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Tuple\n\nimport tensorflow as tf\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    ckpt_path: str,\n) -> (CheckpointManagerCallback, int):\n    \"\"\"\n",
        "source_code_len": 67,
        "target_code": "    ckpt_path: str,\n) -> Tuple[CheckpointManagerCallback, int]:\n    \"\"\"\n",
        "target_code_len": 72,
        "diff_format": "@@ -66,3 +68,3 @@\n     ckpt_path: str,\n-) -> (CheckpointManagerCallback, int):\n+) -> Tuple[CheckpointManagerCallback, int]:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "    ckpt_path: str,\n) -> (CheckpointManagerCallback, int):\n    <IND>",
        "target_code_with_indent": "    ckpt_path: str,\n) -> Tuple[CheckpointManagerCallback, int]:\n    <IND>"
      }
    ]
  },
  {
    "project": "DeepRegNet/DeepReg",
    "commit": "8ce52504574ad8e6f26ef354984f89bf70ab6863",
    "filename": "deepreg/dataset/loader/util.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DeepRegNet-DeepReg/deepreg/dataset/loader/util.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "deepreg/dataset/loader/util.py:28:42 Invalid type [31]: Expression `(str, list)` is not a valid type.",
    "message": " Expression `(str, list)` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 28,
    "warning_line": "def remove_prefix_suffix(x: str, prefix: (str, list), suffix: (str, list)) -> str:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import numpy as np\n",
        "source_code_len": 19,
        "target_code": "from typing import List, Union\n\nimport numpy as np\n",
        "target_code_len": 51,
        "diff_format": "@@ -1,1 +1,3 @@\n+from typing import List, Union\n+\n import numpy as np\n",
        "source_code_with_indent": "import numpy as np\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import List, Union\n\nimport numpy as np\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef remove_prefix_suffix(x: str, prefix: (str, list), suffix: (str, list)) -> str:\n    \"\"\"\n",
        "source_code_len": 92,
        "target_code": "\ndef remove_prefix_suffix(\n    x: str, prefix: Union[str, List[str]], suffix: Union[str, List[str]]\n) -> str:\n    \"\"\"\n",
        "target_code_len": 118,
        "diff_format": "@@ -27,3 +29,5 @@\n \n-def remove_prefix_suffix(x: str, prefix: (str, list), suffix: (str, list)) -> str:\n+def remove_prefix_suffix(\n+    x: str, prefix: Union[str, List[str]], suffix: Union[str, List[str]]\n+) -> str:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>def remove_prefix_suffix(x: str, prefix: (str, list), suffix: (str, list)) -> str:\n    <IND>",
        "target_code_with_indent": "\n<DED>def remove_prefix_suffix(\n    x: str, prefix: Union[str, List[str]], suffix: Union[str, List[str]]\n) -> str:\n    <IND>"
      }
    ]
  },
  {
    "project": "DeepRegNet/DeepReg",
    "commit": "8ce52504574ad8e6f26ef354984f89bf70ab6863",
    "filename": "deepreg/dataset/loader/util.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DeepRegNet-DeepReg/deepreg/dataset/loader/util.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "deepreg/dataset/loader/util.py:28:63 Invalid type [31]: Expression `(str, list)` is not a valid type.",
    "message": " Expression `(str, list)` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 28,
    "warning_line": "def remove_prefix_suffix(x: str, prefix: (str, list), suffix: (str, list)) -> str:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import numpy as np\n",
        "source_code_len": 19,
        "target_code": "from typing import List, Union\n\nimport numpy as np\n",
        "target_code_len": 51,
        "diff_format": "@@ -1,1 +1,3 @@\n+from typing import List, Union\n+\n import numpy as np\n",
        "source_code_with_indent": "import numpy as np\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import List, Union\n\nimport numpy as np\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef remove_prefix_suffix(x: str, prefix: (str, list), suffix: (str, list)) -> str:\n    \"\"\"\n",
        "source_code_len": 92,
        "target_code": "\ndef remove_prefix_suffix(\n    x: str, prefix: Union[str, List[str]], suffix: Union[str, List[str]]\n) -> str:\n    \"\"\"\n",
        "target_code_len": 118,
        "diff_format": "@@ -27,3 +29,5 @@\n \n-def remove_prefix_suffix(x: str, prefix: (str, list), suffix: (str, list)) -> str:\n+def remove_prefix_suffix(\n+    x: str, prefix: Union[str, List[str]], suffix: Union[str, List[str]]\n+) -> str:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>def remove_prefix_suffix(x: str, prefix: (str, list), suffix: (str, list)) -> str:\n    <IND>",
        "target_code_with_indent": "\n<DED>def remove_prefix_suffix(\n    x: str, prefix: Union[str, List[str]], suffix: Union[str, List[str]]\n) -> str:\n    <IND>"
      }
    ]
  },
  {
    "project": "DeepRegNet/DeepReg",
    "commit": "8ce52504574ad8e6f26ef354984f89bf70ab6863",
    "filename": "deepreg/dataset/util.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DeepRegNet-DeepReg/deepreg/dataset/util.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "deepreg/dataset/util.py:25:28 Invalid type [31]: Expression `(str, list)` is not a valid type.",
    "message": " Expression `(str, list)` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 25,
    "warning_line": "    dir_path: str, suffix: (str, list)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import random\nfrom typing import List, Tuple\n\n",
        "source_code_len": 46,
        "target_code": "import random\nfrom typing import List, Tuple, Union\n\n",
        "target_code_len": 53,
        "diff_format": "@@ -8,3 +8,3 @@\n import random\n-from typing import List, Tuple\n+from typing import List, Tuple, Union\n \n",
        "source_code_with_indent": "import random\nfrom typing import List, Tuple\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import random\nfrom typing import List, Tuple, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def get_sorted_file_paths_in_dir_with_suffix(\n    dir_path: str, suffix: (str, list)\n) -> List[Tuple[str]]:\n    \"\"\"\n",
        "source_code_len": 116,
        "target_code": "def get_sorted_file_paths_in_dir_with_suffix(\n    dir_path: str, suffix: Union[str, List[str]]\n) -> List[Tuple[str, str]]:\n    \"\"\"\n",
        "target_code_len": 131,
        "diff_format": "@@ -24,4 +24,4 @@\n def get_sorted_file_paths_in_dir_with_suffix(\n-    dir_path: str, suffix: (str, list)\n-) -> List[Tuple[str]]:\n+    dir_path: str, suffix: Union[str, List[str]]\n+) -> List[Tuple[str, str]]:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "<DED><DED>def get_sorted_file_paths_in_dir_with_suffix(\n    dir_path: str, suffix: (str, list)\n) -> List[Tuple[str]]:\n    <IND>",
        "target_code_with_indent": "<DED><DED>def get_sorted_file_paths_in_dir_with_suffix(\n    dir_path: str, suffix: Union[str, List[str]]\n) -> List[Tuple[str, str]]:\n    <IND>"
      }
    ]
  },
  {
    "project": "DeepRegNet/DeepReg",
    "commit": "8ce52504574ad8e6f26ef354984f89bf70ab6863",
    "filename": "deepreg/loss/util.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DeepRegNet-DeepReg/deepreg/loss/util.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "deepreg/loss/util.py:33:47 Invalid type [31]: Expression `(tensorflow.Tensor, tensorflow.Tensor)` is not a valid type.",
    "message": " Expression `(tensorflow.Tensor, tensorflow.Tensor)` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 33,
    "warning_line": "def rectangular_kernel1d(kernel_size: int) -> (tf.Tensor, tf.Tensor):",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef rectangular_kernel1d(kernel_size: int) -> (tf.Tensor, tf.Tensor):\n    \"\"\"\n",
        "source_code_len": 79,
        "target_code": "\ndef rectangular_kernel1d(kernel_size: int) -> tf.Tensor:\n    \"\"\"\n",
        "target_code_len": 66,
        "diff_format": "@@ -32,3 +32,3 @@\n \n-def rectangular_kernel1d(kernel_size: int) -> (tf.Tensor, tf.Tensor):\n+def rectangular_kernel1d(kernel_size: int) -> tf.Tensor:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\ndef rectangular_kernel1d(kernel_size: int) -> (tf.Tensor, tf.Tensor):\n    <IND>",
        "target_code_with_indent": "\ndef rectangular_kernel1d(kernel_size: int) -> tf.Tensor:\n    <IND>"
      }
    ]
  },
  {
    "project": "DeepRegNet/DeepReg",
    "commit": "8ce52504574ad8e6f26ef354984f89bf70ab6863",
    "filename": "deepreg/loss/util.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DeepRegNet-DeepReg/deepreg/loss/util.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "deepreg/loss/util.py:46:46 Invalid type [31]: Expression `(tensorflow.Tensor, tensorflow.Tensor)` is not a valid type.",
    "message": " Expression `(tensorflow.Tensor, tensorflow.Tensor)` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 46,
    "warning_line": "def triangular_kernel1d(kernel_size: int) -> (tf.Tensor, tf.Tensor):",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef triangular_kernel1d(kernel_size: int) -> (tf.Tensor, tf.Tensor):\n    \"\"\"\n",
        "source_code_len": 78,
        "target_code": "\ndef triangular_kernel1d(kernel_size: int) -> tf.Tensor:\n    \"\"\"\n",
        "target_code_len": 65,
        "diff_format": "@@ -45,3 +45,3 @@\n \n-def triangular_kernel1d(kernel_size: int) -> (tf.Tensor, tf.Tensor):\n+def triangular_kernel1d(kernel_size: int) -> tf.Tensor:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>def triangular_kernel1d(kernel_size: int) -> (tf.Tensor, tf.Tensor):\n    <IND>",
        "target_code_with_indent": "\n<DED>def triangular_kernel1d(kernel_size: int) -> tf.Tensor:\n    <IND>"
      }
    ]
  },
  {
    "project": "DeepRegNet/DeepReg",
    "commit": "8ce52504574ad8e6f26ef354984f89bf70ab6863",
    "filename": "deepreg/loss/util.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DeepRegNet-DeepReg/deepreg/loss/util.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "deepreg/loss/util.py:80:49 Invalid type [31]: Expression `(tensorflow.Tensor, tensorflow.Tensor)` is not a valid type.",
    "message": " Expression `(tensorflow.Tensor, tensorflow.Tensor)` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 80,
    "warning_line": "def gaussian_kernel1d_size(kernel_size: int) -> (tf.Tensor, tf.Tensor):",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef gaussian_kernel1d_size(kernel_size: int) -> (tf.Tensor, tf.Tensor):\n    \"\"\"\n",
        "source_code_len": 81,
        "target_code": "\ndef gaussian_kernel1d_size(kernel_size: int) -> tf.Tensor:\n    \"\"\"\n",
        "target_code_len": 68,
        "diff_format": "@@ -79,3 +78,3 @@\n \n-def gaussian_kernel1d_size(kernel_size: int) -> (tf.Tensor, tf.Tensor):\n+def gaussian_kernel1d_size(kernel_size: int) -> tf.Tensor:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>def gaussian_kernel1d_size(kernel_size: int) -> (tf.Tensor, tf.Tensor):\n    <IND>",
        "target_code_with_indent": "\n<DED>def gaussian_kernel1d_size(kernel_size: int) -> tf.Tensor:\n    <IND>"
      }
    ]
  },
  {
    "project": "DeepRegNet/DeepReg",
    "commit": "8ce52504574ad8e6f26ef354984f89bf70ab6863",
    "filename": "deepreg/model/backbone/u_net.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DeepRegNet-DeepReg/deepreg/model/backbone/u_net.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "deepreg/model/backbone/u_net.py:112:12 Incompatible parameter type [6]: Expected `Tuple[int]` for 4th parameter `extract_levels` to call `UNet.build_layers` but got `typing.Tuple[typing.Any, ...]`.",
    "message": " Expected `Tuple[int]` for 4th parameter `extract_levels` to call `UNet.build_layers` but got `typing.Tuple[typing.Any, ...]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 112,
    "warning_line": "            extract_levels=extract_levels,"
  },
  {
    "project": "DeepRegNet/DeepReg",
    "commit": "8ce52504574ad8e6f26ef354984f89bf70ab6863",
    "filename": "deepreg/model/backbone/u_net.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DeepRegNet-DeepReg/deepreg/model/backbone/u_net.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "deepreg/model/backbone/u_net.py:496:16 Incompatible parameter type [6]: Expected `Union[Tuple[int], int]` for 1st parameter `input_shape` to call `layer_util.deconv_output_padding` but got `typing.Tuple[typing.Any, ...]`.",
    "message": " Expected `Union[Tuple[int], int]` for 1st parameter `input_shape` to call `layer_util.deconv_output_padding` but got `typing.Tuple[typing.Any, ...]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 496,
    "warning_line": "                input_shape=tensor_shapes[d + 1],"
  },
  {
    "project": "DeepRegNet/DeepReg",
    "commit": "8ce52504574ad8e6f26ef354984f89bf70ab6863",
    "filename": "deepreg/model/backbone/u_net.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DeepRegNet-DeepReg/deepreg/model/backbone/u_net.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "deepreg/model/backbone/u_net.py:497:16 Incompatible parameter type [6]: Expected `Union[Tuple[int], int]` for 2nd parameter `output_shape` to call `layer_util.deconv_output_padding` but got `typing.Tuple[typing.Any, ...]`.",
    "message": " Expected `Union[Tuple[int], int]` for 2nd parameter `output_shape` to call `layer_util.deconv_output_padding` but got `typing.Tuple[typing.Any, ...]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 497,
    "warning_line": "                output_shape=tensor_shapes[d],"
  },
  {
    "project": "DeepRegNet/DeepReg",
    "commit": "8ce52504574ad8e6f26ef354984f89bf70ab6863",
    "filename": "deepreg/model/backbone/u_net.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DeepRegNet-DeepReg/deepreg/model/backbone/u_net.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "deepreg/model/backbone/u_net.py:504:16 Incompatible parameter type [6]: Expected `int` for 2nd parameter `output_padding` to call `UNet.build_up_sampling_block` but got `Union[Tuple[int], int]`.",
    "message": " Expected `int` for 2nd parameter `output_padding` to call `UNet.build_up_sampling_block` but got `Union[Tuple[int], int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 504,
    "warning_line": "                output_padding=output_padding,"
  },
  {
    "project": "DeepRegNet/DeepReg",
    "commit": "8ce52504574ad8e6f26ef354984f89bf70ab6863",
    "filename": "deepreg/model/backbone/u_net.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DeepRegNet-DeepReg/deepreg/model/backbone/u_net.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "deepreg/model/backbone/u_net.py:522:12 Incompatible parameter type [6]: Expected `Tuple[int]` for 1st parameter `image_size` to call `UNet.build_output_block` but got `typing.Tuple[typing.Any, ...]`.",
    "message": " Expected `Tuple[int]` for 1st parameter `image_size` to call `UNet.build_output_block` but got `typing.Tuple[typing.Any, ...]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 522,
    "warning_line": "            image_size=image_size,"
  },
  {
    "project": "DeepRegNet/DeepReg",
    "commit": "8ce52504574ad8e6f26ef354984f89bf70ab6863",
    "filename": "deepreg/model/layer_util.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DeepRegNet-DeepReg/deepreg/model/layer_util.py",
    "file_hunks_size": 7,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "deepreg/model/layer_util.py:11:35 Invalid type [31]: Expression `(tuple, list)` is not a valid type.",
    "message": " Expression `(tuple, list)` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 11,
    "warning_line": "def get_reference_grid(grid_size: (tuple, list)) -> tf.Tensor:"
  },
  {
    "project": "DeepRegNet/DeepReg",
    "commit": "8ce52504574ad8e6f26ef354984f89bf70ab6863",
    "filename": "deepreg/model/layer_util.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DeepRegNet-DeepReg/deepreg/model/layer_util.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "deepreg/model/layer_util.py:372:38 Invalid type [31]: Expression `(list, tuple, int)` is not a valid type.",
    "message": " Expression `(list, tuple, int)` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 372,
    "warning_line": "def gaussian_filter_3d(kernel_sigma: (list, tuple, int)) -> tf.Tensor:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import itertools\nfrom typing import Tuple, Union\n\n",
        "source_code_len": 50,
        "target_code": "import itertools\nfrom typing import List, Tuple, Union\n\n",
        "target_code_len": 56,
        "diff_format": "@@ -4,3 +4,3 @@\n import itertools\n-from typing import Tuple, Union\n+from typing import List, Tuple, Union\n \n",
        "source_code_with_indent": "import itertools\nfrom typing import Tuple, Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import itertools\nfrom typing import List, Tuple, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef gaussian_filter_3d(kernel_sigma: (list, tuple, int)) -> tf.Tensor:\n    \"\"\"\n",
        "source_code_len": 80,
        "target_code": "\ndef gaussian_filter_3d(kernel_sigma: Union[Tuple[int, ...], List[int]]) -> tf.Tensor:\n    \"\"\"\n",
        "target_code_len": 95,
        "diff_format": "@@ -371,3 +371,3 @@\n \n-def gaussian_filter_3d(kernel_sigma: (list, tuple, int)) -> tf.Tensor:\n+def gaussian_filter_3d(kernel_sigma: Union[Tuple[int, ...], List[int]]) -> tf.Tensor:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>def gaussian_filter_3d(kernel_sigma: (list, tuple, int)) -> tf.Tensor:\n    <IND>",
        "target_code_with_indent": "\n<DED>def gaussian_filter_3d(kernel_sigma: Union[Tuple[int, ...], List[int]]) -> tf.Tensor:\n    <IND>"
      }
    ]
  },
  {
    "project": "DeepRegNet/DeepReg",
    "commit": "8ce52504574ad8e6f26ef354984f89bf70ab6863",
    "filename": "deepreg/model/layer_util.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DeepRegNet-DeepReg/deepreg/model/layer_util.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "deepreg/model/layer_util.py:481:12 Incompatible parameter type [6]: Expected `int` for 2nd parameter `output_shape` to call `_deconv_output_padding` but got `Union[Tuple[int], int]`.",
    "message": " Expected `int` for 2nd parameter `output_shape` to call `_deconv_output_padding` but got `Union[Tuple[int], int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 481,
    "warning_line": "            output_shape=output_shape,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def deconv_output_padding(\n    input_shape: Union[Tuple[int], int],\n    output_shape: Union[Tuple[int], int],\n    kernel_size: Union[Tuple[int], int],\n    stride: Union[Tuple[int], int],\n    padding: str,\n) -> Union[Tuple[int], int]:\n    \"\"\"\n",
        "source_code_len": 242,
        "target_code": "def deconv_output_padding(\n    input_shape: Union[Tuple[int, ...], int],\n    output_shape: Union[Tuple[int, ...], int],\n    kernel_size: Union[Tuple[int, ...], int],\n    stride: Union[Tuple[int, ...], int],\n    padding: str,\n) -> Union[Tuple[int, ...], int]:\n    \"\"\"\n",
        "target_code_len": 267,
        "diff_format": "@@ -460,8 +460,8 @@\n def deconv_output_padding(\n-    input_shape: Union[Tuple[int], int],\n-    output_shape: Union[Tuple[int], int],\n-    kernel_size: Union[Tuple[int], int],\n-    stride: Union[Tuple[int], int],\n+    input_shape: Union[Tuple[int, ...], int],\n+    output_shape: Union[Tuple[int, ...], int],\n+    kernel_size: Union[Tuple[int, ...], int],\n+    stride: Union[Tuple[int, ...], int],\n     padding: str,\n-) -> Union[Tuple[int], int]:\n+) -> Union[Tuple[int, ...], int]:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "<DED>def deconv_output_padding(\n    input_shape: Union[Tuple[int], int],\n    output_shape: Union[Tuple[int], int],\n    kernel_size: Union[Tuple[int], int],\n    stride: Union[Tuple[int], int],\n    padding: str,\n) -> Union[Tuple[int], int]:\n    <IND>",
        "target_code_with_indent": "<DED>def deconv_output_padding(\n    input_shape: Union[Tuple[int, ...], int],\n    output_shape: Union[Tuple[int, ...], int],\n    kernel_size: Union[Tuple[int, ...], int],\n    stride: Union[Tuple[int, ...], int],\n    padding: str,\n) -> Union[Tuple[int, ...], int]:\n    <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    if isinstance(input_shape, int):\n        return _deconv_output_padding(\n            input_shape=input_shape,\n            output_shape=output_shape,\n            kernel_size=kernel_size,\n            stride=stride,\n            padding=padding,\n        )\n    assert len(input_shape) == len(output_shape)\n    dim = len(input_shape)\n    if isinstance(kernel_size, int):\n        kernel_size = [kernel_size] * dim\n    if isinstance(stride, int):\n        stride = [stride] * dim\n    return tuple(\n        [\n            _deconv_output_padding(\n                input_shape=input_shape[d],\n                output_shape=output_shape[d],\n                kernel_size=kernel_size[d],\n                stride=stride[d],\n                padding=padding,\n            )\n            for d in range(dim)\n        ]\n    )\n",
        "source_code_len": 801,
        "target_code": "    if isinstance(input_shape, int):\n        input_shape = (input_shape,)\n    dim = len(input_shape)\n    if isinstance(output_shape, int):\n        output_shape = (output_shape,)\n    if isinstance(kernel_size, int):\n        kernel_size = (kernel_size,) * dim\n    if isinstance(stride, int):\n        stride = (stride,) * dim\n    output_padding = tuple(\n        _deconv_output_padding(\n            input_shape=input_shape[d],\n            output_shape=output_shape[d],\n            kernel_size=kernel_size[d],\n            stride=stride[d],\n            padding=padding,\n        )\n        for d in range(dim)\n    )\n    if dim == 1:\n        return output_padding[0]\n    return output_padding\n",
        "target_code_len": 684,
        "diff_format": "@@ -478,26 +478,22 @@\n     if isinstance(input_shape, int):\n-        return _deconv_output_padding(\n-            input_shape=input_shape,\n-            output_shape=output_shape,\n-            kernel_size=kernel_size,\n-            stride=stride,\n+        input_shape = (input_shape,)\n+    dim = len(input_shape)\n+    if isinstance(output_shape, int):\n+        output_shape = (output_shape,)\n+    if isinstance(kernel_size, int):\n+        kernel_size = (kernel_size,) * dim\n+    if isinstance(stride, int):\n+        stride = (stride,) * dim\n+    output_padding = tuple(\n+        _deconv_output_padding(\n+            input_shape=input_shape[d],\n+            output_shape=output_shape[d],\n+            kernel_size=kernel_size[d],\n+            stride=stride[d],\n             padding=padding,\n         )\n-    assert len(input_shape) == len(output_shape)\n-    dim = len(input_shape)\n-    if isinstance(kernel_size, int):\n-        kernel_size = [kernel_size] * dim\n-    if isinstance(stride, int):\n-        stride = [stride] * dim\n-    return tuple(\n-        [\n-            _deconv_output_padding(\n-                input_shape=input_shape[d],\n-                output_shape=output_shape[d],\n-                kernel_size=kernel_size[d],\n-                stride=stride[d],\n-                padding=padding,\n-            )\n-            for d in range(dim)\n-        ]\n+        for d in range(dim)\n     )\n+    if dim == 1:\n+        return output_padding[0]\n+    return output_padding\n",
        "source_code_with_indent": "    if isinstance(input_shape, int):\n        <IND>return _deconv_output_padding(\n            input_shape=input_shape,\n            output_shape=output_shape,\n            kernel_size=kernel_size,\n            stride=stride,\n            padding=padding,\n        )\n    <DED>assert len(input_shape) == len(output_shape)\n    dim = len(input_shape)\n    if isinstance(kernel_size, int):\n        <IND>kernel_size = [kernel_size] * dim\n    <DED>if isinstance(stride, int):\n        <IND>stride = [stride] * dim\n    <DED>return tuple(\n        [\n            _deconv_output_padding(\n                input_shape=input_shape[d],\n                output_shape=output_shape[d],\n                kernel_size=kernel_size[d],\n                stride=stride[d],\n                padding=padding,\n            )\n            for d in range(dim)\n        ]\n    )\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    if isinstance(input_shape, int):\n        <IND>input_shape = (input_shape,)\n    <DED>dim = len(input_shape)\n    if isinstance(output_shape, int):\n        <IND>output_shape = (output_shape,)\n    <DED>if isinstance(kernel_size, int):\n        <IND>kernel_size = (kernel_size,) * dim\n    <DED>if isinstance(stride, int):\n        <IND>stride = (stride,) * dim\n    <DED>output_padding = tuple(\n        _deconv_output_padding(\n            input_shape=input_shape[d],\n            output_shape=output_shape[d],\n            kernel_size=kernel_size[d],\n            stride=stride[d],\n            padding=padding,\n        )\n        for d in range(dim)\n    )\n    if dim == 1:\n        <IND>return output_padding[0]\n    <DED>return output_padding\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "DeepRegNet/DeepReg",
    "commit": "8ce52504574ad8e6f26ef354984f89bf70ab6863",
    "filename": "deepreg/model/layer_util.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DeepRegNet-DeepReg/deepreg/model/layer_util.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "deepreg/model/layer_util.py:482:12 Incompatible parameter type [6]: Expected `int` for 3rd parameter `kernel_size` to call `_deconv_output_padding` but got `Union[Tuple[int], int]`.",
    "message": " Expected `int` for 3rd parameter `kernel_size` to call `_deconv_output_padding` but got `Union[Tuple[int], int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 482,
    "warning_line": "            kernel_size=kernel_size,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def deconv_output_padding(\n    input_shape: Union[Tuple[int], int],\n    output_shape: Union[Tuple[int], int],\n    kernel_size: Union[Tuple[int], int],\n    stride: Union[Tuple[int], int],\n    padding: str,\n) -> Union[Tuple[int], int]:\n    \"\"\"\n",
        "source_code_len": 242,
        "target_code": "def deconv_output_padding(\n    input_shape: Union[Tuple[int, ...], int],\n    output_shape: Union[Tuple[int, ...], int],\n    kernel_size: Union[Tuple[int, ...], int],\n    stride: Union[Tuple[int, ...], int],\n    padding: str,\n) -> Union[Tuple[int, ...], int]:\n    \"\"\"\n",
        "target_code_len": 267,
        "diff_format": "@@ -460,8 +460,8 @@\n def deconv_output_padding(\n-    input_shape: Union[Tuple[int], int],\n-    output_shape: Union[Tuple[int], int],\n-    kernel_size: Union[Tuple[int], int],\n-    stride: Union[Tuple[int], int],\n+    input_shape: Union[Tuple[int, ...], int],\n+    output_shape: Union[Tuple[int, ...], int],\n+    kernel_size: Union[Tuple[int, ...], int],\n+    stride: Union[Tuple[int, ...], int],\n     padding: str,\n-) -> Union[Tuple[int], int]:\n+) -> Union[Tuple[int, ...], int]:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "<DED>def deconv_output_padding(\n    input_shape: Union[Tuple[int], int],\n    output_shape: Union[Tuple[int], int],\n    kernel_size: Union[Tuple[int], int],\n    stride: Union[Tuple[int], int],\n    padding: str,\n) -> Union[Tuple[int], int]:\n    <IND>",
        "target_code_with_indent": "<DED>def deconv_output_padding(\n    input_shape: Union[Tuple[int, ...], int],\n    output_shape: Union[Tuple[int, ...], int],\n    kernel_size: Union[Tuple[int, ...], int],\n    stride: Union[Tuple[int, ...], int],\n    padding: str,\n) -> Union[Tuple[int, ...], int]:\n    <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    if isinstance(input_shape, int):\n        return _deconv_output_padding(\n            input_shape=input_shape,\n            output_shape=output_shape,\n            kernel_size=kernel_size,\n            stride=stride,\n            padding=padding,\n        )\n    assert len(input_shape) == len(output_shape)\n    dim = len(input_shape)\n    if isinstance(kernel_size, int):\n        kernel_size = [kernel_size] * dim\n    if isinstance(stride, int):\n        stride = [stride] * dim\n    return tuple(\n        [\n            _deconv_output_padding(\n                input_shape=input_shape[d],\n                output_shape=output_shape[d],\n                kernel_size=kernel_size[d],\n                stride=stride[d],\n                padding=padding,\n            )\n            for d in range(dim)\n        ]\n    )\n",
        "source_code_len": 801,
        "target_code": "    if isinstance(input_shape, int):\n        input_shape = (input_shape,)\n    dim = len(input_shape)\n    if isinstance(output_shape, int):\n        output_shape = (output_shape,)\n    if isinstance(kernel_size, int):\n        kernel_size = (kernel_size,) * dim\n    if isinstance(stride, int):\n        stride = (stride,) * dim\n    output_padding = tuple(\n        _deconv_output_padding(\n            input_shape=input_shape[d],\n            output_shape=output_shape[d],\n            kernel_size=kernel_size[d],\n            stride=stride[d],\n            padding=padding,\n        )\n        for d in range(dim)\n    )\n    if dim == 1:\n        return output_padding[0]\n    return output_padding\n",
        "target_code_len": 684,
        "diff_format": "@@ -478,26 +478,22 @@\n     if isinstance(input_shape, int):\n-        return _deconv_output_padding(\n-            input_shape=input_shape,\n-            output_shape=output_shape,\n-            kernel_size=kernel_size,\n-            stride=stride,\n+        input_shape = (input_shape,)\n+    dim = len(input_shape)\n+    if isinstance(output_shape, int):\n+        output_shape = (output_shape,)\n+    if isinstance(kernel_size, int):\n+        kernel_size = (kernel_size,) * dim\n+    if isinstance(stride, int):\n+        stride = (stride,) * dim\n+    output_padding = tuple(\n+        _deconv_output_padding(\n+            input_shape=input_shape[d],\n+            output_shape=output_shape[d],\n+            kernel_size=kernel_size[d],\n+            stride=stride[d],\n             padding=padding,\n         )\n-    assert len(input_shape) == len(output_shape)\n-    dim = len(input_shape)\n-    if isinstance(kernel_size, int):\n-        kernel_size = [kernel_size] * dim\n-    if isinstance(stride, int):\n-        stride = [stride] * dim\n-    return tuple(\n-        [\n-            _deconv_output_padding(\n-                input_shape=input_shape[d],\n-                output_shape=output_shape[d],\n-                kernel_size=kernel_size[d],\n-                stride=stride[d],\n-                padding=padding,\n-            )\n-            for d in range(dim)\n-        ]\n+        for d in range(dim)\n     )\n+    if dim == 1:\n+        return output_padding[0]\n+    return output_padding\n",
        "source_code_with_indent": "    if isinstance(input_shape, int):\n        <IND>return _deconv_output_padding(\n            input_shape=input_shape,\n            output_shape=output_shape,\n            kernel_size=kernel_size,\n            stride=stride,\n            padding=padding,\n        )\n    <DED>assert len(input_shape) == len(output_shape)\n    dim = len(input_shape)\n    if isinstance(kernel_size, int):\n        <IND>kernel_size = [kernel_size] * dim\n    <DED>if isinstance(stride, int):\n        <IND>stride = [stride] * dim\n    <DED>return tuple(\n        [\n            _deconv_output_padding(\n                input_shape=input_shape[d],\n                output_shape=output_shape[d],\n                kernel_size=kernel_size[d],\n                stride=stride[d],\n                padding=padding,\n            )\n            for d in range(dim)\n        ]\n    )\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    if isinstance(input_shape, int):\n        <IND>input_shape = (input_shape,)\n    <DED>dim = len(input_shape)\n    if isinstance(output_shape, int):\n        <IND>output_shape = (output_shape,)\n    <DED>if isinstance(kernel_size, int):\n        <IND>kernel_size = (kernel_size,) * dim\n    <DED>if isinstance(stride, int):\n        <IND>stride = (stride,) * dim\n    <DED>output_padding = tuple(\n        _deconv_output_padding(\n            input_shape=input_shape[d],\n            output_shape=output_shape[d],\n            kernel_size=kernel_size[d],\n            stride=stride[d],\n            padding=padding,\n        )\n        for d in range(dim)\n    )\n    if dim == 1:\n        <IND>return output_padding[0]\n    <DED>return output_padding\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "DeepRegNet/DeepReg",
    "commit": "8ce52504574ad8e6f26ef354984f89bf70ab6863",
    "filename": "deepreg/model/layer_util.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DeepRegNet-DeepReg/deepreg/model/layer_util.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "deepreg/model/layer_util.py:483:12 Incompatible parameter type [6]: Expected `int` for 4th parameter `stride` to call `_deconv_output_padding` but got `Union[Tuple[int], int]`.",
    "message": " Expected `int` for 4th parameter `stride` to call `_deconv_output_padding` but got `Union[Tuple[int], int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 483,
    "warning_line": "            stride=stride,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def deconv_output_padding(\n    input_shape: Union[Tuple[int], int],\n    output_shape: Union[Tuple[int], int],\n    kernel_size: Union[Tuple[int], int],\n    stride: Union[Tuple[int], int],\n    padding: str,\n) -> Union[Tuple[int], int]:\n    \"\"\"\n",
        "source_code_len": 242,
        "target_code": "def deconv_output_padding(\n    input_shape: Union[Tuple[int, ...], int],\n    output_shape: Union[Tuple[int, ...], int],\n    kernel_size: Union[Tuple[int, ...], int],\n    stride: Union[Tuple[int, ...], int],\n    padding: str,\n) -> Union[Tuple[int, ...], int]:\n    \"\"\"\n",
        "target_code_len": 267,
        "diff_format": "@@ -460,8 +460,8 @@\n def deconv_output_padding(\n-    input_shape: Union[Tuple[int], int],\n-    output_shape: Union[Tuple[int], int],\n-    kernel_size: Union[Tuple[int], int],\n-    stride: Union[Tuple[int], int],\n+    input_shape: Union[Tuple[int, ...], int],\n+    output_shape: Union[Tuple[int, ...], int],\n+    kernel_size: Union[Tuple[int, ...], int],\n+    stride: Union[Tuple[int, ...], int],\n     padding: str,\n-) -> Union[Tuple[int], int]:\n+) -> Union[Tuple[int, ...], int]:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "<DED>def deconv_output_padding(\n    input_shape: Union[Tuple[int], int],\n    output_shape: Union[Tuple[int], int],\n    kernel_size: Union[Tuple[int], int],\n    stride: Union[Tuple[int], int],\n    padding: str,\n) -> Union[Tuple[int], int]:\n    <IND>",
        "target_code_with_indent": "<DED>def deconv_output_padding(\n    input_shape: Union[Tuple[int, ...], int],\n    output_shape: Union[Tuple[int, ...], int],\n    kernel_size: Union[Tuple[int, ...], int],\n    stride: Union[Tuple[int, ...], int],\n    padding: str,\n) -> Union[Tuple[int, ...], int]:\n    <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    if isinstance(input_shape, int):\n        return _deconv_output_padding(\n            input_shape=input_shape,\n            output_shape=output_shape,\n            kernel_size=kernel_size,\n            stride=stride,\n            padding=padding,\n        )\n    assert len(input_shape) == len(output_shape)\n    dim = len(input_shape)\n    if isinstance(kernel_size, int):\n        kernel_size = [kernel_size] * dim\n    if isinstance(stride, int):\n        stride = [stride] * dim\n    return tuple(\n        [\n            _deconv_output_padding(\n                input_shape=input_shape[d],\n                output_shape=output_shape[d],\n                kernel_size=kernel_size[d],\n                stride=stride[d],\n                padding=padding,\n            )\n            for d in range(dim)\n        ]\n    )\n",
        "source_code_len": 801,
        "target_code": "    if isinstance(input_shape, int):\n        input_shape = (input_shape,)\n    dim = len(input_shape)\n    if isinstance(output_shape, int):\n        output_shape = (output_shape,)\n    if isinstance(kernel_size, int):\n        kernel_size = (kernel_size,) * dim\n    if isinstance(stride, int):\n        stride = (stride,) * dim\n    output_padding = tuple(\n        _deconv_output_padding(\n            input_shape=input_shape[d],\n            output_shape=output_shape[d],\n            kernel_size=kernel_size[d],\n            stride=stride[d],\n            padding=padding,\n        )\n        for d in range(dim)\n    )\n    if dim == 1:\n        return output_padding[0]\n    return output_padding\n",
        "target_code_len": 684,
        "diff_format": "@@ -478,26 +478,22 @@\n     if isinstance(input_shape, int):\n-        return _deconv_output_padding(\n-            input_shape=input_shape,\n-            output_shape=output_shape,\n-            kernel_size=kernel_size,\n-            stride=stride,\n+        input_shape = (input_shape,)\n+    dim = len(input_shape)\n+    if isinstance(output_shape, int):\n+        output_shape = (output_shape,)\n+    if isinstance(kernel_size, int):\n+        kernel_size = (kernel_size,) * dim\n+    if isinstance(stride, int):\n+        stride = (stride,) * dim\n+    output_padding = tuple(\n+        _deconv_output_padding(\n+            input_shape=input_shape[d],\n+            output_shape=output_shape[d],\n+            kernel_size=kernel_size[d],\n+            stride=stride[d],\n             padding=padding,\n         )\n-    assert len(input_shape) == len(output_shape)\n-    dim = len(input_shape)\n-    if isinstance(kernel_size, int):\n-        kernel_size = [kernel_size] * dim\n-    if isinstance(stride, int):\n-        stride = [stride] * dim\n-    return tuple(\n-        [\n-            _deconv_output_padding(\n-                input_shape=input_shape[d],\n-                output_shape=output_shape[d],\n-                kernel_size=kernel_size[d],\n-                stride=stride[d],\n-                padding=padding,\n-            )\n-            for d in range(dim)\n-        ]\n+        for d in range(dim)\n     )\n+    if dim == 1:\n+        return output_padding[0]\n+    return output_padding\n",
        "source_code_with_indent": "    if isinstance(input_shape, int):\n        <IND>return _deconv_output_padding(\n            input_shape=input_shape,\n            output_shape=output_shape,\n            kernel_size=kernel_size,\n            stride=stride,\n            padding=padding,\n        )\n    <DED>assert len(input_shape) == len(output_shape)\n    dim = len(input_shape)\n    if isinstance(kernel_size, int):\n        <IND>kernel_size = [kernel_size] * dim\n    <DED>if isinstance(stride, int):\n        <IND>stride = [stride] * dim\n    <DED>return tuple(\n        [\n            _deconv_output_padding(\n                input_shape=input_shape[d],\n                output_shape=output_shape[d],\n                kernel_size=kernel_size[d],\n                stride=stride[d],\n                padding=padding,\n            )\n            for d in range(dim)\n        ]\n    )\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    if isinstance(input_shape, int):\n        <IND>input_shape = (input_shape,)\n    <DED>dim = len(input_shape)\n    if isinstance(output_shape, int):\n        <IND>output_shape = (output_shape,)\n    <DED>if isinstance(kernel_size, int):\n        <IND>kernel_size = (kernel_size,) * dim\n    <DED>if isinstance(stride, int):\n        <IND>stride = (stride,) * dim\n    <DED>output_padding = tuple(\n        _deconv_output_padding(\n            input_shape=input_shape[d],\n            output_shape=output_shape[d],\n            kernel_size=kernel_size[d],\n            stride=stride[d],\n            padding=padding,\n        )\n        for d in range(dim)\n    )\n    if dim == 1:\n        <IND>return output_padding[0]\n    <DED>return output_padding\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "DeepRegNet/DeepReg",
    "commit": "8ce52504574ad8e6f26ef354984f89bf70ab6863",
    "filename": "deepreg/model/layer_util.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DeepRegNet-DeepReg/deepreg/model/layer_util.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "deepreg/model/layer_util.py:486:35 Incompatible parameter type [6]: Expected `typing.Sized` for 1st positional only parameter to call `len` but got `Union[Tuple[int], int]`.",
    "message": " Expected `typing.Sized` for 1st positional only parameter to call `len` but got `Union[Tuple[int], int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 486,
    "warning_line": "    assert len(input_shape) == len(output_shape)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def deconv_output_padding(\n    input_shape: Union[Tuple[int], int],\n    output_shape: Union[Tuple[int], int],\n    kernel_size: Union[Tuple[int], int],\n    stride: Union[Tuple[int], int],\n    padding: str,\n) -> Union[Tuple[int], int]:\n    \"\"\"\n",
        "source_code_len": 242,
        "target_code": "def deconv_output_padding(\n    input_shape: Union[Tuple[int, ...], int],\n    output_shape: Union[Tuple[int, ...], int],\n    kernel_size: Union[Tuple[int, ...], int],\n    stride: Union[Tuple[int, ...], int],\n    padding: str,\n) -> Union[Tuple[int, ...], int]:\n    \"\"\"\n",
        "target_code_len": 267,
        "diff_format": "@@ -460,8 +460,8 @@\n def deconv_output_padding(\n-    input_shape: Union[Tuple[int], int],\n-    output_shape: Union[Tuple[int], int],\n-    kernel_size: Union[Tuple[int], int],\n-    stride: Union[Tuple[int], int],\n+    input_shape: Union[Tuple[int, ...], int],\n+    output_shape: Union[Tuple[int, ...], int],\n+    kernel_size: Union[Tuple[int, ...], int],\n+    stride: Union[Tuple[int, ...], int],\n     padding: str,\n-) -> Union[Tuple[int], int]:\n+) -> Union[Tuple[int, ...], int]:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "<DED>def deconv_output_padding(\n    input_shape: Union[Tuple[int], int],\n    output_shape: Union[Tuple[int], int],\n    kernel_size: Union[Tuple[int], int],\n    stride: Union[Tuple[int], int],\n    padding: str,\n) -> Union[Tuple[int], int]:\n    <IND>",
        "target_code_with_indent": "<DED>def deconv_output_padding(\n    input_shape: Union[Tuple[int, ...], int],\n    output_shape: Union[Tuple[int, ...], int],\n    kernel_size: Union[Tuple[int, ...], int],\n    stride: Union[Tuple[int, ...], int],\n    padding: str,\n) -> Union[Tuple[int, ...], int]:\n    <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    if isinstance(input_shape, int):\n        return _deconv_output_padding(\n            input_shape=input_shape,\n            output_shape=output_shape,\n            kernel_size=kernel_size,\n            stride=stride,\n            padding=padding,\n        )\n    assert len(input_shape) == len(output_shape)\n    dim = len(input_shape)\n    if isinstance(kernel_size, int):\n        kernel_size = [kernel_size] * dim\n    if isinstance(stride, int):\n        stride = [stride] * dim\n    return tuple(\n        [\n            _deconv_output_padding(\n                input_shape=input_shape[d],\n                output_shape=output_shape[d],\n                kernel_size=kernel_size[d],\n                stride=stride[d],\n                padding=padding,\n            )\n            for d in range(dim)\n        ]\n    )\n",
        "source_code_len": 801,
        "target_code": "    if isinstance(input_shape, int):\n        input_shape = (input_shape,)\n    dim = len(input_shape)\n    if isinstance(output_shape, int):\n        output_shape = (output_shape,)\n    if isinstance(kernel_size, int):\n        kernel_size = (kernel_size,) * dim\n    if isinstance(stride, int):\n        stride = (stride,) * dim\n    output_padding = tuple(\n        _deconv_output_padding(\n            input_shape=input_shape[d],\n            output_shape=output_shape[d],\n            kernel_size=kernel_size[d],\n            stride=stride[d],\n            padding=padding,\n        )\n        for d in range(dim)\n    )\n    if dim == 1:\n        return output_padding[0]\n    return output_padding\n",
        "target_code_len": 684,
        "diff_format": "@@ -478,26 +478,22 @@\n     if isinstance(input_shape, int):\n-        return _deconv_output_padding(\n-            input_shape=input_shape,\n-            output_shape=output_shape,\n-            kernel_size=kernel_size,\n-            stride=stride,\n+        input_shape = (input_shape,)\n+    dim = len(input_shape)\n+    if isinstance(output_shape, int):\n+        output_shape = (output_shape,)\n+    if isinstance(kernel_size, int):\n+        kernel_size = (kernel_size,) * dim\n+    if isinstance(stride, int):\n+        stride = (stride,) * dim\n+    output_padding = tuple(\n+        _deconv_output_padding(\n+            input_shape=input_shape[d],\n+            output_shape=output_shape[d],\n+            kernel_size=kernel_size[d],\n+            stride=stride[d],\n             padding=padding,\n         )\n-    assert len(input_shape) == len(output_shape)\n-    dim = len(input_shape)\n-    if isinstance(kernel_size, int):\n-        kernel_size = [kernel_size] * dim\n-    if isinstance(stride, int):\n-        stride = [stride] * dim\n-    return tuple(\n-        [\n-            _deconv_output_padding(\n-                input_shape=input_shape[d],\n-                output_shape=output_shape[d],\n-                kernel_size=kernel_size[d],\n-                stride=stride[d],\n-                padding=padding,\n-            )\n-            for d in range(dim)\n-        ]\n+        for d in range(dim)\n     )\n+    if dim == 1:\n+        return output_padding[0]\n+    return output_padding\n",
        "source_code_with_indent": "    if isinstance(input_shape, int):\n        <IND>return _deconv_output_padding(\n            input_shape=input_shape,\n            output_shape=output_shape,\n            kernel_size=kernel_size,\n            stride=stride,\n            padding=padding,\n        )\n    <DED>assert len(input_shape) == len(output_shape)\n    dim = len(input_shape)\n    if isinstance(kernel_size, int):\n        <IND>kernel_size = [kernel_size] * dim\n    <DED>if isinstance(stride, int):\n        <IND>stride = [stride] * dim\n    <DED>return tuple(\n        [\n            _deconv_output_padding(\n                input_shape=input_shape[d],\n                output_shape=output_shape[d],\n                kernel_size=kernel_size[d],\n                stride=stride[d],\n                padding=padding,\n            )\n            for d in range(dim)\n        ]\n    )\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    if isinstance(input_shape, int):\n        <IND>input_shape = (input_shape,)\n    <DED>dim = len(input_shape)\n    if isinstance(output_shape, int):\n        <IND>output_shape = (output_shape,)\n    <DED>if isinstance(kernel_size, int):\n        <IND>kernel_size = (kernel_size,) * dim\n    <DED>if isinstance(stride, int):\n        <IND>stride = (stride,) * dim\n    <DED>output_padding = tuple(\n        _deconv_output_padding(\n            input_shape=input_shape[d],\n            output_shape=output_shape[d],\n            kernel_size=kernel_size[d],\n            stride=stride[d],\n            padding=padding,\n        )\n        for d in range(dim)\n    )\n    if dim == 1:\n        <IND>return output_padding[0]\n    <DED>return output_padding\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "DeepRegNet/DeepReg",
    "commit": "8ce52504574ad8e6f26ef354984f89bf70ab6863",
    "filename": "deepreg/model/layer_util.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DeepRegNet-DeepReg/deepreg/model/layer_util.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "deepreg/model/layer_util.py:492:4 Incompatible return type [7]: Expected `Union[Tuple[int], int]` but got `typing.Tuple[int, ...]`.",
    "message": " Expected `Union[Tuple[int], int]` but got `typing.Tuple[int, ...]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 492,
    "warning_line": "    return tuple(",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def deconv_output_padding(\n    input_shape: Union[Tuple[int], int],\n    output_shape: Union[Tuple[int], int],\n    kernel_size: Union[Tuple[int], int],\n    stride: Union[Tuple[int], int],\n    padding: str,\n) -> Union[Tuple[int], int]:\n    \"\"\"\n",
        "source_code_len": 242,
        "target_code": "def deconv_output_padding(\n    input_shape: Union[Tuple[int, ...], int],\n    output_shape: Union[Tuple[int, ...], int],\n    kernel_size: Union[Tuple[int, ...], int],\n    stride: Union[Tuple[int, ...], int],\n    padding: str,\n) -> Union[Tuple[int, ...], int]:\n    \"\"\"\n",
        "target_code_len": 267,
        "diff_format": "@@ -460,8 +460,8 @@\n def deconv_output_padding(\n-    input_shape: Union[Tuple[int], int],\n-    output_shape: Union[Tuple[int], int],\n-    kernel_size: Union[Tuple[int], int],\n-    stride: Union[Tuple[int], int],\n+    input_shape: Union[Tuple[int, ...], int],\n+    output_shape: Union[Tuple[int, ...], int],\n+    kernel_size: Union[Tuple[int, ...], int],\n+    stride: Union[Tuple[int, ...], int],\n     padding: str,\n-) -> Union[Tuple[int], int]:\n+) -> Union[Tuple[int, ...], int]:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "<DED>def deconv_output_padding(\n    input_shape: Union[Tuple[int], int],\n    output_shape: Union[Tuple[int], int],\n    kernel_size: Union[Tuple[int], int],\n    stride: Union[Tuple[int], int],\n    padding: str,\n) -> Union[Tuple[int], int]:\n    <IND>",
        "target_code_with_indent": "<DED>def deconv_output_padding(\n    input_shape: Union[Tuple[int, ...], int],\n    output_shape: Union[Tuple[int, ...], int],\n    kernel_size: Union[Tuple[int, ...], int],\n    stride: Union[Tuple[int, ...], int],\n    padding: str,\n) -> Union[Tuple[int, ...], int]:\n    <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    if isinstance(input_shape, int):\n        return _deconv_output_padding(\n            input_shape=input_shape,\n            output_shape=output_shape,\n            kernel_size=kernel_size,\n            stride=stride,\n            padding=padding,\n        )\n    assert len(input_shape) == len(output_shape)\n    dim = len(input_shape)\n    if isinstance(kernel_size, int):\n        kernel_size = [kernel_size] * dim\n    if isinstance(stride, int):\n        stride = [stride] * dim\n    return tuple(\n        [\n            _deconv_output_padding(\n                input_shape=input_shape[d],\n                output_shape=output_shape[d],\n                kernel_size=kernel_size[d],\n                stride=stride[d],\n                padding=padding,\n            )\n            for d in range(dim)\n        ]\n    )\n",
        "source_code_len": 801,
        "target_code": "    if isinstance(input_shape, int):\n        input_shape = (input_shape,)\n    dim = len(input_shape)\n    if isinstance(output_shape, int):\n        output_shape = (output_shape,)\n    if isinstance(kernel_size, int):\n        kernel_size = (kernel_size,) * dim\n    if isinstance(stride, int):\n        stride = (stride,) * dim\n    output_padding = tuple(\n        _deconv_output_padding(\n            input_shape=input_shape[d],\n            output_shape=output_shape[d],\n            kernel_size=kernel_size[d],\n            stride=stride[d],\n            padding=padding,\n        )\n        for d in range(dim)\n    )\n    if dim == 1:\n        return output_padding[0]\n    return output_padding\n",
        "target_code_len": 684,
        "diff_format": "@@ -478,26 +478,22 @@\n     if isinstance(input_shape, int):\n-        return _deconv_output_padding(\n-            input_shape=input_shape,\n-            output_shape=output_shape,\n-            kernel_size=kernel_size,\n-            stride=stride,\n+        input_shape = (input_shape,)\n+    dim = len(input_shape)\n+    if isinstance(output_shape, int):\n+        output_shape = (output_shape,)\n+    if isinstance(kernel_size, int):\n+        kernel_size = (kernel_size,) * dim\n+    if isinstance(stride, int):\n+        stride = (stride,) * dim\n+    output_padding = tuple(\n+        _deconv_output_padding(\n+            input_shape=input_shape[d],\n+            output_shape=output_shape[d],\n+            kernel_size=kernel_size[d],\n+            stride=stride[d],\n             padding=padding,\n         )\n-    assert len(input_shape) == len(output_shape)\n-    dim = len(input_shape)\n-    if isinstance(kernel_size, int):\n-        kernel_size = [kernel_size] * dim\n-    if isinstance(stride, int):\n-        stride = [stride] * dim\n-    return tuple(\n-        [\n-            _deconv_output_padding(\n-                input_shape=input_shape[d],\n-                output_shape=output_shape[d],\n-                kernel_size=kernel_size[d],\n-                stride=stride[d],\n-                padding=padding,\n-            )\n-            for d in range(dim)\n-        ]\n+        for d in range(dim)\n     )\n+    if dim == 1:\n+        return output_padding[0]\n+    return output_padding\n",
        "source_code_with_indent": "    if isinstance(input_shape, int):\n        <IND>return _deconv_output_padding(\n            input_shape=input_shape,\n            output_shape=output_shape,\n            kernel_size=kernel_size,\n            stride=stride,\n            padding=padding,\n        )\n    <DED>assert len(input_shape) == len(output_shape)\n    dim = len(input_shape)\n    if isinstance(kernel_size, int):\n        <IND>kernel_size = [kernel_size] * dim\n    <DED>if isinstance(stride, int):\n        <IND>stride = [stride] * dim\n    <DED>return tuple(\n        [\n            _deconv_output_padding(\n                input_shape=input_shape[d],\n                output_shape=output_shape[d],\n                kernel_size=kernel_size[d],\n                stride=stride[d],\n                padding=padding,\n            )\n            for d in range(dim)\n        ]\n    )\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    if isinstance(input_shape, int):\n        <IND>input_shape = (input_shape,)\n    <DED>dim = len(input_shape)\n    if isinstance(output_shape, int):\n        <IND>output_shape = (output_shape,)\n    <DED>if isinstance(kernel_size, int):\n        <IND>kernel_size = (kernel_size,) * dim\n    <DED>if isinstance(stride, int):\n        <IND>stride = (stride,) * dim\n    <DED>output_padding = tuple(\n        _deconv_output_padding(\n            input_shape=input_shape[d],\n            output_shape=output_shape[d],\n            kernel_size=kernel_size[d],\n            stride=stride[d],\n            padding=padding,\n        )\n        for d in range(dim)\n    )\n    if dim == 1:\n        <IND>return output_padding[0]\n    <DED>return output_padding\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "DeepRegNet/DeepReg",
    "commit": "8ce52504574ad8e6f26ef354984f89bf70ab6863",
    "filename": "test/unit/util.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DeepRegNet-DeepReg/test/unit/util.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "test/unit/util.py:8:8 Invalid type [31]: Expression `(numpy.ndarray, typing.List)` is not a valid type.",
    "message": " Expression `(numpy.ndarray, typing.List)` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 8,
    "warning_line": "    x: (np.ndarray, List), y: (np.ndarray, List), atol: float = 1.0e-7"
  },
  {
    "project": "DeepRegNet/DeepReg",
    "commit": "8ce52504574ad8e6f26ef354984f89bf70ab6863",
    "filename": "test/unit/util.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DeepRegNet-DeepReg/test/unit/util.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "test/unit/util.py:8:31 Invalid type [31]: Expression `(numpy.ndarray, typing.List)` is not a valid type.",
    "message": " Expression `(numpy.ndarray, typing.List)` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 8,
    "warning_line": "    x: (np.ndarray, List), y: (np.ndarray, List), atol: float = 1.0e-7"
  },
  {
    "project": "DeepRegNet/DeepReg",
    "commit": "8ce52504574ad8e6f26ef354984f89bf70ab6863",
    "filename": "test/unit/util.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DeepRegNet-DeepReg/test/unit/util.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "test/unit/util.py:24:8 Invalid type [31]: Expression `(tensorflow.Tensor, numpy.ndarray, typing.List)` is not a valid type.",
    "message": " Expression `(tensorflow.Tensor, numpy.ndarray, typing.List)` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 24,
    "warning_line": "    x: (tf.Tensor, np.ndarray, List),"
  },
  {
    "project": "DeepRegNet/DeepReg",
    "commit": "8ce52504574ad8e6f26ef354984f89bf70ab6863",
    "filename": "test/unit/util.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DeepRegNet-DeepReg/test/unit/util.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "test/unit/util.py:25:8 Invalid type [31]: Expression `(tensorflow.Tensor, numpy.ndarray, typing.List)` is not a valid type.",
    "message": " Expression `(tensorflow.Tensor, numpy.ndarray, typing.List)` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 25,
    "warning_line": "    y: (tf.Tensor, np.ndarray, List),"
  }
]