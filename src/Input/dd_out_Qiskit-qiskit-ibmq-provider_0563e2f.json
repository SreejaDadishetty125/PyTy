[
  {
    "project": "Qiskit/qiskit-ibmq-provider",
    "commit": "0563e2f8f932583b64cb1579b79e9f6bbde33fe8",
    "filename": "qiskit/providers/ibmq/api/clients/websocket.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Qiskit-qiskit-ibmq-provider/qiskit/providers/ibmq/api/clients/websocket.py",
    "file_hunks_size": 13,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "qiskit/providers/ibmq/api/clients/websocket.py:194:42 Incompatible parameter type [6]: Expected `None` for 1st positional only parameter to call `Generator.send` but got `str`.",
    "message": " Expected `None` for 1st positional only parameter to call `Generator.send` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 194,
    "warning_line": "                yield from websocket.send(auth_request.as_json())",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            with warnings.catch_warnings():\n                # Suppress websockets deprecation warnings until the fix is available\n                warnings.filterwarnings(\"ignore\", category=DeprecationWarning)\n                websocket = yield from connect(url)\n\n",
        "source_code_len": 262,
        "target_code": "            with warnings.catch_warnings():\n                websocket = await connect(url)\n\n",
        "target_code_len": 92,
        "diff_format": "@@ -171,5 +166,3 @@\n             with warnings.catch_warnings():\n-                # Suppress websockets deprecation warnings until the fix is available\n-                warnings.filterwarnings(\"ignore\", category=DeprecationWarning)\n-                websocket = yield from connect(url)\n+                websocket = await connect(url)\n \n",
        "source_code_with_indent": "            with warnings.catch_warnings():\n                # Suppress websockets deprecation warnings until the fix is available\n                <IND>warnings.filterwarnings(\"ignore\", category=DeprecationWarning)\n                websocket = yield from connect(url)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            with warnings.catch_warnings():\n                <IND>websocket = await connect(url)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Qiskit/qiskit-ibmq-provider",
    "commit": "0563e2f8f932583b64cb1579b79e9f6bbde33fe8",
    "filename": "qiskit/providers/ibmq/api/clients/websocket.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Qiskit-qiskit-ibmq-provider/qiskit/providers/ibmq/api/clients/websocket.py",
    "file_hunks_size": 13,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "qiskit/providers/ibmq/api/clients/websocket.py:199:63 Incompatible parameter type [6]: Expected `bytes` for 1st positional only parameter to call `WebsocketResponseMethod.from_bytes` but got `Generator[typing.Any, None, None]`.",
    "message": " Expected `bytes` for 1st positional only parameter to call `WebsocketResponseMethod.from_bytes` but got `Generator[typing.Any, None, None]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 199,
    "warning_line": "            auth_response = WebsocketResponseMethod.from_bytes(auth_response_raw)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            with warnings.catch_warnings():\n                # Suppress websockets deprecation warnings until the fix is available\n                warnings.filterwarnings(\"ignore\", category=DeprecationWarning)\n                websocket = yield from connect(url)\n\n",
        "source_code_len": 262,
        "target_code": "            with warnings.catch_warnings():\n                websocket = await connect(url)\n\n",
        "target_code_len": 92,
        "diff_format": "@@ -171,5 +166,3 @@\n             with warnings.catch_warnings():\n-                # Suppress websockets deprecation warnings until the fix is available\n-                warnings.filterwarnings(\"ignore\", category=DeprecationWarning)\n-                websocket = yield from connect(url)\n+                websocket = await connect(url)\n \n",
        "source_code_with_indent": "            with warnings.catch_warnings():\n                # Suppress websockets deprecation warnings until the fix is available\n                <IND>warnings.filterwarnings(\"ignore\", category=DeprecationWarning)\n                websocket = yield from connect(url)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            with warnings.catch_warnings():\n                <IND>websocket = await connect(url)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "            with warnings.catch_warnings():\n                # Suppress websockets deprecation warnings until the fix is available\n                warnings.filterwarnings(\"ignore\", category=DeprecationWarning)\n                yield from websocket.send(auth_request.as_json())\n\n                # Verify that the server acknowledged our authentication.\n                auth_response_raw = yield from websocket.recv()\n\n            auth_response = WebsocketResponseMethod.from_bytes(auth_response_raw)\n\n",
        "source_code_len": 498,
        "target_code": "            with warnings.catch_warnings():\n                await websocket.send(auth_request.as_json())\n\n                # Verify that the server acknowledged our authentication.\n                auth_response_raw = await websocket.recv()\n\n            auth_response = WebsocketResponseMethod.from_bytes(\n                auth_response_raw)  # type: ignore[arg-type]\n\n",
        "target_code_len": 366,
        "diff_format": "@@ -191,10 +184,9 @@\n             with warnings.catch_warnings():\n-                # Suppress websockets deprecation warnings until the fix is available\n-                warnings.filterwarnings(\"ignore\", category=DeprecationWarning)\n-                yield from websocket.send(auth_request.as_json())\n+                await websocket.send(auth_request.as_json())\n \n                 # Verify that the server acknowledged our authentication.\n-                auth_response_raw = yield from websocket.recv()\n-\n-            auth_response = WebsocketResponseMethod.from_bytes(auth_response_raw)\n+                auth_response_raw = await websocket.recv()\n+\n+            auth_response = WebsocketResponseMethod.from_bytes(\n+                auth_response_raw)  # type: ignore[arg-type]\n \n",
        "source_code_with_indent": "            with warnings.catch_warnings():\n                # Suppress websockets deprecation warnings until the fix is available\n                <IND>warnings.filterwarnings(\"ignore\", category=DeprecationWarning)\n                yield from websocket.send(auth_request.as_json())\n\n                # Verify that the server acknowledged our authentication.\n                auth_response_raw = yield from websocket.recv()\n\n            <DED>auth_response = WebsocketResponseMethod.from_bytes(auth_response_raw)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            with warnings.catch_warnings():\n                <IND>await websocket.send(auth_request.as_json())\n\n                # Verify that the server acknowledged our authentication.\n                auth_response_raw = await websocket.recv()\n\n            <DED>auth_response = WebsocketResponseMethod.from_bytes(\n                auth_response_raw)  # type: ignore[arg-type]\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Qiskit/qiskit-ibmq-provider",
    "commit": "0563e2f8f932583b64cb1579b79e9f6bbde33fe8",
    "filename": "qiskit/providers/ibmq/api/clients/websocket.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Qiskit-qiskit-ibmq-provider/qiskit/providers/ibmq/api/clients/websocket.py",
    "file_hunks_size": 13,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "qiskit/providers/ibmq/api/clients/websocket.py:289:70 Incompatible parameter type [6]: Expected `bytes` for 1st positional only parameter to call `WebsocketResponseMethod.from_bytes` but got `Generator[typing.Any, None, None]`.",
    "message": " Expected `bytes` for 1st positional only parameter to call `WebsocketResponseMethod.from_bytes` but got `Generator[typing.Any, None, None]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 289,
    "warning_line": "                        response = WebsocketResponseMethod.from_bytes(response_raw)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                        with warnings.catch_warnings():\n                            # Suppress websockets deprecation warnings until the fix is available\n                            warnings.filterwarnings(\"ignore\", category=DeprecationWarning)\n                            if timeout:\n                                response_raw = yield from asyncio.wait_for(\n                                    websocket.recv(), timeout=timeout)\n",
        "source_code_len": 432,
        "target_code": "                        with warnings.catch_warnings():\n                            if timeout:\n                                response_raw = await asyncio.wait_for(\n                                    websocket.recv(), timeout=timeout)\n",
        "target_code_len": 238,
        "diff_format": "@@ -277,6 +268,4 @@\n                         with warnings.catch_warnings():\n-                            # Suppress websockets deprecation warnings until the fix is available\n-                            warnings.filterwarnings(\"ignore\", category=DeprecationWarning)\n                             if timeout:\n-                                response_raw = yield from asyncio.wait_for(\n+                                response_raw = await asyncio.wait_for(\n                                     websocket.recv(), timeout=timeout)\n",
        "source_code_with_indent": "                        <IND>with warnings.catch_warnings():\n                            # Suppress websockets deprecation warnings until the fix is available\n                            <IND>warnings.filterwarnings(\"ignore\", category=DeprecationWarning)\n                            if timeout:\n                                <IND>response_raw = yield from asyncio.wait_for(\n                                    websocket.recv(), timeout=timeout)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                        <IND>with warnings.catch_warnings():\n                            <IND>if timeout:\n                                <IND>response_raw = await asyncio.wait_for(\n                                    websocket.recv(), timeout=timeout)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Qiskit/qiskit-ibmq-provider",
    "commit": "0563e2f8f932583b64cb1579b79e9f6bbde33fe8",
    "filename": "qiskit/providers/ibmq/api/clients/websocket.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Qiskit-qiskit-ibmq-provider/qiskit/providers/ibmq/api/clients/websocket.py",
    "file_hunks_size": 13,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "qiskit/providers/ibmq/api/clients/websocket.py:305:28 Incompatible return type [7]: Expected `Generator[typing.Any, None, Dict[str, str]]` but got `Dict[str, typing.Any]`.",
    "message": " Expected `Generator[typing.Any, None, Dict[str, str]]` but got `Dict[str, typing.Any]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 305,
    "warning_line": "                            return last_status",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            status_queue: Optional[RefreshQueue] = None\n    ) -> Generator[Any, None, Dict[str, str]]:\n        \"\"\"Return the status of a job.\n",
        "source_code_len": 142,
        "target_code": "            status_queue: Optional[RefreshQueue] = None\n    ) -> Dict[str, str]:\n        \"\"\"Return the status of a job.\n",
        "target_code_len": 120,
        "diff_format": "@@ -222,3 +213,3 @@\n             status_queue: Optional[RefreshQueue] = None\n-    ) -> Generator[Any, None, Dict[str, str]]:\n+    ) -> Dict[str, str]:\n         \"\"\"Return the status of a job.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "            status_queue: Optional[RefreshQueue] = None\n    ) -> Generator[Any, None, Dict[str, str]]:\n        <IND>",
        "target_code_with_indent": "            status_queue: Optional[RefreshQueue] = None\n    ) -> Dict[str, str]:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            try:\n                websocket = yield from self._connect(url)\n                # Read messages from the server until the connection is closed or\n",
        "source_code_len": 157,
        "target_code": "            try:\n                websocket = await self._connect(url)\n                # Read messages from the server until the connection is closed or\n",
        "target_code_len": 152,
        "diff_format": "@@ -271,3 +262,3 @@\n             try:\n-                websocket = yield from self._connect(url)\n+                websocket = await self._connect(url)\n                 # Read messages from the server until the connection is closed or\n",
        "source_code_with_indent": "            <IND>try:\n                <IND>websocket = yield from self._connect(url)\n                # Read messages from the server until the connection is closed or\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <IND>try:\n                <IND>websocket = await self._connect(url)\n                # Read messages from the server until the connection is closed or\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                            'Attempt #%s', backoff_time, current_retry_attempt)\n                yield from asyncio.sleep(backoff_time)  # Block asyncio loop for given backoff time.\n\n",
        "source_code_len": 182,
        "target_code": "                            'Attempt #%s', backoff_time, current_retry_attempt)\n                await asyncio.sleep(backoff_time)  # Block asyncio loop for given backoff time.\n\n",
        "target_code_len": 177,
        "diff_format": "@@ -358,3 +348,3 @@\n                             'Attempt #%s', backoff_time, current_retry_attempt)\n-                yield from asyncio.sleep(backoff_time)  # Block asyncio loop for given backoff time.\n+                await asyncio.sleep(backoff_time)  # Block asyncio loop for given backoff time.\n \n",
        "source_code_with_indent": "                            'Attempt #%s', backoff_time, current_retry_attempt)\n                yield from asyncio.sleep(backoff_time)  # Block asyncio loop for given backoff time.\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                            'Attempt #%s', backoff_time, current_retry_attempt)\n                await asyncio.sleep(backoff_time)  # Block asyncio loop for given backoff time.\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                with warnings.catch_warnings():\n                    # Suppress websockets deprecation warnings until the fix is available\n                    warnings.filterwarnings(\"ignore\", category=DeprecationWarning)\n                    if websocket is not None:\n                        yield from websocket.close()\n\n",
        "source_code_len": 321,
        "target_code": "                with warnings.catch_warnings():\n                    if websocket is not None:\n                        await websocket.close()\n\n",
        "target_code_len": 143,
        "diff_format": "@@ -364,6 +354,4 @@\n                 with warnings.catch_warnings():\n-                    # Suppress websockets deprecation warnings until the fix is available\n-                    warnings.filterwarnings(\"ignore\", category=DeprecationWarning)\n                     if websocket is not None:\n-                        yield from websocket.close()\n+                        await websocket.close()\n \n",
        "source_code_with_indent": "                <IND>with warnings.catch_warnings():\n                    # Suppress websockets deprecation warnings until the fix is available\n                    <IND>warnings.filterwarnings(\"ignore\", category=DeprecationWarning)\n                    if websocket is not None:\n                        <IND>yield from websocket.close()\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                <IND>with warnings.catch_warnings():\n                    <IND>if websocket is not None:\n                        <IND>await websocket.close()\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Qiskit/qiskit-ibmq-provider",
    "commit": "0563e2f8f932583b64cb1579b79e9f6bbde33fe8",
    "filename": "qiskit/providers/ibmq/api/clients/websocket.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Qiskit-qiskit-ibmq-provider/qiskit/providers/ibmq/api/clients/websocket.py",
    "file_hunks_size": 13,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "qiskit/providers/ibmq/api/clients/websocket.py:359:16 Incompatible return type [7]: Expected `Generator[typing.Any, None, Dict[str, str]]` but got `Generator[typing.Any, None, None]`.",
    "message": " Expected `Generator[typing.Any, None, Dict[str, str]]` but got `Generator[typing.Any, None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 359,
    "warning_line": "                yield from asyncio.sleep(backoff_time)  # Block asyncio loop for given backoff time.",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                            'Attempt #%s', backoff_time, current_retry_attempt)\n                yield from asyncio.sleep(backoff_time)  # Block asyncio loop for given backoff time.\n\n",
        "source_code_len": 182,
        "target_code": "                            'Attempt #%s', backoff_time, current_retry_attempt)\n                await asyncio.sleep(backoff_time)  # Block asyncio loop for given backoff time.\n\n",
        "target_code_len": 177,
        "diff_format": "@@ -358,3 +348,3 @@\n                             'Attempt #%s', backoff_time, current_retry_attempt)\n-                yield from asyncio.sleep(backoff_time)  # Block asyncio loop for given backoff time.\n+                await asyncio.sleep(backoff_time)  # Block asyncio loop for given backoff time.\n \n",
        "source_code_with_indent": "                            'Attempt #%s', backoff_time, current_retry_attempt)\n                yield from asyncio.sleep(backoff_time)  # Block asyncio loop for given backoff time.\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                            'Attempt #%s', backoff_time, current_retry_attempt)\n                await asyncio.sleep(backoff_time)  # Block asyncio loop for given backoff time.\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Qiskit/qiskit-ibmq-provider",
    "commit": "0563e2f8f932583b64cb1579b79e9f6bbde33fe8",
    "filename": "qiskit/providers/ibmq/api/clients/websocket.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Qiskit-qiskit-ibmq-provider/qiskit/providers/ibmq/api/clients/websocket.py",
    "file_hunks_size": 13,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "qiskit/providers/ibmq/api/clients/websocket.py:368:24 Incompatible return type [7]: Expected `Generator[typing.Any, None, Dict[str, str]]` but got `Generator[typing.Any, None, None]`.",
    "message": " Expected `Generator[typing.Any, None, Dict[str, str]]` but got `Generator[typing.Any, None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 368,
    "warning_line": "                        yield from websocket.close()",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            try:\n                websocket = yield from self._connect(url)\n                # Read messages from the server until the connection is closed or\n",
        "source_code_len": 157,
        "target_code": "            try:\n                websocket = await self._connect(url)\n                # Read messages from the server until the connection is closed or\n",
        "target_code_len": 152,
        "diff_format": "@@ -271,3 +262,3 @@\n             try:\n-                websocket = yield from self._connect(url)\n+                websocket = await self._connect(url)\n                 # Read messages from the server until the connection is closed or\n",
        "source_code_with_indent": "            <IND>try:\n                <IND>websocket = yield from self._connect(url)\n                # Read messages from the server until the connection is closed or\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <IND>try:\n                <IND>websocket = await self._connect(url)\n                # Read messages from the server until the connection is closed or\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                with warnings.catch_warnings():\n                    # Suppress websockets deprecation warnings until the fix is available\n                    warnings.filterwarnings(\"ignore\", category=DeprecationWarning)\n                    if websocket is not None:\n                        yield from websocket.close()\n\n",
        "source_code_len": 321,
        "target_code": "                with warnings.catch_warnings():\n                    if websocket is not None:\n                        await websocket.close()\n\n",
        "target_code_len": 143,
        "diff_format": "@@ -364,6 +354,4 @@\n                 with warnings.catch_warnings():\n-                    # Suppress websockets deprecation warnings until the fix is available\n-                    warnings.filterwarnings(\"ignore\", category=DeprecationWarning)\n                     if websocket is not None:\n-                        yield from websocket.close()\n+                        await websocket.close()\n \n",
        "source_code_with_indent": "                <IND>with warnings.catch_warnings():\n                    # Suppress websockets deprecation warnings until the fix is available\n                    <IND>warnings.filterwarnings(\"ignore\", category=DeprecationWarning)\n                    if websocket is not None:\n                        <IND>yield from websocket.close()\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                <IND>with warnings.catch_warnings():\n                    <IND>if websocket is not None:\n                        <IND>await websocket.close()\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Qiskit/qiskit-ibmq-provider",
    "commit": "0563e2f8f932583b64cb1579b79e9f6bbde33fe8",
    "filename": "qiskit/providers/ibmq/random/cqcextractor.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Qiskit-qiskit-ibmq-provider/qiskit/providers/ibmq/random/cqcextractor.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "qiskit/providers/ibmq/random/cqcextractor.py:31:4 Inconsistent override [14]: `qiskit.providers.ibmq.random.cqcextractor.CQCExtractor.run` overrides method defined in `BaseRandomService` inconsistently. Could not find parameter `Variable(unknown)` in overriding signature.",
    "message": " `qiskit.providers.ibmq.random.cqcextractor.CQCExtractor.run` overrides method defined in `BaseRandomService` inconsistently. Could not find parameter `Variable(unknown)` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 31,
    "warning_line": "    def run(",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n    def run(\n            self,\n",
        "source_code_len": 32,
        "target_code": "\n    def run(  # type: ignore[override]\n            self,\n",
        "target_code_len": 58,
        "diff_format": "@@ -30,3 +30,3 @@\n \n-    def run(\n+    def run(  # type: ignore[override]\n             self,\n",
        "source_code_with_indent": "\n    def run(\n            self,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    def run(  # type: ignore[override]\n            self,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Qiskit/qiskit-ibmq-provider",
    "commit": "0563e2f8f932583b64cb1579b79e9f6bbde33fe8",
    "filename": "qiskit/providers/ibmq/random/cqcextractor.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Qiskit-qiskit-ibmq-provider/qiskit/providers/ibmq/random/cqcextractor.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "qiskit/providers/ibmq/random/cqcextractor.py:31:4 Inconsistent override [14]: `qiskit.providers.ibmq.random.cqcextractor.CQCExtractor.run` overrides method defined in `BaseRandomService` inconsistently. Could not find parameter `Keywords(unknown)` in overriding signature.",
    "message": " `qiskit.providers.ibmq.random.cqcextractor.CQCExtractor.run` overrides method defined in `BaseRandomService` inconsistently. Could not find parameter `Keywords(unknown)` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 31,
    "warning_line": "    def run(",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n    def run(\n            self,\n",
        "source_code_len": 32,
        "target_code": "\n    def run(  # type: ignore[override]\n            self,\n",
        "target_code_len": 58,
        "diff_format": "@@ -30,3 +30,3 @@\n \n-    def run(\n+    def run(  # type: ignore[override]\n             self,\n",
        "source_code_with_indent": "\n    def run(\n            self,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    def run(  # type: ignore[override]\n            self,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Qiskit/qiskit-ibmq-provider",
    "commit": "0563e2f8f932583b64cb1579b79e9f6bbde33fe8",
    "filename": "qiskit/providers/ibmq/random/cqcextractor.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Qiskit-qiskit-ibmq-provider/qiskit/providers/ibmq/random/cqcextractor.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "qiskit/providers/ibmq/random/cqcextractor.py:120:8 Incompatible variable type [9]: ext2_seed is declared to have type `List[int]` but is used as type `bytes`.",
    "message": " ext2_seed is declared to have type `List[int]` but is used as type `bytes`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 120,
    "warning_line": "        ext2_seed = bitarray_to_bytes(ext2_seed[:ext2_seed_num_bits])",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        logger.info(\"Starting second extraction.\")\n        ext2_seed = bitarray_to_bytes(ext2_seed[:ext2_seed_num_bits])\n        if ext2_wsr_generator is None:\n",
        "source_code_len": 160,
        "target_code": "        logger.info(\"Starting second extraction.\")\n        ext2_seed = bitarray_to_bytes(ext2_seed[:ext2_seed_num_bits])  # type: ignore[assignment]\n        if ext2_wsr_generator is None:\n",
        "target_code_len": 188,
        "diff_format": "@@ -119,3 +120,3 @@\n         logger.info(\"Starting second extraction.\")\n-        ext2_seed = bitarray_to_bytes(ext2_seed[:ext2_seed_num_bits])\n+        ext2_seed = bitarray_to_bytes(ext2_seed[:ext2_seed_num_bits])  # type: ignore[assignment]\n         if ext2_wsr_generator is None:\n",
        "source_code_with_indent": "        logger.info(\"Starting second extraction.\")\n        ext2_seed = bitarray_to_bytes(ext2_seed[:ext2_seed_num_bits])\n        if ext2_wsr_generator is None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        logger.info(\"Starting second extraction.\")\n        ext2_seed = bitarray_to_bytes(ext2_seed[:ext2_seed_num_bits])  # type: ignore[assignment]\n        if ext2_wsr_generator is None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]