[
  {
    "project": "nathom/streamrip",
    "commit": "fc8f4cee83a04b396e2f172f23d39e345caf36f0",
    "filename": "streamrip/bases.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/nathom-streamrip/streamrip/bases.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "streamrip/bases.py:205:49 Incompatible parameter type [6]: Expected `typing.Dict[typing.Any, typing.Any]` for 1st positional only parameter to call `Track._Track__validate_qobuz_dl_info` but got `Union[typing.Dict[typing.Any, typing.Any], str]`.",
    "message": " Expected `typing.Dict[typing.Any, typing.Any]` for 1st positional only parameter to call `Track._Track__validate_qobuz_dl_info` but got `Union[typing.Dict[typing.Any, typing.Any], str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 205,
    "warning_line": "            if not self.__validate_qobuz_dl_info(dl_info):",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        if self.client.source == \"qobuz\":\n            if not self.__validate_qobuz_dl_info(dl_info):\n",
        "source_code_len": 101,
        "target_code": "        if self.client.source == \"qobuz\":\n            assert isinstance(dl_info, dict)  # for typing\n            if not self.__validate_qobuz_dl_info(dl_info):\n",
        "target_code_len": 160,
        "diff_format": "@@ -204,2 +204,3 @@\n         if self.client.source == \"qobuz\":\n+            assert isinstance(dl_info, dict)  # for typing\n             if not self.__validate_qobuz_dl_info(dl_info):\n",
        "source_code_with_indent": "        <DED>if self.client.source == \"qobuz\":\n            <IND>if not self.__validate_qobuz_dl_info(dl_info):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>if self.client.source == \"qobuz\":\n            <IND>assert isinstance(dl_info, dict)  # for typing\n            if not self.__validate_qobuz_dl_info(dl_info):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "nathom/streamrip",
    "commit": "fc8f4cee83a04b396e2f172f23d39e345caf36f0",
    "filename": "streamrip/bases.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/nathom-streamrip/streamrip/bases.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "streamrip/bases.py:217:28 Incompatible parameter type [6]: Expected `Union[int, slice]` for 1st positional only parameter to call `str.__getitem__` but got `str`.",
    "message": " Expected `Union[int, slice]` for 1st positional only parameter to call `str.__getitem__` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 217,
    "warning_line": "                    dl_info[\"url\"], self.path, desc=self._progress_desc",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        if self.client.source in (\"qobuz\", \"tidal\", \"deezer\"):\n            logger.debug(\"Downloadable URL found: %s\", dl_info.get(\"url\"))\n",
        "source_code_len": 138,
        "target_code": "        if self.client.source in (\"qobuz\", \"tidal\", \"deezer\"):\n            assert isinstance(dl_info, dict)\n            logger.debug(\"Downloadable URL found: %s\", dl_info.get(\"url\"))\n",
        "target_code_len": 183,
        "diff_format": "@@ -213,2 +214,3 @@\n         if self.client.source in (\"qobuz\", \"tidal\", \"deezer\"):\n+            assert isinstance(dl_info, dict)\n             logger.debug(\"Downloadable URL found: %s\", dl_info.get(\"url\"))\n",
        "source_code_with_indent": "        <DED>if self.client.source in (\"qobuz\", \"tidal\", \"deezer\"):\n            <IND>logger.debug(\"Downloadable URL found: %s\", dl_info.get(\"url\"))\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>if self.client.source in (\"qobuz\", \"tidal\", \"deezer\"):\n            <IND>assert isinstance(dl_info, dict)\n            logger.debug(\"Downloadable URL found: %s\", dl_info.get(\"url\"))\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "nathom/streamrip",
    "commit": "fc8f4cee83a04b396e2f172f23d39e345caf36f0",
    "filename": "streamrip/bases.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/nathom-streamrip/streamrip/bases.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "streamrip/bases.py:226:38 Incompatible parameter type [6]: Expected `typing.Dict[typing.Any, typing.Any]` for 1st positional only parameter to call `Track._soundcloud_download` but got `Union[typing.Dict[typing.Any, typing.Any], str]`.",
    "message": " Expected `typing.Dict[typing.Any, typing.Any]` for 1st positional only parameter to call `Track._soundcloud_download` but got `Union[typing.Dict[typing.Any, typing.Any], str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 226,
    "warning_line": "            self._soundcloud_download(dl_info)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        elif self.client.source == \"soundcloud\":\n            self._soundcloud_download(dl_info)\n",
        "source_code_len": 96,
        "target_code": "        elif self.client.source == \"soundcloud\":\n            assert isinstance(dl_info, dict)\n            self._soundcloud_download(dl_info)\n",
        "target_code_len": 141,
        "diff_format": "@@ -225,2 +227,3 @@\n         elif self.client.source == \"soundcloud\":\n+            assert isinstance(dl_info, dict)\n             self._soundcloud_download(dl_info)\n",
        "source_code_with_indent": "        <DED><DED>elif self.client.source == \"soundcloud\":\n            <IND>self._soundcloud_download(dl_info)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED><DED>elif self.client.source == \"soundcloud\":\n            <IND>assert isinstance(dl_info, dict)\n            self._soundcloud_download(dl_info)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "nathom/streamrip",
    "commit": "fc8f4cee83a04b396e2f172f23d39e345caf36f0",
    "filename": "streamrip/bases.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/nathom-streamrip/streamrip/bases.py",
    "file_hunks_size": 5,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "streamrip/bases.py:372:29 Incompatible parameter type [6]: Expected `typing.Optional[typing.Dict[typing.Any, typing.Any]]` for 1st parameter `album` to call `TrackMetadata.__init__` but got `TrackMetadata`.",
    "message": " Expected `typing.Optional[typing.Dict[typing.Any, typing.Any]]` for 1st parameter `album` to call `TrackMetadata.__init__` but got `TrackMetadata`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 372,
    "warning_line": "        meta = TrackMetadata(album=album, track=track, source=client.source)"
  },
  {
    "project": "nathom/streamrip",
    "commit": "fc8f4cee83a04b396e2f172f23d39e345caf36f0",
    "filename": "streamrip/utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/nathom-streamrip/streamrip/utils.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "streamrip/utils.py:99:11 Unsupported operand [58]: `<=` is not supported for operand types `Optional[int]` and `int`.",
    "message": " `<=` is not supported for operand types `Optional[int]` and `int`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 99,
    "warning_line": "        if sampling_rate <= 96:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    \"\"\"\n    if not (bit_depth or sampling_rate):  # is lossy\n        return 1\n",
        "source_code_len": 78,
        "target_code": "    \"\"\"\n    # XXX: Should `0` quality be supported?\n    if bit_depth is None or sampling_rate is None:  # is lossy\n        return 1\n",
        "target_code_len": 132,
        "diff_format": "@@ -91,3 +92,4 @@\n     \"\"\"\n-    if not (bit_depth or sampling_rate):  # is lossy\n+    # XXX: Should `0` quality be supported?\n+    if bit_depth is None or sampling_rate is None:  # is lossy\n         return 1\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    if not (bit_depth or sampling_rate):  # is lossy\n        <IND>return 1\n",
        "target_code_with_indent": "\n    # XXX: Should `0` quality be supported?\n    if bit_depth is None or sampling_rate is None:  # is lossy\n        <IND>return 1\n"
      }
    ]
  },
  {
    "project": "nathom/streamrip",
    "commit": "fc8f4cee83a04b396e2f172f23d39e345caf36f0",
    "filename": "streamrip/utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/nathom-streamrip/streamrip/utils.py",
    "file_hunks_size": 5,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "streamrip/utils.py:119:43 Incompatible variable type [9]: params is declared to have type `typing.Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "message": " params is declared to have type `typing.Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 119,
    "warning_line": "def tqdm_download(url: str, filepath: str, params: dict = None, desc: str = None):"
  },
  {
    "project": "nathom/streamrip",
    "commit": "fc8f4cee83a04b396e2f172f23d39e345caf36f0",
    "filename": "streamrip/utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/nathom-streamrip/streamrip/utils.py",
    "file_hunks_size": 5,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "streamrip/utils.py:246:4 Incompatible variable type [9]: headers is declared to have type `typing.Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "message": " headers is declared to have type `typing.Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 246,
    "warning_line": "    headers: dict = None, pool_connections: int = 100, pool_maxsize: int = 100"
  }
]