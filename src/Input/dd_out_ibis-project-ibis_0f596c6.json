[
  {
    "project": "ibis-project/ibis",
    "commit": "0f596c6ad6bc81e32bd5bebf59aa73000159fa0d",
    "filename": "ibis/backends/base/sql/alchemy/client.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ibis-project-ibis/ibis/backends/base/sql/alchemy/client.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ibis/backends/base/sql/alchemy/client.py:299:4 Inconsistent override [14]: `ibis.backends.base.sql.alchemy.client.AlchemyClient.raw_sql` overrides method defined in `ibis.backends.base.sql.client.SQLClient` inconsistently. Could not find parameter `results` in overriding signature.",
    "message": " `ibis.backends.base.sql.alchemy.client.AlchemyClient.raw_sql` overrides method defined in `ibis.backends.base.sql.client.SQLClient` inconsistently. Could not find parameter `results` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 299,
    "warning_line": "    def raw_sql(self, query: str):",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def raw_sql(self, query: str):\n        return _AutoCloseCursor(super().raw_sql(query))\n",
        "source_code_len": 92,
        "target_code": "\n    def raw_sql(self, query: str, results=False):\n        return _AutoCloseCursor(super().raw_sql(query))\n",
        "target_code_len": 107,
        "diff_format": "@@ -298,3 +298,3 @@\n \n-    def raw_sql(self, query: str):\n+    def raw_sql(self, query: str, results=False):\n         return _AutoCloseCursor(super().raw_sql(query))\n",
        "source_code_with_indent": "\n    <DED>def raw_sql(self, query: str):\n        <IND>return _AutoCloseCursor(super().raw_sql(query))\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def raw_sql(self, query: str, results=False):\n        <IND>return _AutoCloseCursor(super().raw_sql(query))\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ibis-project/ibis",
    "commit": "0f596c6ad6bc81e32bd5bebf59aa73000159fa0d",
    "filename": "ibis/backends/base/sql/alchemy/registry.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ibis-project-ibis/ibis/backends/base/sql/alchemy/registry.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ibis/backends/base/sql/alchemy/registry.py:578:41 Incompatible parameter type [6]: Expected `typing.Mapping[typing.Type[typing.Union[ops.Abs, ops.And, ops.Between, ops.Cast, ops.Ceil, ops.Coalesce, ops.Contains, ops.Count, ops.CountDistinct, ops.EndsWith, ops.ExistsSubquery, ops.Exp, ops.Floor, ops.FloorDivide, ops.Greatest, ops.GroupConcat, ops.IsNull, ops.LPad, ops.LStrip, ops.Least, ops.Literal, ops.Ln, ops.Lowercase, ops.Max, ops.Mean, ops.Min, ops.Negate, ops.Not, ops.NotExistsSubquery, ops.NotNull, ops.NullIf, ops.Or, ops.Power, ops.RPad, ops.RStrip, ops.Repeat, ops.Reverse, ops.Round, ops.SearchedCase, ops.Sign, ops.SimpleCase, ops.SortKey, ops.Sqrt, ops.StartsWith, ops.StrRight, ops.StringAscii, ops.StringLength, ops.StringReplace, ops.StringSQLLike, ops.Strip, ops.Sum, ops.TableArrayView, ops.TableColumn, ops.TypeOf, ops.Uppercase, ops.ValueList]], typing.Any]` for 1st positional only parameter to call `dict.update` but got `typing.Dict[typing.Type[typing.Union[ops.GeoArea, ops.GeoAsBinary, ops.GeoAsEWKB, ops.GeoAsEWKT, ops.GeoAsText, ops.GeoAzimuth, ops.GeoBuffer, ops.GeoCentroid, ops.GeoContains, ops.GeoContainsProperly, ops.GeoCoveredBy, ops.GeoCovers, ops.GeoCrosses, ops.GeoDFullyWithin, ops.GeoDWithin, ops.GeoDifference, ops.GeoDisjoint, ops.GeoDistance, ops.GeoEndPoint, ops.GeoEnvelope, ops.GeoEquals, ops.GeoGeometryN, ops.GeoGeometryType, ops.GeoIntersection, ops.GeoIntersects, ops.GeoIsValid, ops.GeoLength, ops.GeoLineLocatePoint, ops.GeoLineMerge, ops.GeoLineSubstring, ops.GeoNPoints, ops.GeoOrderingEquals, ops.GeoOverlaps, ops.GeoPerimeter, ops.GeoSRID, ops.GeoSetSRID, ops.GeoSimplify, ops.GeoStartPoint, ops.GeoTouches, ops.GeoTransform, ops.GeoUnaryUnion, ops.GeoUnion, ops.GeoWithin, ops.GeoX, ops.GeoY]], typing.Any]`.",
    "message": " Expected `typing.Mapping[typing.Type[typing.Union[ops.Abs, ops.And, ops.Between, ops.Cast, ops.Ceil, ops.Coalesce, ops.Contains, ops.Count, ops.CountDistinct, ops.EndsWith, ops.ExistsSubquery, ops.Exp, ops.Floor, ops.FloorDivide, ops.Greatest, ops.GroupConcat, ops.IsNull, ops.LPad, ops.LStrip, ops.Least, ops.Literal, ops.Ln, ops.Lowercase, ops.Max, ops.Mean, ops.Min, ops.Negate, ops.Not, ops.NotExistsSubquery, ops.NotNull, ops.NullIf, ops.Or, ops.Power, ops.RPad, ops.RStrip, ops.Repeat, ops.Reverse, ops.Round, ops.SearchedCase, ops.Sign, ops.SimpleCase, ops.SortKey, ops.Sqrt, ops.StartsWith, ops.StrRight, ops.StringAscii, ops.StringLength, ops.StringReplace, ops.StringSQLLike, ops.Strip, ops.Sum, ops.TableArrayView, ops.TableColumn, ops.TypeOf, ops.Uppercase, ops.ValueList]], typing.Any]` for 1st positional only parameter to call `dict.update` but got `typing.Dict[typing.Type[typing.Union[ops.GeoArea, ops.GeoAsBinary, ops.GeoAsEWKB, ops.GeoAsEWKT, ops.GeoAsText, ops.GeoAzimuth, ops.GeoBuffer, ops.GeoCentroid, ops.GeoContains, ops.GeoContainsProperly, ops.GeoCoveredBy, ops.GeoCovers, ops.GeoCrosses, ops.GeoDFullyWithin, ops.GeoDWithin, ops.GeoDifference, ops.GeoDisjoint, ops.GeoDistance, ops.GeoEndPoint, ops.GeoEnvelope, ops.GeoEquals, ops.GeoGeometryN, ops.GeoGeometryType, ops.GeoIntersection, ops.GeoIntersects, ops.GeoIsValid, ops.GeoLength, ops.GeoLineLocatePoint, ops.GeoLineMerge, ops.GeoLineSubstring, ops.GeoNPoints, ops.GeoOrderingEquals, ops.GeoOverlaps, ops.GeoPerimeter, ops.GeoSRID, ops.GeoSetSRID, ops.GeoSimplify, ops.GeoStartPoint, ops.GeoTouches, ops.GeoTransform, ops.GeoUnaryUnion, ops.GeoUnion, ops.GeoWithin, ops.GeoX, ops.GeoY]], typing.Any]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 578,
    "warning_line": "    sqlalchemy_operation_registry.update(_geospatial_functions)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import operator\n\n",
        "source_code_len": 17,
        "target_code": "import operator\nfrom typing import Any, Dict\n\n",
        "target_code_len": 46,
        "diff_format": "@@ -1,2 +1,3 @@\n import operator\n+from typing import Any, Dict\n \n",
        "source_code_with_indent": "import operator\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import operator\nfrom typing import Any, Dict\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nsqlalchemy_operation_registry = {\n    ops.And: fixed_arity(sql.and_, 2),\n",
        "source_code_len": 74,
        "target_code": "\nsqlalchemy_operation_registry: Dict[Any, Any] = {\n    ops.And: fixed_arity(sql.and_, 2),\n",
        "target_code_len": 90,
        "diff_format": "@@ -407,3 +408,3 @@\n \n-sqlalchemy_operation_registry = {\n+sqlalchemy_operation_registry: Dict[Any, Any] = {\n     ops.And: fixed_arity(sql.and_, 2),\n",
        "source_code_with_indent": "\n<DED>sqlalchemy_operation_registry = {\n    ops.And: fixed_arity(sql.and_, 2),\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>sqlalchemy_operation_registry: Dict[Any, Any] = {\n    ops.And: fixed_arity(sql.and_, 2),\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ibis-project/ibis",
    "commit": "0f596c6ad6bc81e32bd5bebf59aa73000159fa0d",
    "filename": "ibis/backends/base/sql/alchemy/registry.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ibis-project-ibis/ibis/backends/base/sql/alchemy/registry.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ibis/backends/base/sql/alchemy/registry.py:582:34 Incompatible parameter type [6]: Expected `typing.Type[typing.Union[ops.Abs, ops.And, ops.Between, ops.Cast, ops.Ceil, ops.Coalesce, ops.Contains, ops.Count, ops.CountDistinct, ops.EndsWith, ops.ExistsSubquery, ops.Exp, ops.Floor, ops.FloorDivide, ops.Greatest, ops.GroupConcat, ops.IsNull, ops.LPad, ops.LStrip, ops.Least, ops.Literal, ops.Ln, ops.Lowercase, ops.Max, ops.Mean, ops.Min, ops.Negate, ops.Not, ops.NotExistsSubquery, ops.NotNull, ops.NullIf, ops.Or, ops.Power, ops.RPad, ops.RStrip, ops.Repeat, ops.Reverse, ops.Round, ops.SearchedCase, ops.Sign, ops.SimpleCase, ops.SortKey, ops.Sqrt, ops.StartsWith, ops.StrRight, ops.StringAscii, ops.StringLength, ops.StringReplace, ops.StringSQLLike, ops.Strip, ops.Sum, ops.TableArrayView, ops.TableColumn, ops.TypeOf, ops.Uppercase, ops.ValueList]]` for 1st positional only parameter to call `dict.__setitem__` but got `typing.Type[typing.Union[ops.Add, ops.Divide, ops.Equals, ops.Greater, ops.GreaterEqual, ops.IdenticalTo, ops.Less, ops.LessEqual, ops.Modulus, ops.Multiply, ops.NotEquals, ops.Subtract]]`.",
    "message": " Expected `typing.Type[typing.Union[ops.Abs, ops.And, ops.Between, ops.Cast, ops.Ceil, ops.Coalesce, ops.Contains, ops.Count, ops.CountDistinct, ops.EndsWith, ops.ExistsSubquery, ops.Exp, ops.Floor, ops.FloorDivide, ops.Greatest, ops.GroupConcat, ops.IsNull, ops.LPad, ops.LStrip, ops.Least, ops.Literal, ops.Ln, ops.Lowercase, ops.Max, ops.Mean, ops.Min, ops.Negate, ops.Not, ops.NotExistsSubquery, ops.NotNull, ops.NullIf, ops.Or, ops.Power, ops.RPad, ops.RStrip, ops.Repeat, ops.Reverse, ops.Round, ops.SearchedCase, ops.Sign, ops.SimpleCase, ops.SortKey, ops.Sqrt, ops.StartsWith, ops.StrRight, ops.StringAscii, ops.StringLength, ops.StringReplace, ops.StringSQLLike, ops.Strip, ops.Sum, ops.TableArrayView, ops.TableColumn, ops.TypeOf, ops.Uppercase, ops.ValueList]]` for 1st positional only parameter to call `dict.__setitem__` but got `typing.Type[typing.Union[ops.Add, ops.Divide, ops.Equals, ops.Greater, ops.GreaterEqual, ops.IdenticalTo, ops.Less, ops.LessEqual, ops.Modulus, ops.Multiply, ops.NotEquals, ops.Subtract]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 582,
    "warning_line": "    sqlalchemy_operation_registry[_k] = fixed_arity(_v, 2)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import operator\n\n",
        "source_code_len": 17,
        "target_code": "import operator\nfrom typing import Any, Dict\n\n",
        "target_code_len": 46,
        "diff_format": "@@ -1,2 +1,3 @@\n import operator\n+from typing import Any, Dict\n \n",
        "source_code_with_indent": "import operator\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import operator\nfrom typing import Any, Dict\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nsqlalchemy_operation_registry = {\n    ops.And: fixed_arity(sql.and_, 2),\n",
        "source_code_len": 74,
        "target_code": "\nsqlalchemy_operation_registry: Dict[Any, Any] = {\n    ops.And: fixed_arity(sql.and_, 2),\n",
        "target_code_len": 90,
        "diff_format": "@@ -407,3 +408,3 @@\n \n-sqlalchemy_operation_registry = {\n+sqlalchemy_operation_registry: Dict[Any, Any] = {\n     ops.And: fixed_arity(sql.and_, 2),\n",
        "source_code_with_indent": "\n<DED>sqlalchemy_operation_registry = {\n    ops.And: fixed_arity(sql.and_, 2),\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>sqlalchemy_operation_registry: Dict[Any, Any] = {\n    ops.And: fixed_arity(sql.and_, 2),\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ibis-project/ibis",
    "commit": "0f596c6ad6bc81e32bd5bebf59aa73000159fa0d",
    "filename": "ibis/backends/base/sql/compiler/query_builder.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ibis-project-ibis/ibis/backends/base/sql/compiler/query_builder.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ibis/backends/base/sql/compiler/query_builder.py:517:26 Incompatible parameter type [6]: Expected `ir.TableExpr` for 1st positional only parameter to call `flatten_union` but got `ibis.expr.signature.Argument`.",
    "message": " Expected `ir.TableExpr` for 1st positional only parameter to call `flatten_union` but got `ibis.expr.signature.Argument`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 517,
    "warning_line": "            flatten_union(op.left), [op.distinct], flatten_union(op.right)"
  },
  {
    "project": "ibis-project/ibis",
    "commit": "0f596c6ad6bc81e32bd5bebf59aa73000159fa0d",
    "filename": "ibis/backends/base/sql/compiler/query_builder.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ibis-project-ibis/ibis/backends/base/sql/compiler/query_builder.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ibis/backends/base/sql/compiler/query_builder.py:517:65 Incompatible parameter type [6]: Expected `ir.TableExpr` for 1st positional only parameter to call `flatten_union` but got `ibis.expr.signature.Argument`.",
    "message": " Expected `ir.TableExpr` for 1st positional only parameter to call `flatten_union` but got `ibis.expr.signature.Argument`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 517,
    "warning_line": "            flatten_union(op.left), [op.distinct], flatten_union(op.right)"
  },
  {
    "project": "ibis-project/ibis",
    "commit": "0f596c6ad6bc81e32bd5bebf59aa73000159fa0d",
    "filename": "ibis/backends/base/sql/registry/window.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ibis-project-ibis/ibis/backends/base/sql/registry/window.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ibis/backends/base/sql/registry/window.py:68:12 Incompatible return type [7]: Expected `Union[float, ir.FloatingScalar]` but got `ibis.expr.signature.Argument`.",
    "message": " Expected `Union[float, ir.FloatingScalar]` but got `ibis.expr.signature.Argument`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 68,
    "warning_line": "            return expr_op.value",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import ibis.expr.types as ir\n\n",
        "source_code_len": 30,
        "target_code": "import ibis.expr.types as ir\nfrom ibis.expr.signature import Argument\n\n",
        "target_code_len": 71,
        "diff_format": "@@ -9,2 +9,3 @@\n import ibis.expr.types as ir\n+from ibis.expr.signature import Argument\n \n",
        "source_code_with_indent": "import ibis.expr.types as ir\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import ibis.expr.types as ir\nfrom ibis.expr.signature import Argument\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    expr: Union[ir.Expr, dt.Interval, float]\n) -> Union[ir.FloatingScalar, float]:\n    \"\"\"\n",
        "source_code_len": 91,
        "target_code": "    expr: Union[ir.Expr, dt.Interval, float]\n) -> Union[ir.Expr, float, Argument]:\n    \"\"\"\n",
        "target_code_len": 91,
        "diff_format": "@@ -45,3 +46,3 @@\n     expr: Union[ir.Expr, dt.Interval, float]\n-) -> Union[ir.FloatingScalar, float]:\n+) -> Union[ir.Expr, float, Argument]:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "    expr: Union[ir.Expr, dt.Interval, float]\n) -> Union[ir.FloatingScalar, float]:\n    <IND>",
        "target_code_with_indent": "    expr: Union[ir.Expr, dt.Interval, float]\n) -> Union[ir.Expr, float, Argument]:\n    <IND>"
      }
    ]
  },
  {
    "project": "ibis-project/ibis",
    "commit": "0f596c6ad6bc81e32bd5bebf59aa73000159fa0d",
    "filename": "ibis/backends/base/sql/registry/window.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ibis-project-ibis/ibis/backends/base/sql/registry/window.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ibis/backends/base/sql/registry/window.py:70:12 Incompatible return type [7]: Expected `Union[float, ir.FloatingScalar]` but got `Union[float, ir.Expr]`.",
    "message": " Expected `Union[float, ir.FloatingScalar]` but got `Union[float, ir.Expr]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 70,
    "warning_line": "            return expr",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import ibis.expr.types as ir\n\n",
        "source_code_len": 30,
        "target_code": "import ibis.expr.types as ir\nfrom ibis.expr.signature import Argument\n\n",
        "target_code_len": 71,
        "diff_format": "@@ -9,2 +9,3 @@\n import ibis.expr.types as ir\n+from ibis.expr.signature import Argument\n \n",
        "source_code_with_indent": "import ibis.expr.types as ir\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import ibis.expr.types as ir\nfrom ibis.expr.signature import Argument\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    expr: Union[ir.Expr, dt.Interval, float]\n) -> Union[ir.FloatingScalar, float]:\n    \"\"\"\n",
        "source_code_len": 91,
        "target_code": "    expr: Union[ir.Expr, dt.Interval, float]\n) -> Union[ir.Expr, float, Argument]:\n    \"\"\"\n",
        "target_code_len": 91,
        "diff_format": "@@ -45,3 +46,3 @@\n     expr: Union[ir.Expr, dt.Interval, float]\n-) -> Union[ir.FloatingScalar, float]:\n+) -> Union[ir.Expr, float, Argument]:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "    expr: Union[ir.Expr, dt.Interval, float]\n) -> Union[ir.FloatingScalar, float]:\n    <IND>",
        "target_code_with_indent": "    expr: Union[ir.Expr, dt.Interval, float]\n) -> Union[ir.Expr, float, Argument]:\n    <IND>"
      }
    ]
  },
  {
    "project": "ibis-project/ibis",
    "commit": "0f596c6ad6bc81e32bd5bebf59aa73000159fa0d",
    "filename": "ibis/backends/mysql/registry.py",
    "min_patch_found": false,
    "full_warning_msg": "ibis/backends/mysql/registry.py:22:26 Incompatible parameter type [6]: Expected `typing.Mapping[typing.Type[typing.Union[ops.Abs, ops.And, ops.Between, ops.Cast, ops.Ceil, ops.Coalesce, ops.Contains, ops.Count, ops.CountDistinct, ops.EndsWith, ops.ExistsSubquery, ops.Exp, ops.Floor, ops.FloorDivide, ops.Greatest, ops.GroupConcat, ops.IsNull, ops.LPad, ops.LStrip, ops.Least, ops.Literal, ops.Ln, ops.Lowercase, ops.Max, ops.Mean, ops.Min, ops.Negate, ops.Not, ops.NotExistsSubquery, ops.NotNull, ops.NullIf, ops.Or, ops.Power, ops.RPad, ops.RStrip, ops.Repeat, ops.Reverse, ops.Round, ops.SearchedCase, ops.Sign, ops.SimpleCase, ops.SortKey, ops.Sqrt, ops.StartsWith, ops.StrRight, ops.StringAscii, ops.StringLength, ops.StringReplace, ops.StringSQLLike, ops.Strip, ops.Sum, ops.TableArrayView, ops.TableColumn, ops.TypeOf, ops.Uppercase, ops.ValueList]], typing.Any]` for 1st positional only parameter to call `dict.update` but got `typing.Dict[typing.Type[typing.Union[ops.CumulativeOp, ops.DenseRank, ops.FirstValue, ops.Lag, ops.LastValue, ops.Lead, ops.MinRank, ops.NTile, ops.PercentRank, ops.RowNumber, ops.WindowOp]], typing.Any]`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "ibis-project/ibis",
    "commit": "0f596c6ad6bc81e32bd5bebf59aa73000159fa0d",
    "filename": "ibis/backends/mysql/registry.py",
    "min_patch_found": false,
    "full_warning_msg": "ibis/backends/mysql/registry.py:218:4 Incompatible parameter type [6]: Expected `typing.Mapping[typing.Type[typing.Union[ops.Abs, ops.And, ops.Between, ops.Cast, ops.Ceil, ops.Coalesce, ops.Contains, ops.Count, ops.CountDistinct, ops.EndsWith, ops.ExistsSubquery, ops.Exp, ops.Floor, ops.FloorDivide, ops.Greatest, ops.GroupConcat, ops.IsNull, ops.LPad, ops.LStrip, ops.Least, ops.Literal, ops.Ln, ops.Lowercase, ops.Max, ops.Mean, ops.Min, ops.Negate, ops.Not, ops.NotExistsSubquery, ops.NotNull, ops.NullIf, ops.Or, ops.Power, ops.RPad, ops.RStrip, ops.Repeat, ops.Reverse, ops.Round, ops.SearchedCase, ops.Sign, ops.SimpleCase, ops.SortKey, ops.Sqrt, ops.StartsWith, ops.StrRight, ops.StringAscii, ops.StringLength, ops.StringReplace, ops.StringSQLLike, ops.Strip, ops.Sum, ops.TableArrayView, ops.TableColumn, ops.TypeOf, ops.Uppercase, ops.ValueList]], typing.Any]` for 1st positional only parameter to call `dict.update` but got `typing.Mapping[typing.Type[typing.Union[ops.BitAnd, ops.BitOr, ops.BitXor, ops.Capitalize, ops.Date, ops.DateAdd, ops.DateDiff, ops.DateSub, ops.DateTruncate, ops.ExtractDay, ops.ExtractDayOfYear, ops.ExtractEpochSeconds, ops.ExtractHour, ops.ExtractMillisecond, ops.ExtractMinute, ops.ExtractMonth, ops.ExtractQuarter, ops.ExtractSecond, ops.ExtractWeekOfYear, ops.ExtractYear, ops.GroupConcat, ops.IdenticalTo, ops.IntervalFromInteger, ops.Literal, ops.Log, ops.Log10, ops.Log2, ops.RandomScalar, ops.RegexSearch, ops.Round, ops.StandardDev, ops.Strftime, ops.StringFind, ops.Substring, ops.TimestampAdd, ops.TimestampDiff, ops.TimestampNow, ops.TimestampSub, ops.TimestampTruncate, ops.Variance]], typing.Any]`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "ibis-project/ibis",
    "commit": "0f596c6ad6bc81e32bd5bebf59aa73000159fa0d",
    "filename": "ibis/backends/postgres/registry.py",
    "min_patch_found": false,
    "full_warning_msg": "ibis/backends/postgres/registry.py:35:26 Incompatible parameter type [6]: Expected `typing.Mapping[typing.Type[typing.Union[ops.Abs, ops.And, ops.Between, ops.Cast, ops.Ceil, ops.Coalesce, ops.Contains, ops.Count, ops.CountDistinct, ops.EndsWith, ops.ExistsSubquery, ops.Exp, ops.Floor, ops.FloorDivide, ops.Greatest, ops.GroupConcat, ops.IsNull, ops.LPad, ops.LStrip, ops.Least, ops.Literal, ops.Ln, ops.Lowercase, ops.Max, ops.Mean, ops.Min, ops.Negate, ops.Not, ops.NotExistsSubquery, ops.NotNull, ops.NullIf, ops.Or, ops.Power, ops.RPad, ops.RStrip, ops.Repeat, ops.Reverse, ops.Round, ops.SearchedCase, ops.Sign, ops.SimpleCase, ops.SortKey, ops.Sqrt, ops.StartsWith, ops.StrRight, ops.StringAscii, ops.StringLength, ops.StringReplace, ops.StringSQLLike, ops.Strip, ops.Sum, ops.TableArrayView, ops.TableColumn, ops.TypeOf, ops.Uppercase, ops.ValueList]], typing.Any]` for 1st positional only parameter to call `dict.update` but got `typing.Dict[typing.Type[typing.Union[ops.CumulativeOp, ops.DenseRank, ops.FirstValue, ops.Lag, ops.LastValue, ops.Lead, ops.MinRank, ops.NTile, ops.PercentRank, ops.RowNumber, ops.WindowOp]], typing.Any]`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "ibis-project/ibis",
    "commit": "0f596c6ad6bc81e32bd5bebf59aa73000159fa0d",
    "filename": "ibis/backends/postgres/registry.py",
    "min_patch_found": false,
    "full_warning_msg": "ibis/backends/postgres/registry.py:630:4 Incompatible parameter type [6]: Expected `typing.Mapping[typing.Type[typing.Union[ops.Abs, ops.And, ops.Between, ops.Cast, ops.Ceil, ops.Coalesce, ops.Contains, ops.Count, ops.CountDistinct, ops.EndsWith, ops.ExistsSubquery, ops.Exp, ops.Floor, ops.FloorDivide, ops.Greatest, ops.GroupConcat, ops.IsNull, ops.LPad, ops.LStrip, ops.Least, ops.Literal, ops.Ln, ops.Lowercase, ops.Max, ops.Mean, ops.Min, ops.Negate, ops.Not, ops.NotExistsSubquery, ops.NotNull, ops.NullIf, ops.Or, ops.Power, ops.RPad, ops.RStrip, ops.Repeat, ops.Reverse, ops.Round, ops.SearchedCase, ops.Sign, ops.SimpleCase, ops.SortKey, ops.Sqrt, ops.StartsWith, ops.StrRight, ops.StringAscii, ops.StringLength, ops.StringReplace, ops.StringSQLLike, ops.Strip, ops.Sum, ops.TableArrayView, ops.TableColumn, ops.TypeOf, ops.Uppercase, ops.ValueList]], typing.Any]` for 1st positional only parameter to call `dict.update` but got `typing.Mapping[typing.Type[typing.Union[ops.All, ops.Any, ops.ArrayCollect, ops.ArrayConcat, ops.ArrayIndex, ops.ArrayLength, ops.ArrayRepeat, ops.ArraySlice, ops.Capitalize, ops.Cast, ops.CumulativeAll, ops.CumulativeAny, ops.Date, ops.DateAdd, ops.DateDiff, ops.DateSub, ops.DateTruncate, ops.DayOfWeekIndex, ops.DayOfWeekName, ops.ExtractDay, ops.ExtractDayOfYear, ops.ExtractEpochSeconds, ops.ExtractHour, ops.ExtractMillisecond, ops.ExtractMinute, ops.ExtractMonth, ops.ExtractQuarter, ops.ExtractSecond, ops.ExtractWeekOfYear, ops.ExtractYear, ops.FindInSet, ops.GroupConcat, ops.HLLCardinality, ops.IdenticalTo, ops.IfNull, ops.IntervalFromInteger, ops.IsInf, ops.IsNan, ops.Literal, ops.Log, ops.Log10, ops.Log2, ops.Max, ops.Mean, ops.Min, ops.Modulus, ops.RandomScalar, ops.RegexExtract, ops.RegexReplace, ops.RegexSearch, ops.Round, ops.StandardDev, ops.Strftime, ops.StringFind, ops.StringJoin, ops.StringSplit, ops.Substring, ops.Sum, ops.TableColumn, ops.TimestampAdd, ops.TimestampDiff, ops.TimestampNow, ops.TimestampSub, ops.TimestampTruncate, ops.Translate, ops.TypeOf, ops.Variance]], typing.Any]`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "ibis-project/ibis",
    "commit": "0f596c6ad6bc81e32bd5bebf59aa73000159fa0d",
    "filename": "ibis/backends/sqlite/registry.py",
    "min_patch_found": false,
    "full_warning_msg": "ibis/backends/sqlite/registry.py:19:26 Incompatible parameter type [6]: Expected `typing.Mapping[typing.Type[typing.Union[ops.Abs, ops.And, ops.Between, ops.Cast, ops.Ceil, ops.Coalesce, ops.Contains, ops.Count, ops.CountDistinct, ops.EndsWith, ops.ExistsSubquery, ops.Exp, ops.Floor, ops.FloorDivide, ops.Greatest, ops.GroupConcat, ops.IsNull, ops.LPad, ops.LStrip, ops.Least, ops.Literal, ops.Ln, ops.Lowercase, ops.Max, ops.Mean, ops.Min, ops.Negate, ops.Not, ops.NotExistsSubquery, ops.NotNull, ops.NullIf, ops.Or, ops.Power, ops.RPad, ops.RStrip, ops.Repeat, ops.Reverse, ops.Round, ops.SearchedCase, ops.Sign, ops.SimpleCase, ops.SortKey, ops.Sqrt, ops.StartsWith, ops.StrRight, ops.StringAscii, ops.StringLength, ops.StringReplace, ops.StringSQLLike, ops.Strip, ops.Sum, ops.TableArrayView, ops.TableColumn, ops.TypeOf, ops.Uppercase, ops.ValueList]], typing.Any]` for 1st positional only parameter to call `dict.update` but got `typing.Dict[typing.Type[typing.Union[ops.CumulativeOp, ops.DenseRank, ops.FirstValue, ops.Lag, ops.LastValue, ops.Lead, ops.MinRank, ops.NTile, ops.PercentRank, ops.RowNumber, ops.WindowOp]], typing.Any]`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "ibis-project/ibis",
    "commit": "0f596c6ad6bc81e32bd5bebf59aa73000159fa0d",
    "filename": "ibis/backends/sqlite/registry.py",
    "min_patch_found": false,
    "full_warning_msg": "ibis/backends/sqlite/registry.py:231:4 Incompatible parameter type [6]: Expected `typing.Mapping[typing.Type[typing.Union[ops.Abs, ops.And, ops.Between, ops.Cast, ops.Ceil, ops.Coalesce, ops.Contains, ops.Count, ops.CountDistinct, ops.EndsWith, ops.ExistsSubquery, ops.Exp, ops.Floor, ops.FloorDivide, ops.Greatest, ops.GroupConcat, ops.IsNull, ops.LPad, ops.LStrip, ops.Least, ops.Literal, ops.Ln, ops.Lowercase, ops.Max, ops.Mean, ops.Min, ops.Negate, ops.Not, ops.NotExistsSubquery, ops.NotNull, ops.NullIf, ops.Or, ops.Power, ops.RPad, ops.RStrip, ops.Repeat, ops.Reverse, ops.Round, ops.SearchedCase, ops.Sign, ops.SimpleCase, ops.SortKey, ops.Sqrt, ops.StartsWith, ops.StrRight, ops.StringAscii, ops.StringLength, ops.StringReplace, ops.StringSQLLike, ops.Strip, ops.Sum, ops.TableArrayView, ops.TableColumn, ops.TypeOf, ops.Uppercase, ops.ValueList]], typing.Any]` for 1st positional only parameter to call `dict.update` but got `typing.Mapping[typing.Type[typing.Union[ops.Capitalize, ops.Cast, ops.Ceil, ops.DateTruncate, ops.Exp, ops.ExtractDay, ops.ExtractDayOfYear, ops.ExtractEpochSeconds, ops.ExtractHour, ops.ExtractMillisecond, ops.ExtractMinute, ops.ExtractMonth, ops.ExtractQuarter, ops.ExtractSecond, ops.ExtractYear, ops.Floor, ops.FloorDivide, ops.Greatest, ops.IdenticalTo, ops.IfNull, ops.LPad, ops.Least, ops.Ln, ops.Log, ops.Log10, ops.Log2, ops.Modulus, ops.Power, ops.RPad, ops.RegexExtract, ops.RegexReplace, ops.RegexSearch, ops.Repeat, ops.Reverse, ops.RowID, ops.Sign, ops.Sqrt, ops.StandardDev, ops.StrRight, ops.Strftime, ops.StringAscii, ops.StringFind, ops.Substring, ops.TimestampNow, ops.TimestampTruncate, ops.Translate, ops.Variance]], typing.Any]`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  }
]