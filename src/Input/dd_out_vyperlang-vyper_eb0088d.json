[
  {
    "project": "vyperlang/vyper",
    "commit": "eb0088d5557bae3ef5b7655e9cb732c698c1e5d9",
    "filename": "vyper/old_codegen/function_definitions/external_function.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/vyperlang-vyper/vyper/old_codegen/function_definitions/external_function.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "vyper/old_codegen/function_definitions/external_function.py:74:4 Incompatible return type [7]: Expected `None` but got `List[typing.Any]`.",
    "message": " Expected `None` but got `List[typing.Any]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 74,
    "warning_line": "    return ret",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "# also allocate the ones that live in memory (i.e. kwargs)\ndef _register_function_args(context: Context, sig: FunctionSignature) -> None:\n    pos = None\n",
        "source_code_len": 153,
        "target_code": "# also allocate the ones that live in memory (i.e. kwargs)\ndef _register_function_args(context: Context, sig: FunctionSignature) -> List[LLLnode]:\n    pos = None\n",
        "target_code_len": 162,
        "diff_format": "@@ -37,3 +44,3 @@\n # also allocate the ones that live in memory (i.e. kwargs)\n-def _register_function_args(context: Context, sig: FunctionSignature) -> None:\n+def _register_function_args(context: Context, sig: FunctionSignature) -> List[LLLnode]:\n     pos = None\n",
        "source_code_with_indent": "# also allocate the ones that live in memory (i.e. kwargs)\n<DED>def _register_function_args(context: Context, sig: FunctionSignature) -> None:\n    <IND>pos = None\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "# also allocate the ones that live in memory (i.e. kwargs)\n<DED>def _register_function_args(context: Context, sig: FunctionSignature) -> List[LLLnode]:\n    <IND>pos = None\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]