[
  {
    "project": "ssato/python-anyconfig",
    "commit": "c9b3d0c9be1e30c8e7971e841c4da55cce9d22a9",
    "filename": "src/anyconfig/backend/json/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ssato-python-anyconfig/src/anyconfig/backend/json/__init__.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/anyconfig/backend/json/__init__.py:29:19 Incompatible parameter type [6]: Expected `typing.Type[default.Parser]` for 1st positional only parameter to call `list.append` but got `typing.Type[SimpleJsonParser]`.",
    "message": " Expected `typing.Type[default.Parser]` for 1st positional only parameter to call `list.append` but got `typing.Type[SimpleJsonParser]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 29,
    "warning_line": "    PARSERS.append(SimpleJsonParser)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\"\"\"\nimport typing\n\nimport anyconfig.backend.base\nfrom . import default\n\n\nParserTVar = typing.TypeVar('ParserTVar', bound=anyconfig.backend.base.Parser)\n\nParser = default.Parser  # To keep backward compatibility.\nPARSERS: typing.List[ParserTVar] = [Parser]\n\n",
        "source_code_len": 257,
        "target_code": "\"\"\"\nfrom . import default\nfrom ..base import ParsersT\n\n\nParser = default.Parser  # To keep backward compatibility.\nPARSERS: ParsersT = [Parser]\n\n",
        "target_code_len": 145,
        "diff_format": "@@ -15,12 +15,8 @@\n \"\"\"\n-import typing\n-\n-import anyconfig.backend.base\n from . import default\n+from ..base import ParsersT\n \n \n-ParserTVar = typing.TypeVar('ParserTVar', bound=anyconfig.backend.base.Parser)\n-\n Parser = default.Parser  # To keep backward compatibility.\n-PARSERS: typing.List[ParserTVar] = [Parser]\n+PARSERS: ParsersT = [Parser]\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\nimport typing\n\nimport anyconfig.backend.base\nfrom . import default\n\n\nParserTVar = typing.TypeVar('ParserTVar', bound=anyconfig.backend.base.Parser)\n\nParser = default.Parser  # To keep backward compatibility.\nPARSERS: typing.List[ParserTVar] = [Parser]\n\n",
        "target_code_with_indent": "\nfrom . import default\nfrom ..base import ParsersT\n\n\nParser = default.Parser  # To keep backward compatibility.\nPARSERS: ParsersT = [Parser]\n\n"
      }
    ]
  },
  {
    "project": "ssato/python-anyconfig",
    "commit": "c9b3d0c9be1e30c8e7971e841c4da55cce9d22a9",
    "filename": "src/anyconfig/backend/yaml/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ssato-python-anyconfig/src/anyconfig/backend/yaml/__init__.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "src/anyconfig/backend/yaml/__init__.py:31:19 Incompatible parameter type [6]: Expected `typing.Type[pyyaml.Parser]` for 1st positional only parameter to call `list.append` but got `typing.Type[ryaml.Parser]`.",
    "message": " Expected `typing.Type[pyyaml.Parser]` for 1st positional only parameter to call `list.append` but got `typing.Type[ryaml.Parser]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 31,
    "warning_line": "    PARSERS.append(ryaml.Parser)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\"\"\"\nimport typing\n\nimport anyconfig.backend.base\n\n\nParserTVar = typing.TypeVar('ParserTVar', bound=anyconfig.backend.base.Parser)\ntry:\n    from . import pyyaml\n    PARSERS: typing.List[ParserTVar] = [pyyaml.Parser]\nexcept ImportError:\n    PARSERS: typing.List[ParserTVar] = []\n\n",
        "source_code_len": 278,
        "target_code": "\"\"\"\nfrom ..base import ParsersT\n\n\ntry:\n    from . import pyyaml\n    PARSERS: ParsersT = [pyyaml.Parser]\nexcept ImportError:\n    PARSERS: ParsersT = []  # type: ignore\n\n",
        "target_code_len": 168,
        "diff_format": "@@ -16,13 +16,10 @@\n \"\"\"\n-import typing\n-\n-import anyconfig.backend.base\n+from ..base import ParsersT\n \n \n-ParserTVar = typing.TypeVar('ParserTVar', bound=anyconfig.backend.base.Parser)\n try:\n     from . import pyyaml\n-    PARSERS: typing.List[ParserTVar] = [pyyaml.Parser]\n+    PARSERS: ParsersT = [pyyaml.Parser]\n except ImportError:\n-    PARSERS: typing.List[ParserTVar] = []\n+    PARSERS: ParsersT = []  # type: ignore\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\nimport typing\n\nimport anyconfig.backend.base\n\n\nParserTVar = typing.TypeVar('ParserTVar', bound=anyconfig.backend.base.Parser)\ntry:\n    <IND>from . import pyyaml\n    PARSERS: typing.List[ParserTVar] = [pyyaml.Parser]\n<DED>except ImportError:\n    <IND>PARSERS: typing.List[ParserTVar] = []\n\n",
        "target_code_with_indent": "\nfrom ..base import ParsersT\n\n\ntry:\n    <IND>from . import pyyaml\n    PARSERS: ParsersT = [pyyaml.Parser]\n<DED>except ImportError:\n    <IND>PARSERS: ParsersT = []  # type: ignore\n\n"
      }
    ]
  }
]