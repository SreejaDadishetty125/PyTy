[
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/__init__.py",
    "file_hunks_size": 8,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/__init__.py:469:21 Incompatible variable type [9]: scheduler is declared to have type `typing.Scheduler` but is used as type `None`.",
    "message": " scheduler is declared to have type `typing.Scheduler` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 469,
    "warning_line": "def interval(period, scheduler: typing.Scheduler = None) -> Observable:"
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/__init__.py",
    "file_hunks_size": 8,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/__init__.py:544:22 Incompatible variable type [9]: stop is declared to have type `int` but is used as type `None`.",
    "message": " stop is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 544,
    "warning_line": "def range(start: int, stop: int = None, step: int = None, scheduler: typing.Scheduler = None) -> Observable:"
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/__init__.py",
    "file_hunks_size": 8,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/__init__.py:544:40 Incompatible variable type [9]: step is declared to have type `int` but is used as type `None`.",
    "message": " step is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 544,
    "warning_line": "def range(start: int, stop: int = None, step: int = None, scheduler: typing.Scheduler = None) -> Observable:"
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/__init__.py",
    "file_hunks_size": 8,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/__init__.py:544:58 Incompatible variable type [9]: scheduler is declared to have type `typing.Scheduler` but is used as type `None`.",
    "message": " scheduler is declared to have type `typing.Scheduler` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 544,
    "warning_line": "def range(start: int, stop: int = None, step: int = None, scheduler: typing.Scheduler = None) -> Observable:"
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/__init__.py",
    "file_hunks_size": 8,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/__init__.py:567:29 Incompatible variable type [9]: scheduler is declared to have type `typing.Scheduler` but is used as type `None`.",
    "message": " scheduler is declared to have type `typing.Scheduler` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 567,
    "warning_line": "def return_value(value: Any, scheduler: typing.Scheduler = None) -> Observable:"
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/__init__.py",
    "file_hunks_size": 8,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/__init__.py:590:36 Incompatible variable type [9]: repeat_count is declared to have type `int` but is used as type `None`.",
    "message": " repeat_count is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 590,
    "warning_line": "def repeat_value(value: Any = None, repeat_count: int = None) -> Observable:"
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/__init__.py",
    "file_hunks_size": 8,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/__init__.py:653:32 Incompatible variable type [9]: scheduler is declared to have type `typing.Scheduler` but is used as type `None`.",
    "message": " scheduler is declared to have type `typing.Scheduler` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 653,
    "warning_line": "def throw(exception: Exception, scheduler: typing.Scheduler = None) -> Observable:"
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/__init__.py",
    "file_hunks_size": 8,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/__init__.py:673:50 Incompatible variable type [9]: period is declared to have type `Union[datetime.timedelta, float]` but is used as type `None`.",
    "message": " period is declared to have type `Union[datetime.timedelta, float]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 673,
    "warning_line": "def timer(duetime: typing.AbsoluteOrRelativeTime, period: typing.RelativeTime = None,"
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/__init__.py",
    "file_hunks_size": 8,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/__init__.py:674:10 Incompatible variable type [9]: scheduler is declared to have type `typing.Scheduler` but is used as type `None`.",
    "message": " scheduler is declared to have type `typing.Scheduler` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 674,
    "warning_line": "          scheduler: typing.Scheduler = None) -> Observable:"
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/core/observable/empty.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/observable/empty.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/observable/empty.py:8:11 Incompatible variable type [9]: scheduler is declared to have type `typing.Scheduler` but is used as type `None`.",
    "message": " scheduler is declared to have type `typing.Scheduler` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 8,
    "warning_line": "def _empty(scheduler: typing.Scheduler = None) -> Observable:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import Any\n\n",
        "source_code_len": 24,
        "target_code": "from typing import Any, Optional\n\n",
        "target_code_len": 34,
        "diff_format": "@@ -1,2 +1,2 @@\n-from typing import Any\n+from typing import Any, Optional\n \n",
        "source_code_with_indent": "from typing import Any\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Any, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _empty(scheduler: typing.Scheduler = None) -> Observable:\n    def subscribe(observer: typing.Observer, scheduler_: typing.Scheduler = None) -> typing.Disposable:\n        _scheduler = scheduler or scheduler_ or immediate_scheduler\n        def action(_: typing.Scheduler, __: Any) -> None:\n",
        "source_code_len": 293,
        "target_code": "\ndef _empty(scheduler: Optional[typing.Scheduler] = None) -> Observable:\n    def subscribe(observer: typing.Observer, scheduler_: Optional[typing.Scheduler] = None) -> typing.Disposable:\n        _scheduler = scheduler or scheduler_ or immediate_scheduler\n\n        def action(_: typing.Scheduler, __: Any) -> None:\n",
        "target_code_len": 314,
        "diff_format": "@@ -7,5 +7,6 @@\n \n-def _empty(scheduler: typing.Scheduler = None) -> Observable:\n-    def subscribe(observer: typing.Observer, scheduler_: typing.Scheduler = None) -> typing.Disposable:\n+def _empty(scheduler: Optional[typing.Scheduler] = None) -> Observable:\n+    def subscribe(observer: typing.Observer, scheduler_: Optional[typing.Scheduler] = None) -> typing.Disposable:\n         _scheduler = scheduler or scheduler_ or immediate_scheduler\n+\n         def action(_: typing.Scheduler, __: Any) -> None:\n",
        "source_code_with_indent": "\ndef _empty(scheduler: typing.Scheduler = None) -> Observable:\n    <IND>def subscribe(observer: typing.Observer, scheduler_: typing.Scheduler = None) -> typing.Disposable:\n        <IND>_scheduler = scheduler or scheduler_ or immediate_scheduler\n        def action(_: typing.Scheduler, __: Any) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\ndef _empty(scheduler: Optional[typing.Scheduler] = None) -> Observable:\n    <IND>def subscribe(observer: typing.Observer, scheduler_: Optional[typing.Scheduler] = None) -> typing.Disposable:\n        <IND>_scheduler = scheduler or scheduler_ or immediate_scheduler\n\n        def action(_: typing.Scheduler, __: Any) -> None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/core/observable/empty.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/observable/empty.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/observable/empty.py:9:45 Incompatible variable type [9]: scheduler_ is declared to have type `typing.Scheduler` but is used as type `None`.",
    "message": " scheduler_ is declared to have type `typing.Scheduler` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 9,
    "warning_line": "    def subscribe(observer: typing.Observer, scheduler_: typing.Scheduler = None) -> typing.Disposable:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import Any\n\n",
        "source_code_len": 24,
        "target_code": "from typing import Any, Optional\n\n",
        "target_code_len": 34,
        "diff_format": "@@ -1,2 +1,2 @@\n-from typing import Any\n+from typing import Any, Optional\n \n",
        "source_code_with_indent": "from typing import Any\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Any, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _empty(scheduler: typing.Scheduler = None) -> Observable:\n    def subscribe(observer: typing.Observer, scheduler_: typing.Scheduler = None) -> typing.Disposable:\n        _scheduler = scheduler or scheduler_ or immediate_scheduler\n        def action(_: typing.Scheduler, __: Any) -> None:\n",
        "source_code_len": 293,
        "target_code": "\ndef _empty(scheduler: Optional[typing.Scheduler] = None) -> Observable:\n    def subscribe(observer: typing.Observer, scheduler_: Optional[typing.Scheduler] = None) -> typing.Disposable:\n        _scheduler = scheduler or scheduler_ or immediate_scheduler\n\n        def action(_: typing.Scheduler, __: Any) -> None:\n",
        "target_code_len": 314,
        "diff_format": "@@ -7,5 +7,6 @@\n \n-def _empty(scheduler: typing.Scheduler = None) -> Observable:\n-    def subscribe(observer: typing.Observer, scheduler_: typing.Scheduler = None) -> typing.Disposable:\n+def _empty(scheduler: Optional[typing.Scheduler] = None) -> Observable:\n+    def subscribe(observer: typing.Observer, scheduler_: Optional[typing.Scheduler] = None) -> typing.Disposable:\n         _scheduler = scheduler or scheduler_ or immediate_scheduler\n+\n         def action(_: typing.Scheduler, __: Any) -> None:\n",
        "source_code_with_indent": "\ndef _empty(scheduler: typing.Scheduler = None) -> Observable:\n    <IND>def subscribe(observer: typing.Observer, scheduler_: typing.Scheduler = None) -> typing.Disposable:\n        <IND>_scheduler = scheduler or scheduler_ or immediate_scheduler\n        def action(_: typing.Scheduler, __: Any) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\ndef _empty(scheduler: Optional[typing.Scheduler] = None) -> Observable:\n    <IND>def subscribe(observer: typing.Observer, scheduler_: Optional[typing.Scheduler] = None) -> typing.Disposable:\n        <IND>_scheduler = scheduler or scheduler_ or immediate_scheduler\n\n        def action(_: typing.Scheduler, __: Any) -> None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/core/observable/empty.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/observable/empty.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/observable/empty.py:15:22 Incompatible parameter type [6]: Expected `typing.Callable[[typing.Observer[typing.Any], typing.Optional[typing.Scheduler]], typing.Disposable]` for 1st positional only parameter to call `rx.core.observable.observable.Observable.__init__` but got `typing.Callable[[Named(observer, typing.Observer[typing.Any]), Named(scheduler_, typing.Scheduler, default)], typing.Disposable]`.",
    "message": " Expected `typing.Callable[[typing.Observer[typing.Any], typing.Optional[typing.Scheduler]], typing.Disposable]` for 1st positional only parameter to call `rx.core.observable.observable.Observable.__init__` but got `typing.Callable[[Named(observer, typing.Observer[typing.Any]), Named(scheduler_, typing.Scheduler, default)], typing.Disposable]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 15,
    "warning_line": "    return Observable(subscribe)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import Any\n\n",
        "source_code_len": 24,
        "target_code": "from typing import Any, Optional\n\n",
        "target_code_len": 34,
        "diff_format": "@@ -1,2 +1,2 @@\n-from typing import Any\n+from typing import Any, Optional\n \n",
        "source_code_with_indent": "from typing import Any\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Any, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _empty(scheduler: typing.Scheduler = None) -> Observable:\n    def subscribe(observer: typing.Observer, scheduler_: typing.Scheduler = None) -> typing.Disposable:\n        _scheduler = scheduler or scheduler_ or immediate_scheduler\n        def action(_: typing.Scheduler, __: Any) -> None:\n",
        "source_code_len": 293,
        "target_code": "\ndef _empty(scheduler: Optional[typing.Scheduler] = None) -> Observable:\n    def subscribe(observer: typing.Observer, scheduler_: Optional[typing.Scheduler] = None) -> typing.Disposable:\n        _scheduler = scheduler or scheduler_ or immediate_scheduler\n\n        def action(_: typing.Scheduler, __: Any) -> None:\n",
        "target_code_len": 314,
        "diff_format": "@@ -7,5 +7,6 @@\n \n-def _empty(scheduler: typing.Scheduler = None) -> Observable:\n-    def subscribe(observer: typing.Observer, scheduler_: typing.Scheduler = None) -> typing.Disposable:\n+def _empty(scheduler: Optional[typing.Scheduler] = None) -> Observable:\n+    def subscribe(observer: typing.Observer, scheduler_: Optional[typing.Scheduler] = None) -> typing.Disposable:\n         _scheduler = scheduler or scheduler_ or immediate_scheduler\n+\n         def action(_: typing.Scheduler, __: Any) -> None:\n",
        "source_code_with_indent": "\ndef _empty(scheduler: typing.Scheduler = None) -> Observable:\n    <IND>def subscribe(observer: typing.Observer, scheduler_: typing.Scheduler = None) -> typing.Disposable:\n        <IND>_scheduler = scheduler or scheduler_ or immediate_scheduler\n        def action(_: typing.Scheduler, __: Any) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\ndef _empty(scheduler: Optional[typing.Scheduler] = None) -> Observable:\n    <IND>def subscribe(observer: typing.Observer, scheduler_: Optional[typing.Scheduler] = None) -> typing.Disposable:\n        <IND>_scheduler = scheduler or scheduler_ or immediate_scheduler\n\n        def action(_: typing.Scheduler, __: Any) -> None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/core/observable/fromcallback.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/observable/fromcallback.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/observable/fromcallback.py:9:35 Incompatible variable type [9]: mapper is declared to have type `typing.Callable[[typing.Any], typing.Any]` but is used as type `None`.",
    "message": " mapper is declared to have type `typing.Callable[[typing.Any], typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 9,
    "warning_line": "def _from_callback(func: Callable, mapper: Mapper = None) -> Callable[[], Observable]:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import Callable\n\n",
        "source_code_len": 29,
        "target_code": "from typing import Callable, Optional\n\n",
        "target_code_len": 39,
        "diff_format": "@@ -1,2 +1,2 @@\n-from typing import Callable\n+from typing import Callable, Optional\n \n",
        "source_code_with_indent": "from typing import Callable\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Callable, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _from_callback(func: Callable, mapper: Mapper = None) -> Callable[[], Observable]:\n    \"\"\"Converts a callback function to an observable sequence.\n",
        "source_code_len": 151,
        "target_code": "\ndef _from_callback(func: Callable, mapper: Optional[Mapper] = None) -> Callable[[], Observable]:\n    \"\"\"Converts a callback function to an observable sequence.\n",
        "target_code_len": 161,
        "diff_format": "@@ -8,3 +8,3 @@\n \n-def _from_callback(func: Callable, mapper: Mapper = None) -> Callable[[], Observable]:\n+def _from_callback(func: Callable, mapper: Optional[Mapper] = None) -> Callable[[], Observable]:\n     \"\"\"Converts a callback function to an observable sequence.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\ndef _from_callback(func: Callable, mapper: Mapper = None) -> Callable[[], Observable]:\n    <IND>",
        "target_code_with_indent": "\ndef _from_callback(func: Callable, mapper: Optional[Mapper] = None) -> Callable[[], Observable]:\n    <IND>"
      }
    ]
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/core/observable/fromcallback.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/observable/fromcallback.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/observable/fromcallback.py:27:49 Incompatible variable type [9]: scheduler is declared to have type `typing.Scheduler` but is used as type `None`.",
    "message": " scheduler is declared to have type `typing.Scheduler` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 27,
    "warning_line": "        def subscribe(observer: typing.Observer, scheduler: typing.Scheduler = None) -> typing.Disposable:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import Callable\n\n",
        "source_code_len": 29,
        "target_code": "from typing import Callable, Optional\n\n",
        "target_code_len": 39,
        "diff_format": "@@ -1,2 +1,2 @@\n-from typing import Callable\n+from typing import Callable, Optional\n \n",
        "source_code_with_indent": "from typing import Callable\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Callable, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        def subscribe(observer: typing.Observer, scheduler: typing.Scheduler = None) -> typing.Disposable:\n            def handler(*args):\n",
        "source_code_len": 140,
        "target_code": "\n        def subscribe(observer: typing.Observer, scheduler: Optional[typing.Scheduler] = None) -> typing.Disposable:\n            def handler(*args):\n",
        "target_code_len": 150,
        "diff_format": "@@ -26,3 +26,3 @@\n \n-        def subscribe(observer: typing.Observer, scheduler: typing.Scheduler = None) -> typing.Disposable:\n+        def subscribe(observer: typing.Observer, scheduler: Optional[typing.Scheduler] = None) -> typing.Disposable:\n             def handler(*args):\n",
        "source_code_with_indent": "\n        def subscribe(observer: typing.Observer, scheduler: typing.Scheduler = None) -> typing.Disposable:\n            <IND>def handler(*args):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        def subscribe(observer: typing.Observer, scheduler: Optional[typing.Scheduler] = None) -> typing.Disposable:\n            <IND>def handler(*args):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/core/observable/fromfuture.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/observable/fromfuture.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/observable/fromfuture.py:21:45 Incompatible variable type [9]: scheduler is declared to have type `typing.Scheduler` but is used as type `None`.",
    "message": " scheduler is declared to have type `typing.Scheduler` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 21,
    "warning_line": "    def subscribe(observer: typing.Observer, scheduler: typing.Scheduler = None) -> typing.Disposable:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from asyncio.futures import Future\n\n",
        "source_code_len": 36,
        "target_code": "from asyncio.futures import Future\nfrom typing import Optional\n\n",
        "target_code_len": 64,
        "diff_format": "@@ -1,2 +1,3 @@\n from asyncio.futures import Future\n+from typing import Optional\n \n",
        "source_code_with_indent": "from asyncio.futures import Future\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from asyncio.futures import Future\nfrom typing import Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def subscribe(observer: typing.Observer, scheduler: typing.Scheduler = None) -> typing.Disposable:\n        def done(future):\n",
        "source_code_len": 130,
        "target_code": "\n    def subscribe(observer: typing.Observer, scheduler: Optional[typing.Scheduler] = None) -> typing.Disposable:\n        def done(future):\n",
        "target_code_len": 140,
        "diff_format": "@@ -20,3 +21,3 @@\n \n-    def subscribe(observer: typing.Observer, scheduler: typing.Scheduler = None) -> typing.Disposable:\n+    def subscribe(observer: typing.Observer, scheduler: Optional[typing.Scheduler] = None) -> typing.Disposable:\n         def done(future):\n",
        "source_code_with_indent": "\n    def subscribe(observer: typing.Observer, scheduler: typing.Scheduler = None) -> typing.Disposable:\n        <IND>def done(future):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    def subscribe(observer: typing.Observer, scheduler: Optional[typing.Scheduler] = None) -> typing.Disposable:\n        <IND>def done(future):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/core/observable/fromfuture.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/observable/fromfuture.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/observable/fromfuture.py:39:22 Incompatible parameter type [6]: Expected `typing.Callable[[typing.Observer[typing.Any], typing.Optional[typing.Scheduler]], typing.Disposable]` for 1st positional only parameter to call `rx.core.observable.observable.Observable.__init__` but got `typing.Callable[[Named(observer, typing.Observer[typing.Any]), Named(scheduler, typing.Scheduler, default)], typing.Disposable]`.",
    "message": " Expected `typing.Callable[[typing.Observer[typing.Any], typing.Optional[typing.Scheduler]], typing.Disposable]` for 1st positional only parameter to call `rx.core.observable.observable.Observable.__init__` but got `typing.Callable[[Named(observer, typing.Observer[typing.Any]), Named(scheduler, typing.Scheduler, default)], typing.Disposable]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 39,
    "warning_line": "    return Observable(subscribe)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from asyncio.futures import Future\n\n",
        "source_code_len": 36,
        "target_code": "from asyncio.futures import Future\nfrom typing import Optional\n\n",
        "target_code_len": 64,
        "diff_format": "@@ -1,2 +1,3 @@\n from asyncio.futures import Future\n+from typing import Optional\n \n",
        "source_code_with_indent": "from asyncio.futures import Future\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from asyncio.futures import Future\nfrom typing import Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def subscribe(observer: typing.Observer, scheduler: typing.Scheduler = None) -> typing.Disposable:\n        def done(future):\n",
        "source_code_len": 130,
        "target_code": "\n    def subscribe(observer: typing.Observer, scheduler: Optional[typing.Scheduler] = None) -> typing.Disposable:\n        def done(future):\n",
        "target_code_len": 140,
        "diff_format": "@@ -20,3 +21,3 @@\n \n-    def subscribe(observer: typing.Observer, scheduler: typing.Scheduler = None) -> typing.Disposable:\n+    def subscribe(observer: typing.Observer, scheduler: Optional[typing.Scheduler] = None) -> typing.Disposable:\n         def done(future):\n",
        "source_code_with_indent": "\n    def subscribe(observer: typing.Observer, scheduler: typing.Scheduler = None) -> typing.Disposable:\n        <IND>def done(future):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    def subscribe(observer: typing.Observer, scheduler: Optional[typing.Scheduler] = None) -> typing.Disposable:\n        <IND>def done(future):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/core/observable/fromiterable.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/observable/fromiterable.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/observable/fromiterable.py:8:38 Incompatible variable type [9]: scheduler is declared to have type `typing.Scheduler` but is used as type `None`.",
    "message": " scheduler is declared to have type `typing.Scheduler` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 8,
    "warning_line": "def from_iterable(iterable: Iterable, scheduler: typing.Scheduler = None) -> Observable:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import Iterable, Any\n\n",
        "source_code_len": 34,
        "target_code": "from typing import Iterable, Any, Optional\n\n",
        "target_code_len": 44,
        "diff_format": "@@ -1,2 +1,2 @@\n-from typing import Iterable, Any\n+from typing import Iterable, Any, Optional\n \n",
        "source_code_with_indent": "from typing import Iterable, Any\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Iterable, Any, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef from_iterable(iterable: Iterable, scheduler: typing.Scheduler = None) -> Observable:\n    \"\"\"Converts an iterable to an observable sequence.\n",
        "source_code_len": 145,
        "target_code": "\ndef from_iterable(iterable: Iterable, scheduler: Optional[typing.Scheduler] = None) -> Observable:\n    \"\"\"Converts an iterable to an observable sequence.\n",
        "target_code_len": 155,
        "diff_format": "@@ -7,3 +7,3 @@\n \n-def from_iterable(iterable: Iterable, scheduler: typing.Scheduler = None) -> Observable:\n+def from_iterable(iterable: Iterable, scheduler: Optional[typing.Scheduler] = None) -> Observable:\n     \"\"\"Converts an iterable to an observable sequence.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\ndef from_iterable(iterable: Iterable, scheduler: typing.Scheduler = None) -> Observable:\n    <IND>",
        "target_code_with_indent": "\ndef from_iterable(iterable: Iterable, scheduler: Optional[typing.Scheduler] = None) -> Observable:\n    <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def subscribe(observer: typing.Observer, scheduler_: typing.Scheduler = None) -> typing.Disposable:\n        _scheduler = scheduler or scheduler_ or current_thread_scheduler\n",
        "source_code_len": 178,
        "target_code": "\n    def subscribe(observer: typing.Observer, scheduler_: Optional[typing.Scheduler] = None) -> typing.Disposable:\n        _scheduler = scheduler or scheduler_ or current_thread_scheduler\n",
        "target_code_len": 188,
        "diff_format": "@@ -22,3 +22,3 @@\n \n-    def subscribe(observer: typing.Observer, scheduler_: typing.Scheduler = None) -> typing.Disposable:\n+    def subscribe(observer: typing.Observer, scheduler_: Optional[typing.Scheduler] = None) -> typing.Disposable:\n         _scheduler = scheduler or scheduler_ or current_thread_scheduler\n",
        "source_code_with_indent": "\n    def subscribe(observer: typing.Observer, scheduler_: typing.Scheduler = None) -> typing.Disposable:\n        <IND>_scheduler = scheduler or scheduler_ or current_thread_scheduler\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    def subscribe(observer: typing.Observer, scheduler_: Optional[typing.Scheduler] = None) -> typing.Disposable:\n        <IND>_scheduler = scheduler or scheduler_ or current_thread_scheduler\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/core/observable/fromiterable.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/observable/fromiterable.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/observable/fromiterable.py:23:45 Incompatible variable type [9]: scheduler_ is declared to have type `typing.Scheduler` but is used as type `None`.",
    "message": " scheduler_ is declared to have type `typing.Scheduler` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 23,
    "warning_line": "    def subscribe(observer: typing.Observer, scheduler_: typing.Scheduler = None) -> typing.Disposable:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import Iterable, Any\n\n",
        "source_code_len": 34,
        "target_code": "from typing import Iterable, Any, Optional\n\n",
        "target_code_len": 44,
        "diff_format": "@@ -1,2 +1,2 @@\n-from typing import Iterable, Any\n+from typing import Iterable, Any, Optional\n \n",
        "source_code_with_indent": "from typing import Iterable, Any\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Iterable, Any, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def subscribe(observer: typing.Observer, scheduler_: typing.Scheduler = None) -> typing.Disposable:\n        _scheduler = scheduler or scheduler_ or current_thread_scheduler\n",
        "source_code_len": 178,
        "target_code": "\n    def subscribe(observer: typing.Observer, scheduler_: Optional[typing.Scheduler] = None) -> typing.Disposable:\n        _scheduler = scheduler or scheduler_ or current_thread_scheduler\n",
        "target_code_len": 188,
        "diff_format": "@@ -22,3 +22,3 @@\n \n-    def subscribe(observer: typing.Observer, scheduler_: typing.Scheduler = None) -> typing.Disposable:\n+    def subscribe(observer: typing.Observer, scheduler_: Optional[typing.Scheduler] = None) -> typing.Disposable:\n         _scheduler = scheduler or scheduler_ or current_thread_scheduler\n",
        "source_code_with_indent": "\n    def subscribe(observer: typing.Observer, scheduler_: typing.Scheduler = None) -> typing.Disposable:\n        <IND>_scheduler = scheduler or scheduler_ or current_thread_scheduler\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    def subscribe(observer: typing.Observer, scheduler_: Optional[typing.Scheduler] = None) -> typing.Disposable:\n        <IND>_scheduler = scheduler or scheduler_ or current_thread_scheduler\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/core/observable/fromiterable.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/observable/fromiterable.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/observable/fromiterable.py:46:22 Incompatible parameter type [6]: Expected `typing.Callable[[typing.Observer[typing.Any], typing.Optional[typing.Scheduler]], typing.Disposable]` for 1st positional only parameter to call `rx.core.observable.observable.Observable.__init__` but got `typing.Callable[[Named(observer, typing.Observer[typing.Any]), Named(scheduler_, typing.Scheduler, default)], typing.Disposable]`.",
    "message": " Expected `typing.Callable[[typing.Observer[typing.Any], typing.Optional[typing.Scheduler]], typing.Disposable]` for 1st positional only parameter to call `rx.core.observable.observable.Observable.__init__` but got `typing.Callable[[Named(observer, typing.Observer[typing.Any]), Named(scheduler_, typing.Scheduler, default)], typing.Disposable]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 46,
    "warning_line": "    return Observable(subscribe)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import Iterable, Any\n\n",
        "source_code_len": 34,
        "target_code": "from typing import Iterable, Any, Optional\n\n",
        "target_code_len": 44,
        "diff_format": "@@ -1,2 +1,2 @@\n-from typing import Iterable, Any\n+from typing import Iterable, Any, Optional\n \n",
        "source_code_with_indent": "from typing import Iterable, Any\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Iterable, Any, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def subscribe(observer: typing.Observer, scheduler_: typing.Scheduler = None) -> typing.Disposable:\n        _scheduler = scheduler or scheduler_ or current_thread_scheduler\n",
        "source_code_len": 178,
        "target_code": "\n    def subscribe(observer: typing.Observer, scheduler_: Optional[typing.Scheduler] = None) -> typing.Disposable:\n        _scheduler = scheduler or scheduler_ or current_thread_scheduler\n",
        "target_code_len": 188,
        "diff_format": "@@ -22,3 +22,3 @@\n \n-    def subscribe(observer: typing.Observer, scheduler_: typing.Scheduler = None) -> typing.Disposable:\n+    def subscribe(observer: typing.Observer, scheduler_: Optional[typing.Scheduler] = None) -> typing.Disposable:\n         _scheduler = scheduler or scheduler_ or current_thread_scheduler\n",
        "source_code_with_indent": "\n    def subscribe(observer: typing.Observer, scheduler_: typing.Scheduler = None) -> typing.Disposable:\n        <IND>_scheduler = scheduler or scheduler_ or current_thread_scheduler\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    def subscribe(observer: typing.Observer, scheduler_: Optional[typing.Scheduler] = None) -> typing.Disposable:\n        <IND>_scheduler = scheduler or scheduler_ or current_thread_scheduler\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/core/observable/ifthen.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/observable/ifthen.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/observable/ifthen.py:10:13 Incompatible variable type [9]: else_source is declared to have type `rx.core.observable.observable.Observable` but is used as type `None`.",
    "message": " else_source is declared to have type `rx.core.observable.observable.Observable` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 10,
    "warning_line": "             else_source: Observable = None) -> Observable:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import Callable\n\n",
        "source_code_len": 29,
        "target_code": "from typing import Callable, Optional\n\n",
        "target_code_len": 39,
        "diff_format": "@@ -1,2 +1,2 @@\n-from typing import Callable\n+from typing import Callable, Optional\n \n",
        "source_code_with_indent": "from typing import Callable\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Callable, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def _if_then(condition: Callable[[], bool], then_source: Observable,\n             else_source: Observable = None) -> Observable:\n    \"\"\"Determines whether an observable collection contains values.\n",
        "source_code_len": 197,
        "target_code": "def _if_then(condition: Callable[[], bool], then_source: Observable,\n             else_source: Optional[Observable] = None) -> Observable:\n    \"\"\"Determines whether an observable collection contains values.\n",
        "target_code_len": 207,
        "diff_format": "@@ -9,3 +9,3 @@\n def _if_then(condition: Callable[[], bool], then_source: Observable,\n-             else_source: Observable = None) -> Observable:\n+             else_source: Optional[Observable] = None) -> Observable:\n     \"\"\"Determines whether an observable collection contains values.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "def _if_then(condition: Callable[[], bool], then_source: Observable,\n             else_source: Observable = None) -> Observable:\n    <IND>",
        "target_code_with_indent": "def _if_then(condition: Callable[[], bool], then_source: Observable,\n             else_source: Optional[Observable] = None) -> Observable:\n    <IND>"
      }
    ]
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/core/observable/interval.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/observable/interval.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/observable/interval.py:5:22 Incompatible variable type [9]: scheduler is declared to have type `typing.Scheduler` but is used as type `None`.",
    "message": " scheduler is declared to have type `typing.Scheduler` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 5,
    "warning_line": "def _interval(period, scheduler: typing.Scheduler = None) -> Observable:"
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/core/observable/marbles.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/observable/marbles.py",
    "file_hunks_size": 6,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/observable/marbles.py:35:29 Incompatible variable type [9]: error is declared to have type `Exception` but is used as type `None`.",
    "message": " error is declared to have type `Exception` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 35,
    "warning_line": "        lookup: Dict = None, error: Exception = None, scheduler: Scheduler = None) -> Observable:"
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/core/observable/marbles.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/observable/marbles.py",
    "file_hunks_size": 6,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/observable/marbles.py:35:54 Incompatible variable type [9]: scheduler is declared to have type `Scheduler` but is used as type `None`.",
    "message": " scheduler is declared to have type `Scheduler` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 35,
    "warning_line": "        lookup: Dict = None, error: Exception = None, scheduler: Scheduler = None) -> Observable:"
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/core/observable/marbles.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/observable/marbles.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/observable/marbles.py:95:17 Incompatible variable type [9]: error is declared to have type `Exception` but is used as type `None`.",
    "message": " error is declared to have type `Exception` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 95,
    "warning_line": "                 error: Exception = None, scheduler: Scheduler = None) -> Observable:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import List, Dict, Tuple\nimport re\n",
        "source_code_len": 47,
        "target_code": "from typing import List, Dict, Tuple, Optional\nimport re\n",
        "target_code_len": 57,
        "diff_format": "@@ -1,2 +1,2 @@\n-from typing import List, Dict, Tuple\n+from typing import List, Dict, Tuple, Optional\n import re\n",
        "source_code_with_indent": "from typing import List, Dict, Tuple\nimport re\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import List, Dict, Tuple, Optional\nimport re\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def from_marbles(string: str, timespan: RelativeTime = 0.1, lookup: Dict = None,\n                 error: Exception = None, scheduler: Scheduler = None) -> Observable:\n\n",
        "source_code_len": 168,
        "target_code": "def from_marbles(string: str, timespan: RelativeTime = 0.1, lookup: Dict = None,\n                 error: Optional[Exception] = None, scheduler: Optional[Scheduler] = None) -> Observable:\n\n",
        "target_code_len": 188,
        "diff_format": "@@ -94,3 +94,3 @@\n def from_marbles(string: str, timespan: RelativeTime = 0.1, lookup: Dict = None,\n-                 error: Exception = None, scheduler: Scheduler = None) -> Observable:\n+                 error: Optional[Exception] = None, scheduler: Optional[Scheduler] = None) -> Observable:\n \n",
        "source_code_with_indent": "<DED>def from_marbles(string: str, timespan: RelativeTime = 0.1, lookup: Dict = None,\n                 error: Exception = None, scheduler: Scheduler = None) -> Observable:\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED>def from_marbles(string: str, timespan: RelativeTime = 0.1, lookup: Dict = None,\n                 error: Optional[Exception] = None, scheduler: Optional[Scheduler] = None) -> Observable:\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def parse(string: str, timespan: RelativeTime = 1.0, time_shift: RelativeTime = 0.0, lookup: Dict = None,\n          error: Exception = None, raise_stopped: bool = False) -> List[Tuple[RelativeTime, notification.Notification]]:\n    \"\"\"Convert a marble diagram string to a list of messages.\n",
        "source_code_len": 289,
        "target_code": "def parse(string: str, timespan: RelativeTime = 1.0, time_shift: RelativeTime = 0.0, lookup: Dict = None,\n          error: Optional[Exception] = None, raise_stopped: bool = False) -> List[Tuple[RelativeTime, notification.Notification]]:\n    \"\"\"Convert a marble diagram string to a list of messages.\n",
        "target_code_len": 299,
        "diff_format": "@@ -119,3 +119,3 @@\n def parse(string: str, timespan: RelativeTime = 1.0, time_shift: RelativeTime = 0.0, lookup: Dict = None,\n-          error: Exception = None, raise_stopped: bool = False) -> List[Tuple[RelativeTime, notification.Notification]]:\n+          error: Optional[Exception] = None, raise_stopped: bool = False) -> List[Tuple[RelativeTime, notification.Notification]]:\n     \"\"\"Convert a marble diagram string to a list of messages.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "<DED>def parse(string: str, timespan: RelativeTime = 1.0, time_shift: RelativeTime = 0.0, lookup: Dict = None,\n          error: Exception = None, raise_stopped: bool = False) -> List[Tuple[RelativeTime, notification.Notification]]:\n    <IND>",
        "target_code_with_indent": "<DED>def parse(string: str, timespan: RelativeTime = 1.0, time_shift: RelativeTime = 0.0, lookup: Dict = None,\n          error: Optional[Exception] = None, raise_stopped: bool = False) -> List[Tuple[RelativeTime, notification.Notification]]:\n    <IND>"
      }
    ]
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/core/observable/marbles.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/observable/marbles.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/observable/marbles.py:95:42 Incompatible variable type [9]: scheduler is declared to have type `Scheduler` but is used as type `None`.",
    "message": " scheduler is declared to have type `Scheduler` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 95,
    "warning_line": "                 error: Exception = None, scheduler: Scheduler = None) -> Observable:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import List, Dict, Tuple\nimport re\n",
        "source_code_len": 47,
        "target_code": "from typing import List, Dict, Tuple, Optional\nimport re\n",
        "target_code_len": 57,
        "diff_format": "@@ -1,2 +1,2 @@\n-from typing import List, Dict, Tuple\n+from typing import List, Dict, Tuple, Optional\n import re\n",
        "source_code_with_indent": "from typing import List, Dict, Tuple\nimport re\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import List, Dict, Tuple, Optional\nimport re\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def from_marbles(string: str, timespan: RelativeTime = 0.1, lookup: Dict = None,\n                 error: Exception = None, scheduler: Scheduler = None) -> Observable:\n\n",
        "source_code_len": 168,
        "target_code": "def from_marbles(string: str, timespan: RelativeTime = 0.1, lookup: Dict = None,\n                 error: Optional[Exception] = None, scheduler: Optional[Scheduler] = None) -> Observable:\n\n",
        "target_code_len": 188,
        "diff_format": "@@ -94,3 +94,3 @@\n def from_marbles(string: str, timespan: RelativeTime = 0.1, lookup: Dict = None,\n-                 error: Exception = None, scheduler: Scheduler = None) -> Observable:\n+                 error: Optional[Exception] = None, scheduler: Optional[Scheduler] = None) -> Observable:\n \n",
        "source_code_with_indent": "<DED>def from_marbles(string: str, timespan: RelativeTime = 0.1, lookup: Dict = None,\n                 error: Exception = None, scheduler: Scheduler = None) -> Observable:\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED>def from_marbles(string: str, timespan: RelativeTime = 0.1, lookup: Dict = None,\n                 error: Optional[Exception] = None, scheduler: Optional[Scheduler] = None) -> Observable:\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def parse(string: str, timespan: RelativeTime = 1.0, time_shift: RelativeTime = 0.0, lookup: Dict = None,\n          error: Exception = None, raise_stopped: bool = False) -> List[Tuple[RelativeTime, notification.Notification]]:\n    \"\"\"Convert a marble diagram string to a list of messages.\n",
        "source_code_len": 289,
        "target_code": "def parse(string: str, timespan: RelativeTime = 1.0, time_shift: RelativeTime = 0.0, lookup: Dict = None,\n          error: Optional[Exception] = None, raise_stopped: bool = False) -> List[Tuple[RelativeTime, notification.Notification]]:\n    \"\"\"Convert a marble diagram string to a list of messages.\n",
        "target_code_len": 299,
        "diff_format": "@@ -119,3 +119,3 @@\n def parse(string: str, timespan: RelativeTime = 1.0, time_shift: RelativeTime = 0.0, lookup: Dict = None,\n-          error: Exception = None, raise_stopped: bool = False) -> List[Tuple[RelativeTime, notification.Notification]]:\n+          error: Optional[Exception] = None, raise_stopped: bool = False) -> List[Tuple[RelativeTime, notification.Notification]]:\n     \"\"\"Convert a marble diagram string to a list of messages.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "<DED>def parse(string: str, timespan: RelativeTime = 1.0, time_shift: RelativeTime = 0.0, lookup: Dict = None,\n          error: Exception = None, raise_stopped: bool = False) -> List[Tuple[RelativeTime, notification.Notification]]:\n    <IND>",
        "target_code_with_indent": "<DED>def parse(string: str, timespan: RelativeTime = 1.0, time_shift: RelativeTime = 0.0, lookup: Dict = None,\n          error: Optional[Exception] = None, raise_stopped: bool = False) -> List[Tuple[RelativeTime, notification.Notification]]:\n    <IND>"
      }
    ]
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/core/observable/marbles.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/observable/marbles.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/observable/marbles.py:120:10 Incompatible variable type [9]: error is declared to have type `Exception` but is used as type `None`.",
    "message": " error is declared to have type `Exception` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 120,
    "warning_line": "          error: Exception = None, raise_stopped: bool = False) -> List[Tuple[RelativeTime, notification.Notification]]:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import List, Dict, Tuple\nimport re\n",
        "source_code_len": 47,
        "target_code": "from typing import List, Dict, Tuple, Optional\nimport re\n",
        "target_code_len": 57,
        "diff_format": "@@ -1,2 +1,2 @@\n-from typing import List, Dict, Tuple\n+from typing import List, Dict, Tuple, Optional\n import re\n",
        "source_code_with_indent": "from typing import List, Dict, Tuple\nimport re\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import List, Dict, Tuple, Optional\nimport re\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def parse(string: str, timespan: RelativeTime = 1.0, time_shift: RelativeTime = 0.0, lookup: Dict = None,\n          error: Exception = None, raise_stopped: bool = False) -> List[Tuple[RelativeTime, notification.Notification]]:\n    \"\"\"Convert a marble diagram string to a list of messages.\n",
        "source_code_len": 289,
        "target_code": "def parse(string: str, timespan: RelativeTime = 1.0, time_shift: RelativeTime = 0.0, lookup: Dict = None,\n          error: Optional[Exception] = None, raise_stopped: bool = False) -> List[Tuple[RelativeTime, notification.Notification]]:\n    \"\"\"Convert a marble diagram string to a list of messages.\n",
        "target_code_len": 299,
        "diff_format": "@@ -119,3 +119,3 @@\n def parse(string: str, timespan: RelativeTime = 1.0, time_shift: RelativeTime = 0.0, lookup: Dict = None,\n-          error: Exception = None, raise_stopped: bool = False) -> List[Tuple[RelativeTime, notification.Notification]]:\n+          error: Optional[Exception] = None, raise_stopped: bool = False) -> List[Tuple[RelativeTime, notification.Notification]]:\n     \"\"\"Convert a marble diagram string to a list of messages.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "<DED>def parse(string: str, timespan: RelativeTime = 1.0, time_shift: RelativeTime = 0.0, lookup: Dict = None,\n          error: Exception = None, raise_stopped: bool = False) -> List[Tuple[RelativeTime, notification.Notification]]:\n    <IND>",
        "target_code_with_indent": "<DED>def parse(string: str, timespan: RelativeTime = 1.0, time_shift: RelativeTime = 0.0, lookup: Dict = None,\n          error: Optional[Exception] = None, raise_stopped: bool = False) -> List[Tuple[RelativeTime, notification.Notification]]:\n    <IND>"
      }
    ]
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/core/observable/never.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/observable/never.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/observable/never.py:13:45 Incompatible variable type [9]: scheduler is declared to have type `typing.Scheduler` but is used as type `None`.",
    "message": " scheduler is declared to have type `typing.Scheduler` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 13,
    "warning_line": "    def subscribe(observer: typing.Observer, scheduler: typing.Scheduler = None) -> typing.Disposable:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from rx.disposable import Disposable\n",
        "source_code_len": 37,
        "target_code": "from typing import Optional\n\nfrom rx.disposable import Disposable\n",
        "target_code_len": 66,
        "diff_format": "@@ -1,1 +1,3 @@\n+from typing import Optional\n+\n from rx.disposable import Disposable\n",
        "source_code_with_indent": "from rx.disposable import Disposable\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Optional\n\nfrom rx.disposable import Disposable\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def subscribe(observer: typing.Observer, scheduler: typing.Scheduler = None) -> typing.Disposable:\n        return Disposable()\n",
        "source_code_len": 132,
        "target_code": "\n    def subscribe(observer: typing.Observer, scheduler: Optional[typing.Scheduler] = None) -> typing.Disposable:\n        return Disposable()\n",
        "target_code_len": 142,
        "diff_format": "@@ -12,3 +14,3 @@\n \n-    def subscribe(observer: typing.Observer, scheduler: typing.Scheduler = None) -> typing.Disposable:\n+    def subscribe(observer: typing.Observer, scheduler: Optional[typing.Scheduler] = None) -> typing.Disposable:\n         return Disposable()\n",
        "source_code_with_indent": "\n    def subscribe(observer: typing.Observer, scheduler: typing.Scheduler = None) -> typing.Disposable:\n        <IND>return Disposable()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    def subscribe(observer: typing.Observer, scheduler: Optional[typing.Scheduler] = None) -> typing.Disposable:\n        <IND>return Disposable()\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/core/observable/never.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/observable/never.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/observable/never.py:16:22 Incompatible parameter type [6]: Expected `typing.Callable[[typing.Observer[typing.Any], typing.Optional[typing.Scheduler]], typing.Disposable]` for 1st positional only parameter to call `rx.core.observable.observable.Observable.__init__` but got `typing.Callable[[Named(observer, typing.Observer[typing.Any]), Named(scheduler, typing.Scheduler, default)], typing.Disposable]`.",
    "message": " Expected `typing.Callable[[typing.Observer[typing.Any], typing.Optional[typing.Scheduler]], typing.Disposable]` for 1st positional only parameter to call `rx.core.observable.observable.Observable.__init__` but got `typing.Callable[[Named(observer, typing.Observer[typing.Any]), Named(scheduler, typing.Scheduler, default)], typing.Disposable]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 16,
    "warning_line": "    return Observable(subscribe)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from rx.disposable import Disposable\n",
        "source_code_len": 37,
        "target_code": "from typing import Optional\n\nfrom rx.disposable import Disposable\n",
        "target_code_len": 66,
        "diff_format": "@@ -1,1 +1,3 @@\n+from typing import Optional\n+\n from rx.disposable import Disposable\n",
        "source_code_with_indent": "from rx.disposable import Disposable\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Optional\n\nfrom rx.disposable import Disposable\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def subscribe(observer: typing.Observer, scheduler: typing.Scheduler = None) -> typing.Disposable:\n        return Disposable()\n",
        "source_code_len": 132,
        "target_code": "\n    def subscribe(observer: typing.Observer, scheduler: Optional[typing.Scheduler] = None) -> typing.Disposable:\n        return Disposable()\n",
        "target_code_len": 142,
        "diff_format": "@@ -12,3 +14,3 @@\n \n-    def subscribe(observer: typing.Observer, scheduler: typing.Scheduler = None) -> typing.Disposable:\n+    def subscribe(observer: typing.Observer, scheduler: Optional[typing.Scheduler] = None) -> typing.Disposable:\n         return Disposable()\n",
        "source_code_with_indent": "\n    def subscribe(observer: typing.Observer, scheduler: typing.Scheduler = None) -> typing.Disposable:\n        <IND>return Disposable()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    def subscribe(observer: typing.Observer, scheduler: Optional[typing.Scheduler] = None) -> typing.Disposable:\n        <IND>return Disposable()\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/core/observable/observable.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/observable/observable.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/observable/observable.py:18:23 Incompatible variable type [9]: subscribe is declared to have type `typing.Callable[[typing.Observer[typing.Any], Optional[typing.Scheduler]], typing.Disposable]` but is used as type `None`.",
    "message": " subscribe is declared to have type `typing.Callable[[typing.Observer[typing.Any], Optional[typing.Scheduler]], typing.Disposable]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 18,
    "warning_line": "    def __init__(self, subscribe: Callable[[typing.Observer, Optional[typing.Scheduler]], typing.Disposable] = None) -> None:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __init__(self, subscribe: Callable[[typing.Observer, Optional[typing.Scheduler]], typing.Disposable] = None) -> None:\n        \"\"\"Creates an observable sequence object from the specified\n",
        "source_code_len": 195,
        "target_code": "\n    def __init__(self, subscribe: Optional[Callable[[typing.Observer, Optional[typing.Scheduler]], typing.Disposable]] = None) -> None:\n        \"\"\"Creates an observable sequence object from the specified\n",
        "target_code_len": 205,
        "diff_format": "@@ -17,3 +17,3 @@\n \n-    def __init__(self, subscribe: Callable[[typing.Observer, Optional[typing.Scheduler]], typing.Disposable] = None) -> None:\n+    def __init__(self, subscribe: Optional[Callable[[typing.Observer, Optional[typing.Scheduler]], typing.Disposable]] = None) -> None:\n         \"\"\"Creates an observable sequence object from the specified\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    def __init__(self, subscribe: Callable[[typing.Observer, Optional[typing.Scheduler]], typing.Disposable] = None) -> None:\n        <IND>",
        "target_code_with_indent": "\n    def __init__(self, subscribe: Optional[Callable[[typing.Observer, Optional[typing.Scheduler]], typing.Disposable]] = None) -> None:\n        <IND>"
      }
    ]
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/core/observable/observable.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/observable/observable.py",
    "file_hunks_size": 5,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/observable/observable.py:108:18 Incompatible variable type [9]: observer is declared to have type `Union[typing.Callable[[typing.Any], None], typing.Observer[typing.Any]]` but is used as type `None`.",
    "message": " observer is declared to have type `Union[typing.Callable[[typing.Any], None], typing.Observer[typing.Any]]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 108,
    "warning_line": "                  observer: Union[typing.Observer, typing.OnNext] = None,"
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/core/observable/observable.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/observable/observable.py",
    "file_hunks_size": 5,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/observable/observable.py:109:18 Incompatible variable type [9]: on_error is declared to have type `typing.Callable[[Exception], None]` but is used as type `None`.",
    "message": " on_error is declared to have type `typing.Callable[[Exception], None]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 109,
    "warning_line": "                  on_error: typing.OnError = None,"
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/core/observable/observable.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/observable/observable.py",
    "file_hunks_size": 5,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/observable/observable.py:110:18 Incompatible variable type [9]: on_completed is declared to have type `typing.Callable[[], None]` but is used as type `None`.",
    "message": " on_completed is declared to have type `typing.Callable[[], None]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 110,
    "warning_line": "                  on_completed: typing.OnCompleted = None,"
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/core/observable/observable.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/observable/observable.py",
    "file_hunks_size": 5,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/observable/observable.py:111:18 Incompatible variable type [9]: on_next is declared to have type `typing.Callable[[typing.Any], None]` but is used as type `None`.",
    "message": " on_next is declared to have type `typing.Callable[[typing.Any], None]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 111,
    "warning_line": "                  on_next: typing.OnNext = None,"
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/core/observable/observable.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/observable/observable.py",
    "file_hunks_size": 5,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/observable/observable.py:113:18 Incompatible variable type [9]: scheduler is declared to have type `typing.Scheduler` but is used as type `None`.",
    "message": " scheduler is declared to have type `typing.Scheduler` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 113,
    "warning_line": "                  scheduler: typing.Scheduler = None,"
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/core/observable/observable.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/observable/observable.py",
    "file_hunks_size": 5,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/observable/observable.py:150:19 Incompatible variable type [9]: on_next is declared to have type `typing.Callable[[typing.Any], None]` but is used as type `None`.",
    "message": " on_next is declared to have type `typing.Callable[[typing.Any], None]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 150,
    "warning_line": "                   on_next: typing.OnNext = None,"
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/core/observable/observable.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/observable/observable.py",
    "file_hunks_size": 5,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/observable/observable.py:151:19 Incompatible variable type [9]: on_error is declared to have type `typing.Callable[[Exception], None]` but is used as type `None`.",
    "message": " on_error is declared to have type `typing.Callable[[Exception], None]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 151,
    "warning_line": "                   on_error: typing.OnError = None,"
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/core/observable/observable.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/observable/observable.py",
    "file_hunks_size": 5,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/observable/observable.py:152:19 Incompatible variable type [9]: on_completed is declared to have type `typing.Callable[[], None]` but is used as type `None`.",
    "message": " on_completed is declared to have type `typing.Callable[[], None]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 152,
    "warning_line": "                   on_completed: typing.OnCompleted = None,"
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/core/observable/observable.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/observable/observable.py",
    "file_hunks_size": 5,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/observable/observable.py:153:19 Incompatible variable type [9]: scheduler is declared to have type `typing.Scheduler` but is used as type `None`.",
    "message": " scheduler is declared to have type `typing.Scheduler` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 153,
    "warning_line": "                   scheduler: typing.Scheduler = None"
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/core/observable/range.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/observable/range.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/observable/range.py:7:23 Incompatible variable type [9]: stop is declared to have type `int` but is used as type `None`.",
    "message": " stop is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 7,
    "warning_line": "def _range(start: int, stop: int = None, step: int = None, scheduler: typing.Scheduler = None) -> Observable:"
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/core/observable/range.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/observable/range.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/observable/range.py:7:41 Incompatible variable type [9]: step is declared to have type `int` but is used as type `None`.",
    "message": " step is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 7,
    "warning_line": "def _range(start: int, stop: int = None, step: int = None, scheduler: typing.Scheduler = None) -> Observable:"
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/core/observable/range.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/observable/range.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/observable/range.py:7:59 Incompatible variable type [9]: scheduler is declared to have type `typing.Scheduler` but is used as type `None`.",
    "message": " scheduler is declared to have type `typing.Scheduler` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 7,
    "warning_line": "def _range(start: int, stop: int = None, step: int = None, scheduler: typing.Scheduler = None) -> Observable:"
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/core/observable/repeat.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/observable/repeat.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/observable/repeat.py:8:37 Incompatible variable type [9]: repeat_count is declared to have type `int` but is used as type `None`.",
    "message": " repeat_count is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 8,
    "warning_line": "def _repeat_value(value: Any = None, repeat_count: int = None) -> Observable:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import Any\n\n",
        "source_code_len": 24,
        "target_code": "from typing import Any, Optional\n\n",
        "target_code_len": 34,
        "diff_format": "@@ -1,2 +1,2 @@\n-from typing import Any\n+from typing import Any, Optional\n \n",
        "source_code_with_indent": "from typing import Any\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Any, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _repeat_value(value: Any = None, repeat_count: int = None) -> Observable:\n    \"\"\"Generates an observable sequence that repeats the given element\n",
        "source_code_len": 150,
        "target_code": "\ndef _repeat_value(value: Any = None, repeat_count: Optional[int] = None) -> Observable:\n    \"\"\"Generates an observable sequence that repeats the given element\n",
        "target_code_len": 160,
        "diff_format": "@@ -7,3 +7,3 @@\n \n-def _repeat_value(value: Any = None, repeat_count: int = None) -> Observable:\n+def _repeat_value(value: Any = None, repeat_count: Optional[int] = None) -> Observable:\n     \"\"\"Generates an observable sequence that repeats the given element\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\ndef _repeat_value(value: Any = None, repeat_count: int = None) -> Observable:\n    <IND>",
        "target_code_with_indent": "\ndef _repeat_value(value: Any = None, repeat_count: Optional[int] = None) -> Observable:\n    <IND>"
      }
    ]
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/core/observable/repeat.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/observable/repeat.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/observable/repeat.py:27:8 Incompatible variable type [9]: repeat_count is declared to have type `int` but is used as type `None`.",
    "message": " repeat_count is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 27,
    "warning_line": "        repeat_count = None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import Any\n\n",
        "source_code_len": 24,
        "target_code": "from typing import Any, Optional\n\n",
        "target_code_len": 34,
        "diff_format": "@@ -1,2 +1,2 @@\n-from typing import Any\n+from typing import Any, Optional\n \n",
        "source_code_with_indent": "from typing import Any\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Any, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _repeat_value(value: Any = None, repeat_count: int = None) -> Observable:\n    \"\"\"Generates an observable sequence that repeats the given element\n",
        "source_code_len": 150,
        "target_code": "\ndef _repeat_value(value: Any = None, repeat_count: Optional[int] = None) -> Observable:\n    \"\"\"Generates an observable sequence that repeats the given element\n",
        "target_code_len": 160,
        "diff_format": "@@ -7,3 +7,3 @@\n \n-def _repeat_value(value: Any = None, repeat_count: int = None) -> Observable:\n+def _repeat_value(value: Any = None, repeat_count: Optional[int] = None) -> Observable:\n     \"\"\"Generates an observable sequence that repeats the given element\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\ndef _repeat_value(value: Any = None, repeat_count: int = None) -> Observable:\n    <IND>",
        "target_code_with_indent": "\ndef _repeat_value(value: Any = None, repeat_count: Optional[int] = None) -> Observable:\n    <IND>"
      }
    ]
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/core/observable/returnvalue.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/observable/returnvalue.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/observable/returnvalue.py:9:30 Incompatible variable type [9]: scheduler is declared to have type `typing.Scheduler` but is used as type `None`.",
    "message": " scheduler is declared to have type `typing.Scheduler` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 9,
    "warning_line": "def _return_value(value: Any, scheduler: typing.Scheduler = None) -> Observable:"
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/core/observable/returnvalue.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/observable/returnvalue.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/observable/returnvalue.py:34:22 Incompatible parameter type [6]: Expected `typing.Callable[[typing.Observer[typing.Any], typing.Optional[typing.Scheduler]], typing.Disposable]` for 1st positional only parameter to call `rx.core.observable.observable.Observable.__init__` but got `typing.Callable[[Named(observer, typing.Observer[typing.Any]), Named(scheduler_, typing.Scheduler, default)], typing.Disposable]`.",
    "message": " Expected `typing.Callable[[typing.Observer[typing.Any], typing.Optional[typing.Scheduler]], typing.Disposable]` for 1st positional only parameter to call `rx.core.observable.observable.Observable.__init__` but got `typing.Callable[[Named(observer, typing.Observer[typing.Any]), Named(scheduler_, typing.Scheduler, default)], typing.Disposable]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 34,
    "warning_line": "    return Observable(subscribe)"
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/core/observable/returnvalue.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/observable/returnvalue.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/observable/returnvalue.py:37:39 Incompatible variable type [9]: scheduler is declared to have type `typing.Scheduler` but is used as type `None`.",
    "message": " scheduler is declared to have type `typing.Scheduler` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 37,
    "warning_line": "def _from_callable(supplier: Callable, scheduler: typing.Scheduler = None) -> Observable:"
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/core/observable/returnvalue.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/observable/returnvalue.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/observable/returnvalue.py:38:45 Incompatible variable type [9]: scheduler_ is declared to have type `typing.Scheduler` but is used as type `None`.",
    "message": " scheduler_ is declared to have type `typing.Scheduler` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 38,
    "warning_line": "    def subscribe(observer: typing.Observer, scheduler_: typing.Scheduler = None):"
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/core/observable/returnvalue.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/observable/returnvalue.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/observable/returnvalue.py:51:22 Incompatible parameter type [6]: Expected `typing.Callable[[typing.Observer[typing.Any], typing.Optional[typing.Scheduler]], typing.Disposable]` for 1st positional only parameter to call `rx.core.observable.observable.Observable.__init__` but got `typing.Callable[[Named(observer, typing.Observer[typing.Any]), Named(scheduler_, typing.Scheduler, default)], typing.Any]`.",
    "message": " Expected `typing.Callable[[typing.Observer[typing.Any], typing.Optional[typing.Scheduler]], typing.Disposable]` for 1st positional only parameter to call `rx.core.observable.observable.Observable.__init__` but got `typing.Callable[[Named(observer, typing.Observer[typing.Any]), Named(scheduler_, typing.Scheduler, default)], typing.Any]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 51,
    "warning_line": "    return Observable(subscribe)"
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/core/observable/throw.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/observable/throw.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/observable/throw.py:9:33 Incompatible variable type [9]: scheduler is declared to have type `typing.Scheduler` but is used as type `None`.",
    "message": " scheduler is declared to have type `typing.Scheduler` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 9,
    "warning_line": "def _throw(exception: Exception, scheduler: typing.Scheduler = None) -> Observable:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import Any\n\n",
        "source_code_len": 24,
        "target_code": "from typing import Any, Optional\n\n",
        "target_code_len": 34,
        "diff_format": "@@ -1,2 +1,2 @@\n-from typing import Any\n+from typing import Any, Optional\n \n",
        "source_code_with_indent": "from typing import Any\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Any, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _throw(exception: Exception, scheduler: typing.Scheduler = None) -> Observable:\n    exception = exception if isinstance(exception, Exception) else Exception(exception)\n\n    def subscribe(observer: typing.Observer, scheduler: typing.Scheduler = None) -> typing.Disposable:\n        _scheduler = scheduler or immediate_scheduler\n",
        "source_code_len": 331,
        "target_code": "\ndef _throw(exception: Exception, scheduler: Optional[typing.Scheduler] = None) -> Observable:\n    exception = exception if isinstance(exception, Exception) else Exception(exception)\n\n    def subscribe(observer: typing.Observer, scheduler: Optional[typing.Scheduler] = None) -> typing.Disposable:\n        _scheduler = scheduler or immediate_scheduler\n",
        "target_code_len": 351,
        "diff_format": "@@ -8,6 +8,6 @@\n \n-def _throw(exception: Exception, scheduler: typing.Scheduler = None) -> Observable:\n+def _throw(exception: Exception, scheduler: Optional[typing.Scheduler] = None) -> Observable:\n     exception = exception if isinstance(exception, Exception) else Exception(exception)\n \n-    def subscribe(observer: typing.Observer, scheduler: typing.Scheduler = None) -> typing.Disposable:\n+    def subscribe(observer: typing.Observer, scheduler: Optional[typing.Scheduler] = None) -> typing.Disposable:\n         _scheduler = scheduler or immediate_scheduler\n",
        "source_code_with_indent": "\ndef _throw(exception: Exception, scheduler: typing.Scheduler = None) -> Observable:\n    <IND>exception = exception if isinstance(exception, Exception) else Exception(exception)\n\n    def subscribe(observer: typing.Observer, scheduler: typing.Scheduler = None) -> typing.Disposable:\n        <IND>_scheduler = scheduler or immediate_scheduler\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\ndef _throw(exception: Exception, scheduler: Optional[typing.Scheduler] = None) -> Observable:\n    <IND>exception = exception if isinstance(exception, Exception) else Exception(exception)\n\n    def subscribe(observer: typing.Observer, scheduler: Optional[typing.Scheduler] = None) -> typing.Disposable:\n        <IND>_scheduler = scheduler or immediate_scheduler\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/core/observable/throw.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/observable/throw.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/observable/throw.py:12:45 Incompatible variable type [9]: scheduler is declared to have type `typing.Scheduler` but is used as type `None`.",
    "message": " scheduler is declared to have type `typing.Scheduler` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 12,
    "warning_line": "    def subscribe(observer: typing.Observer, scheduler: typing.Scheduler = None) -> typing.Disposable:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import Any\n\n",
        "source_code_len": 24,
        "target_code": "from typing import Any, Optional\n\n",
        "target_code_len": 34,
        "diff_format": "@@ -1,2 +1,2 @@\n-from typing import Any\n+from typing import Any, Optional\n \n",
        "source_code_with_indent": "from typing import Any\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Any, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _throw(exception: Exception, scheduler: typing.Scheduler = None) -> Observable:\n    exception = exception if isinstance(exception, Exception) else Exception(exception)\n\n    def subscribe(observer: typing.Observer, scheduler: typing.Scheduler = None) -> typing.Disposable:\n        _scheduler = scheduler or immediate_scheduler\n",
        "source_code_len": 331,
        "target_code": "\ndef _throw(exception: Exception, scheduler: Optional[typing.Scheduler] = None) -> Observable:\n    exception = exception if isinstance(exception, Exception) else Exception(exception)\n\n    def subscribe(observer: typing.Observer, scheduler: Optional[typing.Scheduler] = None) -> typing.Disposable:\n        _scheduler = scheduler or immediate_scheduler\n",
        "target_code_len": 351,
        "diff_format": "@@ -8,6 +8,6 @@\n \n-def _throw(exception: Exception, scheduler: typing.Scheduler = None) -> Observable:\n+def _throw(exception: Exception, scheduler: Optional[typing.Scheduler] = None) -> Observable:\n     exception = exception if isinstance(exception, Exception) else Exception(exception)\n \n-    def subscribe(observer: typing.Observer, scheduler: typing.Scheduler = None) -> typing.Disposable:\n+    def subscribe(observer: typing.Observer, scheduler: Optional[typing.Scheduler] = None) -> typing.Disposable:\n         _scheduler = scheduler or immediate_scheduler\n",
        "source_code_with_indent": "\ndef _throw(exception: Exception, scheduler: typing.Scheduler = None) -> Observable:\n    <IND>exception = exception if isinstance(exception, Exception) else Exception(exception)\n\n    def subscribe(observer: typing.Observer, scheduler: typing.Scheduler = None) -> typing.Disposable:\n        <IND>_scheduler = scheduler or immediate_scheduler\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\ndef _throw(exception: Exception, scheduler: Optional[typing.Scheduler] = None) -> Observable:\n    <IND>exception = exception if isinstance(exception, Exception) else Exception(exception)\n\n    def subscribe(observer: typing.Observer, scheduler: Optional[typing.Scheduler] = None) -> typing.Disposable:\n        <IND>_scheduler = scheduler or immediate_scheduler\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/core/observable/throw.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/observable/throw.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/observable/throw.py:19:22 Incompatible parameter type [6]: Expected `typing.Callable[[typing.Observer[typing.Any], typing.Optional[typing.Scheduler]], typing.Disposable]` for 1st positional only parameter to call `rx.core.observable.observable.Observable.__init__` but got `typing.Callable[[Named(observer, typing.Observer[typing.Any]), Named(scheduler, typing.Scheduler, default)], typing.Disposable]`.",
    "message": " Expected `typing.Callable[[typing.Observer[typing.Any], typing.Optional[typing.Scheduler]], typing.Disposable]` for 1st positional only parameter to call `rx.core.observable.observable.Observable.__init__` but got `typing.Callable[[Named(observer, typing.Observer[typing.Any]), Named(scheduler, typing.Scheduler, default)], typing.Disposable]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 19,
    "warning_line": "    return Observable(subscribe)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import Any\n\n",
        "source_code_len": 24,
        "target_code": "from typing import Any, Optional\n\n",
        "target_code_len": 34,
        "diff_format": "@@ -1,2 +1,2 @@\n-from typing import Any\n+from typing import Any, Optional\n \n",
        "source_code_with_indent": "from typing import Any\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Any, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _throw(exception: Exception, scheduler: typing.Scheduler = None) -> Observable:\n    exception = exception if isinstance(exception, Exception) else Exception(exception)\n\n    def subscribe(observer: typing.Observer, scheduler: typing.Scheduler = None) -> typing.Disposable:\n        _scheduler = scheduler or immediate_scheduler\n",
        "source_code_len": 331,
        "target_code": "\ndef _throw(exception: Exception, scheduler: Optional[typing.Scheduler] = None) -> Observable:\n    exception = exception if isinstance(exception, Exception) else Exception(exception)\n\n    def subscribe(observer: typing.Observer, scheduler: Optional[typing.Scheduler] = None) -> typing.Disposable:\n        _scheduler = scheduler or immediate_scheduler\n",
        "target_code_len": 351,
        "diff_format": "@@ -8,6 +8,6 @@\n \n-def _throw(exception: Exception, scheduler: typing.Scheduler = None) -> Observable:\n+def _throw(exception: Exception, scheduler: Optional[typing.Scheduler] = None) -> Observable:\n     exception = exception if isinstance(exception, Exception) else Exception(exception)\n \n-    def subscribe(observer: typing.Observer, scheduler: typing.Scheduler = None) -> typing.Disposable:\n+    def subscribe(observer: typing.Observer, scheduler: Optional[typing.Scheduler] = None) -> typing.Disposable:\n         _scheduler = scheduler or immediate_scheduler\n",
        "source_code_with_indent": "\ndef _throw(exception: Exception, scheduler: typing.Scheduler = None) -> Observable:\n    <IND>exception = exception if isinstance(exception, Exception) else Exception(exception)\n\n    def subscribe(observer: typing.Observer, scheduler: typing.Scheduler = None) -> typing.Disposable:\n        <IND>_scheduler = scheduler or immediate_scheduler\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\ndef _throw(exception: Exception, scheduler: Optional[typing.Scheduler] = None) -> Observable:\n    <IND>exception = exception if isinstance(exception, Exception) else Exception(exception)\n\n    def subscribe(observer: typing.Observer, scheduler: Optional[typing.Scheduler] = None) -> typing.Disposable:\n        <IND>_scheduler = scheduler or immediate_scheduler\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/core/observable/timer.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/observable/timer.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/observable/timer.py:8:35 Incompatible variable type [9]: scheduler is declared to have type `typing.Scheduler` but is used as type `None`.",
    "message": " scheduler is declared to have type `typing.Scheduler` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 8,
    "warning_line": "def observable_timer_date(duetime, scheduler: typing.Scheduler = None):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from datetime import datetime\n\n",
        "source_code_len": 31,
        "target_code": "from datetime import datetime\nfrom typing import Optional\n\n",
        "target_code_len": 59,
        "diff_format": "@@ -1,2 +1,3 @@\n from datetime import datetime\n+from typing import Optional\n \n",
        "source_code_with_indent": "from datetime import datetime\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from datetime import datetime\nfrom typing import Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef observable_timer_date(duetime, scheduler: typing.Scheduler = None):\n    def subscribe(observer, scheduler_=None):\n",
        "source_code_len": 119,
        "target_code": "\ndef observable_timer_date(duetime, scheduler: Optional[typing.Scheduler] = None):\n    def subscribe(observer, scheduler_=None):\n",
        "target_code_len": 129,
        "diff_format": "@@ -7,3 +8,3 @@\n \n-def observable_timer_date(duetime, scheduler: typing.Scheduler = None):\n+def observable_timer_date(duetime, scheduler: Optional[typing.Scheduler] = None):\n     def subscribe(observer, scheduler_=None):\n",
        "source_code_with_indent": "\ndef observable_timer_date(duetime, scheduler: typing.Scheduler = None):\n    <IND>def subscribe(observer, scheduler_=None):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\ndef observable_timer_date(duetime, scheduler: Optional[typing.Scheduler] = None):\n    <IND>def subscribe(observer, scheduler_=None):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/core/observable/timer.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/observable/timer.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/observable/timer.py:20:57 Incompatible variable type [9]: scheduler is declared to have type `typing.Scheduler` but is used as type `None`.",
    "message": " scheduler is declared to have type `typing.Scheduler` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 20,
    "warning_line": "def observable_timer_duetime_and_period(duetime, period, scheduler: typing.Scheduler = None) -> Observable:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from datetime import datetime\n\n",
        "source_code_len": 31,
        "target_code": "from datetime import datetime\nfrom typing import Optional\n\n",
        "target_code_len": 59,
        "diff_format": "@@ -1,2 +1,3 @@\n from datetime import datetime\n+from typing import Optional\n \n",
        "source_code_with_indent": "from datetime import datetime\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from datetime import datetime\nfrom typing import Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef observable_timer_duetime_and_period(duetime, period, scheduler: typing.Scheduler = None) -> Observable:\n    def subscribe(observer, scheduler_=None):\n",
        "source_code_len": 155,
        "target_code": "\ndef observable_timer_duetime_and_period(duetime, period, scheduler: Optional[typing.Scheduler] = None) -> Observable:\n    def subscribe(observer, scheduler_=None):\n",
        "target_code_len": 165,
        "diff_format": "@@ -19,3 +20,3 @@\n \n-def observable_timer_duetime_and_period(duetime, period, scheduler: typing.Scheduler = None) -> Observable:\n+def observable_timer_duetime_and_period(duetime, period, scheduler: Optional[typing.Scheduler] = None) -> Observable:\n     def subscribe(observer, scheduler_=None):\n",
        "source_code_with_indent": "\n<DED>def observable_timer_duetime_and_period(duetime, period, scheduler: typing.Scheduler = None) -> Observable:\n    <IND>def subscribe(observer, scheduler_=None):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def observable_timer_duetime_and_period(duetime, period, scheduler: Optional[typing.Scheduler] = None) -> Observable:\n    <IND>def subscribe(observer, scheduler_=None):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/core/observable/timer.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/observable/timer.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/observable/timer.py:48:60 Incompatible variable type [9]: scheduler is declared to have type `typing.Scheduler` but is used as type `None`.",
    "message": " scheduler is declared to have type `typing.Scheduler` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 48,
    "warning_line": "def observable_timer_timespan(duetime: typing.RelativeTime, scheduler: typing.Scheduler = None) -> Observable:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from datetime import datetime\n\n",
        "source_code_len": 31,
        "target_code": "from datetime import datetime\nfrom typing import Optional\n\n",
        "target_code_len": 59,
        "diff_format": "@@ -1,2 +1,3 @@\n from datetime import datetime\n+from typing import Optional\n \n",
        "source_code_with_indent": "from datetime import datetime\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from datetime import datetime\nfrom typing import Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef observable_timer_timespan(duetime: typing.RelativeTime, scheduler: typing.Scheduler = None) -> Observable:\n    def subscribe(observer, scheduler_=None):\n",
        "source_code_len": 158,
        "target_code": "\ndef observable_timer_timespan(duetime: typing.RelativeTime, scheduler: Optional[typing.Scheduler] = None) -> Observable:\n    def subscribe(observer, scheduler_=None):\n",
        "target_code_len": 168,
        "diff_format": "@@ -47,3 +48,3 @@\n \n-def observable_timer_timespan(duetime: typing.RelativeTime, scheduler: typing.Scheduler = None) -> Observable:\n+def observable_timer_timespan(duetime: typing.RelativeTime, scheduler: Optional[typing.Scheduler] = None) -> Observable:\n     def subscribe(observer, scheduler_=None):\n",
        "source_code_with_indent": "\n<DED>def observable_timer_timespan(duetime: typing.RelativeTime, scheduler: typing.Scheduler = None) -> Observable:\n    <IND>def subscribe(observer, scheduler_=None):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def observable_timer_timespan(duetime: typing.RelativeTime, scheduler: Optional[typing.Scheduler] = None) -> Observable:\n    <IND>def subscribe(observer, scheduler_=None):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/core/observable/timer.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/observable/timer.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/observable/timer.py:62:41 Incompatible variable type [9]: scheduler is declared to have type `typing.Scheduler` but is used as type `None`.",
    "message": " scheduler is declared to have type `typing.Scheduler` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 62,
    "warning_line": "                                         scheduler: typing.Scheduler = None) -> Observable:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from datetime import datetime\n\n",
        "source_code_len": 31,
        "target_code": "from datetime import datetime\nfrom typing import Optional\n\n",
        "target_code_len": 59,
        "diff_format": "@@ -1,2 +1,3 @@\n from datetime import datetime\n+from typing import Optional\n \n",
        "source_code_with_indent": "from datetime import datetime\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from datetime import datetime\nfrom typing import Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef observable_timer_duetime_and_period(duetime, period, scheduler: typing.Scheduler = None) -> Observable:\n    def subscribe(observer, scheduler_=None):\n",
        "source_code_len": 155,
        "target_code": "\ndef observable_timer_duetime_and_period(duetime, period, scheduler: Optional[typing.Scheduler] = None) -> Observable:\n    def subscribe(observer, scheduler_=None):\n",
        "target_code_len": 165,
        "diff_format": "@@ -19,3 +20,3 @@\n \n-def observable_timer_duetime_and_period(duetime, period, scheduler: typing.Scheduler = None) -> Observable:\n+def observable_timer_duetime_and_period(duetime, period, scheduler: Optional[typing.Scheduler] = None) -> Observable:\n     def subscribe(observer, scheduler_=None):\n",
        "source_code_with_indent": "\n<DED>def observable_timer_duetime_and_period(duetime, period, scheduler: typing.Scheduler = None) -> Observable:\n    <IND>def subscribe(observer, scheduler_=None):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def observable_timer_duetime_and_period(duetime, period, scheduler: Optional[typing.Scheduler] = None) -> Observable:\n    <IND>def subscribe(observer, scheduler_=None):\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef observable_timer_timespan_and_period(duetime: typing.RelativeTime, period: typing.RelativeTime,\n                                         scheduler: typing.Scheduler = None) -> Observable:\n    if duetime == period:\n",
        "source_code_len": 219,
        "target_code": "\ndef observable_timer_timespan_and_period(duetime: typing.RelativeTime,\n                                         period: typing.RelativeTime,\n                                         scheduler: Optional[typing.Scheduler] = None\n                                         ) -> Observable:\n    if duetime == period:\n",
        "target_code_len": 312,
        "diff_format": "@@ -60,4 +61,6 @@\n \n-def observable_timer_timespan_and_period(duetime: typing.RelativeTime, period: typing.RelativeTime,\n-                                         scheduler: typing.Scheduler = None) -> Observable:\n+def observable_timer_timespan_and_period(duetime: typing.RelativeTime,\n+                                         period: typing.RelativeTime,\n+                                         scheduler: Optional[typing.Scheduler] = None\n+                                         ) -> Observable:\n     if duetime == period:\n",
        "source_code_with_indent": "\n<DED>def observable_timer_timespan_and_period(duetime: typing.RelativeTime, period: typing.RelativeTime,\n                                         scheduler: typing.Scheduler = None) -> Observable:\n    <IND>if duetime == period:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def observable_timer_timespan_and_period(duetime: typing.RelativeTime,\n                                         period: typing.RelativeTime,\n                                         scheduler: Optional[typing.Scheduler] = None\n                                         ) -> Observable:\n    <IND>if duetime == period:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/core/observable/timer.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/observable/timer.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/observable/timer.py:76:51 Incompatible variable type [9]: period is declared to have type `typing.Union[datetime.timedelta, float]` but is used as type `None`.",
    "message": " period is declared to have type `typing.Union[datetime.timedelta, float]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 76,
    "warning_line": "def _timer(duetime: typing.AbsoluteOrRelativeTime, period: typing.RelativeTime = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from datetime import datetime\n\n",
        "source_code_len": 31,
        "target_code": "from datetime import datetime\nfrom typing import Optional\n\n",
        "target_code_len": 59,
        "diff_format": "@@ -1,2 +1,3 @@\n from datetime import datetime\n+from typing import Optional\n \n",
        "source_code_with_indent": "from datetime import datetime\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from datetime import datetime\nfrom typing import Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef observable_timer_date(duetime, scheduler: typing.Scheduler = None):\n    def subscribe(observer, scheduler_=None):\n",
        "source_code_len": 119,
        "target_code": "\ndef observable_timer_date(duetime, scheduler: Optional[typing.Scheduler] = None):\n    def subscribe(observer, scheduler_=None):\n",
        "target_code_len": 129,
        "diff_format": "@@ -7,3 +8,3 @@\n \n-def observable_timer_date(duetime, scheduler: typing.Scheduler = None):\n+def observable_timer_date(duetime, scheduler: Optional[typing.Scheduler] = None):\n     def subscribe(observer, scheduler_=None):\n",
        "source_code_with_indent": "\ndef observable_timer_date(duetime, scheduler: typing.Scheduler = None):\n    <IND>def subscribe(observer, scheduler_=None):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\ndef observable_timer_date(duetime, scheduler: Optional[typing.Scheduler] = None):\n    <IND>def subscribe(observer, scheduler_=None):\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef observable_timer_duetime_and_period(duetime, period, scheduler: typing.Scheduler = None) -> Observable:\n    def subscribe(observer, scheduler_=None):\n",
        "source_code_len": 155,
        "target_code": "\ndef observable_timer_duetime_and_period(duetime, period, scheduler: Optional[typing.Scheduler] = None) -> Observable:\n    def subscribe(observer, scheduler_=None):\n",
        "target_code_len": 165,
        "diff_format": "@@ -19,3 +20,3 @@\n \n-def observable_timer_duetime_and_period(duetime, period, scheduler: typing.Scheduler = None) -> Observable:\n+def observable_timer_duetime_and_period(duetime, period, scheduler: Optional[typing.Scheduler] = None) -> Observable:\n     def subscribe(observer, scheduler_=None):\n",
        "source_code_with_indent": "\n<DED>def observable_timer_duetime_and_period(duetime, period, scheduler: typing.Scheduler = None) -> Observable:\n    <IND>def subscribe(observer, scheduler_=None):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def observable_timer_duetime_and_period(duetime, period, scheduler: Optional[typing.Scheduler] = None) -> Observable:\n    <IND>def subscribe(observer, scheduler_=None):\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef observable_timer_timespan(duetime: typing.RelativeTime, scheduler: typing.Scheduler = None) -> Observable:\n    def subscribe(observer, scheduler_=None):\n",
        "source_code_len": 158,
        "target_code": "\ndef observable_timer_timespan(duetime: typing.RelativeTime, scheduler: Optional[typing.Scheduler] = None) -> Observable:\n    def subscribe(observer, scheduler_=None):\n",
        "target_code_len": 168,
        "diff_format": "@@ -47,3 +48,3 @@\n \n-def observable_timer_timespan(duetime: typing.RelativeTime, scheduler: typing.Scheduler = None) -> Observable:\n+def observable_timer_timespan(duetime: typing.RelativeTime, scheduler: Optional[typing.Scheduler] = None) -> Observable:\n     def subscribe(observer, scheduler_=None):\n",
        "source_code_with_indent": "\n<DED>def observable_timer_timespan(duetime: typing.RelativeTime, scheduler: typing.Scheduler = None) -> Observable:\n    <IND>def subscribe(observer, scheduler_=None):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def observable_timer_timespan(duetime: typing.RelativeTime, scheduler: Optional[typing.Scheduler] = None) -> Observable:\n    <IND>def subscribe(observer, scheduler_=None):\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef observable_timer_timespan_and_period(duetime: typing.RelativeTime, period: typing.RelativeTime,\n                                         scheduler: typing.Scheduler = None) -> Observable:\n    if duetime == period:\n",
        "source_code_len": 219,
        "target_code": "\ndef observable_timer_timespan_and_period(duetime: typing.RelativeTime,\n                                         period: typing.RelativeTime,\n                                         scheduler: Optional[typing.Scheduler] = None\n                                         ) -> Observable:\n    if duetime == period:\n",
        "target_code_len": 312,
        "diff_format": "@@ -60,4 +61,6 @@\n \n-def observable_timer_timespan_and_period(duetime: typing.RelativeTime, period: typing.RelativeTime,\n-                                         scheduler: typing.Scheduler = None) -> Observable:\n+def observable_timer_timespan_and_period(duetime: typing.RelativeTime,\n+                                         period: typing.RelativeTime,\n+                                         scheduler: Optional[typing.Scheduler] = None\n+                                         ) -> Observable:\n     if duetime == period:\n",
        "source_code_with_indent": "\n<DED>def observable_timer_timespan_and_period(duetime: typing.RelativeTime, period: typing.RelativeTime,\n                                         scheduler: typing.Scheduler = None) -> Observable:\n    <IND>if duetime == period:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def observable_timer_timespan_and_period(duetime: typing.RelativeTime,\n                                         period: typing.RelativeTime,\n                                         scheduler: Optional[typing.Scheduler] = None\n                                         ) -> Observable:\n    <IND>if duetime == period:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _timer(duetime: typing.AbsoluteOrRelativeTime, period: typing.RelativeTime = None,\n           scheduler: typing.Scheduler = None) -> Observable:\n    if isinstance(duetime, datetime):\n",
        "source_code_len": 188,
        "target_code": "\ndef _timer(duetime: typing.AbsoluteOrRelativeTime,\n           period: Optional[typing.RelativeTime] = None,\n           scheduler: Optional[typing.Scheduler] = None\n           ) -> Observable:\n    if isinstance(duetime, datetime):\n",
        "target_code_len": 231,
        "diff_format": "@@ -75,4 +78,6 @@\n \n-def _timer(duetime: typing.AbsoluteOrRelativeTime, period: typing.RelativeTime = None,\n-           scheduler: typing.Scheduler = None) -> Observable:\n+def _timer(duetime: typing.AbsoluteOrRelativeTime,\n+           period: Optional[typing.RelativeTime] = None,\n+           scheduler: Optional[typing.Scheduler] = None\n+           ) -> Observable:\n     if isinstance(duetime, datetime):\n",
        "source_code_with_indent": "\n<DED>def _timer(duetime: typing.AbsoluteOrRelativeTime, period: typing.RelativeTime = None,\n           scheduler: typing.Scheduler = None) -> Observable:\n    <IND>if isinstance(duetime, datetime):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def _timer(duetime: typing.AbsoluteOrRelativeTime,\n           period: Optional[typing.RelativeTime] = None,\n           scheduler: Optional[typing.Scheduler] = None\n           ) -> Observable:\n    <IND>if isinstance(duetime, datetime):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/core/observable/timer.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/observable/timer.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/observable/timer.py:77:11 Incompatible variable type [9]: scheduler is declared to have type `typing.Scheduler` but is used as type `None`.",
    "message": " scheduler is declared to have type `typing.Scheduler` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 77,
    "warning_line": "           scheduler: typing.Scheduler = None) -> Observable:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from datetime import datetime\n\n",
        "source_code_len": 31,
        "target_code": "from datetime import datetime\nfrom typing import Optional\n\n",
        "target_code_len": 59,
        "diff_format": "@@ -1,2 +1,3 @@\n from datetime import datetime\n+from typing import Optional\n \n",
        "source_code_with_indent": "from datetime import datetime\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from datetime import datetime\nfrom typing import Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef observable_timer_date(duetime, scheduler: typing.Scheduler = None):\n    def subscribe(observer, scheduler_=None):\n",
        "source_code_len": 119,
        "target_code": "\ndef observable_timer_date(duetime, scheduler: Optional[typing.Scheduler] = None):\n    def subscribe(observer, scheduler_=None):\n",
        "target_code_len": 129,
        "diff_format": "@@ -7,3 +8,3 @@\n \n-def observable_timer_date(duetime, scheduler: typing.Scheduler = None):\n+def observable_timer_date(duetime, scheduler: Optional[typing.Scheduler] = None):\n     def subscribe(observer, scheduler_=None):\n",
        "source_code_with_indent": "\ndef observable_timer_date(duetime, scheduler: typing.Scheduler = None):\n    <IND>def subscribe(observer, scheduler_=None):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\ndef observable_timer_date(duetime, scheduler: Optional[typing.Scheduler] = None):\n    <IND>def subscribe(observer, scheduler_=None):\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef observable_timer_duetime_and_period(duetime, period, scheduler: typing.Scheduler = None) -> Observable:\n    def subscribe(observer, scheduler_=None):\n",
        "source_code_len": 155,
        "target_code": "\ndef observable_timer_duetime_and_period(duetime, period, scheduler: Optional[typing.Scheduler] = None) -> Observable:\n    def subscribe(observer, scheduler_=None):\n",
        "target_code_len": 165,
        "diff_format": "@@ -19,3 +20,3 @@\n \n-def observable_timer_duetime_and_period(duetime, period, scheduler: typing.Scheduler = None) -> Observable:\n+def observable_timer_duetime_and_period(duetime, period, scheduler: Optional[typing.Scheduler] = None) -> Observable:\n     def subscribe(observer, scheduler_=None):\n",
        "source_code_with_indent": "\n<DED>def observable_timer_duetime_and_period(duetime, period, scheduler: typing.Scheduler = None) -> Observable:\n    <IND>def subscribe(observer, scheduler_=None):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def observable_timer_duetime_and_period(duetime, period, scheduler: Optional[typing.Scheduler] = None) -> Observable:\n    <IND>def subscribe(observer, scheduler_=None):\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef observable_timer_timespan(duetime: typing.RelativeTime, scheduler: typing.Scheduler = None) -> Observable:\n    def subscribe(observer, scheduler_=None):\n",
        "source_code_len": 158,
        "target_code": "\ndef observable_timer_timespan(duetime: typing.RelativeTime, scheduler: Optional[typing.Scheduler] = None) -> Observable:\n    def subscribe(observer, scheduler_=None):\n",
        "target_code_len": 168,
        "diff_format": "@@ -47,3 +48,3 @@\n \n-def observable_timer_timespan(duetime: typing.RelativeTime, scheduler: typing.Scheduler = None) -> Observable:\n+def observable_timer_timespan(duetime: typing.RelativeTime, scheduler: Optional[typing.Scheduler] = None) -> Observable:\n     def subscribe(observer, scheduler_=None):\n",
        "source_code_with_indent": "\n<DED>def observable_timer_timespan(duetime: typing.RelativeTime, scheduler: typing.Scheduler = None) -> Observable:\n    <IND>def subscribe(observer, scheduler_=None):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def observable_timer_timespan(duetime: typing.RelativeTime, scheduler: Optional[typing.Scheduler] = None) -> Observable:\n    <IND>def subscribe(observer, scheduler_=None):\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef observable_timer_timespan_and_period(duetime: typing.RelativeTime, period: typing.RelativeTime,\n                                         scheduler: typing.Scheduler = None) -> Observable:\n    if duetime == period:\n",
        "source_code_len": 219,
        "target_code": "\ndef observable_timer_timespan_and_period(duetime: typing.RelativeTime,\n                                         period: typing.RelativeTime,\n                                         scheduler: Optional[typing.Scheduler] = None\n                                         ) -> Observable:\n    if duetime == period:\n",
        "target_code_len": 312,
        "diff_format": "@@ -60,4 +61,6 @@\n \n-def observable_timer_timespan_and_period(duetime: typing.RelativeTime, period: typing.RelativeTime,\n-                                         scheduler: typing.Scheduler = None) -> Observable:\n+def observable_timer_timespan_and_period(duetime: typing.RelativeTime,\n+                                         period: typing.RelativeTime,\n+                                         scheduler: Optional[typing.Scheduler] = None\n+                                         ) -> Observable:\n     if duetime == period:\n",
        "source_code_with_indent": "\n<DED>def observable_timer_timespan_and_period(duetime: typing.RelativeTime, period: typing.RelativeTime,\n                                         scheduler: typing.Scheduler = None) -> Observable:\n    <IND>if duetime == period:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def observable_timer_timespan_and_period(duetime: typing.RelativeTime,\n                                         period: typing.RelativeTime,\n                                         scheduler: Optional[typing.Scheduler] = None\n                                         ) -> Observable:\n    <IND>if duetime == period:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _timer(duetime: typing.AbsoluteOrRelativeTime, period: typing.RelativeTime = None,\n           scheduler: typing.Scheduler = None) -> Observable:\n    if isinstance(duetime, datetime):\n",
        "source_code_len": 188,
        "target_code": "\ndef _timer(duetime: typing.AbsoluteOrRelativeTime,\n           period: Optional[typing.RelativeTime] = None,\n           scheduler: Optional[typing.Scheduler] = None\n           ) -> Observable:\n    if isinstance(duetime, datetime):\n",
        "target_code_len": 231,
        "diff_format": "@@ -75,4 +78,6 @@\n \n-def _timer(duetime: typing.AbsoluteOrRelativeTime, period: typing.RelativeTime = None,\n-           scheduler: typing.Scheduler = None) -> Observable:\n+def _timer(duetime: typing.AbsoluteOrRelativeTime,\n+           period: Optional[typing.RelativeTime] = None,\n+           scheduler: Optional[typing.Scheduler] = None\n+           ) -> Observable:\n     if isinstance(duetime, datetime):\n",
        "source_code_with_indent": "\n<DED>def _timer(duetime: typing.AbsoluteOrRelativeTime, period: typing.RelativeTime = None,\n           scheduler: typing.Scheduler = None) -> Observable:\n    <IND>if isinstance(duetime, datetime):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def _timer(duetime: typing.AbsoluteOrRelativeTime,\n           period: Optional[typing.RelativeTime] = None,\n           scheduler: Optional[typing.Scheduler] = None\n           ) -> Observable:\n    <IND>if isinstance(duetime, datetime):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/core/operators/bufferwithtime.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/operators/bufferwithtime.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/operators/bufferwithtime.py:7:53 Incompatible variable type [9]: timeshift is declared to have type `typing.Union[datetime.timedelta, float]` but is used as type `None`.",
    "message": " timeshift is declared to have type `typing.Union[datetime.timedelta, float]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 7,
    "warning_line": "def _buffer_with_time(timespan: typing.RelativeTime, timeshift: typing.RelativeTime = None,"
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/core/operators/bufferwithtime.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/operators/bufferwithtime.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/operators/bufferwithtime.py:8:22 Incompatible variable type [9]: scheduler is declared to have type `typing.Scheduler` but is used as type `None`.",
    "message": " scheduler is declared to have type `typing.Scheduler` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 8,
    "warning_line": "                      scheduler: typing.Scheduler = None) -> Callable[[Observable], Observable]:"
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/core/operators/count.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/operators/count.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/operators/count.py:8:11 Incompatible variable type [9]: predicate is declared to have type `typing.Callable[[typing.Any], bool]` but is used as type `None`.",
    "message": " predicate is declared to have type `typing.Callable[[typing.Any], bool]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 8,
    "warning_line": "def _count(predicate: Predicate = None) -> Callable[[Observable], Observable]:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import Callable\nfrom rx.core import Observable, pipe\n",
        "source_code_len": 65,
        "target_code": "from typing import Callable, Optional\nfrom rx.core import Observable, pipe\n",
        "target_code_len": 75,
        "diff_format": "@@ -1,2 +1,2 @@\n-from typing import Callable\n+from typing import Callable, Optional\n from rx.core import Observable, pipe\n",
        "source_code_with_indent": "from typing import Callable\nfrom rx.core import Observable, pipe\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Callable, Optional\nfrom rx.core import Observable, pipe\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _count(predicate: Predicate = None) -> Callable[[Observable], Observable]:\n\n",
        "source_code_len": 81,
        "target_code": "\ndef _count(predicate: Optional[Predicate] = None) -> Callable[[Observable], Observable]:\n\n",
        "target_code_len": 91,
        "diff_format": "@@ -7,3 +7,3 @@\n \n-def _count(predicate: Predicate = None) -> Callable[[Observable], Observable]:\n+def _count(predicate: Optional[Predicate] = None) -> Callable[[Observable], Observable]:\n \n",
        "source_code_with_indent": "\ndef _count(predicate: Predicate = None) -> Callable[[Observable], Observable]:\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\ndef _count(predicate: Optional[Predicate] = None) -> Callable[[Observable], Observable]:\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/core/operators/delay.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/operators/delay.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/operators/delay.py:18:30 Incompatible variable type [9]: scheduler is declared to have type `typing.Scheduler` but is used as type `None`.",
    "message": " scheduler is declared to have type `typing.Scheduler` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 18,
    "warning_line": "                              scheduler: typing.Scheduler = None) -> Observable:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import Callable\nfrom datetime import datetime, timedelta\n",
        "source_code_len": 69,
        "target_code": "from typing import Callable, Optional\nfrom datetime import datetime, timedelta\n",
        "target_code_len": 79,
        "diff_format": "@@ -1,2 +1,2 @@\n-from typing import Callable\n+from typing import Callable, Optional\n from datetime import datetime, timedelta\n",
        "source_code_with_indent": "from typing import Callable\nfrom datetime import datetime, timedelta\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Callable, Optional\nfrom datetime import datetime, timedelta\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def observable_delay_timespan(source: Observable, duetime: typing.RelativeTime,\n                              scheduler: typing.Scheduler = None) -> Observable:\n\n",
        "source_code_len": 162,
        "target_code": "def observable_delay_timespan(source: Observable, duetime: typing.RelativeTime,\n                              scheduler: Optional[typing.Scheduler] = None) -> Observable:\n\n",
        "target_code_len": 172,
        "diff_format": "@@ -17,3 +17,3 @@\n def observable_delay_timespan(source: Observable, duetime: typing.RelativeTime,\n-                              scheduler: typing.Scheduler = None) -> Observable:\n+                              scheduler: Optional[typing.Scheduler] = None) -> Observable:\n \n",
        "source_code_with_indent": "<DED><DED>def observable_delay_timespan(source: Observable, duetime: typing.RelativeTime,\n                              scheduler: typing.Scheduler = None) -> Observable:\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED><DED>def observable_delay_timespan(source: Observable, duetime: typing.RelativeTime,\n                              scheduler: Optional[typing.Scheduler] = None) -> Observable:\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/core/operators/delay.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/operators/delay.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/operators/delay.py:102:41 Incompatible variable type [9]: scheduler is declared to have type `typing.Scheduler` but is used as type `None`.",
    "message": " scheduler is declared to have type `typing.Scheduler` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 102,
    "warning_line": "def _delay(duetime: typing.RelativeTime, scheduler: typing.Scheduler = None) -> Callable[[Observable], Observable]:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import Callable\nfrom datetime import datetime, timedelta\n",
        "source_code_len": 69,
        "target_code": "from typing import Callable, Optional\nfrom datetime import datetime, timedelta\n",
        "target_code_len": 79,
        "diff_format": "@@ -1,2 +1,2 @@\n-from typing import Callable\n+from typing import Callable, Optional\n from datetime import datetime, timedelta\n",
        "source_code_with_indent": "from typing import Callable\nfrom datetime import datetime, timedelta\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Callable, Optional\nfrom datetime import datetime, timedelta\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def observable_delay_timespan(source: Observable, duetime: typing.RelativeTime,\n                              scheduler: typing.Scheduler = None) -> Observable:\n\n",
        "source_code_len": 162,
        "target_code": "def observable_delay_timespan(source: Observable, duetime: typing.RelativeTime,\n                              scheduler: Optional[typing.Scheduler] = None) -> Observable:\n\n",
        "target_code_len": 172,
        "diff_format": "@@ -17,3 +17,3 @@\n def observable_delay_timespan(source: Observable, duetime: typing.RelativeTime,\n-                              scheduler: typing.Scheduler = None) -> Observable:\n+                              scheduler: Optional[typing.Scheduler] = None) -> Observable:\n \n",
        "source_code_with_indent": "<DED><DED>def observable_delay_timespan(source: Observable, duetime: typing.RelativeTime,\n                              scheduler: typing.Scheduler = None) -> Observable:\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED><DED>def observable_delay_timespan(source: Observable, duetime: typing.RelativeTime,\n                              scheduler: Optional[typing.Scheduler] = None) -> Observable:\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _delay(duetime: typing.RelativeTime, scheduler: typing.Scheduler = None) -> Callable[[Observable], Observable]:\n    def delay(source: Observable) -> Observable:\n",
        "source_code_len": 166,
        "target_code": "\ndef _delay(duetime: typing.RelativeTime, scheduler: Optional[typing.Scheduler] = None) -> Callable[[Observable], Observable]:\n    def delay(source: Observable) -> Observable:\n",
        "target_code_len": 176,
        "diff_format": "@@ -101,3 +101,3 @@\n \n-def _delay(duetime: typing.RelativeTime, scheduler: typing.Scheduler = None) -> Callable[[Observable], Observable]:\n+def _delay(duetime: typing.RelativeTime, scheduler: Optional[typing.Scheduler] = None) -> Callable[[Observable], Observable]:\n     def delay(source: Observable) -> Observable:\n",
        "source_code_with_indent": "\n<DED>def _delay(duetime: typing.RelativeTime, scheduler: typing.Scheduler = None) -> Callable[[Observable], Observable]:\n    <IND>def delay(source: Observable) -> Observable:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def _delay(duetime: typing.RelativeTime, scheduler: Optional[typing.Scheduler] = None) -> Callable[[Observable], Observable]:\n    <IND>def delay(source: Observable) -> Observable:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/core/operators/delaysubscription.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/operators/delaysubscription.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/operators/delaysubscription.py:9:64 Incompatible variable type [9]: scheduler is declared to have type `typing.Scheduler` but is used as type `None`.",
    "message": " scheduler is declared to have type `typing.Scheduler` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 9,
    "warning_line": "def _delay_subscription(duetime: typing.AbsoluteOrRelativeTime, scheduler: typing.Scheduler = None"
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/core/operators/do.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/operators/do.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/operators/do.py:8:15 Incompatible variable type [9]: on_next is declared to have type `typing.Callable[[typing.Any], None]` but is used as type `None`.",
    "message": " on_next is declared to have type `typing.Callable[[typing.Any], None]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 8,
    "warning_line": "def _do_action(on_next: typing.OnNext = None, on_error: typing.OnError = None, on_completed: typing.OnCompleted = None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import Callable\n\n",
        "source_code_len": 29,
        "target_code": "from typing import Callable, Optional\n\n",
        "target_code_len": 39,
        "diff_format": "@@ -1,2 +1,2 @@\n-from typing import Callable\n+from typing import Callable, Optional\n \n",
        "source_code_with_indent": "from typing import Callable\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Callable, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _do_action(on_next: typing.OnNext = None, on_error: typing.OnError = None, on_completed: typing.OnCompleted = None\n               ) -> Callable[[Observable], Observable]:\n",
        "source_code_len": 176,
        "target_code": "\ndef _do_action(on_next: Optional[typing.OnNext] = None,\n               on_error: Optional[typing.OnError] = None,\n               on_completed: Optional[typing.OnCompleted] = None\n               ) -> Callable[[Observable], Observable]:\n",
        "target_code_len": 236,
        "diff_format": "@@ -7,3 +7,5 @@\n \n-def _do_action(on_next: typing.OnNext = None, on_error: typing.OnError = None, on_completed: typing.OnCompleted = None\n+def _do_action(on_next: Optional[typing.OnNext] = None,\n+               on_error: Optional[typing.OnError] = None,\n+               on_completed: Optional[typing.OnCompleted] = None\n                ) -> Callable[[Observable], Observable]:\n",
        "source_code_with_indent": "\ndef _do_action(on_next: typing.OnNext = None, on_error: typing.OnError = None, on_completed: typing.OnCompleted = None\n               ) -> Callable[[Observable], Observable]:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\ndef _do_action(on_next: Optional[typing.OnNext] = None,\n               on_error: Optional[typing.OnError] = None,\n               on_completed: Optional[typing.OnCompleted] = None\n               ) -> Callable[[Observable], Observable]:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/core/operators/do.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/operators/do.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/operators/do.py:8:46 Incompatible variable type [9]: on_error is declared to have type `typing.Callable[[Exception], None]` but is used as type `None`.",
    "message": " on_error is declared to have type `typing.Callable[[Exception], None]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 8,
    "warning_line": "def _do_action(on_next: typing.OnNext = None, on_error: typing.OnError = None, on_completed: typing.OnCompleted = None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import Callable\n\n",
        "source_code_len": 29,
        "target_code": "from typing import Callable, Optional\n\n",
        "target_code_len": 39,
        "diff_format": "@@ -1,2 +1,2 @@\n-from typing import Callable\n+from typing import Callable, Optional\n \n",
        "source_code_with_indent": "from typing import Callable\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Callable, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _do_action(on_next: typing.OnNext = None, on_error: typing.OnError = None, on_completed: typing.OnCompleted = None\n               ) -> Callable[[Observable], Observable]:\n",
        "source_code_len": 176,
        "target_code": "\ndef _do_action(on_next: Optional[typing.OnNext] = None,\n               on_error: Optional[typing.OnError] = None,\n               on_completed: Optional[typing.OnCompleted] = None\n               ) -> Callable[[Observable], Observable]:\n",
        "target_code_len": 236,
        "diff_format": "@@ -7,3 +7,5 @@\n \n-def _do_action(on_next: typing.OnNext = None, on_error: typing.OnError = None, on_completed: typing.OnCompleted = None\n+def _do_action(on_next: Optional[typing.OnNext] = None,\n+               on_error: Optional[typing.OnError] = None,\n+               on_completed: Optional[typing.OnCompleted] = None\n                ) -> Callable[[Observable], Observable]:\n",
        "source_code_with_indent": "\ndef _do_action(on_next: typing.OnNext = None, on_error: typing.OnError = None, on_completed: typing.OnCompleted = None\n               ) -> Callable[[Observable], Observable]:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\ndef _do_action(on_next: Optional[typing.OnNext] = None,\n               on_error: Optional[typing.OnError] = None,\n               on_completed: Optional[typing.OnCompleted] = None\n               ) -> Callable[[Observable], Observable]:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/core/operators/do.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/operators/do.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/operators/do.py:8:79 Incompatible variable type [9]: on_completed is declared to have type `typing.Callable[[], None]` but is used as type `None`.",
    "message": " on_completed is declared to have type `typing.Callable[[], None]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 8,
    "warning_line": "def _do_action(on_next: typing.OnNext = None, on_error: typing.OnError = None, on_completed: typing.OnCompleted = None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import Callable\n\n",
        "source_code_len": 29,
        "target_code": "from typing import Callable, Optional\n\n",
        "target_code_len": 39,
        "diff_format": "@@ -1,2 +1,2 @@\n-from typing import Callable\n+from typing import Callable, Optional\n \n",
        "source_code_with_indent": "from typing import Callable\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Callable, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _do_action(on_next: typing.OnNext = None, on_error: typing.OnError = None, on_completed: typing.OnCompleted = None\n               ) -> Callable[[Observable], Observable]:\n",
        "source_code_len": 176,
        "target_code": "\ndef _do_action(on_next: Optional[typing.OnNext] = None,\n               on_error: Optional[typing.OnError] = None,\n               on_completed: Optional[typing.OnCompleted] = None\n               ) -> Callable[[Observable], Observable]:\n",
        "target_code_len": 236,
        "diff_format": "@@ -7,3 +7,5 @@\n \n-def _do_action(on_next: typing.OnNext = None, on_error: typing.OnError = None, on_completed: typing.OnCompleted = None\n+def _do_action(on_next: Optional[typing.OnNext] = None,\n+               on_error: Optional[typing.OnError] = None,\n+               on_completed: Optional[typing.OnCompleted] = None\n                ) -> Callable[[Observable], Observable]:\n",
        "source_code_with_indent": "\ndef _do_action(on_next: typing.OnNext = None, on_error: typing.OnError = None, on_completed: typing.OnCompleted = None\n               ) -> Callable[[Observable], Observable]:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\ndef _do_action(on_next: Optional[typing.OnNext] = None,\n               on_error: Optional[typing.OnError] = None,\n               on_completed: Optional[typing.OnCompleted] = None\n               ) -> Callable[[Observable], Observable]:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/core/operators/filter.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/operators/filter.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/operators/filter.py:37:26 Incompatible parameter type [6]: Expected `typing.Callable[[Observer[typing.Any], typing.Optional[Scheduler]], Disposable]` for 1st positional only parameter to call `rx.core.observable.observable.Observable.__init__` but got `typing.Callable[[Named(observer, Observer[typing.Any]), Named(scheduler, Scheduler)], Disposable]`.",
    "message": " Expected `typing.Callable[[Observer[typing.Any], typing.Optional[Scheduler]], Disposable]` for 1st positional only parameter to call `rx.core.observable.observable.Observable.__init__` but got `typing.Callable[[Named(observer, Observer[typing.Any]), Named(scheduler, Scheduler)], Disposable]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 37,
    "warning_line": "        return Observable(subscribe)"
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/core/operators/filter.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/operators/filter.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/operators/filter.py:41:20 Incompatible variable type [9]: predicate_indexed is declared to have type `typing.Callable[[typing.Any, int], bool]` but is used as type `None`.",
    "message": " predicate_indexed is declared to have type `typing.Callable[[typing.Any, int], bool]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 41,
    "warning_line": "def _filter_indexed(predicate_indexed: PredicateIndexed = None) -> Callable[[Observable], Observable]:"
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/core/operators/filter.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/operators/filter.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/operators/filter.py:75:26 Incompatible parameter type [6]: Expected `typing.Callable[[Observer[typing.Any], typing.Optional[Scheduler]], Disposable]` for 1st positional only parameter to call `rx.core.observable.observable.Observable.__init__` but got `typing.Callable[[Named(observer, Observer[typing.Any]), Named(scheduler, Scheduler)], typing.Any]`.",
    "message": " Expected `typing.Callable[[Observer[typing.Any], typing.Optional[Scheduler]], Disposable]` for 1st positional only parameter to call `rx.core.observable.observable.Observable.__init__` but got `typing.Callable[[Named(observer, Observer[typing.Any]), Named(scheduler, Scheduler)], typing.Any]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 75,
    "warning_line": "        return Observable(subscribe)"
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/core/operators/firstordefault.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/operators/firstordefault.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/operators/firstordefault.py:28:22 Incompatible variable type [9]: predicate is declared to have type `typing.Callable[[typing.Any], bool]` but is used as type `None`.",
    "message": " predicate is declared to have type `typing.Callable[[typing.Any], bool]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 28,
    "warning_line": "def _first_or_default(predicate: Predicate = None, default_value: Any = None) -> Callable[[Observable], Observable]:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import Any, Callable\n\n",
        "source_code_len": 34,
        "target_code": "from typing import Any, Callable, Optional\n\n",
        "target_code_len": 44,
        "diff_format": "@@ -1,2 +1,2 @@\n-from typing import Any, Callable\n+from typing import Any, Callable, Optional\n \n",
        "source_code_with_indent": "from typing import Any, Callable\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Any, Callable, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _first_or_default(predicate: Predicate = None, default_value: Any = None) -> Callable[[Observable], Observable]:\n    \"\"\"Returns the first element of an observable sequence that\n",
        "source_code_len": 182,
        "target_code": "\ndef _first_or_default(predicate: Optional[Predicate] = None,\n                      default_value: Any = None\n                      ) -> Callable[[Observable], Observable]:\n    \"\"\"Returns the first element of an observable sequence that\n",
        "target_code_len": 237,
        "diff_format": "@@ -27,3 +27,5 @@\n \n-def _first_or_default(predicate: Predicate = None, default_value: Any = None) -> Callable[[Observable], Observable]:\n+def _first_or_default(predicate: Optional[Predicate] = None,\n+                      default_value: Any = None\n+                      ) -> Callable[[Observable], Observable]:\n     \"\"\"Returns the first element of an observable sequence that\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>def _first_or_default(predicate: Predicate = None, default_value: Any = None) -> Callable[[Observable], Observable]:\n    <IND>",
        "target_code_with_indent": "\n<DED>def _first_or_default(predicate: Optional[Predicate] = None,\n                      default_value: Any = None\n                      ) -> Callable[[Observable], Observable]:\n    <IND>"
      }
    ]
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/core/operators/firstordefault.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/operators/firstordefault.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/operators/firstordefault.py:56:33 Incompatible parameter type [6]: Expected `typing.Callable[[typing.Any], bool]` for 1st positional only parameter to call `ops.first_or_default` but got `None`.",
    "message": " Expected `typing.Callable[[typing.Any], bool]` for 1st positional only parameter to call `ops.first_or_default` but got `None`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 56,
    "warning_line": "            ops.first_or_default(None, default_value)"
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/core/operators/flatmap.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/operators/flatmap.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/operators/flatmap.py:26:14 Incompatible variable type [9]: mapper is declared to have type `typing.Callable[[typing.Any], typing.Any]` but is used as type `None`.",
    "message": " mapper is declared to have type `typing.Callable[[typing.Any], typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 26,
    "warning_line": "def _flat_map(mapper: Mapper = None) -> Callable[[Observable], Observable]:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import collections\nfrom typing import Callable\n\n",
        "source_code_len": 48,
        "target_code": "import collections\nfrom typing import Callable, Optional\n\n",
        "target_code_len": 58,
        "diff_format": "@@ -1,3 +1,3 @@\n import collections\n-from typing import Callable\n+from typing import Callable, Optional\n \n",
        "source_code_with_indent": "import collections\nfrom typing import Callable\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import collections\nfrom typing import Callable, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _flat_map(mapper: Mapper = None) -> Callable[[Observable], Observable]:\n    def flat_map(source: Observable) -> Observable:\n",
        "source_code_len": 129,
        "target_code": "\ndef _flat_map(mapper: Optional[Mapper] = None) -> Callable[[Observable], Observable]:\n    def flat_map(source: Observable) -> Observable:\n",
        "target_code_len": 139,
        "diff_format": "@@ -25,3 +25,3 @@\n \n-def _flat_map(mapper: Mapper = None) -> Callable[[Observable], Observable]:\n+def _flat_map(mapper: Optional[Mapper] = None) -> Callable[[Observable], Observable]:\n     def flat_map(source: Observable) -> Observable:\n",
        "source_code_with_indent": "\n<DED>def _flat_map(mapper: Mapper = None) -> Callable[[Observable], Observable]:\n    <IND>def flat_map(source: Observable) -> Observable:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def _flat_map(mapper: Optional[Mapper] = None) -> Callable[[Observable], Observable]:\n    <IND>def flat_map(source: Observable) -> Observable:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/core/operators/flatmap.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/operators/flatmap.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/operators/flatmap.py:55:22 Incompatible variable type [9]: mapper_indexed is declared to have type `typing.Callable[[typing.Any, int], typing.Any]` but is used as type `None`.",
    "message": " mapper_indexed is declared to have type `typing.Callable[[typing.Any, int], typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 55,
    "warning_line": "def _flat_map_indexed(mapper_indexed: MapperIndexed = None) -> Callable[[Observable], Observable]:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import collections\nfrom typing import Callable\n\n",
        "source_code_len": 48,
        "target_code": "import collections\nfrom typing import Callable, Optional\n\n",
        "target_code_len": 58,
        "diff_format": "@@ -1,3 +1,3 @@\n import collections\n-from typing import Callable\n+from typing import Callable, Optional\n \n",
        "source_code_with_indent": "import collections\nfrom typing import Callable\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import collections\nfrom typing import Callable, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _flat_map_indexed(mapper_indexed: MapperIndexed = None) -> Callable[[Observable], Observable]:\n    def flat_map_indexed(source: Observable) -> Observable:\n",
        "source_code_len": 160,
        "target_code": "\ndef _flat_map_indexed(mapper_indexed: Optional[MapperIndexed] = None) -> Callable[[Observable], Observable]:\n    def flat_map_indexed(source: Observable) -> Observable:\n",
        "target_code_len": 170,
        "diff_format": "@@ -54,3 +54,3 @@\n \n-def _flat_map_indexed(mapper_indexed: MapperIndexed = None) -> Callable[[Observable], Observable]:\n+def _flat_map_indexed(mapper_indexed: Optional[MapperIndexed] = None) -> Callable[[Observable], Observable]:\n     def flat_map_indexed(source: Observable) -> Observable:\n",
        "source_code_with_indent": "\n<DED>def _flat_map_indexed(mapper_indexed: MapperIndexed = None) -> Callable[[Observable], Observable]:\n    <IND>def flat_map_indexed(source: Observable) -> Observable:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def _flat_map_indexed(mapper_indexed: Optional[MapperIndexed] = None) -> Callable[[Observable], Observable]:\n    <IND>def flat_map_indexed(source: Observable) -> Observable:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/core/operators/publishvalue.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/operators/publishvalue.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/operators/publishvalue.py:9:39 Incompatible variable type [9]: mapper is declared to have type `typing.Callable[[typing.Any], typing.Any]` but is used as type `None`.",
    "message": " mapper is declared to have type `typing.Callable[[typing.Any], typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 9,
    "warning_line": "def _publish_value(initial_value: Any, mapper: Mapper = None) -> Callable[[Observable], Observable]:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import Any, Callable\n\n",
        "source_code_len": 34,
        "target_code": "from typing import Any, Callable, Optional\n\n",
        "target_code_len": 44,
        "diff_format": "@@ -1,2 +1,2 @@\n-from typing import Any, Callable\n+from typing import Any, Callable, Optional\n \n",
        "source_code_with_indent": "from typing import Any, Callable\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Any, Callable, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _publish_value(initial_value: Any, mapper: Mapper = None) -> Callable[[Observable], Observable]:\n    if mapper:\n",
        "source_code_len": 117,
        "target_code": "\ndef _publish_value(initial_value: Any, mapper: Optional[Mapper] = None) -> Callable[[Observable], Observable]:\n    if mapper:\n",
        "target_code_len": 127,
        "diff_format": "@@ -8,3 +8,3 @@\n \n-def _publish_value(initial_value: Any, mapper: Mapper = None) -> Callable[[Observable], Observable]:\n+def _publish_value(initial_value: Any, mapper: Optional[Mapper] = None) -> Callable[[Observable], Observable]:\n     if mapper:\n",
        "source_code_with_indent": "\ndef _publish_value(initial_value: Any, mapper: Mapper = None) -> Callable[[Observable], Observable]:\n    <IND>if mapper:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\ndef _publish_value(initial_value: Any, mapper: Optional[Mapper] = None) -> Callable[[Observable], Observable]:\n    <IND>if mapper:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/core/operators/replay.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/operators/replay.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/operators/replay.py:9:12 Incompatible variable type [9]: mapper is declared to have type `typing.Callable[[typing.Any], typing.Any]` but is used as type `None`.",
    "message": " mapper is declared to have type `typing.Callable[[typing.Any], typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 9,
    "warning_line": "def _replay(mapper: Mapper = None, buffer_size: int = None, window: typing.RelativeTime = None, scheduler: Scheduler = None"
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/core/operators/replay.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/operators/replay.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/operators/replay.py:9:35 Incompatible variable type [9]: buffer_size is declared to have type `int` but is used as type `None`.",
    "message": " buffer_size is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 9,
    "warning_line": "def _replay(mapper: Mapper = None, buffer_size: int = None, window: typing.RelativeTime = None, scheduler: Scheduler = None"
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/core/operators/replay.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/operators/replay.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/operators/replay.py:9:60 Incompatible variable type [9]: window is declared to have type `Union[datetime.timedelta, float]` but is used as type `None`.",
    "message": " window is declared to have type `Union[datetime.timedelta, float]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 9,
    "warning_line": "def _replay(mapper: Mapper = None, buffer_size: int = None, window: typing.RelativeTime = None, scheduler: Scheduler = None"
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/core/operators/replay.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/operators/replay.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/operators/replay.py:9:96 Incompatible variable type [9]: scheduler is declared to have type `Scheduler` but is used as type `None`.",
    "message": " scheduler is declared to have type `Scheduler` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 9,
    "warning_line": "def _replay(mapper: Mapper = None, buffer_size: int = None, window: typing.RelativeTime = None, scheduler: Scheduler = None"
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/core/operators/retry.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/operators/retry.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/operators/retry.py:8:11 Incompatible variable type [9]: retry_count is declared to have type `int` but is used as type `None`.",
    "message": " retry_count is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 8,
    "warning_line": "def _retry(retry_count: int = None) -> Callable[[Observable], Observable]:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import Callable\n\n",
        "source_code_len": 29,
        "target_code": "from typing import Callable, Optional\n\n",
        "target_code_len": 39,
        "diff_format": "@@ -1,2 +1,2 @@\n-from typing import Callable\n+from typing import Callable, Optional\n \n",
        "source_code_with_indent": "from typing import Callable\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Callable, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _retry(retry_count: int = None) -> Callable[[Observable], Observable]:\n    \"\"\"Repeats the source observable sequence the specified number of\n",
        "source_code_len": 146,
        "target_code": "\ndef _retry(retry_count: Optional[int] = None) -> Callable[[Observable], Observable]:\n    \"\"\"Repeats the source observable sequence the specified number of\n",
        "target_code_len": 156,
        "diff_format": "@@ -7,3 +7,3 @@\n \n-def _retry(retry_count: int = None) -> Callable[[Observable], Observable]:\n+def _retry(retry_count: Optional[int] = None) -> Callable[[Observable], Observable]:\n     \"\"\"Repeats the source observable sequence the specified number of\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\ndef _retry(retry_count: int = None) -> Callable[[Observable], Observable]:\n    <IND>",
        "target_code_with_indent": "\ndef _retry(retry_count: Optional[int] = None) -> Callable[[Observable], Observable]:\n    <IND>"
      }
    ]
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/core/operators/sample.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/operators/sample.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/operators/sample.py:36:41 Incompatible variable type [9]: scheduler is declared to have type `typing.Scheduler` but is used as type `None`.",
    "message": " scheduler is declared to have type `typing.Scheduler` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 36,
    "warning_line": "def _sample(interval=None, sampler=None, scheduler: typing.Scheduler = None) -> Callable[[Observable], Observable]:"
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/core/operators/single.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/operators/single.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/operators/single.py:8:12 Incompatible variable type [9]: predicate is declared to have type `typing.Callable[[typing.Any], bool]` but is used as type `None`.",
    "message": " predicate is declared to have type `typing.Callable[[typing.Any], bool]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 8,
    "warning_line": "def _single(predicate: Predicate = None) -> Callable[[Observable], Observable]:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import Callable\n\n",
        "source_code_len": 29,
        "target_code": "from typing import Callable, Optional\n\n",
        "target_code_len": 39,
        "diff_format": "@@ -1,2 +1,2 @@\n-from typing import Callable\n+from typing import Callable, Optional\n \n",
        "source_code_with_indent": "from typing import Callable\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Callable, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _single(predicate: Predicate = None) -> Callable[[Observable], Observable]:\n    \"\"\"Returns the only element of an observable sequence that satisfies the\n",
        "source_code_len": 158,
        "target_code": "\ndef _single(predicate: Optional[Predicate] = None) -> Callable[[Observable], Observable]:\n    \"\"\"Returns the only element of an observable sequence that satisfies the\n",
        "target_code_len": 168,
        "diff_format": "@@ -7,3 +7,3 @@\n \n-def _single(predicate: Predicate = None) -> Callable[[Observable], Observable]:\n+def _single(predicate: Optional[Predicate] = None) -> Callable[[Observable], Observable]:\n     \"\"\"Returns the only element of an observable sequence that satisfies the\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\ndef _single(predicate: Predicate = None) -> Callable[[Observable], Observable]:\n    <IND>",
        "target_code_with_indent": "\ndef _single(predicate: Optional[Predicate] = None) -> Callable[[Observable], Observable]:\n    <IND>"
      }
    ]
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/core/operators/singleordefault.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/operators/singleordefault.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/operators/singleordefault.py:32:23 Incompatible variable type [9]: predicate is declared to have type `typing.Callable[[typing.Any], bool]` but is used as type `None`.",
    "message": " predicate is declared to have type `typing.Callable[[typing.Any], bool]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 32,
    "warning_line": "def _single_or_default(predicate: Predicate = None, default_value: Any = None) -> Observable:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from rx import operators as ops\n",
        "source_code_len": 32,
        "target_code": "from typing import Optional\n\nfrom rx import operators as ops\n",
        "target_code_len": 61,
        "diff_format": "@@ -1,1 +1,3 @@\n+from typing import Optional\n+\n from rx import operators as ops\n",
        "source_code_with_indent": "from rx import operators as ops\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Optional\n\nfrom rx import operators as ops\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _single_or_default(predicate: Predicate = None, default_value: Any = None) -> Observable:\n    \"\"\"Returns the only element of an observable sequence that matches\n",
        "source_code_len": 166,
        "target_code": "\ndef _single_or_default(predicate: Optional[Predicate] = None, default_value: Any = None) -> Observable:\n    \"\"\"Returns the only element of an observable sequence that matches\n",
        "target_code_len": 176,
        "diff_format": "@@ -31,3 +33,3 @@\n \n-def _single_or_default(predicate: Predicate = None, default_value: Any = None) -> Observable:\n+def _single_or_default(predicate: Optional[Predicate] = None, default_value: Any = None) -> Observable:\n     \"\"\"Returns the only element of an observable sequence that matches\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>def _single_or_default(predicate: Predicate = None, default_value: Any = None) -> Observable:\n    <IND>",
        "target_code_with_indent": "\n<DED>def _single_or_default(predicate: Optional[Predicate] = None, default_value: Any = None) -> Observable:\n    <IND>"
      }
    ]
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/core/operators/singleordefault.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/operators/singleordefault.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/operators/singleordefault.py:57:65 Incompatible parameter type [6]: Expected `typing.Callable[[typing.Any], bool]` for 1st positional only parameter to call `ops.single_or_default` but got `None`.",
    "message": " Expected `typing.Callable[[typing.Any], bool]` for 1st positional only parameter to call `ops.single_or_default` but got `None`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 57,
    "warning_line": "        return pipe(ops.filter(predicate), ops.single_or_default(None, default_value))"
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/core/operators/skiplast.py",
    "min_patch_found": false,
    "full_warning_msg": "rx/core/operators/skiplast.py:38:4 Incompatible return type [7]: Expected `rx.core.observable.observable.Observable` but got `typing.Callable[[Named(source, rx.core.observable.observable.Observable)], rx.core.observable.observable.Observable]`.",
    "exception": "'bool' object has no attribute 'items'",
    "dd_fail": true
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/core/operators/skiplastwithtime.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/operators/skiplastwithtime.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/operators/skiplastwithtime.py:8:56 Incompatible variable type [9]: scheduler is declared to have type `typing.Scheduler` but is used as type `None`.",
    "message": " scheduler is declared to have type `typing.Scheduler` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 8,
    "warning_line": "def _skip_last_with_time(duration: typing.RelativeTime, scheduler: typing.Scheduler = None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import Union, Callable\nfrom datetime import timedelta\n\n",
        "source_code_len": 67,
        "target_code": "from typing import Union, Callable, Optional\n\n",
        "target_code_len": 46,
        "diff_format": "@@ -1,3 +1,2 @@\n-from typing import Union, Callable\n-from datetime import timedelta\n+from typing import Union, Callable, Optional\n \n",
        "source_code_with_indent": "from typing import Union, Callable\nfrom datetime import timedelta\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Union, Callable, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _skip_last_with_time(duration: typing.RelativeTime, scheduler: typing.Scheduler = None\n                        ) -> Callable[[Observable], Observable]:\n",
        "source_code_len": 157,
        "target_code": "\ndef _skip_last_with_time(duration: typing.RelativeTime, scheduler: Optional[typing.Scheduler] = None\n                        ) -> Callable[[Observable], Observable]:\n",
        "target_code_len": 167,
        "diff_format": "@@ -7,3 +6,3 @@\n \n-def _skip_last_with_time(duration: typing.RelativeTime, scheduler: typing.Scheduler = None\n+def _skip_last_with_time(duration: typing.RelativeTime, scheduler: Optional[typing.Scheduler] = None\n                         ) -> Callable[[Observable], Observable]:\n",
        "source_code_with_indent": "\ndef _skip_last_with_time(duration: typing.RelativeTime, scheduler: typing.Scheduler = None\n                        ) -> Callable[[Observable], Observable]:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\ndef _skip_last_with_time(duration: typing.RelativeTime, scheduler: Optional[typing.Scheduler] = None\n                        ) -> Callable[[Observable], Observable]:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/core/operators/skipuntilwithtime.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/operators/skipuntilwithtime.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/operators/skipuntilwithtime.py:9:69 Incompatible variable type [9]: scheduler is declared to have type `typing.Scheduler` but is used as type `None`.",
    "message": " scheduler is declared to have type `typing.Scheduler` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 9,
    "warning_line": "def _skip_until_with_time(start_time: typing.AbsoluteOrRelativeTime, scheduler: typing.Scheduler = None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from datetime import datetime\nfrom typing import Callable\n\n",
        "source_code_len": 59,
        "target_code": "from datetime import datetime\nfrom typing import Callable, Optional\n\n",
        "target_code_len": 69,
        "diff_format": "@@ -1,3 +1,3 @@\n from datetime import datetime\n-from typing import Callable\n+from typing import Callable, Optional\n \n",
        "source_code_with_indent": "from datetime import datetime\nfrom typing import Callable\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from datetime import datetime\nfrom typing import Callable, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _skip_until_with_time(start_time: typing.AbsoluteOrRelativeTime, scheduler: typing.Scheduler = None\n                         ) -> Callable[[Observable], Observable]:\n    def skip_until_with_time(source: Observable) -> Observable:\n",
        "source_code_len": 235,
        "target_code": "\ndef _skip_until_with_time(start_time: typing.AbsoluteOrRelativeTime, scheduler: Optional[typing.Scheduler] = None\n                          ) -> Callable[[Observable], Observable]:\n    def skip_until_with_time(source: Observable) -> Observable:\n",
        "target_code_len": 246,
        "diff_format": "@@ -8,4 +8,4 @@\n \n-def _skip_until_with_time(start_time: typing.AbsoluteOrRelativeTime, scheduler: typing.Scheduler = None\n-                         ) -> Callable[[Observable], Observable]:\n+def _skip_until_with_time(start_time: typing.AbsoluteOrRelativeTime, scheduler: Optional[typing.Scheduler] = None\n+                          ) -> Callable[[Observable], Observable]:\n     def skip_until_with_time(source: Observable) -> Observable:\n",
        "source_code_with_indent": "\ndef _skip_until_with_time(start_time: typing.AbsoluteOrRelativeTime, scheduler: typing.Scheduler = None\n                         ) -> Callable[[Observable], Observable]:\n    <IND>def skip_until_with_time(source: Observable) -> Observable:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\ndef _skip_until_with_time(start_time: typing.AbsoluteOrRelativeTime, scheduler: Optional[typing.Scheduler] = None\n                          ) -> Callable[[Observable], Observable]:\n    <IND>def skip_until_with_time(source: Observable) -> Observable:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/core/operators/skipwithtime.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/operators/skipwithtime.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/operators/skipwithtime.py:7:51 Incompatible variable type [9]: scheduler is declared to have type `typing.Scheduler` but is used as type `None`.",
    "message": " scheduler is declared to have type `typing.Scheduler` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 7,
    "warning_line": "def _skip_with_time(duration: typing.RelativeTime, scheduler: typing.Scheduler = None) -> Callable[[Observable], Observable]:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import Callable\n\n",
        "source_code_len": 29,
        "target_code": "from typing import Callable, Optional\n\n",
        "target_code_len": 39,
        "diff_format": "@@ -1,2 +1,2 @@\n-from typing import Callable\n+from typing import Callable, Optional\n \n",
        "source_code_with_indent": "from typing import Callable\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Callable, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _skip_with_time(duration: typing.RelativeTime, scheduler: typing.Scheduler = None) -> Callable[[Observable], Observable]:\n    def skip_with_time(source: Observable) -> Observable:\n",
        "source_code_len": 185,
        "target_code": "\n\ndef _skip_with_time(duration: typing.RelativeTime, scheduler: Optional[typing.Scheduler] = None\n                    ) -> Callable[[Observable], Observable]:\n    def skip_with_time(source: Observable) -> Observable:\n",
        "target_code_len": 217,
        "diff_format": "@@ -6,3 +6,5 @@\n \n-def _skip_with_time(duration: typing.RelativeTime, scheduler: typing.Scheduler = None) -> Callable[[Observable], Observable]:\n+\n+def _skip_with_time(duration: typing.RelativeTime, scheduler: Optional[typing.Scheduler] = None\n+                    ) -> Callable[[Observable], Observable]:\n     def skip_with_time(source: Observable) -> Observable:\n",
        "source_code_with_indent": "\ndef _skip_with_time(duration: typing.RelativeTime, scheduler: typing.Scheduler = None) -> Callable[[Observable], Observable]:\n    <IND>def skip_with_time(source: Observable) -> Observable:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n\ndef _skip_with_time(duration: typing.RelativeTime, scheduler: Optional[typing.Scheduler] = None\n                    ) -> Callable[[Observable], Observable]:\n    <IND>def skip_with_time(source: Observable) -> Observable:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/core/operators/sum.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/operators/sum.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/operators/sum.py:8:9 Incompatible variable type [9]: key_mapper is declared to have type `typing.Callable[[typing.Any], typing.Any]` but is used as type `None`.",
    "message": " key_mapper is declared to have type `typing.Callable[[typing.Any], typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 8,
    "warning_line": "def _sum(key_mapper: Mapper = None) -> Callable[[Observable], Observable]:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import Callable\n\n",
        "source_code_len": 29,
        "target_code": "from typing import Callable, Optional\n\n",
        "target_code_len": 39,
        "diff_format": "@@ -1,2 +1,2 @@\n-from typing import Callable\n+from typing import Callable, Optional\n \n",
        "source_code_with_indent": "from typing import Callable\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Callable, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _sum(key_mapper: Mapper = None) -> Callable[[Observable], Observable]:\n    if key_mapper:\n",
        "source_code_len": 95,
        "target_code": "\ndef _sum(key_mapper: Optional[Mapper] = None) -> Callable[[Observable], Observable]:\n    if key_mapper:\n",
        "target_code_len": 105,
        "diff_format": "@@ -7,3 +7,3 @@\n \n-def _sum(key_mapper: Mapper = None) -> Callable[[Observable], Observable]:\n+def _sum(key_mapper: Optional[Mapper] = None) -> Callable[[Observable], Observable]:\n     if key_mapper:\n",
        "source_code_with_indent": "\ndef _sum(key_mapper: Mapper = None) -> Callable[[Observable], Observable]:\n    <IND>if key_mapper:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\ndef _sum(key_mapper: Optional[Mapper] = None) -> Callable[[Observable], Observable]:\n    <IND>if key_mapper:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/core/operators/takelastwithtime.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/operators/takelastwithtime.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/operators/takelastwithtime.py:6:56 Incompatible variable type [9]: scheduler is declared to have type `typing.Scheduler` but is used as type `None`.",
    "message": " scheduler is declared to have type `typing.Scheduler` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 6,
    "warning_line": "def _take_last_with_time(duration: typing.RelativeTime, scheduler: typing.Scheduler = None) -> Callable[[Observable], Observable]:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import Callable\nfrom rx.core import Observable, typing\n",
        "source_code_len": 67,
        "target_code": "from typing import Callable, Optional\nfrom rx.core import Observable, typing\n",
        "target_code_len": 77,
        "diff_format": "@@ -1,2 +1,2 @@\n-from typing import Callable\n+from typing import Callable, Optional\n from rx.core import Observable, typing\n",
        "source_code_with_indent": "from typing import Callable\nfrom rx.core import Observable, typing\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Callable, Optional\nfrom rx.core import Observable, typing\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _take_last_with_time(duration: typing.RelativeTime, scheduler: typing.Scheduler = None) -> Callable[[Observable], Observable]:\n    def take_last_with_time(source: Observable) -> Observable:\n",
        "source_code_len": 195,
        "target_code": "\ndef _take_last_with_time(duration: typing.RelativeTime, scheduler: Optional[typing.Scheduler] = None\n                         ) -> Callable[[Observable], Observable]:\n    def take_last_with_time(source: Observable) -> Observable:\n",
        "target_code_len": 231,
        "diff_format": "@@ -5,3 +5,4 @@\n \n-def _take_last_with_time(duration: typing.RelativeTime, scheduler: typing.Scheduler = None) -> Callable[[Observable], Observable]:\n+def _take_last_with_time(duration: typing.RelativeTime, scheduler: Optional[typing.Scheduler] = None\n+                         ) -> Callable[[Observable], Observable]:\n     def take_last_with_time(source: Observable) -> Observable:\n",
        "source_code_with_indent": "\ndef _take_last_with_time(duration: typing.RelativeTime, scheduler: typing.Scheduler = None) -> Callable[[Observable], Observable]:\n    <IND>def take_last_with_time(source: Observable) -> Observable:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\ndef _take_last_with_time(duration: typing.RelativeTime, scheduler: Optional[typing.Scheduler] = None\n                         ) -> Callable[[Observable], Observable]:\n    <IND>def take_last_with_time(source: Observable) -> Observable:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/core/operators/takeuntilwithtime.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/operators/takeuntilwithtime.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/operators/takeuntilwithtime.py:9:67 Incompatible variable type [9]: scheduler is declared to have type `typing.Scheduler` but is used as type `None`.",
    "message": " scheduler is declared to have type `typing.Scheduler` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 9,
    "warning_line": "def _take_until_with_time(end_time: typing.AbsoluteOrRelativeTime, scheduler: typing.Scheduler = None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import Callable, Union\nfrom datetime import datetime\n",
        "source_code_len": 65,
        "target_code": "from typing import Callable, Union, Optional\nfrom datetime import datetime\n",
        "target_code_len": 75,
        "diff_format": "@@ -1,2 +1,2 @@\n-from typing import Callable, Union\n+from typing import Callable, Union, Optional\n from datetime import datetime\n",
        "source_code_with_indent": "from typing import Callable, Union\nfrom datetime import datetime\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Callable, Union, Optional\nfrom datetime import datetime\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _take_until_with_time(end_time: typing.AbsoluteOrRelativeTime, scheduler: typing.Scheduler = None\n                          ) -> Callable[[Observable], Observable]:\n",
        "source_code_len": 170,
        "target_code": "\ndef _take_until_with_time(end_time: typing.AbsoluteOrRelativeTime, scheduler: Optional[typing.Scheduler] = None\n                          ) -> Callable[[Observable], Observable]:\n",
        "target_code_len": 180,
        "diff_format": "@@ -8,3 +8,3 @@\n \n-def _take_until_with_time(end_time: typing.AbsoluteOrRelativeTime, scheduler: typing.Scheduler = None\n+def _take_until_with_time(end_time: typing.AbsoluteOrRelativeTime, scheduler: Optional[typing.Scheduler] = None\n                           ) -> Callable[[Observable], Observable]:\n",
        "source_code_with_indent": "\ndef _take_until_with_time(end_time: typing.AbsoluteOrRelativeTime, scheduler: typing.Scheduler = None\n                          ) -> Callable[[Observable], Observable]:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\ndef _take_until_with_time(end_time: typing.AbsoluteOrRelativeTime, scheduler: Optional[typing.Scheduler] = None\n                          ) -> Callable[[Observable], Observable]:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/core/operators/takewithtime.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/operators/takewithtime.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/operators/takewithtime.py:8:51 Incompatible variable type [9]: scheduler is declared to have type `typing.Scheduler` but is used as type `None`.",
    "message": " scheduler is declared to have type `typing.Scheduler` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 8,
    "warning_line": "def _take_with_time(duration: typing.RelativeTime, scheduler: typing.Scheduler = None) -> Callable[[Observable], Observable]:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import Callable\n\n",
        "source_code_len": 29,
        "target_code": "from typing import Callable, Optional\n\n",
        "target_code_len": 39,
        "diff_format": "@@ -1,2 +1,2 @@\n-from typing import Callable\n+from typing import Callable, Optional\n \n",
        "source_code_with_indent": "from typing import Callable\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Callable, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _take_with_time(duration: typing.RelativeTime, scheduler: typing.Scheduler = None) -> Callable[[Observable], Observable]:\n    def take_with_time(source: Observable) -> Observable:\n",
        "source_code_len": 185,
        "target_code": "\ndef _take_with_time(duration: typing.RelativeTime, scheduler: Optional[typing.Scheduler] = None\n                    ) -> Callable[[Observable], Observable]:\n    def take_with_time(source: Observable) -> Observable:\n",
        "target_code_len": 216,
        "diff_format": "@@ -7,3 +7,4 @@\n \n-def _take_with_time(duration: typing.RelativeTime, scheduler: typing.Scheduler = None) -> Callable[[Observable], Observable]:\n+def _take_with_time(duration: typing.RelativeTime, scheduler: Optional[typing.Scheduler] = None\n+                    ) -> Callable[[Observable], Observable]:\n     def take_with_time(source: Observable) -> Observable:\n",
        "source_code_with_indent": "\ndef _take_with_time(duration: typing.RelativeTime, scheduler: typing.Scheduler = None) -> Callable[[Observable], Observable]:\n    <IND>def take_with_time(source: Observable) -> Observable:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\ndef _take_with_time(duration: typing.RelativeTime, scheduler: Optional[typing.Scheduler] = None\n                    ) -> Callable[[Observable], Observable]:\n    <IND>def take_with_time(source: Observable) -> Observable:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/core/operators/throttlefirst.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/operators/throttlefirst.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/operators/throttlefirst.py:7:58 Incompatible variable type [9]: scheduler is declared to have type `typing.Scheduler` but is used as type `None`.",
    "message": " scheduler is declared to have type `typing.Scheduler` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 7,
    "warning_line": "def _throttle_first(window_duration: typing.RelativeTime, scheduler: typing.Scheduler = None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import Callable\n\n",
        "source_code_len": 29,
        "target_code": "from typing import Callable, Optional\n\n",
        "target_code_len": 39,
        "diff_format": "@@ -1,2 +1,2 @@\n-from typing import Callable\n+from typing import Callable, Optional\n \n",
        "source_code_with_indent": "from typing import Callable\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Callable, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _throttle_first(window_duration: typing.RelativeTime, scheduler: typing.Scheduler = None\n                   ) -> Callable[[Observable], Observable]:\n",
        "source_code_len": 154,
        "target_code": "\ndef _throttle_first(window_duration: typing.RelativeTime, scheduler: Optional[typing.Scheduler] = None\n                   ) -> Callable[[Observable], Observable]:\n",
        "target_code_len": 164,
        "diff_format": "@@ -6,3 +6,3 @@\n \n-def _throttle_first(window_duration: typing.RelativeTime, scheduler: typing.Scheduler = None\n+def _throttle_first(window_duration: typing.RelativeTime, scheduler: Optional[typing.Scheduler] = None\n                    ) -> Callable[[Observable], Observable]:\n",
        "source_code_with_indent": "\ndef _throttle_first(window_duration: typing.RelativeTime, scheduler: typing.Scheduler = None\n                   ) -> Callable[[Observable], Observable]:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\ndef _throttle_first(window_duration: typing.RelativeTime, scheduler: Optional[typing.Scheduler] = None\n                   ) -> Callable[[Observable], Observable]:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/core/operators/timeinterval.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/operators/timeinterval.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/operators/timeinterval.py:14:19 Incompatible variable type [9]: scheduler is declared to have type `typing.Scheduler` but is used as type `None`.",
    "message": " scheduler is declared to have type `typing.Scheduler` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 14,
    "warning_line": "def _time_interval(scheduler: typing.Scheduler = None) -> Callable[[Observable], Observable]:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import Callable, NamedTuple, Any\nfrom datetime import timedelta\n",
        "source_code_len": 76,
        "target_code": "from typing import Callable, NamedTuple, Any, Optional\nfrom datetime import timedelta\n",
        "target_code_len": 86,
        "diff_format": "@@ -1,2 +1,2 @@\n-from typing import Callable, NamedTuple, Any\n+from typing import Callable, NamedTuple, Any, Optional\n from datetime import timedelta\n",
        "source_code_with_indent": "from typing import Callable, NamedTuple, Any\nfrom datetime import timedelta\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Callable, NamedTuple, Any, Optional\nfrom datetime import timedelta\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _time_interval(scheduler: typing.Scheduler = None) -> Callable[[Observable], Observable]:\n    def time_interval(source: Observable) -> Observable:\n",
        "source_code_len": 152,
        "target_code": "\ndef _time_interval(scheduler: Optional[typing.Scheduler] = None) -> Callable[[Observable], Observable]:\n    def time_interval(source: Observable) -> Observable:\n",
        "target_code_len": 162,
        "diff_format": "@@ -13,3 +13,3 @@\n \n-def _time_interval(scheduler: typing.Scheduler = None) -> Callable[[Observable], Observable]:\n+def _time_interval(scheduler: Optional[typing.Scheduler] = None) -> Callable[[Observable], Observable]:\n     def time_interval(source: Observable) -> Observable:\n",
        "source_code_with_indent": "\n<DED>def _time_interval(scheduler: typing.Scheduler = None) -> Callable[[Observable], Observable]:\n    <IND>def time_interval(source: Observable) -> Observable:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def _time_interval(scheduler: Optional[typing.Scheduler] = None) -> Callable[[Observable], Observable]:\n    <IND>def time_interval(source: Observable) -> Observable:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/core/operators/timeout.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/operators/timeout.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/operators/timeout.py:11:43 Incompatible variable type [9]: other is declared to have type `rx.core.observable.observable.Observable` but is used as type `None`.",
    "message": " other is declared to have type `rx.core.observable.observable.Observable` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 11,
    "warning_line": "def _timeout(duetime: typing.AbsoluteTime, other: Observable = None, scheduler: typing.Scheduler = None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from datetime import datetime\nfrom typing import Union, Callable\n\n",
        "source_code_len": 66,
        "target_code": "from datetime import datetime\nfrom typing import Union, Callable, Optional\n\n",
        "target_code_len": 76,
        "diff_format": "@@ -1,3 +1,3 @@\n from datetime import datetime\n-from typing import Union, Callable\n+from typing import Union, Callable, Optional\n \n",
        "source_code_with_indent": "from datetime import datetime\nfrom typing import Union, Callable\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from datetime import datetime\nfrom typing import Union, Callable, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _timeout(duetime: typing.AbsoluteTime, other: Observable = None, scheduler: typing.Scheduler = None\n             ) -> Callable[[Observable], Observable]:\n",
        "source_code_len": 159,
        "target_code": "\ndef _timeout(duetime: typing.AbsoluteTime, other: Optional[Observable] = None, scheduler: Optional[typing.Scheduler] = None\n             ) -> Callable[[Observable], Observable]:\n",
        "target_code_len": 179,
        "diff_format": "@@ -10,3 +10,3 @@\n \n-def _timeout(duetime: typing.AbsoluteTime, other: Observable = None, scheduler: typing.Scheduler = None\n+def _timeout(duetime: typing.AbsoluteTime, other: Optional[Observable] = None, scheduler: Optional[typing.Scheduler] = None\n              ) -> Callable[[Observable], Observable]:\n",
        "source_code_with_indent": "\ndef _timeout(duetime: typing.AbsoluteTime, other: Observable = None, scheduler: typing.Scheduler = None\n             ) -> Callable[[Observable], Observable]:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\ndef _timeout(duetime: typing.AbsoluteTime, other: Optional[Observable] = None, scheduler: Optional[typing.Scheduler] = None\n             ) -> Callable[[Observable], Observable]:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/core/operators/timeout.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/operators/timeout.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/operators/timeout.py:11:69 Incompatible variable type [9]: scheduler is declared to have type `typing.Scheduler` but is used as type `None`.",
    "message": " scheduler is declared to have type `typing.Scheduler` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 11,
    "warning_line": "def _timeout(duetime: typing.AbsoluteTime, other: Observable = None, scheduler: typing.Scheduler = None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from datetime import datetime\nfrom typing import Union, Callable\n\n",
        "source_code_len": 66,
        "target_code": "from datetime import datetime\nfrom typing import Union, Callable, Optional\n\n",
        "target_code_len": 76,
        "diff_format": "@@ -1,3 +1,3 @@\n from datetime import datetime\n-from typing import Union, Callable\n+from typing import Union, Callable, Optional\n \n",
        "source_code_with_indent": "from datetime import datetime\nfrom typing import Union, Callable\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from datetime import datetime\nfrom typing import Union, Callable, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _timeout(duetime: typing.AbsoluteTime, other: Observable = None, scheduler: typing.Scheduler = None\n             ) -> Callable[[Observable], Observable]:\n",
        "source_code_len": 159,
        "target_code": "\ndef _timeout(duetime: typing.AbsoluteTime, other: Optional[Observable] = None, scheduler: Optional[typing.Scheduler] = None\n             ) -> Callable[[Observable], Observable]:\n",
        "target_code_len": 179,
        "diff_format": "@@ -10,3 +10,3 @@\n \n-def _timeout(duetime: typing.AbsoluteTime, other: Observable = None, scheduler: typing.Scheduler = None\n+def _timeout(duetime: typing.AbsoluteTime, other: Optional[Observable] = None, scheduler: Optional[typing.Scheduler] = None\n              ) -> Callable[[Observable], Observable]:\n",
        "source_code_with_indent": "\ndef _timeout(duetime: typing.AbsoluteTime, other: Observable = None, scheduler: typing.Scheduler = None\n             ) -> Callable[[Observable], Observable]:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\ndef _timeout(duetime: typing.AbsoluteTime, other: Optional[Observable] = None, scheduler: Optional[typing.Scheduler] = None\n             ) -> Callable[[Observable], Observable]:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/core/operators/timestamp.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/operators/timestamp.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/operators/timestamp.py:14:15 Incompatible variable type [9]: scheduler is declared to have type `typing.Scheduler` but is used as type `None`.",
    "message": " scheduler is declared to have type `typing.Scheduler` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 14,
    "warning_line": "def _timestamp(scheduler: typing.Scheduler = None) -> Callable[[Observable], Observable]:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import Callable, NamedTuple, Any\nfrom datetime import datetime\n",
        "source_code_len": 75,
        "target_code": "from typing import Callable, NamedTuple, Any, Optional\nfrom datetime import datetime\n",
        "target_code_len": 85,
        "diff_format": "@@ -1,2 +1,2 @@\n-from typing import Callable, NamedTuple, Any\n+from typing import Callable, NamedTuple, Any, Optional\n from datetime import datetime\n",
        "source_code_with_indent": "from typing import Callable, NamedTuple, Any\nfrom datetime import datetime\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Callable, NamedTuple, Any, Optional\nfrom datetime import datetime\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _timestamp(scheduler: typing.Scheduler = None) -> Callable[[Observable], Observable]:\n    def timestamp(source: Observable) -> Observable:\n",
        "source_code_len": 144,
        "target_code": "\ndef _timestamp(scheduler: Optional[typing.Scheduler] = None) -> Callable[[Observable], Observable]:\n    def timestamp(source: Observable) -> Observable:\n",
        "target_code_len": 154,
        "diff_format": "@@ -13,3 +13,3 @@\n \n-def _timestamp(scheduler: typing.Scheduler = None) -> Callable[[Observable], Observable]:\n+def _timestamp(scheduler: Optional[typing.Scheduler] = None) -> Callable[[Observable], Observable]:\n     def timestamp(source: Observable) -> Observable:\n",
        "source_code_with_indent": "\n<DED>def _timestamp(scheduler: typing.Scheduler = None) -> Callable[[Observable], Observable]:\n    <IND>def timestamp(source: Observable) -> Observable:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def _timestamp(scheduler: Optional[typing.Scheduler] = None) -> Callable[[Observable], Observable]:\n    <IND>def timestamp(source: Observable) -> Observable:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/core/operators/todict.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/operators/todict.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/operators/todict.py:7:47 Incompatible variable type [9]: element_mapper is declared to have type `typing.Callable[[typing.Any], typing.Any]` but is used as type `None`.",
    "message": " element_mapper is declared to have type `typing.Callable[[typing.Any], typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 7,
    "warning_line": "def _to_dict(key_mapper: Callable[[Any], Any], element_mapper: Callable[[Any], Any] = None"
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/core/operators/todict.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/operators/todict.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/operators/todict.py:20:49 Incompatible variable type [9]: scheduler is declared to have type `typing.Scheduler` but is used as type `None`.",
    "message": " scheduler is declared to have type `typing.Scheduler` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 20,
    "warning_line": "        def subscribe(observer: typing.Observer, scheduler: typing.Scheduler = None) -> typing.Disposable:"
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/core/operators/todict.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/operators/todict.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/operators/todict.py:45:26 Incompatible parameter type [6]: Expected `typing.Callable[[typing.Observer[typing.Any], typing.Optional[typing.Scheduler]], typing.Disposable]` for 1st positional only parameter to call `rx.core.observable.observable.Observable.__init__` but got `typing.Callable[[Named(observer, typing.Observer[typing.Any]), Named(scheduler, typing.Scheduler, default)], typing.Disposable]`.",
    "message": " Expected `typing.Callable[[typing.Observer[typing.Any], typing.Optional[typing.Scheduler]], typing.Disposable]` for 1st positional only parameter to call `rx.core.observable.observable.Observable.__init__` but got `typing.Callable[[Named(observer, typing.Observer[typing.Any]), Named(scheduler, typing.Scheduler, default)], typing.Disposable]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 45,
    "warning_line": "        return Observable(subscribe)"
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/core/operators/windowwithcount.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/operators/windowwithcount.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/operators/windowwithcount.py:13:35 Incompatible variable type [9]: skip is declared to have type `int` but is used as type `None`.",
    "message": " skip is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 13,
    "warning_line": "def _window_with_count(count: int, skip: int = None) -> Callable[[Observable], Observable]:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import Callable\nimport logging\n",
        "source_code_len": 43,
        "target_code": "from typing import Callable, Optional\nimport logging\n",
        "target_code_len": 53,
        "diff_format": "@@ -1,2 +1,2 @@\n-from typing import Callable\n+from typing import Callable, Optional\n import logging\n",
        "source_code_with_indent": "from typing import Callable\nimport logging\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Callable, Optional\nimport logging\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _window_with_count(count: int, skip: int = None) -> Callable[[Observable], Observable]:\n    \"\"\"Projects each element of an observable sequence into zero or more\n",
        "source_code_len": 166,
        "target_code": "\ndef _window_with_count(count: int, skip: Optional[int] = None) -> Callable[[Observable], Observable]:\n    \"\"\"Projects each element of an observable sequence into zero or more\n",
        "target_code_len": 176,
        "diff_format": "@@ -12,3 +12,3 @@\n \n-def _window_with_count(count: int, skip: int = None) -> Callable[[Observable], Observable]:\n+def _window_with_count(count: int, skip: Optional[int] = None) -> Callable[[Observable], Observable]:\n     \"\"\"Projects each element of an observable sequence into zero or more\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\ndef _window_with_count(count: int, skip: int = None) -> Callable[[Observable], Observable]:\n    <IND>",
        "target_code_with_indent": "\ndef _window_with_count(count: int, skip: Optional[int] = None) -> Callable[[Observable], Observable]:\n    <IND>"
      }
    ]
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/core/operators/windowwithtime.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/operators/windowwithtime.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/operators/windowwithtime.py:12:53 Incompatible variable type [9]: timeshift is declared to have type `Union[float, timedelta]` but is used as type `None`.",
    "message": " timeshift is declared to have type `Union[float, timedelta]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 12,
    "warning_line": "def _window_with_time(timespan: typing.RelativeTime, timeshift: typing.RelativeTime = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import Callable, Union\nfrom datetime import timedelta\n",
        "source_code_len": 66,
        "target_code": "from typing import Callable, Union, Optional\nfrom datetime import timedelta\n",
        "target_code_len": 76,
        "diff_format": "@@ -1,2 +1,2 @@\n-from typing import Callable, Union\n+from typing import Callable, Union, Optional\n from datetime import timedelta\n",
        "source_code_with_indent": "from typing import Callable, Union\nfrom datetime import timedelta\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Callable, Union, Optional\nfrom datetime import timedelta\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _window_with_time(timespan: typing.RelativeTime, timeshift: typing.RelativeTime = None,\n                      scheduler: typing.Scheduler = None) -> Callable[[Observable], Observable]:\n    if timeshift is None:\n",
        "source_code_len": 216,
        "target_code": "\ndef _window_with_time(timespan: typing.RelativeTime, timeshift: Optional[typing.RelativeTime] = None,\n                      scheduler: Optional[typing.Scheduler] = None) -> Callable[[Observable], Observable]:\n    if timeshift is None:\n",
        "target_code_len": 236,
        "diff_format": "@@ -11,4 +11,4 @@\n \n-def _window_with_time(timespan: typing.RelativeTime, timeshift: typing.RelativeTime = None,\n-                      scheduler: typing.Scheduler = None) -> Callable[[Observable], Observable]:\n+def _window_with_time(timespan: typing.RelativeTime, timeshift: Optional[typing.RelativeTime] = None,\n+                      scheduler: Optional[typing.Scheduler] = None) -> Callable[[Observable], Observable]:\n     if timeshift is None:\n",
        "source_code_with_indent": "\ndef _window_with_time(timespan: typing.RelativeTime, timeshift: typing.RelativeTime = None,\n                      scheduler: typing.Scheduler = None) -> Callable[[Observable], Observable]:\n    <IND>if timeshift is None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\ndef _window_with_time(timespan: typing.RelativeTime, timeshift: Optional[typing.RelativeTime] = None,\n                      scheduler: Optional[typing.Scheduler] = None) -> Callable[[Observable], Observable]:\n    <IND>if timeshift is None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/core/operators/windowwithtime.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/operators/windowwithtime.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/operators/windowwithtime.py:13:22 Incompatible variable type [9]: scheduler is declared to have type `typing.Scheduler` but is used as type `None`.",
    "message": " scheduler is declared to have type `typing.Scheduler` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 13,
    "warning_line": "                      scheduler: typing.Scheduler = None) -> Callable[[Observable], Observable]:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import Callable, Union\nfrom datetime import timedelta\n",
        "source_code_len": 66,
        "target_code": "from typing import Callable, Union, Optional\nfrom datetime import timedelta\n",
        "target_code_len": 76,
        "diff_format": "@@ -1,2 +1,2 @@\n-from typing import Callable, Union\n+from typing import Callable, Union, Optional\n from datetime import timedelta\n",
        "source_code_with_indent": "from typing import Callable, Union\nfrom datetime import timedelta\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Callable, Union, Optional\nfrom datetime import timedelta\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _window_with_time(timespan: typing.RelativeTime, timeshift: typing.RelativeTime = None,\n                      scheduler: typing.Scheduler = None) -> Callable[[Observable], Observable]:\n    if timeshift is None:\n",
        "source_code_len": 216,
        "target_code": "\ndef _window_with_time(timespan: typing.RelativeTime, timeshift: Optional[typing.RelativeTime] = None,\n                      scheduler: Optional[typing.Scheduler] = None) -> Callable[[Observable], Observable]:\n    if timeshift is None:\n",
        "target_code_len": 236,
        "diff_format": "@@ -11,4 +11,4 @@\n \n-def _window_with_time(timespan: typing.RelativeTime, timeshift: typing.RelativeTime = None,\n-                      scheduler: typing.Scheduler = None) -> Callable[[Observable], Observable]:\n+def _window_with_time(timespan: typing.RelativeTime, timeshift: Optional[typing.RelativeTime] = None,\n+                      scheduler: Optional[typing.Scheduler] = None) -> Callable[[Observable], Observable]:\n     if timeshift is None:\n",
        "source_code_with_indent": "\ndef _window_with_time(timespan: typing.RelativeTime, timeshift: typing.RelativeTime = None,\n                      scheduler: typing.Scheduler = None) -> Callable[[Observable], Observable]:\n    <IND>if timeshift is None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\ndef _window_with_time(timespan: typing.RelativeTime, timeshift: Optional[typing.RelativeTime] = None,\n                      scheduler: Optional[typing.Scheduler] = None) -> Callable[[Observable], Observable]:\n    <IND>if timeshift is None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/core/operators/windowwithtimeorcount.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/operators/windowwithtimeorcount.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/operators/windowwithtimeorcount.py:11:74 Incompatible variable type [9]: scheduler is declared to have type `typing.Scheduler` but is used as type `None`.",
    "message": " scheduler is declared to have type `typing.Scheduler` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 11,
    "warning_line": "def _window_with_time_or_count(timespan: typing.RelativeTime, count: int, scheduler: typing.Scheduler = None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import Callable, Union\nfrom datetime import timedelta\n",
        "source_code_len": 66,
        "target_code": "from typing import Callable, Union, Optional\nfrom datetime import timedelta\n",
        "target_code_len": 76,
        "diff_format": "@@ -1,2 +1,2 @@\n-from typing import Callable, Union\n+from typing import Callable, Union, Optional\n from datetime import timedelta\n",
        "source_code_with_indent": "from typing import Callable, Union\nfrom datetime import timedelta\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Callable, Union, Optional\nfrom datetime import timedelta\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _window_with_time_or_count(timespan: typing.RelativeTime, count: int, scheduler: typing.Scheduler = None\n                              ) -> Callable[[Observable], Observable]:\n    def window_with_time_or_count(source: Observable) -> Observable:\n",
        "source_code_len": 250,
        "target_code": "\ndef _window_with_time_or_count(timespan: typing.RelativeTime, count: int, scheduler: Optional[typing.Scheduler] = None\n                               ) -> Callable[[Observable], Observable]:\n    def window_with_time_or_count(source: Observable) -> Observable:\n",
        "target_code_len": 261,
        "diff_format": "@@ -10,4 +10,4 @@\n \n-def _window_with_time_or_count(timespan: typing.RelativeTime, count: int, scheduler: typing.Scheduler = None\n-                              ) -> Callable[[Observable], Observable]:\n+def _window_with_time_or_count(timespan: typing.RelativeTime, count: int, scheduler: Optional[typing.Scheduler] = None\n+                               ) -> Callable[[Observable], Observable]:\n     def window_with_time_or_count(source: Observable) -> Observable:\n",
        "source_code_with_indent": "\ndef _window_with_time_or_count(timespan: typing.RelativeTime, count: int, scheduler: typing.Scheduler = None\n                              ) -> Callable[[Observable], Observable]:\n    <IND>def window_with_time_or_count(source: Observable) -> Observable:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\ndef _window_with_time_or_count(timespan: typing.RelativeTime, count: int, scheduler: Optional[typing.Scheduler] = None\n                               ) -> Callable[[Observable], Observable]:\n    <IND>def window_with_time_or_count(source: Observable) -> Observable:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/disposable/disposable.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/disposable/disposable.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/disposable/disposable.py:10:23 Incompatible variable type [9]: action is declared to have type `typing.Callable[[], None]` but is used as type `None`.",
    "message": " action is declared to have type `typing.Callable[[], None]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 10,
    "warning_line": "    def __init__(self, action: typing.Action = None) -> None:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from threading import RLock\n",
        "source_code_len": 28,
        "target_code": "from typing import Optional\nfrom threading import RLock\n",
        "target_code_len": 56,
        "diff_format": "@@ -1,1 +1,2 @@\n+from typing import Optional\n from threading import RLock\n",
        "source_code_with_indent": "from threading import RLock\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Optional\nfrom threading import RLock\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __init__(self, action: typing.Action = None) -> None:\n        \"\"\"Creates a disposable object that invokes the specified\n",
        "source_code_len": 129,
        "target_code": "\n    def __init__(self, action: Optional[typing.Action] = None) -> None:\n        \"\"\"Creates a disposable object that invokes the specified\n",
        "target_code_len": 139,
        "diff_format": "@@ -9,3 +10,3 @@\n \n-    def __init__(self, action: typing.Action = None) -> None:\n+    def __init__(self, action: Optional[typing.Action] = None) -> None:\n         \"\"\"Creates a disposable object that invokes the specified\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    def __init__(self, action: typing.Action = None) -> None:\n        <IND>",
        "target_code_with_indent": "\n    def __init__(self, action: Optional[typing.Action] = None) -> None:\n        <IND>"
      }
    ]
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/operators/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/operators/__init__.py",
    "file_hunks_size": 16,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/operators/__init__.py:133:34 Incompatible variable type [9]: skip is declared to have type `int` but is used as type `None`.",
    "message": " skip is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 133,
    "warning_line": "def buffer_with_count(count: int, skip: int = None) -> Callable[[Observable], Observable]:"
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/operators/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/operators/__init__.py",
    "file_hunks_size": 16,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/operators/__init__.py:162:52 Incompatible variable type [9]: timeshift is declared to have type `Union[float, timedelta]` but is used as type `None`.",
    "message": " timeshift is declared to have type `Union[float, timedelta]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 162,
    "warning_line": "def buffer_with_time(timespan: typing.RelativeTime, timeshift: typing.RelativeTime = None,"
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/operators/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/operators/__init__.py",
    "file_hunks_size": 16,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/operators/__init__.py:632:14 Incompatible variable type [9]: on_next is declared to have type `typing.Callable[[typing.Any], None]` but is used as type `None`.",
    "message": " on_next is declared to have type `typing.Callable[[typing.Any], None]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 632,
    "warning_line": "def do_action(on_next: typing.OnNext = None, on_error: typing.OnError = None, on_completed: typing.OnCompleted = None"
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/operators/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/operators/__init__.py",
    "file_hunks_size": 16,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/operators/__init__.py:632:45 Incompatible variable type [9]: on_error is declared to have type `typing.Callable[[Exception], None]` but is used as type `None`.",
    "message": " on_error is declared to have type `typing.Callable[[Exception], None]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 632,
    "warning_line": "def do_action(on_next: typing.OnNext = None, on_error: typing.OnError = None, on_completed: typing.OnCompleted = None"
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/operators/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/operators/__init__.py",
    "file_hunks_size": 16,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/operators/__init__.py:632:78 Incompatible variable type [9]: on_completed is declared to have type `typing.Callable[[], None]` but is used as type `None`.",
    "message": " on_completed is declared to have type `typing.Callable[[], None]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 632,
    "warning_line": "def do_action(on_next: typing.OnNext = None, on_error: typing.OnError = None, on_completed: typing.OnCompleted = None"
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/operators/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/operators/__init__.py",
    "file_hunks_size": 16,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/operators/__init__.py:815:19 Incompatible variable type [9]: predicate_indexed is declared to have type `typing.Callable[[typing.Any, int], bool]` but is used as type `None`.",
    "message": " predicate_indexed is declared to have type `typing.Callable[[typing.Any, int], bool]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 815,
    "warning_line": "def filter_indexed(predicate_indexed: PredicateIndexed = None) -> Callable[[Observable], Observable]:"
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/operators/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/operators/__init__.py",
    "file_hunks_size": 16,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/operators/__init__.py:1369:16 Incompatible variable type [9]: mapper_indexed is declared to have type `typing.Callable[[typing.Any, int], typing.Any]` but is used as type `None`.",
    "message": " mapper_indexed is declared to have type `typing.Callable[[typing.Any, int], typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 1369,
    "warning_line": "def map_indexed(mapper_indexed: MapperIndexed = None) -> Callable[[Observable], Observable]:"
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/operators/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/operators/__init__.py",
    "file_hunks_size": 16,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/operators/__init__.py:2086:11 Incompatible variable type [9]: predicate is declared to have type `typing.Callable[[typing.Any], bool]` but is used as type `None`.",
    "message": " predicate is declared to have type `typing.Callable[[typing.Any], bool]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 2086,
    "warning_line": "def single(predicate: Predicate = None) -> Callable[[Observable], Observable]:"
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/operators/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/operators/__init__.py",
    "file_hunks_size": 16,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/operators/__init__.py:2118:22 Incompatible variable type [9]: predicate is declared to have type `typing.Callable[[typing.Any], bool]` but is used as type `None`.",
    "message": " predicate is declared to have type `typing.Callable[[typing.Any], bool]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 2118,
    "warning_line": "def single_or_default(predicate: Predicate = None, default_value: Any = None) -> Observable:"
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/operators/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/operators/__init__.py",
    "file_hunks_size": 16,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/operators/__init__.py:2465:12 Incompatible variable type [9]: mapper is declared to have type `typing.Callable[[typing.Any], typing.Any]` but is used as type `None`.",
    "message": " mapper is declared to have type `typing.Callable[[typing.Any], typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 2465,
    "warning_line": "def starmap(mapper: Mapper = None) -> Callable[[Observable], Observable]:"
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/operators/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/operators/__init__.py",
    "file_hunks_size": 16,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/operators/__init__.py:2923:14 Incompatible variable type [9]: scheduler is declared to have type `typing.Scheduler` but is used as type `None`.",
    "message": " scheduler is declared to have type `typing.Scheduler` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 2923,
    "warning_line": "def timestamp(scheduler: typing.Scheduler = None) -> Callable[[Observable], Observable]:"
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/operators/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/operators/__init__.py",
    "file_hunks_size": 16,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/operators/__init__.py:2943:68 Incompatible variable type [9]: scheduler is declared to have type `typing.Scheduler` but is used as type `None`.",
    "message": " scheduler is declared to have type `typing.Scheduler` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 2943,
    "warning_line": "def timeout(duetime: typing.AbsoluteTime, other: Observable = None, scheduler: typing.Scheduler = None"
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/operators/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/operators/__init__.py",
    "file_hunks_size": 16,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/operators/__init__.py:3007:18 Incompatible variable type [9]: scheduler is declared to have type `typing.Scheduler` but is used as type `None`.",
    "message": " scheduler is declared to have type `typing.Scheduler` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 3007,
    "warning_line": "def time_interval(scheduler: typing.Scheduler = None) -> Callable[[Observable], Observable]:"
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/operators/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/operators/__init__.py",
    "file_hunks_size": 16,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/operators/__init__.py:3079:52 Incompatible variable type [9]: scheduler is declared to have type `typing.Scheduler` but is used as type `None`.",
    "message": " scheduler is declared to have type `typing.Scheduler` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 3079,
    "warning_line": "def to_marbles(timespan: typing.RelativeTime = 0.1, scheduler: typing.Scheduler = None ) -> Callable[[Observable], Observable]:"
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/operators/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/operators/__init__.py",
    "file_hunks_size": 16,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/operators/__init__.py:3154:34 Incompatible variable type [9]: skip is declared to have type `int` but is used as type `None`.",
    "message": " skip is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 3154,
    "warning_line": "def window_with_count(count: int, skip: int = None) -> Callable[[Observable], Observable]:"
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/operators/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/operators/__init__.py",
    "file_hunks_size": 16,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/operators/__init__.py:3184:52 Incompatible variable type [9]: timeshift is declared to have type `Union[float, timedelta]` but is used as type `None`.",
    "message": " timeshift is declared to have type `Union[float, timedelta]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 3184,
    "warning_line": "def window_with_time(timespan: typing.RelativeTime, timeshift: typing.RelativeTime = None,"
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/operators/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/operators/__init__.py",
    "file_hunks_size": 16,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/operators/__init__.py:3185:21 Incompatible variable type [9]: scheduler is declared to have type `typing.Scheduler` but is used as type `None`.",
    "message": " scheduler is declared to have type `typing.Scheduler` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 3185,
    "warning_line": "                     scheduler: typing.Scheduler = None) -> Callable[[Observable], Observable]:"
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/operators/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/operators/__init__.py",
    "file_hunks_size": 16,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/operators/__init__.py:3191:30 Incompatible variable type [9]: scheduler is declared to have type `typing.Scheduler` but is used as type `None`.",
    "message": " scheduler is declared to have type `typing.Scheduler` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 3191,
    "warning_line": "                              scheduler: typing.Scheduler = None) -> Callable[[Observable], Observable]:"
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/subjects/anonymoussubject.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/subjects/anonymoussubject.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/subjects/anonymoussubject.py:15:50 Incompatible variable type [9]: scheduler is declared to have type `Scheduler` but is used as type `None`.",
    "message": " scheduler is declared to have type `Scheduler` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 15,
    "warning_line": "    def _subscribe_core(self, observer: Observer, scheduler: Scheduler = None) -> typing.Disposable:"
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "cd3d5a5b833a0df3ecd91116c0243ebaa762578c",
    "filename": "rx/subjects/subject.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/subjects/subject.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/subjects/subject.py:33:50 Incompatible variable type [9]: scheduler is declared to have type `Scheduler` but is used as type `None`.",
    "message": " scheduler is declared to have type `Scheduler` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 33,
    "warning_line": "    def _subscribe_core(self, observer: Observer, scheduler: Scheduler = None) -> typing.Disposable:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _subscribe_core(self, observer: Observer, scheduler: Scheduler = None) -> typing.Disposable:\n        with self.lock:\n",
        "source_code_len": 126,
        "target_code": "\n    def _subscribe_core(self, observer: Observer, scheduler: Optional[Scheduler] = None) -> typing.Disposable:\n        with self.lock:\n",
        "target_code_len": 136,
        "diff_format": "@@ -32,3 +32,3 @@\n \n-    def _subscribe_core(self, observer: Observer, scheduler: Scheduler = None) -> typing.Disposable:\n+    def _subscribe_core(self, observer: Observer, scheduler: Optional[Scheduler] = None) -> typing.Disposable:\n         with self.lock:\n",
        "source_code_with_indent": "\n    <DED><DED>def _subscribe_core(self, observer: Observer, scheduler: Scheduler = None) -> typing.Disposable:\n        <IND>with self.lock:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED><DED>def _subscribe_core(self, observer: Observer, scheduler: Optional[Scheduler] = None) -> typing.Disposable:\n        <IND>with self.lock:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]