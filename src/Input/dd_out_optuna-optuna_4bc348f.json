[
  {
    "project": "optuna/optuna",
    "commit": "4bc348f58129abfedd9d27aaf2d301fb75fc5e75",
    "filename": "optuna/storages/in_memory.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/optuna-optuna/optuna/storages/in_memory.py",
    "file_hunks_size": 15,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "optuna/storages/in_memory.py:179:40 Incompatible parameter type [6]: Expected `typing_extensions.SupportsIndex` for 1st positional only parameter to call `list.__getitem__` but got `Optional[int]`.",
    "message": " Expected `typing_extensions.SupportsIndex` for 1st positional only parameter to call `list.__getitem__` but got `Optional[int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 179,
    "warning_line": "                best_trial=self._trials[self._best_trial_id[study_id]] if self._best_trial_id[study_id] else None,"
  },
  {
    "project": "optuna/optuna",
    "commit": "4bc348f58129abfedd9d27aaf2d301fb75fc5e75",
    "filename": "optuna/storages/in_memory.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/optuna-optuna/optuna/storages/in_memory.py",
    "file_hunks_size": 15,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "optuna/storages/in_memory.py:297:30 Incompatible parameter type [6]: Expected `int` for 1st positional only parameter to call `InMemoryStorage.get_trial` but got `Optional[int]`.",
    "message": " Expected `int` for 1st positional only parameter to call `InMemoryStorage.get_trial` but got `Optional[int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 297,
    "warning_line": "        return self.get_trial(self._best_trial_id[study_id])",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        if self._best_trial_id[study_id] is None:\n            raise ValueError(\"No trials are completed yet.\")\n        return self.get_trial(self._best_trial_id[study_id])\n\n",
        "source_code_len": 174,
        "target_code": "\n        best_trial_id = self._best_trial_id[study_id]\n        if best_trial_id is None:\n            raise ValueError(\"No trials are completed yet.\")\n        return self.get_trial(best_trial_id)\n\n",
        "target_code_len": 196,
        "diff_format": "@@ -294,5 +300,6 @@\n \n-        if self._best_trial_id[study_id] is None:\n+        best_trial_id = self._best_trial_id[study_id]\n+        if best_trial_id is None:\n             raise ValueError(\"No trials are completed yet.\")\n-        return self.get_trial(self._best_trial_id[study_id])\n+        return self.get_trial(best_trial_id)\n \n",
        "source_code_with_indent": "\n        if self._best_trial_id[study_id] is None:\n            <IND>raise ValueError(\"No trials are completed yet.\")\n        <DED>return self.get_trial(self._best_trial_id[study_id])\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        best_trial_id = self._best_trial_id[study_id]\n        if best_trial_id is None:\n            <IND>raise ValueError(\"No trials are completed yet.\")\n        <DED>return self.get_trial(best_trial_id)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "optuna/optuna",
    "commit": "4bc348f58129abfedd9d27aaf2d301fb75fc5e75",
    "filename": "optuna/storages/in_memory.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/optuna-optuna/optuna/storages/in_memory.py",
    "file_hunks_size": 15,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "optuna/storages/in_memory.py:330:34 Incompatible parameter type [6]: Expected `typing_extensions.SupportsIndex` for 1st positional only parameter to call `list.__getitem__` but got `Optional[int]`.",
    "message": " Expected `typing_extensions.SupportsIndex` for 1st positional only parameter to call `list.__getitem__` but got `Optional[int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 330,
    "warning_line": "        best_value = self._trials[self._best_trial_id[study_id]].value",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        self._check_trial_id(trial_id)\n\n        if self._trials[trial_id].state != TrialState.COMPLETE:\n            return\n\n        if self._best_trial_id[study_id] is None:\n            self._best_trial_id[study_id] = trial_id\n            return\n        best_value = self._trials[self._best_trial_id[study_id]].value\n        new_value = self._trials[trial_id].value\n        if best_value is None:\n",
        "source_code_len": 398,
        "target_code": "\n        trial = self.get_trial(trial_id)\n\n        if trial.state != TrialState.COMPLETE:\n            return\n\n        best_trial_id = self._best_trial_id[study_id]\n        if best_trial_id is None:\n            self._best_trial_id[study_id] = trial_id\n            return\n        best_trial = self._trials[best_trial_id]\n        assert best_trial is not None\n        best_value = best_trial.value\n        new_value = trial.value\n        if best_value is None:\n",
        "target_code_len": 458,
        "diff_format": "@@ -321,12 +328,15 @@\n \n-        self._check_trial_id(trial_id)\n-\n-        if self._trials[trial_id].state != TrialState.COMPLETE:\n+        trial = self.get_trial(trial_id)\n+\n+        if trial.state != TrialState.COMPLETE:\n             return\n \n-        if self._best_trial_id[study_id] is None:\n+        best_trial_id = self._best_trial_id[study_id]\n+        if best_trial_id is None:\n             self._best_trial_id[study_id] = trial_id\n             return\n-        best_value = self._trials[self._best_trial_id[study_id]].value\n-        new_value = self._trials[trial_id].value\n+        best_trial = self._trials[best_trial_id]\n+        assert best_trial is not None\n+        best_value = best_trial.value\n+        new_value = trial.value\n         if best_value is None:\n",
        "source_code_with_indent": "\n        <IND>self._check_trial_id(trial_id)\n\n        if self._trials[trial_id].state != TrialState.COMPLETE:\n            <IND>return\n\n        <DED>if self._best_trial_id[study_id] is None:\n            <IND>self._best_trial_id[study_id] = trial_id\n            return\n        <DED>best_value = self._trials[self._best_trial_id[study_id]].value\n        new_value = self._trials[trial_id].value\n        if best_value is None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        <IND>trial = self.get_trial(trial_id)\n\n        if trial.state != TrialState.COMPLETE:\n            <IND>return\n\n        <DED>best_trial_id = self._best_trial_id[study_id]\n        if best_trial_id is None:\n            <IND>self._best_trial_id[study_id] = trial_id\n            return\n        <DED>best_trial = self._trials[best_trial_id]\n        assert best_trial is not None\n        best_value = best_trial.value\n        new_value = trial.value\n        if best_value is None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "optuna/optuna",
    "commit": "4bc348f58129abfedd9d27aaf2d301fb75fc5e75",
    "filename": "optuna/storages/in_memory.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/optuna-optuna/optuna/storages/in_memory.py",
    "file_hunks_size": 15,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "optuna/storages/in_memory.py:400:12 Incompatible return type [7]: Expected `FrozenTrial` but got `Optional[FrozenTrial]`.",
    "message": " Expected `FrozenTrial` but got `Optional[FrozenTrial]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 400,
    "warning_line": "            return self._trials[trial_id]",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self._check_trial_id(trial_id)\n\n        with self._lock:\n            return self._trials[trial_id]\n\n",
        "source_code_len": 108,
        "target_code": "        self._check_trial_id(trial_id)\n        trial = self._trials[trial_id]\n        assert trial is not None\n        return trial\n\n",
        "target_code_len": 133,
        "diff_format": "@@ -397,5 +408,5 @@\n         self._check_trial_id(trial_id)\n-\n-        with self._lock:\n-            return self._trials[trial_id]\n+        trial = self._trials[trial_id]\n+        assert trial is not None\n+        return trial\n \n",
        "source_code_with_indent": "        <IND>self._check_trial_id(trial_id)\n\n        with self._lock:\n            <IND>return self._trials[trial_id]\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>self._check_trial_id(trial_id)\n        trial = self._trials[trial_id]\n        assert trial is not None\n        return trial\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "optuna/optuna",
    "commit": "4bc348f58129abfedd9d27aaf2d301fb75fc5e75",
    "filename": "optuna/storages/in_memory.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/optuna-optuna/optuna/storages/in_memory.py",
    "file_hunks_size": 15,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "optuna/storages/in_memory.py:408:16 Incompatible return type [7]: Expected `List[FrozenTrial]` but got `List[Optional[FrozenTrial]]`.",
    "message": " Expected `List[FrozenTrial]` but got `List[Optional[FrozenTrial]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 408,
    "warning_line": "                return [copy.deepcopy(self._trials[tid]) for tid in self._study_trials[study_id]]",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        self._check_study_id(study_id)\n        with self._lock:\n            if deepcopy:\n                return [copy.deepcopy(self._trials[tid]) for tid in self._study_trials[study_id]]\n            else:\n                return [self._trials[tid] for tid in self._study_trials[study_id]]\n\n",
        "source_code_len": 290,
        "target_code": "\n        # TODO(ytsmiling) Rewrite the whole trial management logic for faster get_all_trials.\n\n        self._check_study_id(study_id)\n        trials = [self._trials[tid] for tid in self._study_trials[study_id]]\n        with self._lock:\n            if deepcopy:\n                return [copy.deepcopy(trial) for trial in trials if trial is not None]\n            else:\n                return [trial for trial in trials if trial is not None]\n\n",
        "target_code_len": 440,
        "diff_format": "@@ -404,8 +415,11 @@\n \n-        self._check_study_id(study_id)\n+        # TODO(ytsmiling) Rewrite the whole trial management logic for faster get_all_trials.\n+\n+        self._check_study_id(study_id)\n+        trials = [self._trials[tid] for tid in self._study_trials[study_id]]\n         with self._lock:\n             if deepcopy:\n-                return [copy.deepcopy(self._trials[tid]) for tid in self._study_trials[study_id]]\n+                return [copy.deepcopy(trial) for trial in trials if trial is not None]\n             else:\n-                return [self._trials[tid] for tid in self._study_trials[study_id]]\n+                return [trial for trial in trials if trial is not None]\n \n",
        "source_code_with_indent": "\n        <IND>self._check_study_id(study_id)\n        with self._lock:\n            <IND>if deepcopy:\n                <IND>return [copy.deepcopy(self._trials[tid]) for tid in self._study_trials[study_id]]\n            <DED>else:\n                <IND>return [self._trials[tid] for tid in self._study_trials[study_id]]\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        # TODO(ytsmiling) Rewrite the whole trial management logic for faster get_all_trials.\n\n        <IND>self._check_study_id(study_id)\n        trials = [self._trials[tid] for tid in self._study_trials[study_id]]\n        with self._lock:\n            <IND>if deepcopy:\n                <IND>return [copy.deepcopy(trial) for trial in trials if trial is not None]\n            <DED>else:\n                <IND>return [trial for trial in trials if trial is not None]\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "optuna/optuna",
    "commit": "4bc348f58129abfedd9d27aaf2d301fb75fc5e75",
    "filename": "optuna/storages/in_memory.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/optuna-optuna/optuna/storages/in_memory.py",
    "file_hunks_size": 15,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "optuna/storages/in_memory.py:410:16 Incompatible return type [7]: Expected `List[FrozenTrial]` but got `List[Optional[FrozenTrial]]`.",
    "message": " Expected `List[FrozenTrial]` but got `List[Optional[FrozenTrial]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 410,
    "warning_line": "                return [self._trials[tid] for tid in self._study_trials[study_id]]",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        self._check_study_id(study_id)\n        with self._lock:\n            if deepcopy:\n                return [copy.deepcopy(self._trials[tid]) for tid in self._study_trials[study_id]]\n            else:\n                return [self._trials[tid] for tid in self._study_trials[study_id]]\n\n",
        "source_code_len": 290,
        "target_code": "\n        # TODO(ytsmiling) Rewrite the whole trial management logic for faster get_all_trials.\n\n        self._check_study_id(study_id)\n        trials = [self._trials[tid] for tid in self._study_trials[study_id]]\n        with self._lock:\n            if deepcopy:\n                return [copy.deepcopy(trial) for trial in trials if trial is not None]\n            else:\n                return [trial for trial in trials if trial is not None]\n\n",
        "target_code_len": 440,
        "diff_format": "@@ -404,8 +415,11 @@\n \n-        self._check_study_id(study_id)\n+        # TODO(ytsmiling) Rewrite the whole trial management logic for faster get_all_trials.\n+\n+        self._check_study_id(study_id)\n+        trials = [self._trials[tid] for tid in self._study_trials[study_id]]\n         with self._lock:\n             if deepcopy:\n-                return [copy.deepcopy(self._trials[tid]) for tid in self._study_trials[study_id]]\n+                return [copy.deepcopy(trial) for trial in trials if trial is not None]\n             else:\n-                return [self._trials[tid] for tid in self._study_trials[study_id]]\n+                return [trial for trial in trials if trial is not None]\n \n",
        "source_code_with_indent": "\n        <IND>self._check_study_id(study_id)\n        with self._lock:\n            <IND>if deepcopy:\n                <IND>return [copy.deepcopy(self._trials[tid]) for tid in self._study_trials[study_id]]\n            <DED>else:\n                <IND>return [self._trials[tid] for tid in self._study_trials[study_id]]\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        # TODO(ytsmiling) Rewrite the whole trial management logic for faster get_all_trials.\n\n        <IND>self._check_study_id(study_id)\n        trials = [self._trials[tid] for tid in self._study_trials[study_id]]\n        with self._lock:\n            <IND>if deepcopy:\n                <IND>return [copy.deepcopy(trial) for trial in trials if trial is not None]\n            <DED>else:\n                <IND>return [trial for trial in trials if trial is not None]\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]