[
  {
    "project": "PyFilesystem/pyfilesystem2",
    "commit": "84719bebdee4b516bf4eef2a0dd2ac26339ab59b",
    "filename": "fs/opener/registry.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/PyFilesystem-pyfilesystem2/fs/opener/registry.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "fs/opener/registry.py:79:8 Incompatible return type [7]: Expected `None` but got `Union[typing.Callable[[], Opener], Type[Opener], Opener]`.",
    "message": " Expected `None` but got `Union[typing.Callable[[], Opener], Type[Opener], Opener]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 79,
    "warning_line": "        return opener",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def install(self, opener):\n        # type: (Union[Type[Opener], Opener, Callable[[], Opener]]) -> None\n        \"\"\"Install an opener.\n",
        "source_code_len": 137,
        "target_code": "    def install(self, opener):\n        # type: (Union[Type[Opener], Opener, Callable[[], Opener]]) -> Opener\n        \"\"\"Install an opener.\n",
        "target_code_len": 139,
        "diff_format": "@@ -59,3 +59,3 @@\n     def install(self, opener):\n-        # type: (Union[Type[Opener], Opener, Callable[[], Opener]]) -> None\n+        # type: (Union[Type[Opener], Opener, Callable[[], Opener]]) -> Opener\n         \"\"\"Install an opener.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "    <DED>def install(self, opener):\n        # type: (Union[Type[Opener], Opener, Callable[[], Opener]]) -> None\n        <IND>",
        "target_code_with_indent": "    <DED>def install(self, opener):\n        # type: (Union[Type[Opener], Opener, Callable[[], Opener]]) -> Opener\n        <IND>"
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            self._protocols[protocol] = _opener\n        return opener\n\n",
        "source_code_len": 71,
        "target_code": "            self._protocols[protocol] = _opener\n        return _opener\n\n",
        "target_code_len": 72,
        "diff_format": "@@ -78,3 +78,3 @@\n             self._protocols[protocol] = _opener\n-        return opener\n+        return _opener\n \n",
        "source_code_with_indent": "            <IND>self._protocols[protocol] = _opener\n        <DED>return opener\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <IND>self._protocols[protocol] = _opener\n        <DED>return _opener\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]