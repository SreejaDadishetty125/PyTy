[
  {
    "project": "rotki/rotki",
    "commit": "b763072c34b7f9d444fc042c460c93b458c8c282",
    "filename": "rotkehlchen/blockchain.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/rotki-rotki/rotkehlchen/blockchain.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rotkehlchen/blockchain.py:131:43 Incompatible parameter type [6]: Expected `Dict[typing.EthAddress, Dict[Union[str, typing.EthToken, typing.NonEthTokenBlockchainAsset], FVal]]` for 2nd positional only parameter to call `Blockchain.query_ethereum_tokens` but got `Dict[Union[typing.BTCAddress, typing.EthAddress], Dict[Union[str, typing.EthToken, typing.FiatAsset, typing.NonEthTokenBlockchainAsset], FVal]]`.",
    "message": " Expected `Dict[typing.EthAddress, Dict[Union[str, typing.EthToken, typing.NonEthTokenBlockchainAsset], FVal]]` for 2nd positional only parameter to call `Blockchain.query_ethereum_tokens` but got `Dict[Union[typing.BTCAddress, typing.EthAddress], Dict[Union[str, typing.EthToken, typing.FiatAsset, typing.NonEthTokenBlockchainAsset], FVal]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 131,
    "warning_line": "        self.query_ethereum_tokens(tokens, self.balances[S_ETH])",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self.owned_eth_tokens.extend(tokens)\n        self.query_ethereum_tokens(tokens, self.balances[S_ETH])\n        return {'per_account': self.balances, 'totals': self.totals}\n",
        "source_code_len": 179,
        "target_code": "        self.owned_eth_tokens.extend(tokens)\n        eth_balances = cast(EthBalances, self.balances[S_ETH])\n        self.query_ethereum_tokens(tokens, eth_balances)\n        return {'per_account': self.balances, 'totals': self.totals}\n",
        "target_code_len": 234,
        "diff_format": "@@ -130,3 +130,4 @@\n         self.owned_eth_tokens.extend(tokens)\n-        self.query_ethereum_tokens(tokens, self.balances[S_ETH])\n+        eth_balances = cast(EthBalances, self.balances[S_ETH])\n+        self.query_ethereum_tokens(tokens, eth_balances)\n         return {'per_account': self.balances, 'totals': self.totals}\n",
        "source_code_with_indent": "        <DED>self.owned_eth_tokens.extend(tokens)\n        self.query_ethereum_tokens(tokens, self.balances[S_ETH])\n        return {'per_account': self.balances, 'totals': self.totals}\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>self.owned_eth_tokens.extend(tokens)\n        eth_balances = cast(EthBalances, self.balances[S_ETH])\n        self.query_ethereum_tokens(tokens, eth_balances)\n        return {'per_account': self.balances, 'totals': self.totals}\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "rotki/rotki",
    "commit": "b763072c34b7f9d444fc042c460c93b458c8c282",
    "filename": "rotkehlchen/blockchain.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/rotki-rotki/rotkehlchen/blockchain.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rotkehlchen/blockchain.py:339:31 Incompatible parameter type [6]: Expected `Dict[Union[typing.BTCAddress, typing.EthAddress], Dict[Union[str, typing.EthToken, typing.FiatAsset, typing.NonEthTokenBlockchainAsset], FVal]]` for 2nd positional only parameter to call `dict.__setitem__` but got `Dict[typing.EthAddress, Dict[Union[str, typing.EthToken, typing.NonEthTokenBlockchainAsset], FVal]]`.",
    "message": " Expected `Dict[Union[typing.BTCAddress, typing.EthAddress], Dict[Union[str, typing.EthToken, typing.FiatAsset, typing.NonEthTokenBlockchainAsset], FVal]]` for 2nd positional only parameter to call `dict.__setitem__` but got `Dict[typing.EthAddress, Dict[Union[str, typing.EthToken, typing.NonEthTokenBlockchainAsset], FVal]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 339,
    "warning_line": "        self.balances[S_ETH] = eth_balances",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        self.balances[S_ETH] = eth_balances\n\n",
        "source_code_len": 46,
        "target_code": "\n        self.balances[S_ETH] = cast(\n            Dict[typing.BlockchainAddress, Dict[Union[str, typing.Asset], FVal]],\n            eth_balances,\n        )\n\n",
        "target_code_len": 157,
        "diff_format": "@@ -338,3 +339,6 @@\n \n-        self.balances[S_ETH] = eth_balances\n+        self.balances[S_ETH] = cast(\n+            Dict[typing.BlockchainAddress, Dict[Union[str, typing.Asset], FVal]],\n+            eth_balances,\n+        )\n \n",
        "source_code_with_indent": "\n        <DED>self.balances[S_ETH] = eth_balances\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        <DED>self.balances[S_ETH] = cast(\n            Dict[typing.BlockchainAddress, Dict[Union[str, typing.Asset], FVal]],\n            eth_balances,\n        )\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]