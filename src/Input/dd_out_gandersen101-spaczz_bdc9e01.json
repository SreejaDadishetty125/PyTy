[
  {
    "project": "gandersen101/spaczz",
    "commit": "bdc9e01192843e6f0fac9b7b38619ac073a38463",
    "filename": "src/spaczz/fuzz/fuzzysearch.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/gandersen101-spaczz/src/spaczz/fuzz/fuzzysearch.py",
    "file_hunks_size": 17,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/spaczz/fuzz/fuzzysearch.py:274:51 Incompatible parameter type [6]: Expected `List[Optional[Tuple[int, int, int]]]` for 1st positional only parameter to call `FuzzySearch._filter_overlapping_matches` but got `List[Tuple[int, int, int]]`.",
    "message": " Expected `List[Optional[Tuple[int, int, int]]]` for 1st positional only parameter to call `FuzzySearch._filter_overlapping_matches` but got `List[Tuple[int, int, int]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 274,
    "warning_line": "        matches = self._filter_overlapping_matches(matches)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        end_trimmers: Optional[Iterable[str]] = None,\n    ) -> List[Optional[Tuple[int, int, int]]]:\n        \"\"\"Returns the n best fuzzy matches in a Doc.\n",
        "source_code_len": 155,
        "target_code": "        end_trimmers: Optional[Iterable[str]] = None,\n    ) -> Union[List[Tuple[int, int, int]], List]:\n        \"\"\"Returns the n best fuzzy matches in a Doc.\n",
        "target_code_len": 158,
        "diff_format": "@@ -187,3 +187,3 @@\n         end_trimmers: Optional[Iterable[str]] = None,\n-    ) -> List[Optional[Tuple[int, int, int]]]:\n+    ) -> Union[List[Tuple[int, int, int]], List]:\n         \"\"\"Returns the n best fuzzy matches in a Doc.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "        end_trimmers: Optional[Iterable[str]] = None,\n    ) -> List[Optional[Tuple[int, int, int]]]:\n        <IND>",
        "target_code_with_indent": "        end_trimmers: Optional[Iterable[str]] = None,\n    ) -> Union[List[Tuple[int, int, int]], List]:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def _filter_overlapping_matches(\n        matches: List[Optional[Tuple[int, int, int]]]\n    ) -> List[Optional[Tuple[int, int, int]]]:\n        \"\"\"Prevents multiple fuzzy match spans from overlapping.\n",
        "source_code_len": 203,
        "target_code": "    def _filter_overlapping_matches(\n        matches: List[Tuple[int, int, int]]\n    ) -> List[Tuple[int, int, int]]:\n        \"\"\"Prevents multiple fuzzy match spans from overlapping.\n",
        "target_code_len": 183,
        "diff_format": "@@ -685,4 +710,4 @@\n     def _filter_overlapping_matches(\n-        matches: List[Optional[Tuple[int, int, int]]]\n-    ) -> List[Optional[Tuple[int, int, int]]]:\n+        matches: List[Tuple[int, int, int]]\n+    ) -> List[Tuple[int, int, int]]:\n         \"\"\"Prevents multiple fuzzy match spans from overlapping.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "    def _filter_overlapping_matches(\n        matches: List[Optional[Tuple[int, int, int]]]\n    ) -> List[Optional[Tuple[int, int, int]]]:\n        <IND>",
        "target_code_with_indent": "    def _filter_overlapping_matches(\n        matches: List[Tuple[int, int, int]]\n    ) -> List[Tuple[int, int, int]]:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"\"\"\n        filtered_matches: List[Optional[Tuple[int, int, int]]] = []\n        for match in matches:\n",
        "source_code_len": 110,
        "target_code": "        \"\"\"\n        filtered_matches: List[Tuple[int, int, int]] = []\n        # filtered_matches: List[Optional[Tuple[int, int, int]]] = []\n        for match in matches:\n",
        "target_code_len": 170,
        "diff_format": "@@ -708,3 +733,4 @@\n         \"\"\"\n-        filtered_matches: List[Optional[Tuple[int, int, int]]] = []\n+        filtered_matches: List[Tuple[int, int, int]] = []\n+        # filtered_matches: List[Optional[Tuple[int, int, int]]] = []\n         for match in matches:\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n        filtered_matches: List[Optional[Tuple[int, int, int]]] = []\n        for match in matches:\n",
        "target_code_with_indent": "\n        filtered_matches: List[Tuple[int, int, int]] = []\n        # filtered_matches: List[Optional[Tuple[int, int, int]]] = []\n        for match in matches:\n"
      }
    ]
  },
  {
    "project": "gandersen101/spaczz",
    "commit": "bdc9e01192843e6f0fac9b7b38619ac073a38463",
    "filename": "src/spaczz/fuzz/fuzzysearch.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/gandersen101-spaczz/src/spaczz/fuzz/fuzzysearch.py",
    "file_hunks_size": 17,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/spaczz/fuzz/fuzzysearch.py:376:16 Incompatible return type [7]: Expected `Optional[Tuple[int, int, int]]` but got `Tuple[Optional[int], Optional[int], int]`.",
    "message": " Expected `Optional[Tuple[int, int, int]]` but got `Tuple[Optional[int], Optional[int], int]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 376,
    "warning_line": "                return (bp_l, bp_r, r)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                    bp_r = p_r + f\n        bp_l, bp_r = self._enforce_trimming_rules(\n            doc, bp_l, bp_r, trimmers, start_trimmers, end_trimmers\n        )\n        if None not in (bp_l, bp_r):\n            r = self.match(query.text, doc[bp_l:bp_r].text, fuzzy_func, ignore_case)\n            if r >= min_r2:\n                return (bp_l, bp_r, r)\n        return None\n",
        "source_code_len": 373,
        "target_code": "                    bp_r = p_r + f\n        new_bp_l, new_bp_r = self._enforce_trimming_rules(\n            doc, bp_l, bp_r, trimmers, start_trimmers, end_trimmers\n        )\n        if new_bp_l is not None and new_bp_r is not None:\n            r = self.match(\n                query.text, doc[new_bp_l:new_bp_r].text, fuzzy_func, ignore_case\n            )\n            if r >= min_r2:\n                return (new_bp_l, new_bp_r, r)\n        return None\n",
        "target_code_len": 448,
        "diff_format": "@@ -369,9 +383,11 @@\n                     bp_r = p_r + f\n-        bp_l, bp_r = self._enforce_trimming_rules(\n+        new_bp_l, new_bp_r = self._enforce_trimming_rules(\n             doc, bp_l, bp_r, trimmers, start_trimmers, end_trimmers\n         )\n-        if None not in (bp_l, bp_r):\n-            r = self.match(query.text, doc[bp_l:bp_r].text, fuzzy_func, ignore_case)\n+        if new_bp_l is not None and new_bp_r is not None:\n+            r = self.match(\n+                query.text, doc[new_bp_l:new_bp_r].text, fuzzy_func, ignore_case\n+            )\n             if r >= min_r2:\n-                return (bp_l, bp_r, r)\n+                return (new_bp_l, new_bp_r, r)\n         return None\n",
        "source_code_with_indent": "                    bp_r = p_r + f\n        <DED><DED><DED>bp_l, bp_r = self._enforce_trimming_rules(\n            doc, bp_l, bp_r, trimmers, start_trimmers, end_trimmers\n        )\n        if None not in (bp_l, bp_r):\n            <IND>r = self.match(query.text, doc[bp_l:bp_r].text, fuzzy_func, ignore_case)\n            if r >= min_r2:\n                <IND>return (bp_l, bp_r, r)\n        <DED><DED>return None\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                    bp_r = p_r + f\n        <DED><DED><DED>new_bp_l, new_bp_r = self._enforce_trimming_rules(\n            doc, bp_l, bp_r, trimmers, start_trimmers, end_trimmers\n        )\n        if new_bp_l is not None and new_bp_r is not None:\n            <IND>r = self.match(\n                query.text, doc[new_bp_l:new_bp_r].text, fuzzy_func, ignore_case\n            )\n            if r >= min_r2:\n                <IND>return (new_bp_l, new_bp_r, r)\n        <DED><DED>return None\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "gandersen101/spaczz",
    "commit": "bdc9e01192843e6f0fac9b7b38619ac073a38463",
    "filename": "src/spaczz/fuzz/fuzzysearch.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/gandersen101-spaczz/src/spaczz/fuzz/fuzzysearch.py",
    "file_hunks_size": 17,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/spaczz/fuzz/fuzzysearch.py:520:8 Incompatible variable type [9]: bp_l is declared to have type `int` but is used as type `Optional[int]`.",
    "message": " bp_l is declared to have type `int` but is used as type `Optional[int]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 520,
    "warning_line": "        bp_l = self._enforce_start_trimmers(doc, bp_l, bp_r, trimmers, start_trimmers)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        doc: Doc,\n        bp_l: int,\n        bp_r: int,\n",
        "source_code_len": 56,
        "target_code": "        doc: Doc,\n        bp_l: Union[int, None],\n        bp_r: int,\n",
        "target_code_len": 69,
        "diff_format": "@@ -381,3 +397,3 @@\n         doc: Doc,\n-        bp_l: int,\n+        bp_l: Union[int, None],\n         bp_r: int,\n",
        "source_code_with_indent": "        doc: Doc,\n        bp_l: int,\n        bp_r: int,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        doc: Doc,\n        bp_l: Union[int, None],\n        bp_r: int,\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"\"\"\n        trimmer_funcs, trimmer_keys = self._config.get_trimmers(\n            \"end\", trimmers, end_trimmers=end_trimmers\n        )\n        if trimmer_funcs:\n            while any([func(doc[bp_r - 1]) for func in trimmer_funcs]):\n                if bp_r - 1 <= bp_l:\n                    return None\n                bp_r -= 1\n        return bp_r\n\n",
        "source_code_len": 356,
        "target_code": "        \"\"\"\n        if bp_l is not None:\n            trimmer_funcs, trimmer_keys = self._config.get_trimmers(\n                \"end\", trimmers, end_trimmers=end_trimmers\n            )\n            if trimmer_funcs:\n                while any([func(doc[bp_r - 1]) for func in trimmer_funcs]):\n                    if bp_r - 1 <= bp_l:\n                        return None\n                    bp_r -= 1\n            return bp_r\n        else:\n            return None\n\n",
        "target_code_len": 459,
        "diff_format": "@@ -415,11 +431,14 @@\n         \"\"\"\n-        trimmer_funcs, trimmer_keys = self._config.get_trimmers(\n-            \"end\", trimmers, end_trimmers=end_trimmers\n-        )\n-        if trimmer_funcs:\n-            while any([func(doc[bp_r - 1]) for func in trimmer_funcs]):\n-                if bp_r - 1 <= bp_l:\n-                    return None\n-                bp_r -= 1\n-        return bp_r\n+        if bp_l is not None:\n+            trimmer_funcs, trimmer_keys = self._config.get_trimmers(\n+                \"end\", trimmers, end_trimmers=end_trimmers\n+            )\n+            if trimmer_funcs:\n+                while any([func(doc[bp_r - 1]) for func in trimmer_funcs]):\n+                    if bp_r - 1 <= bp_l:\n+                        return None\n+                    bp_r -= 1\n+            return bp_r\n+        else:\n+            return None\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n        trimmer_funcs, trimmer_keys = self._config.get_trimmers(\n            \"end\", trimmers, end_trimmers=end_trimmers\n        )\n        if trimmer_funcs:\n            <IND>while any([func(doc[bp_r - 1]) for func in trimmer_funcs]):\n                <IND>if bp_r - 1 <= bp_l:\n                    <IND>return None\n                <DED>bp_r -= 1\n        <DED><DED>return bp_r\n\n",
        "target_code_with_indent": "\n        if bp_l is not None:\n            <IND>trimmer_funcs, trimmer_keys = self._config.get_trimmers(\n                \"end\", trimmers, end_trimmers=end_trimmers\n            )\n            if trimmer_funcs:\n                <IND>while any([func(doc[bp_r - 1]) for func in trimmer_funcs]):\n                    <IND>if bp_r - 1 <= bp_l:\n                        <IND>return None\n                    <DED>bp_r -= 1\n            <DED><DED>return bp_r\n        <DED>else:\n            <IND>return None\n\n"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"\"\"\n        bp_l = self._enforce_start_trimmers(doc, bp_l, bp_r, trimmers, start_trimmers)\n        if bp_l:\n            bp_r = self._enforce_end_trimmers(doc, bp_l, bp_r, trimmers, end_trimmers)\n        return bp_l, bp_r\n\n",
        "source_code_len": 230,
        "target_code": "        \"\"\"\n        new_bp_l = self._enforce_start_trimmers(\n            doc, bp_l, bp_r, trimmers, start_trimmers\n        )\n        new_bp_r = self._enforce_end_trimmers(\n            doc, new_bp_l, bp_r, trimmers, end_trimmers\n        )\n        return new_bp_l, new_bp_r\n\n",
        "target_code_len": 273,
        "diff_format": "@@ -519,6 +538,9 @@\n         \"\"\"\n-        bp_l = self._enforce_start_trimmers(doc, bp_l, bp_r, trimmers, start_trimmers)\n-        if bp_l:\n-            bp_r = self._enforce_end_trimmers(doc, bp_l, bp_r, trimmers, end_trimmers)\n-        return bp_l, bp_r\n+        new_bp_l = self._enforce_start_trimmers(\n+            doc, bp_l, bp_r, trimmers, start_trimmers\n+        )\n+        new_bp_r = self._enforce_end_trimmers(\n+            doc, new_bp_l, bp_r, trimmers, end_trimmers\n+        )\n+        return new_bp_l, new_bp_r\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n        bp_l = self._enforce_start_trimmers(doc, bp_l, bp_r, trimmers, start_trimmers)\n        if bp_l:\n            <IND>bp_r = self._enforce_end_trimmers(doc, bp_l, bp_r, trimmers, end_trimmers)\n        <DED>return bp_l, bp_r\n\n",
        "target_code_with_indent": "\n        new_bp_l = self._enforce_start_trimmers(\n            doc, bp_l, bp_r, trimmers, start_trimmers\n        )\n        new_bp_r = self._enforce_end_trimmers(\n            doc, new_bp_l, bp_r, trimmers, end_trimmers\n        )\n        return new_bp_l, new_bp_r\n\n"
      }
    ]
  },
  {
    "project": "gandersen101/spaczz",
    "commit": "bdc9e01192843e6f0fac9b7b38619ac073a38463",
    "filename": "src/spaczz/fuzz/fuzzysearch.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/gandersen101-spaczz/src/spaczz/fuzz/fuzzysearch.py",
    "file_hunks_size": 17,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/spaczz/fuzz/fuzzysearch.py:522:12 Incompatible variable type [9]: bp_r is declared to have type `int` but is used as type `Optional[int]`.",
    "message": " bp_r is declared to have type `int` but is used as type `Optional[int]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 522,
    "warning_line": "            bp_r = self._enforce_end_trimmers(doc, bp_l, bp_r, trimmers, end_trimmers)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        doc: Doc,\n        bp_l: int,\n        bp_r: int,\n",
        "source_code_len": 56,
        "target_code": "        doc: Doc,\n        bp_l: Union[int, None],\n        bp_r: int,\n",
        "target_code_len": 69,
        "diff_format": "@@ -381,3 +397,3 @@\n         doc: Doc,\n-        bp_l: int,\n+        bp_l: Union[int, None],\n         bp_r: int,\n",
        "source_code_with_indent": "        doc: Doc,\n        bp_l: int,\n        bp_r: int,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        doc: Doc,\n        bp_l: Union[int, None],\n        bp_r: int,\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"\"\"\n        trimmer_funcs, trimmer_keys = self._config.get_trimmers(\n            \"end\", trimmers, end_trimmers=end_trimmers\n        )\n        if trimmer_funcs:\n            while any([func(doc[bp_r - 1]) for func in trimmer_funcs]):\n                if bp_r - 1 <= bp_l:\n                    return None\n                bp_r -= 1\n        return bp_r\n\n",
        "source_code_len": 356,
        "target_code": "        \"\"\"\n        if bp_l is not None:\n            trimmer_funcs, trimmer_keys = self._config.get_trimmers(\n                \"end\", trimmers, end_trimmers=end_trimmers\n            )\n            if trimmer_funcs:\n                while any([func(doc[bp_r - 1]) for func in trimmer_funcs]):\n                    if bp_r - 1 <= bp_l:\n                        return None\n                    bp_r -= 1\n            return bp_r\n        else:\n            return None\n\n",
        "target_code_len": 459,
        "diff_format": "@@ -415,11 +431,14 @@\n         \"\"\"\n-        trimmer_funcs, trimmer_keys = self._config.get_trimmers(\n-            \"end\", trimmers, end_trimmers=end_trimmers\n-        )\n-        if trimmer_funcs:\n-            while any([func(doc[bp_r - 1]) for func in trimmer_funcs]):\n-                if bp_r - 1 <= bp_l:\n-                    return None\n-                bp_r -= 1\n-        return bp_r\n+        if bp_l is not None:\n+            trimmer_funcs, trimmer_keys = self._config.get_trimmers(\n+                \"end\", trimmers, end_trimmers=end_trimmers\n+            )\n+            if trimmer_funcs:\n+                while any([func(doc[bp_r - 1]) for func in trimmer_funcs]):\n+                    if bp_r - 1 <= bp_l:\n+                        return None\n+                    bp_r -= 1\n+            return bp_r\n+        else:\n+            return None\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n        trimmer_funcs, trimmer_keys = self._config.get_trimmers(\n            \"end\", trimmers, end_trimmers=end_trimmers\n        )\n        if trimmer_funcs:\n            <IND>while any([func(doc[bp_r - 1]) for func in trimmer_funcs]):\n                <IND>if bp_r - 1 <= bp_l:\n                    <IND>return None\n                <DED>bp_r -= 1\n        <DED><DED>return bp_r\n\n",
        "target_code_with_indent": "\n        if bp_l is not None:\n            <IND>trimmer_funcs, trimmer_keys = self._config.get_trimmers(\n                \"end\", trimmers, end_trimmers=end_trimmers\n            )\n            if trimmer_funcs:\n                <IND>while any([func(doc[bp_r - 1]) for func in trimmer_funcs]):\n                    <IND>if bp_r - 1 <= bp_l:\n                        <IND>return None\n                    <DED>bp_r -= 1\n            <DED><DED>return bp_r\n        <DED>else:\n            <IND>return None\n\n"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"\"\"\n        bp_l = self._enforce_start_trimmers(doc, bp_l, bp_r, trimmers, start_trimmers)\n        if bp_l:\n            bp_r = self._enforce_end_trimmers(doc, bp_l, bp_r, trimmers, end_trimmers)\n        return bp_l, bp_r\n\n",
        "source_code_len": 230,
        "target_code": "        \"\"\"\n        new_bp_l = self._enforce_start_trimmers(\n            doc, bp_l, bp_r, trimmers, start_trimmers\n        )\n        new_bp_r = self._enforce_end_trimmers(\n            doc, new_bp_l, bp_r, trimmers, end_trimmers\n        )\n        return new_bp_l, new_bp_r\n\n",
        "target_code_len": 273,
        "diff_format": "@@ -519,6 +538,9 @@\n         \"\"\"\n-        bp_l = self._enforce_start_trimmers(doc, bp_l, bp_r, trimmers, start_trimmers)\n-        if bp_l:\n-            bp_r = self._enforce_end_trimmers(doc, bp_l, bp_r, trimmers, end_trimmers)\n-        return bp_l, bp_r\n+        new_bp_l = self._enforce_start_trimmers(\n+            doc, bp_l, bp_r, trimmers, start_trimmers\n+        )\n+        new_bp_r = self._enforce_end_trimmers(\n+            doc, new_bp_l, bp_r, trimmers, end_trimmers\n+        )\n+        return new_bp_l, new_bp_r\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n        bp_l = self._enforce_start_trimmers(doc, bp_l, bp_r, trimmers, start_trimmers)\n        if bp_l:\n            <IND>bp_r = self._enforce_end_trimmers(doc, bp_l, bp_r, trimmers, end_trimmers)\n        <DED>return bp_l, bp_r\n\n",
        "target_code_with_indent": "\n        new_bp_l = self._enforce_start_trimmers(\n            doc, bp_l, bp_r, trimmers, start_trimmers\n        )\n        new_bp_r = self._enforce_end_trimmers(\n            doc, new_bp_l, bp_r, trimmers, end_trimmers\n        )\n        return new_bp_l, new_bp_r\n\n"
      }
    ]
  }
]