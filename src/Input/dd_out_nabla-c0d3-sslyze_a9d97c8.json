[
  {
    "project": "nabla-c0d3/sslyze",
    "commit": "a9d97c83dc6145535154e7eadd6e5deb33171b7a",
    "filename": "sslyze/cli/json_output.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/nabla-c0d3-sslyze/sslyze/cli/json_output.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "sslyze/cli/json_output.py:71:35 Incompatible parameter type [6]: Expected `typing.Callable[[Variable[copyreg._TypeT (bound to typing.Type[typing.Any])]], Union[typing.Tuple[typing.Callable[..., Variable[copyreg._TypeT (bound to typing.Type[Variable[T]])]], typing.Tuple[typing.Any, ...]], typing.Tuple[typing.Callable[..., Variable[copyreg._TypeT (bound to typing.Type[Variable[T]])]], typing.Tuple[typing.Any, ...], typing.Any], str]]` for 2nd positional only parameter to call `copyreg.pickle` but got `typing.Callable(_traceback_to_str)[[Named(traceback, TracebackException)], str]`.",
    "message": " Expected `typing.Callable[[Variable[copyreg._TypeT (bound to typing.Type[typing.Any])]], Union[typing.Tuple[typing.Callable[..., Variable[copyreg._TypeT (bound to typing.Type[Variable[T]])]], typing.Tuple[typing.Any, ...]], typing.Tuple[typing.Callable[..., Variable[copyreg._TypeT (bound to typing.Type[Variable[T]])]], typing.Tuple[typing.Any, ...], typing.Any], str]]` for 2nd positional only parameter to call `copyreg.pickle` but got `typing.Callable(_traceback_to_str)[[Named(traceback, TracebackException)], str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 71,
    "warning_line": "copyreg.pickle(TracebackException, _traceback_to_str)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\ncopyreg.pickle(TracebackException, _traceback_to_str)\n\n",
        "source_code_len": 56,
        "target_code": "\ncopyreg.pickle(TracebackException, _traceback_to_str)  # type: ignore\n\n",
        "target_code_len": 72,
        "diff_format": "@@ -70,3 +70,3 @@\n \n-copyreg.pickle(TracebackException, _traceback_to_str)\n+copyreg.pickle(TracebackException, _traceback_to_str)  # type: ignore\n \n",
        "source_code_with_indent": "\n<DED>copyreg.pickle(TracebackException, _traceback_to_str)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>copyreg.pickle(TracebackException, _traceback_to_str)  # type: ignore\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "nabla-c0d3/sslyze",
    "commit": "a9d97c83dc6145535154e7eadd6e5deb33171b7a",
    "filename": "sslyze/plugins/certificate_info/cli_connector.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/nabla-c0d3-sslyze/sslyze/plugins/certificate_info/cli_connector.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "sslyze/plugins/certificate_info/cli_connector.py:52:84 Incompatible parameter type [6]: Expected `Union[os.PathLike[str], str]` for 1st positional only parameter to call `Path.__new__` but got `Union[bool, str]`.",
    "message": " Expected `Union[os.PathLike[str], str]` for 1st positional only parameter to call `Path.__new__` but got `Union[bool, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 52,
    "warning_line": "                extra_arguments = CertificateInfoExtraArguments(custom_ca_file=Path(certinfo_ca_file))",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            if certinfo_ca_file:\n                extra_arguments = CertificateInfoExtraArguments(custom_ca_file=Path(certinfo_ca_file))\n",
        "source_code_len": 136,
        "target_code": "            if certinfo_ca_file:\n                if not isinstance(certinfo_ca_file, str):\n                    raise TypeError(f\"Expected a str for certinfo_ca_file but received {certinfo_ca_file}\")\n                extra_arguments = CertificateInfoExtraArguments(custom_ca_file=Path(certinfo_ca_file))\n",
        "target_code_len": 302,
        "diff_format": "@@ -51,2 +51,4 @@\n             if certinfo_ca_file:\n+                if not isinstance(certinfo_ca_file, str):\n+                    raise TypeError(f\"Expected a str for certinfo_ca_file but received {certinfo_ca_file}\")\n                 extra_arguments = CertificateInfoExtraArguments(custom_ca_file=Path(certinfo_ca_file))\n",
        "source_code_with_indent": "            if certinfo_ca_file:\n                <IND>extra_arguments = CertificateInfoExtraArguments(custom_ca_file=Path(certinfo_ca_file))\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            if certinfo_ca_file:\n                <IND>if not isinstance(certinfo_ca_file, str):\n                    <IND>raise TypeError(f\"Expected a str for certinfo_ca_file but received {certinfo_ca_file}\")\n                <DED>extra_arguments = CertificateInfoExtraArguments(custom_ca_file=Path(certinfo_ca_file))\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "nabla-c0d3/sslyze",
    "commit": "a9d97c83dc6145535154e7eadd6e5deb33171b7a",
    "filename": "sslyze/plugins/certificate_info/cli_connector.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/nabla-c0d3-sslyze/sslyze/plugins/certificate_info/cli_connector.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "sslyze/plugins/certificate_info/cli_connector.py:241:62 Incompatible parameter type [6]: Expected `str` for 2nd positional only parameter to call `ScanCommandCliConnector._format_field` but got `int`.",
    "message": " Expected `str` for 2nd positional only parameter to call `ScanCommandCliConnector._format_field` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 241,
    "warning_line": "            text_output.append(cls._format_field(\"Key Size:\", public_key.curve.key_size))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n        if isinstance(public_key, EllipticCurvePublicKey):\n            text_output.append(cls._format_field(\"Key Size:\", public_key.curve.key_size))\n            text_output.append(cls._format_field(\"Curve:\", public_key.curve.name))\n        elif isinstance(public_key, RSAPublicKey):\n            text_output.append(cls._format_field(\"Key Size:\", public_key.key_size))\n            text_output.append(cls._format_field(\"Exponent:\", \"{0} (0x{0:x})\".format(public_key.public_numbers().e)))\n        else:\n",
        "source_code_len": 500,
        "target_code": "\n        public_key = result.received_certificate_chain[0].public_key()\n        if isinstance(public_key, EllipticCurvePublicKey):\n            text_output.append(cls._format_field(\"Key Size:\", str(public_key.curve.key_size)))\n            text_output.append(cls._format_field(\"Curve:\", str(public_key.curve.name)))\n        elif isinstance(public_key, RSAPublicKey):\n            text_output.append(cls._format_field(\"Key Size:\", str(public_key.key_size)))\n            text_output.append(cls._format_field(\"Exponent:\", str(public_key.public_numbers().e)))  # type: ignore\n        else:\n",
        "target_code_len": 583,
        "diff_format": "@@ -239,8 +240,9 @@\n \n+        public_key = result.received_certificate_chain[0].public_key()\n         if isinstance(public_key, EllipticCurvePublicKey):\n-            text_output.append(cls._format_field(\"Key Size:\", public_key.curve.key_size))\n-            text_output.append(cls._format_field(\"Curve:\", public_key.curve.name))\n+            text_output.append(cls._format_field(\"Key Size:\", str(public_key.curve.key_size)))\n+            text_output.append(cls._format_field(\"Curve:\", str(public_key.curve.name)))\n         elif isinstance(public_key, RSAPublicKey):\n-            text_output.append(cls._format_field(\"Key Size:\", public_key.key_size))\n-            text_output.append(cls._format_field(\"Exponent:\", \"{0} (0x{0:x})\".format(public_key.public_numbers().e)))\n+            text_output.append(cls._format_field(\"Key Size:\", str(public_key.key_size)))\n+            text_output.append(cls._format_field(\"Exponent:\", str(public_key.public_numbers().e)))  # type: ignore\n         else:\n",
        "source_code_with_indent": "\n        if isinstance(public_key, EllipticCurvePublicKey):\n            <IND>text_output.append(cls._format_field(\"Key Size:\", public_key.curve.key_size))\n            text_output.append(cls._format_field(\"Curve:\", public_key.curve.name))\n        <DED>elif isinstance(public_key, RSAPublicKey):\n            <IND>text_output.append(cls._format_field(\"Key Size:\", public_key.key_size))\n            text_output.append(cls._format_field(\"Exponent:\", \"{0} (0x{0:x})\".format(public_key.public_numbers().e)))\n        <DED>else:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        public_key = result.received_certificate_chain[0].public_key()\n        if isinstance(public_key, EllipticCurvePublicKey):\n            <IND>text_output.append(cls._format_field(\"Key Size:\", str(public_key.curve.key_size)))\n            text_output.append(cls._format_field(\"Curve:\", str(public_key.curve.name)))\n        <DED>elif isinstance(public_key, RSAPublicKey):\n            <IND>text_output.append(cls._format_field(\"Key Size:\", str(public_key.key_size)))\n            text_output.append(cls._format_field(\"Exponent:\", str(public_key.public_numbers().e)))  # type: ignore\n        <DED>else:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "nabla-c0d3/sslyze",
    "commit": "a9d97c83dc6145535154e7eadd6e5deb33171b7a",
    "filename": "sslyze/plugins/certificate_info/cli_connector.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/nabla-c0d3-sslyze/sslyze/plugins/certificate_info/cli_connector.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "sslyze/plugins/certificate_info/cli_connector.py:244:62 Incompatible parameter type [6]: Expected `str` for 2nd positional only parameter to call `ScanCommandCliConnector._format_field` but got `int`.",
    "message": " Expected `str` for 2nd positional only parameter to call `ScanCommandCliConnector._format_field` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 244,
    "warning_line": "            text_output.append(cls._format_field(\"Key Size:\", public_key.key_size))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n        if isinstance(public_key, EllipticCurvePublicKey):\n            text_output.append(cls._format_field(\"Key Size:\", public_key.curve.key_size))\n            text_output.append(cls._format_field(\"Curve:\", public_key.curve.name))\n        elif isinstance(public_key, RSAPublicKey):\n            text_output.append(cls._format_field(\"Key Size:\", public_key.key_size))\n            text_output.append(cls._format_field(\"Exponent:\", \"{0} (0x{0:x})\".format(public_key.public_numbers().e)))\n        else:\n",
        "source_code_len": 500,
        "target_code": "\n        public_key = result.received_certificate_chain[0].public_key()\n        if isinstance(public_key, EllipticCurvePublicKey):\n            text_output.append(cls._format_field(\"Key Size:\", str(public_key.curve.key_size)))\n            text_output.append(cls._format_field(\"Curve:\", str(public_key.curve.name)))\n        elif isinstance(public_key, RSAPublicKey):\n            text_output.append(cls._format_field(\"Key Size:\", str(public_key.key_size)))\n            text_output.append(cls._format_field(\"Exponent:\", str(public_key.public_numbers().e)))  # type: ignore\n        else:\n",
        "target_code_len": 583,
        "diff_format": "@@ -239,8 +240,9 @@\n \n+        public_key = result.received_certificate_chain[0].public_key()\n         if isinstance(public_key, EllipticCurvePublicKey):\n-            text_output.append(cls._format_field(\"Key Size:\", public_key.curve.key_size))\n-            text_output.append(cls._format_field(\"Curve:\", public_key.curve.name))\n+            text_output.append(cls._format_field(\"Key Size:\", str(public_key.curve.key_size)))\n+            text_output.append(cls._format_field(\"Curve:\", str(public_key.curve.name)))\n         elif isinstance(public_key, RSAPublicKey):\n-            text_output.append(cls._format_field(\"Key Size:\", public_key.key_size))\n-            text_output.append(cls._format_field(\"Exponent:\", \"{0} (0x{0:x})\".format(public_key.public_numbers().e)))\n+            text_output.append(cls._format_field(\"Key Size:\", str(public_key.key_size)))\n+            text_output.append(cls._format_field(\"Exponent:\", str(public_key.public_numbers().e)))  # type: ignore\n         else:\n",
        "source_code_with_indent": "\n        if isinstance(public_key, EllipticCurvePublicKey):\n            <IND>text_output.append(cls._format_field(\"Key Size:\", public_key.curve.key_size))\n            text_output.append(cls._format_field(\"Curve:\", public_key.curve.name))\n        <DED>elif isinstance(public_key, RSAPublicKey):\n            <IND>text_output.append(cls._format_field(\"Key Size:\", public_key.key_size))\n            text_output.append(cls._format_field(\"Exponent:\", \"{0} (0x{0:x})\".format(public_key.public_numbers().e)))\n        <DED>else:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        public_key = result.received_certificate_chain[0].public_key()\n        if isinstance(public_key, EllipticCurvePublicKey):\n            <IND>text_output.append(cls._format_field(\"Key Size:\", str(public_key.curve.key_size)))\n            text_output.append(cls._format_field(\"Curve:\", str(public_key.curve.name)))\n        <DED>elif isinstance(public_key, RSAPublicKey):\n            <IND>text_output.append(cls._format_field(\"Key Size:\", str(public_key.key_size)))\n            text_output.append(cls._format_field(\"Exponent:\", str(public_key.public_numbers().e)))  # type: ignore\n        <DED>else:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]