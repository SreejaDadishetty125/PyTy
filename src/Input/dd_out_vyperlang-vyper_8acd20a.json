[
  {
    "project": "vyperlang/vyper",
    "commit": "8acd20a7e89ada4c3c41b4f383d2ba35f120a2b3",
    "filename": "vyper/old_codegen/function_definitions/external_function.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/vyperlang-vyper/vyper/old_codegen/function_definitions/external_function.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "vyper/old_codegen/function_definitions/external_function.py:32:66 Incompatible parameter type [6]: Expected `vyper.old_codegen.types.types.BaseType` for 3rd parameter `typ` to call `LLLnode.__init__` but got `TupleType`.",
    "message": " Expected `vyper.old_codegen.types.types.BaseType` for 3rd parameter `typ` to call `LLLnode.__init__` but got `TupleType`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 32,
    "warning_line": "        base_args_location = LLLnode(\"~codelen\", location=\"code\", typ=base_args_t)"
  },
  {
    "project": "vyperlang/vyper",
    "commit": "8acd20a7e89ada4c3c41b4f383d2ba35f120a2b3",
    "filename": "vyper/old_codegen/function_definitions/external_function.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/vyperlang-vyper/vyper/old_codegen/function_definitions/external_function.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "vyper/old_codegen/function_definitions/external_function.py:34:61 Incompatible parameter type [6]: Expected `vyper.old_codegen.types.types.BaseType` for 3rd parameter `typ` to call `LLLnode.__init__` but got `TupleType`.",
    "message": " Expected `vyper.old_codegen.types.types.BaseType` for 3rd parameter `typ` to call `LLLnode.__init__` but got `TupleType`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 34,
    "warning_line": "        base_args_location = LLLnode(4, location=\"calldata\", typ=base_args_t)"
  },
  {
    "project": "vyperlang/vyper",
    "commit": "8acd20a7e89ada4c3c41b4f383d2ba35f120a2b3",
    "filename": "vyper/old_codegen/return_.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/vyperlang-vyper/vyper/old_codegen/return_.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "vyper/old_codegen/return_.py:25:12 Incompatible return type [7]: Expected `LLLnode` but got `None`.",
    "message": " Expected `LLLnode` but got `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 25,
    "warning_line": "            return None  # triggers an exception",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from vyper import ast as vy_ast\nfrom vyper.old_codegen.abi import abi_encode, abi_type_of, lll_tuple_from_args\n",
        "source_code_len": 111,
        "target_code": "from typing import Any, Optional\n\nfrom vyper.old_codegen.abi import abi_encode, abi_type_of, lll_tuple_from_args\n",
        "target_code_len": 113,
        "diff_format": "@@ -1,2 +1,3 @@\n-from vyper import ast as vy_ast\n+from typing import Any, Optional\n+\n from vyper.old_codegen.abi import abi_encode, abi_type_of, lll_tuple_from_args\n",
        "source_code_with_indent": "from vyper import ast as vy_ast\nfrom vyper.old_codegen.abi import abi_encode, abi_type_of, lll_tuple_from_args\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Any, Optional\n\nfrom vyper.old_codegen.abi import abi_encode, abi_type_of, lll_tuple_from_args\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n# Generate code for return stmt\ndef make_return_stmt(lll_val: LLLnode, stmt, context: Context) -> LLLnode:\n\n    func_type = stmt.get_ancestor(vy_ast.FunctionDef)._metadata[\"type\"]\n    jump_to_exit = [\"goto\", context.sig.exit_sequence_label]\n",
        "source_code_len": 242,
        "target_code": "\nStmt = Any  # mypy kludge\n\n\n# Generate code for return stmt\ndef make_return_stmt(lll_val: LLLnode, stmt: Any, context: Context) -> Optional[LLLnode]:\n\n    jump_to_exit = [\"goto\", context.sig.exit_sequence_label]\n",
        "target_code_len": 213,
        "diff_format": "@@ -14,6 +15,8 @@\n \n+Stmt = Any  # mypy kludge\n+\n+\n # Generate code for return stmt\n-def make_return_stmt(lll_val: LLLnode, stmt, context: Context) -> LLLnode:\n+def make_return_stmt(lll_val: LLLnode, stmt: Any, context: Context) -> Optional[LLLnode]:\n \n-    func_type = stmt.get_ancestor(vy_ast.FunctionDef)._metadata[\"type\"]\n     jump_to_exit = [\"goto\", context.sig.exit_sequence_label]\n",
        "source_code_with_indent": "\n# Generate code for return stmt\n<DED>def make_return_stmt(lll_val: LLLnode, stmt, context: Context) -> LLLnode:\n\n    <IND>func_type = stmt.get_ancestor(vy_ast.FunctionDef)._metadata[\"type\"]\n    jump_to_exit = [\"goto\", context.sig.exit_sequence_label]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>Stmt = Any  # mypy kludge\n\n\n# Generate code for return stmt\ndef make_return_stmt(lll_val: LLLnode, stmt: Any, context: Context) -> Optional[LLLnode]:\n\n    <IND>jump_to_exit = [\"goto\", context.sig.exit_sequence_label]\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "vyperlang/vyper",
    "commit": "8acd20a7e89ada4c3c41b4f383d2ba35f120a2b3",
    "filename": "vyper/old_codegen/self_call.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/vyperlang-vyper/vyper/old_codegen/self_call.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "vyper/old_codegen/self_call.py:41:73 Incompatible parameter type [6]: Expected `vyper.old_codegen.types.types.BaseType` for 2nd parameter `typ` to call `LLLnode.from_list` but got `vyper.old_codegen.types.types.TupleType`.",
    "message": " Expected `vyper.old_codegen.types.types.BaseType` for 2nd parameter `typ` to call `LLLnode.from_list` but got `vyper.old_codegen.types.types.TupleType`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 41,
    "warning_line": "    args_as_tuple = LLLnode.from_list([\"multi\"] + [x for x in args_lll], typ=args_tuple_t)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef lll_for_self_call(stmt_expr, context: Context) -> LLLnode:\n    from vyper.old_codegen.expr import Expr  # TODO rethink this circular import\n\n",
        "source_code_len": 146,
        "target_code": "\ndef lll_for_self_call(stmt_expr, context):\n    from vyper.old_codegen.expr import (\n        Expr,  # TODO rethink this circular import\n    )\n\n",
        "target_code_len": 143,
        "diff_format": "@@ -16,4 +15,6 @@\n \n-def lll_for_self_call(stmt_expr, context: Context) -> LLLnode:\n-    from vyper.old_codegen.expr import Expr  # TODO rethink this circular import\n+def lll_for_self_call(stmt_expr, context):\n+    from vyper.old_codegen.expr import (\n+        Expr,  # TODO rethink this circular import\n+    )\n \n",
        "source_code_with_indent": "\n<DED>def lll_for_self_call(stmt_expr, context: Context) -> LLLnode:\n    <IND>from vyper.old_codegen.expr import Expr  # TODO rethink this circular import\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def lll_for_self_call(stmt_expr, context):\n    <IND>from vyper.old_codegen.expr import (\n        Expr,  # TODO rethink this circular import\n    )\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "vyperlang/vyper",
    "commit": "8acd20a7e89ada4c3c41b4f383d2ba35f120a2b3",
    "filename": "vyper/old_codegen/self_call.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/vyperlang-vyper/vyper/old_codegen/self_call.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "vyper/old_codegen/self_call.py:66:40 Incompatible parameter type [6]: Expected `vyper.old_codegen.types.types.BaseType` for 2nd parameter `typ` to call `LLLnode.__init__` but got `vyper.old_codegen.types.types.TupleType`.",
    "message": " Expected `vyper.old_codegen.types.types.BaseType` for 2nd parameter `typ` to call `LLLnode.__init__` but got `vyper.old_codegen.types.types.TupleType`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 66,
    "warning_line": "    args_dst = LLLnode(sig.frame_start, typ=args_tuple_t, location=\"memory\")",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef lll_for_self_call(stmt_expr, context: Context) -> LLLnode:\n    from vyper.old_codegen.expr import Expr  # TODO rethink this circular import\n\n",
        "source_code_len": 146,
        "target_code": "\ndef lll_for_self_call(stmt_expr, context):\n    from vyper.old_codegen.expr import (\n        Expr,  # TODO rethink this circular import\n    )\n\n",
        "target_code_len": 143,
        "diff_format": "@@ -16,4 +15,6 @@\n \n-def lll_for_self_call(stmt_expr, context: Context) -> LLLnode:\n-    from vyper.old_codegen.expr import Expr  # TODO rethink this circular import\n+def lll_for_self_call(stmt_expr, context):\n+    from vyper.old_codegen.expr import (\n+        Expr,  # TODO rethink this circular import\n+    )\n \n",
        "source_code_with_indent": "\n<DED>def lll_for_self_call(stmt_expr, context: Context) -> LLLnode:\n    <IND>from vyper.old_codegen.expr import Expr  # TODO rethink this circular import\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def lll_for_self_call(stmt_expr, context):\n    <IND>from vyper.old_codegen.expr import (\n        Expr,  # TODO rethink this circular import\n    )\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]