[
  {
    "project": "se2p/pynguin",
    "commit": "54fff85f03c609089da5db70cf313dfc3ed08136",
    "filename": "pynguin/analyses/seeding/initialpopulationseeding.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/se2p-pynguin/pynguin/analyses/seeding/initialpopulationseeding.py",
    "file_hunks_size": 5,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pynguin/analyses/seeding/initialpopulationseeding.py:30:4 Incompatible attribute type [8]: Attribute `_test_cluster` declared in class `InitialPopulationSeeding` has type `TestCluster` but is used as type `None`.",
    "message": " Attribute `_test_cluster` declared in class `InitialPopulationSeeding` has type `TestCluster` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 30,
    "warning_line": "    _test_cluster: TestCluster = None"
  },
  {
    "project": "se2p/pynguin",
    "commit": "54fff85f03c609089da5db70cf313dfc3ed08136",
    "filename": "pynguin/analyses/seeding/initialpopulationseeding.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/se2p-pynguin/pynguin/analyses/seeding/initialpopulationseeding.py",
    "file_hunks_size": 5,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pynguin/analyses/seeding/initialpopulationseeding.py:56:8 Incompatible return type [7]: Expected `_ast.Module` but got `typing.Optional[_ast.Module]`.",
    "message": " Expected `_ast.Module` but got `typing.Optional[_ast.Module]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 56,
    "warning_line": "        return tree"
  },
  {
    "project": "se2p/pynguin",
    "commit": "54fff85f03c609089da5db70cf313dfc3ed08136",
    "filename": "pynguin/analyses/seeding/initialpopulationseeding.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/se2p-pynguin/pynguin/analyses/seeding/initialpopulationseeding.py",
    "file_hunks_size": 5,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pynguin/analyses/seeding/initialpopulationseeding.py:78:4 Incompatible attribute type [8]: Attribute `_current_testcase` declared in class `_TestTransformer` has type `DefaultTestCase` but is used as type `None`.",
    "message": " Attribute `_current_testcase` declared in class `_TestTransformer` has type `DefaultTestCase` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 78,
    "warning_line": "    _current_testcase: DefaultTestCase = None"
  },
  {
    "project": "se2p/pynguin",
    "commit": "54fff85f03c609089da5db70cf313dfc3ed08136",
    "filename": "pynguin/analyses/seeding/testimport/ast_to_statement.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/se2p-pynguin/pynguin/analyses/seeding/testimport/ast_to_statement.py",
    "file_hunks_size": 17,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pynguin/analyses/seeding/testimport/ast_to_statement.py:52:8 Incompatible return type [7]: Expected `Tuple[str, Statement]` but got `Tuple[typing.Any, typing.Union[None, prim_stmt.PrimitiveStatement[typing.Any], param_stmt.FunctionStatement]]`.",
    "message": " Expected `Tuple[str, Statement]` but got `Tuple[typing.Any, typing.Union[None, prim_stmt.PrimitiveStatement[typing.Any], param_stmt.FunctionStatement]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 52,
    "warning_line": "        return ref_id, new_stmt",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ref_dict: Dict[str, vr.VariableReference],\n    ) -> Tuple[str, Statement]:\n        \"\"\"Creates the corresponding statement from an ast.Assign node.\n",
        "source_code_len": 155,
        "target_code": "        ref_dict: Dict[str, vr.VariableReference],\n    ) -> Tuple[str, Optional[Statement]]:\n        \"\"\"Creates the corresponding statement from an ast.Assign node.\n",
        "target_code_len": 165,
        "diff_format": "@@ -25,3 +25,3 @@\n         ref_dict: Dict[str, vr.VariableReference],\n-    ) -> Tuple[str, Statement]:\n+    ) -> Tuple[str, Optional[Statement]]:\n         \"\"\"Creates the corresponding statement from an ast.Assign node.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "        ref_dict: Dict[str, vr.VariableReference],\n    ) -> Tuple[str, Statement]:\n        <IND>",
        "target_code_with_indent": "        ref_dict: Dict[str, vr.VariableReference],\n    ) -> Tuple[str, Optional[Statement]]:\n        <IND>"
      }
    ]
  },
  {
    "project": "se2p/pynguin",
    "commit": "54fff85f03c609089da5db70cf313dfc3ed08136",
    "filename": "pynguin/analyses/seeding/testimport/ast_to_statement.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/se2p-pynguin/pynguin/analyses/seeding/testimport/ast_to_statement.py",
    "file_hunks_size": 17,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "pynguin/analyses/seeding/testimport/ast_to_statement.py:68:12 Incompatible parameter type [6]: Expected `vr.VariableReference` for 1st positional only parameter to call `Assertion.__init__` but got `Optional[vr.VariableReference]`.",
    "message": " Expected `vr.VariableReference` for 1st positional only parameter to call `Assertion.__init__` but got `Optional[vr.VariableReference]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 68,
    "warning_line": "            ref_dict.get(assert_node.test.left.id),",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        \"\"\"\n        return Assertion(\n            ref_dict.get(assert_node.test.left.id),\n            assert_node.test.comparators[0].value,\n        )\n\n",
        "source_code_len": 152,
        "target_code": "        \"\"\"\n        source = ref_dict.get(assert_node.test.left.id)  # type: ignore\n        assert source is not None, \"No source node found for assertion\"\n        return Assertion(source, assert_node.test.comparators[0].value)  # type: ignore\n\n",
        "target_code_len": 245,
        "diff_format": "@@ -66,6 +67,5 @@\n         \"\"\"\n-        return Assertion(\n-            ref_dict.get(assert_node.test.left.id),\n-            assert_node.test.comparators[0].value,\n-        )\n+        source = ref_dict.get(assert_node.test.left.id)  # type: ignore\n+        assert source is not None, \"No source node found for assertion\"\n+        return Assertion(source, assert_node.test.comparators[0].value)  # type: ignore\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n        return Assertion(\n            ref_dict.get(assert_node.test.left.id),\n            assert_node.test.comparators[0].value,\n        )\n\n",
        "target_code_with_indent": "\n        source = ref_dict.get(assert_node.test.left.id)  # type: ignore\n        assert source is not None, \"No source node found for assertion\"\n        return Assertion(source, assert_node.test.comparators[0].value)  # type: ignore\n\n"
      }
    ]
  },
  {
    "project": "se2p/pynguin",
    "commit": "54fff85f03c609089da5db70cf313dfc3ed08136",
    "filename": "pynguin/utils/generic/genericaccessibleobject.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/se2p-pynguin/pynguin/utils/generic/genericaccessibleobject.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pynguin/utils/generic/genericaccessibleobject.py:210:8 Incompatible variable type [9]: function_name is declared to have type `str` but is used as type `None`.",
    "message": " function_name is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 210,
    "warning_line": "        function_name: str = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        inferred_signature: InferredSignature,\n        function_name: str = None,\n    ) -> None:\n",
        "source_code_len": 97,
        "target_code": "        inferred_signature: InferredSignature,\n        function_name: Optional[str] = None,\n    ) -> None:\n",
        "target_code_len": 107,
        "diff_format": "@@ -209,3 +209,3 @@\n         inferred_signature: InferredSignature,\n-        function_name: str = None,\n+        function_name: Optional[str] = None,\n     ) -> None:\n",
        "source_code_with_indent": "        inferred_signature: InferredSignature,\n        function_name: str = None,\n    ) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        inferred_signature: InferredSignature,\n        function_name: Optional[str] = None,\n    ) -> None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @property\n    def function_name(self) -> str:\n        \"\"\"Returns the name of a generic function.\n",
        "source_code_len": 101,
        "target_code": "    @property\n    def function_name(self) -> Optional[str]:\n        \"\"\"Returns the name of a generic function.\n",
        "target_code_len": 111,
        "diff_format": "@@ -218,3 +218,3 @@\n     @property\n-    def function_name(self) -> str:\n+    def function_name(self) -> Optional[str]:\n         \"\"\"Returns the name of a generic function.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "    <DED>@property\n    def function_name(self) -> str:\n        <IND>",
        "target_code_with_indent": "    <DED>@property\n    def function_name(self) -> Optional[str]:\n        <IND>"
      }
    ]
  }
]