[
  {
    "project": "GoogleCloudPlatform/covid-19-open-data",
    "commit": "e0b42522e02c132993b6d55deb433b42256b1d61",
    "filename": "src/lib/data_source.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/GoogleCloudPlatform-covid-19-open-data/src/lib/data_source.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/lib/data_source.py:369:8 Incompatible return type [7]: Expected `str` but got `uuid.UUID`.",
    "message": " Expected `str` but got `uuid.UUID`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 369,
    "warning_line": "        return uuid.uuid5(uuid.NAMESPACE_DNS, hash_name)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        hash_name = f\"{table_name}.{source_full_name}.{data_source_config}\"\n        return uuid.uuid5(uuid.NAMESPACE_DNS, hash_name)\n",
        "source_code_len": 133,
        "target_code": "        hash_name = f\"{table_name}.{source_full_name}.{data_source_config}\"\n        return str(uuid.uuid5(uuid.NAMESPACE_DNS, hash_name))\n",
        "target_code_len": 138,
        "diff_format": "@@ -368,2 +369,2 @@\n         hash_name = f\"{table_name}.{source_full_name}.{data_source_config}\"\n-        return uuid.uuid5(uuid.NAMESPACE_DNS, hash_name)\n+        return str(uuid.uuid5(uuid.NAMESPACE_DNS, hash_name))\n",
        "source_code_with_indent": "        hash_name = f\"{table_name}.{source_full_name}.{data_source_config}\"\n        return uuid.uuid5(uuid.NAMESPACE_DNS, hash_name)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        hash_name = f\"{table_name}.{source_full_name}.{data_source_config}\"\n        return str(uuid.uuid5(uuid.NAMESPACE_DNS, hash_name))\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "GoogleCloudPlatform/covid-19-open-data",
    "commit": "e0b42522e02c132993b6d55deb433b42256b1d61",
    "filename": "src/lib/io.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/GoogleCloudPlatform-covid-19-open-data/src/lib/io.py",
    "file_hunks_size": 6,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/lib/io.py:318:8 Incompatible return type [7]: Expected `IO[typing.Any]` but got `typing.Generator[Union[IO[typing.Any], Path, str], None, None]`.",
    "message": " Expected `IO[typing.Any]` but got `typing.Generator[Union[IO[typing.Any], Path, str], None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 318,
    "warning_line": "        yield path_or_handle"
  },
  {
    "project": "GoogleCloudPlatform/covid-19-open-data",
    "commit": "e0b42522e02c132993b6d55deb433b42256b1d61",
    "filename": "src/lib/io.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/GoogleCloudPlatform-covid-19-open-data/src/lib/io.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/lib/io.py:329:8 Incompatible return type [7]: Expected `Path` but got `typing.Generator[Path, None, None]`.",
    "message": " Expected `Path` but got `typing.Generator[Path, None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 329,
    "warning_line": "        yield Path(tempdir)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from pathlib import Path\nfrom typing import Any, Callable, Dict, IO, Iterable, List, Optional, TextIO, Union\nfrom zipfile import ZipFile\n",
        "source_code_len": 137,
        "target_code": "from pathlib import Path\nfrom typing import Any, Callable, Dict, IO, Iterable, Iterator, List, Optional, TextIO, Union\nfrom zipfile import ZipFile\n",
        "target_code_len": 147,
        "diff_format": "@@ -23,3 +23,3 @@\n from pathlib import Path\n-from typing import Any, Callable, Dict, IO, Iterable, List, Optional, TextIO, Union\n+from typing import Any, Callable, Dict, IO, Iterable, Iterator, List, Optional, TextIO, Union\n from zipfile import ZipFile\n",
        "source_code_with_indent": "from pathlib import Path\nfrom typing import Any, Callable, Dict, IO, Iterable, List, Optional, TextIO, Union\nfrom zipfile import ZipFile\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from pathlib import Path\nfrom typing import Any, Callable, Dict, IO, Iterable, Iterator, List, Optional, TextIO, Union\nfrom zipfile import ZipFile\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "@contextmanager\ndef temporary_directory() -> Path:\n    \"\"\" Create a temporary directory which self-deletes after the context exits. \"\"\"\n",
        "source_code_len": 136,
        "target_code": "@contextmanager\ndef temporary_directory() -> Iterator[Path]:\n    \"\"\" Create a temporary directory which self-deletes after the context exits. \"\"\"\n",
        "target_code_len": 146,
        "diff_format": "@@ -324,3 +326,3 @@\n @contextmanager\n-def temporary_directory() -> Path:\n+def temporary_directory() -> Iterator[Path]:\n     \"\"\" Create a temporary directory which self-deletes after the context exits. \"\"\"\n",
        "source_code_with_indent": "<DED><DED><DED>@contextmanager\ndef temporary_directory() -> Path:\n    <IND>\"\"\" Create a temporary directory which self-deletes after the context exits. \"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED><DED><DED>@contextmanager\ndef temporary_directory() -> Iterator[Path]:\n    <IND>\"\"\" Create a temporary directory which self-deletes after the context exits. \"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "GoogleCloudPlatform/covid-19-open-data",
    "commit": "e0b42522e02c132993b6d55deb433b42256b1d61",
    "filename": "src/lib/io.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/GoogleCloudPlatform-covid-19-open-data/src/lib/io.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/lib/io.py:341:8 Incompatible return type [7]: Expected `Path` but got `typing.Generator[Path, None, None]`.",
    "message": " Expected `Path` but got `typing.Generator[Path, None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 341,
    "warning_line": "        yield file_path",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from pathlib import Path\nfrom typing import Any, Callable, Dict, IO, Iterable, List, Optional, TextIO, Union\nfrom zipfile import ZipFile\n",
        "source_code_len": 137,
        "target_code": "from pathlib import Path\nfrom typing import Any, Callable, Dict, IO, Iterable, Iterator, List, Optional, TextIO, Union\nfrom zipfile import ZipFile\n",
        "target_code_len": 147,
        "diff_format": "@@ -23,3 +23,3 @@\n from pathlib import Path\n-from typing import Any, Callable, Dict, IO, Iterable, List, Optional, TextIO, Union\n+from typing import Any, Callable, Dict, IO, Iterable, Iterator, List, Optional, TextIO, Union\n from zipfile import ZipFile\n",
        "source_code_with_indent": "from pathlib import Path\nfrom typing import Any, Callable, Dict, IO, Iterable, List, Optional, TextIO, Union\nfrom zipfile import ZipFile\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from pathlib import Path\nfrom typing import Any, Callable, Dict, IO, Iterable, Iterator, List, Optional, TextIO, Union\nfrom zipfile import ZipFile\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "@contextmanager\ndef temporary_file(file_name: str = None) -> Path:\n    \"\"\" Create a temporary file which self-deletes after the context exits. \"\"\"\n",
        "source_code_len": 147,
        "target_code": "@contextmanager\ndef temporary_file(file_name: str = None) -> Iterator[Path]:\n    \"\"\" Create a temporary file which self-deletes after the context exits. \"\"\"\n",
        "target_code_len": 157,
        "diff_format": "@@ -334,3 +336,3 @@\n @contextmanager\n-def temporary_file(file_name: str = None) -> Path:\n+def temporary_file(file_name: str = None) -> Iterator[Path]:\n     \"\"\" Create a temporary file which self-deletes after the context exits. \"\"\"\n",
        "source_code_with_indent": "<DED><DED>@contextmanager\ndef temporary_file(file_name: str = None) -> Path:\n    <IND>\"\"\" Create a temporary file which self-deletes after the context exits. \"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED><DED>@contextmanager\ndef temporary_file(file_name: str = None) -> Iterator[Path]:\n    <IND>\"\"\" Create a temporary file which self-deletes after the context exits. \"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]