[
  {
    "project": "Azure/aztk",
    "commit": "37c5d873a037449c06929cdaf16260cf6088d2d4",
    "filename": "aztk/clusterlib.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Azure-aztk/aztk/clusterlib.py",
    "file_hunks_size": 10,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "aztk/clusterlib.py:85:8 Incompatible variable type [9]: custom_script is declared to have type `str` but is used as type `None`.",
    "message": " custom_script is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 85,
    "warning_line": "        custom_script: str = None,"
  },
  {
    "project": "Azure/aztk",
    "commit": "37c5d873a037449c06929cdaf16260cf6088d2d4",
    "filename": "aztk/util.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Azure-aztk/aztk/util.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "aztk/util.py:149:8 Incompatible variable type [9]: node_path is declared to have type `str` but is used as type `None`.",
    "message": " node_path is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 149,
    "warning_line": "        node_path: str=None) -> batch_models.ResourceFile:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "                                     blob_source=sas_url)\n\n\ndef upload_text_to_container(container_name: str, content: str, local_path: str) -> batch_models.ResourceFile:\n    local_path = normalize_path(local_path)\n    blob_name = local_path\n    block_blob_client = azure_api.get_blob_client()\n    block_blob_client.create_container(container_name, fail_on_exist=False)\n    block_blob_client.create_blob_from_text(container_name,\n                                            blob_name,\n                                            content)\n\n    sas_token = block_blob_client.generate_blob_shared_access_signature(\n        container_name,\n        blob_name,\n        permission=blob.BlobPermissions.READ,\n        expiry=datetime.datetime.utcnow() + datetime.timedelta(hours=24))\n\n    sas_url = block_blob_client.make_blob_url(container_name,\n                                              blob_name,\n                                              sas_token=sas_token)\n\n    return batch_models.ResourceFile(file_path=blob_name,\n                                     blob_source=sas_url)\n\n\ndef upload_shell_script_to_container(\n        container_name: str,\n        file_path: str,\n        node_path: str=None) -> batch_models.ResourceFile:\n    \"\"\"\n    Upload a shell(.sh) file to the container.\n    It will make sure the windows line ending are replaced with unix line ending to prevent execution errors\n    :param container_name: Azure blob container\n    :param file_path: Local file path\n    :param node_path: Optional path on the node. By default will use the same as the file_path\n    \"\"\"\n    if not node_path:\n        node_path = normalize_path(file_path)\n\n    with io.open(file_path, 'r') as f:\n        content = f.read().replace('\\r\\n', '\\n')\n        return upload_text_to_container(container_name, content, node_path)\n\n",
        "source_code_len": 1818,
        "target_code": "                                     blob_source=sas_url)\n\n",
        "target_code_len": 59,
        "diff_format": "@@ -120,44 +120,2 @@\n                                      blob_source=sas_url)\n-\n-\n-def upload_text_to_container(container_name: str, content: str, local_path: str) -> batch_models.ResourceFile:\n-    local_path = normalize_path(local_path)\n-    blob_name = local_path\n-    block_blob_client = azure_api.get_blob_client()\n-    block_blob_client.create_container(container_name, fail_on_exist=False)\n-    block_blob_client.create_blob_from_text(container_name,\n-                                            blob_name,\n-                                            content)\n-\n-    sas_token = block_blob_client.generate_blob_shared_access_signature(\n-        container_name,\n-        blob_name,\n-        permission=blob.BlobPermissions.READ,\n-        expiry=datetime.datetime.utcnow() + datetime.timedelta(hours=24))\n-\n-    sas_url = block_blob_client.make_blob_url(container_name,\n-                                              blob_name,\n-                                              sas_token=sas_token)\n-\n-    return batch_models.ResourceFile(file_path=blob_name,\n-                                     blob_source=sas_url)\n-\n-\n-def upload_shell_script_to_container(\n-        container_name: str,\n-        file_path: str,\n-        node_path: str=None) -> batch_models.ResourceFile:\n-    \"\"\"\n-    Upload a shell(.sh) file to the container.\n-    It will make sure the windows line ending are replaced with unix line ending to prevent execution errors\n-    :param container_name: Azure blob container\n-    :param file_path: Local file path\n-    :param node_path: Optional path on the node. By default will use the same as the file_path\n-    \"\"\"\n-    if not node_path:\n-        node_path = normalize_path(file_path)\n-\n-    with io.open(file_path, 'r') as f:\n-        content = f.read().replace('\\r\\n', '\\n')\n-        return upload_text_to_container(container_name, content, node_path)\n \n",
        "source_code_with_indent": "                                     blob_source=sas_url)\n\n\n<DED>def upload_text_to_container(container_name: str, content: str, local_path: str) -> batch_models.ResourceFile:\n    <IND>local_path = normalize_path(local_path)\n    blob_name = local_path\n    block_blob_client = azure_api.get_blob_client()\n    block_blob_client.create_container(container_name, fail_on_exist=False)\n    block_blob_client.create_blob_from_text(container_name,\n                                            blob_name,\n                                            content)\n\n    sas_token = block_blob_client.generate_blob_shared_access_signature(\n        container_name,\n        blob_name,\n        permission=blob.BlobPermissions.READ,\n        expiry=datetime.datetime.utcnow() + datetime.timedelta(hours=24))\n\n    sas_url = block_blob_client.make_blob_url(container_name,\n                                              blob_name,\n                                              sas_token=sas_token)\n\n    return batch_models.ResourceFile(file_path=blob_name,\n                                     blob_source=sas_url)\n\n\n<DED>def upload_shell_script_to_container(\n        container_name: str,\n        file_path: str,\n        node_path: str=None) -> batch_models.ResourceFile:\n    <IND>\"\"\"\n    Upload a shell(.sh) file to the container.\n    It will make sure the windows line ending are replaced with unix line ending to prevent execution errors\n    :param container_name: Azure blob container\n    :param file_path: Local file path\n    :param node_path: Optional path on the node. By default will use the same as the file_path\n    \"\"\"\n    if not node_path:\n        <IND>node_path = normalize_path(file_path)\n\n    <DED>with io.open(file_path, 'r') as f:\n        <IND>content = f.read().replace('\\r\\n', '\\n')\n        return upload_text_to_container(container_name, content, node_path)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                                     blob_source=sas_url)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]