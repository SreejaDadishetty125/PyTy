[
  {
    "project": "chartbeat-labs/textacy",
    "commit": "cd5f573441cb9b381f895f1604875d5f5efcb2eb",
    "filename": "src/textacy/augmentation/augmenter.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/chartbeat-labs-textacy/src/textacy/augmentation/augmenter.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/textacy/augmentation/augmenter.py:125:12 Incompatible return type [7]: Expected `Tuple[typing.Callable[[List[aug_utils.AugTok]], List[aug_utils.AugTok]]]` but got `typing.Tuple[typing.Callable[[List[aug_utils.AugTok]], List[aug_utils.AugTok]], ...]`.",
    "message": " Expected `Tuple[typing.Callable[[List[aug_utils.AugTok]], List[aug_utils.AugTok]]]` but got `typing.Tuple[typing.Callable[[List[aug_utils.AugTok]], List[aug_utils.AugTok]], ...]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 125,
    "warning_line": "            return transforms",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self, transforms: Sequence[AugTransform]\n    ) -> Tuple[AugTransform]:\n        transforms = tuple(transforms)\n",
        "source_code_len": 118,
        "target_code": "        self, transforms: Sequence[AugTransform]\n    ) -> Tuple[AugTransform, ...]:\n        transforms = tuple(transforms)\n",
        "target_code_len": 123,
        "diff_format": "@@ -117,3 +121,3 @@\n         self, transforms: Sequence[AugTransform]\n-    ) -> Tuple[AugTransform]:\n+    ) -> Tuple[AugTransform, ...]:\n         transforms = tuple(transforms)\n",
        "source_code_with_indent": "        self, transforms: Sequence[AugTransform]\n    ) -> Tuple[AugTransform]:\n        <IND>transforms = tuple(transforms)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self, transforms: Sequence[AugTransform]\n    ) -> Tuple[AugTransform, ...]:\n        <IND>transforms = tuple(transforms)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "chartbeat-labs/textacy",
    "commit": "cd5f573441cb9b381f895f1604875d5f5efcb2eb",
    "filename": "src/textacy/augmentation/augmenter.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/chartbeat-labs-textacy/src/textacy/augmentation/augmenter.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/textacy/augmentation/augmenter.py:141:12 Incompatible return type [7]: Expected `typing.Union[Tuple[float], float, int]` but got `typing.Tuple[typing.Any, ...]`.",
    "message": " Expected `typing.Union[Tuple[float], float, int]` but got `typing.Tuple[typing.Any, ...]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 141,
    "warning_line": "            return tuple(num)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self, num: Optional[int | float | Sequence[float]]\n    ) -> int | float | Tuple[float]:\n        if num is None:\n",
        "source_code_len": 120,
        "target_code": "        self, num: Optional[int | float | Sequence[float]]\n    ) -> int | float | Tuple[float, ...]:\n        if num is None:\n",
        "target_code_len": 125,
        "diff_format": "@@ -128,3 +132,3 @@\n         self, num: Optional[int | float | Sequence[float]]\n-    ) -> int | float | Tuple[float]:\n+    ) -> int | float | Tuple[float, ...]:\n         if num is None:\n",
        "source_code_with_indent": "        self, num: Optional[int | float | Sequence[float]]\n    ) -> int | float | Tuple[float]:\n        <IND>if num is None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self, num: Optional[int | float | Sequence[float]]\n    ) -> int | float | Tuple[float, ...]:\n        <IND>if num is None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]