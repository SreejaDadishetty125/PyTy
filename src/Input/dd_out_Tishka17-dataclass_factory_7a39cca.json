[
  {
    "project": "Tishka17/dataclass_factory",
    "commit": "7a39ccad3dd9a0d40e34232d49077b6f078e335a",
    "filename": "dataclass_factory/schema.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Tishka17-dataclass_factory/dataclass_factory/schema.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "dataclass_factory/schema.py:134:8 Incompatible return type [7]: Expected `Sequence[Tuple[str, Union[str, typing.Tuple[Union[int, str], ...]]]]` but got `typing.Tuple[Tuple[str, typing.Any, typing.Any], ...]`.",
    "message": " Expected `Sequence[Tuple[str, Union[str, typing.Tuple[Union[int, str], ...]]]]` but got `typing.Tuple[Tuple[str, typing.Any, typing.Any], ...]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 134,
    "warning_line": "        return tuple(",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef get_dataclass_fields(schema: Schema[T], class_: Type[T]) -> Sequence[Tuple[str, Union[str, Path]]]:\n    only_mapped = schema.only_mapped and schema.only is None\n",
        "source_code_len": 166,
        "target_code": "\ndef get_dataclass_fields(schema: Schema[T], class_: Type[T]) -> Sequence[Tuple[str, Union[str, Path], Any]]:\n    only_mapped = schema.only_mapped and schema.only is None\n",
        "target_code_len": 171,
        "diff_format": "@@ -121,3 +122,3 @@\n \n-def get_dataclass_fields(schema: Schema[T], class_: Type[T]) -> Sequence[Tuple[str, Union[str, Path]]]:\n+def get_dataclass_fields(schema: Schema[T], class_: Type[T]) -> Sequence[Tuple[str, Union[str, Path], Any]]:\n     only_mapped = schema.only_mapped and schema.only is None\n",
        "source_code_with_indent": "\n<DED>def get_dataclass_fields(schema: Schema[T], class_: Type[T]) -> Sequence[Tuple[str, Union[str, Path]]]:\n    <IND>only_mapped = schema.only_mapped and schema.only is None\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def get_dataclass_fields(schema: Schema[T], class_: Type[T]) -> Sequence[Tuple[str, Union[str, Path], Any]]:\n    <IND>only_mapped = schema.only_mapped and schema.only is None\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Tishka17/dataclass_factory",
    "commit": "7a39ccad3dd9a0d40e34232d49077b6f078e335a",
    "filename": "dataclass_factory/schema.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Tishka17-dataclass_factory/dataclass_factory/schema.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "dataclass_factory/schema.py:139:4 Incompatible return type [7]: Expected `Sequence[Tuple[str, Union[str, typing.Tuple[Union[int, str], ...]]]]` but got `typing.Tuple[Tuple[str, Union[str, typing.Tuple[Union[int, str], ...]], typing.Any], ...]`.",
    "message": " Expected `Sequence[Tuple[str, Union[str, typing.Tuple[Union[int, str], ...]]]]` but got `typing.Tuple[Tuple[str, Union[str, typing.Tuple[Union[int, str], ...]], typing.Any], ...]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 139,
    "warning_line": "    return tuple(",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef get_dataclass_fields(schema: Schema[T], class_: Type[T]) -> Sequence[Tuple[str, Union[str, Path]]]:\n    only_mapped = schema.only_mapped and schema.only is None\n",
        "source_code_len": 166,
        "target_code": "\ndef get_dataclass_fields(schema: Schema[T], class_: Type[T]) -> Sequence[Tuple[str, Union[str, Path], Any]]:\n    only_mapped = schema.only_mapped and schema.only is None\n",
        "target_code_len": 171,
        "diff_format": "@@ -121,3 +122,3 @@\n \n-def get_dataclass_fields(schema: Schema[T], class_: Type[T]) -> Sequence[Tuple[str, Union[str, Path]]]:\n+def get_dataclass_fields(schema: Schema[T], class_: Type[T]) -> Sequence[Tuple[str, Union[str, Path], Any]]:\n     only_mapped = schema.only_mapped and schema.only is None\n",
        "source_code_with_indent": "\n<DED>def get_dataclass_fields(schema: Schema[T], class_: Type[T]) -> Sequence[Tuple[str, Union[str, Path]]]:\n    <IND>only_mapped = schema.only_mapped and schema.only is None\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def get_dataclass_fields(schema: Schema[T], class_: Type[T]) -> Sequence[Tuple[str, Union[str, Path], Any]]:\n    <IND>only_mapped = schema.only_mapped and schema.only is None\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]