[
  {
    "project": "poljar/matrix-nio",
    "commit": "4dd765f6d6e6e92ff4a8f79ffeb20d4ccf642e9a",
    "filename": "nio/api.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/poljar-matrix-nio/nio/api.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "nio/api.py:47:12 Incompatible return type [7]: Expected `str` but got `None`.",
    "message": " Expected `str` but got `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 47,
    "warning_line": "            return None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def mxc_to_http(mxc):\n        # type: (str) -> str\n        url = urlparse(mxc)\n",
        "source_code_len": 83,
        "target_code": "    def mxc_to_http(mxc):\n        # type: (str) -> Optional[str]\n        url = urlparse(mxc)\n",
        "target_code_len": 93,
        "diff_format": "@@ -42,3 +42,3 @@\n     def mxc_to_http(mxc):\n-        # type: (str) -> str\n+        # type: (str) -> Optional[str]\n         url = urlparse(mxc)\n",
        "source_code_with_indent": "    def mxc_to_http(mxc):\n        # type: (str) -> str\n        <IND>url = urlparse(mxc)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def mxc_to_http(mxc):\n        # type: (str) -> Optional[str]\n        <IND>url = urlparse(mxc)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "poljar/matrix-nio",
    "commit": "4dd765f6d6e6e92ff4a8f79ffeb20d4ccf642e9a",
    "filename": "nio/api.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/poljar-matrix-nio/nio/api.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "nio/api.py:50:12 Incompatible return type [7]: Expected `str` but got `None`.",
    "message": " Expected `str` but got `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 50,
    "warning_line": "            return None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def mxc_to_http(mxc):\n        # type: (str) -> str\n        url = urlparse(mxc)\n",
        "source_code_len": 83,
        "target_code": "    def mxc_to_http(mxc):\n        # type: (str) -> Optional[str]\n        url = urlparse(mxc)\n",
        "target_code_len": 93,
        "diff_format": "@@ -42,3 +42,3 @@\n     def mxc_to_http(mxc):\n-        # type: (str) -> str\n+        # type: (str) -> Optional[str]\n         url = urlparse(mxc)\n",
        "source_code_with_indent": "    def mxc_to_http(mxc):\n        # type: (str) -> str\n        <IND>url = urlparse(mxc)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def mxc_to_http(mxc):\n        # type: (str) -> Optional[str]\n        <IND>url = urlparse(mxc)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "poljar/matrix-nio",
    "commit": "4dd765f6d6e6e92ff4a8f79ffeb20d4ccf642e9a",
    "filename": "nio/events.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/poljar-matrix-nio/nio/events.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "nio/events.py:334:35 Incompatible parameter type [6]: Expected `str` for 2nd positional only parameter to call `Event.__init__` but got `int`.",
    "message": " Expected `str` for 2nd positional only parameter to call `Event.__init__` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 334,
    "warning_line": "        super().__init__(event_id, sender, server_ts)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def __init__(self, event_id, sender, server_ts, body):\n        # type: (str, str, int, str, str) -> None\n        self.body = body\n",
        "source_code_len": 134,
        "target_code": "    def __init__(self, event_id, sender, server_ts, body):\n        # type: (str, str, int, str) -> None\n        self.body = body\n",
        "target_code_len": 129,
        "diff_format": "@@ -331,3 +331,3 @@\n     def __init__(self, event_id, sender, server_ts, body):\n-        # type: (str, str, int, str, str) -> None\n+        # type: (str, str, int, str) -> None\n         self.body = body\n",
        "source_code_with_indent": "    <IND>def __init__(self, event_id, sender, server_ts, body):\n        # type: (str, str, int, str, str) -> None\n        <IND>self.body = body\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <IND>def __init__(self, event_id, sender, server_ts, body):\n        # type: (str, str, int, str) -> None\n        <IND>self.body = body\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "poljar/matrix-nio",
    "commit": "4dd765f6d6e6e92ff4a8f79ffeb20d4ccf642e9a",
    "filename": "nio/events.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/poljar-matrix-nio/nio/events.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "nio/events.py:334:43 Incompatible parameter type [6]: Expected `int` for 3rd positional only parameter to call `Event.__init__` but got `str`.",
    "message": " Expected `int` for 3rd positional only parameter to call `Event.__init__` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 334,
    "warning_line": "        super().__init__(event_id, sender, server_ts)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def __init__(self, event_id, sender, server_ts, body):\n        # type: (str, str, int, str, str) -> None\n        self.body = body\n",
        "source_code_len": 134,
        "target_code": "    def __init__(self, event_id, sender, server_ts, body):\n        # type: (str, str, int, str) -> None\n        self.body = body\n",
        "target_code_len": 129,
        "diff_format": "@@ -331,3 +331,3 @@\n     def __init__(self, event_id, sender, server_ts, body):\n-        # type: (str, str, int, str, str) -> None\n+        # type: (str, str, int, str) -> None\n         self.body = body\n",
        "source_code_with_indent": "    <IND>def __init__(self, event_id, sender, server_ts, body):\n        # type: (str, str, int, str, str) -> None\n        <IND>self.body = body\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <IND>def __init__(self, event_id, sender, server_ts, body):\n        # type: (str, str, int, str) -> None\n        <IND>self.body = body\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "poljar/matrix-nio",
    "commit": "4dd765f6d6e6e92ff4a8f79ffeb20d4ccf642e9a",
    "filename": "nio/events.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/poljar-matrix-nio/nio/events.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "nio/events.py:513:8 Incompatible return type [7]: Expected `typing.Union[BadEvent, RoomMemberEvent]` but got `RedactionEvent`.",
    "message": " Expected `typing.Union[BadEvent, RoomMemberEvent]` but got `RedactionEvent`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 513,
    "warning_line": "        return cls(",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def from_dict(cls, parsed_dict):\n        # type: (Dict[Any, Any]) -> Union[RoomMemberEvent, BadEvent]\n        bad = validate_or_badevent(parsed_dict, Schemas.room_redaction)\n",
        "source_code_len": 178,
        "target_code": "    def from_dict(cls, parsed_dict):\n        # type: (Dict[Any, Any]) -> Union[RedactionEvent, BadEvent]\n        bad = validate_or_badevent(parsed_dict, Schemas.room_redaction)\n",
        "target_code_len": 177,
        "diff_format": "@@ -501,3 +501,3 @@\n     def from_dict(cls, parsed_dict):\n-        # type: (Dict[Any, Any]) -> Union[RoomMemberEvent, BadEvent]\n+        # type: (Dict[Any, Any]) -> Union[RedactionEvent, BadEvent]\n         bad = validate_or_badevent(parsed_dict, Schemas.room_redaction)\n",
        "source_code_with_indent": "    def from_dict(cls, parsed_dict):\n        # type: (Dict[Any, Any]) -> Union[RoomMemberEvent, BadEvent]\n        <IND>bad = validate_or_badevent(parsed_dict, Schemas.room_redaction)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def from_dict(cls, parsed_dict):\n        # type: (Dict[Any, Any]) -> Union[RedactionEvent, BadEvent]\n        <IND>bad = validate_or_badevent(parsed_dict, Schemas.room_redaction)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "poljar/matrix-nio",
    "commit": "4dd765f6d6e6e92ff4a8f79ffeb20d4ccf642e9a",
    "filename": "nio/responses.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/poljar-matrix-nio/nio/responses.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "nio/responses.py:159:8 Incompatible return type [7]: Expected `typing.Union[ErrorResponse, RoomSendResponse]` but got `RoomPutStateResponse`.",
    "message": " Expected `typing.Union[ErrorResponse, RoomSendResponse]` but got `RoomPutStateResponse`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 159,
    "warning_line": "        return cls(parsed_dict[\"event_id\"])",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def from_dict(cls, parsed_dict):\n        # type: (Dict[Any, Any]) -> Union[RoomSendResponse, ErrorResponse]\n        try:\n",
        "source_code_len": 125,
        "target_code": "    def from_dict(cls, parsed_dict):\n        # type: (Dict[Any, Any]) -> Union[RoomPutStateResponse, ErrorResponse]\n        try:\n",
        "target_code_len": 129,
        "diff_format": "@@ -152,3 +152,3 @@\n     def from_dict(cls, parsed_dict):\n-        # type: (Dict[Any, Any]) -> Union[RoomSendResponse, ErrorResponse]\n+        # type: (Dict[Any, Any]) -> Union[RoomPutStateResponse, ErrorResponse]\n         try:\n",
        "source_code_with_indent": "    def from_dict(cls, parsed_dict):\n        # type: (Dict[Any, Any]) -> Union[RoomSendResponse, ErrorResponse]\n        <IND>try:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def from_dict(cls, parsed_dict):\n        # type: (Dict[Any, Any]) -> Union[RoomPutStateResponse, ErrorResponse]\n        <IND>try:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]