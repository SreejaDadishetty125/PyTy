[
  {
    "project": "deepchem/deepchem",
    "commit": "c7a6c148533058fe5da0613adcc2a2d949246801",
    "filename": "deepchem/utils/data_utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/deepchem-deepchem/deepchem/utils/data_utils.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "deepchem/utils/data_utils.py:343:25 Incompatible parameter type [6]: Expected `typing.IO[bytes]` for 1st positional only parameter to call `pickle.load` but got `gzip.GzipFile`.",
    "message": " Expected `typing.IO[bytes]` for 1st positional only parameter to call `pickle.load` but got `gzip.GzipFile`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 343,
    "warning_line": "        df = pickle.load(f)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from urllib.request import urlretrieve\nfrom typing import Any, Iterator, List, Optional, Tuple, Union\n\n",
        "source_code_len": 103,
        "target_code": "from urllib.request import urlretrieve\nfrom typing import Any, Iterator, List, Optional, Tuple, Union, cast, IO\n\n",
        "target_code_len": 113,
        "diff_format": "@@ -12,3 +12,3 @@\n from urllib.request import urlretrieve\n-from typing import Any, Iterator, List, Optional, Tuple, Union\n+from typing import Any, Iterator, List, Optional, Tuple, Union, cast, IO\n \n",
        "source_code_with_indent": "from urllib.request import urlretrieve\nfrom typing import Any, Iterator, List, Optional, Tuple, Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from urllib.request import urlretrieve\nfrom typing import Any, Iterator, List, Optional, Tuple, Union, cast, IO\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n\ndef load_pickle_files(input_files: List[str]) -> Iterator[Any]:\n  \"\"\"Load dataset from pickle file.\n\n",
        "source_code_len": 103,
        "target_code": "\ndef load_pickle_file(input_file: str) -> Any:\n  \"\"\"Load from single, possibly gzipped, pickle file.\n\n  Parameters\n  ----------\n  input_file: str\n    The filename of pickle file. This function can load from\n    gzipped pickle file like `XXXX.pkl.gz`.\n\n  Returns\n  -------\n  Any\n    The object which is loaded from the pickle file.\n  \"\"\"\n  if \".gz\" in input_file:\n    with gzip.open(input_file, \"rb\") as unzipped_file:\n      return pickle.load(cast(IO[bytes], unzipped_file))\n  else:\n    with open(input_file, \"rb\") as opened_file:\n      return pickle.load(opened_file)\n\ndef load_pickle_files(input_files: List[str]) -> Iterator[Any]:\n  \"\"\"Load dataset from pickle files.\n\n",
        "target_code_len": 672,
        "diff_format": "@@ -324,5 +324,25 @@\n \n+def load_pickle_file(input_file: str) -> Any:\n+  \"\"\"Load from single, possibly gzipped, pickle file.\n+\n+  Parameters\n+  ----------\n+  input_file: str\n+    The filename of pickle file. This function can load from\n+    gzipped pickle file like `XXXX.pkl.gz`.\n+\n+  Returns\n+  -------\n+  Any\n+    The object which is loaded from the pickle file.\n+  \"\"\"\n+  if \".gz\" in input_file:\n+    with gzip.open(input_file, \"rb\") as unzipped_file:\n+      return pickle.load(cast(IO[bytes], unzipped_file))\n+  else:\n+    with open(input_file, \"rb\") as opened_file:\n+      return pickle.load(opened_file)\n \n def load_pickle_files(input_files: List[str]) -> Iterator[Any]:\n-  \"\"\"Load dataset from pickle file.\n+  \"\"\"Load dataset from pickle files.\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n\n<DED><DED><DED><DED>def load_pickle_files(input_files: List[str]) -> Iterator[Any]:\n  <IND>",
        "target_code_with_indent": "\n<DED><DED><DED><DED>def load_pickle_file(input_file: str) -> Any:\n  <IND>\"\"\"Load from single, possibly gzipped, pickle file.\n\n  Parameters\n  ----------\n  input_file: str\n    The filename of pickle file. This function can load from\n    gzipped pickle file like `XXXX.pkl.gz`.\n\n  Returns\n  -------\n  Any\n    The object which is loaded from the pickle file.\n  \"\"\"\n  if \".gz\" in input_file:\n    <IND>with gzip.open(input_file, \"rb\") as unzipped_file:\n      <IND>return pickle.load(cast(IO[bytes], unzipped_file))\n  <DED><DED>else:\n    <IND>with open(input_file, \"rb\") as opened_file:\n      <IND>return pickle.load(opened_file)\n\n<DED><DED><DED>def load_pickle_files(input_files: List[str]) -> Iterator[Any]:\n  <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "  for input_file in input_files:\n    if \".gz\" in input_file:\n      with gzip.open(input_file, \"rb\") as f:\n        df = pickle.load(f)\n    else:\n      with open(input_file, \"rb\") as f:\n        df = pickle.load(f)\n    yield df\n\n",
        "source_code_len": 226,
        "target_code": "  for input_file in input_files:\n    yield load_pickle_file(input_file)\n\n",
        "target_code_len": 73,
        "diff_format": "@@ -340,9 +360,3 @@\n   for input_file in input_files:\n-    if \".gz\" in input_file:\n-      with gzip.open(input_file, \"rb\") as f:\n-        df = pickle.load(f)\n-    else:\n-      with open(input_file, \"rb\") as f:\n-        df = pickle.load(f)\n-    yield df\n+    yield load_pickle_file(input_file)\n \n",
        "source_code_with_indent": "  for input_file in input_files:\n    <IND>if \".gz\" in input_file:\n      <IND>with gzip.open(input_file, \"rb\") as f:\n        <IND>df = pickle.load(f)\n    <DED><DED>else:\n      <IND>with open(input_file, \"rb\") as f:\n        <IND>df = pickle.load(f)\n    <DED><DED>yield df\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "  for input_file in input_files:\n    <IND>yield load_pickle_file(input_file)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "  if extension == \".pkl\":\n    if \".gz\" in filename:\n      with gzip.open(filename, \"rb\") as f:\n        df = pickle.load(f)\n    else:\n      with open(filename, \"rb\") as f:\n        df = pickle.load(f)\n    return df\n  elif extension == \".joblib\":\n",
        "source_code_len": 244,
        "target_code": "  if extension == \".pkl\":\n    return load_pickle_file(filename)\n  elif extension == \".joblib\":\n",
        "target_code_len": 95,
        "diff_format": "@@ -444,9 +458,3 @@\n   if extension == \".pkl\":\n-    if \".gz\" in filename:\n-      with gzip.open(filename, \"rb\") as f:\n-        df = pickle.load(f)\n-    else:\n-      with open(filename, \"rb\") as f:\n-        df = pickle.load(f)\n-    return df\n+    return load_pickle_file(filename)\n   elif extension == \".joblib\":\n",
        "source_code_with_indent": "  if extension == \".pkl\":\n    <IND>if \".gz\" in filename:\n      <IND>with gzip.open(filename, \"rb\") as f:\n        <IND>df = pickle.load(f)\n    <DED><DED>else:\n      <IND>with open(filename, \"rb\") as f:\n        <IND>df = pickle.load(f)\n    <DED><DED>return df\n  <DED>elif extension == \".joblib\":\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "  if extension == \".pkl\":\n    <IND>return load_pickle_file(filename)\n  <DED>elif extension == \".joblib\":\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "deepchem/deepchem",
    "commit": "c7a6c148533058fe5da0613adcc2a2d949246801",
    "filename": "deepchem/utils/data_utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/deepchem-deepchem/deepchem/utils/data_utils.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "deepchem/utils/data_utils.py:447:25 Incompatible parameter type [6]: Expected `typing.IO[bytes]` for 1st positional only parameter to call `pickle.load` but got `gzip.GzipFile`.",
    "message": " Expected `typing.IO[bytes]` for 1st positional only parameter to call `pickle.load` but got `gzip.GzipFile`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 447,
    "warning_line": "        df = pickle.load(f)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from urllib.request import urlretrieve\nfrom typing import Any, Iterator, List, Optional, Tuple, Union\n\n",
        "source_code_len": 103,
        "target_code": "from urllib.request import urlretrieve\nfrom typing import Any, Iterator, List, Optional, Tuple, Union, cast, IO\n\n",
        "target_code_len": 113,
        "diff_format": "@@ -12,3 +12,3 @@\n from urllib.request import urlretrieve\n-from typing import Any, Iterator, List, Optional, Tuple, Union\n+from typing import Any, Iterator, List, Optional, Tuple, Union, cast, IO\n \n",
        "source_code_with_indent": "from urllib.request import urlretrieve\nfrom typing import Any, Iterator, List, Optional, Tuple, Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from urllib.request import urlretrieve\nfrom typing import Any, Iterator, List, Optional, Tuple, Union, cast, IO\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n\ndef load_pickle_files(input_files: List[str]) -> Iterator[Any]:\n  \"\"\"Load dataset from pickle file.\n\n",
        "source_code_len": 103,
        "target_code": "\ndef load_pickle_file(input_file: str) -> Any:\n  \"\"\"Load from single, possibly gzipped, pickle file.\n\n  Parameters\n  ----------\n  input_file: str\n    The filename of pickle file. This function can load from\n    gzipped pickle file like `XXXX.pkl.gz`.\n\n  Returns\n  -------\n  Any\n    The object which is loaded from the pickle file.\n  \"\"\"\n  if \".gz\" in input_file:\n    with gzip.open(input_file, \"rb\") as unzipped_file:\n      return pickle.load(cast(IO[bytes], unzipped_file))\n  else:\n    with open(input_file, \"rb\") as opened_file:\n      return pickle.load(opened_file)\n\ndef load_pickle_files(input_files: List[str]) -> Iterator[Any]:\n  \"\"\"Load dataset from pickle files.\n\n",
        "target_code_len": 672,
        "diff_format": "@@ -324,5 +324,25 @@\n \n+def load_pickle_file(input_file: str) -> Any:\n+  \"\"\"Load from single, possibly gzipped, pickle file.\n+\n+  Parameters\n+  ----------\n+  input_file: str\n+    The filename of pickle file. This function can load from\n+    gzipped pickle file like `XXXX.pkl.gz`.\n+\n+  Returns\n+  -------\n+  Any\n+    The object which is loaded from the pickle file.\n+  \"\"\"\n+  if \".gz\" in input_file:\n+    with gzip.open(input_file, \"rb\") as unzipped_file:\n+      return pickle.load(cast(IO[bytes], unzipped_file))\n+  else:\n+    with open(input_file, \"rb\") as opened_file:\n+      return pickle.load(opened_file)\n \n def load_pickle_files(input_files: List[str]) -> Iterator[Any]:\n-  \"\"\"Load dataset from pickle file.\n+  \"\"\"Load dataset from pickle files.\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n\n<DED><DED><DED><DED>def load_pickle_files(input_files: List[str]) -> Iterator[Any]:\n  <IND>",
        "target_code_with_indent": "\n<DED><DED><DED><DED>def load_pickle_file(input_file: str) -> Any:\n  <IND>\"\"\"Load from single, possibly gzipped, pickle file.\n\n  Parameters\n  ----------\n  input_file: str\n    The filename of pickle file. This function can load from\n    gzipped pickle file like `XXXX.pkl.gz`.\n\n  Returns\n  -------\n  Any\n    The object which is loaded from the pickle file.\n  \"\"\"\n  if \".gz\" in input_file:\n    <IND>with gzip.open(input_file, \"rb\") as unzipped_file:\n      <IND>return pickle.load(cast(IO[bytes], unzipped_file))\n  <DED><DED>else:\n    <IND>with open(input_file, \"rb\") as opened_file:\n      <IND>return pickle.load(opened_file)\n\n<DED><DED><DED>def load_pickle_files(input_files: List[str]) -> Iterator[Any]:\n  <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "  for input_file in input_files:\n    if \".gz\" in input_file:\n      with gzip.open(input_file, \"rb\") as f:\n        df = pickle.load(f)\n    else:\n      with open(input_file, \"rb\") as f:\n        df = pickle.load(f)\n    yield df\n\n",
        "source_code_len": 226,
        "target_code": "  for input_file in input_files:\n    yield load_pickle_file(input_file)\n\n",
        "target_code_len": 73,
        "diff_format": "@@ -340,9 +360,3 @@\n   for input_file in input_files:\n-    if \".gz\" in input_file:\n-      with gzip.open(input_file, \"rb\") as f:\n-        df = pickle.load(f)\n-    else:\n-      with open(input_file, \"rb\") as f:\n-        df = pickle.load(f)\n-    yield df\n+    yield load_pickle_file(input_file)\n \n",
        "source_code_with_indent": "  for input_file in input_files:\n    <IND>if \".gz\" in input_file:\n      <IND>with gzip.open(input_file, \"rb\") as f:\n        <IND>df = pickle.load(f)\n    <DED><DED>else:\n      <IND>with open(input_file, \"rb\") as f:\n        <IND>df = pickle.load(f)\n    <DED><DED>yield df\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "  for input_file in input_files:\n    <IND>yield load_pickle_file(input_file)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "  if extension == \".pkl\":\n    if \".gz\" in filename:\n      with gzip.open(filename, \"rb\") as f:\n        df = pickle.load(f)\n    else:\n      with open(filename, \"rb\") as f:\n        df = pickle.load(f)\n    return df\n  elif extension == \".joblib\":\n",
        "source_code_len": 244,
        "target_code": "  if extension == \".pkl\":\n    return load_pickle_file(filename)\n  elif extension == \".joblib\":\n",
        "target_code_len": 95,
        "diff_format": "@@ -444,9 +458,3 @@\n   if extension == \".pkl\":\n-    if \".gz\" in filename:\n-      with gzip.open(filename, \"rb\") as f:\n-        df = pickle.load(f)\n-    else:\n-      with open(filename, \"rb\") as f:\n-        df = pickle.load(f)\n-    return df\n+    return load_pickle_file(filename)\n   elif extension == \".joblib\":\n",
        "source_code_with_indent": "  if extension == \".pkl\":\n    <IND>if \".gz\" in filename:\n      <IND>with gzip.open(filename, \"rb\") as f:\n        <IND>df = pickle.load(f)\n    <DED><DED>else:\n      <IND>with open(filename, \"rb\") as f:\n        <IND>df = pickle.load(f)\n    <DED><DED>return df\n  <DED>elif extension == \".joblib\":\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "  if extension == \".pkl\":\n    <IND>return load_pickle_file(filename)\n  <DED>elif extension == \".joblib\":\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]