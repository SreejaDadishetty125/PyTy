[
  {
    "project": "google/TensorNetwork",
    "commit": "24582eedf2a92f75d4450978a570e922e3d8051f",
    "filename": "tensornetwork/backends/numpy/numpy_backend.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/google-TensorNetwork/tensornetwork/backends/numpy/numpy_backend.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tensornetwork/backends/numpy/numpy_backend.py:307:7 Unsupported operand [58]: `<` is not supported for operand types `Optional[int]` and `Optional[int]`.",
    "message": " `<` is not supported for operand types `Optional[int]` and `Optional[int]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 307,
    "warning_line": "    if num_krylov_vecs < numeig:"
  },
  {
    "project": "google/TensorNetwork",
    "commit": "24582eedf2a92f75d4450978a570e922e3d8051f",
    "filename": "tensornetwork/backends/numpy/numpy_backend.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/google-TensorNetwork/tensornetwork/backends/numpy/numpy_backend.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tensornetwork/backends/numpy/numpy_backend.py:309:7 Unsupported operand [58]: `>` is not supported for operand types `Optional[int]` and `int`.",
    "message": " `>` is not supported for operand types `Optional[int]` and `int`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 309,
    "warning_line": "    if numeig > 1 and not reorthogonalize:"
  },
  {
    "project": "google/TensorNetwork",
    "commit": "24582eedf2a92f75d4450978a570e922e3d8051f",
    "filename": "tensornetwork/backends/numpy/numpy_backend.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/google-TensorNetwork/tensornetwork/backends/numpy/numpy_backend.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tensornetwork/backends/numpy/numpy_backend.py:343:20 Incompatible parameter type [6]: Expected `typing_extensions.SupportsIndex` for 1st positional only parameter to call `range.__init__` but got `Optional[int]`.",
    "message": " Expected `typing_extensions.SupportsIndex` for 1st positional only parameter to call `range.__init__` but got `Optional[int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 343,
    "warning_line": "    for it in range(num_krylov_vecs):"
  },
  {
    "project": "google/TensorNetwork",
    "commit": "24582eedf2a92f75d4450978a570e922e3d8051f",
    "filename": "tensornetwork/backends/numpy/numpy_backend.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/google-TensorNetwork/tensornetwork/backends/numpy/numpy_backend.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tensornetwork/backends/numpy/numpy_backend.py:359:29 Unsupported operand [58]: `%` is not supported for operand types `int` and `Optional[int]`.",
    "message": " `%` is not supported for operand types `int` and `Optional[int]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 359,
    "warning_line": "      if ((it > 0) and (it % ndiag) == 0) and (len(diag_elements) >= numeig):"
  },
  {
    "project": "google/TensorNetwork",
    "commit": "24582eedf2a92f75d4450978a570e922e3d8051f",
    "filename": "tensornetwork/backends/numpy/numpy_backend.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/google-TensorNetwork/tensornetwork/backends/numpy/numpy_backend.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tensornetwork/backends/numpy/numpy_backend.py:359:69 Unsupported operand [58]: `>=` is not supported for operand types `int` and `Optional[int]`.",
    "message": " `>=` is not supported for operand types `int` and `Optional[int]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 359,
    "warning_line": "      if ((it > 0) and (it % ndiag) == 0) and (len(diag_elements) >= numeig):"
  },
  {
    "project": "google/TensorNetwork",
    "commit": "24582eedf2a92f75d4450978a570e922e3d8051f",
    "filename": "tensornetwork/backends/numpy/numpy_backend.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/google-TensorNetwork/tensornetwork/backends/numpy/numpy_backend.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tensornetwork/backends/numpy/numpy_backend.py:383:24 Incompatible parameter type [6]: Expected `Variable[_typeshed.SupportsLessThanT (bound to _typeshed.SupportsLessThan)]` for 1st positional only parameter to call `min` but got `Optional[int]`.",
    "message": " Expected `Variable[_typeshed.SupportsLessThanT (bound to _typeshed.SupportsLessThan)]` for 1st positional only parameter to call `min` but got `Optional[int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 383,
    "warning_line": "    for n2 in range(min(numeig, len(eigvals))):"
  },
  {
    "project": "google/TensorNetwork",
    "commit": "24582eedf2a92f75d4450978a570e922e3d8051f",
    "filename": "tensornetwork/backends/pytorch/pytorch_backend.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/google-TensorNetwork/tensornetwork/backends/pytorch/pytorch_backend.py",
    "file_hunks_size": 6,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tensornetwork/backends/pytorch/pytorch_backend.py:171:2 Inconsistent override [15]: `tensornetwork.backends.pytorch.pytorch_backend.PyTorchBackend.eigs` overrides method defined in `base_backend.BaseBackend` inconsistently. Returned type `Tuple[List[typing.Any], List[typing.Any]]` is not a subtype of the overridden return `List[typing.Any]`.",
    "message": " `tensornetwork.backends.pytorch.pytorch_backend.PyTorchBackend.eigs` overrides method defined in `base_backend.BaseBackend` inconsistently. Returned type `Tuple[List[typing.Any], List[typing.Any]]` is not a subtype of the overridden return `List[typing.Any]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 171,
    "warning_line": "  def eigs(self,"
  },
  {
    "project": "google/TensorNetwork",
    "commit": "24582eedf2a92f75d4450978a570e922e3d8051f",
    "filename": "tensornetwork/backends/pytorch/pytorch_backend.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/google-TensorNetwork/tensornetwork/backends/pytorch/pytorch_backend.py",
    "file_hunks_size": 6,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tensornetwork/backends/pytorch/pytorch_backend.py:222:7 Unsupported operand [58]: `<` is not supported for operand types `Optional[int]` and `Optional[int]`.",
    "message": " `<` is not supported for operand types `Optional[int]` and `Optional[int]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 222,
    "warning_line": "    if num_krylov_vecs < numeig:"
  },
  {
    "project": "google/TensorNetwork",
    "commit": "24582eedf2a92f75d4450978a570e922e3d8051f",
    "filename": "tensornetwork/backends/pytorch/pytorch_backend.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/google-TensorNetwork/tensornetwork/backends/pytorch/pytorch_backend.py",
    "file_hunks_size": 6,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tensornetwork/backends/pytorch/pytorch_backend.py:224:7 Unsupported operand [58]: `>` is not supported for operand types `Optional[int]` and `int`.",
    "message": " `>` is not supported for operand types `Optional[int]` and `int`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 224,
    "warning_line": "    if numeig > 1 and not reorthogonalize:"
  },
  {
    "project": "google/TensorNetwork",
    "commit": "24582eedf2a92f75d4450978a570e922e3d8051f",
    "filename": "tensornetwork/backends/pytorch/pytorch_backend.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/google-TensorNetwork/tensornetwork/backends/pytorch/pytorch_backend.py",
    "file_hunks_size": 6,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tensornetwork/backends/pytorch/pytorch_backend.py:255:20 Incompatible parameter type [6]: Expected `typing_extensions.SupportsIndex` for 1st positional only parameter to call `range.__init__` but got `Optional[int]`.",
    "message": " Expected `typing_extensions.SupportsIndex` for 1st positional only parameter to call `range.__init__` but got `Optional[int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 255,
    "warning_line": "    for it in range(num_krylov_vecs):"
  },
  {
    "project": "google/TensorNetwork",
    "commit": "24582eedf2a92f75d4450978a570e922e3d8051f",
    "filename": "tensornetwork/backends/pytorch/pytorch_backend.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/google-TensorNetwork/tensornetwork/backends/pytorch/pytorch_backend.py",
    "file_hunks_size": 6,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tensornetwork/backends/pytorch/pytorch_backend.py:270:29 Unsupported operand [58]: `%` is not supported for operand types `int` and `Optional[int]`.",
    "message": " `%` is not supported for operand types `int` and `Optional[int]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 270,
    "warning_line": "      if ((it > 0) and (it % ndiag) == 0) and (len(diag_elements) >= numeig):"
  },
  {
    "project": "google/TensorNetwork",
    "commit": "24582eedf2a92f75d4450978a570e922e3d8051f",
    "filename": "tensornetwork/backends/pytorch/pytorch_backend.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/google-TensorNetwork/tensornetwork/backends/pytorch/pytorch_backend.py",
    "file_hunks_size": 6,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tensornetwork/backends/pytorch/pytorch_backend.py:270:69 Unsupported operand [58]: `>=` is not supported for operand types `int` and `Optional[int]`.",
    "message": " `>=` is not supported for operand types `int` and `Optional[int]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 270,
    "warning_line": "      if ((it > 0) and (it % ndiag) == 0) and (len(diag_elements) >= numeig):"
  },
  {
    "project": "google/TensorNetwork",
    "commit": "24582eedf2a92f75d4450978a570e922e3d8051f",
    "filename": "tensornetwork/backends/pytorch/pytorch_backend.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/google-TensorNetwork/tensornetwork/backends/pytorch/pytorch_backend.py",
    "file_hunks_size": 6,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tensornetwork/backends/pytorch/pytorch_backend.py:294:24 Incompatible parameter type [6]: Expected `Variable[_typeshed.SupportsLessThanT (bound to _typeshed.SupportsLessThan)]` for 1st positional only parameter to call `min` but got `Optional[int]`.",
    "message": " Expected `Variable[_typeshed.SupportsLessThanT (bound to _typeshed.SupportsLessThan)]` for 1st positional only parameter to call `min` but got `Optional[int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 294,
    "warning_line": "    for n2 in range(min(numeig, len(eigvals))):"
  },
  {
    "project": "google/TensorNetwork",
    "commit": "24582eedf2a92f75d4450978a570e922e3d8051f",
    "filename": "tensornetwork/backends/shell/shell_backend.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/google-TensorNetwork/tensornetwork/backends/shell/shell_backend.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tensornetwork/backends/shell/shell_backend.py:266:7 Unsupported operand [58]: `<` is not supported for operand types `Optional[int]` and `Optional[int]`.",
    "message": " `<` is not supported for operand types `Optional[int]` and `Optional[int]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 266,
    "warning_line": "    if num_krylov_vecs < numeig:"
  },
  {
    "project": "google/TensorNetwork",
    "commit": "24582eedf2a92f75d4450978a570e922e3d8051f",
    "filename": "tensornetwork/backends/shell/shell_backend.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/google-TensorNetwork/tensornetwork/backends/shell/shell_backend.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tensornetwork/backends/shell/shell_backend.py:269:7 Unsupported operand [58]: `>` is not supported for operand types `Optional[int]` and `int`.",
    "message": " `>` is not supported for operand types `Optional[int]` and `int`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 269,
    "warning_line": "    if numeig > 1 and not reorthogonalize:"
  },
  {
    "project": "google/TensorNetwork",
    "commit": "24582eedf2a92f75d4450978a570e922e3d8051f",
    "filename": "tensornetwork/backends/shell/shell_backend.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/google-TensorNetwork/tensornetwork/backends/shell/shell_backend.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tensornetwork/backends/shell/shell_backend.py:284:50 Incompatible parameter type [6]: Expected `typing_extensions.SupportsIndex` for 1st positional only parameter to call `range.__init__` but got `Optional[int]`.",
    "message": " Expected `typing_extensions.SupportsIndex` for 1st positional only parameter to call `range.__init__` but got `Optional[int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 284,
    "warning_line": "      return [ShellTensor(tuple()) for _ in range(numeig)"
  },
  {
    "project": "google/TensorNetwork",
    "commit": "24582eedf2a92f75d4450978a570e922e3d8051f",
    "filename": "tensornetwork/backends/shell/shell_backend.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/google-TensorNetwork/tensornetwork/backends/shell/shell_backend.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tensornetwork/backends/shell/shell_backend.py:285:56 Incompatible parameter type [6]: Expected `typing_extensions.SupportsIndex` for 1st positional only parameter to call `range.__init__` but got `Optional[int]`.",
    "message": " Expected `typing_extensions.SupportsIndex` for 1st positional only parameter to call `range.__init__` but got `Optional[int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 285,
    "warning_line": "             ], [ShellTensor(A.shape[0]) for _ in range(numeig)]"
  },
  {
    "project": "google/TensorNetwork",
    "commit": "24582eedf2a92f75d4450978a570e922e3d8051f",
    "filename": "tensornetwork/backends/shell/shell_backend.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/google-TensorNetwork/tensornetwork/backends/shell/shell_backend.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tensornetwork/backends/shell/shell_backend.py:287:48 Incompatible parameter type [6]: Expected `typing_extensions.SupportsIndex` for 1st positional only parameter to call `range.__init__` but got `Optional[int]`.",
    "message": " Expected `typing_extensions.SupportsIndex` for 1st positional only parameter to call `range.__init__` but got `Optional[int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 287,
    "warning_line": "    return [ShellTensor(tuple()) for _ in range(numeig)"
  },
  {
    "project": "google/TensorNetwork",
    "commit": "24582eedf2a92f75d4450978a570e922e3d8051f",
    "filename": "tensornetwork/backends/shell/shell_backend.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/google-TensorNetwork/tensornetwork/backends/shell/shell_backend.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tensornetwork/backends/shell/shell_backend.py:288:63 Incompatible parameter type [6]: Expected `typing_extensions.SupportsIndex` for 1st positional only parameter to call `range.__init__` but got `Optional[int]`.",
    "message": " Expected `typing_extensions.SupportsIndex` for 1st positional only parameter to call `range.__init__` but got `Optional[int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 288,
    "warning_line": "           ], [ShellTensor(initial_state.shape) for _ in range(numeig)]"
  },
  {
    "project": "google/TensorNetwork",
    "commit": "24582eedf2a92f75d4450978a570e922e3d8051f",
    "filename": "tensornetwork/backends/symmetric/symmetric_backend.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/google-TensorNetwork/tensornetwork/backends/symmetric/symmetric_backend.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tensornetwork/backends/symmetric/symmetric_backend.py:157:2 Inconsistent override [15]: `tensornetwork.backends.symmetric.symmetric_backend.SymmetricBackend.eigs` overrides method defined in `base_backend.BaseBackend` inconsistently. Returned type `Tuple[List[typing.Any], List[typing.Any]]` is not a subtype of the overridden return `List[typing.Any]`.",
    "message": " `tensornetwork.backends.symmetric.symmetric_backend.SymmetricBackend.eigs` overrides method defined in `base_backend.BaseBackend` inconsistently. Returned type `Tuple[List[typing.Any], List[typing.Any]]` is not a subtype of the overridden return `List[typing.Any]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 157,
    "warning_line": "  def eigs(self,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "\n  def eigs(self,\n           A: Callable,\n           initial_state: Optional[Tensor] = None,\n           num_krylov_vecs: Optional[int] = 200,\n           numeig: Optional[int] = 6,\n           tol: Optional[float] = 1E-8,\n           which: Optional[Text] = 'LR',\n           maxiter: Optional[int] = None,\n           dtype: Optional[Type[numpy.number]] = None) -> Tuple[List, List]:\n    raise NotImplementedError()\n\n  def eigsh_lanczos(\n      self,\n      A: Callable,\n      initial_state: Optional[Tensor] = None,\n      num_krylov_vecs: Optional[int] = 200,\n      numeig: Optional[int] = 1,\n      tol: Optional[float] = 1E-8,\n      delta: Optional[float] = 1E-8,\n      ndiag: Optional[int] = 20,\n      reorthogonalize: Optional[bool] = False) -> Tuple[List, List]:\n    raise NotImplementedError()\n\n  def addition(self, tensor1: Tensor, tensor2: Tensor) -> Tensor:\n",
        "source_code_len": 861,
        "target_code": "\n  def addition(self, tensor1: Tensor, tensor2: Tensor) -> Tensor:\n",
        "target_code_len": 67,
        "diff_format": "@@ -156,25 +157,2 @@\n \n-  def eigs(self,\n-           A: Callable,\n-           initial_state: Optional[Tensor] = None,\n-           num_krylov_vecs: Optional[int] = 200,\n-           numeig: Optional[int] = 6,\n-           tol: Optional[float] = 1E-8,\n-           which: Optional[Text] = 'LR',\n-           maxiter: Optional[int] = None,\n-           dtype: Optional[Type[numpy.number]] = None) -> Tuple[List, List]:\n-    raise NotImplementedError()\n-\n-  def eigsh_lanczos(\n-      self,\n-      A: Callable,\n-      initial_state: Optional[Tensor] = None,\n-      num_krylov_vecs: Optional[int] = 200,\n-      numeig: Optional[int] = 1,\n-      tol: Optional[float] = 1E-8,\n-      delta: Optional[float] = 1E-8,\n-      ndiag: Optional[int] = 20,\n-      reorthogonalize: Optional[bool] = False) -> Tuple[List, List]:\n-    raise NotImplementedError()\n-\n   def addition(self, tensor1: Tensor, tensor2: Tensor) -> Tensor:\n",
        "source_code_with_indent": "\n  <DED>def eigs(self,\n           A: Callable,\n           initial_state: Optional[Tensor] = None,\n           num_krylov_vecs: Optional[int] = 200,\n           numeig: Optional[int] = 6,\n           tol: Optional[float] = 1E-8,\n           which: Optional[Text] = 'LR',\n           maxiter: Optional[int] = None,\n           dtype: Optional[Type[numpy.number]] = None) -> Tuple[List, List]:\n    <IND>raise NotImplementedError()\n\n  <DED>def eigsh_lanczos(\n      self,\n      A: Callable,\n      initial_state: Optional[Tensor] = None,\n      num_krylov_vecs: Optional[int] = 200,\n      numeig: Optional[int] = 1,\n      tol: Optional[float] = 1E-8,\n      delta: Optional[float] = 1E-8,\n      ndiag: Optional[int] = 20,\n      reorthogonalize: Optional[bool] = False) -> Tuple[List, List]:\n    <IND>raise NotImplementedError()\n\n  <DED>def addition(self, tensor1: Tensor, tensor2: Tensor) -> Tensor:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n  <DED>def addition(self, tensor1: Tensor, tensor2: Tensor) -> Tensor:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "google/TensorNetwork",
    "commit": "24582eedf2a92f75d4450978a570e922e3d8051f",
    "filename": "tensornetwork/backends/tensorflow/tensorflow_backend.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/google-TensorNetwork/tensornetwork/backends/tensorflow/tensorflow_backend.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tensornetwork/backends/tensorflow/tensorflow_backend.py:184:2 Inconsistent override [15]: `tensornetwork.backends.tensorflow.tensorflow_backend.TensorFlowBackend.eigs` overrides method defined in `base_backend.BaseBackend` inconsistently. Returned type `Tuple[List[typing.Any], List[typing.Any]]` is not a subtype of the overridden return `List[typing.Any]`.",
    "message": " `tensornetwork.backends.tensorflow.tensorflow_backend.TensorFlowBackend.eigs` overrides method defined in `base_backend.BaseBackend` inconsistently. Returned type `Tuple[List[typing.Any], List[typing.Any]]` is not a subtype of the overridden return `List[typing.Any]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 184,
    "warning_line": "  def eigs(self,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "\n  def eigs(self,\n           A: Callable,\n           initial_state: Optional[Tensor] = None,\n           num_krylov_vecs: Optional[int] = 200,\n           numeig: Optional[int] = 1,\n           tol: Optional[float] = 1E-8,\n           which: Optional[Text] = 'LR',\n           maxiter: Optional[int] = None,\n           dtype: Optional[Type] = None) -> Tuple[List, List]:\n    raise NotImplementedError(\"Backend '{}' has not implemented eigs.\".format(\n        self.name))\n\n  def eigsh_lanczos(\n      self,\n      A: Callable,\n      initial_state: Optional[Tensor] = None,\n      num_krylov_vecs: Optional[int] = 200,\n      numeig: Optional[int] = 1,\n      tol: Optional[float] = 1E-8,\n      delta: Optional[float] = 1E-8,\n      ndiag: Optional[int] = 20,\n      reorthogonalize: Optional[bool] = False) -> Tuple[List, List]:\n    raise NotImplementedError(\n        \"Backend '{}' has not implemented eighs_lanczos.\".format(self.name))\n\n  def addition(self, tensor1: Tensor, tensor2: Tensor) -> Tensor:\n",
        "source_code_len": 990,
        "target_code": "\n  def addition(self, tensor1: Tensor, tensor2: Tensor) -> Tensor:\n",
        "target_code_len": 67,
        "diff_format": "@@ -183,27 +185,2 @@\n \n-  def eigs(self,\n-           A: Callable,\n-           initial_state: Optional[Tensor] = None,\n-           num_krylov_vecs: Optional[int] = 200,\n-           numeig: Optional[int] = 1,\n-           tol: Optional[float] = 1E-8,\n-           which: Optional[Text] = 'LR',\n-           maxiter: Optional[int] = None,\n-           dtype: Optional[Type] = None) -> Tuple[List, List]:\n-    raise NotImplementedError(\"Backend '{}' has not implemented eigs.\".format(\n-        self.name))\n-\n-  def eigsh_lanczos(\n-      self,\n-      A: Callable,\n-      initial_state: Optional[Tensor] = None,\n-      num_krylov_vecs: Optional[int] = 200,\n-      numeig: Optional[int] = 1,\n-      tol: Optional[float] = 1E-8,\n-      delta: Optional[float] = 1E-8,\n-      ndiag: Optional[int] = 20,\n-      reorthogonalize: Optional[bool] = False) -> Tuple[List, List]:\n-    raise NotImplementedError(\n-        \"Backend '{}' has not implemented eighs_lanczos.\".format(self.name))\n-\n   def addition(self, tensor1: Tensor, tensor2: Tensor) -> Tensor:\n",
        "source_code_with_indent": "\n  <DED>def eigs(self,\n           A: Callable,\n           initial_state: Optional[Tensor] = None,\n           num_krylov_vecs: Optional[int] = 200,\n           numeig: Optional[int] = 1,\n           tol: Optional[float] = 1E-8,\n           which: Optional[Text] = 'LR',\n           maxiter: Optional[int] = None,\n           dtype: Optional[Type] = None) -> Tuple[List, List]:\n    <IND>raise NotImplementedError(\"Backend '{}' has not implemented eigs.\".format(\n        self.name))\n\n  <DED>def eigsh_lanczos(\n      self,\n      A: Callable,\n      initial_state: Optional[Tensor] = None,\n      num_krylov_vecs: Optional[int] = 200,\n      numeig: Optional[int] = 1,\n      tol: Optional[float] = 1E-8,\n      delta: Optional[float] = 1E-8,\n      ndiag: Optional[int] = 20,\n      reorthogonalize: Optional[bool] = False) -> Tuple[List, List]:\n    <IND>raise NotImplementedError(\n        \"Backend '{}' has not implemented eighs_lanczos.\".format(self.name))\n\n  <DED>def addition(self, tensor1: Tensor, tensor2: Tensor) -> Tensor:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n  <DED>def addition(self, tensor1: Tensor, tensor2: Tensor) -> Tensor:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]