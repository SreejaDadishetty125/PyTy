[
  {
    "project": "ReactiveX/RxPY",
    "commit": "4ba82c313df482f7ed6b65c3dbec4598aa264b90",
    "filename": "rx/scheduler/catchscheduler.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/scheduler/catchscheduler.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/scheduler/catchscheduler.py:30:8 Incompatible attribute type [8]: Attribute `_recursive_original` declared in class `CatchScheduler` has type `typing.Scheduler` but is used as type `None`.",
    "message": " Attribute `_recursive_original` declared in class `CatchScheduler` has type `typing.Scheduler` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 30,
    "warning_line": "        self._recursive_original: typing.Scheduler = None",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self._handler: Callable[[Exception], bool] = handler\n        self._recursive_original: typing.Scheduler = None\n        self._recursive_wrapper: 'CatchScheduler' = None\n\n",
        "source_code_len": 177,
        "target_code": "        self._handler: Callable[[Exception], bool] = handler\n        self._recursive_original: Optional[typing.Scheduler] = None\n        self._recursive_wrapper: Optional['CatchScheduler'] = None\n\n",
        "target_code_len": 197,
        "diff_format": "@@ -29,4 +29,4 @@\n         self._handler: Callable[[Exception], bool] = handler\n-        self._recursive_original: typing.Scheduler = None\n-        self._recursive_wrapper: 'CatchScheduler' = None\n+        self._recursive_original: Optional[typing.Scheduler] = None\n+        self._recursive_wrapper: Optional['CatchScheduler'] = None\n \n",
        "source_code_with_indent": "        self._handler: Callable[[Exception], bool] = handler\n        self._recursive_original: typing.Scheduler = None\n        self._recursive_wrapper: 'CatchScheduler' = None\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self._handler: Callable[[Exception], bool] = handler\n        self._recursive_original: Optional[typing.Scheduler] = None\n        self._recursive_wrapper: Optional['CatchScheduler'] = None\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def _get_recursive_wrapper(self, scheduler) -> 'CatchScheduler':\n        if self._recursive_original != scheduler:\n            self._recursive_original = scheduler\n",
        "source_code_len": 168,
        "target_code": "    def _get_recursive_wrapper(self, scheduler) -> 'CatchScheduler':\n        if self._recursive_wrapper is None or self._recursive_original != scheduler:\n            self._recursive_original = scheduler\n",
        "target_code_len": 203,
        "diff_format": "@@ -157,3 +164,3 @@\n     def _get_recursive_wrapper(self, scheduler) -> 'CatchScheduler':\n-        if self._recursive_original != scheduler:\n+        if self._recursive_wrapper is None or self._recursive_original != scheduler:\n             self._recursive_original = scheduler\n",
        "source_code_with_indent": "    <DED>def _get_recursive_wrapper(self, scheduler) -> 'CatchScheduler':\n        <IND>if self._recursive_original != scheduler:\n            <IND>self._recursive_original = scheduler\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def _get_recursive_wrapper(self, scheduler) -> 'CatchScheduler':\n        <IND>if self._recursive_wrapper is None or self._recursive_original != scheduler:\n            <IND>self._recursive_original = scheduler\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "4ba82c313df482f7ed6b65c3dbec4598aa264b90",
    "filename": "rx/scheduler/catchscheduler.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/scheduler/catchscheduler.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/scheduler/catchscheduler.py:31:8 Incompatible attribute type [8]: Attribute `_recursive_wrapper` declared in class `CatchScheduler` has type `CatchScheduler` but is used as type `None`.",
    "message": " Attribute `_recursive_wrapper` declared in class `CatchScheduler` has type `CatchScheduler` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 31,
    "warning_line": "        self._recursive_wrapper: 'CatchScheduler' = None",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self._handler: Callable[[Exception], bool] = handler\n        self._recursive_original: typing.Scheduler = None\n        self._recursive_wrapper: 'CatchScheduler' = None\n\n",
        "source_code_len": 177,
        "target_code": "        self._handler: Callable[[Exception], bool] = handler\n        self._recursive_original: Optional[typing.Scheduler] = None\n        self._recursive_wrapper: Optional['CatchScheduler'] = None\n\n",
        "target_code_len": 197,
        "diff_format": "@@ -29,4 +29,4 @@\n         self._handler: Callable[[Exception], bool] = handler\n-        self._recursive_original: typing.Scheduler = None\n-        self._recursive_wrapper: 'CatchScheduler' = None\n+        self._recursive_original: Optional[typing.Scheduler] = None\n+        self._recursive_wrapper: Optional['CatchScheduler'] = None\n \n",
        "source_code_with_indent": "        self._handler: Callable[[Exception], bool] = handler\n        self._recursive_original: typing.Scheduler = None\n        self._recursive_wrapper: 'CatchScheduler' = None\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self._handler: Callable[[Exception], bool] = handler\n        self._recursive_original: Optional[typing.Scheduler] = None\n        self._recursive_wrapper: Optional['CatchScheduler'] = None\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def _get_recursive_wrapper(self, scheduler) -> 'CatchScheduler':\n        if self._recursive_original != scheduler:\n            self._recursive_original = scheduler\n",
        "source_code_len": 168,
        "target_code": "    def _get_recursive_wrapper(self, scheduler) -> 'CatchScheduler':\n        if self._recursive_wrapper is None or self._recursive_original != scheduler:\n            self._recursive_original = scheduler\n",
        "target_code_len": 203,
        "diff_format": "@@ -157,3 +164,3 @@\n     def _get_recursive_wrapper(self, scheduler) -> 'CatchScheduler':\n-        if self._recursive_original != scheduler:\n+        if self._recursive_wrapper is None or self._recursive_original != scheduler:\n             self._recursive_original = scheduler\n",
        "source_code_with_indent": "    <DED>def _get_recursive_wrapper(self, scheduler) -> 'CatchScheduler':\n        <IND>if self._recursive_original != scheduler:\n            <IND>self._recursive_original = scheduler\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def _get_recursive_wrapper(self, scheduler) -> 'CatchScheduler':\n        <IND>if self._recursive_wrapper is None or self._recursive_original != scheduler:\n            <IND>self._recursive_original = scheduler\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "4ba82c313df482f7ed6b65c3dbec4598aa264b90",
    "filename": "rx/scheduler/currentthreadscheduler.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/scheduler/currentthreadscheduler.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/scheduler/currentthreadscheduler.py:66:8 Incompatible variable type [9]: self is declared to have type `CurrentThreadScheduler` but is used as type `Optional[CurrentThreadScheduler]`.",
    "message": " self is declared to have type `CurrentThreadScheduler` but is used as type `Optional[CurrentThreadScheduler]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 66,
    "warning_line": "        self: 'CurrentThreadScheduler' = CurrentThreadScheduler._global.get(thread)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        thread = threading.current_thread()\n        self: 'CurrentThreadScheduler' = CurrentThreadScheduler._global.get(thread)\n        if not self:\n            self = super().__new__(cls)\n",
        "source_code_len": 189,
        "target_code": "        thread = threading.current_thread()\n        try:\n            self = CurrentThreadScheduler._global[thread]\n        except KeyError:\n            self = super().__new__(cls)\n",
        "target_code_len": 180,
        "diff_format": "@@ -65,4 +64,5 @@\n         thread = threading.current_thread()\n-        self: 'CurrentThreadScheduler' = CurrentThreadScheduler._global.get(thread)\n-        if not self:\n+        try:\n+            self = CurrentThreadScheduler._global[thread]\n+        except KeyError:\n             self = super().__new__(cls)\n",
        "source_code_with_indent": "        thread = threading.current_thread()\n        self: 'CurrentThreadScheduler' = CurrentThreadScheduler._global.get(thread)\n        if not self:\n            <IND>self = super().__new__(cls)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        thread = threading.current_thread()\n        try:\n            <IND>self = CurrentThreadScheduler._global[thread]\n        <DED>except KeyError:\n            <IND>self = super().__new__(cls)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "4ba82c313df482f7ed6b65c3dbec4598aa264b90",
    "filename": "rx/scheduler/currentthreadscheduler.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/scheduler/currentthreadscheduler.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/scheduler/currentthreadscheduler.py:136:8 Incompatible variable type [9]: si is declared to have type `ScheduledItem[Variable[typing.TState]]` but is used as type `ScheduledItem[object]`.",
    "message": " si is declared to have type `ScheduledItem[Variable[typing.TState]]` but is used as type `ScheduledItem[object]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 136,
    "warning_line": "        si: ScheduledItem[typing.TState] = ScheduledItem(self, state, action, duetime)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        si: ScheduledItem[typing.TState] = ScheduledItem(self, state, action, duetime)\n\n",
        "source_code_len": 89,
        "target_code": "\n        si: ScheduledItem = ScheduledItem(self, state, action, duetime)\n\n",
        "target_code_len": 74,
        "diff_format": "@@ -135,3 +135,3 @@\n \n-        si: ScheduledItem[typing.TState] = ScheduledItem(self, state, action, duetime)\n+        si: ScheduledItem = ScheduledItem(self, state, action, duetime)\n \n",
        "source_code_with_indent": "\n        <DED>si: ScheduledItem[typing.TState] = ScheduledItem(self, state, action, duetime)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        <DED>si: ScheduledItem = ScheduledItem(self, state, action, duetime)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "4ba82c313df482f7ed6b65c3dbec4598aa264b90",
    "filename": "rx/scheduler/eventloopscheduler.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/scheduler/eventloopscheduler.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/scheduler/eventloopscheduler.py:96:8 Incompatible variable type [9]: si is declared to have type `ScheduledItem[Variable[typing.TState]]` but is used as type `ScheduledItem[object]`.",
    "message": " si is declared to have type `ScheduledItem[Variable[typing.TState]]` but is used as type `ScheduledItem[object]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 96,
    "warning_line": "        si: ScheduledItem[typing.TState] = ScheduledItem(self, state, action, dt)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        dt = self.to_datetime(duetime)\n        si: ScheduledItem[typing.TState] = ScheduledItem(self, state, action, dt)\n\n",
        "source_code_len": 122,
        "target_code": "        dt = self.to_datetime(duetime)\n        si: ScheduledItem = ScheduledItem(self, state, action, dt)\n\n",
        "target_code_len": 107,
        "diff_format": "@@ -95,3 +96,3 @@\n         dt = self.to_datetime(duetime)\n-        si: ScheduledItem[typing.TState] = ScheduledItem(self, state, action, dt)\n+        si: ScheduledItem = ScheduledItem(self, state, action, dt)\n \n",
        "source_code_with_indent": "        <DED>dt = self.to_datetime(duetime)\n        si: ScheduledItem[typing.TState] = ScheduledItem(self, state, action, dt)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>dt = self.to_datetime(duetime)\n        si: ScheduledItem = ScheduledItem(self, state, action, dt)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "4ba82c313df482f7ed6b65c3dbec4598aa264b90",
    "filename": "rx/scheduler/historicalscheduler.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/scheduler/historicalscheduler.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/scheduler/historicalscheduler.py:48:8 Incompatible return type [7]: Expected `typing.Union[datetime, float]` but got `datetime.timedelta`.",
    "message": " Expected `typing.Union[datetime, float]` but got `datetime.timedelta`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 48,
    "warning_line": "        return absolute + HistoricalScheduler.to_timedelta(relative)"
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "4ba82c313df482f7ed6b65c3dbec4598aa264b90",
    "filename": "rx/scheduler/historicalscheduler.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/scheduler/historicalscheduler.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/scheduler/historicalscheduler.py:48:15 Unsupported operand [58]: `+` is not supported for operand types `typing.Union[datetime, float]` and `datetime.timedelta`.",
    "message": " `+` is not supported for operand types `typing.Union[datetime, float]` and `datetime.timedelta`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 48,
    "warning_line": "        return absolute + HistoricalScheduler.to_timedelta(relative)"
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "4ba82c313df482f7ed6b65c3dbec4598aa264b90",
    "filename": "rx/scheduler/mainloop/gtkscheduler.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/scheduler/mainloop/gtkscheduler.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/scheduler/mainloop/gtkscheduler.py:48:52 Incompatible parameter type [6]: Expected `typing.Callable[[typing.Scheduler, typing.Any], Optional[typing.Disposable]]` for 1st positional only parameter to call `rx.scheduler.scheduler.Scheduler.invoke_action` but got `typing.Union[typing.Callable[[typing.Any], typing.Any], typing.Callable[[typing.Scheduler, typing.Any], Optional[typing.Disposable]]]`.",
    "message": " Expected `typing.Callable[[typing.Scheduler, typing.Any], Optional[typing.Disposable]]` for 1st positional only parameter to call `rx.scheduler.scheduler.Scheduler.invoke_action` but got `typing.Union[typing.Callable[[typing.Any], typing.Any], typing.Callable[[typing.Scheduler, typing.Any], Optional[typing.Disposable]]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 48,
    "warning_line": "                sad.disposable = self.invoke_action(action, state=state)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import Any, Optional\n\n",
        "source_code_len": 34,
        "target_code": "from typing import cast, Any, Optional\n\n",
        "target_code_len": 40,
        "diff_format": "@@ -1,2 +1,2 @@\n-from typing import Any, Optional\n+from typing import cast, Any, Optional\n \n",
        "source_code_with_indent": "from typing import Any, Optional\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import cast, Any, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            if periodic:\n                state = action(state)\n            else:\n                sad.disposable = self.invoke_action(action, state=state)\n\n",
        "source_code_len": 155,
        "target_code": "            if periodic:\n                state = cast(typing.ScheduledPeriodicAction, action)(state)\n            else:\n                sad.disposable = self.invoke_action(cast(typing.ScheduledAction, action), state=state)\n\n",
        "target_code_len": 223,
        "diff_format": "@@ -45,5 +45,5 @@\n             if periodic:\n-                state = action(state)\n+                state = cast(typing.ScheduledPeriodicAction, action)(state)\n             else:\n-                sad.disposable = self.invoke_action(action, state=state)\n+                sad.disposable = self.invoke_action(cast(typing.ScheduledAction, action), state=state)\n \n",
        "source_code_with_indent": "            if periodic:\n                <IND>state = action(state)\n            <DED>else:\n                <IND>sad.disposable = self.invoke_action(action, state=state)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            if periodic:\n                <IND>state = cast(typing.ScheduledPeriodicAction, action)(state)\n            <DED>else:\n                <IND>sad.disposable = self.invoke_action(cast(typing.ScheduledAction, action), state=state)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "4ba82c313df482f7ed6b65c3dbec4598aa264b90",
    "filename": "rx/scheduler/mainloop/pygamescheduler.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/scheduler/mainloop/pygamescheduler.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/scheduler/mainloop/pygamescheduler.py:93:8 Incompatible variable type [9]: si is declared to have type `ScheduledItem[Variable[typing.TState]]` but is used as type `ScheduledItem[object]`.",
    "message": " si is declared to have type `ScheduledItem[Variable[typing.TState]]` but is used as type `ScheduledItem[object]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 93,
    "warning_line": "        si: ScheduledItem[typing.TState] = ScheduledItem(self, state, action, duetime)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        duetime = self.to_datetime(duetime)\n        si: ScheduledItem[typing.TState] = ScheduledItem(self, state, action, duetime)\n\n",
        "source_code_len": 132,
        "target_code": "        duetime = self.to_datetime(duetime)\n        si: ScheduledItem = ScheduledItem(self, state, action, duetime)\n\n",
        "target_code_len": 117,
        "diff_format": "@@ -92,3 +92,3 @@\n         duetime = self.to_datetime(duetime)\n-        si: ScheduledItem[typing.TState] = ScheduledItem(self, state, action, duetime)\n+        si: ScheduledItem = ScheduledItem(self, state, action, duetime)\n \n",
        "source_code_with_indent": "        duetime = self.to_datetime(duetime)\n        si: ScheduledItem[typing.TState] = ScheduledItem(self, state, action, duetime)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        duetime = self.to_datetime(duetime)\n        si: ScheduledItem = ScheduledItem(self, state, action, duetime)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "4ba82c313df482f7ed6b65c3dbec4598aa264b90",
    "filename": "rx/scheduler/mainloop/qtscheduler.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/scheduler/mainloop/qtscheduler.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/scheduler/mainloop/qtscheduler.py:96:8 Incompatible variable type [9]: duetime is declared to have type `typing.Union[datetime.datetime, float]` but is used as type `datetime.timedelta`.",
    "message": " duetime is declared to have type `typing.Union[datetime.datetime, float]` but is used as type `datetime.timedelta`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 96,
    "warning_line": "        duetime = self.to_datetime(duetime) - self.now",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import Any, Optional\n\n",
        "source_code_len": 35,
        "target_code": "\nfrom datetime import timedelta\nfrom typing import Any, Optional, Set\n\n",
        "target_code_len": 71,
        "diff_format": "@@ -2,3 +2,4 @@\n \n-from typing import Any, Optional\n+from datetime import timedelta\n+from typing import Any, Optional, Set\n \n",
        "source_code_with_indent": "\nfrom typing import Any, Optional\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom datetime import timedelta\nfrom typing import Any, Optional, Set\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        duetime = self.to_datetime(duetime) - self.now\n        return self.schedule_relative(duetime, action, state=state)\n\n",
        "source_code_len": 125,
        "target_code": "\n        delta: timedelta = self.to_datetime(duetime) - self.now\n        return self.schedule_relative(delta, action, state=state)\n\n",
        "target_code_len": 132,
        "diff_format": "@@ -95,4 +97,4 @@\n \n-        duetime = self.to_datetime(duetime) - self.now\n-        return self.schedule_relative(duetime, action, state=state)\n+        delta: timedelta = self.to_datetime(duetime) - self.now\n+        return self.schedule_relative(delta, action, state=state)\n \n",
        "source_code_with_indent": "\n        duetime = self.to_datetime(duetime) - self.now\n        return self.schedule_relative(duetime, action, state=state)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        delta: timedelta = self.to_datetime(duetime) - self.now\n        return self.schedule_relative(delta, action, state=state)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "4ba82c313df482f7ed6b65c3dbec4598aa264b90",
    "filename": "rx/scheduler/mainloop/qtscheduler.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/scheduler/mainloop/qtscheduler.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/scheduler/mainloop/qtscheduler.py:97:38 Incompatible parameter type [6]: Expected `typing.Union[datetime.timedelta, float]` for 1st positional only parameter to call `QtScheduler.schedule_relative` but got `typing.Union[datetime.datetime, float]`.",
    "message": " Expected `typing.Union[datetime.timedelta, float]` for 1st positional only parameter to call `QtScheduler.schedule_relative` but got `typing.Union[datetime.datetime, float]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 97,
    "warning_line": "        return self.schedule_relative(duetime, action, state=state)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import Any, Optional\n\n",
        "source_code_len": 35,
        "target_code": "\nfrom datetime import timedelta\nfrom typing import Any, Optional, Set\n\n",
        "target_code_len": 71,
        "diff_format": "@@ -2,3 +2,4 @@\n \n-from typing import Any, Optional\n+from datetime import timedelta\n+from typing import Any, Optional, Set\n \n",
        "source_code_with_indent": "\nfrom typing import Any, Optional\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom datetime import timedelta\nfrom typing import Any, Optional, Set\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        duetime = self.to_datetime(duetime) - self.now\n        return self.schedule_relative(duetime, action, state=state)\n\n",
        "source_code_len": 125,
        "target_code": "\n        delta: timedelta = self.to_datetime(duetime) - self.now\n        return self.schedule_relative(delta, action, state=state)\n\n",
        "target_code_len": 132,
        "diff_format": "@@ -95,4 +97,4 @@\n \n-        duetime = self.to_datetime(duetime) - self.now\n-        return self.schedule_relative(duetime, action, state=state)\n+        delta: timedelta = self.to_datetime(duetime) - self.now\n+        return self.schedule_relative(delta, action, state=state)\n \n",
        "source_code_with_indent": "\n        duetime = self.to_datetime(duetime) - self.now\n        return self.schedule_relative(duetime, action, state=state)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        delta: timedelta = self.to_datetime(duetime) - self.now\n        return self.schedule_relative(delta, action, state=state)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "4ba82c313df482f7ed6b65c3dbec4598aa264b90",
    "filename": "rx/scheduler/threadpoolscheduler.py",
    "min_patch_found": false,
    "full_warning_msg": "rx/scheduler/threadpoolscheduler.py:36:25 Incompatible parameter type [6]: Expected `Optional[typing.Callable[[typing.Callable[..., None], Optional[typing.Tuple[typing.Any, ...]]], typing.Union[rx.core.abc.startable.Startable, threading.Thread]]]` for 1st positional only parameter to call `NewThreadScheduler.__init__` but got `typing.Callable[[Named(target, typing.Callable[..., None])], typing.Any]`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "4ba82c313df482f7ed6b65c3dbec4598aa264b90",
    "filename": "rx/scheduler/virtualtimescheduler.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/scheduler/virtualtimescheduler.py",
    "file_hunks_size": 13,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/scheduler/virtualtimescheduler.py:88:8 Incompatible variable type [9]: duetime is declared to have type `typing.Union[datetime.timedelta, float]` but is used as type `typing.Union[datetime, float]`.",
    "message": " duetime is declared to have type `typing.Union[datetime.timedelta, float]` but is used as type `typing.Union[datetime, float]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 88,
    "warning_line": "        duetime = self.add(self._clock, self.to_seconds(duetime))",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        duetime = self.add(self._clock, self.to_seconds(duetime))\n        return self.schedule_absolute(duetime, action, state=state)\n\n",
        "source_code_len": 136,
        "target_code": "\n        time: typing.AbsoluteTime = self.add(self._clock, self.to_seconds(duetime))\n        return self.schedule_absolute(time, action, state=state)\n\n",
        "target_code_len": 151,
        "diff_format": "@@ -87,4 +87,4 @@\n \n-        duetime = self.add(self._clock, self.to_seconds(duetime))\n-        return self.schedule_absolute(duetime, action, state=state)\n+        time: typing.AbsoluteTime = self.add(self._clock, self.to_seconds(duetime))\n+        return self.schedule_absolute(time, action, state=state)\n \n",
        "source_code_with_indent": "\n        duetime = self.add(self._clock, self.to_seconds(duetime))\n        return self.schedule_absolute(duetime, action, state=state)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        time: typing.AbsoluteTime = self.add(self._clock, self.to_seconds(duetime))\n        return self.schedule_absolute(time, action, state=state)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "4ba82c313df482f7ed6b65c3dbec4598aa264b90",
    "filename": "rx/scheduler/virtualtimescheduler.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/scheduler/virtualtimescheduler.py",
    "file_hunks_size": 13,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/scheduler/virtualtimescheduler.py:89:38 Incompatible parameter type [6]: Expected `typing.Union[datetime, float]` for 1st positional only parameter to call `VirtualTimeScheduler.schedule_absolute` but got `typing.Union[datetime.timedelta, float]`.",
    "message": " Expected `typing.Union[datetime, float]` for 1st positional only parameter to call `VirtualTimeScheduler.schedule_absolute` but got `typing.Union[datetime.timedelta, float]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 89,
    "warning_line": "        return self.schedule_absolute(duetime, action, state=state)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        duetime = self.add(self._clock, self.to_seconds(duetime))\n        return self.schedule_absolute(duetime, action, state=state)\n\n",
        "source_code_len": 136,
        "target_code": "\n        time: typing.AbsoluteTime = self.add(self._clock, self.to_seconds(duetime))\n        return self.schedule_absolute(time, action, state=state)\n\n",
        "target_code_len": 151,
        "diff_format": "@@ -87,4 +87,4 @@\n \n-        duetime = self.add(self._clock, self.to_seconds(duetime))\n-        return self.schedule_absolute(duetime, action, state=state)\n+        time: typing.AbsoluteTime = self.add(self._clock, self.to_seconds(duetime))\n+        return self.schedule_absolute(time, action, state=state)\n \n",
        "source_code_with_indent": "\n        duetime = self.add(self._clock, self.to_seconds(duetime))\n        return self.schedule_absolute(duetime, action, state=state)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        time: typing.AbsoluteTime = self.add(self._clock, self.to_seconds(duetime))\n        return self.schedule_absolute(time, action, state=state)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "4ba82c313df482f7ed6b65c3dbec4598aa264b90",
    "filename": "rx/scheduler/virtualtimescheduler.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/scheduler/virtualtimescheduler.py",
    "file_hunks_size": 13,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/scheduler/virtualtimescheduler.py:108:8 Incompatible variable type [9]: si is declared to have type `ScheduledItem[Variable[typing.TState]]` but is used as type `ScheduledItem[object]`.",
    "message": " si is declared to have type `ScheduledItem[Variable[typing.TState]]` but is used as type `ScheduledItem[object]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 108,
    "warning_line": "        si: ScheduledItem[typing.TState] = ScheduledItem(self, state, action, duetime)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        si: ScheduledItem[typing.TState] = ScheduledItem(self, state, action, duetime)\n        with self._lock:\n",
        "source_code_len": 113,
        "target_code": "\n        dt = self.to_datetime(duetime)\n        si: ScheduledItem = ScheduledItem(self, state, action, dt)\n        with self._lock:\n",
        "target_code_len": 132,
        "diff_format": "@@ -107,3 +107,4 @@\n \n-        si: ScheduledItem[typing.TState] = ScheduledItem(self, state, action, duetime)\n+        dt = self.to_datetime(duetime)\n+        si: ScheduledItem = ScheduledItem(self, state, action, dt)\n         with self._lock:\n",
        "source_code_with_indent": "\n        si: ScheduledItem[typing.TState] = ScheduledItem(self, state, action, duetime)\n        with self._lock:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        dt = self.to_datetime(duetime)\n        si: ScheduledItem = ScheduledItem(self, state, action, dt)\n        with self._lock:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "4ba82c313df482f7ed6b65c3dbec4598aa264b90",
    "filename": "rx/scheduler/virtualtimescheduler.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/scheduler/virtualtimescheduler.py",
    "file_hunks_size": 13,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/scheduler/virtualtimescheduler.py:108:78 Incompatible parameter type [6]: Expected `datetime` for 4th positional only parameter to call `ScheduledItem.__init__` but got `typing.Union[datetime, float]`.",
    "message": " Expected `datetime` for 4th positional only parameter to call `ScheduledItem.__init__` but got `typing.Union[datetime, float]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 108,
    "warning_line": "        si: ScheduledItem[typing.TState] = ScheduledItem(self, state, action, duetime)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        si: ScheduledItem[typing.TState] = ScheduledItem(self, state, action, duetime)\n        with self._lock:\n",
        "source_code_len": 113,
        "target_code": "\n        dt = self.to_datetime(duetime)\n        si: ScheduledItem = ScheduledItem(self, state, action, dt)\n        with self._lock:\n",
        "target_code_len": 132,
        "diff_format": "@@ -107,3 +107,4 @@\n \n-        si: ScheduledItem[typing.TState] = ScheduledItem(self, state, action, duetime)\n+        dt = self.to_datetime(duetime)\n+        si: ScheduledItem = ScheduledItem(self, state, action, dt)\n         with self._lock:\n",
        "source_code_with_indent": "\n        si: ScheduledItem[typing.TState] = ScheduledItem(self, state, action, duetime)\n        with self._lock:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        dt = self.to_datetime(duetime)\n        si: ScheduledItem = ScheduledItem(self, state, action, dt)\n        with self._lock:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "4ba82c313df482f7ed6b65c3dbec4598aa264b90",
    "filename": "rx/scheduler/virtualtimescheduler.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/scheduler/virtualtimescheduler.py",
    "file_hunks_size": 13,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/scheduler/virtualtimescheduler.py:199:24 Incompatible parameter type [6]: Expected `float` for 1st positional only parameter to call `VirtualTimeScheduler.advance_to` but got `typing.Union[datetime, float]`.",
    "message": " Expected `float` for 1st positional only parameter to call `VirtualTimeScheduler.advance_to` but got `typing.Union[datetime, float]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 199,
    "warning_line": "        self.advance_to(self.add(self._clock, time))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def advance_to(self, time: float) -> None:\n        \"\"\"Advances the schedulers clock to the specified absolute time,\n",
        "source_code_len": 121,
        "target_code": "\n    def advance_to(self, time: typing.AbsoluteTime) -> None:\n        \"\"\"Advances the schedulers clock to the specified absolute time,\n",
        "target_code_len": 135,
        "diff_format": "@@ -149,3 +153,3 @@\n \n-    def advance_to(self, time: float) -> None:\n+    def advance_to(self, time: typing.AbsoluteTime) -> None:\n         \"\"\"Advances the schedulers clock to the specified absolute time,\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED><DED>def advance_to(self, time: float) -> None:\n        <IND>",
        "target_code_with_indent": "\n    <DED><DED>def advance_to(self, time: typing.AbsoluteTime) -> None:\n        <IND>"
      }
    ]
  }
]