[
  {
    "project": "ilcardella/TradingBot",
    "commit": "d835f8b3955783b4b4ad5d4fbea44459b7fdd7fd",
    "filename": "tradingbot/Components/Broker/AVInterface.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ilcardella-TradingBot/tradingbot/Components/Broker/AVInterface.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tradingbot/Components/Broker/AVInterface.py:102:12 Incompatible parameter type [6]: Expected `typing.List[str]` for 2nd positional only parameter to call `MarketHistory.__init__` but got `range`.",
    "message": " Expected `typing.List[str]` for 2nd positional only parameter to call `MarketHistory.__init__` but got `range`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 102,
    "warning_line": "            range(len(data)),",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            market,\n            range(len(data)),\n            data[\"2. high\"].values,\n",
        "source_code_len": 86,
        "target_code": "            market,\n            data.index,\n            data[\"2. high\"].values,\n",
        "target_code_len": 80,
        "diff_format": "@@ -101,3 +98,3 @@\n             market,\n-            range(len(data)),\n+            data.index,\n             data[\"2. high\"].values,\n",
        "source_code_with_indent": "            market,\n            range(len(data)),\n            data[\"2. high\"].values,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            market,\n            data.index,\n            data[\"2. high\"].values,\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def intraday(self, marketId: str, interval: AVInterval) -> AVReturnType:\n        \"\"\"\n",
        "source_code_len": 90,
        "target_code": "\n    def intraday(self, marketId: str, interval: AVInterval) -> pandas.DataFrame:\n        \"\"\"\n",
        "target_code_len": 94,
        "diff_format": "@@ -129,3 +126,3 @@\n \n-    def intraday(self, marketId: str, interval: AVInterval) -> AVReturnType:\n+    def intraday(self, marketId: str, interval: AVInterval) -> pandas.DataFrame:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def intraday(self, marketId: str, interval: AVInterval) -> AVReturnType:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def intraday(self, marketId: str, interval: AVInterval) -> pandas.DataFrame:\n        <IND>"
      }
    ]
  },
  {
    "project": "ilcardella/TradingBot",
    "commit": "d835f8b3955783b4b4ad5d4fbea44459b7fdd7fd",
    "filename": "tradingbot/Components/Broker/AVInterface.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ilcardella-TradingBot/tradingbot/Components/Broker/AVInterface.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tradingbot/Components/Broker/AVInterface.py:128:8 Incompatible return type [7]: Expected `Dict[str, Union[float, int, str]]` but got `None`.",
    "message": " Expected `Dict[str, Union[float, int, str]]` but got `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 128,
    "warning_line": "        return None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def daily(self, marketId: str) -> AVReturnType:\n        \"\"\"\n",
        "source_code_len": 65,
        "target_code": "\n    def daily(self, marketId: str) -> pandas.DataFrame:\n        \"\"\"\n",
        "target_code_len": 69,
        "diff_format": "@@ -109,3 +106,3 @@\n \n-    def daily(self, marketId: str) -> AVReturnType:\n+    def daily(self, marketId: str) -> pandas.DataFrame:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def daily(self, marketId: str) -> AVReturnType:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def daily(self, marketId: str) -> pandas.DataFrame:\n        <IND>"
      }
    ]
  },
  {
    "project": "ilcardella/TradingBot",
    "commit": "d835f8b3955783b4b4ad5d4fbea44459b7fdd7fd",
    "filename": "tradingbot/Components/Broker/AVInterface.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ilcardella-TradingBot/tradingbot/Components/Broker/AVInterface.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tradingbot/Components/Broker/AVInterface.py:150:8 Incompatible return type [7]: Expected `Dict[str, Union[float, int, str]]` but got `None`.",
    "message": " Expected `Dict[str, Union[float, int, str]]` but got `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 150,
    "warning_line": "        return None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def intraday(self, marketId: str, interval: AVInterval) -> AVReturnType:\n        \"\"\"\n",
        "source_code_len": 90,
        "target_code": "\n    def intraday(self, marketId: str, interval: AVInterval) -> pandas.DataFrame:\n        \"\"\"\n",
        "target_code_len": 94,
        "diff_format": "@@ -129,3 +126,3 @@\n \n-    def intraday(self, marketId: str, interval: AVInterval) -> AVReturnType:\n+    def intraday(self, marketId: str, interval: AVInterval) -> pandas.DataFrame:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def intraday(self, marketId: str, interval: AVInterval) -> AVReturnType:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def intraday(self, marketId: str, interval: AVInterval) -> pandas.DataFrame:\n        <IND>"
      }
    ]
  },
  {
    "project": "ilcardella/TradingBot",
    "commit": "d835f8b3955783b4b4ad5d4fbea44459b7fdd7fd",
    "filename": "tradingbot/Components/Broker/AVInterface.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ilcardella-TradingBot/tradingbot/Components/Broker/AVInterface.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tradingbot/Components/Broker/AVInterface.py:169:8 Incompatible return type [7]: Expected `Dict[str, Union[float, int, str]]` but got `None`.",
    "message": " Expected `Dict[str, Union[float, int, str]]` but got `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 169,
    "warning_line": "        return None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def weekly(self, marketId: str) -> AVReturnType:\n        \"\"\"\n",
        "source_code_len": 66,
        "target_code": "\n    def weekly(self, marketId: str) -> pandas.DataFrame:\n        \"\"\"\n",
        "target_code_len": 70,
        "diff_format": "@@ -151,3 +148,3 @@\n \n-    def weekly(self, marketId: str) -> AVReturnType:\n+    def weekly(self, marketId: str) -> pandas.DataFrame:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def weekly(self, marketId: str) -> AVReturnType:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def weekly(self, marketId: str) -> pandas.DataFrame:\n        <IND>"
      }
    ]
  },
  {
    "project": "ilcardella/TradingBot",
    "commit": "d835f8b3955783b4b4ad5d4fbea44459b7fdd7fd",
    "filename": "tradingbot/Components/Broker/AVInterface.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ilcardella-TradingBot/tradingbot/Components/Broker/AVInterface.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tradingbot/Components/Broker/AVInterface.py:187:8 Incompatible return type [7]: Expected `Dict[str, Union[float, int, str]]` but got `None`.",
    "message": " Expected `Dict[str, Union[float, int, str]]` but got `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 187,
    "warning_line": "        return None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def quote_endpoint(self, market_id: str) -> AVReturnType:\n        \"\"\"\n",
        "source_code_len": 75,
        "target_code": "\n    def quote_endpoint(self, market_id: str) -> pandas.DataFrame:\n        \"\"\"\n",
        "target_code_len": 79,
        "diff_format": "@@ -170,3 +167,3 @@\n \n-    def quote_endpoint(self, market_id: str) -> AVReturnType:\n+    def quote_endpoint(self, market_id: str) -> pandas.DataFrame:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def quote_endpoint(self, market_id: str) -> AVReturnType:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def quote_endpoint(self, market_id: str) -> pandas.DataFrame:\n        <IND>"
      }
    ]
  },
  {
    "project": "ilcardella/TradingBot",
    "commit": "d835f8b3955783b4b4ad5d4fbea44459b7fdd7fd",
    "filename": "tradingbot/Components/Broker/Broker.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ilcardella-TradingBot/tradingbot/Components/Broker/Broker.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tradingbot/Components/Broker/Broker.py:25:8 Incompatible attribute type [8]: Attribute `account_ifc` declared in class `Broker` has type `AccountInterface` but is used as type `Union[tradingbot.Components.Broker.AVInterface.AVInterface, tradingbot.Components.Broker.IGInterface.IGInterface, tradingbot.Components.Broker.YFinanceInterface.YFinanceInterface]`.",
    "message": " Attribute `account_ifc` declared in class `Broker` has type `AccountInterface` but is used as type `Union[tradingbot.Components.Broker.AVInterface.AVInterface, tradingbot.Components.Broker.IGInterface.IGInterface, tradingbot.Components.Broker.YFinanceInterface.YFinanceInterface]`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 25,
    "warning_line": "        self.account_ifc = self.factory.make_account_interface_from_config()"
  },
  {
    "project": "ilcardella/TradingBot",
    "commit": "d835f8b3955783b4b4ad5d4fbea44459b7fdd7fd",
    "filename": "tradingbot/Components/Broker/IGInterface.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ilcardella-TradingBot/tradingbot/Components/Broker/IGInterface.py",
    "file_hunks_size": 16,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tradingbot/Components/Broker/IGInterface.py:127:12 Incompatible return type [7]: Expected `typing.Tuple[Optional[float], Optional[float]]` but got implicit return value of `None`.",
    "message": " Expected `typing.Tuple[Optional[float], Optional[float]]` but got implicit return value of `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 127,
    "warning_line": "            return None, None",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                    return balance, deposit\n        else:\n            return None, None\n\n",
        "source_code_len": 89,
        "target_code": "                    return balance, deposit\n        return None, None\n\n",
        "target_code_len": 71,
        "diff_format": "@@ -125,4 +128,3 @@\n                     return balance, deposit\n-        else:\n-            return None, None\n+        return None, None\n \n",
        "source_code_with_indent": "                    return balance, deposit\n        <DED><DED><DED>else:\n            <IND>return None, None\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                    return balance, deposit\n        <DED><DED><DED>return None, None\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ilcardella/TradingBot",
    "commit": "d835f8b3955783b4b4ad5d4fbea44459b7fdd7fd",
    "filename": "tradingbot/Components/Broker/IGInterface.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ilcardella-TradingBot/tradingbot/Components/Broker/IGInterface.py",
    "file_hunks_size": 16,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tradingbot/Components/Broker/IGInterface.py:166:38 Incompatible parameter type [6]: Expected `typing_extensions.SupportsIndex` for 1st positional only parameter to call `list.__getitem__` but got `str`.",
    "message": " Expected `typing_extensions.SupportsIndex` for 1st positional only parameter to call `list.__getitem__` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 166,
    "warning_line": "            for item in position_json[\"positions\"]:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"\"\"\n        positionMap = {}\n        position_json = self.get_open_positions()\n        if position_json is not None:\n            for item in position_json[\"positions\"]:\n                direction = item[\"position\"][\"direction\"]\n                dealSize = item[\"position\"][\"dealSize\"]\n                ccypair = item[\"market\"][\"epic\"]\n                key = ccypair + \"-\" + direction\n                if key in positionMap:\n                    positionMap[key] = dealSize + positionMap[key]\n                else:\n                    positionMap[key] = dealSize\n            return positionMap\n        else:\n            return None\n\n",
        "source_code_len": 634,
        "target_code": "        \"\"\"\n        positionMap: Dict[str, int] = {}\n        for item in self.get_open_positions():\n            key = item.epic + \"-\" + item.direction.name\n            if key in positionMap:\n                positionMap[key] = item.size + positionMap[key]\n            else:\n                positionMap[key] = item.size\n        return positionMap\n\n",
        "target_code_len": 346,
        "diff_format": "@@ -162,17 +164,10 @@\n         \"\"\"\n-        positionMap = {}\n-        position_json = self.get_open_positions()\n-        if position_json is not None:\n-            for item in position_json[\"positions\"]:\n-                direction = item[\"position\"][\"direction\"]\n-                dealSize = item[\"position\"][\"dealSize\"]\n-                ccypair = item[\"market\"][\"epic\"]\n-                key = ccypair + \"-\" + direction\n-                if key in positionMap:\n-                    positionMap[key] = dealSize + positionMap[key]\n-                else:\n-                    positionMap[key] = dealSize\n-            return positionMap\n-        else:\n-            return None\n+        positionMap: Dict[str, int] = {}\n+        for item in self.get_open_positions():\n+            key = item.epic + \"-\" + item.direction.name\n+            if key in positionMap:\n+                positionMap[key] = item.size + positionMap[key]\n+            else:\n+                positionMap[key] = item.size\n+        return positionMap\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n        positionMap = {}\n        position_json = self.get_open_positions()\n        if position_json is not None:\n            <IND>for item in position_json[\"positions\"]:\n                <IND>direction = item[\"position\"][\"direction\"]\n                dealSize = item[\"position\"][\"dealSize\"]\n                ccypair = item[\"market\"][\"epic\"]\n                key = ccypair + \"-\" + direction\n                if key in positionMap:\n                    <IND>positionMap[key] = dealSize + positionMap[key]\n                <DED>else:\n                    <IND>positionMap[key] = dealSize\n            <DED><DED>return positionMap\n        <DED>else:\n            <IND>return None\n\n",
        "target_code_with_indent": "\n        positionMap: Dict[str, int] = {}\n        for item in self.get_open_positions():\n            <IND>key = item.epic + \"-\" + item.direction.name\n            if key in positionMap:\n                <IND>positionMap[key] = item.size + positionMap[key]\n            <DED>else:\n                <IND>positionMap[key] = item.size\n        <DED><DED>return positionMap\n\n"
      }
    ]
  },
  {
    "project": "ilcardella/TradingBot",
    "commit": "d835f8b3955783b4b4ad5d4fbea44459b7fdd7fd",
    "filename": "tradingbot/Components/Broker/IGInterface.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ilcardella-TradingBot/tradingbot/Components/Broker/IGInterface.py",
    "file_hunks_size": 16,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tradingbot/Components/Broker/IGInterface.py:177:12 Incompatible return type [7]: Expected `Dict[str, int]` but got `None`.",
    "message": " Expected `Dict[str, int]` but got `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 177,
    "warning_line": "            return None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"\"\"\n        positionMap = {}\n        position_json = self.get_open_positions()\n        if position_json is not None:\n            for item in position_json[\"positions\"]:\n                direction = item[\"position\"][\"direction\"]\n                dealSize = item[\"position\"][\"dealSize\"]\n                ccypair = item[\"market\"][\"epic\"]\n                key = ccypair + \"-\" + direction\n                if key in positionMap:\n                    positionMap[key] = dealSize + positionMap[key]\n                else:\n                    positionMap[key] = dealSize\n            return positionMap\n        else:\n            return None\n\n",
        "source_code_len": 634,
        "target_code": "        \"\"\"\n        positionMap: Dict[str, int] = {}\n        for item in self.get_open_positions():\n            key = item.epic + \"-\" + item.direction.name\n            if key in positionMap:\n                positionMap[key] = item.size + positionMap[key]\n            else:\n                positionMap[key] = item.size\n        return positionMap\n\n",
        "target_code_len": 346,
        "diff_format": "@@ -162,17 +164,10 @@\n         \"\"\"\n-        positionMap = {}\n-        position_json = self.get_open_positions()\n-        if position_json is not None:\n-            for item in position_json[\"positions\"]:\n-                direction = item[\"position\"][\"direction\"]\n-                dealSize = item[\"position\"][\"dealSize\"]\n-                ccypair = item[\"market\"][\"epic\"]\n-                key = ccypair + \"-\" + direction\n-                if key in positionMap:\n-                    positionMap[key] = dealSize + positionMap[key]\n-                else:\n-                    positionMap[key] = dealSize\n-            return positionMap\n-        else:\n-            return None\n+        positionMap: Dict[str, int] = {}\n+        for item in self.get_open_positions():\n+            key = item.epic + \"-\" + item.direction.name\n+            if key in positionMap:\n+                positionMap[key] = item.size + positionMap[key]\n+            else:\n+                positionMap[key] = item.size\n+        return positionMap\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n        positionMap = {}\n        position_json = self.get_open_positions()\n        if position_json is not None:\n            <IND>for item in position_json[\"positions\"]:\n                <IND>direction = item[\"position\"][\"direction\"]\n                dealSize = item[\"position\"][\"dealSize\"]\n                ccypair = item[\"market\"][\"epic\"]\n                key = ccypair + \"-\" + direction\n                if key in positionMap:\n                    <IND>positionMap[key] = dealSize + positionMap[key]\n                <DED>else:\n                    <IND>positionMap[key] = dealSize\n            <DED><DED>return positionMap\n        <DED>else:\n            <IND>return None\n\n",
        "target_code_with_indent": "\n        positionMap: Dict[str, int] = {}\n        for item in self.get_open_positions():\n            <IND>key = item.epic + \"-\" + item.direction.name\n            if key in positionMap:\n                <IND>positionMap[key] = item.size + positionMap[key]\n            <DED>else:\n                <IND>positionMap[key] = item.size\n        <DED><DED>return positionMap\n\n"
      }
    ]
  },
  {
    "project": "ilcardella/TradingBot",
    "commit": "d835f8b3955783b4b4ad5d4fbea44459b7fdd7fd",
    "filename": "tradingbot/Components/Broker/IGInterface.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ilcardella-TradingBot/tradingbot/Components/Broker/IGInterface.py",
    "file_hunks_size": 16,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tradingbot/Components/Broker/IGInterface.py:191:12 Incompatible return type [7]: Expected `Market` but got `None`.",
    "message": " Expected `Market` but got `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 191,
    "warning_line": "            return None"
  },
  {
    "project": "ilcardella/TradingBot",
    "commit": "d835f8b3955783b4b4ad5d4fbea44459b7fdd7fd",
    "filename": "tradingbot/Components/Broker/IGInterface.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ilcardella-TradingBot/tradingbot/Components/Broker/IGInterface.py",
    "file_hunks_size": 16,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tradingbot/Components/Broker/IGInterface.py:231:11 Unsupported operand [58]: `in` is not supported for right operand type `Optional[Dict[str, Union[float, int, str]]]`.",
    "message": " `in` is not supported for right operand type `Optional[Dict[str, Union[float, int, str]]]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 231,
    "warning_line": "        if \"allowance\" in data:"
  },
  {
    "project": "ilcardella/TradingBot",
    "commit": "d835f8b3955783b4b4ad5d4fbea44459b7fdd7fd",
    "filename": "tradingbot/Components/Broker/IGInterface.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ilcardella-TradingBot/tradingbot/Components/Broker/IGInterface.py",
    "file_hunks_size": 16,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tradingbot/Components/Broker/IGInterface.py:477:12 Incompatible parameter type [6]: Expected `List[str]` for 2nd positional only parameter to call `MarketMACD.__init__` but got `range`.",
    "message": " Expected `List[str]` for 2nd positional only parameter to call `MarketMACD.__init__` but got `range`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 477,
    "warning_line": "            range(len(data)),",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            market,\n            range(len(data)),\n            data[\"MACD\"].values,\n",
        "source_code_len": 83,
        "target_code": "            market,\n            data.index,\n            data[\"MACD\"].values,\n",
        "target_code_len": 77,
        "diff_format": "@@ -476,3 +464,3 @@\n             market,\n-            range(len(data)),\n+            data.index,\n             data[\"MACD\"].values,\n",
        "source_code_with_indent": "            market,\n            range(len(data)),\n            data[\"MACD\"].values,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            market,\n            data.index,\n            data[\"MACD\"].values,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ilcardella/TradingBot",
    "commit": "d835f8b3955783b4b4ad5d4fbea44459b7fdd7fd",
    "filename": "tradingbot/Components/Broker/IGInterface.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ilcardella-TradingBot/tradingbot/Components/Broker/IGInterface.py",
    "file_hunks_size": 16,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tradingbot/Components/Broker/IGInterface.py:484:41 Incompatible parameter type [6]: Expected `Interval` for 2nd positional only parameter to call `IGInterface.get_prices` but got `str`.",
    "message": " Expected `Interval` for 2nd positional only parameter to call `IGInterface.get_prices` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 484,
    "warning_line": "        prices = self.get_prices(market, \"DAY\", 26)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def _macd_dataframe(self, market: Market, interval: Interval) -> pandas.DataFrame:\n        prices = self.get_prices(market, \"DAY\", 26)\n        if prices is None:\n",
        "source_code_len": 166,
        "target_code": "    def _macd_dataframe(self, market: Market, interval: Interval) -> pandas.DataFrame:\n        prices = self.get_prices(market, Interval.DAY, 26)\n        if prices is None:\n",
        "target_code_len": 173,
        "diff_format": "@@ -483,3 +471,3 @@\n     def _macd_dataframe(self, market: Market, interval: Interval) -> pandas.DataFrame:\n-        prices = self.get_prices(market, \"DAY\", 26)\n+        prices = self.get_prices(market, Interval.DAY, 26)\n         if prices is None:\n",
        "source_code_with_indent": "    <DED>def _macd_dataframe(self, market: Market, interval: Interval) -> pandas.DataFrame:\n        <IND>prices = self.get_prices(market, \"DAY\", 26)\n        if prices is None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def _macd_dataframe(self, market: Market, interval: Interval) -> pandas.DataFrame:\n        <IND>prices = self.get_prices(market, Interval.DAY, 26)\n        if prices is None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ilcardella/TradingBot",
    "commit": "d835f8b3955783b4b4ad5d4fbea44459b7fdd7fd",
    "filename": "tradingbot/Components/Broker/YFinanceInterface.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ilcardella-TradingBot/tradingbot/Components/Broker/YFinanceInterface.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tradingbot/Components/Broker/YFinanceInterface.py:67:12 Incompatible parameter type [6]: Expected `typing.List[str]` for 2nd positional only parameter to call `MarketMACD.__init__` but got `range`.",
    "message": " Expected `typing.List[str]` for 2nd positional only parameter to call `MarketMACD.__init__` but got `range`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 67,
    "warning_line": "            range(len(data)),",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            market,\n            range(len(data)),\n            data[\"MACD\"].values,\n",
        "source_code_len": 83,
        "target_code": "            market,\n            data.index,\n            data[\"MACD\"].values,\n",
        "target_code_len": 77,
        "diff_format": "@@ -66,3 +66,3 @@\n             market,\n-            range(len(data)),\n+            data.index,\n             data[\"MACD\"].values,\n",
        "source_code_with_indent": "            market,\n            range(len(data)),\n            data[\"MACD\"].values,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            market,\n            data.index,\n            data[\"MACD\"].values,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ilcardella/TradingBot",
    "commit": "d835f8b3955783b4b4ad5d4fbea44459b7fdd7fd",
    "filename": "tradingbot/Components/Broker/YFinanceInterface.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ilcardella-TradingBot/tradingbot/Components/Broker/YFinanceInterface.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tradingbot/Components/Broker/YFinanceInterface.py:105:12 Incompatible return type [7]: Expected `YFInterval` but got implicit return value of `None`.",
    "message": " Expected `YFInterval` but got implicit return value of `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 105,
    "warning_line": "            return YFInterval.MONTH_1",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            return YFInterval.MONTH_1\n",
        "source_code_len": 38,
        "target_code": "            return YFInterval.MONTH_1\n        raise ValueError(\"Unsupported interval {}\".format(interval.name))\n",
        "target_code_len": 112,
        "diff_format": "@@ -105,1 +105,2 @@\n             return YFInterval.MONTH_1\n+        raise ValueError(\"Unsupported interval {}\".format(interval.name))\n",
        "source_code_with_indent": "            <IND>return YFInterval.MONTH_1\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <IND>return YFInterval.MONTH_1\n        <DED>raise ValueError(\"Unsupported interval {}\".format(interval.name))\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ilcardella/TradingBot",
    "commit": "d835f8b3955783b4b4ad5d4fbea44459b7fdd7fd",
    "filename": "tradingbot/Components/Configuration.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ilcardella-TradingBot/tradingbot/Components/Configuration.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tradingbot/Components/Configuration.py:38:35 Incompatible parameter type [6]: Expected `List[str]` for 1st positional only parameter to call `Configuration._find_property` but got `str`.",
    "message": " Expected `List[str]` for 1st positional only parameter to call `Configuration._find_property` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 38,
    "warning_line": "        return self._find_property(CONFIGURATION_ROOT)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def get_raw_config(self) -> Dict[str, Property]:\n        return self._find_property(CONFIGURATION_ROOT)\n\n",
        "source_code_len": 109,
        "target_code": "    def get_raw_config(self) -> Dict[str, Property]:\n        return self._find_property([CONFIGURATION_ROOT])\n\n",
        "target_code_len": 111,
        "diff_format": "@@ -37,3 +37,3 @@\n     def get_raw_config(self) -> Dict[str, Property]:\n-        return self._find_property(CONFIGURATION_ROOT)\n+        return self._find_property([CONFIGURATION_ROOT])\n \n",
        "source_code_with_indent": "    <DED>def get_raw_config(self) -> Dict[str, Property]:\n        <IND>return self._find_property(CONFIGURATION_ROOT)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def get_raw_config(self) -> Dict[str, Property]:\n        <IND>return self._find_property([CONFIGURATION_ROOT])\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ilcardella/TradingBot",
    "commit": "d835f8b3955783b4b4ad5d4fbea44459b7fdd7fd",
    "filename": "tradingbot/Components/TimeProvider.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ilcardella-TradingBot/tradingbot/Components/TimeProvider.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tradingbot/Components/TimeProvider.py:68:8 Incompatible return type [7]: Expected `int` but got `float`.",
    "message": " Expected `int` but got `float`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 68,
    "warning_line": "        return (nextMarketOpening - from_time).total_seconds()",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def get_seconds_to_market_opening(self, from_time: datetime) -> int:\n        \"\"\"Return the amount of seconds from now to the next market opening,\n",
        "source_code_len": 151,
        "target_code": "\n    def get_seconds_to_market_opening(self, from_time: datetime) -> float:\n        \"\"\"Return the amount of seconds from now to the next market opening,\n",
        "target_code_len": 153,
        "diff_format": "@@ -39,3 +39,3 @@\n \n-    def get_seconds_to_market_opening(self, from_time: datetime) -> int:\n+    def get_seconds_to_market_opening(self, from_time: datetime) -> float:\n         \"\"\"Return the amount of seconds from now to the next market opening,\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def get_seconds_to_market_opening(self, from_time: datetime) -> int:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def get_seconds_to_market_opening(self, from_time: datetime) -> float:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def wait_for(self, time_amount_type: TimeAmount, amount: int = -1) -> None:\n        \"\"\"Wait for the specified amount of time.\n",
        "source_code_len": 131,
        "target_code": "\n    def wait_for(self, time_amount_type: TimeAmount, amount: float = -1.0) -> None:\n        \"\"\"Wait for the specified amount of time.\n",
        "target_code_len": 135,
        "diff_format": "@@ -69,3 +69,3 @@\n \n-    def wait_for(self, time_amount_type: TimeAmount, amount: int = -1) -> None:\n+    def wait_for(self, time_amount_type: TimeAmount, amount: float = -1.0) -> None:\n         \"\"\"Wait for the specified amount of time.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def wait_for(self, time_amount_type: TimeAmount, amount: int = -1) -> None:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def wait_for(self, time_amount_type: TimeAmount, amount: float = -1.0) -> None:\n        <IND>"
      }
    ]
  },
  {
    "project": "ilcardella/TradingBot",
    "commit": "d835f8b3955783b4b4ad5d4fbea44459b7fdd7fd",
    "filename": "tradingbot/Strategies/SimpleMACD.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ilcardella-TradingBot/tradingbot/Strategies/SimpleMACD.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tradingbot/Strategies/SimpleMACD.py:47:58 Incompatible parameter type [6]: Expected `int` for 3rd positional only parameter to call `Broker.get_macd` but got `None`.",
    "message": " Expected `int` for 3rd positional only parameter to call `Broker.get_macd` but got `None`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 47,
    "warning_line": "        return self.broker.get_macd(market, Interval.DAY, None)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"\"\"\n        return self.broker.get_macd(market, Interval.DAY, None)\n\n",
        "source_code_len": 77,
        "target_code": "        \"\"\"\n        return self.broker.get_macd(market, Interval.DAY, 30)\n\n",
        "target_code_len": 75,
        "diff_format": "@@ -46,3 +46,3 @@\n         \"\"\"\n-        return self.broker.get_macd(market, Interval.DAY, None)\n+        return self.broker.get_macd(market, Interval.DAY, 30)\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n        return self.broker.get_macd(market, Interval.DAY, None)\n\n",
        "target_code_with_indent": "\n        return self.broker.get_macd(market, Interval.DAY, 30)\n\n"
      }
    ]
  },
  {
    "project": "ilcardella/TradingBot",
    "commit": "d835f8b3955783b4b4ad5d4fbea44459b7fdd7fd",
    "filename": "tradingbot/Strategies/SimpleMACD.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ilcardella-TradingBot/tradingbot/Strategies/SimpleMACD.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tradingbot/Strategies/SimpleMACD.py:102:8 Incompatible return type [7]: Expected `Tuple[float, float]` but got `Tuple[typing.Optional[float], typing.Optional[float]]`.",
    "message": " Expected `Tuple[float, float]` but got `Tuple[typing.Optional[float], typing.Optional[float]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 102,
    "warning_line": "        return limit, stop",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            stop = current_offer + Utils.percentage_of(stop_perc, current_offer)\n        return limit, stop\n",
        "source_code_len": 108,
        "target_code": "            stop = current_offer + Utils.percentage_of(stop_perc, current_offer)\n        else:\n            raise ValueError(\"Trade direction cannot be NONE\")\n        return limit, stop\n",
        "target_code_len": 185,
        "diff_format": "@@ -101,2 +103,4 @@\n             stop = current_offer + Utils.percentage_of(stop_perc, current_offer)\n+        else:\n+            raise ValueError(\"Trade direction cannot be NONE\")\n         return limit, stop\n",
        "source_code_with_indent": "            stop = current_offer + Utils.percentage_of(stop_perc, current_offer)\n        <DED>return limit, stop\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            stop = current_offer + Utils.percentage_of(stop_perc, current_offer)\n        <DED>else:\n            <IND>raise ValueError(\"Trade direction cannot be NONE\")\n        <DED>return limit, stop\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ilcardella/TradingBot",
    "commit": "d835f8b3955783b4b4ad5d4fbea44459b7fdd7fd",
    "filename": "tradingbot/Strategies/StrategyFactory.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ilcardella-TradingBot/tradingbot/Strategies/StrategyFactory.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tradingbot/Strategies/StrategyFactory.py:46:12 Incompatible return type [7]: Expected `Type[Variable[StrategyImpl (bound to tradingbot.Strategies.Strategy.Strategy)]]` but got `SimpleMACD`.",
    "message": " Expected `Type[Variable[StrategyImpl (bound to tradingbot.Strategies.Strategy.Strategy)]]` but got `SimpleMACD`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 46,
    "warning_line": "            return SimpleMACD(self.config, self.broker)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import logging\nfrom enum import Enum\nfrom typing import Type\n\n",
        "source_code_len": 62,
        "target_code": "from enum import Enum\nfrom typing import Union\n\n",
        "target_code_len": 48,
        "diff_format": "@@ -1,4 +1,3 @@\n-import logging\n from enum import Enum\n-from typing import Type\n+from typing import Union\n \n",
        "source_code_with_indent": "import logging\nfrom enum import Enum\nfrom typing import Type\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from enum import Enum\nfrom typing import Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from .SimpleMACD import SimpleMACD\nfrom .Strategy import StrategyImpl\nfrom .WeightedAvgPeak import WeightedAvgPeak\n\n",
        "source_code_len": 116,
        "target_code": "from .SimpleMACD import SimpleMACD\nfrom .WeightedAvgPeak import WeightedAvgPeak\n\nStrategyImpl = Union[SimpleMACD, WeightedAvgPeak]\n\n",
        "target_code_len": 132,
        "diff_format": "@@ -7,4 +6,5 @@\n from .SimpleMACD import SimpleMACD\n-from .Strategy import StrategyImpl\n from .WeightedAvgPeak import WeightedAvgPeak\n+\n+StrategyImpl = Union[SimpleMACD, WeightedAvgPeak]\n \n",
        "source_code_with_indent": "from .SimpleMACD import SimpleMACD\nfrom .Strategy import StrategyImpl\nfrom .WeightedAvgPeak import WeightedAvgPeak\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from .SimpleMACD import SimpleMACD\nfrom .WeightedAvgPeak import WeightedAvgPeak\n\nStrategyImpl = Union[SimpleMACD, WeightedAvgPeak]\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def make_strategy(self, strategy_name: str) -> Type[StrategyImpl]:\n        \"\"\"\n",
        "source_code_len": 84,
        "target_code": "\n    def make_strategy(self, strategy_name: str) -> StrategyImpl:\n        \"\"\"\n",
        "target_code_len": 78,
        "diff_format": "@@ -34,3 +37,3 @@\n \n-    def make_strategy(self, strategy_name: str) -> Type[StrategyImpl]:\n+    def make_strategy(self, strategy_name: str) -> StrategyImpl:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def make_strategy(self, strategy_name: str) -> Type[StrategyImpl]:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def make_strategy(self, strategy_name: str) -> StrategyImpl:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        else:\n            logging.error(\"Strategy {} does not exist\".format(strategy_name))\n\n    def make_from_configuration(self) -> Type[StrategyImpl]:\n        \"\"\"\n",
        "source_code_len": 166,
        "target_code": "        else:\n            raise ValueError(\"Strategy {} does not exist\".format(strategy_name))\n\n    def make_from_configuration(self) -> StrategyImpl:\n        \"\"\"\n",
        "target_code_len": 163,
        "diff_format": "@@ -49,5 +52,5 @@\n         else:\n-            logging.error(\"Strategy {} does not exist\".format(strategy_name))\n+            raise ValueError(\"Strategy {} does not exist\".format(strategy_name))\n \n-    def make_from_configuration(self) -> Type[StrategyImpl]:\n+    def make_from_configuration(self) -> StrategyImpl:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "        <DED>else:\n            <IND>logging.error(\"Strategy {} does not exist\".format(strategy_name))\n\n    <DED><DED>def make_from_configuration(self) -> Type[StrategyImpl]:\n        <IND>",
        "target_code_with_indent": "        <DED>else:\n            <IND>raise ValueError(\"Strategy {} does not exist\".format(strategy_name))\n\n    <DED><DED>def make_from_configuration(self) -> StrategyImpl:\n        <IND>"
      }
    ]
  },
  {
    "project": "ilcardella/TradingBot",
    "commit": "d835f8b3955783b4b4ad5d4fbea44459b7fdd7fd",
    "filename": "tradingbot/Strategies/StrategyFactory.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ilcardella-TradingBot/tradingbot/Strategies/StrategyFactory.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tradingbot/Strategies/StrategyFactory.py:48:12 Incompatible return type [7]: Expected `Type[Variable[StrategyImpl (bound to tradingbot.Strategies.Strategy.Strategy)]]` but got `WeightedAvgPeak`.",
    "message": " Expected `Type[Variable[StrategyImpl (bound to tradingbot.Strategies.Strategy.Strategy)]]` but got `WeightedAvgPeak`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 48,
    "warning_line": "            return WeightedAvgPeak(self.config, self.broker)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import logging\nfrom enum import Enum\nfrom typing import Type\n\n",
        "source_code_len": 62,
        "target_code": "from enum import Enum\nfrom typing import Union\n\n",
        "target_code_len": 48,
        "diff_format": "@@ -1,4 +1,3 @@\n-import logging\n from enum import Enum\n-from typing import Type\n+from typing import Union\n \n",
        "source_code_with_indent": "import logging\nfrom enum import Enum\nfrom typing import Type\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from enum import Enum\nfrom typing import Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from .SimpleMACD import SimpleMACD\nfrom .Strategy import StrategyImpl\nfrom .WeightedAvgPeak import WeightedAvgPeak\n\n",
        "source_code_len": 116,
        "target_code": "from .SimpleMACD import SimpleMACD\nfrom .WeightedAvgPeak import WeightedAvgPeak\n\nStrategyImpl = Union[SimpleMACD, WeightedAvgPeak]\n\n",
        "target_code_len": 132,
        "diff_format": "@@ -7,4 +6,5 @@\n from .SimpleMACD import SimpleMACD\n-from .Strategy import StrategyImpl\n from .WeightedAvgPeak import WeightedAvgPeak\n+\n+StrategyImpl = Union[SimpleMACD, WeightedAvgPeak]\n \n",
        "source_code_with_indent": "from .SimpleMACD import SimpleMACD\nfrom .Strategy import StrategyImpl\nfrom .WeightedAvgPeak import WeightedAvgPeak\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from .SimpleMACD import SimpleMACD\nfrom .WeightedAvgPeak import WeightedAvgPeak\n\nStrategyImpl = Union[SimpleMACD, WeightedAvgPeak]\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def make_strategy(self, strategy_name: str) -> Type[StrategyImpl]:\n        \"\"\"\n",
        "source_code_len": 84,
        "target_code": "\n    def make_strategy(self, strategy_name: str) -> StrategyImpl:\n        \"\"\"\n",
        "target_code_len": 78,
        "diff_format": "@@ -34,3 +37,3 @@\n \n-    def make_strategy(self, strategy_name: str) -> Type[StrategyImpl]:\n+    def make_strategy(self, strategy_name: str) -> StrategyImpl:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def make_strategy(self, strategy_name: str) -> Type[StrategyImpl]:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def make_strategy(self, strategy_name: str) -> StrategyImpl:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        else:\n            logging.error(\"Strategy {} does not exist\".format(strategy_name))\n\n    def make_from_configuration(self) -> Type[StrategyImpl]:\n        \"\"\"\n",
        "source_code_len": 166,
        "target_code": "        else:\n            raise ValueError(\"Strategy {} does not exist\".format(strategy_name))\n\n    def make_from_configuration(self) -> StrategyImpl:\n        \"\"\"\n",
        "target_code_len": 163,
        "diff_format": "@@ -49,5 +52,5 @@\n         else:\n-            logging.error(\"Strategy {} does not exist\".format(strategy_name))\n+            raise ValueError(\"Strategy {} does not exist\".format(strategy_name))\n \n-    def make_from_configuration(self) -> Type[StrategyImpl]:\n+    def make_from_configuration(self) -> StrategyImpl:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "        <DED>else:\n            <IND>logging.error(\"Strategy {} does not exist\".format(strategy_name))\n\n    <DED><DED>def make_from_configuration(self) -> Type[StrategyImpl]:\n        <IND>",
        "target_code_with_indent": "        <DED>else:\n            <IND>raise ValueError(\"Strategy {} does not exist\".format(strategy_name))\n\n    <DED><DED>def make_from_configuration(self) -> StrategyImpl:\n        <IND>"
      }
    ]
  },
  {
    "project": "ilcardella/TradingBot",
    "commit": "d835f8b3955783b4b4ad5d4fbea44459b7fdd7fd",
    "filename": "tradingbot/Strategies/StrategyFactory.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ilcardella-TradingBot/tradingbot/Strategies/StrategyFactory.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tradingbot/Strategies/StrategyFactory.py:50:12 Incompatible return type [7]: Expected `Type[Variable[StrategyImpl (bound to tradingbot.Strategies.Strategy.Strategy)]]` but got implicit return value of `None`.",
    "message": " Expected `Type[Variable[StrategyImpl (bound to tradingbot.Strategies.Strategy.Strategy)]]` but got implicit return value of `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 50,
    "warning_line": "            logging.error(\"Strategy {} does not exist\".format(strategy_name))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import logging\nfrom enum import Enum\nfrom typing import Type\n\n",
        "source_code_len": 62,
        "target_code": "from enum import Enum\nfrom typing import Union\n\n",
        "target_code_len": 48,
        "diff_format": "@@ -1,4 +1,3 @@\n-import logging\n from enum import Enum\n-from typing import Type\n+from typing import Union\n \n",
        "source_code_with_indent": "import logging\nfrom enum import Enum\nfrom typing import Type\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from enum import Enum\nfrom typing import Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from .SimpleMACD import SimpleMACD\nfrom .Strategy import StrategyImpl\nfrom .WeightedAvgPeak import WeightedAvgPeak\n\n",
        "source_code_len": 116,
        "target_code": "from .SimpleMACD import SimpleMACD\nfrom .WeightedAvgPeak import WeightedAvgPeak\n\nStrategyImpl = Union[SimpleMACD, WeightedAvgPeak]\n\n",
        "target_code_len": 132,
        "diff_format": "@@ -7,4 +6,5 @@\n from .SimpleMACD import SimpleMACD\n-from .Strategy import StrategyImpl\n from .WeightedAvgPeak import WeightedAvgPeak\n+\n+StrategyImpl = Union[SimpleMACD, WeightedAvgPeak]\n \n",
        "source_code_with_indent": "from .SimpleMACD import SimpleMACD\nfrom .Strategy import StrategyImpl\nfrom .WeightedAvgPeak import WeightedAvgPeak\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from .SimpleMACD import SimpleMACD\nfrom .WeightedAvgPeak import WeightedAvgPeak\n\nStrategyImpl = Union[SimpleMACD, WeightedAvgPeak]\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def make_strategy(self, strategy_name: str) -> Type[StrategyImpl]:\n        \"\"\"\n",
        "source_code_len": 84,
        "target_code": "\n    def make_strategy(self, strategy_name: str) -> StrategyImpl:\n        \"\"\"\n",
        "target_code_len": 78,
        "diff_format": "@@ -34,3 +37,3 @@\n \n-    def make_strategy(self, strategy_name: str) -> Type[StrategyImpl]:\n+    def make_strategy(self, strategy_name: str) -> StrategyImpl:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def make_strategy(self, strategy_name: str) -> Type[StrategyImpl]:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def make_strategy(self, strategy_name: str) -> StrategyImpl:\n        <IND>"
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        else:\n            logging.error(\"Strategy {} does not exist\".format(strategy_name))\n\n    def make_from_configuration(self) -> Type[StrategyImpl]:\n        \"\"\"\n",
        "source_code_len": 166,
        "target_code": "        else:\n            raise ValueError(\"Strategy {} does not exist\".format(strategy_name))\n\n    def make_from_configuration(self) -> StrategyImpl:\n        \"\"\"\n",
        "target_code_len": 163,
        "diff_format": "@@ -49,5 +52,5 @@\n         else:\n-            logging.error(\"Strategy {} does not exist\".format(strategy_name))\n+            raise ValueError(\"Strategy {} does not exist\".format(strategy_name))\n \n-    def make_from_configuration(self) -> Type[StrategyImpl]:\n+    def make_from_configuration(self) -> StrategyImpl:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "        <DED>else:\n            <IND>logging.error(\"Strategy {} does not exist\".format(strategy_name))\n\n    <DED><DED>def make_from_configuration(self) -> Type[StrategyImpl]:\n        <IND>",
        "target_code_with_indent": "        <DED>else:\n            <IND>raise ValueError(\"Strategy {} does not exist\".format(strategy_name))\n\n    <DED><DED>def make_from_configuration(self) -> StrategyImpl:\n        <IND>"
      }
    ]
  },
  {
    "project": "ilcardella/TradingBot",
    "commit": "d835f8b3955783b4b4ad5d4fbea44459b7fdd7fd",
    "filename": "tradingbot/Strategies/WeightedAvgPeak.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ilcardella-TradingBot/tradingbot/Strategies/WeightedAvgPeak.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tradingbot/Strategies/WeightedAvgPeak.py:103:36 Unsupported operand [58]: `+` is not supported for operand types `Tuple[float, float]` and `float`.",
    "message": " `+` is not supported for operand types `Tuple[float, float]` and `float`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 103,
    "warning_line": "        tmp_high_weight_var = float(high_weighted_avg + high_weighted_std_dev)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self, values: numpy.ndarray, weights: numpy.ndarray\n    ) -> Tuple[Tuple[float, float], float]:\n        \"\"\"\n",
        "source_code_len": 116,
        "target_code": "        self, values: numpy.ndarray, weights: numpy.ndarray\n    ) -> Tuple[float, float]:\n        \"\"\"\n",
        "target_code_len": 102,
        "diff_format": "@@ -278,3 +278,3 @@\n         self, values: numpy.ndarray, weights: numpy.ndarray\n-    ) -> Tuple[Tuple[float, float], float]:\n+    ) -> Tuple[float, float]:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "        self, values: numpy.ndarray, weights: numpy.ndarray\n    ) -> Tuple[Tuple[float, float], float]:\n        <IND>",
        "target_code_with_indent": "        self, values: numpy.ndarray, weights: numpy.ndarray\n    ) -> Tuple[float, float]:\n        <IND>"
      }
    ]
  },
  {
    "project": "ilcardella/TradingBot",
    "commit": "d835f8b3955783b4b4ad5d4fbea44459b7fdd7fd",
    "filename": "tradingbot/Strategies/WeightedAvgPeak.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ilcardella-TradingBot/tradingbot/Strategies/WeightedAvgPeak.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tradingbot/Strategies/WeightedAvgPeak.py:104:35 Unsupported operand [58]: `+` is not supported for operand types `Tuple[float, float]` and `float`.",
    "message": " `+` is not supported for operand types `Tuple[float, float]` and `float`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 104,
    "warning_line": "        tmp_low_weight_var = float(low_weighted_avg + low_weighted_std_dev)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self, values: numpy.ndarray, weights: numpy.ndarray\n    ) -> Tuple[Tuple[float, float], float]:\n        \"\"\"\n",
        "source_code_len": 116,
        "target_code": "        self, values: numpy.ndarray, weights: numpy.ndarray\n    ) -> Tuple[float, float]:\n        \"\"\"\n",
        "target_code_len": 102,
        "diff_format": "@@ -278,3 +278,3 @@\n         self, values: numpy.ndarray, weights: numpy.ndarray\n-    ) -> Tuple[Tuple[float, float], float]:\n+    ) -> Tuple[float, float]:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "        self, values: numpy.ndarray, weights: numpy.ndarray\n    ) -> Tuple[Tuple[float, float], float]:\n        <IND>",
        "target_code_with_indent": "        self, values: numpy.ndarray, weights: numpy.ndarray\n    ) -> Tuple[float, float]:\n        <IND>"
      }
    ]
  },
  {
    "project": "ilcardella/TradingBot",
    "commit": "d835f8b3955783b4b4ad5d4fbea44459b7fdd7fd",
    "filename": "tradingbot/Strategies/WeightedAvgPeak.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ilcardella-TradingBot/tradingbot/Strategies/WeightedAvgPeak.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tradingbot/Strategies/WeightedAvgPeak.py:212:8 Incompatible return type [7]: Expected `Tuple[TradeDirection, Optional[float], Optional[float]]` but got `Tuple[TradeDirection, Optional[float], typing.Union[int, str]]`.",
    "message": " Expected `Tuple[TradeDirection, Optional[float], Optional[float]]` but got `Tuple[TradeDirection, Optional[float], typing.Union[int, str]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 212,
    "warning_line": "        return trade_direction, pip_limit, stop_pips",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            )\n        stop_pips = str(int(abs(float(market.bid) - (ce_stop))))\n\n",
        "source_code_len": 80,
        "target_code": "            )\n        stop_pips = int(abs(float(market.bid) - (ce_stop)))\n\n",
        "target_code_len": 75,
        "diff_format": "@@ -190,3 +190,3 @@\n             )\n-        stop_pips = str(int(abs(float(market.bid) - (ce_stop))))\n+        stop_pips = int(abs(float(market.bid) - (ce_stop)))\n \n",
        "source_code_with_indent": "            )\n        <DED>stop_pips = str(int(abs(float(market.bid) - (ce_stop))))\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            )\n        <DED>stop_pips = int(abs(float(market.bid) - (ce_stop)))\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ilcardella/TradingBot",
    "commit": "d835f8b3955783b4b4ad5d4fbea44459b7fdd7fd",
    "filename": "tradingbot/Strategies/WeightedAvgPeak.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ilcardella-TradingBot/tradingbot/Strategies/WeightedAvgPeak.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tradingbot/Strategies/WeightedAvgPeak.py:373:12 Incompatible return type [7]: Expected `float` but got implicit return value of `None`.",
    "message": " Expected `float` but got implicit return value of `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 373,
    "warning_line": "            return float(Price) + float(ATR) * int(self.ce_multiplier)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            return float(Price) + float(ATR) * int(self.ce_multiplier)\n\n",
        "source_code_len": 72,
        "target_code": "            return float(Price) + float(ATR) * int(self.ce_multiplier)\n        raise ValueError(\"trade direction can't be NONE\")\n\n",
        "target_code_len": 130,
        "diff_format": "@@ -373,2 +373,3 @@\n             return float(Price) + float(ATR) * int(self.ce_multiplier)\n+        raise ValueError(\"trade direction can't be NONE\")\n \n",
        "source_code_with_indent": "            <IND>return float(Price) + float(ATR) * int(self.ce_multiplier)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <IND>return float(Price) + float(ATR) * int(self.ce_multiplier)\n        <DED>raise ValueError(\"trade direction can't be NONE\")\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ilcardella/TradingBot",
    "commit": "d835f8b3955783b4b4ad5d4fbea44459b7fdd7fd",
    "filename": "tradingbot/TradingBot.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ilcardella-TradingBot/tradingbot/TradingBot.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tradingbot/TradingBot.py:42:50 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `Configuration.from_filepath` but got `Optional[str]`.",
    "message": " Expected `str` for 1st positional only parameter to call `Configuration.from_filepath` but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 42,
    "warning_line": "        self.config = Configuration.from_filepath(config_filepath)"
  },
  {
    "project": "ilcardella/TradingBot",
    "commit": "d835f8b3955783b4b4ad5d4fbea44459b7fdd7fd",
    "filename": "tradingbot/TradingBot.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ilcardella-TradingBot/tradingbot/TradingBot.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tradingbot/TradingBot.py:252:17 Incompatible parameter type [6]: Expected `Market` for 1st positional only parameter to call `Backtester.start` but got `Optional[Market]`.",
    "message": " Expected `Market` for 1st positional only parameter to call `Backtester.start` but got `Optional[Market]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 252,
    "warning_line": "        bt.start(market, start, end)"
  }
]