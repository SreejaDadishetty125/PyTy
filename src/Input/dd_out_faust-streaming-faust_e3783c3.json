[
  {
    "project": "faust-streaming/faust",
    "commit": "e3783c333b1f9c673d5ea09fc78e52d1f471d3cf",
    "filename": "faust/utils/services.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/faust-streaming-faust/faust/utils/services.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "faust/utils/services.py:30:4 Incompatible attribute type [8]: Attribute `timeout` declared in class `Waiter` has type `float` but is used as type `None`.",
    "message": " Attribute `timeout` declared in class `Waiter` has type `float` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 30,
    "warning_line": "    timeout: float = None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "    \"\"\"Worker unexpected error, exit immediately.\"\"\"\n\n\nclass Waiter:\n    coros: Tuple[Coroutine]\n    timeout: float = None\n    loop: asyncio.AbstractEventLoop\n\n    def __init__(self, *coros: Coroutine,\n                 timeout: Seconds = None,\n                 loop: asyncio.AbstractEventLoop = None) -> None:\n        self.coros = coros\n        self.timeout = want_seconds(timeout) if timeout is not None else None\n        self.loop = loop\n\n    async def __aenter__(self) -> 'Waiter':\n        await self.acquire()\n        return self\n\n    async def acquire(self) -> None:\n        await asyncio.wait(\n            self.coros,\n            timeout=self.timeout,\n            return_when=asyncio.FIRST_COMPLETED,\n        )\n\n    async def __aexit__(self,\n                        exc_type: Type[Exception],\n                        exc_value: Exception,\n                        exc_tb: TracebackType) -> Any:\n        ...\n\n",
        "source_code_len": 913,
        "target_code": "    \"\"\"Worker unexpected error, exit immediately.\"\"\"\n\n",
        "target_code_len": 54,
        "diff_format": "@@ -25,32 +25,2 @@\n     \"\"\"Worker unexpected error, exit immediately.\"\"\"\n-\n-\n-class Waiter:\n-    coros: Tuple[Coroutine]\n-    timeout: float = None\n-    loop: asyncio.AbstractEventLoop\n-\n-    def __init__(self, *coros: Coroutine,\n-                 timeout: Seconds = None,\n-                 loop: asyncio.AbstractEventLoop = None) -> None:\n-        self.coros = coros\n-        self.timeout = want_seconds(timeout) if timeout is not None else None\n-        self.loop = loop\n-\n-    async def __aenter__(self) -> 'Waiter':\n-        await self.acquire()\n-        return self\n-\n-    async def acquire(self) -> None:\n-        await asyncio.wait(\n-            self.coros,\n-            timeout=self.timeout,\n-            return_when=asyncio.FIRST_COMPLETED,\n-        )\n-\n-    async def __aexit__(self,\n-                        exc_type: Type[Exception],\n-                        exc_value: Exception,\n-                        exc_tb: TracebackType) -> Any:\n-        ...\n \n",
        "source_code_with_indent": "    <IND>\"\"\"Worker unexpected error, exit immediately.\"\"\"\n\n\n<DED>class Waiter:\n    <IND>coros: Tuple[Coroutine]\n    timeout: float = None\n    loop: asyncio.AbstractEventLoop\n\n    def __init__(self, *coros: Coroutine,\n                 timeout: Seconds = None,\n                 loop: asyncio.AbstractEventLoop = None) -> None:\n        <IND>self.coros = coros\n        self.timeout = want_seconds(timeout) if timeout is not None else None\n        self.loop = loop\n\n    <DED>async def __aenter__(self) -> 'Waiter':\n        <IND>await self.acquire()\n        return self\n\n    <DED>async def acquire(self) -> None:\n        <IND>await asyncio.wait(\n            self.coros,\n            timeout=self.timeout,\n            return_when=asyncio.FIRST_COMPLETED,\n        )\n\n    <DED>async def __aexit__(self,\n                        exc_type: Type[Exception],\n                        exc_value: Exception,\n                        exc_tb: TracebackType) -> Any:\n        <IND>...\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <IND>\"\"\"Worker unexpected error, exit immediately.\"\"\"\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "faust-streaming/faust",
    "commit": "e3783c333b1f9c673d5ea09fc78e52d1f471d3cf",
    "filename": "faust/utils/services.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/faust-streaming-faust/faust/utils/services.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "faust/utils/services.py:36:8 Incompatible attribute type [8]: Attribute `coros` declared in class `Waiter` has type `Tuple[Coroutine[typing.Any, typing.Any, typing.Any]]` but is used as type `typing.Tuple[Coroutine[typing.Any, typing.Any, typing.Any], ...]`.",
    "message": " Attribute `coros` declared in class `Waiter` has type `Tuple[Coroutine[typing.Any, typing.Any, typing.Any]]` but is used as type `typing.Tuple[Coroutine[typing.Any, typing.Any, typing.Any], ...]`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 36,
    "warning_line": "        self.coros = coros",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "    \"\"\"Worker unexpected error, exit immediately.\"\"\"\n\n\nclass Waiter:\n    coros: Tuple[Coroutine]\n    timeout: float = None\n    loop: asyncio.AbstractEventLoop\n\n    def __init__(self, *coros: Coroutine,\n                 timeout: Seconds = None,\n                 loop: asyncio.AbstractEventLoop = None) -> None:\n        self.coros = coros\n        self.timeout = want_seconds(timeout) if timeout is not None else None\n        self.loop = loop\n\n    async def __aenter__(self) -> 'Waiter':\n        await self.acquire()\n        return self\n\n    async def acquire(self) -> None:\n        await asyncio.wait(\n            self.coros,\n            timeout=self.timeout,\n            return_when=asyncio.FIRST_COMPLETED,\n        )\n\n    async def __aexit__(self,\n                        exc_type: Type[Exception],\n                        exc_value: Exception,\n                        exc_tb: TracebackType) -> Any:\n        ...\n\n",
        "source_code_len": 913,
        "target_code": "    \"\"\"Worker unexpected error, exit immediately.\"\"\"\n\n",
        "target_code_len": 54,
        "diff_format": "@@ -25,32 +25,2 @@\n     \"\"\"Worker unexpected error, exit immediately.\"\"\"\n-\n-\n-class Waiter:\n-    coros: Tuple[Coroutine]\n-    timeout: float = None\n-    loop: asyncio.AbstractEventLoop\n-\n-    def __init__(self, *coros: Coroutine,\n-                 timeout: Seconds = None,\n-                 loop: asyncio.AbstractEventLoop = None) -> None:\n-        self.coros = coros\n-        self.timeout = want_seconds(timeout) if timeout is not None else None\n-        self.loop = loop\n-\n-    async def __aenter__(self) -> 'Waiter':\n-        await self.acquire()\n-        return self\n-\n-    async def acquire(self) -> None:\n-        await asyncio.wait(\n-            self.coros,\n-            timeout=self.timeout,\n-            return_when=asyncio.FIRST_COMPLETED,\n-        )\n-\n-    async def __aexit__(self,\n-                        exc_type: Type[Exception],\n-                        exc_value: Exception,\n-                        exc_tb: TracebackType) -> Any:\n-        ...\n \n",
        "source_code_with_indent": "    <IND>\"\"\"Worker unexpected error, exit immediately.\"\"\"\n\n\n<DED>class Waiter:\n    <IND>coros: Tuple[Coroutine]\n    timeout: float = None\n    loop: asyncio.AbstractEventLoop\n\n    def __init__(self, *coros: Coroutine,\n                 timeout: Seconds = None,\n                 loop: asyncio.AbstractEventLoop = None) -> None:\n        <IND>self.coros = coros\n        self.timeout = want_seconds(timeout) if timeout is not None else None\n        self.loop = loop\n\n    <DED>async def __aenter__(self) -> 'Waiter':\n        <IND>await self.acquire()\n        return self\n\n    <DED>async def acquire(self) -> None:\n        <IND>await asyncio.wait(\n            self.coros,\n            timeout=self.timeout,\n            return_when=asyncio.FIRST_COMPLETED,\n        )\n\n    <DED>async def __aexit__(self,\n                        exc_type: Type[Exception],\n                        exc_value: Exception,\n                        exc_tb: TracebackType) -> Any:\n        <IND>...\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <IND>\"\"\"Worker unexpected error, exit immediately.\"\"\"\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "faust-streaming/faust",
    "commit": "e3783c333b1f9c673d5ea09fc78e52d1f471d3cf",
    "filename": "faust/utils/services.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/faust-streaming-faust/faust/utils/services.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "faust/utils/services.py:37:8 Incompatible attribute type [8]: Attribute `timeout` declared in class `Waiter` has type `float` but is used as type `typing.Optional[float]`.",
    "message": " Attribute `timeout` declared in class `Waiter` has type `float` but is used as type `typing.Optional[float]`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 37,
    "warning_line": "        self.timeout = want_seconds(timeout) if timeout is not None else None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "    \"\"\"Worker unexpected error, exit immediately.\"\"\"\n\n\nclass Waiter:\n    coros: Tuple[Coroutine]\n    timeout: float = None\n    loop: asyncio.AbstractEventLoop\n\n    def __init__(self, *coros: Coroutine,\n                 timeout: Seconds = None,\n                 loop: asyncio.AbstractEventLoop = None) -> None:\n        self.coros = coros\n        self.timeout = want_seconds(timeout) if timeout is not None else None\n        self.loop = loop\n\n    async def __aenter__(self) -> 'Waiter':\n        await self.acquire()\n        return self\n\n    async def acquire(self) -> None:\n        await asyncio.wait(\n            self.coros,\n            timeout=self.timeout,\n            return_when=asyncio.FIRST_COMPLETED,\n        )\n\n    async def __aexit__(self,\n                        exc_type: Type[Exception],\n                        exc_value: Exception,\n                        exc_tb: TracebackType) -> Any:\n        ...\n\n",
        "source_code_len": 913,
        "target_code": "    \"\"\"Worker unexpected error, exit immediately.\"\"\"\n\n",
        "target_code_len": 54,
        "diff_format": "@@ -25,32 +25,2 @@\n     \"\"\"Worker unexpected error, exit immediately.\"\"\"\n-\n-\n-class Waiter:\n-    coros: Tuple[Coroutine]\n-    timeout: float = None\n-    loop: asyncio.AbstractEventLoop\n-\n-    def __init__(self, *coros: Coroutine,\n-                 timeout: Seconds = None,\n-                 loop: asyncio.AbstractEventLoop = None) -> None:\n-        self.coros = coros\n-        self.timeout = want_seconds(timeout) if timeout is not None else None\n-        self.loop = loop\n-\n-    async def __aenter__(self) -> 'Waiter':\n-        await self.acquire()\n-        return self\n-\n-    async def acquire(self) -> None:\n-        await asyncio.wait(\n-            self.coros,\n-            timeout=self.timeout,\n-            return_when=asyncio.FIRST_COMPLETED,\n-        )\n-\n-    async def __aexit__(self,\n-                        exc_type: Type[Exception],\n-                        exc_value: Exception,\n-                        exc_tb: TracebackType) -> Any:\n-        ...\n \n",
        "source_code_with_indent": "    <IND>\"\"\"Worker unexpected error, exit immediately.\"\"\"\n\n\n<DED>class Waiter:\n    <IND>coros: Tuple[Coroutine]\n    timeout: float = None\n    loop: asyncio.AbstractEventLoop\n\n    def __init__(self, *coros: Coroutine,\n                 timeout: Seconds = None,\n                 loop: asyncio.AbstractEventLoop = None) -> None:\n        <IND>self.coros = coros\n        self.timeout = want_seconds(timeout) if timeout is not None else None\n        self.loop = loop\n\n    <DED>async def __aenter__(self) -> 'Waiter':\n        <IND>await self.acquire()\n        return self\n\n    <DED>async def acquire(self) -> None:\n        <IND>await asyncio.wait(\n            self.coros,\n            timeout=self.timeout,\n            return_when=asyncio.FIRST_COMPLETED,\n        )\n\n    <DED>async def __aexit__(self,\n                        exc_type: Type[Exception],\n                        exc_value: Exception,\n                        exc_tb: TracebackType) -> Any:\n        <IND>...\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <IND>\"\"\"Worker unexpected error, exit immediately.\"\"\"\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "faust-streaming/faust",
    "commit": "e3783c333b1f9c673d5ea09fc78e52d1f471d3cf",
    "filename": "faust/utils/services.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/faust-streaming-faust/faust/utils/services.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "faust/utils/services.py:164:17 Incompatible variable type [9]: loop is declared to have type `asyncio.events.AbstractEventLoop` but is used as type `None`.",
    "message": " loop is declared to have type `asyncio.events.AbstractEventLoop` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 164,
    "warning_line": "                 loop: asyncio.AbstractEventLoop = None) -> None:"
  },
  {
    "project": "faust-streaming/faust",
    "commit": "e3783c333b1f9c673d5ea09fc78e52d1f471d3cf",
    "filename": "faust/utils/services.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/faust-streaming-faust/faust/utils/services.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "faust/utils/services.py:237:54 Incompatible parameter type [6]: Expected `Coroutine[typing.Any, typing.Any, typing.Any]` for 2nd positional only parameter to call `Service._wait_first` but got `Union[Awaitable[typing.Any], Generator[typing.Any, None, typing.Any], asyncio.futures.Future[typing.Any]]`.",
    "message": " Expected `Coroutine[typing.Any, typing.Any, typing.Any]` for 2nd positional only parameter to call `Service._wait_first` but got `Union[Awaitable[typing.Any], Generator[typing.Any, None, typing.Any], asyncio.futures.Future[typing.Any]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 237,
    "warning_line": "        await self._wait_first(self._stopped.wait(), *coros, timeout=timeout)"
  },
  {
    "project": "faust-streaming/faust",
    "commit": "e3783c333b1f9c673d5ea09fc78e52d1f471d3cf",
    "filename": "faust/utils/services.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/faust-streaming-faust/faust/utils/services.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "faust/utils/services.py:240:37 Incompatible variable type [9]: timeout is declared to have type `Union[datetime.timedelta, float]` but is used as type `None`.",
    "message": " timeout is declared to have type `Union[datetime.timedelta, float]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 240,
    "warning_line": "            self, *coros: Coroutine, timeout: Seconds = None) -> None:"
  }
]