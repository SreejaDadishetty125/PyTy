[
  {
    "project": "chanzuckerberg/miniwdl",
    "commit": "1b3f26c69b306c12226eaa02145072af0de12839",
    "filename": "WDL/Env.py",
    "min_patch_found": false,
    "full_warning_msg": "WDL/Env.py:81:0 Invalid type [31]: Expression `Variable[Node <: [WDL.Env.Binding[Variable[WDL.Env.R]], WDL.Env.Namespace[Variable[WDL.Env.R]]]]` is not a valid type. Type variables cannot contain other type variables in their constraints.",
    "exception": "too many values to unpack (expected 2)",
    "dd_fail": true
  },
  {
    "project": "chanzuckerberg/miniwdl",
    "commit": "1b3f26c69b306c12226eaa02145072af0de12839",
    "filename": "WDL/Expr.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/chanzuckerberg-miniwdl/WDL/Expr.py",
    "file_hunks_size": 14,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "WDL/Expr.py:75:8 Incompatible return type [7]: Expected `Variable[TVBase (bound to Base)]` but got `Base`.",
    "message": " Expected `Variable[TVBase (bound to Base)]` but got `Base`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 75,
    "warning_line": "        return self",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def infer_type(self, type_env: Env.Types, check_quant: bool = True) -> TVBase:\n        \"\"\"infer_type(self, type_env : Env.Types) -> WDL.Expr.Base\n",
        "source_code_len": 151,
        "target_code": "\n    def infer_type(self, type_env: Env.Types, check_quant: bool = True) -> \"Base\":\n        \"\"\"infer_type(self, type_env : Env.Types) -> WDL.Expr.Base\n",
        "target_code_len": 151,
        "diff_format": "@@ -53,3 +47,3 @@\n \n-    def infer_type(self, type_env: Env.Types, check_quant: bool = True) -> TVBase:\n+    def infer_type(self, type_env: Env.Types, check_quant: bool = True) -> \"Base\":\n         \"\"\"infer_type(self, type_env : Env.Types) -> WDL.Expr.Base\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def infer_type(self, type_env: Env.Types, check_quant: bool = True) -> TVBase:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def infer_type(self, type_env: Env.Types, check_quant: bool = True) -> \"Base\":\n        <IND>"
      }
    ]
  },
  {
    "project": "chanzuckerberg/miniwdl",
    "commit": "1b3f26c69b306c12226eaa02145072af0de12839",
    "filename": "WDL/Expr.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/chanzuckerberg-miniwdl/WDL/Expr.py",
    "file_hunks_size": 14,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "WDL/Expr.py:88:8 Incompatible return type [7]: Expected `Variable[TVBase (bound to Base)]` but got `Base`.",
    "message": " Expected `Variable[TVBase (bound to Base)]` but got `Base`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 88,
    "warning_line": "        return self",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def typecheck(self, expected: T.Base) -> TVBase:\n        \"\"\"typecheck(self, expected : T.Base) -> WDL.Expr.Base\n",
        "source_code_len": 117,
        "target_code": "\n    def typecheck(self, expected: T.Base) -> \"Base\":\n        \"\"\"typecheck(self, expected : T.Base) -> WDL.Expr.Base\n",
        "target_code_len": 117,
        "diff_format": "@@ -76,3 +71,3 @@\n \n-    def typecheck(self, expected: T.Base) -> TVBase:\n+    def typecheck(self, expected: T.Base) -> \"Base\":\n         \"\"\"typecheck(self, expected : T.Base) -> WDL.Expr.Base\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def typecheck(self, expected: T.Base) -> TVBase:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def typecheck(self, expected: T.Base) -> \"Base\":\n        <IND>"
      }
    ]
  },
  {
    "project": "chanzuckerberg/miniwdl",
    "commit": "1b3f26c69b306c12226eaa02145072af0de12839",
    "filename": "WDL/Expr.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/chanzuckerberg-miniwdl/WDL/Expr.py",
    "file_hunks_size": 14,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "WDL/Expr.py:445:70 Incompatible parameter type [6]: Expected `Tuple[T.Base, T.Base]` for 1st positional only parameter to call `T.Map.__init__` but got `None`.",
    "message": " Expected `Tuple[T.Base, T.Base]` for 1st positional only parameter to call `T.Map.__init__` but got `None`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 445,
    "warning_line": "            if vty is None or vty == T.Array(T.Any()) or vty == T.Map(None):",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                k.typecheck(kty)\n            if vty is None or vty == T.Array(T.Any()) or vty == T.Map(None):\n                vty = v.type\n",
        "source_code_len": 139,
        "target_code": "                k.typecheck(kty)\n            if vty is None or vty == T.Array(T.Any()) or vty == T.Map((T.Any(), T.Any())):\n                vty = v.type\n",
        "target_code_len": 153,
        "diff_format": "@@ -444,3 +439,3 @@\n                 k.typecheck(kty)\n-            if vty is None or vty == T.Array(T.Any()) or vty == T.Map(None):\n+            if vty is None or vty == T.Array(T.Any()) or vty == T.Map((T.Any(), T.Any())):\n                 vty = v.type\n",
        "source_code_with_indent": "                <IND>k.typecheck(kty)\n            <DED>if vty is None or vty == T.Array(T.Any()) or vty == T.Map(None):\n                <IND>vty = v.type\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                <IND>k.typecheck(kty)\n            <DED>if vty is None or vty == T.Array(T.Any()) or vty == T.Map((T.Any(), T.Any())):\n                <IND>vty = v.type\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "chanzuckerberg/miniwdl",
    "commit": "1b3f26c69b306c12226eaa02145072af0de12839",
    "filename": "WDL/Expr.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/chanzuckerberg-miniwdl/WDL/Expr.py",
    "file_hunks_size": 14,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "WDL/Expr.py:450:25 Incompatible parameter type [6]: Expected `Tuple[T.Base, T.Base]` for 1st positional only parameter to call `T.Map.__init__` but got `None`.",
    "message": " Expected `Tuple[T.Base, T.Base]` for 1st positional only parameter to call `T.Map.__init__` but got `None`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 450,
    "warning_line": "            return T.Map(None)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        if kty is None:\n            return T.Map(None)\n        assert vty is not None\n",
        "source_code_len": 86,
        "target_code": "        if kty is None:\n            return T.Map((T.Any(), T.Any()))\n        assert vty is not None\n",
        "target_code_len": 100,
        "diff_format": "@@ -449,3 +444,3 @@\n         if kty is None:\n-            return T.Map(None)\n+            return T.Map((T.Any(), T.Any()))\n         assert vty is not None\n",
        "source_code_with_indent": "        <DED><DED>if kty is None:\n            <IND>return T.Map(None)\n        <DED>assert vty is not None\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED><DED>if kty is None:\n            <IND>return T.Map((T.Any(), T.Any()))\n        <DED>assert vty is not None\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "chanzuckerberg/miniwdl",
    "commit": "1b3f26c69b306c12226eaa02145072af0de12839",
    "filename": "WDL/Lint.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/chanzuckerberg-miniwdl/WDL/Lint.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "WDL/Lint.py:123:29 Incompatible parameter type [6]: Expected `Union[typing.Type[typing.Any], typing.Tuple[typing.Type[typing.Any], ...]]` for 2nd positional only parameter to call `isinstance` but got `WDL.Type.Base`.",
    "message": " Expected `Union[typing.Type[typing.Any], typing.Tuple[typing.Type[typing.Any], ...]]` for 2nd positional only parameter to call `isinstance` but got `WDL.Type.Base`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 123,
    "warning_line": "    elif isinstance(to_type, base_to_type):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _compound_coercion(\n    to_type: WDL.Type.Base,\n    from_type: WDL.Type.Base,\n    base_to_type: WDL.Type.Base,\n    extra_from_type: Optional[WDL.Type.Base] = None,\n):\n    # helper for StringCoercion and FileCoercion to detect coercions implied\n",
        "source_code_len": 249,
        "target_code": "\ndef _compound_coercion(to_type, from_type, base_to_type, extra_from_type=None):\n    # helper for StringCoercion and FileCoercion to detect coercions implied\n",
        "target_code_len": 158,
        "diff_format": "@@ -98,8 +98,3 @@\n \n-def _compound_coercion(\n-    to_type: WDL.Type.Base,\n-    from_type: WDL.Type.Base,\n-    base_to_type: WDL.Type.Base,\n-    extra_from_type: Optional[WDL.Type.Base] = None,\n-):\n+def _compound_coercion(to_type, from_type, base_to_type, extra_from_type=None):\n     # helper for StringCoercion and FileCoercion to detect coercions implied\n",
        "source_code_with_indent": "\n<DED>def _compound_coercion(\n    to_type: WDL.Type.Base,\n    from_type: WDL.Type.Base,\n    base_to_type: WDL.Type.Base,\n    extra_from_type: Optional[WDL.Type.Base] = None,\n):\n    # helper for StringCoercion and FileCoercion to detect coercions implied\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def _compound_coercion(to_type, from_type, base_to_type, extra_from_type=None):\n    # helper for StringCoercion and FileCoercion to detect coercions implied\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "chanzuckerberg/miniwdl",
    "commit": "1b3f26c69b306c12226eaa02145072af0de12839",
    "filename": "WDL/Lint.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/chanzuckerberg-miniwdl/WDL/Lint.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "WDL/Lint.py:125:60 Incompatible parameter type [6]: Expected `Union[typing.Type[typing.Any], typing.Tuple[typing.Type[typing.Any], ...]]` for 2nd positional only parameter to call `isinstance` but got `WDL.Type.Base`.",
    "message": " Expected `Union[typing.Type[typing.Any], typing.Tuple[typing.Type[typing.Any], ...]]` for 2nd positional only parameter to call `isinstance` but got `WDL.Type.Base`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 125,
    "warning_line": "            return not isinstance(from_type, (base_to_type, extra_from_type, WDL.Type.Any))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _compound_coercion(\n    to_type: WDL.Type.Base,\n    from_type: WDL.Type.Base,\n    base_to_type: WDL.Type.Base,\n    extra_from_type: Optional[WDL.Type.Base] = None,\n):\n    # helper for StringCoercion and FileCoercion to detect coercions implied\n",
        "source_code_len": 249,
        "target_code": "\ndef _compound_coercion(to_type, from_type, base_to_type, extra_from_type=None):\n    # helper for StringCoercion and FileCoercion to detect coercions implied\n",
        "target_code_len": 158,
        "diff_format": "@@ -98,8 +98,3 @@\n \n-def _compound_coercion(\n-    to_type: WDL.Type.Base,\n-    from_type: WDL.Type.Base,\n-    base_to_type: WDL.Type.Base,\n-    extra_from_type: Optional[WDL.Type.Base] = None,\n-):\n+def _compound_coercion(to_type, from_type, base_to_type, extra_from_type=None):\n     # helper for StringCoercion and FileCoercion to detect coercions implied\n",
        "source_code_with_indent": "\n<DED>def _compound_coercion(\n    to_type: WDL.Type.Base,\n    from_type: WDL.Type.Base,\n    base_to_type: WDL.Type.Base,\n    extra_from_type: Optional[WDL.Type.Base] = None,\n):\n    # helper for StringCoercion and FileCoercion to detect coercions implied\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def _compound_coercion(to_type, from_type, base_to_type, extra_from_type=None):\n    # helper for StringCoercion and FileCoercion to detect coercions implied\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "chanzuckerberg/miniwdl",
    "commit": "1b3f26c69b306c12226eaa02145072af0de12839",
    "filename": "WDL/Lint.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/chanzuckerberg-miniwdl/WDL/Lint.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "WDL/Lint.py:126:42 Incompatible parameter type [6]: Expected `Union[typing.Type[typing.Any], typing.Tuple[typing.Type[typing.Any], ...]]` for 2nd positional only parameter to call `isinstance` but got `WDL.Type.Base`.",
    "message": " Expected `Union[typing.Type[typing.Any], typing.Tuple[typing.Type[typing.Any], ...]]` for 2nd positional only parameter to call `isinstance` but got `WDL.Type.Base`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 126,
    "warning_line": "        return not isinstance(from_type, (base_to_type, WDL.Type.Any))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _compound_coercion(\n    to_type: WDL.Type.Base,\n    from_type: WDL.Type.Base,\n    base_to_type: WDL.Type.Base,\n    extra_from_type: Optional[WDL.Type.Base] = None,\n):\n    # helper for StringCoercion and FileCoercion to detect coercions implied\n",
        "source_code_len": 249,
        "target_code": "\ndef _compound_coercion(to_type, from_type, base_to_type, extra_from_type=None):\n    # helper for StringCoercion and FileCoercion to detect coercions implied\n",
        "target_code_len": 158,
        "diff_format": "@@ -98,8 +98,3 @@\n \n-def _compound_coercion(\n-    to_type: WDL.Type.Base,\n-    from_type: WDL.Type.Base,\n-    base_to_type: WDL.Type.Base,\n-    extra_from_type: Optional[WDL.Type.Base] = None,\n-):\n+def _compound_coercion(to_type, from_type, base_to_type, extra_from_type=None):\n     # helper for StringCoercion and FileCoercion to detect coercions implied\n",
        "source_code_with_indent": "\n<DED>def _compound_coercion(\n    to_type: WDL.Type.Base,\n    from_type: WDL.Type.Base,\n    base_to_type: WDL.Type.Base,\n    extra_from_type: Optional[WDL.Type.Base] = None,\n):\n    # helper for StringCoercion and FileCoercion to detect coercions implied\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def _compound_coercion(to_type, from_type, base_to_type, extra_from_type=None):\n    # helper for StringCoercion and FileCoercion to detect coercions implied\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "chanzuckerberg/miniwdl",
    "commit": "1b3f26c69b306c12226eaa02145072af0de12839",
    "filename": "WDL/Lint.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/chanzuckerberg-miniwdl/WDL/Lint.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "WDL/Lint.py:151:12 Incompatible parameter type [6]: Expected `WDL.Type.Base` for 3rd positional only parameter to call `_compound_coercion` but got `typing.Type[WDL.Type.String]`.",
    "message": " Expected `WDL.Type.Base` for 3rd positional only parameter to call `_compound_coercion` but got `typing.Type[WDL.Type.String]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 151,
    "warning_line": "            WDL.Type.String,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _compound_coercion(\n    to_type: WDL.Type.Base,\n    from_type: WDL.Type.Base,\n    base_to_type: WDL.Type.Base,\n    extra_from_type: Optional[WDL.Type.Base] = None,\n):\n    # helper for StringCoercion and FileCoercion to detect coercions implied\n",
        "source_code_len": 249,
        "target_code": "\ndef _compound_coercion(to_type, from_type, base_to_type, extra_from_type=None):\n    # helper for StringCoercion and FileCoercion to detect coercions implied\n",
        "target_code_len": 158,
        "diff_format": "@@ -98,8 +98,3 @@\n \n-def _compound_coercion(\n-    to_type: WDL.Type.Base,\n-    from_type: WDL.Type.Base,\n-    base_to_type: WDL.Type.Base,\n-    extra_from_type: Optional[WDL.Type.Base] = None,\n-):\n+def _compound_coercion(to_type, from_type, base_to_type, extra_from_type=None):\n     # helper for StringCoercion and FileCoercion to detect coercions implied\n",
        "source_code_with_indent": "\n<DED>def _compound_coercion(\n    to_type: WDL.Type.Base,\n    from_type: WDL.Type.Base,\n    base_to_type: WDL.Type.Base,\n    extra_from_type: Optional[WDL.Type.Base] = None,\n):\n    # helper for StringCoercion and FileCoercion to detect coercions implied\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def _compound_coercion(to_type, from_type, base_to_type, extra_from_type=None):\n    # helper for StringCoercion and FileCoercion to detect coercions implied\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "chanzuckerberg/miniwdl",
    "commit": "1b3f26c69b306c12226eaa02145072af0de12839",
    "filename": "WDL/Lint.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/chanzuckerberg-miniwdl/WDL/Lint.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "WDL/Lint.py:152:13 Incompatible parameter type [6]: Expected `Optional[WDL.Type.Base]` for 4th positional only parameter to call `_compound_coercion` but got `Optional[typing.Type[WDL.Type.File]]`.",
    "message": " Expected `Optional[WDL.Type.Base]` for 4th positional only parameter to call `_compound_coercion` but got `Optional[typing.Type[WDL.Type.File]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 152,
    "warning_line": "            (WDL.Type.File if isinstance(_parent_executable(obj), WDL.Tree.Task) else None),",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _compound_coercion(\n    to_type: WDL.Type.Base,\n    from_type: WDL.Type.Base,\n    base_to_type: WDL.Type.Base,\n    extra_from_type: Optional[WDL.Type.Base] = None,\n):\n    # helper for StringCoercion and FileCoercion to detect coercions implied\n",
        "source_code_len": 249,
        "target_code": "\ndef _compound_coercion(to_type, from_type, base_to_type, extra_from_type=None):\n    # helper for StringCoercion and FileCoercion to detect coercions implied\n",
        "target_code_len": 158,
        "diff_format": "@@ -98,8 +98,3 @@\n \n-def _compound_coercion(\n-    to_type: WDL.Type.Base,\n-    from_type: WDL.Type.Base,\n-    base_to_type: WDL.Type.Base,\n-    extra_from_type: Optional[WDL.Type.Base] = None,\n-):\n+def _compound_coercion(to_type, from_type, base_to_type, extra_from_type=None):\n     # helper for StringCoercion and FileCoercion to detect coercions implied\n",
        "source_code_with_indent": "\n<DED>def _compound_coercion(\n    to_type: WDL.Type.Base,\n    from_type: WDL.Type.Base,\n    base_to_type: WDL.Type.Base,\n    extra_from_type: Optional[WDL.Type.Base] = None,\n):\n    # helper for StringCoercion and FileCoercion to detect coercions implied\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def _compound_coercion(to_type, from_type, base_to_type, extra_from_type=None):\n    # helper for StringCoercion and FileCoercion to detect coercions implied\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "chanzuckerberg/miniwdl",
    "commit": "1b3f26c69b306c12226eaa02145072af0de12839",
    "filename": "WDL/Lint.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/chanzuckerberg-miniwdl/WDL/Lint.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "WDL/Lint.py:174:24 Incompatible parameter type [6]: Expected `Optional[WDL.Error.SourceNode]` for 3rd positional only parameter to call `Linter.add` but got `WDL.Error.SourcePosition`.",
    "message": " Expected `Optional[WDL.Error.SourceNode]` for 3rd positional only parameter to call `Linter.add` but got `WDL.Error.SourcePosition`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 174,
    "warning_line": "                        obj.pos,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def add(self, obj: WDL.SourceNode, message: str, pos: Optional[WDL.SourceNode] = None):\n        \"\"\"\n",
        "source_code_len": 105,
        "target_code": "\n    def add(self, obj: WDL.SourceNode, message: str, pos: Optional[WDL.SourcePosition] = None):\n        \"\"\"\n",
        "target_code_len": 109,
        "diff_format": "@@ -23,3 +23,3 @@\n \n-    def add(self, obj: WDL.SourceNode, message: str, pos: Optional[WDL.SourceNode] = None):\n+    def add(self, obj: WDL.SourceNode, message: str, pos: Optional[WDL.SourcePosition] = None):\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def add(self, obj: WDL.SourceNode, message: str, pos: Optional[WDL.SourceNode] = None):\n        <IND>",
        "target_code_with_indent": "\n    <DED>def add(self, obj: WDL.SourceNode, message: str, pos: Optional[WDL.SourcePosition] = None):\n        <IND>"
      }
    ]
  },
  {
    "project": "chanzuckerberg/miniwdl",
    "commit": "1b3f26c69b306c12226eaa02145072af0de12839",
    "filename": "WDL/Lint.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/chanzuckerberg-miniwdl/WDL/Lint.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "WDL/Lint.py:186:28 Incompatible parameter type [6]: Expected `WDL.Type.Base` for 3rd positional only parameter to call `_compound_coercion` but got `typing.Type[WDL.Type.String]`.",
    "message": " Expected `WDL.Type.Base` for 3rd positional only parameter to call `_compound_coercion` but got `typing.Type[WDL.Type.String]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 186,
    "warning_line": "                            WDL.Type.String,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _compound_coercion(\n    to_type: WDL.Type.Base,\n    from_type: WDL.Type.Base,\n    base_to_type: WDL.Type.Base,\n    extra_from_type: Optional[WDL.Type.Base] = None,\n):\n    # helper for StringCoercion and FileCoercion to detect coercions implied\n",
        "source_code_len": 249,
        "target_code": "\ndef _compound_coercion(to_type, from_type, base_to_type, extra_from_type=None):\n    # helper for StringCoercion and FileCoercion to detect coercions implied\n",
        "target_code_len": 158,
        "diff_format": "@@ -98,8 +98,3 @@\n \n-def _compound_coercion(\n-    to_type: WDL.Type.Base,\n-    from_type: WDL.Type.Base,\n-    base_to_type: WDL.Type.Base,\n-    extra_from_type: Optional[WDL.Type.Base] = None,\n-):\n+def _compound_coercion(to_type, from_type, base_to_type, extra_from_type=None):\n     # helper for StringCoercion and FileCoercion to detect coercions implied\n",
        "source_code_with_indent": "\n<DED>def _compound_coercion(\n    to_type: WDL.Type.Base,\n    from_type: WDL.Type.Base,\n    base_to_type: WDL.Type.Base,\n    extra_from_type: Optional[WDL.Type.Base] = None,\n):\n    # helper for StringCoercion and FileCoercion to detect coercions implied\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def _compound_coercion(to_type, from_type, base_to_type, extra_from_type=None):\n    # helper for StringCoercion and FileCoercion to detect coercions implied\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "chanzuckerberg/miniwdl",
    "commit": "1b3f26c69b306c12226eaa02145072af0de12839",
    "filename": "WDL/Lint.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/chanzuckerberg-miniwdl/WDL/Lint.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "WDL/Lint.py:188:32 Incompatible parameter type [6]: Expected `Optional[WDL.Type.Base]` for 4th positional only parameter to call `_compound_coercion` but got `Optional[typing.Type[WDL.Type.File]]`.",
    "message": " Expected `Optional[WDL.Type.Base]` for 4th positional only parameter to call `_compound_coercion` but got `Optional[typing.Type[WDL.Type.File]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 188,
    "warning_line": "                                WDL.Type.File",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _compound_coercion(\n    to_type: WDL.Type.Base,\n    from_type: WDL.Type.Base,\n    base_to_type: WDL.Type.Base,\n    extra_from_type: Optional[WDL.Type.Base] = None,\n):\n    # helper for StringCoercion and FileCoercion to detect coercions implied\n",
        "source_code_len": 249,
        "target_code": "\ndef _compound_coercion(to_type, from_type, base_to_type, extra_from_type=None):\n    # helper for StringCoercion and FileCoercion to detect coercions implied\n",
        "target_code_len": 158,
        "diff_format": "@@ -98,8 +98,3 @@\n \n-def _compound_coercion(\n-    to_type: WDL.Type.Base,\n-    from_type: WDL.Type.Base,\n-    base_to_type: WDL.Type.Base,\n-    extra_from_type: Optional[WDL.Type.Base] = None,\n-):\n+def _compound_coercion(to_type, from_type, base_to_type, extra_from_type=None):\n     # helper for StringCoercion and FileCoercion to detect coercions implied\n",
        "source_code_with_indent": "\n<DED>def _compound_coercion(\n    to_type: WDL.Type.Base,\n    from_type: WDL.Type.Base,\n    base_to_type: WDL.Type.Base,\n    extra_from_type: Optional[WDL.Type.Base] = None,\n):\n    # helper for StringCoercion and FileCoercion to detect coercions implied\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def _compound_coercion(to_type, from_type, base_to_type, extra_from_type=None):\n    # helper for StringCoercion and FileCoercion to detect coercions implied\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "chanzuckerberg/miniwdl",
    "commit": "1b3f26c69b306c12226eaa02145072af0de12839",
    "filename": "WDL/Lint.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/chanzuckerberg-miniwdl/WDL/Lint.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "WDL/Lint.py:196:46 Incompatible parameter type [6]: Expected `Optional[WDL.Error.SourceNode]` for 3rd positional only parameter to call `Linter.add` but got `WDL.Error.SourcePosition`.",
    "message": " Expected `Optional[WDL.Error.SourceNode]` for 3rd positional only parameter to call `Linter.add` but got `WDL.Error.SourcePosition`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 196,
    "warning_line": "                            self.add(pt, msg, arg_i.pos)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def add(self, obj: WDL.SourceNode, message: str, pos: Optional[WDL.SourceNode] = None):\n        \"\"\"\n",
        "source_code_len": 105,
        "target_code": "\n    def add(self, obj: WDL.SourceNode, message: str, pos: Optional[WDL.SourcePosition] = None):\n        \"\"\"\n",
        "target_code_len": 109,
        "diff_format": "@@ -23,3 +23,3 @@\n \n-    def add(self, obj: WDL.SourceNode, message: str, pos: Optional[WDL.SourceNode] = None):\n+    def add(self, obj: WDL.SourceNode, message: str, pos: Optional[WDL.SourcePosition] = None):\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def add(self, obj: WDL.SourceNode, message: str, pos: Optional[WDL.SourceNode] = None):\n        <IND>",
        "target_code_with_indent": "\n    <DED>def add(self, obj: WDL.SourceNode, message: str, pos: Optional[WDL.SourcePosition] = None):\n        <IND>"
      }
    ]
  },
  {
    "project": "chanzuckerberg/miniwdl",
    "commit": "1b3f26c69b306c12226eaa02145072af0de12839",
    "filename": "WDL/Lint.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/chanzuckerberg-miniwdl/WDL/Lint.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "WDL/Lint.py:213:34 Incompatible parameter type [6]: Expected `Optional[WDL.Error.SourceNode]` for 3rd positional only parameter to call `Linter.add` but got `WDL.Error.SourcePosition`.",
    "message": " Expected `Optional[WDL.Error.SourceNode]` for 3rd positional only parameter to call `Linter.add` but got `WDL.Error.SourcePosition`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 213,
    "warning_line": "                self.add(pt, msg, obj.pos)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def add(self, obj: WDL.SourceNode, message: str, pos: Optional[WDL.SourceNode] = None):\n        \"\"\"\n",
        "source_code_len": 105,
        "target_code": "\n    def add(self, obj: WDL.SourceNode, message: str, pos: Optional[WDL.SourcePosition] = None):\n        \"\"\"\n",
        "target_code_len": 109,
        "diff_format": "@@ -23,3 +23,3 @@\n \n-    def add(self, obj: WDL.SourceNode, message: str, pos: Optional[WDL.SourceNode] = None):\n+    def add(self, obj: WDL.SourceNode, message: str, pos: Optional[WDL.SourcePosition] = None):\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def add(self, obj: WDL.SourceNode, message: str, pos: Optional[WDL.SourceNode] = None):\n        <IND>",
        "target_code_with_indent": "\n    <DED>def add(self, obj: WDL.SourceNode, message: str, pos: Optional[WDL.SourcePosition] = None):\n        <IND>"
      }
    ]
  },
  {
    "project": "chanzuckerberg/miniwdl",
    "commit": "1b3f26c69b306c12226eaa02145072af0de12839",
    "filename": "WDL/Lint.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/chanzuckerberg-miniwdl/WDL/Lint.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "WDL/Lint.py:218:60 Incompatible parameter type [6]: Expected `WDL.Type.Base` for 3rd positional only parameter to call `_compound_coercion` but got `typing.Type[WDL.Type.String]`.",
    "message": " Expected `WDL.Type.Base` for 3rd positional only parameter to call `_compound_coercion` but got `typing.Type[WDL.Type.String]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 218,
    "warning_line": "            if _compound_coercion(decl.type, inp_expr.type, WDL.Type.String):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _compound_coercion(\n    to_type: WDL.Type.Base,\n    from_type: WDL.Type.Base,\n    base_to_type: WDL.Type.Base,\n    extra_from_type: Optional[WDL.Type.Base] = None,\n):\n    # helper for StringCoercion and FileCoercion to detect coercions implied\n",
        "source_code_len": 249,
        "target_code": "\ndef _compound_coercion(to_type, from_type, base_to_type, extra_from_type=None):\n    # helper for StringCoercion and FileCoercion to detect coercions implied\n",
        "target_code_len": 158,
        "diff_format": "@@ -98,8 +98,3 @@\n \n-def _compound_coercion(\n-    to_type: WDL.Type.Base,\n-    from_type: WDL.Type.Base,\n-    base_to_type: WDL.Type.Base,\n-    extra_from_type: Optional[WDL.Type.Base] = None,\n-):\n+def _compound_coercion(to_type, from_type, base_to_type, extra_from_type=None):\n     # helper for StringCoercion and FileCoercion to detect coercions implied\n",
        "source_code_with_indent": "\n<DED>def _compound_coercion(\n    to_type: WDL.Type.Base,\n    from_type: WDL.Type.Base,\n    base_to_type: WDL.Type.Base,\n    extra_from_type: Optional[WDL.Type.Base] = None,\n):\n    # helper for StringCoercion and FileCoercion to detect coercions implied\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def _compound_coercion(to_type, from_type, base_to_type, extra_from_type=None):\n    # helper for StringCoercion and FileCoercion to detect coercions implied\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "chanzuckerberg/miniwdl",
    "commit": "1b3f26c69b306c12226eaa02145072af0de12839",
    "filename": "WDL/Lint.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/chanzuckerberg-miniwdl/WDL/Lint.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "WDL/Lint.py:220:35 Incompatible parameter type [6]: Expected `Optional[WDL.Error.SourceNode]` for 3rd positional only parameter to call `Linter.add` but got `WDL.Error.SourcePosition`.",
    "message": " Expected `Optional[WDL.Error.SourceNode]` for 3rd positional only parameter to call `Linter.add` but got `WDL.Error.SourcePosition`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 220,
    "warning_line": "                self.add(obj, msg, inp_expr.pos)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def add(self, obj: WDL.SourceNode, message: str, pos: Optional[WDL.SourceNode] = None):\n        \"\"\"\n",
        "source_code_len": 105,
        "target_code": "\n    def add(self, obj: WDL.SourceNode, message: str, pos: Optional[WDL.SourcePosition] = None):\n        \"\"\"\n",
        "target_code_len": 109,
        "diff_format": "@@ -23,3 +23,3 @@\n \n-    def add(self, obj: WDL.SourceNode, message: str, pos: Optional[WDL.SourceNode] = None):\n+    def add(self, obj: WDL.SourceNode, message: str, pos: Optional[WDL.SourcePosition] = None):\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def add(self, obj: WDL.SourceNode, message: str, pos: Optional[WDL.SourceNode] = None):\n        <IND>",
        "target_code_with_indent": "\n    <DED>def add(self, obj: WDL.SourceNode, message: str, pos: Optional[WDL.SourcePosition] = None):\n        <IND>"
      }
    ]
  },
  {
    "project": "chanzuckerberg/miniwdl",
    "commit": "1b3f26c69b306c12226eaa02145072af0de12839",
    "filename": "WDL/Lint.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/chanzuckerberg-miniwdl/WDL/Lint.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "WDL/Lint.py:244:68 Incompatible parameter type [6]: Expected `WDL.Type.Base` for 3rd positional only parameter to call `_compound_coercion` but got `typing.Type[WDL.Type.File]`.",
    "message": " Expected `WDL.Type.Base` for 3rd positional only parameter to call `_compound_coercion` but got `typing.Type[WDL.Type.File]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 244,
    "warning_line": "        if obj.expr and _compound_coercion(obj.type, obj.expr.type, WDL.Type.File):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _compound_coercion(\n    to_type: WDL.Type.Base,\n    from_type: WDL.Type.Base,\n    base_to_type: WDL.Type.Base,\n    extra_from_type: Optional[WDL.Type.Base] = None,\n):\n    # helper for StringCoercion and FileCoercion to detect coercions implied\n",
        "source_code_len": 249,
        "target_code": "\ndef _compound_coercion(to_type, from_type, base_to_type, extra_from_type=None):\n    # helper for StringCoercion and FileCoercion to detect coercions implied\n",
        "target_code_len": 158,
        "diff_format": "@@ -98,8 +98,3 @@\n \n-def _compound_coercion(\n-    to_type: WDL.Type.Base,\n-    from_type: WDL.Type.Base,\n-    base_to_type: WDL.Type.Base,\n-    extra_from_type: Optional[WDL.Type.Base] = None,\n-):\n+def _compound_coercion(to_type, from_type, base_to_type, extra_from_type=None):\n     # helper for StringCoercion and FileCoercion to detect coercions implied\n",
        "source_code_with_indent": "\n<DED>def _compound_coercion(\n    to_type: WDL.Type.Base,\n    from_type: WDL.Type.Base,\n    base_to_type: WDL.Type.Base,\n    extra_from_type: Optional[WDL.Type.Base] = None,\n):\n    # helper for StringCoercion and FileCoercion to detect coercions implied\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def _compound_coercion(to_type, from_type, base_to_type, extra_from_type=None):\n    # helper for StringCoercion and FileCoercion to detect coercions implied\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "chanzuckerberg/miniwdl",
    "commit": "1b3f26c69b306c12226eaa02145072af0de12839",
    "filename": "WDL/Lint.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/chanzuckerberg-miniwdl/WDL/Lint.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "WDL/Lint.py:257:59 Incompatible parameter type [6]: Expected `WDL.Type.Base` for 3rd positional only parameter to call `_compound_coercion` but got `typing.Type[WDL.Type.File]`.",
    "message": " Expected `WDL.Type.Base` for 3rd positional only parameter to call `_compound_coercion` but got `typing.Type[WDL.Type.File]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 257,
    "warning_line": "                    if _compound_coercion(F_i, arg_i.type, WDL.Type.File):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _compound_coercion(\n    to_type: WDL.Type.Base,\n    from_type: WDL.Type.Base,\n    base_to_type: WDL.Type.Base,\n    extra_from_type: Optional[WDL.Type.Base] = None,\n):\n    # helper for StringCoercion and FileCoercion to detect coercions implied\n",
        "source_code_len": 249,
        "target_code": "\ndef _compound_coercion(to_type, from_type, base_to_type, extra_from_type=None):\n    # helper for StringCoercion and FileCoercion to detect coercions implied\n",
        "target_code_len": 158,
        "diff_format": "@@ -98,8 +98,3 @@\n \n-def _compound_coercion(\n-    to_type: WDL.Type.Base,\n-    from_type: WDL.Type.Base,\n-    base_to_type: WDL.Type.Base,\n-    extra_from_type: Optional[WDL.Type.Base] = None,\n-):\n+def _compound_coercion(to_type, from_type, base_to_type, extra_from_type=None):\n     # helper for StringCoercion and FileCoercion to detect coercions implied\n",
        "source_code_with_indent": "\n<DED>def _compound_coercion(\n    to_type: WDL.Type.Base,\n    from_type: WDL.Type.Base,\n    base_to_type: WDL.Type.Base,\n    extra_from_type: Optional[WDL.Type.Base] = None,\n):\n    # helper for StringCoercion and FileCoercion to detect coercions implied\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def _compound_coercion(to_type, from_type, base_to_type, extra_from_type=None):\n    # helper for StringCoercion and FileCoercion to detect coercions implied\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "chanzuckerberg/miniwdl",
    "commit": "1b3f26c69b306c12226eaa02145072af0de12839",
    "filename": "WDL/Lint.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/chanzuckerberg-miniwdl/WDL/Lint.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "WDL/Lint.py:259:42 Incompatible parameter type [6]: Expected `Optional[WDL.Error.SourceNode]` for 3rd positional only parameter to call `Linter.add` but got `WDL.Error.SourcePosition`.",
    "message": " Expected `Optional[WDL.Error.SourceNode]` for 3rd positional only parameter to call `Linter.add` but got `WDL.Error.SourcePosition`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 259,
    "warning_line": "                        self.add(pt, msg, arg_i.pos)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def add(self, obj: WDL.SourceNode, message: str, pos: Optional[WDL.SourceNode] = None):\n        \"\"\"\n",
        "source_code_len": 105,
        "target_code": "\n    def add(self, obj: WDL.SourceNode, message: str, pos: Optional[WDL.SourcePosition] = None):\n        \"\"\"\n",
        "target_code_len": 109,
        "diff_format": "@@ -23,3 +23,3 @@\n \n-    def add(self, obj: WDL.SourceNode, message: str, pos: Optional[WDL.SourceNode] = None):\n+    def add(self, obj: WDL.SourceNode, message: str, pos: Optional[WDL.SourcePosition] = None):\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def add(self, obj: WDL.SourceNode, message: str, pos: Optional[WDL.SourceNode] = None):\n        <IND>",
        "target_code_with_indent": "\n    <DED>def add(self, obj: WDL.SourceNode, message: str, pos: Optional[WDL.SourcePosition] = None):\n        <IND>"
      }
    ]
  },
  {
    "project": "chanzuckerberg/miniwdl",
    "commit": "1b3f26c69b306c12226eaa02145072af0de12839",
    "filename": "WDL/Lint.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/chanzuckerberg-miniwdl/WDL/Lint.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "WDL/Lint.py:270:24 Incompatible parameter type [6]: Expected `Optional[WDL.Error.SourceNode]` for 3rd positional only parameter to call `Linter.add` but got `WDL.Error.SourcePosition`.",
    "message": " Expected `Optional[WDL.Error.SourceNode]` for 3rd positional only parameter to call `Linter.add` but got `WDL.Error.SourcePosition`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 270,
    "warning_line": "                        obj.arguments[0].pos,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def add(self, obj: WDL.SourceNode, message: str, pos: Optional[WDL.SourceNode] = None):\n        \"\"\"\n",
        "source_code_len": 105,
        "target_code": "\n    def add(self, obj: WDL.SourceNode, message: str, pos: Optional[WDL.SourcePosition] = None):\n        \"\"\"\n",
        "target_code_len": 109,
        "diff_format": "@@ -23,3 +23,3 @@\n \n-    def add(self, obj: WDL.SourceNode, message: str, pos: Optional[WDL.SourceNode] = None):\n+    def add(self, obj: WDL.SourceNode, message: str, pos: Optional[WDL.SourcePosition] = None):\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def add(self, obj: WDL.SourceNode, message: str, pos: Optional[WDL.SourceNode] = None):\n        <IND>",
        "target_code_with_indent": "\n    <DED>def add(self, obj: WDL.SourceNode, message: str, pos: Optional[WDL.SourcePosition] = None):\n        <IND>"
      }
    ]
  },
  {
    "project": "chanzuckerberg/miniwdl",
    "commit": "1b3f26c69b306c12226eaa02145072af0de12839",
    "filename": "WDL/Lint.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/chanzuckerberg-miniwdl/WDL/Lint.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "WDL/Lint.py:274:21 Incompatible parameter type [6]: Expected `WDL.Expr.Base` for 1st positional only parameter to call `WDL.Walker.Base.expr` but got `WDL.Tree.Call`.",
    "message": " Expected `WDL.Expr.Base` for 1st positional only parameter to call `WDL.Walker.Base.expr` but got `WDL.Tree.Call`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 274,
    "warning_line": "        super().expr(obj)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def call(self, obj: WDL.Tree.Call) -> Any:\n        super().expr(obj)\n        for name, inp_expr in obj.inputs.items():\n",
        "source_code_len": 123,
        "target_code": "    def call(self, obj: WDL.Tree.Call) -> Any:\n        super().call(obj)\n        for name, inp_expr in obj.inputs.items():\n",
        "target_code_len": 123,
        "diff_format": "@@ -273,3 +268,3 @@\n     def call(self, obj: WDL.Tree.Call) -> Any:\n-        super().expr(obj)\n+        super().call(obj)\n         for name, inp_expr in obj.inputs.items():\n",
        "source_code_with_indent": "    <DED><DED><DED><DED>def call(self, obj: WDL.Tree.Call) -> Any:\n        <IND>super().expr(obj)\n        for name, inp_expr in obj.inputs.items():\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED><DED><DED><DED>def call(self, obj: WDL.Tree.Call) -> Any:\n        <IND>super().call(obj)\n        for name, inp_expr in obj.inputs.items():\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "chanzuckerberg/miniwdl",
    "commit": "1b3f26c69b306c12226eaa02145072af0de12839",
    "filename": "WDL/Lint.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/chanzuckerberg-miniwdl/WDL/Lint.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "WDL/Lint.py:277:60 Incompatible parameter type [6]: Expected `WDL.Type.Base` for 3rd positional only parameter to call `_compound_coercion` but got `typing.Type[WDL.Type.File]`.",
    "message": " Expected `WDL.Type.Base` for 3rd positional only parameter to call `_compound_coercion` but got `typing.Type[WDL.Type.File]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 277,
    "warning_line": "            if _compound_coercion(decl.type, inp_expr.type, WDL.Type.File):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _compound_coercion(\n    to_type: WDL.Type.Base,\n    from_type: WDL.Type.Base,\n    base_to_type: WDL.Type.Base,\n    extra_from_type: Optional[WDL.Type.Base] = None,\n):\n    # helper for StringCoercion and FileCoercion to detect coercions implied\n",
        "source_code_len": 249,
        "target_code": "\ndef _compound_coercion(to_type, from_type, base_to_type, extra_from_type=None):\n    # helper for StringCoercion and FileCoercion to detect coercions implied\n",
        "target_code_len": 158,
        "diff_format": "@@ -98,8 +98,3 @@\n \n-def _compound_coercion(\n-    to_type: WDL.Type.Base,\n-    from_type: WDL.Type.Base,\n-    base_to_type: WDL.Type.Base,\n-    extra_from_type: Optional[WDL.Type.Base] = None,\n-):\n+def _compound_coercion(to_type, from_type, base_to_type, extra_from_type=None):\n     # helper for StringCoercion and FileCoercion to detect coercions implied\n",
        "source_code_with_indent": "\n<DED>def _compound_coercion(\n    to_type: WDL.Type.Base,\n    from_type: WDL.Type.Base,\n    base_to_type: WDL.Type.Base,\n    extra_from_type: Optional[WDL.Type.Base] = None,\n):\n    # helper for StringCoercion and FileCoercion to detect coercions implied\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def _compound_coercion(to_type, from_type, base_to_type, extra_from_type=None):\n    # helper for StringCoercion and FileCoercion to detect coercions implied\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "chanzuckerberg/miniwdl",
    "commit": "1b3f26c69b306c12226eaa02145072af0de12839",
    "filename": "WDL/Lint.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/chanzuckerberg-miniwdl/WDL/Lint.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "WDL/Lint.py:279:35 Incompatible parameter type [6]: Expected `Optional[WDL.Error.SourceNode]` for 3rd positional only parameter to call `Linter.add` but got `WDL.Error.SourcePosition`.",
    "message": " Expected `Optional[WDL.Error.SourceNode]` for 3rd positional only parameter to call `Linter.add` but got `WDL.Error.SourcePosition`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 279,
    "warning_line": "                self.add(obj, msg, inp_expr.pos)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def add(self, obj: WDL.SourceNode, message: str, pos: Optional[WDL.SourceNode] = None):\n        \"\"\"\n",
        "source_code_len": 105,
        "target_code": "\n    def add(self, obj: WDL.SourceNode, message: str, pos: Optional[WDL.SourcePosition] = None):\n        \"\"\"\n",
        "target_code_len": 109,
        "diff_format": "@@ -23,3 +23,3 @@\n \n-    def add(self, obj: WDL.SourceNode, message: str, pos: Optional[WDL.SourceNode] = None):\n+    def add(self, obj: WDL.SourceNode, message: str, pos: Optional[WDL.SourcePosition] = None):\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def add(self, obj: WDL.SourceNode, message: str, pos: Optional[WDL.SourceNode] = None):\n        <IND>",
        "target_code_with_indent": "\n    <DED>def add(self, obj: WDL.SourceNode, message: str, pos: Optional[WDL.SourcePosition] = None):\n        <IND>"
      }
    ]
  },
  {
    "project": "chanzuckerberg/miniwdl",
    "commit": "1b3f26c69b306c12226eaa02145072af0de12839",
    "filename": "WDL/Lint.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/chanzuckerberg-miniwdl/WDL/Lint.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "WDL/Lint.py:315:42 Incompatible parameter type [6]: Expected `Optional[WDL.Error.SourceNode]` for 3rd positional only parameter to call `Linter.add` but got `WDL.Error.SourcePosition`.",
    "message": " Expected `Optional[WDL.Error.SourceNode]` for 3rd positional only parameter to call `Linter.add` but got `WDL.Error.SourcePosition`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 315,
    "warning_line": "                        self.add(pt, msg, arg_i.pos)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def add(self, obj: WDL.SourceNode, message: str, pos: Optional[WDL.SourceNode] = None):\n        \"\"\"\n",
        "source_code_len": 105,
        "target_code": "\n    def add(self, obj: WDL.SourceNode, message: str, pos: Optional[WDL.SourcePosition] = None):\n        \"\"\"\n",
        "target_code_len": 109,
        "diff_format": "@@ -23,3 +23,3 @@\n \n-    def add(self, obj: WDL.SourceNode, message: str, pos: Optional[WDL.SourceNode] = None):\n+    def add(self, obj: WDL.SourceNode, message: str, pos: Optional[WDL.SourcePosition] = None):\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def add(self, obj: WDL.SourceNode, message: str, pos: Optional[WDL.SourceNode] = None):\n        <IND>",
        "target_code_with_indent": "\n    <DED>def add(self, obj: WDL.SourceNode, message: str, pos: Optional[WDL.SourcePosition] = None):\n        <IND>"
      }
    ]
  },
  {
    "project": "chanzuckerberg/miniwdl",
    "commit": "1b3f26c69b306c12226eaa02145072af0de12839",
    "filename": "WDL/Lint.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/chanzuckerberg-miniwdl/WDL/Lint.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "WDL/Lint.py:322:35 Incompatible parameter type [6]: Expected `Optional[WDL.Error.SourceNode]` for 3rd positional only parameter to call `Linter.add` but got `WDL.Error.SourcePosition`.",
    "message": " Expected `Optional[WDL.Error.SourceNode]` for 3rd positional only parameter to call `Linter.add` but got `WDL.Error.SourcePosition`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 322,
    "warning_line": "                self.add(obj, msg, inp_expr.pos)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def add(self, obj: WDL.SourceNode, message: str, pos: Optional[WDL.SourceNode] = None):\n        \"\"\"\n",
        "source_code_len": 105,
        "target_code": "\n    def add(self, obj: WDL.SourceNode, message: str, pos: Optional[WDL.SourcePosition] = None):\n        \"\"\"\n",
        "target_code_len": 109,
        "diff_format": "@@ -23,3 +23,3 @@\n \n-    def add(self, obj: WDL.SourceNode, message: str, pos: Optional[WDL.SourceNode] = None):\n+    def add(self, obj: WDL.SourceNode, message: str, pos: Optional[WDL.SourcePosition] = None):\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def add(self, obj: WDL.SourceNode, message: str, pos: Optional[WDL.SourceNode] = None):\n        <IND>",
        "target_code_with_indent": "\n    <DED>def add(self, obj: WDL.SourceNode, message: str, pos: Optional[WDL.SourcePosition] = None):\n        <IND>"
      }
    ]
  },
  {
    "project": "chanzuckerberg/miniwdl",
    "commit": "1b3f26c69b306c12226eaa02145072af0de12839",
    "filename": "WDL/Lint.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/chanzuckerberg-miniwdl/WDL/Lint.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "WDL/Lint.py:361:66 Incompatible parameter type [6]: Expected `Optional[WDL.Error.SourceNode]` for 3rd positional only parameter to call `Linter.add` but got `WDL.Error.SourcePosition`.",
    "message": " Expected `Optional[WDL.Error.SourceNode]` for 3rd positional only parameter to call `Linter.add` but got `WDL.Error.SourcePosition`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 361,
    "warning_line": "                            self.add(getattr(obj, \"parent\"), msg, obj.arguments[i].pos)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def add(self, obj: WDL.SourceNode, message: str, pos: Optional[WDL.SourceNode] = None):\n        \"\"\"\n",
        "source_code_len": 105,
        "target_code": "\n    def add(self, obj: WDL.SourceNode, message: str, pos: Optional[WDL.SourcePosition] = None):\n        \"\"\"\n",
        "target_code_len": 109,
        "diff_format": "@@ -23,3 +23,3 @@\n \n-    def add(self, obj: WDL.SourceNode, message: str, pos: Optional[WDL.SourceNode] = None):\n+    def add(self, obj: WDL.SourceNode, message: str, pos: Optional[WDL.SourcePosition] = None):\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def add(self, obj: WDL.SourceNode, message: str, pos: Optional[WDL.SourceNode] = None):\n        <IND>",
        "target_code_with_indent": "\n    <DED>def add(self, obj: WDL.SourceNode, message: str, pos: Optional[WDL.SourcePosition] = None):\n        <IND>"
      }
    ]
  },
  {
    "project": "chanzuckerberg/miniwdl",
    "commit": "1b3f26c69b306c12226eaa02145072af0de12839",
    "filename": "WDL/Lint.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/chanzuckerberg-miniwdl/WDL/Lint.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "WDL/Lint.py:380:35 Incompatible parameter type [6]: Expected `Optional[WDL.Error.SourceNode]` for 3rd positional only parameter to call `Linter.add` but got `WDL.Error.SourcePosition`.",
    "message": " Expected `Optional[WDL.Error.SourceNode]` for 3rd positional only parameter to call `Linter.add` but got `WDL.Error.SourcePosition`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 380,
    "warning_line": "                self.add(obj, msg, inp_expr.pos)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def add(self, obj: WDL.SourceNode, message: str, pos: Optional[WDL.SourceNode] = None):\n        \"\"\"\n",
        "source_code_len": 105,
        "target_code": "\n    def add(self, obj: WDL.SourceNode, message: str, pos: Optional[WDL.SourcePosition] = None):\n        \"\"\"\n",
        "target_code_len": 109,
        "diff_format": "@@ -23,3 +23,3 @@\n \n-    def add(self, obj: WDL.SourceNode, message: str, pos: Optional[WDL.SourceNode] = None):\n+    def add(self, obj: WDL.SourceNode, message: str, pos: Optional[WDL.SourcePosition] = None):\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def add(self, obj: WDL.SourceNode, message: str, pos: Optional[WDL.SourceNode] = None):\n        <IND>",
        "target_code_with_indent": "\n    <DED>def add(self, obj: WDL.SourceNode, message: str, pos: Optional[WDL.SourcePosition] = None):\n        <IND>"
      }
    ]
  },
  {
    "project": "chanzuckerberg/miniwdl",
    "commit": "1b3f26c69b306c12226eaa02145072af0de12839",
    "filename": "WDL/Lint.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/chanzuckerberg-miniwdl/WDL/Lint.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "WDL/Lint.py:496:50 Incompatible parameter type [6]: Expected `Optional[WDL.Error.SourceNode]` for 3rd positional only parameter to call `Linter.add` but got `WDL.Error.SourcePosition`.",
    "message": " Expected `Optional[WDL.Error.SourceNode]` for 3rd positional only parameter to call `Linter.add` but got `WDL.Error.SourcePosition`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 496,
    "warning_line": "            self.add(getattr(obj, \"parent\"), msg, obj.pos)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def add(self, obj: WDL.SourceNode, message: str, pos: Optional[WDL.SourceNode] = None):\n        \"\"\"\n",
        "source_code_len": 105,
        "target_code": "\n    def add(self, obj: WDL.SourceNode, message: str, pos: Optional[WDL.SourcePosition] = None):\n        \"\"\"\n",
        "target_code_len": 109,
        "diff_format": "@@ -23,3 +23,3 @@\n \n-    def add(self, obj: WDL.SourceNode, message: str, pos: Optional[WDL.SourceNode] = None):\n+    def add(self, obj: WDL.SourceNode, message: str, pos: Optional[WDL.SourcePosition] = None):\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def add(self, obj: WDL.SourceNode, message: str, pos: Optional[WDL.SourceNode] = None):\n        <IND>",
        "target_code_with_indent": "\n    <DED>def add(self, obj: WDL.SourceNode, message: str, pos: Optional[WDL.SourcePosition] = None):\n        <IND>"
      }
    ]
  },
  {
    "project": "chanzuckerberg/miniwdl",
    "commit": "1b3f26c69b306c12226eaa02145072af0de12839",
    "filename": "WDL/Lint.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/chanzuckerberg-miniwdl/WDL/Lint.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "WDL/Lint.py:653:20 Incompatible parameter type [6]: Expected `Optional[WDL.Error.SourceNode]` for 3rd positional only parameter to call `Linter.add` but got `WDL.Error.SourcePosition`.",
    "message": " Expected `Optional[WDL.Error.SourceNode]` for 3rd positional only parameter to call `Linter.add` but got `WDL.Error.SourcePosition`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 653,
    "warning_line": "                    obj.command.pos,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def add(self, obj: WDL.SourceNode, message: str, pos: Optional[WDL.SourceNode] = None):\n        \"\"\"\n",
        "source_code_len": 105,
        "target_code": "\n    def add(self, obj: WDL.SourceNode, message: str, pos: Optional[WDL.SourcePosition] = None):\n        \"\"\"\n",
        "target_code_len": 109,
        "diff_format": "@@ -23,3 +23,3 @@\n \n-    def add(self, obj: WDL.SourceNode, message: str, pos: Optional[WDL.SourceNode] = None):\n+    def add(self, obj: WDL.SourceNode, message: str, pos: Optional[WDL.SourcePosition] = None):\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def add(self, obj: WDL.SourceNode, message: str, pos: Optional[WDL.SourceNode] = None):\n        <IND>",
        "target_code_with_indent": "\n    <DED>def add(self, obj: WDL.SourceNode, message: str, pos: Optional[WDL.SourcePosition] = None):\n        <IND>"
      }
    ]
  },
  {
    "project": "chanzuckerberg/miniwdl",
    "commit": "1b3f26c69b306c12226eaa02145072af0de12839",
    "filename": "WDL/Lint.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/chanzuckerberg-miniwdl/WDL/Lint.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "WDL/Lint.py:668:24 Incompatible parameter type [6]: Expected `Optional[WDL.Error.SourceNode]` for 3rd positional only parameter to call `Linter.add` but got `WDL.Error.SourcePosition`.",
    "message": " Expected `Optional[WDL.Error.SourceNode]` for 3rd positional only parameter to call `Linter.add` but got `WDL.Error.SourcePosition`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 668,
    "warning_line": "                        WDL.Error.SourcePosition(",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def add(self, obj: WDL.SourceNode, message: str, pos: Optional[WDL.SourceNode] = None):\n        \"\"\"\n",
        "source_code_len": 105,
        "target_code": "\n    def add(self, obj: WDL.SourceNode, message: str, pos: Optional[WDL.SourcePosition] = None):\n        \"\"\"\n",
        "target_code_len": 109,
        "diff_format": "@@ -23,3 +23,3 @@\n \n-    def add(self, obj: WDL.SourceNode, message: str, pos: Optional[WDL.SourceNode] = None):\n+    def add(self, obj: WDL.SourceNode, message: str, pos: Optional[WDL.SourcePosition] = None):\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def add(self, obj: WDL.SourceNode, message: str, pos: Optional[WDL.SourceNode] = None):\n        <IND>",
        "target_code_with_indent": "\n    <DED>def add(self, obj: WDL.SourceNode, message: str, pos: Optional[WDL.SourcePosition] = None):\n        <IND>"
      }
    ]
  },
  {
    "project": "chanzuckerberg/miniwdl",
    "commit": "1b3f26c69b306c12226eaa02145072af0de12839",
    "filename": "WDL/Lint.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/chanzuckerberg-miniwdl/WDL/Lint.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "WDL/Lint.py:680:20 Incompatible parameter type [6]: Expected `Optional[WDL.Error.SourceNode]` for 3rd positional only parameter to call `Linter.add` but got `WDL.Error.SourcePosition`.",
    "message": " Expected `Optional[WDL.Error.SourceNode]` for 3rd positional only parameter to call `Linter.add` but got `WDL.Error.SourcePosition`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 680,
    "warning_line": "                    obj.command.pos,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def add(self, obj: WDL.SourceNode, message: str, pos: Optional[WDL.SourceNode] = None):\n        \"\"\"\n",
        "source_code_len": 105,
        "target_code": "\n    def add(self, obj: WDL.SourceNode, message: str, pos: Optional[WDL.SourcePosition] = None):\n        \"\"\"\n",
        "target_code_len": 109,
        "diff_format": "@@ -23,3 +23,3 @@\n \n-    def add(self, obj: WDL.SourceNode, message: str, pos: Optional[WDL.SourceNode] = None):\n+    def add(self, obj: WDL.SourceNode, message: str, pos: Optional[WDL.SourcePosition] = None):\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def add(self, obj: WDL.SourceNode, message: str, pos: Optional[WDL.SourceNode] = None):\n        <IND>",
        "target_code_with_indent": "\n    <DED>def add(self, obj: WDL.SourceNode, message: str, pos: Optional[WDL.SourcePosition] = None):\n        <IND>"
      }
    ]
  },
  {
    "project": "chanzuckerberg/miniwdl",
    "commit": "1b3f26c69b306c12226eaa02145072af0de12839",
    "filename": "WDL/Lint.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/chanzuckerberg-miniwdl/WDL/Lint.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "WDL/Lint.py:736:20 Incompatible parameter type [6]: Expected `Optional[WDL.Error.SourceNode]` for 3rd positional only parameter to call `Linter.add` but got `WDL.Error.SourcePosition`.",
    "message": " Expected `Optional[WDL.Error.SourceNode]` for 3rd positional only parameter to call `Linter.add` but got `WDL.Error.SourcePosition`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 736,
    "warning_line": "                    WDL.Error.SourcePosition(",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def add(self, obj: WDL.SourceNode, message: str, pos: Optional[WDL.SourceNode] = None):\n        \"\"\"\n",
        "source_code_len": 105,
        "target_code": "\n    def add(self, obj: WDL.SourceNode, message: str, pos: Optional[WDL.SourcePosition] = None):\n        \"\"\"\n",
        "target_code_len": 109,
        "diff_format": "@@ -23,3 +23,3 @@\n \n-    def add(self, obj: WDL.SourceNode, message: str, pos: Optional[WDL.SourceNode] = None):\n+    def add(self, obj: WDL.SourceNode, message: str, pos: Optional[WDL.SourcePosition] = None):\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def add(self, obj: WDL.SourceNode, message: str, pos: Optional[WDL.SourceNode] = None):\n        <IND>",
        "target_code_with_indent": "\n    <DED>def add(self, obj: WDL.SourceNode, message: str, pos: Optional[WDL.SourcePosition] = None):\n        <IND>"
      }
    ]
  },
  {
    "project": "chanzuckerberg/miniwdl",
    "commit": "1b3f26c69b306c12226eaa02145072af0de12839",
    "filename": "WDL/StdLib.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/chanzuckerberg-miniwdl/WDL/StdLib.py",
    "file_hunks_size": 15,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "WDL/StdLib.py:180:35 Incompatible parameter type [6]: Expected `Tuple[T.Base, T.Base]` for 1st positional only parameter to call `T.Map.__init__` but got `None`.",
    "message": " Expected `Tuple[T.Base, T.Base]` for 1st positional only parameter to call `T.Map.__init__` but got `None`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 180,
    "warning_line": "    (\"read_map\", [T.File()], T.Map(None), _notimpl),",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    (\"read_array\", [T.File()], T.Array(T.Any()), _notimpl),\n    (\"read_map\", [T.File()], T.Map(None), _notimpl),\n    (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),\n",
        "source_code_len": 173,
        "target_code": "    (\"read_array\", [T.File()], T.Array(T.Any()), _notimpl),\n    (\"read_map\", [T.File()], T.Map((T.Any(), T.Any())), _notimpl),\n    (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),\n",
        "target_code_len": 187,
        "diff_format": "@@ -179,3 +178,3 @@\n     (\"read_array\", [T.File()], T.Array(T.Any()), _notimpl),\n-    (\"read_map\", [T.File()], T.Map(None), _notimpl),\n+    (\"read_map\", [T.File()], T.Map((T.Any(), T.Any())), _notimpl),\n     (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),\n",
        "source_code_with_indent": "    (\"read_array\", [T.File()], T.Array(T.Any()), _notimpl),\n    (\"read_map\", [T.File()], T.Map(None), _notimpl),\n    (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    (\"read_array\", [T.File()], T.Array(T.Any()), _notimpl),\n    (\"read_map\", [T.File()], T.Map((T.Any(), T.Any())), _notimpl),\n    (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "chanzuckerberg/miniwdl",
    "commit": "1b3f26c69b306c12226eaa02145072af0de12839",
    "filename": "WDL/StdLib.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/chanzuckerberg-miniwdl/WDL/StdLib.py",
    "file_hunks_size": 15,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "WDL/StdLib.py:186:25 Incompatible parameter type [6]: Expected `Tuple[T.Base, T.Base]` for 1st positional only parameter to call `T.Map.__init__` but got `None`.",
    "message": " Expected `Tuple[T.Base, T.Base]` for 1st positional only parameter to call `T.Map.__init__` but got `None`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 186,
    "warning_line": "    (\"write_map\", [T.Map(None)], T.File(), _notimpl),",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    (\"write_tsv\", [T.Array(T.Array(T.String()))], T.File(), _notimpl),\n    (\"write_map\", [T.Map(None)], T.File(), _notimpl),\n    (\"write_json\", [T.Any()], T.File(), _notimpl),\n",
        "source_code_len": 176,
        "target_code": "    (\"write_tsv\", [T.Array(T.Array(T.String()))], T.File(), _notimpl),\n    (\"write_map\", [T.Map((T.Any(), T.Any()))], T.File(), _notimpl),\n    (\"write_json\", [T.Any()], T.File(), _notimpl),\n",
        "target_code_len": 190,
        "diff_format": "@@ -185,3 +184,3 @@\n     (\"write_tsv\", [T.Array(T.Array(T.String()))], T.File(), _notimpl),\n-    (\"write_map\", [T.Map(None)], T.File(), _notimpl),\n+    (\"write_map\", [T.Map((T.Any(), T.Any()))], T.File(), _notimpl),\n     (\"write_json\", [T.Any()], T.File(), _notimpl),\n",
        "source_code_with_indent": "    (\"write_tsv\", [T.Array(T.Array(T.String()))], T.File(), _notimpl),\n    (\"write_map\", [T.Map(None)], T.File(), _notimpl),\n    (\"write_json\", [T.Any()], T.File(), _notimpl),\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    (\"write_tsv\", [T.Array(T.Array(T.String()))], T.File(), _notimpl),\n    (\"write_map\", [T.Map((T.Any(), T.Any()))], T.File(), _notimpl),\n    (\"write_json\", [T.Any()], T.File(), _notimpl),\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "chanzuckerberg/miniwdl",
    "commit": "1b3f26c69b306c12226eaa02145072af0de12839",
    "filename": "WDL/Tree.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/chanzuckerberg-miniwdl/WDL/Tree.py",
    "file_hunks_size": 38,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "WDL/Tree.py:294:23 Incompatible parameter type [6]: Expected `Tuple[Dict[int, SourceNode], _AdjM]` for 1st positional only parameter to call `_detect_cycles` but got `Tuple[Dict[int, Union[Call, Decl]], _AdjM]`.",
    "message": " Expected `Tuple[Dict[int, SourceNode], _AdjM]` for 1st positional only parameter to call `_detect_cycles` but got `Tuple[Dict[int, Union[Call, Decl]], _AdjM]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 294,
    "warning_line": "        _detect_cycles(_dependency_matrix(ch for ch in self.children if isinstance(ch, Decl)))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        # check for cyclic dependencies among decls\n        _detect_cycles(_dependency_matrix(ch for ch in self.children if isinstance(ch, Decl)))\n\n",
        "source_code_len": 148,
        "target_code": "        # check for cyclic dependencies among decls\n        _detect_cycles(\n            # pyre-ignore\n            _dependency_matrix(ch for ch in self.children if isinstance(ch, Decl))\n        )\n\n",
        "target_code_len": 196,
        "diff_format": "@@ -293,3 +292,6 @@\n         # check for cyclic dependencies among decls\n-        _detect_cycles(_dependency_matrix(ch for ch in self.children if isinstance(ch, Decl)))\n+        _detect_cycles(\n+            # pyre-ignore\n+            _dependency_matrix(ch for ch in self.children if isinstance(ch, Decl))\n+        )\n \n",
        "source_code_with_indent": "        # check for cyclic dependencies among decls\n        <DED><DED>_detect_cycles(_dependency_matrix(ch for ch in self.children if isinstance(ch, Decl)))\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        # check for cyclic dependencies among decls\n        <DED><DED>_detect_cycles(\n            # pyre-ignore\n            _dependency_matrix(ch for ch in self.children if isinstance(ch, Decl))\n        )\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "chanzuckerberg/miniwdl",
    "commit": "1b3f26c69b306c12226eaa02145072af0de12839",
    "filename": "WDL/Tree.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/chanzuckerberg-miniwdl/WDL/Tree.py",
    "file_hunks_size": 38,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "WDL/Tree.py:668:8 Incompatible attribute type [8]: Attribute `elements` declared in class `Workflow` has type `List[Union[Call, Conditional, Decl, Scatter]]` but is used as type `List[Union[Call, Decl, Scatter]]`.",
    "message": " Attribute `elements` declared in class `Workflow` has type `List[Union[Call, Conditional, Decl, Scatter]]` but is used as type `List[Union[Call, Decl, Scatter]]`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 668,
    "warning_line": "        self.elements = elements",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        inputs: Optional[List[Decl]],\n        elements: List[Union[Decl, Call, Scatter]],\n        outputs: Optional[List[Decl]],\n",
        "source_code_len": 129,
        "target_code": "        inputs: Optional[List[Decl]],\n        elements: List[Union[Decl, Call, Scatter, Conditional]],\n        outputs: Optional[List[Decl]],\n",
        "target_code_len": 142,
        "diff_format": "@@ -657,3 +667,3 @@\n         inputs: Optional[List[Decl]],\n-        elements: List[Union[Decl, Call, Scatter]],\n+        elements: List[Union[Decl, Call, Scatter, Conditional]],\n         outputs: Optional[List[Decl]],\n",
        "source_code_with_indent": "        inputs: Optional[List[Decl]],\n        elements: List[Union[Decl, Call, Scatter]],\n        outputs: Optional[List[Decl]],\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        inputs: Optional[List[Decl]],\n        elements: List[Union[Decl, Call, Scatter, Conditional]],\n        outputs: Optional[List[Decl]],\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "chanzuckerberg/miniwdl",
    "commit": "1b3f26c69b306c12226eaa02145072af0de12839",
    "filename": "WDL/Tree.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/chanzuckerberg-miniwdl/WDL/Tree.py",
    "file_hunks_size": 38,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "WDL/Tree.py:793:23 Incompatible parameter type [6]: Expected `Tuple[Dict[int, SourceNode], _AdjM]` for 1st positional only parameter to call `_detect_cycles` but got `Tuple[Dict[int, Union[Call, Decl]], _AdjM]`.",
    "message": " Expected `Tuple[Dict[int, SourceNode], _AdjM]` for 1st positional only parameter to call `_detect_cycles` but got `Tuple[Dict[int, Union[Call, Decl]], _AdjM]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 793,
    "warning_line": "        _detect_cycles(_dependency_matrix(_decls_and_calls(self)))",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        # 6. check for cyclic dependencies\n        _detect_cycles(_dependency_matrix(_decls_and_calls(self)))\n\n",
        "source_code_len": 111,
        "target_code": "        # 6. check for cyclic dependencies\n        _detect_cycles(_dependency_matrix(_decls_and_calls(self)))  # pyre-fixme\n\n",
        "target_code_len": 125,
        "diff_format": "@@ -792,3 +802,3 @@\n         # 6. check for cyclic dependencies\n-        _detect_cycles(_dependency_matrix(_decls_and_calls(self)))\n+        _detect_cycles(_dependency_matrix(_decls_and_calls(self)))  # pyre-fixme\n \n",
        "source_code_with_indent": "        # 6. check for cyclic dependencies\n        <DED><DED><DED>_detect_cycles(_dependency_matrix(_decls_and_calls(self)))\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        # 6. check for cyclic dependencies\n        <DED><DED><DED>_detect_cycles(_dependency_matrix(_decls_and_calls(self)))  # pyre-fixme\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "chanzuckerberg/miniwdl",
    "commit": "1b3f26c69b306c12226eaa02145072af0de12839",
    "filename": "WDL/Tree.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/chanzuckerberg-miniwdl/WDL/Tree.py",
    "file_hunks_size": 38,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "WDL/Tree.py:815:24 Incompatible parameter type [6]: Expected `SourceNode` for 1st positional only parameter to call `Err.NoSuchTask.__init__` but got `Optional[SourcePosition]`.",
    "message": " Expected `SourceNode` for 1st positional only parameter to call `Err.NoSuchTask.__init__` but got `Optional[SourcePosition]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 815,
    "warning_line": "                        self._output_idents_pos, \".\".join(wildcard_namespace)"
  },
  {
    "project": "chanzuckerberg/miniwdl",
    "commit": "1b3f26c69b306c12226eaa02145072af0de12839",
    "filename": "WDL/Type.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/chanzuckerberg-miniwdl/WDL/Type.py",
    "file_hunks_size": 12,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "WDL/Type.py:106:8 Incompatible return type [7]: Expected `Variable[TVBase (bound to Base)]` but got `Base`.",
    "message": " Expected `Variable[TVBase (bound to Base)]` but got `Base`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 106,
    "warning_line": "        return ans"
  },
  {
    "project": "chanzuckerberg/miniwdl",
    "commit": "1b3f26c69b306c12226eaa02145072af0de12839",
    "filename": "WDL/Value.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/chanzuckerberg-miniwdl/WDL/Value.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "WDL/Value.py:49:12 Incompatible return type [7]: Expected `Variable[BaseT (bound to Base)]` but got `String`.",
    "message": " Expected `Variable[BaseT (bound to Base)]` but got `String`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 49,
    "warning_line": "            return String(str(self.value))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def coerce(self, desired_type: Optional[T.Base] = None) -> BaseT:\n        \"\"\"\n",
        "source_code_len": 83,
        "target_code": "\n    def coerce(self, desired_type: Optional[T.Base] = None) -> \"Base\":\n        \"\"\"\n",
        "target_code_len": 84,
        "diff_format": "@@ -38,3 +35,3 @@\n \n-    def coerce(self, desired_type: Optional[T.Base] = None) -> BaseT:\n+    def coerce(self, desired_type: Optional[T.Base] = None) -> \"Base\":\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def coerce(self, desired_type: Optional[T.Base] = None) -> BaseT:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def coerce(self, desired_type: Optional[T.Base] = None) -> \"Base\":\n        <IND>"
      }
    ]
  },
  {
    "project": "chanzuckerberg/miniwdl",
    "commit": "1b3f26c69b306c12226eaa02145072af0de12839",
    "filename": "WDL/Value.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/chanzuckerberg-miniwdl/WDL/Value.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "WDL/Value.py:51:8 Incompatible return type [7]: Expected `Variable[BaseT (bound to Base)]` but got `Base`.",
    "message": " Expected `Variable[BaseT (bound to Base)]` but got `Base`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 51,
    "warning_line": "        return self",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def coerce(self, desired_type: Optional[T.Base] = None) -> BaseT:\n        \"\"\"\n",
        "source_code_len": 83,
        "target_code": "\n    def coerce(self, desired_type: Optional[T.Base] = None) -> \"Base\":\n        \"\"\"\n",
        "target_code_len": 84,
        "diff_format": "@@ -38,3 +35,3 @@\n \n-    def coerce(self, desired_type: Optional[T.Base] = None) -> BaseT:\n+    def coerce(self, desired_type: Optional[T.Base] = None) -> \"Base\":\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def coerce(self, desired_type: Optional[T.Base] = None) -> BaseT:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def coerce(self, desired_type: Optional[T.Base] = None) -> \"Base\":\n        <IND>"
      }
    ]
  }
]