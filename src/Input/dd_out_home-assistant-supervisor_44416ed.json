[
  {
    "project": "home-assistant/supervisor",
    "commit": "44416edfd24b832a9bf46f9b247896681f7c8ded",
    "filename": "supervisor/api/hardware.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/home-assistant-supervisor/supervisor/api/hardware.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "supervisor/api/hardware.py:57:8 Incompatible return type [7]: Expected `None` but got `asyncio.futures.Future[None]`.",
    "message": " Expected `None` but got `asyncio.futures.Future[None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 57,
    "warning_line": "        return asyncio.shield(self.sys_hardware.udev_trigger())",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import logging\nfrom typing import Any, Dict\n\n",
        "source_code_len": 45,
        "target_code": "import logging\nfrom typing import Any, Awaitable, Dict\n\n",
        "target_code_len": 56,
        "diff_format": "@@ -3,3 +3,3 @@\n import logging\n-from typing import Any, Dict\n+from typing import Any, Awaitable, Dict\n \n",
        "source_code_with_indent": "import logging\nfrom typing import Any, Dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import logging\nfrom typing import Any, Awaitable, Dict\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @api_process\n    def trigger(self, request: web.Request) -> None:\n        \"\"\"Trigger a udev device reload.\"\"\"\n",
        "source_code_len": 114,
        "target_code": "    @api_process\n    def trigger(self, request: web.Request) -> Awaitable[None]:\n        \"\"\"Trigger a udev device reload.\"\"\"\n",
        "target_code_len": 125,
        "diff_format": "@@ -54,3 +54,3 @@\n     @api_process\n-    def trigger(self, request: web.Request) -> None:\n+    def trigger(self, request: web.Request) -> Awaitable[None]:\n         \"\"\"Trigger a udev device reload.\"\"\"\n",
        "source_code_with_indent": "    <DED>@api_process\n    def trigger(self, request: web.Request) -> None:\n        <IND>\"\"\"Trigger a udev device reload.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@api_process\n    def trigger(self, request: web.Request) -> Awaitable[None]:\n        <IND>\"\"\"Trigger a udev device reload.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "home-assistant/supervisor",
    "commit": "44416edfd24b832a9bf46f9b247896681f7c8ded",
    "filename": "supervisor/api/homeassistant.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/home-assistant-supervisor/supervisor/api/homeassistant.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "supervisor/api/homeassistant.py:146:8 Incompatible return type [7]: Expected `Coroutine[typing.Any, typing.Any, typing.Any]` but got `asyncio.futures.Future[typing.Any]`.",
    "message": " Expected `Coroutine[typing.Any, typing.Any, typing.Any]` but got `asyncio.futures.Future[typing.Any]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 146,
    "warning_line": "        return asyncio.shield(self.sys_homeassistant.stop())",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import logging\nfrom typing import Any, Coroutine, Dict\n\n",
        "source_code_len": 56,
        "target_code": "import logging\nfrom typing import Any, Awaitable, Dict\n\n",
        "target_code_len": 56,
        "diff_format": "@@ -3,3 +3,3 @@\n import logging\n-from typing import Any, Coroutine, Dict\n+from typing import Any, Awaitable, Dict\n \n",
        "source_code_with_indent": "import logging\nfrom typing import Any, Coroutine, Dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import logging\nfrom typing import Any, Awaitable, Dict\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @api_process\n    def stop(self, request: web.Request) -> Coroutine:\n        \"\"\"Stop Home Assistant.\"\"\"\n",
        "source_code_len": 107,
        "target_code": "    @api_process\n    def stop(self, request: web.Request) -> Awaitable[None]:\n        \"\"\"Stop Home Assistant.\"\"\"\n",
        "target_code_len": 113,
        "diff_format": "@@ -143,3 +143,3 @@\n     @api_process\n-    def stop(self, request: web.Request) -> Coroutine:\n+    def stop(self, request: web.Request) -> Awaitable[None]:\n         \"\"\"Stop Home Assistant.\"\"\"\n",
        "source_code_with_indent": "    <DED>@api_process\n    def stop(self, request: web.Request) -> Coroutine:\n        <IND>\"\"\"Stop Home Assistant.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@api_process\n    def stop(self, request: web.Request) -> Awaitable[None]:\n        <IND>\"\"\"Stop Home Assistant.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @api_process\n    def start(self, request: web.Request) -> Coroutine:\n        \"\"\"Start Home Assistant.\"\"\"\n",
        "source_code_len": 109,
        "target_code": "    @api_process\n    def start(self, request: web.Request) -> Awaitable[None]:\n        \"\"\"Start Home Assistant.\"\"\"\n",
        "target_code_len": 115,
        "diff_format": "@@ -148,3 +148,3 @@\n     @api_process\n-    def start(self, request: web.Request) -> Coroutine:\n+    def start(self, request: web.Request) -> Awaitable[None]:\n         \"\"\"Start Home Assistant.\"\"\"\n",
        "source_code_with_indent": "    <DED>@api_process\n    def start(self, request: web.Request) -> Coroutine:\n        <IND>\"\"\"Start Home Assistant.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@api_process\n    def start(self, request: web.Request) -> Awaitable[None]:\n        <IND>\"\"\"Start Home Assistant.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @api_process\n    def restart(self, request: web.Request) -> Coroutine:\n        \"\"\"Restart Home Assistant.\"\"\"\n",
        "source_code_len": 113,
        "target_code": "    @api_process\n    def restart(self, request: web.Request) -> Awaitable[None]:\n        \"\"\"Restart Home Assistant.\"\"\"\n",
        "target_code_len": 119,
        "diff_format": "@@ -153,3 +153,3 @@\n     @api_process\n-    def restart(self, request: web.Request) -> Coroutine:\n+    def restart(self, request: web.Request) -> Awaitable[None]:\n         \"\"\"Restart Home Assistant.\"\"\"\n",
        "source_code_with_indent": "    <DED>@api_process\n    def restart(self, request: web.Request) -> Coroutine:\n        <IND>\"\"\"Restart Home Assistant.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@api_process\n    def restart(self, request: web.Request) -> Awaitable[None]:\n        <IND>\"\"\"Restart Home Assistant.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @api_process\n    def rebuild(self, request: web.Request) -> Coroutine:\n        \"\"\"Rebuild Home Assistant.\"\"\"\n",
        "source_code_len": 113,
        "target_code": "    @api_process\n    def rebuild(self, request: web.Request) -> Awaitable[None]:\n        \"\"\"Rebuild Home Assistant.\"\"\"\n",
        "target_code_len": 119,
        "diff_format": "@@ -158,3 +158,3 @@\n     @api_process\n-    def rebuild(self, request: web.Request) -> Coroutine:\n+    def rebuild(self, request: web.Request) -> Awaitable[None]:\n         \"\"\"Rebuild Home Assistant.\"\"\"\n",
        "source_code_with_indent": "    <DED>@api_process\n    def rebuild(self, request: web.Request) -> Coroutine:\n        <IND>\"\"\"Rebuild Home Assistant.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@api_process\n    def rebuild(self, request: web.Request) -> Awaitable[None]:\n        <IND>\"\"\"Rebuild Home Assistant.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @api_process_raw(CONTENT_TYPE_BINARY)\n    def logs(self, request: web.Request) -> Coroutine:\n        \"\"\"Return Home Assistant Docker logs.\"\"\"\n",
        "source_code_len": 146,
        "target_code": "    @api_process_raw(CONTENT_TYPE_BINARY)\n    def logs(self, request: web.Request) -> Awaitable[bytes]:\n        \"\"\"Return Home Assistant Docker logs.\"\"\"\n",
        "target_code_len": 153,
        "diff_format": "@@ -163,3 +163,3 @@\n     @api_process_raw(CONTENT_TYPE_BINARY)\n-    def logs(self, request: web.Request) -> Coroutine:\n+    def logs(self, request: web.Request) -> Awaitable[bytes]:\n         \"\"\"Return Home Assistant Docker logs.\"\"\"\n",
        "source_code_with_indent": "    <DED>@api_process_raw(CONTENT_TYPE_BINARY)\n    def logs(self, request: web.Request) -> Coroutine:\n        <IND>\"\"\"Return Home Assistant Docker logs.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@api_process_raw(CONTENT_TYPE_BINARY)\n    def logs(self, request: web.Request) -> Awaitable[bytes]:\n        <IND>\"\"\"Return Home Assistant Docker logs.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "home-assistant/supervisor",
    "commit": "44416edfd24b832a9bf46f9b247896681f7c8ded",
    "filename": "supervisor/api/homeassistant.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/home-assistant-supervisor/supervisor/api/homeassistant.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "supervisor/api/homeassistant.py:151:8 Incompatible return type [7]: Expected `Coroutine[typing.Any, typing.Any, typing.Any]` but got `asyncio.futures.Future[typing.Any]`.",
    "message": " Expected `Coroutine[typing.Any, typing.Any, typing.Any]` but got `asyncio.futures.Future[typing.Any]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 151,
    "warning_line": "        return asyncio.shield(self.sys_homeassistant.start())",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import logging\nfrom typing import Any, Coroutine, Dict\n\n",
        "source_code_len": 56,
        "target_code": "import logging\nfrom typing import Any, Awaitable, Dict\n\n",
        "target_code_len": 56,
        "diff_format": "@@ -3,3 +3,3 @@\n import logging\n-from typing import Any, Coroutine, Dict\n+from typing import Any, Awaitable, Dict\n \n",
        "source_code_with_indent": "import logging\nfrom typing import Any, Coroutine, Dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import logging\nfrom typing import Any, Awaitable, Dict\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @api_process\n    def stop(self, request: web.Request) -> Coroutine:\n        \"\"\"Stop Home Assistant.\"\"\"\n",
        "source_code_len": 107,
        "target_code": "    @api_process\n    def stop(self, request: web.Request) -> Awaitable[None]:\n        \"\"\"Stop Home Assistant.\"\"\"\n",
        "target_code_len": 113,
        "diff_format": "@@ -143,3 +143,3 @@\n     @api_process\n-    def stop(self, request: web.Request) -> Coroutine:\n+    def stop(self, request: web.Request) -> Awaitable[None]:\n         \"\"\"Stop Home Assistant.\"\"\"\n",
        "source_code_with_indent": "    <DED>@api_process\n    def stop(self, request: web.Request) -> Coroutine:\n        <IND>\"\"\"Stop Home Assistant.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@api_process\n    def stop(self, request: web.Request) -> Awaitable[None]:\n        <IND>\"\"\"Stop Home Assistant.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @api_process\n    def start(self, request: web.Request) -> Coroutine:\n        \"\"\"Start Home Assistant.\"\"\"\n",
        "source_code_len": 109,
        "target_code": "    @api_process\n    def start(self, request: web.Request) -> Awaitable[None]:\n        \"\"\"Start Home Assistant.\"\"\"\n",
        "target_code_len": 115,
        "diff_format": "@@ -148,3 +148,3 @@\n     @api_process\n-    def start(self, request: web.Request) -> Coroutine:\n+    def start(self, request: web.Request) -> Awaitable[None]:\n         \"\"\"Start Home Assistant.\"\"\"\n",
        "source_code_with_indent": "    <DED>@api_process\n    def start(self, request: web.Request) -> Coroutine:\n        <IND>\"\"\"Start Home Assistant.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@api_process\n    def start(self, request: web.Request) -> Awaitable[None]:\n        <IND>\"\"\"Start Home Assistant.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @api_process\n    def restart(self, request: web.Request) -> Coroutine:\n        \"\"\"Restart Home Assistant.\"\"\"\n",
        "source_code_len": 113,
        "target_code": "    @api_process\n    def restart(self, request: web.Request) -> Awaitable[None]:\n        \"\"\"Restart Home Assistant.\"\"\"\n",
        "target_code_len": 119,
        "diff_format": "@@ -153,3 +153,3 @@\n     @api_process\n-    def restart(self, request: web.Request) -> Coroutine:\n+    def restart(self, request: web.Request) -> Awaitable[None]:\n         \"\"\"Restart Home Assistant.\"\"\"\n",
        "source_code_with_indent": "    <DED>@api_process\n    def restart(self, request: web.Request) -> Coroutine:\n        <IND>\"\"\"Restart Home Assistant.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@api_process\n    def restart(self, request: web.Request) -> Awaitable[None]:\n        <IND>\"\"\"Restart Home Assistant.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @api_process\n    def rebuild(self, request: web.Request) -> Coroutine:\n        \"\"\"Rebuild Home Assistant.\"\"\"\n",
        "source_code_len": 113,
        "target_code": "    @api_process\n    def rebuild(self, request: web.Request) -> Awaitable[None]:\n        \"\"\"Rebuild Home Assistant.\"\"\"\n",
        "target_code_len": 119,
        "diff_format": "@@ -158,3 +158,3 @@\n     @api_process\n-    def rebuild(self, request: web.Request) -> Coroutine:\n+    def rebuild(self, request: web.Request) -> Awaitable[None]:\n         \"\"\"Rebuild Home Assistant.\"\"\"\n",
        "source_code_with_indent": "    <DED>@api_process\n    def rebuild(self, request: web.Request) -> Coroutine:\n        <IND>\"\"\"Rebuild Home Assistant.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@api_process\n    def rebuild(self, request: web.Request) -> Awaitable[None]:\n        <IND>\"\"\"Rebuild Home Assistant.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @api_process_raw(CONTENT_TYPE_BINARY)\n    def logs(self, request: web.Request) -> Coroutine:\n        \"\"\"Return Home Assistant Docker logs.\"\"\"\n",
        "source_code_len": 146,
        "target_code": "    @api_process_raw(CONTENT_TYPE_BINARY)\n    def logs(self, request: web.Request) -> Awaitable[bytes]:\n        \"\"\"Return Home Assistant Docker logs.\"\"\"\n",
        "target_code_len": 153,
        "diff_format": "@@ -163,3 +163,3 @@\n     @api_process_raw(CONTENT_TYPE_BINARY)\n-    def logs(self, request: web.Request) -> Coroutine:\n+    def logs(self, request: web.Request) -> Awaitable[bytes]:\n         \"\"\"Return Home Assistant Docker logs.\"\"\"\n",
        "source_code_with_indent": "    <DED>@api_process_raw(CONTENT_TYPE_BINARY)\n    def logs(self, request: web.Request) -> Coroutine:\n        <IND>\"\"\"Return Home Assistant Docker logs.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@api_process_raw(CONTENT_TYPE_BINARY)\n    def logs(self, request: web.Request) -> Awaitable[bytes]:\n        <IND>\"\"\"Return Home Assistant Docker logs.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "home-assistant/supervisor",
    "commit": "44416edfd24b832a9bf46f9b247896681f7c8ded",
    "filename": "supervisor/api/homeassistant.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/home-assistant-supervisor/supervisor/api/homeassistant.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "supervisor/api/homeassistant.py:156:8 Incompatible return type [7]: Expected `Coroutine[typing.Any, typing.Any, typing.Any]` but got `asyncio.futures.Future[typing.Any]`.",
    "message": " Expected `Coroutine[typing.Any, typing.Any, typing.Any]` but got `asyncio.futures.Future[typing.Any]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 156,
    "warning_line": "        return asyncio.shield(self.sys_homeassistant.restart())",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import logging\nfrom typing import Any, Coroutine, Dict\n\n",
        "source_code_len": 56,
        "target_code": "import logging\nfrom typing import Any, Awaitable, Dict\n\n",
        "target_code_len": 56,
        "diff_format": "@@ -3,3 +3,3 @@\n import logging\n-from typing import Any, Coroutine, Dict\n+from typing import Any, Awaitable, Dict\n \n",
        "source_code_with_indent": "import logging\nfrom typing import Any, Coroutine, Dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import logging\nfrom typing import Any, Awaitable, Dict\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @api_process\n    def stop(self, request: web.Request) -> Coroutine:\n        \"\"\"Stop Home Assistant.\"\"\"\n",
        "source_code_len": 107,
        "target_code": "    @api_process\n    def stop(self, request: web.Request) -> Awaitable[None]:\n        \"\"\"Stop Home Assistant.\"\"\"\n",
        "target_code_len": 113,
        "diff_format": "@@ -143,3 +143,3 @@\n     @api_process\n-    def stop(self, request: web.Request) -> Coroutine:\n+    def stop(self, request: web.Request) -> Awaitable[None]:\n         \"\"\"Stop Home Assistant.\"\"\"\n",
        "source_code_with_indent": "    <DED>@api_process\n    def stop(self, request: web.Request) -> Coroutine:\n        <IND>\"\"\"Stop Home Assistant.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@api_process\n    def stop(self, request: web.Request) -> Awaitable[None]:\n        <IND>\"\"\"Stop Home Assistant.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @api_process\n    def start(self, request: web.Request) -> Coroutine:\n        \"\"\"Start Home Assistant.\"\"\"\n",
        "source_code_len": 109,
        "target_code": "    @api_process\n    def start(self, request: web.Request) -> Awaitable[None]:\n        \"\"\"Start Home Assistant.\"\"\"\n",
        "target_code_len": 115,
        "diff_format": "@@ -148,3 +148,3 @@\n     @api_process\n-    def start(self, request: web.Request) -> Coroutine:\n+    def start(self, request: web.Request) -> Awaitable[None]:\n         \"\"\"Start Home Assistant.\"\"\"\n",
        "source_code_with_indent": "    <DED>@api_process\n    def start(self, request: web.Request) -> Coroutine:\n        <IND>\"\"\"Start Home Assistant.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@api_process\n    def start(self, request: web.Request) -> Awaitable[None]:\n        <IND>\"\"\"Start Home Assistant.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @api_process\n    def restart(self, request: web.Request) -> Coroutine:\n        \"\"\"Restart Home Assistant.\"\"\"\n",
        "source_code_len": 113,
        "target_code": "    @api_process\n    def restart(self, request: web.Request) -> Awaitable[None]:\n        \"\"\"Restart Home Assistant.\"\"\"\n",
        "target_code_len": 119,
        "diff_format": "@@ -153,3 +153,3 @@\n     @api_process\n-    def restart(self, request: web.Request) -> Coroutine:\n+    def restart(self, request: web.Request) -> Awaitable[None]:\n         \"\"\"Restart Home Assistant.\"\"\"\n",
        "source_code_with_indent": "    <DED>@api_process\n    def restart(self, request: web.Request) -> Coroutine:\n        <IND>\"\"\"Restart Home Assistant.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@api_process\n    def restart(self, request: web.Request) -> Awaitable[None]:\n        <IND>\"\"\"Restart Home Assistant.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @api_process\n    def rebuild(self, request: web.Request) -> Coroutine:\n        \"\"\"Rebuild Home Assistant.\"\"\"\n",
        "source_code_len": 113,
        "target_code": "    @api_process\n    def rebuild(self, request: web.Request) -> Awaitable[None]:\n        \"\"\"Rebuild Home Assistant.\"\"\"\n",
        "target_code_len": 119,
        "diff_format": "@@ -158,3 +158,3 @@\n     @api_process\n-    def rebuild(self, request: web.Request) -> Coroutine:\n+    def rebuild(self, request: web.Request) -> Awaitable[None]:\n         \"\"\"Rebuild Home Assistant.\"\"\"\n",
        "source_code_with_indent": "    <DED>@api_process\n    def rebuild(self, request: web.Request) -> Coroutine:\n        <IND>\"\"\"Rebuild Home Assistant.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@api_process\n    def rebuild(self, request: web.Request) -> Awaitable[None]:\n        <IND>\"\"\"Rebuild Home Assistant.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @api_process_raw(CONTENT_TYPE_BINARY)\n    def logs(self, request: web.Request) -> Coroutine:\n        \"\"\"Return Home Assistant Docker logs.\"\"\"\n",
        "source_code_len": 146,
        "target_code": "    @api_process_raw(CONTENT_TYPE_BINARY)\n    def logs(self, request: web.Request) -> Awaitable[bytes]:\n        \"\"\"Return Home Assistant Docker logs.\"\"\"\n",
        "target_code_len": 153,
        "diff_format": "@@ -163,3 +163,3 @@\n     @api_process_raw(CONTENT_TYPE_BINARY)\n-    def logs(self, request: web.Request) -> Coroutine:\n+    def logs(self, request: web.Request) -> Awaitable[bytes]:\n         \"\"\"Return Home Assistant Docker logs.\"\"\"\n",
        "source_code_with_indent": "    <DED>@api_process_raw(CONTENT_TYPE_BINARY)\n    def logs(self, request: web.Request) -> Coroutine:\n        <IND>\"\"\"Return Home Assistant Docker logs.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@api_process_raw(CONTENT_TYPE_BINARY)\n    def logs(self, request: web.Request) -> Awaitable[bytes]:\n        <IND>\"\"\"Return Home Assistant Docker logs.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "home-assistant/supervisor",
    "commit": "44416edfd24b832a9bf46f9b247896681f7c8ded",
    "filename": "supervisor/api/homeassistant.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/home-assistant-supervisor/supervisor/api/homeassistant.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "supervisor/api/homeassistant.py:161:8 Incompatible return type [7]: Expected `Coroutine[typing.Any, typing.Any, typing.Any]` but got `asyncio.futures.Future[typing.Any]`.",
    "message": " Expected `Coroutine[typing.Any, typing.Any, typing.Any]` but got `asyncio.futures.Future[typing.Any]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 161,
    "warning_line": "        return asyncio.shield(self.sys_homeassistant.rebuild())",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import logging\nfrom typing import Any, Coroutine, Dict\n\n",
        "source_code_len": 56,
        "target_code": "import logging\nfrom typing import Any, Awaitable, Dict\n\n",
        "target_code_len": 56,
        "diff_format": "@@ -3,3 +3,3 @@\n import logging\n-from typing import Any, Coroutine, Dict\n+from typing import Any, Awaitable, Dict\n \n",
        "source_code_with_indent": "import logging\nfrom typing import Any, Coroutine, Dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import logging\nfrom typing import Any, Awaitable, Dict\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @api_process\n    def stop(self, request: web.Request) -> Coroutine:\n        \"\"\"Stop Home Assistant.\"\"\"\n",
        "source_code_len": 107,
        "target_code": "    @api_process\n    def stop(self, request: web.Request) -> Awaitable[None]:\n        \"\"\"Stop Home Assistant.\"\"\"\n",
        "target_code_len": 113,
        "diff_format": "@@ -143,3 +143,3 @@\n     @api_process\n-    def stop(self, request: web.Request) -> Coroutine:\n+    def stop(self, request: web.Request) -> Awaitable[None]:\n         \"\"\"Stop Home Assistant.\"\"\"\n",
        "source_code_with_indent": "    <DED>@api_process\n    def stop(self, request: web.Request) -> Coroutine:\n        <IND>\"\"\"Stop Home Assistant.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@api_process\n    def stop(self, request: web.Request) -> Awaitable[None]:\n        <IND>\"\"\"Stop Home Assistant.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @api_process\n    def start(self, request: web.Request) -> Coroutine:\n        \"\"\"Start Home Assistant.\"\"\"\n",
        "source_code_len": 109,
        "target_code": "    @api_process\n    def start(self, request: web.Request) -> Awaitable[None]:\n        \"\"\"Start Home Assistant.\"\"\"\n",
        "target_code_len": 115,
        "diff_format": "@@ -148,3 +148,3 @@\n     @api_process\n-    def start(self, request: web.Request) -> Coroutine:\n+    def start(self, request: web.Request) -> Awaitable[None]:\n         \"\"\"Start Home Assistant.\"\"\"\n",
        "source_code_with_indent": "    <DED>@api_process\n    def start(self, request: web.Request) -> Coroutine:\n        <IND>\"\"\"Start Home Assistant.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@api_process\n    def start(self, request: web.Request) -> Awaitable[None]:\n        <IND>\"\"\"Start Home Assistant.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @api_process\n    def restart(self, request: web.Request) -> Coroutine:\n        \"\"\"Restart Home Assistant.\"\"\"\n",
        "source_code_len": 113,
        "target_code": "    @api_process\n    def restart(self, request: web.Request) -> Awaitable[None]:\n        \"\"\"Restart Home Assistant.\"\"\"\n",
        "target_code_len": 119,
        "diff_format": "@@ -153,3 +153,3 @@\n     @api_process\n-    def restart(self, request: web.Request) -> Coroutine:\n+    def restart(self, request: web.Request) -> Awaitable[None]:\n         \"\"\"Restart Home Assistant.\"\"\"\n",
        "source_code_with_indent": "    <DED>@api_process\n    def restart(self, request: web.Request) -> Coroutine:\n        <IND>\"\"\"Restart Home Assistant.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@api_process\n    def restart(self, request: web.Request) -> Awaitable[None]:\n        <IND>\"\"\"Restart Home Assistant.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @api_process\n    def rebuild(self, request: web.Request) -> Coroutine:\n        \"\"\"Rebuild Home Assistant.\"\"\"\n",
        "source_code_len": 113,
        "target_code": "    @api_process\n    def rebuild(self, request: web.Request) -> Awaitable[None]:\n        \"\"\"Rebuild Home Assistant.\"\"\"\n",
        "target_code_len": 119,
        "diff_format": "@@ -158,3 +158,3 @@\n     @api_process\n-    def rebuild(self, request: web.Request) -> Coroutine:\n+    def rebuild(self, request: web.Request) -> Awaitable[None]:\n         \"\"\"Rebuild Home Assistant.\"\"\"\n",
        "source_code_with_indent": "    <DED>@api_process\n    def rebuild(self, request: web.Request) -> Coroutine:\n        <IND>\"\"\"Rebuild Home Assistant.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@api_process\n    def rebuild(self, request: web.Request) -> Awaitable[None]:\n        <IND>\"\"\"Rebuild Home Assistant.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @api_process_raw(CONTENT_TYPE_BINARY)\n    def logs(self, request: web.Request) -> Coroutine:\n        \"\"\"Return Home Assistant Docker logs.\"\"\"\n",
        "source_code_len": 146,
        "target_code": "    @api_process_raw(CONTENT_TYPE_BINARY)\n    def logs(self, request: web.Request) -> Awaitable[bytes]:\n        \"\"\"Return Home Assistant Docker logs.\"\"\"\n",
        "target_code_len": 153,
        "diff_format": "@@ -163,3 +163,3 @@\n     @api_process_raw(CONTENT_TYPE_BINARY)\n-    def logs(self, request: web.Request) -> Coroutine:\n+    def logs(self, request: web.Request) -> Awaitable[bytes]:\n         \"\"\"Return Home Assistant Docker logs.\"\"\"\n",
        "source_code_with_indent": "    <DED>@api_process_raw(CONTENT_TYPE_BINARY)\n    def logs(self, request: web.Request) -> Coroutine:\n        <IND>\"\"\"Return Home Assistant Docker logs.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@api_process_raw(CONTENT_TYPE_BINARY)\n    def logs(self, request: web.Request) -> Awaitable[bytes]:\n        <IND>\"\"\"Return Home Assistant Docker logs.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "home-assistant/supervisor",
    "commit": "44416edfd24b832a9bf46f9b247896681f7c8ded",
    "filename": "supervisor/api/homeassistant.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/home-assistant-supervisor/supervisor/api/homeassistant.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "supervisor/api/homeassistant.py:166:8 Incompatible return type [7]: Expected `Coroutine[typing.Any, typing.Any, typing.Any]` but got `typing.Awaitable[bytes]`.",
    "message": " Expected `Coroutine[typing.Any, typing.Any, typing.Any]` but got `typing.Awaitable[bytes]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 166,
    "warning_line": "        return self.sys_homeassistant.logs()",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import logging\nfrom typing import Any, Coroutine, Dict\n\n",
        "source_code_len": 56,
        "target_code": "import logging\nfrom typing import Any, Awaitable, Dict\n\n",
        "target_code_len": 56,
        "diff_format": "@@ -3,3 +3,3 @@\n import logging\n-from typing import Any, Coroutine, Dict\n+from typing import Any, Awaitable, Dict\n \n",
        "source_code_with_indent": "import logging\nfrom typing import Any, Coroutine, Dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import logging\nfrom typing import Any, Awaitable, Dict\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @api_process\n    def stop(self, request: web.Request) -> Coroutine:\n        \"\"\"Stop Home Assistant.\"\"\"\n",
        "source_code_len": 107,
        "target_code": "    @api_process\n    def stop(self, request: web.Request) -> Awaitable[None]:\n        \"\"\"Stop Home Assistant.\"\"\"\n",
        "target_code_len": 113,
        "diff_format": "@@ -143,3 +143,3 @@\n     @api_process\n-    def stop(self, request: web.Request) -> Coroutine:\n+    def stop(self, request: web.Request) -> Awaitable[None]:\n         \"\"\"Stop Home Assistant.\"\"\"\n",
        "source_code_with_indent": "    <DED>@api_process\n    def stop(self, request: web.Request) -> Coroutine:\n        <IND>\"\"\"Stop Home Assistant.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@api_process\n    def stop(self, request: web.Request) -> Awaitable[None]:\n        <IND>\"\"\"Stop Home Assistant.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @api_process\n    def start(self, request: web.Request) -> Coroutine:\n        \"\"\"Start Home Assistant.\"\"\"\n",
        "source_code_len": 109,
        "target_code": "    @api_process\n    def start(self, request: web.Request) -> Awaitable[None]:\n        \"\"\"Start Home Assistant.\"\"\"\n",
        "target_code_len": 115,
        "diff_format": "@@ -148,3 +148,3 @@\n     @api_process\n-    def start(self, request: web.Request) -> Coroutine:\n+    def start(self, request: web.Request) -> Awaitable[None]:\n         \"\"\"Start Home Assistant.\"\"\"\n",
        "source_code_with_indent": "    <DED>@api_process\n    def start(self, request: web.Request) -> Coroutine:\n        <IND>\"\"\"Start Home Assistant.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@api_process\n    def start(self, request: web.Request) -> Awaitable[None]:\n        <IND>\"\"\"Start Home Assistant.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @api_process\n    def restart(self, request: web.Request) -> Coroutine:\n        \"\"\"Restart Home Assistant.\"\"\"\n",
        "source_code_len": 113,
        "target_code": "    @api_process\n    def restart(self, request: web.Request) -> Awaitable[None]:\n        \"\"\"Restart Home Assistant.\"\"\"\n",
        "target_code_len": 119,
        "diff_format": "@@ -153,3 +153,3 @@\n     @api_process\n-    def restart(self, request: web.Request) -> Coroutine:\n+    def restart(self, request: web.Request) -> Awaitable[None]:\n         \"\"\"Restart Home Assistant.\"\"\"\n",
        "source_code_with_indent": "    <DED>@api_process\n    def restart(self, request: web.Request) -> Coroutine:\n        <IND>\"\"\"Restart Home Assistant.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@api_process\n    def restart(self, request: web.Request) -> Awaitable[None]:\n        <IND>\"\"\"Restart Home Assistant.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @api_process\n    def rebuild(self, request: web.Request) -> Coroutine:\n        \"\"\"Rebuild Home Assistant.\"\"\"\n",
        "source_code_len": 113,
        "target_code": "    @api_process\n    def rebuild(self, request: web.Request) -> Awaitable[None]:\n        \"\"\"Rebuild Home Assistant.\"\"\"\n",
        "target_code_len": 119,
        "diff_format": "@@ -158,3 +158,3 @@\n     @api_process\n-    def rebuild(self, request: web.Request) -> Coroutine:\n+    def rebuild(self, request: web.Request) -> Awaitable[None]:\n         \"\"\"Rebuild Home Assistant.\"\"\"\n",
        "source_code_with_indent": "    <DED>@api_process\n    def rebuild(self, request: web.Request) -> Coroutine:\n        <IND>\"\"\"Rebuild Home Assistant.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@api_process\n    def rebuild(self, request: web.Request) -> Awaitable[None]:\n        <IND>\"\"\"Rebuild Home Assistant.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @api_process_raw(CONTENT_TYPE_BINARY)\n    def logs(self, request: web.Request) -> Coroutine:\n        \"\"\"Return Home Assistant Docker logs.\"\"\"\n",
        "source_code_len": 146,
        "target_code": "    @api_process_raw(CONTENT_TYPE_BINARY)\n    def logs(self, request: web.Request) -> Awaitable[bytes]:\n        \"\"\"Return Home Assistant Docker logs.\"\"\"\n",
        "target_code_len": 153,
        "diff_format": "@@ -163,3 +163,3 @@\n     @api_process_raw(CONTENT_TYPE_BINARY)\n-    def logs(self, request: web.Request) -> Coroutine:\n+    def logs(self, request: web.Request) -> Awaitable[bytes]:\n         \"\"\"Return Home Assistant Docker logs.\"\"\"\n",
        "source_code_with_indent": "    <DED>@api_process_raw(CONTENT_TYPE_BINARY)\n    def logs(self, request: web.Request) -> Coroutine:\n        <IND>\"\"\"Return Home Assistant Docker logs.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@api_process_raw(CONTENT_TYPE_BINARY)\n    def logs(self, request: web.Request) -> Awaitable[bytes]:\n        <IND>\"\"\"Return Home Assistant Docker logs.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "home-assistant/supervisor",
    "commit": "44416edfd24b832a9bf46f9b247896681f7c8ded",
    "filename": "supervisor/bootstrap.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/home-assistant-supervisor/supervisor/bootstrap.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "supervisor/bootstrap.py:94:4 Incompatible return type [7]: Expected `None` but got `CoreSys`.",
    "message": " Expected `None` but got `CoreSys`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 94,
    "warning_line": "    return coresys",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nasync def initialize_coresys() -> None:\n    \"\"\"Initialize supervisor coresys/objects.\"\"\"\n",
        "source_code_len": 90,
        "target_code": "\nasync def initialize_coresys() -> CoreSys:\n    \"\"\"Initialize supervisor coresys/objects.\"\"\"\n",
        "target_code_len": 93,
        "diff_format": "@@ -48,3 +48,3 @@\n \n-async def initialize_coresys() -> None:\n+async def initialize_coresys() -> CoreSys:\n     \"\"\"Initialize supervisor coresys/objects.\"\"\"\n",
        "source_code_with_indent": "\nasync def initialize_coresys() -> None:\n    <IND>\"\"\"Initialize supervisor coresys/objects.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nasync def initialize_coresys() -> CoreSys:\n    <IND>\"\"\"Initialize supervisor coresys/objects.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "home-assistant/supervisor",
    "commit": "44416edfd24b832a9bf46f9b247896681f7c8ded",
    "filename": "supervisor/docker/addon.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/home-assistant-supervisor/supervisor/docker/addon.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "supervisor/docker/addon.py:85:8 Incompatible return type [7]: Expected `str` but got `Optional[str]`.",
    "message": " Expected `str` but got `Optional[str]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 85,
    "warning_line": "        return super().arch"
  },
  {
    "project": "home-assistant/supervisor",
    "commit": "44416edfd24b832a9bf46f9b247896681f7c8ded",
    "filename": "supervisor/docker/addon.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/home-assistant-supervisor/supervisor/docker/addon.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "supervisor/docker/addon.py:117:8 Incompatible return type [7]: Expected `Dict[str, str]` but got `Dict[str, Optional[str]]`.",
    "message": " Expected `Dict[str, str]` but got `Dict[str, Optional[str]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 117,
    "warning_line": "        return {",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @property\n    def environment(self) -> Dict[str, str]:\n        \"\"\"Return environment for Docker add-on.\"\"\"\n",
        "source_code_len": 111,
        "target_code": "    @property\n    def environment(self) -> Dict[str, Optional[str]]:\n        \"\"\"Return environment for Docker add-on.\"\"\"\n",
        "target_code_len": 121,
        "diff_format": "@@ -104,3 +104,3 @@\n     @property\n-    def environment(self) -> Dict[str, str]:\n+    def environment(self) -> Dict[str, Optional[str]]:\n         \"\"\"Return environment for Docker add-on.\"\"\"\n",
        "source_code_with_indent": "    <DED>@property\n    def environment(self) -> Dict[str, str]:\n        <IND>\"\"\"Return environment for Docker add-on.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@property\n    def environment(self) -> Dict[str, Optional[str]]:\n        <IND>\"\"\"Return environment for Docker add-on.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "home-assistant/supervisor",
    "commit": "44416edfd24b832a9bf46f9b247896681f7c8ded",
    "filename": "supervisor/docker/addon.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/home-assistant-supervisor/supervisor/docker/addon.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "supervisor/docker/addon.py:194:8 Incompatible return type [7]: Expected `Dict[str, str]` but got `Dict[str, IPv4Address]`.",
    "message": " Expected `Dict[str, str]` but got `Dict[str, IPv4Address]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 194,
    "warning_line": "        return {",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @property\n    def network_mapping(self) -> Dict[str, str]:\n        \"\"\"Return hosts mapping.\"\"\"\n",
        "source_code_len": 99,
        "target_code": "    @property\n    def network_mapping(self) -> Dict[str, IPv4Address]:\n        \"\"\"Return hosts mapping.\"\"\"\n",
        "target_code_len": 107,
        "diff_format": "@@ -191,3 +191,3 @@\n     @property\n-    def network_mapping(self) -> Dict[str, str]:\n+    def network_mapping(self) -> Dict[str, IPv4Address]:\n         \"\"\"Return hosts mapping.\"\"\"\n",
        "source_code_with_indent": "    <DED>@property\n    def network_mapping(self) -> Dict[str, str]:\n        <IND>\"\"\"Return hosts mapping.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@property\n    def network_mapping(self) -> Dict[str, IPv4Address]:\n        <IND>\"\"\"Return hosts mapping.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "home-assistant/supervisor",
    "commit": "44416edfd24b832a9bf46f9b247896681f7c8ded",
    "filename": "supervisor/docker/interface.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/home-assistant-supervisor/supervisor/docker/interface.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "supervisor/docker/interface.py:302:12 Incompatible return type [7]: Expected `bytes` but got implicit return value of `None`.",
    "message": " Expected `bytes` but got implicit return value of `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 302,
    "warning_line": "            _LOGGER.warning(\"Can't grep logs from %s: %s\", self.image, err)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    @process_lock\n",
        "source_code_len": 19,
        "target_code": "\n        return b\"\"\n\n    @process_lock\n",
        "target_code_len": 39,
        "diff_format": "@@ -303,2 +299,4 @@\n \n+        return b\"\"\n+\n     @process_lock\n",
        "source_code_with_indent": "\n    <DED><DED>@process_lock\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        <DED>return b\"\"\n\n    <DED>@process_lock\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "home-assistant/supervisor",
    "commit": "44416edfd24b832a9bf46f9b247896681f7c8ded",
    "filename": "supervisor/services/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/home-assistant-supervisor/supervisor/services/__init__.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "supervisor/services/__init__.py:30:8 Incompatible return type [7]: Expected `ServiceInterface` but got `typing.Optional[ServiceInterface]`.",
    "message": " Expected `ServiceInterface` but got `typing.Optional[ServiceInterface]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 30,
    "warning_line": "        return self.services_obj.get(slug)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\"\"\"Handle internal services discovery.\"\"\"\nfrom typing import Dict, List\n\n",
        "source_code_len": 73,
        "target_code": "\"\"\"Handle internal services discovery.\"\"\"\nfrom typing import Dict, List, Optional\n\n",
        "target_code_len": 83,
        "diff_format": "@@ -1,3 +1,3 @@\n \"\"\"Handle internal services discovery.\"\"\"\n-from typing import Dict, List\n+from typing import Dict, List, Optional\n \n",
        "source_code_with_indent": "\"\"\"Handle internal services discovery.\"\"\"\nfrom typing import Dict, List\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\"\"\"Handle internal services discovery.\"\"\"\nfrom typing import Dict, List, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def get(self, slug: str) -> ServiceInterface:\n        \"\"\"Return service object from slug.\"\"\"\n",
        "source_code_len": 98,
        "target_code": "\n    def get(self, slug: str) -> Optional[ServiceInterface]:\n        \"\"\"Return service object from slug.\"\"\"\n",
        "target_code_len": 108,
        "diff_format": "@@ -27,3 +27,3 @@\n \n-    def get(self, slug: str) -> ServiceInterface:\n+    def get(self, slug: str) -> Optional[ServiceInterface]:\n         \"\"\"Return service object from slug.\"\"\"\n",
        "source_code_with_indent": "\n    <DED>def get(self, slug: str) -> ServiceInterface:\n        <IND>\"\"\"Return service object from slug.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def get(self, slug: str) -> Optional[ServiceInterface]:\n        <IND>\"\"\"Return service object from slug.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]