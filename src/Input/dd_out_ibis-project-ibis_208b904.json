[
  {
    "project": "ibis-project/ibis",
    "commit": "208b904bb7ac84d7a2505e703caa3422103685bb",
    "filename": "ibis/backends/pandas/aggcontext.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ibis-project-ibis/ibis/backends/pandas/aggcontext.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ibis/backends/pandas/aggcontext.py:578:45 Incompatible parameter type [6]: Expected `Optional[Tuple[typing.Any]]` for 2nd positional only parameter to call `wrap_for_apply` but got `typing.Tuple[Tuple[typing.Any], ...]`.",
    "message": " Expected `Optional[Tuple[typing.Any]]` for 2nd positional only parameter to call `wrap_for_apply` but got `typing.Tuple[Tuple[typing.Any], ...]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 578,
    "warning_line": "                    wrap_for_apply(function, args, kwargs), raw=True",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    function: Callable,\n    args: Optional[Tuple[Any]],\n    kwargs: Optional[Dict[Any, Any]],\n) -> Callable:\n",
        "source_code_len": 109,
        "target_code": "    function: Callable,\n    args: Optional[Tuple[Any, ...]] = None,\n    kwargs: Optional[Dict[str, Any]] = None,\n) -> Callable:\n",
        "target_code_len": 128,
        "diff_format": "@@ -268,4 +268,4 @@\n     function: Callable,\n-    args: Optional[Tuple[Any]],\n-    kwargs: Optional[Dict[Any, Any]],\n+    args: Optional[Tuple[Any, ...]] = None,\n+    kwargs: Optional[Dict[str, Any]] = None,\n ) -> Callable:\n",
        "source_code_with_indent": "    function: Callable,\n    args: Optional[Tuple[Any]],\n    kwargs: Optional[Dict[Any, Any]],\n) -> Callable:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    function: Callable,\n    args: Optional[Tuple[Any, ...]] = None,\n    kwargs: Optional[Dict[str, Any]] = None,\n) -> Callable:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ibis-project/ibis",
    "commit": "208b904bb7ac84d7a2505e703caa3422103685bb",
    "filename": "ibis/backends/pandas/execution/arrays.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ibis-project-ibis/ibis/backends/pandas/execution/arrays.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ibis/backends/pandas/execution/arrays.py:64:15 Incompatible parameter type [6]: Expected `typing.Sized` for 1st positional only parameter to call `len` but got `Iterable[typing.Any]`.",
    "message": " Expected `typing.Sized` for 1st positional only parameter to call `len` but got `Iterable[typing.Any]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 64,
    "warning_line": "    assert len(iter1) == len(iter2)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import operator\nfrom typing import Any, Iterable\n\n",
        "source_code_len": 50,
        "target_code": "import operator\nfrom typing import Any, Collection\n\n",
        "target_code_len": 52,
        "diff_format": "@@ -1,3 +1,3 @@\n import operator\n-from typing import Any, Iterable\n+from typing import Any, Collection\n \n",
        "source_code_with_indent": "import operator\nfrom typing import Any, Iterable\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import operator\nfrom typing import Any, Collection\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def _concat_iterables_to_series(\n    iter1: Iterable[Any], iter2: Iterable[Any],\n) -> pd.Series:\n    \"\"\"Concatenate two iterables elementwise (\"horizontally\") to create a\n    Series. The two iterables are assumed to have the same length.\n\n",
        "source_code_len": 239,
        "target_code": "def _concat_iterables_to_series(\n    iter1: Collection[Any], iter2: Collection[Any],\n) -> pd.Series:\n    \"\"\"Concatenate two collections elementwise (\"horizontally\") to create a\n    Series. The two collections are assumed to have the same length.\n\n",
        "target_code_len": 247,
        "diff_format": "@@ -56,6 +56,6 @@\n def _concat_iterables_to_series(\n-    iter1: Iterable[Any], iter2: Iterable[Any],\n+    iter1: Collection[Any], iter2: Collection[Any],\n ) -> pd.Series:\n-    \"\"\"Concatenate two iterables elementwise (\"horizontally\") to create a\n-    Series. The two iterables are assumed to have the same length.\n+    \"\"\"Concatenate two collections elementwise (\"horizontally\") to create a\n+    Series. The two collections are assumed to have the same length.\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "<DED><DED>def _concat_iterables_to_series(\n    iter1: Iterable[Any], iter2: Iterable[Any],\n) -> pd.Series:\n    <IND>",
        "target_code_with_indent": "<DED><DED>def _concat_iterables_to_series(\n    iter1: Collection[Any], iter2: Collection[Any],\n) -> pd.Series:\n    <IND>"
      }
    ]
  },
  {
    "project": "ibis-project/ibis",
    "commit": "208b904bb7ac84d7a2505e703caa3422103685bb",
    "filename": "ibis/backends/pandas/execution/arrays.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ibis-project-ibis/ibis/backends/pandas/execution/arrays.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ibis/backends/pandas/execution/arrays.py:64:29 Incompatible parameter type [6]: Expected `typing.Sized` for 1st positional only parameter to call `len` but got `Iterable[typing.Any]`.",
    "message": " Expected `typing.Sized` for 1st positional only parameter to call `len` but got `Iterable[typing.Any]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 64,
    "warning_line": "    assert len(iter1) == len(iter2)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import operator\nfrom typing import Any, Iterable\n\n",
        "source_code_len": 50,
        "target_code": "import operator\nfrom typing import Any, Collection\n\n",
        "target_code_len": 52,
        "diff_format": "@@ -1,3 +1,3 @@\n import operator\n-from typing import Any, Iterable\n+from typing import Any, Collection\n \n",
        "source_code_with_indent": "import operator\nfrom typing import Any, Iterable\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import operator\nfrom typing import Any, Collection\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def _concat_iterables_to_series(\n    iter1: Iterable[Any], iter2: Iterable[Any],\n) -> pd.Series:\n    \"\"\"Concatenate two iterables elementwise (\"horizontally\") to create a\n    Series. The two iterables are assumed to have the same length.\n\n",
        "source_code_len": 239,
        "target_code": "def _concat_iterables_to_series(\n    iter1: Collection[Any], iter2: Collection[Any],\n) -> pd.Series:\n    \"\"\"Concatenate two collections elementwise (\"horizontally\") to create a\n    Series. The two collections are assumed to have the same length.\n\n",
        "target_code_len": 247,
        "diff_format": "@@ -56,6 +56,6 @@\n def _concat_iterables_to_series(\n-    iter1: Iterable[Any], iter2: Iterable[Any],\n+    iter1: Collection[Any], iter2: Collection[Any],\n ) -> pd.Series:\n-    \"\"\"Concatenate two iterables elementwise (\"horizontally\") to create a\n-    Series. The two iterables are assumed to have the same length.\n+    \"\"\"Concatenate two collections elementwise (\"horizontally\") to create a\n+    Series. The two collections are assumed to have the same length.\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "<DED><DED>def _concat_iterables_to_series(\n    iter1: Iterable[Any], iter2: Iterable[Any],\n) -> pd.Series:\n    <IND>",
        "target_code_with_indent": "<DED><DED>def _concat_iterables_to_series(\n    iter1: Collection[Any], iter2: Collection[Any],\n) -> pd.Series:\n    <IND>"
      }
    ]
  },
  {
    "project": "ibis-project/ibis",
    "commit": "208b904bb7ac84d7a2505e703caa3422103685bb",
    "filename": "ibis/backends/pandas/execution/selection.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ibis-project-ibis/ibis/backends/pandas/execution/selection.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ibis/backends/pandas/execution/selection.py:119:27 Unsupported operand [58]: `+` is not supported for operand types `ibis.expr.signature.Argument` and `typing.Any`.",
    "message": " `+` is not supported for operand types `ibis.expr.signature.Argument` and `typing.Any`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 119,
    "warning_line": "        return data.loc[:, name + suffixes[root_table]].rename(",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        name = op.name\n\n",
        "source_code_len": 24,
        "target_code": "        name = op.name\n        assert isinstance(name, str)\n\n",
        "target_code_len": 61,
        "diff_format": "@@ -104,2 +107,3 @@\n         name = op.name\n+        assert isinstance(name, str)\n \n",
        "source_code_with_indent": "        <IND>name = op.name\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>name = op.name\n        assert isinstance(name, str)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]