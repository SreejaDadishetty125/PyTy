[
  {
    "project": "Bluefog-Lib/bluefog",
    "commit": "8ecd73810d83828ba4452fb41328d436fa410a17",
    "filename": "bluefog/common/basics.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Bluefog-Lib-bluefog/bluefog/common/basics.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bluefog/common/basics.py:70:8 Incompatible return type [7]: Expected `int` but got implicit return value of `None`.",
    "message": " Expected `int` but got implicit return value of `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 70,
    "warning_line": "        self.topology = None"
  },
  {
    "project": "Bluefog-Lib/bluefog",
    "commit": "8ecd73810d83828ba4452fb41328d436fa410a17",
    "filename": "bluefog/common/topology_util.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Bluefog-Lib-bluefog/bluefog/common/topology_util.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bluefog/common/topology_util.py:160:31 Incompatible variable type [9]: Unable to unpack `None`, expected a tuple.",
    "message": " Unable to unpack `None`, expected a tuple.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 160,
    "warning_line": "def MeshGrid2DGraph(size: int, shape: Tuple[int, int] = None) -> nx.DiGraph:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import List, Tuple, Dict, Iterator\n\n",
        "source_code_len": 49,
        "target_code": "\nfrom typing import List, Tuple, Dict, Iterator, Optional\n\n",
        "target_code_len": 59,
        "diff_format": "@@ -15,3 +15,3 @@\n \n-from typing import List, Tuple, Dict, Iterator\n+from typing import List, Tuple, Dict, Iterator, Optional\n \n",
        "source_code_with_indent": "\nfrom typing import List, Tuple, Dict, Iterator\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import List, Tuple, Dict, Iterator, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef MeshGrid2DGraph(size: int, shape: Tuple[int, int] = None) -> nx.DiGraph:\n    \"\"\"Generate 2D MeshGrid structure of graph.\n",
        "source_code_len": 126,
        "target_code": "\ndef MeshGrid2DGraph(size: int, shape: Optional[Tuple[int, int]] = None) -> nx.DiGraph:\n    \"\"\"Generate 2D MeshGrid structure of graph.\n",
        "target_code_len": 136,
        "diff_format": "@@ -159,3 +159,3 @@\n \n-def MeshGrid2DGraph(size: int, shape: Tuple[int, int] = None) -> nx.DiGraph:\n+def MeshGrid2DGraph(size: int, shape: Optional[Tuple[int, int]] = None) -> nx.DiGraph:\n     \"\"\"Generate 2D MeshGrid structure of graph.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>def MeshGrid2DGraph(size: int, shape: Tuple[int, int] = None) -> nx.DiGraph:\n    <IND>",
        "target_code_with_indent": "\n<DED>def MeshGrid2DGraph(size: int, shape: Optional[Tuple[int, int]] = None) -> nx.DiGraph:\n    <IND>"
      }
    ]
  },
  {
    "project": "Bluefog-Lib/bluefog",
    "commit": "8ecd73810d83828ba4452fb41328d436fa410a17",
    "filename": "bluefog/torch/mpi_ops.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Bluefog-Lib-bluefog/bluefog/torch/mpi_ops.py",
    "file_hunks_size": 24,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bluefog/torch/mpi_ops.py:153:52 Incompatible variable type [9]: name is declared to have type `str` but is used as type `None`.",
    "message": " name is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 153,
    "warning_line": "def broadcast(tensor: torch.Tensor, root_rank: int, name: str = None) -> torch.Tensor:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from contextlib import contextmanager\nfrom typing import List, Dict\n\n",
        "source_code_len": 69,
        "target_code": "from contextlib import contextmanager\nfrom typing import List, Dict, Optional\n\n",
        "target_code_len": 79,
        "diff_format": "@@ -17,3 +17,3 @@\n from contextlib import contextmanager\n-from typing import List, Dict\n+from typing import List, Dict, Optional\n \n",
        "source_code_with_indent": "from contextlib import contextmanager\nfrom typing import List, Dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from contextlib import contextmanager\nfrom typing import List, Dict, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef broadcast(tensor: torch.Tensor, root_rank: int, name: str = None) -> torch.Tensor:\n    \"\"\"\n",
        "source_code_len": 96,
        "target_code": "\ndef broadcast(tensor: torch.Tensor, root_rank: int, name: Optional[str] = None) -> torch.Tensor:\n    \"\"\"\n",
        "target_code_len": 106,
        "diff_format": "@@ -152,3 +154,3 @@\n \n-def broadcast(tensor: torch.Tensor, root_rank: int, name: str = None) -> torch.Tensor:\n+def broadcast(tensor: torch.Tensor, root_rank: int, name: Optional[str] = None) -> torch.Tensor:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>def broadcast(tensor: torch.Tensor, root_rank: int, name: str = None) -> torch.Tensor:\n    <IND>",
        "target_code_with_indent": "\n<DED>def broadcast(tensor: torch.Tensor, root_rank: int, name: Optional[str] = None) -> torch.Tensor:\n    <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef broadcast_nonblocking(tensor: torch.Tensor, root_rank: int, name: str = None) -> int:\n    \"\"\"\n",
        "source_code_len": 99,
        "target_code": "\ndef broadcast_nonblocking(tensor: torch.Tensor, root_rank: int, name: Optional[str] = None) -> int:\n    \"\"\"\n",
        "target_code_len": 109,
        "diff_format": "@@ -179,3 +181,3 @@\n \n-def broadcast_nonblocking(tensor: torch.Tensor, root_rank: int, name: str = None) -> int:\n+def broadcast_nonblocking(tensor: torch.Tensor, root_rank: int, name: Optional[str] = None) -> int:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>def broadcast_nonblocking(tensor: torch.Tensor, root_rank: int, name: str = None) -> int:\n    <IND>",
        "target_code_with_indent": "\n<DED>def broadcast_nonblocking(tensor: torch.Tensor, root_rank: int, name: Optional[str] = None) -> int:\n    <IND>"
      }
    ]
  },
  {
    "project": "Bluefog-Lib/bluefog",
    "commit": "8ecd73810d83828ba4452fb41328d436fa410a17",
    "filename": "bluefog/torch/mpi_ops.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Bluefog-Lib-bluefog/bluefog/torch/mpi_ops.py",
    "file_hunks_size": 24,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bluefog/torch/mpi_ops.py:180:64 Incompatible variable type [9]: name is declared to have type `str` but is used as type `None`.",
    "message": " name is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 180,
    "warning_line": "def broadcast_nonblocking(tensor: torch.Tensor, root_rank: int, name: str = None) -> int:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from contextlib import contextmanager\nfrom typing import List, Dict\n\n",
        "source_code_len": 69,
        "target_code": "from contextlib import contextmanager\nfrom typing import List, Dict, Optional\n\n",
        "target_code_len": 79,
        "diff_format": "@@ -17,3 +17,3 @@\n from contextlib import contextmanager\n-from typing import List, Dict\n+from typing import List, Dict, Optional\n \n",
        "source_code_with_indent": "from contextlib import contextmanager\nfrom typing import List, Dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from contextlib import contextmanager\nfrom typing import List, Dict, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef broadcast_nonblocking(tensor: torch.Tensor, root_rank: int, name: str = None) -> int:\n    \"\"\"\n",
        "source_code_len": 99,
        "target_code": "\ndef broadcast_nonblocking(tensor: torch.Tensor, root_rank: int, name: Optional[str] = None) -> int:\n    \"\"\"\n",
        "target_code_len": 109,
        "diff_format": "@@ -179,3 +181,3 @@\n \n-def broadcast_nonblocking(tensor: torch.Tensor, root_rank: int, name: str = None) -> int:\n+def broadcast_nonblocking(tensor: torch.Tensor, root_rank: int, name: Optional[str] = None) -> int:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>def broadcast_nonblocking(tensor: torch.Tensor, root_rank: int, name: str = None) -> int:\n    <IND>",
        "target_code_with_indent": "\n<DED>def broadcast_nonblocking(tensor: torch.Tensor, root_rank: int, name: Optional[str] = None) -> int:\n    <IND>"
      }
    ]
  },
  {
    "project": "Bluefog-Lib/bluefog",
    "commit": "8ecd73810d83828ba4452fb41328d436fa410a17",
    "filename": "bluefog/torch/mpi_ops.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Bluefog-Lib-bluefog/bluefog/torch/mpi_ops.py",
    "file_hunks_size": 24,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bluefog/torch/mpi_ops.py:260:36 Incompatible variable type [9]: name is declared to have type `str` but is used as type `None`.",
    "message": " name is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 260,
    "warning_line": "def allgather(tensor: torch.Tensor, name: str = None) -> torch.Tensor:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from contextlib import contextmanager\nfrom typing import List, Dict\n\n",
        "source_code_len": 69,
        "target_code": "from contextlib import contextmanager\nfrom typing import List, Dict, Optional\n\n",
        "target_code_len": 79,
        "diff_format": "@@ -17,3 +17,3 @@\n from contextlib import contextmanager\n-from typing import List, Dict\n+from typing import List, Dict, Optional\n \n",
        "source_code_with_indent": "from contextlib import contextmanager\nfrom typing import List, Dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from contextlib import contextmanager\nfrom typing import List, Dict, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef allgather(tensor: torch.Tensor, name: str = None) -> torch.Tensor:\n    \"\"\"\n",
        "source_code_len": 80,
        "target_code": "\ndef allgather(tensor: torch.Tensor, name: Optional[str] = None) -> torch.Tensor:\n    \"\"\"\n",
        "target_code_len": 90,
        "diff_format": "@@ -259,3 +261,3 @@\n \n-def allgather(tensor: torch.Tensor, name: str = None) -> torch.Tensor:\n+def allgather(tensor: torch.Tensor, name: Optional[str] = None) -> torch.Tensor:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>def allgather(tensor: torch.Tensor, name: str = None) -> torch.Tensor:\n    <IND>",
        "target_code_with_indent": "\n<DED>def allgather(tensor: torch.Tensor, name: Optional[str] = None) -> torch.Tensor:\n    <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef allgather_nonblocking(tensor: torch.Tensor, name: str = None) -> int:\n    \"\"\"\n",
        "source_code_len": 83,
        "target_code": "\ndef allgather_nonblocking(tensor: torch.Tensor, name: Optional[str] = None) -> int:\n    \"\"\"\n",
        "target_code_len": 93,
        "diff_format": "@@ -281,3 +283,3 @@\n \n-def allgather_nonblocking(tensor: torch.Tensor, name: str = None) -> int:\n+def allgather_nonblocking(tensor: torch.Tensor, name: Optional[str] = None) -> int:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>def allgather_nonblocking(tensor: torch.Tensor, name: str = None) -> int:\n    <IND>",
        "target_code_with_indent": "\n<DED>def allgather_nonblocking(tensor: torch.Tensor, name: Optional[str] = None) -> int:\n    <IND>"
      }
    ]
  },
  {
    "project": "Bluefog-Lib/bluefog",
    "commit": "8ecd73810d83828ba4452fb41328d436fa410a17",
    "filename": "bluefog/torch/mpi_ops.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Bluefog-Lib-bluefog/bluefog/torch/mpi_ops.py",
    "file_hunks_size": 24,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bluefog/torch/mpi_ops.py:282:48 Incompatible variable type [9]: name is declared to have type `str` but is used as type `None`.",
    "message": " name is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 282,
    "warning_line": "def allgather_nonblocking(tensor: torch.Tensor, name: str = None) -> int:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from contextlib import contextmanager\nfrom typing import List, Dict\n\n",
        "source_code_len": 69,
        "target_code": "from contextlib import contextmanager\nfrom typing import List, Dict, Optional\n\n",
        "target_code_len": 79,
        "diff_format": "@@ -17,3 +17,3 @@\n from contextlib import contextmanager\n-from typing import List, Dict\n+from typing import List, Dict, Optional\n \n",
        "source_code_with_indent": "from contextlib import contextmanager\nfrom typing import List, Dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from contextlib import contextmanager\nfrom typing import List, Dict, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef allgather_nonblocking(tensor: torch.Tensor, name: str = None) -> int:\n    \"\"\"\n",
        "source_code_len": 83,
        "target_code": "\ndef allgather_nonblocking(tensor: torch.Tensor, name: Optional[str] = None) -> int:\n    \"\"\"\n",
        "target_code_len": 93,
        "diff_format": "@@ -281,3 +283,3 @@\n \n-def allgather_nonblocking(tensor: torch.Tensor, name: str = None) -> int:\n+def allgather_nonblocking(tensor: torch.Tensor, name: Optional[str] = None) -> int:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>def allgather_nonblocking(tensor: torch.Tensor, name: str = None) -> int:\n    <IND>",
        "target_code_with_indent": "\n<DED>def allgather_nonblocking(tensor: torch.Tensor, name: Optional[str] = None) -> int:\n    <IND>"
      }
    ]
  },
  {
    "project": "Bluefog-Lib/bluefog",
    "commit": "8ecd73810d83828ba4452fb41328d436fa410a17",
    "filename": "bluefog/torch/mpi_ops.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Bluefog-Lib-bluefog/bluefog/torch/mpi_ops.py",
    "file_hunks_size": 24,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bluefog/torch/mpi_ops.py:314:45 Incompatible variable type [9]: name is declared to have type `str` but is used as type `None`.",
    "message": " name is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 314,
    "warning_line": "def neighbor_allgather(tensor: torch.Tensor, name: str = None) -> torch.Tensor:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from contextlib import contextmanager\nfrom typing import List, Dict\n\n",
        "source_code_len": 69,
        "target_code": "from contextlib import contextmanager\nfrom typing import List, Dict, Optional\n\n",
        "target_code_len": 79,
        "diff_format": "@@ -17,3 +17,3 @@\n from contextlib import contextmanager\n-from typing import List, Dict\n+from typing import List, Dict, Optional\n \n",
        "source_code_with_indent": "from contextlib import contextmanager\nfrom typing import List, Dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from contextlib import contextmanager\nfrom typing import List, Dict, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef neighbor_allgather(tensor: torch.Tensor, name: str = None) -> torch.Tensor:\n    \"\"\"\n",
        "source_code_len": 89,
        "target_code": "\ndef neighbor_allgather(tensor: torch.Tensor, name: Optional[str] = None) -> torch.Tensor:\n    \"\"\"\n",
        "target_code_len": 99,
        "diff_format": "@@ -313,3 +315,3 @@\n \n-def neighbor_allgather(tensor: torch.Tensor, name: str = None) -> torch.Tensor:\n+def neighbor_allgather(tensor: torch.Tensor, name: Optional[str] = None) -> torch.Tensor:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>def neighbor_allgather(tensor: torch.Tensor, name: str = None) -> torch.Tensor:\n    <IND>",
        "target_code_with_indent": "\n<DED>def neighbor_allgather(tensor: torch.Tensor, name: Optional[str] = None) -> torch.Tensor:\n    <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef neighbor_allgather_nonblocking(tensor: torch.Tensor, name: str = None) -> int:\n    \"\"\"\n",
        "source_code_len": 92,
        "target_code": "\ndef neighbor_allgather_nonblocking(tensor: torch.Tensor, name: Optional[str] = None) -> int:\n    \"\"\"\n",
        "target_code_len": 102,
        "diff_format": "@@ -335,3 +337,3 @@\n \n-def neighbor_allgather_nonblocking(tensor: torch.Tensor, name: str = None) -> int:\n+def neighbor_allgather_nonblocking(tensor: torch.Tensor, name: Optional[str] = None) -> int:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>def neighbor_allgather_nonblocking(tensor: torch.Tensor, name: str = None) -> int:\n    <IND>",
        "target_code_with_indent": "\n<DED>def neighbor_allgather_nonblocking(tensor: torch.Tensor, name: Optional[str] = None) -> int:\n    <IND>"
      }
    ]
  },
  {
    "project": "Bluefog-Lib/bluefog",
    "commit": "8ecd73810d83828ba4452fb41328d436fa410a17",
    "filename": "bluefog/torch/mpi_ops.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Bluefog-Lib-bluefog/bluefog/torch/mpi_ops.py",
    "file_hunks_size": 24,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bluefog/torch/mpi_ops.py:336:57 Incompatible variable type [9]: name is declared to have type `str` but is used as type `None`.",
    "message": " name is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 336,
    "warning_line": "def neighbor_allgather_nonblocking(tensor: torch.Tensor, name: str = None) -> int:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from contextlib import contextmanager\nfrom typing import List, Dict\n\n",
        "source_code_len": 69,
        "target_code": "from contextlib import contextmanager\nfrom typing import List, Dict, Optional\n\n",
        "target_code_len": 79,
        "diff_format": "@@ -17,3 +17,3 @@\n from contextlib import contextmanager\n-from typing import List, Dict\n+from typing import List, Dict, Optional\n \n",
        "source_code_with_indent": "from contextlib import contextmanager\nfrom typing import List, Dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from contextlib import contextmanager\nfrom typing import List, Dict, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef neighbor_allgather_nonblocking(tensor: torch.Tensor, name: str = None) -> int:\n    \"\"\"\n",
        "source_code_len": 92,
        "target_code": "\ndef neighbor_allgather_nonblocking(tensor: torch.Tensor, name: Optional[str] = None) -> int:\n    \"\"\"\n",
        "target_code_len": 102,
        "diff_format": "@@ -335,3 +337,3 @@\n \n-def neighbor_allgather_nonblocking(tensor: torch.Tensor, name: str = None) -> int:\n+def neighbor_allgather_nonblocking(tensor: torch.Tensor, name: Optional[str] = None) -> int:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>def neighbor_allgather_nonblocking(tensor: torch.Tensor, name: str = None) -> int:\n    <IND>",
        "target_code_with_indent": "\n<DED>def neighbor_allgather_nonblocking(tensor: torch.Tensor, name: Optional[str] = None) -> int:\n    <IND>"
      }
    ]
  },
  {
    "project": "Bluefog-Lib/bluefog",
    "commit": "8ecd73810d83828ba4452fb41328d436fa410a17",
    "filename": "bluefog/torch/mpi_ops.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Bluefog-Lib-bluefog/bluefog/torch/mpi_ops.py",
    "file_hunks_size": 24,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bluefog/torch/mpi_ops.py:410:50 Incompatible variable type [9]: neighbor_weights is declared to have type `Dict[int, float]` but is used as type `None`.",
    "message": " neighbor_weights is declared to have type `Dict[int, float]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 410,
    "warning_line": "                       self_weight: float = None, neighbor_weights: Dict[int, float] = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from contextlib import contextmanager\nfrom typing import List, Dict\n\n",
        "source_code_len": 69,
        "target_code": "from contextlib import contextmanager\nfrom typing import List, Dict, Optional\n\n",
        "target_code_len": 79,
        "diff_format": "@@ -17,3 +17,3 @@\n from contextlib import contextmanager\n-from typing import List, Dict\n+from typing import List, Dict, Optional\n \n",
        "source_code_with_indent": "from contextlib import contextmanager\nfrom typing import List, Dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from contextlib import contextmanager\nfrom typing import List, Dict, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def neighbor_allreduce(tensor: torch.Tensor,\n                       self_weight: float = None, neighbor_weights: Dict[int, float] = None,\n                       send_neighbors: List[int] = None, enable_topo_check: bool = True,\n                       name: str = None) -> torch.Tensor:\n    \"\"\"\n",
        "source_code_len": 293,
        "target_code": "def neighbor_allreduce(tensor: torch.Tensor,\n                       self_weight: Optional[float] = None,\n                       neighbor_weights: Optional[Dict[int, float]] = None,\n                       send_neighbors: Optional[List[int]] = None,\n                       enable_topo_check: bool = True,\n                       name: Optional[str] = None) -> torch.Tensor:\n    \"\"\"\n",
        "target_code_len": 379,
        "diff_format": "@@ -409,5 +411,7 @@\n def neighbor_allreduce(tensor: torch.Tensor,\n-                       self_weight: float = None, neighbor_weights: Dict[int, float] = None,\n-                       send_neighbors: List[int] = None, enable_topo_check: bool = True,\n-                       name: str = None) -> torch.Tensor:\n+                       self_weight: Optional[float] = None,\n+                       neighbor_weights: Optional[Dict[int, float]] = None,\n+                       send_neighbors: Optional[List[int]] = None,\n+                       enable_topo_check: bool = True,\n+                       name: Optional[str] = None) -> torch.Tensor:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "<DED>def neighbor_allreduce(tensor: torch.Tensor,\n                       self_weight: float = None, neighbor_weights: Dict[int, float] = None,\n                       send_neighbors: List[int] = None, enable_topo_check: bool = True,\n                       name: str = None) -> torch.Tensor:\n    <IND>",
        "target_code_with_indent": "<DED>def neighbor_allreduce(tensor: torch.Tensor,\n                       self_weight: Optional[float] = None,\n                       neighbor_weights: Optional[Dict[int, float]] = None,\n                       send_neighbors: Optional[List[int]] = None,\n                       enable_topo_check: bool = True,\n                       name: Optional[str] = None) -> torch.Tensor:\n    <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def neighbor_allreduce_nonblocking(tensor: torch.Tensor,\n                                   self_weight: float = None,\n                                   neighbor_weights: Dict[int, float] = None,\n                                   send_neighbors: List[int] = None,\n                                   enable_topo_check: bool = True,\n                                   name: str = None) -> int:\n    \"\"\"\n",
        "source_code_len": 402,
        "target_code": "def neighbor_allreduce_nonblocking(tensor: torch.Tensor,\n                                   self_weight: Optional[float] = None,\n                                   neighbor_weights: Optional[Dict[int, float]] = None,\n                                   send_neighbors: Optional[List[int]] = None,\n                                   enable_topo_check: bool = True,\n                                   name: Optional[str] = None) -> int:\n    \"\"\"\n",
        "target_code_len": 442,
        "diff_format": "@@ -456,7 +460,7 @@\n def neighbor_allreduce_nonblocking(tensor: torch.Tensor,\n-                                   self_weight: float = None,\n-                                   neighbor_weights: Dict[int, float] = None,\n-                                   send_neighbors: List[int] = None,\n+                                   self_weight: Optional[float] = None,\n+                                   neighbor_weights: Optional[Dict[int, float]] = None,\n+                                   send_neighbors: Optional[List[int]] = None,\n                                    enable_topo_check: bool = True,\n-                                   name: str = None) -> int:\n+                                   name: Optional[str] = None) -> int:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "<DED>def neighbor_allreduce_nonblocking(tensor: torch.Tensor,\n                                   self_weight: float = None,\n                                   neighbor_weights: Dict[int, float] = None,\n                                   send_neighbors: List[int] = None,\n                                   enable_topo_check: bool = True,\n                                   name: str = None) -> int:\n    <IND>",
        "target_code_with_indent": "<DED>def neighbor_allreduce_nonblocking(tensor: torch.Tensor,\n                                   self_weight: Optional[float] = None,\n                                   neighbor_weights: Optional[Dict[int, float]] = None,\n                                   send_neighbors: Optional[List[int]] = None,\n                                   enable_topo_check: bool = True,\n                                   name: Optional[str] = None) -> int:\n    <IND>"
      }
    ]
  },
  {
    "project": "Bluefog-Lib/bluefog",
    "commit": "8ecd73810d83828ba4452fb41328d436fa410a17",
    "filename": "bluefog/torch/mpi_ops.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Bluefog-Lib-bluefog/bluefog/torch/mpi_ops.py",
    "file_hunks_size": 24,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bluefog/torch/mpi_ops.py:411:23 Incompatible variable type [9]: send_neighbors is declared to have type `List[int]` but is used as type `None`.",
    "message": " send_neighbors is declared to have type `List[int]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 411,
    "warning_line": "                       send_neighbors: List[int] = None, enable_topo_check: bool = True,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from contextlib import contextmanager\nfrom typing import List, Dict\n\n",
        "source_code_len": 69,
        "target_code": "from contextlib import contextmanager\nfrom typing import List, Dict, Optional\n\n",
        "target_code_len": 79,
        "diff_format": "@@ -17,3 +17,3 @@\n from contextlib import contextmanager\n-from typing import List, Dict\n+from typing import List, Dict, Optional\n \n",
        "source_code_with_indent": "from contextlib import contextmanager\nfrom typing import List, Dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from contextlib import contextmanager\nfrom typing import List, Dict, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def neighbor_allreduce(tensor: torch.Tensor,\n                       self_weight: float = None, neighbor_weights: Dict[int, float] = None,\n                       send_neighbors: List[int] = None, enable_topo_check: bool = True,\n                       name: str = None) -> torch.Tensor:\n    \"\"\"\n",
        "source_code_len": 293,
        "target_code": "def neighbor_allreduce(tensor: torch.Tensor,\n                       self_weight: Optional[float] = None,\n                       neighbor_weights: Optional[Dict[int, float]] = None,\n                       send_neighbors: Optional[List[int]] = None,\n                       enable_topo_check: bool = True,\n                       name: Optional[str] = None) -> torch.Tensor:\n    \"\"\"\n",
        "target_code_len": 379,
        "diff_format": "@@ -409,5 +411,7 @@\n def neighbor_allreduce(tensor: torch.Tensor,\n-                       self_weight: float = None, neighbor_weights: Dict[int, float] = None,\n-                       send_neighbors: List[int] = None, enable_topo_check: bool = True,\n-                       name: str = None) -> torch.Tensor:\n+                       self_weight: Optional[float] = None,\n+                       neighbor_weights: Optional[Dict[int, float]] = None,\n+                       send_neighbors: Optional[List[int]] = None,\n+                       enable_topo_check: bool = True,\n+                       name: Optional[str] = None) -> torch.Tensor:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "<DED>def neighbor_allreduce(tensor: torch.Tensor,\n                       self_weight: float = None, neighbor_weights: Dict[int, float] = None,\n                       send_neighbors: List[int] = None, enable_topo_check: bool = True,\n                       name: str = None) -> torch.Tensor:\n    <IND>",
        "target_code_with_indent": "<DED>def neighbor_allreduce(tensor: torch.Tensor,\n                       self_weight: Optional[float] = None,\n                       neighbor_weights: Optional[Dict[int, float]] = None,\n                       send_neighbors: Optional[List[int]] = None,\n                       enable_topo_check: bool = True,\n                       name: Optional[str] = None) -> torch.Tensor:\n    <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def neighbor_allreduce_nonblocking(tensor: torch.Tensor,\n                                   self_weight: float = None,\n                                   neighbor_weights: Dict[int, float] = None,\n                                   send_neighbors: List[int] = None,\n                                   enable_topo_check: bool = True,\n                                   name: str = None) -> int:\n    \"\"\"\n",
        "source_code_len": 402,
        "target_code": "def neighbor_allreduce_nonblocking(tensor: torch.Tensor,\n                                   self_weight: Optional[float] = None,\n                                   neighbor_weights: Optional[Dict[int, float]] = None,\n                                   send_neighbors: Optional[List[int]] = None,\n                                   enable_topo_check: bool = True,\n                                   name: Optional[str] = None) -> int:\n    \"\"\"\n",
        "target_code_len": 442,
        "diff_format": "@@ -456,7 +460,7 @@\n def neighbor_allreduce_nonblocking(tensor: torch.Tensor,\n-                                   self_weight: float = None,\n-                                   neighbor_weights: Dict[int, float] = None,\n-                                   send_neighbors: List[int] = None,\n+                                   self_weight: Optional[float] = None,\n+                                   neighbor_weights: Optional[Dict[int, float]] = None,\n+                                   send_neighbors: Optional[List[int]] = None,\n                                    enable_topo_check: bool = True,\n-                                   name: str = None) -> int:\n+                                   name: Optional[str] = None) -> int:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "<DED>def neighbor_allreduce_nonblocking(tensor: torch.Tensor,\n                                   self_weight: float = None,\n                                   neighbor_weights: Dict[int, float] = None,\n                                   send_neighbors: List[int] = None,\n                                   enable_topo_check: bool = True,\n                                   name: str = None) -> int:\n    <IND>",
        "target_code_with_indent": "<DED>def neighbor_allreduce_nonblocking(tensor: torch.Tensor,\n                                   self_weight: Optional[float] = None,\n                                   neighbor_weights: Optional[Dict[int, float]] = None,\n                                   send_neighbors: Optional[List[int]] = None,\n                                   enable_topo_check: bool = True,\n                                   name: Optional[str] = None) -> int:\n    <IND>"
      }
    ]
  },
  {
    "project": "Bluefog-Lib/bluefog",
    "commit": "8ecd73810d83828ba4452fb41328d436fa410a17",
    "filename": "bluefog/torch/mpi_ops.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Bluefog-Lib-bluefog/bluefog/torch/mpi_ops.py",
    "file_hunks_size": 24,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bluefog/torch/mpi_ops.py:412:23 Incompatible variable type [9]: name is declared to have type `str` but is used as type `None`.",
    "message": " name is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 412,
    "warning_line": "                       name: str = None) -> torch.Tensor:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from contextlib import contextmanager\nfrom typing import List, Dict\n\n",
        "source_code_len": 69,
        "target_code": "from contextlib import contextmanager\nfrom typing import List, Dict, Optional\n\n",
        "target_code_len": 79,
        "diff_format": "@@ -17,3 +17,3 @@\n from contextlib import contextmanager\n-from typing import List, Dict\n+from typing import List, Dict, Optional\n \n",
        "source_code_with_indent": "from contextlib import contextmanager\nfrom typing import List, Dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from contextlib import contextmanager\nfrom typing import List, Dict, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def neighbor_allreduce(tensor: torch.Tensor,\n                       self_weight: float = None, neighbor_weights: Dict[int, float] = None,\n                       send_neighbors: List[int] = None, enable_topo_check: bool = True,\n                       name: str = None) -> torch.Tensor:\n    \"\"\"\n",
        "source_code_len": 293,
        "target_code": "def neighbor_allreduce(tensor: torch.Tensor,\n                       self_weight: Optional[float] = None,\n                       neighbor_weights: Optional[Dict[int, float]] = None,\n                       send_neighbors: Optional[List[int]] = None,\n                       enable_topo_check: bool = True,\n                       name: Optional[str] = None) -> torch.Tensor:\n    \"\"\"\n",
        "target_code_len": 379,
        "diff_format": "@@ -409,5 +411,7 @@\n def neighbor_allreduce(tensor: torch.Tensor,\n-                       self_weight: float = None, neighbor_weights: Dict[int, float] = None,\n-                       send_neighbors: List[int] = None, enable_topo_check: bool = True,\n-                       name: str = None) -> torch.Tensor:\n+                       self_weight: Optional[float] = None,\n+                       neighbor_weights: Optional[Dict[int, float]] = None,\n+                       send_neighbors: Optional[List[int]] = None,\n+                       enable_topo_check: bool = True,\n+                       name: Optional[str] = None) -> torch.Tensor:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "<DED>def neighbor_allreduce(tensor: torch.Tensor,\n                       self_weight: float = None, neighbor_weights: Dict[int, float] = None,\n                       send_neighbors: List[int] = None, enable_topo_check: bool = True,\n                       name: str = None) -> torch.Tensor:\n    <IND>",
        "target_code_with_indent": "<DED>def neighbor_allreduce(tensor: torch.Tensor,\n                       self_weight: Optional[float] = None,\n                       neighbor_weights: Optional[Dict[int, float]] = None,\n                       send_neighbors: Optional[List[int]] = None,\n                       enable_topo_check: bool = True,\n                       name: Optional[str] = None) -> torch.Tensor:\n    <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def neighbor_allreduce_nonblocking(tensor: torch.Tensor,\n                                   self_weight: float = None,\n                                   neighbor_weights: Dict[int, float] = None,\n                                   send_neighbors: List[int] = None,\n                                   enable_topo_check: bool = True,\n                                   name: str = None) -> int:\n    \"\"\"\n",
        "source_code_len": 402,
        "target_code": "def neighbor_allreduce_nonblocking(tensor: torch.Tensor,\n                                   self_weight: Optional[float] = None,\n                                   neighbor_weights: Optional[Dict[int, float]] = None,\n                                   send_neighbors: Optional[List[int]] = None,\n                                   enable_topo_check: bool = True,\n                                   name: Optional[str] = None) -> int:\n    \"\"\"\n",
        "target_code_len": 442,
        "diff_format": "@@ -456,7 +460,7 @@\n def neighbor_allreduce_nonblocking(tensor: torch.Tensor,\n-                                   self_weight: float = None,\n-                                   neighbor_weights: Dict[int, float] = None,\n-                                   send_neighbors: List[int] = None,\n+                                   self_weight: Optional[float] = None,\n+                                   neighbor_weights: Optional[Dict[int, float]] = None,\n+                                   send_neighbors: Optional[List[int]] = None,\n                                    enable_topo_check: bool = True,\n-                                   name: str = None) -> int:\n+                                   name: Optional[str] = None) -> int:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "<DED>def neighbor_allreduce_nonblocking(tensor: torch.Tensor,\n                                   self_weight: float = None,\n                                   neighbor_weights: Dict[int, float] = None,\n                                   send_neighbors: List[int] = None,\n                                   enable_topo_check: bool = True,\n                                   name: str = None) -> int:\n    <IND>",
        "target_code_with_indent": "<DED>def neighbor_allreduce_nonblocking(tensor: torch.Tensor,\n                                   self_weight: Optional[float] = None,\n                                   neighbor_weights: Optional[Dict[int, float]] = None,\n                                   send_neighbors: Optional[List[int]] = None,\n                                   enable_topo_check: bool = True,\n                                   name: Optional[str] = None) -> int:\n    <IND>"
      }
    ]
  },
  {
    "project": "Bluefog-Lib/bluefog",
    "commit": "8ecd73810d83828ba4452fb41328d436fa410a17",
    "filename": "bluefog/torch/mpi_ops.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Bluefog-Lib-bluefog/bluefog/torch/mpi_ops.py",
    "file_hunks_size": 24,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bluefog/torch/mpi_ops.py:458:35 Incompatible variable type [9]: neighbor_weights is declared to have type `Dict[int, float]` but is used as type `None`.",
    "message": " neighbor_weights is declared to have type `Dict[int, float]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 458,
    "warning_line": "                                   neighbor_weights: Dict[int, float] = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from contextlib import contextmanager\nfrom typing import List, Dict\n\n",
        "source_code_len": 69,
        "target_code": "from contextlib import contextmanager\nfrom typing import List, Dict, Optional\n\n",
        "target_code_len": 79,
        "diff_format": "@@ -17,3 +17,3 @@\n from contextlib import contextmanager\n-from typing import List, Dict\n+from typing import List, Dict, Optional\n \n",
        "source_code_with_indent": "from contextlib import contextmanager\nfrom typing import List, Dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from contextlib import contextmanager\nfrom typing import List, Dict, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def neighbor_allreduce_nonblocking(tensor: torch.Tensor,\n                                   self_weight: float = None,\n                                   neighbor_weights: Dict[int, float] = None,\n                                   send_neighbors: List[int] = None,\n                                   enable_topo_check: bool = True,\n                                   name: str = None) -> int:\n    \"\"\"\n",
        "source_code_len": 402,
        "target_code": "def neighbor_allreduce_nonblocking(tensor: torch.Tensor,\n                                   self_weight: Optional[float] = None,\n                                   neighbor_weights: Optional[Dict[int, float]] = None,\n                                   send_neighbors: Optional[List[int]] = None,\n                                   enable_topo_check: bool = True,\n                                   name: Optional[str] = None) -> int:\n    \"\"\"\n",
        "target_code_len": 442,
        "diff_format": "@@ -456,7 +460,7 @@\n def neighbor_allreduce_nonblocking(tensor: torch.Tensor,\n-                                   self_weight: float = None,\n-                                   neighbor_weights: Dict[int, float] = None,\n-                                   send_neighbors: List[int] = None,\n+                                   self_weight: Optional[float] = None,\n+                                   neighbor_weights: Optional[Dict[int, float]] = None,\n+                                   send_neighbors: Optional[List[int]] = None,\n                                    enable_topo_check: bool = True,\n-                                   name: str = None) -> int:\n+                                   name: Optional[str] = None) -> int:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "<DED>def neighbor_allreduce_nonblocking(tensor: torch.Tensor,\n                                   self_weight: float = None,\n                                   neighbor_weights: Dict[int, float] = None,\n                                   send_neighbors: List[int] = None,\n                                   enable_topo_check: bool = True,\n                                   name: str = None) -> int:\n    <IND>",
        "target_code_with_indent": "<DED>def neighbor_allreduce_nonblocking(tensor: torch.Tensor,\n                                   self_weight: Optional[float] = None,\n                                   neighbor_weights: Optional[Dict[int, float]] = None,\n                                   send_neighbors: Optional[List[int]] = None,\n                                   enable_topo_check: bool = True,\n                                   name: Optional[str] = None) -> int:\n    <IND>"
      }
    ]
  },
  {
    "project": "Bluefog-Lib/bluefog",
    "commit": "8ecd73810d83828ba4452fb41328d436fa410a17",
    "filename": "bluefog/torch/mpi_ops.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Bluefog-Lib-bluefog/bluefog/torch/mpi_ops.py",
    "file_hunks_size": 24,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bluefog/torch/mpi_ops.py:459:35 Incompatible variable type [9]: send_neighbors is declared to have type `List[int]` but is used as type `None`.",
    "message": " send_neighbors is declared to have type `List[int]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 459,
    "warning_line": "                                   send_neighbors: List[int] = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from contextlib import contextmanager\nfrom typing import List, Dict\n\n",
        "source_code_len": 69,
        "target_code": "from contextlib import contextmanager\nfrom typing import List, Dict, Optional\n\n",
        "target_code_len": 79,
        "diff_format": "@@ -17,3 +17,3 @@\n from contextlib import contextmanager\n-from typing import List, Dict\n+from typing import List, Dict, Optional\n \n",
        "source_code_with_indent": "from contextlib import contextmanager\nfrom typing import List, Dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from contextlib import contextmanager\nfrom typing import List, Dict, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def neighbor_allreduce_nonblocking(tensor: torch.Tensor,\n                                   self_weight: float = None,\n                                   neighbor_weights: Dict[int, float] = None,\n                                   send_neighbors: List[int] = None,\n                                   enable_topo_check: bool = True,\n                                   name: str = None) -> int:\n    \"\"\"\n",
        "source_code_len": 402,
        "target_code": "def neighbor_allreduce_nonblocking(tensor: torch.Tensor,\n                                   self_weight: Optional[float] = None,\n                                   neighbor_weights: Optional[Dict[int, float]] = None,\n                                   send_neighbors: Optional[List[int]] = None,\n                                   enable_topo_check: bool = True,\n                                   name: Optional[str] = None) -> int:\n    \"\"\"\n",
        "target_code_len": 442,
        "diff_format": "@@ -456,7 +460,7 @@\n def neighbor_allreduce_nonblocking(tensor: torch.Tensor,\n-                                   self_weight: float = None,\n-                                   neighbor_weights: Dict[int, float] = None,\n-                                   send_neighbors: List[int] = None,\n+                                   self_weight: Optional[float] = None,\n+                                   neighbor_weights: Optional[Dict[int, float]] = None,\n+                                   send_neighbors: Optional[List[int]] = None,\n                                    enable_topo_check: bool = True,\n-                                   name: str = None) -> int:\n+                                   name: Optional[str] = None) -> int:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "<DED>def neighbor_allreduce_nonblocking(tensor: torch.Tensor,\n                                   self_weight: float = None,\n                                   neighbor_weights: Dict[int, float] = None,\n                                   send_neighbors: List[int] = None,\n                                   enable_topo_check: bool = True,\n                                   name: str = None) -> int:\n    <IND>",
        "target_code_with_indent": "<DED>def neighbor_allreduce_nonblocking(tensor: torch.Tensor,\n                                   self_weight: Optional[float] = None,\n                                   neighbor_weights: Optional[Dict[int, float]] = None,\n                                   send_neighbors: Optional[List[int]] = None,\n                                   enable_topo_check: bool = True,\n                                   name: Optional[str] = None) -> int:\n    <IND>"
      }
    ]
  },
  {
    "project": "Bluefog-Lib/bluefog",
    "commit": "8ecd73810d83828ba4452fb41328d436fa410a17",
    "filename": "bluefog/torch/mpi_ops.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Bluefog-Lib-bluefog/bluefog/torch/mpi_ops.py",
    "file_hunks_size": 24,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bluefog/torch/mpi_ops.py:461:35 Incompatible variable type [9]: name is declared to have type `str` but is used as type `None`.",
    "message": " name is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 461,
    "warning_line": "                                   name: str = None) -> int:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from contextlib import contextmanager\nfrom typing import List, Dict\n\n",
        "source_code_len": 69,
        "target_code": "from contextlib import contextmanager\nfrom typing import List, Dict, Optional\n\n",
        "target_code_len": 79,
        "diff_format": "@@ -17,3 +17,3 @@\n from contextlib import contextmanager\n-from typing import List, Dict\n+from typing import List, Dict, Optional\n \n",
        "source_code_with_indent": "from contextlib import contextmanager\nfrom typing import List, Dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from contextlib import contextmanager\nfrom typing import List, Dict, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def neighbor_allreduce_nonblocking(tensor: torch.Tensor,\n                                   self_weight: float = None,\n                                   neighbor_weights: Dict[int, float] = None,\n                                   send_neighbors: List[int] = None,\n                                   enable_topo_check: bool = True,\n                                   name: str = None) -> int:\n    \"\"\"\n",
        "source_code_len": 402,
        "target_code": "def neighbor_allreduce_nonblocking(tensor: torch.Tensor,\n                                   self_weight: Optional[float] = None,\n                                   neighbor_weights: Optional[Dict[int, float]] = None,\n                                   send_neighbors: Optional[List[int]] = None,\n                                   enable_topo_check: bool = True,\n                                   name: Optional[str] = None) -> int:\n    \"\"\"\n",
        "target_code_len": 442,
        "diff_format": "@@ -456,7 +460,7 @@\n def neighbor_allreduce_nonblocking(tensor: torch.Tensor,\n-                                   self_weight: float = None,\n-                                   neighbor_weights: Dict[int, float] = None,\n-                                   send_neighbors: List[int] = None,\n+                                   self_weight: Optional[float] = None,\n+                                   neighbor_weights: Optional[Dict[int, float]] = None,\n+                                   send_neighbors: Optional[List[int]] = None,\n                                    enable_topo_check: bool = True,\n-                                   name: str = None) -> int:\n+                                   name: Optional[str] = None) -> int:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "<DED>def neighbor_allreduce_nonblocking(tensor: torch.Tensor,\n                                   self_weight: float = None,\n                                   neighbor_weights: Dict[int, float] = None,\n                                   send_neighbors: List[int] = None,\n                                   enable_topo_check: bool = True,\n                                   name: str = None) -> int:\n    <IND>",
        "target_code_with_indent": "<DED>def neighbor_allreduce_nonblocking(tensor: torch.Tensor,\n                                   self_weight: Optional[float] = None,\n                                   neighbor_weights: Optional[Dict[int, float]] = None,\n                                   send_neighbors: Optional[List[int]] = None,\n                                   enable_topo_check: bool = True,\n                                   name: Optional[str] = None) -> int:\n    <IND>"
      }
    ]
  },
  {
    "project": "Bluefog-Lib/bluefog",
    "commit": "8ecd73810d83828ba4452fb41328d436fa410a17",
    "filename": "bluefog/torch/mpi_ops.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Bluefog-Lib-bluefog/bluefog/torch/mpi_ops.py",
    "file_hunks_size": 24,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bluefog/torch/mpi_ops.py:522:56 Incompatible variable type [9]: self_weight is declared to have type `float` but is used as type `None`.",
    "message": " self_weight is declared to have type `float` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 522,
    "warning_line": "def pair_gossip(tensor: torch.Tensor, target_rank: int, self_weight: float = None,"
  },
  {
    "project": "Bluefog-Lib/bluefog",
    "commit": "8ecd73810d83828ba4452fb41328d436fa410a17",
    "filename": "bluefog/torch/mpi_ops.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Bluefog-Lib-bluefog/bluefog/torch/mpi_ops.py",
    "file_hunks_size": 24,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bluefog/torch/mpi_ops.py:523:43 Incompatible variable type [9]: name is declared to have type `str` but is used as type `None`.",
    "message": " name is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 523,
    "warning_line": "                pair_weight: float = None, name: str = None) -> torch.Tensor:"
  },
  {
    "project": "Bluefog-Lib/bluefog",
    "commit": "8ecd73810d83828ba4452fb41328d436fa410a17",
    "filename": "bluefog/torch/mpi_ops.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Bluefog-Lib-bluefog/bluefog/torch/mpi_ops.py",
    "file_hunks_size": 24,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bluefog/torch/mpi_ops.py:549:68 Incompatible variable type [9]: self_weight is declared to have type `float` but is used as type `None`.",
    "message": " self_weight is declared to have type `float` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 549,
    "warning_line": "def pair_gossip_nonblocking(tensor: torch.Tensor, target_rank: int, self_weight: float = None,"
  },
  {
    "project": "Bluefog-Lib/bluefog",
    "commit": "8ecd73810d83828ba4452fb41328d436fa410a17",
    "filename": "bluefog/torch/mpi_ops.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Bluefog-Lib-bluefog/bluefog/torch/mpi_ops.py",
    "file_hunks_size": 24,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bluefog/torch/mpi_ops.py:550:55 Incompatible variable type [9]: name is declared to have type `str` but is used as type `None`.",
    "message": " name is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 550,
    "warning_line": "                            pair_weight: float = None, name: str = None) -> int:"
  },
  {
    "project": "Bluefog-Lib/bluefog",
    "commit": "8ecd73810d83828ba4452fb41328d436fa410a17",
    "filename": "bluefog/torch/mpi_ops.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Bluefog-Lib-bluefog/bluefog/torch/mpi_ops.py",
    "file_hunks_size": 24,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bluefog/torch/mpi_ops.py:663:13 Incompatible variable type [9]: name is declared to have type `str` but is used as type `None`.",
    "message": " name is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 663,
    "warning_line": "def win_free(name: str = None) -> bool:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from contextlib import contextmanager\nfrom typing import List, Dict\n\n",
        "source_code_len": 69,
        "target_code": "from contextlib import contextmanager\nfrom typing import List, Dict, Optional\n\n",
        "target_code_len": 79,
        "diff_format": "@@ -17,3 +17,3 @@\n from contextlib import contextmanager\n-from typing import List, Dict\n+from typing import List, Dict, Optional\n \n",
        "source_code_with_indent": "from contextlib import contextmanager\nfrom typing import List, Dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from contextlib import contextmanager\nfrom typing import List, Dict, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef win_free(name: str = None) -> bool:\n    \"\"\" Free the MPI windows associated with name.\n",
        "source_code_len": 92,
        "target_code": "\ndef win_free(name: Optional[str] = None) -> bool:\n    \"\"\" Free the MPI windows associated with name.\n",
        "target_code_len": 102,
        "diff_format": "@@ -662,3 +666,3 @@\n \n-def win_free(name: str = None) -> bool:\n+def win_free(name: Optional[str] = None) -> bool:\n     \"\"\" Free the MPI windows associated with name.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>def win_free(name: str = None) -> bool:\n    <IND>",
        "target_code_with_indent": "\n<DED>def win_free(name: Optional[str] = None) -> bool:\n    <IND>"
      }
    ]
  },
  {
    "project": "Bluefog-Lib/bluefog",
    "commit": "8ecd73810d83828ba4452fb41328d436fa410a17",
    "filename": "bluefog/torch/mpi_ops.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Bluefog-Lib-bluefog/bluefog/torch/mpi_ops.py",
    "file_hunks_size": 24,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bluefog/torch/mpi_ops.py:703:15 Incompatible variable type [9]: self_weight is declared to have type `float` but is used as type `None`.",
    "message": " self_weight is declared to have type `float` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 703,
    "warning_line": "               self_weight: float = None, neighbor_weights: Dict[int, float] = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from contextlib import contextmanager\nfrom typing import List, Dict\n\n",
        "source_code_len": 69,
        "target_code": "from contextlib import contextmanager\nfrom typing import List, Dict, Optional\n\n",
        "target_code_len": 79,
        "diff_format": "@@ -17,3 +17,3 @@\n from contextlib import contextmanager\n-from typing import List, Dict\n+from typing import List, Dict, Optional\n \n",
        "source_code_with_indent": "from contextlib import contextmanager\nfrom typing import List, Dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from contextlib import contextmanager\nfrom typing import List, Dict, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def win_update(name: str,\n               self_weight: float = None, neighbor_weights: Dict[int, float] = None,\n               reset: bool = False, clone: bool = False,\n",
        "source_code_len": 168,
        "target_code": "def win_update(name: str,\n               self_weight: Optional[float] = None,\n               neighbor_weights: Optional[Dict[int, float]] = None,\n               reset: bool = False, clone: bool = False,\n",
        "target_code_len": 203,
        "diff_format": "@@ -702,3 +706,4 @@\n def win_update(name: str,\n-               self_weight: float = None, neighbor_weights: Dict[int, float] = None,\n+               self_weight: Optional[float] = None,\n+               neighbor_weights: Optional[Dict[int, float]] = None,\n                reset: bool = False, clone: bool = False,\n",
        "source_code_with_indent": "<DED>def win_update(name: str,\n               self_weight: float = None, neighbor_weights: Dict[int, float] = None,\n               reset: bool = False, clone: bool = False,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED>def win_update(name: str,\n               self_weight: Optional[float] = None,\n               neighbor_weights: Optional[Dict[int, float]] = None,\n               reset: bool = False, clone: bool = False,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Bluefog-Lib/bluefog",
    "commit": "8ecd73810d83828ba4452fb41328d436fa410a17",
    "filename": "bluefog/torch/mpi_ops.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Bluefog-Lib-bluefog/bluefog/torch/mpi_ops.py",
    "file_hunks_size": 24,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bluefog/torch/mpi_ops.py:703:42 Incompatible variable type [9]: neighbor_weights is declared to have type `Dict[int, float]` but is used as type `None`.",
    "message": " neighbor_weights is declared to have type `Dict[int, float]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 703,
    "warning_line": "               self_weight: float = None, neighbor_weights: Dict[int, float] = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from contextlib import contextmanager\nfrom typing import List, Dict\n\n",
        "source_code_len": 69,
        "target_code": "from contextlib import contextmanager\nfrom typing import List, Dict, Optional\n\n",
        "target_code_len": 79,
        "diff_format": "@@ -17,3 +17,3 @@\n from contextlib import contextmanager\n-from typing import List, Dict\n+from typing import List, Dict, Optional\n \n",
        "source_code_with_indent": "from contextlib import contextmanager\nfrom typing import List, Dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from contextlib import contextmanager\nfrom typing import List, Dict, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def win_update(name: str,\n               self_weight: float = None, neighbor_weights: Dict[int, float] = None,\n               reset: bool = False, clone: bool = False,\n",
        "source_code_len": 168,
        "target_code": "def win_update(name: str,\n               self_weight: Optional[float] = None,\n               neighbor_weights: Optional[Dict[int, float]] = None,\n               reset: bool = False, clone: bool = False,\n",
        "target_code_len": 203,
        "diff_format": "@@ -702,3 +706,4 @@\n def win_update(name: str,\n-               self_weight: float = None, neighbor_weights: Dict[int, float] = None,\n+               self_weight: Optional[float] = None,\n+               neighbor_weights: Optional[Dict[int, float]] = None,\n                reset: bool = False, clone: bool = False,\n",
        "source_code_with_indent": "<DED>def win_update(name: str,\n               self_weight: float = None, neighbor_weights: Dict[int, float] = None,\n               reset: bool = False, clone: bool = False,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED>def win_update(name: str,\n               self_weight: Optional[float] = None,\n               neighbor_weights: Optional[Dict[int, float]] = None,\n               reset: bool = False, clone: bool = False,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Bluefog-Lib/bluefog",
    "commit": "8ecd73810d83828ba4452fb41328d436fa410a17",
    "filename": "bluefog/torch/mpi_ops.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Bluefog-Lib-bluefog/bluefog/torch/mpi_ops.py",
    "file_hunks_size": 24,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bluefog/torch/mpi_ops.py:780:24 Incompatible variable type [9]: self_weight is declared to have type `float` but is used as type `None`.",
    "message": " self_weight is declared to have type `float` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 780,
    "warning_line": "                        self_weight: float = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from contextlib import contextmanager\nfrom typing import List, Dict\n\n",
        "source_code_len": 69,
        "target_code": "from contextlib import contextmanager\nfrom typing import List, Dict, Optional\n\n",
        "target_code_len": 79,
        "diff_format": "@@ -17,3 +17,3 @@\n from contextlib import contextmanager\n-from typing import List, Dict\n+from typing import List, Dict, Optional\n \n",
        "source_code_with_indent": "from contextlib import contextmanager\nfrom typing import List, Dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from contextlib import contextmanager\nfrom typing import List, Dict, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def win_put_nonblocking(tensor: torch.Tensor, name: str,\n                        self_weight: float = None,\n                        dst_weights: Dict[int, float] = None,\n                        require_mutex: bool = False) -> int:\n",
        "source_code_len": 231,
        "target_code": "def win_put_nonblocking(tensor: torch.Tensor, name: str,\n                        self_weight: Optional[float] = None,\n                        dst_weights: Optional[Dict[int, float]] = None,\n                        require_mutex: bool = False) -> int:\n",
        "target_code_len": 251,
        "diff_format": "@@ -779,4 +784,4 @@\n def win_put_nonblocking(tensor: torch.Tensor, name: str,\n-                        self_weight: float = None,\n-                        dst_weights: Dict[int, float] = None,\n+                        self_weight: Optional[float] = None,\n+                        dst_weights: Optional[Dict[int, float]] = None,\n                         require_mutex: bool = False) -> int:\n",
        "source_code_with_indent": "<DED>def win_put_nonblocking(tensor: torch.Tensor, name: str,\n                        self_weight: float = None,\n                        dst_weights: Dict[int, float] = None,\n                        require_mutex: bool = False) -> int:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED>def win_put_nonblocking(tensor: torch.Tensor, name: str,\n                        self_weight: Optional[float] = None,\n                        dst_weights: Optional[Dict[int, float]] = None,\n                        require_mutex: bool = False) -> int:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Bluefog-Lib/bluefog",
    "commit": "8ecd73810d83828ba4452fb41328d436fa410a17",
    "filename": "bluefog/torch/mpi_ops.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Bluefog-Lib-bluefog/bluefog/torch/mpi_ops.py",
    "file_hunks_size": 24,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bluefog/torch/mpi_ops.py:781:24 Incompatible variable type [9]: dst_weights is declared to have type `Dict[int, float]` but is used as type `None`.",
    "message": " dst_weights is declared to have type `Dict[int, float]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 781,
    "warning_line": "                        dst_weights: Dict[int, float] = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from contextlib import contextmanager\nfrom typing import List, Dict\n\n",
        "source_code_len": 69,
        "target_code": "from contextlib import contextmanager\nfrom typing import List, Dict, Optional\n\n",
        "target_code_len": 79,
        "diff_format": "@@ -17,3 +17,3 @@\n from contextlib import contextmanager\n-from typing import List, Dict\n+from typing import List, Dict, Optional\n \n",
        "source_code_with_indent": "from contextlib import contextmanager\nfrom typing import List, Dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from contextlib import contextmanager\nfrom typing import List, Dict, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def win_put_nonblocking(tensor: torch.Tensor, name: str,\n                        self_weight: float = None,\n                        dst_weights: Dict[int, float] = None,\n                        require_mutex: bool = False) -> int:\n",
        "source_code_len": 231,
        "target_code": "def win_put_nonblocking(tensor: torch.Tensor, name: str,\n                        self_weight: Optional[float] = None,\n                        dst_weights: Optional[Dict[int, float]] = None,\n                        require_mutex: bool = False) -> int:\n",
        "target_code_len": 251,
        "diff_format": "@@ -779,4 +784,4 @@\n def win_put_nonblocking(tensor: torch.Tensor, name: str,\n-                        self_weight: float = None,\n-                        dst_weights: Dict[int, float] = None,\n+                        self_weight: Optional[float] = None,\n+                        dst_weights: Optional[Dict[int, float]] = None,\n                         require_mutex: bool = False) -> int:\n",
        "source_code_with_indent": "<DED>def win_put_nonblocking(tensor: torch.Tensor, name: str,\n                        self_weight: float = None,\n                        dst_weights: Dict[int, float] = None,\n                        require_mutex: bool = False) -> int:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED>def win_put_nonblocking(tensor: torch.Tensor, name: str,\n                        self_weight: Optional[float] = None,\n                        dst_weights: Optional[Dict[int, float]] = None,\n                        require_mutex: bool = False) -> int:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Bluefog-Lib/bluefog",
    "commit": "8ecd73810d83828ba4452fb41328d436fa410a17",
    "filename": "bluefog/torch/mpi_ops.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Bluefog-Lib-bluefog/bluefog/torch/mpi_ops.py",
    "file_hunks_size": 24,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bluefog/torch/mpi_ops.py:820:12 Incompatible variable type [9]: self_weight is declared to have type `float` but is used as type `None`.",
    "message": " self_weight is declared to have type `float` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 820,
    "warning_line": "            self_weight: float = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from contextlib import contextmanager\nfrom typing import List, Dict\n\n",
        "source_code_len": 69,
        "target_code": "from contextlib import contextmanager\nfrom typing import List, Dict, Optional\n\n",
        "target_code_len": 79,
        "diff_format": "@@ -17,3 +17,3 @@\n from contextlib import contextmanager\n-from typing import List, Dict\n+from typing import List, Dict, Optional\n \n",
        "source_code_with_indent": "from contextlib import contextmanager\nfrom typing import List, Dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from contextlib import contextmanager\nfrom typing import List, Dict, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def win_put_nonblocking(tensor: torch.Tensor, name: str,\n                        self_weight: float = None,\n                        dst_weights: Dict[int, float] = None,\n                        require_mutex: bool = False) -> int:\n",
        "source_code_len": 231,
        "target_code": "def win_put_nonblocking(tensor: torch.Tensor, name: str,\n                        self_weight: Optional[float] = None,\n                        dst_weights: Optional[Dict[int, float]] = None,\n                        require_mutex: bool = False) -> int:\n",
        "target_code_len": 251,
        "diff_format": "@@ -779,4 +784,4 @@\n def win_put_nonblocking(tensor: torch.Tensor, name: str,\n-                        self_weight: float = None,\n-                        dst_weights: Dict[int, float] = None,\n+                        self_weight: Optional[float] = None,\n+                        dst_weights: Optional[Dict[int, float]] = None,\n                         require_mutex: bool = False) -> int:\n",
        "source_code_with_indent": "<DED>def win_put_nonblocking(tensor: torch.Tensor, name: str,\n                        self_weight: float = None,\n                        dst_weights: Dict[int, float] = None,\n                        require_mutex: bool = False) -> int:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED>def win_put_nonblocking(tensor: torch.Tensor, name: str,\n                        self_weight: Optional[float] = None,\n                        dst_weights: Optional[Dict[int, float]] = None,\n                        require_mutex: bool = False) -> int:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def win_put(tensor: torch.Tensor, name: str,\n            self_weight: float = None,\n            dst_weights: Dict[int, float] = None,\n            require_mutex: bool = False) -> bool:\n",
        "source_code_len": 184,
        "target_code": "def win_put(tensor: torch.Tensor, name: str,\n            self_weight: Optional[float] = None,\n            dst_weights: Optional[Dict[int, float]] = None,\n            require_mutex: bool = False) -> bool:\n",
        "target_code_len": 204,
        "diff_format": "@@ -819,4 +824,4 @@\n def win_put(tensor: torch.Tensor, name: str,\n-            self_weight: float = None,\n-            dst_weights: Dict[int, float] = None,\n+            self_weight: Optional[float] = None,\n+            dst_weights: Optional[Dict[int, float]] = None,\n             require_mutex: bool = False) -> bool:\n",
        "source_code_with_indent": "<DED>def win_put(tensor: torch.Tensor, name: str,\n            self_weight: float = None,\n            dst_weights: Dict[int, float] = None,\n            require_mutex: bool = False) -> bool:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED>def win_put(tensor: torch.Tensor, name: str,\n            self_weight: Optional[float] = None,\n            dst_weights: Optional[Dict[int, float]] = None,\n            require_mutex: bool = False) -> bool:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Bluefog-Lib/bluefog",
    "commit": "8ecd73810d83828ba4452fb41328d436fa410a17",
    "filename": "bluefog/torch/mpi_ops.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Bluefog-Lib-bluefog/bluefog/torch/mpi_ops.py",
    "file_hunks_size": 24,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bluefog/torch/mpi_ops.py:821:12 Incompatible variable type [9]: dst_weights is declared to have type `Dict[int, float]` but is used as type `None`.",
    "message": " dst_weights is declared to have type `Dict[int, float]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 821,
    "warning_line": "            dst_weights: Dict[int, float] = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from contextlib import contextmanager\nfrom typing import List, Dict\n\n",
        "source_code_len": 69,
        "target_code": "from contextlib import contextmanager\nfrom typing import List, Dict, Optional\n\n",
        "target_code_len": 79,
        "diff_format": "@@ -17,3 +17,3 @@\n from contextlib import contextmanager\n-from typing import List, Dict\n+from typing import List, Dict, Optional\n \n",
        "source_code_with_indent": "from contextlib import contextmanager\nfrom typing import List, Dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from contextlib import contextmanager\nfrom typing import List, Dict, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def win_put_nonblocking(tensor: torch.Tensor, name: str,\n                        self_weight: float = None,\n                        dst_weights: Dict[int, float] = None,\n                        require_mutex: bool = False) -> int:\n",
        "source_code_len": 231,
        "target_code": "def win_put_nonblocking(tensor: torch.Tensor, name: str,\n                        self_weight: Optional[float] = None,\n                        dst_weights: Optional[Dict[int, float]] = None,\n                        require_mutex: bool = False) -> int:\n",
        "target_code_len": 251,
        "diff_format": "@@ -779,4 +784,4 @@\n def win_put_nonblocking(tensor: torch.Tensor, name: str,\n-                        self_weight: float = None,\n-                        dst_weights: Dict[int, float] = None,\n+                        self_weight: Optional[float] = None,\n+                        dst_weights: Optional[Dict[int, float]] = None,\n                         require_mutex: bool = False) -> int:\n",
        "source_code_with_indent": "<DED>def win_put_nonblocking(tensor: torch.Tensor, name: str,\n                        self_weight: float = None,\n                        dst_weights: Dict[int, float] = None,\n                        require_mutex: bool = False) -> int:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED>def win_put_nonblocking(tensor: torch.Tensor, name: str,\n                        self_weight: Optional[float] = None,\n                        dst_weights: Optional[Dict[int, float]] = None,\n                        require_mutex: bool = False) -> int:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def win_put(tensor: torch.Tensor, name: str,\n            self_weight: float = None,\n            dst_weights: Dict[int, float] = None,\n            require_mutex: bool = False) -> bool:\n",
        "source_code_len": 184,
        "target_code": "def win_put(tensor: torch.Tensor, name: str,\n            self_weight: Optional[float] = None,\n            dst_weights: Optional[Dict[int, float]] = None,\n            require_mutex: bool = False) -> bool:\n",
        "target_code_len": 204,
        "diff_format": "@@ -819,4 +824,4 @@\n def win_put(tensor: torch.Tensor, name: str,\n-            self_weight: float = None,\n-            dst_weights: Dict[int, float] = None,\n+            self_weight: Optional[float] = None,\n+            dst_weights: Optional[Dict[int, float]] = None,\n             require_mutex: bool = False) -> bool:\n",
        "source_code_with_indent": "<DED>def win_put(tensor: torch.Tensor, name: str,\n            self_weight: float = None,\n            dst_weights: Dict[int, float] = None,\n            require_mutex: bool = False) -> bool:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED>def win_put(tensor: torch.Tensor, name: str,\n            self_weight: Optional[float] = None,\n            dst_weights: Optional[Dict[int, float]] = None,\n            require_mutex: bool = False) -> bool:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Bluefog-Lib/bluefog",
    "commit": "8ecd73810d83828ba4452fb41328d436fa410a17",
    "filename": "bluefog/torch/mpi_ops.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Bluefog-Lib-bluefog/bluefog/torch/mpi_ops.py",
    "file_hunks_size": 24,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bluefog/torch/mpi_ops.py:847:35 Incompatible variable type [9]: src_weights is declared to have type `Dict[int, float]` but is used as type `None`.",
    "message": " src_weights is declared to have type `Dict[int, float]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 847,
    "warning_line": "def win_get_nonblocking(name: str, src_weights: Dict[int, float] = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from contextlib import contextmanager\nfrom typing import List, Dict\n\n",
        "source_code_len": 69,
        "target_code": "from contextlib import contextmanager\nfrom typing import List, Dict, Optional\n\n",
        "target_code_len": 79,
        "diff_format": "@@ -17,3 +17,3 @@\n from contextlib import contextmanager\n-from typing import List, Dict\n+from typing import List, Dict, Optional\n \n",
        "source_code_with_indent": "from contextlib import contextmanager\nfrom typing import List, Dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from contextlib import contextmanager\nfrom typing import List, Dict, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef win_get_nonblocking(name: str, src_weights: Dict[int, float] = None,\n                        require_mutex: bool = False) -> int:\n",
        "source_code_len": 135,
        "target_code": "\ndef win_get_nonblocking(name: str, src_weights: Optional[Dict[int, float]] = None,\n                        require_mutex: bool = False) -> int:\n",
        "target_code_len": 145,
        "diff_format": "@@ -846,3 +851,3 @@\n \n-def win_get_nonblocking(name: str, src_weights: Dict[int, float] = None,\n+def win_get_nonblocking(name: str, src_weights: Optional[Dict[int, float]] = None,\n                         require_mutex: bool = False) -> int:\n",
        "source_code_with_indent": "\n<DED>def win_get_nonblocking(name: str, src_weights: Dict[int, float] = None,\n                        require_mutex: bool = False) -> int:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def win_get_nonblocking(name: str, src_weights: Optional[Dict[int, float]] = None,\n                        require_mutex: bool = False) -> int:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Bluefog-Lib/bluefog",
    "commit": "8ecd73810d83828ba4452fb41328d436fa410a17",
    "filename": "bluefog/torch/mpi_ops.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Bluefog-Lib-bluefog/bluefog/torch/mpi_ops.py",
    "file_hunks_size": 24,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bluefog/torch/mpi_ops.py:881:23 Incompatible variable type [9]: src_weights is declared to have type `Dict[int, float]` but is used as type `None`.",
    "message": " src_weights is declared to have type `Dict[int, float]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 881,
    "warning_line": "def win_get(name: str, src_weights: Dict[int, float] = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from contextlib import contextmanager\nfrom typing import List, Dict\n\n",
        "source_code_len": 69,
        "target_code": "from contextlib import contextmanager\nfrom typing import List, Dict, Optional\n\n",
        "target_code_len": 79,
        "diff_format": "@@ -17,3 +17,3 @@\n from contextlib import contextmanager\n-from typing import List, Dict\n+from typing import List, Dict, Optional\n \n",
        "source_code_with_indent": "from contextlib import contextmanager\nfrom typing import List, Dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from contextlib import contextmanager\nfrom typing import List, Dict, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef win_get_nonblocking(name: str, src_weights: Dict[int, float] = None,\n                        require_mutex: bool = False) -> int:\n",
        "source_code_len": 135,
        "target_code": "\ndef win_get_nonblocking(name: str, src_weights: Optional[Dict[int, float]] = None,\n                        require_mutex: bool = False) -> int:\n",
        "target_code_len": 145,
        "diff_format": "@@ -846,3 +851,3 @@\n \n-def win_get_nonblocking(name: str, src_weights: Dict[int, float] = None,\n+def win_get_nonblocking(name: str, src_weights: Optional[Dict[int, float]] = None,\n                         require_mutex: bool = False) -> int:\n",
        "source_code_with_indent": "\n<DED>def win_get_nonblocking(name: str, src_weights: Dict[int, float] = None,\n                        require_mutex: bool = False) -> int:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def win_get_nonblocking(name: str, src_weights: Optional[Dict[int, float]] = None,\n                        require_mutex: bool = False) -> int:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef win_get(name: str, src_weights: Dict[int, float] = None,\n            require_mutex: bool = False) -> bool:\n",
        "source_code_len": 112,
        "target_code": "\ndef win_get(name: str, src_weights: Optional[Dict[int, float]] = None,\n            require_mutex: bool = False) -> bool:\n",
        "target_code_len": 122,
        "diff_format": "@@ -880,3 +885,3 @@\n \n-def win_get(name: str, src_weights: Dict[int, float] = None,\n+def win_get(name: str, src_weights: Optional[Dict[int, float]] = None,\n             require_mutex: bool = False) -> bool:\n",
        "source_code_with_indent": "\n<DED>def win_get(name: str, src_weights: Dict[int, float] = None,\n            require_mutex: bool = False) -> bool:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def win_get(name: str, src_weights: Optional[Dict[int, float]] = None,\n            require_mutex: bool = False) -> bool:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Bluefog-Lib/bluefog",
    "commit": "8ecd73810d83828ba4452fb41328d436fa410a17",
    "filename": "bluefog/torch/mpi_ops.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Bluefog-Lib-bluefog/bluefog/torch/mpi_ops.py",
    "file_hunks_size": 24,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bluefog/torch/mpi_ops.py:914:31 Incompatible variable type [9]: self_weight is declared to have type `float` but is used as type `None`.",
    "message": " self_weight is declared to have type `float` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 914,
    "warning_line": "                               self_weight: float = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from contextlib import contextmanager\nfrom typing import List, Dict\n\n",
        "source_code_len": 69,
        "target_code": "from contextlib import contextmanager\nfrom typing import List, Dict, Optional\n\n",
        "target_code_len": 79,
        "diff_format": "@@ -17,3 +17,3 @@\n from contextlib import contextmanager\n-from typing import List, Dict\n+from typing import List, Dict, Optional\n \n",
        "source_code_with_indent": "from contextlib import contextmanager\nfrom typing import List, Dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from contextlib import contextmanager\nfrom typing import List, Dict, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def win_accumulate_nonblocking(tensor: torch.Tensor, name: str,\n                               self_weight: float = None,\n                               dst_weights: Dict[int, float] = None,\n                               require_mutex: bool = False) -> bool:\n",
        "source_code_len": 260,
        "target_code": "def win_accumulate_nonblocking(tensor: torch.Tensor, name: str,\n                               self_weight: Optional[float] = None,\n                               dst_weights: Optional[Dict[int, float]] = None,\n                               require_mutex: bool = False) -> bool:\n",
        "target_code_len": 280,
        "diff_format": "@@ -913,4 +918,4 @@\n def win_accumulate_nonblocking(tensor: torch.Tensor, name: str,\n-                               self_weight: float = None,\n-                               dst_weights: Dict[int, float] = None,\n+                               self_weight: Optional[float] = None,\n+                               dst_weights: Optional[Dict[int, float]] = None,\n                                require_mutex: bool = False) -> bool:\n",
        "source_code_with_indent": "<DED>def win_accumulate_nonblocking(tensor: torch.Tensor, name: str,\n                               self_weight: float = None,\n                               dst_weights: Dict[int, float] = None,\n                               require_mutex: bool = False) -> bool:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED>def win_accumulate_nonblocking(tensor: torch.Tensor, name: str,\n                               self_weight: Optional[float] = None,\n                               dst_weights: Optional[Dict[int, float]] = None,\n                               require_mutex: bool = False) -> bool:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Bluefog-Lib/bluefog",
    "commit": "8ecd73810d83828ba4452fb41328d436fa410a17",
    "filename": "bluefog/torch/mpi_ops.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Bluefog-Lib-bluefog/bluefog/torch/mpi_ops.py",
    "file_hunks_size": 24,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bluefog/torch/mpi_ops.py:915:31 Incompatible variable type [9]: dst_weights is declared to have type `Dict[int, float]` but is used as type `None`.",
    "message": " dst_weights is declared to have type `Dict[int, float]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 915,
    "warning_line": "                               dst_weights: Dict[int, float] = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from contextlib import contextmanager\nfrom typing import List, Dict\n\n",
        "source_code_len": 69,
        "target_code": "from contextlib import contextmanager\nfrom typing import List, Dict, Optional\n\n",
        "target_code_len": 79,
        "diff_format": "@@ -17,3 +17,3 @@\n from contextlib import contextmanager\n-from typing import List, Dict\n+from typing import List, Dict, Optional\n \n",
        "source_code_with_indent": "from contextlib import contextmanager\nfrom typing import List, Dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from contextlib import contextmanager\nfrom typing import List, Dict, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def win_accumulate_nonblocking(tensor: torch.Tensor, name: str,\n                               self_weight: float = None,\n                               dst_weights: Dict[int, float] = None,\n                               require_mutex: bool = False) -> bool:\n",
        "source_code_len": 260,
        "target_code": "def win_accumulate_nonblocking(tensor: torch.Tensor, name: str,\n                               self_weight: Optional[float] = None,\n                               dst_weights: Optional[Dict[int, float]] = None,\n                               require_mutex: bool = False) -> bool:\n",
        "target_code_len": 280,
        "diff_format": "@@ -913,4 +918,4 @@\n def win_accumulate_nonblocking(tensor: torch.Tensor, name: str,\n-                               self_weight: float = None,\n-                               dst_weights: Dict[int, float] = None,\n+                               self_weight: Optional[float] = None,\n+                               dst_weights: Optional[Dict[int, float]] = None,\n                                require_mutex: bool = False) -> bool:\n",
        "source_code_with_indent": "<DED>def win_accumulate_nonblocking(tensor: torch.Tensor, name: str,\n                               self_weight: float = None,\n                               dst_weights: Dict[int, float] = None,\n                               require_mutex: bool = False) -> bool:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED>def win_accumulate_nonblocking(tensor: torch.Tensor, name: str,\n                               self_weight: Optional[float] = None,\n                               dst_weights: Optional[Dict[int, float]] = None,\n                               require_mutex: bool = False) -> bool:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Bluefog-Lib/bluefog",
    "commit": "8ecd73810d83828ba4452fb41328d436fa410a17",
    "filename": "bluefog/torch/mpi_ops.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Bluefog-Lib-bluefog/bluefog/torch/mpi_ops.py",
    "file_hunks_size": 24,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bluefog/torch/mpi_ops.py:955:19 Incompatible variable type [9]: self_weight is declared to have type `float` but is used as type `None`.",
    "message": " self_weight is declared to have type `float` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 955,
    "warning_line": "                   self_weight: float = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from contextlib import contextmanager\nfrom typing import List, Dict\n\n",
        "source_code_len": 69,
        "target_code": "from contextlib import contextmanager\nfrom typing import List, Dict, Optional\n\n",
        "target_code_len": 79,
        "diff_format": "@@ -17,3 +17,3 @@\n from contextlib import contextmanager\n-from typing import List, Dict\n+from typing import List, Dict, Optional\n \n",
        "source_code_with_indent": "from contextlib import contextmanager\nfrom typing import List, Dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from contextlib import contextmanager\nfrom typing import List, Dict, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def win_accumulate_nonblocking(tensor: torch.Tensor, name: str,\n                               self_weight: float = None,\n                               dst_weights: Dict[int, float] = None,\n                               require_mutex: bool = False) -> bool:\n",
        "source_code_len": 260,
        "target_code": "def win_accumulate_nonblocking(tensor: torch.Tensor, name: str,\n                               self_weight: Optional[float] = None,\n                               dst_weights: Optional[Dict[int, float]] = None,\n                               require_mutex: bool = False) -> bool:\n",
        "target_code_len": 280,
        "diff_format": "@@ -913,4 +918,4 @@\n def win_accumulate_nonblocking(tensor: torch.Tensor, name: str,\n-                               self_weight: float = None,\n-                               dst_weights: Dict[int, float] = None,\n+                               self_weight: Optional[float] = None,\n+                               dst_weights: Optional[Dict[int, float]] = None,\n                                require_mutex: bool = False) -> bool:\n",
        "source_code_with_indent": "<DED>def win_accumulate_nonblocking(tensor: torch.Tensor, name: str,\n                               self_weight: float = None,\n                               dst_weights: Dict[int, float] = None,\n                               require_mutex: bool = False) -> bool:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED>def win_accumulate_nonblocking(tensor: torch.Tensor, name: str,\n                               self_weight: Optional[float] = None,\n                               dst_weights: Optional[Dict[int, float]] = None,\n                               require_mutex: bool = False) -> bool:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def win_accumulate(tensor: torch.Tensor, name: str,\n                   self_weight: float = None,\n                   dst_weights: Dict[int, float] = None,\n                   require_mutex: bool = False) -> bool:\n",
        "source_code_len": 212,
        "target_code": "def win_accumulate(tensor: torch.Tensor, name: str,\n                   self_weight: Optional[float] = None,\n                   dst_weights: Optional[Dict[int, float]] = None,\n                   require_mutex: bool = False) -> bool:\n",
        "target_code_len": 232,
        "diff_format": "@@ -954,4 +959,4 @@\n def win_accumulate(tensor: torch.Tensor, name: str,\n-                   self_weight: float = None,\n-                   dst_weights: Dict[int, float] = None,\n+                   self_weight: Optional[float] = None,\n+                   dst_weights: Optional[Dict[int, float]] = None,\n                    require_mutex: bool = False) -> bool:\n",
        "source_code_with_indent": "<DED>def win_accumulate(tensor: torch.Tensor, name: str,\n                   self_weight: float = None,\n                   dst_weights: Dict[int, float] = None,\n                   require_mutex: bool = False) -> bool:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED>def win_accumulate(tensor: torch.Tensor, name: str,\n                   self_weight: Optional[float] = None,\n                   dst_weights: Optional[Dict[int, float]] = None,\n                   require_mutex: bool = False) -> bool:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Bluefog-Lib/bluefog",
    "commit": "8ecd73810d83828ba4452fb41328d436fa410a17",
    "filename": "bluefog/torch/mpi_ops.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Bluefog-Lib-bluefog/bluefog/torch/mpi_ops.py",
    "file_hunks_size": 24,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bluefog/torch/mpi_ops.py:956:19 Incompatible variable type [9]: dst_weights is declared to have type `Dict[int, float]` but is used as type `None`.",
    "message": " dst_weights is declared to have type `Dict[int, float]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 956,
    "warning_line": "                   dst_weights: Dict[int, float] = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from contextlib import contextmanager\nfrom typing import List, Dict\n\n",
        "source_code_len": 69,
        "target_code": "from contextlib import contextmanager\nfrom typing import List, Dict, Optional\n\n",
        "target_code_len": 79,
        "diff_format": "@@ -17,3 +17,3 @@\n from contextlib import contextmanager\n-from typing import List, Dict\n+from typing import List, Dict, Optional\n \n",
        "source_code_with_indent": "from contextlib import contextmanager\nfrom typing import List, Dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from contextlib import contextmanager\nfrom typing import List, Dict, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def win_accumulate_nonblocking(tensor: torch.Tensor, name: str,\n                               self_weight: float = None,\n                               dst_weights: Dict[int, float] = None,\n                               require_mutex: bool = False) -> bool:\n",
        "source_code_len": 260,
        "target_code": "def win_accumulate_nonblocking(tensor: torch.Tensor, name: str,\n                               self_weight: Optional[float] = None,\n                               dst_weights: Optional[Dict[int, float]] = None,\n                               require_mutex: bool = False) -> bool:\n",
        "target_code_len": 280,
        "diff_format": "@@ -913,4 +918,4 @@\n def win_accumulate_nonblocking(tensor: torch.Tensor, name: str,\n-                               self_weight: float = None,\n-                               dst_weights: Dict[int, float] = None,\n+                               self_weight: Optional[float] = None,\n+                               dst_weights: Optional[Dict[int, float]] = None,\n                                require_mutex: bool = False) -> bool:\n",
        "source_code_with_indent": "<DED>def win_accumulate_nonblocking(tensor: torch.Tensor, name: str,\n                               self_weight: float = None,\n                               dst_weights: Dict[int, float] = None,\n                               require_mutex: bool = False) -> bool:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED>def win_accumulate_nonblocking(tensor: torch.Tensor, name: str,\n                               self_weight: Optional[float] = None,\n                               dst_weights: Optional[Dict[int, float]] = None,\n                               require_mutex: bool = False) -> bool:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def win_accumulate(tensor: torch.Tensor, name: str,\n                   self_weight: float = None,\n                   dst_weights: Dict[int, float] = None,\n                   require_mutex: bool = False) -> bool:\n",
        "source_code_len": 212,
        "target_code": "def win_accumulate(tensor: torch.Tensor, name: str,\n                   self_weight: Optional[float] = None,\n                   dst_weights: Optional[Dict[int, float]] = None,\n                   require_mutex: bool = False) -> bool:\n",
        "target_code_len": 232,
        "diff_format": "@@ -954,4 +959,4 @@\n def win_accumulate(tensor: torch.Tensor, name: str,\n-                   self_weight: float = None,\n-                   dst_weights: Dict[int, float] = None,\n+                   self_weight: Optional[float] = None,\n+                   dst_weights: Optional[Dict[int, float]] = None,\n                    require_mutex: bool = False) -> bool:\n",
        "source_code_with_indent": "<DED>def win_accumulate(tensor: torch.Tensor, name: str,\n                   self_weight: float = None,\n                   dst_weights: Dict[int, float] = None,\n                   require_mutex: bool = False) -> bool:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED>def win_accumulate(tensor: torch.Tensor, name: str,\n                   self_weight: Optional[float] = None,\n                   dst_weights: Optional[Dict[int, float]] = None,\n                   require_mutex: bool = False) -> bool:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Bluefog-Lib/bluefog",
    "commit": "8ecd73810d83828ba4452fb41328d436fa410a17",
    "filename": "bluefog/torch/mpi_ops.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Bluefog-Lib-bluefog/bluefog/torch/mpi_ops.py",
    "file_hunks_size": 24,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bluefog/torch/mpi_ops.py:1032:41 Incompatible variable type [9]: ranks is declared to have type `List[int]` but is used as type `None`.",
    "message": " ranks is declared to have type `List[int]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 1032,
    "warning_line": "def win_mutex(name: str, for_self=False, ranks: List[int] = None):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from contextlib import contextmanager\nfrom typing import List, Dict\n\n",
        "source_code_len": 69,
        "target_code": "from contextlib import contextmanager\nfrom typing import List, Dict, Optional\n\n",
        "target_code_len": 79,
        "diff_format": "@@ -17,3 +17,3 @@\n from contextlib import contextmanager\n-from typing import List, Dict\n+from typing import List, Dict, Optional\n \n",
        "source_code_with_indent": "from contextlib import contextmanager\nfrom typing import List, Dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from contextlib import contextmanager\nfrom typing import List, Dict, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "@contextmanager\ndef win_mutex(name: str, for_self=False, ranks: List[int] = None):\n    \"\"\" A win object implemented mutex context manager. Note, there are N distributed\n",
        "source_code_len": 169,
        "target_code": "@contextmanager\ndef win_mutex(name: str, for_self=False, ranks: Optional[List[int]] = None):\n    \"\"\" A win object implemented mutex context manager. Note, there are N distributed\n",
        "target_code_len": 179,
        "diff_format": "@@ -1031,3 +1036,3 @@\n @contextmanager\n-def win_mutex(name: str, for_self=False, ranks: List[int] = None):\n+def win_mutex(name: str, for_self=False, ranks: Optional[List[int]] = None):\n     \"\"\" A win object implemented mutex context manager. Note, there are N distributed\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "<DED>@contextmanager\ndef win_mutex(name: str, for_self=False, ranks: List[int] = None):\n    <IND>",
        "target_code_with_indent": "<DED>@contextmanager\ndef win_mutex(name: str, for_self=False, ranks: Optional[List[int]] = None):\n    <IND>"
      }
    ]
  },
  {
    "project": "Bluefog-Lib/bluefog",
    "commit": "8ecd73810d83828ba4452fb41328d436fa410a17",
    "filename": "examples/pytorch_average_consensus.py",
    "min_patch_found": false,
    "full_warning_msg": "examples/pytorch_average_consensus.py:95:47 Incompatible parameter type [6]: Expected `float` for 3rd parameter `self_weight` to call `bf.mpi_ops.neighbor_allreduce` but got `typing.Optional[float]`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "Bluefog-Lib/bluefog",
    "commit": "8ecd73810d83828ba4452fb41328d436fa410a17",
    "filename": "examples/pytorch_average_consensus.py",
    "min_patch_found": false,
    "full_warning_msg": "examples/pytorch_average_consensus.py:96:34 Incompatible parameter type [6]: Expected `typing.Dict[int, float]` for 4th parameter `neighbor_weights` to call `bf.mpi_ops.neighbor_allreduce` but got `typing.Optional[typing.Dict[int, float]]`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "Bluefog-Lib/bluefog",
    "commit": "8ecd73810d83828ba4452fb41328d436fa410a17",
    "filename": "examples/pytorch_average_consensus.py",
    "min_patch_found": false,
    "full_warning_msg": "examples/pytorch_average_consensus.py:97:34 Incompatible parameter type [6]: Expected `typing.List[int]` for 5th parameter `send_neighbors` to call `bf.mpi_ops.neighbor_allreduce` but got `typing.Optional[typing.List[int]]`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  }
]