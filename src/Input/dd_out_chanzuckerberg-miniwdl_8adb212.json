[
  {
    "project": "chanzuckerberg/miniwdl",
    "commit": "8adb212f54eefc146ecbbba9e37ef5135dcb7eda",
    "filename": "WDL/Value.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/chanzuckerberg-miniwdl/WDL/Value.py",
    "file_hunks_size": 9,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "WDL/Value.py:343:23 Unsupported operand [58]: `in` is not supported for right operand type `Optional[Dict[str, Type.Base]]`.",
    "message": " `in` is not supported for right operand type `Optional[Dict[str, Type.Base]]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 343,
    "warning_line": "                assert k in desired_type.members"
  },
  {
    "project": "chanzuckerberg/miniwdl",
    "commit": "8adb212f54eefc146ecbbba9e37ef5135dcb7eda",
    "filename": "WDL/Value.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/chanzuckerberg-miniwdl/WDL/Value.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "WDL/Value.py:437:23 Unsupported operand [58]: `in` is not supported for right operand type `Optional[Dict[str, Type.Base]]`.",
    "message": " `in` is not supported for right operand type `Optional[Dict[str, Type.Base]]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 437,
    "warning_line": "                assert k in type.members",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        value = dict(value)\n        if isinstance(type, Type.StructInstance):\n            assert type.members\n            # coerce values to member types\n            for k in value:\n                assert k in type.members\n                value[k] = value[k].coerce(type.members[k])\n            # if initializer (map or object literal) omits optional members,\n            # fill them in with null\n            for k in type.members:\n                if k not in value:\n                    assert type.members[k].optional\n                    value[k] = Null()\n",
        "source_code_len": 557,
        "target_code": "        value = dict(value)\n        if isinstance(type, (Type.Object, Type.StructInstance)):\n            type_members = type.members\n            assert type_members\n            # coerce values to member types\n            for k in value:\n                try:\n                    value[k] = value[k].coerce(type_members[k])\n                except Error.RuntimeError:\n                    msg = (\n                        f\"runtime type mismatch initializing struct member\"\n                        f\" {str(type_members[k])} {k}\"\n                    )\n                    raise Error.EvalError(\n                        expr,\n                        msg,\n                    ) if expr else Error.RuntimeError(msg)\n            # if initializer omits optional members, fill them in with null\n            for k in type_members:\n                if k not in value:\n                    assert type_members[k].optional\n                    value[k] = Null()\n",
        "target_code_len": 943,
        "diff_format": "@@ -432,13 +444,22 @@\n         value = dict(value)\n-        if isinstance(type, Type.StructInstance):\n-            assert type.members\n+        if isinstance(type, (Type.Object, Type.StructInstance)):\n+            type_members = type.members\n+            assert type_members\n             # coerce values to member types\n             for k in value:\n-                assert k in type.members\n-                value[k] = value[k].coerce(type.members[k])\n-            # if initializer (map or object literal) omits optional members,\n-            # fill them in with null\n-            for k in type.members:\n+                try:\n+                    value[k] = value[k].coerce(type_members[k])\n+                except Error.RuntimeError:\n+                    msg = (\n+                        f\"runtime type mismatch initializing struct member\"\n+                        f\" {str(type_members[k])} {k}\"\n+                    )\n+                    raise Error.EvalError(\n+                        expr,\n+                        msg,\n+                    ) if expr else Error.RuntimeError(msg)\n+            # if initializer omits optional members, fill them in with null\n+            for k in type_members:\n                 if k not in value:\n-                    assert type.members[k].optional\n+                    assert type_members[k].optional\n                     value[k] = Null()\n",
        "source_code_with_indent": "        <IND>value = dict(value)\n        if isinstance(type, Type.StructInstance):\n            <IND>assert type.members\n            # coerce values to member types\n            for k in value:\n                <IND>assert k in type.members\n                value[k] = value[k].coerce(type.members[k])\n            # if initializer (map or object literal) omits optional members,\n            # fill them in with null\n            <DED>for k in type.members:\n                <IND>if k not in value:\n                    <IND>assert type.members[k].optional\n                    value[k] = Null()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>value = dict(value)\n        if isinstance(type, (Type.Object, Type.StructInstance)):\n            <IND>type_members = type.members\n            assert type_members\n            # coerce values to member types\n            for k in value:\n                <IND>try:\n                    <IND>value[k] = value[k].coerce(type_members[k])\n                <DED>except Error.RuntimeError:\n                    <IND>msg = (\n                        f\"runtime type mismatch initializing struct member\"\n                        f\" {str(type_members[k])} {k}\"\n                    )\n                    raise Error.EvalError(\n                        expr,\n                        msg,\n                    ) if expr else Error.RuntimeError(msg)\n            # if initializer omits optional members, fill them in with null\n            <DED><DED>for k in type_members:\n                <IND>if k not in value:\n                    <IND>assert type_members[k].optional\n                    value[k] = Null()\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]