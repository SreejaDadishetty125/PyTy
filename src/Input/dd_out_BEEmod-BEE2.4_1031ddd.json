[
  {
    "project": "BEEmod/BEE2.4",
    "commit": "1031ddd3a4f5837176c157bcdce2a943df685009",
    "filename": "src/tiling.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/BEEmod-BEE2.4/src/tiling.py",
    "file_hunks_size": 35,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/tiling.py:474:16 Incompatible variable type [9]: split_type is declared to have type `str` but is used as type `TileType`.",
    "message": " split_type is declared to have type `str` but is used as type `TileType`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 474,
    "warning_line": "                split_type = tiles.pop(SUBTILE_FIZZ_KEY)  # type: str"
  },
  {
    "project": "BEEmod/BEE2.4",
    "commit": "1031ddd3a4f5837176c157bcdce2a943df685009",
    "filename": "src/tiling.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/BEEmod-BEE2.4/src/tiling.py",
    "file_hunks_size": 35,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/tiling.py:566:20 Incompatible parameter type [6]: Expected `Tuple[bool, bool, bool, bool]` for 7th parameter `bevels` to call `make_tile` but got `List[bool]`.",
    "message": " Expected `Tuple[bool, bool, bool, bool]` for 7th parameter `bevels` to call `make_tile` but got `List[bool]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 566,
    "warning_line": "                    bevels=bevels,"
  },
  {
    "project": "BEEmod/BEE2.4",
    "commit": "1031ddd3a4f5837176c157bcdce2a943df685009",
    "filename": "src/tiling.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/BEEmod-BEE2.4/src/tiling.py",
    "file_hunks_size": 35,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/tiling.py:584:16 Incompatible parameter type [6]: Expected `Tuple[bool, bool, bool, bool]` for 4th positional only parameter to call `TileDef.gen_multitile_pattern` but got `List[bool]`.",
    "message": " Expected `Tuple[bool, bool, bool, bool]` for 4th positional only parameter to call `TileDef.gen_multitile_pattern` but got `List[bool]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 584,
    "warning_line": "                bevels,"
  },
  {
    "project": "BEEmod/BEE2.4",
    "commit": "1031ddd3a4f5837176c157bcdce2a943df685009",
    "filename": "src/tiling.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/BEEmod-BEE2.4/src/tiling.py",
    "file_hunks_size": 35,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/tiling.py:1090:42 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `dict.__getitem__` but got `int`.",
    "message": " Expected `str` for 1st positional only parameter to call `dict.__getitem__` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1090,
    "warning_line": "                tiles.append(face_to_tile[int(face)])",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    # reused later.\n    face_to_tile = {}  # type: Dict[str, TileDef]\n\n",
        "source_code_len": 71,
        "target_code": "    # reused later.\n    face_to_tile = {}  # type: Dict[int, TileDef]\n\n",
        "target_code_len": 71,
        "diff_format": "@@ -1015,3 +1037,3 @@\n     # reused later.\n-    face_to_tile = {}  # type: Dict[str, TileDef]\n+    face_to_tile = {}  # type: Dict[int, TileDef]\n \n",
        "source_code_with_indent": "    # reused later.\n    face_to_tile = {}  # type: Dict[str, TileDef]\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    # reused later.\n    face_to_tile = {}  # type: Dict[int, TileDef]\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]