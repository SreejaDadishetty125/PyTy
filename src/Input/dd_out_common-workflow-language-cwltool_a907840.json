[
  {
    "project": "common-workflow-language/cwltool",
    "commit": "a9078408aafdee0e0f7c27954fb80ef1a0c39e9c",
    "filename": "cwltool/argparser.py",
    "min_patch_found": false,
    "full_warning_msg": "cwltool/argparser.py:343:50 Incompatible variable type [9]: option_string is declared to have type `Variable[AnyStr <: [str, bytes]]` but is used as type `None`.",
    "exception": "too many values to unpack (expected 2)",
    "dd_fail": true
  },
  {
    "project": "common-workflow-language/cwltool",
    "commit": "a9078408aafdee0e0f7c27954fb80ef1a0c39e9c",
    "filename": "cwltool/argparser.py",
    "min_patch_found": false,
    "full_warning_msg": "cwltool/argparser.py:361:50 Incompatible variable type [9]: option_string is declared to have type `Variable[AnyStr <: [str, bytes]]` but is used as type `None`.",
    "exception": "too many values to unpack (expected 2)",
    "dd_fail": true
  },
  {
    "project": "common-workflow-language/cwltool",
    "commit": "a9078408aafdee0e0f7c27954fb80ef1a0c39e9c",
    "filename": "cwltool/command_line_tool.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/common-workflow-language-cwltool/cwltool/command_line_tool.py",
    "file_hunks_size": 12,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cwltool/command_line_tool.py:104:16 Incompatible variable type [9]: tmpdir_lock is declared to have type `threading.Lock` but is used as type `None`.",
    "message": " tmpdir_lock is declared to have type `threading.Lock` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 104,
    "warning_line": "                tmpdir_lock=None  # type: threading.Lock",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                runtimeContext,   # type: RuntimeContext\n                tmpdir_lock=None  # type: threading.Lock\n               ):  # type: (...) -> None\n",
        "source_code_len": 155,
        "target_code": "                runtimeContext,   # type: RuntimeContext\n                tmpdir_lock=None  # type: Optional[threading.Lock]\n               ):  # type: (...) -> None\n",
        "target_code_len": 165,
        "diff_format": "@@ -103,3 +103,3 @@\n                 runtimeContext,   # type: RuntimeContext\n-                tmpdir_lock=None  # type: threading.Lock\n+                tmpdir_lock=None  # type: Optional[threading.Lock]\n                ):  # type: (...) -> None\n",
        "source_code_with_indent": "                runtimeContext,   # type: RuntimeContext\n                tmpdir_lock=None  # type: threading.Lock\n               ):  # type: (...) -> None\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                runtimeContext,   # type: RuntimeContext\n                tmpdir_lock=None  # type: Optional[threading.Lock]\n               ):  # type: (...) -> None\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "common-workflow-language/cwltool",
    "commit": "a9078408aafdee0e0f7c27954fb80ef1a0c39e9c",
    "filename": "cwltool/command_line_tool.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/common-workflow-language-cwltool/cwltool/command_line_tool.py",
    "file_hunks_size": 12,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cwltool/command_line_tool.py:631:29 Incompatible variable type [9]: readers is declared to have type `Dict[str, typing.Any]` but is used as type `None`.",
    "message": " readers is declared to have type `Dict[str, typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 631,
    "warning_line": "                             readers=None            # type: Dict[Text, Any]",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                             jobname=\"\",             # type: Text\n                             readers=None            # type: Dict[Text, Any]\n                            ):  # type: (...) -> OutputPorts\n",
        "source_code_len": 204,
        "target_code": "                             jobname=\"\",             # type: Text\n                             readers=None            # type: Optional[Dict[Text, Any]]\n                            ):  # type: (...) -> OutputPorts\n",
        "target_code_len": 214,
        "diff_format": "@@ -630,3 +638,3 @@\n                              jobname=\"\",             # type: Text\n-                             readers=None            # type: Dict[Text, Any]\n+                             readers=None            # type: Optional[Dict[Text, Any]]\n                             ):  # type: (...) -> OutputPorts\n",
        "source_code_with_indent": "                             jobname=\"\",             # type: Text\n                             readers=None            # type: Dict[Text, Any]\n                            ):  # type: (...) -> OutputPorts\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                             jobname=\"\",             # type: Text\n                             readers=None            # type: Optional[Dict[Text, Any]]\n                            ):  # type: (...) -> OutputPorts\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "common-workflow-language/cwltool",
    "commit": "a9078408aafdee0e0f7c27954fb80ef1a0c39e9c",
    "filename": "cwltool/factory.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/common-workflow-language-cwltool/cwltool/factory.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cwltool/factory.py:43:17 Incompatible variable type [9]: executor is declared to have type `typing.Callable[..., Tuple[Dict[str, typing.Any], str]]` but is used as type `None`.",
    "message": " executor is declared to have type `typing.Callable[..., Tuple[Dict[str, typing.Any], str]]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 43,
    "warning_line": "                 executor=None,        # type: tCallable[...,Tuple[Dict[Text,Any], Text]]"
  },
  {
    "project": "common-workflow-language/cwltool",
    "commit": "a9078408aafdee0e0f7c27954fb80ef1a0c39e9c",
    "filename": "cwltool/factory.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/common-workflow-language-cwltool/cwltool/factory.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cwltool/factory.py:44:17 Incompatible variable type [9]: loading_context is declared to have type `LoadingContext` but is used as type `None`.",
    "message": " loading_context is declared to have type `LoadingContext` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 44,
    "warning_line": "                 loading_context=None,  # type: LoadingContext"
  },
  {
    "project": "common-workflow-language/cwltool",
    "commit": "a9078408aafdee0e0f7c27954fb80ef1a0c39e9c",
    "filename": "cwltool/factory.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/common-workflow-language-cwltool/cwltool/factory.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cwltool/factory.py:45:17 Incompatible variable type [9]: runtime_context is declared to have type `RuntimeContext` but is used as type `None`.",
    "message": " runtime_context is declared to have type `RuntimeContext` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 45,
    "warning_line": "                 runtime_context=None   # type: RuntimeContext"
  },
  {
    "project": "common-workflow-language/cwltool",
    "commit": "a9078408aafdee0e0f7c27954fb80ef1a0c39e9c",
    "filename": "cwltool/job.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/common-workflow-language-cwltool/cwltool/job.py",
    "file_hunks_size": 12,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cwltool/job.py:215:12 Incompatible variable type [9]: tmpdir_lock is declared to have type `threading.Lock` but is used as type `None`.",
    "message": " tmpdir_lock is declared to have type `threading.Lock` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 215,
    "warning_line": "            tmpdir_lock=None  # type: threading.Lock"
  },
  {
    "project": "common-workflow-language/cwltool",
    "commit": "a9078408aafdee0e0f7c27954fb80ef1a0c39e9c",
    "filename": "cwltool/job.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/common-workflow-language-cwltool/cwltool/job.py",
    "file_hunks_size": 12,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cwltool/job.py:317:16 Incompatible parameter type [6]: Expected `str` for 8th parameter `job_script_contents` to call `_job_popen` but got `Optional[str]`.",
    "message": " Expected `str` for 8th parameter `job_script_contents` to call `_job_popen` but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 317,
    "warning_line": "                job_script_contents=job_script_contents,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "               job_dir,                   # type: Text\n               job_script_contents=None,  # type: Text\n               timelimit=None,            # type: int\n               name=None,                 # type: Text\n               monitor_function=None      # type: Optional[Callable]\n               ):  # type: (...) -> int\n",
        "source_code_len": 328,
        "target_code": "               job_dir,                   # type: Text\n               job_script_contents=None,  # type: Optional[Text]\n               timelimit=None,            # type: Optional[int]\n               name=None,                 # type: Optional[Text]\n               monitor_function=None      # type: Optional[Callable[[subprocess.Popen], None]]\n               ):  # type: (...) -> int\n",
        "target_code_len": 384,
        "diff_format": "@@ -735,6 +736,6 @@\n                job_dir,                   # type: Text\n-               job_script_contents=None,  # type: Text\n-               timelimit=None,            # type: int\n-               name=None,                 # type: Text\n-               monitor_function=None      # type: Optional[Callable]\n+               job_script_contents=None,  # type: Optional[Text]\n+               timelimit=None,            # type: Optional[int]\n+               name=None,                 # type: Optional[Text]\n+               monitor_function=None      # type: Optional[Callable[[subprocess.Popen], None]]\n                ):  # type: (...) -> int\n",
        "source_code_with_indent": "               job_dir,                   # type: Text\n               job_script_contents=None,  # type: Text\n               timelimit=None,            # type: int\n               name=None,                 # type: Text\n               monitor_function=None      # type: Optional[Callable]\n               ):  # type: (...) -> int\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "               job_dir,                   # type: Text\n               job_script_contents=None,  # type: Optional[Text]\n               timelimit=None,            # type: Optional[int]\n               name=None,                 # type: Optional[Text]\n               monitor_function=None      # type: Optional[Callable[[subprocess.Popen], None]]\n               ):  # type: (...) -> int\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "common-workflow-language/cwltool",
    "commit": "a9078408aafdee0e0f7c27954fb80ef1a0c39e9c",
    "filename": "cwltool/job.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/common-workflow-language-cwltool/cwltool/job.py",
    "file_hunks_size": 12,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cwltool/job.py:318:16 Incompatible parameter type [6]: Expected `int` for 9th parameter `timelimit` to call `_job_popen` but got `Optional[int]`.",
    "message": " Expected `int` for 9th parameter `timelimit` to call `_job_popen` but got `Optional[int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 318,
    "warning_line": "                timelimit=self.timelimit,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "               job_dir,                   # type: Text\n               job_script_contents=None,  # type: Text\n               timelimit=None,            # type: int\n               name=None,                 # type: Text\n               monitor_function=None      # type: Optional[Callable]\n               ):  # type: (...) -> int\n",
        "source_code_len": 328,
        "target_code": "               job_dir,                   # type: Text\n               job_script_contents=None,  # type: Optional[Text]\n               timelimit=None,            # type: Optional[int]\n               name=None,                 # type: Optional[Text]\n               monitor_function=None      # type: Optional[Callable[[subprocess.Popen], None]]\n               ):  # type: (...) -> int\n",
        "target_code_len": 384,
        "diff_format": "@@ -735,6 +736,6 @@\n                job_dir,                   # type: Text\n-               job_script_contents=None,  # type: Text\n-               timelimit=None,            # type: int\n-               name=None,                 # type: Text\n-               monitor_function=None      # type: Optional[Callable]\n+               job_script_contents=None,  # type: Optional[Text]\n+               timelimit=None,            # type: Optional[int]\n+               name=None,                 # type: Optional[Text]\n+               monitor_function=None      # type: Optional[Callable[[subprocess.Popen], None]]\n                ):  # type: (...) -> int\n",
        "source_code_with_indent": "               job_dir,                   # type: Text\n               job_script_contents=None,  # type: Text\n               timelimit=None,            # type: int\n               name=None,                 # type: Text\n               monitor_function=None      # type: Optional[Callable]\n               ):  # type: (...) -> int\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "               job_dir,                   # type: Text\n               job_script_contents=None,  # type: Optional[Text]\n               timelimit=None,            # type: Optional[int]\n               name=None,                 # type: Optional[Text]\n               monitor_function=None      # type: Optional[Callable[[subprocess.Popen], None]]\n               ):  # type: (...) -> int\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "common-workflow-language/cwltool",
    "commit": "a9078408aafdee0e0f7c27954fb80ef1a0c39e9c",
    "filename": "cwltool/job.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/common-workflow-language-cwltool/cwltool/job.py",
    "file_hunks_size": 12,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cwltool/job.py:430:12 Incompatible variable type [9]: tmpdir_lock is declared to have type `threading.Lock` but is used as type `None`.",
    "message": " tmpdir_lock is declared to have type `threading.Lock` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 430,
    "warning_line": "            tmpdir_lock=None        # type: threading.Lock",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            runtimeContext,         # type: RuntimeContext\n            tmpdir_lock=None        # type: threading.Lock\n            ):  # type: (...) -> None\n",
        "source_code_len": 156,
        "target_code": "            runtimeContext,         # type: RuntimeContext\n            tmpdir_lock=None        # type: Optional[threading.Lock]\n            ):  # type: (...) -> None\n",
        "target_code_len": 166,
        "diff_format": "@@ -429,3 +430,3 @@\n             runtimeContext,         # type: RuntimeContext\n-            tmpdir_lock=None        # type: threading.Lock\n+            tmpdir_lock=None        # type: Optional[threading.Lock]\n             ):  # type: (...) -> None\n",
        "source_code_with_indent": "            runtimeContext,         # type: RuntimeContext\n            tmpdir_lock=None        # type: threading.Lock\n            ):  # type: (...) -> None\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            runtimeContext,         # type: RuntimeContext\n            tmpdir_lock=None        # type: Optional[threading.Lock]\n            ):  # type: (...) -> None\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "common-workflow-language/cwltool",
    "commit": "a9078408aafdee0e0f7c27954fb80ef1a0c39e9c",
    "filename": "cwltool/job.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/common-workflow-language-cwltool/cwltool/job.py",
    "file_hunks_size": 12,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cwltool/job.py:461:20 Incompatible parameter type [6]: Expected `SecretStore` for 4th parameter `secret_store` to call `stage_files` but got `Optional[SecretStore]`.",
    "message": " Expected `SecretStore` for 4th parameter `secret_store` to call `stage_files` but got `Optional[SecretStore]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 461,
    "warning_line": "                    secret_store=runtimeContext.secret_store)"
  },
  {
    "project": "common-workflow-language/cwltool",
    "commit": "a9078408aafdee0e0f7c27954fb80ef1a0c39e9c",
    "filename": "cwltool/job.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/common-workflow-language-cwltool/cwltool/job.py",
    "file_hunks_size": 12,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cwltool/job.py:464:38 Incompatible parameter type [6]: Expected `SecretStore` for 4th parameter `secret_store` to call `stage_files` but got `Optional[SecretStore]`.",
    "message": " Expected `SecretStore` for 4th parameter `secret_store` to call `stage_files` but got `Optional[SecretStore]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 464,
    "warning_line": "                        symlink=True, secret_store=runtimeContext.secret_store)"
  },
  {
    "project": "common-workflow-language/cwltool",
    "commit": "a9078408aafdee0e0f7c27954fb80ef1a0c39e9c",
    "filename": "cwltool/job.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/common-workflow-language-cwltool/cwltool/job.py",
    "file_hunks_size": 12,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cwltool/job.py:601:12 Incompatible variable type [9]: tmpdir_lock is declared to have type `threading.Lock` but is used as type `None`.",
    "message": " tmpdir_lock is declared to have type `threading.Lock` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 601,
    "warning_line": "            tmpdir_lock=None  # type: threading.Lock",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            runtimeContext,   # type: RuntimeContext\n            tmpdir_lock=None  # type: threading.Lock\n            ):  # type: (...) -> None\n",
        "source_code_len": 144,
        "target_code": "            runtimeContext,   # type: RuntimeContext\n            tmpdir_lock=None  # type: Optional[threading.Lock]\n            ):  # type: (...) -> None\n",
        "target_code_len": 154,
        "diff_format": "@@ -600,3 +601,3 @@\n             runtimeContext,   # type: RuntimeContext\n-            tmpdir_lock=None  # type: threading.Lock\n+            tmpdir_lock=None  # type: Optional[threading.Lock]\n             ):  # type: (...) -> None\n",
        "source_code_with_indent": "            runtimeContext,   # type: RuntimeContext\n            tmpdir_lock=None  # type: threading.Lock\n            ):  # type: (...) -> None\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            runtimeContext,   # type: RuntimeContext\n            tmpdir_lock=None  # type: Optional[threading.Lock]\n            ):  # type: (...) -> None\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "common-workflow-language/cwltool",
    "commit": "a9078408aafdee0e0f7c27954fb80ef1a0c39e9c",
    "filename": "cwltool/job.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/common-workflow-language-cwltool/cwltool/job.py",
    "file_hunks_size": 12,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cwltool/job.py:736:15 Incompatible variable type [9]: job_script_contents is declared to have type `str` but is used as type `None`.",
    "message": " job_script_contents is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 736,
    "warning_line": "               job_script_contents=None,  # type: Text",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "               job_dir,                   # type: Text\n               job_script_contents=None,  # type: Text\n               timelimit=None,            # type: int\n               name=None,                 # type: Text\n               monitor_function=None      # type: Optional[Callable]\n               ):  # type: (...) -> int\n",
        "source_code_len": 328,
        "target_code": "               job_dir,                   # type: Text\n               job_script_contents=None,  # type: Optional[Text]\n               timelimit=None,            # type: Optional[int]\n               name=None,                 # type: Optional[Text]\n               monitor_function=None      # type: Optional[Callable[[subprocess.Popen], None]]\n               ):  # type: (...) -> int\n",
        "target_code_len": 384,
        "diff_format": "@@ -735,6 +736,6 @@\n                job_dir,                   # type: Text\n-               job_script_contents=None,  # type: Text\n-               timelimit=None,            # type: int\n-               name=None,                 # type: Text\n-               monitor_function=None      # type: Optional[Callable]\n+               job_script_contents=None,  # type: Optional[Text]\n+               timelimit=None,            # type: Optional[int]\n+               name=None,                 # type: Optional[Text]\n+               monitor_function=None      # type: Optional[Callable[[subprocess.Popen], None]]\n                ):  # type: (...) -> int\n",
        "source_code_with_indent": "               job_dir,                   # type: Text\n               job_script_contents=None,  # type: Text\n               timelimit=None,            # type: int\n               name=None,                 # type: Text\n               monitor_function=None      # type: Optional[Callable]\n               ):  # type: (...) -> int\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "               job_dir,                   # type: Text\n               job_script_contents=None,  # type: Optional[Text]\n               timelimit=None,            # type: Optional[int]\n               name=None,                 # type: Optional[Text]\n               monitor_function=None      # type: Optional[Callable[[subprocess.Popen], None]]\n               ):  # type: (...) -> int\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "common-workflow-language/cwltool",
    "commit": "a9078408aafdee0e0f7c27954fb80ef1a0c39e9c",
    "filename": "cwltool/job.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/common-workflow-language-cwltool/cwltool/job.py",
    "file_hunks_size": 12,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cwltool/job.py:737:15 Incompatible variable type [9]: timelimit is declared to have type `int` but is used as type `None`.",
    "message": " timelimit is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 737,
    "warning_line": "               timelimit=None,            # type: int",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "               job_dir,                   # type: Text\n               job_script_contents=None,  # type: Text\n               timelimit=None,            # type: int\n               name=None,                 # type: Text\n               monitor_function=None      # type: Optional[Callable]\n               ):  # type: (...) -> int\n",
        "source_code_len": 328,
        "target_code": "               job_dir,                   # type: Text\n               job_script_contents=None,  # type: Optional[Text]\n               timelimit=None,            # type: Optional[int]\n               name=None,                 # type: Optional[Text]\n               monitor_function=None      # type: Optional[Callable[[subprocess.Popen], None]]\n               ):  # type: (...) -> int\n",
        "target_code_len": 384,
        "diff_format": "@@ -735,6 +736,6 @@\n                job_dir,                   # type: Text\n-               job_script_contents=None,  # type: Text\n-               timelimit=None,            # type: int\n-               name=None,                 # type: Text\n-               monitor_function=None      # type: Optional[Callable]\n+               job_script_contents=None,  # type: Optional[Text]\n+               timelimit=None,            # type: Optional[int]\n+               name=None,                 # type: Optional[Text]\n+               monitor_function=None      # type: Optional[Callable[[subprocess.Popen], None]]\n                ):  # type: (...) -> int\n",
        "source_code_with_indent": "               job_dir,                   # type: Text\n               job_script_contents=None,  # type: Text\n               timelimit=None,            # type: int\n               name=None,                 # type: Text\n               monitor_function=None      # type: Optional[Callable]\n               ):  # type: (...) -> int\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "               job_dir,                   # type: Text\n               job_script_contents=None,  # type: Optional[Text]\n               timelimit=None,            # type: Optional[int]\n               name=None,                 # type: Optional[Text]\n               monitor_function=None      # type: Optional[Callable[[subprocess.Popen], None]]\n               ):  # type: (...) -> int\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "common-workflow-language/cwltool",
    "commit": "a9078408aafdee0e0f7c27954fb80ef1a0c39e9c",
    "filename": "cwltool/job.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/common-workflow-language-cwltool/cwltool/job.py",
    "file_hunks_size": 12,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cwltool/job.py:738:15 Incompatible variable type [9]: name is declared to have type `str` but is used as type `None`.",
    "message": " name is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 738,
    "warning_line": "               name=None,                 # type: Text",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "               job_dir,                   # type: Text\n               job_script_contents=None,  # type: Text\n               timelimit=None,            # type: int\n               name=None,                 # type: Text\n               monitor_function=None      # type: Optional[Callable]\n               ):  # type: (...) -> int\n",
        "source_code_len": 328,
        "target_code": "               job_dir,                   # type: Text\n               job_script_contents=None,  # type: Optional[Text]\n               timelimit=None,            # type: Optional[int]\n               name=None,                 # type: Optional[Text]\n               monitor_function=None      # type: Optional[Callable[[subprocess.Popen], None]]\n               ):  # type: (...) -> int\n",
        "target_code_len": 384,
        "diff_format": "@@ -735,6 +736,6 @@\n                job_dir,                   # type: Text\n-               job_script_contents=None,  # type: Text\n-               timelimit=None,            # type: int\n-               name=None,                 # type: Text\n-               monitor_function=None      # type: Optional[Callable]\n+               job_script_contents=None,  # type: Optional[Text]\n+               timelimit=None,            # type: Optional[int]\n+               name=None,                 # type: Optional[Text]\n+               monitor_function=None      # type: Optional[Callable[[subprocess.Popen], None]]\n                ):  # type: (...) -> int\n",
        "source_code_with_indent": "               job_dir,                   # type: Text\n               job_script_contents=None,  # type: Text\n               timelimit=None,            # type: int\n               name=None,                 # type: Text\n               monitor_function=None      # type: Optional[Callable]\n               ):  # type: (...) -> int\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "               job_dir,                   # type: Text\n               job_script_contents=None,  # type: Optional[Text]\n               timelimit=None,            # type: Optional[int]\n               name=None,                 # type: Optional[Text]\n               monitor_function=None      # type: Optional[Callable[[subprocess.Popen], None]]\n               ):  # type: (...) -> int\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "common-workflow-language/cwltool",
    "commit": "a9078408aafdee0e0f7c27954fb80ef1a0c39e9c",
    "filename": "cwltool/load_tool.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/common-workflow-language-cwltool/cwltool/load_tool.py",
    "file_hunks_size": 8,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cwltool/load_tool.py:196:22 Incompatible variable type [9]: skip_schemas is declared to have type `bool` but is used as type `None`.",
    "message": " skip_schemas is declared to have type `bool` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 196,
    "warning_line": "                      skip_schemas=None,         # type: bool"
  },
  {
    "project": "common-workflow-language/cwltool",
    "commit": "a9078408aafdee0e0f7c27954fb80ef1a0c39e9c",
    "filename": "cwltool/main.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/common-workflow-language-cwltool/cwltool/main.py",
    "file_hunks_size": 34,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cwltool/main.py:284:19 Incompatible variable type [9]: secret_store is declared to have type `SecretStore` but is used as type `None`.",
    "message": " secret_store is declared to have type `SecretStore` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 284,
    "warning_line": "                   secret_store=None        # type: SecretStore",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                   input_basedir=\"\",        # type: Text\n                   secret_store=None        # type: SecretStore\n                  ):  # type: (...) -> MutableMapping[Text, Any]\n",
        "source_code_len": 186,
        "target_code": "                   input_basedir=\"\",        # type: Text\n                   secret_store=None        # type: Optional[SecretStore]\n                  ):  # type: (...) -> MutableMapping[Text, Any]\n",
        "target_code_len": 196,
        "diff_format": "@@ -283,3 +287,3 @@\n                    input_basedir=\"\",        # type: Text\n-                   secret_store=None        # type: SecretStore\n+                   secret_store=None        # type: Optional[SecretStore]\n                   ):  # type: (...) -> MutableMapping[Text, Any]\n",
        "source_code_with_indent": "                   input_basedir=\"\",        # type: Text\n                   secret_store=None        # type: SecretStore\n                  ):  # type: (...) -> MutableMapping[Text, Any]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                   input_basedir=\"\",        # type: Text\n                   secret_store=None        # type: Optional[SecretStore]\n                  ):  # type: (...) -> MutableMapping[Text, Any]\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "common-workflow-language/cwltool",
    "commit": "a9078408aafdee0e0f7c27954fb80ef1a0c39e9c",
    "filename": "cwltool/main.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/common-workflow-language-cwltool/cwltool/main.py",
    "file_hunks_size": 34,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cwltool/main.py:402:14 Incompatible variable type [9]: basedir is declared to have type `str` but is used as type `None`.",
    "message": " basedir is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 402,
    "warning_line": "              basedir=None,     # type: Text",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "              uri,              # type: Text\n              basedir=None,     # type: Text\n              nestdirs=True     # type: bool\n",
        "source_code_len": 135,
        "target_code": "              uri,              # type: Text\n              basedir=None,     # type: Optional[Text]\n              nestdirs=True     # type: bool\n",
        "target_code_len": 145,
        "diff_format": "@@ -401,3 +406,3 @@\n               uri,              # type: Text\n-              basedir=None,     # type: Text\n+              basedir=None,     # type: Optional[Text]\n               nestdirs=True     # type: bool\n",
        "source_code_with_indent": "              uri,              # type: Text\n              basedir=None,     # type: Text\n              nestdirs=True     # type: bool\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "              uri,              # type: Text\n              basedir=None,     # type: Optional[Text]\n              nestdirs=True     # type: bool\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "              uri,              # type: Text\n              basedir=None,     # type: Text\n              nestdirs=True     # type: bool\n",
        "source_code_len": 135,
        "target_code": "              uri,              # type: Text\n              basedir=None,     # type: Optional[Text]\n              nestdirs=True     # type: bool\n",
        "target_code_len": 145,
        "diff_format": "@@ -438,3 +443,3 @@\n               uri,              # type: Text\n-              basedir=None,     # type: Text\n+              basedir=None,     # type: Optional[Text]\n               nestdirs=True     # type: bool\n",
        "source_code_with_indent": "              uri,              # type: Text\n              basedir=None,     # type: Text\n              nestdirs=True     # type: bool\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "              uri,              # type: Text\n              basedir=None,     # type: Optional[Text]\n              nestdirs=True     # type: bool\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "common-workflow-language/cwltool",
    "commit": "a9078408aafdee0e0f7c27954fb80ef1a0c39e9c",
    "filename": "cwltool/main.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/common-workflow-language-cwltool/cwltool/main.py",
    "file_hunks_size": 34,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cwltool/main.py:419:14 Incompatible variable type [9]: basedir is declared to have type `str` but is used as type `None`.",
    "message": " basedir is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 419,
    "warning_line": "              basedir=None      # type: Text",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "              uri,              # type: Text\n              basedir=None      # type: Text\n             ):  # type: (...) -> MutableMapping[Text, Any]\n",
        "source_code_len": 150,
        "target_code": "              uri,              # type: Text\n              basedir=None      # type: Optional[Text]\n             ):  # type: (...) -> MutableMapping[Text, Any]\n",
        "target_code_len": 160,
        "diff_format": "@@ -418,3 +423,3 @@\n               uri,              # type: Text\n-              basedir=None      # type: Text\n+              basedir=None      # type: Optional[Text]\n              ):  # type: (...) -> MutableMapping[Text, Any]\n",
        "source_code_with_indent": "              uri,              # type: Text\n              basedir=None      # type: Text\n             ):  # type: (...) -> MutableMapping[Text, Any]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "              uri,              # type: Text\n              basedir=None      # type: Optional[Text]\n             ):  # type: (...) -> MutableMapping[Text, Any]\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "              uri,              # type: Text\n              basedir=None,     # type: Text\n              nestdirs=True     # type: bool\n",
        "source_code_len": 135,
        "target_code": "              uri,              # type: Text\n              basedir=None,     # type: Optional[Text]\n              nestdirs=True     # type: bool\n",
        "target_code_len": 145,
        "diff_format": "@@ -438,3 +443,3 @@\n               uri,              # type: Text\n-              basedir=None,     # type: Text\n+              basedir=None,     # type: Optional[Text]\n               nestdirs=True     # type: bool\n",
        "source_code_with_indent": "              uri,              # type: Text\n              basedir=None,     # type: Text\n              nestdirs=True     # type: bool\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "              uri,              # type: Text\n              basedir=None,     # type: Optional[Text]\n              nestdirs=True     # type: bool\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "common-workflow-language/cwltool",
    "commit": "a9078408aafdee0e0f7c27954fb80ef1a0c39e9c",
    "filename": "cwltool/main.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/common-workflow-language-cwltool/cwltool/main.py",
    "file_hunks_size": 34,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cwltool/main.py:439:14 Incompatible variable type [9]: basedir is declared to have type `str` but is used as type `None`.",
    "message": " basedir is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 439,
    "warning_line": "              basedir=None,     # type: Text",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "              uri,              # type: Text\n              basedir=None,     # type: Text\n              nestdirs=True     # type: bool\n",
        "source_code_len": 135,
        "target_code": "              uri,              # type: Text\n              basedir=None,     # type: Optional[Text]\n              nestdirs=True     # type: bool\n",
        "target_code_len": 145,
        "diff_format": "@@ -438,3 +443,3 @@\n               uri,              # type: Text\n-              basedir=None,     # type: Text\n+              basedir=None,     # type: Optional[Text]\n               nestdirs=True     # type: bool\n",
        "source_code_with_indent": "              uri,              # type: Text\n              basedir=None,     # type: Text\n              nestdirs=True     # type: bool\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "              uri,              # type: Text\n              basedir=None,     # type: Optional[Text]\n              nestdirs=True     # type: bool\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "common-workflow-language/cwltool",
    "commit": "a9078408aafdee0e0f7c27954fb80ef1a0c39e9c",
    "filename": "cwltool/main.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/common-workflow-language-cwltool/cwltool/main.py",
    "file_hunks_size": 34,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cwltool/main.py:477:9 Incompatible variable type [9]: argsl is declared to have type `List[str]` but is used as type `None`.",
    "message": " argsl is declared to have type `List[str]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 477,
    "warning_line": "def main(argsl=None,                   # type: List[str]"
  },
  {
    "project": "common-workflow-language/cwltool",
    "commit": "a9078408aafdee0e0f7c27954fb80ef1a0c39e9c",
    "filename": "cwltool/main.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/common-workflow-language-cwltool/cwltool/main.py",
    "file_hunks_size": 34,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cwltool/main.py:478:9 Incompatible variable type [9]: args is declared to have type `argparse.Namespace` but is used as type `None`.",
    "message": " args is declared to have type `argparse.Namespace` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 478,
    "warning_line": "         args=None,                    # type: argparse.Namespace",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from .errors import UnsupportedRequirement, WorkflowException\nfrom .executors import MultithreadedJobExecutor, SingleJobExecutor\nfrom .load_tool import (FetcherConstructorType,  # pylint: disable=unused-import\n",
        "source_code_len": 210,
        "target_code": "from .errors import UnsupportedRequirement, WorkflowException\nfrom .executors import MultithreadedJobExecutor, SingleJobExecutor, JobExecutor\nfrom .load_tool import (FetcherConstructorType,  # pylint: disable=unused-import\n",
        "target_code_len": 223,
        "diff_format": "@@ -36,3 +40,3 @@\n from .errors import UnsupportedRequirement, WorkflowException\n-from .executors import MultithreadedJobExecutor, SingleJobExecutor\n+from .executors import MultithreadedJobExecutor, SingleJobExecutor, JobExecutor\n from .load_tool import (FetcherConstructorType,  # pylint: disable=unused-import\n",
        "source_code_with_indent": "from .errors import UnsupportedRequirement, WorkflowException\nfrom .executors import MultithreadedJobExecutor, SingleJobExecutor\nfrom .load_tool import (FetcherConstructorType,  # pylint: disable=unused-import\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from .errors import UnsupportedRequirement, WorkflowException\nfrom .executors import MultithreadedJobExecutor, SingleJobExecutor, JobExecutor\nfrom .load_tool import (FetcherConstructorType,  # pylint: disable=unused-import\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef main(argsl=None,                   # type: List[str]\n         args=None,                    # type: argparse.Namespace\n         job_order_object=None,        # type: MutableMapping[Text, Any]\n         stdin=sys.stdin,              # type: IO[Any]\n         stdout=None,                  # type: Union[TextIO, StreamWriter]\n         stderr=sys.stderr,            # type: IO[Any]\n         versionfunc=versionstring,    # type: Callable[[], Text]\n         logger_handler=None,          #\n         custom_schema_callback=None,  # type: Callable[[], None]\n         executor=None,                # type: Callable[..., Tuple[Dict[Text, Any], Text]]\n         loadingContext=None,          # type: LoadingContext\n         runtimeContext=None           # type: RuntimeContext\n        ):  # type: (...) -> int\n    if not stdout:  # force UTF-8 even if the console is configured differently\n        if (hasattr(sys.stdout, \"encoding\")  # type: ignore\n                and sys.stdout.encoding != 'UTF-8'):  # type: ignore\n",
        "source_code_len": 1012,
        "target_code": "\ndef main(argsl=None,                   # type: Optional[List[str]]\n         args=None,                    # type: Optional[argparse.Namespace]\n         job_order_object=None,        # type: Optional[MutableMapping[Text, Any]]\n         stdin=sys.stdin,              # type: IO[Any]\n         stdout=None,                  # type: Optional[Union[TextIO, StreamWriter]]\n         stderr=sys.stderr,            # type: IO[Any]\n         versionfunc=versionstring,    # type: Callable[[], Text]\n         logger_handler=None,          # type: Optional[logging.Handler]\n         custom_schema_callback=None,  # type: Optional[Callable[[], None]]\n         executor=None,                # type: Optional[JobExecutor]\n         loadingContext=None,          # type: Optional[LoadingContext]\n         runtimeContext=None           # type: Optional[RuntimeContext]\n        ):  # type: (...) -> int\n    if not stdout:  # force UTF-8 even if the console is configured differently\n        if (hasattr(sys.stdout, \"encoding\")\n                and sys.stdout.encoding != 'UTF-8'):  # type: ignore\n",
        "target_code_len": 1076,
        "diff_format": "@@ -476,17 +481,17 @@\n \n-def main(argsl=None,                   # type: List[str]\n-         args=None,                    # type: argparse.Namespace\n-         job_order_object=None,        # type: MutableMapping[Text, Any]\n+def main(argsl=None,                   # type: Optional[List[str]]\n+         args=None,                    # type: Optional[argparse.Namespace]\n+         job_order_object=None,        # type: Optional[MutableMapping[Text, Any]]\n          stdin=sys.stdin,              # type: IO[Any]\n-         stdout=None,                  # type: Union[TextIO, StreamWriter]\n+         stdout=None,                  # type: Optional[Union[TextIO, StreamWriter]]\n          stderr=sys.stderr,            # type: IO[Any]\n          versionfunc=versionstring,    # type: Callable[[], Text]\n-         logger_handler=None,          #\n-         custom_schema_callback=None,  # type: Callable[[], None]\n-         executor=None,                # type: Callable[..., Tuple[Dict[Text, Any], Text]]\n-         loadingContext=None,          # type: LoadingContext\n-         runtimeContext=None           # type: RuntimeContext\n+         logger_handler=None,          # type: Optional[logging.Handler]\n+         custom_schema_callback=None,  # type: Optional[Callable[[], None]]\n+         executor=None,                # type: Optional[JobExecutor]\n+         loadingContext=None,          # type: Optional[LoadingContext]\n+         runtimeContext=None           # type: Optional[RuntimeContext]\n         ):  # type: (...) -> int\n     if not stdout:  # force UTF-8 even if the console is configured differently\n-        if (hasattr(sys.stdout, \"encoding\")  # type: ignore\n+        if (hasattr(sys.stdout, \"encoding\")\n                 and sys.stdout.encoding != 'UTF-8'):  # type: ignore\n",
        "source_code_with_indent": "\n<DED>def main(argsl=None,                   # type: List[str]\n         args=None,                    # type: argparse.Namespace\n         job_order_object=None,        # type: MutableMapping[Text, Any]\n         stdin=sys.stdin,              # type: IO[Any]\n         stdout=None,                  # type: Union[TextIO, StreamWriter]\n         stderr=sys.stderr,            # type: IO[Any]\n         versionfunc=versionstring,    # type: Callable[[], Text]\n         logger_handler=None,          #\n         custom_schema_callback=None,  # type: Callable[[], None]\n         executor=None,                # type: Callable[..., Tuple[Dict[Text, Any], Text]]\n         loadingContext=None,          # type: LoadingContext\n         runtimeContext=None           # type: RuntimeContext\n        ):  # type: (...) -> int\n    <IND>if not stdout:  # force UTF-8 even if the console is configured differently\n        <IND>if (hasattr(sys.stdout, \"encoding\")  # type: ignore\n                and sys.stdout.encoding != 'UTF-8'):  # type: ignore\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def main(argsl=None,                   # type: Optional[List[str]]\n         args=None,                    # type: Optional[argparse.Namespace]\n         job_order_object=None,        # type: Optional[MutableMapping[Text, Any]]\n         stdin=sys.stdin,              # type: IO[Any]\n         stdout=None,                  # type: Optional[Union[TextIO, StreamWriter]]\n         stderr=sys.stderr,            # type: IO[Any]\n         versionfunc=versionstring,    # type: Callable[[], Text]\n         logger_handler=None,          # type: Optional[logging.Handler]\n         custom_schema_callback=None,  # type: Optional[Callable[[], None]]\n         executor=None,                # type: Optional[JobExecutor]\n         loadingContext=None,          # type: Optional[LoadingContext]\n         runtimeContext=None           # type: Optional[RuntimeContext]\n        ):  # type: (...) -> int\n    <IND>if not stdout:  # force UTF-8 even if the console is configured differently\n        <IND>if (hasattr(sys.stdout, \"encoding\")\n                and sys.stdout.encoding != 'UTF-8'):  # type: ignore\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "common-workflow-language/cwltool",
    "commit": "a9078408aafdee0e0f7c27954fb80ef1a0c39e9c",
    "filename": "cwltool/main.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/common-workflow-language-cwltool/cwltool/main.py",
    "file_hunks_size": 34,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cwltool/main.py:479:9 Incompatible variable type [9]: job_order_object is declared to have type `MutableMapping[str, typing.Any]` but is used as type `None`.",
    "message": " job_order_object is declared to have type `MutableMapping[str, typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 479,
    "warning_line": "         job_order_object=None,        # type: MutableMapping[Text, Any]",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from .errors import UnsupportedRequirement, WorkflowException\nfrom .executors import MultithreadedJobExecutor, SingleJobExecutor\nfrom .load_tool import (FetcherConstructorType,  # pylint: disable=unused-import\n",
        "source_code_len": 210,
        "target_code": "from .errors import UnsupportedRequirement, WorkflowException\nfrom .executors import MultithreadedJobExecutor, SingleJobExecutor, JobExecutor\nfrom .load_tool import (FetcherConstructorType,  # pylint: disable=unused-import\n",
        "target_code_len": 223,
        "diff_format": "@@ -36,3 +40,3 @@\n from .errors import UnsupportedRequirement, WorkflowException\n-from .executors import MultithreadedJobExecutor, SingleJobExecutor\n+from .executors import MultithreadedJobExecutor, SingleJobExecutor, JobExecutor\n from .load_tool import (FetcherConstructorType,  # pylint: disable=unused-import\n",
        "source_code_with_indent": "from .errors import UnsupportedRequirement, WorkflowException\nfrom .executors import MultithreadedJobExecutor, SingleJobExecutor\nfrom .load_tool import (FetcherConstructorType,  # pylint: disable=unused-import\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from .errors import UnsupportedRequirement, WorkflowException\nfrom .executors import MultithreadedJobExecutor, SingleJobExecutor, JobExecutor\nfrom .load_tool import (FetcherConstructorType,  # pylint: disable=unused-import\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef main(argsl=None,                   # type: List[str]\n         args=None,                    # type: argparse.Namespace\n         job_order_object=None,        # type: MutableMapping[Text, Any]\n         stdin=sys.stdin,              # type: IO[Any]\n         stdout=None,                  # type: Union[TextIO, StreamWriter]\n         stderr=sys.stderr,            # type: IO[Any]\n         versionfunc=versionstring,    # type: Callable[[], Text]\n         logger_handler=None,          #\n         custom_schema_callback=None,  # type: Callable[[], None]\n         executor=None,                # type: Callable[..., Tuple[Dict[Text, Any], Text]]\n         loadingContext=None,          # type: LoadingContext\n         runtimeContext=None           # type: RuntimeContext\n        ):  # type: (...) -> int\n    if not stdout:  # force UTF-8 even if the console is configured differently\n        if (hasattr(sys.stdout, \"encoding\")  # type: ignore\n                and sys.stdout.encoding != 'UTF-8'):  # type: ignore\n",
        "source_code_len": 1012,
        "target_code": "\ndef main(argsl=None,                   # type: Optional[List[str]]\n         args=None,                    # type: Optional[argparse.Namespace]\n         job_order_object=None,        # type: Optional[MutableMapping[Text, Any]]\n         stdin=sys.stdin,              # type: IO[Any]\n         stdout=None,                  # type: Optional[Union[TextIO, StreamWriter]]\n         stderr=sys.stderr,            # type: IO[Any]\n         versionfunc=versionstring,    # type: Callable[[], Text]\n         logger_handler=None,          # type: Optional[logging.Handler]\n         custom_schema_callback=None,  # type: Optional[Callable[[], None]]\n         executor=None,                # type: Optional[JobExecutor]\n         loadingContext=None,          # type: Optional[LoadingContext]\n         runtimeContext=None           # type: Optional[RuntimeContext]\n        ):  # type: (...) -> int\n    if not stdout:  # force UTF-8 even if the console is configured differently\n        if (hasattr(sys.stdout, \"encoding\")\n                and sys.stdout.encoding != 'UTF-8'):  # type: ignore\n",
        "target_code_len": 1076,
        "diff_format": "@@ -476,17 +481,17 @@\n \n-def main(argsl=None,                   # type: List[str]\n-         args=None,                    # type: argparse.Namespace\n-         job_order_object=None,        # type: MutableMapping[Text, Any]\n+def main(argsl=None,                   # type: Optional[List[str]]\n+         args=None,                    # type: Optional[argparse.Namespace]\n+         job_order_object=None,        # type: Optional[MutableMapping[Text, Any]]\n          stdin=sys.stdin,              # type: IO[Any]\n-         stdout=None,                  # type: Union[TextIO, StreamWriter]\n+         stdout=None,                  # type: Optional[Union[TextIO, StreamWriter]]\n          stderr=sys.stderr,            # type: IO[Any]\n          versionfunc=versionstring,    # type: Callable[[], Text]\n-         logger_handler=None,          #\n-         custom_schema_callback=None,  # type: Callable[[], None]\n-         executor=None,                # type: Callable[..., Tuple[Dict[Text, Any], Text]]\n-         loadingContext=None,          # type: LoadingContext\n-         runtimeContext=None           # type: RuntimeContext\n+         logger_handler=None,          # type: Optional[logging.Handler]\n+         custom_schema_callback=None,  # type: Optional[Callable[[], None]]\n+         executor=None,                # type: Optional[JobExecutor]\n+         loadingContext=None,          # type: Optional[LoadingContext]\n+         runtimeContext=None           # type: Optional[RuntimeContext]\n         ):  # type: (...) -> int\n     if not stdout:  # force UTF-8 even if the console is configured differently\n-        if (hasattr(sys.stdout, \"encoding\")  # type: ignore\n+        if (hasattr(sys.stdout, \"encoding\")\n                 and sys.stdout.encoding != 'UTF-8'):  # type: ignore\n",
        "source_code_with_indent": "\n<DED>def main(argsl=None,                   # type: List[str]\n         args=None,                    # type: argparse.Namespace\n         job_order_object=None,        # type: MutableMapping[Text, Any]\n         stdin=sys.stdin,              # type: IO[Any]\n         stdout=None,                  # type: Union[TextIO, StreamWriter]\n         stderr=sys.stderr,            # type: IO[Any]\n         versionfunc=versionstring,    # type: Callable[[], Text]\n         logger_handler=None,          #\n         custom_schema_callback=None,  # type: Callable[[], None]\n         executor=None,                # type: Callable[..., Tuple[Dict[Text, Any], Text]]\n         loadingContext=None,          # type: LoadingContext\n         runtimeContext=None           # type: RuntimeContext\n        ):  # type: (...) -> int\n    <IND>if not stdout:  # force UTF-8 even if the console is configured differently\n        <IND>if (hasattr(sys.stdout, \"encoding\")  # type: ignore\n                and sys.stdout.encoding != 'UTF-8'):  # type: ignore\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def main(argsl=None,                   # type: Optional[List[str]]\n         args=None,                    # type: Optional[argparse.Namespace]\n         job_order_object=None,        # type: Optional[MutableMapping[Text, Any]]\n         stdin=sys.stdin,              # type: IO[Any]\n         stdout=None,                  # type: Optional[Union[TextIO, StreamWriter]]\n         stderr=sys.stderr,            # type: IO[Any]\n         versionfunc=versionstring,    # type: Callable[[], Text]\n         logger_handler=None,          # type: Optional[logging.Handler]\n         custom_schema_callback=None,  # type: Optional[Callable[[], None]]\n         executor=None,                # type: Optional[JobExecutor]\n         loadingContext=None,          # type: Optional[LoadingContext]\n         runtimeContext=None           # type: Optional[RuntimeContext]\n        ):  # type: (...) -> int\n    <IND>if not stdout:  # force UTF-8 even if the console is configured differently\n        <IND>if (hasattr(sys.stdout, \"encoding\")\n                and sys.stdout.encoding != 'UTF-8'):  # type: ignore\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "common-workflow-language/cwltool",
    "commit": "a9078408aafdee0e0f7c27954fb80ef1a0c39e9c",
    "filename": "cwltool/main.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/common-workflow-language-cwltool/cwltool/main.py",
    "file_hunks_size": 34,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cwltool/main.py:481:9 Incompatible variable type [9]: stdout is declared to have type `Union[StreamWriter, TextIO]` but is used as type `None`.",
    "message": " stdout is declared to have type `Union[StreamWriter, TextIO]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 481,
    "warning_line": "         stdout=None,                  # type: Union[TextIO, StreamWriter]",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from .errors import UnsupportedRequirement, WorkflowException\nfrom .executors import MultithreadedJobExecutor, SingleJobExecutor\nfrom .load_tool import (FetcherConstructorType,  # pylint: disable=unused-import\n",
        "source_code_len": 210,
        "target_code": "from .errors import UnsupportedRequirement, WorkflowException\nfrom .executors import MultithreadedJobExecutor, SingleJobExecutor, JobExecutor\nfrom .load_tool import (FetcherConstructorType,  # pylint: disable=unused-import\n",
        "target_code_len": 223,
        "diff_format": "@@ -36,3 +40,3 @@\n from .errors import UnsupportedRequirement, WorkflowException\n-from .executors import MultithreadedJobExecutor, SingleJobExecutor\n+from .executors import MultithreadedJobExecutor, SingleJobExecutor, JobExecutor\n from .load_tool import (FetcherConstructorType,  # pylint: disable=unused-import\n",
        "source_code_with_indent": "from .errors import UnsupportedRequirement, WorkflowException\nfrom .executors import MultithreadedJobExecutor, SingleJobExecutor\nfrom .load_tool import (FetcherConstructorType,  # pylint: disable=unused-import\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from .errors import UnsupportedRequirement, WorkflowException\nfrom .executors import MultithreadedJobExecutor, SingleJobExecutor, JobExecutor\nfrom .load_tool import (FetcherConstructorType,  # pylint: disable=unused-import\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef main(argsl=None,                   # type: List[str]\n         args=None,                    # type: argparse.Namespace\n         job_order_object=None,        # type: MutableMapping[Text, Any]\n         stdin=sys.stdin,              # type: IO[Any]\n         stdout=None,                  # type: Union[TextIO, StreamWriter]\n         stderr=sys.stderr,            # type: IO[Any]\n         versionfunc=versionstring,    # type: Callable[[], Text]\n         logger_handler=None,          #\n         custom_schema_callback=None,  # type: Callable[[], None]\n         executor=None,                # type: Callable[..., Tuple[Dict[Text, Any], Text]]\n         loadingContext=None,          # type: LoadingContext\n         runtimeContext=None           # type: RuntimeContext\n        ):  # type: (...) -> int\n    if not stdout:  # force UTF-8 even if the console is configured differently\n        if (hasattr(sys.stdout, \"encoding\")  # type: ignore\n                and sys.stdout.encoding != 'UTF-8'):  # type: ignore\n",
        "source_code_len": 1012,
        "target_code": "\ndef main(argsl=None,                   # type: Optional[List[str]]\n         args=None,                    # type: Optional[argparse.Namespace]\n         job_order_object=None,        # type: Optional[MutableMapping[Text, Any]]\n         stdin=sys.stdin,              # type: IO[Any]\n         stdout=None,                  # type: Optional[Union[TextIO, StreamWriter]]\n         stderr=sys.stderr,            # type: IO[Any]\n         versionfunc=versionstring,    # type: Callable[[], Text]\n         logger_handler=None,          # type: Optional[logging.Handler]\n         custom_schema_callback=None,  # type: Optional[Callable[[], None]]\n         executor=None,                # type: Optional[JobExecutor]\n         loadingContext=None,          # type: Optional[LoadingContext]\n         runtimeContext=None           # type: Optional[RuntimeContext]\n        ):  # type: (...) -> int\n    if not stdout:  # force UTF-8 even if the console is configured differently\n        if (hasattr(sys.stdout, \"encoding\")\n                and sys.stdout.encoding != 'UTF-8'):  # type: ignore\n",
        "target_code_len": 1076,
        "diff_format": "@@ -476,17 +481,17 @@\n \n-def main(argsl=None,                   # type: List[str]\n-         args=None,                    # type: argparse.Namespace\n-         job_order_object=None,        # type: MutableMapping[Text, Any]\n+def main(argsl=None,                   # type: Optional[List[str]]\n+         args=None,                    # type: Optional[argparse.Namespace]\n+         job_order_object=None,        # type: Optional[MutableMapping[Text, Any]]\n          stdin=sys.stdin,              # type: IO[Any]\n-         stdout=None,                  # type: Union[TextIO, StreamWriter]\n+         stdout=None,                  # type: Optional[Union[TextIO, StreamWriter]]\n          stderr=sys.stderr,            # type: IO[Any]\n          versionfunc=versionstring,    # type: Callable[[], Text]\n-         logger_handler=None,          #\n-         custom_schema_callback=None,  # type: Callable[[], None]\n-         executor=None,                # type: Callable[..., Tuple[Dict[Text, Any], Text]]\n-         loadingContext=None,          # type: LoadingContext\n-         runtimeContext=None           # type: RuntimeContext\n+         logger_handler=None,          # type: Optional[logging.Handler]\n+         custom_schema_callback=None,  # type: Optional[Callable[[], None]]\n+         executor=None,                # type: Optional[JobExecutor]\n+         loadingContext=None,          # type: Optional[LoadingContext]\n+         runtimeContext=None           # type: Optional[RuntimeContext]\n         ):  # type: (...) -> int\n     if not stdout:  # force UTF-8 even if the console is configured differently\n-        if (hasattr(sys.stdout, \"encoding\")  # type: ignore\n+        if (hasattr(sys.stdout, \"encoding\")\n                 and sys.stdout.encoding != 'UTF-8'):  # type: ignore\n",
        "source_code_with_indent": "\n<DED>def main(argsl=None,                   # type: List[str]\n         args=None,                    # type: argparse.Namespace\n         job_order_object=None,        # type: MutableMapping[Text, Any]\n         stdin=sys.stdin,              # type: IO[Any]\n         stdout=None,                  # type: Union[TextIO, StreamWriter]\n         stderr=sys.stderr,            # type: IO[Any]\n         versionfunc=versionstring,    # type: Callable[[], Text]\n         logger_handler=None,          #\n         custom_schema_callback=None,  # type: Callable[[], None]\n         executor=None,                # type: Callable[..., Tuple[Dict[Text, Any], Text]]\n         loadingContext=None,          # type: LoadingContext\n         runtimeContext=None           # type: RuntimeContext\n        ):  # type: (...) -> int\n    <IND>if not stdout:  # force UTF-8 even if the console is configured differently\n        <IND>if (hasattr(sys.stdout, \"encoding\")  # type: ignore\n                and sys.stdout.encoding != 'UTF-8'):  # type: ignore\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def main(argsl=None,                   # type: Optional[List[str]]\n         args=None,                    # type: Optional[argparse.Namespace]\n         job_order_object=None,        # type: Optional[MutableMapping[Text, Any]]\n         stdin=sys.stdin,              # type: IO[Any]\n         stdout=None,                  # type: Optional[Union[TextIO, StreamWriter]]\n         stderr=sys.stderr,            # type: IO[Any]\n         versionfunc=versionstring,    # type: Callable[[], Text]\n         logger_handler=None,          # type: Optional[logging.Handler]\n         custom_schema_callback=None,  # type: Optional[Callable[[], None]]\n         executor=None,                # type: Optional[JobExecutor]\n         loadingContext=None,          # type: Optional[LoadingContext]\n         runtimeContext=None           # type: Optional[RuntimeContext]\n        ):  # type: (...) -> int\n    <IND>if not stdout:  # force UTF-8 even if the console is configured differently\n        <IND>if (hasattr(sys.stdout, \"encoding\")\n                and sys.stdout.encoding != 'UTF-8'):  # type: ignore\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "common-workflow-language/cwltool",
    "commit": "a9078408aafdee0e0f7c27954fb80ef1a0c39e9c",
    "filename": "cwltool/main.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/common-workflow-language-cwltool/cwltool/main.py",
    "file_hunks_size": 34,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cwltool/main.py:485:9 Incompatible variable type [9]: custom_schema_callback is declared to have type `typing.Callable[[], None]` but is used as type `None`.",
    "message": " custom_schema_callback is declared to have type `typing.Callable[[], None]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 485,
    "warning_line": "         custom_schema_callback=None,  # type: Callable[[], None]",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from .errors import UnsupportedRequirement, WorkflowException\nfrom .executors import MultithreadedJobExecutor, SingleJobExecutor\nfrom .load_tool import (FetcherConstructorType,  # pylint: disable=unused-import\n",
        "source_code_len": 210,
        "target_code": "from .errors import UnsupportedRequirement, WorkflowException\nfrom .executors import MultithreadedJobExecutor, SingleJobExecutor, JobExecutor\nfrom .load_tool import (FetcherConstructorType,  # pylint: disable=unused-import\n",
        "target_code_len": 223,
        "diff_format": "@@ -36,3 +40,3 @@\n from .errors import UnsupportedRequirement, WorkflowException\n-from .executors import MultithreadedJobExecutor, SingleJobExecutor\n+from .executors import MultithreadedJobExecutor, SingleJobExecutor, JobExecutor\n from .load_tool import (FetcherConstructorType,  # pylint: disable=unused-import\n",
        "source_code_with_indent": "from .errors import UnsupportedRequirement, WorkflowException\nfrom .executors import MultithreadedJobExecutor, SingleJobExecutor\nfrom .load_tool import (FetcherConstructorType,  # pylint: disable=unused-import\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from .errors import UnsupportedRequirement, WorkflowException\nfrom .executors import MultithreadedJobExecutor, SingleJobExecutor, JobExecutor\nfrom .load_tool import (FetcherConstructorType,  # pylint: disable=unused-import\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef main(argsl=None,                   # type: List[str]\n         args=None,                    # type: argparse.Namespace\n         job_order_object=None,        # type: MutableMapping[Text, Any]\n         stdin=sys.stdin,              # type: IO[Any]\n         stdout=None,                  # type: Union[TextIO, StreamWriter]\n         stderr=sys.stderr,            # type: IO[Any]\n         versionfunc=versionstring,    # type: Callable[[], Text]\n         logger_handler=None,          #\n         custom_schema_callback=None,  # type: Callable[[], None]\n         executor=None,                # type: Callable[..., Tuple[Dict[Text, Any], Text]]\n         loadingContext=None,          # type: LoadingContext\n         runtimeContext=None           # type: RuntimeContext\n        ):  # type: (...) -> int\n    if not stdout:  # force UTF-8 even if the console is configured differently\n        if (hasattr(sys.stdout, \"encoding\")  # type: ignore\n                and sys.stdout.encoding != 'UTF-8'):  # type: ignore\n",
        "source_code_len": 1012,
        "target_code": "\ndef main(argsl=None,                   # type: Optional[List[str]]\n         args=None,                    # type: Optional[argparse.Namespace]\n         job_order_object=None,        # type: Optional[MutableMapping[Text, Any]]\n         stdin=sys.stdin,              # type: IO[Any]\n         stdout=None,                  # type: Optional[Union[TextIO, StreamWriter]]\n         stderr=sys.stderr,            # type: IO[Any]\n         versionfunc=versionstring,    # type: Callable[[], Text]\n         logger_handler=None,          # type: Optional[logging.Handler]\n         custom_schema_callback=None,  # type: Optional[Callable[[], None]]\n         executor=None,                # type: Optional[JobExecutor]\n         loadingContext=None,          # type: Optional[LoadingContext]\n         runtimeContext=None           # type: Optional[RuntimeContext]\n        ):  # type: (...) -> int\n    if not stdout:  # force UTF-8 even if the console is configured differently\n        if (hasattr(sys.stdout, \"encoding\")\n                and sys.stdout.encoding != 'UTF-8'):  # type: ignore\n",
        "target_code_len": 1076,
        "diff_format": "@@ -476,17 +481,17 @@\n \n-def main(argsl=None,                   # type: List[str]\n-         args=None,                    # type: argparse.Namespace\n-         job_order_object=None,        # type: MutableMapping[Text, Any]\n+def main(argsl=None,                   # type: Optional[List[str]]\n+         args=None,                    # type: Optional[argparse.Namespace]\n+         job_order_object=None,        # type: Optional[MutableMapping[Text, Any]]\n          stdin=sys.stdin,              # type: IO[Any]\n-         stdout=None,                  # type: Union[TextIO, StreamWriter]\n+         stdout=None,                  # type: Optional[Union[TextIO, StreamWriter]]\n          stderr=sys.stderr,            # type: IO[Any]\n          versionfunc=versionstring,    # type: Callable[[], Text]\n-         logger_handler=None,          #\n-         custom_schema_callback=None,  # type: Callable[[], None]\n-         executor=None,                # type: Callable[..., Tuple[Dict[Text, Any], Text]]\n-         loadingContext=None,          # type: LoadingContext\n-         runtimeContext=None           # type: RuntimeContext\n+         logger_handler=None,          # type: Optional[logging.Handler]\n+         custom_schema_callback=None,  # type: Optional[Callable[[], None]]\n+         executor=None,                # type: Optional[JobExecutor]\n+         loadingContext=None,          # type: Optional[LoadingContext]\n+         runtimeContext=None           # type: Optional[RuntimeContext]\n         ):  # type: (...) -> int\n     if not stdout:  # force UTF-8 even if the console is configured differently\n-        if (hasattr(sys.stdout, \"encoding\")  # type: ignore\n+        if (hasattr(sys.stdout, \"encoding\")\n                 and sys.stdout.encoding != 'UTF-8'):  # type: ignore\n",
        "source_code_with_indent": "\n<DED>def main(argsl=None,                   # type: List[str]\n         args=None,                    # type: argparse.Namespace\n         job_order_object=None,        # type: MutableMapping[Text, Any]\n         stdin=sys.stdin,              # type: IO[Any]\n         stdout=None,                  # type: Union[TextIO, StreamWriter]\n         stderr=sys.stderr,            # type: IO[Any]\n         versionfunc=versionstring,    # type: Callable[[], Text]\n         logger_handler=None,          #\n         custom_schema_callback=None,  # type: Callable[[], None]\n         executor=None,                # type: Callable[..., Tuple[Dict[Text, Any], Text]]\n         loadingContext=None,          # type: LoadingContext\n         runtimeContext=None           # type: RuntimeContext\n        ):  # type: (...) -> int\n    <IND>if not stdout:  # force UTF-8 even if the console is configured differently\n        <IND>if (hasattr(sys.stdout, \"encoding\")  # type: ignore\n                and sys.stdout.encoding != 'UTF-8'):  # type: ignore\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def main(argsl=None,                   # type: Optional[List[str]]\n         args=None,                    # type: Optional[argparse.Namespace]\n         job_order_object=None,        # type: Optional[MutableMapping[Text, Any]]\n         stdin=sys.stdin,              # type: IO[Any]\n         stdout=None,                  # type: Optional[Union[TextIO, StreamWriter]]\n         stderr=sys.stderr,            # type: IO[Any]\n         versionfunc=versionstring,    # type: Callable[[], Text]\n         logger_handler=None,          # type: Optional[logging.Handler]\n         custom_schema_callback=None,  # type: Optional[Callable[[], None]]\n         executor=None,                # type: Optional[JobExecutor]\n         loadingContext=None,          # type: Optional[LoadingContext]\n         runtimeContext=None           # type: Optional[RuntimeContext]\n        ):  # type: (...) -> int\n    <IND>if not stdout:  # force UTF-8 even if the console is configured differently\n        <IND>if (hasattr(sys.stdout, \"encoding\")\n                and sys.stdout.encoding != 'UTF-8'):  # type: ignore\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "common-workflow-language/cwltool",
    "commit": "a9078408aafdee0e0f7c27954fb80ef1a0c39e9c",
    "filename": "cwltool/main.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/common-workflow-language-cwltool/cwltool/main.py",
    "file_hunks_size": 34,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cwltool/main.py:486:9 Incompatible variable type [9]: executor is declared to have type `typing.Callable[..., Tuple[Dict[str, typing.Any], str]]` but is used as type `None`.",
    "message": " executor is declared to have type `typing.Callable[..., Tuple[Dict[str, typing.Any], str]]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 486,
    "warning_line": "         executor=None,                # type: Callable[..., Tuple[Dict[Text, Any], Text]]",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from .errors import UnsupportedRequirement, WorkflowException\nfrom .executors import MultithreadedJobExecutor, SingleJobExecutor\nfrom .load_tool import (FetcherConstructorType,  # pylint: disable=unused-import\n",
        "source_code_len": 210,
        "target_code": "from .errors import UnsupportedRequirement, WorkflowException\nfrom .executors import MultithreadedJobExecutor, SingleJobExecutor, JobExecutor\nfrom .load_tool import (FetcherConstructorType,  # pylint: disable=unused-import\n",
        "target_code_len": 223,
        "diff_format": "@@ -36,3 +40,3 @@\n from .errors import UnsupportedRequirement, WorkflowException\n-from .executors import MultithreadedJobExecutor, SingleJobExecutor\n+from .executors import MultithreadedJobExecutor, SingleJobExecutor, JobExecutor\n from .load_tool import (FetcherConstructorType,  # pylint: disable=unused-import\n",
        "source_code_with_indent": "from .errors import UnsupportedRequirement, WorkflowException\nfrom .executors import MultithreadedJobExecutor, SingleJobExecutor\nfrom .load_tool import (FetcherConstructorType,  # pylint: disable=unused-import\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from .errors import UnsupportedRequirement, WorkflowException\nfrom .executors import MultithreadedJobExecutor, SingleJobExecutor, JobExecutor\nfrom .load_tool import (FetcherConstructorType,  # pylint: disable=unused-import\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef main(argsl=None,                   # type: List[str]\n         args=None,                    # type: argparse.Namespace\n         job_order_object=None,        # type: MutableMapping[Text, Any]\n         stdin=sys.stdin,              # type: IO[Any]\n         stdout=None,                  # type: Union[TextIO, StreamWriter]\n         stderr=sys.stderr,            # type: IO[Any]\n         versionfunc=versionstring,    # type: Callable[[], Text]\n         logger_handler=None,          #\n         custom_schema_callback=None,  # type: Callable[[], None]\n         executor=None,                # type: Callable[..., Tuple[Dict[Text, Any], Text]]\n         loadingContext=None,          # type: LoadingContext\n         runtimeContext=None           # type: RuntimeContext\n        ):  # type: (...) -> int\n    if not stdout:  # force UTF-8 even if the console is configured differently\n        if (hasattr(sys.stdout, \"encoding\")  # type: ignore\n                and sys.stdout.encoding != 'UTF-8'):  # type: ignore\n",
        "source_code_len": 1012,
        "target_code": "\ndef main(argsl=None,                   # type: Optional[List[str]]\n         args=None,                    # type: Optional[argparse.Namespace]\n         job_order_object=None,        # type: Optional[MutableMapping[Text, Any]]\n         stdin=sys.stdin,              # type: IO[Any]\n         stdout=None,                  # type: Optional[Union[TextIO, StreamWriter]]\n         stderr=sys.stderr,            # type: IO[Any]\n         versionfunc=versionstring,    # type: Callable[[], Text]\n         logger_handler=None,          # type: Optional[logging.Handler]\n         custom_schema_callback=None,  # type: Optional[Callable[[], None]]\n         executor=None,                # type: Optional[JobExecutor]\n         loadingContext=None,          # type: Optional[LoadingContext]\n         runtimeContext=None           # type: Optional[RuntimeContext]\n        ):  # type: (...) -> int\n    if not stdout:  # force UTF-8 even if the console is configured differently\n        if (hasattr(sys.stdout, \"encoding\")\n                and sys.stdout.encoding != 'UTF-8'):  # type: ignore\n",
        "target_code_len": 1076,
        "diff_format": "@@ -476,17 +481,17 @@\n \n-def main(argsl=None,                   # type: List[str]\n-         args=None,                    # type: argparse.Namespace\n-         job_order_object=None,        # type: MutableMapping[Text, Any]\n+def main(argsl=None,                   # type: Optional[List[str]]\n+         args=None,                    # type: Optional[argparse.Namespace]\n+         job_order_object=None,        # type: Optional[MutableMapping[Text, Any]]\n          stdin=sys.stdin,              # type: IO[Any]\n-         stdout=None,                  # type: Union[TextIO, StreamWriter]\n+         stdout=None,                  # type: Optional[Union[TextIO, StreamWriter]]\n          stderr=sys.stderr,            # type: IO[Any]\n          versionfunc=versionstring,    # type: Callable[[], Text]\n-         logger_handler=None,          #\n-         custom_schema_callback=None,  # type: Callable[[], None]\n-         executor=None,                # type: Callable[..., Tuple[Dict[Text, Any], Text]]\n-         loadingContext=None,          # type: LoadingContext\n-         runtimeContext=None           # type: RuntimeContext\n+         logger_handler=None,          # type: Optional[logging.Handler]\n+         custom_schema_callback=None,  # type: Optional[Callable[[], None]]\n+         executor=None,                # type: Optional[JobExecutor]\n+         loadingContext=None,          # type: Optional[LoadingContext]\n+         runtimeContext=None           # type: Optional[RuntimeContext]\n         ):  # type: (...) -> int\n     if not stdout:  # force UTF-8 even if the console is configured differently\n-        if (hasattr(sys.stdout, \"encoding\")  # type: ignore\n+        if (hasattr(sys.stdout, \"encoding\")\n                 and sys.stdout.encoding != 'UTF-8'):  # type: ignore\n",
        "source_code_with_indent": "\n<DED>def main(argsl=None,                   # type: List[str]\n         args=None,                    # type: argparse.Namespace\n         job_order_object=None,        # type: MutableMapping[Text, Any]\n         stdin=sys.stdin,              # type: IO[Any]\n         stdout=None,                  # type: Union[TextIO, StreamWriter]\n         stderr=sys.stderr,            # type: IO[Any]\n         versionfunc=versionstring,    # type: Callable[[], Text]\n         logger_handler=None,          #\n         custom_schema_callback=None,  # type: Callable[[], None]\n         executor=None,                # type: Callable[..., Tuple[Dict[Text, Any], Text]]\n         loadingContext=None,          # type: LoadingContext\n         runtimeContext=None           # type: RuntimeContext\n        ):  # type: (...) -> int\n    <IND>if not stdout:  # force UTF-8 even if the console is configured differently\n        <IND>if (hasattr(sys.stdout, \"encoding\")  # type: ignore\n                and sys.stdout.encoding != 'UTF-8'):  # type: ignore\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def main(argsl=None,                   # type: Optional[List[str]]\n         args=None,                    # type: Optional[argparse.Namespace]\n         job_order_object=None,        # type: Optional[MutableMapping[Text, Any]]\n         stdin=sys.stdin,              # type: IO[Any]\n         stdout=None,                  # type: Optional[Union[TextIO, StreamWriter]]\n         stderr=sys.stderr,            # type: IO[Any]\n         versionfunc=versionstring,    # type: Callable[[], Text]\n         logger_handler=None,          # type: Optional[logging.Handler]\n         custom_schema_callback=None,  # type: Optional[Callable[[], None]]\n         executor=None,                # type: Optional[JobExecutor]\n         loadingContext=None,          # type: Optional[LoadingContext]\n         runtimeContext=None           # type: Optional[RuntimeContext]\n        ):  # type: (...) -> int\n    <IND>if not stdout:  # force UTF-8 even if the console is configured differently\n        <IND>if (hasattr(sys.stdout, \"encoding\")\n                and sys.stdout.encoding != 'UTF-8'):  # type: ignore\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "common-workflow-language/cwltool",
    "commit": "a9078408aafdee0e0f7c27954fb80ef1a0c39e9c",
    "filename": "cwltool/main.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/common-workflow-language-cwltool/cwltool/main.py",
    "file_hunks_size": 34,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cwltool/main.py:487:9 Incompatible variable type [9]: loadingContext is declared to have type `LoadingContext` but is used as type `None`.",
    "message": " loadingContext is declared to have type `LoadingContext` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 487,
    "warning_line": "         loadingContext=None,          # type: LoadingContext",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from .errors import UnsupportedRequirement, WorkflowException\nfrom .executors import MultithreadedJobExecutor, SingleJobExecutor\nfrom .load_tool import (FetcherConstructorType,  # pylint: disable=unused-import\n",
        "source_code_len": 210,
        "target_code": "from .errors import UnsupportedRequirement, WorkflowException\nfrom .executors import MultithreadedJobExecutor, SingleJobExecutor, JobExecutor\nfrom .load_tool import (FetcherConstructorType,  # pylint: disable=unused-import\n",
        "target_code_len": 223,
        "diff_format": "@@ -36,3 +40,3 @@\n from .errors import UnsupportedRequirement, WorkflowException\n-from .executors import MultithreadedJobExecutor, SingleJobExecutor\n+from .executors import MultithreadedJobExecutor, SingleJobExecutor, JobExecutor\n from .load_tool import (FetcherConstructorType,  # pylint: disable=unused-import\n",
        "source_code_with_indent": "from .errors import UnsupportedRequirement, WorkflowException\nfrom .executors import MultithreadedJobExecutor, SingleJobExecutor\nfrom .load_tool import (FetcherConstructorType,  # pylint: disable=unused-import\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from .errors import UnsupportedRequirement, WorkflowException\nfrom .executors import MultithreadedJobExecutor, SingleJobExecutor, JobExecutor\nfrom .load_tool import (FetcherConstructorType,  # pylint: disable=unused-import\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef main(argsl=None,                   # type: List[str]\n         args=None,                    # type: argparse.Namespace\n         job_order_object=None,        # type: MutableMapping[Text, Any]\n         stdin=sys.stdin,              # type: IO[Any]\n         stdout=None,                  # type: Union[TextIO, StreamWriter]\n         stderr=sys.stderr,            # type: IO[Any]\n         versionfunc=versionstring,    # type: Callable[[], Text]\n         logger_handler=None,          #\n         custom_schema_callback=None,  # type: Callable[[], None]\n         executor=None,                # type: Callable[..., Tuple[Dict[Text, Any], Text]]\n         loadingContext=None,          # type: LoadingContext\n         runtimeContext=None           # type: RuntimeContext\n        ):  # type: (...) -> int\n    if not stdout:  # force UTF-8 even if the console is configured differently\n        if (hasattr(sys.stdout, \"encoding\")  # type: ignore\n                and sys.stdout.encoding != 'UTF-8'):  # type: ignore\n",
        "source_code_len": 1012,
        "target_code": "\ndef main(argsl=None,                   # type: Optional[List[str]]\n         args=None,                    # type: Optional[argparse.Namespace]\n         job_order_object=None,        # type: Optional[MutableMapping[Text, Any]]\n         stdin=sys.stdin,              # type: IO[Any]\n         stdout=None,                  # type: Optional[Union[TextIO, StreamWriter]]\n         stderr=sys.stderr,            # type: IO[Any]\n         versionfunc=versionstring,    # type: Callable[[], Text]\n         logger_handler=None,          # type: Optional[logging.Handler]\n         custom_schema_callback=None,  # type: Optional[Callable[[], None]]\n         executor=None,                # type: Optional[JobExecutor]\n         loadingContext=None,          # type: Optional[LoadingContext]\n         runtimeContext=None           # type: Optional[RuntimeContext]\n        ):  # type: (...) -> int\n    if not stdout:  # force UTF-8 even if the console is configured differently\n        if (hasattr(sys.stdout, \"encoding\")\n                and sys.stdout.encoding != 'UTF-8'):  # type: ignore\n",
        "target_code_len": 1076,
        "diff_format": "@@ -476,17 +481,17 @@\n \n-def main(argsl=None,                   # type: List[str]\n-         args=None,                    # type: argparse.Namespace\n-         job_order_object=None,        # type: MutableMapping[Text, Any]\n+def main(argsl=None,                   # type: Optional[List[str]]\n+         args=None,                    # type: Optional[argparse.Namespace]\n+         job_order_object=None,        # type: Optional[MutableMapping[Text, Any]]\n          stdin=sys.stdin,              # type: IO[Any]\n-         stdout=None,                  # type: Union[TextIO, StreamWriter]\n+         stdout=None,                  # type: Optional[Union[TextIO, StreamWriter]]\n          stderr=sys.stderr,            # type: IO[Any]\n          versionfunc=versionstring,    # type: Callable[[], Text]\n-         logger_handler=None,          #\n-         custom_schema_callback=None,  # type: Callable[[], None]\n-         executor=None,                # type: Callable[..., Tuple[Dict[Text, Any], Text]]\n-         loadingContext=None,          # type: LoadingContext\n-         runtimeContext=None           # type: RuntimeContext\n+         logger_handler=None,          # type: Optional[logging.Handler]\n+         custom_schema_callback=None,  # type: Optional[Callable[[], None]]\n+         executor=None,                # type: Optional[JobExecutor]\n+         loadingContext=None,          # type: Optional[LoadingContext]\n+         runtimeContext=None           # type: Optional[RuntimeContext]\n         ):  # type: (...) -> int\n     if not stdout:  # force UTF-8 even if the console is configured differently\n-        if (hasattr(sys.stdout, \"encoding\")  # type: ignore\n+        if (hasattr(sys.stdout, \"encoding\")\n                 and sys.stdout.encoding != 'UTF-8'):  # type: ignore\n",
        "source_code_with_indent": "\n<DED>def main(argsl=None,                   # type: List[str]\n         args=None,                    # type: argparse.Namespace\n         job_order_object=None,        # type: MutableMapping[Text, Any]\n         stdin=sys.stdin,              # type: IO[Any]\n         stdout=None,                  # type: Union[TextIO, StreamWriter]\n         stderr=sys.stderr,            # type: IO[Any]\n         versionfunc=versionstring,    # type: Callable[[], Text]\n         logger_handler=None,          #\n         custom_schema_callback=None,  # type: Callable[[], None]\n         executor=None,                # type: Callable[..., Tuple[Dict[Text, Any], Text]]\n         loadingContext=None,          # type: LoadingContext\n         runtimeContext=None           # type: RuntimeContext\n        ):  # type: (...) -> int\n    <IND>if not stdout:  # force UTF-8 even if the console is configured differently\n        <IND>if (hasattr(sys.stdout, \"encoding\")  # type: ignore\n                and sys.stdout.encoding != 'UTF-8'):  # type: ignore\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def main(argsl=None,                   # type: Optional[List[str]]\n         args=None,                    # type: Optional[argparse.Namespace]\n         job_order_object=None,        # type: Optional[MutableMapping[Text, Any]]\n         stdin=sys.stdin,              # type: IO[Any]\n         stdout=None,                  # type: Optional[Union[TextIO, StreamWriter]]\n         stderr=sys.stderr,            # type: IO[Any]\n         versionfunc=versionstring,    # type: Callable[[], Text]\n         logger_handler=None,          # type: Optional[logging.Handler]\n         custom_schema_callback=None,  # type: Optional[Callable[[], None]]\n         executor=None,                # type: Optional[JobExecutor]\n         loadingContext=None,          # type: Optional[LoadingContext]\n         runtimeContext=None           # type: Optional[RuntimeContext]\n        ):  # type: (...) -> int\n    <IND>if not stdout:  # force UTF-8 even if the console is configured differently\n        <IND>if (hasattr(sys.stdout, \"encoding\")\n                and sys.stdout.encoding != 'UTF-8'):  # type: ignore\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "common-workflow-language/cwltool",
    "commit": "a9078408aafdee0e0f7c27954fb80ef1a0c39e9c",
    "filename": "cwltool/main.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/common-workflow-language-cwltool/cwltool/main.py",
    "file_hunks_size": 34,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cwltool/main.py:488:9 Incompatible variable type [9]: runtimeContext is declared to have type `RuntimeContext` but is used as type `None`.",
    "message": " runtimeContext is declared to have type `RuntimeContext` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 488,
    "warning_line": "         runtimeContext=None           # type: RuntimeContext",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from .errors import UnsupportedRequirement, WorkflowException\nfrom .executors import MultithreadedJobExecutor, SingleJobExecutor\nfrom .load_tool import (FetcherConstructorType,  # pylint: disable=unused-import\n",
        "source_code_len": 210,
        "target_code": "from .errors import UnsupportedRequirement, WorkflowException\nfrom .executors import MultithreadedJobExecutor, SingleJobExecutor, JobExecutor\nfrom .load_tool import (FetcherConstructorType,  # pylint: disable=unused-import\n",
        "target_code_len": 223,
        "diff_format": "@@ -36,3 +40,3 @@\n from .errors import UnsupportedRequirement, WorkflowException\n-from .executors import MultithreadedJobExecutor, SingleJobExecutor\n+from .executors import MultithreadedJobExecutor, SingleJobExecutor, JobExecutor\n from .load_tool import (FetcherConstructorType,  # pylint: disable=unused-import\n",
        "source_code_with_indent": "from .errors import UnsupportedRequirement, WorkflowException\nfrom .executors import MultithreadedJobExecutor, SingleJobExecutor\nfrom .load_tool import (FetcherConstructorType,  # pylint: disable=unused-import\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from .errors import UnsupportedRequirement, WorkflowException\nfrom .executors import MultithreadedJobExecutor, SingleJobExecutor, JobExecutor\nfrom .load_tool import (FetcherConstructorType,  # pylint: disable=unused-import\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef main(argsl=None,                   # type: List[str]\n         args=None,                    # type: argparse.Namespace\n         job_order_object=None,        # type: MutableMapping[Text, Any]\n         stdin=sys.stdin,              # type: IO[Any]\n         stdout=None,                  # type: Union[TextIO, StreamWriter]\n         stderr=sys.stderr,            # type: IO[Any]\n         versionfunc=versionstring,    # type: Callable[[], Text]\n         logger_handler=None,          #\n         custom_schema_callback=None,  # type: Callable[[], None]\n         executor=None,                # type: Callable[..., Tuple[Dict[Text, Any], Text]]\n         loadingContext=None,          # type: LoadingContext\n         runtimeContext=None           # type: RuntimeContext\n        ):  # type: (...) -> int\n    if not stdout:  # force UTF-8 even if the console is configured differently\n        if (hasattr(sys.stdout, \"encoding\")  # type: ignore\n                and sys.stdout.encoding != 'UTF-8'):  # type: ignore\n",
        "source_code_len": 1012,
        "target_code": "\ndef main(argsl=None,                   # type: Optional[List[str]]\n         args=None,                    # type: Optional[argparse.Namespace]\n         job_order_object=None,        # type: Optional[MutableMapping[Text, Any]]\n         stdin=sys.stdin,              # type: IO[Any]\n         stdout=None,                  # type: Optional[Union[TextIO, StreamWriter]]\n         stderr=sys.stderr,            # type: IO[Any]\n         versionfunc=versionstring,    # type: Callable[[], Text]\n         logger_handler=None,          # type: Optional[logging.Handler]\n         custom_schema_callback=None,  # type: Optional[Callable[[], None]]\n         executor=None,                # type: Optional[JobExecutor]\n         loadingContext=None,          # type: Optional[LoadingContext]\n         runtimeContext=None           # type: Optional[RuntimeContext]\n        ):  # type: (...) -> int\n    if not stdout:  # force UTF-8 even if the console is configured differently\n        if (hasattr(sys.stdout, \"encoding\")\n                and sys.stdout.encoding != 'UTF-8'):  # type: ignore\n",
        "target_code_len": 1076,
        "diff_format": "@@ -476,17 +481,17 @@\n \n-def main(argsl=None,                   # type: List[str]\n-         args=None,                    # type: argparse.Namespace\n-         job_order_object=None,        # type: MutableMapping[Text, Any]\n+def main(argsl=None,                   # type: Optional[List[str]]\n+         args=None,                    # type: Optional[argparse.Namespace]\n+         job_order_object=None,        # type: Optional[MutableMapping[Text, Any]]\n          stdin=sys.stdin,              # type: IO[Any]\n-         stdout=None,                  # type: Union[TextIO, StreamWriter]\n+         stdout=None,                  # type: Optional[Union[TextIO, StreamWriter]]\n          stderr=sys.stderr,            # type: IO[Any]\n          versionfunc=versionstring,    # type: Callable[[], Text]\n-         logger_handler=None,          #\n-         custom_schema_callback=None,  # type: Callable[[], None]\n-         executor=None,                # type: Callable[..., Tuple[Dict[Text, Any], Text]]\n-         loadingContext=None,          # type: LoadingContext\n-         runtimeContext=None           # type: RuntimeContext\n+         logger_handler=None,          # type: Optional[logging.Handler]\n+         custom_schema_callback=None,  # type: Optional[Callable[[], None]]\n+         executor=None,                # type: Optional[JobExecutor]\n+         loadingContext=None,          # type: Optional[LoadingContext]\n+         runtimeContext=None           # type: Optional[RuntimeContext]\n         ):  # type: (...) -> int\n     if not stdout:  # force UTF-8 even if the console is configured differently\n-        if (hasattr(sys.stdout, \"encoding\")  # type: ignore\n+        if (hasattr(sys.stdout, \"encoding\")\n                 and sys.stdout.encoding != 'UTF-8'):  # type: ignore\n",
        "source_code_with_indent": "\n<DED>def main(argsl=None,                   # type: List[str]\n         args=None,                    # type: argparse.Namespace\n         job_order_object=None,        # type: MutableMapping[Text, Any]\n         stdin=sys.stdin,              # type: IO[Any]\n         stdout=None,                  # type: Union[TextIO, StreamWriter]\n         stderr=sys.stderr,            # type: IO[Any]\n         versionfunc=versionstring,    # type: Callable[[], Text]\n         logger_handler=None,          #\n         custom_schema_callback=None,  # type: Callable[[], None]\n         executor=None,                # type: Callable[..., Tuple[Dict[Text, Any], Text]]\n         loadingContext=None,          # type: LoadingContext\n         runtimeContext=None           # type: RuntimeContext\n        ):  # type: (...) -> int\n    <IND>if not stdout:  # force UTF-8 even if the console is configured differently\n        <IND>if (hasattr(sys.stdout, \"encoding\")  # type: ignore\n                and sys.stdout.encoding != 'UTF-8'):  # type: ignore\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def main(argsl=None,                   # type: Optional[List[str]]\n         args=None,                    # type: Optional[argparse.Namespace]\n         job_order_object=None,        # type: Optional[MutableMapping[Text, Any]]\n         stdin=sys.stdin,              # type: IO[Any]\n         stdout=None,                  # type: Optional[Union[TextIO, StreamWriter]]\n         stderr=sys.stderr,            # type: IO[Any]\n         versionfunc=versionstring,    # type: Callable[[], Text]\n         logger_handler=None,          # type: Optional[logging.Handler]\n         custom_schema_callback=None,  # type: Optional[Callable[[], None]]\n         executor=None,                # type: Optional[JobExecutor]\n         loadingContext=None,          # type: Optional[LoadingContext]\n         runtimeContext=None           # type: Optional[RuntimeContext]\n        ):  # type: (...) -> int\n    <IND>if not stdout:  # force UTF-8 even if the console is configured differently\n        <IND>if (hasattr(sys.stdout, \"encoding\")\n                and sys.stdout.encoding != 'UTF-8'):  # type: ignore\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "common-workflow-language/cwltool",
    "commit": "a9078408aafdee0e0f7c27954fb80ef1a0c39e9c",
    "filename": "cwltool/main.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/common-workflow-language-cwltool/cwltool/main.py",
    "file_hunks_size": 34,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cwltool/main.py:792:16 Incompatible parameter type [6]: Expected `SecretStore` for 10th parameter `secret_store` to call `init_job_order` but got `Optional[SecretStore]`.",
    "message": " Expected `SecretStore` for 10th parameter `secret_store` to call `init_job_order` but got `Optional[SecretStore]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 792,
    "warning_line": "                secret_store=runtimeContext.secret_store)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                   input_basedir=\"\",        # type: Text\n                   secret_store=None        # type: SecretStore\n                  ):  # type: (...) -> MutableMapping[Text, Any]\n",
        "source_code_len": 186,
        "target_code": "                   input_basedir=\"\",        # type: Text\n                   secret_store=None        # type: Optional[SecretStore]\n                  ):  # type: (...) -> MutableMapping[Text, Any]\n",
        "target_code_len": 196,
        "diff_format": "@@ -283,3 +287,3 @@\n                    input_basedir=\"\",        # type: Text\n-                   secret_store=None        # type: SecretStore\n+                   secret_store=None        # type: Optional[SecretStore]\n                   ):  # type: (...) -> MutableMapping[Text, Any]\n",
        "source_code_with_indent": "                   input_basedir=\"\",        # type: Text\n                   secret_store=None        # type: SecretStore\n                  ):  # type: (...) -> MutableMapping[Text, Any]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                   input_basedir=\"\",        # type: Text\n                   secret_store=None        # type: Optional[SecretStore]\n                  ):  # type: (...) -> MutableMapping[Text, Any]\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "common-workflow-language/cwltool",
    "commit": "a9078408aafdee0e0f7c27954fb80ef1a0c39e9c",
    "filename": "cwltool/main.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/common-workflow-language-cwltool/cwltool/main.py",
    "file_hunks_size": 34,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cwltool/main.py:827:29 Incompatible parameter type [6]: Expected `typing.Callable[[Dict[str, str], typing.Callable[[typing.Any, typing.Any], typing.Any], RuntimeContext], typing.Generator[typing.Any, None, None]]` for 2nd positional only parameter to call `ResearchObject.create_job` but got `None`.",
    "message": " Expected `typing.Callable[[Dict[str, str], typing.Callable[[typing.Any, typing.Any], typing.Any], RuntimeContext], typing.Generator[typing.Any, None, None]]` for 2nd positional only parameter to call `ResearchObject.create_job` but got `None`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 827,
    "warning_line": "                        out, None, True)"
  },
  {
    "project": "common-workflow-language/cwltool",
    "commit": "a9078408aafdee0e0f7c27954fb80ef1a0c39e9c",
    "filename": "cwltool/main.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/common-workflow-language-cwltool/cwltool/main.py",
    "file_hunks_size": 34,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cwltool/main.py:902:27 Incompatible variable type [9]: default_container is declared to have type `str` but is used as type `None`.",
    "message": " default_container is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 902,
    "warning_line": "                           default_container=None,   # type: Text",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef find_default_container(builder,                  # type: HasReqsHints\n                           default_container=None,   # type: Text\n                           use_biocontainers=None,  # type: bool\n                          ):  # type: (...) -> Optional[Text]\n",
        "source_code_len": 268,
        "target_code": "\ndef find_default_container(builder,                 # type: HasReqsHints\n                           default_container=None,  # type: Optional[Text]\n                           use_biocontainers=None,  # type: Optional[bool]\n                          ):  # type: (...) -> Optional[Text]\n",
        "target_code_len": 286,
        "diff_format": "@@ -900,5 +907,5 @@\n \n-def find_default_container(builder,                  # type: HasReqsHints\n-                           default_container=None,   # type: Text\n-                           use_biocontainers=None,  # type: bool\n+def find_default_container(builder,                 # type: HasReqsHints\n+                           default_container=None,  # type: Optional[Text]\n+                           use_biocontainers=None,  # type: Optional[bool]\n                           ):  # type: (...) -> Optional[Text]\n",
        "source_code_with_indent": "\n<DED><DED>def find_default_container(builder,                  # type: HasReqsHints\n                           default_container=None,   # type: Text\n                           use_biocontainers=None,  # type: bool\n                          ):  # type: (...) -> Optional[Text]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED><DED>def find_default_container(builder,                 # type: HasReqsHints\n                           default_container=None,  # type: Optional[Text]\n                           use_biocontainers=None,  # type: Optional[bool]\n                          ):  # type: (...) -> Optional[Text]\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "common-workflow-language/cwltool",
    "commit": "a9078408aafdee0e0f7c27954fb80ef1a0c39e9c",
    "filename": "cwltool/main.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/common-workflow-language-cwltool/cwltool/main.py",
    "file_hunks_size": 34,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cwltool/main.py:903:27 Incompatible variable type [9]: use_biocontainers is declared to have type `bool` but is used as type `None`.",
    "message": " use_biocontainers is declared to have type `bool` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 903,
    "warning_line": "                           use_biocontainers=None,  # type: bool",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef find_default_container(builder,                  # type: HasReqsHints\n                           default_container=None,   # type: Text\n                           use_biocontainers=None,  # type: bool\n                          ):  # type: (...) -> Optional[Text]\n",
        "source_code_len": 268,
        "target_code": "\ndef find_default_container(builder,                 # type: HasReqsHints\n                           default_container=None,  # type: Optional[Text]\n                           use_biocontainers=None,  # type: Optional[bool]\n                          ):  # type: (...) -> Optional[Text]\n",
        "target_code_len": 286,
        "diff_format": "@@ -900,5 +907,5 @@\n \n-def find_default_container(builder,                  # type: HasReqsHints\n-                           default_container=None,   # type: Text\n-                           use_biocontainers=None,  # type: bool\n+def find_default_container(builder,                 # type: HasReqsHints\n+                           default_container=None,  # type: Optional[Text]\n+                           use_biocontainers=None,  # type: Optional[bool]\n                           ):  # type: (...) -> Optional[Text]\n",
        "source_code_with_indent": "\n<DED><DED>def find_default_container(builder,                  # type: HasReqsHints\n                           default_container=None,   # type: Text\n                           use_biocontainers=None,  # type: bool\n                          ):  # type: (...) -> Optional[Text]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED><DED>def find_default_container(builder,                 # type: HasReqsHints\n                           default_container=None,  # type: Optional[Text]\n                           use_biocontainers=None,  # type: Optional[bool]\n                          ):  # type: (...) -> Optional[Text]\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "common-workflow-language/cwltool",
    "commit": "a9078408aafdee0e0f7c27954fb80ef1a0c39e9c",
    "filename": "cwltool/main.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/common-workflow-language-cwltool/cwltool/main.py",
    "file_hunks_size": 34,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cwltool/main.py:907:8 Incompatible variable type [9]: default_container is declared to have type `str` but is used as type `Optional[str]`.",
    "message": " default_container is declared to have type `str` but is used as type `Optional[str]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 907,
    "warning_line": "        default_container = get_container_from_software_requirements(",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef find_default_container(builder,                  # type: HasReqsHints\n                           default_container=None,   # type: Text\n                           use_biocontainers=None,  # type: bool\n                          ):  # type: (...) -> Optional[Text]\n",
        "source_code_len": 268,
        "target_code": "\ndef find_default_container(builder,                 # type: HasReqsHints\n                           default_container=None,  # type: Optional[Text]\n                           use_biocontainers=None,  # type: Optional[bool]\n                          ):  # type: (...) -> Optional[Text]\n",
        "target_code_len": 286,
        "diff_format": "@@ -900,5 +907,5 @@\n \n-def find_default_container(builder,                  # type: HasReqsHints\n-                           default_container=None,   # type: Text\n-                           use_biocontainers=None,  # type: bool\n+def find_default_container(builder,                 # type: HasReqsHints\n+                           default_container=None,  # type: Optional[Text]\n+                           use_biocontainers=None,  # type: Optional[bool]\n                           ):  # type: (...) -> Optional[Text]\n",
        "source_code_with_indent": "\n<DED><DED>def find_default_container(builder,                  # type: HasReqsHints\n                           default_container=None,   # type: Text\n                           use_biocontainers=None,  # type: bool\n                          ):  # type: (...) -> Optional[Text]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED><DED>def find_default_container(builder,                 # type: HasReqsHints\n                           default_container=None,  # type: Optional[Text]\n                           use_biocontainers=None,  # type: Optional[bool]\n                          ):  # type: (...) -> Optional[Text]\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "common-workflow-language/cwltool",
    "commit": "a9078408aafdee0e0f7c27954fb80ef1a0c39e9c",
    "filename": "cwltool/pack.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/common-workflow-language-cwltool/cwltool/pack.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cwltool/pack.py:115:9 Incompatible variable type [9]: rewrite_out is declared to have type `Dict[str, str]` but is used as type `None`.",
    "message": " rewrite_out is declared to have type `Dict[str, str]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 115,
    "warning_line": "         rewrite_out=None  # type: Dict[Text, Text]",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "         metadata,         # type: Dict[Text, Text]\n         rewrite_out=None  # type: Dict[Text, Text]\n        ):  # type: (...) -> Dict[Text, Any]\n",
        "source_code_len": 149,
        "target_code": "         metadata,         # type: Dict[Text, Text]\n         rewrite_out=None  # type: Optional[Dict[Text, Text]]\n        ):  # type: (...) -> Dict[Text, Any]\n",
        "target_code_len": 159,
        "diff_format": "@@ -114,3 +114,3 @@\n          metadata,         # type: Dict[Text, Text]\n-         rewrite_out=None  # type: Dict[Text, Text]\n+         rewrite_out=None  # type: Optional[Dict[Text, Text]]\n         ):  # type: (...) -> Dict[Text, Any]\n",
        "source_code_with_indent": "         metadata,         # type: Dict[Text, Text]\n         rewrite_out=None  # type: Dict[Text, Text]\n        ):  # type: (...) -> Dict[Text, Any]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "         metadata,         # type: Dict[Text, Text]\n         rewrite_out=None  # type: Optional[Dict[Text, Text]]\n        ):  # type: (...) -> Dict[Text, Any]\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "common-workflow-language/cwltool",
    "commit": "a9078408aafdee0e0f7c27954fb80ef1a0c39e9c",
    "filename": "cwltool/process.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/common-workflow-language-cwltool/cwltool/process.py",
    "file_hunks_size": 13,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cwltool/process.py:222:16 Incompatible variable type [9]: stage_func is declared to have type `typing.Callable[..., typing.Any]` but is used as type `None`.",
    "message": " stage_func is declared to have type `typing.Callable[..., typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 222,
    "warning_line": "                stage_func=None,        # type: Callable[..., Any]",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def stage_files(pathmapper,             # type: PathMapper\n                stage_func=None,        # type: Callable[..., Any]\n                ignore_writable=False,  # type: bool\n                symlink=True,           # type: bool\n                secret_store=None       # type: SecretStore\n               ):  # type: (...) -> None\n",
        "source_code_len": 333,
        "target_code": "def stage_files(pathmapper,             # type: PathMapper\n                stage_func=None,        # type: Optional[Callable[..., Any]]\n                ignore_writable=False,  # type: bool\n                symlink=True,           # type: bool\n                secret_store=None       # type: Optional[SecretStore]\n               ):  # type: (...) -> None\n",
        "target_code_len": 353,
        "diff_format": "@@ -221,6 +221,6 @@\n def stage_files(pathmapper,             # type: PathMapper\n-                stage_func=None,        # type: Callable[..., Any]\n+                stage_func=None,        # type: Optional[Callable[..., Any]]\n                 ignore_writable=False,  # type: bool\n                 symlink=True,           # type: bool\n-                secret_store=None       # type: SecretStore\n+                secret_store=None       # type: Optional[SecretStore]\n                ):  # type: (...) -> None\n",
        "source_code_with_indent": "<DED><DED><DED>def stage_files(pathmapper,             # type: PathMapper\n                stage_func=None,        # type: Callable[..., Any]\n                ignore_writable=False,  # type: bool\n                symlink=True,           # type: bool\n                secret_store=None       # type: SecretStore\n               ):  # type: (...) -> None\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED><DED><DED>def stage_files(pathmapper,             # type: PathMapper\n                stage_func=None,        # type: Optional[Callable[..., Any]]\n                ignore_writable=False,  # type: bool\n                symlink=True,           # type: bool\n                secret_store=None       # type: Optional[SecretStore]\n               ):  # type: (...) -> None\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "common-workflow-language/cwltool",
    "commit": "a9078408aafdee0e0f7c27954fb80ef1a0c39e9c",
    "filename": "cwltool/process.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/common-workflow-language-cwltool/cwltool/process.py",
    "file_hunks_size": 13,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cwltool/process.py:225:16 Incompatible variable type [9]: secret_store is declared to have type `SecretStore` but is used as type `None`.",
    "message": " secret_store is declared to have type `SecretStore` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 225,
    "warning_line": "                secret_store=None       # type: SecretStore",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def stage_files(pathmapper,             # type: PathMapper\n                stage_func=None,        # type: Callable[..., Any]\n                ignore_writable=False,  # type: bool\n                symlink=True,           # type: bool\n                secret_store=None       # type: SecretStore\n               ):  # type: (...) -> None\n",
        "source_code_len": 333,
        "target_code": "def stage_files(pathmapper,             # type: PathMapper\n                stage_func=None,        # type: Optional[Callable[..., Any]]\n                ignore_writable=False,  # type: bool\n                symlink=True,           # type: bool\n                secret_store=None       # type: Optional[SecretStore]\n               ):  # type: (...) -> None\n",
        "target_code_len": 353,
        "diff_format": "@@ -221,6 +221,6 @@\n def stage_files(pathmapper,             # type: PathMapper\n-                stage_func=None,        # type: Callable[..., Any]\n+                stage_func=None,        # type: Optional[Callable[..., Any]]\n                 ignore_writable=False,  # type: bool\n                 symlink=True,           # type: bool\n-                secret_store=None       # type: SecretStore\n+                secret_store=None       # type: Optional[SecretStore]\n                ):  # type: (...) -> None\n",
        "source_code_with_indent": "<DED><DED><DED>def stage_files(pathmapper,             # type: PathMapper\n                stage_func=None,        # type: Callable[..., Any]\n                ignore_writable=False,  # type: bool\n                symlink=True,           # type: bool\n                secret_store=None       # type: SecretStore\n               ):  # type: (...) -> None\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED><DED><DED>def stage_files(pathmapper,             # type: PathMapper\n                stage_func=None,        # type: Optional[Callable[..., Any]]\n                ignore_writable=False,  # type: bool\n                symlink=True,           # type: bool\n                secret_store=None       # type: Optional[SecretStore]\n               ):  # type: (...) -> None\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "common-workflow-language/cwltool",
    "commit": "a9078408aafdee0e0f7c27954fb80ef1a0c39e9c",
    "filename": "cwltool/process.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/common-workflow-language-cwltool/cwltool/process.py",
    "file_hunks_size": 13,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cwltool/process.py:862:21 Incompatible variable type [9]: names is declared to have type `Set[str]` but is used as type `None`.",
    "message": " names is declared to have type `Set[str]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 862,
    "warning_line": "def uniquename(stem, names=None):  # type: (Text, Set[Text]) -> Text",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef uniquename(stem, names=None):  # type: (Text, Set[Text]) -> Text\n    global _names\n",
        "source_code_len": 88,
        "target_code": "\ndef uniquename(stem, names=None):  # type: (Text, Optional[Set[Text]]) -> Text\n    global _names\n",
        "target_code_len": 98,
        "diff_format": "@@ -861,3 +860,3 @@\n \n-def uniquename(stem, names=None):  # type: (Text, Set[Text]) -> Text\n+def uniquename(stem, names=None):  # type: (Text, Optional[Set[Text]]) -> Text\n     global _names\n",
        "source_code_with_indent": "\ndef uniquename(stem, names=None):  # type: (Text, Set[Text]) -> Text\n    <IND>global _names\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\ndef uniquename(stem, names=None):  # type: (Text, Optional[Set[Text]]) -> Text\n    <IND>global _names\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "common-workflow-language/cwltool",
    "commit": "a9078408aafdee0e0f7c27954fb80ef1a0c39e9c",
    "filename": "cwltool/provenance.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/common-workflow-language-cwltool/cwltool/provenance.py",
    "file_hunks_size": 58,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cwltool/provenance.py:176:4 Inconsistent override [14]: `cwltool.provenance.WritableBagFile.write` overrides method defined in `FileIO` inconsistently. Parameter of type `bytes` is not a supertype of the overridden parameter `Union[array.array[typing.Any], bytearray, bytes, memoryview, mmap.mmap]`.",
    "message": " `cwltool.provenance.WritableBagFile.write` overrides method defined in `FileIO` inconsistently. Parameter of type `bytes` is not a supertype of the overridden parameter `Union[array.array[typing.Any], bytearray, bytes, memoryview, mmap.mmap]`.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 176,
    "warning_line": "    def write(self, b):"
  },
  {
    "project": "common-workflow-language/cwltool",
    "commit": "a9078408aafdee0e0f7c27954fb80ef1a0c39e9c",
    "filename": "cwltool/provenance.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/common-workflow-language-cwltool/cwltool/provenance.py",
    "file_hunks_size": 58,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cwltool/provenance.py:317:17 Incompatible variable type [9]: run_uuid is declared to have type `uuid.UUID` but is used as type `None`.",
    "message": " run_uuid is declared to have type `uuid.UUID` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 317,
    "warning_line": "                 run_uuid=None           # type: uuid.UUID",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                 orcid,                  # type: str\n                 run_uuid=None           # type: uuid.UUID\n                ):  # type: (...) -> None\n",
        "source_code_len": 154,
        "target_code": "                 orcid,                  # type: str\n                 run_uuid=None           # type: Optional[uuid.UUID]\n                ):  # type: (...) -> None\n",
        "target_code_len": 164,
        "diff_format": "@@ -316,3 +307,3 @@\n                  orcid,                  # type: str\n-                 run_uuid=None           # type: uuid.UUID\n+                 run_uuid=None           # type: Optional[uuid.UUID]\n                 ):  # type: (...) -> None\n",
        "source_code_with_indent": "                 orcid,                  # type: str\n                 run_uuid=None           # type: uuid.UUID\n                ):  # type: (...) -> None\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                 orcid,                  # type: str\n                 run_uuid=None           # type: Optional[uuid.UUID]\n                ):  # type: (...) -> None\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "common-workflow-language/cwltool",
    "commit": "a9078408aafdee0e0f7c27954fb80ef1a0c39e9c",
    "filename": "cwltool/provenance.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/common-workflow-language-cwltool/cwltool/provenance.py",
    "file_hunks_size": 58,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cwltool/provenance.py:467:49 Incompatible variable type [9]: process_run_id is declared to have type `str` but is used as type `None`.",
    "message": " process_run_id is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 467,
    "warning_line": "    def record_process_start(self, process, job, process_run_id=None):",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def record_process_start(self, process, job, process_run_id=None):\n        # type: (Process, Any, str) -> Optional[str]\n        if not hasattr(process, 'steps'):\n",
        "source_code_len": 166,
        "target_code": "    def record_process_start(self, process, job, process_run_id=None):\n        # type: (Process, Any, Optional[str]) -> Optional[str]\n        if not hasattr(process, 'steps'):\n",
        "target_code_len": 176,
        "diff_format": "@@ -467,3 +457,3 @@\n     def record_process_start(self, process, job, process_run_id=None):\n-        # type: (Process, Any, str) -> Optional[str]\n+        # type: (Process, Any, Optional[str]) -> Optional[str]\n         if not hasattr(process, 'steps'):\n",
        "source_code_with_indent": "    <DED><DED>def record_process_start(self, process, job, process_run_id=None):\n        # type: (Process, Any, str) -> Optional[str]\n        <IND>if not hasattr(process, 'steps'):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED><DED>def record_process_start(self, process, job, process_run_id=None):\n        # type: (Process, Any, Optional[str]) -> Optional[str]\n        <IND>if not hasattr(process, 'steps'):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "common-workflow-language/cwltool",
    "commit": "a9078408aafdee0e0f7c27954fb80ef1a0c39e9c",
    "filename": "cwltool/provenance.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/common-workflow-language-cwltool/cwltool/provenance.py",
    "file_hunks_size": 58,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cwltool/provenance.py:796:23 Incompatible variable type [9]: name is declared to have type `str` but is used as type `None`.",
    "message": " name is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 796,
    "warning_line": "                       name=None             # type: str"
  },
  {
    "project": "common-workflow-language/cwltool",
    "commit": "a9078408aafdee0e0f7c27954fb80ef1a0c39e9c",
    "filename": "cwltool/provenance.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/common-workflow-language-cwltool/cwltool/provenance.py",
    "file_hunks_size": 58,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cwltool/provenance.py:1064:32 Incompatible variable type [9]: timestamp is declared to have type `datetime.datetime` but is used as type `None`.",
    "message": " timestamp is declared to have type `datetime.datetime` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 1064,
    "warning_line": "    def add_tagfile(self, path, timestamp=None):",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def add_tagfile(self, path, timestamp=None):\n        # type: (Text, datetime.datetime) -> None\n        \"\"\"Add tag files to our research object.\"\"\"\n",
        "source_code_len": 151,
        "target_code": "    def add_tagfile(self, path, timestamp=None):\n        # type: (Text, Optional[datetime.datetime]) -> None\n        \"\"\"Add tag files to our research object.\"\"\"\n",
        "target_code_len": 161,
        "diff_format": "@@ -1064,3 +1063,3 @@\n     def add_tagfile(self, path, timestamp=None):\n-        # type: (Text, datetime.datetime) -> None\n+        # type: (Text, Optional[datetime.datetime]) -> None\n         \"\"\"Add tag files to our research object.\"\"\"\n",
        "source_code_with_indent": "    <DED>def add_tagfile(self, path, timestamp=None):\n        # type: (Text, datetime.datetime) -> None\n        <IND>\"\"\"Add tag files to our research object.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def add_tagfile(self, path, timestamp=None):\n        # type: (Text, Optional[datetime.datetime]) -> None\n        <IND>\"\"\"Add tag files to our research object.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "common-workflow-language/cwltool",
    "commit": "a9078408aafdee0e0f7c27954fb80ef1a0c39e9c",
    "filename": "cwltool/provenance.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/common-workflow-language-cwltool/cwltool/provenance.py",
    "file_hunks_size": 58,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cwltool/provenance.py:1497:19 Incompatible variable type [9]: wf_job is declared to have type `typing.Callable[[Dict[str, str], typing.Callable[[typing.Any, typing.Any], typing.Any], RuntimeContext], Generator[typing.Any, None, None]]` but is used as type `None`.",
    "message": " wf_job is declared to have type `typing.Callable[[Dict[str, str], typing.Callable[[typing.Any, typing.Any], typing.Any], RuntimeContext], Generator[typing.Any, None, None]]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 1497,
    "warning_line": "                   wf_job=None,    # type: Callable[[Dict[Text, Text], Callable[[Any, Any], Any], RuntimeContext], Generator[Any, None, None]]",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def create_job(self,\n                   builder_job,    # type: Dict[Text, Any]\n                   wf_job=None,    # type: Callable[[Dict[Text, Text], Callable[[Any, Any], Any], RuntimeContext], Generator[Any, None, None]]\n                   is_output=False\n                  ):  # type: (...) -> Dict\n        #TODO customise the file\n",
        "source_code_len": 339,
        "target_code": "    def create_job(self,\n                   builder_job,     # type: Dict[Text, Any]\n                   wf_job=None,     # type: Optional[Callable[[Dict[Text, Text], Callable[[Any, Any], Any], RuntimeContext], Generator[Any, None, None]]]\n                   is_output=False  # type: bool\n                  ):  # type: (...) -> Dict[Text, Text]\n        #TODO customise the file\n",
        "target_code_len": 377,
        "diff_format": "@@ -1495,6 +1497,6 @@\n     def create_job(self,\n-                   builder_job,    # type: Dict[Text, Any]\n-                   wf_job=None,    # type: Callable[[Dict[Text, Text], Callable[[Any, Any], Any], RuntimeContext], Generator[Any, None, None]]\n-                   is_output=False\n-                  ):  # type: (...) -> Dict\n+                   builder_job,     # type: Dict[Text, Any]\n+                   wf_job=None,     # type: Optional[Callable[[Dict[Text, Text], Callable[[Any, Any], Any], RuntimeContext], Generator[Any, None, None]]]\n+                   is_output=False  # type: bool\n+                  ):  # type: (...) -> Dict[Text, Text]\n         #TODO customise the file\n",
        "source_code_with_indent": "    <DED>def create_job(self,\n                   builder_job,    # type: Dict[Text, Any]\n                   wf_job=None,    # type: Callable[[Dict[Text, Text], Callable[[Any, Any], Any], RuntimeContext], Generator[Any, None, None]]\n                   is_output=False\n                  ):  # type: (...) -> Dict\n        #TODO customise the file\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def create_job(self,\n                   builder_job,     # type: Dict[Text, Any]\n                   wf_job=None,     # type: Optional[Callable[[Dict[Text, Text], Callable[[Any, Any], Any], RuntimeContext], Generator[Any, None, None]]]\n                   is_output=False  # type: bool\n                  ):  # type: (...) -> Dict[Text, Text]\n        #TODO customise the file\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "common-workflow-language/cwltool",
    "commit": "a9078408aafdee0e0f7c27954fb80ef1a0c39e9c",
    "filename": "cwltool/singularity.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/common-workflow-language-cwltool/cwltool/singularity.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cwltool/singularity.py:205:30 Incompatible variable type [9]: tmp_outdir_prefix is declared to have type `str` but is used as type `None`.",
    "message": " tmp_outdir_prefix is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 205,
    "warning_line": "                              tmp_outdir_prefix=None  # type: Text",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                              force_pull=False,       # type: bool\n                              tmp_outdir_prefix=None  # type: Text\n                             ):\n",
        "source_code_len": 166,
        "target_code": "                              force_pull=False,       # type: bool\n                              tmp_outdir_prefix=None  # type: Optional[Text]\n                             ):\n",
        "target_code_len": 176,
        "diff_format": "@@ -204,3 +204,3 @@\n                               force_pull=False,       # type: bool\n-                              tmp_outdir_prefix=None  # type: Text\n+                              tmp_outdir_prefix=None  # type: Optional[Text]\n                              ):\n",
        "source_code_with_indent": "                              force_pull=False,       # type: bool\n                              tmp_outdir_prefix=None  # type: Text\n                             ):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                              force_pull=False,       # type: bool\n                              tmp_outdir_prefix=None  # type: Optional[Text]\n                             ):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "common-workflow-language/cwltool",
    "commit": "a9078408aafdee0e0f7c27954fb80ef1a0c39e9c",
    "filename": "cwltool/validate_js.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/common-workflow-language-cwltool/cwltool/validate_js.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cwltool/validate_js.py:90:23 Incompatible variable type [9]: globals is declared to have type `List[str]` but is used as type `None`.",
    "message": " globals is declared to have type `List[str]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 90,
    "warning_line": "def jshint_js(js_text, globals=None, options=None):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef jshint_js(js_text, globals=None, options=None):\n    # type: (Text, List[Text], Dict) -> Tuple[List[Text], List[Text]]\n    if globals is None:\n",
        "source_code_len": 147,
        "target_code": "\ndef jshint_js(js_text,       # type: Text\n              globals=None,  # type: Optional[List[Text]]\n              options=None   # type: Optional[Dict[Text, Union[List[Text], Text, int]]]\n             ):  # type: (...) -> Tuple[List[Text], List[Text]]\n    if globals is None:\n",
        "target_code_len": 277,
        "diff_format": "@@ -89,4 +89,6 @@\n \n-def jshint_js(js_text, globals=None, options=None):\n-    # type: (Text, List[Text], Dict) -> Tuple[List[Text], List[Text]]\n+def jshint_js(js_text,       # type: Text\n+              globals=None,  # type: Optional[List[Text]]\n+              options=None   # type: Optional[Dict[Text, Union[List[Text], Text, int]]]\n+             ):  # type: (...) -> Tuple[List[Text], List[Text]]\n     if globals is None:\n",
        "source_code_with_indent": "\ndef jshint_js(js_text, globals=None, options=None):\n    # type: (Text, List[Text], Dict) -> Tuple[List[Text], List[Text]]\n    <IND>if globals is None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\ndef jshint_js(js_text,       # type: Text\n              globals=None,  # type: Optional[List[Text]]\n              options=None   # type: Optional[Dict[Text, Union[List[Text], Text, int]]]\n             ):  # type: (...) -> Tuple[List[Text], List[Text]]\n    <IND>if globals is None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "common-workflow-language/cwltool",
    "commit": "a9078408aafdee0e0f7c27954fb80ef1a0c39e9c",
    "filename": "cwltool/validate_js.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/common-workflow-language-cwltool/cwltool/validate_js.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cwltool/validate_js.py:90:37 Incompatible variable type [9]: options is declared to have type `Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "message": " options is declared to have type `Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 90,
    "warning_line": "def jshint_js(js_text, globals=None, options=None):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef jshint_js(js_text, globals=None, options=None):\n    # type: (Text, List[Text], Dict) -> Tuple[List[Text], List[Text]]\n    if globals is None:\n",
        "source_code_len": 147,
        "target_code": "\ndef jshint_js(js_text,       # type: Text\n              globals=None,  # type: Optional[List[Text]]\n              options=None   # type: Optional[Dict[Text, Union[List[Text], Text, int]]]\n             ):  # type: (...) -> Tuple[List[Text], List[Text]]\n    if globals is None:\n",
        "target_code_len": 277,
        "diff_format": "@@ -89,4 +89,6 @@\n \n-def jshint_js(js_text, globals=None, options=None):\n-    # type: (Text, List[Text], Dict) -> Tuple[List[Text], List[Text]]\n+def jshint_js(js_text,       # type: Text\n+              globals=None,  # type: Optional[List[Text]]\n+              options=None   # type: Optional[Dict[Text, Union[List[Text], Text, int]]]\n+             ):  # type: (...) -> Tuple[List[Text], List[Text]]\n     if globals is None:\n",
        "source_code_with_indent": "\ndef jshint_js(js_text, globals=None, options=None):\n    # type: (Text, List[Text], Dict) -> Tuple[List[Text], List[Text]]\n    <IND>if globals is None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\ndef jshint_js(js_text,       # type: Text\n              globals=None,  # type: Optional[List[Text]]\n              options=None   # type: Optional[Dict[Text, Union[List[Text], Text, int]]]\n             ):  # type: (...) -> Tuple[List[Text], List[Text]]\n    <IND>if globals is None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "common-workflow-language/cwltool",
    "commit": "a9078408aafdee0e0f7c27954fb80ef1a0c39e9c",
    "filename": "cwltool/validate_js.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/common-workflow-language-cwltool/cwltool/validate_js.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cwltool/validate_js.py:161:42 Incompatible variable type [9]: jshint_options is declared to have type `Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "message": " jshint_options is declared to have type `Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 161,
    "warning_line": "def validate_js_expressions(tool, schema, jshint_options=None):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef get_expressions(tool,             # type: Union[CommentedMap, Any]\n                    schema,           # type: Optional[avro.schema.Schema]\n",
        "source_code_len": 147,
        "target_code": "\ndef get_expressions(tool,             # type: Union[CommentedMap, Text]\n                    schema,           # type: Optional[avro.schema.Schema]\n",
        "target_code_len": 148,
        "diff_format": "@@ -43,3 +43,3 @@\n \n-def get_expressions(tool,             # type: Union[CommentedMap, Any]\n+def get_expressions(tool,             # type: Union[CommentedMap, Text]\n                     schema,           # type: Optional[avro.schema.Schema]\n",
        "source_code_with_indent": "\ndef get_expressions(tool,             # type: Union[CommentedMap, Any]\n                    schema,           # type: Optional[avro.schema.Schema]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\ndef get_expressions(tool,             # type: Union[CommentedMap, Text]\n                    schema,           # type: Optional[avro.schema.Schema]\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef jshint_js(js_text, globals=None, options=None):\n    # type: (Text, List[Text], Dict) -> Tuple[List[Text], List[Text]]\n    if globals is None:\n",
        "source_code_len": 147,
        "target_code": "\ndef jshint_js(js_text,       # type: Text\n              globals=None,  # type: Optional[List[Text]]\n              options=None   # type: Optional[Dict[Text, Union[List[Text], Text, int]]]\n             ):  # type: (...) -> Tuple[List[Text], List[Text]]\n    if globals is None:\n",
        "target_code_len": 277,
        "diff_format": "@@ -89,4 +89,6 @@\n \n-def jshint_js(js_text, globals=None, options=None):\n-    # type: (Text, List[Text], Dict) -> Tuple[List[Text], List[Text]]\n+def jshint_js(js_text,       # type: Text\n+              globals=None,  # type: Optional[List[Text]]\n+              options=None   # type: Optional[Dict[Text, Union[List[Text], Text, int]]]\n+             ):  # type: (...) -> Tuple[List[Text], List[Text]]\n     if globals is None:\n",
        "source_code_with_indent": "\ndef jshint_js(js_text, globals=None, options=None):\n    # type: (Text, List[Text], Dict) -> Tuple[List[Text], List[Text]]\n    <IND>if globals is None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\ndef jshint_js(js_text,       # type: Text\n              globals=None,  # type: Optional[List[Text]]\n              options=None   # type: Optional[Dict[Text, Union[List[Text], Text, int]]]\n             ):  # type: (...) -> Tuple[List[Text], List[Text]]\n    <IND>if globals is None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef validate_js_expressions(tool, schema, jshint_options=None):\n    # type: (CommentedMap, Schema, Dict) -> None\n\n",
        "source_code_len": 115,
        "target_code": "\ndef validate_js_expressions(tool,                # type: CommentedMap\n                            schema,              # type: Schema\n                            jshint_options=None  # type: Optional[Dict[Text, Union[List[Text], Text, int]]]\n                           ):  # type: (...) -> None\n\n",
        "target_code_len": 297,
        "diff_format": "@@ -160,4 +162,6 @@\n \n-def validate_js_expressions(tool, schema, jshint_options=None):\n-    # type: (CommentedMap, Schema, Dict) -> None\n+def validate_js_expressions(tool,                # type: CommentedMap\n+                            schema,              # type: Schema\n+                            jshint_options=None  # type: Optional[Dict[Text, Union[List[Text], Text, int]]]\n+                           ):  # type: (...) -> None\n \n",
        "source_code_with_indent": "\n<DED><DED><DED>def validate_js_expressions(tool, schema, jshint_options=None):\n    # type: (CommentedMap, Schema, Dict) -> None\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED><DED><DED>def validate_js_expressions(tool,                # type: CommentedMap\n                            schema,              # type: Schema\n                            jshint_options=None  # type: Optional[Dict[Text, Union[List[Text], Text, int]]]\n                           ):  # type: (...) -> None\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "common-workflow-language/cwltool",
    "commit": "a9078408aafdee0e0f7c27954fb80ef1a0c39e9c",
    "filename": "typeshed/2and3/cachecontrol/wrapper.pyi",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/common-workflow-language-cwltool/typeshed/2and3/cachecontrol/wrapper.pyi",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "typeshed/2and3/cachecontrol/wrapper.pyi:11:17 Incompatible variable type [9]: cache is declared to have type `Union[BaseCache, DictCache]` but is used as type `None`.",
    "message": " cache is declared to have type `Union[BaseCache, DictCache]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 11,
    "warning_line": "                 cache: Union[DictCache, BaseCache] = None,"
  },
  {
    "project": "common-workflow-language/cwltool",
    "commit": "a9078408aafdee0e0f7c27954fb80ef1a0c39e9c",
    "filename": "typeshed/2and3/rdflib/graph.pyi",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/common-workflow-language-cwltool/typeshed/2and3/rdflib/graph.pyi",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "typeshed/2and3/rdflib/graph.pyi:72:24 Incompatible variable type [9]: destination is declared to have type `Union[IO[typing.Any], str]` but is used as type `None`.",
    "message": " destination is declared to have type `Union[IO[typing.Any], str]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 72,
    "warning_line": "    def serialize(self, destination: Union[Text, IO[Any]]=None, format: Text='', base: str=None, encoding: str=None, **args) -> Union[bytes, None]: ..."
  },
  {
    "project": "common-workflow-language/cwltool",
    "commit": "a9078408aafdee0e0f7c27954fb80ef1a0c39e9c",
    "filename": "typeshed/2and3/rdflib/graph.pyi",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/common-workflow-language-cwltool/typeshed/2and3/rdflib/graph.pyi",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "typeshed/2and3/rdflib/graph.pyi:72:81 Incompatible variable type [9]: base is declared to have type `str` but is used as type `None`.",
    "message": " base is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 72,
    "warning_line": "    def serialize(self, destination: Union[Text, IO[Any]]=None, format: Text='', base: str=None, encoding: str=None, **args) -> Union[bytes, None]: ..."
  },
  {
    "project": "common-workflow-language/cwltool",
    "commit": "a9078408aafdee0e0f7c27954fb80ef1a0c39e9c",
    "filename": "typeshed/2and3/rdflib/graph.pyi",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/common-workflow-language-cwltool/typeshed/2and3/rdflib/graph.pyi",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "typeshed/2and3/rdflib/graph.pyi:72:97 Incompatible variable type [9]: encoding is declared to have type `str` but is used as type `None`.",
    "message": " encoding is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 72,
    "warning_line": "    def serialize(self, destination: Union[Text, IO[Any]]=None, format: Text='', base: str=None, encoding: str=None, **args) -> Union[bytes, None]: ..."
  },
  {
    "project": "common-workflow-language/cwltool",
    "commit": "a9078408aafdee0e0f7c27954fb80ef1a0c39e9c",
    "filename": "typeshed/2and3/rdflib/graph.pyi",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/common-workflow-language-cwltool/typeshed/2and3/rdflib/graph.pyi",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "typeshed/2and3/rdflib/graph.pyi:73:20 Incompatible variable type [9]: source is declared to have type `str` but is used as type `None`.",
    "message": " source is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 73,
    "warning_line": "    def parse(self, source: str = None, publicID: str = None,"
  },
  {
    "project": "common-workflow-language/cwltool",
    "commit": "a9078408aafdee0e0f7c27954fb80ef1a0c39e9c",
    "filename": "typeshed/2and3/rdflib/graph.pyi",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/common-workflow-language-cwltool/typeshed/2and3/rdflib/graph.pyi",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "typeshed/2and3/rdflib/graph.pyi:73:40 Incompatible variable type [9]: publicID is declared to have type `str` but is used as type `None`.",
    "message": " publicID is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 73,
    "warning_line": "    def parse(self, source: str = None, publicID: str = None,"
  },
  {
    "project": "common-workflow-language/cwltool",
    "commit": "a9078408aafdee0e0f7c27954fb80ef1a0c39e9c",
    "filename": "typeshed/2and3/rdflib/graph.pyi",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/common-workflow-language-cwltool/typeshed/2and3/rdflib/graph.pyi",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "typeshed/2and3/rdflib/graph.pyi:74:14 Incompatible variable type [9]: format is declared to have type `str` but is used as type `None`.",
    "message": " format is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 74,
    "warning_line": "              format: Text = None,"
  },
  {
    "project": "common-workflow-language/cwltool",
    "commit": "a9078408aafdee0e0f7c27954fb80ef1a0c39e9c",
    "filename": "typeshed/2and3/rdflib/graph.pyi",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/common-workflow-language-cwltool/typeshed/2and3/rdflib/graph.pyi",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "typeshed/2and3/rdflib/graph.pyi:75:14 Incompatible variable type [9]: location is declared to have type `str` but is used as type `None`.",
    "message": " location is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 75,
    "warning_line": "              location: Text = None, file: IO[Any] = None,"
  },
  {
    "project": "common-workflow-language/cwltool",
    "commit": "a9078408aafdee0e0f7c27954fb80ef1a0c39e9c",
    "filename": "typeshed/2and3/rdflib/graph.pyi",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/common-workflow-language-cwltool/typeshed/2and3/rdflib/graph.pyi",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "typeshed/2and3/rdflib/graph.pyi:75:37 Incompatible variable type [9]: file is declared to have type `IO[typing.Any]` but is used as type `None`.",
    "message": " file is declared to have type `IO[typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 75,
    "warning_line": "              location: Text = None, file: IO[Any] = None,"
  },
  {
    "project": "common-workflow-language/cwltool",
    "commit": "a9078408aafdee0e0f7c27954fb80ef1a0c39e9c",
    "filename": "typeshed/2and3/rdflib/graph.pyi",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/common-workflow-language-cwltool/typeshed/2and3/rdflib/graph.pyi",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "typeshed/2and3/rdflib/graph.pyi:76:14 Incompatible variable type [9]: data is declared to have type `str` but is used as type `None`.",
    "message": " data is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 76,
    "warning_line": "              data: str = None, **args): ..."
  },
  {
    "project": "common-workflow-language/cwltool",
    "commit": "a9078408aafdee0e0f7c27954fb80ef1a0c39e9c",
    "filename": "typeshed/2and3/rdflib/graph.pyi",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/common-workflow-language-cwltool/typeshed/2and3/rdflib/graph.pyi",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "typeshed/2and3/rdflib/graph.pyi:78:73 Incompatible variable type [9]: initNs is declared to have type `Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "message": " initNs is declared to have type `Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 78,
    "warning_line": "    def query(self, query_object, processor: str = '', result: str = '', initNs: Dict = None, initBindings: Dict = None, use_store_provided: bool = True, **kwargs) -> Result: ..."
  },
  {
    "project": "common-workflow-language/cwltool",
    "commit": "a9078408aafdee0e0f7c27954fb80ef1a0c39e9c",
    "filename": "typeshed/2and3/rdflib/graph.pyi",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/common-workflow-language-cwltool/typeshed/2and3/rdflib/graph.pyi",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "typeshed/2and3/rdflib/graph.pyi:78:94 Incompatible variable type [9]: initBindings is declared to have type `Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "message": " initBindings is declared to have type `Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 78,
    "warning_line": "    def query(self, query_object, processor: str = '', result: str = '', initNs: Dict = None, initBindings: Dict = None, use_store_provided: bool = True, **kwargs) -> Result: ..."
  }
]